
RTOS CNC 3AXIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015448  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  080155d8  080155d8  000165d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f08  08015f08  00017290  2**0
                  CONTENTS
  4 .ARM          00000008  08015f08  08015f08  00016f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015f10  08015f10  00017290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015f10  08015f10  00016f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015f14  08015f14  00016f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08015f18  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00017290  2**0
                  CONTENTS
 10 .bss          00005494  20000290  20000290  00017290  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005724  20005724  00017290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00017290  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023d98  00000000  00000000  000172c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005418  00000000  00000000  0003b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e50  00000000  00000000  00040470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001786  00000000  00000000  000422c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002859f  00000000  00000000  00043a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026070  00000000  00000000  0006bfe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e872e  00000000  00000000  00092055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017a783  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009990  00000000  00000000  0017a7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  00184158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000290 	.word	0x20000290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080155c0 	.word	0x080155c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000294 	.word	0x20000294
 80001cc:	080155c0 	.word	0x080155c0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <Accel_Stepper_SetPin>:
 * dir_port : GPIO port of direction pin
 * dir_pin : gpio pin number of direction pin
 */
void Accel_Stepper_SetPin(Acceleration_t* Accel_stepper, GPIO_TypeDef* step_port,
		uint16_t step_pin, GPIO_TypeDef* dir_port, uint16_t dir_pin)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	80fb      	strh	r3, [r7, #6]
	Accel_stepper->Step_Port = step_port;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	651a      	str	r2, [r3, #80]	@ 0x50
	Accel_stepper->Step_Pin = step_pin;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	88fa      	ldrh	r2, [r7, #6]
 800101e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	Accel_stepper->Dir_Pin = dir_pin;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8b3a      	ldrh	r2, [r7, #24]
 8001026:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	Accel_stepper->Dir_Port = dir_port;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <Accel_Stepper_SetTimer>:
/*
 * Set Timer for each motor
 * timer : pointer to timer typedef(Which timer is use for control speed)
 */
void Accel_Stepper_SetTimer(Acceleration_t *Accel_stepper, TIM_HandleTypeDef* timer){
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	Accel_stepper->htim = timer;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <Accel_Stepper_TIMIT_Handler>:
/*
 * Accel_Stepper_TIMIT_Handler
 * stepper : Num of which stepper use found @ Stepper_t
 */
void Accel_Stepper_TIMIT_Handler(Acceleration_t *Accel_stepper){
 8001058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800105c:	b0a2      	sub	sp, #136	@ 0x88
 800105e:	af00      	add	r7, sp, #0
 8001060:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (state.stop_press) {
 8001064:	4bb4      	ldr	r3, [pc, #720]	@ (8001338 <Accel_Stepper_TIMIT_Handler+0x2e0>)
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <Accel_Stepper_TIMIT_Handler+0x1e>
        Accel_stepper->run_state = STOP;
 800106e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001072:	2300      	movs	r3, #0
 8001074:	7053      	strb	r3, [r2, #1]
    }

	__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, Accel_stepper->step_delay);
 8001076:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800107a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800107e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4603      	mov	r3, r0
 8001088:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800108a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800108e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001092:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001096:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001098:	4603      	mov	r3, r0
 800109a:	60d3      	str	r3, [r2, #12]

	switch(Accel_stepper->run_state) {
 800109c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010a0:	785b      	ldrb	r3, [r3, #1]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	f200 81eb 	bhi.w	800147e <Accel_Stepper_TIMIT_Handler+0x426>
 80010a8:	a201      	add	r2, pc, #4	@ (adr r2, 80010b0 <Accel_Stepper_TIMIT_Handler+0x58>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010c1 	.word	0x080010c1
 80010b4:	080010f7 	.word	0x080010f7
 80010b8:	0800133d 	.word	0x0800133d
 80010bc:	080012af 	.word	0x080012af
		case STOP:
			Accel_stepper->step_count = 0;
 80010c0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
			Accel_stepper->rest = 0;
 80010d0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		     // Stop Timer/Counter 1.
		   	HAL_TIM_Base_Stop_IT(Accel_stepper->htim);
 80010e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010e6:	4618      	mov	r0, r3
 80010e8:	f008 ff70 	bl	8009fcc <HAL_TIM_Base_Stop_IT>
		   	Accel_stepper->run_status = 0;
 80010ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
		   	break;
 80010f4:	e1c3      	b.n	800147e <Accel_Stepper_TIMIT_Handler+0x426>
	    case ACCEL:
	    	Accel_stepper->run_status = 1;
 80010f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80010fa:	2301      	movs	r3, #1
 80010fc:	7013      	strb	r3, [r2, #0]
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 80010fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001102:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001104:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001108:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800110c:	4619      	mov	r1, r3
 800110e:	4610      	mov	r0, r2
 8001110:	f006 f831 	bl	8007176 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 8001114:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001118:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800111c:	f112 0a01 	adds.w	sl, r2, #1
 8001120:	f143 0b00 	adc.w	fp, r3, #0
 8001124:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001128:	e9c3 ab0c 	strd	sl, fp, [r3, #48]	@ 0x30
			Accel_stepper->accel_count++;
 800112c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001130:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001134:	1c51      	adds	r1, r2, #1
 8001136:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001138:	f143 0300 	adc.w	r3, r3, #0
 800113c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800113e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001142:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8001146:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
			Accel_stepper->new_step_delay = Accel_stepper->step_delay - (((2 * (long)Accel_stepper->step_delay) + Accel_stepper->rest)/(4 * Accel_stepper->accel_count + 1));
 800114a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800114e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001152:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001156:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	17da      	asrs	r2, r3, #31
 8001160:	673b      	str	r3, [r7, #112]	@ 0x70
 8001162:	677a      	str	r2, [r7, #116]	@ 0x74
 8001164:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001168:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800116c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001170:	4641      	mov	r1, r8
 8001172:	1889      	adds	r1, r1, r2
 8001174:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001176:	4649      	mov	r1, r9
 8001178:	eb43 0101 	adc.w	r1, r3, r1
 800117c:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800117e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001182:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	f04f 0100 	mov.w	r1, #0
 800118e:	0099      	lsls	r1, r3, #2
 8001190:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001194:	0090      	lsls	r0, r2, #2
 8001196:	1c43      	adds	r3, r0, #1
 8001198:	663b      	str	r3, [r7, #96]	@ 0x60
 800119a:	f141 0300 	adc.w	r3, r1, #0
 800119e:	667b      	str	r3, [r7, #100]	@ 0x64
 80011a0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80011a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80011a8:	f7ff fd7e 	bl	8000ca8 <__aeabi_uldivmod>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	1aa1      	subs	r1, r4, r2
 80011b2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80011b4:	eb65 0303 	sbc.w	r3, r5, r3
 80011b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80011c2:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
			Accel_stepper->rest = ((2 * (long)Accel_stepper->step_delay)+Accel_stepper->rest)%(4 * Accel_stepper->accel_count + 1);
 80011c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	17da      	asrs	r2, r3, #31
 80011d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80011d6:	657a      	str	r2, [r7, #84]	@ 0x54
 80011d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80011e0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80011e4:	4621      	mov	r1, r4
 80011e6:	1889      	adds	r1, r1, r2
 80011e8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80011ea:	4629      	mov	r1, r5
 80011ec:	eb43 0101 	adc.w	r1, r3, r1
 80011f0:	64f9      	str	r1, [r7, #76]	@ 0x4c
 80011f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011f6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	008b      	lsls	r3, r1, #2
 8001204:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001208:	0082      	lsls	r2, r0, #2
 800120a:	1c51      	adds	r1, r2, #1
 800120c:	6439      	str	r1, [r7, #64]	@ 0x40
 800120e:	f143 0300 	adc.w	r3, r3, #0
 8001212:	647b      	str	r3, [r7, #68]	@ 0x44
 8001214:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001218:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800121c:	f7ff fd44 	bl	8000ca8 <__aeabi_uldivmod>
 8001220:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001224:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	      // Chech if we should start decelration.
			if(Accel_stepper->step_count >= Accel_stepper->decel_start) {
 8001228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800122c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001234:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001238:	4290      	cmp	r0, r2
 800123a:	eb71 0303 	sbcs.w	r3, r1, r3
 800123e:	d30c      	bcc.n	800125a <Accel_Stepper_TIMIT_Handler+0x202>
				Accel_stepper->accel_count = Accel_stepper->decel_val;
 8001240:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001244:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001248:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800124c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
				Accel_stepper->run_state = DECEL;
 8001250:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001254:	2202      	movs	r2, #2
 8001256:	705a      	strb	r2, [r3, #1]
				Accel_stepper->last_accel_delay = Accel_stepper->new_step_delay;
				Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
				Accel_stepper->rest = 0;
				Accel_stepper->run_state = RUN;
			}
			break;
 8001258:	e10c      	b.n	8001474 <Accel_Stepper_TIMIT_Handler+0x41c>
			else if(Accel_stepper->new_step_delay <= Accel_stepper->min_step_delay) {
 800125a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800125e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001262:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001266:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800126a:	4290      	cmp	r0, r2
 800126c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001270:	f0c0 8100 	bcc.w	8001474 <Accel_Stepper_TIMIT_Handler+0x41c>
				Accel_stepper->last_accel_delay = Accel_stepper->new_step_delay;
 8001274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001278:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800127c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001280:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
				Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
 8001284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001288:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800128c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001290:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
				Accel_stepper->rest = 0;
 8001294:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				Accel_stepper->run_state = RUN;
 80012a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012a8:	2203      	movs	r2, #3
 80012aa:	705a      	strb	r2, [r3, #1]
			break;
 80012ac:	e0e2      	b.n	8001474 <Accel_Stepper_TIMIT_Handler+0x41c>

	    case RUN:
	    	Accel_stepper->run_status = 1;
 80012ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 80012b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80012c4:	4619      	mov	r1, r3
 80012c6:	4610      	mov	r0, r2
 80012c8:	f005 ff55 	bl	8007176 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 80012cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80012d4:	1c54      	adds	r4, r2, #1
 80012d6:	f143 0500 	adc.w	r5, r3, #0
 80012da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012de:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
	    	Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
 80012e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012ea:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80012ee:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
//	         Check if we should start deceleration.
			 if(Accel_stepper->step_count >= Accel_stepper->decel_start) {
 80012f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012f6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80012fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001302:	4290      	cmp	r0, r2
 8001304:	eb71 0303 	sbcs.w	r3, r1, r3
 8001308:	f0c0 80b6 	bcc.w	8001478 <Accel_Stepper_TIMIT_Handler+0x420>
				 Accel_stepper->accel_count = Accel_stepper->decel_val;
 800130c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001310:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001314:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001318:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//	         Start deceleration with same delay as accel ended with.
				 Accel_stepper->new_step_delay = Accel_stepper->last_accel_delay;
 800131c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001320:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001324:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001328:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
				 Accel_stepper->run_state = DECEL;
 800132c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001330:	2202      	movs	r2, #2
 8001332:	705a      	strb	r2, [r3, #1]
			 }
			 break;
 8001334:	e0a0      	b.n	8001478 <Accel_Stepper_TIMIT_Handler+0x420>
 8001336:	bf00      	nop
 8001338:	20000a20 	.word	0x20000a20

	    case DECEL:
	    	Accel_stepper->run_status = 1;
 800133c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001340:	2301      	movs	r3, #1
 8001342:	7013      	strb	r3, [r2, #0]
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 8001344:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800134a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800134e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8001352:	4619      	mov	r1, r3
 8001354:	4610      	mov	r0, r2
 8001356:	f005 ff0e 	bl	8007176 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 800135a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800135e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001362:	f112 0801 	adds.w	r8, r2, #1
 8001366:	f143 0900 	adc.w	r9, r3, #0
 800136a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800136e:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
			 Accel_stepper->accel_count++;
 8001372:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001376:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800137a:	1c51      	adds	r1, r2, #1
 800137c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800137e:	f143 0300 	adc.w	r3, r3, #0
 8001382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001384:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001388:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800138c:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
			 Accel_stepper->new_step_delay = Accel_stepper->step_delay + (((2 * (long)Accel_stepper->step_delay) + Accel_stepper->rest)/(4 * abs(Accel_stepper->accel_count) + 1));
 8001390:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001394:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001398:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800139c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	17da      	asrs	r2, r3, #31
 80013a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80013a8:	637a      	str	r2, [r7, #52]	@ 0x34
 80013aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80013b2:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 80013b6:	4641      	mov	r1, r8
 80013b8:	1889      	adds	r1, r1, r2
 80013ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80013bc:	4649      	mov	r1, r9
 80013be:	eb43 0101 	adc.w	r1, r3, r1
 80013c2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80013c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80013cc:	4613      	mov	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bfb8      	it	lt
 80013d2:	425b      	neglt	r3, r3
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	3301      	adds	r3, #1
 80013d8:	17da      	asrs	r2, r3, #31
 80013da:	623b      	str	r3, [r7, #32]
 80013dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80013de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80013e6:	f7ff fc5f 	bl	8000ca8 <__aeabi_uldivmod>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	18a1      	adds	r1, r4, r2
 80013f0:	61b9      	str	r1, [r7, #24]
 80013f2:	eb45 0303 	adc.w	r3, r5, r3
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001400:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
			 Accel_stepper->rest = ((2 * (long)Accel_stepper->step_delay)+Accel_stepper->rest)%(4 * (long) abs(Accel_stepper->accel_count) + 1);
 8001404:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001408:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	17da      	asrs	r2, r3, #31
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	617a      	str	r2, [r7, #20]
 8001416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800141a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800141e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001422:	4621      	mov	r1, r4
 8001424:	1889      	adds	r1, r1, r2
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	4629      	mov	r1, r5
 800142a:	eb43 0101 	adc.w	r1, r3, r1
 800142e:	60f9      	str	r1, [r7, #12]
 8001430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001434:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001438:	4613      	mov	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	bfb8      	it	lt
 800143e:	425b      	neglt	r3, r3
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	3301      	adds	r3, #1
 8001444:	17da      	asrs	r2, r3, #31
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800144e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001452:	f7ff fc29 	bl	8000ca8 <__aeabi_uldivmod>
 8001456:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800145a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
//	         Check if we at last step
			 if(Accel_stepper->accel_count >= 0){
 800145e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001462:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001466:	2b00      	cmp	r3, #0
 8001468:	db08      	blt.n	800147c <Accel_Stepper_TIMIT_Handler+0x424>
				 Accel_stepper->run_state = STOP;
 800146a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800146e:	2200      	movs	r2, #0
 8001470:	705a      	strb	r2, [r3, #1]
			 }
			 break;
 8001472:	e003      	b.n	800147c <Accel_Stepper_TIMIT_Handler+0x424>
			break;
 8001474:	bf00      	nop
 8001476:	e002      	b.n	800147e <Accel_Stepper_TIMIT_Handler+0x426>
			 break;
 8001478:	bf00      	nop
 800147a:	e000      	b.n	800147e <Accel_Stepper_TIMIT_Handler+0x426>
			 break;
 800147c:	bf00      	nop
	  }
	 Accel_stepper->step_delay = Accel_stepper->new_step_delay;
 800147e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001482:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001486:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800148a:	e9c1 2302 	strd	r2, r3, [r1, #8]
//		  return rc;
}
 800148e:	bf00      	nop
 8001490:	3788      	adds	r7, #136	@ 0x88
 8001492:	46bd      	mov	sp, r7
 8001494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001498 <Accel_Stepper_Move>:
 * accel : acceleration
 * decel : deceleration
 * rpm : speed at run state
 */
void Accel_Stepper_Move(Acceleration_t *Accel_stepper, signed long long int step, unsigned long long int accel, unsigned long long int decel, unsigned long long int rpm)//acc*100
{
 8001498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800149c:	b0ab      	sub	sp, #172	@ 0xac
 800149e:	af00      	add	r7, sp, #0
 80014a0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80014a4:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	unsigned long long int max_step_lim; //! Number of steps before we hit max speed.
	unsigned long long int accel_lim;//! Number of steps before we must start deceleration (if accel does not hit max speed).
	unsigned long long int speed = 2 * 3.14159 * rpm/60;
 80014a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80014ac:	f7ff f87e 	bl	80005ac <__aeabi_ul2d>
 80014b0:	a3e8      	add	r3, pc, #928	@ (adr r3, 8001854 <Accel_Stepper_Move+0x3bc>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f8af 	bl	8000618 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4be2      	ldr	r3, [pc, #904]	@ (8001850 <Accel_Stepper_Move+0x3b8>)
 80014c8:	f7ff f9d0 	bl	800086c <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fc18 	bl	8000d08 <__aeabi_d2ulz>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	Accel_stepper->step_count = 0;
 80014e0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	if(step>0){
 80014f0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80014f4:	2a01      	cmp	r2, #1
 80014f6:	f173 0300 	sbcs.w	r3, r3, #0
 80014fa:	db14      	blt.n	8001526 <Accel_Stepper_Move+0x8e>
		HAL_GPIO_WritePin(Accel_stepper->Dir_Port, Accel_stepper->Dir_Pin, 1);
 80014fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001500:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001506:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800150a:	2201      	movs	r2, #1
 800150c:	4619      	mov	r1, r3
 800150e:	f005 fe19 	bl	8007144 <HAL_GPIO_WritePin>
		step = 2*step;
 8001512:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001516:	1891      	adds	r1, r2, r2
 8001518:	62b9      	str	r1, [r7, #40]	@ 0x28
 800151a:	415b      	adcs	r3, r3
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800151e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001522:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
//    srd.dir = CW;
	}
//   Set direction from sign on step value.
	if(step < 0){
 8001526:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800152a:	2b00      	cmp	r3, #0
 800152c:	da1c      	bge.n	8001568 <Accel_Stepper_Move+0xd0>
//    srd.dir = CCW;
		HAL_GPIO_WritePin(Accel_stepper->Dir_Port, Accel_stepper->Dir_Pin, 0);
 800152e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001532:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001538:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800153c:	2200      	movs	r2, #0
 800153e:	4619      	mov	r1, r3
 8001540:	f005 fe00 	bl	8007144 <HAL_GPIO_WritePin>
		step = -2*step;
 8001544:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	1a14      	subs	r4, r2, r0
 8001552:	eb63 0501 	sbc.w	r5, r3, r1
 8001556:	1923      	adds	r3, r4, r4
 8001558:	623b      	str	r3, [r7, #32]
 800155a:	eb45 0305 	adc.w	r3, r5, r5
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001560:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001564:	e9c7 4520 	strd	r4, r5, [r7, #128]	@ 0x80
	}


//  If moving only 1 step.
	if(step == 1){
 8001568:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800156c:	1e51      	subs	r1, r2, #1
 800156e:	430b      	orrs	r3, r1
 8001570:	d11a      	bne.n	80015a8 <Accel_Stepper_Move+0x110>

//      Move one step...
		Accel_stepper->accel_count = -1;
 8001572:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001576:	f04f 32ff 	mov.w	r2, #4294967295
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//      ...in DECEL state.
		Accel_stepper->run_state = DECEL;
 8001582:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001586:	2202      	movs	r2, #2
 8001588:	705a      	strb	r2, [r3, #1]
//      Just a short delay so main() can act on 'running'.
		Accel_stepper->step_delay = 1000;
 800158a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800158e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	e9c1 2302 	strd	r2, r3, [r1, #8]
//      status.running = TRUE;
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
 800159a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800159e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a0:	4618      	mov	r0, r3
 80015a2:	f008 fca3 	bl	8009eec <HAL_TIM_Base_Start_IT>
		Accel_stepper->accel_count = 0;
//    status.running = TRUE;
		__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, 1000);
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
	}
}
 80015a6:	e1cd      	b.n	8001944 <Accel_Stepper_Move+0x4ac>
	else if(step != 0){
 80015a8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80015ac:	4313      	orrs	r3, r2
 80015ae:	f000 81c9 	beq.w	8001944 <Accel_Stepper_Move+0x4ac>
		Accel_stepper->min_step_delay = ALPHA*TIM_FREQ/speed;
 80015b2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80015b6:	f7fe fff9 	bl	80005ac <__aeabi_ul2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	a19c      	add	r1, pc, #624	@ (adr r1, 8001830 <Accel_Stepper_Move+0x398>)
 80015c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015c4:	f7ff f952 	bl	800086c <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fb82 	bl	8000cd8 <__aeabi_d2lz>
 80015d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015d8:	e9c3 0108 	strd	r0, r1, [r3, #32]
		Accel_stepper->step_delay = (TIM_FREQ_SCALE * sqrt(A_SQ / accel))/10000;;
 80015dc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80015e0:	a195      	add	r1, pc, #596	@ (adr r1, 8001838 <Accel_Stepper_Move+0x3a0>)
 80015e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015e6:	f7ff fb5f 	bl	8000ca8 <__aeabi_uldivmod>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7fe ffdb 	bl	80005ac <__aeabi_ul2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	ec43 2b10 	vmov	d0, r2, r3
 80015fe:	f013 f8c5 	bl	801478c <sqrt>
 8001602:	ec51 0b10 	vmov	r0, r1, d0
 8001606:	a38e      	add	r3, pc, #568	@ (adr r3, 8001840 <Accel_Stepper_Move+0x3a8>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7ff f804 	bl	8000618 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	a38b      	add	r3, pc, #556	@ (adr r3, 8001848 <Accel_Stepper_Move+0x3b0>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7ff f925 	bl	800086c <__aeabi_ddiv>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fb6d 	bl	8000d08 <__aeabi_d2ulz>
 800162e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001632:	e9c3 0102 	strd	r0, r1, [r3, #8]
		max_step_lim = (long)speed*speed*10000/(long)(((long)A_x20000*accel)/100);
 8001636:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800163a:	17da      	asrs	r2, r3, #31
 800163c:	673b      	str	r3, [r7, #112]	@ 0x70
 800163e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001640:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001644:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001648:	462a      	mov	r2, r5
 800164a:	fb02 f203 	mul.w	r2, r2, r3
 800164e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001652:	4621      	mov	r1, r4
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	441a      	add	r2, r3
 800165a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800165e:	4621      	mov	r1, r4
 8001660:	fba3 ab01 	umull	sl, fp, r3, r1
 8001664:	eb02 030b 	add.w	r3, r2, fp
 8001668:	469b      	mov	fp, r3
 800166a:	4652      	mov	r2, sl
 800166c:	465b      	mov	r3, fp
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	0099      	lsls	r1, r3, #2
 8001678:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800167c:	0090      	lsls	r0, r2, #2
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	eb12 080a 	adds.w	r8, r2, sl
 8001686:	eb43 090b 	adc.w	r9, r3, fp
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800169a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800169e:	4690      	mov	r8, r2
 80016a0:	4699      	mov	r9, r3
 80016a2:	ebb8 030a 	subs.w	r3, r8, sl
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	eb69 030b 	sbc.w	r3, r9, fp
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80016ba:	4629      	mov	r1, r5
 80016bc:	010b      	lsls	r3, r1, #4
 80016be:	4621      	mov	r1, r4
 80016c0:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80016c4:	4621      	mov	r1, r4
 80016c6:	010a      	lsls	r2, r1, #4
 80016c8:	4611      	mov	r1, r2
 80016ca:	461a      	mov	r2, r3
 80016cc:	460b      	mov	r3, r1
 80016ce:	eb13 030a 	adds.w	r3, r3, sl
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	4613      	mov	r3, r2
 80016d6:	eb43 030b 	adc.w	r3, r3, fp
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016e8:	4629      	mov	r1, r5
 80016ea:	010b      	lsls	r3, r1, #4
 80016ec:	4621      	mov	r1, r4
 80016ee:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80016f2:	4621      	mov	r1, r4
 80016f4:	010a      	lsls	r2, r1, #4
 80016f6:	4614      	mov	r4, r2
 80016f8:	461d      	mov	r5, r3
 80016fa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	1896      	adds	r6, r2, r2
 8001704:	60be      	str	r6, [r7, #8]
 8001706:	415b      	adcs	r3, r3
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800170e:	1816      	adds	r6, r2, r0
 8001710:	603e      	str	r6, [r7, #0]
 8001712:	414b      	adcs	r3, r1
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001722:	464e      	mov	r6, r9
 8001724:	00f3      	lsls	r3, r6, #3
 8001726:	4646      	mov	r6, r8
 8001728:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 800172c:	4646      	mov	r6, r8
 800172e:	00f2      	lsls	r2, r6, #3
 8001730:	4690      	mov	r8, r2
 8001732:	4699      	mov	r9, r3
 8001734:	4643      	mov	r3, r8
 8001736:	181b      	adds	r3, r3, r0
 8001738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800173a:	464b      	mov	r3, r9
 800173c:	eb41 0303 	adc.w	r3, r1, r3
 8001740:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001742:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800174e:	f7ff faab 	bl	8000ca8 <__aeabi_uldivmod>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4613      	mov	r3, r2
 8001758:	17da      	asrs	r2, r3, #31
 800175a:	663b      	str	r3, [r7, #96]	@ 0x60
 800175c:	667a      	str	r2, [r7, #100]	@ 0x64
 800175e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7ff fa9f 	bl	8000ca8 <__aeabi_uldivmod>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		if(max_step_lim == 0){
 8001772:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001776:	4313      	orrs	r3, r2
 8001778:	d105      	bne.n	8001786 <Accel_Stepper_Move+0x2ee>
			max_step_lim = 1;
 800177a:	f04f 0201 	mov.w	r2, #1
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		accel_lim = ((long)step*decel) / (accel+decel);
 8001786:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800178a:	17da      	asrs	r2, r3, #31
 800178c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800178e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001794:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001798:	462a      	mov	r2, r5
 800179a:	fb02 f203 	mul.w	r2, r2, r3
 800179e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017a2:	4621      	mov	r1, r4
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	441a      	add	r2, r3
 80017aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80017ae:	4621      	mov	r1, r4
 80017b0:	fba3 1301 	umull	r1, r3, r3, r1
 80017b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017b6:	460b      	mov	r3, r1
 80017b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80017ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017bc:	18d3      	adds	r3, r2, r3
 80017be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017c0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80017c4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80017c8:	1884      	adds	r4, r0, r2
 80017ca:	653c      	str	r4, [r7, #80]	@ 0x50
 80017cc:	eb41 0303 	adc.w	r3, r1, r3
 80017d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80017d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80017d6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80017da:	f7ff fa65 	bl	8000ca8 <__aeabi_uldivmod>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		if(accel_lim == 0){
 80017e6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80017ea:	4313      	orrs	r3, r2
 80017ec:	d105      	bne.n	80017fa <Accel_Stepper_Move+0x362>
			accel_lim = 1;
 80017ee:	f04f 0201 	mov.w	r2, #1
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		if(accel_lim <= max_step_lim){
 80017fa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80017fe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001802:	4290      	cmp	r0, r2
 8001804:	eb71 0303 	sbcs.w	r3, r1, r3
 8001808:	d328      	bcc.n	800185c <Accel_Stepper_Move+0x3c4>
			Accel_stepper->decel_val = accel_lim - step;//decel_val: step for decel)
 800180a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800180e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001812:	1a84      	subs	r4, r0, r2
 8001814:	64bc      	str	r4, [r7, #72]	@ 0x48
 8001816:	eb61 0303 	sbc.w	r3, r1, r3
 800181a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800181c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001820:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001824:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001828:	e035      	b.n	8001896 <Accel_Stepper_Move+0x3fe>
 800182a:	bf00      	nop
 800182c:	f3af 8000 	nop.w
 8001830:	43958106 	.word	0x43958106
 8001834:	4093a28b 	.word	0x4093a28b
 8001838:	017f7eb0 	.word	0x017f7eb0
	...
 8001844:	4124a140 	.word	0x4124a140
 8001848:	00000000 	.word	0x00000000
 800184c:	40c38800 	.word	0x40c38800
 8001850:	404e0000 	.word	0x404e0000
 8001854:	f01b866e 	.word	0xf01b866e
 8001858:	401921f9 	.word	0x401921f9
			Accel_stepper->decel_val = -(((long)(max_step_lim*accel))/decel);
 800185c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001860:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	17da      	asrs	r2, r3, #31
 800186a:	643b      	str	r3, [r7, #64]	@ 0x40
 800186c:	647a      	str	r2, [r7, #68]	@ 0x44
 800186e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8001872:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001876:	f7ff fa17 	bl	8000ca8 <__aeabi_uldivmod>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	2100      	movs	r1, #0
 8001880:	4250      	negs	r0, r2
 8001882:	63b8      	str	r0, [r7, #56]	@ 0x38
 8001884:	eb61 0303 	sbc.w	r3, r1, r3
 8001888:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800188a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800188e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001892:	e9c1 2306 	strd	r2, r3, [r1, #24]
		if(Accel_stepper->decel_val == 0){
 8001896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800189a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	d107      	bne.n	80018b2 <Accel_Stepper_Move+0x41a>
			Accel_stepper->decel_val = -1;
 80018a2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018a6:	f04f 32ff 	mov.w	r2, #4294967295
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e9c1 2306 	strd	r2, r3, [r1, #24]
		Accel_stepper->decel_start = step + Accel_stepper->decel_val;
 80018b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018b6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80018ba:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80018be:	1884      	adds	r4, r0, r2
 80018c0:	633c      	str	r4, [r7, #48]	@ 0x30
 80018c2:	eb41 0303 	adc.w	r3, r1, r3
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80018c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80018cc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if(Accel_stepper->step_delay <= Accel_stepper->min_step_delay){
 80018d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018dc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018e0:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 80018e4:	4290      	cmp	r0, r2
 80018e6:	eb71 0303 	sbcs.w	r3, r1, r3
 80018ea:	d30c      	bcc.n	8001906 <Accel_Stepper_Move+0x46e>
			Accel_stepper->step_delay = Accel_stepper->min_step_delay;
 80018ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80018f4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Accel_stepper->run_state = RUN;
 80018fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001900:	2203      	movs	r2, #3
 8001902:	705a      	strb	r2, [r3, #1]
 8001904:	e003      	b.n	800190e <Accel_Stepper_Move+0x476>
			Accel_stepper->run_state = ACCEL;
 8001906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800190a:	2201      	movs	r2, #1
 800190c:	705a      	strb	r2, [r3, #1]
		Accel_stepper->accel_count = 0;
 800190e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, 1000);
 800191e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800192c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001932:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001936:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
 8001938:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800193c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193e:	4618      	mov	r0, r3
 8001940:	f008 fad4 	bl	8009eec <HAL_TIM_Base_Start_IT>
}
 8001944:	bf00      	nop
 8001946:	37ac      	adds	r7, #172	@ 0xac
 8001948:	46bd      	mov	sp, r7
 800194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800194e:	bf00      	nop

08001950 <initializeCNC_pos>:
#include "Inverse_cnc.h"

extern Inv_CNC_t CNC;
extern CNC_pos_t CNC_pos;

void initializeCNC_pos(CNC_pos_t *cnc) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	cnc->Lsw1 = 0;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
	cnc->Lsw2 = 0;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	705a      	strb	r2, [r3, #1]
	cnc->Lsw3 = 0;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	709a      	strb	r2, [r3, #2]
	cnc->Lsw4 = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	70da      	strb	r2, [r3, #3]
	cnc->Lsw5 = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	711a      	strb	r2, [r3, #4]
	cnc->Lsw6 = 0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	715a      	strb	r2, [r3, #5]
    cnc->accel1 = 0;
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    cnc->accel2 = 0;
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    cnc->accel3 = 0;
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    cnc->jerk1 = 0;
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    cnc->jerk2 = 0;
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    cnc->jerk3 = 0;
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
    cnc->max_speedXY = 30000;
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	a320      	add	r3, pc, #128	@ (adr r3, 8001a54 <initializeCNC_pos+0x104>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    cnc->max_speedZ = 30000;
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	a31d      	add	r3, pc, #116	@ (adr r3, 8001a54 <initializeCNC_pos+0x104>)
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    cnc->a_maxX = 10000;
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	a31c      	add	r3, pc, #112	@ (adr r3, 8001a5c <initializeCNC_pos+0x10c>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    cnc->j_maxX = 7000;
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	a31b      	add	r3, pc, #108	@ (adr r3, 8001a64 <initializeCNC_pos+0x114>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    cnc->a_maxY = 10000;
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	a316      	add	r3, pc, #88	@ (adr r3, 8001a5c <initializeCNC_pos+0x10c>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    cnc->j_maxY = 7000;
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	a315      	add	r3, pc, #84	@ (adr r3, 8001a64 <initializeCNC_pos+0x114>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    cnc->a_maxZ = 5000;
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	a314      	add	r3, pc, #80	@ (adr r3, 8001a6c <initializeCNC_pos+0x11c>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    cnc->j_maxZ = 2000;
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <initializeCNC_pos+0x100>)
 8001a2c:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
    cnc->t = 0.25;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8001a36:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    cnc->t1 = 0.5;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001a40:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	409f4000 	.word	0x409f4000
 8001a54:	00000000 	.word	0x00000000
 8001a58:	40dd4c00 	.word	0x40dd4c00
 8001a5c:	00000000 	.word	0x00000000
 8001a60:	40c38800 	.word	0x40c38800
 8001a64:	00000000 	.word	0x00000000
 8001a68:	40bb5800 	.word	0x40bb5800
 8001a6c:	00000000 	.word	0x00000000
 8001a70:	40b38800 	.word	0x40b38800

08001a74 <trans_to_posXY>:

void trans_to_posXY(float x,float y)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a7e:	edc7 0a00 	vstr	s1, [r7]
	CNC.set_posX = x - CNC.pos_x;
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7fe fd70 	bl	8000568 <__aeabi_f2d>
 8001a88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <trans_to_posXY+0x4c>)
 8001a8a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a8e:	f7fe fc0b 	bl	80002a8 <__aeabi_dsub>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	490a      	ldr	r1, [pc, #40]	@ (8001ac0 <trans_to_posXY+0x4c>)
 8001a98:	e9c1 2300 	strd	r2, r3, [r1]
	CNC.set_posY = y - CNC.pos_y;
 8001a9c:	6838      	ldr	r0, [r7, #0]
 8001a9e:	f7fe fd63 	bl	8000568 <__aeabi_f2d>
 8001aa2:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <trans_to_posXY+0x4c>)
 8001aa4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001aa8:	f7fe fbfe 	bl	80002a8 <__aeabi_dsub>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4903      	ldr	r1, [pc, #12]	@ (8001ac0 <trans_to_posXY+0x4c>)
 8001ab2:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000830 	.word	0x20000830

08001ac4 <trans_to_posZ>:
void trans_to_posZ(float z)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	ed87 0a01 	vstr	s0, [r7, #4]
	CNC.set_posZ = z - CNC.pos_z;
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7fe fd4a 	bl	8000568 <__aeabi_f2d>
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <trans_to_posZ+0x2c>)
 8001ad6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ada:	f7fe fbe5 	bl	80002a8 <__aeabi_dsub>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4903      	ldr	r1, [pc, #12]	@ (8001af0 <trans_to_posZ+0x2c>)
 8001ae4:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000830 	.word	0x20000830

08001af4 <caculate_pos>:

signed long long int caculate_pos(double pos, double pwm)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	ed87 0b02 	vstr	d0, [r7, #8]
 8001afe:	ed87 1b00 	vstr	d1, [r7]
	return pos*pwm;
 8001b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b0a:	f7fe fd85 	bl	8000618 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7ff f8df 	bl	8000cd8 <__aeabi_d2lz>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
}
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b2e:	463b      	mov	r3, r7
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ba0 <MX_ADC1_Init+0x78>)
 8001b3c:	4a19      	ldr	r2, [pc, #100]	@ (8001ba4 <MX_ADC1_Init+0x7c>)
 8001b3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b40:	4b17      	ldr	r3, [pc, #92]	@ (8001ba0 <MX_ADC1_Init+0x78>)
 8001b42:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b48:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <MX_ADC1_Init+0x78>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <MX_ADC1_Init+0x78>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <MX_ADC1_Init+0x78>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <MX_ADC1_Init+0x78>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <MX_ADC1_Init+0x78>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <MX_ADC1_Init+0x78>)
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba8 <MX_ADC1_Init+0x80>)
 8001b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <MX_ADC1_Init+0x78>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <MX_ADC1_Init+0x78>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <MX_ADC1_Init+0x78>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b82:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <MX_ADC1_Init+0x78>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b88:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <MX_ADC1_Init+0x78>)
 8001b8a:	f003 fecd 	bl	8005928 <HAL_ADC_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b94:	f001 fba2 	bl	80032dc <Error_Handler>
//  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
//  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//  {
//    Error_Handler();
//  }
}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200003d0 	.word	0x200003d0
 8001ba4:	40012000 	.word	0x40012000
 8001ba8:	0f000001 	.word	0x0f000001

08001bac <ADC_Select_CH10>:

void ADC_Select_CH10(void){
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
	ADC_ChannelConfTypeDef sConfig = {0};
 8001bb2:	463b      	mov	r3, r7
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_10;
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bca:	463b      	mov	r3, r7
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4806      	ldr	r0, [pc, #24]	@ (8001be8 <ADC_Select_CH10+0x3c>)
 8001bd0:	f004 f9ba 	bl	8005f48 <HAL_ADC_ConfigChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <ADC_Select_CH10+0x32>
  {
    Error_Handler();
 8001bda:	f001 fb7f 	bl	80032dc <Error_Handler>
  }
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200003d0 	.word	0x200003d0

08001bec <ADC_Select_CH11>:

void ADC_Select_CH11(void){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
	ADC_ChannelConfTypeDef sConfig = {0};
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_11;
 8001bfe:	230b      	movs	r3, #11
 8001c00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c02:	2301      	movs	r3, #1
 8001c04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001c06:	2301      	movs	r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4806      	ldr	r0, [pc, #24]	@ (8001c28 <ADC_Select_CH11+0x3c>)
 8001c10:	f004 f99a 	bl	8005f48 <HAL_ADC_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <ADC_Select_CH11+0x32>
  {
    Error_Handler();
 8001c1a:	f001 fb5f 	bl	80032dc <Error_Handler>
  }
}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200003d0 	.word	0x200003d0

08001c2c <MX_DMA_ADC_Init>:
/**
  * Enable DMA controller clock
  */
void MX_DMA_ADC_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <MX_DMA_ADC_Init+0x3c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c68 <MX_DMA_ADC_Init+0x3c>)
 8001c3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <MX_DMA_ADC_Init+0x3c>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2105      	movs	r1, #5
 8001c52:	2038      	movs	r0, #56	@ 0x38
 8001c54:	f004 fc7b 	bl	800654e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c58:	2038      	movs	r0, #56	@ 0x38
 8001c5a:	f004 fc94 	bl	8006586 <HAL_NVIC_EnableIRQ>

}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800

08001c6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	@ 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a33      	ldr	r2, [pc, #204]	@ (8001d58 <HAL_ADC_MspInit+0xec>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d15f      	bne.n	8001d4e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	4b32      	ldr	r3, [pc, #200]	@ (8001d5c <HAL_ADC_MspInit+0xf0>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	4a31      	ldr	r2, [pc, #196]	@ (8001d5c <HAL_ADC_MspInit+0xf0>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d5c <HAL_ADC_MspInit+0xf0>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b2b      	ldr	r3, [pc, #172]	@ (8001d5c <HAL_ADC_MspInit+0xf0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8001d5c <HAL_ADC_MspInit+0xf0>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cba:	4b28      	ldr	r3, [pc, #160]	@ (8001d5c <HAL_ADC_MspInit+0xf0>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4821      	ldr	r0, [pc, #132]	@ (8001d60 <HAL_ADC_MspInit+0xf4>)
 8001cda:	f005 f87f 	bl	8006ddc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cde:	4b21      	ldr	r3, [pc, #132]	@ (8001d64 <HAL_ADC_MspInit+0xf8>)
 8001ce0:	4a21      	ldr	r2, [pc, #132]	@ (8001d68 <HAL_ADC_MspInit+0xfc>)
 8001ce2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <HAL_ADC_MspInit+0xf8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cea:	4b1e      	ldr	r3, [pc, #120]	@ (8001d64 <HAL_ADC_MspInit+0xf8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <HAL_ADC_MspInit+0xf8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d64 <HAL_ADC_MspInit+0xf8>)
 8001cf8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cfc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cfe:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <HAL_ADC_MspInit+0xf8>)
 8001d00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d06:	4b17      	ldr	r3, [pc, #92]	@ (8001d64 <HAL_ADC_MspInit+0xf8>)
 8001d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d0e:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <HAL_ADC_MspInit+0xf8>)
 8001d10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d16:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <HAL_ADC_MspInit+0xf8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <HAL_ADC_MspInit+0xf8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d22:	4810      	ldr	r0, [pc, #64]	@ (8001d64 <HAL_ADC_MspInit+0xf8>)
 8001d24:	f004 fc4a 	bl	80065bc <HAL_DMA_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d2e:	f001 fad5 	bl	80032dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a0b      	ldr	r2, [pc, #44]	@ (8001d64 <HAL_ADC_MspInit+0xf8>)
 8001d36:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d38:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <HAL_ADC_MspInit+0xf8>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2105      	movs	r1, #5
 8001d42:	2012      	movs	r0, #18
 8001d44:	f004 fc03 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d48:	2012      	movs	r0, #18
 8001d4a:	f004 fc1c 	bl	8006586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	@ 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40012000 	.word	0x40012000
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020800 	.word	0x40020800
 8001d64:	20000418 	.word	0x20000418
 8001d68:	40026410 	.word	0x40026410

08001d6c <prepare_data>:
Coordinate Coor;
Data_Buffer SaveData;
/* USER CODE END PTD */

/* UART TX BEGIN */
void prepare_data(void) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af02      	add	r7, sp, #8
    snprintf(transmitData.voltage_data, sizeof(transmitData.voltage_data), "%.2f", LCD_adc.voltage);
 8001d72:	4b1d      	ldr	r3, [pc, #116]	@ (8001de8 <prepare_data+0x7c>)
 8001d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fbf6 	bl	8000568 <__aeabi_f2d>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	e9cd 2300 	strd	r2, r3, [sp]
 8001d84:	4a19      	ldr	r2, [pc, #100]	@ (8001dec <prepare_data+0x80>)
 8001d86:	2114      	movs	r1, #20
 8001d88:	4819      	ldr	r0, [pc, #100]	@ (8001df0 <prepare_data+0x84>)
 8001d8a:	f00e fc2d 	bl	80105e8 <sniprintf>
    snprintf(transmitData.current_data, sizeof(transmitData.current_data), "%.2f", LCD_adc.current);
 8001d8e:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <prepare_data+0x7c>)
 8001d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fbe8 	bl	8000568 <__aeabi_f2d>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	e9cd 2300 	strd	r2, r3, [sp]
 8001da0:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <prepare_data+0x80>)
 8001da2:	2114      	movs	r1, #20
 8001da4:	4813      	ldr	r0, [pc, #76]	@ (8001df4 <prepare_data+0x88>)
 8001da6:	f00e fc1f 	bl	80105e8 <sniprintf>
    snprintf(transmitData.temperature_data, sizeof(transmitData.temperature_data), "%.2f", LCD_adc.Temp);
 8001daa:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <prepare_data+0x7c>)
 8001dac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fbda 	bl	8000568 <__aeabi_f2d>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	e9cd 2300 	strd	r2, r3, [sp]
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001dec <prepare_data+0x80>)
 8001dbe:	2114      	movs	r1, #20
 8001dc0:	480d      	ldr	r0, [pc, #52]	@ (8001df8 <prepare_data+0x8c>)
 8001dc2:	f00e fc11 	bl	80105e8 <sniprintf>
    snprintf(transmitData.power_data, sizeof(transmitData.power_data), "%.2f", LCD_adc.power);
 8001dc6:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <prepare_data+0x7c>)
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbcc 	bl	8000568 <__aeabi_f2d>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	e9cd 2300 	strd	r2, r3, [sp]
 8001dd8:	4a04      	ldr	r2, [pc, #16]	@ (8001dec <prepare_data+0x80>)
 8001dda:	2114      	movs	r1, #20
 8001ddc:	4807      	ldr	r0, [pc, #28]	@ (8001dfc <prepare_data+0x90>)
 8001dde:	f00e fc03 	bl	80105e8 <sniprintf>
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200008b4 	.word	0x200008b4
 8001dec:	080155d8 	.word	0x080155d8
 8001df0:	2000047c 	.word	0x2000047c
 8001df4:	20000490 	.word	0x20000490
 8001df8:	200004a4 	.word	0x200004a4
 8001dfc:	200004b8 	.word	0x200004b8

08001e00 <send_uart_data>:

void send_uart_data(void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af04      	add	r7, sp, #16
    prepare_data();
 8001e06:	f7ff ffb1 	bl	8001d6c <prepare_data>
    int len = snprintf((char *)SaveData.buffer, sizeof(SaveData.buffer),
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <send_uart_data+0x3c>)
 8001e0c:	9302      	str	r3, [sp, #8]
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <send_uart_data+0x40>)
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <send_uart_data+0x44>)
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <send_uart_data+0x48>)
 8001e18:	4a0c      	ldr	r2, [pc, #48]	@ (8001e4c <send_uart_data+0x4c>)
 8001e1a:	2164      	movs	r1, #100	@ 0x64
 8001e1c:	480c      	ldr	r0, [pc, #48]	@ (8001e50 <send_uart_data+0x50>)
 8001e1e:	f00e fbe3 	bl	80105e8 <sniprintf>
 8001e22:	6078      	str	r0, [r7, #4]
                       "{\"voltage\":%s,\"current\":%s,\"temperature\":%s,\"power\":%s}\n",
                       transmitData.voltage_data,
                       transmitData.current_data,
                       transmitData.temperature_data,
                       transmitData.power_data);
    HAL_UART_Transmit_IT(&huart2, (uint8_t *)SaveData.buffer, len);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4909      	ldr	r1, [pc, #36]	@ (8001e50 <send_uart_data+0x50>)
 8001e2c:	4809      	ldr	r0, [pc, #36]	@ (8001e54 <send_uart_data+0x54>)
 8001e2e:	f008 fd01 	bl	800a834 <HAL_UART_Transmit_IT>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200004b8 	.word	0x200004b8
 8001e40:	200004a4 	.word	0x200004a4
 8001e44:	20000490 	.word	0x20000490
 8001e48:	2000047c 	.word	0x2000047c
 8001e4c:	080155e0 	.word	0x080155e0
 8001e50:	200004d8 	.word	0x200004d8
 8001e54:	20000bdc 	.word	0x20000bdc

08001e58 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
        // Do nothing, the timer will call send_uart_data to send data
    }
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <UART_transmit_init>:

void UART_transmit_init(void) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
    send_uart_data();
 8001e70:	f7ff ffc6 	bl	8001e00 <send_uart_data>
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <UART_RECEIVE_Init>:

/* UART TX END */

/* UART RX BEGIN */
void UART_RECEIVE_Init(void) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(&huart2, SaveData.rxBuffer, 1);  // Nhận từng byte một
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4903      	ldr	r1, [pc, #12]	@ (8001e8c <UART_RECEIVE_Init+0x14>)
 8001e80:	4803      	ldr	r0, [pc, #12]	@ (8001e90 <UART_RECEIVE_Init+0x18>)
 8001e82:	f008 fd7d 	bl	800a980 <HAL_UART_Receive_DMA>
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000053c 	.word	0x2000053c
 8001e90:	20000bdc 	.word	0x20000bdc

08001e94 <start_command>:

void start_command(void) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)"IP\n", 3);
 8001e98:	2203      	movs	r2, #3
 8001e9a:	4904      	ldr	r1, [pc, #16]	@ (8001eac <start_command+0x18>)
 8001e9c:	4804      	ldr	r0, [pc, #16]	@ (8001eb0 <start_command+0x1c>)
 8001e9e:	f008 fcc9 	bl	800a834 <HAL_UART_Transmit_IT>
	handle_start_button_press();
 8001ea2:	f002 fe07 	bl	8004ab4 <handle_start_button_press>
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	0801561c 	.word	0x0801561c
 8001eb0:	20000bdc 	.word	0x20000bdc

08001eb4 <stop_command>:

void stop_command(void) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	handle_stop_button_press();
 8001eb8:	f002 fe18 	bl	8004aec <handle_stop_button_press>
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <reset_command>:

void reset_command(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	handle_reset_button_press();
 8001ec4:	f002 fde6 	bl	8004a94 <handle_reset_button_press>
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <drill_on_command>:

void drill_on_command(void) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(drill_port, drill_pin, GPIO_PIN_SET);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ed6:	4802      	ldr	r0, [pc, #8]	@ (8001ee0 <drill_on_command+0x14>)
 8001ed8:	f005 f934 	bl	8007144 <HAL_GPIO_WritePin>
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40020400 	.word	0x40020400

08001ee4 <drill_off_command>:

void drill_off_command(void) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(drill_port, drill_pin, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eee:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <drill_off_command+0x14>)
 8001ef0:	f005 f928 	bl	8007144 <HAL_GPIO_WritePin>
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	00000000 	.word	0x00000000

08001f00 <low_command>:

void low_command(void) {
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 10000;
 8001f04:	491e      	ldr	r1, [pc, #120]	@ (8001f80 <low_command+0x80>)
 8001f06:	a31a      	add	r3, pc, #104	@ (adr r3, 8001f70 <low_command+0x70>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    CNC_pos.max_speedZ = 10000;
 8001f10:	491b      	ldr	r1, [pc, #108]	@ (8001f80 <low_command+0x80>)
 8001f12:	a317      	add	r3, pc, #92	@ (adr r3, 8001f70 <low_command+0x70>)
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    CNC_pos.a_maxX = 5000;
 8001f1c:	4918      	ldr	r1, [pc, #96]	@ (8001f80 <low_command+0x80>)
 8001f1e:	a316      	add	r3, pc, #88	@ (adr r3, 8001f78 <low_command+0x78>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    CNC_pos.j_maxX = 5000;
 8001f28:	4915      	ldr	r1, [pc, #84]	@ (8001f80 <low_command+0x80>)
 8001f2a:	a313      	add	r3, pc, #76	@ (adr r3, 8001f78 <low_command+0x78>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    CNC_pos.a_maxY = 5000;
 8001f34:	4912      	ldr	r1, [pc, #72]	@ (8001f80 <low_command+0x80>)
 8001f36:	a310      	add	r3, pc, #64	@ (adr r3, 8001f78 <low_command+0x78>)
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    CNC_pos.j_maxY = 5000;
 8001f40:	490f      	ldr	r1, [pc, #60]	@ (8001f80 <low_command+0x80>)
 8001f42:	a30d      	add	r3, pc, #52	@ (adr r3, 8001f78 <low_command+0x78>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    CNC_pos.a_maxZ = 2000;
 8001f4c:	490c      	ldr	r1, [pc, #48]	@ (8001f80 <low_command+0x80>)
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <low_command+0x84>)
 8001f54:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    CNC_pos.j_maxZ = 1000;
 8001f58:	4909      	ldr	r1, [pc, #36]	@ (8001f80 <low_command+0x80>)
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <low_command+0x88>)
 8001f60:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	00000000 	.word	0x00000000
 8001f74:	40c38800 	.word	0x40c38800
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	40b38800 	.word	0x40b38800
 8001f80:	20000770 	.word	0x20000770
 8001f84:	409f4000 	.word	0x409f4000
 8001f88:	408f4000 	.word	0x408f4000
 8001f8c:	00000000 	.word	0x00000000

08001f90 <medium_command>:

void medium_command(void) {
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 30000;
 8001f94:	4922      	ldr	r1, [pc, #136]	@ (8002020 <medium_command+0x90>)
 8001f96:	a31a      	add	r3, pc, #104	@ (adr r3, 8002000 <medium_command+0x70>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    CNC_pos.max_speedZ = 30000;
 8001fa0:	491f      	ldr	r1, [pc, #124]	@ (8002020 <medium_command+0x90>)
 8001fa2:	a317      	add	r3, pc, #92	@ (adr r3, 8002000 <medium_command+0x70>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    CNC_pos.a_maxX = 10000;
 8001fac:	491c      	ldr	r1, [pc, #112]	@ (8002020 <medium_command+0x90>)
 8001fae:	a316      	add	r3, pc, #88	@ (adr r3, 8002008 <medium_command+0x78>)
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    CNC_pos.j_maxX = 7000;
 8001fb8:	4919      	ldr	r1, [pc, #100]	@ (8002020 <medium_command+0x90>)
 8001fba:	a315      	add	r3, pc, #84	@ (adr r3, 8002010 <medium_command+0x80>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    CNC_pos.a_maxY = 10000;
 8001fc4:	4916      	ldr	r1, [pc, #88]	@ (8002020 <medium_command+0x90>)
 8001fc6:	a310      	add	r3, pc, #64	@ (adr r3, 8002008 <medium_command+0x78>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    CNC_pos.j_maxY = 7000;
 8001fd0:	4913      	ldr	r1, [pc, #76]	@ (8002020 <medium_command+0x90>)
 8001fd2:	a30f      	add	r3, pc, #60	@ (adr r3, 8002010 <medium_command+0x80>)
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    CNC_pos.a_maxZ = 5000;
 8001fdc:	4910      	ldr	r1, [pc, #64]	@ (8002020 <medium_command+0x90>)
 8001fde:	a30e      	add	r3, pc, #56	@ (adr r3, 8002018 <medium_command+0x88>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    CNC_pos.j_maxZ = 2000;
 8001fe8:	490d      	ldr	r1, [pc, #52]	@ (8002020 <medium_command+0x90>)
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <medium_command+0x94>)
 8001ff0:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	00000000 	.word	0x00000000
 8002004:	40dd4c00 	.word	0x40dd4c00
 8002008:	00000000 	.word	0x00000000
 800200c:	40c38800 	.word	0x40c38800
 8002010:	00000000 	.word	0x00000000
 8002014:	40bb5800 	.word	0x40bb5800
 8002018:	00000000 	.word	0x00000000
 800201c:	40b38800 	.word	0x40b38800
 8002020:	20000770 	.word	0x20000770
 8002024:	409f4000 	.word	0x409f4000

08002028 <high_command>:

void high_command(void) {
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 50000;
 800202c:	4922      	ldr	r1, [pc, #136]	@ (80020b8 <high_command+0x90>)
 800202e:	a31a      	add	r3, pc, #104	@ (adr r3, 8002098 <high_command+0x70>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    CNC_pos.max_speedZ = 50000;
 8002038:	491f      	ldr	r1, [pc, #124]	@ (80020b8 <high_command+0x90>)
 800203a:	a317      	add	r3, pc, #92	@ (adr r3, 8002098 <high_command+0x70>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    CNC_pos.a_maxX = 20000;
 8002044:	491c      	ldr	r1, [pc, #112]	@ (80020b8 <high_command+0x90>)
 8002046:	a316      	add	r3, pc, #88	@ (adr r3, 80020a0 <high_command+0x78>)
 8002048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    CNC_pos.j_maxX = 10000;
 8002050:	4919      	ldr	r1, [pc, #100]	@ (80020b8 <high_command+0x90>)
 8002052:	a315      	add	r3, pc, #84	@ (adr r3, 80020a8 <high_command+0x80>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    CNC_pos.a_maxY = 20000;
 800205c:	4916      	ldr	r1, [pc, #88]	@ (80020b8 <high_command+0x90>)
 800205e:	a310      	add	r3, pc, #64	@ (adr r3, 80020a0 <high_command+0x78>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    CNC_pos.j_maxY = 10000;
 8002068:	4913      	ldr	r1, [pc, #76]	@ (80020b8 <high_command+0x90>)
 800206a:	a30f      	add	r3, pc, #60	@ (adr r3, 80020a8 <high_command+0x80>)
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    CNC_pos.a_maxZ = 10000;
 8002074:	4910      	ldr	r1, [pc, #64]	@ (80020b8 <high_command+0x90>)
 8002076:	a30c      	add	r3, pc, #48	@ (adr r3, 80020a8 <high_command+0x80>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    CNC_pos.j_maxZ = 6000;
 8002080:	490d      	ldr	r1, [pc, #52]	@ (80020b8 <high_command+0x90>)
 8002082:	a30b      	add	r3, pc, #44	@ (adr r3, 80020b0 <high_command+0x88>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	00000000 	.word	0x00000000
 800209c:	40e86a00 	.word	0x40e86a00
 80020a0:	00000000 	.word	0x00000000
 80020a4:	40d38800 	.word	0x40d38800
 80020a8:	00000000 	.word	0x00000000
 80020ac:	40c38800 	.word	0x40c38800
 80020b0:	00000000 	.word	0x00000000
 80020b4:	40b77000 	.word	0x40b77000
 80020b8:	20000770 	.word	0x20000770

080020bc <add_coordinate>:

void add_coordinate(float x, float y, float z) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	ed87 0a03 	vstr	s0, [r7, #12]
 80020c6:	edc7 0a02 	vstr	s1, [r7, #8]
 80020ca:	ed87 1a01 	vstr	s2, [r7, #4]
    CoordinateNode *newNode = (CoordinateNode*)malloc(sizeof(CoordinateNode));
 80020ce:	2010      	movs	r0, #16
 80020d0:	f00d fa5c 	bl	800f58c <malloc>
 80020d4:	4603      	mov	r3, r0
 80020d6:	613b      	str	r3, [r7, #16]
    newNode->x = x;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	601a      	str	r2, [r3, #0]
    newNode->y = y;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	605a      	str	r2, [r3, #4]
    newNode->z = z;
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	609a      	str	r2, [r3, #8]
    newNode->next = NULL;
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]

    if (head == NULL) {
 80020f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <add_coordinate+0x68>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d103      	bne.n	8002100 <add_coordinate+0x44>
        head = newNode;
 80020f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <add_coordinate+0x68>)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	6013      	str	r3, [r2, #0]
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}
 80020fe:	e00d      	b.n	800211c <add_coordinate+0x60>
        CoordinateNode *current = head;
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <add_coordinate+0x68>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	617b      	str	r3, [r7, #20]
        while (current->next != NULL) {
 8002106:	e002      	b.n	800210e <add_coordinate+0x52>
            current = current->next;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	617b      	str	r3, [r7, #20]
        while (current->next != NULL) {
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f8      	bne.n	8002108 <add_coordinate+0x4c>
        current->next = newNode;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	60da      	str	r2, [r3, #12]
}
 800211c:	bf00      	nop
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000478 	.word	0x20000478

08002128 <clear_coordinates>:

void clear_coordinates(void) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
    CoordinateNode *current = head;
 800212e:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <clear_coordinates+0x34>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	607b      	str	r3, [r7, #4]
    CoordinateNode *next;

    while (current != NULL) {
 8002134:	e007      	b.n	8002146 <clear_coordinates+0x1e>
        next = current->next;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	603b      	str	r3, [r7, #0]
        free(current);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f00d fa2d 	bl	800f59c <free>
        current = next;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	607b      	str	r3, [r7, #4]
    while (current != NULL) {
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f4      	bne.n	8002136 <clear_coordinates+0xe>
    }

    head = NULL;
 800214c:	4b03      	ldr	r3, [pc, #12]	@ (800215c <clear_coordinates+0x34>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000478 	.word	0x20000478

08002160 <move_to_coordinates>:

void move_to_coordinates(void) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
    CoordinateNode *current = head;
 8002166:	4b17      	ldr	r3, [pc, #92]	@ (80021c4 <move_to_coordinates+0x64>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	607b      	str	r3, [r7, #4]

    while (current != NULL) {
 800216c:	e021      	b.n	80021b2 <move_to_coordinates+0x52>
    	Coor.coordinate_X = current->x;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a15      	ldr	r2, [pc, #84]	@ (80021c8 <move_to_coordinates+0x68>)
 8002174:	6013      	str	r3, [r2, #0]
    	Coor.coordinate_Y = current->y;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4a13      	ldr	r2, [pc, #76]	@ (80021c8 <move_to_coordinates+0x68>)
 800217c:	6053      	str	r3, [r2, #4]
    	Coor.coordinate_Z = current->z;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	4a11      	ldr	r2, [pc, #68]	@ (80021c8 <move_to_coordinates+0x68>)
 8002184:	6093      	str	r3, [r2, #8]
        MoveToPosXY(Coor.coordinate_X, Coor.coordinate_Y);
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <move_to_coordinates+0x68>)
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <move_to_coordinates+0x68>)
 800218e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002192:	eef0 0a47 	vmov.f32	s1, s14
 8002196:	eeb0 0a67 	vmov.f32	s0, s15
 800219a:	f000 f97d 	bl	8002498 <MoveToPosXY>
        MoveToPosZ(Coor.coordinate_Z);
 800219e:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <move_to_coordinates+0x68>)
 80021a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80021a4:	eeb0 0a67 	vmov.f32	s0, s15
 80021a8:	f000 fb3a 	bl	8002820 <MoveToPosZ>
        current = current->next;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	607b      	str	r3, [r7, #4]
    while (current != NULL) {
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1da      	bne.n	800216e <move_to_coordinates+0xe>
    }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000478 	.word	0x20000478
 80021c8:	200004cc 	.word	0x200004cc

080021cc <process_goto_command>:

void process_goto_command(char *cmd) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	6078      	str	r0, [r7, #4]
    char *line = strtok(cmd, "GOTO");
 80021d4:	491c      	ldr	r1, [pc, #112]	@ (8002248 <process_goto_command+0x7c>)
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f00e fb06 	bl	80107e8 <strtok>
 80021dc:	6178      	str	r0, [r7, #20]
    clear_coordinates(); // Xóa danh sách tọa độ hiện tại
 80021de:	f7ff ffa3 	bl	8002128 <clear_coordinates>

    while (line != NULL) {
 80021e2:	e021      	b.n	8002228 <process_goto_command+0x5c>
        float x, y, z;
        if (sscanf(line, "%f,%f,%f", &x, &y, &z) == 3) {
 80021e4:	f107 010c 	add.w	r1, r7, #12
 80021e8:	f107 0210 	add.w	r2, r7, #16
 80021ec:	f107 0308 	add.w	r3, r7, #8
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	460b      	mov	r3, r1
 80021f4:	4915      	ldr	r1, [pc, #84]	@ (800224c <process_goto_command+0x80>)
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f00e fa4a 	bl	8010690 <siscanf>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d10d      	bne.n	800221e <process_goto_command+0x52>
            add_coordinate(x, y, z);
 8002202:	edd7 7a04 	vldr	s15, [r7, #16]
 8002206:	ed97 7a03 	vldr	s14, [r7, #12]
 800220a:	edd7 6a02 	vldr	s13, [r7, #8]
 800220e:	eeb0 1a66 	vmov.f32	s2, s13
 8002212:	eef0 0a47 	vmov.f32	s1, s14
 8002216:	eeb0 0a67 	vmov.f32	s0, s15
 800221a:	f7ff ff4f 	bl	80020bc <add_coordinate>
        }
        line = strtok(NULL, "GOTO");
 800221e:	490a      	ldr	r1, [pc, #40]	@ (8002248 <process_goto_command+0x7c>)
 8002220:	2000      	movs	r0, #0
 8002222:	f00e fae1 	bl	80107e8 <strtok>
 8002226:	6178      	str	r0, [r7, #20]
    while (line != NULL) {
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1da      	bne.n	80021e4 <process_goto_command+0x18>
    }

    state.start_press = 1; // Đặt cờ để bắt đầu di chuyển đến tọa độ
 800222e:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <process_goto_command+0x84>)
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
    state.stop_press = 0;
 8002234:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <process_goto_command+0x84>)
 8002236:	2200      	movs	r2, #0
 8002238:	705a      	strb	r2, [r3, #1]
    state.reset_press = 0;
 800223a:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <process_goto_command+0x84>)
 800223c:	2200      	movs	r2, #0
 800223e:	709a      	strb	r2, [r3, #2]
}
 8002240:	bf00      	nop
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	08015620 	.word	0x08015620
 800224c:	08015628 	.word	0x08015628
 8002250:	20000a20 	.word	0x20000a20

08002254 <UART_rx_process>:

void UART_rx_process(void) {
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
    if (SaveData.cmdstate) {
 8002258:	4b34      	ldr	r3, [pc, #208]	@ (800232c <UART_rx_process+0xd8>)
 800225a:	f893 3278 	ldrb.w	r3, [r3, #632]	@ 0x278
 800225e:	2b00      	cmp	r3, #0
 8002260:	d062      	beq.n	8002328 <UART_rx_process+0xd4>
    	SaveData.cmdstate = 0;
 8002262:	4b32      	ldr	r3, [pc, #200]	@ (800232c <UART_rx_process+0xd8>)
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278

        if (strcmp(SaveData.cmd, "START") == 0) {
 800226a:	4931      	ldr	r1, [pc, #196]	@ (8002330 <UART_rx_process+0xdc>)
 800226c:	4831      	ldr	r0, [pc, #196]	@ (8002334 <UART_rx_process+0xe0>)
 800226e:	f7fd ffaf 	bl	80001d0 <strcmp>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <UART_rx_process+0x2a>
            start_command();
 8002278:	f7ff fe0c 	bl	8001e94 <start_command>
            process_goto_command(SaveData.cmd);
        } else {
        	process_ip_address(SaveData.cmd);
        }
    }
}
 800227c:	e054      	b.n	8002328 <UART_rx_process+0xd4>
        } else if (strcmp(SaveData.cmd, "STOP") == 0) {
 800227e:	492e      	ldr	r1, [pc, #184]	@ (8002338 <UART_rx_process+0xe4>)
 8002280:	482c      	ldr	r0, [pc, #176]	@ (8002334 <UART_rx_process+0xe0>)
 8002282:	f7fd ffa5 	bl	80001d0 <strcmp>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <UART_rx_process+0x3e>
            stop_command();
 800228c:	f7ff fe12 	bl	8001eb4 <stop_command>
}
 8002290:	e04a      	b.n	8002328 <UART_rx_process+0xd4>
        } else if (strcmp(SaveData.cmd, "RESET") == 0) {
 8002292:	492a      	ldr	r1, [pc, #168]	@ (800233c <UART_rx_process+0xe8>)
 8002294:	4827      	ldr	r0, [pc, #156]	@ (8002334 <UART_rx_process+0xe0>)
 8002296:	f7fd ff9b 	bl	80001d0 <strcmp>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <UART_rx_process+0x52>
            reset_command();
 80022a0:	f7ff fe0e 	bl	8001ec0 <reset_command>
}
 80022a4:	e040      	b.n	8002328 <UART_rx_process+0xd4>
        } else if (strcmp(SaveData.cmd, "ON") == 0) {
 80022a6:	4926      	ldr	r1, [pc, #152]	@ (8002340 <UART_rx_process+0xec>)
 80022a8:	4822      	ldr	r0, [pc, #136]	@ (8002334 <UART_rx_process+0xe0>)
 80022aa:	f7fd ff91 	bl	80001d0 <strcmp>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <UART_rx_process+0x66>
            drill_on_command();
 80022b4:	f7ff fe0a 	bl	8001ecc <drill_on_command>
}
 80022b8:	e036      	b.n	8002328 <UART_rx_process+0xd4>
        } else if (strcmp(SaveData.cmd, "OFF") == 0) {
 80022ba:	4922      	ldr	r1, [pc, #136]	@ (8002344 <UART_rx_process+0xf0>)
 80022bc:	481d      	ldr	r0, [pc, #116]	@ (8002334 <UART_rx_process+0xe0>)
 80022be:	f7fd ff87 	bl	80001d0 <strcmp>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d102      	bne.n	80022ce <UART_rx_process+0x7a>
            drill_off_command();
 80022c8:	f7ff fe0c 	bl	8001ee4 <drill_off_command>
}
 80022cc:	e02c      	b.n	8002328 <UART_rx_process+0xd4>
        } else if (strcmp(SaveData.cmd, "LOW") == 0) {
 80022ce:	491e      	ldr	r1, [pc, #120]	@ (8002348 <UART_rx_process+0xf4>)
 80022d0:	4818      	ldr	r0, [pc, #96]	@ (8002334 <UART_rx_process+0xe0>)
 80022d2:	f7fd ff7d 	bl	80001d0 <strcmp>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <UART_rx_process+0x8e>
            low_command();
 80022dc:	f7ff fe10 	bl	8001f00 <low_command>
}
 80022e0:	e022      	b.n	8002328 <UART_rx_process+0xd4>
        } else if (strcmp(SaveData.cmd, "MEDIUM") == 0) {
 80022e2:	491a      	ldr	r1, [pc, #104]	@ (800234c <UART_rx_process+0xf8>)
 80022e4:	4813      	ldr	r0, [pc, #76]	@ (8002334 <UART_rx_process+0xe0>)
 80022e6:	f7fd ff73 	bl	80001d0 <strcmp>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <UART_rx_process+0xa2>
            medium_command();
 80022f0:	f7ff fe4e 	bl	8001f90 <medium_command>
}
 80022f4:	e018      	b.n	8002328 <UART_rx_process+0xd4>
        } else if (strcmp(SaveData.cmd, "HIGH") == 0) {
 80022f6:	4916      	ldr	r1, [pc, #88]	@ (8002350 <UART_rx_process+0xfc>)
 80022f8:	480e      	ldr	r0, [pc, #56]	@ (8002334 <UART_rx_process+0xe0>)
 80022fa:	f7fd ff69 	bl	80001d0 <strcmp>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d102      	bne.n	800230a <UART_rx_process+0xb6>
            high_command();
 8002304:	f7ff fe90 	bl	8002028 <high_command>
}
 8002308:	e00e      	b.n	8002328 <UART_rx_process+0xd4>
        } else if (strncmp(SaveData.cmd, "GOTO", 4) == 0) {
 800230a:	2204      	movs	r2, #4
 800230c:	4911      	ldr	r1, [pc, #68]	@ (8002354 <UART_rx_process+0x100>)
 800230e:	4809      	ldr	r0, [pc, #36]	@ (8002334 <UART_rx_process+0xe0>)
 8002310:	f00e fa44 	bl	801079c <strncmp>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <UART_rx_process+0xce>
            process_goto_command(SaveData.cmd);
 800231a:	4806      	ldr	r0, [pc, #24]	@ (8002334 <UART_rx_process+0xe0>)
 800231c:	f7ff ff56 	bl	80021cc <process_goto_command>
}
 8002320:	e002      	b.n	8002328 <UART_rx_process+0xd4>
        	process_ip_address(SaveData.cmd);
 8002322:	4804      	ldr	r0, [pc, #16]	@ (8002334 <UART_rx_process+0xe0>)
 8002324:	f000 f818 	bl	8002358 <process_ip_address>
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}
 800232c:	200004d8 	.word	0x200004d8
 8002330:	08015634 	.word	0x08015634
 8002334:	2000063c 	.word	0x2000063c
 8002338:	0801563c 	.word	0x0801563c
 800233c:	08015644 	.word	0x08015644
 8002340:	0801564c 	.word	0x0801564c
 8002344:	08015650 	.word	0x08015650
 8002348:	08015654 	.word	0x08015654
 800234c:	08015658 	.word	0x08015658
 8002350:	08015660 	.word	0x08015660
 8002354:	08015620 	.word	0x08015620

08002358 <process_ip_address>:

void process_ip_address(char *ip_address) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
    // Store the received IP address
    strncpy(SaveData.ip_config, ip_address, sizeof(SaveData.ip_config) - 1);
 8002360:	2213      	movs	r2, #19
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4805      	ldr	r0, [pc, #20]	@ (800237c <process_ip_address+0x24>)
 8002366:	f00e fa2b 	bl	80107c0 <strncpy>
    SaveData.ip_config[sizeof(SaveData.ip_config) - 1] = '\0';  // Ensure null termination
 800236a:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <process_ip_address+0x28>)
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2277 	strb.w	r2, [r3, #631]	@ 0x277
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	2000073c 	.word	0x2000073c
 8002380:	200004d8 	.word	0x200004d8

08002384 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
    static uint8_t index = 0;

    if (huart->Instance == USART2) {
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a22      	ldr	r2, [pc, #136]	@ (800241c <HAL_UART_RxCpltCallback+0x98>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d13e      	bne.n	8002414 <HAL_UART_RxCpltCallback+0x90>
        if (SaveData.rxBuffer[0] != '\r' && SaveData.rxBuffer[0] != '\n') {
 8002396:	4b22      	ldr	r3, [pc, #136]	@ (8002420 <HAL_UART_RxCpltCallback+0x9c>)
 8002398:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800239c:	2b0d      	cmp	r3, #13
 800239e:	d017      	beq.n	80023d0 <HAL_UART_RxCpltCallback+0x4c>
 80023a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <HAL_UART_RxCpltCallback+0x9c>)
 80023a2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80023a6:	2b0a      	cmp	r3, #10
 80023a8:	d012      	beq.n	80023d0 <HAL_UART_RxCpltCallback+0x4c>
            if (index < sizeof(SaveData.cmd) - 1) {
 80023aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002424 <HAL_UART_RxCpltCallback+0xa0>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2bff      	cmp	r3, #255	@ 0xff
 80023b0:	d02b      	beq.n	800240a <HAL_UART_RxCpltCallback+0x86>
            	SaveData.cmd[index++] = SaveData.rxBuffer[0];
 80023b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002424 <HAL_UART_RxCpltCallback+0xa0>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	b2d1      	uxtb	r1, r2
 80023ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002424 <HAL_UART_RxCpltCallback+0xa0>)
 80023bc:	7011      	strb	r1, [r2, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	4b17      	ldr	r3, [pc, #92]	@ (8002420 <HAL_UART_RxCpltCallback+0x9c>)
 80023c2:	f893 2064 	ldrb.w	r2, [r3, #100]	@ 0x64
 80023c6:	4b16      	ldr	r3, [pc, #88]	@ (8002420 <HAL_UART_RxCpltCallback+0x9c>)
 80023c8:	440b      	add	r3, r1
 80023ca:	f883 2164 	strb.w	r2, [r3, #356]	@ 0x164
            if (index < sizeof(SaveData.cmd) - 1) {
 80023ce:	e01c      	b.n	800240a <HAL_UART_RxCpltCallback+0x86>
            }
        } else if (SaveData.rxBuffer[0] == '\r') {
 80023d0:	4b13      	ldr	r3, [pc, #76]	@ (8002420 <HAL_UART_RxCpltCallback+0x9c>)
 80023d2:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80023d6:	2b0d      	cmp	r3, #13
 80023d8:	d117      	bne.n	800240a <HAL_UART_RxCpltCallback+0x86>
            if (index > 0) {
 80023da:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <HAL_UART_RxCpltCallback+0xa0>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d013      	beq.n	800240a <HAL_UART_RxCpltCallback+0x86>
            	SaveData.cmd[index] = '\0';
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <HAL_UART_RxCpltCallback+0xa0>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <HAL_UART_RxCpltCallback+0x9c>)
 80023ea:	4413      	add	r3, r2
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2164 	strb.w	r2, [r3, #356]	@ 0x164
                index = 0;
 80023f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <HAL_UART_RxCpltCallback+0xa0>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
                SaveData.cmdstate = 1;
 80023f8:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <HAL_UART_RxCpltCallback+0x9c>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278
                osSemaphoreRelease(uartRxSemaphoreHandle);
 8002400:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <HAL_UART_RxCpltCallback+0xa4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f009 fedf 	bl	800c1c8 <osSemaphoreRelease>
            }
        }
        HAL_UART_Receive_DMA(&huart2, SaveData.rxBuffer, 1);
 800240a:	2201      	movs	r2, #1
 800240c:	4907      	ldr	r1, [pc, #28]	@ (800242c <HAL_UART_RxCpltCallback+0xa8>)
 800240e:	4808      	ldr	r0, [pc, #32]	@ (8002430 <HAL_UART_RxCpltCallback+0xac>)
 8002410:	f008 fab6 	bl	800a980 <HAL_UART_Receive_DMA>
    }
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40004400 	.word	0x40004400
 8002420:	200004d8 	.word	0x200004d8
 8002424:	20000751 	.word	0x20000751
 8002428:	20000758 	.word	0x20000758
 800242c:	2000053c 	.word	0x2000053c
 8002430:	20000bdc 	.word	0x20000bdc

08002434 <max3>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
/*----------------------------------*/
/* Config speed for stepper */
double_t max3(double_t a, double_t b, double_t c) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	ed87 0b04 	vstr	d0, [r7, #16]
 800243e:	ed87 1b02 	vstr	d1, [r7, #8]
 8002442:	ed87 2b00 	vstr	d2, [r7]
	double_t n1 = max(a, b);
 8002446:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800244a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800244e:	f7fe fb73 	bl	8000b38 <__aeabi_dcmpgt>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <max3+0x2a>
 8002458:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800245c:	e001      	b.n	8002462 <max3+0x2e>
 800245e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002462:	e9c7 2306 	strd	r2, r3, [r7, #24]
    return max(n1, c);
 8002466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800246a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800246e:	f7fe fb63 	bl	8000b38 <__aeabi_dcmpgt>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <max3+0x4a>
 8002478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800247c:	e001      	b.n	8002482 <max3+0x4e>
 800247e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002482:	ec43 2b17 	vmov	d7, r2, r3
}
 8002486:	eeb0 0a47 	vmov.f32	s0, s14
 800248a:	eef0 0a67 	vmov.f32	s1, s15
 800248e:	3720      	adds	r7, #32
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	0000      	movs	r0, r0
	...

08002498 <MoveToPosXY>:
        DelayUs_step(30); // Adjust delay as needed
    }
}
/* Function control 3 axis */
//Move X-Y
void MoveToPosXY(float x, float y) {
 8002498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800249c:	ed2d 8b02 	vpush	{d8}
 80024a0:	b092      	sub	sp, #72	@ 0x48
 80024a2:	af06      	add	r7, sp, #24
 80024a4:	ed87 0a05 	vstr	s0, [r7, #20]
 80024a8:	edc7 0a04 	vstr	s1, [r7, #16]
    trans_to_posXY(x,y);
 80024ac:	edd7 0a04 	vldr	s1, [r7, #16]
 80024b0:	ed97 0a05 	vldr	s0, [r7, #20]
 80024b4:	f7ff fade 	bl	8001a74 <trans_to_posXY>
    CNC_pos.MoveX = caculate_pos(CNC.set_posX, 161);
 80024b8:	4bb3      	ldr	r3, [pc, #716]	@ (8002788 <MoveToPosXY+0x2f0>)
 80024ba:	ed93 7b00 	vldr	d7, [r3]
 80024be:	ed9f 1bb0 	vldr	d1, [pc, #704]	@ 8002780 <MoveToPosXY+0x2e8>
 80024c2:	eeb0 0a47 	vmov.f32	s0, s14
 80024c6:	eef0 0a67 	vmov.f32	s1, s15
 80024ca:	f7ff fb13 	bl	8001af4 <caculate_pos>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7fe f871 	bl	80005bc <__aeabi_l2d>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	49ab      	ldr	r1, [pc, #684]	@ (800278c <MoveToPosXY+0x2f4>)
 80024e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    CNC_pos.MoveY = caculate_pos(CNC.set_posY, 161);
 80024e4:	4ba8      	ldr	r3, [pc, #672]	@ (8002788 <MoveToPosXY+0x2f0>)
 80024e6:	ed93 7b02 	vldr	d7, [r3, #8]
 80024ea:	ed9f 1ba5 	vldr	d1, [pc, #660]	@ 8002780 <MoveToPosXY+0x2e8>
 80024ee:	eeb0 0a47 	vmov.f32	s0, s14
 80024f2:	eef0 0a67 	vmov.f32	s1, s15
 80024f6:	f7ff fafd 	bl	8001af4 <caculate_pos>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	f7fe f85b 	bl	80005bc <__aeabi_l2d>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	49a0      	ldr	r1, [pc, #640]	@ (800278c <MoveToPosXY+0x2f4>)
 800250c:	e9c1 2308 	strd	r2, r3, [r1, #32]
    long long int step_max = max3(llabs(CNC_pos.MoveX), llabs(CNC_pos.MoveY), llabs(CNC_pos.MoveZ));
 8002510:	4b9e      	ldr	r3, [pc, #632]	@ (800278c <MoveToPosXY+0x2f4>)
 8002512:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f7fe fbdd 	bl	8000cd8 <__aeabi_d2lz>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	2b00      	cmp	r3, #0
 8002524:	da05      	bge.n	8002532 <MoveToPosXY+0x9a>
 8002526:	2100      	movs	r1, #0
 8002528:	4254      	negs	r4, r2
 800252a:	eb61 0503 	sbc.w	r5, r1, r3
 800252e:	4622      	mov	r2, r4
 8002530:	462b      	mov	r3, r5
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	f7fe f841 	bl	80005bc <__aeabi_l2d>
 800253a:	ec41 0b18 	vmov	d8, r0, r1
 800253e:	4b93      	ldr	r3, [pc, #588]	@ (800278c <MoveToPosXY+0x2f4>)
 8002540:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f7fe fbc6 	bl	8000cd8 <__aeabi_d2lz>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	2b00      	cmp	r3, #0
 8002552:	da06      	bge.n	8002562 <MoveToPosXY+0xca>
 8002554:	2100      	movs	r1, #0
 8002556:	f1d2 0800 	rsbs	r8, r2, #0
 800255a:	eb61 0903 	sbc.w	r9, r1, r3
 800255e:	4642      	mov	r2, r8
 8002560:	464b      	mov	r3, r9
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	f7fe f829 	bl	80005bc <__aeabi_l2d>
 800256a:	4604      	mov	r4, r0
 800256c:	460d      	mov	r5, r1
 800256e:	4b87      	ldr	r3, [pc, #540]	@ (800278c <MoveToPosXY+0x2f4>)
 8002570:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002574:	4610      	mov	r0, r2
 8002576:	4619      	mov	r1, r3
 8002578:	f7fe fbae 	bl	8000cd8 <__aeabi_d2lz>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	2b00      	cmp	r3, #0
 8002582:	da06      	bge.n	8002592 <MoveToPosXY+0xfa>
 8002584:	2100      	movs	r1, #0
 8002586:	f1d2 0a00 	rsbs	sl, r2, #0
 800258a:	eb61 0b03 	sbc.w	fp, r1, r3
 800258e:	4652      	mov	r2, sl
 8002590:	465b      	mov	r3, fp
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	f7fe f811 	bl	80005bc <__aeabi_l2d>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	ec43 2b12 	vmov	d2, r2, r3
 80025a2:	ec45 4b11 	vmov	d1, r4, r5
 80025a6:	eeb0 0a48 	vmov.f32	s0, s16
 80025aa:	eef0 0a68 	vmov.f32	s1, s17
 80025ae:	f7ff ff41 	bl	8002434 <max3>
 80025b2:	ec53 2b10 	vmov	r2, r3, d0
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7fe fb8d 	bl	8000cd8 <__aeabi_d2lz>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double_t coef1 = fabs(CNC_pos.MoveX) / step_max;
 80025c6:	4b71      	ldr	r3, [pc, #452]	@ (800278c <MoveToPosXY+0x2f4>)
 80025c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025cc:	60ba      	str	r2, [r7, #8]
 80025ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025d8:	f7fd fff0 	bl	80005bc <__aeabi_l2d>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025e4:	f7fe f942 	bl	800086c <__aeabi_ddiv>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double_t coef2 = fabs(CNC_pos.MoveY) / step_max;
 80025f0:	4b66      	ldr	r3, [pc, #408]	@ (800278c <MoveToPosXY+0x2f4>)
 80025f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80025f6:	603a      	str	r2, [r7, #0]
 80025f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002602:	f7fd ffdb 	bl	80005bc <__aeabi_l2d>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800260e:	f7fe f92d 	bl	800086c <__aeabi_ddiv>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	e9c7 2306 	strd	r2, r3, [r7, #24]
    CNC_pos.pos1dot = CNC_pos.max_speedXY * coef1;
 800261a:	4b5c      	ldr	r3, [pc, #368]	@ (800278c <MoveToPosXY+0x2f4>)
 800261c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002620:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002624:	f7fd fff8 	bl	8000618 <__aeabi_dmul>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4957      	ldr	r1, [pc, #348]	@ (800278c <MoveToPosXY+0x2f4>)
 800262e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    CNC_pos.pos2dot = CNC_pos.max_speedXY * coef2;
 8002632:	4b56      	ldr	r3, [pc, #344]	@ (800278c <MoveToPosXY+0x2f4>)
 8002634:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800263c:	f7fd ffec 	bl	8000618 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4951      	ldr	r1, [pc, #324]	@ (800278c <MoveToPosXY+0x2f4>)
 8002646:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    CNC_pos.accel1 = CNC_pos.a_maxX * coef1;
 800264a:	4b50      	ldr	r3, [pc, #320]	@ (800278c <MoveToPosXY+0x2f4>)
 800264c:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 8002650:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002654:	f7fd ffe0 	bl	8000618 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	494b      	ldr	r1, [pc, #300]	@ (800278c <MoveToPosXY+0x2f4>)
 800265e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    CNC_pos.accel2 = CNC_pos.a_maxY * coef2;
 8002662:	4b4a      	ldr	r3, [pc, #296]	@ (800278c <MoveToPosXY+0x2f4>)
 8002664:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	@ 0x98
 8002668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800266c:	f7fd ffd4 	bl	8000618 <__aeabi_dmul>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4945      	ldr	r1, [pc, #276]	@ (800278c <MoveToPosXY+0x2f4>)
 8002676:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    CNC_pos.jerk1 = CNC_pos.j_maxX * coef1;
 800267a:	4b44      	ldr	r3, [pc, #272]	@ (800278c <MoveToPosXY+0x2f4>)
 800267c:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 8002680:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002684:	f7fd ffc8 	bl	8000618 <__aeabi_dmul>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	493f      	ldr	r1, [pc, #252]	@ (800278c <MoveToPosXY+0x2f4>)
 800268e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    CNC_pos.jerk2 = CNC_pos.j_maxY * coef2;
 8002692:	4b3e      	ldr	r3, [pc, #248]	@ (800278c <MoveToPosXY+0x2f4>)
 8002694:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	@ 0xa0
 8002698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269c:	f7fd ffbc 	bl	8000618 <__aeabi_dmul>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4939      	ldr	r1, [pc, #228]	@ (800278c <MoveToPosXY+0x2f4>)
 80026a6:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    if (Stepper1.run_state != 1 && Stepper2.run_state != 1) {
 80026aa:	4b39      	ldr	r3, [pc, #228]	@ (8002790 <MoveToPosXY+0x2f8>)
 80026ac:	785b      	ldrb	r3, [r3, #1]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	f000 80a3 	beq.w	80027fa <MoveToPosXY+0x362>
 80026b4:	4b37      	ldr	r3, [pc, #220]	@ (8002794 <MoveToPosXY+0x2fc>)
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	f000 809e 	beq.w	80027fa <MoveToPosXY+0x362>
        Accel_Stepper_Move(&Stepper1, CNC_pos.MoveX, CNC_pos.accel1, CNC_pos.jerk1, CNC_pos.pos1dot);
 80026be:	4b33      	ldr	r3, [pc, #204]	@ (800278c <MoveToPosXY+0x2f4>)
 80026c0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	f7fe fb06 	bl	8000cd8 <__aeabi_d2lz>
 80026cc:	4682      	mov	sl, r0
 80026ce:	468b      	mov	fp, r1
 80026d0:	4b2e      	ldr	r3, [pc, #184]	@ (800278c <MoveToPosXY+0x2f4>)
 80026d2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	f7fe fb15 	bl	8000d08 <__aeabi_d2ulz>
 80026de:	4604      	mov	r4, r0
 80026e0:	460d      	mov	r5, r1
 80026e2:	4b2a      	ldr	r3, [pc, #168]	@ (800278c <MoveToPosXY+0x2f4>)
 80026e4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	f7fe fb0c 	bl	8000d08 <__aeabi_d2ulz>
 80026f0:	4680      	mov	r8, r0
 80026f2:	4689      	mov	r9, r1
 80026f4:	4b25      	ldr	r3, [pc, #148]	@ (800278c <MoveToPosXY+0x2f4>)
 80026f6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fe fb03 	bl	8000d08 <__aeabi_d2ulz>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800270a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800270e:	e9cd 4500 	strd	r4, r5, [sp]
 8002712:	4652      	mov	r2, sl
 8002714:	465b      	mov	r3, fp
 8002716:	481e      	ldr	r0, [pc, #120]	@ (8002790 <MoveToPosXY+0x2f8>)
 8002718:	f7fe febe 	bl	8001498 <Accel_Stepper_Move>
        Accel_Stepper_Move(&Stepper2, CNC_pos.MoveY, CNC_pos.accel2, CNC_pos.jerk2, CNC_pos.pos2dot);
 800271c:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <MoveToPosXY+0x2f4>)
 800271e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f7fe fad7 	bl	8000cd8 <__aeabi_d2lz>
 800272a:	4682      	mov	sl, r0
 800272c:	468b      	mov	fp, r1
 800272e:	4b17      	ldr	r3, [pc, #92]	@ (800278c <MoveToPosXY+0x2f4>)
 8002730:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f7fe fae6 	bl	8000d08 <__aeabi_d2ulz>
 800273c:	4604      	mov	r4, r0
 800273e:	460d      	mov	r5, r1
 8002740:	4b12      	ldr	r3, [pc, #72]	@ (800278c <MoveToPosXY+0x2f4>)
 8002742:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	f7fe fadd 	bl	8000d08 <__aeabi_d2ulz>
 800274e:	4680      	mov	r8, r0
 8002750:	4689      	mov	r9, r1
 8002752:	4b0e      	ldr	r3, [pc, #56]	@ (800278c <MoveToPosXY+0x2f4>)
 8002754:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f7fe fad4 	bl	8000d08 <__aeabi_d2ulz>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002768:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800276c:	e9cd 4500 	strd	r4, r5, [sp]
 8002770:	4652      	mov	r2, sl
 8002772:	465b      	mov	r3, fp
 8002774:	4807      	ldr	r0, [pc, #28]	@ (8002794 <MoveToPosXY+0x2fc>)
 8002776:	f7fe fe8f 	bl	8001498 <Accel_Stepper_Move>
        while (Stepper1.run_state != STOP || Stepper2.run_state != STOP) {
 800277a:	e026      	b.n	80027ca <MoveToPosXY+0x332>
 800277c:	f3af 8000 	nop.w
 8002780:	00000000 	.word	0x00000000
 8002784:	40642000 	.word	0x40642000
 8002788:	20000830 	.word	0x20000830
 800278c:	20000770 	.word	0x20000770
 8002790:	200002b0 	.word	0x200002b0
 8002794:	20000310 	.word	0x20000310
        	if(HAL_GPIO_ReadPin(moveXplus_port, moveXplus_pin) == CNC_pos.Lsw1 ||
 8002798:	2120      	movs	r1, #32
 800279a:	481b      	ldr	r0, [pc, #108]	@ (8002808 <MoveToPosXY+0x370>)
 800279c:	f004 fcba 	bl	8007114 <HAL_GPIO_ReadPin>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b19      	ldr	r3, [pc, #100]	@ (800280c <MoveToPosXY+0x374>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d009      	beq.n	80027c0 <MoveToPosXY+0x328>
        		HAL_GPIO_ReadPin(moveYplus_port, moveYplus_pin) == CNC_pos.Lsw3){
 80027ac:	2104      	movs	r1, #4
 80027ae:	4818      	ldr	r0, [pc, #96]	@ (8002810 <MoveToPosXY+0x378>)
 80027b0:	f004 fcb0 	bl	8007114 <HAL_GPIO_ReadPin>
 80027b4:	4603      	mov	r3, r0
 80027b6:	461a      	mov	r2, r3
 80027b8:	4b14      	ldr	r3, [pc, #80]	@ (800280c <MoveToPosXY+0x374>)
 80027ba:	789b      	ldrb	r3, [r3, #2]
        	if(HAL_GPIO_ReadPin(moveXplus_port, moveXplus_pin) == CNC_pos.Lsw1 ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d101      	bne.n	80027c4 <MoveToPosXY+0x32c>
        		handle_stop_button_press();
 80027c0:	f002 f994 	bl	8004aec <handle_stop_button_press>
        	}
        	osDelay(1);
 80027c4:	2001      	movs	r0, #1
 80027c6:	f009 fafb 	bl	800bdc0 <osDelay>
        while (Stepper1.run_state != STOP || Stepper2.run_state != STOP) {
 80027ca:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <MoveToPosXY+0x37c>)
 80027cc:	785b      	ldrb	r3, [r3, #1]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1e2      	bne.n	8002798 <MoveToPosXY+0x300>
 80027d2:	4b11      	ldr	r3, [pc, #68]	@ (8002818 <MoveToPosXY+0x380>)
 80027d4:	785b      	ldrb	r3, [r3, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1de      	bne.n	8002798 <MoveToPosXY+0x300>
        }
        CNC.pos_x = x;
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7fd fec4 	bl	8000568 <__aeabi_f2d>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	490d      	ldr	r1, [pc, #52]	@ (800281c <MoveToPosXY+0x384>)
 80027e6:	e9c1 2306 	strd	r2, r3, [r1, #24]
        CNC.pos_y = y;
 80027ea:	6938      	ldr	r0, [r7, #16]
 80027ec:	f7fd febc 	bl	8000568 <__aeabi_f2d>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4909      	ldr	r1, [pc, #36]	@ (800281c <MoveToPosXY+0x384>)
 80027f6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    }
}
 80027fa:	bf00      	nop
 80027fc:	3730      	adds	r7, #48	@ 0x30
 80027fe:	46bd      	mov	sp, r7
 8002800:	ecbd 8b02 	vpop	{d8}
 8002804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002808:	40020800 	.word	0x40020800
 800280c:	20000770 	.word	0x20000770
 8002810:	40020400 	.word	0x40020400
 8002814:	200002b0 	.word	0x200002b0
 8002818:	20000310 	.word	0x20000310
 800281c:	20000830 	.word	0x20000830

08002820 <MoveToPosZ>:
// Move Z
void MoveToPosZ(float z) {
 8002820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002824:	b08e      	sub	sp, #56	@ 0x38
 8002826:	af06      	add	r7, sp, #24
 8002828:	ed87 0a03 	vstr	s0, [r7, #12]
    trans_to_posZ(z);
 800282c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002830:	f7ff f948 	bl	8001ac4 <trans_to_posZ>
    CNC_pos.MoveZ = caculate_pos(CNC.set_posZ, 161);
 8002834:	4b80      	ldr	r3, [pc, #512]	@ (8002a38 <MoveToPosZ+0x218>)
 8002836:	ed93 7b04 	vldr	d7, [r3, #16]
 800283a:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 8002a30 <MoveToPosZ+0x210>
 800283e:	eeb0 0a47 	vmov.f32	s0, s14
 8002842:	eef0 0a67 	vmov.f32	s1, s15
 8002846:	f7ff f955 	bl	8001af4 <caculate_pos>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	f7fd feb3 	bl	80005bc <__aeabi_l2d>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4978      	ldr	r1, [pc, #480]	@ (8002a3c <MoveToPosZ+0x21c>)
 800285c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    long long int step_max = max3(llabs(CNC_pos.MoveX), llabs(CNC_pos.MoveY), llabs(CNC_pos.MoveZ));
 8002860:	4b76      	ldr	r3, [pc, #472]	@ (8002a3c <MoveToPosZ+0x21c>)
 8002862:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f7fe fa35 	bl	8000cd8 <__aeabi_d2lz>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	2b00      	cmp	r3, #0
 8002874:	da06      	bge.n	8002884 <MoveToPosZ+0x64>
 8002876:	2100      	movs	r1, #0
 8002878:	f1d2 0a00 	rsbs	sl, r2, #0
 800287c:	eb61 0b03 	sbc.w	fp, r1, r3
 8002880:	4652      	mov	r2, sl
 8002882:	465b      	mov	r3, fp
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	f7fd fe98 	bl	80005bc <__aeabi_l2d>
 800288c:	4682      	mov	sl, r0
 800288e:	468b      	mov	fp, r1
 8002890:	4b6a      	ldr	r3, [pc, #424]	@ (8002a3c <MoveToPosZ+0x21c>)
 8002892:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	f7fe fa1d 	bl	8000cd8 <__aeabi_d2lz>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	da06      	bge.n	80028b4 <MoveToPosZ+0x94>
 80028a6:	2100      	movs	r1, #0
 80028a8:	f1d2 0800 	rsbs	r8, r2, #0
 80028ac:	eb61 0903 	sbc.w	r9, r1, r3
 80028b0:	4642      	mov	r2, r8
 80028b2:	464b      	mov	r3, r9
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f7fd fe80 	bl	80005bc <__aeabi_l2d>
 80028bc:	4680      	mov	r8, r0
 80028be:	4689      	mov	r9, r1
 80028c0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a3c <MoveToPosZ+0x21c>)
 80028c2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	f7fe fa05 	bl	8000cd8 <__aeabi_d2lz>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	da05      	bge.n	80028e2 <MoveToPosZ+0xc2>
 80028d6:	2100      	movs	r1, #0
 80028d8:	4254      	negs	r4, r2
 80028da:	eb61 0503 	sbc.w	r5, r1, r3
 80028de:	4622      	mov	r2, r4
 80028e0:	462b      	mov	r3, r5
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	f7fd fe69 	bl	80005bc <__aeabi_l2d>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	ec43 2b12 	vmov	d2, r2, r3
 80028f2:	ec49 8b11 	vmov	d1, r8, r9
 80028f6:	ec4b ab10 	vmov	d0, sl, fp
 80028fa:	f7ff fd9b 	bl	8002434 <max3>
 80028fe:	ec53 2b10 	vmov	r2, r3, d0
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	f7fe f9e7 	bl	8000cd8 <__aeabi_d2lz>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double_t coef3 = fabs(CNC_pos.MoveZ) / step_max;
 8002912:	4b4a      	ldr	r3, [pc, #296]	@ (8002a3c <MoveToPosZ+0x21c>)
 8002914:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002918:	603a      	str	r2, [r7, #0]
 800291a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002924:	f7fd fe4a 	bl	80005bc <__aeabi_l2d>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002930:	f7fd ff9c 	bl	800086c <__aeabi_ddiv>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	e9c7 2304 	strd	r2, r3, [r7, #16]
    CNC_pos.pos3dot = CNC_pos.max_speedZ * coef3;
 800293c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a3c <MoveToPosZ+0x21c>)
 800293e:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8002942:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002946:	f7fd fe67 	bl	8000618 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	493b      	ldr	r1, [pc, #236]	@ (8002a3c <MoveToPosZ+0x21c>)
 8002950:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    CNC_pos.accel3 = CNC_pos.a_maxZ * coef3;
 8002954:	4b39      	ldr	r3, [pc, #228]	@ (8002a3c <MoveToPosZ+0x21c>)
 8002956:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 800295a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800295e:	f7fd fe5b 	bl	8000618 <__aeabi_dmul>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4935      	ldr	r1, [pc, #212]	@ (8002a3c <MoveToPosZ+0x21c>)
 8002968:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    CNC_pos.jerk3 = CNC_pos.j_maxZ * coef3;
 800296c:	4b33      	ldr	r3, [pc, #204]	@ (8002a3c <MoveToPosZ+0x21c>)
 800296e:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 8002972:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002976:	f7fd fe4f 	bl	8000618 <__aeabi_dmul>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	492f      	ldr	r1, [pc, #188]	@ (8002a3c <MoveToPosZ+0x21c>)
 8002980:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
    if (Stepper3.run_state != 1) {
 8002984:	4b2e      	ldr	r3, [pc, #184]	@ (8002a40 <MoveToPosZ+0x220>)
 8002986:	785b      	ldrb	r3, [r3, #1]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d04a      	beq.n	8002a22 <MoveToPosZ+0x202>
        Accel_Stepper_Move(&Stepper3, CNC_pos.MoveZ, CNC_pos.accel3, CNC_pos.jerk3, CNC_pos.pos3dot);
 800298c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a3c <MoveToPosZ+0x21c>)
 800298e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	f7fe f99f 	bl	8000cd8 <__aeabi_d2lz>
 800299a:	4682      	mov	sl, r0
 800299c:	468b      	mov	fp, r1
 800299e:	4b27      	ldr	r3, [pc, #156]	@ (8002a3c <MoveToPosZ+0x21c>)
 80029a0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f7fe f9ae 	bl	8000d08 <__aeabi_d2ulz>
 80029ac:	4604      	mov	r4, r0
 80029ae:	460d      	mov	r5, r1
 80029b0:	4b22      	ldr	r3, [pc, #136]	@ (8002a3c <MoveToPosZ+0x21c>)
 80029b2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f7fe f9a5 	bl	8000d08 <__aeabi_d2ulz>
 80029be:	4680      	mov	r8, r0
 80029c0:	4689      	mov	r9, r1
 80029c2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a3c <MoveToPosZ+0x21c>)
 80029c4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f7fe f99c 	bl	8000d08 <__aeabi_d2ulz>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80029d8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80029dc:	e9cd 4500 	strd	r4, r5, [sp]
 80029e0:	4652      	mov	r2, sl
 80029e2:	465b      	mov	r3, fp
 80029e4:	4816      	ldr	r0, [pc, #88]	@ (8002a40 <MoveToPosZ+0x220>)
 80029e6:	f7fe fd57 	bl	8001498 <Accel_Stepper_Move>
        while(Stepper3.run_state != STOP){
 80029ea:	e00e      	b.n	8002a0a <MoveToPosZ+0x1ea>
        	if(HAL_GPIO_ReadPin(moveZplus_port, moveZplus_pin) == CNC_pos.Lsw5){
 80029ec:	2180      	movs	r1, #128	@ 0x80
 80029ee:	4815      	ldr	r0, [pc, #84]	@ (8002a44 <MoveToPosZ+0x224>)
 80029f0:	f004 fb90 	bl	8007114 <HAL_GPIO_ReadPin>
 80029f4:	4603      	mov	r3, r0
 80029f6:	461a      	mov	r2, r3
 80029f8:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <MoveToPosZ+0x21c>)
 80029fa:	791b      	ldrb	r3, [r3, #4]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d101      	bne.n	8002a04 <MoveToPosZ+0x1e4>
        		handle_stop_button_press();
 8002a00:	f002 f874 	bl	8004aec <handle_stop_button_press>
        	}
			osDelay(1);
 8002a04:	2001      	movs	r0, #1
 8002a06:	f009 f9db 	bl	800bdc0 <osDelay>
        while(Stepper3.run_state != STOP){
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a40 <MoveToPosZ+0x220>)
 8002a0c:	785b      	ldrb	r3, [r3, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1ec      	bne.n	80029ec <MoveToPosZ+0x1cc>
		}
        CNC.pos_z = z;
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7fd fda8 	bl	8000568 <__aeabi_f2d>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4906      	ldr	r1, [pc, #24]	@ (8002a38 <MoveToPosZ+0x218>)
 8002a1e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    }
}
 8002a22:	bf00      	nop
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2c:	f3af 8000 	nop.w
 8002a30:	00000000 	.word	0x00000000
 8002a34:	40642000 	.word	0x40642000
 8002a38:	20000830 	.word	0x20000830
 8002a3c:	20000770 	.word	0x20000770
 8002a40:	20000370 	.word	0x20000370
 8002a44:	40021000 	.word	0x40021000

08002a48 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  //HOME();
  initializeCNC_pos(&CNC_pos);
 8002a50:	4823      	ldr	r0, [pc, #140]	@ (8002ae0 <StartDefaultTask+0x98>)
 8002a52:	f7fe ff7d 	bl	8001950 <initializeCNC_pos>
  Accel_Stepper_SetPin(&Stepper1, step_1_GPIO_Port, step_1_pin, dir_1_GPIO_Port, dir_1_pin);
 8002a56:	2302      	movs	r3, #2
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	4b22      	ldr	r3, [pc, #136]	@ (8002ae4 <StartDefaultTask+0x9c>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	4921      	ldr	r1, [pc, #132]	@ (8002ae4 <StartDefaultTask+0x9c>)
 8002a60:	4821      	ldr	r0, [pc, #132]	@ (8002ae8 <StartDefaultTask+0xa0>)
 8002a62:	f7fe facf 	bl	8001004 <Accel_Stepper_SetPin>
  Accel_Stepper_SetPin(&Stepper2, step_2_GPIO_Port, step_2_pin, dir_2_GPIO_Port, dir_2_pin);
 8002a66:	2308      	movs	r3, #8
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae4 <StartDefaultTask+0x9c>)
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	491d      	ldr	r1, [pc, #116]	@ (8002ae4 <StartDefaultTask+0x9c>)
 8002a70:	481e      	ldr	r0, [pc, #120]	@ (8002aec <StartDefaultTask+0xa4>)
 8002a72:	f7fe fac7 	bl	8001004 <Accel_Stepper_SetPin>
  Accel_Stepper_SetPin(&Stepper3, step_3_GPIO_Port, step_3_pin, dir_3_GPIO_Port, dir_3_pin);
 8002a76:	2320      	movs	r3, #32
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <StartDefaultTask+0x9c>)
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	4919      	ldr	r1, [pc, #100]	@ (8002ae4 <StartDefaultTask+0x9c>)
 8002a80:	481b      	ldr	r0, [pc, #108]	@ (8002af0 <StartDefaultTask+0xa8>)
 8002a82:	f7fe fabf 	bl	8001004 <Accel_Stepper_SetPin>

  Accel_Stepper_SetTimer(&Stepper1, &htim2);
 8002a86:	491b      	ldr	r1, [pc, #108]	@ (8002af4 <StartDefaultTask+0xac>)
 8002a88:	4817      	ldr	r0, [pc, #92]	@ (8002ae8 <StartDefaultTask+0xa0>)
 8002a8a:	f7fe fad7 	bl	800103c <Accel_Stepper_SetTimer>
  Accel_Stepper_SetTimer(&Stepper2, &htim3);
 8002a8e:	491a      	ldr	r1, [pc, #104]	@ (8002af8 <StartDefaultTask+0xb0>)
 8002a90:	4816      	ldr	r0, [pc, #88]	@ (8002aec <StartDefaultTask+0xa4>)
 8002a92:	f7fe fad3 	bl	800103c <Accel_Stepper_SetTimer>
  Accel_Stepper_SetTimer(&Stepper3, &htim4);
 8002a96:	4919      	ldr	r1, [pc, #100]	@ (8002afc <StartDefaultTask+0xb4>)
 8002a98:	4815      	ldr	r0, [pc, #84]	@ (8002af0 <StartDefaultTask+0xa8>)
 8002a9a:	f7fe facf 	bl	800103c <Accel_Stepper_SetTimer>

  CNC.pos_x = 0;
 8002a9e:	4918      	ldr	r1, [pc, #96]	@ (8002b00 <StartDefaultTask+0xb8>)
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9c1 2306 	strd	r2, r3, [r1, #24]
  CNC.pos_y = 0;
 8002aac:	4914      	ldr	r1, [pc, #80]	@ (8002b00 <StartDefaultTask+0xb8>)
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	e9c1 2308 	strd	r2, r3, [r1, #32]
  CNC.pos_z = 0;
 8002aba:	4911      	ldr	r1, [pc, #68]	@ (8002b00 <StartDefaultTask+0xb8>)
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

  //vTaskDelay(pdMS_TO_TICKS(2000));
  /* Infinite loop */
  for(;;)
  {
      if (state.start_press) {
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <StartDefaultTask+0xbc>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <StartDefaultTask+0x8e>
          move_to_coordinates();
 8002ad2:	f7ff fb45 	bl	8002160 <move_to_coordinates>
      }

    osDelay(1);
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f009 f972 	bl	800bdc0 <osDelay>
      if (state.start_press) {
 8002adc:	e7f4      	b.n	8002ac8 <StartDefaultTask+0x80>
 8002ade:	bf00      	nop
 8002ae0:	20000770 	.word	0x20000770
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	200002b0 	.word	0x200002b0
 8002aec:	20000310 	.word	0x20000310
 8002af0:	20000370 	.word	0x20000370
 8002af4:	20000a74 	.word	0x20000a74
 8002af8:	20000abc 	.word	0x20000abc
 8002afc:	20000b04 	.word	0x20000b04
 8002b00:	20000830 	.word	0x20000830
 8002b04:	20000a20 	.word	0x20000a20

08002b08 <StartADC>:
* @retval None
*/

/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
  /* Infinite loop */
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)LCD_adc.readValue, 2);
  for(;;)
  {
	startADC();
 8002b10:	f000 ffac 	bl	8003a6c <startADC>
    osDelay(1);
 8002b14:	2001      	movs	r0, #1
 8002b16:	f009 f953 	bl	800bdc0 <osDelay>
	startADC();
 8002b1a:	bf00      	nop
 8002b1c:	e7f8      	b.n	8002b10 <StartADC+0x8>
	...

08002b20 <StartLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD */
void StartLCD(void *argument)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD */
  /* Infinite loop */
  initialize_LCD(&LCD_adc);
 8002b28:	4808      	ldr	r0, [pc, #32]	@ (8002b4c <StartLCD+0x2c>)
 8002b2a:	f000 fbdd 	bl	80032e8 <initialize_LCD>
  initialize_Kalman(&kalman_fil_curr);
 8002b2e:	4808      	ldr	r0, [pc, #32]	@ (8002b50 <StartLCD+0x30>)
 8002b30:	f000 fc06 	bl	8003340 <initialize_Kalman>
  initialize_Kalman(&kalman_fil_volt);
 8002b34:	4807      	ldr	r0, [pc, #28]	@ (8002b54 <StartLCD+0x34>)
 8002b36:	f000 fc03 	bl	8003340 <initialize_Kalman>
  display_menu();
 8002b3a:	f001 f857 	bl	8003bec <display_menu>
  for(;;)
  {
	ButtonTask();
 8002b3e:	f001 fcf5 	bl	800452c <ButtonTask>
    osDelay(1);
 8002b42:	2001      	movs	r0, #1
 8002b44:	f009 f93c 	bl	800bdc0 <osDelay>
	ButtonTask();
 8002b48:	bf00      	nop
 8002b4a:	e7f8      	b.n	8002b3e <StartLCD+0x1e>
 8002b4c:	200008b4 	.word	0x200008b4
 8002b50:	20000980 	.word	0x20000980
 8002b54:	200009d0 	.word	0x200009d0

08002b58 <StartUART_TX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_TX */
void StartUART_TX(void *argument)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART_TX */
  /* Infinite loop */
  UART_transmit_init();
 8002b60:	f7ff f984 	bl	8001e6c <UART_transmit_init>
  for(;;)
  {
    osDelay(1000);  // Delay 1000 milliseconds (1 second)
 8002b64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b68:	f009 f92a 	bl	800bdc0 <osDelay>
    send_uart_data();  // Send data every second
 8002b6c:	f7ff f948 	bl	8001e00 <send_uart_data>
    osDelay(1000);  // Delay 1000 milliseconds (1 second)
 8002b70:	bf00      	nop
 8002b72:	e7f7      	b.n	8002b64 <StartUART_TX+0xc>

08002b74 <StartUART_RX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_RX */

void StartUART_RX(void *argument) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartUART_RX */
    /* Initialize UART receive in DMA mode */
    UART_RECEIVE_Init();
 8002b7c:	f7ff f97c 	bl	8001e78 <UART_RECEIVE_Init>
    /* Infinite loop */
    for(;;)
    {
        if (osSemaphoreAcquire(uartRxSemaphoreHandle, osWaitForever) == osOK) {
 8002b80:	4b07      	ldr	r3, [pc, #28]	@ (8002ba0 <StartUART_RX+0x2c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f04f 31ff 	mov.w	r1, #4294967295
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f009 facb 	bl	800c124 <osSemaphoreAcquire>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <StartUART_RX+0x24>
            UART_rx_process();
 8002b94:	f7ff fb5e 	bl	8002254 <UART_rx_process>
        }
        osDelay(1);
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f009 f911 	bl	800bdc0 <osDelay>
        if (osSemaphoreAcquire(uartRxSemaphoreHandle, osWaitForever) == osOK) {
 8002b9e:	e7ef      	b.n	8002b80 <StartUART_RX+0xc>
 8002ba0:	20000758 	.word	0x20000758

08002ba4 <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  lcdMutexHandle = osMutexNew(&lcdMutex_attributes);
 8002ba8:	481b      	ldr	r0, [pc, #108]	@ (8002c18 <MX_FREERTOS_Init+0x74>)
 8002baa:	f009 f924 	bl	800bdf6 <osMutexNew>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c1c <MX_FREERTOS_Init+0x78>)
 8002bb2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  uartRxSemaphoreHandle = osSemaphoreNew(1, 1, &uartRxSemaphore_attributes);
 8002bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8002c20 <MX_FREERTOS_Init+0x7c>)
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f009 fa2a 	bl	800c012 <osSemaphoreNew>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4a18      	ldr	r2, [pc, #96]	@ (8002c24 <MX_FREERTOS_Init+0x80>)
 8002bc2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002bc4:	4a18      	ldr	r2, [pc, #96]	@ (8002c28 <MX_FREERTOS_Init+0x84>)
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4818      	ldr	r0, [pc, #96]	@ (8002c2c <MX_FREERTOS_Init+0x88>)
 8002bca:	f009 f867 	bl	800bc9c <osThreadNew>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4a17      	ldr	r2, [pc, #92]	@ (8002c30 <MX_FREERTOS_Init+0x8c>)
 8002bd2:	6013      	str	r3, [r2, #0]

  /* creation of startADC */
  startADCHandle = osThreadNew(StartADC, NULL, &startADC_attributes);
 8002bd4:	4a17      	ldr	r2, [pc, #92]	@ (8002c34 <MX_FREERTOS_Init+0x90>)
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4817      	ldr	r0, [pc, #92]	@ (8002c38 <MX_FREERTOS_Init+0x94>)
 8002bda:	f009 f85f 	bl	800bc9c <osThreadNew>
 8002bde:	4603      	mov	r3, r0
 8002be0:	4a16      	ldr	r2, [pc, #88]	@ (8002c3c <MX_FREERTOS_Init+0x98>)
 8002be2:	6013      	str	r3, [r2, #0]

  /* creation of startLCD */
  startLCDHandle = osThreadNew(StartLCD, NULL, &startLCD_attributes);
 8002be4:	4a16      	ldr	r2, [pc, #88]	@ (8002c40 <MX_FREERTOS_Init+0x9c>)
 8002be6:	2100      	movs	r1, #0
 8002be8:	4816      	ldr	r0, [pc, #88]	@ (8002c44 <MX_FREERTOS_Init+0xa0>)
 8002bea:	f009 f857 	bl	800bc9c <osThreadNew>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4a15      	ldr	r2, [pc, #84]	@ (8002c48 <MX_FREERTOS_Init+0xa4>)
 8002bf2:	6013      	str	r3, [r2, #0]

  /* creation of startUART_TX */
  startUART_TXHandle = osThreadNew(StartUART_TX, NULL, &startUART_TX_attributes);
 8002bf4:	4a15      	ldr	r2, [pc, #84]	@ (8002c4c <MX_FREERTOS_Init+0xa8>)
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4815      	ldr	r0, [pc, #84]	@ (8002c50 <MX_FREERTOS_Init+0xac>)
 8002bfa:	f009 f84f 	bl	800bc9c <osThreadNew>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4a14      	ldr	r2, [pc, #80]	@ (8002c54 <MX_FREERTOS_Init+0xb0>)
 8002c02:	6013      	str	r3, [r2, #0]

  /* creation of startUART_RX */
  startUART_RXHandle = osThreadNew(StartUART_RX, NULL, &startUART_RX_attributes);
 8002c04:	4a14      	ldr	r2, [pc, #80]	@ (8002c58 <MX_FREERTOS_Init+0xb4>)
 8002c06:	2100      	movs	r1, #0
 8002c08:	4814      	ldr	r0, [pc, #80]	@ (8002c5c <MX_FREERTOS_Init+0xb8>)
 8002c0a:	f009 f847 	bl	800bc9c <osThreadNew>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4a13      	ldr	r2, [pc, #76]	@ (8002c60 <MX_FREERTOS_Init+0xbc>)
 8002c12:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	0801591c 	.word	0x0801591c
 8002c1c:	20000754 	.word	0x20000754
 8002c20:	0801592c 	.word	0x0801592c
 8002c24:	20000758 	.word	0x20000758
 8002c28:	0801593c 	.word	0x0801593c
 8002c2c:	08002a49 	.word	0x08002a49
 8002c30:	2000075c 	.word	0x2000075c
 8002c34:	08015960 	.word	0x08015960
 8002c38:	08002b09 	.word	0x08002b09
 8002c3c:	20000760 	.word	0x20000760
 8002c40:	08015984 	.word	0x08015984
 8002c44:	08002b21 	.word	0x08002b21
 8002c48:	20000764 	.word	0x20000764
 8002c4c:	080159a8 	.word	0x080159a8
 8002c50:	08002b59 	.word	0x08002b59
 8002c54:	20000768 	.word	0x20000768
 8002c58:	080159cc 	.word	0x080159cc
 8002c5c:	08002b75 	.word	0x08002b75
 8002c60:	2000076c 	.word	0x2000076c

08002c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	@ 0x30
 8002c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6a:	f107 031c 	add.w	r3, r7, #28
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	4a7b      	ldr	r2, [pc, #492]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8a:	4b79      	ldr	r3, [pc, #484]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	4b75      	ldr	r3, [pc, #468]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	4a74      	ldr	r2, [pc, #464]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002ca0:	f043 0304 	orr.w	r3, r3, #4
 8002ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ca6:	4b72      	ldr	r3, [pc, #456]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	4a6d      	ldr	r2, [pc, #436]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc2:	4b6b      	ldr	r3, [pc, #428]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	4b67      	ldr	r3, [pc, #412]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	4a66      	ldr	r2, [pc, #408]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cde:	4b64      	ldr	r3, [pc, #400]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	4b60      	ldr	r3, [pc, #384]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	4a5f      	ldr	r2, [pc, #380]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002cf4:	f043 0310 	orr.w	r3, r3, #16
 8002cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	f003 0310 	and.w	r3, r3, #16
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	4b59      	ldr	r3, [pc, #356]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	4a58      	ldr	r2, [pc, #352]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002d10:	f043 0308 	orr.w	r3, r3, #8
 8002d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d16:	4b56      	ldr	r3, [pc, #344]	@ (8002e70 <MX_GPIO_Init+0x20c>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, step_1_pin|dir_1_pin|step_2_pin|dir_2_pin
 8002d22:	2200      	movs	r2, #0
 8002d24:	213f      	movs	r1, #63	@ 0x3f
 8002d26:	4853      	ldr	r0, [pc, #332]	@ (8002e74 <MX_GPIO_Init+0x210>)
 8002d28:	f004 fa0c 	bl	8007144 <HAL_GPIO_WritePin>
                          |step_3_pin|dir_3_pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, led1_pin|led2_pin, GPIO_PIN_RESET);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8002d32:	4851      	ldr	r0, [pc, #324]	@ (8002e78 <MX_GPIO_Init+0x214>)
 8002d34:	f004 fa06 	bl	8007144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led3_pin|drill_pin, GPIO_PIN_RESET);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8002d3e:	484f      	ldr	r0, [pc, #316]	@ (8002e7c <MX_GPIO_Init+0x218>)
 8002d40:	f004 fa00 	bl	8007144 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 */
  GPIO_InitStruct.Pin = step_1_pin|dir_1_pin|step_2_pin|dir_2_pin
 8002d44:	233f      	movs	r3, #63	@ 0x3f
 8002d46:	61fb      	str	r3, [r7, #28]
                          |step_3_pin|dir_3_pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d50:	2300      	movs	r3, #0
 8002d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	f107 031c 	add.w	r3, r7, #28
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4846      	ldr	r0, [pc, #280]	@ (8002e74 <MX_GPIO_Init+0x210>)
 8002d5c:	f004 f83e 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = backKey|start_pin;
 8002d60:	23c0      	movs	r3, #192	@ 0xc0
 8002d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002d64:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6e:	f107 031c 	add.w	r3, r7, #28
 8002d72:	4619      	mov	r1, r3
 8002d74:	483f      	ldr	r0, [pc, #252]	@ (8002e74 <MX_GPIO_Init+0x210>)
 8002d76:	f004 f831 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = downKey;
 8002d7a:	2310      	movs	r3, #16
 8002d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002d7e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d84:	2301      	movs	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d88:	f107 031c 	add.w	r3, r7, #28
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	483c      	ldr	r0, [pc, #240]	@ (8002e80 <MX_GPIO_Init+0x21c>)
 8002d90:	f004 f824 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = moveXplus_pin;
 8002d94:	2320      	movs	r3, #32
 8002d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da0:	f107 031c 	add.w	r3, r7, #28
 8002da4:	4619      	mov	r1, r3
 8002da6:	4836      	ldr	r0, [pc, #216]	@ (8002e80 <MX_GPIO_Init+0x21c>)
 8002da8:	f004 f818 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = moveXsub_pin|moveYplus_pin|moveYsub_pin|GPIO_PIN_12;
 8002dac:	f241 0307 	movw	r3, #4103	@ 0x1007
 8002db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002db2:	2300      	movs	r3, #0
 8002db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002db6:	2301      	movs	r3, #1
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dba:	f107 031c 	add.w	r3, r7, #28
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	482e      	ldr	r0, [pc, #184]	@ (8002e7c <MX_GPIO_Init+0x218>)
 8002dc2:	f004 f80b 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = moveZplus_pin|moveZsub_pin;
 8002dc6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dd4:	f107 031c 	add.w	r3, r7, #28
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4827      	ldr	r0, [pc, #156]	@ (8002e78 <MX_GPIO_Init+0x214>)
 8002ddc:	f003 fffe 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE11 PE12 */
  GPIO_InitStruct.Pin = stop_pin|upKey|resetKey|selectKey;
 8002de0:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8002de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002de6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dec:	2301      	movs	r3, #1
 8002dee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002df0:	f107 031c 	add.w	r3, r7, #28
 8002df4:	4619      	mov	r1, r3
 8002df6:	4820      	ldr	r0, [pc, #128]	@ (8002e78 <MX_GPIO_Init+0x214>)
 8002df8:	f003 fff0 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE15 */
  GPIO_InitStruct.Pin = led1_pin|led2_pin;
 8002dfc:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e02:	2301      	movs	r3, #1
 8002e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e0e:	f107 031c 	add.w	r3, r7, #28
 8002e12:	4619      	mov	r1, r3
 8002e14:	4818      	ldr	r0, [pc, #96]	@ (8002e78 <MX_GPIO_Init+0x214>)
 8002e16:	f003 ffe1 	bl	8006ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 */
  GPIO_InitStruct.Pin = led3_pin|drill_pin;
 8002e1a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e20:	2301      	movs	r3, #1
 8002e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2c:	f107 031c 	add.w	r3, r7, #28
 8002e30:	4619      	mov	r1, r3
 8002e32:	4812      	ldr	r0, [pc, #72]	@ (8002e7c <MX_GPIO_Init+0x218>)
 8002e34:	f003 ffd2 	bl	8006ddc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2105      	movs	r1, #5
 8002e3c:	200a      	movs	r0, #10
 8002e3e:	f003 fb86 	bl	800654e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002e42:	200a      	movs	r0, #10
 8002e44:	f003 fb9f 	bl	8006586 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2105      	movs	r1, #5
 8002e4c:	2017      	movs	r0, #23
 8002e4e:	f003 fb7e 	bl	800654e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e52:	2017      	movs	r0, #23
 8002e54:	f003 fb97 	bl	8006586 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2105      	movs	r1, #5
 8002e5c:	2028      	movs	r0, #40	@ 0x28
 8002e5e:	f003 fb76 	bl	800654e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e62:	2028      	movs	r0, #40	@ 0x28
 8002e64:	f003 fb8f 	bl	8006586 <HAL_NVIC_EnableIRQ>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e68:	bf00      	nop
 8002e6a:	3730      	adds	r7, #48	@ 0x30
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40020000 	.word	0x40020000
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	40020400 	.word	0x40020400
 8002e80:	40020800 	.word	0x40020800

08002e84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e88:	4b12      	ldr	r3, [pc, #72]	@ (8002ed4 <MX_I2C1_Init+0x50>)
 8002e8a:	4a13      	ldr	r2, [pc, #76]	@ (8002ed8 <MX_I2C1_Init+0x54>)
 8002e8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ed4 <MX_I2C1_Init+0x50>)
 8002e90:	4a12      	ldr	r2, [pc, #72]	@ (8002edc <MX_I2C1_Init+0x58>)
 8002e92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed4 <MX_I2C1_Init+0x50>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed4 <MX_I2C1_Init+0x50>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed4 <MX_I2C1_Init+0x50>)
 8002ea2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ea6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <MX_I2C1_Init+0x50>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002eae:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <MX_I2C1_Init+0x50>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eb4:	4b07      	ldr	r3, [pc, #28]	@ (8002ed4 <MX_I2C1_Init+0x50>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eba:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <MX_I2C1_Init+0x50>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ec0:	4804      	ldr	r0, [pc, #16]	@ (8002ed4 <MX_I2C1_Init+0x50>)
 8002ec2:	f004 f98b 	bl	80071dc <HAL_I2C_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ecc:	f000 fa06 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000860 	.word	0x20000860
 8002ed8:	40005400 	.word	0x40005400
 8002edc:	000186a0 	.word	0x000186a0

08002ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	@ 0x28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a21      	ldr	r2, [pc, #132]	@ (8002f84 <HAL_I2C_MspInit+0xa4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d13b      	bne.n	8002f7a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	4b20      	ldr	r3, [pc, #128]	@ (8002f88 <HAL_I2C_MspInit+0xa8>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8002f88 <HAL_I2C_MspInit+0xa8>)
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f12:	4b1d      	ldr	r3, [pc, #116]	@ (8002f88 <HAL_I2C_MspInit+0xa8>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f1e:	23c0      	movs	r3, #192	@ 0xc0
 8002f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f22:	2312      	movs	r3, #18
 8002f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f2e:	2304      	movs	r3, #4
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f32:	f107 0314 	add.w	r3, r7, #20
 8002f36:	4619      	mov	r1, r3
 8002f38:	4814      	ldr	r0, [pc, #80]	@ (8002f8c <HAL_I2C_MspInit+0xac>)
 8002f3a:	f003 ff4f 	bl	8006ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HAL_I2C_MspInit+0xa8>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	4a10      	ldr	r2, [pc, #64]	@ (8002f88 <HAL_I2C_MspInit+0xa8>)
 8002f48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f88 <HAL_I2C_MspInit+0xa8>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2105      	movs	r1, #5
 8002f5e:	201f      	movs	r0, #31
 8002f60:	f003 faf5 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002f64:	201f      	movs	r0, #31
 8002f66:	f003 fb0e 	bl	8006586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2105      	movs	r1, #5
 8002f6e:	2020      	movs	r0, #32
 8002f70:	f003 faed 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002f74:	2020      	movs	r0, #32
 8002f76:	f003 fb06 	bl	8006586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f7a:	bf00      	nop
 8002f7c:	3728      	adds	r7, #40	@ 0x28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40005400 	.word	0x40005400
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40020400 	.word	0x40020400

08002f90 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // Change your handler here accordingly
#define SLAVE_ADDRESS_LCD 0x4E    // Change this according to your setup
extern osMutexId_t lcdMutexHandle;
extern osSemaphoreId_t uartRxSemaphoreHandle;

void lcd_send_cmd(char cmd) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xF0);
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	f023 030f 	bic.w	r3, r3, #15
 8002fa0:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xF0);
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C;  // EN=1, RS=0
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	f043 030c 	orr.w	r3, r3, #12
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;  // EN=0, RS=0
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	f043 0308 	orr.w	r3, r3, #8
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C;  // EN=1, RS=0
 8002fbc:	7bbb      	ldrb	r3, [r7, #14]
 8002fbe:	f043 030c 	orr.w	r3, r3, #12
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;  // EN=0, RS=0
 8002fc6:	7bbb      	ldrb	r3, [r7, #14]
 8002fc8:	f043 0308 	orr.w	r3, r3, #8
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8002fd0:	f107 0208 	add.w	r2, r7, #8
 8002fd4:	2364      	movs	r3, #100	@ 0x64
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2304      	movs	r3, #4
 8002fda:	214e      	movs	r1, #78	@ 0x4e
 8002fdc:	4803      	ldr	r0, [pc, #12]	@ (8002fec <lcd_send_cmd+0x5c>)
 8002fde:	f004 fa57 	bl	8007490 <HAL_I2C_Master_Transmit>
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000860 	.word	0x20000860

08002ff0 <lcd_send_data>:

void lcd_send_data(char data) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xF0);
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	f023 030f 	bic.w	r3, r3, #15
 8003000:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xF0);
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D;  // EN=1, RS=1
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	f043 030d 	orr.w	r3, r3, #13
 800300e:	b2db      	uxtb	r3, r3
 8003010:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  // EN=0, RS=1
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	f043 0309 	orr.w	r3, r3, #9
 8003018:	b2db      	uxtb	r3, r3
 800301a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  // EN=1, RS=1
 800301c:	7bbb      	ldrb	r3, [r7, #14]
 800301e:	f043 030d 	orr.w	r3, r3, #13
 8003022:	b2db      	uxtb	r3, r3
 8003024:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  // EN=0, RS=1
 8003026:	7bbb      	ldrb	r3, [r7, #14]
 8003028:	f043 0309 	orr.w	r3, r3, #9
 800302c:	b2db      	uxtb	r3, r3
 800302e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8003030:	f107 0208 	add.w	r2, r7, #8
 8003034:	2364      	movs	r3, #100	@ 0x64
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2304      	movs	r3, #4
 800303a:	214e      	movs	r1, #78	@ 0x4e
 800303c:	4803      	ldr	r0, [pc, #12]	@ (800304c <lcd_send_data+0x5c>)
 800303e:	f004 fa27 	bl	8007490 <HAL_I2C_Master_Transmit>
}
 8003042:	bf00      	nop
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000860 	.word	0x20000860

08003050 <lcd_clear>:

void lcd_clear(void) {
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
    osMutexAcquire(lcdMutexHandle, osWaitForever);
 8003054:	4b09      	ldr	r3, [pc, #36]	@ (800307c <lcd_clear+0x2c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f04f 31ff 	mov.w	r1, #4294967295
 800305c:	4618      	mov	r0, r3
 800305e:	f008 ff50 	bl	800bf02 <osMutexAcquire>
    lcd_send_cmd(0x01);  // Clear display
 8003062:	2001      	movs	r0, #1
 8003064:	f7ff ff94 	bl	8002f90 <lcd_send_cmd>
    HAL_Delay(2);        // Delay for clearing
 8003068:	2002      	movs	r0, #2
 800306a:	f002 fc39 	bl	80058e0 <HAL_Delay>
    osMutexRelease(lcdMutexHandle);
 800306e:	4b03      	ldr	r3, [pc, #12]	@ (800307c <lcd_clear+0x2c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f008 ff90 	bl	800bf98 <osMutexRelease>
}
 8003078:	bf00      	nop
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000754 	.word	0x20000754

08003080 <lcd_put_cur>:

void lcd_put_cur(int row, int col) {
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
    int row_offsets[] = {0x00, 0x40, 0x14, 0x54}; // Line offsets for 20x04 LCD
 800308a:	4b0e      	ldr	r3, [pc, #56]	@ (80030c4 <lcd_put_cur+0x44>)
 800308c:	f107 0408 	add.w	r4, r7, #8
 8003090:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003092:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lcd_send_cmd(0x80 | (col + row_offsets[row])); // Set DDRAM address
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	3318      	adds	r3, #24
 800309c:	443b      	add	r3, r7
 800309e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80030b2:	b25b      	sxtb	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff ff6a 	bl	8002f90 <lcd_send_cmd>
}
 80030bc:	bf00      	nop
 80030be:	371c      	adds	r7, #28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd90      	pop	{r4, r7, pc}
 80030c4:	080156c8 	.word	0x080156c8

080030c8 <lcd_init>:

void lcd_init(void) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
    HAL_Delay(50);        // Wait for >40ms
 80030cc:	2032      	movs	r0, #50	@ 0x32
 80030ce:	f002 fc07 	bl	80058e0 <HAL_Delay>
    lcd_send_cmd(0x33);   // Initialization sequence for 4-bit mode
 80030d2:	2033      	movs	r0, #51	@ 0x33
 80030d4:	f7ff ff5c 	bl	8002f90 <lcd_send_cmd>
    HAL_Delay(5);         // Wait for >4.1ms
 80030d8:	2005      	movs	r0, #5
 80030da:	f002 fc01 	bl	80058e0 <HAL_Delay>
    lcd_send_cmd(0x32);   // Initialization sequence for 4-bit mode
 80030de:	2032      	movs	r0, #50	@ 0x32
 80030e0:	f7ff ff56 	bl	8002f90 <lcd_send_cmd>
    HAL_Delay(1);         // Wait for >100us
 80030e4:	2001      	movs	r0, #1
 80030e6:	f002 fbfb 	bl	80058e0 <HAL_Delay>

    // Display initialization
    lcd_send_cmd(0x28);   // Function set: DL=0 (4-bit mode), N=2 (2 lines), F=0 (5x8 dots)
 80030ea:	2028      	movs	r0, #40	@ 0x28
 80030ec:	f7ff ff50 	bl	8002f90 <lcd_send_cmd>
    HAL_Delay(1);
 80030f0:	2001      	movs	r0, #1
 80030f2:	f002 fbf5 	bl	80058e0 <HAL_Delay>
    lcd_send_cmd(0x08);   // Display on/off control: D=0, C=0, B=0 (Display off)
 80030f6:	2008      	movs	r0, #8
 80030f8:	f7ff ff4a 	bl	8002f90 <lcd_send_cmd>
    HAL_Delay(1);
 80030fc:	2001      	movs	r0, #1
 80030fe:	f002 fbef 	bl	80058e0 <HAL_Delay>
    lcd_send_cmd(0x01);   // Clear display
 8003102:	2001      	movs	r0, #1
 8003104:	f7ff ff44 	bl	8002f90 <lcd_send_cmd>
    HAL_Delay(2);
 8003108:	2002      	movs	r0, #2
 800310a:	f002 fbe9 	bl	80058e0 <HAL_Delay>
    lcd_send_cmd(0x06);   // Entry mode set: I/D=1 (Increment), S=0 (No shift)
 800310e:	2006      	movs	r0, #6
 8003110:	f7ff ff3e 	bl	8002f90 <lcd_send_cmd>
    HAL_Delay(1);
 8003114:	2001      	movs	r0, #1
 8003116:	f002 fbe3 	bl	80058e0 <HAL_Delay>
    lcd_send_cmd(0x0C);   // Display on/off control: D=1, C=0, B=0 (Display on, cursor off, blink off)
 800311a:	200c      	movs	r0, #12
 800311c:	f7ff ff38 	bl	8002f90 <lcd_send_cmd>
}
 8003120:	bf00      	nop
 8003122:	bd80      	pop	{r7, pc}

08003124 <lcd_send_string>:

void lcd_send_string(char *str) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    osMutexAcquire(lcdMutexHandle, osWaitForever);
 800312c:	4b0d      	ldr	r3, [pc, #52]	@ (8003164 <lcd_send_string+0x40>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f04f 31ff 	mov.w	r1, #4294967295
 8003134:	4618      	mov	r0, r3
 8003136:	f008 fee4 	bl	800bf02 <osMutexAcquire>
    while (*str) {
 800313a:	e006      	b.n	800314a <lcd_send_string+0x26>
        lcd_send_data(*str++);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff53 	bl	8002ff0 <lcd_send_data>
    while (*str) {
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f4      	bne.n	800313c <lcd_send_string+0x18>
    }
    osMutexRelease(lcdMutexHandle);
 8003152:	4b04      	ldr	r3, [pc, #16]	@ (8003164 <lcd_send_string+0x40>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f008 ff1e 	bl	800bf98 <osMutexRelease>
}
 800315c:	bf00      	nop
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000754 	.word	0x20000754

08003168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800316c:	f002 fb46 	bl	80057fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003170:	f000 f820 	bl	80031b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003174:	f7ff fd76 	bl	8002c64 <MX_GPIO_Init>
  MX_DMA_ADC_Init();
 8003178:	f7fe fd58 	bl	8001c2c <MX_DMA_ADC_Init>
  MX_DMA_UART_Init();
 800317c:	f002 fa5e 	bl	800563c <MX_DMA_UART_Init>
  MX_ADC1_Init();
 8003180:	f7fe fcd2 	bl	8001b28 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003184:	f7ff fe7e 	bl	8002e84 <MX_I2C1_Init>
  MX_TIM1_Init();
 8003188:	f001 ffb6 	bl	80050f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800318c:	f002 f804 	bl	8005198 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003190:	f002 f84e 	bl	8005230 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003194:	f002 f89a 	bl	80052cc <MX_TIM4_Init>
  MX_TIM5_Init();
 8003198:	f002 f8e6 	bl	8005368 <MX_TIM5_Init>
  MX_TIM6_Init();
 800319c:	f002 f932 	bl	8005404 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80031a0:	f002 fa22 	bl	80055e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80031a4:	f008 fd30 	bl	800bc08 <osKernelInitialize>

  MX_FREERTOS_Init();
 80031a8:	f7ff fcfc 	bl	8002ba4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80031ac:	f008 fd50 	bl	800bc50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80031b0:	bf00      	nop
 80031b2:	e7fd      	b.n	80031b0 <main+0x48>

080031b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b094      	sub	sp, #80	@ 0x50
 80031b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031ba:	f107 0320 	add.w	r3, r7, #32
 80031be:	2230      	movs	r2, #48	@ 0x30
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f00d fad3 	bl	801076e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031c8:	f107 030c 	add.w	r3, r7, #12
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031d8:	2300      	movs	r3, #0
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	4b28      	ldr	r3, [pc, #160]	@ (8003280 <SystemClock_Config+0xcc>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	4a27      	ldr	r2, [pc, #156]	@ (8003280 <SystemClock_Config+0xcc>)
 80031e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80031e8:	4b25      	ldr	r3, [pc, #148]	@ (8003280 <SystemClock_Config+0xcc>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f0:	60bb      	str	r3, [r7, #8]
 80031f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031f4:	2300      	movs	r3, #0
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	4b22      	ldr	r3, [pc, #136]	@ (8003284 <SystemClock_Config+0xd0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a21      	ldr	r2, [pc, #132]	@ (8003284 <SystemClock_Config+0xd0>)
 80031fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b1f      	ldr	r3, [pc, #124]	@ (8003284 <SystemClock_Config+0xd0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800320c:	607b      	str	r3, [r7, #4]
 800320e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003210:	2301      	movs	r3, #1
 8003212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003214:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800321a:	2302      	movs	r3, #2
 800321c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800321e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003224:	2304      	movs	r3, #4
 8003226:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003228:	23a8      	movs	r3, #168	@ 0xa8
 800322a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800322c:	2302      	movs	r3, #2
 800322e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003230:	2304      	movs	r3, #4
 8003232:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003234:	f107 0320 	add.w	r3, r7, #32
 8003238:	4618      	mov	r0, r3
 800323a:	f006 f96f 	bl	800951c <HAL_RCC_OscConfig>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003244:	f000 f84a 	bl	80032dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003248:	230f      	movs	r3, #15
 800324a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800324c:	2302      	movs	r3, #2
 800324e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003254:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800325a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800325e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003260:	f107 030c 	add.w	r3, r7, #12
 8003264:	2105      	movs	r1, #5
 8003266:	4618      	mov	r0, r3
 8003268:	f006 fbd0 	bl	8009a0c <HAL_RCC_ClockConfig>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003272:	f000 f833 	bl	80032dc <Error_Handler>
  }
}
 8003276:	bf00      	nop
 8003278:	3750      	adds	r7, #80	@ 0x50
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	40007000 	.word	0x40007000

08003288 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

	  if(htim->Instance == TIM2){
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003298:	d102      	bne.n	80032a0 <HAL_TIM_PeriodElapsedCallback+0x18>
		  Accel_Stepper_TIMIT_Handler(&Stepper1);
 800329a:	480b      	ldr	r0, [pc, #44]	@ (80032c8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800329c:	f7fd fedc 	bl	8001058 <Accel_Stepper_TIMIT_Handler>
	  }
	  if(htim->Instance == TIM3){
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a09      	ldr	r2, [pc, #36]	@ (80032cc <HAL_TIM_PeriodElapsedCallback+0x44>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d102      	bne.n	80032b0 <HAL_TIM_PeriodElapsedCallback+0x28>
		  Accel_Stepper_TIMIT_Handler(&Stepper2);
 80032aa:	4809      	ldr	r0, [pc, #36]	@ (80032d0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80032ac:	f7fd fed4 	bl	8001058 <Accel_Stepper_TIMIT_Handler>
	  }
	  if(htim->Instance == TIM4){
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a07      	ldr	r2, [pc, #28]	@ (80032d4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d102      	bne.n	80032c0 <HAL_TIM_PeriodElapsedCallback+0x38>
		  Accel_Stepper_TIMIT_Handler(&Stepper3);
 80032ba:	4807      	ldr	r0, [pc, #28]	@ (80032d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80032bc:	f7fd fecc 	bl	8001058 <Accel_Stepper_TIMIT_Handler>
	  }
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	200002b0 	.word	0x200002b0
 80032cc:	40000400 	.word	0x40000400
 80032d0:	20000310 	.word	0x20000310
 80032d4:	40000800 	.word	0x40000800
 80032d8:	20000370 	.word	0x20000370

080032dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032e0:	b672      	cpsid	i
}
 80032e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032e4:	bf00      	nop
 80032e6:	e7fd      	b.n	80032e4 <Error_Handler+0x8>

080032e8 <initialize_LCD>:
const int numButtons = sizeof(buttons) / sizeof(Button*);

float l,m,k;
extern char ip_config[20];
void initialize_LCD(LCD_adc_t *lcd)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
	lcd->sensitivity = 0.066;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a0e      	ldr	r2, [pc, #56]	@ (800332c <initialize_LCD+0x44>)
 80032f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	lcd->ACSoffset=2.5;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003330 <initialize_LCD+0x48>)
 80032fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	lcd->m = 0.4;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a0c      	ldr	r2, [pc, #48]	@ (8003334 <initialize_LCD+0x4c>)
 8003304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	lcd->C = 2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800330e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	lcd->V25 = 0.0025;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a08      	ldr	r2, [pc, #32]	@ (8003338 <initialize_LCD+0x50>)
 8003316:	675a      	str	r2, [r3, #116]	@ 0x74
	lcd->Avg_Slope = 0.76;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a08      	ldr	r2, [pc, #32]	@ (800333c <initialize_LCD+0x54>)
 800331c:	679a      	str	r2, [r3, #120]	@ 0x78
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	3d872b02 	.word	0x3d872b02
 8003330:	40200000 	.word	0x40200000
 8003334:	3ecccccd 	.word	0x3ecccccd
 8003338:	3b23d70a 	.word	0x3b23d70a
 800333c:	3f428f5c 	.word	0x3f428f5c

08003340 <initialize_Kalman>:

void initialize_Kalman(Kalman_filter *kf)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
    kf->N = 10;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	220a      	movs	r2, #10
 800334c:	601a      	str	r2, [r3, #0]
    kf->ema_filtered_value = 0.0f;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
    kf->Q = KALMAN_Q;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a17      	ldr	r2, [pc, #92]	@ (80033b8 <initialize_Kalman+0x78>)
 800335a:	61da      	str	r2, [r3, #28]
    kf->R = KALMAN_R;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a17      	ldr	r2, [pc, #92]	@ (80033bc <initialize_Kalman+0x7c>)
 8003360:	621a      	str	r2, [r3, #32]
    kf->Kg = 0.0f;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	625a      	str	r2, [r3, #36]	@ 0x24
    kf->P_k_k1 = 1.0f;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003370:	629a      	str	r2, [r3, #40]	@ 0x28
    kf->kalman_adc_old = 0.0f;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->index = 0;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	649a      	str	r2, [r3, #72]	@ 0x48
    kf->sum = 0;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	64da      	str	r2, [r3, #76]	@ 0x4c
    for (int i = 0; i < kf->N; ++i) {
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	e009      	b.n	80033a0 <initialize_Kalman+0x60>
        kf->buffer[i] = 0;
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3318      	adds	r3, #24
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	2200      	movs	r2, #0
 8003398:	809a      	strh	r2, [r3, #4]
    for (int i = 0; i < kf->N; ++i) {
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3301      	adds	r3, #1
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	dbf0      	blt.n	800338c <initialize_Kalman+0x4c>
    }
}
 80033aa:	bf00      	nop
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	38d1b717 	.word	0x38d1b717
 80033bc:	3dcccccd 	.word	0x3dcccccd

080033c0 <delay_lcd>:


void delay_lcd(uint16_t delay)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim6);
 80033ca:	480a      	ldr	r0, [pc, #40]	@ (80033f4 <delay_lcd+0x34>)
 80033cc:	f006 fd8e 	bl	8009eec <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80033d0:	4b08      	ldr	r3, [pc, #32]	@ (80033f4 <delay_lcd+0x34>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2200      	movs	r2, #0
 80033d6:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < delay);
 80033d8:	bf00      	nop
 80033da:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <delay_lcd+0x34>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d3f9      	bcc.n	80033da <delay_lcd+0x1a>
	HAL_TIM_Base_Stop_IT(&htim6);
 80033e6:	4803      	ldr	r0, [pc, #12]	@ (80033f4 <delay_lcd+0x34>)
 80033e8:	f006 fdf0 	bl	8009fcc <HAL_TIM_Base_Stop_IT>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000b94 	.word	0x20000b94

080033f8 <stepX>:

void stepX(int steps, uint8_t direction, uint16_t delay)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	70fb      	strb	r3, [r7, #3]
 8003404:	4613      	mov	r3, r2
 8003406:	803b      	strh	r3, [r7, #0]
    int a;
    HAL_GPIO_WritePin(dir_1_GPIO_Port, dir_1_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	2b00      	cmp	r3, #0
 800340c:	bf0c      	ite	eq
 800340e:	2301      	moveq	r3, #1
 8003410:	2300      	movne	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	2102      	movs	r1, #2
 8003418:	480c      	ldr	r0, [pc, #48]	@ (800344c <stepX+0x54>)
 800341a:	f003 fe93 	bl	8007144 <HAL_GPIO_WritePin>
    for (a = 0; a < steps; ++a)
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e00a      	b.n	800343a <stepX+0x42>
    {
        HAL_GPIO_TogglePin(step_1_GPIO_Port, step_1_pin);
 8003424:	2101      	movs	r1, #1
 8003426:	4809      	ldr	r0, [pc, #36]	@ (800344c <stepX+0x54>)
 8003428:	f003 fea5 	bl	8007176 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 800342c:	883b      	ldrh	r3, [r7, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ffc6 	bl	80033c0 <delay_lcd>
    for (a = 0; a < steps; ++a)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3301      	adds	r3, #1
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	429a      	cmp	r2, r3
 8003440:	dbf0      	blt.n	8003424 <stepX+0x2c>
    }
}
 8003442:	bf00      	nop
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40020000 	.word	0x40020000

08003450 <stepY>:

void stepY(int steps, uint8_t direction, uint16_t delay)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	70fb      	strb	r3, [r7, #3]
 800345c:	4613      	mov	r3, r2
 800345e:	803b      	strh	r3, [r7, #0]
    int b;
    HAL_GPIO_WritePin(dir_2_GPIO_Port, dir_2_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	2108      	movs	r1, #8
 8003470:	480c      	ldr	r0, [pc, #48]	@ (80034a4 <stepY+0x54>)
 8003472:	f003 fe67 	bl	8007144 <HAL_GPIO_WritePin>
    for (b = 0; b < steps; ++b)
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	e00a      	b.n	8003492 <stepY+0x42>
    {
        HAL_GPIO_TogglePin(step_2_GPIO_Port, step_2_pin);
 800347c:	2104      	movs	r1, #4
 800347e:	4809      	ldr	r0, [pc, #36]	@ (80034a4 <stepY+0x54>)
 8003480:	f003 fe79 	bl	8007176 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 8003484:	883b      	ldrh	r3, [r7, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff ff9a 	bl	80033c0 <delay_lcd>
    for (b = 0; b < steps; ++b)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3301      	adds	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	dbf0      	blt.n	800347c <stepY+0x2c>
    }
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40020000 	.word	0x40020000

080034a8 <stepZ>:

void stepZ(int steps, uint8_t direction, uint16_t delay)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
 80034b4:	4613      	mov	r3, r2
 80034b6:	803b      	strh	r3, [r7, #0]
    int c;
    HAL_GPIO_WritePin(dir_3_GPIO_Port, dir_3_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bf0c      	ite	eq
 80034be:	2301      	moveq	r3, #1
 80034c0:	2300      	movne	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	2120      	movs	r1, #32
 80034c8:	480c      	ldr	r0, [pc, #48]	@ (80034fc <stepZ+0x54>)
 80034ca:	f003 fe3b 	bl	8007144 <HAL_GPIO_WritePin>
    for (c = 0; c < steps; ++c)
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	e00a      	b.n	80034ea <stepZ+0x42>
    {
        HAL_GPIO_TogglePin(step_3_GPIO_Port, step_3_pin);
 80034d4:	2110      	movs	r1, #16
 80034d6:	4809      	ldr	r0, [pc, #36]	@ (80034fc <stepZ+0x54>)
 80034d8:	f003 fe4d 	bl	8007176 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 80034dc:	883b      	ldrh	r3, [r7, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff ff6e 	bl	80033c0 <delay_lcd>
    for (c = 0; c < steps; ++c)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	3301      	adds	r3, #1
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	dbf0      	blt.n	80034d4 <stepZ+0x2c>
    }
}
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40020000 	.word	0x40020000

08003500 <moving_average_filter>:

uint16_t moving_average_filter(Kalman_filter *kf, uint16_t ADC_Value)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	807b      	strh	r3, [r7, #2]
    kf->sum -= kf->buffer[kf->index];
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	3318      	adds	r3, #24
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	440b      	add	r3, r1
 800351c:	889b      	ldrh	r3, [r3, #4]
 800351e:	1ad2      	subs	r2, r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	64da      	str	r2, [r3, #76]	@ 0x4c
    kf->buffer[kf->index] = ADC_Value;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	3318      	adds	r3, #24
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	887a      	ldrh	r2, [r7, #2]
 8003532:	809a      	strh	r2, [r3, #4]
    kf->sum += kf->buffer[kf->index];
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	3318      	adds	r3, #24
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	440b      	add	r3, r1
 8003544:	889b      	ldrh	r3, [r3, #4]
 8003546:	441a      	add	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	64da      	str	r2, [r3, #76]	@ 0x4c

    kf->index = (kf->index + 1) % kf->N;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003550:	3301      	adds	r3, #1
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	fb93 f1f2 	sdiv	r1, r3, r2
 800355a:	fb01 f202 	mul.w	r2, r1, r2
 800355e:	1a9a      	subs	r2, r3, r2
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	649a      	str	r2, [r3, #72]	@ 0x48

    return (uint16_t)(kf->sum / kf->N);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003570:	b29b      	uxth	r3, r3
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <exponential_moving_average_filter>:

uint16_t exponential_moving_average_filter(Kalman_filter *kf, uint16_t ADC_Value, float alpha)
{
 800357e:	b480      	push	{r7}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	460b      	mov	r3, r1
 8003588:	ed87 0a01 	vstr	s0, [r7, #4]
 800358c:	817b      	strh	r3, [r7, #10]
    kf->ema_filtered_value = (alpha * ADC_Value) + ((1 - alpha) * kf->ema_filtered_value);
 800358e:	897b      	ldrh	r3, [r7, #10]
 8003590:	ee07 3a90 	vmov	s15, r3
 8003594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003598:	edd7 7a01 	vldr	s15, [r7, #4]
 800359c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80035a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80035b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	edc3 7a02 	vstr	s15, [r3, #8]
    return (uint16_t)kf->ema_filtered_value;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80035c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ca:	ee17 3a90 	vmov	r3, s15
 80035ce:	b29b      	uxth	r3, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <kalman_filter>:

uint16_t kalman_filter(Kalman_filter *kf, uint16_t ADC_Value)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	807b      	strh	r3, [r7, #2]
    kf->Z_k = (float)ADC_Value;
 80035e8:	887b      	ldrh	r3, [r7, #2]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->x_k1_k1 = kf->kalman_adc_old;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	60da      	str	r2, [r3, #12]

    kf->x_k_k1 = kf->x_k1_k1;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	611a      	str	r2, [r3, #16]
    kf->P_k_k1 = kf->P_k1_k1 + kf->Q;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	ed93 7a06 	vldr	s14, [r3, #24]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	edd3 7a07 	vldr	s15, [r3, #28]
 8003614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    kf->Kg = kf->P_k_k1 / (kf->P_k_k1 + kf->R);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003630:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    kf->kalman_adc = kf->x_k_k1 + kf->Kg * (kf->Z_k - kf->kalman_adc_old);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	ed93 7a04 	vldr	s14, [r3, #16]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	ed93 6a05 	vldr	s12, [r3, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003656:	ee76 7a67 	vsub.f32	s15, s12, s15
 800365a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800365e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    kf->P_k1_k1 = (1 - kf->Kg) * kf->P_k_k1;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800366e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003672:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800367c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	edc3 7a06 	vstr	s15, [r3, #24]

    kf->kalman_adc_old = kf->kalman_adc;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (uint16_t)kf->kalman_adc;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003698:	ee17 3a90 	vmov	r3, s15
 800369c:	b29b      	uxth	r3, r3
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	0000      	movs	r0, r0
 80036ac:	0000      	movs	r0, r0
	...

080036b0 <vol_messure>:

void vol_messure(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
    ADC_Select_CH10();  
 80036b6:	f7fe fa79 	bl	8001bac <ADC_Select_CH10>
    HAL_ADC_Start(&hadc1);
 80036ba:	483f      	ldr	r0, [pc, #252]	@ (80037b8 <vol_messure+0x108>)
 80036bc:	f002 f978 	bl	80059b0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 80036c0:	2101      	movs	r1, #1
 80036c2:	483d      	ldr	r0, [pc, #244]	@ (80037b8 <vol_messure+0x108>)
 80036c4:	f002 fa79 	bl	8005bba <HAL_ADC_PollForConversion>
    LCD_adc.readValue[0] = HAL_ADC_GetValue(&hadc1);
 80036c8:	483b      	ldr	r0, [pc, #236]	@ (80037b8 <vol_messure+0x108>)
 80036ca:	f002 fc11 	bl	8005ef0 <HAL_ADC_GetValue>
 80036ce:	4603      	mov	r3, r0
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	4b3a      	ldr	r3, [pc, #232]	@ (80037bc <vol_messure+0x10c>)
 80036d4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    uint16_t moving_avg_filtered = moving_average_filter(&kalman_fil_volt, LCD_adc.readValue[0]); // Apply moving average filter
 80036d8:	4b38      	ldr	r3, [pc, #224]	@ (80037bc <vol_messure+0x10c>)
 80036da:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80036de:	4619      	mov	r1, r3
 80036e0:	4837      	ldr	r0, [pc, #220]	@ (80037c0 <vol_messure+0x110>)
 80036e2:	f7ff ff0d 	bl	8003500 <moving_average_filter>
 80036e6:	4603      	mov	r3, r0
 80036e8:	80fb      	strh	r3, [r7, #6]
    uint16_t ema_filtered = exponential_moving_average_filter(&kalman_fil_volt, moving_avg_filtered, EMA_ALPHA_VOLT); // Apply EMA filter
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80037c4 <vol_messure+0x114>
 80036f0:	4619      	mov	r1, r3
 80036f2:	4833      	ldr	r0, [pc, #204]	@ (80037c0 <vol_messure+0x110>)
 80036f4:	f7ff ff43 	bl	800357e <exponential_moving_average_filter>
 80036f8:	4603      	mov	r3, r0
 80036fa:	80bb      	strh	r3, [r7, #4]
    kalman_fil_volt.filter_kal = kalman_filter(&kalman_fil_volt, ema_filtered); // Apply Kalman filter
 80036fc:	88bb      	ldrh	r3, [r7, #4]
 80036fe:	4619      	mov	r1, r3
 8003700:	482f      	ldr	r0, [pc, #188]	@ (80037c0 <vol_messure+0x110>)
 8003702:	f7ff ff6b 	bl	80035dc <kalman_filter>
 8003706:	4603      	mov	r3, r0
 8003708:	461a      	mov	r2, r3
 800370a:	4b2d      	ldr	r3, [pc, #180]	@ (80037c0 <vol_messure+0x110>)
 800370c:	809a      	strh	r2, [r3, #4]

    LCD_adc.volt = ((float)kalman_fil_volt.filter_kal / 4095) * 3.6f;
 800370e:	4b2c      	ldr	r3, [pc, #176]	@ (80037c0 <vol_messure+0x110>)
 8003710:	889b      	ldrh	r3, [r3, #4]
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800371a:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80037c8 <vol_messure+0x118>
 800371e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003722:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80037cc <vol_messure+0x11c>
 8003726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800372a:	4b24      	ldr	r3, [pc, #144]	@ (80037bc <vol_messure+0x10c>)
 800372c:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
    LCD_adc.sum = (LCD_adc.volt * 6.5f) + 0.2f;
 8003730:	4b22      	ldr	r3, [pc, #136]	@ (80037bc <vol_messure+0x10c>)
 8003732:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8003736:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 800373a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800373e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80037d0 <vol_messure+0x120>
 8003742:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003746:	4b1d      	ldr	r3, [pc, #116]	@ (80037bc <vol_messure+0x10c>)
 8003748:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (LCD_adc.sum > 16.3 && LCD_adc.sum < 21)
 800374c:	4b1b      	ldr	r3, [pc, #108]	@ (80037bc <vol_messure+0x10c>)
 800374e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc ff09 	bl	8000568 <__aeabi_f2d>
 8003756:	a316      	add	r3, pc, #88	@ (adr r3, 80037b0 <vol_messure+0x100>)
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f7fd f9ec 	bl	8000b38 <__aeabi_dcmpgt>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00d      	beq.n	8003782 <vol_messure+0xd2>
 8003766:	4b15      	ldr	r3, [pc, #84]	@ (80037bc <vol_messure+0x10c>)
 8003768:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800376c:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 8003770:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003778:	d503      	bpl.n	8003782 <vol_messure+0xd2>
        LCD_adc.voltage = LCD_adc.sum; // Default value when no voltage exceeds the threshold
 800377a:	4b10      	ldr	r3, [pc, #64]	@ (80037bc <vol_messure+0x10c>)
 800377c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377e:	4a0f      	ldr	r2, [pc, #60]	@ (80037bc <vol_messure+0x10c>)
 8003780:	6553      	str	r3, [r2, #84]	@ 0x54
    if (LCD_adc.sum < 14)
 8003782:	4b0e      	ldr	r3, [pc, #56]	@ (80037bc <vol_messure+0x10c>)
 8003784:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003788:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 800378c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003794:	d503      	bpl.n	800379e <vol_messure+0xee>
        LCD_adc.voltage = 0;
 8003796:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <vol_messure+0x10c>)
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_Stop(&hadc1);
 800379e:	4806      	ldr	r0, [pc, #24]	@ (80037b8 <vol_messure+0x108>)
 80037a0:	f002 f9d8 	bl	8005b54 <HAL_ADC_Stop>
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	f3af 8000 	nop.w
 80037b0:	cccccccd 	.word	0xcccccccd
 80037b4:	40304ccc 	.word	0x40304ccc
 80037b8:	200003d0 	.word	0x200003d0
 80037bc:	200008b4 	.word	0x200008b4
 80037c0:	200009d0 	.word	0x200009d0
 80037c4:	3c23d70a 	.word	0x3c23d70a
 80037c8:	457ff000 	.word	0x457ff000
 80037cc:	40666666 	.word	0x40666666
 80037d0:	3e4ccccd 	.word	0x3e4ccccd
 80037d4:	00000000 	.word	0x00000000

080037d8 <cur_messure>:

void cur_messure(void)
{
 80037d8:	b5b0      	push	{r4, r5, r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
    ADC_Select_CH11();
 80037de:	f7fe fa05 	bl	8001bec <ADC_Select_CH11>
    HAL_ADC_Start(&hadc1);
 80037e2:	4859      	ldr	r0, [pc, #356]	@ (8003948 <cur_messure+0x170>)
 80037e4:	f002 f8e4 	bl	80059b0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 80037e8:	2101      	movs	r1, #1
 80037ea:	4857      	ldr	r0, [pc, #348]	@ (8003948 <cur_messure+0x170>)
 80037ec:	f002 f9e5 	bl	8005bba <HAL_ADC_PollForConversion>
    LCD_adc.readValue[1] = HAL_ADC_GetValue(&hadc1);
 80037f0:	4855      	ldr	r0, [pc, #340]	@ (8003948 <cur_messure+0x170>)
 80037f2:	f002 fb7d 	bl	8005ef0 <HAL_ADC_GetValue>
 80037f6:	4603      	mov	r3, r0
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	4b54      	ldr	r3, [pc, #336]	@ (800394c <cur_messure+0x174>)
 80037fc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    uint16_t moving_avg_filtered = moving_average_filter(&kalman_fil_curr, LCD_adc.readValue[1]); // Apply moving average filter
 8003800:	4b52      	ldr	r3, [pc, #328]	@ (800394c <cur_messure+0x174>)
 8003802:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8003806:	4619      	mov	r1, r3
 8003808:	4851      	ldr	r0, [pc, #324]	@ (8003950 <cur_messure+0x178>)
 800380a:	f7ff fe79 	bl	8003500 <moving_average_filter>
 800380e:	4603      	mov	r3, r0
 8003810:	80fb      	strh	r3, [r7, #6]
    uint16_t ema_filtered = exponential_moving_average_filter(&kalman_fil_curr, moving_avg_filtered, EMA_ALPHA_CURR); // Apply EMA filter
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8003954 <cur_messure+0x17c>
 8003818:	4619      	mov	r1, r3
 800381a:	484d      	ldr	r0, [pc, #308]	@ (8003950 <cur_messure+0x178>)
 800381c:	f7ff feaf 	bl	800357e <exponential_moving_average_filter>
 8003820:	4603      	mov	r3, r0
 8003822:	80bb      	strh	r3, [r7, #4]
    kalman_fil_curr.filter_kal = kalman_filter(&kalman_fil_curr, ema_filtered); // Apply Kalman filter
 8003824:	88bb      	ldrh	r3, [r7, #4]
 8003826:	4619      	mov	r1, r3
 8003828:	4849      	ldr	r0, [pc, #292]	@ (8003950 <cur_messure+0x178>)
 800382a:	f7ff fed7 	bl	80035dc <kalman_filter>
 800382e:	4603      	mov	r3, r0
 8003830:	461a      	mov	r2, r3
 8003832:	4b47      	ldr	r3, [pc, #284]	@ (8003950 <cur_messure+0x178>)
 8003834:	809a      	strh	r2, [r3, #4]
    //    LCD_adc.sum1 = 0.0000002f * kalman_fil_curr.filter_kal_cur * kalman_fil_curr.filter_kal_cur - 0.0114f * kalman_fil_curr.filter_kal_cur + 35.5522898f -0.43 -  0.277999997; //- 0.897746623 + 0.105 + 0.085 - 0.02
    //    if (LCD_adc.sum1 > 0.43 && LCD_adc.sum1 < 15) LCD_adc.current = LCD_adc.sum1;
    //    if (LCD_adc.sum1 < 0.43) LCD_adc.current = 0;
    //    LCD_adc.Temp = ((3.3 * kalman_fil_curr.filter_kal_cur / 4095 - LCD_adc.V25) / LCD_adc.Avg_Slope) + 25;
    	// Calculate CURRENT using the cubic polynomial equation
    LCD_adc.sum1 = 0.00000009 * kalman_fil_curr.filter_kal * kalman_fil_curr.filter_kal + 0.0102 * kalman_fil_curr.filter_kal - 34.52249168 + l ;
 8003836:	4b46      	ldr	r3, [pc, #280]	@ (8003950 <cur_messure+0x178>)
 8003838:	889b      	ldrh	r3, [r3, #4]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fc fe82 	bl	8000544 <__aeabi_i2d>
 8003840:	a33b      	add	r3, pc, #236	@ (adr r3, 8003930 <cur_messure+0x158>)
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	f7fc fee7 	bl	8000618 <__aeabi_dmul>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4614      	mov	r4, r2
 8003850:	461d      	mov	r5, r3
 8003852:	4b3f      	ldr	r3, [pc, #252]	@ (8003950 <cur_messure+0x178>)
 8003854:	889b      	ldrh	r3, [r3, #4]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fc fe74 	bl	8000544 <__aeabi_i2d>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4620      	mov	r0, r4
 8003862:	4629      	mov	r1, r5
 8003864:	f7fc fed8 	bl	8000618 <__aeabi_dmul>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4614      	mov	r4, r2
 800386e:	461d      	mov	r5, r3
 8003870:	4b37      	ldr	r3, [pc, #220]	@ (8003950 <cur_messure+0x178>)
 8003872:	889b      	ldrh	r3, [r3, #4]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fc fe65 	bl	8000544 <__aeabi_i2d>
 800387a:	a32f      	add	r3, pc, #188	@ (adr r3, 8003938 <cur_messure+0x160>)
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	f7fc feca 	bl	8000618 <__aeabi_dmul>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4620      	mov	r0, r4
 800388a:	4629      	mov	r1, r5
 800388c:	f7fc fd0e 	bl	80002ac <__adddf3>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	a329      	add	r3, pc, #164	@ (adr r3, 8003940 <cur_messure+0x168>)
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	f7fc fd03 	bl	80002a8 <__aeabi_dsub>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4614      	mov	r4, r2
 80038a8:	461d      	mov	r5, r3
 80038aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003958 <cur_messure+0x180>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fc fe5a 	bl	8000568 <__aeabi_f2d>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4620      	mov	r0, r4
 80038ba:	4629      	mov	r1, r5
 80038bc:	f7fc fcf6 	bl	80002ac <__adddf3>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4610      	mov	r0, r2
 80038c6:	4619      	mov	r1, r3
 80038c8:	f7fd f99e 	bl	8000c08 <__aeabi_d2f>
 80038cc:	4603      	mov	r3, r0
 80038ce:	4a1f      	ldr	r2, [pc, #124]	@ (800394c <cur_messure+0x174>)
 80038d0:	6453      	str	r3, [r2, #68]	@ 0x44
    if (LCD_adc.sum1 > 0.5 && LCD_adc.sum1 < 15)
 80038d2:	4b1e      	ldr	r3, [pc, #120]	@ (800394c <cur_messure+0x174>)
 80038d4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80038d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e4:	dd0d      	ble.n	8003902 <cur_messure+0x12a>
 80038e6:	4b19      	ldr	r3, [pc, #100]	@ (800394c <cur_messure+0x174>)
 80038e8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80038ec:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80038f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f8:	d503      	bpl.n	8003902 <cur_messure+0x12a>
        LCD_adc.current = LCD_adc.sum1;
 80038fa:	4b14      	ldr	r3, [pc, #80]	@ (800394c <cur_messure+0x174>)
 80038fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fe:	4a13      	ldr	r2, [pc, #76]	@ (800394c <cur_messure+0x174>)
 8003900:	6513      	str	r3, [r2, #80]	@ 0x50
    if (LCD_adc.sum1 < 0.5)
 8003902:	4b12      	ldr	r3, [pc, #72]	@ (800394c <cur_messure+0x174>)
 8003904:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003908:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800390c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003914:	d503      	bpl.n	800391e <cur_messure+0x146>
        LCD_adc.current = 0;
 8003916:	4b0d      	ldr	r3, [pc, #52]	@ (800394c <cur_messure+0x174>)
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_ADC_Stop(&hadc1);
 800391e:	480a      	ldr	r0, [pc, #40]	@ (8003948 <cur_messure+0x170>)
 8003920:	f002 f918 	bl	8005b54 <HAL_ADC_Stop>
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bdb0      	pop	{r4, r5, r7, pc}
 800392c:	f3af 8000 	nop.w
 8003930:	be769dc1 	.word	0xbe769dc1
 8003934:	3e7828c0 	.word	0x3e7828c0
 8003938:	d35a8588 	.word	0xd35a8588
 800393c:	3f84e3bc 	.word	0x3f84e3bc
 8003940:	01e3041c 	.word	0x01e3041c
 8003944:	404142e1 	.word	0x404142e1
 8003948:	200003d0 	.word	0x200003d0
 800394c:	200008b4 	.word	0x200008b4
 8003950:	20000980 	.word	0x20000980
 8003954:	3a83126f 	.word	0x3a83126f
 8003958:	20000a24 	.word	0x20000a24

0800395c <power_messure>:

void power_messure(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
    LCD_adc.power = LCD_adc.current * LCD_adc.voltage;
 8003960:	4b07      	ldr	r3, [pc, #28]	@ (8003980 <power_messure+0x24>)
 8003962:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8003966:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <power_messure+0x24>)
 8003968:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800396c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003970:	4b03      	ldr	r3, [pc, #12]	@ (8003980 <power_messure+0x24>)
 8003972:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
}
 8003976:	bf00      	nop
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	200008b4 	.word	0x200008b4
 8003984:	00000000 	.word	0x00000000

08003988 <temperature_messure>:

void temperature_messure(void)
{
 8003988:	b5b0      	push	{r4, r5, r7, lr}
 800398a:	af00      	add	r7, sp, #0

        LCD_adc.T = (LCD_adc.voltage * LCD_adc.C) / LCD_adc.power;
 800398c:	4b34      	ldr	r3, [pc, #208]	@ (8003a60 <temperature_messure+0xd8>)
 800398e:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8003992:	4b33      	ldr	r3, [pc, #204]	@ (8003a60 <temperature_messure+0xd8>)
 8003994:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8003998:	ee67 6a27 	vmul.f32	s13, s14, s15
 800399c:	4b30      	ldr	r3, [pc, #192]	@ (8003a60 <temperature_messure+0xd8>)
 800399e:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 80039a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003a60 <temperature_messure+0xd8>)
 80039a8:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
        LCD_adc.joule = LCD_adc.power * LCD_adc.T;
 80039ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003a60 <temperature_messure+0xd8>)
 80039ae:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 80039b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003a60 <temperature_messure+0xd8>)
 80039b4:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80039b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039bc:	4b28      	ldr	r3, [pc, #160]	@ (8003a60 <temperature_messure+0xd8>)
 80039be:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        //LCD_adc.temp = LCD_adc.joule / (LCD_adc.m * 20);
        LCD_adc.Temp = ((3.3 * kalman_fil_curr.filter_kal / 4095 - LCD_adc.V25) / LCD_adc.Avg_Slope) + 25;
 80039c2:	4b28      	ldr	r3, [pc, #160]	@ (8003a64 <temperature_messure+0xdc>)
 80039c4:	889b      	ldrh	r3, [r3, #4]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fc fdbc 	bl	8000544 <__aeabi_i2d>
 80039cc:	a320      	add	r3, pc, #128	@ (adr r3, 8003a50 <temperature_messure+0xc8>)
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	f7fc fe21 	bl	8000618 <__aeabi_dmul>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4610      	mov	r0, r2
 80039dc:	4619      	mov	r1, r3
 80039de:	a31e      	add	r3, pc, #120	@ (adr r3, 8003a58 <temperature_messure+0xd0>)
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f7fc ff42 	bl	800086c <__aeabi_ddiv>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4614      	mov	r4, r2
 80039ee:	461d      	mov	r5, r3
 80039f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a60 <temperature_messure+0xd8>)
 80039f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fc fdb7 	bl	8000568 <__aeabi_f2d>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4620      	mov	r0, r4
 8003a00:	4629      	mov	r1, r5
 8003a02:	f7fc fc51 	bl	80002a8 <__aeabi_dsub>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4614      	mov	r4, r2
 8003a0c:	461d      	mov	r5, r3
 8003a0e:	4b14      	ldr	r3, [pc, #80]	@ (8003a60 <temperature_messure+0xd8>)
 8003a10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fc fda8 	bl	8000568 <__aeabi_f2d>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	4629      	mov	r1, r5
 8003a20:	f7fc ff24 	bl	800086c <__aeabi_ddiv>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <temperature_messure+0xe0>)
 8003a32:	f7fc fc3b 	bl	80002ac <__adddf3>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f7fd f8e3 	bl	8000c08 <__aeabi_d2f>
 8003a42:	4603      	mov	r3, r0
 8003a44:	4a06      	ldr	r2, [pc, #24]	@ (8003a60 <temperature_messure+0xd8>)
 8003a46:	67d3      	str	r3, [r2, #124]	@ 0x7c
}
 8003a48:	bf00      	nop
 8003a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4c:	f3af 8000 	nop.w
 8003a50:	66666666 	.word	0x66666666
 8003a54:	400a6666 	.word	0x400a6666
 8003a58:	00000000 	.word	0x00000000
 8003a5c:	40affe00 	.word	0x40affe00
 8003a60:	200008b4 	.word	0x200008b4
 8003a64:	20000980 	.word	0x20000980
 8003a68:	40390000 	.word	0x40390000

08003a6c <startADC>:

void startADC(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
    vol_messure();
 8003a70:	f7ff fe1e 	bl	80036b0 <vol_messure>
    cur_messure();
 8003a74:	f7ff feb0 	bl	80037d8 <cur_messure>
    power_messure();
 8003a78:	f7ff ff70 	bl	800395c <power_messure>
    temperature_messure();
 8003a7c:	f7ff ff84 	bl	8003988 <temperature_messure>
}
 8003a80:	bf00      	nop
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	0000      	movs	r0, r0
	...

08003a88 <float_to_string>:

void float_to_string(float num, char *str, int decimalPlaces) {
 8003a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a8c:	b08d      	sub	sp, #52	@ 0x34
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a94:	60b8      	str	r0, [r7, #8]
 8003a96:	6079      	str	r1, [r7, #4]
 8003a98:	466b      	mov	r3, sp
 8003a9a:	461e      	mov	r6, r3
    int intPart = (int)num;
 8003a9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003aa4:	ee17 3a90 	vmov	r3, s15
 8003aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    int decPart = (int)((num - intPart) * pow(10, decimalPlaces));
 8003aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aac:	ee07 3a90 	vmov	s15, r3
 8003ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab4:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003abc:	ee17 0a90 	vmov	r0, s15
 8003ac0:	f7fc fd52 	bl	8000568 <__aeabi_f2d>
 8003ac4:	4682      	mov	sl, r0
 8003ac6:	468b      	mov	fp, r1
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7fc fd3b 	bl	8000544 <__aeabi_i2d>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	ec43 2b11 	vmov	d1, r2, r3
 8003ad6:	ed9f 0b42 	vldr	d0, [pc, #264]	@ 8003be0 <float_to_string+0x158>
 8003ada:	f010 fde7 	bl	80146ac <pow>
 8003ade:	ec53 2b10 	vmov	r2, r3, d0
 8003ae2:	4650      	mov	r0, sl
 8003ae4:	4659      	mov	r1, fp
 8003ae6:	f7fc fd97 	bl	8000618 <__aeabi_dmul>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4610      	mov	r0, r2
 8003af0:	4619      	mov	r1, r3
 8003af2:	f7fd f841 	bl	8000b78 <__aeabi_d2iz>
 8003af6:	4603      	mov	r3, r0
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24

    // Convert integer part to string
    itoa(intPart, str, 10);
 8003afa:	220a      	movs	r2, #10
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b00:	f00b fd42 	bl	800f588 <itoa>

    // Find length of integer part
    int len = strlen(str);
 8003b04:	68b8      	ldr	r0, [r7, #8]
 8003b06:	f7fc fbc3 	bl	8000290 <strlen>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	623b      	str	r3, [r7, #32]

    // Append decimal point
    str[len] = '.';
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	4413      	add	r3, r2
 8003b14:	222e      	movs	r2, #46	@ 0x2e
 8003b16:	701a      	strb	r2, [r3, #0]
    str[len + 1] = '\0';
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	4413      	add	r3, r2
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]

    // Convert decimal part to string
    char decStr[decimalPlaces + 1];
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	1c59      	adds	r1, r3, #1
 8003b28:	1e4b      	subs	r3, r1, #1
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	460a      	mov	r2, r1
 8003b2e:	2300      	movs	r3, #0
 8003b30:	4690      	mov	r8, r2
 8003b32:	4699      	mov	r9, r3
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b48:	460a      	mov	r2, r1
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	4614      	mov	r4, r2
 8003b4e:	461d      	mov	r5, r3
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	f04f 0300 	mov.w	r3, #0
 8003b58:	00eb      	lsls	r3, r5, #3
 8003b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b5e:	00e2      	lsls	r2, r4, #3
 8003b60:	460b      	mov	r3, r1
 8003b62:	3307      	adds	r3, #7
 8003b64:	08db      	lsrs	r3, r3, #3
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	ebad 0d03 	sub.w	sp, sp, r3
 8003b6c:	466b      	mov	r3, sp
 8003b6e:	3300      	adds	r3, #0
 8003b70:	61bb      	str	r3, [r7, #24]
    itoa(decPart, decStr, 10);
 8003b72:	220a      	movs	r2, #10
 8003b74:	69b9      	ldr	r1, [r7, #24]
 8003b76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b78:	f00b fd06 	bl	800f588 <itoa>

    // Pad with zeros if needed
    int decLen = strlen(decStr);
 8003b7c:	69b8      	ldr	r0, [r7, #24]
 8003b7e:	f7fc fb87 	bl	8000290 <strlen>
 8003b82:	4603      	mov	r3, r0
 8003b84:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < decimalPlaces - decLen; ++i) {
 8003b86:	2300      	movs	r3, #0
 8003b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b8a:	e00e      	b.n	8003baa <float_to_string+0x122>
        strcat(str, "0");
 8003b8c:	68b8      	ldr	r0, [r7, #8]
 8003b8e:	f7fc fb7f 	bl	8000290 <strlen>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4413      	add	r3, r2
 8003b9a:	4913      	ldr	r1, [pc, #76]	@ (8003be8 <float_to_string+0x160>)
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	8013      	strh	r3, [r2, #0]
    for (int i = 0; i < decimalPlaces - decLen; ++i) {
 8003ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	dbea      	blt.n	8003b8c <float_to_string+0x104>
    }

    // Append decimal part to the string
    strcat(str, decStr);
 8003bb6:	69b9      	ldr	r1, [r7, #24]
 8003bb8:	68b8      	ldr	r0, [r7, #8]
 8003bba:	f00c fde0 	bl	801077e <strcat>

    // Null-terminate the string
    str[len + 1 + decimalPlaces] = '\0';
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4413      	add	r3, r2
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	46b5      	mov	sp, r6
}
 8003bd2:	bf00      	nop
 8003bd4:	3734      	adds	r7, #52	@ 0x34
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bdc:	f3af 8000 	nop.w
 8003be0:	00000000 	.word	0x00000000
 8003be4:	40240000 	.word	0x40240000
 8003be8:	080156d8 	.word	0x080156d8

08003bec <display_menu>:


void display_menu(void) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
    lcd_init();
 8003bf0:	f7ff fa6a 	bl	80030c8 <lcd_init>
    lcd_clear();
 8003bf4:	f7ff fa2c 	bl	8003050 <lcd_clear>
    lcd_put_cur(0, 2);
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	f7ff fa40 	bl	8003080 <lcd_put_cur>
    lcd_send_string("CNC DRILL 3 AXIS");
 8003c00:	480c      	ldr	r0, [pc, #48]	@ (8003c34 <display_menu+0x48>)
 8003c02:	f7ff fa8f 	bl	8003124 <lcd_send_string>
    lcd_put_cur(1, 2);
 8003c06:	2102      	movs	r1, #2
 8003c08:	2001      	movs	r0, #1
 8003c0a:	f7ff fa39 	bl	8003080 <lcd_put_cur>
    lcd_send_string("HCMUTE CDT K20");
 8003c0e:	480a      	ldr	r0, [pc, #40]	@ (8003c38 <display_menu+0x4c>)
 8003c10:	f7ff fa88 	bl	8003124 <lcd_send_string>
    lcd_put_cur(2, 2);
 8003c14:	2102      	movs	r1, #2
 8003c16:	2002      	movs	r0, #2
 8003c18:	f7ff fa32 	bl	8003080 <lcd_put_cur>
    lcd_send_string("KHOA CO KHI CTM");
 8003c1c:	4807      	ldr	r0, [pc, #28]	@ (8003c3c <display_menu+0x50>)
 8003c1e:	f7ff fa81 	bl	8003124 <lcd_send_string>
    lcd_put_cur(3, 0);
 8003c22:	2100      	movs	r1, #0
 8003c24:	2003      	movs	r0, #3
 8003c26:	f7ff fa2b 	bl	8003080 <lcd_put_cur>
    lcd_send_string("GVHD: ThS N.M. TRIET");
 8003c2a:	4805      	ldr	r0, [pc, #20]	@ (8003c40 <display_menu+0x54>)
 8003c2c:	f7ff fa7a 	bl	8003124 <lcd_send_string>
}
 8003c30:	bf00      	nop
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	080156dc 	.word	0x080156dc
 8003c38:	080156f0 	.word	0x080156f0
 8003c3c:	08015700 	.word	0x08015700
 8003c40:	08015710 	.word	0x08015710

08003c44 <display_main>:

void display_main(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
	if (LCD_adc.menu_main == 0)
 8003c48:	4b46      	ldr	r3, [pc, #280]	@ (8003d64 <display_main+0x120>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d11e      	bne.n	8003c8e <display_main+0x4a>
	{
		lcd_clear();
 8003c50:	f7ff f9fe 	bl	8003050 <lcd_clear>
		lcd_put_cur(0, 0);
 8003c54:	2100      	movs	r1, #0
 8003c56:	2000      	movs	r0, #0
 8003c58:	f7ff fa12 	bl	8003080 <lcd_put_cur>
		lcd_send_string(">VOLT/CURRENT");
 8003c5c:	4842      	ldr	r0, [pc, #264]	@ (8003d68 <display_main+0x124>)
 8003c5e:	f7ff fa61 	bl	8003124 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003c62:	2100      	movs	r1, #0
 8003c64:	2001      	movs	r0, #1
 8003c66:	f7ff fa0b 	bl	8003080 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 8003c6a:	4840      	ldr	r0, [pc, #256]	@ (8003d6c <display_main+0x128>)
 8003c6c:	f7ff fa5a 	bl	8003124 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003c70:	2100      	movs	r1, #0
 8003c72:	2002      	movs	r0, #2
 8003c74:	f7ff fa04 	bl	8003080 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 8003c78:	483d      	ldr	r0, [pc, #244]	@ (8003d70 <display_main+0x12c>)
 8003c7a:	f7ff fa53 	bl	8003124 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003c7e:	2100      	movs	r1, #0
 8003c80:	2003      	movs	r0, #3
 8003c82:	f7ff f9fd 	bl	8003080 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 8003c86:	483b      	ldr	r0, [pc, #236]	@ (8003d74 <display_main+0x130>)
 8003c88:	f7ff fa4c 	bl	8003124 <lcd_send_string>
		lcd_put_cur(2, 0);
		lcd_send_string("CONTROLL CNC");
		lcd_put_cur(3, 0);
		lcd_send_string(">SPEED-XY/SPEED-Z");
	}
}
 8003c8c:	e067      	b.n	8003d5e <display_main+0x11a>
	else if (LCD_adc.menu_main == 1)
 8003c8e:	4b35      	ldr	r3, [pc, #212]	@ (8003d64 <display_main+0x120>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d11e      	bne.n	8003cd4 <display_main+0x90>
		lcd_clear();
 8003c96:	f7ff f9db 	bl	8003050 <lcd_clear>
		lcd_put_cur(0, 0);
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	f7ff f9ef 	bl	8003080 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 8003ca2:	4835      	ldr	r0, [pc, #212]	@ (8003d78 <display_main+0x134>)
 8003ca4:	f7ff fa3e 	bl	8003124 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003ca8:	2100      	movs	r1, #0
 8003caa:	2001      	movs	r0, #1
 8003cac:	f7ff f9e8 	bl	8003080 <lcd_put_cur>
		lcd_send_string(">POWER/TEMPER");
 8003cb0:	4832      	ldr	r0, [pc, #200]	@ (8003d7c <display_main+0x138>)
 8003cb2:	f7ff fa37 	bl	8003124 <lcd_send_string>
        lcd_put_cur(2, 0);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	2002      	movs	r0, #2
 8003cba:	f7ff f9e1 	bl	8003080 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 8003cbe:	482c      	ldr	r0, [pc, #176]	@ (8003d70 <display_main+0x12c>)
 8003cc0:	f7ff fa30 	bl	8003124 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	2003      	movs	r0, #3
 8003cc8:	f7ff f9da 	bl	8003080 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 8003ccc:	4829      	ldr	r0, [pc, #164]	@ (8003d74 <display_main+0x130>)
 8003cce:	f7ff fa29 	bl	8003124 <lcd_send_string>
}
 8003cd2:	e044      	b.n	8003d5e <display_main+0x11a>
	else if (LCD_adc.menu_main == 2)
 8003cd4:	4b23      	ldr	r3, [pc, #140]	@ (8003d64 <display_main+0x120>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d11e      	bne.n	8003d1a <display_main+0xd6>
		lcd_clear();
 8003cdc:	f7ff f9b8 	bl	8003050 <lcd_clear>
        lcd_put_cur(0, 0);
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f7ff f9cc 	bl	8003080 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 8003ce8:	4823      	ldr	r0, [pc, #140]	@ (8003d78 <display_main+0x134>)
 8003cea:	f7ff fa1b 	bl	8003124 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003cee:	2100      	movs	r1, #0
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	f7ff f9c5 	bl	8003080 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 8003cf6:	481d      	ldr	r0, [pc, #116]	@ (8003d6c <display_main+0x128>)
 8003cf8:	f7ff fa14 	bl	8003124 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	2002      	movs	r0, #2
 8003d00:	f7ff f9be 	bl	8003080 <lcd_put_cur>
		lcd_send_string(">CONTROLL CNC");
 8003d04:	481e      	ldr	r0, [pc, #120]	@ (8003d80 <display_main+0x13c>)
 8003d06:	f7ff fa0d 	bl	8003124 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	2003      	movs	r0, #3
 8003d0e:	f7ff f9b7 	bl	8003080 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 8003d12:	4818      	ldr	r0, [pc, #96]	@ (8003d74 <display_main+0x130>)
 8003d14:	f7ff fa06 	bl	8003124 <lcd_send_string>
}
 8003d18:	e021      	b.n	8003d5e <display_main+0x11a>
	else if (LCD_adc.menu_main == 3)
 8003d1a:	4b12      	ldr	r3, [pc, #72]	@ (8003d64 <display_main+0x120>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d11d      	bne.n	8003d5e <display_main+0x11a>
		lcd_clear();
 8003d22:	f7ff f995 	bl	8003050 <lcd_clear>
        lcd_put_cur(0, 0);
 8003d26:	2100      	movs	r1, #0
 8003d28:	2000      	movs	r0, #0
 8003d2a:	f7ff f9a9 	bl	8003080 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 8003d2e:	4812      	ldr	r0, [pc, #72]	@ (8003d78 <display_main+0x134>)
 8003d30:	f7ff f9f8 	bl	8003124 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003d34:	2100      	movs	r1, #0
 8003d36:	2001      	movs	r0, #1
 8003d38:	f7ff f9a2 	bl	8003080 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 8003d3c:	480b      	ldr	r0, [pc, #44]	@ (8003d6c <display_main+0x128>)
 8003d3e:	f7ff f9f1 	bl	8003124 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003d42:	2100      	movs	r1, #0
 8003d44:	2002      	movs	r0, #2
 8003d46:	f7ff f99b 	bl	8003080 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 8003d4a:	4809      	ldr	r0, [pc, #36]	@ (8003d70 <display_main+0x12c>)
 8003d4c:	f7ff f9ea 	bl	8003124 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003d50:	2100      	movs	r1, #0
 8003d52:	2003      	movs	r0, #3
 8003d54:	f7ff f994 	bl	8003080 <lcd_put_cur>
		lcd_send_string(">SPEED-XY/SPEED-Z");
 8003d58:	480a      	ldr	r0, [pc, #40]	@ (8003d84 <display_main+0x140>)
 8003d5a:	f7ff f9e3 	bl	8003124 <lcd_send_string>
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	200008b4 	.word	0x200008b4
 8003d68:	08015728 	.word	0x08015728
 8003d6c:	08015738 	.word	0x08015738
 8003d70:	08015748 	.word	0x08015748
 8003d74:	08015758 	.word	0x08015758
 8003d78:	0801576c 	.word	0x0801576c
 8003d7c:	0801577c 	.word	0x0801577c
 8003d80:	0801578c 	.word	0x0801578c
 8003d84:	0801579c 	.word	0x0801579c

08003d88 <menu_1>:
      break;
  }
}

void menu_1(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
    lcd_clear();
 8003d8e:	f7ff f95f 	bl	8003050 <lcd_clear>
    lcd_put_cur(0,0);
 8003d92:	2100      	movs	r1, #0
 8003d94:	2000      	movs	r0, #0
 8003d96:	f7ff f973 	bl	8003080 <lcd_put_cur>
    lcd_send_string("VOLTAGE= ");
 8003d9a:	4861      	ldr	r0, [pc, #388]	@ (8003f20 <menu_1+0x198>)
 8003d9c:	f7ff f9c2 	bl	8003124 <lcd_send_string>
    lcd_put_cur(1,0);
 8003da0:	2100      	movs	r1, #0
 8003da2:	2001      	movs	r0, #1
 8003da4:	f7ff f96c 	bl	8003080 <lcd_put_cur>
    lcd_send_string("CURRENT= ");
 8003da8:	485e      	ldr	r0, [pc, #376]	@ (8003f24 <menu_1+0x19c>)
 8003daa:	f7ff f9bb 	bl	8003124 <lcd_send_string>
    lcd_put_cur(2,0);
 8003dae:	2100      	movs	r1, #0
 8003db0:	2002      	movs	r0, #2
 8003db2:	f7ff f965 	bl	8003080 <lcd_put_cur>
    lcd_send_string("ADC VOL= ");
 8003db6:	485c      	ldr	r0, [pc, #368]	@ (8003f28 <menu_1+0x1a0>)
 8003db8:	f7ff f9b4 	bl	8003124 <lcd_send_string>
    lcd_put_cur(3,0);
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	2003      	movs	r0, #3
 8003dc0:	f7ff f95e 	bl	8003080 <lcd_put_cur>
    lcd_send_string("ADC CUR= ");
 8003dc4:	4859      	ldr	r0, [pc, #356]	@ (8003f2c <menu_1+0x1a4>)
 8003dc6:	f7ff f9ad 	bl	8003124 <lcd_send_string>

    float last_voltage = -1;
 8003dca:	4b59      	ldr	r3, [pc, #356]	@ (8003f30 <menu_1+0x1a8>)
 8003dcc:	60fb      	str	r3, [r7, #12]
    float last_current = -1;
 8003dce:	4b58      	ldr	r3, [pc, #352]	@ (8003f30 <menu_1+0x1a8>)
 8003dd0:	60bb      	str	r3, [r7, #8]
    int last_adc_vol = -1;
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd6:	607b      	str	r3, [r7, #4]
    int last_adc_cur = -1;
 8003dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ddc:	603b      	str	r3, [r7, #0]
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8003dde:	e07c      	b.n	8003eda <menu_1+0x152>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
        {
        // Đo điện áp và dòng điện
        vol_messure();
 8003de0:	f7ff fc66 	bl	80036b0 <vol_messure>
        cur_messure();
 8003de4:	f7ff fcf8 	bl	80037d8 <cur_messure>

        // Cập nhật điện áp nếu có thay đổi
        if (LCD_adc.voltage != last_voltage)
 8003de8:	4b52      	ldr	r3, [pc, #328]	@ (8003f34 <menu_1+0x1ac>)
 8003dea:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003dee:	ed97 7a03 	vldr	s14, [r7, #12]
 8003df2:	eeb4 7a67 	vcmp.f32	s14, s15
 8003df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfa:	d019      	beq.n	8003e30 <menu_1+0xa8>
        {
            last_voltage = LCD_adc.voltage;
 8003dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8003f34 <menu_1+0x1ac>)
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e00:	60fb      	str	r3, [r7, #12]
            float_to_string(LCD_adc.voltage, LCD_adc.volVal, 2);
 8003e02:	4b4c      	ldr	r3, [pc, #304]	@ (8003f34 <menu_1+0x1ac>)
 8003e04:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003e08:	2102      	movs	r1, #2
 8003e0a:	484b      	ldr	r0, [pc, #300]	@ (8003f38 <menu_1+0x1b0>)
 8003e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e10:	f7ff fe3a 	bl	8003a88 <float_to_string>
            lcd_put_cur(0, 9);
 8003e14:	2109      	movs	r1, #9
 8003e16:	2000      	movs	r0, #0
 8003e18:	f7ff f932 	bl	8003080 <lcd_put_cur>
            lcd_send_string(LCD_adc.volVal);
 8003e1c:	4846      	ldr	r0, [pc, #280]	@ (8003f38 <menu_1+0x1b0>)
 8003e1e:	f7ff f981 	bl	8003124 <lcd_send_string>
            lcd_put_cur(0, 15);
 8003e22:	210f      	movs	r1, #15
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7ff f92b 	bl	8003080 <lcd_put_cur>
            lcd_send_string("V");
 8003e2a:	4844      	ldr	r0, [pc, #272]	@ (8003f3c <menu_1+0x1b4>)
 8003e2c:	f7ff f97a 	bl	8003124 <lcd_send_string>
        }

        // Cập nhật dòng điện nếu có thay đổi
        if (LCD_adc.current != last_current)
 8003e30:	4b40      	ldr	r3, [pc, #256]	@ (8003f34 <menu_1+0x1ac>)
 8003e32:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003e36:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e3a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e42:	d019      	beq.n	8003e78 <menu_1+0xf0>
        {
            last_current = LCD_adc.current;
 8003e44:	4b3b      	ldr	r3, [pc, #236]	@ (8003f34 <menu_1+0x1ac>)
 8003e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e48:	60bb      	str	r3, [r7, #8]
            float_to_string(LCD_adc.current, LCD_adc.curVal, 3);
 8003e4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f34 <menu_1+0x1ac>)
 8003e4c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003e50:	2103      	movs	r1, #3
 8003e52:	483b      	ldr	r0, [pc, #236]	@ (8003f40 <menu_1+0x1b8>)
 8003e54:	eeb0 0a67 	vmov.f32	s0, s15
 8003e58:	f7ff fe16 	bl	8003a88 <float_to_string>
            lcd_put_cur(1, 9);
 8003e5c:	2109      	movs	r1, #9
 8003e5e:	2001      	movs	r0, #1
 8003e60:	f7ff f90e 	bl	8003080 <lcd_put_cur>
            lcd_send_string(LCD_adc.curVal);
 8003e64:	4836      	ldr	r0, [pc, #216]	@ (8003f40 <menu_1+0x1b8>)
 8003e66:	f7ff f95d 	bl	8003124 <lcd_send_string>
            lcd_put_cur(1, 15);
 8003e6a:	210f      	movs	r1, #15
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f7ff f907 	bl	8003080 <lcd_put_cur>
            lcd_send_string("A");
 8003e72:	4834      	ldr	r0, [pc, #208]	@ (8003f44 <menu_1+0x1bc>)
 8003e74:	f7ff f956 	bl	8003124 <lcd_send_string>
        }

        // Cập nhật adc volt nếu có thay đổi
        if (kalman_fil_volt.filter_kal != last_adc_vol)
 8003e78:	4b33      	ldr	r3, [pc, #204]	@ (8003f48 <menu_1+0x1c0>)
 8003e7a:	889b      	ldrh	r3, [r3, #4]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d010      	beq.n	8003ea6 <menu_1+0x11e>
        {
            last_adc_vol = kalman_fil_curr.filter_kal; // Fixed: updating last_adc instead of last_current
 8003e84:	4b31      	ldr	r3, [pc, #196]	@ (8003f4c <menu_1+0x1c4>)
 8003e86:	889b      	ldrh	r3, [r3, #4]
 8003e88:	607b      	str	r3, [r7, #4]
            snprintf(LCD_adc.adc_volVal, 6, "%d", kalman_fil_volt.filter_kal);
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003f48 <menu_1+0x1c0>)
 8003e8c:	889b      	ldrh	r3, [r3, #4]
 8003e8e:	4a30      	ldr	r2, [pc, #192]	@ (8003f50 <menu_1+0x1c8>)
 8003e90:	2106      	movs	r1, #6
 8003e92:	4830      	ldr	r0, [pc, #192]	@ (8003f54 <menu_1+0x1cc>)
 8003e94:	f00c fba8 	bl	80105e8 <sniprintf>
            lcd_put_cur(2, 9);
 8003e98:	2109      	movs	r1, #9
 8003e9a:	2002      	movs	r0, #2
 8003e9c:	f7ff f8f0 	bl	8003080 <lcd_put_cur>
            lcd_send_string(LCD_adc.adc_volVal);
 8003ea0:	482c      	ldr	r0, [pc, #176]	@ (8003f54 <menu_1+0x1cc>)
 8003ea2:	f7ff f93f 	bl	8003124 <lcd_send_string>
        }

        // Cập nhật adc curr nếu có thay đổi
        if (kalman_fil_curr.filter_kal != last_adc_cur)
 8003ea6:	4b29      	ldr	r3, [pc, #164]	@ (8003f4c <menu_1+0x1c4>)
 8003ea8:	889b      	ldrh	r3, [r3, #4]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d010      	beq.n	8003ed4 <menu_1+0x14c>
        {
            last_adc_cur = kalman_fil_curr.filter_kal; // Fixed: updating last_adc instead of last_current
 8003eb2:	4b26      	ldr	r3, [pc, #152]	@ (8003f4c <menu_1+0x1c4>)
 8003eb4:	889b      	ldrh	r3, [r3, #4]
 8003eb6:	603b      	str	r3, [r7, #0]
            snprintf(LCD_adc.adc_curVal, 6, "%d", kalman_fil_curr.filter_kal);
 8003eb8:	4b24      	ldr	r3, [pc, #144]	@ (8003f4c <menu_1+0x1c4>)
 8003eba:	889b      	ldrh	r3, [r3, #4]
 8003ebc:	4a24      	ldr	r2, [pc, #144]	@ (8003f50 <menu_1+0x1c8>)
 8003ebe:	2106      	movs	r1, #6
 8003ec0:	4825      	ldr	r0, [pc, #148]	@ (8003f58 <menu_1+0x1d0>)
 8003ec2:	f00c fb91 	bl	80105e8 <sniprintf>
            lcd_put_cur(3, 9);
 8003ec6:	2109      	movs	r1, #9
 8003ec8:	2003      	movs	r0, #3
 8003eca:	f7ff f8d9 	bl	8003080 <lcd_put_cur>
            lcd_send_string(LCD_adc.adc_curVal);
 8003ece:	4822      	ldr	r0, [pc, #136]	@ (8003f58 <menu_1+0x1d0>)
 8003ed0:	f7ff f928 	bl	8003124 <lcd_send_string>
        }

        // Thêm một khoảng trễ nhỏ để ngăn việc sử dụng CPU quá mức
        osDelay(150);
 8003ed4:	2096      	movs	r0, #150	@ 0x96
 8003ed6:	f007 ff73 	bl	800bdc0 <osDelay>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8003eda:	2140      	movs	r1, #64	@ 0x40
 8003edc:	481f      	ldr	r0, [pc, #124]	@ (8003f5c <menu_1+0x1d4>)
 8003ede:	f003 f919 	bl	8007114 <HAL_GPIO_ReadPin>
 8003ee2:	4603      	mov	r3, r0
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d017      	beq.n	8003f18 <menu_1+0x190>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8003ee8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003eec:	481c      	ldr	r0, [pc, #112]	@ (8003f60 <menu_1+0x1d8>)
 8003eee:	f003 f911 	bl	8007114 <HAL_GPIO_ReadPin>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00f      	beq.n	8003f18 <menu_1+0x190>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 8003ef8:	2180      	movs	r1, #128	@ 0x80
 8003efa:	4818      	ldr	r0, [pc, #96]	@ (8003f5c <menu_1+0x1d4>)
 8003efc:	f003 f90a 	bl	8007114 <HAL_GPIO_ReadPin>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d008      	beq.n	8003f18 <menu_1+0x190>
 8003f06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f0a:	4815      	ldr	r0, [pc, #84]	@ (8003f60 <menu_1+0x1d8>)
 8003f0c:	f003 f902 	bl	8007114 <HAL_GPIO_ReadPin>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f47f af64 	bne.w	8003de0 <menu_1+0x58>
    }
}
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	080157d0 	.word	0x080157d0
 8003f24:	080157dc 	.word	0x080157dc
 8003f28:	080157e8 	.word	0x080157e8
 8003f2c:	080157f4 	.word	0x080157f4
 8003f30:	bf800000 	.word	0xbf800000
 8003f34:	200008b4 	.word	0x200008b4
 8003f38:	20000948 	.word	0x20000948
 8003f3c:	08015800 	.word	0x08015800
 8003f40:	2000094d 	.word	0x2000094d
 8003f44:	08015804 	.word	0x08015804
 8003f48:	200009d0 	.word	0x200009d0
 8003f4c:	20000980 	.word	0x20000980
 8003f50:	08015808 	.word	0x08015808
 8003f54:	20000952 	.word	0x20000952
 8003f58:	20000957 	.word	0x20000957
 8003f5c:	40020000 	.word	0x40020000
 8003f60:	40021000 	.word	0x40021000

08003f64 <menu_2>:



void menu_2(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
    lcd_clear();
 8003f6a:	f7ff f871 	bl	8003050 <lcd_clear>
    lcd_put_cur(0,0);
 8003f6e:	2100      	movs	r1, #0
 8003f70:	2000      	movs	r0, #0
 8003f72:	f7ff f885 	bl	8003080 <lcd_put_cur>
    lcd_send_string("POWER= ");
 8003f76:	4843      	ldr	r0, [pc, #268]	@ (8004084 <menu_2+0x120>)
 8003f78:	f7ff f8d4 	bl	8003124 <lcd_send_string>
    lcd_put_cur(1,0);
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	2001      	movs	r0, #1
 8003f80:	f7ff f87e 	bl	8003080 <lcd_put_cur>
    lcd_send_string("TEMPER= ");
 8003f84:	4840      	ldr	r0, [pc, #256]	@ (8004088 <menu_2+0x124>)
 8003f86:	f7ff f8cd 	bl	8003124 <lcd_send_string>

    float last_power = -1;
 8003f8a:	4b40      	ldr	r3, [pc, #256]	@ (800408c <menu_2+0x128>)
 8003f8c:	60fb      	str	r3, [r7, #12]
    float last_temp = -1;
 8003f8e:	4b3f      	ldr	r3, [pc, #252]	@ (800408c <menu_2+0x128>)
 8003f90:	60bb      	str	r3, [r7, #8]

    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8003f92:	e054      	b.n	800403e <menu_2+0xda>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
        {
        // Đo điện áp và dòng điện (để tính công suất và nhiệt độ)
        vol_messure();
 8003f94:	f7ff fb8c 	bl	80036b0 <vol_messure>
        cur_messure();
 8003f98:	f7ff fc1e 	bl	80037d8 <cur_messure>

        // Cập nhật công suất nếu có thay đổi
        if (LCD_adc.power != last_power)
 8003f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8004090 <menu_2+0x12c>)
 8003f9e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8003fa2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003fa6:	eeb4 7a67 	vcmp.f32	s14, s15
 8003faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fae:	d019      	beq.n	8003fe4 <menu_2+0x80>
        {
            last_power = LCD_adc.power;
 8003fb0:	4b37      	ldr	r3, [pc, #220]	@ (8004090 <menu_2+0x12c>)
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb4:	60fb      	str	r3, [r7, #12]
            float_to_string(LCD_adc.power, LCD_adc.powVal, 2);
 8003fb6:	4b36      	ldr	r3, [pc, #216]	@ (8004090 <menu_2+0x12c>)
 8003fb8:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8003fbc:	2102      	movs	r1, #2
 8003fbe:	4835      	ldr	r0, [pc, #212]	@ (8004094 <menu_2+0x130>)
 8003fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc4:	f7ff fd60 	bl	8003a88 <float_to_string>
            lcd_put_cur(0, 9);
 8003fc8:	2109      	movs	r1, #9
 8003fca:	2000      	movs	r0, #0
 8003fcc:	f7ff f858 	bl	8003080 <lcd_put_cur>
            lcd_send_string(LCD_adc.powVal);
 8003fd0:	4830      	ldr	r0, [pc, #192]	@ (8004094 <menu_2+0x130>)
 8003fd2:	f7ff f8a7 	bl	8003124 <lcd_send_string>
            lcd_put_cur(0, 15);
 8003fd6:	210f      	movs	r1, #15
 8003fd8:	2000      	movs	r0, #0
 8003fda:	f7ff f851 	bl	8003080 <lcd_put_cur>
            lcd_send_string("W");
 8003fde:	482e      	ldr	r0, [pc, #184]	@ (8004098 <menu_2+0x134>)
 8003fe0:	f7ff f8a0 	bl	8003124 <lcd_send_string>
        }

        // Cập nhật nhiệt độ nếu có thay đổi
        if (LCD_adc.temp != last_temp)
 8003fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8004090 <menu_2+0x12c>)
 8003fe6:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003fea:	ed97 7a02 	vldr	s14, [r7, #8]
 8003fee:	eeb4 7a67 	vcmp.f32	s14, s15
 8003ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff6:	d01f      	beq.n	8004038 <menu_2+0xd4>
        {
            last_temp = LCD_adc.Temp;
 8003ff8:	4b25      	ldr	r3, [pc, #148]	@ (8004090 <menu_2+0x12c>)
 8003ffa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ffc:	60bb      	str	r3, [r7, #8]
            float_to_string(LCD_adc.Temp, LCD_adc.tempVal, 3);
 8003ffe:	4b24      	ldr	r3, [pc, #144]	@ (8004090 <menu_2+0x12c>)
 8004000:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8004004:	2103      	movs	r1, #3
 8004006:	4825      	ldr	r0, [pc, #148]	@ (800409c <menu_2+0x138>)
 8004008:	eeb0 0a67 	vmov.f32	s0, s15
 800400c:	f7ff fd3c 	bl	8003a88 <float_to_string>
            char celsiusSymbol[] = {0xDF, 'C', '\0'};
 8004010:	4a23      	ldr	r2, [pc, #140]	@ (80040a0 <menu_2+0x13c>)
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	6812      	ldr	r2, [r2, #0]
 8004016:	4611      	mov	r1, r2
 8004018:	8019      	strh	r1, [r3, #0]
 800401a:	3302      	adds	r3, #2
 800401c:	0c12      	lsrs	r2, r2, #16
 800401e:	701a      	strb	r2, [r3, #0]
            strcat(LCD_adc.tempVal, celsiusSymbol);
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	4619      	mov	r1, r3
 8004024:	481d      	ldr	r0, [pc, #116]	@ (800409c <menu_2+0x138>)
 8004026:	f00c fbaa 	bl	801077e <strcat>
            lcd_put_cur(1, 9);
 800402a:	2109      	movs	r1, #9
 800402c:	2001      	movs	r0, #1
 800402e:	f7ff f827 	bl	8003080 <lcd_put_cur>
            lcd_send_string(LCD_adc.tempVal);
 8004032:	481a      	ldr	r0, [pc, #104]	@ (800409c <menu_2+0x138>)
 8004034:	f7ff f876 	bl	8003124 <lcd_send_string>
        }

        // Thêm một khoảng trễ nhỏ để ngăn việc sử dụng CPU quá mức
        osDelay(100);
 8004038:	2064      	movs	r0, #100	@ 0x64
 800403a:	f007 fec1 	bl	800bdc0 <osDelay>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 800403e:	2140      	movs	r1, #64	@ 0x40
 8004040:	4818      	ldr	r0, [pc, #96]	@ (80040a4 <menu_2+0x140>)
 8004042:	f003 f867 	bl	8007114 <HAL_GPIO_ReadPin>
 8004046:	4603      	mov	r3, r0
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 8004048:	2b00      	cmp	r3, #0
 800404a:	d016      	beq.n	800407a <menu_2+0x116>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 800404c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004050:	4815      	ldr	r0, [pc, #84]	@ (80040a8 <menu_2+0x144>)
 8004052:	f003 f85f 	bl	8007114 <HAL_GPIO_ReadPin>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00e      	beq.n	800407a <menu_2+0x116>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 800405c:	2180      	movs	r1, #128	@ 0x80
 800405e:	4811      	ldr	r0, [pc, #68]	@ (80040a4 <menu_2+0x140>)
 8004060:	f003 f858 	bl	8007114 <HAL_GPIO_ReadPin>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <menu_2+0x116>
 800406a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800406e:	480e      	ldr	r0, [pc, #56]	@ (80040a8 <menu_2+0x144>)
 8004070:	f003 f850 	bl	8007114 <HAL_GPIO_ReadPin>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d18c      	bne.n	8003f94 <menu_2+0x30>
    }
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	0801580c 	.word	0x0801580c
 8004088:	08015814 	.word	0x08015814
 800408c:	bf800000 	.word	0xbf800000
 8004090:	200008b4 	.word	0x200008b4
 8004094:	20000961 	.word	0x20000961
 8004098:	08015820 	.word	0x08015820
 800409c:	2000095c 	.word	0x2000095c
 80040a0:	08015824 	.word	0x08015824
 80040a4:	40020000 	.word	0x40020000
 80040a8:	40021000 	.word	0x40021000

080040ac <menu_3>:


void menu_3(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
	if (LCD_adc.selected_menu3_item == 0)
 80040b0:	4b2a      	ldr	r3, [pc, #168]	@ (800415c <menu_3+0xb0>)
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d117      	bne.n	80040e8 <menu_3+0x3c>
	{
		lcd_clear();
 80040b8:	f7fe ffca 	bl	8003050 <lcd_clear>
		lcd_put_cur(0, 0);
 80040bc:	2100      	movs	r1, #0
 80040be:	2000      	movs	r0, #0
 80040c0:	f7fe ffde 	bl	8003080 <lcd_put_cur>
		lcd_send_string(">TYPE X= ");
 80040c4:	4826      	ldr	r0, [pc, #152]	@ (8004160 <menu_3+0xb4>)
 80040c6:	f7ff f82d 	bl	8003124 <lcd_send_string>
		lcd_put_cur(1, 0);
 80040ca:	2100      	movs	r1, #0
 80040cc:	2001      	movs	r0, #1
 80040ce:	f7fe ffd7 	bl	8003080 <lcd_put_cur>
		lcd_send_string("TYPE Y= ");
 80040d2:	4824      	ldr	r0, [pc, #144]	@ (8004164 <menu_3+0xb8>)
 80040d4:	f7ff f826 	bl	8003124 <lcd_send_string>
		lcd_put_cur(2, 0);
 80040d8:	2100      	movs	r1, #0
 80040da:	2002      	movs	r0, #2
 80040dc:	f7fe ffd0 	bl	8003080 <lcd_put_cur>
		lcd_send_string("TYPE Z= ");
 80040e0:	4821      	ldr	r0, [pc, #132]	@ (8004168 <menu_3+0xbc>)
 80040e2:	f7ff f81f 	bl	8003124 <lcd_send_string>
		lcd_put_cur(1, 0);
		lcd_send_string("TYPE Y= ");
		lcd_put_cur(2, 0);
		lcd_send_string(">TYPE Z= ");
	}
}
 80040e6:	e036      	b.n	8004156 <menu_3+0xaa>
	else if (LCD_adc.selected_menu3_item == 1)
 80040e8:	4b1c      	ldr	r3, [pc, #112]	@ (800415c <menu_3+0xb0>)
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d117      	bne.n	8004120 <menu_3+0x74>
		lcd_clear();
 80040f0:	f7fe ffae 	bl	8003050 <lcd_clear>
		lcd_put_cur(0, 0);
 80040f4:	2100      	movs	r1, #0
 80040f6:	2000      	movs	r0, #0
 80040f8:	f7fe ffc2 	bl	8003080 <lcd_put_cur>
		lcd_send_string("TYPE X= ");
 80040fc:	481b      	ldr	r0, [pc, #108]	@ (800416c <menu_3+0xc0>)
 80040fe:	f7ff f811 	bl	8003124 <lcd_send_string>
		lcd_put_cur(1, 0);
 8004102:	2100      	movs	r1, #0
 8004104:	2001      	movs	r0, #1
 8004106:	f7fe ffbb 	bl	8003080 <lcd_put_cur>
		lcd_send_string(">TYPE Y= ");
 800410a:	4819      	ldr	r0, [pc, #100]	@ (8004170 <menu_3+0xc4>)
 800410c:	f7ff f80a 	bl	8003124 <lcd_send_string>
		lcd_put_cur(2, 0);
 8004110:	2100      	movs	r1, #0
 8004112:	2002      	movs	r0, #2
 8004114:	f7fe ffb4 	bl	8003080 <lcd_put_cur>
		lcd_send_string("TYPE Z= ");
 8004118:	4813      	ldr	r0, [pc, #76]	@ (8004168 <menu_3+0xbc>)
 800411a:	f7ff f803 	bl	8003124 <lcd_send_string>
}
 800411e:	e01a      	b.n	8004156 <menu_3+0xaa>
	else if (LCD_adc.selected_menu3_item == 2)
 8004120:	4b0e      	ldr	r3, [pc, #56]	@ (800415c <menu_3+0xb0>)
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d116      	bne.n	8004156 <menu_3+0xaa>
		lcd_clear();
 8004128:	f7fe ff92 	bl	8003050 <lcd_clear>
		lcd_put_cur(0, 0);
 800412c:	2100      	movs	r1, #0
 800412e:	2000      	movs	r0, #0
 8004130:	f7fe ffa6 	bl	8003080 <lcd_put_cur>
		lcd_send_string("TYPE X= ");
 8004134:	480d      	ldr	r0, [pc, #52]	@ (800416c <menu_3+0xc0>)
 8004136:	f7fe fff5 	bl	8003124 <lcd_send_string>
		lcd_put_cur(1, 0);
 800413a:	2100      	movs	r1, #0
 800413c:	2001      	movs	r0, #1
 800413e:	f7fe ff9f 	bl	8003080 <lcd_put_cur>
		lcd_send_string("TYPE Y= ");
 8004142:	4808      	ldr	r0, [pc, #32]	@ (8004164 <menu_3+0xb8>)
 8004144:	f7fe ffee 	bl	8003124 <lcd_send_string>
		lcd_put_cur(2, 0);
 8004148:	2100      	movs	r1, #0
 800414a:	2002      	movs	r0, #2
 800414c:	f7fe ff98 	bl	8003080 <lcd_put_cur>
		lcd_send_string(">TYPE Z= ");
 8004150:	4808      	ldr	r0, [pc, #32]	@ (8004174 <menu_3+0xc8>)
 8004152:	f7fe ffe7 	bl	8003124 <lcd_send_string>
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	200008b4 	.word	0x200008b4
 8004160:	08015828 	.word	0x08015828
 8004164:	08015834 	.word	0x08015834
 8004168:	08015840 	.word	0x08015840
 800416c:	0801584c 	.word	0x0801584c
 8004170:	08015858 	.word	0x08015858
 8004174:	08015864 	.word	0x08015864

08004178 <select_menu3>:

void select_menu3(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
    switch (LCD_adc.selected_menu3_item)
 800417c:	4b0a      	ldr	r3, [pc, #40]	@ (80041a8 <select_menu3+0x30>)
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	2b02      	cmp	r3, #2
 8004182:	d00c      	beq.n	800419e <select_menu3+0x26>
 8004184:	2b02      	cmp	r3, #2
 8004186:	dc0d      	bgt.n	80041a4 <select_menu3+0x2c>
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <select_menu3+0x1a>
 800418c:	2b01      	cmp	r3, #1
 800418e:	d003      	beq.n	8004198 <select_menu3+0x20>
            break;
        case 2:
            lcd_clear();
            break;
    }
}
 8004190:	e008      	b.n	80041a4 <select_menu3+0x2c>
            lcd_clear();
 8004192:	f7fe ff5d 	bl	8003050 <lcd_clear>
            break;
 8004196:	e005      	b.n	80041a4 <select_menu3+0x2c>
            lcd_clear();
 8004198:	f7fe ff5a 	bl	8003050 <lcd_clear>
            break;
 800419c:	e002      	b.n	80041a4 <select_menu3+0x2c>
            lcd_clear();
 800419e:	f7fe ff57 	bl	8003050 <lcd_clear>
            break;
 80041a2:	bf00      	nop
}
 80041a4:	bf00      	nop
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	200008b4 	.word	0x200008b4

080041ac <X_count>:

void X_count(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 80041b0:	e00e      	b.n	80041d0 <X_count+0x24>
    {
        LCD_adc.typeX_value++;
 80041b2:	4b18      	ldr	r3, [pc, #96]	@ (8004214 <X_count+0x68>)
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	3301      	adds	r3, #1
 80041b8:	4a16      	ldr	r2, [pc, #88]	@ (8004214 <X_count+0x68>)
 80041ba:	6253      	str	r3, [r2, #36]	@ 0x24
        stepX(abs(LCD_adc.typeX_value), 0, 15);
 80041bc:	4b15      	ldr	r3, [pc, #84]	@ (8004214 <X_count+0x68>)
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bfb8      	it	lt
 80041c4:	425b      	neglt	r3, r3
 80041c6:	220f      	movs	r2, #15
 80041c8:	2100      	movs	r1, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7ff f914 	bl	80033f8 <stepX>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 80041d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041d4:	4810      	ldr	r0, [pc, #64]	@ (8004218 <X_count+0x6c>)
 80041d6:	f002 ff9d 	bl	8007114 <HAL_GPIO_ReadPin>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0e8      	beq.n	80041b2 <X_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 80041e0:	e00e      	b.n	8004200 <X_count+0x54>
    {
        LCD_adc.typeX_value--;
 80041e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004214 <X_count+0x68>)
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	3b01      	subs	r3, #1
 80041e8:	4a0a      	ldr	r2, [pc, #40]	@ (8004214 <X_count+0x68>)
 80041ea:	6253      	str	r3, [r2, #36]	@ 0x24
        stepX(abs(LCD_adc.typeX_value), 1, 15);
 80041ec:	4b09      	ldr	r3, [pc, #36]	@ (8004214 <X_count+0x68>)
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bfb8      	it	lt
 80041f4:	425b      	neglt	r3, r3
 80041f6:	220f      	movs	r2, #15
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff f8fc 	bl	80033f8 <stepX>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004200:	2110      	movs	r1, #16
 8004202:	4806      	ldr	r0, [pc, #24]	@ (800421c <X_count+0x70>)
 8004204:	f002 ff86 	bl	8007114 <HAL_GPIO_ReadPin>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0e9      	beq.n	80041e2 <X_count+0x36>
    }
}
 800420e:	bf00      	nop
 8004210:	bf00      	nop
 8004212:	bd80      	pop	{r7, pc}
 8004214:	200008b4 	.word	0x200008b4
 8004218:	40021000 	.word	0x40021000
 800421c:	40020800 	.word	0x40020800

08004220 <Y_count>:

void Y_count(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8004224:	e00e      	b.n	8004244 <Y_count+0x24>
    {
        LCD_adc.typeY_value++;
 8004226:	4b18      	ldr	r3, [pc, #96]	@ (8004288 <Y_count+0x68>)
 8004228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422a:	3301      	adds	r3, #1
 800422c:	4a16      	ldr	r2, [pc, #88]	@ (8004288 <Y_count+0x68>)
 800422e:	6293      	str	r3, [r2, #40]	@ 0x28
        stepY(abs(LCD_adc.typeY_value), 0, 15);
 8004230:	4b15      	ldr	r3, [pc, #84]	@ (8004288 <Y_count+0x68>)
 8004232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004234:	2b00      	cmp	r3, #0
 8004236:	bfb8      	it	lt
 8004238:	425b      	neglt	r3, r3
 800423a:	220f      	movs	r2, #15
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff f906 	bl	8003450 <stepY>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8004244:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004248:	4810      	ldr	r0, [pc, #64]	@ (800428c <Y_count+0x6c>)
 800424a:	f002 ff63 	bl	8007114 <HAL_GPIO_ReadPin>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0e8      	beq.n	8004226 <Y_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004254:	e00e      	b.n	8004274 <Y_count+0x54>
    {
        LCD_adc.typeY_value--;
 8004256:	4b0c      	ldr	r3, [pc, #48]	@ (8004288 <Y_count+0x68>)
 8004258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425a:	3b01      	subs	r3, #1
 800425c:	4a0a      	ldr	r2, [pc, #40]	@ (8004288 <Y_count+0x68>)
 800425e:	6293      	str	r3, [r2, #40]	@ 0x28
        stepY(abs(LCD_adc.typeY_value), 1, 15);
 8004260:	4b09      	ldr	r3, [pc, #36]	@ (8004288 <Y_count+0x68>)
 8004262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	bfb8      	it	lt
 8004268:	425b      	neglt	r3, r3
 800426a:	220f      	movs	r2, #15
 800426c:	2101      	movs	r1, #1
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff f8ee 	bl	8003450 <stepY>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004274:	2110      	movs	r1, #16
 8004276:	4806      	ldr	r0, [pc, #24]	@ (8004290 <Y_count+0x70>)
 8004278:	f002 ff4c 	bl	8007114 <HAL_GPIO_ReadPin>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0e9      	beq.n	8004256 <Y_count+0x36>
    }
}
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	bd80      	pop	{r7, pc}
 8004288:	200008b4 	.word	0x200008b4
 800428c:	40021000 	.word	0x40021000
 8004290:	40020800 	.word	0x40020800

08004294 <Z_count>:

void Z_count(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8004298:	e00e      	b.n	80042b8 <Z_count+0x24>
    {
        LCD_adc.typeZ_value++;
 800429a:	4b18      	ldr	r3, [pc, #96]	@ (80042fc <Z_count+0x68>)
 800429c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429e:	3301      	adds	r3, #1
 80042a0:	4a16      	ldr	r2, [pc, #88]	@ (80042fc <Z_count+0x68>)
 80042a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        stepZ(abs(LCD_adc.typeZ_value), 1, 15);
 80042a4:	4b15      	ldr	r3, [pc, #84]	@ (80042fc <Z_count+0x68>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bfb8      	it	lt
 80042ac:	425b      	neglt	r3, r3
 80042ae:	220f      	movs	r2, #15
 80042b0:	2101      	movs	r1, #1
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff f8f8 	bl	80034a8 <stepZ>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 80042b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80042bc:	4810      	ldr	r0, [pc, #64]	@ (8004300 <Z_count+0x6c>)
 80042be:	f002 ff29 	bl	8007114 <HAL_GPIO_ReadPin>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0e8      	beq.n	800429a <Z_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 80042c8:	e00e      	b.n	80042e8 <Z_count+0x54>
    {
        LCD_adc.typeZ_value--;
 80042ca:	4b0c      	ldr	r3, [pc, #48]	@ (80042fc <Z_count+0x68>)
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	3b01      	subs	r3, #1
 80042d0:	4a0a      	ldr	r2, [pc, #40]	@ (80042fc <Z_count+0x68>)
 80042d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        stepZ(abs(LCD_adc.typeZ_value), 0, 15);
 80042d4:	4b09      	ldr	r3, [pc, #36]	@ (80042fc <Z_count+0x68>)
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bfb8      	it	lt
 80042dc:	425b      	neglt	r3, r3
 80042de:	220f      	movs	r2, #15
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff f8e0 	bl	80034a8 <stepZ>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 80042e8:	2110      	movs	r1, #16
 80042ea:	4806      	ldr	r0, [pc, #24]	@ (8004304 <Z_count+0x70>)
 80042ec:	f002 ff12 	bl	8007114 <HAL_GPIO_ReadPin>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0e9      	beq.n	80042ca <Z_count+0x36>
    }
}
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	200008b4 	.word	0x200008b4
 8004300:	40021000 	.word	0x40021000
 8004304:	40020800 	.word	0x40020800

08004308 <menu_4>:

void menu_4(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
    if (LCD_adc.selected_menu4_item == 0)
 800430c:	4b17      	ldr	r3, [pc, #92]	@ (800436c <menu_4+0x64>)
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d112      	bne.n	800433a <menu_4+0x32>
    {
        lcd_clear();
 8004314:	f7fe fe9c 	bl	8003050 <lcd_clear>
        lcd_put_cur(0, 0);
 8004318:	2100      	movs	r1, #0
 800431a:	2000      	movs	r0, #0
 800431c:	f7fe feb0 	bl	8003080 <lcd_put_cur>
        lcd_send_string(">SPEED X-Y= ");
 8004320:	4813      	ldr	r0, [pc, #76]	@ (8004370 <menu_4+0x68>)
 8004322:	f7fe feff 	bl	8003124 <lcd_send_string>
        lcd_put_cur(1, 0);
 8004326:	2100      	movs	r1, #0
 8004328:	2001      	movs	r0, #1
 800432a:	f7fe fea9 	bl	8003080 <lcd_put_cur>
        lcd_send_string("SPEED Z= ");
 800432e:	4811      	ldr	r0, [pc, #68]	@ (8004374 <menu_4+0x6c>)
 8004330:	f7fe fef8 	bl	8003124 <lcd_send_string>
        speedXY_count();
 8004334:	f000 f838 	bl	80043a8 <speedXY_count>
        lcd_send_string("SPEED X-Y= ");
        lcd_put_cur(1, 0);
        lcd_send_string(">SPEED Z= ");
        speedZ_count();
    }
}
 8004338:	e015      	b.n	8004366 <menu_4+0x5e>
    else if (LCD_adc.selected_menu4_item == 1)
 800433a:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <menu_4+0x64>)
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d111      	bne.n	8004366 <menu_4+0x5e>
        lcd_clear();
 8004342:	f7fe fe85 	bl	8003050 <lcd_clear>
        lcd_put_cur(0, 0);
 8004346:	2100      	movs	r1, #0
 8004348:	2000      	movs	r0, #0
 800434a:	f7fe fe99 	bl	8003080 <lcd_put_cur>
        lcd_send_string("SPEED X-Y= ");
 800434e:	480a      	ldr	r0, [pc, #40]	@ (8004378 <menu_4+0x70>)
 8004350:	f7fe fee8 	bl	8003124 <lcd_send_string>
        lcd_put_cur(1, 0);
 8004354:	2100      	movs	r1, #0
 8004356:	2001      	movs	r0, #1
 8004358:	f7fe fe92 	bl	8003080 <lcd_put_cur>
        lcd_send_string(">SPEED Z= ");
 800435c:	4807      	ldr	r0, [pc, #28]	@ (800437c <menu_4+0x74>)
 800435e:	f7fe fee1 	bl	8003124 <lcd_send_string>
        speedZ_count();
 8004362:	f000 f861 	bl	8004428 <speedZ_count>
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	200008b4 	.word	0x200008b4
 8004370:	08015870 	.word	0x08015870
 8004374:	08015880 	.word	0x08015880
 8004378:	0801588c 	.word	0x0801588c
 800437c:	08015898 	.word	0x08015898

08004380 <select_menu4>:

void select_menu4(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
    switch (LCD_adc.selected_menu4_item)
 8004384:	4b07      	ldr	r3, [pc, #28]	@ (80043a4 <select_menu4+0x24>)
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <select_menu4+0x12>
 800438c:	2b01      	cmp	r3, #1
 800438e:	d003      	beq.n	8004398 <select_menu4+0x18>
            break;
        case 1:
            lcd_clear();
            break;
    }
}
 8004390:	e005      	b.n	800439e <select_menu4+0x1e>
            lcd_clear();
 8004392:	f7fe fe5d 	bl	8003050 <lcd_clear>
            break;
 8004396:	e002      	b.n	800439e <select_menu4+0x1e>
            lcd_clear();
 8004398:	f7fe fe5a 	bl	8003050 <lcd_clear>
            break;
 800439c:	bf00      	nop
}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	200008b4 	.word	0x200008b4

080043a8 <speedXY_count>:

void speedXY_count(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 80043ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80043b0:	4819      	ldr	r0, [pc, #100]	@ (8004418 <speedXY_count+0x70>)
 80043b2:	f002 feaf 	bl	8007114 <HAL_GPIO_ReadPin>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d111      	bne.n	80043e0 <speedXY_count+0x38>
    {
        LCD_adc.speed_valueXY += 100;
 80043bc:	4b17      	ldr	r3, [pc, #92]	@ (800441c <speedXY_count+0x74>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	3364      	adds	r3, #100	@ 0x64
 80043c2:	4a16      	ldr	r2, [pc, #88]	@ (800441c <speedXY_count+0x74>)
 80043c4:	6313      	str	r3, [r2, #48]	@ 0x30
        CNC_pos.max_speedXY = LCD_adc.speed_valueXY;
 80043c6:	4b15      	ldr	r3, [pc, #84]	@ (800441c <speedXY_count+0x74>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fc f8ba 	bl	8000544 <__aeabi_i2d>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4912      	ldr	r1, [pc, #72]	@ (8004420 <speedXY_count+0x78>)
 80043d6:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
        osDelay(10);
 80043da:	200a      	movs	r0, #10
 80043dc:	f007 fcf0 	bl	800bdc0 <osDelay>
    }
    if (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 80043e0:	2110      	movs	r1, #16
 80043e2:	4810      	ldr	r0, [pc, #64]	@ (8004424 <speedXY_count+0x7c>)
 80043e4:	f002 fe96 	bl	8007114 <HAL_GPIO_ReadPin>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d111      	bne.n	8004412 <speedXY_count+0x6a>
    {
        LCD_adc.speed_valueXY -= 100;
 80043ee:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <speedXY_count+0x74>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f2:	3b64      	subs	r3, #100	@ 0x64
 80043f4:	4a09      	ldr	r2, [pc, #36]	@ (800441c <speedXY_count+0x74>)
 80043f6:	6313      	str	r3, [r2, #48]	@ 0x30
        CNC_pos.max_speedXY = LCD_adc.speed_valueXY;
 80043f8:	4b08      	ldr	r3, [pc, #32]	@ (800441c <speedXY_count+0x74>)
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fc f8a1 	bl	8000544 <__aeabi_i2d>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4906      	ldr	r1, [pc, #24]	@ (8004420 <speedXY_count+0x78>)
 8004408:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
        osDelay(10);
 800440c:	200a      	movs	r0, #10
 800440e:	f007 fcd7 	bl	800bdc0 <osDelay>
    }
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000
 800441c:	200008b4 	.word	0x200008b4
 8004420:	20000770 	.word	0x20000770
 8004424:	40020800 	.word	0x40020800

08004428 <speedZ_count>:

void speedZ_count(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 800442c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004430:	4819      	ldr	r0, [pc, #100]	@ (8004498 <speedZ_count+0x70>)
 8004432:	f002 fe6f 	bl	8007114 <HAL_GPIO_ReadPin>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d111      	bne.n	8004460 <speedZ_count+0x38>
    {
        LCD_adc.speed_valueZ += 100;
 800443c:	4b17      	ldr	r3, [pc, #92]	@ (800449c <speedZ_count+0x74>)
 800443e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004440:	3364      	adds	r3, #100	@ 0x64
 8004442:	4a16      	ldr	r2, [pc, #88]	@ (800449c <speedZ_count+0x74>)
 8004444:	6353      	str	r3, [r2, #52]	@ 0x34
        CNC_pos.max_speedZ = LCD_adc.speed_valueZ;
 8004446:	4b15      	ldr	r3, [pc, #84]	@ (800449c <speedZ_count+0x74>)
 8004448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444a:	4618      	mov	r0, r3
 800444c:	f7fc f87a 	bl	8000544 <__aeabi_i2d>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4912      	ldr	r1, [pc, #72]	@ (80044a0 <speedZ_count+0x78>)
 8004456:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
        osDelay(10);
 800445a:	200a      	movs	r0, #10
 800445c:	f007 fcb0 	bl	800bdc0 <osDelay>
    }
    if (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004460:	2110      	movs	r1, #16
 8004462:	4810      	ldr	r0, [pc, #64]	@ (80044a4 <speedZ_count+0x7c>)
 8004464:	f002 fe56 	bl	8007114 <HAL_GPIO_ReadPin>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d111      	bne.n	8004492 <speedZ_count+0x6a>
    {
        LCD_adc.speed_valueZ -= 100;
 800446e:	4b0b      	ldr	r3, [pc, #44]	@ (800449c <speedZ_count+0x74>)
 8004470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004472:	3b64      	subs	r3, #100	@ 0x64
 8004474:	4a09      	ldr	r2, [pc, #36]	@ (800449c <speedZ_count+0x74>)
 8004476:	6353      	str	r3, [r2, #52]	@ 0x34
        CNC_pos.max_speedZ = LCD_adc.speed_valueZ;
 8004478:	4b08      	ldr	r3, [pc, #32]	@ (800449c <speedZ_count+0x74>)
 800447a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447c:	4618      	mov	r0, r3
 800447e:	f7fc f861 	bl	8000544 <__aeabi_i2d>
 8004482:	4602      	mov	r2, r0
 8004484:	460b      	mov	r3, r1
 8004486:	4906      	ldr	r1, [pc, #24]	@ (80044a0 <speedZ_count+0x78>)
 8004488:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
        osDelay(10);
 800448c:	200a      	movs	r0, #10
 800448e:	f007 fc97 	bl	800bdc0 <osDelay>
    }
}
 8004492:	bf00      	nop
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
 800449c:	200008b4 	.word	0x200008b4
 80044a0:	20000770 	.word	0x20000770
 80044a4:	40020800 	.word	0x40020800

080044a8 <updateButtonState>:

// Function to update button state and debounce time
void updateButtonState(Button* button, uint32_t currentTime) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
    button->last_stable_state = HAL_GPIO_ReadPin(button->port, button->pin);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f002 fe29 	bl	8007114 <HAL_GPIO_ReadPin>
 80044c2:	4603      	mov	r3, r0
 80044c4:	461a      	mov	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	609a      	str	r2, [r3, #8]
    button->last_debounce_time = currentTime;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	60da      	str	r2, [r3, #12]
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_GPIO_EXTI_Callback>:

// HAL GPIO EXTI Callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	80fb      	strh	r3, [r7, #6]
    uint32_t currentTime = HAL_GetTick();
 80044e2:	f001 f9f1 	bl	80058c8 <HAL_GetTick>
 80044e6:	60b8      	str	r0, [r7, #8]

    for (int i = 0; i < numButtons; ++i) {
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	e013      	b.n	8004516 <HAL_GPIO_EXTI_Callback+0x3e>
        if (buttons[i]->pin == GPIO_Pin) {
 80044ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004528 <HAL_GPIO_EXTI_Callback+0x50>)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	88fa      	ldrh	r2, [r7, #6]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d108      	bne.n	8004510 <HAL_GPIO_EXTI_Callback+0x38>
            updateButtonState(buttons[i], currentTime);
 80044fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004528 <HAL_GPIO_EXTI_Callback+0x50>)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ffcd 	bl	80044a8 <updateButtonState>
            break;
 800450e:	e007      	b.n	8004520 <HAL_GPIO_EXTI_Callback+0x48>
    for (int i = 0; i < numButtons; ++i) {
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	2207      	movs	r2, #7
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4293      	cmp	r3, r2
 800451c:	dbe7      	blt.n	80044ee <HAL_GPIO_EXTI_Callback+0x16>
        }
    }
}
 800451e:	bf00      	nop
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	2000008c 	.word	0x2000008c

0800452c <ButtonTask>:

// Function to handle button tasks
void ButtonTask(void) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8004532:	f001 f9c9 	bl	80058c8 <HAL_GetTick>
 8004536:	60b8      	str	r0, [r7, #8]

    for (int i = 0; i < numButtons; ++i) {
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e017      	b.n	800456e <ButtonTask+0x42>
        Button* button = buttons[i];
 800453e:	4a69      	ldr	r2, [pc, #420]	@ (80046e4 <ButtonTask+0x1b8>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004546:	607b      	str	r3, [r7, #4]

        if ((current_time - button->last_debounce_time > DEBOUNCE_DELAY) && (button->last_stable_state == GPIO_PIN_RESET)) {
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b50      	cmp	r3, #80	@ 0x50
 8004552:	d909      	bls.n	8004568 <ButtonTask+0x3c>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d105      	bne.n	8004568 <ButtonTask+0x3c>
            button->handler();
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	4798      	blx	r3
            button->last_debounce_time = current_time;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < numButtons; ++i) {
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3301      	adds	r3, #1
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	2207      	movs	r2, #7
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4293      	cmp	r3, r2
 8004574:	dbe3      	blt.n	800453e <ButtonTask+0x12>
        }
    }

    // Check button states for menu 3 and menu 4
    if (LCD_adc.demtong == 3 && LCD_adc.demmenu_3 == 1) {
 8004576:	4b5c      	ldr	r3, [pc, #368]	@ (80046e8 <ButtonTask+0x1bc>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b03      	cmp	r3, #3
 800457c:	d165      	bne.n	800464a <ButtonTask+0x11e>
 800457e:	4b5a      	ldr	r3, [pc, #360]	@ (80046e8 <ButtonTask+0x1bc>)
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d161      	bne.n	800464a <ButtonTask+0x11e>
        switch (LCD_adc.selected_menu3_item) {
 8004586:	4b58      	ldr	r3, [pc, #352]	@ (80046e8 <ButtonTask+0x1bc>)
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d040      	beq.n	8004610 <ButtonTask+0xe4>
 800458e:	2b02      	cmp	r3, #2
 8004590:	dc5b      	bgt.n	800464a <ButtonTask+0x11e>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <ButtonTask+0x70>
 8004596:	2b01      	cmp	r3, #1
 8004598:	d01d      	beq.n	80045d6 <ButtonTask+0xaa>
 800459a:	e056      	b.n	800464a <ButtonTask+0x11e>
            case 0:
                lcd_put_cur(0, 0);
 800459c:	2100      	movs	r1, #0
 800459e:	2000      	movs	r0, #0
 80045a0:	f7fe fd6e 	bl	8003080 <lcd_put_cur>
                lcd_send_string(">TYPE X= ");
 80045a4:	4851      	ldr	r0, [pc, #324]	@ (80046ec <ButtonTask+0x1c0>)
 80045a6:	f7fe fdbd 	bl	8003124 <lcd_send_string>
                float_to_string(LCD_adc.typeX_value, LCD_adc.X_Val, 2);
 80045aa:	4b4f      	ldr	r3, [pc, #316]	@ (80046e8 <ButtonTask+0x1bc>)
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	ee07 3a90 	vmov	s15, r3
 80045b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045b6:	2102      	movs	r1, #2
 80045b8:	484d      	ldr	r0, [pc, #308]	@ (80046f0 <ButtonTask+0x1c4>)
 80045ba:	eeb0 0a67 	vmov.f32	s0, s15
 80045be:	f7ff fa63 	bl	8003a88 <float_to_string>
                lcd_put_cur(0, 9);
 80045c2:	2109      	movs	r1, #9
 80045c4:	2000      	movs	r0, #0
 80045c6:	f7fe fd5b 	bl	8003080 <lcd_put_cur>
                lcd_send_string(LCD_adc.X_Val);
 80045ca:	4849      	ldr	r0, [pc, #292]	@ (80046f0 <ButtonTask+0x1c4>)
 80045cc:	f7fe fdaa 	bl	8003124 <lcd_send_string>
                X_count();
 80045d0:	f7ff fdec 	bl	80041ac <X_count>
                break;
 80045d4:	e039      	b.n	800464a <ButtonTask+0x11e>
            case 1:
                lcd_put_cur(1, 0);
 80045d6:	2100      	movs	r1, #0
 80045d8:	2001      	movs	r0, #1
 80045da:	f7fe fd51 	bl	8003080 <lcd_put_cur>
                lcd_send_string(">TYPE Y= ");
 80045de:	4845      	ldr	r0, [pc, #276]	@ (80046f4 <ButtonTask+0x1c8>)
 80045e0:	f7fe fda0 	bl	8003124 <lcd_send_string>
                float_to_string(LCD_adc.typeY_value, LCD_adc.Y_Val, 2);
 80045e4:	4b40      	ldr	r3, [pc, #256]	@ (80046e8 <ButtonTask+0x1bc>)
 80045e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e8:	ee07 3a90 	vmov	s15, r3
 80045ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045f0:	2102      	movs	r1, #2
 80045f2:	4841      	ldr	r0, [pc, #260]	@ (80046f8 <ButtonTask+0x1cc>)
 80045f4:	eeb0 0a67 	vmov.f32	s0, s15
 80045f8:	f7ff fa46 	bl	8003a88 <float_to_string>
                lcd_put_cur(1, 9);
 80045fc:	2109      	movs	r1, #9
 80045fe:	2001      	movs	r0, #1
 8004600:	f7fe fd3e 	bl	8003080 <lcd_put_cur>
                lcd_send_string(LCD_adc.Y_Val);
 8004604:	483c      	ldr	r0, [pc, #240]	@ (80046f8 <ButtonTask+0x1cc>)
 8004606:	f7fe fd8d 	bl	8003124 <lcd_send_string>
                Y_count();
 800460a:	f7ff fe09 	bl	8004220 <Y_count>
                break;
 800460e:	e01c      	b.n	800464a <ButtonTask+0x11e>
            case 2:
                lcd_put_cur(2, 0);
 8004610:	2100      	movs	r1, #0
 8004612:	2002      	movs	r0, #2
 8004614:	f7fe fd34 	bl	8003080 <lcd_put_cur>
                lcd_send_string(">TYPE Z= ");
 8004618:	4838      	ldr	r0, [pc, #224]	@ (80046fc <ButtonTask+0x1d0>)
 800461a:	f7fe fd83 	bl	8003124 <lcd_send_string>
                float_to_string(LCD_adc.typeZ_value, LCD_adc.Z_Val, 2);
 800461e:	4b32      	ldr	r3, [pc, #200]	@ (80046e8 <ButtonTask+0x1bc>)
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800462a:	2102      	movs	r1, #2
 800462c:	4834      	ldr	r0, [pc, #208]	@ (8004700 <ButtonTask+0x1d4>)
 800462e:	eeb0 0a67 	vmov.f32	s0, s15
 8004632:	f7ff fa29 	bl	8003a88 <float_to_string>
                lcd_put_cur(2, 9);
 8004636:	2109      	movs	r1, #9
 8004638:	2002      	movs	r0, #2
 800463a:	f7fe fd21 	bl	8003080 <lcd_put_cur>
                lcd_send_string(LCD_adc.Z_Val);
 800463e:	4830      	ldr	r0, [pc, #192]	@ (8004700 <ButtonTask+0x1d4>)
 8004640:	f7fe fd70 	bl	8003124 <lcd_send_string>
                Z_count();
 8004644:	f7ff fe26 	bl	8004294 <Z_count>
                break;
 8004648:	bf00      	nop
        }
    }

    if (LCD_adc.demtong == 3 && LCD_adc.demmenu_4 == 1) {
 800464a:	4b27      	ldr	r3, [pc, #156]	@ (80046e8 <ButtonTask+0x1bc>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b03      	cmp	r3, #3
 8004650:	d144      	bne.n	80046dc <ButtonTask+0x1b0>
 8004652:	4b25      	ldr	r3, [pc, #148]	@ (80046e8 <ButtonTask+0x1bc>)
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d140      	bne.n	80046dc <ButtonTask+0x1b0>
        switch (LCD_adc.selected_menu4_item) {
 800465a:	4b23      	ldr	r3, [pc, #140]	@ (80046e8 <ButtonTask+0x1bc>)
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <ButtonTask+0x13c>
 8004662:	2b01      	cmp	r3, #1
 8004664:	d01d      	beq.n	80046a2 <ButtonTask+0x176>
                lcd_send_string(LCD_adc.speed_ValZ);
                speedZ_count();
                break;
        }
    }
}
 8004666:	e039      	b.n	80046dc <ButtonTask+0x1b0>
                lcd_put_cur(0, 0);
 8004668:	2100      	movs	r1, #0
 800466a:	2000      	movs	r0, #0
 800466c:	f7fe fd08 	bl	8003080 <lcd_put_cur>
                lcd_send_string(">SPEED X-Y= ");
 8004670:	4824      	ldr	r0, [pc, #144]	@ (8004704 <ButtonTask+0x1d8>)
 8004672:	f7fe fd57 	bl	8003124 <lcd_send_string>
                float_to_string(LCD_adc.speed_valueXY, LCD_adc.speed_ValXY, 2);
 8004676:	4b1c      	ldr	r3, [pc, #112]	@ (80046e8 <ButtonTask+0x1bc>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004682:	2102      	movs	r1, #2
 8004684:	4820      	ldr	r0, [pc, #128]	@ (8004708 <ButtonTask+0x1dc>)
 8004686:	eeb0 0a67 	vmov.f32	s0, s15
 800468a:	f7ff f9fd 	bl	8003a88 <float_to_string>
                lcd_put_cur(0, 12);
 800468e:	210c      	movs	r1, #12
 8004690:	2000      	movs	r0, #0
 8004692:	f7fe fcf5 	bl	8003080 <lcd_put_cur>
                lcd_send_string(LCD_adc.speed_ValXY);
 8004696:	481c      	ldr	r0, [pc, #112]	@ (8004708 <ButtonTask+0x1dc>)
 8004698:	f7fe fd44 	bl	8003124 <lcd_send_string>
                speedXY_count();
 800469c:	f7ff fe84 	bl	80043a8 <speedXY_count>
                break;
 80046a0:	e01c      	b.n	80046dc <ButtonTask+0x1b0>
                lcd_put_cur(1, 0);
 80046a2:	2100      	movs	r1, #0
 80046a4:	2001      	movs	r0, #1
 80046a6:	f7fe fceb 	bl	8003080 <lcd_put_cur>
                lcd_send_string(">SPEED Z= ");
 80046aa:	4818      	ldr	r0, [pc, #96]	@ (800470c <ButtonTask+0x1e0>)
 80046ac:	f7fe fd3a 	bl	8003124 <lcd_send_string>
                float_to_string(LCD_adc.speed_valueZ, LCD_adc.speed_ValZ, 2);
 80046b0:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <ButtonTask+0x1bc>)
 80046b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b4:	ee07 3a90 	vmov	s15, r3
 80046b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046bc:	2102      	movs	r1, #2
 80046be:	4814      	ldr	r0, [pc, #80]	@ (8004710 <ButtonTask+0x1e4>)
 80046c0:	eeb0 0a67 	vmov.f32	s0, s15
 80046c4:	f7ff f9e0 	bl	8003a88 <float_to_string>
                lcd_put_cur(1, 12);
 80046c8:	210c      	movs	r1, #12
 80046ca:	2001      	movs	r0, #1
 80046cc:	f7fe fcd8 	bl	8003080 <lcd_put_cur>
                lcd_send_string(LCD_adc.speed_ValZ);
 80046d0:	480f      	ldr	r0, [pc, #60]	@ (8004710 <ButtonTask+0x1e4>)
 80046d2:	f7fe fd27 	bl	8003124 <lcd_send_string>
                speedZ_count();
 80046d6:	f7ff fea7 	bl	8004428 <speedZ_count>
                break;
 80046da:	bf00      	nop
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	2000008c 	.word	0x2000008c
 80046e8:	200008b4 	.word	0x200008b4
 80046ec:	08015828 	.word	0x08015828
 80046f0:	20000966 	.word	0x20000966
 80046f4:	08015858 	.word	0x08015858
 80046f8:	2000096b 	.word	0x2000096b
 80046fc:	08015864 	.word	0x08015864
 8004700:	20000970 	.word	0x20000970
 8004704:	08015870 	.word	0x08015870
 8004708:	20000975 	.word	0x20000975
 800470c:	08015898 	.word	0x08015898
 8004710:	2000097a 	.word	0x2000097a

08004714 <handle_up_button_press>:

void handle_up_button_press(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
    if (LCD_adc.demtong == 1) // move down in menu_main
 8004718:	4b22      	ldr	r3, [pc, #136]	@ (80047a4 <handle_up_button_press+0x90>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d10f      	bne.n	8004740 <handle_up_button_press+0x2c>
    {
        if (LCD_adc.menu_main <= 0)
 8004720:	4b20      	ldr	r3, [pc, #128]	@ (80047a4 <handle_up_button_press+0x90>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	dc03      	bgt.n	8004730 <handle_up_button_press+0x1c>
        {
            LCD_adc.menu_main = 3;
 8004728:	4b1e      	ldr	r3, [pc, #120]	@ (80047a4 <handle_up_button_press+0x90>)
 800472a:	2203      	movs	r2, #3
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e004      	b.n	800473a <handle_up_button_press+0x26>
        }
        else
        {
            LCD_adc.menu_main -= 1;
 8004730:	4b1c      	ldr	r3, [pc, #112]	@ (80047a4 <handle_up_button_press+0x90>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3b01      	subs	r3, #1
 8004736:	4a1b      	ldr	r2, [pc, #108]	@ (80047a4 <handle_up_button_press+0x90>)
 8004738:	6013      	str	r3, [r2, #0]
        }
        display_main();
 800473a:	f7ff fa83 	bl	8003c44 <display_main>
        {
            LCD_adc.selected_menu4_item -= 1;
        }
        menu_4();
    }
}
 800473e:	e02e      	b.n	800479e <handle_up_button_press+0x8a>
    else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 2)
 8004740:	4b18      	ldr	r3, [pc, #96]	@ (80047a4 <handle_up_button_press+0x90>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d113      	bne.n	8004770 <handle_up_button_press+0x5c>
 8004748:	4b16      	ldr	r3, [pc, #88]	@ (80047a4 <handle_up_button_press+0x90>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d10f      	bne.n	8004770 <handle_up_button_press+0x5c>
        if(LCD_adc.selected_menu3_item <= 0)
 8004750:	4b14      	ldr	r3, [pc, #80]	@ (80047a4 <handle_up_button_press+0x90>)
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	dc03      	bgt.n	8004760 <handle_up_button_press+0x4c>
            LCD_adc.selected_menu3_item = 2;
 8004758:	4b12      	ldr	r3, [pc, #72]	@ (80047a4 <handle_up_button_press+0x90>)
 800475a:	2202      	movs	r2, #2
 800475c:	615a      	str	r2, [r3, #20]
 800475e:	e004      	b.n	800476a <handle_up_button_press+0x56>
            LCD_adc.selected_menu3_item -= 1;
 8004760:	4b10      	ldr	r3, [pc, #64]	@ (80047a4 <handle_up_button_press+0x90>)
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	3b01      	subs	r3, #1
 8004766:	4a0f      	ldr	r2, [pc, #60]	@ (80047a4 <handle_up_button_press+0x90>)
 8004768:	6153      	str	r3, [r2, #20]
        menu_3();
 800476a:	f7ff fc9f 	bl	80040ac <menu_3>
}
 800476e:	e016      	b.n	800479e <handle_up_button_press+0x8a>
    else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 3)
 8004770:	4b0c      	ldr	r3, [pc, #48]	@ (80047a4 <handle_up_button_press+0x90>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d112      	bne.n	800479e <handle_up_button_press+0x8a>
 8004778:	4b0a      	ldr	r3, [pc, #40]	@ (80047a4 <handle_up_button_press+0x90>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d10e      	bne.n	800479e <handle_up_button_press+0x8a>
        if(LCD_adc.selected_menu4_item <= 0)
 8004780:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <handle_up_button_press+0x90>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	2b00      	cmp	r3, #0
 8004786:	dc03      	bgt.n	8004790 <handle_up_button_press+0x7c>
            LCD_adc.selected_menu4_item = 1;
 8004788:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <handle_up_button_press+0x90>)
 800478a:	2201      	movs	r2, #1
 800478c:	619a      	str	r2, [r3, #24]
 800478e:	e004      	b.n	800479a <handle_up_button_press+0x86>
            LCD_adc.selected_menu4_item -= 1;
 8004790:	4b04      	ldr	r3, [pc, #16]	@ (80047a4 <handle_up_button_press+0x90>)
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	3b01      	subs	r3, #1
 8004796:	4a03      	ldr	r2, [pc, #12]	@ (80047a4 <handle_up_button_press+0x90>)
 8004798:	6193      	str	r3, [r2, #24]
        menu_4();
 800479a:	f7ff fdb5 	bl	8004308 <menu_4>
}
 800479e:	bf00      	nop
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	200008b4 	.word	0x200008b4

080047a8 <handle_down_button_press>:

void handle_down_button_press(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
	if (LCD_adc.demtong == 1) // move up in menu_main
 80047ac:	4b22      	ldr	r3, [pc, #136]	@ (8004838 <handle_down_button_press+0x90>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d10f      	bne.n	80047d4 <handle_down_button_press+0x2c>
	{
		if (LCD_adc.menu_main >= 3)
 80047b4:	4b20      	ldr	r3, [pc, #128]	@ (8004838 <handle_down_button_press+0x90>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	dd03      	ble.n	80047c4 <handle_down_button_press+0x1c>
		{
		   LCD_adc.menu_main = 0;
 80047bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004838 <handle_down_button_press+0x90>)
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e004      	b.n	80047ce <handle_down_button_press+0x26>
		}
		else
		{
		   LCD_adc.menu_main += 1;
 80047c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004838 <handle_down_button_press+0x90>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3301      	adds	r3, #1
 80047ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004838 <handle_down_button_press+0x90>)
 80047cc:	6013      	str	r3, [r2, #0]
		}
		display_main();
 80047ce:	f7ff fa39 	bl	8003c44 <display_main>
		{
			LCD_adc.selected_menu4_item += 1;
		}
		menu_4();
	}
}
 80047d2:	e02e      	b.n	8004832 <handle_down_button_press+0x8a>
	else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 2)
 80047d4:	4b18      	ldr	r3, [pc, #96]	@ (8004838 <handle_down_button_press+0x90>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d113      	bne.n	8004804 <handle_down_button_press+0x5c>
 80047dc:	4b16      	ldr	r3, [pc, #88]	@ (8004838 <handle_down_button_press+0x90>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d10f      	bne.n	8004804 <handle_down_button_press+0x5c>
		if(LCD_adc.selected_menu3_item >= 2)
 80047e4:	4b14      	ldr	r3, [pc, #80]	@ (8004838 <handle_down_button_press+0x90>)
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	dd03      	ble.n	80047f4 <handle_down_button_press+0x4c>
			LCD_adc.selected_menu3_item = 0;
 80047ec:	4b12      	ldr	r3, [pc, #72]	@ (8004838 <handle_down_button_press+0x90>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	615a      	str	r2, [r3, #20]
 80047f2:	e004      	b.n	80047fe <handle_down_button_press+0x56>
			LCD_adc.selected_menu3_item += 1;
 80047f4:	4b10      	ldr	r3, [pc, #64]	@ (8004838 <handle_down_button_press+0x90>)
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	3301      	adds	r3, #1
 80047fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004838 <handle_down_button_press+0x90>)
 80047fc:	6153      	str	r3, [r2, #20]
		menu_3();
 80047fe:	f7ff fc55 	bl	80040ac <menu_3>
}
 8004802:	e016      	b.n	8004832 <handle_down_button_press+0x8a>
	else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 3)
 8004804:	4b0c      	ldr	r3, [pc, #48]	@ (8004838 <handle_down_button_press+0x90>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d112      	bne.n	8004832 <handle_down_button_press+0x8a>
 800480c:	4b0a      	ldr	r3, [pc, #40]	@ (8004838 <handle_down_button_press+0x90>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d10e      	bne.n	8004832 <handle_down_button_press+0x8a>
		if(LCD_adc.selected_menu4_item >= 1)
 8004814:	4b08      	ldr	r3, [pc, #32]	@ (8004838 <handle_down_button_press+0x90>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	dd03      	ble.n	8004824 <handle_down_button_press+0x7c>
			LCD_adc.selected_menu4_item = 0;
 800481c:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <handle_down_button_press+0x90>)
 800481e:	2200      	movs	r2, #0
 8004820:	619a      	str	r2, [r3, #24]
 8004822:	e004      	b.n	800482e <handle_down_button_press+0x86>
			LCD_adc.selected_menu4_item += 1;
 8004824:	4b04      	ldr	r3, [pc, #16]	@ (8004838 <handle_down_button_press+0x90>)
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	3301      	adds	r3, #1
 800482a:	4a03      	ldr	r2, [pc, #12]	@ (8004838 <handle_down_button_press+0x90>)
 800482c:	6193      	str	r3, [r2, #24]
		menu_4();
 800482e:	f7ff fd6b 	bl	8004308 <menu_4>
}
 8004832:	bf00      	nop
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	200008b4 	.word	0x200008b4

0800483c <handle_back_button_press>:

void handle_back_button_press(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
    LCD_adc.demback += 1;
 8004840:	4b54      	ldr	r3, [pc, #336]	@ (8004994 <handle_back_button_press+0x158>)
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	3301      	adds	r3, #1
 8004846:	4a53      	ldr	r2, [pc, #332]	@ (8004994 <handle_back_button_press+0x158>)
 8004848:	6113      	str	r3, [r2, #16]
    if (LCD_adc.demback == 1)
 800484a:	4b52      	ldr	r3, [pc, #328]	@ (8004994 <handle_back_button_press+0x158>)
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	2b01      	cmp	r3, #1
 8004850:	f040 8099 	bne.w	8004986 <handle_back_button_press+0x14a>
    {
       if (LCD_adc.demtong == 1 && (LCD_adc.menu_main == 0 || LCD_adc.menu_main == 1 || LCD_adc.menu_main == 2 || LCD_adc.menu_main == 3))
 8004854:	4b4f      	ldr	r3, [pc, #316]	@ (8004994 <handle_back_button_press+0x158>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d11a      	bne.n	8004892 <handle_back_button_press+0x56>
 800485c:	4b4d      	ldr	r3, [pc, #308]	@ (8004994 <handle_back_button_press+0x158>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00b      	beq.n	800487c <handle_back_button_press+0x40>
 8004864:	4b4b      	ldr	r3, [pc, #300]	@ (8004994 <handle_back_button_press+0x158>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d007      	beq.n	800487c <handle_back_button_press+0x40>
 800486c:	4b49      	ldr	r3, [pc, #292]	@ (8004994 <handle_back_button_press+0x158>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d003      	beq.n	800487c <handle_back_button_press+0x40>
 8004874:	4b47      	ldr	r3, [pc, #284]	@ (8004994 <handle_back_button_press+0x158>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d10a      	bne.n	8004892 <handle_back_button_press+0x56>
       {
           LCD_adc.demtong -= 1;
 800487c:	4b45      	ldr	r3, [pc, #276]	@ (8004994 <handle_back_button_press+0x158>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	3b01      	subs	r3, #1
 8004882:	4a44      	ldr	r2, [pc, #272]	@ (8004994 <handle_back_button_press+0x158>)
 8004884:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 8004886:	4b43      	ldr	r3, [pc, #268]	@ (8004994 <handle_back_button_press+0x158>)
 8004888:	2200      	movs	r2, #0
 800488a:	611a      	str	r2, [r3, #16]
           display_menu();
 800488c:	f7ff f9ae 	bl	8003bec <display_menu>
 8004890:	e07d      	b.n	800498e <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 0) // From menu_1 back to display main_menu
 8004892:	4b40      	ldr	r3, [pc, #256]	@ (8004994 <handle_back_button_press+0x158>)
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d10e      	bne.n	80048b8 <handle_back_button_press+0x7c>
 800489a:	4b3e      	ldr	r3, [pc, #248]	@ (8004994 <handle_back_button_press+0x158>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <handle_back_button_press+0x7c>
       {
           LCD_adc.demtong -= 1;
 80048a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004994 <handle_back_button_press+0x158>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	4a3a      	ldr	r2, [pc, #232]	@ (8004994 <handle_back_button_press+0x158>)
 80048aa:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 80048ac:	4b39      	ldr	r3, [pc, #228]	@ (8004994 <handle_back_button_press+0x158>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	611a      	str	r2, [r3, #16]
           display_main();
 80048b2:	f7ff f9c7 	bl	8003c44 <display_main>
 80048b6:	e06a      	b.n	800498e <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 1) // From menu_2 back to display main_menu
 80048b8:	4b36      	ldr	r3, [pc, #216]	@ (8004994 <handle_back_button_press+0x158>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d10e      	bne.n	80048de <handle_back_button_press+0xa2>
 80048c0:	4b34      	ldr	r3, [pc, #208]	@ (8004994 <handle_back_button_press+0x158>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d10a      	bne.n	80048de <handle_back_button_press+0xa2>
       {
           LCD_adc.demtong -= 1;
 80048c8:	4b32      	ldr	r3, [pc, #200]	@ (8004994 <handle_back_button_press+0x158>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	4a31      	ldr	r2, [pc, #196]	@ (8004994 <handle_back_button_press+0x158>)
 80048d0:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 80048d2:	4b30      	ldr	r3, [pc, #192]	@ (8004994 <handle_back_button_press+0x158>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	611a      	str	r2, [r3, #16]
           display_main();
 80048d8:	f7ff f9b4 	bl	8003c44 <display_main>
 80048dc:	e057      	b.n	800498e <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 2) // From menu_3 back to display main_menu
 80048de:	4b2d      	ldr	r3, [pc, #180]	@ (8004994 <handle_back_button_press+0x158>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d111      	bne.n	800490a <handle_back_button_press+0xce>
 80048e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004994 <handle_back_button_press+0x158>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d10d      	bne.n	800490a <handle_back_button_press+0xce>
       {
           LCD_adc.demtong -= 1;
 80048ee:	4b29      	ldr	r3, [pc, #164]	@ (8004994 <handle_back_button_press+0x158>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	4a27      	ldr	r2, [pc, #156]	@ (8004994 <handle_back_button_press+0x158>)
 80048f6:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 80048f8:	4b26      	ldr	r3, [pc, #152]	@ (8004994 <handle_back_button_press+0x158>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	611a      	str	r2, [r3, #16]
           LCD_adc.demmenu_3 = 0;
 80048fe:	4b25      	ldr	r3, [pc, #148]	@ (8004994 <handle_back_button_press+0x158>)
 8004900:	2200      	movs	r2, #0
 8004902:	61da      	str	r2, [r3, #28]
           display_main();
 8004904:	f7ff f99e 	bl	8003c44 <display_main>
 8004908:	e041      	b.n	800498e <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 3 && LCD_adc.demmenu_3 >= 1) // From select_menu3 back to menu_3
 800490a:	4b22      	ldr	r3, [pc, #136]	@ (8004994 <handle_back_button_press+0x158>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d10f      	bne.n	8004932 <handle_back_button_press+0xf6>
 8004912:	4b20      	ldr	r3, [pc, #128]	@ (8004994 <handle_back_button_press+0x158>)
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	2b00      	cmp	r3, #0
 8004918:	dd0b      	ble.n	8004932 <handle_back_button_press+0xf6>
       {
           LCD_adc.demback = 0;
 800491a:	4b1e      	ldr	r3, [pc, #120]	@ (8004994 <handle_back_button_press+0x158>)
 800491c:	2200      	movs	r2, #0
 800491e:	611a      	str	r2, [r3, #16]
           LCD_adc.demtong = 2;
 8004920:	4b1c      	ldr	r3, [pc, #112]	@ (8004994 <handle_back_button_press+0x158>)
 8004922:	2202      	movs	r2, #2
 8004924:	60da      	str	r2, [r3, #12]
           LCD_adc.selected_menu3_item = 0;
 8004926:	4b1b      	ldr	r3, [pc, #108]	@ (8004994 <handle_back_button_press+0x158>)
 8004928:	2200      	movs	r2, #0
 800492a:	615a      	str	r2, [r3, #20]
           menu_3();
 800492c:	f7ff fbbe 	bl	80040ac <menu_3>
 8004930:	e02d      	b.n	800498e <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 3) // From menu_4 back to display main_menu
 8004932:	4b18      	ldr	r3, [pc, #96]	@ (8004994 <handle_back_button_press+0x158>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d111      	bne.n	800495e <handle_back_button_press+0x122>
 800493a:	4b16      	ldr	r3, [pc, #88]	@ (8004994 <handle_back_button_press+0x158>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d10d      	bne.n	800495e <handle_back_button_press+0x122>
       {
           LCD_adc.demtong -= 1;
 8004942:	4b14      	ldr	r3, [pc, #80]	@ (8004994 <handle_back_button_press+0x158>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	3b01      	subs	r3, #1
 8004948:	4a12      	ldr	r2, [pc, #72]	@ (8004994 <handle_back_button_press+0x158>)
 800494a:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 800494c:	4b11      	ldr	r3, [pc, #68]	@ (8004994 <handle_back_button_press+0x158>)
 800494e:	2200      	movs	r2, #0
 8004950:	611a      	str	r2, [r3, #16]
           LCD_adc.demmenu_4 = 0;
 8004952:	4b10      	ldr	r3, [pc, #64]	@ (8004994 <handle_back_button_press+0x158>)
 8004954:	2200      	movs	r2, #0
 8004956:	621a      	str	r2, [r3, #32]
           display_main();
 8004958:	f7ff f974 	bl	8003c44 <display_main>
 800495c:	e017      	b.n	800498e <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 3 && LCD_adc.demmenu_4 >= 1) // From select_menu4 back to menu_4
 800495e:	4b0d      	ldr	r3, [pc, #52]	@ (8004994 <handle_back_button_press+0x158>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d113      	bne.n	800498e <handle_back_button_press+0x152>
 8004966:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <handle_back_button_press+0x158>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	2b00      	cmp	r3, #0
 800496c:	dd0f      	ble.n	800498e <handle_back_button_press+0x152>
       {
           LCD_adc.demback = 0;
 800496e:	4b09      	ldr	r3, [pc, #36]	@ (8004994 <handle_back_button_press+0x158>)
 8004970:	2200      	movs	r2, #0
 8004972:	611a      	str	r2, [r3, #16]
           LCD_adc.demtong = 2;
 8004974:	4b07      	ldr	r3, [pc, #28]	@ (8004994 <handle_back_button_press+0x158>)
 8004976:	2202      	movs	r2, #2
 8004978:	60da      	str	r2, [r3, #12]
           LCD_adc.selected_menu4_item = 0;
 800497a:	4b06      	ldr	r3, [pc, #24]	@ (8004994 <handle_back_button_press+0x158>)
 800497c:	2200      	movs	r2, #0
 800497e:	619a      	str	r2, [r3, #24]
           menu_4();
 8004980:	f7ff fcc2 	bl	8004308 <menu_4>
    }
    else
    {
       LCD_adc.demback = 0;
    }
}
 8004984:	e003      	b.n	800498e <handle_back_button_press+0x152>
       LCD_adc.demback = 0;
 8004986:	4b03      	ldr	r3, [pc, #12]	@ (8004994 <handle_back_button_press+0x158>)
 8004988:	2200      	movs	r2, #0
 800498a:	611a      	str	r2, [r3, #16]
}
 800498c:	e7ff      	b.n	800498e <handle_back_button_press+0x152>
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	200008b4 	.word	0x200008b4

08004998 <handle_select_button_press>:

void handle_select_button_press(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
    LCD_adc.demtong += 1;
 800499c:	4b3c      	ldr	r3, [pc, #240]	@ (8004a90 <handle_select_button_press+0xf8>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	3301      	adds	r3, #1
 80049a2:	4a3b      	ldr	r2, [pc, #236]	@ (8004a90 <handle_select_button_press+0xf8>)
 80049a4:	60d3      	str	r3, [r2, #12]
    if (LCD_adc.demtong == 1) // in menu_main
 80049a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004a90 <handle_select_button_press+0xf8>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d105      	bne.n	80049ba <handle_select_button_press+0x22>
    {
       LCD_adc.demback = 0;
 80049ae:	4b38      	ldr	r3, [pc, #224]	@ (8004a90 <handle_select_button_press+0xf8>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	611a      	str	r2, [r3, #16]
       display_main();
 80049b4:	f7ff f946 	bl	8003c44 <display_main>
    else if (LCD_adc.demtong > 3)
    {
       LCD_adc.demtong = 3;
       LCD_adc.demback = 0;
    }
}
 80049b8:	e068      	b.n	8004a8c <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 0) // choose menu 1
 80049ba:	4b35      	ldr	r3, [pc, #212]	@ (8004a90 <handle_select_button_press+0xf8>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d109      	bne.n	80049d6 <handle_select_button_press+0x3e>
 80049c2:	4b33      	ldr	r3, [pc, #204]	@ (8004a90 <handle_select_button_press+0xf8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d105      	bne.n	80049d6 <handle_select_button_press+0x3e>
       LCD_adc.demback = 0;
 80049ca:	4b31      	ldr	r3, [pc, #196]	@ (8004a90 <handle_select_button_press+0xf8>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	611a      	str	r2, [r3, #16]
       menu_1();
 80049d0:	f7ff f9da 	bl	8003d88 <menu_1>
 80049d4:	e05a      	b.n	8004a8c <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 1) // choose menu 2
 80049d6:	4b2e      	ldr	r3, [pc, #184]	@ (8004a90 <handle_select_button_press+0xf8>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d109      	bne.n	80049f2 <handle_select_button_press+0x5a>
 80049de:	4b2c      	ldr	r3, [pc, #176]	@ (8004a90 <handle_select_button_press+0xf8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d105      	bne.n	80049f2 <handle_select_button_press+0x5a>
       LCD_adc.demback = 0;
 80049e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004a90 <handle_select_button_press+0xf8>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	611a      	str	r2, [r3, #16]
       menu_2();
 80049ec:	f7ff faba 	bl	8003f64 <menu_2>
 80049f0:	e04c      	b.n	8004a8c <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 2) // In menu 3
 80049f2:	4b27      	ldr	r3, [pc, #156]	@ (8004a90 <handle_select_button_press+0xf8>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d10e      	bne.n	8004a18 <handle_select_button_press+0x80>
 80049fa:	4b25      	ldr	r3, [pc, #148]	@ (8004a90 <handle_select_button_press+0xf8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d10a      	bne.n	8004a18 <handle_select_button_press+0x80>
       LCD_adc.demback = 0;
 8004a02:	4b23      	ldr	r3, [pc, #140]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	611a      	str	r2, [r3, #16]
       menu_3();
 8004a08:	f7ff fb50 	bl	80040ac <menu_3>
       LCD_adc.demmenu_3 += 1;
 8004a0c:	4b20      	ldr	r3, [pc, #128]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	3301      	adds	r3, #1
 8004a12:	4a1f      	ldr	r2, [pc, #124]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a14:	61d3      	str	r3, [r2, #28]
 8004a16:	e039      	b.n	8004a8c <handle_select_button_press+0xf4>
    else if(LCD_adc.demtong == 3 && LCD_adc.demmenu_3 == 1)//choose menu 3
 8004a18:	4b1d      	ldr	r3, [pc, #116]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d109      	bne.n	8004a34 <handle_select_button_press+0x9c>
 8004a20:	4b1b      	ldr	r3, [pc, #108]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d105      	bne.n	8004a34 <handle_select_button_press+0x9c>
        LCD_adc.demback = 0;
 8004a28:	4b19      	ldr	r3, [pc, #100]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	611a      	str	r2, [r3, #16]
       select_menu3();
 8004a2e:	f7ff fba3 	bl	8004178 <select_menu3>
 8004a32:	e02b      	b.n	8004a8c <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 3) // In menu 4
 8004a34:	4b16      	ldr	r3, [pc, #88]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d10e      	bne.n	8004a5a <handle_select_button_press+0xc2>
 8004a3c:	4b14      	ldr	r3, [pc, #80]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d10a      	bne.n	8004a5a <handle_select_button_press+0xc2>
       LCD_adc.demback = 0;
 8004a44:	4b12      	ldr	r3, [pc, #72]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	611a      	str	r2, [r3, #16]
       menu_4();
 8004a4a:	f7ff fc5d 	bl	8004308 <menu_4>
       LCD_adc.demmenu_4 += 1;
 8004a4e:	4b10      	ldr	r3, [pc, #64]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	3301      	adds	r3, #1
 8004a54:	4a0e      	ldr	r2, [pc, #56]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a56:	6213      	str	r3, [r2, #32]
 8004a58:	e018      	b.n	8004a8c <handle_select_button_press+0xf4>
    else if(LCD_adc.demtong == 3 && LCD_adc.demmenu_4 == 1)//choose menu 4
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d109      	bne.n	8004a76 <handle_select_button_press+0xde>
 8004a62:	4b0b      	ldr	r3, [pc, #44]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d105      	bne.n	8004a76 <handle_select_button_press+0xde>
       LCD_adc.demback = 0;
 8004a6a:	4b09      	ldr	r3, [pc, #36]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	611a      	str	r2, [r3, #16]
       select_menu4();
 8004a70:	f7ff fc86 	bl	8004380 <select_menu4>
 8004a74:	e00a      	b.n	8004a8c <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong > 3)
 8004a76:	4b06      	ldr	r3, [pc, #24]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	dd06      	ble.n	8004a8c <handle_select_button_press+0xf4>
       LCD_adc.demtong = 3;
 8004a7e:	4b04      	ldr	r3, [pc, #16]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a80:	2203      	movs	r2, #3
 8004a82:	60da      	str	r2, [r3, #12]
       LCD_adc.demback = 0;
 8004a84:	4b02      	ldr	r3, [pc, #8]	@ (8004a90 <handle_select_button_press+0xf8>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	611a      	str	r2, [r3, #16]
}
 8004a8a:	e7ff      	b.n	8004a8c <handle_select_button_press+0xf4>
 8004a8c:	bf00      	nop
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	200008b4 	.word	0x200008b4

08004a94 <handle_reset_button_press>:

void handle_reset_button_press(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
    if (state.reset_press == 1)
 8004a98:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <handle_reset_button_press+0x1c>)
 8004a9a:	789b      	ldrb	r3, [r3, #2]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d104      	bne.n	8004aac <handle_reset_button_press+0x18>
    {
        resetProgram();
 8004aa2:	f000 f83f 	bl	8004b24 <resetProgram>
        // when reseted, restarted again
        state.reset_press = 0;
 8004aa6:	4b02      	ldr	r3, [pc, #8]	@ (8004ab0 <handle_reset_button_press+0x1c>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	709a      	strb	r2, [r3, #2]
    }
}
 8004aac:	bf00      	nop
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20000a20 	.word	0x20000a20

08004ab4 <handle_start_button_press>:

void handle_start_button_press(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
    if (state.reset_press == 0)
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae4 <handle_start_button_press+0x30>)
 8004aba:	789b      	ldrb	r3, [r3, #2]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10d      	bne.n	8004ade <handle_start_button_press+0x2a>
    {
    	state.start_press = 1;
 8004ac2:	4b08      	ldr	r3, [pc, #32]	@ (8004ae4 <handle_start_button_press+0x30>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	701a      	strb	r2, [r3, #0]
    	state.stop_press = 0;
 8004ac8:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <handle_start_button_press+0x30>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	705a      	strb	r2, [r3, #1]
        HAL_GPIO_WritePin(drill_port, drill_pin, 1);
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004ad4:	4804      	ldr	r0, [pc, #16]	@ (8004ae8 <handle_start_button_press+0x34>)
 8004ad6:	f002 fb35 	bl	8007144 <HAL_GPIO_WritePin>
    	StartProgram();
 8004ada:	f000 f92f 	bl	8004d3c <StartProgram>
    }
}
 8004ade:	bf00      	nop
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000a20 	.word	0x20000a20
 8004ae8:	40020400 	.word	0x40020400

08004aec <handle_stop_button_press>:

void handle_stop_button_press(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
    if (state.reset_press == 0)
 8004af0:	4b0a      	ldr	r3, [pc, #40]	@ (8004b1c <handle_stop_button_press+0x30>)
 8004af2:	789b      	ldrb	r3, [r3, #2]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10d      	bne.n	8004b16 <handle_stop_button_press+0x2a>
    {
    	state.stop_press = 1;
 8004afa:	4b08      	ldr	r3, [pc, #32]	@ (8004b1c <handle_stop_button_press+0x30>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	705a      	strb	r2, [r3, #1]
        HAL_GPIO_WritePin(drill_port, drill_pin, 0);
 8004b00:	2200      	movs	r2, #0
 8004b02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b06:	4806      	ldr	r0, [pc, #24]	@ (8004b20 <handle_stop_button_press+0x34>)
 8004b08:	f002 fb1c 	bl	8007144 <HAL_GPIO_WritePin>
        StopProgram();
 8004b0c:	f000 f8fe 	bl	8004d0c <StopProgram>
        // Sau khi dừng, chỉ cho phép nhấn nút reset
        state.reset_press = 1;
 8004b10:	4b02      	ldr	r3, [pc, #8]	@ (8004b1c <handle_stop_button_press+0x30>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	709a      	strb	r2, [r3, #2]
    }
}
 8004b16:	bf00      	nop
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000a20 	.word	0x20000a20
 8004b20:	40020400 	.word	0x40020400

08004b24 <resetProgram>:

void resetProgram(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
	state.start_press = 0;
 8004b28:	4b6d      	ldr	r3, [pc, #436]	@ (8004ce0 <resetProgram+0x1bc>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
	state.stop_press = 1;
 8004b2e:	4b6c      	ldr	r3, [pc, #432]	@ (8004ce0 <resetProgram+0x1bc>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	705a      	strb	r2, [r3, #1]
    // reset var
    lcd_clear();
 8004b34:	f7fe fa8c 	bl	8003050 <lcd_clear>
    lcd_put_cur(1, 2);
 8004b38:	2102      	movs	r1, #2
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	f7fe faa0 	bl	8003080 <lcd_put_cur>
    lcd_send_string("PROGRAM RESETING");
 8004b40:	4868      	ldr	r0, [pc, #416]	@ (8004ce4 <resetProgram+0x1c0>)
 8004b42:	f7fe faef 	bl	8003124 <lcd_send_string>
    LCD_adc.demtong = 0;
 8004b46:	4b68      	ldr	r3, [pc, #416]	@ (8004ce8 <resetProgram+0x1c4>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	60da      	str	r2, [r3, #12]
    LCD_adc.demback = 0;
 8004b4c:	4b66      	ldr	r3, [pc, #408]	@ (8004ce8 <resetProgram+0x1c4>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	611a      	str	r2, [r3, #16]
    LCD_adc.menu_main = 0;
 8004b52:	4b65      	ldr	r3, [pc, #404]	@ (8004ce8 <resetProgram+0x1c4>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
    LCD_adc.selected_menu3_item = 0;
 8004b58:	4b63      	ldr	r3, [pc, #396]	@ (8004ce8 <resetProgram+0x1c4>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	615a      	str	r2, [r3, #20]
    LCD_adc.selected_menu4_item = 0;
 8004b5e:	4b62      	ldr	r3, [pc, #392]	@ (8004ce8 <resetProgram+0x1c4>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	619a      	str	r2, [r3, #24]
    LCD_adc.demmenu_3 = 0;
 8004b64:	4b60      	ldr	r3, [pc, #384]	@ (8004ce8 <resetProgram+0x1c4>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	61da      	str	r2, [r3, #28]
    LCD_adc.demmenu_4 = 0;
 8004b6a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ce8 <resetProgram+0x1c4>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	621a      	str	r2, [r3, #32]
    LCD_adc.typeX_value = 0;
 8004b70:	4b5d      	ldr	r3, [pc, #372]	@ (8004ce8 <resetProgram+0x1c4>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	625a      	str	r2, [r3, #36]	@ 0x24
    LCD_adc.typeY_value = 0;
 8004b76:	4b5c      	ldr	r3, [pc, #368]	@ (8004ce8 <resetProgram+0x1c4>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	629a      	str	r2, [r3, #40]	@ 0x28
    LCD_adc.typeZ_value = 0;
 8004b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ce8 <resetProgram+0x1c4>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	62da      	str	r2, [r3, #44]	@ 0x2c
    LCD_adc.speed_valueXY = 0;
 8004b82:	4b59      	ldr	r3, [pc, #356]	@ (8004ce8 <resetProgram+0x1c4>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	@ 0x30
    LCD_adc.speed_valueZ = 0;
 8004b88:	4b57      	ldr	r3, [pc, #348]	@ (8004ce8 <resetProgram+0x1c4>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	635a      	str	r2, [r3, #52]	@ 0x34
    LCD_adc.voltage = 0;
 8004b8e:	4b56      	ldr	r3, [pc, #344]	@ (8004ce8 <resetProgram+0x1c4>)
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	655a      	str	r2, [r3, #84]	@ 0x54
    LCD_adc.current = 0;
 8004b96:	4b54      	ldr	r3, [pc, #336]	@ (8004ce8 <resetProgram+0x1c4>)
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	651a      	str	r2, [r3, #80]	@ 0x50
    LCD_adc.power = 0;
 8004b9e:	4b52      	ldr	r3, [pc, #328]	@ (8004ce8 <resetProgram+0x1c4>)
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	65da      	str	r2, [r3, #92]	@ 0x5c
    LCD_adc.temp = 0;
 8004ba6:	4b50      	ldr	r3, [pc, #320]	@ (8004ce8 <resetProgram+0x1c4>)
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	659a      	str	r2, [r3, #88]	@ 0x58
    Stepper1.accel_count = 0;
 8004bae:	494f      	ldr	r1, [pc, #316]	@ (8004cec <resetProgram+0x1c8>)
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Stepper2.accel_count = 0;
 8004bbc:	494c      	ldr	r1, [pc, #304]	@ (8004cf0 <resetProgram+0x1cc>)
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Stepper3.accel_count = 0;
 8004bca:	494a      	ldr	r1, [pc, #296]	@ (8004cf4 <resetProgram+0x1d0>)
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    CNC_pos.x = 0;
 8004bd8:	4b47      	ldr	r3, [pc, #284]	@ (8004cf8 <resetProgram+0x1d4>)
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	609a      	str	r2, [r3, #8]
    CNC_pos.y = 0;
 8004be0:	4b45      	ldr	r3, [pc, #276]	@ (8004cf8 <resetProgram+0x1d4>)
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	60da      	str	r2, [r3, #12]
    CNC_pos.z = 0;
 8004be8:	4b43      	ldr	r3, [pc, #268]	@ (8004cf8 <resetProgram+0x1d4>)
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	611a      	str	r2, [r3, #16]
    CNC_pos.MoveX = 0;
 8004bf0:	4941      	ldr	r1, [pc, #260]	@ (8004cf8 <resetProgram+0x1d4>)
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    CNC_pos.MoveY = 0;
 8004bfe:	493e      	ldr	r1, [pc, #248]	@ (8004cf8 <resetProgram+0x1d4>)
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	e9c1 2308 	strd	r2, r3, [r1, #32]
    CNC_pos.MoveZ = 0;
 8004c0c:	493a      	ldr	r1, [pc, #232]	@ (8004cf8 <resetProgram+0x1d4>)
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    CNC.pos_x = 0;
 8004c1a:	4938      	ldr	r1, [pc, #224]	@ (8004cfc <resetProgram+0x1d8>)
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9c1 2306 	strd	r2, r3, [r1, #24]
    CNC.pos_y = 0;
 8004c28:	4934      	ldr	r1, [pc, #208]	@ (8004cfc <resetProgram+0x1d8>)
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	e9c1 2308 	strd	r2, r3, [r1, #32]
    CNC.pos_z = 0;
 8004c36:	4931      	ldr	r1, [pc, #196]	@ (8004cfc <resetProgram+0x1d8>)
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    CNC.set_posX = 0;
 8004c44:	492d      	ldr	r1, [pc, #180]	@ (8004cfc <resetProgram+0x1d8>)
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9c1 2300 	strd	r2, r3, [r1]
    CNC.set_posY = 0;
 8004c52:	492a      	ldr	r1, [pc, #168]	@ (8004cfc <resetProgram+0x1d8>)
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    CNC.set_posZ = 0;
 8004c60:	4926      	ldr	r1, [pc, #152]	@ (8004cfc <resetProgram+0x1d8>)
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9c1 2304 	strd	r2, r3, [r1, #16]

    __HAL_TIM_SET_AUTORELOAD(Stepper1.htim, 1000);
 8004c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8004cec <resetProgram+0x1c8>)
 8004c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8004cec <resetProgram+0x1c8>)
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c82:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_AUTORELOAD(Stepper2.htim, 1000);
 8004c84:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf0 <resetProgram+0x1cc>)
 8004c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c90:	4b17      	ldr	r3, [pc, #92]	@ (8004cf0 <resetProgram+0x1cc>)
 8004c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c98:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_AUTORELOAD(Stepper3.htim, 1000);
 8004c9a:	4b16      	ldr	r3, [pc, #88]	@ (8004cf4 <resetProgram+0x1d0>)
 8004c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004ca6:	4b13      	ldr	r3, [pc, #76]	@ (8004cf4 <resetProgram+0x1d0>)
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004caa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004cae:	60da      	str	r2, [r3, #12]
    // Reset hardware
    initialize_LCD(&LCD_adc);
 8004cb0:	480d      	ldr	r0, [pc, #52]	@ (8004ce8 <resetProgram+0x1c4>)
 8004cb2:	f7fe fb19 	bl	80032e8 <initialize_LCD>
    initialize_Kalman(&kalman_fil_curr);
 8004cb6:	4812      	ldr	r0, [pc, #72]	@ (8004d00 <resetProgram+0x1dc>)
 8004cb8:	f7fe fb42 	bl	8003340 <initialize_Kalman>
    initialize_Kalman(&kalman_fil_volt);
 8004cbc:	4811      	ldr	r0, [pc, #68]	@ (8004d04 <resetProgram+0x1e0>)
 8004cbe:	f7fe fb3f 	bl	8003340 <initialize_Kalman>
    initializeCNC_pos(&CNC_pos);
 8004cc2:	480d      	ldr	r0, [pc, #52]	@ (8004cf8 <resetProgram+0x1d4>)
 8004cc4:	f7fc fe44 	bl	8001950 <initializeCNC_pos>
     * code here
     *
     * */
    //HOME();
    // Start display lcd
    lcd_clear();
 8004cc8:	f7fe f9c2 	bl	8003050 <lcd_clear>
    lcd_put_cur(1, 2);
 8004ccc:	2102      	movs	r1, #2
 8004cce:	2001      	movs	r0, #1
 8004cd0:	f7fe f9d6 	bl	8003080 <lcd_put_cur>
    lcd_send_string("PROGRAM  RESETED");
 8004cd4:	480c      	ldr	r0, [pc, #48]	@ (8004d08 <resetProgram+0x1e4>)
 8004cd6:	f7fe fa25 	bl	8003124 <lcd_send_string>
}
 8004cda:	bf00      	nop
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000a20 	.word	0x20000a20
 8004ce4:	080158a4 	.word	0x080158a4
 8004ce8:	200008b4 	.word	0x200008b4
 8004cec:	200002b0 	.word	0x200002b0
 8004cf0:	20000310 	.word	0x20000310
 8004cf4:	20000370 	.word	0x20000370
 8004cf8:	20000770 	.word	0x20000770
 8004cfc:	20000830 	.word	0x20000830
 8004d00:	20000980 	.word	0x20000980
 8004d04:	200009d0 	.word	0x200009d0
 8004d08:	080158b8 	.word	0x080158b8

08004d0c <StopProgram>:

void StopProgram(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
	state.start_press = 0;
 8004d10:	4b08      	ldr	r3, [pc, #32]	@ (8004d34 <StopProgram+0x28>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	701a      	strb	r2, [r3, #0]
    lcd_clear();
 8004d16:	f7fe f99b 	bl	8003050 <lcd_clear>
    lcd_put_cur(1, 2);
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	2001      	movs	r0, #1
 8004d1e:	f7fe f9af 	bl	8003080 <lcd_put_cur>
    lcd_send_string("PROGRAM  STOPPED");
 8004d22:	4805      	ldr	r0, [pc, #20]	@ (8004d38 <StopProgram+0x2c>)
 8004d24:	f7fe f9fe 	bl	8003124 <lcd_send_string>
    lcd_put_cur(3, 0);
 8004d28:	2100      	movs	r1, #0
 8004d2a:	2003      	movs	r0, #3
 8004d2c:	f7fe f9a8 	bl	8003080 <lcd_put_cur>
}
 8004d30:	bf00      	nop
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20000a20 	.word	0x20000a20
 8004d38:	080158cc 	.word	0x080158cc

08004d3c <StartProgram>:

void StartProgram(void){
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
    lcd_clear();
 8004d40:	f7fe f986 	bl	8003050 <lcd_clear>
    lcd_put_cur(1, 3);
 8004d44:	2103      	movs	r1, #3
 8004d46:	2001      	movs	r0, #1
 8004d48:	f7fe f99a 	bl	8003080 <lcd_put_cur>
    lcd_send_string("PROGRAM  START");
 8004d4c:	4809      	ldr	r0, [pc, #36]	@ (8004d74 <StartProgram+0x38>)
 8004d4e:	f7fe f9e9 	bl	8003124 <lcd_send_string>
    lcd_put_cur(2, 0);
 8004d52:	2100      	movs	r1, #0
 8004d54:	2002      	movs	r0, #2
 8004d56:	f7fe f993 	bl	8003080 <lcd_put_cur>
    lcd_send_string("IP ADD:");
 8004d5a:	4807      	ldr	r0, [pc, #28]	@ (8004d78 <StartProgram+0x3c>)
 8004d5c:	f7fe f9e2 	bl	8003124 <lcd_send_string>
    lcd_put_cur(2, 8);
 8004d60:	2108      	movs	r1, #8
 8004d62:	2002      	movs	r0, #2
 8004d64:	f7fe f98c 	bl	8003080 <lcd_put_cur>
    lcd_send_string(SaveData.ip_config);
 8004d68:	4804      	ldr	r0, [pc, #16]	@ (8004d7c <StartProgram+0x40>)
 8004d6a:	f7fe f9db 	bl	8003124 <lcd_send_string>
}
 8004d6e:	bf00      	nop
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	080158e0 	.word	0x080158e0
 8004d78:	080158f0 	.word	0x080158f0
 8004d7c:	2000073c 	.word	0x2000073c

08004d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	4b16      	ldr	r3, [pc, #88]	@ (8004de4 <HAL_MspInit+0x64>)
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8e:	4a15      	ldr	r2, [pc, #84]	@ (8004de4 <HAL_MspInit+0x64>)
 8004d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d96:	4b13      	ldr	r3, [pc, #76]	@ (8004de4 <HAL_MspInit+0x64>)
 8004d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d9e:	607b      	str	r3, [r7, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004da2:	2300      	movs	r3, #0
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	4b0f      	ldr	r3, [pc, #60]	@ (8004de4 <HAL_MspInit+0x64>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004daa:	4a0e      	ldr	r2, [pc, #56]	@ (8004de4 <HAL_MspInit+0x64>)
 8004dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004db2:	4b0c      	ldr	r3, [pc, #48]	@ (8004de4 <HAL_MspInit+0x64>)
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	210f      	movs	r1, #15
 8004dc2:	f06f 0001 	mvn.w	r0, #1
 8004dc6:	f001 fbc2 	bl	800654e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2105      	movs	r1, #5
 8004dce:	2001      	movs	r0, #1
 8004dd0:	f001 fbbd 	bl	800654e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	f001 fbd6 	bl	8006586 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800

08004de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004dec:	bf00      	nop
 8004dee:	e7fd      	b.n	8004dec <NMI_Handler+0x4>

08004df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004df4:	bf00      	nop
 8004df6:	e7fd      	b.n	8004df4 <HardFault_Handler+0x4>

08004df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <MemManage_Handler+0x4>

08004e00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e04:	bf00      	nop
 8004e06:	e7fd      	b.n	8004e04 <BusFault_Handler+0x4>

08004e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e0c:	bf00      	nop
 8004e0e:	e7fd      	b.n	8004e0c <UsageFault_Handler+0x4>

08004e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e14:	bf00      	nop
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e22:	f000 fd3d 	bl	80058a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004e26:	f009 fa19 	bl	800e25c <xTaskGetSchedulerState>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d001      	beq.n	8004e34 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004e30:	f00a f912 	bl	800f058 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e34:	bf00      	nop
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8004e3c:	f004 fb54 	bl	80094e8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8004e40:	bf00      	nop
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004e48:	2010      	movs	r0, #16
 8004e4a:	f002 f9af 	bl	80071ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004e58:	4802      	ldr	r0, [pc, #8]	@ (8004e64 <DMA1_Stream5_IRQHandler+0x10>)
 8004e5a:	f001 fd47 	bl	80068ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000c24 	.word	0x20000c24

08004e68 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e6c:	4802      	ldr	r0, [pc, #8]	@ (8004e78 <ADC_IRQHandler+0x10>)
 8004e6e:	f000 ff2f 	bl	8005cd0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004e72:	bf00      	nop
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	200003d0 	.word	0x200003d0

08004e7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004e80:	2040      	movs	r0, #64	@ 0x40
 8004e82:	f002 f993 	bl	80071ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004e86:	2080      	movs	r0, #128	@ 0x80
 8004e88:	f002 f990 	bl	80071ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004e8c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004e90:	f002 f98c 	bl	80071ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004e94:	bf00      	nop
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e9c:	4802      	ldr	r0, [pc, #8]	@ (8004ea8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004e9e:	f005 f8c4 	bl	800a02a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004ea2:	bf00      	nop
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20000a2c 	.word	0x20000a2c

08004eac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004eb0:	4802      	ldr	r0, [pc, #8]	@ (8004ebc <TIM2_IRQHandler+0x10>)
 8004eb2:	f005 f8ba 	bl	800a02a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000a74 	.word	0x20000a74

08004ec0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004ec4:	4802      	ldr	r0, [pc, #8]	@ (8004ed0 <TIM3_IRQHandler+0x10>)
 8004ec6:	f005 f8b0 	bl	800a02a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004eca:	bf00      	nop
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000abc 	.word	0x20000abc

08004ed4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004ed8:	4802      	ldr	r0, [pc, #8]	@ (8004ee4 <TIM4_IRQHandler+0x10>)
 8004eda:	f005 f8a6 	bl	800a02a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004ede:	bf00      	nop
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20000b04 	.word	0x20000b04

08004ee8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004eec:	4802      	ldr	r0, [pc, #8]	@ (8004ef8 <I2C1_EV_IRQHandler+0x10>)
 8004eee:	f002 fbcd 	bl	800768c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004ef2:	bf00      	nop
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000860 	.word	0x20000860

08004efc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004f00:	4802      	ldr	r0, [pc, #8]	@ (8004f0c <I2C1_ER_IRQHandler+0x10>)
 8004f02:	f002 fd16 	bl	8007932 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004f06:	bf00      	nop
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000860 	.word	0x20000860

08004f10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f14:	4802      	ldr	r0, [pc, #8]	@ (8004f20 <USART2_IRQHandler+0x10>)
 8004f16:	f005 fd59 	bl	800a9cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f1a:	bf00      	nop
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000bdc 	.word	0x20000bdc

08004f24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004f28:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004f2c:	f002 f93e 	bl	80071ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004f30:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004f34:	f002 f93a 	bl	80071ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004f38:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004f3c:	f002 f936 	bl	80071ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f40:	bf00      	nop
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004f48:	4802      	ldr	r0, [pc, #8]	@ (8004f54 <TIM5_IRQHandler+0x10>)
 8004f4a:	f005 f86e 	bl	800a02a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004f4e:	bf00      	nop
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000b4c 	.word	0x20000b4c

08004f58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004f5c:	4802      	ldr	r0, [pc, #8]	@ (8004f68 <TIM6_DAC_IRQHandler+0x10>)
 8004f5e:	f005 f864 	bl	800a02a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004f62:	bf00      	nop
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000b94 	.word	0x20000b94

08004f6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f70:	4802      	ldr	r0, [pc, #8]	@ (8004f7c <DMA2_Stream0_IRQHandler+0x10>)
 8004f72:	f001 fcbb 	bl	80068ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004f76:	bf00      	nop
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000418 	.word	0x20000418

08004f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return 1;
 8004f84:	2301      	movs	r3, #1
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <_kill>:

int _kill(int pid, int sig)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f9a:	f00b fcdb 	bl	8010954 <__errno>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2216      	movs	r2, #22
 8004fa2:	601a      	str	r2, [r3, #0]
  return -1;
 8004fa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <_exit>:

void _exit (int status)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff ffe7 	bl	8004f90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004fc2:	bf00      	nop
 8004fc4:	e7fd      	b.n	8004fc2 <_exit+0x12>

08004fc6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b086      	sub	sp, #24
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	e00a      	b.n	8004fee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004fd8:	f3af 8000 	nop.w
 8004fdc:	4601      	mov	r1, r0
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	60ba      	str	r2, [r7, #8]
 8004fe4:	b2ca      	uxtb	r2, r1
 8004fe6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3301      	adds	r3, #1
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	dbf0      	blt.n	8004fd8 <_read+0x12>
  }

  return len;
 8004ff6:	687b      	ldr	r3, [r7, #4]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800500c:	4618      	mov	r0, r3
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005028:	605a      	str	r2, [r3, #4]
  return 0;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <_isatty>:

int _isatty(int file)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005040:	2301      	movs	r3, #1
}
 8005042:	4618      	mov	r0, r3
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800504e:	b480      	push	{r7}
 8005050:	b085      	sub	sp, #20
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005070:	4a14      	ldr	r2, [pc, #80]	@ (80050c4 <_sbrk+0x5c>)
 8005072:	4b15      	ldr	r3, [pc, #84]	@ (80050c8 <_sbrk+0x60>)
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800507c:	4b13      	ldr	r3, [pc, #76]	@ (80050cc <_sbrk+0x64>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d102      	bne.n	800508a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005084:	4b11      	ldr	r3, [pc, #68]	@ (80050cc <_sbrk+0x64>)
 8005086:	4a12      	ldr	r2, [pc, #72]	@ (80050d0 <_sbrk+0x68>)
 8005088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800508a:	4b10      	ldr	r3, [pc, #64]	@ (80050cc <_sbrk+0x64>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4413      	add	r3, r2
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	429a      	cmp	r2, r3
 8005096:	d207      	bcs.n	80050a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005098:	f00b fc5c 	bl	8010954 <__errno>
 800509c:	4603      	mov	r3, r0
 800509e:	220c      	movs	r2, #12
 80050a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050a2:	f04f 33ff 	mov.w	r3, #4294967295
 80050a6:	e009      	b.n	80050bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050a8:	4b08      	ldr	r3, [pc, #32]	@ (80050cc <_sbrk+0x64>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050ae:	4b07      	ldr	r3, [pc, #28]	@ (80050cc <_sbrk+0x64>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4413      	add	r3, r2
 80050b6:	4a05      	ldr	r2, [pc, #20]	@ (80050cc <_sbrk+0x64>)
 80050b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050ba:	68fb      	ldr	r3, [r7, #12]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	20020000 	.word	0x20020000
 80050c8:	00000400 	.word	0x00000400
 80050cc:	20000a28 	.word	0x20000a28
 80050d0:	20005728 	.word	0x20005728

080050d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050d8:	4b06      	ldr	r3, [pc, #24]	@ (80050f4 <SystemInit+0x20>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050de:	4a05      	ldr	r2, [pc, #20]	@ (80050f4 <SystemInit+0x20>)
 80050e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80050e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050e8:	bf00      	nop
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	e000ed00 	.word	0xe000ed00

080050f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050fe:	f107 0308 	add.w	r3, r7, #8
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	605a      	str	r2, [r3, #4]
 8005108:	609a      	str	r2, [r3, #8]
 800510a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800510c:	463b      	mov	r3, r7
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005114:	4b1e      	ldr	r3, [pc, #120]	@ (8005190 <MX_TIM1_Init+0x98>)
 8005116:	4a1f      	ldr	r2, [pc, #124]	@ (8005194 <MX_TIM1_Init+0x9c>)
 8005118:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800511a:	4b1d      	ldr	r3, [pc, #116]	@ (8005190 <MX_TIM1_Init+0x98>)
 800511c:	2253      	movs	r2, #83	@ 0x53
 800511e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005120:	4b1b      	ldr	r3, [pc, #108]	@ (8005190 <MX_TIM1_Init+0x98>)
 8005122:	2200      	movs	r2, #0
 8005124:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8005126:	4b1a      	ldr	r3, [pc, #104]	@ (8005190 <MX_TIM1_Init+0x98>)
 8005128:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800512c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800512e:	4b18      	ldr	r3, [pc, #96]	@ (8005190 <MX_TIM1_Init+0x98>)
 8005130:	2200      	movs	r2, #0
 8005132:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005134:	4b16      	ldr	r3, [pc, #88]	@ (8005190 <MX_TIM1_Init+0x98>)
 8005136:	2200      	movs	r2, #0
 8005138:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800513a:	4b15      	ldr	r3, [pc, #84]	@ (8005190 <MX_TIM1_Init+0x98>)
 800513c:	2280      	movs	r2, #128	@ 0x80
 800513e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005140:	4813      	ldr	r0, [pc, #76]	@ (8005190 <MX_TIM1_Init+0x98>)
 8005142:	f004 fe83 	bl	8009e4c <HAL_TIM_Base_Init>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800514c:	f7fe f8c6 	bl	80032dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005150:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005156:	f107 0308 	add.w	r3, r7, #8
 800515a:	4619      	mov	r1, r3
 800515c:	480c      	ldr	r0, [pc, #48]	@ (8005190 <MX_TIM1_Init+0x98>)
 800515e:	f005 f854 	bl	800a20a <HAL_TIM_ConfigClockSource>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8005168:	f7fe f8b8 	bl	80032dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800516c:	2300      	movs	r3, #0
 800516e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005170:	2300      	movs	r3, #0
 8005172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005174:	463b      	mov	r3, r7
 8005176:	4619      	mov	r1, r3
 8005178:	4805      	ldr	r0, [pc, #20]	@ (8005190 <MX_TIM1_Init+0x98>)
 800517a:	f005 fa7b 	bl	800a674 <HAL_TIMEx_MasterConfigSynchronization>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005184:	f7fe f8aa 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005188:	bf00      	nop
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	20000a2c 	.word	0x20000a2c
 8005194:	40010000 	.word	0x40010000

08005198 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800519e:	f107 0308 	add.w	r3, r7, #8
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	609a      	str	r2, [r3, #8]
 80051aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051ac:	463b      	mov	r3, r7
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80051b4:	4b1d      	ldr	r3, [pc, #116]	@ (800522c <MX_TIM2_Init+0x94>)
 80051b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80051ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80051bc:	4b1b      	ldr	r3, [pc, #108]	@ (800522c <MX_TIM2_Init+0x94>)
 80051be:	22a7      	movs	r2, #167	@ 0xa7
 80051c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051c2:	4b1a      	ldr	r3, [pc, #104]	@ (800522c <MX_TIM2_Init+0x94>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80051c8:	4b18      	ldr	r3, [pc, #96]	@ (800522c <MX_TIM2_Init+0x94>)
 80051ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80051ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051d0:	4b16      	ldr	r3, [pc, #88]	@ (800522c <MX_TIM2_Init+0x94>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051d6:	4b15      	ldr	r3, [pc, #84]	@ (800522c <MX_TIM2_Init+0x94>)
 80051d8:	2280      	movs	r2, #128	@ 0x80
 80051da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80051dc:	4813      	ldr	r0, [pc, #76]	@ (800522c <MX_TIM2_Init+0x94>)
 80051de:	f004 fe35 	bl	8009e4c <HAL_TIM_Base_Init>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80051e8:	f7fe f878 	bl	80032dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80051f2:	f107 0308 	add.w	r3, r7, #8
 80051f6:	4619      	mov	r1, r3
 80051f8:	480c      	ldr	r0, [pc, #48]	@ (800522c <MX_TIM2_Init+0x94>)
 80051fa:	f005 f806 	bl	800a20a <HAL_TIM_ConfigClockSource>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005204:	f7fe f86a 	bl	80032dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005208:	2300      	movs	r3, #0
 800520a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800520c:	2300      	movs	r3, #0
 800520e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005210:	463b      	mov	r3, r7
 8005212:	4619      	mov	r1, r3
 8005214:	4805      	ldr	r0, [pc, #20]	@ (800522c <MX_TIM2_Init+0x94>)
 8005216:	f005 fa2d 	bl	800a674 <HAL_TIMEx_MasterConfigSynchronization>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005220:	f7fe f85c 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005224:	bf00      	nop
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20000a74 	.word	0x20000a74

08005230 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005236:	f107 0308 	add.w	r3, r7, #8
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	605a      	str	r2, [r3, #4]
 8005240:	609a      	str	r2, [r3, #8]
 8005242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005244:	463b      	mov	r3, r7
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800524c:	4b1d      	ldr	r3, [pc, #116]	@ (80052c4 <MX_TIM3_Init+0x94>)
 800524e:	4a1e      	ldr	r2, [pc, #120]	@ (80052c8 <MX_TIM3_Init+0x98>)
 8005250:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8005252:	4b1c      	ldr	r3, [pc, #112]	@ (80052c4 <MX_TIM3_Init+0x94>)
 8005254:	22a7      	movs	r2, #167	@ 0xa7
 8005256:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005258:	4b1a      	ldr	r3, [pc, #104]	@ (80052c4 <MX_TIM3_Init+0x94>)
 800525a:	2200      	movs	r2, #0
 800525c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800525e:	4b19      	ldr	r3, [pc, #100]	@ (80052c4 <MX_TIM3_Init+0x94>)
 8005260:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005264:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005266:	4b17      	ldr	r3, [pc, #92]	@ (80052c4 <MX_TIM3_Init+0x94>)
 8005268:	2200      	movs	r2, #0
 800526a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800526c:	4b15      	ldr	r3, [pc, #84]	@ (80052c4 <MX_TIM3_Init+0x94>)
 800526e:	2280      	movs	r2, #128	@ 0x80
 8005270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005272:	4814      	ldr	r0, [pc, #80]	@ (80052c4 <MX_TIM3_Init+0x94>)
 8005274:	f004 fdea 	bl	8009e4c <HAL_TIM_Base_Init>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800527e:	f7fe f82d 	bl	80032dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005282:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005286:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005288:	f107 0308 	add.w	r3, r7, #8
 800528c:	4619      	mov	r1, r3
 800528e:	480d      	ldr	r0, [pc, #52]	@ (80052c4 <MX_TIM3_Init+0x94>)
 8005290:	f004 ffbb 	bl	800a20a <HAL_TIM_ConfigClockSource>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800529a:	f7fe f81f 	bl	80032dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800529e:	2300      	movs	r3, #0
 80052a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80052a6:	463b      	mov	r3, r7
 80052a8:	4619      	mov	r1, r3
 80052aa:	4806      	ldr	r0, [pc, #24]	@ (80052c4 <MX_TIM3_Init+0x94>)
 80052ac:	f005 f9e2 	bl	800a674 <HAL_TIMEx_MasterConfigSynchronization>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80052b6:	f7fe f811 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80052ba:	bf00      	nop
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000abc 	.word	0x20000abc
 80052c8:	40000400 	.word	0x40000400

080052cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052d2:	f107 0308 	add.w	r3, r7, #8
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	609a      	str	r2, [r3, #8]
 80052de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052e0:	463b      	mov	r3, r7
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80052e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005360 <MX_TIM4_Init+0x94>)
 80052ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005364 <MX_TIM4_Init+0x98>)
 80052ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80052ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005360 <MX_TIM4_Init+0x94>)
 80052f0:	2253      	movs	r2, #83	@ 0x53
 80052f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005360 <MX_TIM4_Init+0x94>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80052fa:	4b19      	ldr	r3, [pc, #100]	@ (8005360 <MX_TIM4_Init+0x94>)
 80052fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005300:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005302:	4b17      	ldr	r3, [pc, #92]	@ (8005360 <MX_TIM4_Init+0x94>)
 8005304:	2200      	movs	r2, #0
 8005306:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005308:	4b15      	ldr	r3, [pc, #84]	@ (8005360 <MX_TIM4_Init+0x94>)
 800530a:	2280      	movs	r2, #128	@ 0x80
 800530c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800530e:	4814      	ldr	r0, [pc, #80]	@ (8005360 <MX_TIM4_Init+0x94>)
 8005310:	f004 fd9c 	bl	8009e4c <HAL_TIM_Base_Init>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800531a:	f7fd ffdf 	bl	80032dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800531e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005322:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005324:	f107 0308 	add.w	r3, r7, #8
 8005328:	4619      	mov	r1, r3
 800532a:	480d      	ldr	r0, [pc, #52]	@ (8005360 <MX_TIM4_Init+0x94>)
 800532c:	f004 ff6d 	bl	800a20a <HAL_TIM_ConfigClockSource>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8005336:	f7fd ffd1 	bl	80032dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800533a:	2300      	movs	r3, #0
 800533c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800533e:	2300      	movs	r3, #0
 8005340:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005342:	463b      	mov	r3, r7
 8005344:	4619      	mov	r1, r3
 8005346:	4806      	ldr	r0, [pc, #24]	@ (8005360 <MX_TIM4_Init+0x94>)
 8005348:	f005 f994 	bl	800a674 <HAL_TIMEx_MasterConfigSynchronization>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005352:	f7fd ffc3 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005356:	bf00      	nop
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000b04 	.word	0x20000b04
 8005364:	40000800 	.word	0x40000800

08005368 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800536e:	f107 0308 	add.w	r3, r7, #8
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	605a      	str	r2, [r3, #4]
 8005378:	609a      	str	r2, [r3, #8]
 800537a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800537c:	463b      	mov	r3, r7
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005384:	4b1d      	ldr	r3, [pc, #116]	@ (80053fc <MX_TIM5_Init+0x94>)
 8005386:	4a1e      	ldr	r2, [pc, #120]	@ (8005400 <MX_TIM5_Init+0x98>)
 8005388:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800538a:	4b1c      	ldr	r3, [pc, #112]	@ (80053fc <MX_TIM5_Init+0x94>)
 800538c:	2253      	movs	r2, #83	@ 0x53
 800538e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005390:	4b1a      	ldr	r3, [pc, #104]	@ (80053fc <MX_TIM5_Init+0x94>)
 8005392:	2200      	movs	r2, #0
 8005394:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8005396:	4b19      	ldr	r3, [pc, #100]	@ (80053fc <MX_TIM5_Init+0x94>)
 8005398:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800539c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800539e:	4b17      	ldr	r3, [pc, #92]	@ (80053fc <MX_TIM5_Init+0x94>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80053a4:	4b15      	ldr	r3, [pc, #84]	@ (80053fc <MX_TIM5_Init+0x94>)
 80053a6:	2280      	movs	r2, #128	@ 0x80
 80053a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80053aa:	4814      	ldr	r0, [pc, #80]	@ (80053fc <MX_TIM5_Init+0x94>)
 80053ac:	f004 fd4e 	bl	8009e4c <HAL_TIM_Base_Init>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80053b6:	f7fd ff91 	bl	80032dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80053c0:	f107 0308 	add.w	r3, r7, #8
 80053c4:	4619      	mov	r1, r3
 80053c6:	480d      	ldr	r0, [pc, #52]	@ (80053fc <MX_TIM5_Init+0x94>)
 80053c8:	f004 ff1f 	bl	800a20a <HAL_TIM_ConfigClockSource>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80053d2:	f7fd ff83 	bl	80032dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053d6:	2300      	movs	r3, #0
 80053d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053da:	2300      	movs	r3, #0
 80053dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80053de:	463b      	mov	r3, r7
 80053e0:	4619      	mov	r1, r3
 80053e2:	4806      	ldr	r0, [pc, #24]	@ (80053fc <MX_TIM5_Init+0x94>)
 80053e4:	f005 f946 	bl	800a674 <HAL_TIMEx_MasterConfigSynchronization>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80053ee:	f7fd ff75 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80053f2:	bf00      	nop
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20000b4c 	.word	0x20000b4c
 8005400:	40000c00 	.word	0x40000c00

08005404 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM6_Init(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800540a:	463b      	mov	r3, r7
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005412:	4b15      	ldr	r3, [pc, #84]	@ (8005468 <MX_TIM6_Init+0x64>)
 8005414:	4a15      	ldr	r2, [pc, #84]	@ (800546c <MX_TIM6_Init+0x68>)
 8005416:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8005418:	4b13      	ldr	r3, [pc, #76]	@ (8005468 <MX_TIM6_Init+0x64>)
 800541a:	2253      	movs	r2, #83	@ 0x53
 800541c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800541e:	4b12      	ldr	r3, [pc, #72]	@ (8005468 <MX_TIM6_Init+0x64>)
 8005420:	2200      	movs	r2, #0
 8005422:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8005424:	4b10      	ldr	r3, [pc, #64]	@ (8005468 <MX_TIM6_Init+0x64>)
 8005426:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800542a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800542c:	4b0e      	ldr	r3, [pc, #56]	@ (8005468 <MX_TIM6_Init+0x64>)
 800542e:	2280      	movs	r2, #128	@ 0x80
 8005430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005432:	480d      	ldr	r0, [pc, #52]	@ (8005468 <MX_TIM6_Init+0x64>)
 8005434:	f004 fd0a 	bl	8009e4c <HAL_TIM_Base_Init>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800543e:	f7fd ff4d 	bl	80032dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005442:	2300      	movs	r3, #0
 8005444:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005446:	2300      	movs	r3, #0
 8005448:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800544a:	463b      	mov	r3, r7
 800544c:	4619      	mov	r1, r3
 800544e:	4806      	ldr	r0, [pc, #24]	@ (8005468 <MX_TIM6_Init+0x64>)
 8005450:	f005 f910 	bl	800a674 <HAL_TIMEx_MasterConfigSynchronization>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800545a:	f7fd ff3f 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000b94 	.word	0x20000b94
 800546c:	40001000 	.word	0x40001000

08005470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a54      	ldr	r2, [pc, #336]	@ (80055d0 <HAL_TIM_Base_MspInit+0x160>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d116      	bne.n	80054b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	4b53      	ldr	r3, [pc, #332]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 8005488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548a:	4a52      	ldr	r2, [pc, #328]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 800548c:	f043 0301 	orr.w	r3, r3, #1
 8005490:	6453      	str	r3, [r2, #68]	@ 0x44
 8005492:	4b50      	ldr	r3, [pc, #320]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 8005494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800549e:	2200      	movs	r2, #0
 80054a0:	2105      	movs	r1, #5
 80054a2:	2018      	movs	r0, #24
 80054a4:	f001 f853 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80054a8:	2018      	movs	r0, #24
 80054aa:	f001 f86c 	bl	8006586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80054ae:	e08a      	b.n	80055c6 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b8:	d116      	bne.n	80054e8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054ba:	2300      	movs	r3, #0
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	4b45      	ldr	r3, [pc, #276]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	4a44      	ldr	r2, [pc, #272]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80054ca:	4b42      	ldr	r3, [pc, #264]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80054d6:	2200      	movs	r2, #0
 80054d8:	2105      	movs	r1, #5
 80054da:	201c      	movs	r0, #28
 80054dc:	f001 f837 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80054e0:	201c      	movs	r0, #28
 80054e2:	f001 f850 	bl	8006586 <HAL_NVIC_EnableIRQ>
}
 80054e6:	e06e      	b.n	80055c6 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a3a      	ldr	r2, [pc, #232]	@ (80055d8 <HAL_TIM_Base_MspInit+0x168>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d116      	bne.n	8005520 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80054f2:	2300      	movs	r3, #0
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	4b37      	ldr	r3, [pc, #220]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	4a36      	ldr	r2, [pc, #216]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 80054fc:	f043 0302 	orr.w	r3, r3, #2
 8005500:	6413      	str	r3, [r2, #64]	@ 0x40
 8005502:	4b34      	ldr	r3, [pc, #208]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800550e:	2200      	movs	r2, #0
 8005510:	2105      	movs	r1, #5
 8005512:	201d      	movs	r0, #29
 8005514:	f001 f81b 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005518:	201d      	movs	r0, #29
 800551a:	f001 f834 	bl	8006586 <HAL_NVIC_EnableIRQ>
}
 800551e:	e052      	b.n	80055c6 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a2d      	ldr	r2, [pc, #180]	@ (80055dc <HAL_TIM_Base_MspInit+0x16c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d116      	bne.n	8005558 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	4b29      	ldr	r3, [pc, #164]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	4a28      	ldr	r2, [pc, #160]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 8005534:	f043 0304 	orr.w	r3, r3, #4
 8005538:	6413      	str	r3, [r2, #64]	@ 0x40
 800553a:	4b26      	ldr	r3, [pc, #152]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8005546:	2200      	movs	r2, #0
 8005548:	2105      	movs	r1, #5
 800554a:	201e      	movs	r0, #30
 800554c:	f000 ffff 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005550:	201e      	movs	r0, #30
 8005552:	f001 f818 	bl	8006586 <HAL_NVIC_EnableIRQ>
}
 8005556:	e036      	b.n	80055c6 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM5)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a20      	ldr	r2, [pc, #128]	@ (80055e0 <HAL_TIM_Base_MspInit+0x170>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d116      	bne.n	8005590 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	4b1b      	ldr	r3, [pc, #108]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556a:	4a1a      	ldr	r2, [pc, #104]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 800556c:	f043 0308 	orr.w	r3, r3, #8
 8005570:	6413      	str	r3, [r2, #64]	@ 0x40
 8005572:	4b18      	ldr	r3, [pc, #96]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 8005574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800557e:	2200      	movs	r2, #0
 8005580:	2105      	movs	r1, #5
 8005582:	2032      	movs	r0, #50	@ 0x32
 8005584:	f000 ffe3 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005588:	2032      	movs	r0, #50	@ 0x32
 800558a:	f000 fffc 	bl	8006586 <HAL_NVIC_EnableIRQ>
}
 800558e:	e01a      	b.n	80055c6 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM6)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a13      	ldr	r2, [pc, #76]	@ (80055e4 <HAL_TIM_Base_MspInit+0x174>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d115      	bne.n	80055c6 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800559a:	2300      	movs	r3, #0
 800559c:	60bb      	str	r3, [r7, #8]
 800559e:	4b0d      	ldr	r3, [pc, #52]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 80055a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a2:	4a0c      	ldr	r2, [pc, #48]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 80055a4:	f043 0310 	orr.w	r3, r3, #16
 80055a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80055aa:	4b0a      	ldr	r3, [pc, #40]	@ (80055d4 <HAL_TIM_Base_MspInit+0x164>)
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	60bb      	str	r3, [r7, #8]
 80055b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80055b6:	2200      	movs	r2, #0
 80055b8:	2105      	movs	r1, #5
 80055ba:	2036      	movs	r0, #54	@ 0x36
 80055bc:	f000 ffc7 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80055c0:	2036      	movs	r0, #54	@ 0x36
 80055c2:	f000 ffe0 	bl	8006586 <HAL_NVIC_EnableIRQ>
}
 80055c6:	bf00      	nop
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40010000 	.word	0x40010000
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800
 80055e0:	40000c00 	.word	0x40000c00
 80055e4:	40001000 	.word	0x40001000

080055e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80055ec:	4b11      	ldr	r3, [pc, #68]	@ (8005634 <MX_USART2_UART_Init+0x4c>)
 80055ee:	4a12      	ldr	r2, [pc, #72]	@ (8005638 <MX_USART2_UART_Init+0x50>)
 80055f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80055f2:	4b10      	ldr	r3, [pc, #64]	@ (8005634 <MX_USART2_UART_Init+0x4c>)
 80055f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80055f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80055fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005634 <MX_USART2_UART_Init+0x4c>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005600:	4b0c      	ldr	r3, [pc, #48]	@ (8005634 <MX_USART2_UART_Init+0x4c>)
 8005602:	2200      	movs	r2, #0
 8005604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005606:	4b0b      	ldr	r3, [pc, #44]	@ (8005634 <MX_USART2_UART_Init+0x4c>)
 8005608:	2200      	movs	r2, #0
 800560a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800560c:	4b09      	ldr	r3, [pc, #36]	@ (8005634 <MX_USART2_UART_Init+0x4c>)
 800560e:	220c      	movs	r2, #12
 8005610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005612:	4b08      	ldr	r3, [pc, #32]	@ (8005634 <MX_USART2_UART_Init+0x4c>)
 8005614:	2200      	movs	r2, #0
 8005616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005618:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <MX_USART2_UART_Init+0x4c>)
 800561a:	2200      	movs	r2, #0
 800561c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800561e:	4805      	ldr	r0, [pc, #20]	@ (8005634 <MX_USART2_UART_Init+0x4c>)
 8005620:	f005 f8b8 	bl	800a794 <HAL_UART_Init>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800562a:	f7fd fe57 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800562e:	bf00      	nop
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20000bdc 	.word	0x20000bdc
 8005638:	40004400 	.word	0x40004400

0800563c <MX_DMA_UART_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_UART_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005642:	2300      	movs	r3, #0
 8005644:	607b      	str	r3, [r7, #4]
 8005646:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <MX_DMA_UART_Init+0x3c>)
 8005648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564a:	4a0b      	ldr	r2, [pc, #44]	@ (8005678 <MX_DMA_UART_Init+0x3c>)
 800564c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005650:	6313      	str	r3, [r2, #48]	@ 0x30
 8005652:	4b09      	ldr	r3, [pc, #36]	@ (8005678 <MX_DMA_UART_Init+0x3c>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005656:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800565a:	607b      	str	r3, [r7, #4]
 800565c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800565e:	2200      	movs	r2, #0
 8005660:	2105      	movs	r1, #5
 8005662:	2010      	movs	r0, #16
 8005664:	f000 ff73 	bl	800654e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005668:	2010      	movs	r0, #16
 800566a:	f000 ff8c 	bl	8006586 <HAL_NVIC_EnableIRQ>

}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40023800 	.word	0x40023800

0800567c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	@ 0x28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005684:	f107 0314 	add.w	r3, r7, #20
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	605a      	str	r2, [r3, #4]
 800568e:	609a      	str	r2, [r3, #8]
 8005690:	60da      	str	r2, [r3, #12]
 8005692:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a34      	ldr	r2, [pc, #208]	@ (800576c <HAL_UART_MspInit+0xf0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d162      	bne.n	8005764 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800569e:	2300      	movs	r3, #0
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	4b33      	ldr	r3, [pc, #204]	@ (8005770 <HAL_UART_MspInit+0xf4>)
 80056a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a6:	4a32      	ldr	r2, [pc, #200]	@ (8005770 <HAL_UART_MspInit+0xf4>)
 80056a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80056ae:	4b30      	ldr	r3, [pc, #192]	@ (8005770 <HAL_UART_MspInit+0xf4>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b6:	613b      	str	r3, [r7, #16]
 80056b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80056ba:	2300      	movs	r3, #0
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	4b2c      	ldr	r3, [pc, #176]	@ (8005770 <HAL_UART_MspInit+0xf4>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c2:	4a2b      	ldr	r2, [pc, #172]	@ (8005770 <HAL_UART_MspInit+0xf4>)
 80056c4:	f043 0308 	orr.w	r3, r3, #8
 80056c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80056ca:	4b29      	ldr	r3, [pc, #164]	@ (8005770 <HAL_UART_MspInit+0xf4>)
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80056d6:	2360      	movs	r3, #96	@ 0x60
 80056d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056da:	2302      	movs	r3, #2
 80056dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056e2:	2303      	movs	r3, #3
 80056e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80056e6:	2307      	movs	r3, #7
 80056e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056ea:	f107 0314 	add.w	r3, r7, #20
 80056ee:	4619      	mov	r1, r3
 80056f0:	4820      	ldr	r0, [pc, #128]	@ (8005774 <HAL_UART_MspInit+0xf8>)
 80056f2:	f001 fb73 	bl	8006ddc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80056f6:	4b20      	ldr	r3, [pc, #128]	@ (8005778 <HAL_UART_MspInit+0xfc>)
 80056f8:	4a20      	ldr	r2, [pc, #128]	@ (800577c <HAL_UART_MspInit+0x100>)
 80056fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80056fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005778 <HAL_UART_MspInit+0xfc>)
 80056fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005702:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005704:	4b1c      	ldr	r3, [pc, #112]	@ (8005778 <HAL_UART_MspInit+0xfc>)
 8005706:	2200      	movs	r2, #0
 8005708:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800570a:	4b1b      	ldr	r3, [pc, #108]	@ (8005778 <HAL_UART_MspInit+0xfc>)
 800570c:	2200      	movs	r2, #0
 800570e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005710:	4b19      	ldr	r3, [pc, #100]	@ (8005778 <HAL_UART_MspInit+0xfc>)
 8005712:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005716:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005718:	4b17      	ldr	r3, [pc, #92]	@ (8005778 <HAL_UART_MspInit+0xfc>)
 800571a:	2200      	movs	r2, #0
 800571c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800571e:	4b16      	ldr	r3, [pc, #88]	@ (8005778 <HAL_UART_MspInit+0xfc>)
 8005720:	2200      	movs	r2, #0
 8005722:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005724:	4b14      	ldr	r3, [pc, #80]	@ (8005778 <HAL_UART_MspInit+0xfc>)
 8005726:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800572a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800572c:	4b12      	ldr	r3, [pc, #72]	@ (8005778 <HAL_UART_MspInit+0xfc>)
 800572e:	2200      	movs	r2, #0
 8005730:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005732:	4b11      	ldr	r3, [pc, #68]	@ (8005778 <HAL_UART_MspInit+0xfc>)
 8005734:	2200      	movs	r2, #0
 8005736:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005738:	480f      	ldr	r0, [pc, #60]	@ (8005778 <HAL_UART_MspInit+0xfc>)
 800573a:	f000 ff3f 	bl	80065bc <HAL_DMA_Init>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005744:	f7fd fdca 	bl	80032dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a0b      	ldr	r2, [pc, #44]	@ (8005778 <HAL_UART_MspInit+0xfc>)
 800574c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800574e:	4a0a      	ldr	r2, [pc, #40]	@ (8005778 <HAL_UART_MspInit+0xfc>)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005754:	2200      	movs	r2, #0
 8005756:	2105      	movs	r1, #5
 8005758:	2026      	movs	r0, #38	@ 0x26
 800575a:	f000 fef8 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800575e:	2026      	movs	r0, #38	@ 0x26
 8005760:	f000 ff11 	bl	8006586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

	}
 8005764:	bf00      	nop
 8005766:	3728      	adds	r7, #40	@ 0x28
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40004400 	.word	0x40004400
 8005770:	40023800 	.word	0x40023800
 8005774:	40020c00 	.word	0x40020c00
 8005778:	20000c24 	.word	0x20000c24
 800577c:	40026088 	.word	0x40026088

08005780 <_write>:
  /* USER CODE END USART2_MspDeInit 1 */
  }

}

int _write(int file, char *ptr, int len){
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]


	//while(!UART_SendFlag);

	//UART_SendFlag=0;
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ptr, len);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	b29b      	uxth	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	4803      	ldr	r0, [pc, #12]	@ (80057a4 <_write+0x24>)
 8005796:	f005 f883 	bl	800a8a0 <HAL_UART_Transmit_DMA>

	return len;
 800579a:	687b      	ldr	r3, [r7, #4]

}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000bdc 	.word	0x20000bdc

080057a8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 80057a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80057e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80057ac:	f7ff fc92 	bl	80050d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80057b0:	480c      	ldr	r0, [pc, #48]	@ (80057e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80057b2:	490d      	ldr	r1, [pc, #52]	@ (80057e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80057b4:	4a0d      	ldr	r2, [pc, #52]	@ (80057ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80057b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057b8:	e002      	b.n	80057c0 <LoopCopyDataInit>

080057ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057be:	3304      	adds	r3, #4

080057c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057c4:	d3f9      	bcc.n	80057ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057c6:	4a0a      	ldr	r2, [pc, #40]	@ (80057f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80057c8:	4c0a      	ldr	r4, [pc, #40]	@ (80057f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80057ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057cc:	e001      	b.n	80057d2 <LoopFillZerobss>

080057ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057d0:	3204      	adds	r2, #4

080057d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057d4:	d3fb      	bcc.n	80057ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80057d6:	f00b f8c3 	bl	8010960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057da:	f7fd fcc5 	bl	8003168 <main>
  bx  lr    
 80057de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80057e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80057e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057e8:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 80057ec:	08015f18 	.word	0x08015f18
  ldr r2, =_sbss
 80057f0:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 80057f4:	20005724 	.word	0x20005724

080057f8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057f8:	e7fe      	b.n	80057f8 <CAN1_RX0_IRQHandler>
	...

080057fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005800:	4b0e      	ldr	r3, [pc, #56]	@ (800583c <HAL_Init+0x40>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a0d      	ldr	r2, [pc, #52]	@ (800583c <HAL_Init+0x40>)
 8005806:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800580a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800580c:	4b0b      	ldr	r3, [pc, #44]	@ (800583c <HAL_Init+0x40>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a0a      	ldr	r2, [pc, #40]	@ (800583c <HAL_Init+0x40>)
 8005812:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005818:	4b08      	ldr	r3, [pc, #32]	@ (800583c <HAL_Init+0x40>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a07      	ldr	r2, [pc, #28]	@ (800583c <HAL_Init+0x40>)
 800581e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005824:	2003      	movs	r0, #3
 8005826:	f000 fe87 	bl	8006538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800582a:	200f      	movs	r0, #15
 800582c:	f000 f808 	bl	8005840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005830:	f7ff faa6 	bl	8004d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40023c00 	.word	0x40023c00

08005840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005848:	4b12      	ldr	r3, [pc, #72]	@ (8005894 <HAL_InitTick+0x54>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	4b12      	ldr	r3, [pc, #72]	@ (8005898 <HAL_InitTick+0x58>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	4619      	mov	r1, r3
 8005852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005856:	fbb3 f3f1 	udiv	r3, r3, r1
 800585a:	fbb2 f3f3 	udiv	r3, r2, r3
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fe9f 	bl	80065a2 <HAL_SYSTICK_Config>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e00e      	b.n	800588c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b0f      	cmp	r3, #15
 8005872:	d80a      	bhi.n	800588a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005874:	2200      	movs	r2, #0
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	f04f 30ff 	mov.w	r0, #4294967295
 800587c:	f000 fe67 	bl	800654e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005880:	4a06      	ldr	r2, [pc, #24]	@ (800589c <HAL_InitTick+0x5c>)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	e000      	b.n	800588c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	200000a8 	.word	0x200000a8
 8005898:	200000b0 	.word	0x200000b0
 800589c:	200000ac 	.word	0x200000ac

080058a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058a4:	4b06      	ldr	r3, [pc, #24]	@ (80058c0 <HAL_IncTick+0x20>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	4b06      	ldr	r3, [pc, #24]	@ (80058c4 <HAL_IncTick+0x24>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4413      	add	r3, r2
 80058b0:	4a04      	ldr	r2, [pc, #16]	@ (80058c4 <HAL_IncTick+0x24>)
 80058b2:	6013      	str	r3, [r2, #0]
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	200000b0 	.word	0x200000b0
 80058c4:	20000c84 	.word	0x20000c84

080058c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  return uwTick;
 80058cc:	4b03      	ldr	r3, [pc, #12]	@ (80058dc <HAL_GetTick+0x14>)
 80058ce:	681b      	ldr	r3, [r3, #0]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	20000c84 	.word	0x20000c84

080058e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058e8:	f7ff ffee 	bl	80058c8 <HAL_GetTick>
 80058ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d005      	beq.n	8005906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005924 <HAL_Delay+0x44>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005906:	bf00      	nop
 8005908:	f7ff ffde 	bl	80058c8 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	429a      	cmp	r2, r3
 8005916:	d8f7      	bhi.n	8005908 <HAL_Delay+0x28>
  {
  }
}
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	200000b0 	.word	0x200000b0

08005928 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e033      	b.n	80059a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fc f990 	bl	8001c6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	d118      	bne.n	8005998 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800596e:	f023 0302 	bic.w	r3, r3, #2
 8005972:	f043 0202 	orr.w	r2, r3, #2
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fc06 	bl	800618c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598a:	f023 0303 	bic.w	r3, r3, #3
 800598e:	f043 0201 	orr.w	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	641a      	str	r2, [r3, #64]	@ 0x40
 8005996:	e001      	b.n	800599c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_ADC_Start+0x1a>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e0b2      	b.n	8005b30 <HAL_ADC_Start+0x180>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d018      	beq.n	8005a12 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0201 	orr.w	r2, r2, #1
 80059ee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80059f0:	4b52      	ldr	r3, [pc, #328]	@ (8005b3c <HAL_ADC_Start+0x18c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a52      	ldr	r2, [pc, #328]	@ (8005b40 <HAL_ADC_Start+0x190>)
 80059f6:	fba2 2303 	umull	r2, r3, r2, r3
 80059fa:	0c9a      	lsrs	r2, r3, #18
 80059fc:	4613      	mov	r3, r2
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	4413      	add	r3, r2
 8005a02:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005a04:	e002      	b.n	8005a0c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1f9      	bne.n	8005a06 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d17a      	bne.n	8005b16 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a24:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d007      	beq.n	8005a52 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005a4a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a5e:	d106      	bne.n	8005a6e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a64:	f023 0206 	bic.w	r2, r3, #6
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a6c:	e002      	b.n	8005a74 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a7c:	4b31      	ldr	r3, [pc, #196]	@ (8005b44 <HAL_ADC_Start+0x194>)
 8005a7e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005a88:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f003 031f 	and.w	r3, r3, #31
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d12a      	bne.n	8005aec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8005b48 <HAL_ADC_Start+0x198>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d015      	beq.n	8005acc <HAL_ADC_Start+0x11c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a29      	ldr	r2, [pc, #164]	@ (8005b4c <HAL_ADC_Start+0x19c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d105      	bne.n	8005ab6 <HAL_ADC_Start+0x106>
 8005aaa:	4b26      	ldr	r3, [pc, #152]	@ (8005b44 <HAL_ADC_Start+0x194>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f003 031f 	and.w	r3, r3, #31
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a25      	ldr	r2, [pc, #148]	@ (8005b50 <HAL_ADC_Start+0x1a0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d136      	bne.n	8005b2e <HAL_ADC_Start+0x17e>
 8005ac0:	4b20      	ldr	r3, [pc, #128]	@ (8005b44 <HAL_ADC_Start+0x194>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d130      	bne.n	8005b2e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d129      	bne.n	8005b2e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005ae8:	609a      	str	r2, [r3, #8]
 8005aea:	e020      	b.n	8005b2e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a15      	ldr	r2, [pc, #84]	@ (8005b48 <HAL_ADC_Start+0x198>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d11b      	bne.n	8005b2e <HAL_ADC_Start+0x17e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d114      	bne.n	8005b2e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005b12:	609a      	str	r2, [r3, #8]
 8005b14:	e00b      	b.n	8005b2e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1a:	f043 0210 	orr.w	r2, r3, #16
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b26:	f043 0201 	orr.w	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	200000a8 	.word	0x200000a8
 8005b40:	431bde83 	.word	0x431bde83
 8005b44:	40012300 	.word	0x40012300
 8005b48:	40012000 	.word	0x40012000
 8005b4c:	40012100 	.word	0x40012100
 8005b50:	40012200 	.word	0x40012200

08005b54 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_ADC_Stop+0x16>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e021      	b.n	8005bae <HAL_ADC_Stop+0x5a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d109      	bne.n	8005ba4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b94:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	f043 0201 	orr.w	r2, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd6:	d113      	bne.n	8005c00 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005be6:	d10b      	bne.n	8005c00 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bec:	f043 0220 	orr.w	r2, r3, #32
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e063      	b.n	8005cc8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c00:	f7ff fe62 	bl	80058c8 <HAL_GetTick>
 8005c04:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c06:	e021      	b.n	8005c4c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d01d      	beq.n	8005c4c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d007      	beq.n	8005c26 <HAL_ADC_PollForConversion+0x6c>
 8005c16:	f7ff fe57 	bl	80058c8 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d212      	bcs.n	8005c4c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d00b      	beq.n	8005c4c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c38:	f043 0204 	orr.w	r2, r3, #4
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e03d      	b.n	8005cc8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d1d6      	bne.n	8005c08 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f06f 0212 	mvn.w	r2, #18
 8005c62:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d123      	bne.n	8005cc6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d11f      	bne.n	8005cc6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d006      	beq.n	8005ca2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d111      	bne.n	8005cc6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d105      	bne.n	8005cc6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbe:	f043 0201 	orr.w	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d049      	beq.n	8005d9a <HAL_ADC_IRQHandler+0xca>
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d046      	beq.n	8005d9a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d10:	f003 0310 	and.w	r3, r3, #16
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d105      	bne.n	8005d24 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d12b      	bne.n	8005d8a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d127      	bne.n	8005d8a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d40:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d006      	beq.n	8005d56 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d119      	bne.n	8005d8a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0220 	bic.w	r2, r2, #32
 8005d64:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d105      	bne.n	8005d8a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	f043 0201 	orr.w	r2, r3, #1
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f8bd 	bl	8005f0a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0212 	mvn.w	r2, #18
 8005d98:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005da8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d057      	beq.n	8005e60 <HAL_ADC_IRQHandler+0x190>
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d054      	beq.n	8005e60 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d105      	bne.n	8005dce <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d139      	bne.n	8005e50 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d006      	beq.n	8005df8 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d12b      	bne.n	8005e50 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d124      	bne.n	8005e50 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d11d      	bne.n	8005e50 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d119      	bne.n	8005e50 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e2a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d105      	bne.n	8005e50 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e48:	f043 0201 	orr.w	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fa97 	bl	8006384 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f06f 020c 	mvn.w	r2, #12
 8005e5e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d017      	beq.n	8005ea6 <HAL_ADC_IRQHandler+0x1d6>
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d014      	beq.n	8005ea6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d10d      	bne.n	8005ea6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f841 	bl	8005f1e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0201 	mvn.w	r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005eb4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d015      	beq.n	8005ee8 <HAL_ADC_IRQHandler+0x218>
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d012      	beq.n	8005ee8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec6:	f043 0202 	orr.w	r2, r3, #2
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f06f 0220 	mvn.w	r2, #32
 8005ed6:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 f82a 	bl	8005f32 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f06f 0220 	mvn.w	r2, #32
 8005ee6:	601a      	str	r2, [r3, #0]
  }
}
 8005ee8:	bf00      	nop
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_ADC_ConfigChannel+0x1c>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e105      	b.n	8006170 <HAL_ADC_ConfigChannel+0x228>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b09      	cmp	r3, #9
 8005f72:	d925      	bls.n	8005fc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68d9      	ldr	r1, [r3, #12]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	4613      	mov	r3, r2
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	4413      	add	r3, r2
 8005f88:	3b1e      	subs	r3, #30
 8005f8a:	2207      	movs	r2, #7
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	43da      	mvns	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	400a      	ands	r2, r1
 8005f98:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68d9      	ldr	r1, [r3, #12]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	4618      	mov	r0, r3
 8005fac:	4603      	mov	r3, r0
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	4403      	add	r3, r0
 8005fb2:	3b1e      	subs	r3, #30
 8005fb4:	409a      	lsls	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	60da      	str	r2, [r3, #12]
 8005fbe:	e022      	b.n	8006006 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6919      	ldr	r1, [r3, #16]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4613      	mov	r3, r2
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	4413      	add	r3, r2
 8005fd4:	2207      	movs	r2, #7
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	43da      	mvns	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	400a      	ands	r2, r1
 8005fe2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6919      	ldr	r1, [r3, #16]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	4403      	add	r3, r0
 8005ffc:	409a      	lsls	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2b06      	cmp	r3, #6
 800600c:	d824      	bhi.n	8006058 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	3b05      	subs	r3, #5
 8006020:	221f      	movs	r2, #31
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
 8006026:	43da      	mvns	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	400a      	ands	r2, r1
 800602e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	4618      	mov	r0, r3
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	3b05      	subs	r3, #5
 800604a:	fa00 f203 	lsl.w	r2, r0, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	635a      	str	r2, [r3, #52]	@ 0x34
 8006056:	e04c      	b.n	80060f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b0c      	cmp	r3, #12
 800605e:	d824      	bhi.n	80060aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	3b23      	subs	r3, #35	@ 0x23
 8006072:	221f      	movs	r2, #31
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	43da      	mvns	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	400a      	ands	r2, r1
 8006080:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	4618      	mov	r0, r3
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	3b23      	subs	r3, #35	@ 0x23
 800609c:	fa00 f203 	lsl.w	r2, r0, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80060a8:	e023      	b.n	80060f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	3b41      	subs	r3, #65	@ 0x41
 80060bc:	221f      	movs	r2, #31
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	43da      	mvns	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	400a      	ands	r2, r1
 80060ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	4618      	mov	r0, r3
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	3b41      	subs	r3, #65	@ 0x41
 80060e6:	fa00 f203 	lsl.w	r2, r0, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060f2:	4b22      	ldr	r3, [pc, #136]	@ (800617c <HAL_ADC_ConfigChannel+0x234>)
 80060f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a21      	ldr	r2, [pc, #132]	@ (8006180 <HAL_ADC_ConfigChannel+0x238>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d109      	bne.n	8006114 <HAL_ADC_ConfigChannel+0x1cc>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b12      	cmp	r3, #18
 8006106:	d105      	bne.n	8006114 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a19      	ldr	r2, [pc, #100]	@ (8006180 <HAL_ADC_ConfigChannel+0x238>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d123      	bne.n	8006166 <HAL_ADC_ConfigChannel+0x21e>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b10      	cmp	r3, #16
 8006124:	d003      	beq.n	800612e <HAL_ADC_ConfigChannel+0x1e6>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b11      	cmp	r3, #17
 800612c:	d11b      	bne.n	8006166 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b10      	cmp	r3, #16
 8006140:	d111      	bne.n	8006166 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006142:	4b10      	ldr	r3, [pc, #64]	@ (8006184 <HAL_ADC_ConfigChannel+0x23c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a10      	ldr	r2, [pc, #64]	@ (8006188 <HAL_ADC_ConfigChannel+0x240>)
 8006148:	fba2 2303 	umull	r2, r3, r2, r3
 800614c:	0c9a      	lsrs	r2, r3, #18
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006158:	e002      	b.n	8006160 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	3b01      	subs	r3, #1
 800615e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f9      	bne.n	800615a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	40012300 	.word	0x40012300
 8006180:	40012000 	.word	0x40012000
 8006184:	200000a8 	.word	0x200000a8
 8006188:	431bde83 	.word	0x431bde83

0800618c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006194:	4b79      	ldr	r3, [pc, #484]	@ (800637c <ADC_Init+0x1f0>)
 8006196:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	431a      	orrs	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6859      	ldr	r1, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	021a      	lsls	r2, r3, #8
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80061e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6859      	ldr	r1, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6899      	ldr	r1, [r3, #8]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621e:	4a58      	ldr	r2, [pc, #352]	@ (8006380 <ADC_Init+0x1f4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d022      	beq.n	800626a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006232:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6899      	ldr	r1, [r3, #8]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6899      	ldr	r1, [r3, #8]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	609a      	str	r2, [r3, #8]
 8006268:	e00f      	b.n	800628a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006278:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006288:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 0202 	bic.w	r2, r2, #2
 8006298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6899      	ldr	r1, [r3, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7e1b      	ldrb	r3, [r3, #24]
 80062a4:	005a      	lsls	r2, r3, #1
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01b      	beq.n	80062f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80062d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6859      	ldr	r1, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e2:	3b01      	subs	r3, #1
 80062e4:	035a      	lsls	r2, r3, #13
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
 80062ee:	e007      	b.n	8006300 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800630e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	69db      	ldr	r3, [r3, #28]
 800631a:	3b01      	subs	r3, #1
 800631c:	051a      	lsls	r2, r3, #20
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6899      	ldr	r1, [r3, #8]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006342:	025a      	lsls	r2, r3, #9
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800635a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6899      	ldr	r1, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	029a      	lsls	r2, r3, #10
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	609a      	str	r2, [r3, #8]
}
 8006370:	bf00      	nop
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	40012300 	.word	0x40012300
 8006380:	0f000001 	.word	0x0f000001

08006384 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063a8:	4b0c      	ldr	r3, [pc, #48]	@ (80063dc <__NVIC_SetPriorityGrouping+0x44>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80063b4:	4013      	ands	r3, r2
 80063b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80063c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063ca:	4a04      	ldr	r2, [pc, #16]	@ (80063dc <__NVIC_SetPriorityGrouping+0x44>)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	60d3      	str	r3, [r2, #12]
}
 80063d0:	bf00      	nop
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	e000ed00 	.word	0xe000ed00

080063e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063e4:	4b04      	ldr	r3, [pc, #16]	@ (80063f8 <__NVIC_GetPriorityGrouping+0x18>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	0a1b      	lsrs	r3, r3, #8
 80063ea:	f003 0307 	and.w	r3, r3, #7
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	e000ed00 	.word	0xe000ed00

080063fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800640a:	2b00      	cmp	r3, #0
 800640c:	db0b      	blt.n	8006426 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	f003 021f 	and.w	r2, r3, #31
 8006414:	4907      	ldr	r1, [pc, #28]	@ (8006434 <__NVIC_EnableIRQ+0x38>)
 8006416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	2001      	movs	r0, #1
 800641e:	fa00 f202 	lsl.w	r2, r0, r2
 8006422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	e000e100 	.word	0xe000e100

08006438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	6039      	str	r1, [r7, #0]
 8006442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006448:	2b00      	cmp	r3, #0
 800644a:	db0a      	blt.n	8006462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	b2da      	uxtb	r2, r3
 8006450:	490c      	ldr	r1, [pc, #48]	@ (8006484 <__NVIC_SetPriority+0x4c>)
 8006452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006456:	0112      	lsls	r2, r2, #4
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	440b      	add	r3, r1
 800645c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006460:	e00a      	b.n	8006478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	b2da      	uxtb	r2, r3
 8006466:	4908      	ldr	r1, [pc, #32]	@ (8006488 <__NVIC_SetPriority+0x50>)
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	3b04      	subs	r3, #4
 8006470:	0112      	lsls	r2, r2, #4
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	440b      	add	r3, r1
 8006476:	761a      	strb	r2, [r3, #24]
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	e000e100 	.word	0xe000e100
 8006488:	e000ed00 	.word	0xe000ed00

0800648c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800648c:	b480      	push	{r7}
 800648e:	b089      	sub	sp, #36	@ 0x24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f003 0307 	and.w	r3, r3, #7
 800649e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f1c3 0307 	rsb	r3, r3, #7
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	bf28      	it	cs
 80064aa:	2304      	movcs	r3, #4
 80064ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	3304      	adds	r3, #4
 80064b2:	2b06      	cmp	r3, #6
 80064b4:	d902      	bls.n	80064bc <NVIC_EncodePriority+0x30>
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	3b03      	subs	r3, #3
 80064ba:	e000      	b.n	80064be <NVIC_EncodePriority+0x32>
 80064bc:	2300      	movs	r3, #0
 80064be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	43da      	mvns	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	401a      	ands	r2, r3
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064d4:	f04f 31ff 	mov.w	r1, #4294967295
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	fa01 f303 	lsl.w	r3, r1, r3
 80064de:	43d9      	mvns	r1, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064e4:	4313      	orrs	r3, r2
         );
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3724      	adds	r7, #36	@ 0x24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
	...

080064f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3b01      	subs	r3, #1
 8006500:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006504:	d301      	bcc.n	800650a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006506:	2301      	movs	r3, #1
 8006508:	e00f      	b.n	800652a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800650a:	4a0a      	ldr	r2, [pc, #40]	@ (8006534 <SysTick_Config+0x40>)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3b01      	subs	r3, #1
 8006510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006512:	210f      	movs	r1, #15
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
 8006518:	f7ff ff8e 	bl	8006438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800651c:	4b05      	ldr	r3, [pc, #20]	@ (8006534 <SysTick_Config+0x40>)
 800651e:	2200      	movs	r2, #0
 8006520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006522:	4b04      	ldr	r3, [pc, #16]	@ (8006534 <SysTick_Config+0x40>)
 8006524:	2207      	movs	r2, #7
 8006526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	e000e010 	.word	0xe000e010

08006538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff ff29 	bl	8006398 <__NVIC_SetPriorityGrouping>
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800654e:	b580      	push	{r7, lr}
 8006550:	b086      	sub	sp, #24
 8006552:	af00      	add	r7, sp, #0
 8006554:	4603      	mov	r3, r0
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006560:	f7ff ff3e 	bl	80063e0 <__NVIC_GetPriorityGrouping>
 8006564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	68b9      	ldr	r1, [r7, #8]
 800656a:	6978      	ldr	r0, [r7, #20]
 800656c:	f7ff ff8e 	bl	800648c <NVIC_EncodePriority>
 8006570:	4602      	mov	r2, r0
 8006572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006576:	4611      	mov	r1, r2
 8006578:	4618      	mov	r0, r3
 800657a:	f7ff ff5d 	bl	8006438 <__NVIC_SetPriority>
}
 800657e:	bf00      	nop
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b082      	sub	sp, #8
 800658a:	af00      	add	r7, sp, #0
 800658c:	4603      	mov	r3, r0
 800658e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006594:	4618      	mov	r0, r3
 8006596:	f7ff ff31 	bl	80063fc <__NVIC_EnableIRQ>
}
 800659a:	bf00      	nop
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b082      	sub	sp, #8
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff ffa2 	bl	80064f4 <SysTick_Config>
 80065b0:	4603      	mov	r3, r0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80065c8:	f7ff f97e 	bl	80058c8 <HAL_GetTick>
 80065cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e099      	b.n	800670c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0201 	bic.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065f8:	e00f      	b.n	800661a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065fa:	f7ff f965 	bl	80058c8 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b05      	cmp	r3, #5
 8006606:	d908      	bls.n	800661a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2203      	movs	r2, #3
 8006612:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e078      	b.n	800670c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e8      	bne.n	80065fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4b38      	ldr	r3, [pc, #224]	@ (8006714 <HAL_DMA_Init+0x158>)
 8006634:	4013      	ands	r3, r2
 8006636:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006646:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800665e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4313      	orrs	r3, r2
 800666a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006670:	2b04      	cmp	r3, #4
 8006672:	d107      	bne.n	8006684 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667c:	4313      	orrs	r3, r2
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f023 0307 	bic.w	r3, r3, #7
 800669a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d117      	bne.n	80066de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00e      	beq.n	80066de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fb0f 	bl	8006ce4 <DMA_CheckFifoParam>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d008      	beq.n	80066de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2240      	movs	r2, #64	@ 0x40
 80066d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80066da:	2301      	movs	r3, #1
 80066dc:	e016      	b.n	800670c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fac6 	bl	8006c78 <DMA_CalcBaseAndBitshift>
 80066ec:	4603      	mov	r3, r0
 80066ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f4:	223f      	movs	r2, #63	@ 0x3f
 80066f6:	409a      	lsls	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	f010803f 	.word	0xf010803f

08006718 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800672e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <HAL_DMA_Start_IT+0x26>
 800673a:	2302      	movs	r3, #2
 800673c:	e040      	b.n	80067c0 <HAL_DMA_Start_IT+0xa8>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b01      	cmp	r3, #1
 8006750:	d12f      	bne.n	80067b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2202      	movs	r2, #2
 8006756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 fa58 	bl	8006c1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006770:	223f      	movs	r2, #63	@ 0x3f
 8006772:	409a      	lsls	r2, r3
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0216 	orr.w	r2, r2, #22
 8006786:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0208 	orr.w	r2, r2, #8
 800679e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0201 	orr.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	e005      	b.n	80067be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80067ba:	2302      	movs	r3, #2
 80067bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80067be:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80067d6:	f7ff f877 	bl	80058c8 <HAL_GetTick>
 80067da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d008      	beq.n	80067fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2280      	movs	r2, #128	@ 0x80
 80067ec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e052      	b.n	80068a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0216 	bic.w	r2, r2, #22
 8006808:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695a      	ldr	r2, [r3, #20]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006818:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d103      	bne.n	800682a <HAL_DMA_Abort+0x62>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006826:	2b00      	cmp	r3, #0
 8006828:	d007      	beq.n	800683a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0208 	bic.w	r2, r2, #8
 8006838:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0201 	bic.w	r2, r2, #1
 8006848:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800684a:	e013      	b.n	8006874 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800684c:	f7ff f83c 	bl	80058c8 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b05      	cmp	r3, #5
 8006858:	d90c      	bls.n	8006874 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2203      	movs	r2, #3
 8006864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e015      	b.n	80068a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e4      	bne.n	800684c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006886:	223f      	movs	r2, #63	@ 0x3f
 8006888:	409a      	lsls	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d004      	beq.n	80068c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2280      	movs	r2, #128	@ 0x80
 80068c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e00c      	b.n	80068e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2205      	movs	r2, #5
 80068ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0201 	bic.w	r2, r2, #1
 80068dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80068f8:	4b8e      	ldr	r3, [pc, #568]	@ (8006b34 <HAL_DMA_IRQHandler+0x248>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a8e      	ldr	r2, [pc, #568]	@ (8006b38 <HAL_DMA_IRQHandler+0x24c>)
 80068fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006902:	0a9b      	lsrs	r3, r3, #10
 8006904:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006916:	2208      	movs	r2, #8
 8006918:	409a      	lsls	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4013      	ands	r3, r2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d01a      	beq.n	8006958 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0304 	and.w	r3, r3, #4
 800692c:	2b00      	cmp	r3, #0
 800692e:	d013      	beq.n	8006958 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0204 	bic.w	r2, r2, #4
 800693e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006944:	2208      	movs	r2, #8
 8006946:	409a      	lsls	r2, r3
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006950:	f043 0201 	orr.w	r2, r3, #1
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800695c:	2201      	movs	r2, #1
 800695e:	409a      	lsls	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4013      	ands	r3, r2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d012      	beq.n	800698e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00b      	beq.n	800698e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800697a:	2201      	movs	r2, #1
 800697c:	409a      	lsls	r2, r3
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006986:	f043 0202 	orr.w	r2, r3, #2
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006992:	2204      	movs	r2, #4
 8006994:	409a      	lsls	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4013      	ands	r3, r2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d012      	beq.n	80069c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b0:	2204      	movs	r2, #4
 80069b2:	409a      	lsls	r2, r3
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069bc:	f043 0204 	orr.w	r2, r3, #4
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069c8:	2210      	movs	r2, #16
 80069ca:	409a      	lsls	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4013      	ands	r3, r2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d043      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d03c      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e6:	2210      	movs	r2, #16
 80069e8:	409a      	lsls	r2, r3
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d018      	beq.n	8006a2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d108      	bne.n	8006a1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d024      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
 8006a1a:	e01f      	b.n	8006a5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01b      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	4798      	blx	r3
 8006a2c:	e016      	b.n	8006a5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d107      	bne.n	8006a4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0208 	bic.w	r2, r2, #8
 8006a4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a60:	2220      	movs	r2, #32
 8006a62:	409a      	lsls	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4013      	ands	r3, r2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 808f 	beq.w	8006b8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 8087 	beq.w	8006b8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a82:	2220      	movs	r2, #32
 8006a84:	409a      	lsls	r2, r3
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b05      	cmp	r3, #5
 8006a94:	d136      	bne.n	8006b04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0216 	bic.w	r2, r2, #22
 8006aa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695a      	ldr	r2, [r3, #20]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ab4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d103      	bne.n	8006ac6 <HAL_DMA_IRQHandler+0x1da>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d007      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 0208 	bic.w	r2, r2, #8
 8006ad4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ada:	223f      	movs	r2, #63	@ 0x3f
 8006adc:	409a      	lsls	r2, r3
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d07e      	beq.n	8006bf8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	4798      	blx	r3
        }
        return;
 8006b02:	e079      	b.n	8006bf8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d01d      	beq.n	8006b4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10d      	bne.n	8006b3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d031      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	4798      	blx	r3
 8006b30:	e02c      	b.n	8006b8c <HAL_DMA_IRQHandler+0x2a0>
 8006b32:	bf00      	nop
 8006b34:	200000a8 	.word	0x200000a8
 8006b38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d023      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	4798      	blx	r3
 8006b4c:	e01e      	b.n	8006b8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10f      	bne.n	8006b7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0210 	bic.w	r2, r2, #16
 8006b6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d032      	beq.n	8006bfa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d022      	beq.n	8006be6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2205      	movs	r2, #5
 8006ba4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d307      	bcc.n	8006bd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f2      	bne.n	8006bb8 <HAL_DMA_IRQHandler+0x2cc>
 8006bd2:	e000      	b.n	8006bd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006bd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d005      	beq.n	8006bfa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	4798      	blx	r3
 8006bf6:	e000      	b.n	8006bfa <HAL_DMA_IRQHandler+0x30e>
        return;
 8006bf8:	bf00      	nop
    }
  }
}
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c0e:	b2db      	uxtb	r3, r3
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006c38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	2b40      	cmp	r3, #64	@ 0x40
 8006c48:	d108      	bne.n	8006c5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c5a:	e007      	b.n	8006c6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	60da      	str	r2, [r3, #12]
}
 8006c6c:	bf00      	nop
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	3b10      	subs	r3, #16
 8006c88:	4a14      	ldr	r2, [pc, #80]	@ (8006cdc <DMA_CalcBaseAndBitshift+0x64>)
 8006c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8e:	091b      	lsrs	r3, r3, #4
 8006c90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c92:	4a13      	ldr	r2, [pc, #76]	@ (8006ce0 <DMA_CalcBaseAndBitshift+0x68>)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4413      	add	r3, r2
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d909      	bls.n	8006cba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006cae:	f023 0303 	bic.w	r3, r3, #3
 8006cb2:	1d1a      	adds	r2, r3, #4
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	659a      	str	r2, [r3, #88]	@ 0x58
 8006cb8:	e007      	b.n	8006cca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006cc2:	f023 0303 	bic.w	r3, r3, #3
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	aaaaaaab 	.word	0xaaaaaaab
 8006ce0:	08015a08 	.word	0x08015a08

08006ce4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d11f      	bne.n	8006d3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d856      	bhi.n	8006db2 <DMA_CheckFifoParam+0xce>
 8006d04:	a201      	add	r2, pc, #4	@ (adr r2, 8006d0c <DMA_CheckFifoParam+0x28>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d1d 	.word	0x08006d1d
 8006d10:	08006d2f 	.word	0x08006d2f
 8006d14:	08006d1d 	.word	0x08006d1d
 8006d18:	08006db3 	.word	0x08006db3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d046      	beq.n	8006db6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d2c:	e043      	b.n	8006db6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d36:	d140      	bne.n	8006dba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d3c:	e03d      	b.n	8006dba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d46:	d121      	bne.n	8006d8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d837      	bhi.n	8006dbe <DMA_CheckFifoParam+0xda>
 8006d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d54 <DMA_CheckFifoParam+0x70>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d65 	.word	0x08006d65
 8006d58:	08006d6b 	.word	0x08006d6b
 8006d5c:	08006d65 	.word	0x08006d65
 8006d60:	08006d7d 	.word	0x08006d7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	73fb      	strb	r3, [r7, #15]
      break;
 8006d68:	e030      	b.n	8006dcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d025      	beq.n	8006dc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d7a:	e022      	b.n	8006dc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d84:	d11f      	bne.n	8006dc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d8a:	e01c      	b.n	8006dc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d903      	bls.n	8006d9a <DMA_CheckFifoParam+0xb6>
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d003      	beq.n	8006da0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d98:	e018      	b.n	8006dcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d9e:	e015      	b.n	8006dcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00e      	beq.n	8006dca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	73fb      	strb	r3, [r7, #15]
      break;
 8006db0:	e00b      	b.n	8006dca <DMA_CheckFifoParam+0xe6>
      break;
 8006db2:	bf00      	nop
 8006db4:	e00a      	b.n	8006dcc <DMA_CheckFifoParam+0xe8>
      break;
 8006db6:	bf00      	nop
 8006db8:	e008      	b.n	8006dcc <DMA_CheckFifoParam+0xe8>
      break;
 8006dba:	bf00      	nop
 8006dbc:	e006      	b.n	8006dcc <DMA_CheckFifoParam+0xe8>
      break;
 8006dbe:	bf00      	nop
 8006dc0:	e004      	b.n	8006dcc <DMA_CheckFifoParam+0xe8>
      break;
 8006dc2:	bf00      	nop
 8006dc4:	e002      	b.n	8006dcc <DMA_CheckFifoParam+0xe8>
      break;   
 8006dc6:	bf00      	nop
 8006dc8:	e000      	b.n	8006dcc <DMA_CheckFifoParam+0xe8>
      break;
 8006dca:	bf00      	nop
    }
  } 
  
  return status; 
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3714      	adds	r7, #20
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop

08006ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b089      	sub	sp, #36	@ 0x24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006df2:	2300      	movs	r3, #0
 8006df4:	61fb      	str	r3, [r7, #28]
 8006df6:	e16b      	b.n	80070d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006df8:	2201      	movs	r2, #1
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	f040 815a 	bne.w	80070ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d005      	beq.n	8006e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d130      	bne.n	8006e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	2203      	movs	r2, #3
 8006e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3e:	43db      	mvns	r3, r3
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	4013      	ands	r3, r2
 8006e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e64:	2201      	movs	r2, #1
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	4013      	ands	r3, r2
 8006e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	091b      	lsrs	r3, r3, #4
 8006e7a:	f003 0201 	and.w	r2, r3, #1
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	fa02 f303 	lsl.w	r3, r2, r3
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d017      	beq.n	8006ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	2203      	movs	r2, #3
 8006ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eac:	43db      	mvns	r3, r3
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f003 0303 	and.w	r3, r3, #3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d123      	bne.n	8006f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	08da      	lsrs	r2, r3, #3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3208      	adds	r2, #8
 8006ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	f003 0307 	and.w	r3, r3, #7
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	220f      	movs	r2, #15
 8006ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	691a      	ldr	r2, [r3, #16]
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	f003 0307 	and.w	r3, r3, #7
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	08da      	lsrs	r2, r3, #3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3208      	adds	r2, #8
 8006f1a:	69b9      	ldr	r1, [r7, #24]
 8006f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	2203      	movs	r2, #3
 8006f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f30:	43db      	mvns	r3, r3
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	4013      	ands	r3, r2
 8006f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f003 0203 	and.w	r2, r3, #3
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 80b4 	beq.w	80070ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	4b60      	ldr	r3, [pc, #384]	@ (80070e8 <HAL_GPIO_Init+0x30c>)
 8006f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6a:	4a5f      	ldr	r2, [pc, #380]	@ (80070e8 <HAL_GPIO_Init+0x30c>)
 8006f6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f72:	4b5d      	ldr	r3, [pc, #372]	@ (80070e8 <HAL_GPIO_Init+0x30c>)
 8006f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f7e:	4a5b      	ldr	r2, [pc, #364]	@ (80070ec <HAL_GPIO_Init+0x310>)
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	089b      	lsrs	r3, r3, #2
 8006f84:	3302      	adds	r3, #2
 8006f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	220f      	movs	r2, #15
 8006f96:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9a:	43db      	mvns	r3, r3
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a52      	ldr	r2, [pc, #328]	@ (80070f0 <HAL_GPIO_Init+0x314>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d02b      	beq.n	8007002 <HAL_GPIO_Init+0x226>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a51      	ldr	r2, [pc, #324]	@ (80070f4 <HAL_GPIO_Init+0x318>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d025      	beq.n	8006ffe <HAL_GPIO_Init+0x222>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a50      	ldr	r2, [pc, #320]	@ (80070f8 <HAL_GPIO_Init+0x31c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d01f      	beq.n	8006ffa <HAL_GPIO_Init+0x21e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a4f      	ldr	r2, [pc, #316]	@ (80070fc <HAL_GPIO_Init+0x320>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d019      	beq.n	8006ff6 <HAL_GPIO_Init+0x21a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a4e      	ldr	r2, [pc, #312]	@ (8007100 <HAL_GPIO_Init+0x324>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d013      	beq.n	8006ff2 <HAL_GPIO_Init+0x216>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a4d      	ldr	r2, [pc, #308]	@ (8007104 <HAL_GPIO_Init+0x328>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00d      	beq.n	8006fee <HAL_GPIO_Init+0x212>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a4c      	ldr	r2, [pc, #304]	@ (8007108 <HAL_GPIO_Init+0x32c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d007      	beq.n	8006fea <HAL_GPIO_Init+0x20e>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a4b      	ldr	r2, [pc, #300]	@ (800710c <HAL_GPIO_Init+0x330>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d101      	bne.n	8006fe6 <HAL_GPIO_Init+0x20a>
 8006fe2:	2307      	movs	r3, #7
 8006fe4:	e00e      	b.n	8007004 <HAL_GPIO_Init+0x228>
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	e00c      	b.n	8007004 <HAL_GPIO_Init+0x228>
 8006fea:	2306      	movs	r3, #6
 8006fec:	e00a      	b.n	8007004 <HAL_GPIO_Init+0x228>
 8006fee:	2305      	movs	r3, #5
 8006ff0:	e008      	b.n	8007004 <HAL_GPIO_Init+0x228>
 8006ff2:	2304      	movs	r3, #4
 8006ff4:	e006      	b.n	8007004 <HAL_GPIO_Init+0x228>
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e004      	b.n	8007004 <HAL_GPIO_Init+0x228>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	e002      	b.n	8007004 <HAL_GPIO_Init+0x228>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <HAL_GPIO_Init+0x228>
 8007002:	2300      	movs	r3, #0
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	f002 0203 	and.w	r2, r2, #3
 800700a:	0092      	lsls	r2, r2, #2
 800700c:	4093      	lsls	r3, r2
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	4313      	orrs	r3, r2
 8007012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007014:	4935      	ldr	r1, [pc, #212]	@ (80070ec <HAL_GPIO_Init+0x310>)
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	089b      	lsrs	r3, r3, #2
 800701a:	3302      	adds	r3, #2
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007022:	4b3b      	ldr	r3, [pc, #236]	@ (8007110 <HAL_GPIO_Init+0x334>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	43db      	mvns	r3, r3
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	4013      	ands	r3, r2
 8007030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	4313      	orrs	r3, r2
 8007044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007046:	4a32      	ldr	r2, [pc, #200]	@ (8007110 <HAL_GPIO_Init+0x334>)
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800704c:	4b30      	ldr	r3, [pc, #192]	@ (8007110 <HAL_GPIO_Init+0x334>)
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	43db      	mvns	r3, r3
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	4013      	ands	r3, r2
 800705a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d003      	beq.n	8007070 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	4313      	orrs	r3, r2
 800706e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007070:	4a27      	ldr	r2, [pc, #156]	@ (8007110 <HAL_GPIO_Init+0x334>)
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007076:	4b26      	ldr	r3, [pc, #152]	@ (8007110 <HAL_GPIO_Init+0x334>)
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	43db      	mvns	r3, r3
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	4013      	ands	r3, r2
 8007084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	4313      	orrs	r3, r2
 8007098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800709a:	4a1d      	ldr	r2, [pc, #116]	@ (8007110 <HAL_GPIO_Init+0x334>)
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80070a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007110 <HAL_GPIO_Init+0x334>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	43db      	mvns	r3, r3
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	4013      	ands	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d003      	beq.n	80070c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070c4:	4a12      	ldr	r2, [pc, #72]	@ (8007110 <HAL_GPIO_Init+0x334>)
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	3301      	adds	r3, #1
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	2b0f      	cmp	r3, #15
 80070d4:	f67f ae90 	bls.w	8006df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	3724      	adds	r7, #36	@ 0x24
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	40023800 	.word	0x40023800
 80070ec:	40013800 	.word	0x40013800
 80070f0:	40020000 	.word	0x40020000
 80070f4:	40020400 	.word	0x40020400
 80070f8:	40020800 	.word	0x40020800
 80070fc:	40020c00 	.word	0x40020c00
 8007100:	40021000 	.word	0x40021000
 8007104:	40021400 	.word	0x40021400
 8007108:	40021800 	.word	0x40021800
 800710c:	40021c00 	.word	0x40021c00
 8007110:	40013c00 	.word	0x40013c00

08007114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691a      	ldr	r2, [r3, #16]
 8007124:	887b      	ldrh	r3, [r7, #2]
 8007126:	4013      	ands	r3, r2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800712c:	2301      	movs	r3, #1
 800712e:	73fb      	strb	r3, [r7, #15]
 8007130:	e001      	b.n	8007136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007136:	7bfb      	ldrb	r3, [r7, #15]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	807b      	strh	r3, [r7, #2]
 8007150:	4613      	mov	r3, r2
 8007152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007154:	787b      	ldrb	r3, [r7, #1]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800715a:	887a      	ldrh	r2, [r7, #2]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007160:	e003      	b.n	800716a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007162:	887b      	ldrh	r3, [r7, #2]
 8007164:	041a      	lsls	r2, r3, #16
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	619a      	str	r2, [r3, #24]
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007176:	b480      	push	{r7}
 8007178:	b085      	sub	sp, #20
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007188:	887a      	ldrh	r2, [r7, #2]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4013      	ands	r3, r2
 800718e:	041a      	lsls	r2, r3, #16
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	43d9      	mvns	r1, r3
 8007194:	887b      	ldrh	r3, [r7, #2]
 8007196:	400b      	ands	r3, r1
 8007198:	431a      	orrs	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	619a      	str	r2, [r3, #24]
}
 800719e:	bf00      	nop
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
	...

080071ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80071b6:	4b08      	ldr	r3, [pc, #32]	@ (80071d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071b8:	695a      	ldr	r2, [r3, #20]
 80071ba:	88fb      	ldrh	r3, [r7, #6]
 80071bc:	4013      	ands	r3, r2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d006      	beq.n	80071d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071c2:	4a05      	ldr	r2, [pc, #20]	@ (80071d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071c4:	88fb      	ldrh	r3, [r7, #6]
 80071c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071c8:	88fb      	ldrh	r3, [r7, #6]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fd f984 	bl	80044d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40013c00 	.word	0x40013c00

080071dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e12b      	b.n	8007446 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fb fe6c 	bl	8002ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2224      	movs	r2, #36	@ 0x24
 800720c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 0201 	bic.w	r2, r2, #1
 800721e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800722e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800723e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007240:	f002 fddc 	bl	8009dfc <HAL_RCC_GetPCLK1Freq>
 8007244:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	4a81      	ldr	r2, [pc, #516]	@ (8007450 <HAL_I2C_Init+0x274>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d807      	bhi.n	8007260 <HAL_I2C_Init+0x84>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4a80      	ldr	r2, [pc, #512]	@ (8007454 <HAL_I2C_Init+0x278>)
 8007254:	4293      	cmp	r3, r2
 8007256:	bf94      	ite	ls
 8007258:	2301      	movls	r3, #1
 800725a:	2300      	movhi	r3, #0
 800725c:	b2db      	uxtb	r3, r3
 800725e:	e006      	b.n	800726e <HAL_I2C_Init+0x92>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4a7d      	ldr	r2, [pc, #500]	@ (8007458 <HAL_I2C_Init+0x27c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	bf94      	ite	ls
 8007268:	2301      	movls	r3, #1
 800726a:	2300      	movhi	r3, #0
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e0e7      	b.n	8007446 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4a78      	ldr	r2, [pc, #480]	@ (800745c <HAL_I2C_Init+0x280>)
 800727a:	fba2 2303 	umull	r2, r3, r2, r3
 800727e:	0c9b      	lsrs	r3, r3, #18
 8007280:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	430a      	orrs	r2, r1
 8007294:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	4a6a      	ldr	r2, [pc, #424]	@ (8007450 <HAL_I2C_Init+0x274>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d802      	bhi.n	80072b0 <HAL_I2C_Init+0xd4>
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	3301      	adds	r3, #1
 80072ae:	e009      	b.n	80072c4 <HAL_I2C_Init+0xe8>
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80072b6:	fb02 f303 	mul.w	r3, r2, r3
 80072ba:	4a69      	ldr	r2, [pc, #420]	@ (8007460 <HAL_I2C_Init+0x284>)
 80072bc:	fba2 2303 	umull	r2, r3, r2, r3
 80072c0:	099b      	lsrs	r3, r3, #6
 80072c2:	3301      	adds	r3, #1
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	430b      	orrs	r3, r1
 80072ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80072d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	495c      	ldr	r1, [pc, #368]	@ (8007450 <HAL_I2C_Init+0x274>)
 80072e0:	428b      	cmp	r3, r1
 80072e2:	d819      	bhi.n	8007318 <HAL_I2C_Init+0x13c>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	1e59      	subs	r1, r3, #1
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80072f2:	1c59      	adds	r1, r3, #1
 80072f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80072f8:	400b      	ands	r3, r1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <HAL_I2C_Init+0x138>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	1e59      	subs	r1, r3, #1
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	fbb1 f3f3 	udiv	r3, r1, r3
 800730c:	3301      	adds	r3, #1
 800730e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007312:	e051      	b.n	80073b8 <HAL_I2C_Init+0x1dc>
 8007314:	2304      	movs	r3, #4
 8007316:	e04f      	b.n	80073b8 <HAL_I2C_Init+0x1dc>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d111      	bne.n	8007344 <HAL_I2C_Init+0x168>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	1e58      	subs	r0, r3, #1
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6859      	ldr	r1, [r3, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	440b      	add	r3, r1
 800732e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007332:	3301      	adds	r3, #1
 8007334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007338:	2b00      	cmp	r3, #0
 800733a:	bf0c      	ite	eq
 800733c:	2301      	moveq	r3, #1
 800733e:	2300      	movne	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	e012      	b.n	800736a <HAL_I2C_Init+0x18e>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	1e58      	subs	r0, r3, #1
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6859      	ldr	r1, [r3, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	0099      	lsls	r1, r3, #2
 8007354:	440b      	add	r3, r1
 8007356:	fbb0 f3f3 	udiv	r3, r0, r3
 800735a:	3301      	adds	r3, #1
 800735c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007360:	2b00      	cmp	r3, #0
 8007362:	bf0c      	ite	eq
 8007364:	2301      	moveq	r3, #1
 8007366:	2300      	movne	r3, #0
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <HAL_I2C_Init+0x196>
 800736e:	2301      	movs	r3, #1
 8007370:	e022      	b.n	80073b8 <HAL_I2C_Init+0x1dc>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10e      	bne.n	8007398 <HAL_I2C_Init+0x1bc>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	1e58      	subs	r0, r3, #1
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6859      	ldr	r1, [r3, #4]
 8007382:	460b      	mov	r3, r1
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	440b      	add	r3, r1
 8007388:	fbb0 f3f3 	udiv	r3, r0, r3
 800738c:	3301      	adds	r3, #1
 800738e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007396:	e00f      	b.n	80073b8 <HAL_I2C_Init+0x1dc>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	1e58      	subs	r0, r3, #1
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6859      	ldr	r1, [r3, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	440b      	add	r3, r1
 80073a6:	0099      	lsls	r1, r3, #2
 80073a8:	440b      	add	r3, r1
 80073aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80073ae:	3301      	adds	r3, #1
 80073b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073b8:	6879      	ldr	r1, [r7, #4]
 80073ba:	6809      	ldr	r1, [r1, #0]
 80073bc:	4313      	orrs	r3, r2
 80073be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69da      	ldr	r2, [r3, #28]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80073e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6911      	ldr	r1, [r2, #16]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	68d2      	ldr	r2, [r2, #12]
 80073f2:	4311      	orrs	r1, r2
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	6812      	ldr	r2, [r2, #0]
 80073f8:	430b      	orrs	r3, r1
 80073fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695a      	ldr	r2, [r3, #20]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0201 	orr.w	r2, r2, #1
 8007426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	000186a0 	.word	0x000186a0
 8007454:	001e847f 	.word	0x001e847f
 8007458:	003d08ff 	.word	0x003d08ff
 800745c:	431bde83 	.word	0x431bde83
 8007460:	10624dd3 	.word	0x10624dd3

08007464 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007476:	2b80      	cmp	r3, #128	@ 0x80
 8007478:	d103      	bne.n	8007482 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2200      	movs	r2, #0
 8007480:	611a      	str	r2, [r3, #16]
  }
}
 8007482:	bf00      	nop
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
	...

08007490 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af02      	add	r7, sp, #8
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	461a      	mov	r2, r3
 800749c:	460b      	mov	r3, r1
 800749e:	817b      	strh	r3, [r7, #10]
 80074a0:	4613      	mov	r3, r2
 80074a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80074a4:	f7fe fa10 	bl	80058c8 <HAL_GetTick>
 80074a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	f040 80e0 	bne.w	8007678 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	2319      	movs	r3, #25
 80074be:	2201      	movs	r2, #1
 80074c0:	4970      	ldr	r1, [pc, #448]	@ (8007684 <HAL_I2C_Master_Transmit+0x1f4>)
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f001 fdea 	bl	800909c <I2C_WaitOnFlagUntilTimeout>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80074ce:	2302      	movs	r3, #2
 80074d0:	e0d3      	b.n	800767a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d101      	bne.n	80074e0 <HAL_I2C_Master_Transmit+0x50>
 80074dc:	2302      	movs	r3, #2
 80074de:	e0cc      	b.n	800767a <HAL_I2C_Master_Transmit+0x1ea>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d007      	beq.n	8007506 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f042 0201 	orr.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007514:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2221      	movs	r2, #33	@ 0x21
 800751a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2210      	movs	r2, #16
 8007522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	893a      	ldrh	r2, [r7, #8]
 8007536:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4a50      	ldr	r2, [pc, #320]	@ (8007688 <HAL_I2C_Master_Transmit+0x1f8>)
 8007546:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007548:	8979      	ldrh	r1, [r7, #10]
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	6a3a      	ldr	r2, [r7, #32]
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f001 fc7a 	bl	8008e48 <I2C_MasterRequestWrite>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e08d      	b.n	800767a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800755e:	2300      	movs	r3, #0
 8007560:	613b      	str	r3, [r7, #16]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	613b      	str	r3, [r7, #16]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	613b      	str	r3, [r7, #16]
 8007572:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007574:	e066      	b.n	8007644 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	6a39      	ldr	r1, [r7, #32]
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f001 fea8 	bl	80092d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00d      	beq.n	80075a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758a:	2b04      	cmp	r3, #4
 800758c:	d107      	bne.n	800759e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800759c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e06b      	b.n	800767a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a6:	781a      	ldrb	r2, [r3, #0]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075bc:	b29b      	uxth	r3, r3
 80075be:	3b01      	subs	r3, #1
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	f003 0304 	and.w	r3, r3, #4
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d11b      	bne.n	8007618 <HAL_I2C_Master_Transmit+0x188>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d017      	beq.n	8007618 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ec:	781a      	ldrb	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f8:	1c5a      	adds	r2, r3, #1
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007602:	b29b      	uxth	r3, r3
 8007604:	3b01      	subs	r3, #1
 8007606:	b29a      	uxth	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007610:	3b01      	subs	r3, #1
 8007612:	b29a      	uxth	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	6a39      	ldr	r1, [r7, #32]
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f001 fe9f 	bl	8009360 <I2C_WaitOnBTFFlagUntilTimeout>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00d      	beq.n	8007644 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762c:	2b04      	cmp	r3, #4
 800762e:	d107      	bne.n	8007640 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800763e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e01a      	b.n	800767a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007648:	2b00      	cmp	r3, #0
 800764a:	d194      	bne.n	8007576 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800765a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2220      	movs	r2, #32
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	e000      	b.n	800767a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007678:	2302      	movs	r3, #2
  }
}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	00100002 	.word	0x00100002
 8007688:	ffff0000 	.word	0xffff0000

0800768c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	2b10      	cmp	r3, #16
 80076ba:	d003      	beq.n	80076c4 <HAL_I2C_EV_IRQHandler+0x38>
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
 80076be:	2b40      	cmp	r3, #64	@ 0x40
 80076c0:	f040 80b1 	bne.w	8007826 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10d      	bne.n	80076fa <HAL_I2C_EV_IRQHandler+0x6e>
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80076e4:	d003      	beq.n	80076ee <HAL_I2C_EV_IRQHandler+0x62>
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80076ec:	d101      	bne.n	80076f2 <HAL_I2C_EV_IRQHandler+0x66>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <HAL_I2C_EV_IRQHandler+0x68>
 80076f2:	2300      	movs	r3, #0
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	f000 8114 	beq.w	8007922 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <HAL_I2C_EV_IRQHandler+0x90>
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800770a:	2b00      	cmp	r3, #0
 800770c:	d006      	beq.n	800771c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 fecf 	bl	80094b2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fd7a 	bl	800820e <I2C_Master_SB>
 800771a:	e083      	b.n	8007824 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d008      	beq.n	8007738 <HAL_I2C_EV_IRQHandler+0xac>
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fdf2 	bl	800831a <I2C_Master_ADD10>
 8007736:	e075      	b.n	8007824 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d008      	beq.n	8007754 <HAL_I2C_EV_IRQHandler+0xc8>
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fe0e 	bl	800836e <I2C_Master_ADDR>
 8007752:	e067      	b.n	8007824 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	f003 0304 	and.w	r3, r3, #4
 800775a:	2b00      	cmp	r3, #0
 800775c:	d036      	beq.n	80077cc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800776c:	f000 80db 	beq.w	8007926 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00d      	beq.n	8007796 <HAL_I2C_EV_IRQHandler+0x10a>
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007780:	2b00      	cmp	r3, #0
 8007782:	d008      	beq.n	8007796 <HAL_I2C_EV_IRQHandler+0x10a>
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	2b00      	cmp	r3, #0
 800778c:	d103      	bne.n	8007796 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f9d6 	bl	8007b40 <I2C_MasterTransmit_TXE>
 8007794:	e046      	b.n	8007824 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 80c2 	beq.w	8007926 <HAL_I2C_EV_IRQHandler+0x29a>
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 80bc 	beq.w	8007926 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	2b21      	cmp	r3, #33	@ 0x21
 80077b2:	d103      	bne.n	80077bc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fa5f 	bl	8007c78 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077ba:	e0b4      	b.n	8007926 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	2b40      	cmp	r3, #64	@ 0x40
 80077c0:	f040 80b1 	bne.w	8007926 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 facd 	bl	8007d64 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80077ca:	e0ac      	b.n	8007926 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077da:	f000 80a4 	beq.w	8007926 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00d      	beq.n	8007804 <HAL_I2C_EV_IRQHandler+0x178>
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d008      	beq.n	8007804 <HAL_I2C_EV_IRQHandler+0x178>
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d103      	bne.n	8007804 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fb49 	bl	8007e94 <I2C_MasterReceive_RXNE>
 8007802:	e00f      	b.n	8007824 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	f003 0304 	and.w	r3, r3, #4
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 808b 	beq.w	8007926 <HAL_I2C_EV_IRQHandler+0x29a>
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8085 	beq.w	8007926 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fc01 	bl	8008024 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007822:	e080      	b.n	8007926 <HAL_I2C_EV_IRQHandler+0x29a>
 8007824:	e07f      	b.n	8007926 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	d004      	beq.n	8007838 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	61fb      	str	r3, [r7, #28]
 8007836:	e007      	b.n	8007848 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d011      	beq.n	8007876 <HAL_I2C_EV_IRQHandler+0x1ea>
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00c      	beq.n	8007876 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800786c:	69b9      	ldr	r1, [r7, #24]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 ffcc 	bl	800880c <I2C_Slave_ADDR>
 8007874:	e05a      	b.n	800792c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	2b00      	cmp	r3, #0
 800787e:	d008      	beq.n	8007892 <HAL_I2C_EV_IRQHandler+0x206>
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f001 f806 	bl	800889c <I2C_Slave_STOPF>
 8007890:	e04c      	b.n	800792c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007892:	7bbb      	ldrb	r3, [r7, #14]
 8007894:	2b21      	cmp	r3, #33	@ 0x21
 8007896:	d002      	beq.n	800789e <HAL_I2C_EV_IRQHandler+0x212>
 8007898:	7bbb      	ldrb	r3, [r7, #14]
 800789a:	2b29      	cmp	r3, #41	@ 0x29
 800789c:	d120      	bne.n	80078e0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00d      	beq.n	80078c4 <HAL_I2C_EV_IRQHandler+0x238>
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d008      	beq.n	80078c4 <HAL_I2C_EV_IRQHandler+0x238>
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d103      	bne.n	80078c4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fee7 	bl	8008690 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078c2:	e032      	b.n	800792a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d02d      	beq.n	800792a <HAL_I2C_EV_IRQHandler+0x29e>
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d028      	beq.n	800792a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 ff16 	bl	800870a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078de:	e024      	b.n	800792a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00d      	beq.n	8007906 <HAL_I2C_EV_IRQHandler+0x27a>
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d008      	beq.n	8007906 <HAL_I2C_EV_IRQHandler+0x27a>
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d103      	bne.n	8007906 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 ff24 	bl	800874c <I2C_SlaveReceive_RXNE>
 8007904:	e012      	b.n	800792c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	f003 0304 	and.w	r3, r3, #4
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00d      	beq.n	800792c <HAL_I2C_EV_IRQHandler+0x2a0>
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007916:	2b00      	cmp	r3, #0
 8007918:	d008      	beq.n	800792c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 ff54 	bl	80087c8 <I2C_SlaveReceive_BTF>
 8007920:	e004      	b.n	800792c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8007922:	bf00      	nop
 8007924:	e002      	b.n	800792c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007926:	bf00      	nop
 8007928:	e000      	b.n	800792c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800792a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800792c:	3720      	adds	r7, #32
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b08a      	sub	sp, #40	@ 0x28
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800794a:	2300      	movs	r3, #0
 800794c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007954:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00d      	beq.n	800797c <HAL_I2C_ER_IRQHandler+0x4a>
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007966:	2b00      	cmp	r3, #0
 8007968:	d008      	beq.n	800797c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800796a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796c:	f043 0301 	orr.w	r3, r3, #1
 8007970:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800797a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00d      	beq.n	80079a2 <HAL_I2C_ER_IRQHandler+0x70>
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800798c:	2b00      	cmp	r3, #0
 800798e:	d008      	beq.n	80079a2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007992:	f043 0302 	orr.w	r3, r3, #2
 8007996:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80079a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d03e      	beq.n	8007a2a <HAL_I2C_ER_IRQHandler+0xf8>
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d039      	beq.n	8007a2a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80079b6:	7efb      	ldrb	r3, [r7, #27]
 80079b8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079be:	b29b      	uxth	r3, r3
 80079c0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079c8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ce:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80079d0:	7ebb      	ldrb	r3, [r7, #26]
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	d112      	bne.n	80079fc <HAL_I2C_ER_IRQHandler+0xca>
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10f      	bne.n	80079fc <HAL_I2C_ER_IRQHandler+0xca>
 80079dc:	7cfb      	ldrb	r3, [r7, #19]
 80079de:	2b21      	cmp	r3, #33	@ 0x21
 80079e0:	d008      	beq.n	80079f4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80079e2:	7cfb      	ldrb	r3, [r7, #19]
 80079e4:	2b29      	cmp	r3, #41	@ 0x29
 80079e6:	d005      	beq.n	80079f4 <HAL_I2C_ER_IRQHandler+0xc2>
 80079e8:	7cfb      	ldrb	r3, [r7, #19]
 80079ea:	2b28      	cmp	r3, #40	@ 0x28
 80079ec:	d106      	bne.n	80079fc <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2b21      	cmp	r3, #33	@ 0x21
 80079f2:	d103      	bne.n	80079fc <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f001 f881 	bl	8008afc <I2C_Slave_AF>
 80079fa:	e016      	b.n	8007a2a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007a04:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a08:	f043 0304 	orr.w	r3, r3, #4
 8007a0c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007a0e:	7efb      	ldrb	r3, [r7, #27]
 8007a10:	2b10      	cmp	r3, #16
 8007a12:	d002      	beq.n	8007a1a <HAL_I2C_ER_IRQHandler+0xe8>
 8007a14:	7efb      	ldrb	r3, [r7, #27]
 8007a16:	2b40      	cmp	r3, #64	@ 0x40
 8007a18:	d107      	bne.n	8007a2a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a28:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00d      	beq.n	8007a50 <HAL_I2C_ER_IRQHandler+0x11e>
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d008      	beq.n	8007a50 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a40:	f043 0308 	orr.w	r3, r3, #8
 8007a44:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8007a4e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d008      	beq.n	8007a68 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 f8be 	bl	8008be4 <I2C_ITError>
  }
}
 8007a68:	bf00      	nop
 8007a6a:	3728      	adds	r7, #40	@ 0x28
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
 8007acc:	4613      	mov	r3, r2
 8007ace:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b4e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b56:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d150      	bne.n	8007c08 <I2C_MasterTransmit_TXE+0xc8>
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	2b21      	cmp	r3, #33	@ 0x21
 8007b6a:	d14d      	bne.n	8007c08 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2b08      	cmp	r3, #8
 8007b70:	d01d      	beq.n	8007bae <I2C_MasterTransmit_TXE+0x6e>
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	d01a      	beq.n	8007bae <I2C_MasterTransmit_TXE+0x6e>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b7e:	d016      	beq.n	8007bae <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007b8e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2211      	movs	r2, #17
 8007b94:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2220      	movs	r2, #32
 8007ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7ff ff62 	bl	8007a70 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007bac:	e060      	b.n	8007c70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007bbc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bcc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b40      	cmp	r3, #64	@ 0x40
 8007be6:	d107      	bne.n	8007bf8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7ff ff7d 	bl	8007af0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007bf6:	e03b      	b.n	8007c70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff ff35 	bl	8007a70 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007c06:	e033      	b.n	8007c70 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	2b21      	cmp	r3, #33	@ 0x21
 8007c0c:	d005      	beq.n	8007c1a <I2C_MasterTransmit_TXE+0xda>
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b40      	cmp	r3, #64	@ 0x40
 8007c12:	d12d      	bne.n	8007c70 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
 8007c16:	2b22      	cmp	r3, #34	@ 0x22
 8007c18:	d12a      	bne.n	8007c70 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d108      	bne.n	8007c36 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c32:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007c34:	e01c      	b.n	8007c70 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b40      	cmp	r3, #64	@ 0x40
 8007c40:	d103      	bne.n	8007c4a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f88e 	bl	8007d64 <I2C_MemoryTransmit_TXE_BTF>
}
 8007c48:	e012      	b.n	8007c70 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4e:	781a      	ldrb	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007c6e:	e7ff      	b.n	8007c70 <I2C_MasterTransmit_TXE+0x130>
 8007c70:	bf00      	nop
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c84:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b21      	cmp	r3, #33	@ 0x21
 8007c90:	d164      	bne.n	8007d5c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d012      	beq.n	8007cc2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca0:	781a      	ldrb	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007cc0:	e04c      	b.n	8007d5c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d01d      	beq.n	8007d04 <I2C_MasterTransmit_BTF+0x8c>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b20      	cmp	r3, #32
 8007ccc:	d01a      	beq.n	8007d04 <I2C_MasterTransmit_BTF+0x8c>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007cd4:	d016      	beq.n	8007d04 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007ce4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2211      	movs	r2, #17
 8007cea:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff feb7 	bl	8007a70 <HAL_I2C_MasterTxCpltCallback>
}
 8007d02:	e02b      	b.n	8007d5c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007d12:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d22:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b40      	cmp	r3, #64	@ 0x40
 8007d3c:	d107      	bne.n	8007d4e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7ff fed2 	bl	8007af0 <HAL_I2C_MemTxCpltCallback>
}
 8007d4c:	e006      	b.n	8007d5c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff fe8a 	bl	8007a70 <HAL_I2C_MasterTxCpltCallback>
}
 8007d5c:	bf00      	nop
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d11d      	bne.n	8007db8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d10b      	bne.n	8007d9c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d94:	1c9a      	adds	r2, r3, #2
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8007d9a:	e077      	b.n	8007e8c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	121b      	asrs	r3, r3, #8
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007db6:	e069      	b.n	8007e8c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d10b      	bne.n	8007dd8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007dd6:	e059      	b.n	8007e8c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d152      	bne.n	8007e86 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	2b22      	cmp	r3, #34	@ 0x22
 8007de4:	d10d      	bne.n	8007e02 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007df4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007e00:	e044      	b.n	8007e8c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d015      	beq.n	8007e38 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	2b21      	cmp	r3, #33	@ 0x21
 8007e10:	d112      	bne.n	8007e38 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e16:	781a      	ldrb	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007e36:	e029      	b.n	8007e8c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d124      	bne.n	8007e8c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	2b21      	cmp	r3, #33	@ 0x21
 8007e46:	d121      	bne.n	8007e8c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007e56:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff fe36 	bl	8007af0 <HAL_I2C_MemTxCpltCallback>
}
 8007e84:	e002      	b.n	8007e8c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7ff faec 	bl	8007464 <I2C_Flush_DR>
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b22      	cmp	r3, #34	@ 0x22
 8007ea6:	f040 80b9 	bne.w	800801c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eae:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d921      	bls.n	8007f02 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	691a      	ldr	r2, [r3, #16]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec8:	b2d2      	uxtb	r2, r2
 8007eca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	f040 8096 	bne.w	800801c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007efe:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007f00:	e08c      	b.n	800801c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d07f      	beq.n	800800a <I2C_MasterReceive_RXNE+0x176>
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d002      	beq.n	8007f16 <I2C_MasterReceive_RXNE+0x82>
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d179      	bne.n	800800a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f001 fa6a 	bl	80093f0 <I2C_WaitOnSTOPRequestThroughIT>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d14c      	bne.n	8007fbc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f30:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007f40:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4c:	b2d2      	uxtb	r2, r2
 8007f4e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b40      	cmp	r3, #64	@ 0x40
 8007f7a:	d10a      	bne.n	8007f92 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7ff fdba 	bl	8007b04 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007f90:	e044      	b.n	800801c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d002      	beq.n	8007fa6 <I2C_MasterReceive_RXNE+0x112>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2b20      	cmp	r3, #32
 8007fa4:	d103      	bne.n	8007fae <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fac:	e002      	b.n	8007fb4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2212      	movs	r2, #18
 8007fb2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff fd65 	bl	8007a84 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007fba:	e02f      	b.n	800801c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007fca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	691a      	ldr	r2, [r3, #16]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd6:	b2d2      	uxtb	r2, r2
 8007fd8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	3b01      	subs	r3, #1
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff fd88 	bl	8007b18 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008008:	e008      	b.n	800801c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008018:	605a      	str	r2, [r3, #4]
}
 800801a:	e7ff      	b.n	800801c <I2C_MasterReceive_RXNE+0x188>
 800801c:	bf00      	nop
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008030:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b04      	cmp	r3, #4
 800803a:	d11b      	bne.n	8008074 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800804a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	691a      	ldr	r2, [r3, #16]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008056:	b2d2      	uxtb	r2, r2
 8008058:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008068:	b29b      	uxth	r3, r3
 800806a:	3b01      	subs	r3, #1
 800806c:	b29a      	uxth	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008072:	e0c8      	b.n	8008206 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008078:	b29b      	uxth	r3, r3
 800807a:	2b03      	cmp	r3, #3
 800807c:	d129      	bne.n	80080d2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800808c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b04      	cmp	r3, #4
 8008092:	d00a      	beq.n	80080aa <I2C_MasterReceive_BTF+0x86>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b02      	cmp	r3, #2
 8008098:	d007      	beq.n	80080aa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080a8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	691a      	ldr	r2, [r3, #16]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080b4:	b2d2      	uxtb	r2, r2
 80080b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80080d0:	e099      	b.n	8008206 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	2b02      	cmp	r3, #2
 80080da:	f040 8081 	bne.w	80081e0 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d002      	beq.n	80080ea <I2C_MasterReceive_BTF+0xc6>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b10      	cmp	r3, #16
 80080e8:	d108      	bne.n	80080fc <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	e019      	b.n	8008130 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b04      	cmp	r3, #4
 8008100:	d002      	beq.n	8008108 <I2C_MasterReceive_BTF+0xe4>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b02      	cmp	r3, #2
 8008106:	d108      	bne.n	800811a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	e00a      	b.n	8008130 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b10      	cmp	r3, #16
 800811e:	d007      	beq.n	8008130 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800812e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691a      	ldr	r2, [r3, #16]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813a:	b2d2      	uxtb	r2, r2
 800813c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008142:	1c5a      	adds	r2, r3, #1
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800814c:	b29b      	uxth	r3, r3
 800814e:	3b01      	subs	r3, #1
 8008150:	b29a      	uxth	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	691a      	ldr	r2, [r3, #16]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008160:	b2d2      	uxtb	r2, r2
 8008162:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008168:	1c5a      	adds	r2, r3, #1
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008172:	b29b      	uxth	r3, r3
 8008174:	3b01      	subs	r3, #1
 8008176:	b29a      	uxth	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800818a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2220      	movs	r2, #32
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b40      	cmp	r3, #64	@ 0x40
 800819e:	d10a      	bne.n	80081b6 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff fca8 	bl	8007b04 <HAL_I2C_MemRxCpltCallback>
}
 80081b4:	e027      	b.n	8008206 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2b08      	cmp	r3, #8
 80081c2:	d002      	beq.n	80081ca <I2C_MasterReceive_BTF+0x1a6>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b20      	cmp	r3, #32
 80081c8:	d103      	bne.n	80081d2 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80081d0:	e002      	b.n	80081d8 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2212      	movs	r2, #18
 80081d6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7ff fc53 	bl	8007a84 <HAL_I2C_MasterRxCpltCallback>
}
 80081de:	e012      	b.n	8008206 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	691a      	ldr	r2, [r3, #16]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ea:	b2d2      	uxtb	r2, r2
 80081ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	3b01      	subs	r3, #1
 8008200:	b29a      	uxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008206:	bf00      	nop
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b40      	cmp	r3, #64	@ 0x40
 8008220:	d117      	bne.n	8008252 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008226:	2b00      	cmp	r3, #0
 8008228:	d109      	bne.n	800823e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800822e:	b2db      	uxtb	r3, r3
 8008230:	461a      	mov	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800823a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800823c:	e067      	b.n	800830e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008242:	b2db      	uxtb	r3, r3
 8008244:	f043 0301 	orr.w	r3, r3, #1
 8008248:	b2da      	uxtb	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	611a      	str	r2, [r3, #16]
}
 8008250:	e05d      	b.n	800830e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800825a:	d133      	bne.n	80082c4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b21      	cmp	r3, #33	@ 0x21
 8008266:	d109      	bne.n	800827c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800826c:	b2db      	uxtb	r3, r3
 800826e:	461a      	mov	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008278:	611a      	str	r2, [r3, #16]
 800827a:	e008      	b.n	800828e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f043 0301 	orr.w	r3, r3, #1
 8008286:	b2da      	uxtb	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008292:	2b00      	cmp	r3, #0
 8008294:	d004      	beq.n	80082a0 <I2C_Master_SB+0x92>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800829a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d108      	bne.n	80082b2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d032      	beq.n	800830e <I2C_Master_SB+0x100>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d02d      	beq.n	800830e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	685a      	ldr	r2, [r3, #4]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082c0:	605a      	str	r2, [r3, #4]
}
 80082c2:	e024      	b.n	800830e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10e      	bne.n	80082ea <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	11db      	asrs	r3, r3, #7
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	f003 0306 	and.w	r3, r3, #6
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	f063 030f 	orn	r3, r3, #15
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	611a      	str	r2, [r3, #16]
}
 80082e8:	e011      	b.n	800830e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d10d      	bne.n	800830e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	11db      	asrs	r3, r3, #7
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	f003 0306 	and.w	r3, r3, #6
 8008300:	b2db      	uxtb	r3, r3
 8008302:	f063 030e 	orn	r3, r3, #14
 8008306:	b2da      	uxtb	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	611a      	str	r2, [r3, #16]
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008326:	b2da      	uxtb	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008332:	2b00      	cmp	r3, #0
 8008334:	d004      	beq.n	8008340 <I2C_Master_ADD10+0x26>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800833a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d108      	bne.n	8008352 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00c      	beq.n	8008362 <I2C_Master_ADD10+0x48>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d007      	beq.n	8008362 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008360:	605a      	str	r2, [r3, #4]
  }
}
 8008362:	bf00      	nop
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800836e:	b480      	push	{r7}
 8008370:	b091      	sub	sp, #68	@ 0x44
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800837c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008384:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800838a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b22      	cmp	r3, #34	@ 0x22
 8008396:	f040 8169 	bne.w	800866c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10f      	bne.n	80083c2 <I2C_Master_ADDR+0x54>
 80083a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80083a6:	2b40      	cmp	r3, #64	@ 0x40
 80083a8:	d10b      	bne.n	80083c2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083aa:	2300      	movs	r3, #0
 80083ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80083be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c0:	e160      	b.n	8008684 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d11d      	bne.n	8008406 <I2C_Master_ADDR+0x98>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80083d2:	d118      	bne.n	8008406 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083d4:	2300      	movs	r3, #0
 80083d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083f8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083fe:	1c5a      	adds	r2, r3, #1
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	651a      	str	r2, [r3, #80]	@ 0x50
 8008404:	e13e      	b.n	8008684 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800840a:	b29b      	uxth	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d113      	bne.n	8008438 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008410:	2300      	movs	r3, #0
 8008412:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008424:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	e115      	b.n	8008664 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800843c:	b29b      	uxth	r3, r3
 800843e:	2b01      	cmp	r3, #1
 8008440:	f040 808a 	bne.w	8008558 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008446:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800844a:	d137      	bne.n	80084bc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800845a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008466:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800846a:	d113      	bne.n	8008494 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800847a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800847c:	2300      	movs	r3, #0
 800847e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	627b      	str	r3, [r7, #36]	@ 0x24
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008492:	e0e7      	b.n	8008664 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008494:	2300      	movs	r3, #0
 8008496:	623b      	str	r3, [r7, #32]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	623b      	str	r3, [r7, #32]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	623b      	str	r3, [r7, #32]
 80084a8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	e0d3      	b.n	8008664 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80084bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084be:	2b08      	cmp	r3, #8
 80084c0:	d02e      	beq.n	8008520 <I2C_Master_ADDR+0x1b2>
 80084c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c4:	2b20      	cmp	r3, #32
 80084c6:	d02b      	beq.n	8008520 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80084c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ca:	2b12      	cmp	r3, #18
 80084cc:	d102      	bne.n	80084d4 <I2C_Master_ADDR+0x166>
 80084ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d125      	bne.n	8008520 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80084d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d00e      	beq.n	80084f8 <I2C_Master_ADDR+0x18a>
 80084da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d00b      	beq.n	80084f8 <I2C_Master_ADDR+0x18a>
 80084e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e2:	2b10      	cmp	r3, #16
 80084e4:	d008      	beq.n	80084f8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	e007      	b.n	8008508 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008506:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008508:	2300      	movs	r3, #0
 800850a:	61fb      	str	r3, [r7, #28]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	61fb      	str	r3, [r7, #28]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	61fb      	str	r3, [r7, #28]
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	e0a1      	b.n	8008664 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800852e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008530:	2300      	movs	r3, #0
 8008532:	61bb      	str	r3, [r7, #24]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	61bb      	str	r3, [r7, #24]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	61bb      	str	r3, [r7, #24]
 8008544:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008554:	601a      	str	r2, [r3, #0]
 8008556:	e085      	b.n	8008664 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d14d      	bne.n	80085fe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008564:	2b04      	cmp	r3, #4
 8008566:	d016      	beq.n	8008596 <I2C_Master_ADDR+0x228>
 8008568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856a:	2b02      	cmp	r3, #2
 800856c:	d013      	beq.n	8008596 <I2C_Master_ADDR+0x228>
 800856e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008570:	2b10      	cmp	r3, #16
 8008572:	d010      	beq.n	8008596 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008582:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	e007      	b.n	80085a6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80085a4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085b4:	d117      	bne.n	80085e6 <I2C_Master_ADDR+0x278>
 80085b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80085bc:	d00b      	beq.n	80085d6 <I2C_Master_ADDR+0x268>
 80085be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d008      	beq.n	80085d6 <I2C_Master_ADDR+0x268>
 80085c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c6:	2b08      	cmp	r3, #8
 80085c8:	d005      	beq.n	80085d6 <I2C_Master_ADDR+0x268>
 80085ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085cc:	2b10      	cmp	r3, #16
 80085ce:	d002      	beq.n	80085d6 <I2C_Master_ADDR+0x268>
 80085d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d2:	2b20      	cmp	r3, #32
 80085d4:	d107      	bne.n	80085e6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80085e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085e6:	2300      	movs	r3, #0
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	617b      	str	r3, [r7, #20]
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	e032      	b.n	8008664 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800860c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800861c:	d117      	bne.n	800864e <I2C_Master_ADDR+0x2e0>
 800861e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008620:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008624:	d00b      	beq.n	800863e <I2C_Master_ADDR+0x2d0>
 8008626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008628:	2b01      	cmp	r3, #1
 800862a:	d008      	beq.n	800863e <I2C_Master_ADDR+0x2d0>
 800862c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862e:	2b08      	cmp	r3, #8
 8008630:	d005      	beq.n	800863e <I2C_Master_ADDR+0x2d0>
 8008632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008634:	2b10      	cmp	r3, #16
 8008636:	d002      	beq.n	800863e <I2C_Master_ADDR+0x2d0>
 8008638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863a:	2b20      	cmp	r3, #32
 800863c:	d107      	bne.n	800864e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800864c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800864e:	2300      	movs	r3, #0
 8008650:	613b      	str	r3, [r7, #16]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	613b      	str	r3, [r7, #16]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	613b      	str	r3, [r7, #16]
 8008662:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800866a:	e00b      	b.n	8008684 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]
}
 8008682:	e7ff      	b.n	8008684 <I2C_Master_ADDR+0x316>
 8008684:	bf00      	nop
 8008686:	3744      	adds	r7, #68	@ 0x44
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800869e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d02b      	beq.n	8008702 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ae:	781a      	ldrb	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	3b01      	subs	r3, #1
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d114      	bne.n	8008702 <I2C_SlaveTransmit_TXE+0x72>
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	2b29      	cmp	r3, #41	@ 0x29
 80086dc:	d111      	bne.n	8008702 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086ec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2221      	movs	r2, #33	@ 0x21
 80086f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2228      	movs	r2, #40	@ 0x28
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7ff f9cb 	bl	8007a98 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008702:	bf00      	nop
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800870a:	b480      	push	{r7}
 800870c:	b083      	sub	sp, #12
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008716:	b29b      	uxth	r3, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	d011      	beq.n	8008740 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008720:	781a      	ldrb	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800872c:	1c5a      	adds	r2, r3, #1
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008736:	b29b      	uxth	r3, r3
 8008738:	3b01      	subs	r3, #1
 800873a:	b29a      	uxth	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800875a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008760:	b29b      	uxth	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d02c      	beq.n	80087c0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008770:	b2d2      	uxtb	r2, r2
 8008772:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008778:	1c5a      	adds	r2, r3, #1
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008782:	b29b      	uxth	r3, r3
 8008784:	3b01      	subs	r3, #1
 8008786:	b29a      	uxth	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d114      	bne.n	80087c0 <I2C_SlaveReceive_RXNE+0x74>
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	2b2a      	cmp	r3, #42	@ 0x2a
 800879a:	d111      	bne.n	80087c0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2222      	movs	r2, #34	@ 0x22
 80087b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2228      	movs	r2, #40	@ 0x28
 80087b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7ff f976 	bl	8007aac <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80087c0:	bf00      	nop
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d012      	beq.n	8008800 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	691a      	ldr	r2, [r3, #16]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e4:	b2d2      	uxtb	r2, r2
 80087e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	3b01      	subs	r3, #1
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008816:	2300      	movs	r3, #0
 8008818:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008820:	b2db      	uxtb	r3, r3
 8008822:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008826:	2b28      	cmp	r3, #40	@ 0x28
 8008828:	d125      	bne.n	8008876 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008838:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	f003 0304 	and.w	r3, r3, #4
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008844:	2301      	movs	r3, #1
 8008846:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800884e:	2b00      	cmp	r3, #0
 8008850:	d103      	bne.n	800885a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	81bb      	strh	r3, [r7, #12]
 8008858:	e002      	b.n	8008860 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008868:	89ba      	ldrh	r2, [r7, #12]
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f7ff f926 	bl	8007ac0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008874:	e00e      	b.n	8008894 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008876:	2300      	movs	r3, #0
 8008878:	60bb      	str	r3, [r7, #8]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	60bb      	str	r3, [r7, #8]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	60bb      	str	r3, [r7, #8]
 800888a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008894:	bf00      	nop
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80088ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80088bc:	2300      	movs	r3, #0
 80088be:	60bb      	str	r3, [r7, #8]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	60bb      	str	r3, [r7, #8]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f042 0201 	orr.w	r2, r2, #1
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088f8:	d172      	bne.n	80089e0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	2b22      	cmp	r3, #34	@ 0x22
 80088fe:	d002      	beq.n	8008906 <I2C_Slave_STOPF+0x6a>
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	2b2a      	cmp	r3, #42	@ 0x2a
 8008904:	d135      	bne.n	8008972 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	b29a      	uxth	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008918:	b29b      	uxth	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d005      	beq.n	800892a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008922:	f043 0204 	orr.w	r2, r3, #4
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008938:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe f95e 	bl	8006c00 <HAL_DMA_GetState>
 8008944:	4603      	mov	r3, r0
 8008946:	2b01      	cmp	r3, #1
 8008948:	d049      	beq.n	80089de <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800894e:	4a69      	ldr	r2, [pc, #420]	@ (8008af4 <I2C_Slave_STOPF+0x258>)
 8008950:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008956:	4618      	mov	r0, r3
 8008958:	f7fd ffa6 	bl	80068a8 <HAL_DMA_Abort_IT>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d03d      	beq.n	80089de <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800896c:	4610      	mov	r0, r2
 800896e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008970:	e035      	b.n	80089de <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	b29a      	uxth	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008984:	b29b      	uxth	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d005      	beq.n	8008996 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800898e:	f043 0204 	orr.w	r2, r3, #4
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80089a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe f928 	bl	8006c00 <HAL_DMA_GetState>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d014      	beq.n	80089e0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ba:	4a4e      	ldr	r2, [pc, #312]	@ (8008af4 <I2C_Slave_STOPF+0x258>)
 80089bc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fd ff70 	bl	80068a8 <HAL_DMA_Abort_IT>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d008      	beq.n	80089e0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80089d8:	4610      	mov	r0, r2
 80089da:	4798      	blx	r3
 80089dc:	e000      	b.n	80089e0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80089de:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d03e      	beq.n	8008a68 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	d112      	bne.n	8008a1e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	691a      	ldr	r2, [r3, #16]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a02:	b2d2      	uxtb	r2, r2
 8008a04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	3b01      	subs	r3, #1
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a28:	2b40      	cmp	r3, #64	@ 0x40
 8008a2a:	d112      	bne.n	8008a52 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	691a      	ldr	r2, [r3, #16]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a36:	b2d2      	uxtb	r2, r2
 8008a38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d005      	beq.n	8008a68 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a60:	f043 0204 	orr.w	r2, r3, #4
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f8b7 	bl	8008be4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008a76:	e039      	b.n	8008aec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a7c:	d109      	bne.n	8008a92 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2228      	movs	r2, #40	@ 0x28
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff f80d 	bl	8007aac <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b28      	cmp	r3, #40	@ 0x28
 8008a9c:	d111      	bne.n	8008ac2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a15      	ldr	r2, [pc, #84]	@ (8008af8 <I2C_Slave_STOPF+0x25c>)
 8008aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7ff f80e 	bl	8007adc <HAL_I2C_ListenCpltCallback>
}
 8008ac0:	e014      	b.n	8008aec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ac6:	2b22      	cmp	r3, #34	@ 0x22
 8008ac8:	d002      	beq.n	8008ad0 <I2C_Slave_STOPF+0x234>
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	2b22      	cmp	r3, #34	@ 0x22
 8008ace:	d10d      	bne.n	8008aec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7fe ffe0 	bl	8007aac <HAL_I2C_SlaveRxCpltCallback>
}
 8008aec:	bf00      	nop
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	08008f4d 	.word	0x08008f4d
 8008af8:	ffff0000 	.word	0xffff0000

08008afc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b10:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b08      	cmp	r3, #8
 8008b16:	d002      	beq.n	8008b1e <I2C_Slave_AF+0x22>
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b20      	cmp	r3, #32
 8008b1c:	d129      	bne.n	8008b72 <I2C_Slave_AF+0x76>
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
 8008b20:	2b28      	cmp	r3, #40	@ 0x28
 8008b22:	d126      	bne.n	8008b72 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a2e      	ldr	r2, [pc, #184]	@ (8008be0 <I2C_Slave_AF+0xe4>)
 8008b28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008b38:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008b42:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b52:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7fe ffb6 	bl	8007adc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008b70:	e031      	b.n	8008bd6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	2b21      	cmp	r3, #33	@ 0x21
 8008b76:	d129      	bne.n	8008bcc <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a19      	ldr	r2, [pc, #100]	@ (8008be0 <I2C_Slave_AF+0xe4>)
 8008b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2221      	movs	r2, #33	@ 0x21
 8008b82:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008ba2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008bac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bbc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7fe fc50 	bl	8007464 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7fe ff67 	bl	8007a98 <HAL_I2C_SlaveTxCpltCallback>
}
 8008bca:	e004      	b.n	8008bd6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008bd4:	615a      	str	r2, [r3, #20]
}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	ffff0000 	.word	0xffff0000

08008be4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bf2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008bfa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	2b10      	cmp	r3, #16
 8008c00:	d002      	beq.n	8008c08 <I2C_ITError+0x24>
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	2b40      	cmp	r3, #64	@ 0x40
 8008c06:	d10a      	bne.n	8008c1e <I2C_ITError+0x3a>
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	2b22      	cmp	r3, #34	@ 0x22
 8008c0c:	d107      	bne.n	8008c1e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c1c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008c24:	2b28      	cmp	r3, #40	@ 0x28
 8008c26:	d107      	bne.n	8008c38 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2228      	movs	r2, #40	@ 0x28
 8008c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008c36:	e015      	b.n	8008c64 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c46:	d00a      	beq.n	8008c5e <I2C_ITError+0x7a>
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	2b60      	cmp	r3, #96	@ 0x60
 8008c4c:	d007      	beq.n	8008c5e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c72:	d162      	bne.n	8008d3a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685a      	ldr	r2, [r3, #4]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c82:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d020      	beq.n	8008cd4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c96:	4a6a      	ldr	r2, [pc, #424]	@ (8008e40 <I2C_ITError+0x25c>)
 8008c98:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fd fe02 	bl	80068a8 <HAL_DMA_Abort_IT>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 8089 	beq.w	8008dbe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f022 0201 	bic.w	r2, r2, #1
 8008cba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008cce:	4610      	mov	r0, r2
 8008cd0:	4798      	blx	r3
 8008cd2:	e074      	b.n	8008dbe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd8:	4a59      	ldr	r2, [pc, #356]	@ (8008e40 <I2C_ITError+0x25c>)
 8008cda:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fd fde1 	bl	80068a8 <HAL_DMA_Abort_IT>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d068      	beq.n	8008dbe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf6:	2b40      	cmp	r3, #64	@ 0x40
 8008cf8:	d10b      	bne.n	8008d12 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	691a      	ldr	r2, [r3, #16]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d04:	b2d2      	uxtb	r2, r2
 8008d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d0c:	1c5a      	adds	r2, r3, #1
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f022 0201 	bic.w	r2, r2, #1
 8008d20:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2220      	movs	r2, #32
 8008d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008d34:	4610      	mov	r0, r2
 8008d36:	4798      	blx	r3
 8008d38:	e041      	b.n	8008dbe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b60      	cmp	r3, #96	@ 0x60
 8008d44:	d125      	bne.n	8008d92 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2220      	movs	r2, #32
 8008d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d5e:	2b40      	cmp	r3, #64	@ 0x40
 8008d60:	d10b      	bne.n	8008d7a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d6c:	b2d2      	uxtb	r2, r2
 8008d6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f022 0201 	bic.w	r2, r2, #1
 8008d88:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7fe fece 	bl	8007b2c <HAL_I2C_AbortCpltCallback>
 8008d90:	e015      	b.n	8008dbe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d9c:	2b40      	cmp	r3, #64	@ 0x40
 8008d9e:	d10b      	bne.n	8008db8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	691a      	ldr	r2, [r3, #16]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008daa:	b2d2      	uxtb	r2, r2
 8008dac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7fe fead 	bl	8007b18 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10e      	bne.n	8008dec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d109      	bne.n	8008dec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d104      	bne.n	8008dec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d007      	beq.n	8008dfc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008dfa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e02:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e08:	f003 0304 	and.w	r3, r3, #4
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	d113      	bne.n	8008e38 <I2C_ITError+0x254>
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
 8008e12:	2b28      	cmp	r3, #40	@ 0x28
 8008e14:	d110      	bne.n	8008e38 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a0a      	ldr	r2, [pc, #40]	@ (8008e44 <I2C_ITError+0x260>)
 8008e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2220      	movs	r2, #32
 8008e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7fe fe52 	bl	8007adc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008e38:	bf00      	nop
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	08008f4d 	.word	0x08008f4d
 8008e44:	ffff0000 	.word	0xffff0000

08008e48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b088      	sub	sp, #32
 8008e4c:	af02      	add	r7, sp, #8
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	607a      	str	r2, [r7, #4]
 8008e52:	603b      	str	r3, [r7, #0]
 8008e54:	460b      	mov	r3, r1
 8008e56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d006      	beq.n	8008e72 <I2C_MasterRequestWrite+0x2a>
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d003      	beq.n	8008e72 <I2C_MasterRequestWrite+0x2a>
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008e70:	d108      	bne.n	8008e84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	e00b      	b.n	8008e9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e88:	2b12      	cmp	r3, #18
 8008e8a:	d107      	bne.n	8008e9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 f8f7 	bl	800909c <I2C_WaitOnFlagUntilTimeout>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00d      	beq.n	8008ed0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ec2:	d103      	bne.n	8008ecc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008eca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e035      	b.n	8008f3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ed8:	d108      	bne.n	8008eec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008eda:	897b      	ldrh	r3, [r7, #10]
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	461a      	mov	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008ee8:	611a      	str	r2, [r3, #16]
 8008eea:	e01b      	b.n	8008f24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008eec:	897b      	ldrh	r3, [r7, #10]
 8008eee:	11db      	asrs	r3, r3, #7
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	f003 0306 	and.w	r3, r3, #6
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	f063 030f 	orn	r3, r3, #15
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	490e      	ldr	r1, [pc, #56]	@ (8008f44 <I2C_MasterRequestWrite+0xfc>)
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 f940 	bl	8009190 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e010      	b.n	8008f3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008f1a:	897b      	ldrh	r3, [r7, #10]
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	4907      	ldr	r1, [pc, #28]	@ (8008f48 <I2C_MasterRequestWrite+0x100>)
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 f930 	bl	8009190 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e000      	b.n	8008f3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	00010008 	.word	0x00010008
 8008f48:	00010002 	.word	0x00010002

08008f4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f54:	2300      	movs	r3, #0
 8008f56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008f66:	4b4b      	ldr	r3, [pc, #300]	@ (8009094 <I2C_DMAAbort+0x148>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	08db      	lsrs	r3, r3, #3
 8008f6c:	4a4a      	ldr	r2, [pc, #296]	@ (8009098 <I2C_DMAAbort+0x14c>)
 8008f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f72:	0a1a      	lsrs	r2, r3, #8
 8008f74:	4613      	mov	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	00da      	lsls	r2, r3, #3
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d106      	bne.n	8008f94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8a:	f043 0220 	orr.w	r2, r3, #32
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8008f92:	e00a      	b.n	8008faa <I2C_DMAAbort+0x5e>
    }
    count--;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fa8:	d0ea      	beq.n	8008f80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fd8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fec:	2200      	movs	r2, #0
 8008fee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d003      	beq.n	8009000 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f022 0201 	bic.w	r2, r2, #1
 800900e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b60      	cmp	r3, #96	@ 0x60
 800901a:	d10e      	bne.n	800903a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	2220      	movs	r2, #32
 8009020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2200      	movs	r2, #0
 8009030:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009032:	6978      	ldr	r0, [r7, #20]
 8009034:	f7fe fd7a 	bl	8007b2c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009038:	e027      	b.n	800908a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800903a:	7cfb      	ldrb	r3, [r7, #19]
 800903c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009040:	2b28      	cmp	r3, #40	@ 0x28
 8009042:	d117      	bne.n	8009074 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009062:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2200      	movs	r2, #0
 8009068:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2228      	movs	r2, #40	@ 0x28
 800906e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009072:	e007      	b.n	8009084 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	2220      	movs	r2, #32
 8009078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009084:	6978      	ldr	r0, [r7, #20]
 8009086:	f7fe fd47 	bl	8007b18 <HAL_I2C_ErrorCallback>
}
 800908a:	bf00      	nop
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	200000a8 	.word	0x200000a8
 8009098:	14f8b589 	.word	0x14f8b589

0800909c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	603b      	str	r3, [r7, #0]
 80090a8:	4613      	mov	r3, r2
 80090aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090ac:	e048      	b.n	8009140 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b4:	d044      	beq.n	8009140 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090b6:	f7fc fc07 	bl	80058c8 <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d302      	bcc.n	80090cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d139      	bne.n	8009140 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	0c1b      	lsrs	r3, r3, #16
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d10d      	bne.n	80090f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	43da      	mvns	r2, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	4013      	ands	r3, r2
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bf0c      	ite	eq
 80090e8:	2301      	moveq	r3, #1
 80090ea:	2300      	movne	r3, #0
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	461a      	mov	r2, r3
 80090f0:	e00c      	b.n	800910c <I2C_WaitOnFlagUntilTimeout+0x70>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	43da      	mvns	r2, r3
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	4013      	ands	r3, r2
 80090fe:	b29b      	uxth	r3, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	bf0c      	ite	eq
 8009104:	2301      	moveq	r3, #1
 8009106:	2300      	movne	r3, #0
 8009108:	b2db      	uxtb	r3, r3
 800910a:	461a      	mov	r2, r3
 800910c:	79fb      	ldrb	r3, [r7, #7]
 800910e:	429a      	cmp	r2, r3
 8009110:	d116      	bne.n	8009140 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2220      	movs	r2, #32
 800911c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800912c:	f043 0220 	orr.w	r2, r3, #32
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e023      	b.n	8009188 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	0c1b      	lsrs	r3, r3, #16
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b01      	cmp	r3, #1
 8009148:	d10d      	bne.n	8009166 <I2C_WaitOnFlagUntilTimeout+0xca>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	43da      	mvns	r2, r3
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	4013      	ands	r3, r2
 8009156:	b29b      	uxth	r3, r3
 8009158:	2b00      	cmp	r3, #0
 800915a:	bf0c      	ite	eq
 800915c:	2301      	moveq	r3, #1
 800915e:	2300      	movne	r3, #0
 8009160:	b2db      	uxtb	r3, r3
 8009162:	461a      	mov	r2, r3
 8009164:	e00c      	b.n	8009180 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	43da      	mvns	r2, r3
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	4013      	ands	r3, r2
 8009172:	b29b      	uxth	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	bf0c      	ite	eq
 8009178:	2301      	moveq	r3, #1
 800917a:	2300      	movne	r3, #0
 800917c:	b2db      	uxtb	r3, r3
 800917e:	461a      	mov	r2, r3
 8009180:	79fb      	ldrb	r3, [r7, #7]
 8009182:	429a      	cmp	r2, r3
 8009184:	d093      	beq.n	80090ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
 800919c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800919e:	e071      	b.n	8009284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091ae:	d123      	bne.n	80091f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80091c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2220      	movs	r2, #32
 80091d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e4:	f043 0204 	orr.w	r2, r3, #4
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e067      	b.n	80092c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fe:	d041      	beq.n	8009284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009200:	f7fc fb62 	bl	80058c8 <HAL_GetTick>
 8009204:	4602      	mov	r2, r0
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	429a      	cmp	r2, r3
 800920e:	d302      	bcc.n	8009216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d136      	bne.n	8009284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	0c1b      	lsrs	r3, r3, #16
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b01      	cmp	r3, #1
 800921e:	d10c      	bne.n	800923a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	43da      	mvns	r2, r3
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	4013      	ands	r3, r2
 800922c:	b29b      	uxth	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	bf14      	ite	ne
 8009232:	2301      	movne	r3, #1
 8009234:	2300      	moveq	r3, #0
 8009236:	b2db      	uxtb	r3, r3
 8009238:	e00b      	b.n	8009252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	43da      	mvns	r2, r3
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	4013      	ands	r3, r2
 8009246:	b29b      	uxth	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	bf14      	ite	ne
 800924c:	2301      	movne	r3, #1
 800924e:	2300      	moveq	r3, #0
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d016      	beq.n	8009284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2220      	movs	r2, #32
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009270:	f043 0220 	orr.w	r2, r3, #32
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	e021      	b.n	80092c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	0c1b      	lsrs	r3, r3, #16
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b01      	cmp	r3, #1
 800928c:	d10c      	bne.n	80092a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	43da      	mvns	r2, r3
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	4013      	ands	r3, r2
 800929a:	b29b      	uxth	r3, r3
 800929c:	2b00      	cmp	r3, #0
 800929e:	bf14      	ite	ne
 80092a0:	2301      	movne	r3, #1
 80092a2:	2300      	moveq	r3, #0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	e00b      	b.n	80092c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	43da      	mvns	r2, r3
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	4013      	ands	r3, r2
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bf14      	ite	ne
 80092ba:	2301      	movne	r3, #1
 80092bc:	2300      	moveq	r3, #0
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f47f af6d 	bne.w	80091a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092dc:	e034      	b.n	8009348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 f8b8 	bl	8009454 <I2C_IsAcknowledgeFailed>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e034      	b.n	8009358 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f4:	d028      	beq.n	8009348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092f6:	f7fc fae7 	bl	80058c8 <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	429a      	cmp	r2, r3
 8009304:	d302      	bcc.n	800930c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d11d      	bne.n	8009348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009316:	2b80      	cmp	r3, #128	@ 0x80
 8009318:	d016      	beq.n	8009348 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2220      	movs	r2, #32
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009334:	f043 0220 	orr.w	r2, r3, #32
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e007      	b.n	8009358 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009352:	2b80      	cmp	r3, #128	@ 0x80
 8009354:	d1c3      	bne.n	80092de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800936c:	e034      	b.n	80093d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 f870 	bl	8009454 <I2C_IsAcknowledgeFailed>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e034      	b.n	80093e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009384:	d028      	beq.n	80093d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009386:	f7fc fa9f 	bl	80058c8 <HAL_GetTick>
 800938a:	4602      	mov	r2, r0
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	429a      	cmp	r2, r3
 8009394:	d302      	bcc.n	800939c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d11d      	bne.n	80093d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	f003 0304 	and.w	r3, r3, #4
 80093a6:	2b04      	cmp	r3, #4
 80093a8:	d016      	beq.n	80093d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2220      	movs	r2, #32
 80093b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c4:	f043 0220 	orr.w	r2, r3, #32
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e007      	b.n	80093e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	f003 0304 	and.w	r3, r3, #4
 80093e2:	2b04      	cmp	r3, #4
 80093e4:	d1c3      	bne.n	800936e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3710      	adds	r7, #16
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80093fc:	4b13      	ldr	r3, [pc, #76]	@ (800944c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	08db      	lsrs	r3, r3, #3
 8009402:	4a13      	ldr	r2, [pc, #76]	@ (8009450 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009404:	fba2 2303 	umull	r2, r3, r2, r3
 8009408:	0a1a      	lsrs	r2, r3, #8
 800940a:	4613      	mov	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	3b01      	subs	r3, #1
 8009416:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d107      	bne.n	800942e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009422:	f043 0220 	orr.w	r2, r3, #32
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e008      	b.n	8009440 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800943c:	d0e9      	beq.n	8009412 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3714      	adds	r7, #20
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	200000a8 	.word	0x200000a8
 8009450:	14f8b589 	.word	0x14f8b589

08009454 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800946a:	d11b      	bne.n	80094a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009474:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2220      	movs	r2, #32
 8009480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009490:	f043 0204 	orr.w	r2, r3, #4
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e000      	b.n	80094a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b083      	sub	sp, #12
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094be:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80094c2:	d103      	bne.n	80094cc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80094ca:	e007      	b.n	80094dc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80094d4:	d102      	bne.n	80094dc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2208      	movs	r2, #8
 80094da:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80094ec:	4b06      	ldr	r3, [pc, #24]	@ (8009508 <HAL_PWR_PVD_IRQHandler+0x20>)
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d005      	beq.n	8009504 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80094f8:	f000 f808 	bl	800950c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80094fc:	4b02      	ldr	r3, [pc, #8]	@ (8009508 <HAL_PWR_PVD_IRQHandler+0x20>)
 80094fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009502:	615a      	str	r2, [r3, #20]
  }
}
 8009504:	bf00      	nop
 8009506:	bd80      	pop	{r7, pc}
 8009508:	40013c00 	.word	0x40013c00

0800950c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800950c:	b480      	push	{r7}
 800950e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8009510:	bf00      	nop
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
	...

0800951c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e267      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d075      	beq.n	8009626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800953a:	4b88      	ldr	r3, [pc, #544]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	f003 030c 	and.w	r3, r3, #12
 8009542:	2b04      	cmp	r3, #4
 8009544:	d00c      	beq.n	8009560 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009546:	4b85      	ldr	r3, [pc, #532]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800954e:	2b08      	cmp	r3, #8
 8009550:	d112      	bne.n	8009578 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009552:	4b82      	ldr	r3, [pc, #520]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800955a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800955e:	d10b      	bne.n	8009578 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009560:	4b7e      	ldr	r3, [pc, #504]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d05b      	beq.n	8009624 <HAL_RCC_OscConfig+0x108>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d157      	bne.n	8009624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e242      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009580:	d106      	bne.n	8009590 <HAL_RCC_OscConfig+0x74>
 8009582:	4b76      	ldr	r3, [pc, #472]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a75      	ldr	r2, [pc, #468]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 8009588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	e01d      	b.n	80095cc <HAL_RCC_OscConfig+0xb0>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009598:	d10c      	bne.n	80095b4 <HAL_RCC_OscConfig+0x98>
 800959a:	4b70      	ldr	r3, [pc, #448]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a6f      	ldr	r2, [pc, #444]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 80095a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	4b6d      	ldr	r3, [pc, #436]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a6c      	ldr	r2, [pc, #432]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 80095ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095b0:	6013      	str	r3, [r2, #0]
 80095b2:	e00b      	b.n	80095cc <HAL_RCC_OscConfig+0xb0>
 80095b4:	4b69      	ldr	r3, [pc, #420]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a68      	ldr	r2, [pc, #416]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 80095ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095be:	6013      	str	r3, [r2, #0]
 80095c0:	4b66      	ldr	r3, [pc, #408]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a65      	ldr	r2, [pc, #404]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 80095c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80095ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d013      	beq.n	80095fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095d4:	f7fc f978 	bl	80058c8 <HAL_GetTick>
 80095d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095da:	e008      	b.n	80095ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80095dc:	f7fc f974 	bl	80058c8 <HAL_GetTick>
 80095e0:	4602      	mov	r2, r0
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	2b64      	cmp	r3, #100	@ 0x64
 80095e8:	d901      	bls.n	80095ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e207      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095ee:	4b5b      	ldr	r3, [pc, #364]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0f0      	beq.n	80095dc <HAL_RCC_OscConfig+0xc0>
 80095fa:	e014      	b.n	8009626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095fc:	f7fc f964 	bl	80058c8 <HAL_GetTick>
 8009600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009602:	e008      	b.n	8009616 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009604:	f7fc f960 	bl	80058c8 <HAL_GetTick>
 8009608:	4602      	mov	r2, r0
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	2b64      	cmp	r3, #100	@ 0x64
 8009610:	d901      	bls.n	8009616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009612:	2303      	movs	r3, #3
 8009614:	e1f3      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009616:	4b51      	ldr	r3, [pc, #324]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1f0      	bne.n	8009604 <HAL_RCC_OscConfig+0xe8>
 8009622:	e000      	b.n	8009626 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 0302 	and.w	r3, r3, #2
 800962e:	2b00      	cmp	r3, #0
 8009630:	d063      	beq.n	80096fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009632:	4b4a      	ldr	r3, [pc, #296]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f003 030c 	and.w	r3, r3, #12
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00b      	beq.n	8009656 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800963e:	4b47      	ldr	r3, [pc, #284]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009646:	2b08      	cmp	r3, #8
 8009648:	d11c      	bne.n	8009684 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800964a:	4b44      	ldr	r3, [pc, #272]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009652:	2b00      	cmp	r3, #0
 8009654:	d116      	bne.n	8009684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009656:	4b41      	ldr	r3, [pc, #260]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f003 0302 	and.w	r3, r3, #2
 800965e:	2b00      	cmp	r3, #0
 8009660:	d005      	beq.n	800966e <HAL_RCC_OscConfig+0x152>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d001      	beq.n	800966e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e1c7      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800966e:	4b3b      	ldr	r3, [pc, #236]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	00db      	lsls	r3, r3, #3
 800967c:	4937      	ldr	r1, [pc, #220]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 800967e:	4313      	orrs	r3, r2
 8009680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009682:	e03a      	b.n	80096fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d020      	beq.n	80096ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800968c:	4b34      	ldr	r3, [pc, #208]	@ (8009760 <HAL_RCC_OscConfig+0x244>)
 800968e:	2201      	movs	r2, #1
 8009690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009692:	f7fc f919 	bl	80058c8 <HAL_GetTick>
 8009696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009698:	e008      	b.n	80096ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800969a:	f7fc f915 	bl	80058c8 <HAL_GetTick>
 800969e:	4602      	mov	r2, r0
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	d901      	bls.n	80096ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80096a8:	2303      	movs	r3, #3
 80096aa:	e1a8      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096ac:	4b2b      	ldr	r3, [pc, #172]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0302 	and.w	r3, r3, #2
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d0f0      	beq.n	800969a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096b8:	4b28      	ldr	r3, [pc, #160]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	00db      	lsls	r3, r3, #3
 80096c6:	4925      	ldr	r1, [pc, #148]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 80096c8:	4313      	orrs	r3, r2
 80096ca:	600b      	str	r3, [r1, #0]
 80096cc:	e015      	b.n	80096fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80096ce:	4b24      	ldr	r3, [pc, #144]	@ (8009760 <HAL_RCC_OscConfig+0x244>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096d4:	f7fc f8f8 	bl	80058c8 <HAL_GetTick>
 80096d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096da:	e008      	b.n	80096ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096dc:	f7fc f8f4 	bl	80058c8 <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d901      	bls.n	80096ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	e187      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096ee:	4b1b      	ldr	r3, [pc, #108]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 0302 	and.w	r3, r3, #2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1f0      	bne.n	80096dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 0308 	and.w	r3, r3, #8
 8009702:	2b00      	cmp	r3, #0
 8009704:	d036      	beq.n	8009774 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d016      	beq.n	800973c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800970e:	4b15      	ldr	r3, [pc, #84]	@ (8009764 <HAL_RCC_OscConfig+0x248>)
 8009710:	2201      	movs	r2, #1
 8009712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009714:	f7fc f8d8 	bl	80058c8 <HAL_GetTick>
 8009718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800971a:	e008      	b.n	800972e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800971c:	f7fc f8d4 	bl	80058c8 <HAL_GetTick>
 8009720:	4602      	mov	r2, r0
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	1ad3      	subs	r3, r2, r3
 8009726:	2b02      	cmp	r3, #2
 8009728:	d901      	bls.n	800972e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800972a:	2303      	movs	r3, #3
 800972c:	e167      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800972e:	4b0b      	ldr	r3, [pc, #44]	@ (800975c <HAL_RCC_OscConfig+0x240>)
 8009730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009732:	f003 0302 	and.w	r3, r3, #2
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0f0      	beq.n	800971c <HAL_RCC_OscConfig+0x200>
 800973a:	e01b      	b.n	8009774 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800973c:	4b09      	ldr	r3, [pc, #36]	@ (8009764 <HAL_RCC_OscConfig+0x248>)
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009742:	f7fc f8c1 	bl	80058c8 <HAL_GetTick>
 8009746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009748:	e00e      	b.n	8009768 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800974a:	f7fc f8bd 	bl	80058c8 <HAL_GetTick>
 800974e:	4602      	mov	r2, r0
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	2b02      	cmp	r3, #2
 8009756:	d907      	bls.n	8009768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e150      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
 800975c:	40023800 	.word	0x40023800
 8009760:	42470000 	.word	0x42470000
 8009764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009768:	4b88      	ldr	r3, [pc, #544]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 800976a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800976c:	f003 0302 	and.w	r3, r3, #2
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1ea      	bne.n	800974a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 8097 	beq.w	80098b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009782:	2300      	movs	r3, #0
 8009784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009786:	4b81      	ldr	r3, [pc, #516]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 8009788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800978a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10f      	bne.n	80097b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009792:	2300      	movs	r3, #0
 8009794:	60bb      	str	r3, [r7, #8]
 8009796:	4b7d      	ldr	r3, [pc, #500]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 8009798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800979a:	4a7c      	ldr	r2, [pc, #496]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 800979c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80097a2:	4b7a      	ldr	r3, [pc, #488]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 80097a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097aa:	60bb      	str	r3, [r7, #8]
 80097ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80097ae:	2301      	movs	r3, #1
 80097b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097b2:	4b77      	ldr	r3, [pc, #476]	@ (8009990 <HAL_RCC_OscConfig+0x474>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d118      	bne.n	80097f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80097be:	4b74      	ldr	r3, [pc, #464]	@ (8009990 <HAL_RCC_OscConfig+0x474>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a73      	ldr	r2, [pc, #460]	@ (8009990 <HAL_RCC_OscConfig+0x474>)
 80097c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097ca:	f7fc f87d 	bl	80058c8 <HAL_GetTick>
 80097ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097d0:	e008      	b.n	80097e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097d2:	f7fc f879 	bl	80058c8 <HAL_GetTick>
 80097d6:	4602      	mov	r2, r0
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d901      	bls.n	80097e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e10c      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097e4:	4b6a      	ldr	r3, [pc, #424]	@ (8009990 <HAL_RCC_OscConfig+0x474>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d0f0      	beq.n	80097d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d106      	bne.n	8009806 <HAL_RCC_OscConfig+0x2ea>
 80097f8:	4b64      	ldr	r3, [pc, #400]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 80097fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097fc:	4a63      	ldr	r2, [pc, #396]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 80097fe:	f043 0301 	orr.w	r3, r3, #1
 8009802:	6713      	str	r3, [r2, #112]	@ 0x70
 8009804:	e01c      	b.n	8009840 <HAL_RCC_OscConfig+0x324>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	2b05      	cmp	r3, #5
 800980c:	d10c      	bne.n	8009828 <HAL_RCC_OscConfig+0x30c>
 800980e:	4b5f      	ldr	r3, [pc, #380]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 8009810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009812:	4a5e      	ldr	r2, [pc, #376]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 8009814:	f043 0304 	orr.w	r3, r3, #4
 8009818:	6713      	str	r3, [r2, #112]	@ 0x70
 800981a:	4b5c      	ldr	r3, [pc, #368]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 800981c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800981e:	4a5b      	ldr	r2, [pc, #364]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 8009820:	f043 0301 	orr.w	r3, r3, #1
 8009824:	6713      	str	r3, [r2, #112]	@ 0x70
 8009826:	e00b      	b.n	8009840 <HAL_RCC_OscConfig+0x324>
 8009828:	4b58      	ldr	r3, [pc, #352]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 800982a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800982c:	4a57      	ldr	r2, [pc, #348]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 800982e:	f023 0301 	bic.w	r3, r3, #1
 8009832:	6713      	str	r3, [r2, #112]	@ 0x70
 8009834:	4b55      	ldr	r3, [pc, #340]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 8009836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009838:	4a54      	ldr	r2, [pc, #336]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 800983a:	f023 0304 	bic.w	r3, r3, #4
 800983e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d015      	beq.n	8009874 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009848:	f7fc f83e 	bl	80058c8 <HAL_GetTick>
 800984c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800984e:	e00a      	b.n	8009866 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009850:	f7fc f83a 	bl	80058c8 <HAL_GetTick>
 8009854:	4602      	mov	r2, r0
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800985e:	4293      	cmp	r3, r2
 8009860:	d901      	bls.n	8009866 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009862:	2303      	movs	r3, #3
 8009864:	e0cb      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009866:	4b49      	ldr	r3, [pc, #292]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 8009868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800986a:	f003 0302 	and.w	r3, r3, #2
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0ee      	beq.n	8009850 <HAL_RCC_OscConfig+0x334>
 8009872:	e014      	b.n	800989e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009874:	f7fc f828 	bl	80058c8 <HAL_GetTick>
 8009878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800987a:	e00a      	b.n	8009892 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800987c:	f7fc f824 	bl	80058c8 <HAL_GetTick>
 8009880:	4602      	mov	r2, r0
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800988a:	4293      	cmp	r3, r2
 800988c:	d901      	bls.n	8009892 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e0b5      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009892:	4b3e      	ldr	r3, [pc, #248]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 8009894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009896:	f003 0302 	and.w	r3, r3, #2
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1ee      	bne.n	800987c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800989e:	7dfb      	ldrb	r3, [r7, #23]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d105      	bne.n	80098b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098a4:	4b39      	ldr	r3, [pc, #228]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 80098a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098a8:	4a38      	ldr	r2, [pc, #224]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 80098aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 80a1 	beq.w	80099fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098ba:	4b34      	ldr	r3, [pc, #208]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f003 030c 	and.w	r3, r3, #12
 80098c2:	2b08      	cmp	r3, #8
 80098c4:	d05c      	beq.n	8009980 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d141      	bne.n	8009952 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098ce:	4b31      	ldr	r3, [pc, #196]	@ (8009994 <HAL_RCC_OscConfig+0x478>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098d4:	f7fb fff8 	bl	80058c8 <HAL_GetTick>
 80098d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098da:	e008      	b.n	80098ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098dc:	f7fb fff4 	bl	80058c8 <HAL_GetTick>
 80098e0:	4602      	mov	r2, r0
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d901      	bls.n	80098ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e087      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098ee:	4b27      	ldr	r3, [pc, #156]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1f0      	bne.n	80098dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	69da      	ldr	r2, [r3, #28]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	431a      	orrs	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009908:	019b      	lsls	r3, r3, #6
 800990a:	431a      	orrs	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009910:	085b      	lsrs	r3, r3, #1
 8009912:	3b01      	subs	r3, #1
 8009914:	041b      	lsls	r3, r3, #16
 8009916:	431a      	orrs	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991c:	061b      	lsls	r3, r3, #24
 800991e:	491b      	ldr	r1, [pc, #108]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 8009920:	4313      	orrs	r3, r2
 8009922:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009924:	4b1b      	ldr	r3, [pc, #108]	@ (8009994 <HAL_RCC_OscConfig+0x478>)
 8009926:	2201      	movs	r2, #1
 8009928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800992a:	f7fb ffcd 	bl	80058c8 <HAL_GetTick>
 800992e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009930:	e008      	b.n	8009944 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009932:	f7fb ffc9 	bl	80058c8 <HAL_GetTick>
 8009936:	4602      	mov	r2, r0
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	2b02      	cmp	r3, #2
 800993e:	d901      	bls.n	8009944 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009940:	2303      	movs	r3, #3
 8009942:	e05c      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009944:	4b11      	ldr	r3, [pc, #68]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d0f0      	beq.n	8009932 <HAL_RCC_OscConfig+0x416>
 8009950:	e054      	b.n	80099fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009952:	4b10      	ldr	r3, [pc, #64]	@ (8009994 <HAL_RCC_OscConfig+0x478>)
 8009954:	2200      	movs	r2, #0
 8009956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009958:	f7fb ffb6 	bl	80058c8 <HAL_GetTick>
 800995c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800995e:	e008      	b.n	8009972 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009960:	f7fb ffb2 	bl	80058c8 <HAL_GetTick>
 8009964:	4602      	mov	r2, r0
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	2b02      	cmp	r3, #2
 800996c:	d901      	bls.n	8009972 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e045      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009972:	4b06      	ldr	r3, [pc, #24]	@ (800998c <HAL_RCC_OscConfig+0x470>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1f0      	bne.n	8009960 <HAL_RCC_OscConfig+0x444>
 800997e:	e03d      	b.n	80099fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	699b      	ldr	r3, [r3, #24]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d107      	bne.n	8009998 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e038      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
 800998c:	40023800 	.word	0x40023800
 8009990:	40007000 	.word	0x40007000
 8009994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009998:	4b1b      	ldr	r3, [pc, #108]	@ (8009a08 <HAL_RCC_OscConfig+0x4ec>)
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d028      	beq.n	80099f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d121      	bne.n	80099f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099be:	429a      	cmp	r2, r3
 80099c0:	d11a      	bne.n	80099f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80099c8:	4013      	ands	r3, r2
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80099ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d111      	bne.n	80099f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099de:	085b      	lsrs	r3, r3, #1
 80099e0:	3b01      	subs	r3, #1
 80099e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d107      	bne.n	80099f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d001      	beq.n	80099fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e000      	b.n	80099fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	40023800 	.word	0x40023800

08009a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d101      	bne.n	8009a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e0cc      	b.n	8009bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009a20:	4b68      	ldr	r3, [pc, #416]	@ (8009bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0307 	and.w	r3, r3, #7
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d90c      	bls.n	8009a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a2e:	4b65      	ldr	r3, [pc, #404]	@ (8009bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a30:	683a      	ldr	r2, [r7, #0]
 8009a32:	b2d2      	uxtb	r2, r2
 8009a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a36:	4b63      	ldr	r3, [pc, #396]	@ (8009bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 0307 	and.w	r3, r3, #7
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d001      	beq.n	8009a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e0b8      	b.n	8009bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 0302 	and.w	r3, r3, #2
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d020      	beq.n	8009a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 0304 	and.w	r3, r3, #4
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d005      	beq.n	8009a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009a60:	4b59      	ldr	r3, [pc, #356]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	4a58      	ldr	r2, [pc, #352]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009a6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 0308 	and.w	r3, r3, #8
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d005      	beq.n	8009a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009a78:	4b53      	ldr	r3, [pc, #332]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	4a52      	ldr	r2, [pc, #328]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a84:	4b50      	ldr	r3, [pc, #320]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	494d      	ldr	r1, [pc, #308]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d044      	beq.n	8009b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d107      	bne.n	8009aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009aaa:	4b47      	ldr	r3, [pc, #284]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d119      	bne.n	8009aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e07f      	b.n	8009bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d003      	beq.n	8009aca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	d107      	bne.n	8009ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009aca:	4b3f      	ldr	r3, [pc, #252]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d109      	bne.n	8009aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e06f      	b.n	8009bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ada:	4b3b      	ldr	r3, [pc, #236]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 0302 	and.w	r3, r3, #2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d101      	bne.n	8009aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e067      	b.n	8009bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009aea:	4b37      	ldr	r3, [pc, #220]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f023 0203 	bic.w	r2, r3, #3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	4934      	ldr	r1, [pc, #208]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009afc:	f7fb fee4 	bl	80058c8 <HAL_GetTick>
 8009b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b02:	e00a      	b.n	8009b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b04:	f7fb fee0 	bl	80058c8 <HAL_GetTick>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d901      	bls.n	8009b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009b16:	2303      	movs	r3, #3
 8009b18:	e04f      	b.n	8009bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	f003 020c 	and.w	r2, r3, #12
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d1eb      	bne.n	8009b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b2c:	4b25      	ldr	r3, [pc, #148]	@ (8009bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0307 	and.w	r3, r3, #7
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d20c      	bcs.n	8009b54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b3a:	4b22      	ldr	r3, [pc, #136]	@ (8009bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	b2d2      	uxtb	r2, r2
 8009b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b42:	4b20      	ldr	r3, [pc, #128]	@ (8009bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 0307 	and.w	r3, r3, #7
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d001      	beq.n	8009b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e032      	b.n	8009bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0304 	and.w	r3, r3, #4
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d008      	beq.n	8009b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b60:	4b19      	ldr	r3, [pc, #100]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	4916      	ldr	r1, [pc, #88]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 0308 	and.w	r3, r3, #8
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d009      	beq.n	8009b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b7e:	4b12      	ldr	r3, [pc, #72]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	00db      	lsls	r3, r3, #3
 8009b8c:	490e      	ldr	r1, [pc, #56]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009b92:	f000 f821 	bl	8009bd8 <HAL_RCC_GetSysClockFreq>
 8009b96:	4602      	mov	r2, r0
 8009b98:	4b0b      	ldr	r3, [pc, #44]	@ (8009bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	091b      	lsrs	r3, r3, #4
 8009b9e:	f003 030f 	and.w	r3, r3, #15
 8009ba2:	490a      	ldr	r1, [pc, #40]	@ (8009bcc <HAL_RCC_ClockConfig+0x1c0>)
 8009ba4:	5ccb      	ldrb	r3, [r1, r3]
 8009ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8009baa:	4a09      	ldr	r2, [pc, #36]	@ (8009bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8009bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009bae:	4b09      	ldr	r3, [pc, #36]	@ (8009bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7fb fe44 	bl	8005840 <HAL_InitTick>

  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	40023c00 	.word	0x40023c00
 8009bc8:	40023800 	.word	0x40023800
 8009bcc:	080159f0 	.word	0x080159f0
 8009bd0:	200000a8 	.word	0x200000a8
 8009bd4:	200000ac 	.word	0x200000ac

08009bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bdc:	b094      	sub	sp, #80	@ 0x50
 8009bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009be0:	2300      	movs	r3, #0
 8009be2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009be4:	2300      	movs	r3, #0
 8009be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009be8:	2300      	movs	r3, #0
 8009bea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009bf0:	4b79      	ldr	r3, [pc, #484]	@ (8009dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f003 030c 	and.w	r3, r3, #12
 8009bf8:	2b08      	cmp	r3, #8
 8009bfa:	d00d      	beq.n	8009c18 <HAL_RCC_GetSysClockFreq+0x40>
 8009bfc:	2b08      	cmp	r3, #8
 8009bfe:	f200 80e1 	bhi.w	8009dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d002      	beq.n	8009c0c <HAL_RCC_GetSysClockFreq+0x34>
 8009c06:	2b04      	cmp	r3, #4
 8009c08:	d003      	beq.n	8009c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8009c0a:	e0db      	b.n	8009dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009c0c:	4b73      	ldr	r3, [pc, #460]	@ (8009ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8009c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009c10:	e0db      	b.n	8009dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009c12:	4b73      	ldr	r3, [pc, #460]	@ (8009de0 <HAL_RCC_GetSysClockFreq+0x208>)
 8009c14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009c16:	e0d8      	b.n	8009dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009c18:	4b6f      	ldr	r3, [pc, #444]	@ (8009dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c20:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009c22:	4b6d      	ldr	r3, [pc, #436]	@ (8009dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d063      	beq.n	8009cf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8009dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	099b      	lsrs	r3, r3, #6
 8009c34:	2200      	movs	r2, #0
 8009c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c40:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c42:	2300      	movs	r3, #0
 8009c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009c4a:	4622      	mov	r2, r4
 8009c4c:	462b      	mov	r3, r5
 8009c4e:	f04f 0000 	mov.w	r0, #0
 8009c52:	f04f 0100 	mov.w	r1, #0
 8009c56:	0159      	lsls	r1, r3, #5
 8009c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c5c:	0150      	lsls	r0, r2, #5
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4621      	mov	r1, r4
 8009c64:	1a51      	subs	r1, r2, r1
 8009c66:	6139      	str	r1, [r7, #16]
 8009c68:	4629      	mov	r1, r5
 8009c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8009c6e:	617b      	str	r3, [r7, #20]
 8009c70:	f04f 0200 	mov.w	r2, #0
 8009c74:	f04f 0300 	mov.w	r3, #0
 8009c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c7c:	4659      	mov	r1, fp
 8009c7e:	018b      	lsls	r3, r1, #6
 8009c80:	4651      	mov	r1, sl
 8009c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009c86:	4651      	mov	r1, sl
 8009c88:	018a      	lsls	r2, r1, #6
 8009c8a:	4651      	mov	r1, sl
 8009c8c:	ebb2 0801 	subs.w	r8, r2, r1
 8009c90:	4659      	mov	r1, fp
 8009c92:	eb63 0901 	sbc.w	r9, r3, r1
 8009c96:	f04f 0200 	mov.w	r2, #0
 8009c9a:	f04f 0300 	mov.w	r3, #0
 8009c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009caa:	4690      	mov	r8, r2
 8009cac:	4699      	mov	r9, r3
 8009cae:	4623      	mov	r3, r4
 8009cb0:	eb18 0303 	adds.w	r3, r8, r3
 8009cb4:	60bb      	str	r3, [r7, #8]
 8009cb6:	462b      	mov	r3, r5
 8009cb8:	eb49 0303 	adc.w	r3, r9, r3
 8009cbc:	60fb      	str	r3, [r7, #12]
 8009cbe:	f04f 0200 	mov.w	r2, #0
 8009cc2:	f04f 0300 	mov.w	r3, #0
 8009cc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009cca:	4629      	mov	r1, r5
 8009ccc:	024b      	lsls	r3, r1, #9
 8009cce:	4621      	mov	r1, r4
 8009cd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	024a      	lsls	r2, r1, #9
 8009cd8:	4610      	mov	r0, r2
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cde:	2200      	movs	r2, #0
 8009ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ce2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ce4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009ce8:	f7f6 ffde 	bl	8000ca8 <__aeabi_uldivmod>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cf4:	e058      	b.n	8009da8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009cf6:	4b38      	ldr	r3, [pc, #224]	@ (8009dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	099b      	lsrs	r3, r3, #6
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	4618      	mov	r0, r3
 8009d00:	4611      	mov	r1, r2
 8009d02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009d06:	623b      	str	r3, [r7, #32]
 8009d08:	2300      	movs	r3, #0
 8009d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009d10:	4642      	mov	r2, r8
 8009d12:	464b      	mov	r3, r9
 8009d14:	f04f 0000 	mov.w	r0, #0
 8009d18:	f04f 0100 	mov.w	r1, #0
 8009d1c:	0159      	lsls	r1, r3, #5
 8009d1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d22:	0150      	lsls	r0, r2, #5
 8009d24:	4602      	mov	r2, r0
 8009d26:	460b      	mov	r3, r1
 8009d28:	4641      	mov	r1, r8
 8009d2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8009d2e:	4649      	mov	r1, r9
 8009d30:	eb63 0b01 	sbc.w	fp, r3, r1
 8009d34:	f04f 0200 	mov.w	r2, #0
 8009d38:	f04f 0300 	mov.w	r3, #0
 8009d3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009d40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009d44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009d48:	ebb2 040a 	subs.w	r4, r2, sl
 8009d4c:	eb63 050b 	sbc.w	r5, r3, fp
 8009d50:	f04f 0200 	mov.w	r2, #0
 8009d54:	f04f 0300 	mov.w	r3, #0
 8009d58:	00eb      	lsls	r3, r5, #3
 8009d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d5e:	00e2      	lsls	r2, r4, #3
 8009d60:	4614      	mov	r4, r2
 8009d62:	461d      	mov	r5, r3
 8009d64:	4643      	mov	r3, r8
 8009d66:	18e3      	adds	r3, r4, r3
 8009d68:	603b      	str	r3, [r7, #0]
 8009d6a:	464b      	mov	r3, r9
 8009d6c:	eb45 0303 	adc.w	r3, r5, r3
 8009d70:	607b      	str	r3, [r7, #4]
 8009d72:	f04f 0200 	mov.w	r2, #0
 8009d76:	f04f 0300 	mov.w	r3, #0
 8009d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009d7e:	4629      	mov	r1, r5
 8009d80:	028b      	lsls	r3, r1, #10
 8009d82:	4621      	mov	r1, r4
 8009d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009d88:	4621      	mov	r1, r4
 8009d8a:	028a      	lsls	r2, r1, #10
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d92:	2200      	movs	r2, #0
 8009d94:	61bb      	str	r3, [r7, #24]
 8009d96:	61fa      	str	r2, [r7, #28]
 8009d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d9c:	f7f6 ff84 	bl	8000ca8 <__aeabi_uldivmod>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4613      	mov	r3, r2
 8009da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009da8:	4b0b      	ldr	r3, [pc, #44]	@ (8009dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	0c1b      	lsrs	r3, r3, #16
 8009dae:	f003 0303 	and.w	r3, r3, #3
 8009db2:	3301      	adds	r3, #1
 8009db4:	005b      	lsls	r3, r3, #1
 8009db6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8009db8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009dc2:	e002      	b.n	8009dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009dc4:	4b05      	ldr	r3, [pc, #20]	@ (8009ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8009dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3750      	adds	r7, #80	@ 0x50
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dd6:	bf00      	nop
 8009dd8:	40023800 	.word	0x40023800
 8009ddc:	00f42400 	.word	0x00f42400
 8009de0:	007a1200 	.word	0x007a1200

08009de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009de4:	b480      	push	{r7}
 8009de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009de8:	4b03      	ldr	r3, [pc, #12]	@ (8009df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8009dea:	681b      	ldr	r3, [r3, #0]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	200000a8 	.word	0x200000a8

08009dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009e00:	f7ff fff0 	bl	8009de4 <HAL_RCC_GetHCLKFreq>
 8009e04:	4602      	mov	r2, r0
 8009e06:	4b05      	ldr	r3, [pc, #20]	@ (8009e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	0a9b      	lsrs	r3, r3, #10
 8009e0c:	f003 0307 	and.w	r3, r3, #7
 8009e10:	4903      	ldr	r1, [pc, #12]	@ (8009e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e12:	5ccb      	ldrb	r3, [r1, r3]
 8009e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	40023800 	.word	0x40023800
 8009e20:	08015a00 	.word	0x08015a00

08009e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009e28:	f7ff ffdc 	bl	8009de4 <HAL_RCC_GetHCLKFreq>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	4b05      	ldr	r3, [pc, #20]	@ (8009e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	0b5b      	lsrs	r3, r3, #13
 8009e34:	f003 0307 	and.w	r3, r3, #7
 8009e38:	4903      	ldr	r1, [pc, #12]	@ (8009e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e3a:	5ccb      	ldrb	r3, [r1, r3]
 8009e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	40023800 	.word	0x40023800
 8009e48:	08015a00 	.word	0x08015a00

08009e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d101      	bne.n	8009e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e041      	b.n	8009ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d106      	bne.n	8009e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7fb fafc 	bl	8005470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3304      	adds	r3, #4
 8009e88:	4619      	mov	r1, r3
 8009e8a:	4610      	mov	r0, r2
 8009e8c:	f000 faac 	bl	800a3e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
	...

08009eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d001      	beq.n	8009f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e04e      	b.n	8009fa2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2202      	movs	r2, #2
 8009f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68da      	ldr	r2, [r3, #12]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f042 0201 	orr.w	r2, r2, #1
 8009f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a23      	ldr	r2, [pc, #140]	@ (8009fb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d022      	beq.n	8009f6c <HAL_TIM_Base_Start_IT+0x80>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f2e:	d01d      	beq.n	8009f6c <HAL_TIM_Base_Start_IT+0x80>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a1f      	ldr	r2, [pc, #124]	@ (8009fb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d018      	beq.n	8009f6c <HAL_TIM_Base_Start_IT+0x80>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8009fb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d013      	beq.n	8009f6c <HAL_TIM_Base_Start_IT+0x80>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a1c      	ldr	r2, [pc, #112]	@ (8009fbc <HAL_TIM_Base_Start_IT+0xd0>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d00e      	beq.n	8009f6c <HAL_TIM_Base_Start_IT+0x80>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a1b      	ldr	r2, [pc, #108]	@ (8009fc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d009      	beq.n	8009f6c <HAL_TIM_Base_Start_IT+0x80>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a19      	ldr	r2, [pc, #100]	@ (8009fc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d004      	beq.n	8009f6c <HAL_TIM_Base_Start_IT+0x80>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a18      	ldr	r2, [pc, #96]	@ (8009fc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d111      	bne.n	8009f90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	f003 0307 	and.w	r3, r3, #7
 8009f76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b06      	cmp	r3, #6
 8009f7c:	d010      	beq.n	8009fa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f042 0201 	orr.w	r2, r2, #1
 8009f8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f8e:	e007      	b.n	8009fa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f042 0201 	orr.w	r2, r2, #1
 8009f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	40010000 	.word	0x40010000
 8009fb4:	40000400 	.word	0x40000400
 8009fb8:	40000800 	.word	0x40000800
 8009fbc:	40000c00 	.word	0x40000c00
 8009fc0:	40010400 	.word	0x40010400
 8009fc4:	40014000 	.word	0x40014000
 8009fc8:	40001800 	.word	0x40001800

08009fcc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68da      	ldr	r2, [r3, #12]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f022 0201 	bic.w	r2, r2, #1
 8009fe2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6a1a      	ldr	r2, [r3, #32]
 8009fea:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009fee:	4013      	ands	r3, r2
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10f      	bne.n	800a014 <HAL_TIM_Base_Stop_IT+0x48>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6a1a      	ldr	r2, [r3, #32]
 8009ffa:	f240 4344 	movw	r3, #1092	@ 0x444
 8009ffe:	4013      	ands	r3, r2
 800a000:	2b00      	cmp	r3, #0
 800a002:	d107      	bne.n	800a014 <HAL_TIM_Base_Stop_IT+0x48>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f022 0201 	bic.w	r2, r2, #1
 800a012:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b084      	sub	sp, #16
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	f003 0302 	and.w	r3, r3, #2
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d020      	beq.n	800a08e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d01b      	beq.n	800a08e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f06f 0202 	mvn.w	r2, #2
 800a05e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	f003 0303 	and.w	r3, r3, #3
 800a070:	2b00      	cmp	r3, #0
 800a072:	d003      	beq.n	800a07c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f999 	bl	800a3ac <HAL_TIM_IC_CaptureCallback>
 800a07a:	e005      	b.n	800a088 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f98b 	bl	800a398 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f99c 	bl	800a3c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	f003 0304 	and.w	r3, r3, #4
 800a094:	2b00      	cmp	r3, #0
 800a096:	d020      	beq.n	800a0da <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f003 0304 	and.w	r3, r3, #4
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d01b      	beq.n	800a0da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f06f 0204 	mvn.w	r2, #4
 800a0aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2202      	movs	r2, #2
 800a0b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d003      	beq.n	800a0c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f973 	bl	800a3ac <HAL_TIM_IC_CaptureCallback>
 800a0c6:	e005      	b.n	800a0d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f965 	bl	800a398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f976 	bl	800a3c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	f003 0308 	and.w	r3, r3, #8
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d020      	beq.n	800a126 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f003 0308 	and.w	r3, r3, #8
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d01b      	beq.n	800a126 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f06f 0208 	mvn.w	r2, #8
 800a0f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2204      	movs	r2, #4
 800a0fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	69db      	ldr	r3, [r3, #28]
 800a104:	f003 0303 	and.w	r3, r3, #3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f94d 	bl	800a3ac <HAL_TIM_IC_CaptureCallback>
 800a112:	e005      	b.n	800a120 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f93f 	bl	800a398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f950 	bl	800a3c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	f003 0310 	and.w	r3, r3, #16
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d020      	beq.n	800a172 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f003 0310 	and.w	r3, r3, #16
 800a136:	2b00      	cmp	r3, #0
 800a138:	d01b      	beq.n	800a172 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f06f 0210 	mvn.w	r2, #16
 800a142:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2208      	movs	r2, #8
 800a148:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	69db      	ldr	r3, [r3, #28]
 800a150:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a154:	2b00      	cmp	r3, #0
 800a156:	d003      	beq.n	800a160 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f927 	bl	800a3ac <HAL_TIM_IC_CaptureCallback>
 800a15e:	e005      	b.n	800a16c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f919 	bl	800a398 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f92a 	bl	800a3c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00c      	beq.n	800a196 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f003 0301 	and.w	r3, r3, #1
 800a182:	2b00      	cmp	r3, #0
 800a184:	d007      	beq.n	800a196 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f06f 0201 	mvn.w	r2, #1
 800a18e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7f9 f879 	bl	8003288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00c      	beq.n	800a1ba <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d007      	beq.n	800a1ba <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a1b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fae3 	bl	800a780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00c      	beq.n	800a1de <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d007      	beq.n	800a1de <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a1d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f8fb 	bl	800a3d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	f003 0320 	and.w	r3, r3, #32
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00c      	beq.n	800a202 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f003 0320 	and.w	r3, r3, #32
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d007      	beq.n	800a202 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f06f 0220 	mvn.w	r2, #32
 800a1fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fab5 	bl	800a76c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a202:	bf00      	nop
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
 800a212:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d101      	bne.n	800a226 <HAL_TIM_ConfigClockSource+0x1c>
 800a222:	2302      	movs	r3, #2
 800a224:	e0b4      	b.n	800a390 <HAL_TIM_ConfigClockSource+0x186>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2202      	movs	r2, #2
 800a232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a244:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a24c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a25e:	d03e      	beq.n	800a2de <HAL_TIM_ConfigClockSource+0xd4>
 800a260:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a264:	f200 8087 	bhi.w	800a376 <HAL_TIM_ConfigClockSource+0x16c>
 800a268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a26c:	f000 8086 	beq.w	800a37c <HAL_TIM_ConfigClockSource+0x172>
 800a270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a274:	d87f      	bhi.n	800a376 <HAL_TIM_ConfigClockSource+0x16c>
 800a276:	2b70      	cmp	r3, #112	@ 0x70
 800a278:	d01a      	beq.n	800a2b0 <HAL_TIM_ConfigClockSource+0xa6>
 800a27a:	2b70      	cmp	r3, #112	@ 0x70
 800a27c:	d87b      	bhi.n	800a376 <HAL_TIM_ConfigClockSource+0x16c>
 800a27e:	2b60      	cmp	r3, #96	@ 0x60
 800a280:	d050      	beq.n	800a324 <HAL_TIM_ConfigClockSource+0x11a>
 800a282:	2b60      	cmp	r3, #96	@ 0x60
 800a284:	d877      	bhi.n	800a376 <HAL_TIM_ConfigClockSource+0x16c>
 800a286:	2b50      	cmp	r3, #80	@ 0x50
 800a288:	d03c      	beq.n	800a304 <HAL_TIM_ConfigClockSource+0xfa>
 800a28a:	2b50      	cmp	r3, #80	@ 0x50
 800a28c:	d873      	bhi.n	800a376 <HAL_TIM_ConfigClockSource+0x16c>
 800a28e:	2b40      	cmp	r3, #64	@ 0x40
 800a290:	d058      	beq.n	800a344 <HAL_TIM_ConfigClockSource+0x13a>
 800a292:	2b40      	cmp	r3, #64	@ 0x40
 800a294:	d86f      	bhi.n	800a376 <HAL_TIM_ConfigClockSource+0x16c>
 800a296:	2b30      	cmp	r3, #48	@ 0x30
 800a298:	d064      	beq.n	800a364 <HAL_TIM_ConfigClockSource+0x15a>
 800a29a:	2b30      	cmp	r3, #48	@ 0x30
 800a29c:	d86b      	bhi.n	800a376 <HAL_TIM_ConfigClockSource+0x16c>
 800a29e:	2b20      	cmp	r3, #32
 800a2a0:	d060      	beq.n	800a364 <HAL_TIM_ConfigClockSource+0x15a>
 800a2a2:	2b20      	cmp	r3, #32
 800a2a4:	d867      	bhi.n	800a376 <HAL_TIM_ConfigClockSource+0x16c>
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d05c      	beq.n	800a364 <HAL_TIM_ConfigClockSource+0x15a>
 800a2aa:	2b10      	cmp	r3, #16
 800a2ac:	d05a      	beq.n	800a364 <HAL_TIM_ConfigClockSource+0x15a>
 800a2ae:	e062      	b.n	800a376 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2c0:	f000 f9b8 	bl	800a634 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a2d2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	609a      	str	r2, [r3, #8]
      break;
 800a2dc:	e04f      	b.n	800a37e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2ee:	f000 f9a1 	bl	800a634 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a300:	609a      	str	r2, [r3, #8]
      break;
 800a302:	e03c      	b.n	800a37e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a310:	461a      	mov	r2, r3
 800a312:	f000 f915 	bl	800a540 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2150      	movs	r1, #80	@ 0x50
 800a31c:	4618      	mov	r0, r3
 800a31e:	f000 f96e 	bl	800a5fe <TIM_ITRx_SetConfig>
      break;
 800a322:	e02c      	b.n	800a37e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a330:	461a      	mov	r2, r3
 800a332:	f000 f934 	bl	800a59e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2160      	movs	r1, #96	@ 0x60
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 f95e 	bl	800a5fe <TIM_ITRx_SetConfig>
      break;
 800a342:	e01c      	b.n	800a37e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a350:	461a      	mov	r2, r3
 800a352:	f000 f8f5 	bl	800a540 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2140      	movs	r1, #64	@ 0x40
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 f94e 	bl	800a5fe <TIM_ITRx_SetConfig>
      break;
 800a362:	e00c      	b.n	800a37e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4619      	mov	r1, r3
 800a36e:	4610      	mov	r0, r2
 800a370:	f000 f945 	bl	800a5fe <TIM_ITRx_SetConfig>
      break;
 800a374:	e003      	b.n	800a37e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	73fb      	strb	r3, [r7, #15]
      break;
 800a37a:	e000      	b.n	800a37e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a37c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3dc:	bf00      	nop
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a46      	ldr	r2, [pc, #280]	@ (800a514 <TIM_Base_SetConfig+0x12c>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d013      	beq.n	800a428 <TIM_Base_SetConfig+0x40>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a406:	d00f      	beq.n	800a428 <TIM_Base_SetConfig+0x40>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a43      	ldr	r2, [pc, #268]	@ (800a518 <TIM_Base_SetConfig+0x130>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d00b      	beq.n	800a428 <TIM_Base_SetConfig+0x40>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a42      	ldr	r2, [pc, #264]	@ (800a51c <TIM_Base_SetConfig+0x134>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d007      	beq.n	800a428 <TIM_Base_SetConfig+0x40>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a41      	ldr	r2, [pc, #260]	@ (800a520 <TIM_Base_SetConfig+0x138>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d003      	beq.n	800a428 <TIM_Base_SetConfig+0x40>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a40      	ldr	r2, [pc, #256]	@ (800a524 <TIM_Base_SetConfig+0x13c>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d108      	bne.n	800a43a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a42e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	4313      	orrs	r3, r2
 800a438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a35      	ldr	r2, [pc, #212]	@ (800a514 <TIM_Base_SetConfig+0x12c>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d02b      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a448:	d027      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a32      	ldr	r2, [pc, #200]	@ (800a518 <TIM_Base_SetConfig+0x130>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d023      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a31      	ldr	r2, [pc, #196]	@ (800a51c <TIM_Base_SetConfig+0x134>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d01f      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a30      	ldr	r2, [pc, #192]	@ (800a520 <TIM_Base_SetConfig+0x138>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d01b      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a2f      	ldr	r2, [pc, #188]	@ (800a524 <TIM_Base_SetConfig+0x13c>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d017      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a2e      	ldr	r2, [pc, #184]	@ (800a528 <TIM_Base_SetConfig+0x140>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d013      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a2d      	ldr	r2, [pc, #180]	@ (800a52c <TIM_Base_SetConfig+0x144>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d00f      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a2c      	ldr	r2, [pc, #176]	@ (800a530 <TIM_Base_SetConfig+0x148>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d00b      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a2b      	ldr	r2, [pc, #172]	@ (800a534 <TIM_Base_SetConfig+0x14c>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d007      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a2a      	ldr	r2, [pc, #168]	@ (800a538 <TIM_Base_SetConfig+0x150>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d003      	beq.n	800a49a <TIM_Base_SetConfig+0xb2>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a29      	ldr	r2, [pc, #164]	@ (800a53c <TIM_Base_SetConfig+0x154>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d108      	bne.n	800a4ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a10      	ldr	r2, [pc, #64]	@ (800a514 <TIM_Base_SetConfig+0x12c>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d003      	beq.n	800a4e0 <TIM_Base_SetConfig+0xf8>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a12      	ldr	r2, [pc, #72]	@ (800a524 <TIM_Base_SetConfig+0x13c>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d103      	bne.n	800a4e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	691a      	ldr	r2, [r3, #16]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d105      	bne.n	800a506 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	f023 0201 	bic.w	r2, r3, #1
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	611a      	str	r2, [r3, #16]
  }
}
 800a506:	bf00      	nop
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	40010000 	.word	0x40010000
 800a518:	40000400 	.word	0x40000400
 800a51c:	40000800 	.word	0x40000800
 800a520:	40000c00 	.word	0x40000c00
 800a524:	40010400 	.word	0x40010400
 800a528:	40014000 	.word	0x40014000
 800a52c:	40014400 	.word	0x40014400
 800a530:	40014800 	.word	0x40014800
 800a534:	40001800 	.word	0x40001800
 800a538:	40001c00 	.word	0x40001c00
 800a53c:	40002000 	.word	0x40002000

0800a540 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a540:	b480      	push	{r7}
 800a542:	b087      	sub	sp, #28
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6a1b      	ldr	r3, [r3, #32]
 800a550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	f023 0201 	bic.w	r2, r3, #1
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a56a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	011b      	lsls	r3, r3, #4
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	4313      	orrs	r3, r2
 800a574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f023 030a 	bic.w	r3, r3, #10
 800a57c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	4313      	orrs	r3, r2
 800a584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	621a      	str	r2, [r3, #32]
}
 800a592:	bf00      	nop
 800a594:	371c      	adds	r7, #28
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr

0800a59e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b087      	sub	sp, #28
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	60f8      	str	r0, [r7, #12]
 800a5a6:	60b9      	str	r1, [r7, #8]
 800a5a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6a1b      	ldr	r3, [r3, #32]
 800a5b4:	f023 0210 	bic.w	r2, r3, #16
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	031b      	lsls	r3, r3, #12
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a5da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	011b      	lsls	r3, r3, #4
 800a5e0:	697a      	ldr	r2, [r7, #20]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	693a      	ldr	r2, [r7, #16]
 800a5ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	621a      	str	r2, [r3, #32]
}
 800a5f2:	bf00      	nop
 800a5f4:	371c      	adds	r7, #28
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b085      	sub	sp, #20
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a614:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	f043 0307 	orr.w	r3, r3, #7
 800a620:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	609a      	str	r2, [r3, #8]
}
 800a628:	bf00      	nop
 800a62a:	3714      	adds	r7, #20
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a634:	b480      	push	{r7}
 800a636:	b087      	sub	sp, #28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
 800a640:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a64e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	021a      	lsls	r2, r3, #8
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	431a      	orrs	r2, r3
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	4313      	orrs	r3, r2
 800a660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	697a      	ldr	r2, [r7, #20]
 800a666:	609a      	str	r2, [r3, #8]
}
 800a668:	bf00      	nop
 800a66a:	371c      	adds	r7, #28
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a684:	2b01      	cmp	r3, #1
 800a686:	d101      	bne.n	800a68c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a688:	2302      	movs	r3, #2
 800a68a:	e05a      	b.n	800a742 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2202      	movs	r2, #2
 800a698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a21      	ldr	r2, [pc, #132]	@ (800a750 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d022      	beq.n	800a716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6d8:	d01d      	beq.n	800a716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a1d      	ldr	r2, [pc, #116]	@ (800a754 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d018      	beq.n	800a716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a1b      	ldr	r2, [pc, #108]	@ (800a758 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d013      	beq.n	800a716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a1a      	ldr	r2, [pc, #104]	@ (800a75c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d00e      	beq.n	800a716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a18      	ldr	r2, [pc, #96]	@ (800a760 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d009      	beq.n	800a716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a17      	ldr	r2, [pc, #92]	@ (800a764 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d004      	beq.n	800a716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a15      	ldr	r2, [pc, #84]	@ (800a768 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d10c      	bne.n	800a730 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a71c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	4313      	orrs	r3, r2
 800a726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3714      	adds	r7, #20
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	40010000 	.word	0x40010000
 800a754:	40000400 	.word	0x40000400
 800a758:	40000800 	.word	0x40000800
 800a75c:	40000c00 	.word	0x40000c00
 800a760:	40010400 	.word	0x40010400
 800a764:	40014000 	.word	0x40014000
 800a768:	40001800 	.word	0x40001800

0800a76c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e042      	b.n	800a82c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d106      	bne.n	800a7c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f7fa ff5e 	bl	800567c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2224      	movs	r2, #36	@ 0x24
 800a7c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68da      	ldr	r2, [r3, #12]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a7d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 ff6d 	bl	800b6b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	691a      	ldr	r2, [r3, #16]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a7ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	695a      	ldr	r2, [r3, #20]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a7fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68da      	ldr	r2, [r3, #12]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a80c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2220      	movs	r2, #32
 800a818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2220      	movs	r2, #32
 800a820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	4613      	mov	r3, r2
 800a840:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b20      	cmp	r3, #32
 800a84c:	d121      	bne.n	800a892 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <HAL_UART_Transmit_IT+0x26>
 800a854:	88fb      	ldrh	r3, [r7, #6]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d101      	bne.n	800a85e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e01a      	b.n	800a894 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	88fa      	ldrh	r2, [r7, #6]
 800a868:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	88fa      	ldrh	r2, [r7, #6]
 800a86e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2221      	movs	r2, #33	@ 0x21
 800a87a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68da      	ldr	r2, [r3, #12]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a88c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	e000      	b.n	800a894 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a892:	2302      	movs	r3, #2
  }
}
 800a894:	4618      	mov	r0, r3
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b08c      	sub	sp, #48	@ 0x30
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	2b20      	cmp	r3, #32
 800a8b8:	d156      	bne.n	800a968 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <HAL_UART_Transmit_DMA+0x26>
 800a8c0:	88fb      	ldrh	r3, [r7, #6]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e04f      	b.n	800a96a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	88fa      	ldrh	r2, [r7, #6]
 800a8d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	88fa      	ldrh	r2, [r7, #6]
 800a8da:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2221      	movs	r2, #33	@ 0x21
 800a8e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ee:	4a21      	ldr	r2, [pc, #132]	@ (800a974 <HAL_UART_Transmit_DMA+0xd4>)
 800a8f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f6:	4a20      	ldr	r2, [pc, #128]	@ (800a978 <HAL_UART_Transmit_DMA+0xd8>)
 800a8f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8fe:	4a1f      	ldr	r2, [pc, #124]	@ (800a97c <HAL_UART_Transmit_DMA+0xdc>)
 800a900:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a906:	2200      	movs	r2, #0
 800a908:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a90a:	f107 0308 	add.w	r3, r7, #8
 800a90e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a916:	6819      	ldr	r1, [r3, #0]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	3304      	adds	r3, #4
 800a91e:	461a      	mov	r2, r3
 800a920:	88fb      	ldrh	r3, [r7, #6]
 800a922:	f7fb fef9 	bl	8006718 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a92e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3314      	adds	r3, #20
 800a936:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	e853 3f00 	ldrex	r3, [r3]
 800a93e:	617b      	str	r3, [r7, #20]
   return(result);
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a946:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3314      	adds	r3, #20
 800a94e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a950:	627a      	str	r2, [r7, #36]	@ 0x24
 800a952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a954:	6a39      	ldr	r1, [r7, #32]
 800a956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a958:	e841 2300 	strex	r3, r2, [r1]
 800a95c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1e5      	bne.n	800a930 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800a964:	2300      	movs	r3, #0
 800a966:	e000      	b.n	800a96a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800a968:	2302      	movs	r3, #2
  }
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3730      	adds	r7, #48	@ 0x30
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	0800af45 	.word	0x0800af45
 800a978:	0800afdf 	.word	0x0800afdf
 800a97c:	0800b163 	.word	0x0800b163

0800a980 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	4613      	mov	r3, r2
 800a98c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b20      	cmp	r3, #32
 800a998:	d112      	bne.n	800a9c0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <HAL_UART_Receive_DMA+0x26>
 800a9a0:	88fb      	ldrh	r3, [r7, #6]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d101      	bne.n	800a9aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e00b      	b.n	800a9c2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a9b0:	88fb      	ldrh	r3, [r7, #6]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	68b9      	ldr	r1, [r7, #8]
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f000 fc1e 	bl	800b1f8 <UART_Start_Receive_DMA>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	e000      	b.n	800a9c2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a9c0:	2302      	movs	r3, #2
  }
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
	...

0800a9cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b0ba      	sub	sp, #232	@ 0xe8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a9fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa02:	f003 030f 	and.w	r3, r3, #15
 800aa06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800aa0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10f      	bne.n	800aa32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aa12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa16:	f003 0320 	and.w	r3, r3, #32
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d009      	beq.n	800aa32 <HAL_UART_IRQHandler+0x66>
 800aa1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa22:	f003 0320 	and.w	r3, r3, #32
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d003      	beq.n	800aa32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fd85 	bl	800b53a <UART_Receive_IT>
      return;
 800aa30:	e25b      	b.n	800aeea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aa32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 80de 	beq.w	800abf8 <HAL_UART_IRQHandler+0x22c>
 800aa3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d106      	bne.n	800aa56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aa48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa4c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 80d1 	beq.w	800abf8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aa56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa5a:	f003 0301 	and.w	r3, r3, #1
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00b      	beq.n	800aa7a <HAL_UART_IRQHandler+0xae>
 800aa62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d005      	beq.n	800aa7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa72:	f043 0201 	orr.w	r2, r3, #1
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa7e:	f003 0304 	and.w	r3, r3, #4
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00b      	beq.n	800aa9e <HAL_UART_IRQHandler+0xd2>
 800aa86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa8a:	f003 0301 	and.w	r3, r3, #1
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d005      	beq.n	800aa9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa96:	f043 0202 	orr.w	r2, r3, #2
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaa2:	f003 0302 	and.w	r3, r3, #2
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00b      	beq.n	800aac2 <HAL_UART_IRQHandler+0xf6>
 800aaaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d005      	beq.n	800aac2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaba:	f043 0204 	orr.w	r2, r3, #4
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aac6:	f003 0308 	and.w	r3, r3, #8
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d011      	beq.n	800aaf2 <HAL_UART_IRQHandler+0x126>
 800aace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aad2:	f003 0320 	and.w	r3, r3, #32
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d105      	bne.n	800aae6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aade:	f003 0301 	and.w	r3, r3, #1
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d005      	beq.n	800aaf2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaea:	f043 0208 	orr.w	r2, r3, #8
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f000 81f2 	beq.w	800aee0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab00:	f003 0320 	and.w	r3, r3, #32
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d008      	beq.n	800ab1a <HAL_UART_IRQHandler+0x14e>
 800ab08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab0c:	f003 0320 	and.w	r3, r3, #32
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fd10 	bl	800b53a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	695b      	ldr	r3, [r3, #20]
 800ab20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab24:	2b40      	cmp	r3, #64	@ 0x40
 800ab26:	bf0c      	ite	eq
 800ab28:	2301      	moveq	r3, #1
 800ab2a:	2300      	movne	r3, #0
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab36:	f003 0308 	and.w	r3, r3, #8
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d103      	bne.n	800ab46 <HAL_UART_IRQHandler+0x17a>
 800ab3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d04f      	beq.n	800abe6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fc18 	bl	800b37c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab56:	2b40      	cmp	r3, #64	@ 0x40
 800ab58:	d141      	bne.n	800abde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	3314      	adds	r3, #20
 800ab60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ab68:	e853 3f00 	ldrex	r3, [r3]
 800ab6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ab70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	3314      	adds	r3, #20
 800ab82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ab86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ab8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ab92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ab96:	e841 2300 	strex	r3, r2, [r1]
 800ab9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ab9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1d9      	bne.n	800ab5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d013      	beq.n	800abd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abb2:	4a7e      	ldr	r2, [pc, #504]	@ (800adac <HAL_UART_IRQHandler+0x3e0>)
 800abb4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fb fe74 	bl	80068a8 <HAL_DMA_Abort_IT>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d016      	beq.n	800abf4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800abd0:	4610      	mov	r0, r2
 800abd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abd4:	e00e      	b.n	800abf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f99e 	bl	800af18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abdc:	e00a      	b.n	800abf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f99a 	bl	800af18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abe4:	e006      	b.n	800abf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 f996 	bl	800af18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800abf2:	e175      	b.n	800aee0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abf4:	bf00      	nop
    return;
 800abf6:	e173      	b.n	800aee0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	f040 814f 	bne.w	800aea0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ac02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac06:	f003 0310 	and.w	r3, r3, #16
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f000 8148 	beq.w	800aea0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ac10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac14:	f003 0310 	and.w	r3, r3, #16
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 8141 	beq.w	800aea0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60bb      	str	r3, [r7, #8]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	60bb      	str	r3, [r7, #8]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	60bb      	str	r3, [r7, #8]
 800ac32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac3e:	2b40      	cmp	r3, #64	@ 0x40
 800ac40:	f040 80b6 	bne.w	800adb0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 8145 	beq.w	800aee4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ac5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac62:	429a      	cmp	r2, r3
 800ac64:	f080 813e 	bcs.w	800aee4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac74:	69db      	ldr	r3, [r3, #28]
 800ac76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac7a:	f000 8088 	beq.w	800ad8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	330c      	adds	r3, #12
 800ac84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ac94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ac98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	330c      	adds	r3, #12
 800aca6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800acaa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800acae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800acb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800acba:	e841 2300 	strex	r3, r2, [r1]
 800acbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800acc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1d9      	bne.n	800ac7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	3314      	adds	r3, #20
 800acd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800acd4:	e853 3f00 	ldrex	r3, [r3]
 800acd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800acda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800acdc:	f023 0301 	bic.w	r3, r3, #1
 800ace0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	3314      	adds	r3, #20
 800acea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800acee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800acf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800acf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800acfa:	e841 2300 	strex	r3, r2, [r1]
 800acfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ad00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1e1      	bne.n	800acca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	3314      	adds	r3, #20
 800ad0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad10:	e853 3f00 	ldrex	r3, [r3]
 800ad14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ad16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3314      	adds	r3, #20
 800ad26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ad2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ad2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ad30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ad32:	e841 2300 	strex	r3, r2, [r1]
 800ad36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ad38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1e3      	bne.n	800ad06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2220      	movs	r2, #32
 800ad42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	330c      	adds	r3, #12
 800ad52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad56:	e853 3f00 	ldrex	r3, [r3]
 800ad5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ad5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad5e:	f023 0310 	bic.w	r3, r3, #16
 800ad62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	330c      	adds	r3, #12
 800ad6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ad70:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ad72:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ad76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad78:	e841 2300 	strex	r3, r2, [r1]
 800ad7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ad7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1e3      	bne.n	800ad4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fb fd1d 	bl	80067c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2202      	movs	r2, #2
 800ad92:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	4619      	mov	r1, r3
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 f8c1 	bl	800af2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800adaa:	e09b      	b.n	800aee4 <HAL_UART_IRQHandler+0x518>
 800adac:	0800b443 	.word	0x0800b443
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800adb8:	b29b      	uxth	r3, r3
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 808e 	beq.w	800aee8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800adcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 8089 	beq.w	800aee8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	330c      	adds	r3, #12
 800addc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade0:	e853 3f00 	ldrex	r3, [r3]
 800ade4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ade6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ade8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800adec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	330c      	adds	r3, #12
 800adf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800adfa:	647a      	str	r2, [r7, #68]	@ 0x44
 800adfc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae02:	e841 2300 	strex	r3, r2, [r1]
 800ae06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1e3      	bne.n	800add6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3314      	adds	r3, #20
 800ae14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae18:	e853 3f00 	ldrex	r3, [r3]
 800ae1c:	623b      	str	r3, [r7, #32]
   return(result);
 800ae1e:	6a3b      	ldr	r3, [r7, #32]
 800ae20:	f023 0301 	bic.w	r3, r3, #1
 800ae24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3314      	adds	r3, #20
 800ae2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ae32:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae3a:	e841 2300 	strex	r3, r2, [r1]
 800ae3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1e3      	bne.n	800ae0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2220      	movs	r2, #32
 800ae4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	330c      	adds	r3, #12
 800ae5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	e853 3f00 	ldrex	r3, [r3]
 800ae62:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f023 0310 	bic.w	r3, r3, #16
 800ae6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	330c      	adds	r3, #12
 800ae74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ae78:	61fa      	str	r2, [r7, #28]
 800ae7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	69b9      	ldr	r1, [r7, #24]
 800ae7e:	69fa      	ldr	r2, [r7, #28]
 800ae80:	e841 2300 	strex	r3, r2, [r1]
 800ae84:	617b      	str	r3, [r7, #20]
   return(result);
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e3      	bne.n	800ae54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2202      	movs	r2, #2
 800ae90:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae96:	4619      	mov	r1, r3
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 f847 	bl	800af2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ae9e:	e023      	b.n	800aee8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d009      	beq.n	800aec0 <HAL_UART_IRQHandler+0x4f4>
 800aeac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aeb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d003      	beq.n	800aec0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fad6 	bl	800b46a <UART_Transmit_IT>
    return;
 800aebe:	e014      	b.n	800aeea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00e      	beq.n	800aeea <HAL_UART_IRQHandler+0x51e>
 800aecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d008      	beq.n	800aeea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fb16 	bl	800b50a <UART_EndTransmit_IT>
    return;
 800aede:	e004      	b.n	800aeea <HAL_UART_IRQHandler+0x51e>
    return;
 800aee0:	bf00      	nop
 800aee2:	e002      	b.n	800aeea <HAL_UART_IRQHandler+0x51e>
      return;
 800aee4:	bf00      	nop
 800aee6:	e000      	b.n	800aeea <HAL_UART_IRQHandler+0x51e>
      return;
 800aee8:	bf00      	nop
  }
}
 800aeea:	37e8      	adds	r7, #232	@ 0xe8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800aef8:	bf00      	nop
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	460b      	mov	r3, r1
 800af36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af38:	bf00      	nop
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b090      	sub	sp, #64	@ 0x40
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d137      	bne.n	800afd0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800af60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af62:	2200      	movs	r2, #0
 800af64:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	3314      	adds	r3, #20
 800af6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af70:	e853 3f00 	ldrex	r3, [r3]
 800af74:	623b      	str	r3, [r7, #32]
   return(result);
 800af76:	6a3b      	ldr	r3, [r7, #32]
 800af78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	3314      	adds	r3, #20
 800af84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af86:	633a      	str	r2, [r7, #48]	@ 0x30
 800af88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af8e:	e841 2300 	strex	r3, r2, [r1]
 800af92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1e5      	bne.n	800af66 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	330c      	adds	r3, #12
 800afa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	e853 3f00 	ldrex	r3, [r3]
 800afa8:	60fb      	str	r3, [r7, #12]
   return(result);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800afb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	330c      	adds	r3, #12
 800afb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afba:	61fa      	str	r2, [r7, #28]
 800afbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afbe:	69b9      	ldr	r1, [r7, #24]
 800afc0:	69fa      	ldr	r2, [r7, #28]
 800afc2:	e841 2300 	strex	r3, r2, [r1]
 800afc6:	617b      	str	r3, [r7, #20]
   return(result);
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1e5      	bne.n	800af9a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afce:	e002      	b.n	800afd6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800afd0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800afd2:	f7f6 ff41 	bl	8001e58 <HAL_UART_TxCpltCallback>
}
 800afd6:	bf00      	nop
 800afd8:	3740      	adds	r7, #64	@ 0x40
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b084      	sub	sp, #16
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800afec:	68f8      	ldr	r0, [r7, #12]
 800afee:	f7ff ff7f 	bl	800aef0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aff2:	bf00      	nop
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b09c      	sub	sp, #112	@ 0x70
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b006:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b012:	2b00      	cmp	r3, #0
 800b014:	d172      	bne.n	800b0fc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b018:	2200      	movs	r2, #0
 800b01a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b01c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	330c      	adds	r3, #12
 800b022:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b026:	e853 3f00 	ldrex	r3, [r3]
 800b02a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b02c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b02e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b032:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	330c      	adds	r3, #12
 800b03a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b03c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b03e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b040:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b042:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b044:	e841 2300 	strex	r3, r2, [r1]
 800b048:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b04a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1e5      	bne.n	800b01c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b050:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	3314      	adds	r3, #20
 800b056:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b05a:	e853 3f00 	ldrex	r3, [r3]
 800b05e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b062:	f023 0301 	bic.w	r3, r3, #1
 800b066:	667b      	str	r3, [r7, #100]	@ 0x64
 800b068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	3314      	adds	r3, #20
 800b06e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b070:	647a      	str	r2, [r7, #68]	@ 0x44
 800b072:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b074:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b078:	e841 2300 	strex	r3, r2, [r1]
 800b07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b07e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1e5      	bne.n	800b050 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	3314      	adds	r3, #20
 800b08a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08e:	e853 3f00 	ldrex	r3, [r3]
 800b092:	623b      	str	r3, [r7, #32]
   return(result);
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b09a:	663b      	str	r3, [r7, #96]	@ 0x60
 800b09c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	3314      	adds	r3, #20
 800b0a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b0a4:	633a      	str	r2, [r7, #48]	@ 0x30
 800b0a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0ac:	e841 2300 	strex	r3, r2, [r1]
 800b0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1e5      	bne.n	800b084 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b0b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0ba:	2220      	movs	r2, #32
 800b0bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d119      	bne.n	800b0fc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	330c      	adds	r3, #12
 800b0ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	e853 3f00 	ldrex	r3, [r3]
 800b0d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f023 0310 	bic.w	r3, r3, #16
 800b0de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b0e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	330c      	adds	r3, #12
 800b0e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b0e8:	61fa      	str	r2, [r7, #28]
 800b0ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ec:	69b9      	ldr	r1, [r7, #24]
 800b0ee:	69fa      	ldr	r2, [r7, #28]
 800b0f0:	e841 2300 	strex	r3, r2, [r1]
 800b0f4:	617b      	str	r3, [r7, #20]
   return(result);
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1e5      	bne.n	800b0c8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0fe:	2200      	movs	r2, #0
 800b100:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b106:	2b01      	cmp	r3, #1
 800b108:	d106      	bne.n	800b118 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b10a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b10c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b10e:	4619      	mov	r1, r3
 800b110:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b112:	f7ff ff0b 	bl	800af2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b116:	e002      	b.n	800b11e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b118:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b11a:	f7f7 f933 	bl	8002384 <HAL_UART_RxCpltCallback>
}
 800b11e:	bf00      	nop
 800b120:	3770      	adds	r7, #112	@ 0x70
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b084      	sub	sp, #16
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b132:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2201      	movs	r2, #1
 800b138:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d108      	bne.n	800b154 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b146:	085b      	lsrs	r3, r3, #1
 800b148:	b29b      	uxth	r3, r3
 800b14a:	4619      	mov	r1, r3
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f7ff feed 	bl	800af2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b152:	e002      	b.n	800b15a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f7ff fed5 	bl	800af04 <HAL_UART_RxHalfCpltCallback>
}
 800b15a:	bf00      	nop
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b16a:	2300      	movs	r3, #0
 800b16c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b172:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	695b      	ldr	r3, [r3, #20]
 800b17a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b17e:	2b80      	cmp	r3, #128	@ 0x80
 800b180:	bf0c      	ite	eq
 800b182:	2301      	moveq	r3, #1
 800b184:	2300      	movne	r3, #0
 800b186:	b2db      	uxtb	r3, r3
 800b188:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b190:	b2db      	uxtb	r3, r3
 800b192:	2b21      	cmp	r3, #33	@ 0x21
 800b194:	d108      	bne.n	800b1a8 <UART_DMAError+0x46>
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d005      	beq.n	800b1a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800b1a2:	68b8      	ldr	r0, [r7, #8]
 800b1a4:	f000 f8c2 	bl	800b32c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1b2:	2b40      	cmp	r3, #64	@ 0x40
 800b1b4:	bf0c      	ite	eq
 800b1b6:	2301      	moveq	r3, #1
 800b1b8:	2300      	movne	r3, #0
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	2b22      	cmp	r3, #34	@ 0x22
 800b1c8:	d108      	bne.n	800b1dc <UART_DMAError+0x7a>
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d005      	beq.n	800b1dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800b1d6:	68b8      	ldr	r0, [r7, #8]
 800b1d8:	f000 f8d0 	bl	800b37c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1e0:	f043 0210 	orr.w	r2, r3, #16
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b1e8:	68b8      	ldr	r0, [r7, #8]
 800b1ea:	f7ff fe95 	bl	800af18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1ee:	bf00      	nop
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
	...

0800b1f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b098      	sub	sp, #96	@ 0x60
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	4613      	mov	r3, r2
 800b204:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b206:	68ba      	ldr	r2, [r7, #8]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	88fa      	ldrh	r2, [r7, #6]
 800b210:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2222      	movs	r2, #34	@ 0x22
 800b21c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b224:	4a3e      	ldr	r2, [pc, #248]	@ (800b320 <UART_Start_Receive_DMA+0x128>)
 800b226:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b22c:	4a3d      	ldr	r2, [pc, #244]	@ (800b324 <UART_Start_Receive_DMA+0x12c>)
 800b22e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b234:	4a3c      	ldr	r2, [pc, #240]	@ (800b328 <UART_Start_Receive_DMA+0x130>)
 800b236:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b23c:	2200      	movs	r2, #0
 800b23e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b240:	f107 0308 	add.w	r3, r7, #8
 800b244:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	3304      	adds	r3, #4
 800b250:	4619      	mov	r1, r3
 800b252:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	88fb      	ldrh	r3, [r7, #6]
 800b258:	f7fb fa5e 	bl	8006718 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b25c:	2300      	movs	r3, #0
 800b25e:	613b      	str	r3, [r7, #16]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	613b      	str	r3, [r7, #16]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	613b      	str	r3, [r7, #16]
 800b270:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d019      	beq.n	800b2ae <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	330c      	adds	r3, #12
 800b280:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b284:	e853 3f00 	ldrex	r3, [r3]
 800b288:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b28a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b28c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b290:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	330c      	adds	r3, #12
 800b298:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b29a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b29c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b2a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b2a2:	e841 2300 	strex	r3, r2, [r1]
 800b2a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b2a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1e5      	bne.n	800b27a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3314      	adds	r3, #20
 800b2b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b8:	e853 3f00 	ldrex	r3, [r3]
 800b2bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c0:	f043 0301 	orr.w	r3, r3, #1
 800b2c4:	657b      	str	r3, [r7, #84]	@ 0x54
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	3314      	adds	r3, #20
 800b2cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b2ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b2d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b2d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2d6:	e841 2300 	strex	r3, r2, [r1]
 800b2da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1e5      	bne.n	800b2ae <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	3314      	adds	r3, #20
 800b2e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	e853 3f00 	ldrex	r3, [r3]
 800b2f0:	617b      	str	r3, [r7, #20]
   return(result);
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2f8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3314      	adds	r3, #20
 800b300:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b302:	627a      	str	r2, [r7, #36]	@ 0x24
 800b304:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b306:	6a39      	ldr	r1, [r7, #32]
 800b308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b30a:	e841 2300 	strex	r3, r2, [r1]
 800b30e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1e5      	bne.n	800b2e2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3760      	adds	r7, #96	@ 0x60
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	0800affb 	.word	0x0800affb
 800b324:	0800b127 	.word	0x0800b127
 800b328:	0800b163 	.word	0x0800b163

0800b32c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b089      	sub	sp, #36	@ 0x24
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	330c      	adds	r3, #12
 800b33a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	e853 3f00 	ldrex	r3, [r3]
 800b342:	60bb      	str	r3, [r7, #8]
   return(result);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b34a:	61fb      	str	r3, [r7, #28]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	330c      	adds	r3, #12
 800b352:	69fa      	ldr	r2, [r7, #28]
 800b354:	61ba      	str	r2, [r7, #24]
 800b356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b358:	6979      	ldr	r1, [r7, #20]
 800b35a:	69ba      	ldr	r2, [r7, #24]
 800b35c:	e841 2300 	strex	r3, r2, [r1]
 800b360:	613b      	str	r3, [r7, #16]
   return(result);
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1e5      	bne.n	800b334 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2220      	movs	r2, #32
 800b36c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800b370:	bf00      	nop
 800b372:	3724      	adds	r7, #36	@ 0x24
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b095      	sub	sp, #84	@ 0x54
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	330c      	adds	r3, #12
 800b38a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b38e:	e853 3f00 	ldrex	r3, [r3]
 800b392:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b396:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b39a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	330c      	adds	r3, #12
 800b3a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3a4:	643a      	str	r2, [r7, #64]	@ 0x40
 800b3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b3aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b3ac:	e841 2300 	strex	r3, r2, [r1]
 800b3b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1e5      	bne.n	800b384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	3314      	adds	r3, #20
 800b3be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c0:	6a3b      	ldr	r3, [r7, #32]
 800b3c2:	e853 3f00 	ldrex	r3, [r3]
 800b3c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	f023 0301 	bic.w	r3, r3, #1
 800b3ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3314      	adds	r3, #20
 800b3d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3e0:	e841 2300 	strex	r3, r2, [r1]
 800b3e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1e5      	bne.n	800b3b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d119      	bne.n	800b428 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	330c      	adds	r3, #12
 800b3fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	e853 3f00 	ldrex	r3, [r3]
 800b402:	60bb      	str	r3, [r7, #8]
   return(result);
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	f023 0310 	bic.w	r3, r3, #16
 800b40a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	330c      	adds	r3, #12
 800b412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b414:	61ba      	str	r2, [r7, #24]
 800b416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b418:	6979      	ldr	r1, [r7, #20]
 800b41a:	69ba      	ldr	r2, [r7, #24]
 800b41c:	e841 2300 	strex	r3, r2, [r1]
 800b420:	613b      	str	r3, [r7, #16]
   return(result);
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1e5      	bne.n	800b3f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2220      	movs	r2, #32
 800b42c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2200      	movs	r2, #0
 800b434:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b436:	bf00      	nop
 800b438:	3754      	adds	r7, #84	@ 0x54
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b442:	b580      	push	{r7, lr}
 800b444:	b084      	sub	sp, #16
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b44e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f7ff fd5b 	bl	800af18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b462:	bf00      	nop
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b46a:	b480      	push	{r7}
 800b46c:	b085      	sub	sp, #20
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	2b21      	cmp	r3, #33	@ 0x21
 800b47c:	d13e      	bne.n	800b4fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b486:	d114      	bne.n	800b4b2 <UART_Transmit_IT+0x48>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d110      	bne.n	800b4b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a1b      	ldr	r3, [r3, #32]
 800b494:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	881b      	ldrh	r3, [r3, #0]
 800b49a:	461a      	mov	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a1b      	ldr	r3, [r3, #32]
 800b4aa:	1c9a      	adds	r2, r3, #2
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	621a      	str	r2, [r3, #32]
 800b4b0:	e008      	b.n	800b4c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a1b      	ldr	r3, [r3, #32]
 800b4b6:	1c59      	adds	r1, r3, #1
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	6211      	str	r1, [r2, #32]
 800b4bc:	781a      	ldrb	r2, [r3, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10f      	bne.n	800b4f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68da      	ldr	r2, [r3, #12]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b4e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68da      	ldr	r2, [r3, #12]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	e000      	b.n	800b4fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b4fc:	2302      	movs	r3, #2
  }
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3714      	adds	r7, #20
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr

0800b50a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b082      	sub	sp, #8
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	68da      	ldr	r2, [r3, #12]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b520:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2220      	movs	r2, #32
 800b526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7f6 fc94 	bl	8001e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b08c      	sub	sp, #48	@ 0x30
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	2b22      	cmp	r3, #34	@ 0x22
 800b54c:	f040 80ae 	bne.w	800b6ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b558:	d117      	bne.n	800b58a <UART_Receive_IT+0x50>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d113      	bne.n	800b58a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b562:	2300      	movs	r3, #0
 800b564:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b56a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	b29b      	uxth	r3, r3
 800b574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b578:	b29a      	uxth	r2, r3
 800b57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b582:	1c9a      	adds	r2, r3, #2
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	629a      	str	r2, [r3, #40]	@ 0x28
 800b588:	e026      	b.n	800b5d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b58e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800b590:	2300      	movs	r3, #0
 800b592:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b59c:	d007      	beq.n	800b5ae <UART_Receive_IT+0x74>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10a      	bne.n	800b5bc <UART_Receive_IT+0x82>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d106      	bne.n	800b5bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	b2da      	uxtb	r2, r3
 800b5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b8:	701a      	strb	r2, [r3, #0]
 800b5ba:	e008      	b.n	800b5ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5d2:	1c5a      	adds	r2, r3, #1
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d15d      	bne.n	800b6a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	68da      	ldr	r2, [r3, #12]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f022 0220 	bic.w	r2, r2, #32
 800b5fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68da      	ldr	r2, [r3, #12]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b60a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	695a      	ldr	r2, [r3, #20]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f022 0201 	bic.w	r2, r2, #1
 800b61a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2220      	movs	r2, #32
 800b620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b62e:	2b01      	cmp	r3, #1
 800b630:	d135      	bne.n	800b69e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	330c      	adds	r3, #12
 800b63e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	e853 3f00 	ldrex	r3, [r3]
 800b646:	613b      	str	r3, [r7, #16]
   return(result);
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	f023 0310 	bic.w	r3, r3, #16
 800b64e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	330c      	adds	r3, #12
 800b656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b658:	623a      	str	r2, [r7, #32]
 800b65a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b65c:	69f9      	ldr	r1, [r7, #28]
 800b65e:	6a3a      	ldr	r2, [r7, #32]
 800b660:	e841 2300 	strex	r3, r2, [r1]
 800b664:	61bb      	str	r3, [r7, #24]
   return(result);
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d1e5      	bne.n	800b638 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f003 0310 	and.w	r3, r3, #16
 800b676:	2b10      	cmp	r3, #16
 800b678:	d10a      	bne.n	800b690 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b67a:	2300      	movs	r3, #0
 800b67c:	60fb      	str	r3, [r7, #12]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	60fb      	str	r3, [r7, #12]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	60fb      	str	r3, [r7, #12]
 800b68e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b694:	4619      	mov	r1, r3
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7ff fc48 	bl	800af2c <HAL_UARTEx_RxEventCallback>
 800b69c:	e002      	b.n	800b6a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7f6 fe70 	bl	8002384 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	e002      	b.n	800b6ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	e000      	b.n	800b6ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b6ac:	2302      	movs	r3, #2
  }
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3730      	adds	r7, #48	@ 0x30
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
	...

0800b6b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6bc:	b0c0      	sub	sp, #256	@ 0x100
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b6d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6d4:	68d9      	ldr	r1, [r3, #12]
 800b6d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	ea40 0301 	orr.w	r3, r0, r1
 800b6e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b6e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6e6:	689a      	ldr	r2, [r3, #8]
 800b6e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6ec:	691b      	ldr	r3, [r3, #16]
 800b6ee:	431a      	orrs	r2, r3
 800b6f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6f4:	695b      	ldr	r3, [r3, #20]
 800b6f6:	431a      	orrs	r2, r3
 800b6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6fc:	69db      	ldr	r3, [r3, #28]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b710:	f021 010c 	bic.w	r1, r1, #12
 800b714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b71e:	430b      	orrs	r3, r1
 800b720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	695b      	ldr	r3, [r3, #20]
 800b72a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b72e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b732:	6999      	ldr	r1, [r3, #24]
 800b734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	ea40 0301 	orr.w	r3, r0, r1
 800b73e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	4b8f      	ldr	r3, [pc, #572]	@ (800b984 <UART_SetConfig+0x2cc>)
 800b748:	429a      	cmp	r2, r3
 800b74a:	d005      	beq.n	800b758 <UART_SetConfig+0xa0>
 800b74c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	4b8d      	ldr	r3, [pc, #564]	@ (800b988 <UART_SetConfig+0x2d0>)
 800b754:	429a      	cmp	r2, r3
 800b756:	d104      	bne.n	800b762 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b758:	f7fe fb64 	bl	8009e24 <HAL_RCC_GetPCLK2Freq>
 800b75c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b760:	e003      	b.n	800b76a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b762:	f7fe fb4b 	bl	8009dfc <HAL_RCC_GetPCLK1Freq>
 800b766:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b76a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b76e:	69db      	ldr	r3, [r3, #28]
 800b770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b774:	f040 810c 	bne.w	800b990 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b77c:	2200      	movs	r2, #0
 800b77e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b782:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b78a:	4622      	mov	r2, r4
 800b78c:	462b      	mov	r3, r5
 800b78e:	1891      	adds	r1, r2, r2
 800b790:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b792:	415b      	adcs	r3, r3
 800b794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b79a:	4621      	mov	r1, r4
 800b79c:	eb12 0801 	adds.w	r8, r2, r1
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	eb43 0901 	adc.w	r9, r3, r1
 800b7a6:	f04f 0200 	mov.w	r2, #0
 800b7aa:	f04f 0300 	mov.w	r3, #0
 800b7ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b7b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b7b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b7ba:	4690      	mov	r8, r2
 800b7bc:	4699      	mov	r9, r3
 800b7be:	4623      	mov	r3, r4
 800b7c0:	eb18 0303 	adds.w	r3, r8, r3
 800b7c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b7c8:	462b      	mov	r3, r5
 800b7ca:	eb49 0303 	adc.w	r3, r9, r3
 800b7ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b7d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b7de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b7e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	18db      	adds	r3, r3, r3
 800b7ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	eb42 0303 	adc.w	r3, r2, r3
 800b7f2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b7f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b7f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b7fc:	f7f5 fa54 	bl	8000ca8 <__aeabi_uldivmod>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	4b61      	ldr	r3, [pc, #388]	@ (800b98c <UART_SetConfig+0x2d4>)
 800b806:	fba3 2302 	umull	r2, r3, r3, r2
 800b80a:	095b      	lsrs	r3, r3, #5
 800b80c:	011c      	lsls	r4, r3, #4
 800b80e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b812:	2200      	movs	r2, #0
 800b814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b818:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b81c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b820:	4642      	mov	r2, r8
 800b822:	464b      	mov	r3, r9
 800b824:	1891      	adds	r1, r2, r2
 800b826:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b828:	415b      	adcs	r3, r3
 800b82a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b82c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b830:	4641      	mov	r1, r8
 800b832:	eb12 0a01 	adds.w	sl, r2, r1
 800b836:	4649      	mov	r1, r9
 800b838:	eb43 0b01 	adc.w	fp, r3, r1
 800b83c:	f04f 0200 	mov.w	r2, #0
 800b840:	f04f 0300 	mov.w	r3, #0
 800b844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b84c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b850:	4692      	mov	sl, r2
 800b852:	469b      	mov	fp, r3
 800b854:	4643      	mov	r3, r8
 800b856:	eb1a 0303 	adds.w	r3, sl, r3
 800b85a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b85e:	464b      	mov	r3, r9
 800b860:	eb4b 0303 	adc.w	r3, fp, r3
 800b864:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b874:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b87c:	460b      	mov	r3, r1
 800b87e:	18db      	adds	r3, r3, r3
 800b880:	643b      	str	r3, [r7, #64]	@ 0x40
 800b882:	4613      	mov	r3, r2
 800b884:	eb42 0303 	adc.w	r3, r2, r3
 800b888:	647b      	str	r3, [r7, #68]	@ 0x44
 800b88a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b88e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b892:	f7f5 fa09 	bl	8000ca8 <__aeabi_uldivmod>
 800b896:	4602      	mov	r2, r0
 800b898:	460b      	mov	r3, r1
 800b89a:	4611      	mov	r1, r2
 800b89c:	4b3b      	ldr	r3, [pc, #236]	@ (800b98c <UART_SetConfig+0x2d4>)
 800b89e:	fba3 2301 	umull	r2, r3, r3, r1
 800b8a2:	095b      	lsrs	r3, r3, #5
 800b8a4:	2264      	movs	r2, #100	@ 0x64
 800b8a6:	fb02 f303 	mul.w	r3, r2, r3
 800b8aa:	1acb      	subs	r3, r1, r3
 800b8ac:	00db      	lsls	r3, r3, #3
 800b8ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b8b2:	4b36      	ldr	r3, [pc, #216]	@ (800b98c <UART_SetConfig+0x2d4>)
 800b8b4:	fba3 2302 	umull	r2, r3, r3, r2
 800b8b8:	095b      	lsrs	r3, r3, #5
 800b8ba:	005b      	lsls	r3, r3, #1
 800b8bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b8c0:	441c      	add	r4, r3
 800b8c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b8cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b8d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b8d4:	4642      	mov	r2, r8
 800b8d6:	464b      	mov	r3, r9
 800b8d8:	1891      	adds	r1, r2, r2
 800b8da:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b8dc:	415b      	adcs	r3, r3
 800b8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b8e4:	4641      	mov	r1, r8
 800b8e6:	1851      	adds	r1, r2, r1
 800b8e8:	6339      	str	r1, [r7, #48]	@ 0x30
 800b8ea:	4649      	mov	r1, r9
 800b8ec:	414b      	adcs	r3, r1
 800b8ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8f0:	f04f 0200 	mov.w	r2, #0
 800b8f4:	f04f 0300 	mov.w	r3, #0
 800b8f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b8fc:	4659      	mov	r1, fp
 800b8fe:	00cb      	lsls	r3, r1, #3
 800b900:	4651      	mov	r1, sl
 800b902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b906:	4651      	mov	r1, sl
 800b908:	00ca      	lsls	r2, r1, #3
 800b90a:	4610      	mov	r0, r2
 800b90c:	4619      	mov	r1, r3
 800b90e:	4603      	mov	r3, r0
 800b910:	4642      	mov	r2, r8
 800b912:	189b      	adds	r3, r3, r2
 800b914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b918:	464b      	mov	r3, r9
 800b91a:	460a      	mov	r2, r1
 800b91c:	eb42 0303 	adc.w	r3, r2, r3
 800b920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b930:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b938:	460b      	mov	r3, r1
 800b93a:	18db      	adds	r3, r3, r3
 800b93c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b93e:	4613      	mov	r3, r2
 800b940:	eb42 0303 	adc.w	r3, r2, r3
 800b944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b94a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b94e:	f7f5 f9ab 	bl	8000ca8 <__aeabi_uldivmod>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	4b0d      	ldr	r3, [pc, #52]	@ (800b98c <UART_SetConfig+0x2d4>)
 800b958:	fba3 1302 	umull	r1, r3, r3, r2
 800b95c:	095b      	lsrs	r3, r3, #5
 800b95e:	2164      	movs	r1, #100	@ 0x64
 800b960:	fb01 f303 	mul.w	r3, r1, r3
 800b964:	1ad3      	subs	r3, r2, r3
 800b966:	00db      	lsls	r3, r3, #3
 800b968:	3332      	adds	r3, #50	@ 0x32
 800b96a:	4a08      	ldr	r2, [pc, #32]	@ (800b98c <UART_SetConfig+0x2d4>)
 800b96c:	fba2 2303 	umull	r2, r3, r2, r3
 800b970:	095b      	lsrs	r3, r3, #5
 800b972:	f003 0207 	and.w	r2, r3, #7
 800b976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4422      	add	r2, r4
 800b97e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b980:	e106      	b.n	800bb90 <UART_SetConfig+0x4d8>
 800b982:	bf00      	nop
 800b984:	40011000 	.word	0x40011000
 800b988:	40011400 	.word	0x40011400
 800b98c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b994:	2200      	movs	r2, #0
 800b996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b99a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b99e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b9a2:	4642      	mov	r2, r8
 800b9a4:	464b      	mov	r3, r9
 800b9a6:	1891      	adds	r1, r2, r2
 800b9a8:	6239      	str	r1, [r7, #32]
 800b9aa:	415b      	adcs	r3, r3
 800b9ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b9b2:	4641      	mov	r1, r8
 800b9b4:	1854      	adds	r4, r2, r1
 800b9b6:	4649      	mov	r1, r9
 800b9b8:	eb43 0501 	adc.w	r5, r3, r1
 800b9bc:	f04f 0200 	mov.w	r2, #0
 800b9c0:	f04f 0300 	mov.w	r3, #0
 800b9c4:	00eb      	lsls	r3, r5, #3
 800b9c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b9ca:	00e2      	lsls	r2, r4, #3
 800b9cc:	4614      	mov	r4, r2
 800b9ce:	461d      	mov	r5, r3
 800b9d0:	4643      	mov	r3, r8
 800b9d2:	18e3      	adds	r3, r4, r3
 800b9d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b9d8:	464b      	mov	r3, r9
 800b9da:	eb45 0303 	adc.w	r3, r5, r3
 800b9de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b9e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b9ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b9f2:	f04f 0200 	mov.w	r2, #0
 800b9f6:	f04f 0300 	mov.w	r3, #0
 800b9fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b9fe:	4629      	mov	r1, r5
 800ba00:	008b      	lsls	r3, r1, #2
 800ba02:	4621      	mov	r1, r4
 800ba04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba08:	4621      	mov	r1, r4
 800ba0a:	008a      	lsls	r2, r1, #2
 800ba0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ba10:	f7f5 f94a 	bl	8000ca8 <__aeabi_uldivmod>
 800ba14:	4602      	mov	r2, r0
 800ba16:	460b      	mov	r3, r1
 800ba18:	4b60      	ldr	r3, [pc, #384]	@ (800bb9c <UART_SetConfig+0x4e4>)
 800ba1a:	fba3 2302 	umull	r2, r3, r3, r2
 800ba1e:	095b      	lsrs	r3, r3, #5
 800ba20:	011c      	lsls	r4, r3, #4
 800ba22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba26:	2200      	movs	r2, #0
 800ba28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ba2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ba30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ba34:	4642      	mov	r2, r8
 800ba36:	464b      	mov	r3, r9
 800ba38:	1891      	adds	r1, r2, r2
 800ba3a:	61b9      	str	r1, [r7, #24]
 800ba3c:	415b      	adcs	r3, r3
 800ba3e:	61fb      	str	r3, [r7, #28]
 800ba40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba44:	4641      	mov	r1, r8
 800ba46:	1851      	adds	r1, r2, r1
 800ba48:	6139      	str	r1, [r7, #16]
 800ba4a:	4649      	mov	r1, r9
 800ba4c:	414b      	adcs	r3, r1
 800ba4e:	617b      	str	r3, [r7, #20]
 800ba50:	f04f 0200 	mov.w	r2, #0
 800ba54:	f04f 0300 	mov.w	r3, #0
 800ba58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ba5c:	4659      	mov	r1, fp
 800ba5e:	00cb      	lsls	r3, r1, #3
 800ba60:	4651      	mov	r1, sl
 800ba62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba66:	4651      	mov	r1, sl
 800ba68:	00ca      	lsls	r2, r1, #3
 800ba6a:	4610      	mov	r0, r2
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	4603      	mov	r3, r0
 800ba70:	4642      	mov	r2, r8
 800ba72:	189b      	adds	r3, r3, r2
 800ba74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ba78:	464b      	mov	r3, r9
 800ba7a:	460a      	mov	r2, r1
 800ba7c:	eb42 0303 	adc.w	r3, r2, r3
 800ba80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ba84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ba8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ba90:	f04f 0200 	mov.w	r2, #0
 800ba94:	f04f 0300 	mov.w	r3, #0
 800ba98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ba9c:	4649      	mov	r1, r9
 800ba9e:	008b      	lsls	r3, r1, #2
 800baa0:	4641      	mov	r1, r8
 800baa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800baa6:	4641      	mov	r1, r8
 800baa8:	008a      	lsls	r2, r1, #2
 800baaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800baae:	f7f5 f8fb 	bl	8000ca8 <__aeabi_uldivmod>
 800bab2:	4602      	mov	r2, r0
 800bab4:	460b      	mov	r3, r1
 800bab6:	4611      	mov	r1, r2
 800bab8:	4b38      	ldr	r3, [pc, #224]	@ (800bb9c <UART_SetConfig+0x4e4>)
 800baba:	fba3 2301 	umull	r2, r3, r3, r1
 800babe:	095b      	lsrs	r3, r3, #5
 800bac0:	2264      	movs	r2, #100	@ 0x64
 800bac2:	fb02 f303 	mul.w	r3, r2, r3
 800bac6:	1acb      	subs	r3, r1, r3
 800bac8:	011b      	lsls	r3, r3, #4
 800baca:	3332      	adds	r3, #50	@ 0x32
 800bacc:	4a33      	ldr	r2, [pc, #204]	@ (800bb9c <UART_SetConfig+0x4e4>)
 800bace:	fba2 2303 	umull	r2, r3, r2, r3
 800bad2:	095b      	lsrs	r3, r3, #5
 800bad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bad8:	441c      	add	r4, r3
 800bada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bade:	2200      	movs	r2, #0
 800bae0:	673b      	str	r3, [r7, #112]	@ 0x70
 800bae2:	677a      	str	r2, [r7, #116]	@ 0x74
 800bae4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bae8:	4642      	mov	r2, r8
 800baea:	464b      	mov	r3, r9
 800baec:	1891      	adds	r1, r2, r2
 800baee:	60b9      	str	r1, [r7, #8]
 800baf0:	415b      	adcs	r3, r3
 800baf2:	60fb      	str	r3, [r7, #12]
 800baf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800baf8:	4641      	mov	r1, r8
 800bafa:	1851      	adds	r1, r2, r1
 800bafc:	6039      	str	r1, [r7, #0]
 800bafe:	4649      	mov	r1, r9
 800bb00:	414b      	adcs	r3, r1
 800bb02:	607b      	str	r3, [r7, #4]
 800bb04:	f04f 0200 	mov.w	r2, #0
 800bb08:	f04f 0300 	mov.w	r3, #0
 800bb0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bb10:	4659      	mov	r1, fp
 800bb12:	00cb      	lsls	r3, r1, #3
 800bb14:	4651      	mov	r1, sl
 800bb16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb1a:	4651      	mov	r1, sl
 800bb1c:	00ca      	lsls	r2, r1, #3
 800bb1e:	4610      	mov	r0, r2
 800bb20:	4619      	mov	r1, r3
 800bb22:	4603      	mov	r3, r0
 800bb24:	4642      	mov	r2, r8
 800bb26:	189b      	adds	r3, r3, r2
 800bb28:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb2a:	464b      	mov	r3, r9
 800bb2c:	460a      	mov	r2, r1
 800bb2e:	eb42 0303 	adc.w	r3, r2, r3
 800bb32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bb34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb3e:	667a      	str	r2, [r7, #100]	@ 0x64
 800bb40:	f04f 0200 	mov.w	r2, #0
 800bb44:	f04f 0300 	mov.w	r3, #0
 800bb48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bb4c:	4649      	mov	r1, r9
 800bb4e:	008b      	lsls	r3, r1, #2
 800bb50:	4641      	mov	r1, r8
 800bb52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb56:	4641      	mov	r1, r8
 800bb58:	008a      	lsls	r2, r1, #2
 800bb5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bb5e:	f7f5 f8a3 	bl	8000ca8 <__aeabi_uldivmod>
 800bb62:	4602      	mov	r2, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	4b0d      	ldr	r3, [pc, #52]	@ (800bb9c <UART_SetConfig+0x4e4>)
 800bb68:	fba3 1302 	umull	r1, r3, r3, r2
 800bb6c:	095b      	lsrs	r3, r3, #5
 800bb6e:	2164      	movs	r1, #100	@ 0x64
 800bb70:	fb01 f303 	mul.w	r3, r1, r3
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	011b      	lsls	r3, r3, #4
 800bb78:	3332      	adds	r3, #50	@ 0x32
 800bb7a:	4a08      	ldr	r2, [pc, #32]	@ (800bb9c <UART_SetConfig+0x4e4>)
 800bb7c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb80:	095b      	lsrs	r3, r3, #5
 800bb82:	f003 020f 	and.w	r2, r3, #15
 800bb86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4422      	add	r2, r4
 800bb8e:	609a      	str	r2, [r3, #8]
}
 800bb90:	bf00      	nop
 800bb92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bb96:	46bd      	mov	sp, r7
 800bb98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb9c:	51eb851f 	.word	0x51eb851f

0800bba0 <__NVIC_SetPriority>:
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	4603      	mov	r3, r0
 800bba8:	6039      	str	r1, [r7, #0]
 800bbaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bbac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	db0a      	blt.n	800bbca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	490c      	ldr	r1, [pc, #48]	@ (800bbec <__NVIC_SetPriority+0x4c>)
 800bbba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbbe:	0112      	lsls	r2, r2, #4
 800bbc0:	b2d2      	uxtb	r2, r2
 800bbc2:	440b      	add	r3, r1
 800bbc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bbc8:	e00a      	b.n	800bbe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	4908      	ldr	r1, [pc, #32]	@ (800bbf0 <__NVIC_SetPriority+0x50>)
 800bbd0:	79fb      	ldrb	r3, [r7, #7]
 800bbd2:	f003 030f 	and.w	r3, r3, #15
 800bbd6:	3b04      	subs	r3, #4
 800bbd8:	0112      	lsls	r2, r2, #4
 800bbda:	b2d2      	uxtb	r2, r2
 800bbdc:	440b      	add	r3, r1
 800bbde:	761a      	strb	r2, [r3, #24]
}
 800bbe0:	bf00      	nop
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	e000e100 	.word	0xe000e100
 800bbf0:	e000ed00 	.word	0xe000ed00

0800bbf4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	f06f 0004 	mvn.w	r0, #4
 800bbfe:	f7ff ffcf 	bl	800bba0 <__NVIC_SetPriority>
#endif
}
 800bc02:	bf00      	nop
 800bc04:	bd80      	pop	{r7, pc}
	...

0800bc08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc0e:	f3ef 8305 	mrs	r3, IPSR
 800bc12:	603b      	str	r3, [r7, #0]
  return(result);
 800bc14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d003      	beq.n	800bc22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bc1a:	f06f 0305 	mvn.w	r3, #5
 800bc1e:	607b      	str	r3, [r7, #4]
 800bc20:	e00c      	b.n	800bc3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bc22:	4b0a      	ldr	r3, [pc, #40]	@ (800bc4c <osKernelInitialize+0x44>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d105      	bne.n	800bc36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bc2a:	4b08      	ldr	r3, [pc, #32]	@ (800bc4c <osKernelInitialize+0x44>)
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	607b      	str	r3, [r7, #4]
 800bc34:	e002      	b.n	800bc3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bc36:	f04f 33ff 	mov.w	r3, #4294967295
 800bc3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc3c:	687b      	ldr	r3, [r7, #4]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	370c      	adds	r7, #12
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	20000c88 	.word	0x20000c88

0800bc50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc56:	f3ef 8305 	mrs	r3, IPSR
 800bc5a:	603b      	str	r3, [r7, #0]
  return(result);
 800bc5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d003      	beq.n	800bc6a <osKernelStart+0x1a>
    stat = osErrorISR;
 800bc62:	f06f 0305 	mvn.w	r3, #5
 800bc66:	607b      	str	r3, [r7, #4]
 800bc68:	e010      	b.n	800bc8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bc6a:	4b0b      	ldr	r3, [pc, #44]	@ (800bc98 <osKernelStart+0x48>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d109      	bne.n	800bc86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bc72:	f7ff ffbf 	bl	800bbf4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bc76:	4b08      	ldr	r3, [pc, #32]	@ (800bc98 <osKernelStart+0x48>)
 800bc78:	2202      	movs	r2, #2
 800bc7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bc7c:	f001 fe90 	bl	800d9a0 <vTaskStartScheduler>
      stat = osOK;
 800bc80:	2300      	movs	r3, #0
 800bc82:	607b      	str	r3, [r7, #4]
 800bc84:	e002      	b.n	800bc8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bc86:	f04f 33ff 	mov.w	r3, #4294967295
 800bc8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc8c:	687b      	ldr	r3, [r7, #4]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	20000c88 	.word	0x20000c88

0800bc9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b08e      	sub	sp, #56	@ 0x38
 800bca0:	af04      	add	r7, sp, #16
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcac:	f3ef 8305 	mrs	r3, IPSR
 800bcb0:	617b      	str	r3, [r7, #20]
  return(result);
 800bcb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d17e      	bne.n	800bdb6 <osThreadNew+0x11a>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d07b      	beq.n	800bdb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bcbe:	2380      	movs	r3, #128	@ 0x80
 800bcc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bcc2:	2318      	movs	r3, #24
 800bcc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bcca:	f04f 33ff 	mov.w	r3, #4294967295
 800bcce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d045      	beq.n	800bd62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d002      	beq.n	800bce4 <osThreadNew+0x48>
        name = attr->name;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	699b      	ldr	r3, [r3, #24]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d008      	beq.n	800bd0a <osThreadNew+0x6e>
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	2b38      	cmp	r3, #56	@ 0x38
 800bcfc:	d805      	bhi.n	800bd0a <osThreadNew+0x6e>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	f003 0301 	and.w	r3, r3, #1
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <osThreadNew+0x72>
        return (NULL);
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	e054      	b.n	800bdb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d003      	beq.n	800bd1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	695b      	ldr	r3, [r3, #20]
 800bd1a:	089b      	lsrs	r3, r3, #2
 800bd1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00e      	beq.n	800bd44 <osThreadNew+0xa8>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	2b5b      	cmp	r3, #91	@ 0x5b
 800bd2c:	d90a      	bls.n	800bd44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d006      	beq.n	800bd44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d002      	beq.n	800bd44 <osThreadNew+0xa8>
        mem = 1;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	61bb      	str	r3, [r7, #24]
 800bd42:	e010      	b.n	800bd66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10c      	bne.n	800bd66 <osThreadNew+0xca>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d108      	bne.n	800bd66 <osThreadNew+0xca>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d104      	bne.n	800bd66 <osThreadNew+0xca>
          mem = 0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	61bb      	str	r3, [r7, #24]
 800bd60:	e001      	b.n	800bd66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bd62:	2300      	movs	r3, #0
 800bd64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d110      	bne.n	800bd8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd74:	9202      	str	r2, [sp, #8]
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	6a3a      	ldr	r2, [r7, #32]
 800bd80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f001 fc30 	bl	800d5e8 <xTaskCreateStatic>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	613b      	str	r3, [r7, #16]
 800bd8c:	e013      	b.n	800bdb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d110      	bne.n	800bdb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	f107 0310 	add.w	r3, r7, #16
 800bd9c:	9301      	str	r3, [sp, #4]
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	9300      	str	r3, [sp, #0]
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f001 fc7e 	bl	800d6a8 <xTaskCreate>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d001      	beq.n	800bdb6 <osThreadNew+0x11a>
            hTask = NULL;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bdb6:	693b      	ldr	r3, [r7, #16]
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3728      	adds	r7, #40	@ 0x28
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdc8:	f3ef 8305 	mrs	r3, IPSR
 800bdcc:	60bb      	str	r3, [r7, #8]
  return(result);
 800bdce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d003      	beq.n	800bddc <osDelay+0x1c>
    stat = osErrorISR;
 800bdd4:	f06f 0305 	mvn.w	r3, #5
 800bdd8:	60fb      	str	r3, [r7, #12]
 800bdda:	e007      	b.n	800bdec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d002      	beq.n	800bdec <osDelay+0x2c>
      vTaskDelay(ticks);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f001 fda4 	bl	800d934 <vTaskDelay>
    }
  }

  return (stat);
 800bdec:	68fb      	ldr	r3, [r7, #12]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}

0800bdf6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b088      	sub	sp, #32
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bdfe:	2300      	movs	r3, #0
 800be00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be02:	f3ef 8305 	mrs	r3, IPSR
 800be06:	60bb      	str	r3, [r7, #8]
  return(result);
 800be08:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d174      	bne.n	800bef8 <osMutexNew+0x102>
    if (attr != NULL) {
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d003      	beq.n	800be1c <osMutexNew+0x26>
      type = attr->attr_bits;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	61bb      	str	r3, [r7, #24]
 800be1a:	e001      	b.n	800be20 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800be1c:	2300      	movs	r3, #0
 800be1e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	f003 0301 	and.w	r3, r3, #1
 800be26:	2b00      	cmp	r3, #0
 800be28:	d002      	beq.n	800be30 <osMutexNew+0x3a>
      rmtx = 1U;
 800be2a:	2301      	movs	r3, #1
 800be2c:	617b      	str	r3, [r7, #20]
 800be2e:	e001      	b.n	800be34 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800be30:	2300      	movs	r3, #0
 800be32:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	f003 0308 	and.w	r3, r3, #8
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d15c      	bne.n	800bef8 <osMutexNew+0x102>
      mem = -1;
 800be3e:	f04f 33ff 	mov.w	r3, #4294967295
 800be42:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d015      	beq.n	800be76 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d006      	beq.n	800be60 <osMutexNew+0x6a>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	2b4f      	cmp	r3, #79	@ 0x4f
 800be58:	d902      	bls.n	800be60 <osMutexNew+0x6a>
          mem = 1;
 800be5a:	2301      	movs	r3, #1
 800be5c:	613b      	str	r3, [r7, #16]
 800be5e:	e00c      	b.n	800be7a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d108      	bne.n	800be7a <osMutexNew+0x84>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d104      	bne.n	800be7a <osMutexNew+0x84>
            mem = 0;
 800be70:	2300      	movs	r3, #0
 800be72:	613b      	str	r3, [r7, #16]
 800be74:	e001      	b.n	800be7a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800be76:	2300      	movs	r3, #0
 800be78:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d112      	bne.n	800bea6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d007      	beq.n	800be96 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	4619      	mov	r1, r3
 800be8c:	2004      	movs	r0, #4
 800be8e:	f000 fc3e 	bl	800c70e <xQueueCreateMutexStatic>
 800be92:	61f8      	str	r0, [r7, #28]
 800be94:	e016      	b.n	800bec4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	4619      	mov	r1, r3
 800be9c:	2001      	movs	r0, #1
 800be9e:	f000 fc36 	bl	800c70e <xQueueCreateMutexStatic>
 800bea2:	61f8      	str	r0, [r7, #28]
 800bea4:	e00e      	b.n	800bec4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d10b      	bne.n	800bec4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d004      	beq.n	800bebc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800beb2:	2004      	movs	r0, #4
 800beb4:	f000 fc13 	bl	800c6de <xQueueCreateMutex>
 800beb8:	61f8      	str	r0, [r7, #28]
 800beba:	e003      	b.n	800bec4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800bebc:	2001      	movs	r0, #1
 800bebe:	f000 fc0e 	bl	800c6de <xQueueCreateMutex>
 800bec2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00c      	beq.n	800bee4 <osMutexNew+0xee>
        if (attr != NULL) {
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d003      	beq.n	800bed8 <osMutexNew+0xe2>
          name = attr->name;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	60fb      	str	r3, [r7, #12]
 800bed6:	e001      	b.n	800bedc <osMutexNew+0xe6>
        } else {
          name = NULL;
 800bed8:	2300      	movs	r3, #0
 800beda:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800bedc:	68f9      	ldr	r1, [r7, #12]
 800bede:	69f8      	ldr	r0, [r7, #28]
 800bee0:	f001 fafa 	bl	800d4d8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d006      	beq.n	800bef8 <osMutexNew+0x102>
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d003      	beq.n	800bef8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	f043 0301 	orr.w	r3, r3, #1
 800bef6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800bef8:	69fb      	ldr	r3, [r7, #28]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3720      	adds	r7, #32
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b086      	sub	sp, #24
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f023 0301 	bic.w	r3, r3, #1
 800bf12:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f003 0301 	and.w	r3, r3, #1
 800bf1a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf20:	f3ef 8305 	mrs	r3, IPSR
 800bf24:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf26:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d003      	beq.n	800bf34 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800bf2c:	f06f 0305 	mvn.w	r3, #5
 800bf30:	617b      	str	r3, [r7, #20]
 800bf32:	e02c      	b.n	800bf8e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d103      	bne.n	800bf42 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800bf3a:	f06f 0303 	mvn.w	r3, #3
 800bf3e:	617b      	str	r3, [r7, #20]
 800bf40:	e025      	b.n	800bf8e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d011      	beq.n	800bf6c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6938      	ldr	r0, [r7, #16]
 800bf4c:	f000 fc2f 	bl	800c7ae <xQueueTakeMutexRecursive>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d01b      	beq.n	800bf8e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d003      	beq.n	800bf64 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800bf5c:	f06f 0301 	mvn.w	r3, #1
 800bf60:	617b      	str	r3, [r7, #20]
 800bf62:	e014      	b.n	800bf8e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800bf64:	f06f 0302 	mvn.w	r3, #2
 800bf68:	617b      	str	r3, [r7, #20]
 800bf6a:	e010      	b.n	800bf8e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800bf6c:	6839      	ldr	r1, [r7, #0]
 800bf6e:	6938      	ldr	r0, [r7, #16]
 800bf70:	f000 ffd4 	bl	800cf1c <xQueueSemaphoreTake>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	d009      	beq.n	800bf8e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d003      	beq.n	800bf88 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800bf80:	f06f 0301 	mvn.w	r3, #1
 800bf84:	617b      	str	r3, [r7, #20]
 800bf86:	e002      	b.n	800bf8e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800bf88:	f06f 0302 	mvn.w	r3, #2
 800bf8c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800bf8e:	697b      	ldr	r3, [r7, #20]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3718      	adds	r7, #24
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b086      	sub	sp, #24
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f023 0301 	bic.w	r3, r3, #1
 800bfa6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f003 0301 	and.w	r3, r3, #1
 800bfae:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfb4:	f3ef 8305 	mrs	r3, IPSR
 800bfb8:	60bb      	str	r3, [r7, #8]
  return(result);
 800bfba:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d003      	beq.n	800bfc8 <osMutexRelease+0x30>
    stat = osErrorISR;
 800bfc0:	f06f 0305 	mvn.w	r3, #5
 800bfc4:	617b      	str	r3, [r7, #20]
 800bfc6:	e01f      	b.n	800c008 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d103      	bne.n	800bfd6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800bfce:	f06f 0303 	mvn.w	r3, #3
 800bfd2:	617b      	str	r3, [r7, #20]
 800bfd4:	e018      	b.n	800c008 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d009      	beq.n	800bff0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800bfdc:	6938      	ldr	r0, [r7, #16]
 800bfde:	f000 fbb1 	bl	800c744 <xQueueGiveMutexRecursive>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d00f      	beq.n	800c008 <osMutexRelease+0x70>
        stat = osErrorResource;
 800bfe8:	f06f 0302 	mvn.w	r3, #2
 800bfec:	617b      	str	r3, [r7, #20]
 800bfee:	e00b      	b.n	800c008 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800bff0:	2300      	movs	r3, #0
 800bff2:	2200      	movs	r2, #0
 800bff4:	2100      	movs	r1, #0
 800bff6:	6938      	ldr	r0, [r7, #16]
 800bff8:	f000 fc7e 	bl	800c8f8 <xQueueGenericSend>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d002      	beq.n	800c008 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c002:	f06f 0302 	mvn.w	r3, #2
 800c006:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c008:	697b      	ldr	r3, [r7, #20]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3718      	adds	r7, #24
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c012:	b580      	push	{r7, lr}
 800c014:	b08a      	sub	sp, #40	@ 0x28
 800c016:	af02      	add	r7, sp, #8
 800c018:	60f8      	str	r0, [r7, #12]
 800c01a:	60b9      	str	r1, [r7, #8]
 800c01c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c01e:	2300      	movs	r3, #0
 800c020:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c022:	f3ef 8305 	mrs	r3, IPSR
 800c026:	613b      	str	r3, [r7, #16]
  return(result);
 800c028:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d175      	bne.n	800c11a <osSemaphoreNew+0x108>
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d072      	beq.n	800c11a <osSemaphoreNew+0x108>
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d86e      	bhi.n	800c11a <osSemaphoreNew+0x108>
    mem = -1;
 800c03c:	f04f 33ff 	mov.w	r3, #4294967295
 800c040:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d015      	beq.n	800c074 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d006      	beq.n	800c05e <osSemaphoreNew+0x4c>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	2b4f      	cmp	r3, #79	@ 0x4f
 800c056:	d902      	bls.n	800c05e <osSemaphoreNew+0x4c>
        mem = 1;
 800c058:	2301      	movs	r3, #1
 800c05a:	61bb      	str	r3, [r7, #24]
 800c05c:	e00c      	b.n	800c078 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d108      	bne.n	800c078 <osSemaphoreNew+0x66>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d104      	bne.n	800c078 <osSemaphoreNew+0x66>
          mem = 0;
 800c06e:	2300      	movs	r3, #0
 800c070:	61bb      	str	r3, [r7, #24]
 800c072:	e001      	b.n	800c078 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c07e:	d04c      	beq.n	800c11a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d128      	bne.n	800c0d8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d10a      	bne.n	800c0a2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	2203      	movs	r2, #3
 800c092:	9200      	str	r2, [sp, #0]
 800c094:	2200      	movs	r2, #0
 800c096:	2100      	movs	r1, #0
 800c098:	2001      	movs	r0, #1
 800c09a:	f000 fa2b 	bl	800c4f4 <xQueueGenericCreateStatic>
 800c09e:	61f8      	str	r0, [r7, #28]
 800c0a0:	e005      	b.n	800c0ae <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c0a2:	2203      	movs	r2, #3
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	2001      	movs	r0, #1
 800c0a8:	f000 faa1 	bl	800c5ee <xQueueGenericCreate>
 800c0ac:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d022      	beq.n	800c0fa <osSemaphoreNew+0xe8>
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d01f      	beq.n	800c0fa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	2200      	movs	r2, #0
 800c0be:	2100      	movs	r1, #0
 800c0c0:	69f8      	ldr	r0, [r7, #28]
 800c0c2:	f000 fc19 	bl	800c8f8 <xQueueGenericSend>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d016      	beq.n	800c0fa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c0cc:	69f8      	ldr	r0, [r7, #28]
 800c0ce:	f001 f8b7 	bl	800d240 <vQueueDelete>
            hSemaphore = NULL;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	61fb      	str	r3, [r7, #28]
 800c0d6:	e010      	b.n	800c0fa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d108      	bne.n	800c0f0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	68b9      	ldr	r1, [r7, #8]
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	f000 fb98 	bl	800c81c <xQueueCreateCountingSemaphoreStatic>
 800c0ec:	61f8      	str	r0, [r7, #28]
 800c0ee:	e004      	b.n	800c0fa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c0f0:	68b9      	ldr	r1, [r7, #8]
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f000 fbcb 	bl	800c88e <xQueueCreateCountingSemaphore>
 800c0f8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00c      	beq.n	800c11a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d003      	beq.n	800c10e <osSemaphoreNew+0xfc>
          name = attr->name;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	617b      	str	r3, [r7, #20]
 800c10c:	e001      	b.n	800c112 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c10e:	2300      	movs	r3, #0
 800c110:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c112:	6979      	ldr	r1, [r7, #20]
 800c114:	69f8      	ldr	r0, [r7, #28]
 800c116:	f001 f9df 	bl	800d4d8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c11a:	69fb      	ldr	r3, [r7, #28]
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3720      	adds	r7, #32
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c132:	2300      	movs	r3, #0
 800c134:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d103      	bne.n	800c144 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c13c:	f06f 0303 	mvn.w	r3, #3
 800c140:	617b      	str	r3, [r7, #20]
 800c142:	e039      	b.n	800c1b8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c144:	f3ef 8305 	mrs	r3, IPSR
 800c148:	60fb      	str	r3, [r7, #12]
  return(result);
 800c14a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d022      	beq.n	800c196 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d003      	beq.n	800c15e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c156:	f06f 0303 	mvn.w	r3, #3
 800c15a:	617b      	str	r3, [r7, #20]
 800c15c:	e02c      	b.n	800c1b8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c15e:	2300      	movs	r3, #0
 800c160:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c162:	f107 0308 	add.w	r3, r7, #8
 800c166:	461a      	mov	r2, r3
 800c168:	2100      	movs	r1, #0
 800c16a:	6938      	ldr	r0, [r7, #16]
 800c16c:	f000 ffe6 	bl	800d13c <xQueueReceiveFromISR>
 800c170:	4603      	mov	r3, r0
 800c172:	2b01      	cmp	r3, #1
 800c174:	d003      	beq.n	800c17e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c176:	f06f 0302 	mvn.w	r3, #2
 800c17a:	617b      	str	r3, [r7, #20]
 800c17c:	e01c      	b.n	800c1b8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d019      	beq.n	800c1b8 <osSemaphoreAcquire+0x94>
 800c184:	4b0f      	ldr	r3, [pc, #60]	@ (800c1c4 <osSemaphoreAcquire+0xa0>)
 800c186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c18a:	601a      	str	r2, [r3, #0]
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	e010      	b.n	800c1b8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c196:	6839      	ldr	r1, [r7, #0]
 800c198:	6938      	ldr	r0, [r7, #16]
 800c19a:	f000 febf 	bl	800cf1c <xQueueSemaphoreTake>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d009      	beq.n	800c1b8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d003      	beq.n	800c1b2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c1aa:	f06f 0301 	mvn.w	r3, #1
 800c1ae:	617b      	str	r3, [r7, #20]
 800c1b0:	e002      	b.n	800c1b8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c1b2:	f06f 0302 	mvn.w	r3, #2
 800c1b6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c1b8:	697b      	ldr	r3, [r7, #20]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	e000ed04 	.word	0xe000ed04

0800c1c8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d103      	bne.n	800c1e6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c1de:	f06f 0303 	mvn.w	r3, #3
 800c1e2:	617b      	str	r3, [r7, #20]
 800c1e4:	e02c      	b.n	800c240 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1e6:	f3ef 8305 	mrs	r3, IPSR
 800c1ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d01a      	beq.n	800c228 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c1f6:	f107 0308 	add.w	r3, r7, #8
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	6938      	ldr	r0, [r7, #16]
 800c1fe:	f000 fd1b 	bl	800cc38 <xQueueGiveFromISR>
 800c202:	4603      	mov	r3, r0
 800c204:	2b01      	cmp	r3, #1
 800c206:	d003      	beq.n	800c210 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c208:	f06f 0302 	mvn.w	r3, #2
 800c20c:	617b      	str	r3, [r7, #20]
 800c20e:	e017      	b.n	800c240 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d014      	beq.n	800c240 <osSemaphoreRelease+0x78>
 800c216:	4b0d      	ldr	r3, [pc, #52]	@ (800c24c <osSemaphoreRelease+0x84>)
 800c218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c21c:	601a      	str	r2, [r3, #0]
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	e00b      	b.n	800c240 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c228:	2300      	movs	r3, #0
 800c22a:	2200      	movs	r2, #0
 800c22c:	2100      	movs	r1, #0
 800c22e:	6938      	ldr	r0, [r7, #16]
 800c230:	f000 fb62 	bl	800c8f8 <xQueueGenericSend>
 800c234:	4603      	mov	r3, r0
 800c236:	2b01      	cmp	r3, #1
 800c238:	d002      	beq.n	800c240 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c23a:	f06f 0302 	mvn.w	r3, #2
 800c23e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c240:	697b      	ldr	r3, [r7, #20]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3718      	adds	r7, #24
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	e000ed04 	.word	0xe000ed04

0800c250 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c250:	b480      	push	{r7}
 800c252:	b085      	sub	sp, #20
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	4a07      	ldr	r2, [pc, #28]	@ (800c27c <vApplicationGetIdleTaskMemory+0x2c>)
 800c260:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	4a06      	ldr	r2, [pc, #24]	@ (800c280 <vApplicationGetIdleTaskMemory+0x30>)
 800c266:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2280      	movs	r2, #128	@ 0x80
 800c26c:	601a      	str	r2, [r3, #0]
}
 800c26e:	bf00      	nop
 800c270:	3714      	adds	r7, #20
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	20000c8c 	.word	0x20000c8c
 800c280:	20000ce8 	.word	0x20000ce8

0800c284 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	4a07      	ldr	r2, [pc, #28]	@ (800c2b0 <vApplicationGetTimerTaskMemory+0x2c>)
 800c294:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	4a06      	ldr	r2, [pc, #24]	@ (800c2b4 <vApplicationGetTimerTaskMemory+0x30>)
 800c29a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c2a2:	601a      	str	r2, [r3, #0]
}
 800c2a4:	bf00      	nop
 800c2a6:	3714      	adds	r7, #20
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr
 800c2b0:	20000ee8 	.word	0x20000ee8
 800c2b4:	20000f44 	.word	0x20000f44

0800c2b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f103 0208 	add.w	r2, r3, #8
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f103 0208 	add.w	r2, r3, #8
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f103 0208 	add.w	r2, r3, #8
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c2ec:	bf00      	nop
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b083      	sub	sp, #12
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c306:	bf00      	nop
 800c308:	370c      	adds	r7, #12
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr

0800c312 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c312:	b480      	push	{r7}
 800c314:	b085      	sub	sp, #20
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	689a      	ldr	r2, [r3, #8]
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	683a      	ldr	r2, [r7, #0]
 800c336:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	683a      	ldr	r2, [r7, #0]
 800c33c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	1c5a      	adds	r2, r3, #1
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	601a      	str	r2, [r3, #0]
}
 800c34e:	bf00      	nop
 800c350:	3714      	adds	r7, #20
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr

0800c35a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c35a:	b480      	push	{r7}
 800c35c:	b085      	sub	sp, #20
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c370:	d103      	bne.n	800c37a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	60fb      	str	r3, [r7, #12]
 800c378:	e00c      	b.n	800c394 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	3308      	adds	r3, #8
 800c37e:	60fb      	str	r3, [r7, #12]
 800c380:	e002      	b.n	800c388 <vListInsert+0x2e>
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	60fb      	str	r3, [r7, #12]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	429a      	cmp	r2, r3
 800c392:	d2f6      	bcs.n	800c382 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	685a      	ldr	r2, [r3, #4]
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	683a      	ldr	r2, [r7, #0]
 800c3a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	683a      	ldr	r2, [r7, #0]
 800c3ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	1c5a      	adds	r2, r3, #1
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	601a      	str	r2, [r3, #0]
}
 800c3c0:	bf00      	nop
 800c3c2:	3714      	adds	r7, #20
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	6892      	ldr	r2, [r2, #8]
 800c3e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	6852      	ldr	r2, [r2, #4]
 800c3ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d103      	bne.n	800c400 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	689a      	ldr	r2, [r3, #8]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	1e5a      	subs	r2, r3, #1
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
}
 800c414:	4618      	mov	r0, r3
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d10b      	bne.n	800c44c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c446:	bf00      	nop
 800c448:	bf00      	nop
 800c44a:	e7fd      	b.n	800c448 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c44c:	f002 fd74 	bl	800ef38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c458:	68f9      	ldr	r1, [r7, #12]
 800c45a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c45c:	fb01 f303 	mul.w	r3, r1, r3
 800c460:	441a      	add	r2, r3
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2200      	movs	r2, #0
 800c46a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c47c:	3b01      	subs	r3, #1
 800c47e:	68f9      	ldr	r1, [r7, #12]
 800c480:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c482:	fb01 f303 	mul.w	r3, r1, r3
 800c486:	441a      	add	r2, r3
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	22ff      	movs	r2, #255	@ 0xff
 800c490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	22ff      	movs	r2, #255	@ 0xff
 800c498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d114      	bne.n	800c4cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	691b      	ldr	r3, [r3, #16]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d01a      	beq.n	800c4e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	3310      	adds	r3, #16
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f001 fd04 	bl	800debc <xTaskRemoveFromEventList>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d012      	beq.n	800c4e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c4f0 <xQueueGenericReset+0xd0>)
 800c4bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4c0:	601a      	str	r2, [r3, #0]
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	e009      	b.n	800c4e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	3310      	adds	r3, #16
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7ff fef1 	bl	800c2b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	3324      	adds	r3, #36	@ 0x24
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7ff feec 	bl	800c2b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c4e0:	f002 fd5c 	bl	800ef9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c4e4:	2301      	movs	r3, #1
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	e000ed04 	.word	0xe000ed04

0800c4f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b08e      	sub	sp, #56	@ 0x38
 800c4f8:	af02      	add	r7, sp, #8
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
 800c500:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10b      	bne.n	800c520 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c50c:	f383 8811 	msr	BASEPRI, r3
 800c510:	f3bf 8f6f 	isb	sy
 800c514:	f3bf 8f4f 	dsb	sy
 800c518:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c51a:	bf00      	nop
 800c51c:	bf00      	nop
 800c51e:	e7fd      	b.n	800c51c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d10b      	bne.n	800c53e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	e7fd      	b.n	800c53a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d002      	beq.n	800c54a <xQueueGenericCreateStatic+0x56>
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d001      	beq.n	800c54e <xQueueGenericCreateStatic+0x5a>
 800c54a:	2301      	movs	r3, #1
 800c54c:	e000      	b.n	800c550 <xQueueGenericCreateStatic+0x5c>
 800c54e:	2300      	movs	r3, #0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d10b      	bne.n	800c56c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	623b      	str	r3, [r7, #32]
}
 800c566:	bf00      	nop
 800c568:	bf00      	nop
 800c56a:	e7fd      	b.n	800c568 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d102      	bne.n	800c578 <xQueueGenericCreateStatic+0x84>
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d101      	bne.n	800c57c <xQueueGenericCreateStatic+0x88>
 800c578:	2301      	movs	r3, #1
 800c57a:	e000      	b.n	800c57e <xQueueGenericCreateStatic+0x8a>
 800c57c:	2300      	movs	r3, #0
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d10b      	bne.n	800c59a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	61fb      	str	r3, [r7, #28]
}
 800c594:	bf00      	nop
 800c596:	bf00      	nop
 800c598:	e7fd      	b.n	800c596 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c59a:	2350      	movs	r3, #80	@ 0x50
 800c59c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2b50      	cmp	r3, #80	@ 0x50
 800c5a2:	d00b      	beq.n	800c5bc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	61bb      	str	r3, [r7, #24]
}
 800c5b6:	bf00      	nop
 800c5b8:	bf00      	nop
 800c5ba:	e7fd      	b.n	800c5b8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c5bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00d      	beq.n	800c5e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c5d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5d6:	9300      	str	r3, [sp, #0]
 800c5d8:	4613      	mov	r3, r2
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	68b9      	ldr	r1, [r7, #8]
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f000 f840 	bl	800c664 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3730      	adds	r7, #48	@ 0x30
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b08a      	sub	sp, #40	@ 0x28
 800c5f2:	af02      	add	r7, sp, #8
 800c5f4:	60f8      	str	r0, [r7, #12]
 800c5f6:	60b9      	str	r1, [r7, #8]
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10b      	bne.n	800c61a <xQueueGenericCreate+0x2c>
	__asm volatile
 800c602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c606:	f383 8811 	msr	BASEPRI, r3
 800c60a:	f3bf 8f6f 	isb	sy
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	613b      	str	r3, [r7, #16]
}
 800c614:	bf00      	nop
 800c616:	bf00      	nop
 800c618:	e7fd      	b.n	800c616 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	fb02 f303 	mul.w	r3, r2, r3
 800c622:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	3350      	adds	r3, #80	@ 0x50
 800c628:	4618      	mov	r0, r3
 800c62a:	f002 fda7 	bl	800f17c <pvPortMalloc>
 800c62e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d011      	beq.n	800c65a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	3350      	adds	r3, #80	@ 0x50
 800c63e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	2200      	movs	r2, #0
 800c644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c648:	79fa      	ldrb	r2, [r7, #7]
 800c64a:	69bb      	ldr	r3, [r7, #24]
 800c64c:	9300      	str	r3, [sp, #0]
 800c64e:	4613      	mov	r3, r2
 800c650:	697a      	ldr	r2, [r7, #20]
 800c652:	68b9      	ldr	r1, [r7, #8]
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f000 f805 	bl	800c664 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c65a:	69bb      	ldr	r3, [r7, #24]
	}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3720      	adds	r7, #32
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
 800c670:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d103      	bne.n	800c680 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	69ba      	ldr	r2, [r7, #24]
 800c67c:	601a      	str	r2, [r3, #0]
 800c67e:	e002      	b.n	800c686 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c692:	2101      	movs	r1, #1
 800c694:	69b8      	ldr	r0, [r7, #24]
 800c696:	f7ff fec3 	bl	800c420 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	78fa      	ldrb	r2, [r7, #3]
 800c69e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c6a2:	bf00      	nop
 800c6a4:	3710      	adds	r7, #16
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b082      	sub	sp, #8
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d00e      	beq.n	800c6d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 f911 	bl	800c8f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c6d6:	bf00      	nop
 800c6d8:	3708      	adds	r7, #8
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b086      	sub	sp, #24
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	617b      	str	r3, [r7, #20]
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c6f0:	79fb      	ldrb	r3, [r7, #7]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	6939      	ldr	r1, [r7, #16]
 800c6f6:	6978      	ldr	r0, [r7, #20]
 800c6f8:	f7ff ff79 	bl	800c5ee <xQueueGenericCreate>
 800c6fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c6fe:	68f8      	ldr	r0, [r7, #12]
 800c700:	f7ff ffd3 	bl	800c6aa <prvInitialiseMutex>

		return xNewQueue;
 800c704:	68fb      	ldr	r3, [r7, #12]
	}
 800c706:	4618      	mov	r0, r3
 800c708:	3718      	adds	r7, #24
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c70e:	b580      	push	{r7, lr}
 800c710:	b088      	sub	sp, #32
 800c712:	af02      	add	r7, sp, #8
 800c714:	4603      	mov	r3, r0
 800c716:	6039      	str	r1, [r7, #0]
 800c718:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c71a:	2301      	movs	r3, #1
 800c71c:	617b      	str	r3, [r7, #20]
 800c71e:	2300      	movs	r3, #0
 800c720:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c722:	79fb      	ldrb	r3, [r7, #7]
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2200      	movs	r2, #0
 800c72a:	6939      	ldr	r1, [r7, #16]
 800c72c:	6978      	ldr	r0, [r7, #20]
 800c72e:	f7ff fee1 	bl	800c4f4 <xQueueGenericCreateStatic>
 800c732:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f7ff ffb8 	bl	800c6aa <prvInitialiseMutex>

		return xNewQueue;
 800c73a:	68fb      	ldr	r3, [r7, #12]
	}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3718      	adds	r7, #24
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c744:	b590      	push	{r4, r7, lr}
 800c746:	b087      	sub	sp, #28
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d10b      	bne.n	800c76e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800c756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c75a:	f383 8811 	msr	BASEPRI, r3
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f3bf 8f4f 	dsb	sy
 800c766:	60fb      	str	r3, [r7, #12]
}
 800c768:	bf00      	nop
 800c76a:	bf00      	nop
 800c76c:	e7fd      	b.n	800c76a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	689c      	ldr	r4, [r3, #8]
 800c772:	f001 fd63 	bl	800e23c <xTaskGetCurrentTaskHandle>
 800c776:	4603      	mov	r3, r0
 800c778:	429c      	cmp	r4, r3
 800c77a:	d111      	bne.n	800c7a0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	1e5a      	subs	r2, r3, #1
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d105      	bne.n	800c79a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c78e:	2300      	movs	r3, #0
 800c790:	2200      	movs	r2, #0
 800c792:	2100      	movs	r1, #0
 800c794:	6938      	ldr	r0, [r7, #16]
 800c796:	f000 f8af 	bl	800c8f8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c79a:	2301      	movs	r3, #1
 800c79c:	617b      	str	r3, [r7, #20]
 800c79e:	e001      	b.n	800c7a4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c7a4:	697b      	ldr	r3, [r7, #20]
	}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	371c      	adds	r7, #28
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd90      	pop	{r4, r7, pc}

0800c7ae <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c7ae:	b590      	push	{r4, r7, lr}
 800c7b0:	b087      	sub	sp, #28
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
 800c7b6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10b      	bne.n	800c7da <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	60fb      	str	r3, [r7, #12]
}
 800c7d4:	bf00      	nop
 800c7d6:	bf00      	nop
 800c7d8:	e7fd      	b.n	800c7d6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	689c      	ldr	r4, [r3, #8]
 800c7de:	f001 fd2d 	bl	800e23c <xTaskGetCurrentTaskHandle>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	429c      	cmp	r4, r3
 800c7e6:	d107      	bne.n	800c7f8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	1c5a      	adds	r2, r3, #1
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	617b      	str	r3, [r7, #20]
 800c7f6:	e00c      	b.n	800c812 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6938      	ldr	r0, [r7, #16]
 800c7fc:	f000 fb8e 	bl	800cf1c <xQueueSemaphoreTake>
 800c800:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d004      	beq.n	800c812 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	1c5a      	adds	r2, r3, #1
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c812:	697b      	ldr	r3, [r7, #20]
	}
 800c814:	4618      	mov	r0, r3
 800c816:	371c      	adds	r7, #28
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd90      	pop	{r4, r7, pc}

0800c81c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b08a      	sub	sp, #40	@ 0x28
 800c820:	af02      	add	r7, sp, #8
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10b      	bne.n	800c846 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800c82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c832:	f383 8811 	msr	BASEPRI, r3
 800c836:	f3bf 8f6f 	isb	sy
 800c83a:	f3bf 8f4f 	dsb	sy
 800c83e:	61bb      	str	r3, [r7, #24]
}
 800c840:	bf00      	nop
 800c842:	bf00      	nop
 800c844:	e7fd      	b.n	800c842 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c846:	68ba      	ldr	r2, [r7, #8]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d90b      	bls.n	800c866 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	617b      	str	r3, [r7, #20]
}
 800c860:	bf00      	nop
 800c862:	bf00      	nop
 800c864:	e7fd      	b.n	800c862 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c866:	2302      	movs	r3, #2
 800c868:	9300      	str	r3, [sp, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	2100      	movs	r1, #0
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f7ff fe3f 	bl	800c4f4 <xQueueGenericCreateStatic>
 800c876:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c87e:	69fb      	ldr	r3, [r7, #28]
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c884:	69fb      	ldr	r3, [r7, #28]
	}
 800c886:	4618      	mov	r0, r3
 800c888:	3720      	adds	r7, #32
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b086      	sub	sp, #24
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
 800c896:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d10b      	bne.n	800c8b6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	613b      	str	r3, [r7, #16]
}
 800c8b0:	bf00      	nop
 800c8b2:	bf00      	nop
 800c8b4:	e7fd      	b.n	800c8b2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c8b6:	683a      	ldr	r2, [r7, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d90b      	bls.n	800c8d6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	60fb      	str	r3, [r7, #12]
}
 800c8d0:	bf00      	nop
 800c8d2:	bf00      	nop
 800c8d4:	e7fd      	b.n	800c8d2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c8d6:	2202      	movs	r2, #2
 800c8d8:	2100      	movs	r1, #0
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7ff fe87 	bl	800c5ee <xQueueGenericCreate>
 800c8e0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d002      	beq.n	800c8ee <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	683a      	ldr	r2, [r7, #0]
 800c8ec:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c8ee:	697b      	ldr	r3, [r7, #20]
	}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3718      	adds	r7, #24
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b08e      	sub	sp, #56	@ 0x38
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	607a      	str	r2, [r7, #4]
 800c904:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c906:	2300      	movs	r3, #0
 800c908:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c910:	2b00      	cmp	r3, #0
 800c912:	d10b      	bne.n	800c92c <xQueueGenericSend+0x34>
	__asm volatile
 800c914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c918:	f383 8811 	msr	BASEPRI, r3
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c926:	bf00      	nop
 800c928:	bf00      	nop
 800c92a:	e7fd      	b.n	800c928 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d103      	bne.n	800c93a <xQueueGenericSend+0x42>
 800c932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c936:	2b00      	cmp	r3, #0
 800c938:	d101      	bne.n	800c93e <xQueueGenericSend+0x46>
 800c93a:	2301      	movs	r3, #1
 800c93c:	e000      	b.n	800c940 <xQueueGenericSend+0x48>
 800c93e:	2300      	movs	r3, #0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d10b      	bne.n	800c95c <xQueueGenericSend+0x64>
	__asm volatile
 800c944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c948:	f383 8811 	msr	BASEPRI, r3
 800c94c:	f3bf 8f6f 	isb	sy
 800c950:	f3bf 8f4f 	dsb	sy
 800c954:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c956:	bf00      	nop
 800c958:	bf00      	nop
 800c95a:	e7fd      	b.n	800c958 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d103      	bne.n	800c96a <xQueueGenericSend+0x72>
 800c962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c966:	2b01      	cmp	r3, #1
 800c968:	d101      	bne.n	800c96e <xQueueGenericSend+0x76>
 800c96a:	2301      	movs	r3, #1
 800c96c:	e000      	b.n	800c970 <xQueueGenericSend+0x78>
 800c96e:	2300      	movs	r3, #0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d10b      	bne.n	800c98c <xQueueGenericSend+0x94>
	__asm volatile
 800c974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c978:	f383 8811 	msr	BASEPRI, r3
 800c97c:	f3bf 8f6f 	isb	sy
 800c980:	f3bf 8f4f 	dsb	sy
 800c984:	623b      	str	r3, [r7, #32]
}
 800c986:	bf00      	nop
 800c988:	bf00      	nop
 800c98a:	e7fd      	b.n	800c988 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c98c:	f001 fc66 	bl	800e25c <xTaskGetSchedulerState>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	d102      	bne.n	800c99c <xQueueGenericSend+0xa4>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d101      	bne.n	800c9a0 <xQueueGenericSend+0xa8>
 800c99c:	2301      	movs	r3, #1
 800c99e:	e000      	b.n	800c9a2 <xQueueGenericSend+0xaa>
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d10b      	bne.n	800c9be <xQueueGenericSend+0xc6>
	__asm volatile
 800c9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9aa:	f383 8811 	msr	BASEPRI, r3
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	f3bf 8f4f 	dsb	sy
 800c9b6:	61fb      	str	r3, [r7, #28]
}
 800c9b8:	bf00      	nop
 800c9ba:	bf00      	nop
 800c9bc:	e7fd      	b.n	800c9ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c9be:	f002 fabb 	bl	800ef38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d302      	bcc.n	800c9d4 <xQueueGenericSend+0xdc>
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	2b02      	cmp	r3, #2
 800c9d2:	d129      	bne.n	800ca28 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c9d4:	683a      	ldr	r2, [r7, #0]
 800c9d6:	68b9      	ldr	r1, [r7, #8]
 800c9d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c9da:	f000 fc6d 	bl	800d2b8 <prvCopyDataToQueue>
 800c9de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d010      	beq.n	800ca0a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ea:	3324      	adds	r3, #36	@ 0x24
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f001 fa65 	bl	800debc <xTaskRemoveFromEventList>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d013      	beq.n	800ca20 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c9f8:	4b3f      	ldr	r3, [pc, #252]	@ (800caf8 <xQueueGenericSend+0x200>)
 800c9fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	e00a      	b.n	800ca20 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ca0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d007      	beq.n	800ca20 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ca10:	4b39      	ldr	r3, [pc, #228]	@ (800caf8 <xQueueGenericSend+0x200>)
 800ca12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca16:	601a      	str	r2, [r3, #0]
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ca20:	f002 fabc 	bl	800ef9c <vPortExitCritical>
				return pdPASS;
 800ca24:	2301      	movs	r3, #1
 800ca26:	e063      	b.n	800caf0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d103      	bne.n	800ca36 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ca2e:	f002 fab5 	bl	800ef9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ca32:	2300      	movs	r3, #0
 800ca34:	e05c      	b.n	800caf0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d106      	bne.n	800ca4a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca3c:	f107 0314 	add.w	r3, r7, #20
 800ca40:	4618      	mov	r0, r3
 800ca42:	f001 fa9f 	bl	800df84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca46:	2301      	movs	r3, #1
 800ca48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca4a:	f002 faa7 	bl	800ef9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ca4e:	f001 f80f 	bl	800da70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca52:	f002 fa71 	bl	800ef38 <vPortEnterCritical>
 800ca56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca5c:	b25b      	sxtb	r3, r3
 800ca5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca62:	d103      	bne.n	800ca6c <xQueueGenericSend+0x174>
 800ca64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca66:	2200      	movs	r2, #0
 800ca68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca72:	b25b      	sxtb	r3, r3
 800ca74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca78:	d103      	bne.n	800ca82 <xQueueGenericSend+0x18a>
 800ca7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca82:	f002 fa8b 	bl	800ef9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca86:	1d3a      	adds	r2, r7, #4
 800ca88:	f107 0314 	add.w	r3, r7, #20
 800ca8c:	4611      	mov	r1, r2
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f001 fa8e 	bl	800dfb0 <xTaskCheckForTimeOut>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d124      	bne.n	800cae4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ca9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ca9c:	f000 fd04 	bl	800d4a8 <prvIsQueueFull>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d018      	beq.n	800cad8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800caa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa8:	3310      	adds	r3, #16
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	4611      	mov	r1, r2
 800caae:	4618      	mov	r0, r3
 800cab0:	f001 f9b2 	bl	800de18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cab6:	f000 fc8f 	bl	800d3d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800caba:	f000 ffe7 	bl	800da8c <xTaskResumeAll>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f47f af7c 	bne.w	800c9be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cac6:	4b0c      	ldr	r3, [pc, #48]	@ (800caf8 <xQueueGenericSend+0x200>)
 800cac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cacc:	601a      	str	r2, [r3, #0]
 800cace:	f3bf 8f4f 	dsb	sy
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	e772      	b.n	800c9be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cada:	f000 fc7d 	bl	800d3d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cade:	f000 ffd5 	bl	800da8c <xTaskResumeAll>
 800cae2:	e76c      	b.n	800c9be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cae4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cae6:	f000 fc77 	bl	800d3d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800caea:	f000 ffcf 	bl	800da8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800caee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3738      	adds	r7, #56	@ 0x38
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	e000ed04 	.word	0xe000ed04

0800cafc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b090      	sub	sp, #64	@ 0x40
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
 800cb08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d10b      	bne.n	800cb2c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cb14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb18:	f383 8811 	msr	BASEPRI, r3
 800cb1c:	f3bf 8f6f 	isb	sy
 800cb20:	f3bf 8f4f 	dsb	sy
 800cb24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cb26:	bf00      	nop
 800cb28:	bf00      	nop
 800cb2a:	e7fd      	b.n	800cb28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d103      	bne.n	800cb3a <xQueueGenericSendFromISR+0x3e>
 800cb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d101      	bne.n	800cb3e <xQueueGenericSendFromISR+0x42>
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	e000      	b.n	800cb40 <xQueueGenericSendFromISR+0x44>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d10b      	bne.n	800cb5c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cb56:	bf00      	nop
 800cb58:	bf00      	nop
 800cb5a:	e7fd      	b.n	800cb58 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d103      	bne.n	800cb6a <xQueueGenericSendFromISR+0x6e>
 800cb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d101      	bne.n	800cb6e <xQueueGenericSendFromISR+0x72>
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	e000      	b.n	800cb70 <xQueueGenericSendFromISR+0x74>
 800cb6e:	2300      	movs	r3, #0
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10b      	bne.n	800cb8c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb78:	f383 8811 	msr	BASEPRI, r3
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	623b      	str	r3, [r7, #32]
}
 800cb86:	bf00      	nop
 800cb88:	bf00      	nop
 800cb8a:	e7fd      	b.n	800cb88 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cb8c:	f002 fab4 	bl	800f0f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cb90:	f3ef 8211 	mrs	r2, BASEPRI
 800cb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	61fa      	str	r2, [r7, #28]
 800cba6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cba8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cbaa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d302      	bcc.n	800cbbe <xQueueGenericSendFromISR+0xc2>
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	d12f      	bne.n	800cc1e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cbbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cbc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cbce:	683a      	ldr	r2, [r7, #0]
 800cbd0:	68b9      	ldr	r1, [r7, #8]
 800cbd2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cbd4:	f000 fb70 	bl	800d2b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cbd8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cbdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe0:	d112      	bne.n	800cc08 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d016      	beq.n	800cc18 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbec:	3324      	adds	r3, #36	@ 0x24
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f001 f964 	bl	800debc <xTaskRemoveFromEventList>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00e      	beq.n	800cc18 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00b      	beq.n	800cc18 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2201      	movs	r2, #1
 800cc04:	601a      	str	r2, [r3, #0]
 800cc06:	e007      	b.n	800cc18 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	b25a      	sxtb	r2, r3
 800cc12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cc1c:	e001      	b.n	800cc22 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc24:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cc2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3740      	adds	r7, #64	@ 0x40
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08e      	sub	sp, #56	@ 0x38
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10b      	bne.n	800cc64 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cc4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc50:	f383 8811 	msr	BASEPRI, r3
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	f3bf 8f4f 	dsb	sy
 800cc5c:	623b      	str	r3, [r7, #32]
}
 800cc5e:	bf00      	nop
 800cc60:	bf00      	nop
 800cc62:	e7fd      	b.n	800cc60 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cc64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00b      	beq.n	800cc84 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800cc6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc70:	f383 8811 	msr	BASEPRI, r3
 800cc74:	f3bf 8f6f 	isb	sy
 800cc78:	f3bf 8f4f 	dsb	sy
 800cc7c:	61fb      	str	r3, [r7, #28]
}
 800cc7e:	bf00      	nop
 800cc80:	bf00      	nop
 800cc82:	e7fd      	b.n	800cc80 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cc84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d103      	bne.n	800cc94 <xQueueGiveFromISR+0x5c>
 800cc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d101      	bne.n	800cc98 <xQueueGiveFromISR+0x60>
 800cc94:	2301      	movs	r3, #1
 800cc96:	e000      	b.n	800cc9a <xQueueGiveFromISR+0x62>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d10b      	bne.n	800ccb6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800cc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	61bb      	str	r3, [r7, #24]
}
 800ccb0:	bf00      	nop
 800ccb2:	bf00      	nop
 800ccb4:	e7fd      	b.n	800ccb2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccb6:	f002 fa1f 	bl	800f0f8 <vPortValidateInterruptPriority>
	__asm volatile
 800ccba:	f3ef 8211 	mrs	r2, BASEPRI
 800ccbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc2:	f383 8811 	msr	BASEPRI, r3
 800ccc6:	f3bf 8f6f 	isb	sy
 800ccca:	f3bf 8f4f 	dsb	sy
 800ccce:	617a      	str	r2, [r7, #20]
 800ccd0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ccd2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ccd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccda:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ccdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cce0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d22b      	bcs.n	800cd3e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ccec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ccf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf2:	1c5a      	adds	r2, r3, #1
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ccf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ccfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd00:	d112      	bne.n	800cd28 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d016      	beq.n	800cd38 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd0c:	3324      	adds	r3, #36	@ 0x24
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f001 f8d4 	bl	800debc <xTaskRemoveFromEventList>
 800cd14:	4603      	mov	r3, r0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00e      	beq.n	800cd38 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d00b      	beq.n	800cd38 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	2201      	movs	r2, #1
 800cd24:	601a      	str	r2, [r3, #0]
 800cd26:	e007      	b.n	800cd38 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cd28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	b25a      	sxtb	r2, r3
 800cd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd3c:	e001      	b.n	800cd42 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd44:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f383 8811 	msr	BASEPRI, r3
}
 800cd4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3738      	adds	r7, #56	@ 0x38
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b08c      	sub	sp, #48	@ 0x30
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cd64:	2300      	movs	r3, #0
 800cd66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10b      	bne.n	800cd8a <xQueueReceive+0x32>
	__asm volatile
 800cd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd76:	f383 8811 	msr	BASEPRI, r3
 800cd7a:	f3bf 8f6f 	isb	sy
 800cd7e:	f3bf 8f4f 	dsb	sy
 800cd82:	623b      	str	r3, [r7, #32]
}
 800cd84:	bf00      	nop
 800cd86:	bf00      	nop
 800cd88:	e7fd      	b.n	800cd86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d103      	bne.n	800cd98 <xQueueReceive+0x40>
 800cd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d101      	bne.n	800cd9c <xQueueReceive+0x44>
 800cd98:	2301      	movs	r3, #1
 800cd9a:	e000      	b.n	800cd9e <xQueueReceive+0x46>
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d10b      	bne.n	800cdba <xQueueReceive+0x62>
	__asm volatile
 800cda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda6:	f383 8811 	msr	BASEPRI, r3
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	f3bf 8f4f 	dsb	sy
 800cdb2:	61fb      	str	r3, [r7, #28]
}
 800cdb4:	bf00      	nop
 800cdb6:	bf00      	nop
 800cdb8:	e7fd      	b.n	800cdb6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdba:	f001 fa4f 	bl	800e25c <xTaskGetSchedulerState>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d102      	bne.n	800cdca <xQueueReceive+0x72>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d101      	bne.n	800cdce <xQueueReceive+0x76>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e000      	b.n	800cdd0 <xQueueReceive+0x78>
 800cdce:	2300      	movs	r3, #0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d10b      	bne.n	800cdec <xQueueReceive+0x94>
	__asm volatile
 800cdd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd8:	f383 8811 	msr	BASEPRI, r3
 800cddc:	f3bf 8f6f 	isb	sy
 800cde0:	f3bf 8f4f 	dsb	sy
 800cde4:	61bb      	str	r3, [r7, #24]
}
 800cde6:	bf00      	nop
 800cde8:	bf00      	nop
 800cdea:	e7fd      	b.n	800cde8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cdec:	f002 f8a4 	bl	800ef38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdf4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d01f      	beq.n	800ce3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cdfc:	68b9      	ldr	r1, [r7, #8]
 800cdfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce00:	f000 fac4 	bl	800d38c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ce04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce06:	1e5a      	subs	r2, r3, #1
 800ce08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0e:	691b      	ldr	r3, [r3, #16]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d00f      	beq.n	800ce34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce16:	3310      	adds	r3, #16
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f001 f84f 	bl	800debc <xTaskRemoveFromEventList>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d007      	beq.n	800ce34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ce24:	4b3c      	ldr	r3, [pc, #240]	@ (800cf18 <xQueueReceive+0x1c0>)
 800ce26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce2a:	601a      	str	r2, [r3, #0]
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ce34:	f002 f8b2 	bl	800ef9c <vPortExitCritical>
				return pdPASS;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	e069      	b.n	800cf10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d103      	bne.n	800ce4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce42:	f002 f8ab 	bl	800ef9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ce46:	2300      	movs	r3, #0
 800ce48:	e062      	b.n	800cf10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d106      	bne.n	800ce5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce50:	f107 0310 	add.w	r3, r7, #16
 800ce54:	4618      	mov	r0, r3
 800ce56:	f001 f895 	bl	800df84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce5e:	f002 f89d 	bl	800ef9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce62:	f000 fe05 	bl	800da70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce66:	f002 f867 	bl	800ef38 <vPortEnterCritical>
 800ce6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce70:	b25b      	sxtb	r3, r3
 800ce72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce76:	d103      	bne.n	800ce80 <xQueueReceive+0x128>
 800ce78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce86:	b25b      	sxtb	r3, r3
 800ce88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce8c:	d103      	bne.n	800ce96 <xQueueReceive+0x13e>
 800ce8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce90:	2200      	movs	r2, #0
 800ce92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce96:	f002 f881 	bl	800ef9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce9a:	1d3a      	adds	r2, r7, #4
 800ce9c:	f107 0310 	add.w	r3, r7, #16
 800cea0:	4611      	mov	r1, r2
 800cea2:	4618      	mov	r0, r3
 800cea4:	f001 f884 	bl	800dfb0 <xTaskCheckForTimeOut>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d123      	bne.n	800cef6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ceae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ceb0:	f000 fae4 	bl	800d47c <prvIsQueueEmpty>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d017      	beq.n	800ceea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ceba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cebc:	3324      	adds	r3, #36	@ 0x24
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	4611      	mov	r1, r2
 800cec2:	4618      	mov	r0, r3
 800cec4:	f000 ffa8 	bl	800de18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cec8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ceca:	f000 fa85 	bl	800d3d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cece:	f000 fddd 	bl	800da8c <xTaskResumeAll>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d189      	bne.n	800cdec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ced8:	4b0f      	ldr	r3, [pc, #60]	@ (800cf18 <xQueueReceive+0x1c0>)
 800ceda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cede:	601a      	str	r2, [r3, #0]
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	e780      	b.n	800cdec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ceea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ceec:	f000 fa74 	bl	800d3d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cef0:	f000 fdcc 	bl	800da8c <xTaskResumeAll>
 800cef4:	e77a      	b.n	800cdec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cef8:	f000 fa6e 	bl	800d3d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cefc:	f000 fdc6 	bl	800da8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf02:	f000 fabb 	bl	800d47c <prvIsQueueEmpty>
 800cf06:	4603      	mov	r3, r0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f43f af6f 	beq.w	800cdec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cf0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3730      	adds	r7, #48	@ 0x30
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	e000ed04 	.word	0xe000ed04

0800cf1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b08e      	sub	sp, #56	@ 0x38
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf26:	2300      	movs	r3, #0
 800cf28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d10b      	bne.n	800cf50 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800cf38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf3c:	f383 8811 	msr	BASEPRI, r3
 800cf40:	f3bf 8f6f 	isb	sy
 800cf44:	f3bf 8f4f 	dsb	sy
 800cf48:	623b      	str	r3, [r7, #32]
}
 800cf4a:	bf00      	nop
 800cf4c:	bf00      	nop
 800cf4e:	e7fd      	b.n	800cf4c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cf50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00b      	beq.n	800cf70 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800cf58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf5c:	f383 8811 	msr	BASEPRI, r3
 800cf60:	f3bf 8f6f 	isb	sy
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	61fb      	str	r3, [r7, #28]
}
 800cf6a:	bf00      	nop
 800cf6c:	bf00      	nop
 800cf6e:	e7fd      	b.n	800cf6c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf70:	f001 f974 	bl	800e25c <xTaskGetSchedulerState>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d102      	bne.n	800cf80 <xQueueSemaphoreTake+0x64>
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <xQueueSemaphoreTake+0x68>
 800cf80:	2301      	movs	r3, #1
 800cf82:	e000      	b.n	800cf86 <xQueueSemaphoreTake+0x6a>
 800cf84:	2300      	movs	r3, #0
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10b      	bne.n	800cfa2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800cf8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf8e:	f383 8811 	msr	BASEPRI, r3
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	f3bf 8f4f 	dsb	sy
 800cf9a:	61bb      	str	r3, [r7, #24]
}
 800cf9c:	bf00      	nop
 800cf9e:	bf00      	nop
 800cfa0:	e7fd      	b.n	800cf9e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cfa2:	f001 ffc9 	bl	800ef38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfaa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d024      	beq.n	800cffc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb4:	1e5a      	subs	r2, r3, #1
 800cfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d104      	bne.n	800cfcc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cfc2:	f001 fac5 	bl	800e550 <pvTaskIncrementMutexHeldCount>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfce:	691b      	ldr	r3, [r3, #16]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00f      	beq.n	800cff4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cfd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd6:	3310      	adds	r3, #16
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f000 ff6f 	bl	800debc <xTaskRemoveFromEventList>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d007      	beq.n	800cff4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cfe4:	4b54      	ldr	r3, [pc, #336]	@ (800d138 <xQueueSemaphoreTake+0x21c>)
 800cfe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfea:	601a      	str	r2, [r3, #0]
 800cfec:	f3bf 8f4f 	dsb	sy
 800cff0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cff4:	f001 ffd2 	bl	800ef9c <vPortExitCritical>
				return pdPASS;
 800cff8:	2301      	movs	r3, #1
 800cffa:	e098      	b.n	800d12e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d112      	bne.n	800d028 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00b      	beq.n	800d020 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d00c:	f383 8811 	msr	BASEPRI, r3
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	617b      	str	r3, [r7, #20]
}
 800d01a:	bf00      	nop
 800d01c:	bf00      	nop
 800d01e:	e7fd      	b.n	800d01c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d020:	f001 ffbc 	bl	800ef9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d024:	2300      	movs	r3, #0
 800d026:	e082      	b.n	800d12e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d106      	bne.n	800d03c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d02e:	f107 030c 	add.w	r3, r7, #12
 800d032:	4618      	mov	r0, r3
 800d034:	f000 ffa6 	bl	800df84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d038:	2301      	movs	r3, #1
 800d03a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d03c:	f001 ffae 	bl	800ef9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d040:	f000 fd16 	bl	800da70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d044:	f001 ff78 	bl	800ef38 <vPortEnterCritical>
 800d048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d04a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d04e:	b25b      	sxtb	r3, r3
 800d050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d054:	d103      	bne.n	800d05e <xQueueSemaphoreTake+0x142>
 800d056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d058:	2200      	movs	r2, #0
 800d05a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d060:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d064:	b25b      	sxtb	r3, r3
 800d066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d06a:	d103      	bne.n	800d074 <xQueueSemaphoreTake+0x158>
 800d06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d074:	f001 ff92 	bl	800ef9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d078:	463a      	mov	r2, r7
 800d07a:	f107 030c 	add.w	r3, r7, #12
 800d07e:	4611      	mov	r1, r2
 800d080:	4618      	mov	r0, r3
 800d082:	f000 ff95 	bl	800dfb0 <xTaskCheckForTimeOut>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d132      	bne.n	800d0f2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d08c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d08e:	f000 f9f5 	bl	800d47c <prvIsQueueEmpty>
 800d092:	4603      	mov	r3, r0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d026      	beq.n	800d0e6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d109      	bne.n	800d0b4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d0a0:	f001 ff4a 	bl	800ef38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a6:	689b      	ldr	r3, [r3, #8]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f001 f8f5 	bl	800e298 <xTaskPriorityInherit>
 800d0ae:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d0b0:	f001 ff74 	bl	800ef9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b6:	3324      	adds	r3, #36	@ 0x24
 800d0b8:	683a      	ldr	r2, [r7, #0]
 800d0ba:	4611      	mov	r1, r2
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f000 feab 	bl	800de18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d0c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d0c4:	f000 f988 	bl	800d3d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d0c8:	f000 fce0 	bl	800da8c <xTaskResumeAll>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	f47f af67 	bne.w	800cfa2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d0d4:	4b18      	ldr	r3, [pc, #96]	@ (800d138 <xQueueSemaphoreTake+0x21c>)
 800d0d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0da:	601a      	str	r2, [r3, #0]
 800d0dc:	f3bf 8f4f 	dsb	sy
 800d0e0:	f3bf 8f6f 	isb	sy
 800d0e4:	e75d      	b.n	800cfa2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d0e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d0e8:	f000 f976 	bl	800d3d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d0ec:	f000 fcce 	bl	800da8c <xTaskResumeAll>
 800d0f0:	e757      	b.n	800cfa2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d0f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d0f4:	f000 f970 	bl	800d3d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d0f8:	f000 fcc8 	bl	800da8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d0fe:	f000 f9bd 	bl	800d47c <prvIsQueueEmpty>
 800d102:	4603      	mov	r3, r0
 800d104:	2b00      	cmp	r3, #0
 800d106:	f43f af4c 	beq.w	800cfa2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00d      	beq.n	800d12c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d110:	f001 ff12 	bl	800ef38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d114:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d116:	f000 f8b7 	bl	800d288 <prvGetDisinheritPriorityAfterTimeout>
 800d11a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d122:	4618      	mov	r0, r3
 800d124:	f001 f990 	bl	800e448 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d128:	f001 ff38 	bl	800ef9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d12c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3738      	adds	r7, #56	@ 0x38
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	e000ed04 	.word	0xe000ed04

0800d13c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b08e      	sub	sp, #56	@ 0x38
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d10b      	bne.n	800d16a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d156:	f383 8811 	msr	BASEPRI, r3
 800d15a:	f3bf 8f6f 	isb	sy
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	623b      	str	r3, [r7, #32]
}
 800d164:	bf00      	nop
 800d166:	bf00      	nop
 800d168:	e7fd      	b.n	800d166 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d103      	bne.n	800d178 <xQueueReceiveFromISR+0x3c>
 800d170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d174:	2b00      	cmp	r3, #0
 800d176:	d101      	bne.n	800d17c <xQueueReceiveFromISR+0x40>
 800d178:	2301      	movs	r3, #1
 800d17a:	e000      	b.n	800d17e <xQueueReceiveFromISR+0x42>
 800d17c:	2300      	movs	r3, #0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10b      	bne.n	800d19a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	61fb      	str	r3, [r7, #28]
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop
 800d198:	e7fd      	b.n	800d196 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d19a:	f001 ffad 	bl	800f0f8 <vPortValidateInterruptPriority>
	__asm volatile
 800d19e:	f3ef 8211 	mrs	r2, BASEPRI
 800d1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a6:	f383 8811 	msr	BASEPRI, r3
 800d1aa:	f3bf 8f6f 	isb	sy
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	61ba      	str	r2, [r7, #24]
 800d1b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d1b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d1b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1be:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d02f      	beq.n	800d226 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d1cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1d0:	68b9      	ldr	r1, [r7, #8]
 800d1d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d1d4:	f000 f8da 	bl	800d38c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1da:	1e5a      	subs	r2, r3, #1
 800d1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d1e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e8:	d112      	bne.n	800d210 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ec:	691b      	ldr	r3, [r3, #16]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d016      	beq.n	800d220 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f4:	3310      	adds	r3, #16
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f000 fe60 	bl	800debc <xTaskRemoveFromEventList>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00e      	beq.n	800d220 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d00b      	beq.n	800d220 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	601a      	str	r2, [r3, #0]
 800d20e:	e007      	b.n	800d220 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d214:	3301      	adds	r3, #1
 800d216:	b2db      	uxtb	r3, r3
 800d218:	b25a      	sxtb	r2, r3
 800d21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d21c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d220:	2301      	movs	r3, #1
 800d222:	637b      	str	r3, [r7, #52]	@ 0x34
 800d224:	e001      	b.n	800d22a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d226:	2300      	movs	r3, #0
 800d228:	637b      	str	r3, [r7, #52]	@ 0x34
 800d22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d22c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	f383 8811 	msr	BASEPRI, r3
}
 800d234:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3738      	adds	r7, #56	@ 0x38
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d10b      	bne.n	800d26a <vQueueDelete+0x2a>
	__asm volatile
 800d252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d256:	f383 8811 	msr	BASEPRI, r3
 800d25a:	f3bf 8f6f 	isb	sy
 800d25e:	f3bf 8f4f 	dsb	sy
 800d262:	60bb      	str	r3, [r7, #8]
}
 800d264:	bf00      	nop
 800d266:	bf00      	nop
 800d268:	e7fd      	b.n	800d266 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d26a:	68f8      	ldr	r0, [r7, #12]
 800d26c:	f000 f95e 	bl	800d52c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d276:	2b00      	cmp	r3, #0
 800d278:	d102      	bne.n	800d280 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d27a:	68f8      	ldr	r0, [r7, #12]
 800d27c:	f002 f84c 	bl	800f318 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d280:	bf00      	nop
 800d282:	3710      	adds	r7, #16
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d288:	b480      	push	{r7}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d294:	2b00      	cmp	r3, #0
 800d296:	d006      	beq.n	800d2a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d2a2:	60fb      	str	r3, [r7, #12]
 800d2a4:	e001      	b.n	800d2aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
	}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3714      	adds	r7, #20
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b086      	sub	sp, #24
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d10d      	bne.n	800d2f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d14d      	bne.n	800d37a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f001 f840 	bl	800e368 <xTaskPriorityDisinherit>
 800d2e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	609a      	str	r2, [r3, #8]
 800d2f0:	e043      	b.n	800d37a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d119      	bne.n	800d32c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6858      	ldr	r0, [r3, #4]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d300:	461a      	mov	r2, r3
 800d302:	68b9      	ldr	r1, [r7, #8]
 800d304:	f003 fb53 	bl	80109ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	685a      	ldr	r2, [r3, #4]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d310:	441a      	add	r2, r3
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	685a      	ldr	r2, [r3, #4]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d32b      	bcc.n	800d37a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	605a      	str	r2, [r3, #4]
 800d32a:	e026      	b.n	800d37a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	68d8      	ldr	r0, [r3, #12]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d334:	461a      	mov	r2, r3
 800d336:	68b9      	ldr	r1, [r7, #8]
 800d338:	f003 fb39 	bl	80109ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	68da      	ldr	r2, [r3, #12]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d344:	425b      	negs	r3, r3
 800d346:	441a      	add	r2, r3
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	68da      	ldr	r2, [r3, #12]
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	429a      	cmp	r2, r3
 800d356:	d207      	bcs.n	800d368 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	689a      	ldr	r2, [r3, #8]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d360:	425b      	negs	r3, r3
 800d362:	441a      	add	r2, r3
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2b02      	cmp	r3, #2
 800d36c:	d105      	bne.n	800d37a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d002      	beq.n	800d37a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	3b01      	subs	r3, #1
 800d378:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	1c5a      	adds	r2, r3, #1
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d382:	697b      	ldr	r3, [r7, #20]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3718      	adds	r7, #24
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d018      	beq.n	800d3d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	68da      	ldr	r2, [r3, #12]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3a6:	441a      	add	r2, r3
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	68da      	ldr	r2, [r3, #12]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d303      	bcc.n	800d3c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	68d9      	ldr	r1, [r3, #12]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	6838      	ldr	r0, [r7, #0]
 800d3cc:	f003 faef 	bl	80109ae <memcpy>
	}
}
 800d3d0:	bf00      	nop
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d3e0:	f001 fdaa 	bl	800ef38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3ec:	e011      	b.n	800d412 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d012      	beq.n	800d41c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	3324      	adds	r3, #36	@ 0x24
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f000 fd5e 	bl	800debc <xTaskRemoveFromEventList>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d001      	beq.n	800d40a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d406:	f000 fe37 	bl	800e078 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d40a:	7bfb      	ldrb	r3, [r7, #15]
 800d40c:	3b01      	subs	r3, #1
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d416:	2b00      	cmp	r3, #0
 800d418:	dce9      	bgt.n	800d3ee <prvUnlockQueue+0x16>
 800d41a:	e000      	b.n	800d41e <prvUnlockQueue+0x46>
					break;
 800d41c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	22ff      	movs	r2, #255	@ 0xff
 800d422:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d426:	f001 fdb9 	bl	800ef9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d42a:	f001 fd85 	bl	800ef38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d434:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d436:	e011      	b.n	800d45c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	691b      	ldr	r3, [r3, #16]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d012      	beq.n	800d466 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	3310      	adds	r3, #16
 800d444:	4618      	mov	r0, r3
 800d446:	f000 fd39 	bl	800debc <xTaskRemoveFromEventList>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d001      	beq.n	800d454 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d450:	f000 fe12 	bl	800e078 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d454:	7bbb      	ldrb	r3, [r7, #14]
 800d456:	3b01      	subs	r3, #1
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d45c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d460:	2b00      	cmp	r3, #0
 800d462:	dce9      	bgt.n	800d438 <prvUnlockQueue+0x60>
 800d464:	e000      	b.n	800d468 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d466:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	22ff      	movs	r2, #255	@ 0xff
 800d46c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d470:	f001 fd94 	bl	800ef9c <vPortExitCritical>
}
 800d474:	bf00      	nop
 800d476:	3710      	adds	r7, #16
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d484:	f001 fd58 	bl	800ef38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d102      	bne.n	800d496 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d490:	2301      	movs	r3, #1
 800d492:	60fb      	str	r3, [r7, #12]
 800d494:	e001      	b.n	800d49a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d496:	2300      	movs	r3, #0
 800d498:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d49a:	f001 fd7f 	bl	800ef9c <vPortExitCritical>

	return xReturn;
 800d49e:	68fb      	ldr	r3, [r7, #12]
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3710      	adds	r7, #16
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4b0:	f001 fd42 	bl	800ef38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d102      	bne.n	800d4c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	60fb      	str	r3, [r7, #12]
 800d4c4:	e001      	b.n	800d4ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4ca:	f001 fd67 	bl	800ef9c <vPortExitCritical>

	return xReturn;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3710      	adds	r7, #16
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	60fb      	str	r3, [r7, #12]
 800d4e6:	e014      	b.n	800d512 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d4e8:	4a0f      	ldr	r2, [pc, #60]	@ (800d528 <vQueueAddToRegistry+0x50>)
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d10b      	bne.n	800d50c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d4f4:	490c      	ldr	r1, [pc, #48]	@ (800d528 <vQueueAddToRegistry+0x50>)
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	683a      	ldr	r2, [r7, #0]
 800d4fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d4fe:	4a0a      	ldr	r2, [pc, #40]	@ (800d528 <vQueueAddToRegistry+0x50>)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	00db      	lsls	r3, r3, #3
 800d504:	4413      	add	r3, r2
 800d506:	687a      	ldr	r2, [r7, #4]
 800d508:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d50a:	e006      	b.n	800d51a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	3301      	adds	r3, #1
 800d510:	60fb      	str	r3, [r7, #12]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2b07      	cmp	r3, #7
 800d516:	d9e7      	bls.n	800d4e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d518:	bf00      	nop
 800d51a:	bf00      	nop
 800d51c:	3714      	adds	r7, #20
 800d51e:	46bd      	mov	sp, r7
 800d520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	20001344 	.word	0x20001344

0800d52c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d52c:	b480      	push	{r7}
 800d52e:	b085      	sub	sp, #20
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d534:	2300      	movs	r3, #0
 800d536:	60fb      	str	r3, [r7, #12]
 800d538:	e016      	b.n	800d568 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d53a:	4a10      	ldr	r2, [pc, #64]	@ (800d57c <vQueueUnregisterQueue+0x50>)
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	00db      	lsls	r3, r3, #3
 800d540:	4413      	add	r3, r2
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	429a      	cmp	r2, r3
 800d548:	d10b      	bne.n	800d562 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d54a:	4a0c      	ldr	r2, [pc, #48]	@ (800d57c <vQueueUnregisterQueue+0x50>)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2100      	movs	r1, #0
 800d550:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d554:	4a09      	ldr	r2, [pc, #36]	@ (800d57c <vQueueUnregisterQueue+0x50>)
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	00db      	lsls	r3, r3, #3
 800d55a:	4413      	add	r3, r2
 800d55c:	2200      	movs	r2, #0
 800d55e:	605a      	str	r2, [r3, #4]
				break;
 800d560:	e006      	b.n	800d570 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	3301      	adds	r3, #1
 800d566:	60fb      	str	r3, [r7, #12]
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2b07      	cmp	r3, #7
 800d56c:	d9e5      	bls.n	800d53a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d56e:	bf00      	nop
 800d570:	bf00      	nop
 800d572:	3714      	adds	r7, #20
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr
 800d57c:	20001344 	.word	0x20001344

0800d580 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d590:	f001 fcd2 	bl	800ef38 <vPortEnterCritical>
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d59a:	b25b      	sxtb	r3, r3
 800d59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a0:	d103      	bne.n	800d5aa <vQueueWaitForMessageRestricted+0x2a>
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5b0:	b25b      	sxtb	r3, r3
 800d5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b6:	d103      	bne.n	800d5c0 <vQueueWaitForMessageRestricted+0x40>
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d5c0:	f001 fcec 	bl	800ef9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d106      	bne.n	800d5da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	3324      	adds	r3, #36	@ 0x24
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	68b9      	ldr	r1, [r7, #8]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f000 fc45 	bl	800de64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d5da:	6978      	ldr	r0, [r7, #20]
 800d5dc:	f7ff fefc 	bl	800d3d8 <prvUnlockQueue>
	}
 800d5e0:	bf00      	nop
 800d5e2:	3718      	adds	r7, #24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b08e      	sub	sp, #56	@ 0x38
 800d5ec:	af04      	add	r7, sp, #16
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	607a      	str	r2, [r7, #4]
 800d5f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d5f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d10b      	bne.n	800d614 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	623b      	str	r3, [r7, #32]
}
 800d60e:	bf00      	nop
 800d610:	bf00      	nop
 800d612:	e7fd      	b.n	800d610 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d616:	2b00      	cmp	r3, #0
 800d618:	d10b      	bne.n	800d632 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d61e:	f383 8811 	msr	BASEPRI, r3
 800d622:	f3bf 8f6f 	isb	sy
 800d626:	f3bf 8f4f 	dsb	sy
 800d62a:	61fb      	str	r3, [r7, #28]
}
 800d62c:	bf00      	nop
 800d62e:	bf00      	nop
 800d630:	e7fd      	b.n	800d62e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d632:	235c      	movs	r3, #92	@ 0x5c
 800d634:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	2b5c      	cmp	r3, #92	@ 0x5c
 800d63a:	d00b      	beq.n	800d654 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d640:	f383 8811 	msr	BASEPRI, r3
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	61bb      	str	r3, [r7, #24]
}
 800d64e:	bf00      	nop
 800d650:	bf00      	nop
 800d652:	e7fd      	b.n	800d650 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d654:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d01e      	beq.n	800d69a <xTaskCreateStatic+0xb2>
 800d65c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d01b      	beq.n	800d69a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d664:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d668:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d66a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d66e:	2202      	movs	r2, #2
 800d670:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d674:	2300      	movs	r3, #0
 800d676:	9303      	str	r3, [sp, #12]
 800d678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67a:	9302      	str	r3, [sp, #8]
 800d67c:	f107 0314 	add.w	r3, r7, #20
 800d680:	9301      	str	r3, [sp, #4]
 800d682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d684:	9300      	str	r3, [sp, #0]
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	68b9      	ldr	r1, [r7, #8]
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f000 f850 	bl	800d732 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d692:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d694:	f000 f8de 	bl	800d854 <prvAddNewTaskToReadyList>
 800d698:	e001      	b.n	800d69e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d69a:	2300      	movs	r3, #0
 800d69c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d69e:	697b      	ldr	r3, [r7, #20]
	}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3728      	adds	r7, #40	@ 0x28
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b08c      	sub	sp, #48	@ 0x30
 800d6ac:	af04      	add	r7, sp, #16
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	603b      	str	r3, [r7, #0]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d6b8:	88fb      	ldrh	r3, [r7, #6]
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f001 fd5d 	bl	800f17c <pvPortMalloc>
 800d6c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00e      	beq.n	800d6e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d6ca:	205c      	movs	r0, #92	@ 0x5c
 800d6cc:	f001 fd56 	bl	800f17c <pvPortMalloc>
 800d6d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d003      	beq.n	800d6e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	697a      	ldr	r2, [r7, #20]
 800d6dc:	631a      	str	r2, [r3, #48]	@ 0x30
 800d6de:	e005      	b.n	800d6ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d6e0:	6978      	ldr	r0, [r7, #20]
 800d6e2:	f001 fe19 	bl	800f318 <vPortFree>
 800d6e6:	e001      	b.n	800d6ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d017      	beq.n	800d722 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6fa:	88fa      	ldrh	r2, [r7, #6]
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	9303      	str	r3, [sp, #12]
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	9302      	str	r3, [sp, #8]
 800d704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d706:	9301      	str	r3, [sp, #4]
 800d708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	68b9      	ldr	r1, [r7, #8]
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f000 f80e 	bl	800d732 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d716:	69f8      	ldr	r0, [r7, #28]
 800d718:	f000 f89c 	bl	800d854 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d71c:	2301      	movs	r3, #1
 800d71e:	61bb      	str	r3, [r7, #24]
 800d720:	e002      	b.n	800d728 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d722:	f04f 33ff 	mov.w	r3, #4294967295
 800d726:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d728:	69bb      	ldr	r3, [r7, #24]
	}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3720      	adds	r7, #32
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b088      	sub	sp, #32
 800d736:	af00      	add	r7, sp, #0
 800d738:	60f8      	str	r0, [r7, #12]
 800d73a:	60b9      	str	r1, [r7, #8]
 800d73c:	607a      	str	r2, [r7, #4]
 800d73e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d742:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	009b      	lsls	r3, r3, #2
 800d748:	461a      	mov	r2, r3
 800d74a:	21a5      	movs	r1, #165	@ 0xa5
 800d74c:	f003 f80f 	bl	801076e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d752:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d75a:	3b01      	subs	r3, #1
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	4413      	add	r3, r2
 800d760:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	f023 0307 	bic.w	r3, r3, #7
 800d768:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	f003 0307 	and.w	r3, r3, #7
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00b      	beq.n	800d78c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	617b      	str	r3, [r7, #20]
}
 800d786:	bf00      	nop
 800d788:	bf00      	nop
 800d78a:	e7fd      	b.n	800d788 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d01f      	beq.n	800d7d2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d792:	2300      	movs	r3, #0
 800d794:	61fb      	str	r3, [r7, #28]
 800d796:	e012      	b.n	800d7be <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d798:	68ba      	ldr	r2, [r7, #8]
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	4413      	add	r3, r2
 800d79e:	7819      	ldrb	r1, [r3, #0]
 800d7a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	3334      	adds	r3, #52	@ 0x34
 800d7a8:	460a      	mov	r2, r1
 800d7aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d7ac:	68ba      	ldr	r2, [r7, #8]
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	4413      	add	r3, r2
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d006      	beq.n	800d7c6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	61fb      	str	r3, [r7, #28]
 800d7be:	69fb      	ldr	r3, [r7, #28]
 800d7c0:	2b0f      	cmp	r3, #15
 800d7c2:	d9e9      	bls.n	800d798 <prvInitialiseNewTask+0x66>
 800d7c4:	e000      	b.n	800d7c8 <prvInitialiseNewTask+0x96>
			{
				break;
 800d7c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d7d0:	e003      	b.n	800d7da <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7dc:	2b37      	cmp	r3, #55	@ 0x37
 800d7de:	d901      	bls.n	800d7e4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d7e0:	2337      	movs	r3, #55	@ 0x37
 800d7e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7ee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7fe fd7c 	bl	800c2f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d802:	3318      	adds	r3, #24
 800d804:	4618      	mov	r0, r3
 800d806:	f7fe fd77 	bl	800c2f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d80c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d80e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d812:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d818:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d81c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d81e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d822:	2200      	movs	r2, #0
 800d824:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d82e:	683a      	ldr	r2, [r7, #0]
 800d830:	68f9      	ldr	r1, [r7, #12]
 800d832:	69b8      	ldr	r0, [r7, #24]
 800d834:	f001 fa4e 	bl	800ecd4 <pxPortInitialiseStack>
 800d838:	4602      	mov	r2, r0
 800d83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d83c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d840:	2b00      	cmp	r3, #0
 800d842:	d002      	beq.n	800d84a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d84a:	bf00      	nop
 800d84c:	3720      	adds	r7, #32
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
	...

0800d854 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d85c:	f001 fb6c 	bl	800ef38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d860:	4b2d      	ldr	r3, [pc, #180]	@ (800d918 <prvAddNewTaskToReadyList+0xc4>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	3301      	adds	r3, #1
 800d866:	4a2c      	ldr	r2, [pc, #176]	@ (800d918 <prvAddNewTaskToReadyList+0xc4>)
 800d868:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d86a:	4b2c      	ldr	r3, [pc, #176]	@ (800d91c <prvAddNewTaskToReadyList+0xc8>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d109      	bne.n	800d886 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d872:	4a2a      	ldr	r2, [pc, #168]	@ (800d91c <prvAddNewTaskToReadyList+0xc8>)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d878:	4b27      	ldr	r3, [pc, #156]	@ (800d918 <prvAddNewTaskToReadyList+0xc4>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d110      	bne.n	800d8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d880:	f000 fc1e 	bl	800e0c0 <prvInitialiseTaskLists>
 800d884:	e00d      	b.n	800d8a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d886:	4b26      	ldr	r3, [pc, #152]	@ (800d920 <prvAddNewTaskToReadyList+0xcc>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d109      	bne.n	800d8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d88e:	4b23      	ldr	r3, [pc, #140]	@ (800d91c <prvAddNewTaskToReadyList+0xc8>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d898:	429a      	cmp	r2, r3
 800d89a:	d802      	bhi.n	800d8a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d89c:	4a1f      	ldr	r2, [pc, #124]	@ (800d91c <prvAddNewTaskToReadyList+0xc8>)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d8a2:	4b20      	ldr	r3, [pc, #128]	@ (800d924 <prvAddNewTaskToReadyList+0xd0>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	4a1e      	ldr	r2, [pc, #120]	@ (800d924 <prvAddNewTaskToReadyList+0xd0>)
 800d8aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d8ac:	4b1d      	ldr	r3, [pc, #116]	@ (800d924 <prvAddNewTaskToReadyList+0xd0>)
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8b8:	4b1b      	ldr	r3, [pc, #108]	@ (800d928 <prvAddNewTaskToReadyList+0xd4>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d903      	bls.n	800d8c8 <prvAddNewTaskToReadyList+0x74>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8c4:	4a18      	ldr	r2, [pc, #96]	@ (800d928 <prvAddNewTaskToReadyList+0xd4>)
 800d8c6:	6013      	str	r3, [r2, #0]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8cc:	4613      	mov	r3, r2
 800d8ce:	009b      	lsls	r3, r3, #2
 800d8d0:	4413      	add	r3, r2
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	4a15      	ldr	r2, [pc, #84]	@ (800d92c <prvAddNewTaskToReadyList+0xd8>)
 800d8d6:	441a      	add	r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	3304      	adds	r3, #4
 800d8dc:	4619      	mov	r1, r3
 800d8de:	4610      	mov	r0, r2
 800d8e0:	f7fe fd17 	bl	800c312 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d8e4:	f001 fb5a 	bl	800ef9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d8e8:	4b0d      	ldr	r3, [pc, #52]	@ (800d920 <prvAddNewTaskToReadyList+0xcc>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d00e      	beq.n	800d90e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d8f0:	4b0a      	ldr	r3, [pc, #40]	@ (800d91c <prvAddNewTaskToReadyList+0xc8>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d207      	bcs.n	800d90e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d8fe:	4b0c      	ldr	r3, [pc, #48]	@ (800d930 <prvAddNewTaskToReadyList+0xdc>)
 800d900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d904:	601a      	str	r2, [r3, #0]
 800d906:	f3bf 8f4f 	dsb	sy
 800d90a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d90e:	bf00      	nop
 800d910:	3708      	adds	r7, #8
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	20001858 	.word	0x20001858
 800d91c:	20001384 	.word	0x20001384
 800d920:	20001864 	.word	0x20001864
 800d924:	20001874 	.word	0x20001874
 800d928:	20001860 	.word	0x20001860
 800d92c:	20001388 	.word	0x20001388
 800d930:	e000ed04 	.word	0xe000ed04

0800d934 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d93c:	2300      	movs	r3, #0
 800d93e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d018      	beq.n	800d978 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d946:	4b14      	ldr	r3, [pc, #80]	@ (800d998 <vTaskDelay+0x64>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d00b      	beq.n	800d966 <vTaskDelay+0x32>
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d952:	f383 8811 	msr	BASEPRI, r3
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	60bb      	str	r3, [r7, #8]
}
 800d960:	bf00      	nop
 800d962:	bf00      	nop
 800d964:	e7fd      	b.n	800d962 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d966:	f000 f883 	bl	800da70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d96a:	2100      	movs	r1, #0
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 fe03 	bl	800e578 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d972:	f000 f88b 	bl	800da8c <xTaskResumeAll>
 800d976:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d107      	bne.n	800d98e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d97e:	4b07      	ldr	r3, [pc, #28]	@ (800d99c <vTaskDelay+0x68>)
 800d980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d984:	601a      	str	r2, [r3, #0]
 800d986:	f3bf 8f4f 	dsb	sy
 800d98a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d98e:	bf00      	nop
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	20001880 	.word	0x20001880
 800d99c:	e000ed04 	.word	0xe000ed04

0800d9a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b08a      	sub	sp, #40	@ 0x28
 800d9a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d9ae:	463a      	mov	r2, r7
 800d9b0:	1d39      	adds	r1, r7, #4
 800d9b2:	f107 0308 	add.w	r3, r7, #8
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fe fc4a 	bl	800c250 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d9bc:	6839      	ldr	r1, [r7, #0]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	68ba      	ldr	r2, [r7, #8]
 800d9c2:	9202      	str	r2, [sp, #8]
 800d9c4:	9301      	str	r3, [sp, #4]
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	460a      	mov	r2, r1
 800d9ce:	4922      	ldr	r1, [pc, #136]	@ (800da58 <vTaskStartScheduler+0xb8>)
 800d9d0:	4822      	ldr	r0, [pc, #136]	@ (800da5c <vTaskStartScheduler+0xbc>)
 800d9d2:	f7ff fe09 	bl	800d5e8 <xTaskCreateStatic>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	4a21      	ldr	r2, [pc, #132]	@ (800da60 <vTaskStartScheduler+0xc0>)
 800d9da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d9dc:	4b20      	ldr	r3, [pc, #128]	@ (800da60 <vTaskStartScheduler+0xc0>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d002      	beq.n	800d9ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	617b      	str	r3, [r7, #20]
 800d9e8:	e001      	b.n	800d9ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d102      	bne.n	800d9fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d9f4:	f000 fe14 	bl	800e620 <xTimerCreateTimerTask>
 800d9f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d116      	bne.n	800da2e <vTaskStartScheduler+0x8e>
	__asm volatile
 800da00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da04:	f383 8811 	msr	BASEPRI, r3
 800da08:	f3bf 8f6f 	isb	sy
 800da0c:	f3bf 8f4f 	dsb	sy
 800da10:	613b      	str	r3, [r7, #16]
}
 800da12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800da14:	4b13      	ldr	r3, [pc, #76]	@ (800da64 <vTaskStartScheduler+0xc4>)
 800da16:	f04f 32ff 	mov.w	r2, #4294967295
 800da1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800da1c:	4b12      	ldr	r3, [pc, #72]	@ (800da68 <vTaskStartScheduler+0xc8>)
 800da1e:	2201      	movs	r2, #1
 800da20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800da22:	4b12      	ldr	r3, [pc, #72]	@ (800da6c <vTaskStartScheduler+0xcc>)
 800da24:	2200      	movs	r2, #0
 800da26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800da28:	f001 f9e2 	bl	800edf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800da2c:	e00f      	b.n	800da4e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da34:	d10b      	bne.n	800da4e <vTaskStartScheduler+0xae>
	__asm volatile
 800da36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da3a:	f383 8811 	msr	BASEPRI, r3
 800da3e:	f3bf 8f6f 	isb	sy
 800da42:	f3bf 8f4f 	dsb	sy
 800da46:	60fb      	str	r3, [r7, #12]
}
 800da48:	bf00      	nop
 800da4a:	bf00      	nop
 800da4c:	e7fd      	b.n	800da4a <vTaskStartScheduler+0xaa>
}
 800da4e:	bf00      	nop
 800da50:	3718      	adds	r7, #24
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
 800da56:	bf00      	nop
 800da58:	080158f8 	.word	0x080158f8
 800da5c:	0800e091 	.word	0x0800e091
 800da60:	2000187c 	.word	0x2000187c
 800da64:	20001878 	.word	0x20001878
 800da68:	20001864 	.word	0x20001864
 800da6c:	2000185c 	.word	0x2000185c

0800da70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800da70:	b480      	push	{r7}
 800da72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800da74:	4b04      	ldr	r3, [pc, #16]	@ (800da88 <vTaskSuspendAll+0x18>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	3301      	adds	r3, #1
 800da7a:	4a03      	ldr	r2, [pc, #12]	@ (800da88 <vTaskSuspendAll+0x18>)
 800da7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800da7e:	bf00      	nop
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr
 800da88:	20001880 	.word	0x20001880

0800da8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da92:	2300      	movs	r3, #0
 800da94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da96:	2300      	movs	r3, #0
 800da98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da9a:	4b42      	ldr	r3, [pc, #264]	@ (800dba4 <xTaskResumeAll+0x118>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d10b      	bne.n	800daba <xTaskResumeAll+0x2e>
	__asm volatile
 800daa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa6:	f383 8811 	msr	BASEPRI, r3
 800daaa:	f3bf 8f6f 	isb	sy
 800daae:	f3bf 8f4f 	dsb	sy
 800dab2:	603b      	str	r3, [r7, #0]
}
 800dab4:	bf00      	nop
 800dab6:	bf00      	nop
 800dab8:	e7fd      	b.n	800dab6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800daba:	f001 fa3d 	bl	800ef38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dabe:	4b39      	ldr	r3, [pc, #228]	@ (800dba4 <xTaskResumeAll+0x118>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	3b01      	subs	r3, #1
 800dac4:	4a37      	ldr	r2, [pc, #220]	@ (800dba4 <xTaskResumeAll+0x118>)
 800dac6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dac8:	4b36      	ldr	r3, [pc, #216]	@ (800dba4 <xTaskResumeAll+0x118>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d162      	bne.n	800db96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dad0:	4b35      	ldr	r3, [pc, #212]	@ (800dba8 <xTaskResumeAll+0x11c>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d05e      	beq.n	800db96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dad8:	e02f      	b.n	800db3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dada:	4b34      	ldr	r3, [pc, #208]	@ (800dbac <xTaskResumeAll+0x120>)
 800dadc:	68db      	ldr	r3, [r3, #12]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	3318      	adds	r3, #24
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fe fc70 	bl	800c3cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	3304      	adds	r3, #4
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fe fc6b 	bl	800c3cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dafa:	4b2d      	ldr	r3, [pc, #180]	@ (800dbb0 <xTaskResumeAll+0x124>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d903      	bls.n	800db0a <xTaskResumeAll+0x7e>
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db06:	4a2a      	ldr	r2, [pc, #168]	@ (800dbb0 <xTaskResumeAll+0x124>)
 800db08:	6013      	str	r3, [r2, #0]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db0e:	4613      	mov	r3, r2
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	4413      	add	r3, r2
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	4a27      	ldr	r2, [pc, #156]	@ (800dbb4 <xTaskResumeAll+0x128>)
 800db18:	441a      	add	r2, r3
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	3304      	adds	r3, #4
 800db1e:	4619      	mov	r1, r3
 800db20:	4610      	mov	r0, r2
 800db22:	f7fe fbf6 	bl	800c312 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db2a:	4b23      	ldr	r3, [pc, #140]	@ (800dbb8 <xTaskResumeAll+0x12c>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db30:	429a      	cmp	r2, r3
 800db32:	d302      	bcc.n	800db3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800db34:	4b21      	ldr	r3, [pc, #132]	@ (800dbbc <xTaskResumeAll+0x130>)
 800db36:	2201      	movs	r2, #1
 800db38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db3a:	4b1c      	ldr	r3, [pc, #112]	@ (800dbac <xTaskResumeAll+0x120>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1cb      	bne.n	800dada <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d001      	beq.n	800db4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db48:	f000 fb58 	bl	800e1fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800db4c:	4b1c      	ldr	r3, [pc, #112]	@ (800dbc0 <xTaskResumeAll+0x134>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d010      	beq.n	800db7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800db58:	f000 f846 	bl	800dbe8 <xTaskIncrementTick>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d002      	beq.n	800db68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800db62:	4b16      	ldr	r3, [pc, #88]	@ (800dbbc <xTaskResumeAll+0x130>)
 800db64:	2201      	movs	r2, #1
 800db66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	3b01      	subs	r3, #1
 800db6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d1f1      	bne.n	800db58 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800db74:	4b12      	ldr	r3, [pc, #72]	@ (800dbc0 <xTaskResumeAll+0x134>)
 800db76:	2200      	movs	r2, #0
 800db78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db7a:	4b10      	ldr	r3, [pc, #64]	@ (800dbbc <xTaskResumeAll+0x130>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d009      	beq.n	800db96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db82:	2301      	movs	r3, #1
 800db84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db86:	4b0f      	ldr	r3, [pc, #60]	@ (800dbc4 <xTaskResumeAll+0x138>)
 800db88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db8c:	601a      	str	r2, [r3, #0]
 800db8e:	f3bf 8f4f 	dsb	sy
 800db92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db96:	f001 fa01 	bl	800ef9c <vPortExitCritical>

	return xAlreadyYielded;
 800db9a:	68bb      	ldr	r3, [r7, #8]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3710      	adds	r7, #16
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	20001880 	.word	0x20001880
 800dba8:	20001858 	.word	0x20001858
 800dbac:	20001818 	.word	0x20001818
 800dbb0:	20001860 	.word	0x20001860
 800dbb4:	20001388 	.word	0x20001388
 800dbb8:	20001384 	.word	0x20001384
 800dbbc:	2000186c 	.word	0x2000186c
 800dbc0:	20001868 	.word	0x20001868
 800dbc4:	e000ed04 	.word	0xe000ed04

0800dbc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b083      	sub	sp, #12
 800dbcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dbce:	4b05      	ldr	r3, [pc, #20]	@ (800dbe4 <xTaskGetTickCount+0x1c>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dbd4:	687b      	ldr	r3, [r7, #4]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	370c      	adds	r7, #12
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr
 800dbe2:	bf00      	nop
 800dbe4:	2000185c 	.word	0x2000185c

0800dbe8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b086      	sub	sp, #24
 800dbec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbf2:	4b4f      	ldr	r3, [pc, #316]	@ (800dd30 <xTaskIncrementTick+0x148>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f040 8090 	bne.w	800dd1c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dbfc:	4b4d      	ldr	r3, [pc, #308]	@ (800dd34 <xTaskIncrementTick+0x14c>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	3301      	adds	r3, #1
 800dc02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dc04:	4a4b      	ldr	r2, [pc, #300]	@ (800dd34 <xTaskIncrementTick+0x14c>)
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d121      	bne.n	800dc54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dc10:	4b49      	ldr	r3, [pc, #292]	@ (800dd38 <xTaskIncrementTick+0x150>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00b      	beq.n	800dc32 <xTaskIncrementTick+0x4a>
	__asm volatile
 800dc1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc1e:	f383 8811 	msr	BASEPRI, r3
 800dc22:	f3bf 8f6f 	isb	sy
 800dc26:	f3bf 8f4f 	dsb	sy
 800dc2a:	603b      	str	r3, [r7, #0]
}
 800dc2c:	bf00      	nop
 800dc2e:	bf00      	nop
 800dc30:	e7fd      	b.n	800dc2e <xTaskIncrementTick+0x46>
 800dc32:	4b41      	ldr	r3, [pc, #260]	@ (800dd38 <xTaskIncrementTick+0x150>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	60fb      	str	r3, [r7, #12]
 800dc38:	4b40      	ldr	r3, [pc, #256]	@ (800dd3c <xTaskIncrementTick+0x154>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4a3e      	ldr	r2, [pc, #248]	@ (800dd38 <xTaskIncrementTick+0x150>)
 800dc3e:	6013      	str	r3, [r2, #0]
 800dc40:	4a3e      	ldr	r2, [pc, #248]	@ (800dd3c <xTaskIncrementTick+0x154>)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	6013      	str	r3, [r2, #0]
 800dc46:	4b3e      	ldr	r3, [pc, #248]	@ (800dd40 <xTaskIncrementTick+0x158>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	4a3c      	ldr	r2, [pc, #240]	@ (800dd40 <xTaskIncrementTick+0x158>)
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	f000 fad4 	bl	800e1fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dc54:	4b3b      	ldr	r3, [pc, #236]	@ (800dd44 <xTaskIncrementTick+0x15c>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	693a      	ldr	r2, [r7, #16]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d349      	bcc.n	800dcf2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc5e:	4b36      	ldr	r3, [pc, #216]	@ (800dd38 <xTaskIncrementTick+0x150>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d104      	bne.n	800dc72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc68:	4b36      	ldr	r3, [pc, #216]	@ (800dd44 <xTaskIncrementTick+0x15c>)
 800dc6a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc6e:	601a      	str	r2, [r3, #0]
					break;
 800dc70:	e03f      	b.n	800dcf2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc72:	4b31      	ldr	r3, [pc, #196]	@ (800dd38 <xTaskIncrementTick+0x150>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	68db      	ldr	r3, [r3, #12]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dc82:	693a      	ldr	r2, [r7, #16]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d203      	bcs.n	800dc92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dc8a:	4a2e      	ldr	r2, [pc, #184]	@ (800dd44 <xTaskIncrementTick+0x15c>)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dc90:	e02f      	b.n	800dcf2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	3304      	adds	r3, #4
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fe fb98 	bl	800c3cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d004      	beq.n	800dcae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	3318      	adds	r3, #24
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7fe fb8f 	bl	800c3cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcb2:	4b25      	ldr	r3, [pc, #148]	@ (800dd48 <xTaskIncrementTick+0x160>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d903      	bls.n	800dcc2 <xTaskIncrementTick+0xda>
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcbe:	4a22      	ldr	r2, [pc, #136]	@ (800dd48 <xTaskIncrementTick+0x160>)
 800dcc0:	6013      	str	r3, [r2, #0]
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	4413      	add	r3, r2
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	4a1f      	ldr	r2, [pc, #124]	@ (800dd4c <xTaskIncrementTick+0x164>)
 800dcd0:	441a      	add	r2, r3
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	4610      	mov	r0, r2
 800dcda:	f7fe fb1a 	bl	800c312 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dce2:	4b1b      	ldr	r3, [pc, #108]	@ (800dd50 <xTaskIncrementTick+0x168>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d3b8      	bcc.n	800dc5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dcec:	2301      	movs	r3, #1
 800dcee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcf0:	e7b5      	b.n	800dc5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dcf2:	4b17      	ldr	r3, [pc, #92]	@ (800dd50 <xTaskIncrementTick+0x168>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcf8:	4914      	ldr	r1, [pc, #80]	@ (800dd4c <xTaskIncrementTick+0x164>)
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	4413      	add	r3, r2
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	440b      	add	r3, r1
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d901      	bls.n	800dd0e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dd0e:	4b11      	ldr	r3, [pc, #68]	@ (800dd54 <xTaskIncrementTick+0x16c>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d007      	beq.n	800dd26 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800dd16:	2301      	movs	r3, #1
 800dd18:	617b      	str	r3, [r7, #20]
 800dd1a:	e004      	b.n	800dd26 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dd1c:	4b0e      	ldr	r3, [pc, #56]	@ (800dd58 <xTaskIncrementTick+0x170>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	3301      	adds	r3, #1
 800dd22:	4a0d      	ldr	r2, [pc, #52]	@ (800dd58 <xTaskIncrementTick+0x170>)
 800dd24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dd26:	697b      	ldr	r3, [r7, #20]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3718      	adds	r7, #24
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	20001880 	.word	0x20001880
 800dd34:	2000185c 	.word	0x2000185c
 800dd38:	20001810 	.word	0x20001810
 800dd3c:	20001814 	.word	0x20001814
 800dd40:	20001870 	.word	0x20001870
 800dd44:	20001878 	.word	0x20001878
 800dd48:	20001860 	.word	0x20001860
 800dd4c:	20001388 	.word	0x20001388
 800dd50:	20001384 	.word	0x20001384
 800dd54:	2000186c 	.word	0x2000186c
 800dd58:	20001868 	.word	0x20001868

0800dd5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b085      	sub	sp, #20
 800dd60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dd62:	4b28      	ldr	r3, [pc, #160]	@ (800de04 <vTaskSwitchContext+0xa8>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d003      	beq.n	800dd72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dd6a:	4b27      	ldr	r3, [pc, #156]	@ (800de08 <vTaskSwitchContext+0xac>)
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dd70:	e042      	b.n	800ddf8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800dd72:	4b25      	ldr	r3, [pc, #148]	@ (800de08 <vTaskSwitchContext+0xac>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd78:	4b24      	ldr	r3, [pc, #144]	@ (800de0c <vTaskSwitchContext+0xb0>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	60fb      	str	r3, [r7, #12]
 800dd7e:	e011      	b.n	800dda4 <vTaskSwitchContext+0x48>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d10b      	bne.n	800dd9e <vTaskSwitchContext+0x42>
	__asm volatile
 800dd86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd8a:	f383 8811 	msr	BASEPRI, r3
 800dd8e:	f3bf 8f6f 	isb	sy
 800dd92:	f3bf 8f4f 	dsb	sy
 800dd96:	607b      	str	r3, [r7, #4]
}
 800dd98:	bf00      	nop
 800dd9a:	bf00      	nop
 800dd9c:	e7fd      	b.n	800dd9a <vTaskSwitchContext+0x3e>
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	3b01      	subs	r3, #1
 800dda2:	60fb      	str	r3, [r7, #12]
 800dda4:	491a      	ldr	r1, [pc, #104]	@ (800de10 <vTaskSwitchContext+0xb4>)
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	4613      	mov	r3, r2
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	4413      	add	r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	440b      	add	r3, r1
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d0e3      	beq.n	800dd80 <vTaskSwitchContext+0x24>
 800ddb8:	68fa      	ldr	r2, [r7, #12]
 800ddba:	4613      	mov	r3, r2
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	4413      	add	r3, r2
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	4a13      	ldr	r2, [pc, #76]	@ (800de10 <vTaskSwitchContext+0xb4>)
 800ddc4:	4413      	add	r3, r2
 800ddc6:	60bb      	str	r3, [r7, #8]
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	685a      	ldr	r2, [r3, #4]
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	605a      	str	r2, [r3, #4]
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	685a      	ldr	r2, [r3, #4]
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	3308      	adds	r3, #8
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d104      	bne.n	800dde8 <vTaskSwitchContext+0x8c>
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	685a      	ldr	r2, [r3, #4]
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	605a      	str	r2, [r3, #4]
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	68db      	ldr	r3, [r3, #12]
 800ddee:	4a09      	ldr	r2, [pc, #36]	@ (800de14 <vTaskSwitchContext+0xb8>)
 800ddf0:	6013      	str	r3, [r2, #0]
 800ddf2:	4a06      	ldr	r2, [pc, #24]	@ (800de0c <vTaskSwitchContext+0xb0>)
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6013      	str	r3, [r2, #0]
}
 800ddf8:	bf00      	nop
 800ddfa:	3714      	adds	r7, #20
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr
 800de04:	20001880 	.word	0x20001880
 800de08:	2000186c 	.word	0x2000186c
 800de0c:	20001860 	.word	0x20001860
 800de10:	20001388 	.word	0x20001388
 800de14:	20001384 	.word	0x20001384

0800de18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d10b      	bne.n	800de40 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800de28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de2c:	f383 8811 	msr	BASEPRI, r3
 800de30:	f3bf 8f6f 	isb	sy
 800de34:	f3bf 8f4f 	dsb	sy
 800de38:	60fb      	str	r3, [r7, #12]
}
 800de3a:	bf00      	nop
 800de3c:	bf00      	nop
 800de3e:	e7fd      	b.n	800de3c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de40:	4b07      	ldr	r3, [pc, #28]	@ (800de60 <vTaskPlaceOnEventList+0x48>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	3318      	adds	r3, #24
 800de46:	4619      	mov	r1, r3
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7fe fa86 	bl	800c35a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800de4e:	2101      	movs	r1, #1
 800de50:	6838      	ldr	r0, [r7, #0]
 800de52:	f000 fb91 	bl	800e578 <prvAddCurrentTaskToDelayedList>
}
 800de56:	bf00      	nop
 800de58:	3710      	adds	r7, #16
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	20001384 	.word	0x20001384

0800de64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de64:	b580      	push	{r7, lr}
 800de66:	b086      	sub	sp, #24
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d10b      	bne.n	800de8e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800de76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de7a:	f383 8811 	msr	BASEPRI, r3
 800de7e:	f3bf 8f6f 	isb	sy
 800de82:	f3bf 8f4f 	dsb	sy
 800de86:	617b      	str	r3, [r7, #20]
}
 800de88:	bf00      	nop
 800de8a:	bf00      	nop
 800de8c:	e7fd      	b.n	800de8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de8e:	4b0a      	ldr	r3, [pc, #40]	@ (800deb8 <vTaskPlaceOnEventListRestricted+0x54>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	3318      	adds	r3, #24
 800de94:	4619      	mov	r1, r3
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f7fe fa3b 	bl	800c312 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d002      	beq.n	800dea8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800dea2:	f04f 33ff 	mov.w	r3, #4294967295
 800dea6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dea8:	6879      	ldr	r1, [r7, #4]
 800deaa:	68b8      	ldr	r0, [r7, #8]
 800deac:	f000 fb64 	bl	800e578 <prvAddCurrentTaskToDelayedList>
	}
 800deb0:	bf00      	nop
 800deb2:	3718      	adds	r7, #24
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	20001384 	.word	0x20001384

0800debc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b086      	sub	sp, #24
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	68db      	ldr	r3, [r3, #12]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d10b      	bne.n	800deea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ded2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded6:	f383 8811 	msr	BASEPRI, r3
 800deda:	f3bf 8f6f 	isb	sy
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	60fb      	str	r3, [r7, #12]
}
 800dee4:	bf00      	nop
 800dee6:	bf00      	nop
 800dee8:	e7fd      	b.n	800dee6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	3318      	adds	r3, #24
 800deee:	4618      	mov	r0, r3
 800def0:	f7fe fa6c 	bl	800c3cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800def4:	4b1d      	ldr	r3, [pc, #116]	@ (800df6c <xTaskRemoveFromEventList+0xb0>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d11d      	bne.n	800df38 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	3304      	adds	r3, #4
 800df00:	4618      	mov	r0, r3
 800df02:	f7fe fa63 	bl	800c3cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df0a:	4b19      	ldr	r3, [pc, #100]	@ (800df70 <xTaskRemoveFromEventList+0xb4>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d903      	bls.n	800df1a <xTaskRemoveFromEventList+0x5e>
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df16:	4a16      	ldr	r2, [pc, #88]	@ (800df70 <xTaskRemoveFromEventList+0xb4>)
 800df18:	6013      	str	r3, [r2, #0]
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df1e:	4613      	mov	r3, r2
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	4413      	add	r3, r2
 800df24:	009b      	lsls	r3, r3, #2
 800df26:	4a13      	ldr	r2, [pc, #76]	@ (800df74 <xTaskRemoveFromEventList+0xb8>)
 800df28:	441a      	add	r2, r3
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	3304      	adds	r3, #4
 800df2e:	4619      	mov	r1, r3
 800df30:	4610      	mov	r0, r2
 800df32:	f7fe f9ee 	bl	800c312 <vListInsertEnd>
 800df36:	e005      	b.n	800df44 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	3318      	adds	r3, #24
 800df3c:	4619      	mov	r1, r3
 800df3e:	480e      	ldr	r0, [pc, #56]	@ (800df78 <xTaskRemoveFromEventList+0xbc>)
 800df40:	f7fe f9e7 	bl	800c312 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df48:	4b0c      	ldr	r3, [pc, #48]	@ (800df7c <xTaskRemoveFromEventList+0xc0>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df4e:	429a      	cmp	r2, r3
 800df50:	d905      	bls.n	800df5e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800df52:	2301      	movs	r3, #1
 800df54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800df56:	4b0a      	ldr	r3, [pc, #40]	@ (800df80 <xTaskRemoveFromEventList+0xc4>)
 800df58:	2201      	movs	r2, #1
 800df5a:	601a      	str	r2, [r3, #0]
 800df5c:	e001      	b.n	800df62 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800df5e:	2300      	movs	r3, #0
 800df60:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800df62:	697b      	ldr	r3, [r7, #20]
}
 800df64:	4618      	mov	r0, r3
 800df66:	3718      	adds	r7, #24
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	20001880 	.word	0x20001880
 800df70:	20001860 	.word	0x20001860
 800df74:	20001388 	.word	0x20001388
 800df78:	20001818 	.word	0x20001818
 800df7c:	20001384 	.word	0x20001384
 800df80:	2000186c 	.word	0x2000186c

0800df84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df8c:	4b06      	ldr	r3, [pc, #24]	@ (800dfa8 <vTaskInternalSetTimeOutState+0x24>)
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df94:	4b05      	ldr	r3, [pc, #20]	@ (800dfac <vTaskInternalSetTimeOutState+0x28>)
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	605a      	str	r2, [r3, #4]
}
 800df9c:	bf00      	nop
 800df9e:	370c      	adds	r7, #12
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr
 800dfa8:	20001870 	.word	0x20001870
 800dfac:	2000185c 	.word	0x2000185c

0800dfb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b088      	sub	sp, #32
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10b      	bne.n	800dfd8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800dfc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfc4:	f383 8811 	msr	BASEPRI, r3
 800dfc8:	f3bf 8f6f 	isb	sy
 800dfcc:	f3bf 8f4f 	dsb	sy
 800dfd0:	613b      	str	r3, [r7, #16]
}
 800dfd2:	bf00      	nop
 800dfd4:	bf00      	nop
 800dfd6:	e7fd      	b.n	800dfd4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d10b      	bne.n	800dff6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800dfde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe2:	f383 8811 	msr	BASEPRI, r3
 800dfe6:	f3bf 8f6f 	isb	sy
 800dfea:	f3bf 8f4f 	dsb	sy
 800dfee:	60fb      	str	r3, [r7, #12]
}
 800dff0:	bf00      	nop
 800dff2:	bf00      	nop
 800dff4:	e7fd      	b.n	800dff2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800dff6:	f000 ff9f 	bl	800ef38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dffa:	4b1d      	ldr	r3, [pc, #116]	@ (800e070 <xTaskCheckForTimeOut+0xc0>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	69ba      	ldr	r2, [r7, #24]
 800e006:	1ad3      	subs	r3, r2, r3
 800e008:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e012:	d102      	bne.n	800e01a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e014:	2300      	movs	r3, #0
 800e016:	61fb      	str	r3, [r7, #28]
 800e018:	e023      	b.n	800e062 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	4b15      	ldr	r3, [pc, #84]	@ (800e074 <xTaskCheckForTimeOut+0xc4>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	429a      	cmp	r2, r3
 800e024:	d007      	beq.n	800e036 <xTaskCheckForTimeOut+0x86>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	69ba      	ldr	r2, [r7, #24]
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d302      	bcc.n	800e036 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e030:	2301      	movs	r3, #1
 800e032:	61fb      	str	r3, [r7, #28]
 800e034:	e015      	b.n	800e062 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	697a      	ldr	r2, [r7, #20]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d20b      	bcs.n	800e058 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	1ad2      	subs	r2, r2, r3
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7ff ff99 	bl	800df84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e052:	2300      	movs	r3, #0
 800e054:	61fb      	str	r3, [r7, #28]
 800e056:	e004      	b.n	800e062 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	2200      	movs	r2, #0
 800e05c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e05e:	2301      	movs	r3, #1
 800e060:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e062:	f000 ff9b 	bl	800ef9c <vPortExitCritical>

	return xReturn;
 800e066:	69fb      	ldr	r3, [r7, #28]
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3720      	adds	r7, #32
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	2000185c 	.word	0x2000185c
 800e074:	20001870 	.word	0x20001870

0800e078 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e078:	b480      	push	{r7}
 800e07a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e07c:	4b03      	ldr	r3, [pc, #12]	@ (800e08c <vTaskMissedYield+0x14>)
 800e07e:	2201      	movs	r2, #1
 800e080:	601a      	str	r2, [r3, #0]
}
 800e082:	bf00      	nop
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr
 800e08c:	2000186c 	.word	0x2000186c

0800e090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e098:	f000 f852 	bl	800e140 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e09c:	4b06      	ldr	r3, [pc, #24]	@ (800e0b8 <prvIdleTask+0x28>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d9f9      	bls.n	800e098 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e0a4:	4b05      	ldr	r3, [pc, #20]	@ (800e0bc <prvIdleTask+0x2c>)
 800e0a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0aa:	601a      	str	r2, [r3, #0]
 800e0ac:	f3bf 8f4f 	dsb	sy
 800e0b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e0b4:	e7f0      	b.n	800e098 <prvIdleTask+0x8>
 800e0b6:	bf00      	nop
 800e0b8:	20001388 	.word	0x20001388
 800e0bc:	e000ed04 	.word	0xe000ed04

0800e0c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	607b      	str	r3, [r7, #4]
 800e0ca:	e00c      	b.n	800e0e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	009b      	lsls	r3, r3, #2
 800e0d2:	4413      	add	r3, r2
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	4a12      	ldr	r2, [pc, #72]	@ (800e120 <prvInitialiseTaskLists+0x60>)
 800e0d8:	4413      	add	r3, r2
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7fe f8ec 	bl	800c2b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	607b      	str	r3, [r7, #4]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2b37      	cmp	r3, #55	@ 0x37
 800e0ea:	d9ef      	bls.n	800e0cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e0ec:	480d      	ldr	r0, [pc, #52]	@ (800e124 <prvInitialiseTaskLists+0x64>)
 800e0ee:	f7fe f8e3 	bl	800c2b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e0f2:	480d      	ldr	r0, [pc, #52]	@ (800e128 <prvInitialiseTaskLists+0x68>)
 800e0f4:	f7fe f8e0 	bl	800c2b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e0f8:	480c      	ldr	r0, [pc, #48]	@ (800e12c <prvInitialiseTaskLists+0x6c>)
 800e0fa:	f7fe f8dd 	bl	800c2b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e0fe:	480c      	ldr	r0, [pc, #48]	@ (800e130 <prvInitialiseTaskLists+0x70>)
 800e100:	f7fe f8da 	bl	800c2b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e104:	480b      	ldr	r0, [pc, #44]	@ (800e134 <prvInitialiseTaskLists+0x74>)
 800e106:	f7fe f8d7 	bl	800c2b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e10a:	4b0b      	ldr	r3, [pc, #44]	@ (800e138 <prvInitialiseTaskLists+0x78>)
 800e10c:	4a05      	ldr	r2, [pc, #20]	@ (800e124 <prvInitialiseTaskLists+0x64>)
 800e10e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e110:	4b0a      	ldr	r3, [pc, #40]	@ (800e13c <prvInitialiseTaskLists+0x7c>)
 800e112:	4a05      	ldr	r2, [pc, #20]	@ (800e128 <prvInitialiseTaskLists+0x68>)
 800e114:	601a      	str	r2, [r3, #0]
}
 800e116:	bf00      	nop
 800e118:	3708      	adds	r7, #8
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	20001388 	.word	0x20001388
 800e124:	200017e8 	.word	0x200017e8
 800e128:	200017fc 	.word	0x200017fc
 800e12c:	20001818 	.word	0x20001818
 800e130:	2000182c 	.word	0x2000182c
 800e134:	20001844 	.word	0x20001844
 800e138:	20001810 	.word	0x20001810
 800e13c:	20001814 	.word	0x20001814

0800e140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e146:	e019      	b.n	800e17c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e148:	f000 fef6 	bl	800ef38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e14c:	4b10      	ldr	r3, [pc, #64]	@ (800e190 <prvCheckTasksWaitingTermination+0x50>)
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	3304      	adds	r3, #4
 800e158:	4618      	mov	r0, r3
 800e15a:	f7fe f937 	bl	800c3cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e15e:	4b0d      	ldr	r3, [pc, #52]	@ (800e194 <prvCheckTasksWaitingTermination+0x54>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	3b01      	subs	r3, #1
 800e164:	4a0b      	ldr	r2, [pc, #44]	@ (800e194 <prvCheckTasksWaitingTermination+0x54>)
 800e166:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e168:	4b0b      	ldr	r3, [pc, #44]	@ (800e198 <prvCheckTasksWaitingTermination+0x58>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	3b01      	subs	r3, #1
 800e16e:	4a0a      	ldr	r2, [pc, #40]	@ (800e198 <prvCheckTasksWaitingTermination+0x58>)
 800e170:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e172:	f000 ff13 	bl	800ef9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 f810 	bl	800e19c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e17c:	4b06      	ldr	r3, [pc, #24]	@ (800e198 <prvCheckTasksWaitingTermination+0x58>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d1e1      	bne.n	800e148 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e184:	bf00      	nop
 800e186:	bf00      	nop
 800e188:	3708      	adds	r7, #8
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	2000182c 	.word	0x2000182c
 800e194:	20001858 	.word	0x20001858
 800e198:	20001840 	.word	0x20001840

0800e19c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d108      	bne.n	800e1c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f001 f8b0 	bl	800f318 <vPortFree>
				vPortFree( pxTCB );
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f001 f8ad 	bl	800f318 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e1be:	e019      	b.n	800e1f4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d103      	bne.n	800e1d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f001 f8a4 	bl	800f318 <vPortFree>
	}
 800e1d0:	e010      	b.n	800e1f4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e1d8:	2b02      	cmp	r3, #2
 800e1da:	d00b      	beq.n	800e1f4 <prvDeleteTCB+0x58>
	__asm volatile
 800e1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e0:	f383 8811 	msr	BASEPRI, r3
 800e1e4:	f3bf 8f6f 	isb	sy
 800e1e8:	f3bf 8f4f 	dsb	sy
 800e1ec:	60fb      	str	r3, [r7, #12]
}
 800e1ee:	bf00      	nop
 800e1f0:	bf00      	nop
 800e1f2:	e7fd      	b.n	800e1f0 <prvDeleteTCB+0x54>
	}
 800e1f4:	bf00      	nop
 800e1f6:	3710      	adds	r7, #16
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b083      	sub	sp, #12
 800e200:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e202:	4b0c      	ldr	r3, [pc, #48]	@ (800e234 <prvResetNextTaskUnblockTime+0x38>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d104      	bne.n	800e216 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e20c:	4b0a      	ldr	r3, [pc, #40]	@ (800e238 <prvResetNextTaskUnblockTime+0x3c>)
 800e20e:	f04f 32ff 	mov.w	r2, #4294967295
 800e212:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e214:	e008      	b.n	800e228 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e216:	4b07      	ldr	r3, [pc, #28]	@ (800e234 <prvResetNextTaskUnblockTime+0x38>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	4a04      	ldr	r2, [pc, #16]	@ (800e238 <prvResetNextTaskUnblockTime+0x3c>)
 800e226:	6013      	str	r3, [r2, #0]
}
 800e228:	bf00      	nop
 800e22a:	370c      	adds	r7, #12
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr
 800e234:	20001810 	.word	0x20001810
 800e238:	20001878 	.word	0x20001878

0800e23c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e242:	4b05      	ldr	r3, [pc, #20]	@ (800e258 <xTaskGetCurrentTaskHandle+0x1c>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e248:	687b      	ldr	r3, [r7, #4]
	}
 800e24a:	4618      	mov	r0, r3
 800e24c:	370c      	adds	r7, #12
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr
 800e256:	bf00      	nop
 800e258:	20001384 	.word	0x20001384

0800e25c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e25c:	b480      	push	{r7}
 800e25e:	b083      	sub	sp, #12
 800e260:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e262:	4b0b      	ldr	r3, [pc, #44]	@ (800e290 <xTaskGetSchedulerState+0x34>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d102      	bne.n	800e270 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e26a:	2301      	movs	r3, #1
 800e26c:	607b      	str	r3, [r7, #4]
 800e26e:	e008      	b.n	800e282 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e270:	4b08      	ldr	r3, [pc, #32]	@ (800e294 <xTaskGetSchedulerState+0x38>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d102      	bne.n	800e27e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e278:	2302      	movs	r3, #2
 800e27a:	607b      	str	r3, [r7, #4]
 800e27c:	e001      	b.n	800e282 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e27e:	2300      	movs	r3, #0
 800e280:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e282:	687b      	ldr	r3, [r7, #4]
	}
 800e284:	4618      	mov	r0, r3
 800e286:	370c      	adds	r7, #12
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr
 800e290:	20001864 	.word	0x20001864
 800e294:	20001880 	.word	0x20001880

0800e298 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d051      	beq.n	800e352 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2b2:	4b2a      	ldr	r3, [pc, #168]	@ (800e35c <xTaskPriorityInherit+0xc4>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d241      	bcs.n	800e340 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	699b      	ldr	r3, [r3, #24]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	db06      	blt.n	800e2d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2c4:	4b25      	ldr	r3, [pc, #148]	@ (800e35c <xTaskPriorityInherit+0xc4>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	6959      	ldr	r1, [r3, #20]
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2da:	4613      	mov	r3, r2
 800e2dc:	009b      	lsls	r3, r3, #2
 800e2de:	4413      	add	r3, r2
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	4a1f      	ldr	r2, [pc, #124]	@ (800e360 <xTaskPriorityInherit+0xc8>)
 800e2e4:	4413      	add	r3, r2
 800e2e6:	4299      	cmp	r1, r3
 800e2e8:	d122      	bne.n	800e330 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	3304      	adds	r3, #4
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7fe f86c 	bl	800c3cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e2f4:	4b19      	ldr	r3, [pc, #100]	@ (800e35c <xTaskPriorityInherit+0xc4>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e302:	4b18      	ldr	r3, [pc, #96]	@ (800e364 <xTaskPriorityInherit+0xcc>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	429a      	cmp	r2, r3
 800e308:	d903      	bls.n	800e312 <xTaskPriorityInherit+0x7a>
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e30e:	4a15      	ldr	r2, [pc, #84]	@ (800e364 <xTaskPriorityInherit+0xcc>)
 800e310:	6013      	str	r3, [r2, #0]
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e316:	4613      	mov	r3, r2
 800e318:	009b      	lsls	r3, r3, #2
 800e31a:	4413      	add	r3, r2
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	4a10      	ldr	r2, [pc, #64]	@ (800e360 <xTaskPriorityInherit+0xc8>)
 800e320:	441a      	add	r2, r3
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	3304      	adds	r3, #4
 800e326:	4619      	mov	r1, r3
 800e328:	4610      	mov	r0, r2
 800e32a:	f7fd fff2 	bl	800c312 <vListInsertEnd>
 800e32e:	e004      	b.n	800e33a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e330:	4b0a      	ldr	r3, [pc, #40]	@ (800e35c <xTaskPriorityInherit+0xc4>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e33a:	2301      	movs	r3, #1
 800e33c:	60fb      	str	r3, [r7, #12]
 800e33e:	e008      	b.n	800e352 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e344:	4b05      	ldr	r3, [pc, #20]	@ (800e35c <xTaskPriorityInherit+0xc4>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d201      	bcs.n	800e352 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e34e:	2301      	movs	r3, #1
 800e350:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e352:	68fb      	ldr	r3, [r7, #12]
	}
 800e354:	4618      	mov	r0, r3
 800e356:	3710      	adds	r7, #16
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	20001384 	.word	0x20001384
 800e360:	20001388 	.word	0x20001388
 800e364:	20001860 	.word	0x20001860

0800e368 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b086      	sub	sp, #24
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e374:	2300      	movs	r3, #0
 800e376:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d058      	beq.n	800e430 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e37e:	4b2f      	ldr	r3, [pc, #188]	@ (800e43c <xTaskPriorityDisinherit+0xd4>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	693a      	ldr	r2, [r7, #16]
 800e384:	429a      	cmp	r2, r3
 800e386:	d00b      	beq.n	800e3a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e38c:	f383 8811 	msr	BASEPRI, r3
 800e390:	f3bf 8f6f 	isb	sy
 800e394:	f3bf 8f4f 	dsb	sy
 800e398:	60fb      	str	r3, [r7, #12]
}
 800e39a:	bf00      	nop
 800e39c:	bf00      	nop
 800e39e:	e7fd      	b.n	800e39c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d10b      	bne.n	800e3c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ac:	f383 8811 	msr	BASEPRI, r3
 800e3b0:	f3bf 8f6f 	isb	sy
 800e3b4:	f3bf 8f4f 	dsb	sy
 800e3b8:	60bb      	str	r3, [r7, #8]
}
 800e3ba:	bf00      	nop
 800e3bc:	bf00      	nop
 800e3be:	e7fd      	b.n	800e3bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3c4:	1e5a      	subs	r2, r3, #1
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d02c      	beq.n	800e430 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d128      	bne.n	800e430 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	3304      	adds	r3, #4
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7fd fff2 	bl	800c3cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e400:	4b0f      	ldr	r3, [pc, #60]	@ (800e440 <xTaskPriorityDisinherit+0xd8>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	429a      	cmp	r2, r3
 800e406:	d903      	bls.n	800e410 <xTaskPriorityDisinherit+0xa8>
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e40c:	4a0c      	ldr	r2, [pc, #48]	@ (800e440 <xTaskPriorityDisinherit+0xd8>)
 800e40e:	6013      	str	r3, [r2, #0]
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e414:	4613      	mov	r3, r2
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	4413      	add	r3, r2
 800e41a:	009b      	lsls	r3, r3, #2
 800e41c:	4a09      	ldr	r2, [pc, #36]	@ (800e444 <xTaskPriorityDisinherit+0xdc>)
 800e41e:	441a      	add	r2, r3
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	3304      	adds	r3, #4
 800e424:	4619      	mov	r1, r3
 800e426:	4610      	mov	r0, r2
 800e428:	f7fd ff73 	bl	800c312 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e42c:	2301      	movs	r3, #1
 800e42e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e430:	697b      	ldr	r3, [r7, #20]
	}
 800e432:	4618      	mov	r0, r3
 800e434:	3718      	adds	r7, #24
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	20001384 	.word	0x20001384
 800e440:	20001860 	.word	0x20001860
 800e444:	20001388 	.word	0x20001388

0800e448 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b088      	sub	sp, #32
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e456:	2301      	movs	r3, #1
 800e458:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d06c      	beq.n	800e53a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e460:	69bb      	ldr	r3, [r7, #24]
 800e462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e464:	2b00      	cmp	r3, #0
 800e466:	d10b      	bne.n	800e480 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e46c:	f383 8811 	msr	BASEPRI, r3
 800e470:	f3bf 8f6f 	isb	sy
 800e474:	f3bf 8f4f 	dsb	sy
 800e478:	60fb      	str	r3, [r7, #12]
}
 800e47a:	bf00      	nop
 800e47c:	bf00      	nop
 800e47e:	e7fd      	b.n	800e47c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e480:	69bb      	ldr	r3, [r7, #24]
 800e482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e484:	683a      	ldr	r2, [r7, #0]
 800e486:	429a      	cmp	r2, r3
 800e488:	d902      	bls.n	800e490 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	61fb      	str	r3, [r7, #28]
 800e48e:	e002      	b.n	800e496 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e490:	69bb      	ldr	r3, [r7, #24]
 800e492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e494:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e49a:	69fa      	ldr	r2, [r7, #28]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d04c      	beq.n	800e53a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e4a0:	69bb      	ldr	r3, [r7, #24]
 800e4a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4a4:	697a      	ldr	r2, [r7, #20]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d147      	bne.n	800e53a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e4aa:	4b26      	ldr	r3, [pc, #152]	@ (800e544 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	69ba      	ldr	r2, [r7, #24]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d10b      	bne.n	800e4cc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	60bb      	str	r3, [r7, #8]
}
 800e4c6:	bf00      	nop
 800e4c8:	bf00      	nop
 800e4ca:	e7fd      	b.n	800e4c8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e4cc:	69bb      	ldr	r3, [r7, #24]
 800e4ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e4d2:	69bb      	ldr	r3, [r7, #24]
 800e4d4:	69fa      	ldr	r2, [r7, #28]
 800e4d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	699b      	ldr	r3, [r3, #24]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	db04      	blt.n	800e4ea <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4e0:	69fb      	ldr	r3, [r7, #28]
 800e4e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e4e6:	69bb      	ldr	r3, [r7, #24]
 800e4e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	6959      	ldr	r1, [r3, #20]
 800e4ee:	693a      	ldr	r2, [r7, #16]
 800e4f0:	4613      	mov	r3, r2
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	4413      	add	r3, r2
 800e4f6:	009b      	lsls	r3, r3, #2
 800e4f8:	4a13      	ldr	r2, [pc, #76]	@ (800e548 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e4fa:	4413      	add	r3, r2
 800e4fc:	4299      	cmp	r1, r3
 800e4fe:	d11c      	bne.n	800e53a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e500:	69bb      	ldr	r3, [r7, #24]
 800e502:	3304      	adds	r3, #4
 800e504:	4618      	mov	r0, r3
 800e506:	f7fd ff61 	bl	800c3cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e50a:	69bb      	ldr	r3, [r7, #24]
 800e50c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e50e:	4b0f      	ldr	r3, [pc, #60]	@ (800e54c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	429a      	cmp	r2, r3
 800e514:	d903      	bls.n	800e51e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e516:	69bb      	ldr	r3, [r7, #24]
 800e518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e51a:	4a0c      	ldr	r2, [pc, #48]	@ (800e54c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e51c:	6013      	str	r3, [r2, #0]
 800e51e:	69bb      	ldr	r3, [r7, #24]
 800e520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e522:	4613      	mov	r3, r2
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	4413      	add	r3, r2
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	4a07      	ldr	r2, [pc, #28]	@ (800e548 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e52c:	441a      	add	r2, r3
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	3304      	adds	r3, #4
 800e532:	4619      	mov	r1, r3
 800e534:	4610      	mov	r0, r2
 800e536:	f7fd feec 	bl	800c312 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e53a:	bf00      	nop
 800e53c:	3720      	adds	r7, #32
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	20001384 	.word	0x20001384
 800e548:	20001388 	.word	0x20001388
 800e54c:	20001860 	.word	0x20001860

0800e550 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e550:	b480      	push	{r7}
 800e552:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e554:	4b07      	ldr	r3, [pc, #28]	@ (800e574 <pvTaskIncrementMutexHeldCount+0x24>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d004      	beq.n	800e566 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e55c:	4b05      	ldr	r3, [pc, #20]	@ (800e574 <pvTaskIncrementMutexHeldCount+0x24>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e562:	3201      	adds	r2, #1
 800e564:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e566:	4b03      	ldr	r3, [pc, #12]	@ (800e574 <pvTaskIncrementMutexHeldCount+0x24>)
 800e568:	681b      	ldr	r3, [r3, #0]
	}
 800e56a:	4618      	mov	r0, r3
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr
 800e574:	20001384 	.word	0x20001384

0800e578 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e582:	4b21      	ldr	r3, [pc, #132]	@ (800e608 <prvAddCurrentTaskToDelayedList+0x90>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e588:	4b20      	ldr	r3, [pc, #128]	@ (800e60c <prvAddCurrentTaskToDelayedList+0x94>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	3304      	adds	r3, #4
 800e58e:	4618      	mov	r0, r3
 800e590:	f7fd ff1c 	bl	800c3cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e59a:	d10a      	bne.n	800e5b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d007      	beq.n	800e5b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5a2:	4b1a      	ldr	r3, [pc, #104]	@ (800e60c <prvAddCurrentTaskToDelayedList+0x94>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	3304      	adds	r3, #4
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	4819      	ldr	r0, [pc, #100]	@ (800e610 <prvAddCurrentTaskToDelayedList+0x98>)
 800e5ac:	f7fd feb1 	bl	800c312 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e5b0:	e026      	b.n	800e600 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e5b2:	68fa      	ldr	r2, [r7, #12]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	4413      	add	r3, r2
 800e5b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e5ba:	4b14      	ldr	r3, [pc, #80]	@ (800e60c <prvAddCurrentTaskToDelayedList+0x94>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	68ba      	ldr	r2, [r7, #8]
 800e5c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d209      	bcs.n	800e5de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5ca:	4b12      	ldr	r3, [pc, #72]	@ (800e614 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e5cc:	681a      	ldr	r2, [r3, #0]
 800e5ce:	4b0f      	ldr	r3, [pc, #60]	@ (800e60c <prvAddCurrentTaskToDelayedList+0x94>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	3304      	adds	r3, #4
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	4610      	mov	r0, r2
 800e5d8:	f7fd febf 	bl	800c35a <vListInsert>
}
 800e5dc:	e010      	b.n	800e600 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5de:	4b0e      	ldr	r3, [pc, #56]	@ (800e618 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e60c <prvAddCurrentTaskToDelayedList+0x94>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	3304      	adds	r3, #4
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	4610      	mov	r0, r2
 800e5ec:	f7fd feb5 	bl	800c35a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e5f0:	4b0a      	ldr	r3, [pc, #40]	@ (800e61c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	68ba      	ldr	r2, [r7, #8]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d202      	bcs.n	800e600 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e5fa:	4a08      	ldr	r2, [pc, #32]	@ (800e61c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	6013      	str	r3, [r2, #0]
}
 800e600:	bf00      	nop
 800e602:	3710      	adds	r7, #16
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}
 800e608:	2000185c 	.word	0x2000185c
 800e60c:	20001384 	.word	0x20001384
 800e610:	20001844 	.word	0x20001844
 800e614:	20001814 	.word	0x20001814
 800e618:	20001810 	.word	0x20001810
 800e61c:	20001878 	.word	0x20001878

0800e620 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b08a      	sub	sp, #40	@ 0x28
 800e624:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e626:	2300      	movs	r3, #0
 800e628:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e62a:	f000 fb13 	bl	800ec54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e62e:	4b1d      	ldr	r3, [pc, #116]	@ (800e6a4 <xTimerCreateTimerTask+0x84>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d021      	beq.n	800e67a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e636:	2300      	movs	r3, #0
 800e638:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e63a:	2300      	movs	r3, #0
 800e63c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e63e:	1d3a      	adds	r2, r7, #4
 800e640:	f107 0108 	add.w	r1, r7, #8
 800e644:	f107 030c 	add.w	r3, r7, #12
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fd fe1b 	bl	800c284 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e64e:	6879      	ldr	r1, [r7, #4]
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	9202      	str	r2, [sp, #8]
 800e656:	9301      	str	r3, [sp, #4]
 800e658:	2302      	movs	r3, #2
 800e65a:	9300      	str	r3, [sp, #0]
 800e65c:	2300      	movs	r3, #0
 800e65e:	460a      	mov	r2, r1
 800e660:	4911      	ldr	r1, [pc, #68]	@ (800e6a8 <xTimerCreateTimerTask+0x88>)
 800e662:	4812      	ldr	r0, [pc, #72]	@ (800e6ac <xTimerCreateTimerTask+0x8c>)
 800e664:	f7fe ffc0 	bl	800d5e8 <xTaskCreateStatic>
 800e668:	4603      	mov	r3, r0
 800e66a:	4a11      	ldr	r2, [pc, #68]	@ (800e6b0 <xTimerCreateTimerTask+0x90>)
 800e66c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e66e:	4b10      	ldr	r3, [pc, #64]	@ (800e6b0 <xTimerCreateTimerTask+0x90>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d001      	beq.n	800e67a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e676:	2301      	movs	r3, #1
 800e678:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d10b      	bne.n	800e698 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e684:	f383 8811 	msr	BASEPRI, r3
 800e688:	f3bf 8f6f 	isb	sy
 800e68c:	f3bf 8f4f 	dsb	sy
 800e690:	613b      	str	r3, [r7, #16]
}
 800e692:	bf00      	nop
 800e694:	bf00      	nop
 800e696:	e7fd      	b.n	800e694 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e698:	697b      	ldr	r3, [r7, #20]
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3718      	adds	r7, #24
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	200018b4 	.word	0x200018b4
 800e6a8:	08015900 	.word	0x08015900
 800e6ac:	0800e7ed 	.word	0x0800e7ed
 800e6b0:	200018b8 	.word	0x200018b8

0800e6b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08a      	sub	sp, #40	@ 0x28
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
 800e6c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d10b      	bne.n	800e6e4 <xTimerGenericCommand+0x30>
	__asm volatile
 800e6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6d0:	f383 8811 	msr	BASEPRI, r3
 800e6d4:	f3bf 8f6f 	isb	sy
 800e6d8:	f3bf 8f4f 	dsb	sy
 800e6dc:	623b      	str	r3, [r7, #32]
}
 800e6de:	bf00      	nop
 800e6e0:	bf00      	nop
 800e6e2:	e7fd      	b.n	800e6e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e6e4:	4b19      	ldr	r3, [pc, #100]	@ (800e74c <xTimerGenericCommand+0x98>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d02a      	beq.n	800e742 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	2b05      	cmp	r3, #5
 800e6fc:	dc18      	bgt.n	800e730 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e6fe:	f7ff fdad 	bl	800e25c <xTaskGetSchedulerState>
 800e702:	4603      	mov	r3, r0
 800e704:	2b02      	cmp	r3, #2
 800e706:	d109      	bne.n	800e71c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e708:	4b10      	ldr	r3, [pc, #64]	@ (800e74c <xTimerGenericCommand+0x98>)
 800e70a:	6818      	ldr	r0, [r3, #0]
 800e70c:	f107 0110 	add.w	r1, r7, #16
 800e710:	2300      	movs	r3, #0
 800e712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e714:	f7fe f8f0 	bl	800c8f8 <xQueueGenericSend>
 800e718:	6278      	str	r0, [r7, #36]	@ 0x24
 800e71a:	e012      	b.n	800e742 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e71c:	4b0b      	ldr	r3, [pc, #44]	@ (800e74c <xTimerGenericCommand+0x98>)
 800e71e:	6818      	ldr	r0, [r3, #0]
 800e720:	f107 0110 	add.w	r1, r7, #16
 800e724:	2300      	movs	r3, #0
 800e726:	2200      	movs	r2, #0
 800e728:	f7fe f8e6 	bl	800c8f8 <xQueueGenericSend>
 800e72c:	6278      	str	r0, [r7, #36]	@ 0x24
 800e72e:	e008      	b.n	800e742 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e730:	4b06      	ldr	r3, [pc, #24]	@ (800e74c <xTimerGenericCommand+0x98>)
 800e732:	6818      	ldr	r0, [r3, #0]
 800e734:	f107 0110 	add.w	r1, r7, #16
 800e738:	2300      	movs	r3, #0
 800e73a:	683a      	ldr	r2, [r7, #0]
 800e73c:	f7fe f9de 	bl	800cafc <xQueueGenericSendFromISR>
 800e740:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e744:	4618      	mov	r0, r3
 800e746:	3728      	adds	r7, #40	@ 0x28
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	200018b4 	.word	0x200018b4

0800e750 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b088      	sub	sp, #32
 800e754:	af02      	add	r7, sp, #8
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e75a:	4b23      	ldr	r3, [pc, #140]	@ (800e7e8 <prvProcessExpiredTimer+0x98>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	68db      	ldr	r3, [r3, #12]
 800e760:	68db      	ldr	r3, [r3, #12]
 800e762:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	3304      	adds	r3, #4
 800e768:	4618      	mov	r0, r3
 800e76a:	f7fd fe2f 	bl	800c3cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e774:	f003 0304 	and.w	r3, r3, #4
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d023      	beq.n	800e7c4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	699a      	ldr	r2, [r3, #24]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	18d1      	adds	r1, r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	683a      	ldr	r2, [r7, #0]
 800e788:	6978      	ldr	r0, [r7, #20]
 800e78a:	f000 f8d5 	bl	800e938 <prvInsertTimerInActiveList>
 800e78e:	4603      	mov	r3, r0
 800e790:	2b00      	cmp	r3, #0
 800e792:	d020      	beq.n	800e7d6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e794:	2300      	movs	r3, #0
 800e796:	9300      	str	r3, [sp, #0]
 800e798:	2300      	movs	r3, #0
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	2100      	movs	r1, #0
 800e79e:	6978      	ldr	r0, [r7, #20]
 800e7a0:	f7ff ff88 	bl	800e6b4 <xTimerGenericCommand>
 800e7a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d114      	bne.n	800e7d6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b0:	f383 8811 	msr	BASEPRI, r3
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	f3bf 8f4f 	dsb	sy
 800e7bc:	60fb      	str	r3, [r7, #12]
}
 800e7be:	bf00      	nop
 800e7c0:	bf00      	nop
 800e7c2:	e7fd      	b.n	800e7c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7ca:	f023 0301 	bic.w	r3, r3, #1
 800e7ce:	b2da      	uxtb	r2, r3
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	6a1b      	ldr	r3, [r3, #32]
 800e7da:	6978      	ldr	r0, [r7, #20]
 800e7dc:	4798      	blx	r3
}
 800e7de:	bf00      	nop
 800e7e0:	3718      	adds	r7, #24
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	200018ac 	.word	0x200018ac

0800e7ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e7f4:	f107 0308 	add.w	r3, r7, #8
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f000 f859 	bl	800e8b0 <prvGetNextExpireTime>
 800e7fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	4619      	mov	r1, r3
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f000 f805 	bl	800e814 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e80a:	f000 f8d7 	bl	800e9bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e80e:	bf00      	nop
 800e810:	e7f0      	b.n	800e7f4 <prvTimerTask+0x8>
	...

0800e814 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e81e:	f7ff f927 	bl	800da70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e822:	f107 0308 	add.w	r3, r7, #8
 800e826:	4618      	mov	r0, r3
 800e828:	f000 f866 	bl	800e8f8 <prvSampleTimeNow>
 800e82c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d130      	bne.n	800e896 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d10a      	bne.n	800e850 <prvProcessTimerOrBlockTask+0x3c>
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d806      	bhi.n	800e850 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e842:	f7ff f923 	bl	800da8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e846:	68f9      	ldr	r1, [r7, #12]
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7ff ff81 	bl	800e750 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e84e:	e024      	b.n	800e89a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d008      	beq.n	800e868 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e856:	4b13      	ldr	r3, [pc, #76]	@ (800e8a4 <prvProcessTimerOrBlockTask+0x90>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d101      	bne.n	800e864 <prvProcessTimerOrBlockTask+0x50>
 800e860:	2301      	movs	r3, #1
 800e862:	e000      	b.n	800e866 <prvProcessTimerOrBlockTask+0x52>
 800e864:	2300      	movs	r3, #0
 800e866:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e868:	4b0f      	ldr	r3, [pc, #60]	@ (800e8a8 <prvProcessTimerOrBlockTask+0x94>)
 800e86a:	6818      	ldr	r0, [r3, #0]
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	1ad3      	subs	r3, r2, r3
 800e872:	683a      	ldr	r2, [r7, #0]
 800e874:	4619      	mov	r1, r3
 800e876:	f7fe fe83 	bl	800d580 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e87a:	f7ff f907 	bl	800da8c <xTaskResumeAll>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d10a      	bne.n	800e89a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e884:	4b09      	ldr	r3, [pc, #36]	@ (800e8ac <prvProcessTimerOrBlockTask+0x98>)
 800e886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e88a:	601a      	str	r2, [r3, #0]
 800e88c:	f3bf 8f4f 	dsb	sy
 800e890:	f3bf 8f6f 	isb	sy
}
 800e894:	e001      	b.n	800e89a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e896:	f7ff f8f9 	bl	800da8c <xTaskResumeAll>
}
 800e89a:	bf00      	nop
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	200018b0 	.word	0x200018b0
 800e8a8:	200018b4 	.word	0x200018b4
 800e8ac:	e000ed04 	.word	0xe000ed04

0800e8b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e8b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e8f4 <prvGetNextExpireTime+0x44>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d101      	bne.n	800e8c6 <prvGetNextExpireTime+0x16>
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	e000      	b.n	800e8c8 <prvGetNextExpireTime+0x18>
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d105      	bne.n	800e8e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e8d4:	4b07      	ldr	r3, [pc, #28]	@ (800e8f4 <prvGetNextExpireTime+0x44>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	68db      	ldr	r3, [r3, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	60fb      	str	r3, [r7, #12]
 800e8de:	e001      	b.n	800e8e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3714      	adds	r7, #20
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop
 800e8f4:	200018ac 	.word	0x200018ac

0800e8f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e900:	f7ff f962 	bl	800dbc8 <xTaskGetTickCount>
 800e904:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e906:	4b0b      	ldr	r3, [pc, #44]	@ (800e934 <prvSampleTimeNow+0x3c>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d205      	bcs.n	800e91c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e910:	f000 f93a 	bl	800eb88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2201      	movs	r2, #1
 800e918:	601a      	str	r2, [r3, #0]
 800e91a:	e002      	b.n	800e922 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2200      	movs	r2, #0
 800e920:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e922:	4a04      	ldr	r2, [pc, #16]	@ (800e934 <prvSampleTimeNow+0x3c>)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e928:	68fb      	ldr	r3, [r7, #12]
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	200018bc 	.word	0x200018bc

0800e938 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b086      	sub	sp, #24
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	60f8      	str	r0, [r7, #12]
 800e940:	60b9      	str	r1, [r7, #8]
 800e942:	607a      	str	r2, [r7, #4]
 800e944:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e946:	2300      	movs	r3, #0
 800e948:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	68ba      	ldr	r2, [r7, #8]
 800e94e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	68fa      	ldr	r2, [r7, #12]
 800e954:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e956:	68ba      	ldr	r2, [r7, #8]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d812      	bhi.n	800e984 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	1ad2      	subs	r2, r2, r3
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	699b      	ldr	r3, [r3, #24]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d302      	bcc.n	800e972 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e96c:	2301      	movs	r3, #1
 800e96e:	617b      	str	r3, [r7, #20]
 800e970:	e01b      	b.n	800e9aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e972:	4b10      	ldr	r3, [pc, #64]	@ (800e9b4 <prvInsertTimerInActiveList+0x7c>)
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	3304      	adds	r3, #4
 800e97a:	4619      	mov	r1, r3
 800e97c:	4610      	mov	r0, r2
 800e97e:	f7fd fcec 	bl	800c35a <vListInsert>
 800e982:	e012      	b.n	800e9aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d206      	bcs.n	800e99a <prvInsertTimerInActiveList+0x62>
 800e98c:	68ba      	ldr	r2, [r7, #8]
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	429a      	cmp	r2, r3
 800e992:	d302      	bcc.n	800e99a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e994:	2301      	movs	r3, #1
 800e996:	617b      	str	r3, [r7, #20]
 800e998:	e007      	b.n	800e9aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e99a:	4b07      	ldr	r3, [pc, #28]	@ (800e9b8 <prvInsertTimerInActiveList+0x80>)
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	3304      	adds	r3, #4
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	4610      	mov	r0, r2
 800e9a6:	f7fd fcd8 	bl	800c35a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e9aa:	697b      	ldr	r3, [r7, #20]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3718      	adds	r7, #24
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	200018b0 	.word	0x200018b0
 800e9b8:	200018ac 	.word	0x200018ac

0800e9bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b08e      	sub	sp, #56	@ 0x38
 800e9c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e9c2:	e0ce      	b.n	800eb62 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	da19      	bge.n	800e9fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e9ca:	1d3b      	adds	r3, r7, #4
 800e9cc:	3304      	adds	r3, #4
 800e9ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d10b      	bne.n	800e9ee <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9da:	f383 8811 	msr	BASEPRI, r3
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f3bf 8f4f 	dsb	sy
 800e9e6:	61fb      	str	r3, [r7, #28]
}
 800e9e8:	bf00      	nop
 800e9ea:	bf00      	nop
 800e9ec:	e7fd      	b.n	800e9ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e9f4:	6850      	ldr	r0, [r2, #4]
 800e9f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e9f8:	6892      	ldr	r2, [r2, #8]
 800e9fa:	4611      	mov	r1, r2
 800e9fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f2c0 80ae 	blt.w	800eb62 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ea0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea0c:	695b      	ldr	r3, [r3, #20]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d004      	beq.n	800ea1c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea14:	3304      	adds	r3, #4
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7fd fcd8 	bl	800c3cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea1c:	463b      	mov	r3, r7
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7ff ff6a 	bl	800e8f8 <prvSampleTimeNow>
 800ea24:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2b09      	cmp	r3, #9
 800ea2a:	f200 8097 	bhi.w	800eb5c <prvProcessReceivedCommands+0x1a0>
 800ea2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ea34 <prvProcessReceivedCommands+0x78>)
 800ea30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea34:	0800ea5d 	.word	0x0800ea5d
 800ea38:	0800ea5d 	.word	0x0800ea5d
 800ea3c:	0800ea5d 	.word	0x0800ea5d
 800ea40:	0800ead3 	.word	0x0800ead3
 800ea44:	0800eae7 	.word	0x0800eae7
 800ea48:	0800eb33 	.word	0x0800eb33
 800ea4c:	0800ea5d 	.word	0x0800ea5d
 800ea50:	0800ea5d 	.word	0x0800ea5d
 800ea54:	0800ead3 	.word	0x0800ead3
 800ea58:	0800eae7 	.word	0x0800eae7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ea5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea62:	f043 0301 	orr.w	r3, r3, #1
 800ea66:	b2da      	uxtb	r2, r3
 800ea68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ea6e:	68ba      	ldr	r2, [r7, #8]
 800ea70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea72:	699b      	ldr	r3, [r3, #24]
 800ea74:	18d1      	adds	r1, r2, r3
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea7c:	f7ff ff5c 	bl	800e938 <prvInsertTimerInActiveList>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d06c      	beq.n	800eb60 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea88:	6a1b      	ldr	r3, [r3, #32]
 800ea8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ea94:	f003 0304 	and.w	r3, r3, #4
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d061      	beq.n	800eb60 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ea9c:	68ba      	ldr	r2, [r7, #8]
 800ea9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa0:	699b      	ldr	r3, [r3, #24]
 800eaa2:	441a      	add	r2, r3
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	9300      	str	r3, [sp, #0]
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	2100      	movs	r1, #0
 800eaac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eaae:	f7ff fe01 	bl	800e6b4 <xTimerGenericCommand>
 800eab2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eab4:	6a3b      	ldr	r3, [r7, #32]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d152      	bne.n	800eb60 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800eaba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eabe:	f383 8811 	msr	BASEPRI, r3
 800eac2:	f3bf 8f6f 	isb	sy
 800eac6:	f3bf 8f4f 	dsb	sy
 800eaca:	61bb      	str	r3, [r7, #24]
}
 800eacc:	bf00      	nop
 800eace:	bf00      	nop
 800ead0:	e7fd      	b.n	800eace <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ead2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ead8:	f023 0301 	bic.w	r3, r3, #1
 800eadc:	b2da      	uxtb	r2, r3
 800eade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eae0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eae4:	e03d      	b.n	800eb62 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eaec:	f043 0301 	orr.w	r3, r3, #1
 800eaf0:	b2da      	uxtb	r2, r3
 800eaf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaf4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eaf8:	68ba      	ldr	r2, [r7, #8]
 800eafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eafc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb00:	699b      	ldr	r3, [r3, #24]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d10b      	bne.n	800eb1e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800eb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb0a:	f383 8811 	msr	BASEPRI, r3
 800eb0e:	f3bf 8f6f 	isb	sy
 800eb12:	f3bf 8f4f 	dsb	sy
 800eb16:	617b      	str	r3, [r7, #20]
}
 800eb18:	bf00      	nop
 800eb1a:	bf00      	nop
 800eb1c:	e7fd      	b.n	800eb1a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb20:	699a      	ldr	r2, [r3, #24]
 800eb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb24:	18d1      	adds	r1, r2, r3
 800eb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb2c:	f7ff ff04 	bl	800e938 <prvInsertTimerInActiveList>
					break;
 800eb30:	e017      	b.n	800eb62 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eb32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb38:	f003 0302 	and.w	r3, r3, #2
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d103      	bne.n	800eb48 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800eb40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb42:	f000 fbe9 	bl	800f318 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800eb46:	e00c      	b.n	800eb62 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb4e:	f023 0301 	bic.w	r3, r3, #1
 800eb52:	b2da      	uxtb	r2, r3
 800eb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800eb5a:	e002      	b.n	800eb62 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800eb5c:	bf00      	nop
 800eb5e:	e000      	b.n	800eb62 <prvProcessReceivedCommands+0x1a6>
					break;
 800eb60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb62:	4b08      	ldr	r3, [pc, #32]	@ (800eb84 <prvProcessReceivedCommands+0x1c8>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	1d39      	adds	r1, r7, #4
 800eb68:	2200      	movs	r2, #0
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7fe f8f4 	bl	800cd58 <xQueueReceive>
 800eb70:	4603      	mov	r3, r0
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	f47f af26 	bne.w	800e9c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800eb78:	bf00      	nop
 800eb7a:	bf00      	nop
 800eb7c:	3730      	adds	r7, #48	@ 0x30
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	200018b4 	.word	0x200018b4

0800eb88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b088      	sub	sp, #32
 800eb8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eb8e:	e049      	b.n	800ec24 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eb90:	4b2e      	ldr	r3, [pc, #184]	@ (800ec4c <prvSwitchTimerLists+0xc4>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb9a:	4b2c      	ldr	r3, [pc, #176]	@ (800ec4c <prvSwitchTimerLists+0xc4>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	68db      	ldr	r3, [r3, #12]
 800eba2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	3304      	adds	r3, #4
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7fd fc0f 	bl	800c3cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	6a1b      	ldr	r3, [r3, #32]
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebbc:	f003 0304 	and.w	r3, r3, #4
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d02f      	beq.n	800ec24 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	699b      	ldr	r3, [r3, #24]
 800ebc8:	693a      	ldr	r2, [r7, #16]
 800ebca:	4413      	add	r3, r2
 800ebcc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d90e      	bls.n	800ebf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	68ba      	ldr	r2, [r7, #8]
 800ebda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	68fa      	ldr	r2, [r7, #12]
 800ebe0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ebe2:	4b1a      	ldr	r3, [pc, #104]	@ (800ec4c <prvSwitchTimerLists+0xc4>)
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	3304      	adds	r3, #4
 800ebea:	4619      	mov	r1, r3
 800ebec:	4610      	mov	r0, r2
 800ebee:	f7fd fbb4 	bl	800c35a <vListInsert>
 800ebf2:	e017      	b.n	800ec24 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	693a      	ldr	r2, [r7, #16]
 800ebfc:	2100      	movs	r1, #0
 800ebfe:	68f8      	ldr	r0, [r7, #12]
 800ec00:	f7ff fd58 	bl	800e6b4 <xTimerGenericCommand>
 800ec04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d10b      	bne.n	800ec24 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ec0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec10:	f383 8811 	msr	BASEPRI, r3
 800ec14:	f3bf 8f6f 	isb	sy
 800ec18:	f3bf 8f4f 	dsb	sy
 800ec1c:	603b      	str	r3, [r7, #0]
}
 800ec1e:	bf00      	nop
 800ec20:	bf00      	nop
 800ec22:	e7fd      	b.n	800ec20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ec24:	4b09      	ldr	r3, [pc, #36]	@ (800ec4c <prvSwitchTimerLists+0xc4>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1b0      	bne.n	800eb90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ec2e:	4b07      	ldr	r3, [pc, #28]	@ (800ec4c <prvSwitchTimerLists+0xc4>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ec34:	4b06      	ldr	r3, [pc, #24]	@ (800ec50 <prvSwitchTimerLists+0xc8>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	4a04      	ldr	r2, [pc, #16]	@ (800ec4c <prvSwitchTimerLists+0xc4>)
 800ec3a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ec3c:	4a04      	ldr	r2, [pc, #16]	@ (800ec50 <prvSwitchTimerLists+0xc8>)
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	6013      	str	r3, [r2, #0]
}
 800ec42:	bf00      	nop
 800ec44:	3718      	adds	r7, #24
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	200018ac 	.word	0x200018ac
 800ec50:	200018b0 	.word	0x200018b0

0800ec54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ec5a:	f000 f96d 	bl	800ef38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ec5e:	4b15      	ldr	r3, [pc, #84]	@ (800ecb4 <prvCheckForValidListAndQueue+0x60>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d120      	bne.n	800eca8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ec66:	4814      	ldr	r0, [pc, #80]	@ (800ecb8 <prvCheckForValidListAndQueue+0x64>)
 800ec68:	f7fd fb26 	bl	800c2b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ec6c:	4813      	ldr	r0, [pc, #76]	@ (800ecbc <prvCheckForValidListAndQueue+0x68>)
 800ec6e:	f7fd fb23 	bl	800c2b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ec72:	4b13      	ldr	r3, [pc, #76]	@ (800ecc0 <prvCheckForValidListAndQueue+0x6c>)
 800ec74:	4a10      	ldr	r2, [pc, #64]	@ (800ecb8 <prvCheckForValidListAndQueue+0x64>)
 800ec76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ec78:	4b12      	ldr	r3, [pc, #72]	@ (800ecc4 <prvCheckForValidListAndQueue+0x70>)
 800ec7a:	4a10      	ldr	r2, [pc, #64]	@ (800ecbc <prvCheckForValidListAndQueue+0x68>)
 800ec7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ec7e:	2300      	movs	r3, #0
 800ec80:	9300      	str	r3, [sp, #0]
 800ec82:	4b11      	ldr	r3, [pc, #68]	@ (800ecc8 <prvCheckForValidListAndQueue+0x74>)
 800ec84:	4a11      	ldr	r2, [pc, #68]	@ (800eccc <prvCheckForValidListAndQueue+0x78>)
 800ec86:	2110      	movs	r1, #16
 800ec88:	200a      	movs	r0, #10
 800ec8a:	f7fd fc33 	bl	800c4f4 <xQueueGenericCreateStatic>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	4a08      	ldr	r2, [pc, #32]	@ (800ecb4 <prvCheckForValidListAndQueue+0x60>)
 800ec92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ec94:	4b07      	ldr	r3, [pc, #28]	@ (800ecb4 <prvCheckForValidListAndQueue+0x60>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d005      	beq.n	800eca8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ec9c:	4b05      	ldr	r3, [pc, #20]	@ (800ecb4 <prvCheckForValidListAndQueue+0x60>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	490b      	ldr	r1, [pc, #44]	@ (800ecd0 <prvCheckForValidListAndQueue+0x7c>)
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fe fc18 	bl	800d4d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eca8:	f000 f978 	bl	800ef9c <vPortExitCritical>
}
 800ecac:	bf00      	nop
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	200018b4 	.word	0x200018b4
 800ecb8:	20001884 	.word	0x20001884
 800ecbc:	20001898 	.word	0x20001898
 800ecc0:	200018ac 	.word	0x200018ac
 800ecc4:	200018b0 	.word	0x200018b0
 800ecc8:	20001960 	.word	0x20001960
 800eccc:	200018c0 	.word	0x200018c0
 800ecd0:	08015908 	.word	0x08015908

0800ecd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b085      	sub	sp, #20
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	60b9      	str	r1, [r7, #8]
 800ecde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	3b04      	subs	r3, #4
 800ece4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ecec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	3b04      	subs	r3, #4
 800ecf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	f023 0201 	bic.w	r2, r3, #1
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	3b04      	subs	r3, #4
 800ed02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ed04:	4a0c      	ldr	r2, [pc, #48]	@ (800ed38 <pxPortInitialiseStack+0x64>)
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	3b14      	subs	r3, #20
 800ed0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	3b04      	subs	r3, #4
 800ed1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f06f 0202 	mvn.w	r2, #2
 800ed22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	3b20      	subs	r3, #32
 800ed28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3714      	adds	r7, #20
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr
 800ed38:	0800ed3d 	.word	0x0800ed3d

0800ed3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b085      	sub	sp, #20
 800ed40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ed42:	2300      	movs	r3, #0
 800ed44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ed46:	4b13      	ldr	r3, [pc, #76]	@ (800ed94 <prvTaskExitError+0x58>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed4e:	d00b      	beq.n	800ed68 <prvTaskExitError+0x2c>
	__asm volatile
 800ed50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed54:	f383 8811 	msr	BASEPRI, r3
 800ed58:	f3bf 8f6f 	isb	sy
 800ed5c:	f3bf 8f4f 	dsb	sy
 800ed60:	60fb      	str	r3, [r7, #12]
}
 800ed62:	bf00      	nop
 800ed64:	bf00      	nop
 800ed66:	e7fd      	b.n	800ed64 <prvTaskExitError+0x28>
	__asm volatile
 800ed68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed6c:	f383 8811 	msr	BASEPRI, r3
 800ed70:	f3bf 8f6f 	isb	sy
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	60bb      	str	r3, [r7, #8]
}
 800ed7a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ed7c:	bf00      	nop
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d0fc      	beq.n	800ed7e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ed84:	bf00      	nop
 800ed86:	bf00      	nop
 800ed88:	3714      	adds	r7, #20
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	200000b4 	.word	0x200000b4
	...

0800eda0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eda0:	4b07      	ldr	r3, [pc, #28]	@ (800edc0 <pxCurrentTCBConst2>)
 800eda2:	6819      	ldr	r1, [r3, #0]
 800eda4:	6808      	ldr	r0, [r1, #0]
 800eda6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edaa:	f380 8809 	msr	PSP, r0
 800edae:	f3bf 8f6f 	isb	sy
 800edb2:	f04f 0000 	mov.w	r0, #0
 800edb6:	f380 8811 	msr	BASEPRI, r0
 800edba:	4770      	bx	lr
 800edbc:	f3af 8000 	nop.w

0800edc0 <pxCurrentTCBConst2>:
 800edc0:	20001384 	.word	0x20001384
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800edc4:	bf00      	nop
 800edc6:	bf00      	nop

0800edc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800edc8:	4808      	ldr	r0, [pc, #32]	@ (800edec <prvPortStartFirstTask+0x24>)
 800edca:	6800      	ldr	r0, [r0, #0]
 800edcc:	6800      	ldr	r0, [r0, #0]
 800edce:	f380 8808 	msr	MSP, r0
 800edd2:	f04f 0000 	mov.w	r0, #0
 800edd6:	f380 8814 	msr	CONTROL, r0
 800edda:	b662      	cpsie	i
 800eddc:	b661      	cpsie	f
 800edde:	f3bf 8f4f 	dsb	sy
 800ede2:	f3bf 8f6f 	isb	sy
 800ede6:	df00      	svc	0
 800ede8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800edea:	bf00      	nop
 800edec:	e000ed08 	.word	0xe000ed08

0800edf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b086      	sub	sp, #24
 800edf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800edf6:	4b47      	ldr	r3, [pc, #284]	@ (800ef14 <xPortStartScheduler+0x124>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4a47      	ldr	r2, [pc, #284]	@ (800ef18 <xPortStartScheduler+0x128>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d10b      	bne.n	800ee18 <xPortStartScheduler+0x28>
	__asm volatile
 800ee00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee04:	f383 8811 	msr	BASEPRI, r3
 800ee08:	f3bf 8f6f 	isb	sy
 800ee0c:	f3bf 8f4f 	dsb	sy
 800ee10:	613b      	str	r3, [r7, #16]
}
 800ee12:	bf00      	nop
 800ee14:	bf00      	nop
 800ee16:	e7fd      	b.n	800ee14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ee18:	4b3e      	ldr	r3, [pc, #248]	@ (800ef14 <xPortStartScheduler+0x124>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4a3f      	ldr	r2, [pc, #252]	@ (800ef1c <xPortStartScheduler+0x12c>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d10b      	bne.n	800ee3a <xPortStartScheduler+0x4a>
	__asm volatile
 800ee22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee26:	f383 8811 	msr	BASEPRI, r3
 800ee2a:	f3bf 8f6f 	isb	sy
 800ee2e:	f3bf 8f4f 	dsb	sy
 800ee32:	60fb      	str	r3, [r7, #12]
}
 800ee34:	bf00      	nop
 800ee36:	bf00      	nop
 800ee38:	e7fd      	b.n	800ee36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ee3a:	4b39      	ldr	r3, [pc, #228]	@ (800ef20 <xPortStartScheduler+0x130>)
 800ee3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	22ff      	movs	r2, #255	@ 0xff
 800ee4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ee54:	78fb      	ldrb	r3, [r7, #3]
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ee5c:	b2da      	uxtb	r2, r3
 800ee5e:	4b31      	ldr	r3, [pc, #196]	@ (800ef24 <xPortStartScheduler+0x134>)
 800ee60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ee62:	4b31      	ldr	r3, [pc, #196]	@ (800ef28 <xPortStartScheduler+0x138>)
 800ee64:	2207      	movs	r2, #7
 800ee66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee68:	e009      	b.n	800ee7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ee6a:	4b2f      	ldr	r3, [pc, #188]	@ (800ef28 <xPortStartScheduler+0x138>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	3b01      	subs	r3, #1
 800ee70:	4a2d      	ldr	r2, [pc, #180]	@ (800ef28 <xPortStartScheduler+0x138>)
 800ee72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ee74:	78fb      	ldrb	r3, [r7, #3]
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	005b      	lsls	r3, r3, #1
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ee7e:	78fb      	ldrb	r3, [r7, #3]
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee86:	2b80      	cmp	r3, #128	@ 0x80
 800ee88:	d0ef      	beq.n	800ee6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ee8a:	4b27      	ldr	r3, [pc, #156]	@ (800ef28 <xPortStartScheduler+0x138>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f1c3 0307 	rsb	r3, r3, #7
 800ee92:	2b04      	cmp	r3, #4
 800ee94:	d00b      	beq.n	800eeae <xPortStartScheduler+0xbe>
	__asm volatile
 800ee96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee9a:	f383 8811 	msr	BASEPRI, r3
 800ee9e:	f3bf 8f6f 	isb	sy
 800eea2:	f3bf 8f4f 	dsb	sy
 800eea6:	60bb      	str	r3, [r7, #8]
}
 800eea8:	bf00      	nop
 800eeaa:	bf00      	nop
 800eeac:	e7fd      	b.n	800eeaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eeae:	4b1e      	ldr	r3, [pc, #120]	@ (800ef28 <xPortStartScheduler+0x138>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	021b      	lsls	r3, r3, #8
 800eeb4:	4a1c      	ldr	r2, [pc, #112]	@ (800ef28 <xPortStartScheduler+0x138>)
 800eeb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eeb8:	4b1b      	ldr	r3, [pc, #108]	@ (800ef28 <xPortStartScheduler+0x138>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800eec0:	4a19      	ldr	r2, [pc, #100]	@ (800ef28 <xPortStartScheduler+0x138>)
 800eec2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	b2da      	uxtb	r2, r3
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eecc:	4b17      	ldr	r3, [pc, #92]	@ (800ef2c <xPortStartScheduler+0x13c>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	4a16      	ldr	r2, [pc, #88]	@ (800ef2c <xPortStartScheduler+0x13c>)
 800eed2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800eed6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eed8:	4b14      	ldr	r3, [pc, #80]	@ (800ef2c <xPortStartScheduler+0x13c>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a13      	ldr	r2, [pc, #76]	@ (800ef2c <xPortStartScheduler+0x13c>)
 800eede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800eee2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eee4:	f000 f8da 	bl	800f09c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eee8:	4b11      	ldr	r3, [pc, #68]	@ (800ef30 <xPortStartScheduler+0x140>)
 800eeea:	2200      	movs	r2, #0
 800eeec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eeee:	f000 f8f9 	bl	800f0e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eef2:	4b10      	ldr	r3, [pc, #64]	@ (800ef34 <xPortStartScheduler+0x144>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	4a0f      	ldr	r2, [pc, #60]	@ (800ef34 <xPortStartScheduler+0x144>)
 800eef8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800eefc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eefe:	f7ff ff63 	bl	800edc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ef02:	f7fe ff2b 	bl	800dd5c <vTaskSwitchContext>
	prvTaskExitError();
 800ef06:	f7ff ff19 	bl	800ed3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ef0a:	2300      	movs	r3, #0
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3718      	adds	r7, #24
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	e000ed00 	.word	0xe000ed00
 800ef18:	410fc271 	.word	0x410fc271
 800ef1c:	410fc270 	.word	0x410fc270
 800ef20:	e000e400 	.word	0xe000e400
 800ef24:	200019b0 	.word	0x200019b0
 800ef28:	200019b4 	.word	0x200019b4
 800ef2c:	e000ed20 	.word	0xe000ed20
 800ef30:	200000b4 	.word	0x200000b4
 800ef34:	e000ef34 	.word	0xe000ef34

0800ef38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b083      	sub	sp, #12
 800ef3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ef3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef42:	f383 8811 	msr	BASEPRI, r3
 800ef46:	f3bf 8f6f 	isb	sy
 800ef4a:	f3bf 8f4f 	dsb	sy
 800ef4e:	607b      	str	r3, [r7, #4]
}
 800ef50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ef52:	4b10      	ldr	r3, [pc, #64]	@ (800ef94 <vPortEnterCritical+0x5c>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	3301      	adds	r3, #1
 800ef58:	4a0e      	ldr	r2, [pc, #56]	@ (800ef94 <vPortEnterCritical+0x5c>)
 800ef5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ef5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ef94 <vPortEnterCritical+0x5c>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d110      	bne.n	800ef86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ef64:	4b0c      	ldr	r3, [pc, #48]	@ (800ef98 <vPortEnterCritical+0x60>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	b2db      	uxtb	r3, r3
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d00b      	beq.n	800ef86 <vPortEnterCritical+0x4e>
	__asm volatile
 800ef6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef72:	f383 8811 	msr	BASEPRI, r3
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	f3bf 8f4f 	dsb	sy
 800ef7e:	603b      	str	r3, [r7, #0]
}
 800ef80:	bf00      	nop
 800ef82:	bf00      	nop
 800ef84:	e7fd      	b.n	800ef82 <vPortEnterCritical+0x4a>
	}
}
 800ef86:	bf00      	nop
 800ef88:	370c      	adds	r7, #12
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef90:	4770      	bx	lr
 800ef92:	bf00      	nop
 800ef94:	200000b4 	.word	0x200000b4
 800ef98:	e000ed04 	.word	0xe000ed04

0800ef9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800efa2:	4b12      	ldr	r3, [pc, #72]	@ (800efec <vPortExitCritical+0x50>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10b      	bne.n	800efc2 <vPortExitCritical+0x26>
	__asm volatile
 800efaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efae:	f383 8811 	msr	BASEPRI, r3
 800efb2:	f3bf 8f6f 	isb	sy
 800efb6:	f3bf 8f4f 	dsb	sy
 800efba:	607b      	str	r3, [r7, #4]
}
 800efbc:	bf00      	nop
 800efbe:	bf00      	nop
 800efc0:	e7fd      	b.n	800efbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800efc2:	4b0a      	ldr	r3, [pc, #40]	@ (800efec <vPortExitCritical+0x50>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	3b01      	subs	r3, #1
 800efc8:	4a08      	ldr	r2, [pc, #32]	@ (800efec <vPortExitCritical+0x50>)
 800efca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800efcc:	4b07      	ldr	r3, [pc, #28]	@ (800efec <vPortExitCritical+0x50>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d105      	bne.n	800efe0 <vPortExitCritical+0x44>
 800efd4:	2300      	movs	r3, #0
 800efd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	f383 8811 	msr	BASEPRI, r3
}
 800efde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800efe0:	bf00      	nop
 800efe2:	370c      	adds	r7, #12
 800efe4:	46bd      	mov	sp, r7
 800efe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efea:	4770      	bx	lr
 800efec:	200000b4 	.word	0x200000b4

0800eff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eff0:	f3ef 8009 	mrs	r0, PSP
 800eff4:	f3bf 8f6f 	isb	sy
 800eff8:	4b15      	ldr	r3, [pc, #84]	@ (800f050 <pxCurrentTCBConst>)
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	f01e 0f10 	tst.w	lr, #16
 800f000:	bf08      	it	eq
 800f002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f00a:	6010      	str	r0, [r2, #0]
 800f00c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f014:	f380 8811 	msr	BASEPRI, r0
 800f018:	f3bf 8f4f 	dsb	sy
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	f7fe fe9c 	bl	800dd5c <vTaskSwitchContext>
 800f024:	f04f 0000 	mov.w	r0, #0
 800f028:	f380 8811 	msr	BASEPRI, r0
 800f02c:	bc09      	pop	{r0, r3}
 800f02e:	6819      	ldr	r1, [r3, #0]
 800f030:	6808      	ldr	r0, [r1, #0]
 800f032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f036:	f01e 0f10 	tst.w	lr, #16
 800f03a:	bf08      	it	eq
 800f03c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f040:	f380 8809 	msr	PSP, r0
 800f044:	f3bf 8f6f 	isb	sy
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	f3af 8000 	nop.w

0800f050 <pxCurrentTCBConst>:
 800f050:	20001384 	.word	0x20001384
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f054:	bf00      	nop
 800f056:	bf00      	nop

0800f058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b082      	sub	sp, #8
 800f05c:	af00      	add	r7, sp, #0
	__asm volatile
 800f05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f062:	f383 8811 	msr	BASEPRI, r3
 800f066:	f3bf 8f6f 	isb	sy
 800f06a:	f3bf 8f4f 	dsb	sy
 800f06e:	607b      	str	r3, [r7, #4]
}
 800f070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f072:	f7fe fdb9 	bl	800dbe8 <xTaskIncrementTick>
 800f076:	4603      	mov	r3, r0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d003      	beq.n	800f084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f07c:	4b06      	ldr	r3, [pc, #24]	@ (800f098 <xPortSysTickHandler+0x40>)
 800f07e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f082:	601a      	str	r2, [r3, #0]
 800f084:	2300      	movs	r3, #0
 800f086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	f383 8811 	msr	BASEPRI, r3
}
 800f08e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f090:	bf00      	nop
 800f092:	3708      	adds	r7, #8
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}
 800f098:	e000ed04 	.word	0xe000ed04

0800f09c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f09c:	b480      	push	{r7}
 800f09e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f0a0:	4b0b      	ldr	r3, [pc, #44]	@ (800f0d0 <vPortSetupTimerInterrupt+0x34>)
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f0a6:	4b0b      	ldr	r3, [pc, #44]	@ (800f0d4 <vPortSetupTimerInterrupt+0x38>)
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f0ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f0d8 <vPortSetupTimerInterrupt+0x3c>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4a0a      	ldr	r2, [pc, #40]	@ (800f0dc <vPortSetupTimerInterrupt+0x40>)
 800f0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0b6:	099b      	lsrs	r3, r3, #6
 800f0b8:	4a09      	ldr	r2, [pc, #36]	@ (800f0e0 <vPortSetupTimerInterrupt+0x44>)
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f0be:	4b04      	ldr	r3, [pc, #16]	@ (800f0d0 <vPortSetupTimerInterrupt+0x34>)
 800f0c0:	2207      	movs	r2, #7
 800f0c2:	601a      	str	r2, [r3, #0]
}
 800f0c4:	bf00      	nop
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop
 800f0d0:	e000e010 	.word	0xe000e010
 800f0d4:	e000e018 	.word	0xe000e018
 800f0d8:	200000a8 	.word	0x200000a8
 800f0dc:	10624dd3 	.word	0x10624dd3
 800f0e0:	e000e014 	.word	0xe000e014

0800f0e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f0e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f0f4 <vPortEnableVFP+0x10>
 800f0e8:	6801      	ldr	r1, [r0, #0]
 800f0ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f0ee:	6001      	str	r1, [r0, #0]
 800f0f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f0f2:	bf00      	nop
 800f0f4:	e000ed88 	.word	0xe000ed88

0800f0f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b085      	sub	sp, #20
 800f0fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f0fe:	f3ef 8305 	mrs	r3, IPSR
 800f102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2b0f      	cmp	r3, #15
 800f108:	d915      	bls.n	800f136 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f10a:	4a18      	ldr	r2, [pc, #96]	@ (800f16c <vPortValidateInterruptPriority+0x74>)
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	4413      	add	r3, r2
 800f110:	781b      	ldrb	r3, [r3, #0]
 800f112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f114:	4b16      	ldr	r3, [pc, #88]	@ (800f170 <vPortValidateInterruptPriority+0x78>)
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	7afa      	ldrb	r2, [r7, #11]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d20b      	bcs.n	800f136 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f122:	f383 8811 	msr	BASEPRI, r3
 800f126:	f3bf 8f6f 	isb	sy
 800f12a:	f3bf 8f4f 	dsb	sy
 800f12e:	607b      	str	r3, [r7, #4]
}
 800f130:	bf00      	nop
 800f132:	bf00      	nop
 800f134:	e7fd      	b.n	800f132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f136:	4b0f      	ldr	r3, [pc, #60]	@ (800f174 <vPortValidateInterruptPriority+0x7c>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f13e:	4b0e      	ldr	r3, [pc, #56]	@ (800f178 <vPortValidateInterruptPriority+0x80>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	429a      	cmp	r2, r3
 800f144:	d90b      	bls.n	800f15e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	603b      	str	r3, [r7, #0]
}
 800f158:	bf00      	nop
 800f15a:	bf00      	nop
 800f15c:	e7fd      	b.n	800f15a <vPortValidateInterruptPriority+0x62>
	}
 800f15e:	bf00      	nop
 800f160:	3714      	adds	r7, #20
 800f162:	46bd      	mov	sp, r7
 800f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f168:	4770      	bx	lr
 800f16a:	bf00      	nop
 800f16c:	e000e3f0 	.word	0xe000e3f0
 800f170:	200019b0 	.word	0x200019b0
 800f174:	e000ed0c 	.word	0xe000ed0c
 800f178:	200019b4 	.word	0x200019b4

0800f17c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b08a      	sub	sp, #40	@ 0x28
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f184:	2300      	movs	r3, #0
 800f186:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f188:	f7fe fc72 	bl	800da70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f18c:	4b5c      	ldr	r3, [pc, #368]	@ (800f300 <pvPortMalloc+0x184>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d101      	bne.n	800f198 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f194:	f000 f924 	bl	800f3e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f198:	4b5a      	ldr	r3, [pc, #360]	@ (800f304 <pvPortMalloc+0x188>)
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4013      	ands	r3, r2
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	f040 8095 	bne.w	800f2d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d01e      	beq.n	800f1ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f1ac:	2208      	movs	r2, #8
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f003 0307 	and.w	r3, r3, #7
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d015      	beq.n	800f1ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f023 0307 	bic.w	r3, r3, #7
 800f1c4:	3308      	adds	r3, #8
 800f1c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f003 0307 	and.w	r3, r3, #7
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d00b      	beq.n	800f1ea <pvPortMalloc+0x6e>
	__asm volatile
 800f1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1d6:	f383 8811 	msr	BASEPRI, r3
 800f1da:	f3bf 8f6f 	isb	sy
 800f1de:	f3bf 8f4f 	dsb	sy
 800f1e2:	617b      	str	r3, [r7, #20]
}
 800f1e4:	bf00      	nop
 800f1e6:	bf00      	nop
 800f1e8:	e7fd      	b.n	800f1e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d06f      	beq.n	800f2d0 <pvPortMalloc+0x154>
 800f1f0:	4b45      	ldr	r3, [pc, #276]	@ (800f308 <pvPortMalloc+0x18c>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d86a      	bhi.n	800f2d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f1fa:	4b44      	ldr	r3, [pc, #272]	@ (800f30c <pvPortMalloc+0x190>)
 800f1fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f1fe:	4b43      	ldr	r3, [pc, #268]	@ (800f30c <pvPortMalloc+0x190>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f204:	e004      	b.n	800f210 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	687a      	ldr	r2, [r7, #4]
 800f216:	429a      	cmp	r2, r3
 800f218:	d903      	bls.n	800f222 <pvPortMalloc+0xa6>
 800f21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d1f1      	bne.n	800f206 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f222:	4b37      	ldr	r3, [pc, #220]	@ (800f300 <pvPortMalloc+0x184>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f228:	429a      	cmp	r2, r3
 800f22a:	d051      	beq.n	800f2d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f22c:	6a3b      	ldr	r3, [r7, #32]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	2208      	movs	r2, #8
 800f232:	4413      	add	r3, r2
 800f234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f238:	681a      	ldr	r2, [r3, #0]
 800f23a:	6a3b      	ldr	r3, [r7, #32]
 800f23c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f240:	685a      	ldr	r2, [r3, #4]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	1ad2      	subs	r2, r2, r3
 800f246:	2308      	movs	r3, #8
 800f248:	005b      	lsls	r3, r3, #1
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d920      	bls.n	800f290 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f24e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	4413      	add	r3, r2
 800f254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	f003 0307 	and.w	r3, r3, #7
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d00b      	beq.n	800f278 <pvPortMalloc+0xfc>
	__asm volatile
 800f260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f264:	f383 8811 	msr	BASEPRI, r3
 800f268:	f3bf 8f6f 	isb	sy
 800f26c:	f3bf 8f4f 	dsb	sy
 800f270:	613b      	str	r3, [r7, #16]
}
 800f272:	bf00      	nop
 800f274:	bf00      	nop
 800f276:	e7fd      	b.n	800f274 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f27a:	685a      	ldr	r2, [r3, #4]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	1ad2      	subs	r2, r2, r3
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f28a:	69b8      	ldr	r0, [r7, #24]
 800f28c:	f000 f90a 	bl	800f4a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f290:	4b1d      	ldr	r3, [pc, #116]	@ (800f308 <pvPortMalloc+0x18c>)
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	1ad3      	subs	r3, r2, r3
 800f29a:	4a1b      	ldr	r2, [pc, #108]	@ (800f308 <pvPortMalloc+0x18c>)
 800f29c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f29e:	4b1a      	ldr	r3, [pc, #104]	@ (800f308 <pvPortMalloc+0x18c>)
 800f2a0:	681a      	ldr	r2, [r3, #0]
 800f2a2:	4b1b      	ldr	r3, [pc, #108]	@ (800f310 <pvPortMalloc+0x194>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d203      	bcs.n	800f2b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f2aa:	4b17      	ldr	r3, [pc, #92]	@ (800f308 <pvPortMalloc+0x18c>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	4a18      	ldr	r2, [pc, #96]	@ (800f310 <pvPortMalloc+0x194>)
 800f2b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b4:	685a      	ldr	r2, [r3, #4]
 800f2b6:	4b13      	ldr	r3, [pc, #76]	@ (800f304 <pvPortMalloc+0x188>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	431a      	orrs	r2, r3
 800f2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f2c6:	4b13      	ldr	r3, [pc, #76]	@ (800f314 <pvPortMalloc+0x198>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	4a11      	ldr	r2, [pc, #68]	@ (800f314 <pvPortMalloc+0x198>)
 800f2ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f2d0:	f7fe fbdc 	bl	800da8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	f003 0307 	and.w	r3, r3, #7
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d00b      	beq.n	800f2f6 <pvPortMalloc+0x17a>
	__asm volatile
 800f2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2e2:	f383 8811 	msr	BASEPRI, r3
 800f2e6:	f3bf 8f6f 	isb	sy
 800f2ea:	f3bf 8f4f 	dsb	sy
 800f2ee:	60fb      	str	r3, [r7, #12]
}
 800f2f0:	bf00      	nop
 800f2f2:	bf00      	nop
 800f2f4:	e7fd      	b.n	800f2f2 <pvPortMalloc+0x176>
	return pvReturn;
 800f2f6:	69fb      	ldr	r3, [r7, #28]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3728      	adds	r7, #40	@ 0x28
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	200055c0 	.word	0x200055c0
 800f304:	200055d4 	.word	0x200055d4
 800f308:	200055c4 	.word	0x200055c4
 800f30c:	200055b8 	.word	0x200055b8
 800f310:	200055c8 	.word	0x200055c8
 800f314:	200055cc 	.word	0x200055cc

0800f318 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b086      	sub	sp, #24
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d04f      	beq.n	800f3ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f32a:	2308      	movs	r3, #8
 800f32c:	425b      	negs	r3, r3
 800f32e:	697a      	ldr	r2, [r7, #20]
 800f330:	4413      	add	r3, r2
 800f332:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	685a      	ldr	r2, [r3, #4]
 800f33c:	4b25      	ldr	r3, [pc, #148]	@ (800f3d4 <vPortFree+0xbc>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	4013      	ands	r3, r2
 800f342:	2b00      	cmp	r3, #0
 800f344:	d10b      	bne.n	800f35e <vPortFree+0x46>
	__asm volatile
 800f346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f34a:	f383 8811 	msr	BASEPRI, r3
 800f34e:	f3bf 8f6f 	isb	sy
 800f352:	f3bf 8f4f 	dsb	sy
 800f356:	60fb      	str	r3, [r7, #12]
}
 800f358:	bf00      	nop
 800f35a:	bf00      	nop
 800f35c:	e7fd      	b.n	800f35a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d00b      	beq.n	800f37e <vPortFree+0x66>
	__asm volatile
 800f366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f36a:	f383 8811 	msr	BASEPRI, r3
 800f36e:	f3bf 8f6f 	isb	sy
 800f372:	f3bf 8f4f 	dsb	sy
 800f376:	60bb      	str	r3, [r7, #8]
}
 800f378:	bf00      	nop
 800f37a:	bf00      	nop
 800f37c:	e7fd      	b.n	800f37a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	685a      	ldr	r2, [r3, #4]
 800f382:	4b14      	ldr	r3, [pc, #80]	@ (800f3d4 <vPortFree+0xbc>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	4013      	ands	r3, r2
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d01e      	beq.n	800f3ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d11a      	bne.n	800f3ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f394:	693b      	ldr	r3, [r7, #16]
 800f396:	685a      	ldr	r2, [r3, #4]
 800f398:	4b0e      	ldr	r3, [pc, #56]	@ (800f3d4 <vPortFree+0xbc>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	43db      	mvns	r3, r3
 800f39e:	401a      	ands	r2, r3
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f3a4:	f7fe fb64 	bl	800da70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	685a      	ldr	r2, [r3, #4]
 800f3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f3d8 <vPortFree+0xc0>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4413      	add	r3, r2
 800f3b2:	4a09      	ldr	r2, [pc, #36]	@ (800f3d8 <vPortFree+0xc0>)
 800f3b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f3b6:	6938      	ldr	r0, [r7, #16]
 800f3b8:	f000 f874 	bl	800f4a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f3bc:	4b07      	ldr	r3, [pc, #28]	@ (800f3dc <vPortFree+0xc4>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	4a06      	ldr	r2, [pc, #24]	@ (800f3dc <vPortFree+0xc4>)
 800f3c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f3c6:	f7fe fb61 	bl	800da8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f3ca:	bf00      	nop
 800f3cc:	3718      	adds	r7, #24
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
 800f3d2:	bf00      	nop
 800f3d4:	200055d4 	.word	0x200055d4
 800f3d8:	200055c4 	.word	0x200055c4
 800f3dc:	200055d0 	.word	0x200055d0

0800f3e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b085      	sub	sp, #20
 800f3e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f3e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f3ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f3ec:	4b27      	ldr	r3, [pc, #156]	@ (800f48c <prvHeapInit+0xac>)
 800f3ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f003 0307 	and.w	r3, r3, #7
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00c      	beq.n	800f414 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	3307      	adds	r3, #7
 800f3fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f023 0307 	bic.w	r3, r3, #7
 800f406:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f408:	68ba      	ldr	r2, [r7, #8]
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	1ad3      	subs	r3, r2, r3
 800f40e:	4a1f      	ldr	r2, [pc, #124]	@ (800f48c <prvHeapInit+0xac>)
 800f410:	4413      	add	r3, r2
 800f412:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f418:	4a1d      	ldr	r2, [pc, #116]	@ (800f490 <prvHeapInit+0xb0>)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f41e:	4b1c      	ldr	r3, [pc, #112]	@ (800f490 <prvHeapInit+0xb0>)
 800f420:	2200      	movs	r2, #0
 800f422:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	68ba      	ldr	r2, [r7, #8]
 800f428:	4413      	add	r3, r2
 800f42a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f42c:	2208      	movs	r2, #8
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	1a9b      	subs	r3, r3, r2
 800f432:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f023 0307 	bic.w	r3, r3, #7
 800f43a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	4a15      	ldr	r2, [pc, #84]	@ (800f494 <prvHeapInit+0xb4>)
 800f440:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f442:	4b14      	ldr	r3, [pc, #80]	@ (800f494 <prvHeapInit+0xb4>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2200      	movs	r2, #0
 800f448:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f44a:	4b12      	ldr	r3, [pc, #72]	@ (800f494 <prvHeapInit+0xb4>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	2200      	movs	r2, #0
 800f450:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	1ad2      	subs	r2, r2, r3
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f460:	4b0c      	ldr	r3, [pc, #48]	@ (800f494 <prvHeapInit+0xb4>)
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	4a0a      	ldr	r2, [pc, #40]	@ (800f498 <prvHeapInit+0xb8>)
 800f46e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	4a09      	ldr	r2, [pc, #36]	@ (800f49c <prvHeapInit+0xbc>)
 800f476:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f478:	4b09      	ldr	r3, [pc, #36]	@ (800f4a0 <prvHeapInit+0xc0>)
 800f47a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f47e:	601a      	str	r2, [r3, #0]
}
 800f480:	bf00      	nop
 800f482:	3714      	adds	r7, #20
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr
 800f48c:	200019b8 	.word	0x200019b8
 800f490:	200055b8 	.word	0x200055b8
 800f494:	200055c0 	.word	0x200055c0
 800f498:	200055c8 	.word	0x200055c8
 800f49c:	200055c4 	.word	0x200055c4
 800f4a0:	200055d4 	.word	0x200055d4

0800f4a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b085      	sub	sp, #20
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f4ac:	4b28      	ldr	r3, [pc, #160]	@ (800f550 <prvInsertBlockIntoFreeList+0xac>)
 800f4ae:	60fb      	str	r3, [r7, #12]
 800f4b0:	e002      	b.n	800f4b8 <prvInsertBlockIntoFreeList+0x14>
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	60fb      	str	r3, [r7, #12]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	687a      	ldr	r2, [r7, #4]
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d8f7      	bhi.n	800f4b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	68ba      	ldr	r2, [r7, #8]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	687a      	ldr	r2, [r7, #4]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d108      	bne.n	800f4e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	685a      	ldr	r2, [r3, #4]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	685b      	ldr	r3, [r3, #4]
 800f4dc:	441a      	add	r2, r3
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	68ba      	ldr	r2, [r7, #8]
 800f4f0:	441a      	add	r2, r3
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d118      	bne.n	800f52c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	4b15      	ldr	r3, [pc, #84]	@ (800f554 <prvInsertBlockIntoFreeList+0xb0>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	429a      	cmp	r2, r3
 800f504:	d00d      	beq.n	800f522 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	685a      	ldr	r2, [r3, #4]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	441a      	add	r2, r3
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	681a      	ldr	r2, [r3, #0]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	601a      	str	r2, [r3, #0]
 800f520:	e008      	b.n	800f534 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f522:	4b0c      	ldr	r3, [pc, #48]	@ (800f554 <prvInsertBlockIntoFreeList+0xb0>)
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	601a      	str	r2, [r3, #0]
 800f52a:	e003      	b.n	800f534 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	429a      	cmp	r2, r3
 800f53a:	d002      	beq.n	800f542 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f542:	bf00      	nop
 800f544:	3714      	adds	r7, #20
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop
 800f550:	200055b8 	.word	0x200055b8
 800f554:	200055c0 	.word	0x200055c0

0800f558 <__itoa>:
 800f558:	1e93      	subs	r3, r2, #2
 800f55a:	2b22      	cmp	r3, #34	@ 0x22
 800f55c:	b510      	push	{r4, lr}
 800f55e:	460c      	mov	r4, r1
 800f560:	d904      	bls.n	800f56c <__itoa+0x14>
 800f562:	2300      	movs	r3, #0
 800f564:	700b      	strb	r3, [r1, #0]
 800f566:	461c      	mov	r4, r3
 800f568:	4620      	mov	r0, r4
 800f56a:	bd10      	pop	{r4, pc}
 800f56c:	2a0a      	cmp	r2, #10
 800f56e:	d109      	bne.n	800f584 <__itoa+0x2c>
 800f570:	2800      	cmp	r0, #0
 800f572:	da07      	bge.n	800f584 <__itoa+0x2c>
 800f574:	232d      	movs	r3, #45	@ 0x2d
 800f576:	700b      	strb	r3, [r1, #0]
 800f578:	4240      	negs	r0, r0
 800f57a:	2101      	movs	r1, #1
 800f57c:	4421      	add	r1, r4
 800f57e:	f000 f8c3 	bl	800f708 <__utoa>
 800f582:	e7f1      	b.n	800f568 <__itoa+0x10>
 800f584:	2100      	movs	r1, #0
 800f586:	e7f9      	b.n	800f57c <__itoa+0x24>

0800f588 <itoa>:
 800f588:	f7ff bfe6 	b.w	800f558 <__itoa>

0800f58c <malloc>:
 800f58c:	4b02      	ldr	r3, [pc, #8]	@ (800f598 <malloc+0xc>)
 800f58e:	4601      	mov	r1, r0
 800f590:	6818      	ldr	r0, [r3, #0]
 800f592:	f000 b82d 	b.w	800f5f0 <_malloc_r>
 800f596:	bf00      	nop
 800f598:	200000c4 	.word	0x200000c4

0800f59c <free>:
 800f59c:	4b02      	ldr	r3, [pc, #8]	@ (800f5a8 <free+0xc>)
 800f59e:	4601      	mov	r1, r0
 800f5a0:	6818      	ldr	r0, [r3, #0]
 800f5a2:	f002 b885 	b.w	80116b0 <_free_r>
 800f5a6:	bf00      	nop
 800f5a8:	200000c4 	.word	0x200000c4

0800f5ac <sbrk_aligned>:
 800f5ac:	b570      	push	{r4, r5, r6, lr}
 800f5ae:	4e0f      	ldr	r6, [pc, #60]	@ (800f5ec <sbrk_aligned+0x40>)
 800f5b0:	460c      	mov	r4, r1
 800f5b2:	6831      	ldr	r1, [r6, #0]
 800f5b4:	4605      	mov	r5, r0
 800f5b6:	b911      	cbnz	r1, 800f5be <sbrk_aligned+0x12>
 800f5b8:	f001 f9aa 	bl	8010910 <_sbrk_r>
 800f5bc:	6030      	str	r0, [r6, #0]
 800f5be:	4621      	mov	r1, r4
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	f001 f9a5 	bl	8010910 <_sbrk_r>
 800f5c6:	1c43      	adds	r3, r0, #1
 800f5c8:	d103      	bne.n	800f5d2 <sbrk_aligned+0x26>
 800f5ca:	f04f 34ff 	mov.w	r4, #4294967295
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	bd70      	pop	{r4, r5, r6, pc}
 800f5d2:	1cc4      	adds	r4, r0, #3
 800f5d4:	f024 0403 	bic.w	r4, r4, #3
 800f5d8:	42a0      	cmp	r0, r4
 800f5da:	d0f8      	beq.n	800f5ce <sbrk_aligned+0x22>
 800f5dc:	1a21      	subs	r1, r4, r0
 800f5de:	4628      	mov	r0, r5
 800f5e0:	f001 f996 	bl	8010910 <_sbrk_r>
 800f5e4:	3001      	adds	r0, #1
 800f5e6:	d1f2      	bne.n	800f5ce <sbrk_aligned+0x22>
 800f5e8:	e7ef      	b.n	800f5ca <sbrk_aligned+0x1e>
 800f5ea:	bf00      	nop
 800f5ec:	200055d8 	.word	0x200055d8

0800f5f0 <_malloc_r>:
 800f5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5f4:	1ccd      	adds	r5, r1, #3
 800f5f6:	f025 0503 	bic.w	r5, r5, #3
 800f5fa:	3508      	adds	r5, #8
 800f5fc:	2d0c      	cmp	r5, #12
 800f5fe:	bf38      	it	cc
 800f600:	250c      	movcc	r5, #12
 800f602:	2d00      	cmp	r5, #0
 800f604:	4606      	mov	r6, r0
 800f606:	db01      	blt.n	800f60c <_malloc_r+0x1c>
 800f608:	42a9      	cmp	r1, r5
 800f60a:	d904      	bls.n	800f616 <_malloc_r+0x26>
 800f60c:	230c      	movs	r3, #12
 800f60e:	6033      	str	r3, [r6, #0]
 800f610:	2000      	movs	r0, #0
 800f612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f616:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f6ec <_malloc_r+0xfc>
 800f61a:	f000 f869 	bl	800f6f0 <__malloc_lock>
 800f61e:	f8d8 3000 	ldr.w	r3, [r8]
 800f622:	461c      	mov	r4, r3
 800f624:	bb44      	cbnz	r4, 800f678 <_malloc_r+0x88>
 800f626:	4629      	mov	r1, r5
 800f628:	4630      	mov	r0, r6
 800f62a:	f7ff ffbf 	bl	800f5ac <sbrk_aligned>
 800f62e:	1c43      	adds	r3, r0, #1
 800f630:	4604      	mov	r4, r0
 800f632:	d158      	bne.n	800f6e6 <_malloc_r+0xf6>
 800f634:	f8d8 4000 	ldr.w	r4, [r8]
 800f638:	4627      	mov	r7, r4
 800f63a:	2f00      	cmp	r7, #0
 800f63c:	d143      	bne.n	800f6c6 <_malloc_r+0xd6>
 800f63e:	2c00      	cmp	r4, #0
 800f640:	d04b      	beq.n	800f6da <_malloc_r+0xea>
 800f642:	6823      	ldr	r3, [r4, #0]
 800f644:	4639      	mov	r1, r7
 800f646:	4630      	mov	r0, r6
 800f648:	eb04 0903 	add.w	r9, r4, r3
 800f64c:	f001 f960 	bl	8010910 <_sbrk_r>
 800f650:	4581      	cmp	r9, r0
 800f652:	d142      	bne.n	800f6da <_malloc_r+0xea>
 800f654:	6821      	ldr	r1, [r4, #0]
 800f656:	1a6d      	subs	r5, r5, r1
 800f658:	4629      	mov	r1, r5
 800f65a:	4630      	mov	r0, r6
 800f65c:	f7ff ffa6 	bl	800f5ac <sbrk_aligned>
 800f660:	3001      	adds	r0, #1
 800f662:	d03a      	beq.n	800f6da <_malloc_r+0xea>
 800f664:	6823      	ldr	r3, [r4, #0]
 800f666:	442b      	add	r3, r5
 800f668:	6023      	str	r3, [r4, #0]
 800f66a:	f8d8 3000 	ldr.w	r3, [r8]
 800f66e:	685a      	ldr	r2, [r3, #4]
 800f670:	bb62      	cbnz	r2, 800f6cc <_malloc_r+0xdc>
 800f672:	f8c8 7000 	str.w	r7, [r8]
 800f676:	e00f      	b.n	800f698 <_malloc_r+0xa8>
 800f678:	6822      	ldr	r2, [r4, #0]
 800f67a:	1b52      	subs	r2, r2, r5
 800f67c:	d420      	bmi.n	800f6c0 <_malloc_r+0xd0>
 800f67e:	2a0b      	cmp	r2, #11
 800f680:	d917      	bls.n	800f6b2 <_malloc_r+0xc2>
 800f682:	1961      	adds	r1, r4, r5
 800f684:	42a3      	cmp	r3, r4
 800f686:	6025      	str	r5, [r4, #0]
 800f688:	bf18      	it	ne
 800f68a:	6059      	strne	r1, [r3, #4]
 800f68c:	6863      	ldr	r3, [r4, #4]
 800f68e:	bf08      	it	eq
 800f690:	f8c8 1000 	streq.w	r1, [r8]
 800f694:	5162      	str	r2, [r4, r5]
 800f696:	604b      	str	r3, [r1, #4]
 800f698:	4630      	mov	r0, r6
 800f69a:	f000 f82f 	bl	800f6fc <__malloc_unlock>
 800f69e:	f104 000b 	add.w	r0, r4, #11
 800f6a2:	1d23      	adds	r3, r4, #4
 800f6a4:	f020 0007 	bic.w	r0, r0, #7
 800f6a8:	1ac2      	subs	r2, r0, r3
 800f6aa:	bf1c      	itt	ne
 800f6ac:	1a1b      	subne	r3, r3, r0
 800f6ae:	50a3      	strne	r3, [r4, r2]
 800f6b0:	e7af      	b.n	800f612 <_malloc_r+0x22>
 800f6b2:	6862      	ldr	r2, [r4, #4]
 800f6b4:	42a3      	cmp	r3, r4
 800f6b6:	bf0c      	ite	eq
 800f6b8:	f8c8 2000 	streq.w	r2, [r8]
 800f6bc:	605a      	strne	r2, [r3, #4]
 800f6be:	e7eb      	b.n	800f698 <_malloc_r+0xa8>
 800f6c0:	4623      	mov	r3, r4
 800f6c2:	6864      	ldr	r4, [r4, #4]
 800f6c4:	e7ae      	b.n	800f624 <_malloc_r+0x34>
 800f6c6:	463c      	mov	r4, r7
 800f6c8:	687f      	ldr	r7, [r7, #4]
 800f6ca:	e7b6      	b.n	800f63a <_malloc_r+0x4a>
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	42a3      	cmp	r3, r4
 800f6d2:	d1fb      	bne.n	800f6cc <_malloc_r+0xdc>
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	6053      	str	r3, [r2, #4]
 800f6d8:	e7de      	b.n	800f698 <_malloc_r+0xa8>
 800f6da:	230c      	movs	r3, #12
 800f6dc:	6033      	str	r3, [r6, #0]
 800f6de:	4630      	mov	r0, r6
 800f6e0:	f000 f80c 	bl	800f6fc <__malloc_unlock>
 800f6e4:	e794      	b.n	800f610 <_malloc_r+0x20>
 800f6e6:	6005      	str	r5, [r0, #0]
 800f6e8:	e7d6      	b.n	800f698 <_malloc_r+0xa8>
 800f6ea:	bf00      	nop
 800f6ec:	200055dc 	.word	0x200055dc

0800f6f0 <__malloc_lock>:
 800f6f0:	4801      	ldr	r0, [pc, #4]	@ (800f6f8 <__malloc_lock+0x8>)
 800f6f2:	f001 b95a 	b.w	80109aa <__retarget_lock_acquire_recursive>
 800f6f6:	bf00      	nop
 800f6f8:	20005720 	.word	0x20005720

0800f6fc <__malloc_unlock>:
 800f6fc:	4801      	ldr	r0, [pc, #4]	@ (800f704 <__malloc_unlock+0x8>)
 800f6fe:	f001 b955 	b.w	80109ac <__retarget_lock_release_recursive>
 800f702:	bf00      	nop
 800f704:	20005720 	.word	0x20005720

0800f708 <__utoa>:
 800f708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f70a:	4c1f      	ldr	r4, [pc, #124]	@ (800f788 <__utoa+0x80>)
 800f70c:	b08b      	sub	sp, #44	@ 0x2c
 800f70e:	4605      	mov	r5, r0
 800f710:	460b      	mov	r3, r1
 800f712:	466e      	mov	r6, sp
 800f714:	f104 0c20 	add.w	ip, r4, #32
 800f718:	6820      	ldr	r0, [r4, #0]
 800f71a:	6861      	ldr	r1, [r4, #4]
 800f71c:	4637      	mov	r7, r6
 800f71e:	c703      	stmia	r7!, {r0, r1}
 800f720:	3408      	adds	r4, #8
 800f722:	4564      	cmp	r4, ip
 800f724:	463e      	mov	r6, r7
 800f726:	d1f7      	bne.n	800f718 <__utoa+0x10>
 800f728:	7921      	ldrb	r1, [r4, #4]
 800f72a:	7139      	strb	r1, [r7, #4]
 800f72c:	1e91      	subs	r1, r2, #2
 800f72e:	6820      	ldr	r0, [r4, #0]
 800f730:	6038      	str	r0, [r7, #0]
 800f732:	2922      	cmp	r1, #34	@ 0x22
 800f734:	f04f 0100 	mov.w	r1, #0
 800f738:	d904      	bls.n	800f744 <__utoa+0x3c>
 800f73a:	7019      	strb	r1, [r3, #0]
 800f73c:	460b      	mov	r3, r1
 800f73e:	4618      	mov	r0, r3
 800f740:	b00b      	add	sp, #44	@ 0x2c
 800f742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f744:	1e58      	subs	r0, r3, #1
 800f746:	4684      	mov	ip, r0
 800f748:	fbb5 f7f2 	udiv	r7, r5, r2
 800f74c:	fb02 5617 	mls	r6, r2, r7, r5
 800f750:	3628      	adds	r6, #40	@ 0x28
 800f752:	446e      	add	r6, sp
 800f754:	460c      	mov	r4, r1
 800f756:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f75a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f75e:	462e      	mov	r6, r5
 800f760:	42b2      	cmp	r2, r6
 800f762:	f101 0101 	add.w	r1, r1, #1
 800f766:	463d      	mov	r5, r7
 800f768:	d9ee      	bls.n	800f748 <__utoa+0x40>
 800f76a:	2200      	movs	r2, #0
 800f76c:	545a      	strb	r2, [r3, r1]
 800f76e:	1919      	adds	r1, r3, r4
 800f770:	1aa5      	subs	r5, r4, r2
 800f772:	42aa      	cmp	r2, r5
 800f774:	dae3      	bge.n	800f73e <__utoa+0x36>
 800f776:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f77a:	780e      	ldrb	r6, [r1, #0]
 800f77c:	7006      	strb	r6, [r0, #0]
 800f77e:	3201      	adds	r2, #1
 800f780:	f801 5901 	strb.w	r5, [r1], #-1
 800f784:	e7f4      	b.n	800f770 <__utoa+0x68>
 800f786:	bf00      	nop
 800f788:	08015a10 	.word	0x08015a10

0800f78c <__cvt>:
 800f78c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f790:	ec57 6b10 	vmov	r6, r7, d0
 800f794:	2f00      	cmp	r7, #0
 800f796:	460c      	mov	r4, r1
 800f798:	4619      	mov	r1, r3
 800f79a:	463b      	mov	r3, r7
 800f79c:	bfbb      	ittet	lt
 800f79e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f7a2:	461f      	movlt	r7, r3
 800f7a4:	2300      	movge	r3, #0
 800f7a6:	232d      	movlt	r3, #45	@ 0x2d
 800f7a8:	700b      	strb	r3, [r1, #0]
 800f7aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f7ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f7b0:	4691      	mov	r9, r2
 800f7b2:	f023 0820 	bic.w	r8, r3, #32
 800f7b6:	bfbc      	itt	lt
 800f7b8:	4632      	movlt	r2, r6
 800f7ba:	4616      	movlt	r6, r2
 800f7bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f7c0:	d005      	beq.n	800f7ce <__cvt+0x42>
 800f7c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f7c6:	d100      	bne.n	800f7ca <__cvt+0x3e>
 800f7c8:	3401      	adds	r4, #1
 800f7ca:	2102      	movs	r1, #2
 800f7cc:	e000      	b.n	800f7d0 <__cvt+0x44>
 800f7ce:	2103      	movs	r1, #3
 800f7d0:	ab03      	add	r3, sp, #12
 800f7d2:	9301      	str	r3, [sp, #4]
 800f7d4:	ab02      	add	r3, sp, #8
 800f7d6:	9300      	str	r3, [sp, #0]
 800f7d8:	ec47 6b10 	vmov	d0, r6, r7
 800f7dc:	4653      	mov	r3, sl
 800f7de:	4622      	mov	r2, r4
 800f7e0:	f001 f9a2 	bl	8010b28 <_dtoa_r>
 800f7e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f7e8:	4605      	mov	r5, r0
 800f7ea:	d119      	bne.n	800f820 <__cvt+0x94>
 800f7ec:	f019 0f01 	tst.w	r9, #1
 800f7f0:	d00e      	beq.n	800f810 <__cvt+0x84>
 800f7f2:	eb00 0904 	add.w	r9, r0, r4
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	4639      	mov	r1, r7
 800f7fe:	f7f1 f973 	bl	8000ae8 <__aeabi_dcmpeq>
 800f802:	b108      	cbz	r0, 800f808 <__cvt+0x7c>
 800f804:	f8cd 900c 	str.w	r9, [sp, #12]
 800f808:	2230      	movs	r2, #48	@ 0x30
 800f80a:	9b03      	ldr	r3, [sp, #12]
 800f80c:	454b      	cmp	r3, r9
 800f80e:	d31e      	bcc.n	800f84e <__cvt+0xc2>
 800f810:	9b03      	ldr	r3, [sp, #12]
 800f812:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f814:	1b5b      	subs	r3, r3, r5
 800f816:	4628      	mov	r0, r5
 800f818:	6013      	str	r3, [r2, #0]
 800f81a:	b004      	add	sp, #16
 800f81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f820:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f824:	eb00 0904 	add.w	r9, r0, r4
 800f828:	d1e5      	bne.n	800f7f6 <__cvt+0x6a>
 800f82a:	7803      	ldrb	r3, [r0, #0]
 800f82c:	2b30      	cmp	r3, #48	@ 0x30
 800f82e:	d10a      	bne.n	800f846 <__cvt+0xba>
 800f830:	2200      	movs	r2, #0
 800f832:	2300      	movs	r3, #0
 800f834:	4630      	mov	r0, r6
 800f836:	4639      	mov	r1, r7
 800f838:	f7f1 f956 	bl	8000ae8 <__aeabi_dcmpeq>
 800f83c:	b918      	cbnz	r0, 800f846 <__cvt+0xba>
 800f83e:	f1c4 0401 	rsb	r4, r4, #1
 800f842:	f8ca 4000 	str.w	r4, [sl]
 800f846:	f8da 3000 	ldr.w	r3, [sl]
 800f84a:	4499      	add	r9, r3
 800f84c:	e7d3      	b.n	800f7f6 <__cvt+0x6a>
 800f84e:	1c59      	adds	r1, r3, #1
 800f850:	9103      	str	r1, [sp, #12]
 800f852:	701a      	strb	r2, [r3, #0]
 800f854:	e7d9      	b.n	800f80a <__cvt+0x7e>

0800f856 <__exponent>:
 800f856:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f858:	2900      	cmp	r1, #0
 800f85a:	bfba      	itte	lt
 800f85c:	4249      	neglt	r1, r1
 800f85e:	232d      	movlt	r3, #45	@ 0x2d
 800f860:	232b      	movge	r3, #43	@ 0x2b
 800f862:	2909      	cmp	r1, #9
 800f864:	7002      	strb	r2, [r0, #0]
 800f866:	7043      	strb	r3, [r0, #1]
 800f868:	dd29      	ble.n	800f8be <__exponent+0x68>
 800f86a:	f10d 0307 	add.w	r3, sp, #7
 800f86e:	461d      	mov	r5, r3
 800f870:	270a      	movs	r7, #10
 800f872:	461a      	mov	r2, r3
 800f874:	fbb1 f6f7 	udiv	r6, r1, r7
 800f878:	fb07 1416 	mls	r4, r7, r6, r1
 800f87c:	3430      	adds	r4, #48	@ 0x30
 800f87e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f882:	460c      	mov	r4, r1
 800f884:	2c63      	cmp	r4, #99	@ 0x63
 800f886:	f103 33ff 	add.w	r3, r3, #4294967295
 800f88a:	4631      	mov	r1, r6
 800f88c:	dcf1      	bgt.n	800f872 <__exponent+0x1c>
 800f88e:	3130      	adds	r1, #48	@ 0x30
 800f890:	1e94      	subs	r4, r2, #2
 800f892:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f896:	1c41      	adds	r1, r0, #1
 800f898:	4623      	mov	r3, r4
 800f89a:	42ab      	cmp	r3, r5
 800f89c:	d30a      	bcc.n	800f8b4 <__exponent+0x5e>
 800f89e:	f10d 0309 	add.w	r3, sp, #9
 800f8a2:	1a9b      	subs	r3, r3, r2
 800f8a4:	42ac      	cmp	r4, r5
 800f8a6:	bf88      	it	hi
 800f8a8:	2300      	movhi	r3, #0
 800f8aa:	3302      	adds	r3, #2
 800f8ac:	4403      	add	r3, r0
 800f8ae:	1a18      	subs	r0, r3, r0
 800f8b0:	b003      	add	sp, #12
 800f8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f8b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f8bc:	e7ed      	b.n	800f89a <__exponent+0x44>
 800f8be:	2330      	movs	r3, #48	@ 0x30
 800f8c0:	3130      	adds	r1, #48	@ 0x30
 800f8c2:	7083      	strb	r3, [r0, #2]
 800f8c4:	70c1      	strb	r1, [r0, #3]
 800f8c6:	1d03      	adds	r3, r0, #4
 800f8c8:	e7f1      	b.n	800f8ae <__exponent+0x58>
	...

0800f8cc <_printf_float>:
 800f8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d0:	b08d      	sub	sp, #52	@ 0x34
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f8d8:	4616      	mov	r6, r2
 800f8da:	461f      	mov	r7, r3
 800f8dc:	4605      	mov	r5, r0
 800f8de:	f000 ffdf 	bl	80108a0 <_localeconv_r>
 800f8e2:	6803      	ldr	r3, [r0, #0]
 800f8e4:	9304      	str	r3, [sp, #16]
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7f0 fcd2 	bl	8000290 <strlen>
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8f0:	f8d8 3000 	ldr.w	r3, [r8]
 800f8f4:	9005      	str	r0, [sp, #20]
 800f8f6:	3307      	adds	r3, #7
 800f8f8:	f023 0307 	bic.w	r3, r3, #7
 800f8fc:	f103 0208 	add.w	r2, r3, #8
 800f900:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f904:	f8d4 b000 	ldr.w	fp, [r4]
 800f908:	f8c8 2000 	str.w	r2, [r8]
 800f90c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f910:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f914:	9307      	str	r3, [sp, #28]
 800f916:	f8cd 8018 	str.w	r8, [sp, #24]
 800f91a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f91e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f922:	4b9c      	ldr	r3, [pc, #624]	@ (800fb94 <_printf_float+0x2c8>)
 800f924:	f04f 32ff 	mov.w	r2, #4294967295
 800f928:	f7f1 f910 	bl	8000b4c <__aeabi_dcmpun>
 800f92c:	bb70      	cbnz	r0, 800f98c <_printf_float+0xc0>
 800f92e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f932:	4b98      	ldr	r3, [pc, #608]	@ (800fb94 <_printf_float+0x2c8>)
 800f934:	f04f 32ff 	mov.w	r2, #4294967295
 800f938:	f7f1 f8ea 	bl	8000b10 <__aeabi_dcmple>
 800f93c:	bb30      	cbnz	r0, 800f98c <_printf_float+0xc0>
 800f93e:	2200      	movs	r2, #0
 800f940:	2300      	movs	r3, #0
 800f942:	4640      	mov	r0, r8
 800f944:	4649      	mov	r1, r9
 800f946:	f7f1 f8d9 	bl	8000afc <__aeabi_dcmplt>
 800f94a:	b110      	cbz	r0, 800f952 <_printf_float+0x86>
 800f94c:	232d      	movs	r3, #45	@ 0x2d
 800f94e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f952:	4a91      	ldr	r2, [pc, #580]	@ (800fb98 <_printf_float+0x2cc>)
 800f954:	4b91      	ldr	r3, [pc, #580]	@ (800fb9c <_printf_float+0x2d0>)
 800f956:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f95a:	bf94      	ite	ls
 800f95c:	4690      	movls	r8, r2
 800f95e:	4698      	movhi	r8, r3
 800f960:	2303      	movs	r3, #3
 800f962:	6123      	str	r3, [r4, #16]
 800f964:	f02b 0304 	bic.w	r3, fp, #4
 800f968:	6023      	str	r3, [r4, #0]
 800f96a:	f04f 0900 	mov.w	r9, #0
 800f96e:	9700      	str	r7, [sp, #0]
 800f970:	4633      	mov	r3, r6
 800f972:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f974:	4621      	mov	r1, r4
 800f976:	4628      	mov	r0, r5
 800f978:	f000 f9d2 	bl	800fd20 <_printf_common>
 800f97c:	3001      	adds	r0, #1
 800f97e:	f040 808d 	bne.w	800fa9c <_printf_float+0x1d0>
 800f982:	f04f 30ff 	mov.w	r0, #4294967295
 800f986:	b00d      	add	sp, #52	@ 0x34
 800f988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f98c:	4642      	mov	r2, r8
 800f98e:	464b      	mov	r3, r9
 800f990:	4640      	mov	r0, r8
 800f992:	4649      	mov	r1, r9
 800f994:	f7f1 f8da 	bl	8000b4c <__aeabi_dcmpun>
 800f998:	b140      	cbz	r0, 800f9ac <_printf_float+0xe0>
 800f99a:	464b      	mov	r3, r9
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	bfbc      	itt	lt
 800f9a0:	232d      	movlt	r3, #45	@ 0x2d
 800f9a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f9a6:	4a7e      	ldr	r2, [pc, #504]	@ (800fba0 <_printf_float+0x2d4>)
 800f9a8:	4b7e      	ldr	r3, [pc, #504]	@ (800fba4 <_printf_float+0x2d8>)
 800f9aa:	e7d4      	b.n	800f956 <_printf_float+0x8a>
 800f9ac:	6863      	ldr	r3, [r4, #4]
 800f9ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f9b2:	9206      	str	r2, [sp, #24]
 800f9b4:	1c5a      	adds	r2, r3, #1
 800f9b6:	d13b      	bne.n	800fa30 <_printf_float+0x164>
 800f9b8:	2306      	movs	r3, #6
 800f9ba:	6063      	str	r3, [r4, #4]
 800f9bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	6022      	str	r2, [r4, #0]
 800f9c4:	9303      	str	r3, [sp, #12]
 800f9c6:	ab0a      	add	r3, sp, #40	@ 0x28
 800f9c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f9cc:	ab09      	add	r3, sp, #36	@ 0x24
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	6861      	ldr	r1, [r4, #4]
 800f9d2:	ec49 8b10 	vmov	d0, r8, r9
 800f9d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f9da:	4628      	mov	r0, r5
 800f9dc:	f7ff fed6 	bl	800f78c <__cvt>
 800f9e0:	9b06      	ldr	r3, [sp, #24]
 800f9e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9e4:	2b47      	cmp	r3, #71	@ 0x47
 800f9e6:	4680      	mov	r8, r0
 800f9e8:	d129      	bne.n	800fa3e <_printf_float+0x172>
 800f9ea:	1cc8      	adds	r0, r1, #3
 800f9ec:	db02      	blt.n	800f9f4 <_printf_float+0x128>
 800f9ee:	6863      	ldr	r3, [r4, #4]
 800f9f0:	4299      	cmp	r1, r3
 800f9f2:	dd41      	ble.n	800fa78 <_printf_float+0x1ac>
 800f9f4:	f1aa 0a02 	sub.w	sl, sl, #2
 800f9f8:	fa5f fa8a 	uxtb.w	sl, sl
 800f9fc:	3901      	subs	r1, #1
 800f9fe:	4652      	mov	r2, sl
 800fa00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fa04:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa06:	f7ff ff26 	bl	800f856 <__exponent>
 800fa0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa0c:	1813      	adds	r3, r2, r0
 800fa0e:	2a01      	cmp	r2, #1
 800fa10:	4681      	mov	r9, r0
 800fa12:	6123      	str	r3, [r4, #16]
 800fa14:	dc02      	bgt.n	800fa1c <_printf_float+0x150>
 800fa16:	6822      	ldr	r2, [r4, #0]
 800fa18:	07d2      	lsls	r2, r2, #31
 800fa1a:	d501      	bpl.n	800fa20 <_printf_float+0x154>
 800fa1c:	3301      	adds	r3, #1
 800fa1e:	6123      	str	r3, [r4, #16]
 800fa20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d0a2      	beq.n	800f96e <_printf_float+0xa2>
 800fa28:	232d      	movs	r3, #45	@ 0x2d
 800fa2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa2e:	e79e      	b.n	800f96e <_printf_float+0xa2>
 800fa30:	9a06      	ldr	r2, [sp, #24]
 800fa32:	2a47      	cmp	r2, #71	@ 0x47
 800fa34:	d1c2      	bne.n	800f9bc <_printf_float+0xf0>
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d1c0      	bne.n	800f9bc <_printf_float+0xf0>
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	e7bd      	b.n	800f9ba <_printf_float+0xee>
 800fa3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fa42:	d9db      	bls.n	800f9fc <_printf_float+0x130>
 800fa44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fa48:	d118      	bne.n	800fa7c <_printf_float+0x1b0>
 800fa4a:	2900      	cmp	r1, #0
 800fa4c:	6863      	ldr	r3, [r4, #4]
 800fa4e:	dd0b      	ble.n	800fa68 <_printf_float+0x19c>
 800fa50:	6121      	str	r1, [r4, #16]
 800fa52:	b913      	cbnz	r3, 800fa5a <_printf_float+0x18e>
 800fa54:	6822      	ldr	r2, [r4, #0]
 800fa56:	07d0      	lsls	r0, r2, #31
 800fa58:	d502      	bpl.n	800fa60 <_printf_float+0x194>
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	440b      	add	r3, r1
 800fa5e:	6123      	str	r3, [r4, #16]
 800fa60:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fa62:	f04f 0900 	mov.w	r9, #0
 800fa66:	e7db      	b.n	800fa20 <_printf_float+0x154>
 800fa68:	b913      	cbnz	r3, 800fa70 <_printf_float+0x1a4>
 800fa6a:	6822      	ldr	r2, [r4, #0]
 800fa6c:	07d2      	lsls	r2, r2, #31
 800fa6e:	d501      	bpl.n	800fa74 <_printf_float+0x1a8>
 800fa70:	3302      	adds	r3, #2
 800fa72:	e7f4      	b.n	800fa5e <_printf_float+0x192>
 800fa74:	2301      	movs	r3, #1
 800fa76:	e7f2      	b.n	800fa5e <_printf_float+0x192>
 800fa78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fa7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa7e:	4299      	cmp	r1, r3
 800fa80:	db05      	blt.n	800fa8e <_printf_float+0x1c2>
 800fa82:	6823      	ldr	r3, [r4, #0]
 800fa84:	6121      	str	r1, [r4, #16]
 800fa86:	07d8      	lsls	r0, r3, #31
 800fa88:	d5ea      	bpl.n	800fa60 <_printf_float+0x194>
 800fa8a:	1c4b      	adds	r3, r1, #1
 800fa8c:	e7e7      	b.n	800fa5e <_printf_float+0x192>
 800fa8e:	2900      	cmp	r1, #0
 800fa90:	bfd4      	ite	le
 800fa92:	f1c1 0202 	rsble	r2, r1, #2
 800fa96:	2201      	movgt	r2, #1
 800fa98:	4413      	add	r3, r2
 800fa9a:	e7e0      	b.n	800fa5e <_printf_float+0x192>
 800fa9c:	6823      	ldr	r3, [r4, #0]
 800fa9e:	055a      	lsls	r2, r3, #21
 800faa0:	d407      	bmi.n	800fab2 <_printf_float+0x1e6>
 800faa2:	6923      	ldr	r3, [r4, #16]
 800faa4:	4642      	mov	r2, r8
 800faa6:	4631      	mov	r1, r6
 800faa8:	4628      	mov	r0, r5
 800faaa:	47b8      	blx	r7
 800faac:	3001      	adds	r0, #1
 800faae:	d12b      	bne.n	800fb08 <_printf_float+0x23c>
 800fab0:	e767      	b.n	800f982 <_printf_float+0xb6>
 800fab2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fab6:	f240 80dd 	bls.w	800fc74 <_printf_float+0x3a8>
 800faba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fabe:	2200      	movs	r2, #0
 800fac0:	2300      	movs	r3, #0
 800fac2:	f7f1 f811 	bl	8000ae8 <__aeabi_dcmpeq>
 800fac6:	2800      	cmp	r0, #0
 800fac8:	d033      	beq.n	800fb32 <_printf_float+0x266>
 800faca:	4a37      	ldr	r2, [pc, #220]	@ (800fba8 <_printf_float+0x2dc>)
 800facc:	2301      	movs	r3, #1
 800face:	4631      	mov	r1, r6
 800fad0:	4628      	mov	r0, r5
 800fad2:	47b8      	blx	r7
 800fad4:	3001      	adds	r0, #1
 800fad6:	f43f af54 	beq.w	800f982 <_printf_float+0xb6>
 800fada:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fade:	4543      	cmp	r3, r8
 800fae0:	db02      	blt.n	800fae8 <_printf_float+0x21c>
 800fae2:	6823      	ldr	r3, [r4, #0]
 800fae4:	07d8      	lsls	r0, r3, #31
 800fae6:	d50f      	bpl.n	800fb08 <_printf_float+0x23c>
 800fae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800faec:	4631      	mov	r1, r6
 800faee:	4628      	mov	r0, r5
 800faf0:	47b8      	blx	r7
 800faf2:	3001      	adds	r0, #1
 800faf4:	f43f af45 	beq.w	800f982 <_printf_float+0xb6>
 800faf8:	f04f 0900 	mov.w	r9, #0
 800fafc:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb00:	f104 0a1a 	add.w	sl, r4, #26
 800fb04:	45c8      	cmp	r8, r9
 800fb06:	dc09      	bgt.n	800fb1c <_printf_float+0x250>
 800fb08:	6823      	ldr	r3, [r4, #0]
 800fb0a:	079b      	lsls	r3, r3, #30
 800fb0c:	f100 8103 	bmi.w	800fd16 <_printf_float+0x44a>
 800fb10:	68e0      	ldr	r0, [r4, #12]
 800fb12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb14:	4298      	cmp	r0, r3
 800fb16:	bfb8      	it	lt
 800fb18:	4618      	movlt	r0, r3
 800fb1a:	e734      	b.n	800f986 <_printf_float+0xba>
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	4652      	mov	r2, sl
 800fb20:	4631      	mov	r1, r6
 800fb22:	4628      	mov	r0, r5
 800fb24:	47b8      	blx	r7
 800fb26:	3001      	adds	r0, #1
 800fb28:	f43f af2b 	beq.w	800f982 <_printf_float+0xb6>
 800fb2c:	f109 0901 	add.w	r9, r9, #1
 800fb30:	e7e8      	b.n	800fb04 <_printf_float+0x238>
 800fb32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	dc39      	bgt.n	800fbac <_printf_float+0x2e0>
 800fb38:	4a1b      	ldr	r2, [pc, #108]	@ (800fba8 <_printf_float+0x2dc>)
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	4631      	mov	r1, r6
 800fb3e:	4628      	mov	r0, r5
 800fb40:	47b8      	blx	r7
 800fb42:	3001      	adds	r0, #1
 800fb44:	f43f af1d 	beq.w	800f982 <_printf_float+0xb6>
 800fb48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fb4c:	ea59 0303 	orrs.w	r3, r9, r3
 800fb50:	d102      	bne.n	800fb58 <_printf_float+0x28c>
 800fb52:	6823      	ldr	r3, [r4, #0]
 800fb54:	07d9      	lsls	r1, r3, #31
 800fb56:	d5d7      	bpl.n	800fb08 <_printf_float+0x23c>
 800fb58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb5c:	4631      	mov	r1, r6
 800fb5e:	4628      	mov	r0, r5
 800fb60:	47b8      	blx	r7
 800fb62:	3001      	adds	r0, #1
 800fb64:	f43f af0d 	beq.w	800f982 <_printf_float+0xb6>
 800fb68:	f04f 0a00 	mov.w	sl, #0
 800fb6c:	f104 0b1a 	add.w	fp, r4, #26
 800fb70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb72:	425b      	negs	r3, r3
 800fb74:	4553      	cmp	r3, sl
 800fb76:	dc01      	bgt.n	800fb7c <_printf_float+0x2b0>
 800fb78:	464b      	mov	r3, r9
 800fb7a:	e793      	b.n	800faa4 <_printf_float+0x1d8>
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	465a      	mov	r2, fp
 800fb80:	4631      	mov	r1, r6
 800fb82:	4628      	mov	r0, r5
 800fb84:	47b8      	blx	r7
 800fb86:	3001      	adds	r0, #1
 800fb88:	f43f aefb 	beq.w	800f982 <_printf_float+0xb6>
 800fb8c:	f10a 0a01 	add.w	sl, sl, #1
 800fb90:	e7ee      	b.n	800fb70 <_printf_float+0x2a4>
 800fb92:	bf00      	nop
 800fb94:	7fefffff 	.word	0x7fefffff
 800fb98:	08015a35 	.word	0x08015a35
 800fb9c:	08015a39 	.word	0x08015a39
 800fba0:	08015a3d 	.word	0x08015a3d
 800fba4:	08015a41 	.word	0x08015a41
 800fba8:	08015e68 	.word	0x08015e68
 800fbac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fbae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fbb2:	4553      	cmp	r3, sl
 800fbb4:	bfa8      	it	ge
 800fbb6:	4653      	movge	r3, sl
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	4699      	mov	r9, r3
 800fbbc:	dc36      	bgt.n	800fc2c <_printf_float+0x360>
 800fbbe:	f04f 0b00 	mov.w	fp, #0
 800fbc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fbc6:	f104 021a 	add.w	r2, r4, #26
 800fbca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fbcc:	9306      	str	r3, [sp, #24]
 800fbce:	eba3 0309 	sub.w	r3, r3, r9
 800fbd2:	455b      	cmp	r3, fp
 800fbd4:	dc31      	bgt.n	800fc3a <_printf_float+0x36e>
 800fbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbd8:	459a      	cmp	sl, r3
 800fbda:	dc3a      	bgt.n	800fc52 <_printf_float+0x386>
 800fbdc:	6823      	ldr	r3, [r4, #0]
 800fbde:	07da      	lsls	r2, r3, #31
 800fbe0:	d437      	bmi.n	800fc52 <_printf_float+0x386>
 800fbe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbe4:	ebaa 0903 	sub.w	r9, sl, r3
 800fbe8:	9b06      	ldr	r3, [sp, #24]
 800fbea:	ebaa 0303 	sub.w	r3, sl, r3
 800fbee:	4599      	cmp	r9, r3
 800fbf0:	bfa8      	it	ge
 800fbf2:	4699      	movge	r9, r3
 800fbf4:	f1b9 0f00 	cmp.w	r9, #0
 800fbf8:	dc33      	bgt.n	800fc62 <_printf_float+0x396>
 800fbfa:	f04f 0800 	mov.w	r8, #0
 800fbfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc02:	f104 0b1a 	add.w	fp, r4, #26
 800fc06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc08:	ebaa 0303 	sub.w	r3, sl, r3
 800fc0c:	eba3 0309 	sub.w	r3, r3, r9
 800fc10:	4543      	cmp	r3, r8
 800fc12:	f77f af79 	ble.w	800fb08 <_printf_float+0x23c>
 800fc16:	2301      	movs	r3, #1
 800fc18:	465a      	mov	r2, fp
 800fc1a:	4631      	mov	r1, r6
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	47b8      	blx	r7
 800fc20:	3001      	adds	r0, #1
 800fc22:	f43f aeae 	beq.w	800f982 <_printf_float+0xb6>
 800fc26:	f108 0801 	add.w	r8, r8, #1
 800fc2a:	e7ec      	b.n	800fc06 <_printf_float+0x33a>
 800fc2c:	4642      	mov	r2, r8
 800fc2e:	4631      	mov	r1, r6
 800fc30:	4628      	mov	r0, r5
 800fc32:	47b8      	blx	r7
 800fc34:	3001      	adds	r0, #1
 800fc36:	d1c2      	bne.n	800fbbe <_printf_float+0x2f2>
 800fc38:	e6a3      	b.n	800f982 <_printf_float+0xb6>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	4631      	mov	r1, r6
 800fc3e:	4628      	mov	r0, r5
 800fc40:	9206      	str	r2, [sp, #24]
 800fc42:	47b8      	blx	r7
 800fc44:	3001      	adds	r0, #1
 800fc46:	f43f ae9c 	beq.w	800f982 <_printf_float+0xb6>
 800fc4a:	9a06      	ldr	r2, [sp, #24]
 800fc4c:	f10b 0b01 	add.w	fp, fp, #1
 800fc50:	e7bb      	b.n	800fbca <_printf_float+0x2fe>
 800fc52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc56:	4631      	mov	r1, r6
 800fc58:	4628      	mov	r0, r5
 800fc5a:	47b8      	blx	r7
 800fc5c:	3001      	adds	r0, #1
 800fc5e:	d1c0      	bne.n	800fbe2 <_printf_float+0x316>
 800fc60:	e68f      	b.n	800f982 <_printf_float+0xb6>
 800fc62:	9a06      	ldr	r2, [sp, #24]
 800fc64:	464b      	mov	r3, r9
 800fc66:	4442      	add	r2, r8
 800fc68:	4631      	mov	r1, r6
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	47b8      	blx	r7
 800fc6e:	3001      	adds	r0, #1
 800fc70:	d1c3      	bne.n	800fbfa <_printf_float+0x32e>
 800fc72:	e686      	b.n	800f982 <_printf_float+0xb6>
 800fc74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fc78:	f1ba 0f01 	cmp.w	sl, #1
 800fc7c:	dc01      	bgt.n	800fc82 <_printf_float+0x3b6>
 800fc7e:	07db      	lsls	r3, r3, #31
 800fc80:	d536      	bpl.n	800fcf0 <_printf_float+0x424>
 800fc82:	2301      	movs	r3, #1
 800fc84:	4642      	mov	r2, r8
 800fc86:	4631      	mov	r1, r6
 800fc88:	4628      	mov	r0, r5
 800fc8a:	47b8      	blx	r7
 800fc8c:	3001      	adds	r0, #1
 800fc8e:	f43f ae78 	beq.w	800f982 <_printf_float+0xb6>
 800fc92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc96:	4631      	mov	r1, r6
 800fc98:	4628      	mov	r0, r5
 800fc9a:	47b8      	blx	r7
 800fc9c:	3001      	adds	r0, #1
 800fc9e:	f43f ae70 	beq.w	800f982 <_printf_float+0xb6>
 800fca2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fca6:	2200      	movs	r2, #0
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcae:	f7f0 ff1b 	bl	8000ae8 <__aeabi_dcmpeq>
 800fcb2:	b9c0      	cbnz	r0, 800fce6 <_printf_float+0x41a>
 800fcb4:	4653      	mov	r3, sl
 800fcb6:	f108 0201 	add.w	r2, r8, #1
 800fcba:	4631      	mov	r1, r6
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	47b8      	blx	r7
 800fcc0:	3001      	adds	r0, #1
 800fcc2:	d10c      	bne.n	800fcde <_printf_float+0x412>
 800fcc4:	e65d      	b.n	800f982 <_printf_float+0xb6>
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	465a      	mov	r2, fp
 800fcca:	4631      	mov	r1, r6
 800fccc:	4628      	mov	r0, r5
 800fcce:	47b8      	blx	r7
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	f43f ae56 	beq.w	800f982 <_printf_float+0xb6>
 800fcd6:	f108 0801 	add.w	r8, r8, #1
 800fcda:	45d0      	cmp	r8, sl
 800fcdc:	dbf3      	blt.n	800fcc6 <_printf_float+0x3fa>
 800fcde:	464b      	mov	r3, r9
 800fce0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fce4:	e6df      	b.n	800faa6 <_printf_float+0x1da>
 800fce6:	f04f 0800 	mov.w	r8, #0
 800fcea:	f104 0b1a 	add.w	fp, r4, #26
 800fcee:	e7f4      	b.n	800fcda <_printf_float+0x40e>
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	4642      	mov	r2, r8
 800fcf4:	e7e1      	b.n	800fcba <_printf_float+0x3ee>
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	464a      	mov	r2, r9
 800fcfa:	4631      	mov	r1, r6
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	47b8      	blx	r7
 800fd00:	3001      	adds	r0, #1
 800fd02:	f43f ae3e 	beq.w	800f982 <_printf_float+0xb6>
 800fd06:	f108 0801 	add.w	r8, r8, #1
 800fd0a:	68e3      	ldr	r3, [r4, #12]
 800fd0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fd0e:	1a5b      	subs	r3, r3, r1
 800fd10:	4543      	cmp	r3, r8
 800fd12:	dcf0      	bgt.n	800fcf6 <_printf_float+0x42a>
 800fd14:	e6fc      	b.n	800fb10 <_printf_float+0x244>
 800fd16:	f04f 0800 	mov.w	r8, #0
 800fd1a:	f104 0919 	add.w	r9, r4, #25
 800fd1e:	e7f4      	b.n	800fd0a <_printf_float+0x43e>

0800fd20 <_printf_common>:
 800fd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd24:	4616      	mov	r6, r2
 800fd26:	4698      	mov	r8, r3
 800fd28:	688a      	ldr	r2, [r1, #8]
 800fd2a:	690b      	ldr	r3, [r1, #16]
 800fd2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fd30:	4293      	cmp	r3, r2
 800fd32:	bfb8      	it	lt
 800fd34:	4613      	movlt	r3, r2
 800fd36:	6033      	str	r3, [r6, #0]
 800fd38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fd3c:	4607      	mov	r7, r0
 800fd3e:	460c      	mov	r4, r1
 800fd40:	b10a      	cbz	r2, 800fd46 <_printf_common+0x26>
 800fd42:	3301      	adds	r3, #1
 800fd44:	6033      	str	r3, [r6, #0]
 800fd46:	6823      	ldr	r3, [r4, #0]
 800fd48:	0699      	lsls	r1, r3, #26
 800fd4a:	bf42      	ittt	mi
 800fd4c:	6833      	ldrmi	r3, [r6, #0]
 800fd4e:	3302      	addmi	r3, #2
 800fd50:	6033      	strmi	r3, [r6, #0]
 800fd52:	6825      	ldr	r5, [r4, #0]
 800fd54:	f015 0506 	ands.w	r5, r5, #6
 800fd58:	d106      	bne.n	800fd68 <_printf_common+0x48>
 800fd5a:	f104 0a19 	add.w	sl, r4, #25
 800fd5e:	68e3      	ldr	r3, [r4, #12]
 800fd60:	6832      	ldr	r2, [r6, #0]
 800fd62:	1a9b      	subs	r3, r3, r2
 800fd64:	42ab      	cmp	r3, r5
 800fd66:	dc26      	bgt.n	800fdb6 <_printf_common+0x96>
 800fd68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fd6c:	6822      	ldr	r2, [r4, #0]
 800fd6e:	3b00      	subs	r3, #0
 800fd70:	bf18      	it	ne
 800fd72:	2301      	movne	r3, #1
 800fd74:	0692      	lsls	r2, r2, #26
 800fd76:	d42b      	bmi.n	800fdd0 <_printf_common+0xb0>
 800fd78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fd7c:	4641      	mov	r1, r8
 800fd7e:	4638      	mov	r0, r7
 800fd80:	47c8      	blx	r9
 800fd82:	3001      	adds	r0, #1
 800fd84:	d01e      	beq.n	800fdc4 <_printf_common+0xa4>
 800fd86:	6823      	ldr	r3, [r4, #0]
 800fd88:	6922      	ldr	r2, [r4, #16]
 800fd8a:	f003 0306 	and.w	r3, r3, #6
 800fd8e:	2b04      	cmp	r3, #4
 800fd90:	bf02      	ittt	eq
 800fd92:	68e5      	ldreq	r5, [r4, #12]
 800fd94:	6833      	ldreq	r3, [r6, #0]
 800fd96:	1aed      	subeq	r5, r5, r3
 800fd98:	68a3      	ldr	r3, [r4, #8]
 800fd9a:	bf0c      	ite	eq
 800fd9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fda0:	2500      	movne	r5, #0
 800fda2:	4293      	cmp	r3, r2
 800fda4:	bfc4      	itt	gt
 800fda6:	1a9b      	subgt	r3, r3, r2
 800fda8:	18ed      	addgt	r5, r5, r3
 800fdaa:	2600      	movs	r6, #0
 800fdac:	341a      	adds	r4, #26
 800fdae:	42b5      	cmp	r5, r6
 800fdb0:	d11a      	bne.n	800fde8 <_printf_common+0xc8>
 800fdb2:	2000      	movs	r0, #0
 800fdb4:	e008      	b.n	800fdc8 <_printf_common+0xa8>
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	4652      	mov	r2, sl
 800fdba:	4641      	mov	r1, r8
 800fdbc:	4638      	mov	r0, r7
 800fdbe:	47c8      	blx	r9
 800fdc0:	3001      	adds	r0, #1
 800fdc2:	d103      	bne.n	800fdcc <_printf_common+0xac>
 800fdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800fdc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdcc:	3501      	adds	r5, #1
 800fdce:	e7c6      	b.n	800fd5e <_printf_common+0x3e>
 800fdd0:	18e1      	adds	r1, r4, r3
 800fdd2:	1c5a      	adds	r2, r3, #1
 800fdd4:	2030      	movs	r0, #48	@ 0x30
 800fdd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fdda:	4422      	add	r2, r4
 800fddc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fde0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fde4:	3302      	adds	r3, #2
 800fde6:	e7c7      	b.n	800fd78 <_printf_common+0x58>
 800fde8:	2301      	movs	r3, #1
 800fdea:	4622      	mov	r2, r4
 800fdec:	4641      	mov	r1, r8
 800fdee:	4638      	mov	r0, r7
 800fdf0:	47c8      	blx	r9
 800fdf2:	3001      	adds	r0, #1
 800fdf4:	d0e6      	beq.n	800fdc4 <_printf_common+0xa4>
 800fdf6:	3601      	adds	r6, #1
 800fdf8:	e7d9      	b.n	800fdae <_printf_common+0x8e>
	...

0800fdfc <_printf_i>:
 800fdfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe00:	7e0f      	ldrb	r7, [r1, #24]
 800fe02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fe04:	2f78      	cmp	r7, #120	@ 0x78
 800fe06:	4691      	mov	r9, r2
 800fe08:	4680      	mov	r8, r0
 800fe0a:	460c      	mov	r4, r1
 800fe0c:	469a      	mov	sl, r3
 800fe0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fe12:	d807      	bhi.n	800fe24 <_printf_i+0x28>
 800fe14:	2f62      	cmp	r7, #98	@ 0x62
 800fe16:	d80a      	bhi.n	800fe2e <_printf_i+0x32>
 800fe18:	2f00      	cmp	r7, #0
 800fe1a:	f000 80d2 	beq.w	800ffc2 <_printf_i+0x1c6>
 800fe1e:	2f58      	cmp	r7, #88	@ 0x58
 800fe20:	f000 80b9 	beq.w	800ff96 <_printf_i+0x19a>
 800fe24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fe2c:	e03a      	b.n	800fea4 <_printf_i+0xa8>
 800fe2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fe32:	2b15      	cmp	r3, #21
 800fe34:	d8f6      	bhi.n	800fe24 <_printf_i+0x28>
 800fe36:	a101      	add	r1, pc, #4	@ (adr r1, 800fe3c <_printf_i+0x40>)
 800fe38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe3c:	0800fe95 	.word	0x0800fe95
 800fe40:	0800fea9 	.word	0x0800fea9
 800fe44:	0800fe25 	.word	0x0800fe25
 800fe48:	0800fe25 	.word	0x0800fe25
 800fe4c:	0800fe25 	.word	0x0800fe25
 800fe50:	0800fe25 	.word	0x0800fe25
 800fe54:	0800fea9 	.word	0x0800fea9
 800fe58:	0800fe25 	.word	0x0800fe25
 800fe5c:	0800fe25 	.word	0x0800fe25
 800fe60:	0800fe25 	.word	0x0800fe25
 800fe64:	0800fe25 	.word	0x0800fe25
 800fe68:	0800ffa9 	.word	0x0800ffa9
 800fe6c:	0800fed3 	.word	0x0800fed3
 800fe70:	0800ff63 	.word	0x0800ff63
 800fe74:	0800fe25 	.word	0x0800fe25
 800fe78:	0800fe25 	.word	0x0800fe25
 800fe7c:	0800ffcb 	.word	0x0800ffcb
 800fe80:	0800fe25 	.word	0x0800fe25
 800fe84:	0800fed3 	.word	0x0800fed3
 800fe88:	0800fe25 	.word	0x0800fe25
 800fe8c:	0800fe25 	.word	0x0800fe25
 800fe90:	0800ff6b 	.word	0x0800ff6b
 800fe94:	6833      	ldr	r3, [r6, #0]
 800fe96:	1d1a      	adds	r2, r3, #4
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	6032      	str	r2, [r6, #0]
 800fe9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fea0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fea4:	2301      	movs	r3, #1
 800fea6:	e09d      	b.n	800ffe4 <_printf_i+0x1e8>
 800fea8:	6833      	ldr	r3, [r6, #0]
 800feaa:	6820      	ldr	r0, [r4, #0]
 800feac:	1d19      	adds	r1, r3, #4
 800feae:	6031      	str	r1, [r6, #0]
 800feb0:	0606      	lsls	r6, r0, #24
 800feb2:	d501      	bpl.n	800feb8 <_printf_i+0xbc>
 800feb4:	681d      	ldr	r5, [r3, #0]
 800feb6:	e003      	b.n	800fec0 <_printf_i+0xc4>
 800feb8:	0645      	lsls	r5, r0, #25
 800feba:	d5fb      	bpl.n	800feb4 <_printf_i+0xb8>
 800febc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fec0:	2d00      	cmp	r5, #0
 800fec2:	da03      	bge.n	800fecc <_printf_i+0xd0>
 800fec4:	232d      	movs	r3, #45	@ 0x2d
 800fec6:	426d      	negs	r5, r5
 800fec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fecc:	4859      	ldr	r0, [pc, #356]	@ (8010034 <_printf_i+0x238>)
 800fece:	230a      	movs	r3, #10
 800fed0:	e011      	b.n	800fef6 <_printf_i+0xfa>
 800fed2:	6821      	ldr	r1, [r4, #0]
 800fed4:	6833      	ldr	r3, [r6, #0]
 800fed6:	0608      	lsls	r0, r1, #24
 800fed8:	f853 5b04 	ldr.w	r5, [r3], #4
 800fedc:	d402      	bmi.n	800fee4 <_printf_i+0xe8>
 800fede:	0649      	lsls	r1, r1, #25
 800fee0:	bf48      	it	mi
 800fee2:	b2ad      	uxthmi	r5, r5
 800fee4:	2f6f      	cmp	r7, #111	@ 0x6f
 800fee6:	4853      	ldr	r0, [pc, #332]	@ (8010034 <_printf_i+0x238>)
 800fee8:	6033      	str	r3, [r6, #0]
 800feea:	bf14      	ite	ne
 800feec:	230a      	movne	r3, #10
 800feee:	2308      	moveq	r3, #8
 800fef0:	2100      	movs	r1, #0
 800fef2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fef6:	6866      	ldr	r6, [r4, #4]
 800fef8:	60a6      	str	r6, [r4, #8]
 800fefa:	2e00      	cmp	r6, #0
 800fefc:	bfa2      	ittt	ge
 800fefe:	6821      	ldrge	r1, [r4, #0]
 800ff00:	f021 0104 	bicge.w	r1, r1, #4
 800ff04:	6021      	strge	r1, [r4, #0]
 800ff06:	b90d      	cbnz	r5, 800ff0c <_printf_i+0x110>
 800ff08:	2e00      	cmp	r6, #0
 800ff0a:	d04b      	beq.n	800ffa4 <_printf_i+0x1a8>
 800ff0c:	4616      	mov	r6, r2
 800ff0e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ff12:	fb03 5711 	mls	r7, r3, r1, r5
 800ff16:	5dc7      	ldrb	r7, [r0, r7]
 800ff18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff1c:	462f      	mov	r7, r5
 800ff1e:	42bb      	cmp	r3, r7
 800ff20:	460d      	mov	r5, r1
 800ff22:	d9f4      	bls.n	800ff0e <_printf_i+0x112>
 800ff24:	2b08      	cmp	r3, #8
 800ff26:	d10b      	bne.n	800ff40 <_printf_i+0x144>
 800ff28:	6823      	ldr	r3, [r4, #0]
 800ff2a:	07df      	lsls	r7, r3, #31
 800ff2c:	d508      	bpl.n	800ff40 <_printf_i+0x144>
 800ff2e:	6923      	ldr	r3, [r4, #16]
 800ff30:	6861      	ldr	r1, [r4, #4]
 800ff32:	4299      	cmp	r1, r3
 800ff34:	bfde      	ittt	le
 800ff36:	2330      	movle	r3, #48	@ 0x30
 800ff38:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff40:	1b92      	subs	r2, r2, r6
 800ff42:	6122      	str	r2, [r4, #16]
 800ff44:	f8cd a000 	str.w	sl, [sp]
 800ff48:	464b      	mov	r3, r9
 800ff4a:	aa03      	add	r2, sp, #12
 800ff4c:	4621      	mov	r1, r4
 800ff4e:	4640      	mov	r0, r8
 800ff50:	f7ff fee6 	bl	800fd20 <_printf_common>
 800ff54:	3001      	adds	r0, #1
 800ff56:	d14a      	bne.n	800ffee <_printf_i+0x1f2>
 800ff58:	f04f 30ff 	mov.w	r0, #4294967295
 800ff5c:	b004      	add	sp, #16
 800ff5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff62:	6823      	ldr	r3, [r4, #0]
 800ff64:	f043 0320 	orr.w	r3, r3, #32
 800ff68:	6023      	str	r3, [r4, #0]
 800ff6a:	4833      	ldr	r0, [pc, #204]	@ (8010038 <_printf_i+0x23c>)
 800ff6c:	2778      	movs	r7, #120	@ 0x78
 800ff6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ff72:	6823      	ldr	r3, [r4, #0]
 800ff74:	6831      	ldr	r1, [r6, #0]
 800ff76:	061f      	lsls	r7, r3, #24
 800ff78:	f851 5b04 	ldr.w	r5, [r1], #4
 800ff7c:	d402      	bmi.n	800ff84 <_printf_i+0x188>
 800ff7e:	065f      	lsls	r7, r3, #25
 800ff80:	bf48      	it	mi
 800ff82:	b2ad      	uxthmi	r5, r5
 800ff84:	6031      	str	r1, [r6, #0]
 800ff86:	07d9      	lsls	r1, r3, #31
 800ff88:	bf44      	itt	mi
 800ff8a:	f043 0320 	orrmi.w	r3, r3, #32
 800ff8e:	6023      	strmi	r3, [r4, #0]
 800ff90:	b11d      	cbz	r5, 800ff9a <_printf_i+0x19e>
 800ff92:	2310      	movs	r3, #16
 800ff94:	e7ac      	b.n	800fef0 <_printf_i+0xf4>
 800ff96:	4827      	ldr	r0, [pc, #156]	@ (8010034 <_printf_i+0x238>)
 800ff98:	e7e9      	b.n	800ff6e <_printf_i+0x172>
 800ff9a:	6823      	ldr	r3, [r4, #0]
 800ff9c:	f023 0320 	bic.w	r3, r3, #32
 800ffa0:	6023      	str	r3, [r4, #0]
 800ffa2:	e7f6      	b.n	800ff92 <_printf_i+0x196>
 800ffa4:	4616      	mov	r6, r2
 800ffa6:	e7bd      	b.n	800ff24 <_printf_i+0x128>
 800ffa8:	6833      	ldr	r3, [r6, #0]
 800ffaa:	6825      	ldr	r5, [r4, #0]
 800ffac:	6961      	ldr	r1, [r4, #20]
 800ffae:	1d18      	adds	r0, r3, #4
 800ffb0:	6030      	str	r0, [r6, #0]
 800ffb2:	062e      	lsls	r6, r5, #24
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	d501      	bpl.n	800ffbc <_printf_i+0x1c0>
 800ffb8:	6019      	str	r1, [r3, #0]
 800ffba:	e002      	b.n	800ffc2 <_printf_i+0x1c6>
 800ffbc:	0668      	lsls	r0, r5, #25
 800ffbe:	d5fb      	bpl.n	800ffb8 <_printf_i+0x1bc>
 800ffc0:	8019      	strh	r1, [r3, #0]
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	6123      	str	r3, [r4, #16]
 800ffc6:	4616      	mov	r6, r2
 800ffc8:	e7bc      	b.n	800ff44 <_printf_i+0x148>
 800ffca:	6833      	ldr	r3, [r6, #0]
 800ffcc:	1d1a      	adds	r2, r3, #4
 800ffce:	6032      	str	r2, [r6, #0]
 800ffd0:	681e      	ldr	r6, [r3, #0]
 800ffd2:	6862      	ldr	r2, [r4, #4]
 800ffd4:	2100      	movs	r1, #0
 800ffd6:	4630      	mov	r0, r6
 800ffd8:	f7f0 f90a 	bl	80001f0 <memchr>
 800ffdc:	b108      	cbz	r0, 800ffe2 <_printf_i+0x1e6>
 800ffde:	1b80      	subs	r0, r0, r6
 800ffe0:	6060      	str	r0, [r4, #4]
 800ffe2:	6863      	ldr	r3, [r4, #4]
 800ffe4:	6123      	str	r3, [r4, #16]
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffec:	e7aa      	b.n	800ff44 <_printf_i+0x148>
 800ffee:	6923      	ldr	r3, [r4, #16]
 800fff0:	4632      	mov	r2, r6
 800fff2:	4649      	mov	r1, r9
 800fff4:	4640      	mov	r0, r8
 800fff6:	47d0      	blx	sl
 800fff8:	3001      	adds	r0, #1
 800fffa:	d0ad      	beq.n	800ff58 <_printf_i+0x15c>
 800fffc:	6823      	ldr	r3, [r4, #0]
 800fffe:	079b      	lsls	r3, r3, #30
 8010000:	d413      	bmi.n	801002a <_printf_i+0x22e>
 8010002:	68e0      	ldr	r0, [r4, #12]
 8010004:	9b03      	ldr	r3, [sp, #12]
 8010006:	4298      	cmp	r0, r3
 8010008:	bfb8      	it	lt
 801000a:	4618      	movlt	r0, r3
 801000c:	e7a6      	b.n	800ff5c <_printf_i+0x160>
 801000e:	2301      	movs	r3, #1
 8010010:	4632      	mov	r2, r6
 8010012:	4649      	mov	r1, r9
 8010014:	4640      	mov	r0, r8
 8010016:	47d0      	blx	sl
 8010018:	3001      	adds	r0, #1
 801001a:	d09d      	beq.n	800ff58 <_printf_i+0x15c>
 801001c:	3501      	adds	r5, #1
 801001e:	68e3      	ldr	r3, [r4, #12]
 8010020:	9903      	ldr	r1, [sp, #12]
 8010022:	1a5b      	subs	r3, r3, r1
 8010024:	42ab      	cmp	r3, r5
 8010026:	dcf2      	bgt.n	801000e <_printf_i+0x212>
 8010028:	e7eb      	b.n	8010002 <_printf_i+0x206>
 801002a:	2500      	movs	r5, #0
 801002c:	f104 0619 	add.w	r6, r4, #25
 8010030:	e7f5      	b.n	801001e <_printf_i+0x222>
 8010032:	bf00      	nop
 8010034:	08015a45 	.word	0x08015a45
 8010038:	08015a56 	.word	0x08015a56

0801003c <_scanf_float>:
 801003c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010040:	b087      	sub	sp, #28
 8010042:	4617      	mov	r7, r2
 8010044:	9303      	str	r3, [sp, #12]
 8010046:	688b      	ldr	r3, [r1, #8]
 8010048:	1e5a      	subs	r2, r3, #1
 801004a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801004e:	bf81      	itttt	hi
 8010050:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010054:	eb03 0b05 	addhi.w	fp, r3, r5
 8010058:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801005c:	608b      	strhi	r3, [r1, #8]
 801005e:	680b      	ldr	r3, [r1, #0]
 8010060:	460a      	mov	r2, r1
 8010062:	f04f 0500 	mov.w	r5, #0
 8010066:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801006a:	f842 3b1c 	str.w	r3, [r2], #28
 801006e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010072:	4680      	mov	r8, r0
 8010074:	460c      	mov	r4, r1
 8010076:	bf98      	it	ls
 8010078:	f04f 0b00 	movls.w	fp, #0
 801007c:	9201      	str	r2, [sp, #4]
 801007e:	4616      	mov	r6, r2
 8010080:	46aa      	mov	sl, r5
 8010082:	46a9      	mov	r9, r5
 8010084:	9502      	str	r5, [sp, #8]
 8010086:	68a2      	ldr	r2, [r4, #8]
 8010088:	b152      	cbz	r2, 80100a0 <_scanf_float+0x64>
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	2b4e      	cmp	r3, #78	@ 0x4e
 8010090:	d864      	bhi.n	801015c <_scanf_float+0x120>
 8010092:	2b40      	cmp	r3, #64	@ 0x40
 8010094:	d83c      	bhi.n	8010110 <_scanf_float+0xd4>
 8010096:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801009a:	b2c8      	uxtb	r0, r1
 801009c:	280e      	cmp	r0, #14
 801009e:	d93a      	bls.n	8010116 <_scanf_float+0xda>
 80100a0:	f1b9 0f00 	cmp.w	r9, #0
 80100a4:	d003      	beq.n	80100ae <_scanf_float+0x72>
 80100a6:	6823      	ldr	r3, [r4, #0]
 80100a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80100ac:	6023      	str	r3, [r4, #0]
 80100ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80100b2:	f1ba 0f01 	cmp.w	sl, #1
 80100b6:	f200 8117 	bhi.w	80102e8 <_scanf_float+0x2ac>
 80100ba:	9b01      	ldr	r3, [sp, #4]
 80100bc:	429e      	cmp	r6, r3
 80100be:	f200 8108 	bhi.w	80102d2 <_scanf_float+0x296>
 80100c2:	2001      	movs	r0, #1
 80100c4:	b007      	add	sp, #28
 80100c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80100ce:	2a0d      	cmp	r2, #13
 80100d0:	d8e6      	bhi.n	80100a0 <_scanf_float+0x64>
 80100d2:	a101      	add	r1, pc, #4	@ (adr r1, 80100d8 <_scanf_float+0x9c>)
 80100d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80100d8:	0801021f 	.word	0x0801021f
 80100dc:	080100a1 	.word	0x080100a1
 80100e0:	080100a1 	.word	0x080100a1
 80100e4:	080100a1 	.word	0x080100a1
 80100e8:	0801027f 	.word	0x0801027f
 80100ec:	08010257 	.word	0x08010257
 80100f0:	080100a1 	.word	0x080100a1
 80100f4:	080100a1 	.word	0x080100a1
 80100f8:	0801022d 	.word	0x0801022d
 80100fc:	080100a1 	.word	0x080100a1
 8010100:	080100a1 	.word	0x080100a1
 8010104:	080100a1 	.word	0x080100a1
 8010108:	080100a1 	.word	0x080100a1
 801010c:	080101e5 	.word	0x080101e5
 8010110:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010114:	e7db      	b.n	80100ce <_scanf_float+0x92>
 8010116:	290e      	cmp	r1, #14
 8010118:	d8c2      	bhi.n	80100a0 <_scanf_float+0x64>
 801011a:	a001      	add	r0, pc, #4	@ (adr r0, 8010120 <_scanf_float+0xe4>)
 801011c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010120:	080101d5 	.word	0x080101d5
 8010124:	080100a1 	.word	0x080100a1
 8010128:	080101d5 	.word	0x080101d5
 801012c:	0801026b 	.word	0x0801026b
 8010130:	080100a1 	.word	0x080100a1
 8010134:	0801017d 	.word	0x0801017d
 8010138:	080101bb 	.word	0x080101bb
 801013c:	080101bb 	.word	0x080101bb
 8010140:	080101bb 	.word	0x080101bb
 8010144:	080101bb 	.word	0x080101bb
 8010148:	080101bb 	.word	0x080101bb
 801014c:	080101bb 	.word	0x080101bb
 8010150:	080101bb 	.word	0x080101bb
 8010154:	080101bb 	.word	0x080101bb
 8010158:	080101bb 	.word	0x080101bb
 801015c:	2b6e      	cmp	r3, #110	@ 0x6e
 801015e:	d809      	bhi.n	8010174 <_scanf_float+0x138>
 8010160:	2b60      	cmp	r3, #96	@ 0x60
 8010162:	d8b2      	bhi.n	80100ca <_scanf_float+0x8e>
 8010164:	2b54      	cmp	r3, #84	@ 0x54
 8010166:	d07b      	beq.n	8010260 <_scanf_float+0x224>
 8010168:	2b59      	cmp	r3, #89	@ 0x59
 801016a:	d199      	bne.n	80100a0 <_scanf_float+0x64>
 801016c:	2d07      	cmp	r5, #7
 801016e:	d197      	bne.n	80100a0 <_scanf_float+0x64>
 8010170:	2508      	movs	r5, #8
 8010172:	e02c      	b.n	80101ce <_scanf_float+0x192>
 8010174:	2b74      	cmp	r3, #116	@ 0x74
 8010176:	d073      	beq.n	8010260 <_scanf_float+0x224>
 8010178:	2b79      	cmp	r3, #121	@ 0x79
 801017a:	e7f6      	b.n	801016a <_scanf_float+0x12e>
 801017c:	6821      	ldr	r1, [r4, #0]
 801017e:	05c8      	lsls	r0, r1, #23
 8010180:	d51b      	bpl.n	80101ba <_scanf_float+0x17e>
 8010182:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8010186:	6021      	str	r1, [r4, #0]
 8010188:	f109 0901 	add.w	r9, r9, #1
 801018c:	f1bb 0f00 	cmp.w	fp, #0
 8010190:	d003      	beq.n	801019a <_scanf_float+0x15e>
 8010192:	3201      	adds	r2, #1
 8010194:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010198:	60a2      	str	r2, [r4, #8]
 801019a:	68a3      	ldr	r3, [r4, #8]
 801019c:	3b01      	subs	r3, #1
 801019e:	60a3      	str	r3, [r4, #8]
 80101a0:	6923      	ldr	r3, [r4, #16]
 80101a2:	3301      	adds	r3, #1
 80101a4:	6123      	str	r3, [r4, #16]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	3b01      	subs	r3, #1
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	607b      	str	r3, [r7, #4]
 80101ae:	f340 8087 	ble.w	80102c0 <_scanf_float+0x284>
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	3301      	adds	r3, #1
 80101b6:	603b      	str	r3, [r7, #0]
 80101b8:	e765      	b.n	8010086 <_scanf_float+0x4a>
 80101ba:	eb1a 0105 	adds.w	r1, sl, r5
 80101be:	f47f af6f 	bne.w	80100a0 <_scanf_float+0x64>
 80101c2:	6822      	ldr	r2, [r4, #0]
 80101c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80101c8:	6022      	str	r2, [r4, #0]
 80101ca:	460d      	mov	r5, r1
 80101cc:	468a      	mov	sl, r1
 80101ce:	f806 3b01 	strb.w	r3, [r6], #1
 80101d2:	e7e2      	b.n	801019a <_scanf_float+0x15e>
 80101d4:	6822      	ldr	r2, [r4, #0]
 80101d6:	0610      	lsls	r0, r2, #24
 80101d8:	f57f af62 	bpl.w	80100a0 <_scanf_float+0x64>
 80101dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80101e0:	6022      	str	r2, [r4, #0]
 80101e2:	e7f4      	b.n	80101ce <_scanf_float+0x192>
 80101e4:	f1ba 0f00 	cmp.w	sl, #0
 80101e8:	d10e      	bne.n	8010208 <_scanf_float+0x1cc>
 80101ea:	f1b9 0f00 	cmp.w	r9, #0
 80101ee:	d10e      	bne.n	801020e <_scanf_float+0x1d2>
 80101f0:	6822      	ldr	r2, [r4, #0]
 80101f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80101f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80101fa:	d108      	bne.n	801020e <_scanf_float+0x1d2>
 80101fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010200:	6022      	str	r2, [r4, #0]
 8010202:	f04f 0a01 	mov.w	sl, #1
 8010206:	e7e2      	b.n	80101ce <_scanf_float+0x192>
 8010208:	f1ba 0f02 	cmp.w	sl, #2
 801020c:	d055      	beq.n	80102ba <_scanf_float+0x27e>
 801020e:	2d01      	cmp	r5, #1
 8010210:	d002      	beq.n	8010218 <_scanf_float+0x1dc>
 8010212:	2d04      	cmp	r5, #4
 8010214:	f47f af44 	bne.w	80100a0 <_scanf_float+0x64>
 8010218:	3501      	adds	r5, #1
 801021a:	b2ed      	uxtb	r5, r5
 801021c:	e7d7      	b.n	80101ce <_scanf_float+0x192>
 801021e:	f1ba 0f01 	cmp.w	sl, #1
 8010222:	f47f af3d 	bne.w	80100a0 <_scanf_float+0x64>
 8010226:	f04f 0a02 	mov.w	sl, #2
 801022a:	e7d0      	b.n	80101ce <_scanf_float+0x192>
 801022c:	b97d      	cbnz	r5, 801024e <_scanf_float+0x212>
 801022e:	f1b9 0f00 	cmp.w	r9, #0
 8010232:	f47f af38 	bne.w	80100a6 <_scanf_float+0x6a>
 8010236:	6822      	ldr	r2, [r4, #0]
 8010238:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801023c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010240:	f040 8108 	bne.w	8010454 <_scanf_float+0x418>
 8010244:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010248:	6022      	str	r2, [r4, #0]
 801024a:	2501      	movs	r5, #1
 801024c:	e7bf      	b.n	80101ce <_scanf_float+0x192>
 801024e:	2d03      	cmp	r5, #3
 8010250:	d0e2      	beq.n	8010218 <_scanf_float+0x1dc>
 8010252:	2d05      	cmp	r5, #5
 8010254:	e7de      	b.n	8010214 <_scanf_float+0x1d8>
 8010256:	2d02      	cmp	r5, #2
 8010258:	f47f af22 	bne.w	80100a0 <_scanf_float+0x64>
 801025c:	2503      	movs	r5, #3
 801025e:	e7b6      	b.n	80101ce <_scanf_float+0x192>
 8010260:	2d06      	cmp	r5, #6
 8010262:	f47f af1d 	bne.w	80100a0 <_scanf_float+0x64>
 8010266:	2507      	movs	r5, #7
 8010268:	e7b1      	b.n	80101ce <_scanf_float+0x192>
 801026a:	6822      	ldr	r2, [r4, #0]
 801026c:	0591      	lsls	r1, r2, #22
 801026e:	f57f af17 	bpl.w	80100a0 <_scanf_float+0x64>
 8010272:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8010276:	6022      	str	r2, [r4, #0]
 8010278:	f8cd 9008 	str.w	r9, [sp, #8]
 801027c:	e7a7      	b.n	80101ce <_scanf_float+0x192>
 801027e:	6822      	ldr	r2, [r4, #0]
 8010280:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010284:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010288:	d006      	beq.n	8010298 <_scanf_float+0x25c>
 801028a:	0550      	lsls	r0, r2, #21
 801028c:	f57f af08 	bpl.w	80100a0 <_scanf_float+0x64>
 8010290:	f1b9 0f00 	cmp.w	r9, #0
 8010294:	f000 80de 	beq.w	8010454 <_scanf_float+0x418>
 8010298:	0591      	lsls	r1, r2, #22
 801029a:	bf58      	it	pl
 801029c:	9902      	ldrpl	r1, [sp, #8]
 801029e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80102a2:	bf58      	it	pl
 80102a4:	eba9 0101 	subpl.w	r1, r9, r1
 80102a8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80102ac:	bf58      	it	pl
 80102ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80102b2:	6022      	str	r2, [r4, #0]
 80102b4:	f04f 0900 	mov.w	r9, #0
 80102b8:	e789      	b.n	80101ce <_scanf_float+0x192>
 80102ba:	f04f 0a03 	mov.w	sl, #3
 80102be:	e786      	b.n	80101ce <_scanf_float+0x192>
 80102c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80102c4:	4639      	mov	r1, r7
 80102c6:	4640      	mov	r0, r8
 80102c8:	4798      	blx	r3
 80102ca:	2800      	cmp	r0, #0
 80102cc:	f43f aedb 	beq.w	8010086 <_scanf_float+0x4a>
 80102d0:	e6e6      	b.n	80100a0 <_scanf_float+0x64>
 80102d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80102d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80102da:	463a      	mov	r2, r7
 80102dc:	4640      	mov	r0, r8
 80102de:	4798      	blx	r3
 80102e0:	6923      	ldr	r3, [r4, #16]
 80102e2:	3b01      	subs	r3, #1
 80102e4:	6123      	str	r3, [r4, #16]
 80102e6:	e6e8      	b.n	80100ba <_scanf_float+0x7e>
 80102e8:	1e6b      	subs	r3, r5, #1
 80102ea:	2b06      	cmp	r3, #6
 80102ec:	d824      	bhi.n	8010338 <_scanf_float+0x2fc>
 80102ee:	2d02      	cmp	r5, #2
 80102f0:	d836      	bhi.n	8010360 <_scanf_float+0x324>
 80102f2:	9b01      	ldr	r3, [sp, #4]
 80102f4:	429e      	cmp	r6, r3
 80102f6:	f67f aee4 	bls.w	80100c2 <_scanf_float+0x86>
 80102fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80102fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010302:	463a      	mov	r2, r7
 8010304:	4640      	mov	r0, r8
 8010306:	4798      	blx	r3
 8010308:	6923      	ldr	r3, [r4, #16]
 801030a:	3b01      	subs	r3, #1
 801030c:	6123      	str	r3, [r4, #16]
 801030e:	e7f0      	b.n	80102f2 <_scanf_float+0x2b6>
 8010310:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010314:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010318:	463a      	mov	r2, r7
 801031a:	4640      	mov	r0, r8
 801031c:	4798      	blx	r3
 801031e:	6923      	ldr	r3, [r4, #16]
 8010320:	3b01      	subs	r3, #1
 8010322:	6123      	str	r3, [r4, #16]
 8010324:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010328:	fa5f fa8a 	uxtb.w	sl, sl
 801032c:	f1ba 0f02 	cmp.w	sl, #2
 8010330:	d1ee      	bne.n	8010310 <_scanf_float+0x2d4>
 8010332:	3d03      	subs	r5, #3
 8010334:	b2ed      	uxtb	r5, r5
 8010336:	1b76      	subs	r6, r6, r5
 8010338:	6823      	ldr	r3, [r4, #0]
 801033a:	05da      	lsls	r2, r3, #23
 801033c:	d530      	bpl.n	80103a0 <_scanf_float+0x364>
 801033e:	055b      	lsls	r3, r3, #21
 8010340:	d511      	bpl.n	8010366 <_scanf_float+0x32a>
 8010342:	9b01      	ldr	r3, [sp, #4]
 8010344:	429e      	cmp	r6, r3
 8010346:	f67f aebc 	bls.w	80100c2 <_scanf_float+0x86>
 801034a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801034e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010352:	463a      	mov	r2, r7
 8010354:	4640      	mov	r0, r8
 8010356:	4798      	blx	r3
 8010358:	6923      	ldr	r3, [r4, #16]
 801035a:	3b01      	subs	r3, #1
 801035c:	6123      	str	r3, [r4, #16]
 801035e:	e7f0      	b.n	8010342 <_scanf_float+0x306>
 8010360:	46aa      	mov	sl, r5
 8010362:	46b3      	mov	fp, r6
 8010364:	e7de      	b.n	8010324 <_scanf_float+0x2e8>
 8010366:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801036a:	6923      	ldr	r3, [r4, #16]
 801036c:	2965      	cmp	r1, #101	@ 0x65
 801036e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010372:	f106 35ff 	add.w	r5, r6, #4294967295
 8010376:	6123      	str	r3, [r4, #16]
 8010378:	d00c      	beq.n	8010394 <_scanf_float+0x358>
 801037a:	2945      	cmp	r1, #69	@ 0x45
 801037c:	d00a      	beq.n	8010394 <_scanf_float+0x358>
 801037e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010382:	463a      	mov	r2, r7
 8010384:	4640      	mov	r0, r8
 8010386:	4798      	blx	r3
 8010388:	6923      	ldr	r3, [r4, #16]
 801038a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801038e:	3b01      	subs	r3, #1
 8010390:	1eb5      	subs	r5, r6, #2
 8010392:	6123      	str	r3, [r4, #16]
 8010394:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010398:	463a      	mov	r2, r7
 801039a:	4640      	mov	r0, r8
 801039c:	4798      	blx	r3
 801039e:	462e      	mov	r6, r5
 80103a0:	6822      	ldr	r2, [r4, #0]
 80103a2:	f012 0210 	ands.w	r2, r2, #16
 80103a6:	d001      	beq.n	80103ac <_scanf_float+0x370>
 80103a8:	2000      	movs	r0, #0
 80103aa:	e68b      	b.n	80100c4 <_scanf_float+0x88>
 80103ac:	7032      	strb	r2, [r6, #0]
 80103ae:	6823      	ldr	r3, [r4, #0]
 80103b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80103b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80103b8:	d11c      	bne.n	80103f4 <_scanf_float+0x3b8>
 80103ba:	9b02      	ldr	r3, [sp, #8]
 80103bc:	454b      	cmp	r3, r9
 80103be:	eba3 0209 	sub.w	r2, r3, r9
 80103c2:	d123      	bne.n	801040c <_scanf_float+0x3d0>
 80103c4:	9901      	ldr	r1, [sp, #4]
 80103c6:	2200      	movs	r2, #0
 80103c8:	4640      	mov	r0, r8
 80103ca:	f002 fc71 	bl	8012cb0 <_strtod_r>
 80103ce:	9b03      	ldr	r3, [sp, #12]
 80103d0:	6821      	ldr	r1, [r4, #0]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	f011 0f02 	tst.w	r1, #2
 80103d8:	ec57 6b10 	vmov	r6, r7, d0
 80103dc:	f103 0204 	add.w	r2, r3, #4
 80103e0:	d01f      	beq.n	8010422 <_scanf_float+0x3e6>
 80103e2:	9903      	ldr	r1, [sp, #12]
 80103e4:	600a      	str	r2, [r1, #0]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	e9c3 6700 	strd	r6, r7, [r3]
 80103ec:	68e3      	ldr	r3, [r4, #12]
 80103ee:	3301      	adds	r3, #1
 80103f0:	60e3      	str	r3, [r4, #12]
 80103f2:	e7d9      	b.n	80103a8 <_scanf_float+0x36c>
 80103f4:	9b04      	ldr	r3, [sp, #16]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d0e4      	beq.n	80103c4 <_scanf_float+0x388>
 80103fa:	9905      	ldr	r1, [sp, #20]
 80103fc:	230a      	movs	r3, #10
 80103fe:	3101      	adds	r1, #1
 8010400:	4640      	mov	r0, r8
 8010402:	f002 fcd5 	bl	8012db0 <_strtol_r>
 8010406:	9b04      	ldr	r3, [sp, #16]
 8010408:	9e05      	ldr	r6, [sp, #20]
 801040a:	1ac2      	subs	r2, r0, r3
 801040c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010410:	429e      	cmp	r6, r3
 8010412:	bf28      	it	cs
 8010414:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010418:	4910      	ldr	r1, [pc, #64]	@ (801045c <_scanf_float+0x420>)
 801041a:	4630      	mov	r0, r6
 801041c:	f000 f918 	bl	8010650 <siprintf>
 8010420:	e7d0      	b.n	80103c4 <_scanf_float+0x388>
 8010422:	f011 0f04 	tst.w	r1, #4
 8010426:	9903      	ldr	r1, [sp, #12]
 8010428:	600a      	str	r2, [r1, #0]
 801042a:	d1dc      	bne.n	80103e6 <_scanf_float+0x3aa>
 801042c:	681d      	ldr	r5, [r3, #0]
 801042e:	4632      	mov	r2, r6
 8010430:	463b      	mov	r3, r7
 8010432:	4630      	mov	r0, r6
 8010434:	4639      	mov	r1, r7
 8010436:	f7f0 fb89 	bl	8000b4c <__aeabi_dcmpun>
 801043a:	b128      	cbz	r0, 8010448 <_scanf_float+0x40c>
 801043c:	4808      	ldr	r0, [pc, #32]	@ (8010460 <_scanf_float+0x424>)
 801043e:	f000 fac5 	bl	80109cc <nanf>
 8010442:	ed85 0a00 	vstr	s0, [r5]
 8010446:	e7d1      	b.n	80103ec <_scanf_float+0x3b0>
 8010448:	4630      	mov	r0, r6
 801044a:	4639      	mov	r1, r7
 801044c:	f7f0 fbdc 	bl	8000c08 <__aeabi_d2f>
 8010450:	6028      	str	r0, [r5, #0]
 8010452:	e7cb      	b.n	80103ec <_scanf_float+0x3b0>
 8010454:	f04f 0900 	mov.w	r9, #0
 8010458:	e629      	b.n	80100ae <_scanf_float+0x72>
 801045a:	bf00      	nop
 801045c:	08015a67 	.word	0x08015a67
 8010460:	08015b18 	.word	0x08015b18

08010464 <std>:
 8010464:	2300      	movs	r3, #0
 8010466:	b510      	push	{r4, lr}
 8010468:	4604      	mov	r4, r0
 801046a:	e9c0 3300 	strd	r3, r3, [r0]
 801046e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010472:	6083      	str	r3, [r0, #8]
 8010474:	8181      	strh	r1, [r0, #12]
 8010476:	6643      	str	r3, [r0, #100]	@ 0x64
 8010478:	81c2      	strh	r2, [r0, #14]
 801047a:	6183      	str	r3, [r0, #24]
 801047c:	4619      	mov	r1, r3
 801047e:	2208      	movs	r2, #8
 8010480:	305c      	adds	r0, #92	@ 0x5c
 8010482:	f000 f974 	bl	801076e <memset>
 8010486:	4b0d      	ldr	r3, [pc, #52]	@ (80104bc <std+0x58>)
 8010488:	6263      	str	r3, [r4, #36]	@ 0x24
 801048a:	4b0d      	ldr	r3, [pc, #52]	@ (80104c0 <std+0x5c>)
 801048c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801048e:	4b0d      	ldr	r3, [pc, #52]	@ (80104c4 <std+0x60>)
 8010490:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010492:	4b0d      	ldr	r3, [pc, #52]	@ (80104c8 <std+0x64>)
 8010494:	6323      	str	r3, [r4, #48]	@ 0x30
 8010496:	4b0d      	ldr	r3, [pc, #52]	@ (80104cc <std+0x68>)
 8010498:	6224      	str	r4, [r4, #32]
 801049a:	429c      	cmp	r4, r3
 801049c:	d006      	beq.n	80104ac <std+0x48>
 801049e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80104a2:	4294      	cmp	r4, r2
 80104a4:	d002      	beq.n	80104ac <std+0x48>
 80104a6:	33d0      	adds	r3, #208	@ 0xd0
 80104a8:	429c      	cmp	r4, r3
 80104aa:	d105      	bne.n	80104b8 <std+0x54>
 80104ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80104b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104b4:	f000 ba78 	b.w	80109a8 <__retarget_lock_init_recursive>
 80104b8:	bd10      	pop	{r4, pc}
 80104ba:	bf00      	nop
 80104bc:	080106e5 	.word	0x080106e5
 80104c0:	0801070b 	.word	0x0801070b
 80104c4:	08010743 	.word	0x08010743
 80104c8:	08010767 	.word	0x08010767
 80104cc:	200055e0 	.word	0x200055e0

080104d0 <stdio_exit_handler>:
 80104d0:	4a02      	ldr	r2, [pc, #8]	@ (80104dc <stdio_exit_handler+0xc>)
 80104d2:	4903      	ldr	r1, [pc, #12]	@ (80104e0 <stdio_exit_handler+0x10>)
 80104d4:	4803      	ldr	r0, [pc, #12]	@ (80104e4 <stdio_exit_handler+0x14>)
 80104d6:	f000 b869 	b.w	80105ac <_fwalk_sglue>
 80104da:	bf00      	nop
 80104dc:	200000b8 	.word	0x200000b8
 80104e0:	080137a1 	.word	0x080137a1
 80104e4:	200000c8 	.word	0x200000c8

080104e8 <cleanup_stdio>:
 80104e8:	6841      	ldr	r1, [r0, #4]
 80104ea:	4b0c      	ldr	r3, [pc, #48]	@ (801051c <cleanup_stdio+0x34>)
 80104ec:	4299      	cmp	r1, r3
 80104ee:	b510      	push	{r4, lr}
 80104f0:	4604      	mov	r4, r0
 80104f2:	d001      	beq.n	80104f8 <cleanup_stdio+0x10>
 80104f4:	f003 f954 	bl	80137a0 <_fflush_r>
 80104f8:	68a1      	ldr	r1, [r4, #8]
 80104fa:	4b09      	ldr	r3, [pc, #36]	@ (8010520 <cleanup_stdio+0x38>)
 80104fc:	4299      	cmp	r1, r3
 80104fe:	d002      	beq.n	8010506 <cleanup_stdio+0x1e>
 8010500:	4620      	mov	r0, r4
 8010502:	f003 f94d 	bl	80137a0 <_fflush_r>
 8010506:	68e1      	ldr	r1, [r4, #12]
 8010508:	4b06      	ldr	r3, [pc, #24]	@ (8010524 <cleanup_stdio+0x3c>)
 801050a:	4299      	cmp	r1, r3
 801050c:	d004      	beq.n	8010518 <cleanup_stdio+0x30>
 801050e:	4620      	mov	r0, r4
 8010510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010514:	f003 b944 	b.w	80137a0 <_fflush_r>
 8010518:	bd10      	pop	{r4, pc}
 801051a:	bf00      	nop
 801051c:	200055e0 	.word	0x200055e0
 8010520:	20005648 	.word	0x20005648
 8010524:	200056b0 	.word	0x200056b0

08010528 <global_stdio_init.part.0>:
 8010528:	b510      	push	{r4, lr}
 801052a:	4b0b      	ldr	r3, [pc, #44]	@ (8010558 <global_stdio_init.part.0+0x30>)
 801052c:	4c0b      	ldr	r4, [pc, #44]	@ (801055c <global_stdio_init.part.0+0x34>)
 801052e:	4a0c      	ldr	r2, [pc, #48]	@ (8010560 <global_stdio_init.part.0+0x38>)
 8010530:	601a      	str	r2, [r3, #0]
 8010532:	4620      	mov	r0, r4
 8010534:	2200      	movs	r2, #0
 8010536:	2104      	movs	r1, #4
 8010538:	f7ff ff94 	bl	8010464 <std>
 801053c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010540:	2201      	movs	r2, #1
 8010542:	2109      	movs	r1, #9
 8010544:	f7ff ff8e 	bl	8010464 <std>
 8010548:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801054c:	2202      	movs	r2, #2
 801054e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010552:	2112      	movs	r1, #18
 8010554:	f7ff bf86 	b.w	8010464 <std>
 8010558:	20005718 	.word	0x20005718
 801055c:	200055e0 	.word	0x200055e0
 8010560:	080104d1 	.word	0x080104d1

08010564 <__sfp_lock_acquire>:
 8010564:	4801      	ldr	r0, [pc, #4]	@ (801056c <__sfp_lock_acquire+0x8>)
 8010566:	f000 ba20 	b.w	80109aa <__retarget_lock_acquire_recursive>
 801056a:	bf00      	nop
 801056c:	20005721 	.word	0x20005721

08010570 <__sfp_lock_release>:
 8010570:	4801      	ldr	r0, [pc, #4]	@ (8010578 <__sfp_lock_release+0x8>)
 8010572:	f000 ba1b 	b.w	80109ac <__retarget_lock_release_recursive>
 8010576:	bf00      	nop
 8010578:	20005721 	.word	0x20005721

0801057c <__sinit>:
 801057c:	b510      	push	{r4, lr}
 801057e:	4604      	mov	r4, r0
 8010580:	f7ff fff0 	bl	8010564 <__sfp_lock_acquire>
 8010584:	6a23      	ldr	r3, [r4, #32]
 8010586:	b11b      	cbz	r3, 8010590 <__sinit+0x14>
 8010588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801058c:	f7ff bff0 	b.w	8010570 <__sfp_lock_release>
 8010590:	4b04      	ldr	r3, [pc, #16]	@ (80105a4 <__sinit+0x28>)
 8010592:	6223      	str	r3, [r4, #32]
 8010594:	4b04      	ldr	r3, [pc, #16]	@ (80105a8 <__sinit+0x2c>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d1f5      	bne.n	8010588 <__sinit+0xc>
 801059c:	f7ff ffc4 	bl	8010528 <global_stdio_init.part.0>
 80105a0:	e7f2      	b.n	8010588 <__sinit+0xc>
 80105a2:	bf00      	nop
 80105a4:	080104e9 	.word	0x080104e9
 80105a8:	20005718 	.word	0x20005718

080105ac <_fwalk_sglue>:
 80105ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105b0:	4607      	mov	r7, r0
 80105b2:	4688      	mov	r8, r1
 80105b4:	4614      	mov	r4, r2
 80105b6:	2600      	movs	r6, #0
 80105b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80105bc:	f1b9 0901 	subs.w	r9, r9, #1
 80105c0:	d505      	bpl.n	80105ce <_fwalk_sglue+0x22>
 80105c2:	6824      	ldr	r4, [r4, #0]
 80105c4:	2c00      	cmp	r4, #0
 80105c6:	d1f7      	bne.n	80105b8 <_fwalk_sglue+0xc>
 80105c8:	4630      	mov	r0, r6
 80105ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105ce:	89ab      	ldrh	r3, [r5, #12]
 80105d0:	2b01      	cmp	r3, #1
 80105d2:	d907      	bls.n	80105e4 <_fwalk_sglue+0x38>
 80105d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105d8:	3301      	adds	r3, #1
 80105da:	d003      	beq.n	80105e4 <_fwalk_sglue+0x38>
 80105dc:	4629      	mov	r1, r5
 80105de:	4638      	mov	r0, r7
 80105e0:	47c0      	blx	r8
 80105e2:	4306      	orrs	r6, r0
 80105e4:	3568      	adds	r5, #104	@ 0x68
 80105e6:	e7e9      	b.n	80105bc <_fwalk_sglue+0x10>

080105e8 <sniprintf>:
 80105e8:	b40c      	push	{r2, r3}
 80105ea:	b530      	push	{r4, r5, lr}
 80105ec:	4b17      	ldr	r3, [pc, #92]	@ (801064c <sniprintf+0x64>)
 80105ee:	1e0c      	subs	r4, r1, #0
 80105f0:	681d      	ldr	r5, [r3, #0]
 80105f2:	b09d      	sub	sp, #116	@ 0x74
 80105f4:	da08      	bge.n	8010608 <sniprintf+0x20>
 80105f6:	238b      	movs	r3, #139	@ 0x8b
 80105f8:	602b      	str	r3, [r5, #0]
 80105fa:	f04f 30ff 	mov.w	r0, #4294967295
 80105fe:	b01d      	add	sp, #116	@ 0x74
 8010600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010604:	b002      	add	sp, #8
 8010606:	4770      	bx	lr
 8010608:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801060c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010610:	bf14      	ite	ne
 8010612:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010616:	4623      	moveq	r3, r4
 8010618:	9304      	str	r3, [sp, #16]
 801061a:	9307      	str	r3, [sp, #28]
 801061c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010620:	9002      	str	r0, [sp, #8]
 8010622:	9006      	str	r0, [sp, #24]
 8010624:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010628:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801062a:	ab21      	add	r3, sp, #132	@ 0x84
 801062c:	a902      	add	r1, sp, #8
 801062e:	4628      	mov	r0, r5
 8010630:	9301      	str	r3, [sp, #4]
 8010632:	f002 fc1b 	bl	8012e6c <_svfiprintf_r>
 8010636:	1c43      	adds	r3, r0, #1
 8010638:	bfbc      	itt	lt
 801063a:	238b      	movlt	r3, #139	@ 0x8b
 801063c:	602b      	strlt	r3, [r5, #0]
 801063e:	2c00      	cmp	r4, #0
 8010640:	d0dd      	beq.n	80105fe <sniprintf+0x16>
 8010642:	9b02      	ldr	r3, [sp, #8]
 8010644:	2200      	movs	r2, #0
 8010646:	701a      	strb	r2, [r3, #0]
 8010648:	e7d9      	b.n	80105fe <sniprintf+0x16>
 801064a:	bf00      	nop
 801064c:	200000c4 	.word	0x200000c4

08010650 <siprintf>:
 8010650:	b40e      	push	{r1, r2, r3}
 8010652:	b500      	push	{lr}
 8010654:	b09c      	sub	sp, #112	@ 0x70
 8010656:	ab1d      	add	r3, sp, #116	@ 0x74
 8010658:	9002      	str	r0, [sp, #8]
 801065a:	9006      	str	r0, [sp, #24]
 801065c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010660:	4809      	ldr	r0, [pc, #36]	@ (8010688 <siprintf+0x38>)
 8010662:	9107      	str	r1, [sp, #28]
 8010664:	9104      	str	r1, [sp, #16]
 8010666:	4909      	ldr	r1, [pc, #36]	@ (801068c <siprintf+0x3c>)
 8010668:	f853 2b04 	ldr.w	r2, [r3], #4
 801066c:	9105      	str	r1, [sp, #20]
 801066e:	6800      	ldr	r0, [r0, #0]
 8010670:	9301      	str	r3, [sp, #4]
 8010672:	a902      	add	r1, sp, #8
 8010674:	f002 fbfa 	bl	8012e6c <_svfiprintf_r>
 8010678:	9b02      	ldr	r3, [sp, #8]
 801067a:	2200      	movs	r2, #0
 801067c:	701a      	strb	r2, [r3, #0]
 801067e:	b01c      	add	sp, #112	@ 0x70
 8010680:	f85d eb04 	ldr.w	lr, [sp], #4
 8010684:	b003      	add	sp, #12
 8010686:	4770      	bx	lr
 8010688:	200000c4 	.word	0x200000c4
 801068c:	ffff0208 	.word	0xffff0208

08010690 <siscanf>:
 8010690:	b40e      	push	{r1, r2, r3}
 8010692:	b530      	push	{r4, r5, lr}
 8010694:	b09c      	sub	sp, #112	@ 0x70
 8010696:	ac1f      	add	r4, sp, #124	@ 0x7c
 8010698:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801069c:	f854 5b04 	ldr.w	r5, [r4], #4
 80106a0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80106a4:	9002      	str	r0, [sp, #8]
 80106a6:	9006      	str	r0, [sp, #24]
 80106a8:	f7ef fdf2 	bl	8000290 <strlen>
 80106ac:	4b0b      	ldr	r3, [pc, #44]	@ (80106dc <siscanf+0x4c>)
 80106ae:	9003      	str	r0, [sp, #12]
 80106b0:	9007      	str	r0, [sp, #28]
 80106b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80106b4:	480a      	ldr	r0, [pc, #40]	@ (80106e0 <siscanf+0x50>)
 80106b6:	9401      	str	r4, [sp, #4]
 80106b8:	2300      	movs	r3, #0
 80106ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80106bc:	9314      	str	r3, [sp, #80]	@ 0x50
 80106be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80106c2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80106c6:	462a      	mov	r2, r5
 80106c8:	4623      	mov	r3, r4
 80106ca:	a902      	add	r1, sp, #8
 80106cc:	6800      	ldr	r0, [r0, #0]
 80106ce:	f002 fd21 	bl	8013114 <__ssvfiscanf_r>
 80106d2:	b01c      	add	sp, #112	@ 0x70
 80106d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106d8:	b003      	add	sp, #12
 80106da:	4770      	bx	lr
 80106dc:	08010707 	.word	0x08010707
 80106e0:	200000c4 	.word	0x200000c4

080106e4 <__sread>:
 80106e4:	b510      	push	{r4, lr}
 80106e6:	460c      	mov	r4, r1
 80106e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ec:	f000 f8fe 	bl	80108ec <_read_r>
 80106f0:	2800      	cmp	r0, #0
 80106f2:	bfab      	itete	ge
 80106f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80106f6:	89a3      	ldrhlt	r3, [r4, #12]
 80106f8:	181b      	addge	r3, r3, r0
 80106fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80106fe:	bfac      	ite	ge
 8010700:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010702:	81a3      	strhlt	r3, [r4, #12]
 8010704:	bd10      	pop	{r4, pc}

08010706 <__seofread>:
 8010706:	2000      	movs	r0, #0
 8010708:	4770      	bx	lr

0801070a <__swrite>:
 801070a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801070e:	461f      	mov	r7, r3
 8010710:	898b      	ldrh	r3, [r1, #12]
 8010712:	05db      	lsls	r3, r3, #23
 8010714:	4605      	mov	r5, r0
 8010716:	460c      	mov	r4, r1
 8010718:	4616      	mov	r6, r2
 801071a:	d505      	bpl.n	8010728 <__swrite+0x1e>
 801071c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010720:	2302      	movs	r3, #2
 8010722:	2200      	movs	r2, #0
 8010724:	f000 f8d0 	bl	80108c8 <_lseek_r>
 8010728:	89a3      	ldrh	r3, [r4, #12]
 801072a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801072e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010732:	81a3      	strh	r3, [r4, #12]
 8010734:	4632      	mov	r2, r6
 8010736:	463b      	mov	r3, r7
 8010738:	4628      	mov	r0, r5
 801073a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801073e:	f000 b8f7 	b.w	8010930 <_write_r>

08010742 <__sseek>:
 8010742:	b510      	push	{r4, lr}
 8010744:	460c      	mov	r4, r1
 8010746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801074a:	f000 f8bd 	bl	80108c8 <_lseek_r>
 801074e:	1c43      	adds	r3, r0, #1
 8010750:	89a3      	ldrh	r3, [r4, #12]
 8010752:	bf15      	itete	ne
 8010754:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010756:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801075a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801075e:	81a3      	strheq	r3, [r4, #12]
 8010760:	bf18      	it	ne
 8010762:	81a3      	strhne	r3, [r4, #12]
 8010764:	bd10      	pop	{r4, pc}

08010766 <__sclose>:
 8010766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801076a:	f000 b89d 	b.w	80108a8 <_close_r>

0801076e <memset>:
 801076e:	4402      	add	r2, r0
 8010770:	4603      	mov	r3, r0
 8010772:	4293      	cmp	r3, r2
 8010774:	d100      	bne.n	8010778 <memset+0xa>
 8010776:	4770      	bx	lr
 8010778:	f803 1b01 	strb.w	r1, [r3], #1
 801077c:	e7f9      	b.n	8010772 <memset+0x4>

0801077e <strcat>:
 801077e:	b510      	push	{r4, lr}
 8010780:	4602      	mov	r2, r0
 8010782:	7814      	ldrb	r4, [r2, #0]
 8010784:	4613      	mov	r3, r2
 8010786:	3201      	adds	r2, #1
 8010788:	2c00      	cmp	r4, #0
 801078a:	d1fa      	bne.n	8010782 <strcat+0x4>
 801078c:	3b01      	subs	r3, #1
 801078e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010796:	2a00      	cmp	r2, #0
 8010798:	d1f9      	bne.n	801078e <strcat+0x10>
 801079a:	bd10      	pop	{r4, pc}

0801079c <strncmp>:
 801079c:	b510      	push	{r4, lr}
 801079e:	b16a      	cbz	r2, 80107bc <strncmp+0x20>
 80107a0:	3901      	subs	r1, #1
 80107a2:	1884      	adds	r4, r0, r2
 80107a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d103      	bne.n	80107b8 <strncmp+0x1c>
 80107b0:	42a0      	cmp	r0, r4
 80107b2:	d001      	beq.n	80107b8 <strncmp+0x1c>
 80107b4:	2a00      	cmp	r2, #0
 80107b6:	d1f5      	bne.n	80107a4 <strncmp+0x8>
 80107b8:	1ad0      	subs	r0, r2, r3
 80107ba:	bd10      	pop	{r4, pc}
 80107bc:	4610      	mov	r0, r2
 80107be:	e7fc      	b.n	80107ba <strncmp+0x1e>

080107c0 <strncpy>:
 80107c0:	b510      	push	{r4, lr}
 80107c2:	3901      	subs	r1, #1
 80107c4:	4603      	mov	r3, r0
 80107c6:	b132      	cbz	r2, 80107d6 <strncpy+0x16>
 80107c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80107cc:	f803 4b01 	strb.w	r4, [r3], #1
 80107d0:	3a01      	subs	r2, #1
 80107d2:	2c00      	cmp	r4, #0
 80107d4:	d1f7      	bne.n	80107c6 <strncpy+0x6>
 80107d6:	441a      	add	r2, r3
 80107d8:	2100      	movs	r1, #0
 80107da:	4293      	cmp	r3, r2
 80107dc:	d100      	bne.n	80107e0 <strncpy+0x20>
 80107de:	bd10      	pop	{r4, pc}
 80107e0:	f803 1b01 	strb.w	r1, [r3], #1
 80107e4:	e7f9      	b.n	80107da <strncpy+0x1a>
	...

080107e8 <strtok>:
 80107e8:	4b16      	ldr	r3, [pc, #88]	@ (8010844 <strtok+0x5c>)
 80107ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107ee:	681f      	ldr	r7, [r3, #0]
 80107f0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80107f2:	4605      	mov	r5, r0
 80107f4:	460e      	mov	r6, r1
 80107f6:	b9ec      	cbnz	r4, 8010834 <strtok+0x4c>
 80107f8:	2050      	movs	r0, #80	@ 0x50
 80107fa:	f7fe fec7 	bl	800f58c <malloc>
 80107fe:	4602      	mov	r2, r0
 8010800:	6478      	str	r0, [r7, #68]	@ 0x44
 8010802:	b920      	cbnz	r0, 801080e <strtok+0x26>
 8010804:	4b10      	ldr	r3, [pc, #64]	@ (8010848 <strtok+0x60>)
 8010806:	4811      	ldr	r0, [pc, #68]	@ (801084c <strtok+0x64>)
 8010808:	215b      	movs	r1, #91	@ 0x5b
 801080a:	f000 f8e5 	bl	80109d8 <__assert_func>
 801080e:	e9c0 4400 	strd	r4, r4, [r0]
 8010812:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010816:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801081a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801081e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8010822:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8010826:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801082a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801082e:	6184      	str	r4, [r0, #24]
 8010830:	7704      	strb	r4, [r0, #28]
 8010832:	6244      	str	r4, [r0, #36]	@ 0x24
 8010834:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010836:	4631      	mov	r1, r6
 8010838:	4628      	mov	r0, r5
 801083a:	2301      	movs	r3, #1
 801083c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010840:	f000 b806 	b.w	8010850 <__strtok_r>
 8010844:	200000c4 	.word	0x200000c4
 8010848:	08015a6c 	.word	0x08015a6c
 801084c:	08015a83 	.word	0x08015a83

08010850 <__strtok_r>:
 8010850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010852:	4604      	mov	r4, r0
 8010854:	b908      	cbnz	r0, 801085a <__strtok_r+0xa>
 8010856:	6814      	ldr	r4, [r2, #0]
 8010858:	b144      	cbz	r4, 801086c <__strtok_r+0x1c>
 801085a:	4620      	mov	r0, r4
 801085c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010860:	460f      	mov	r7, r1
 8010862:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010866:	b91e      	cbnz	r6, 8010870 <__strtok_r+0x20>
 8010868:	b965      	cbnz	r5, 8010884 <__strtok_r+0x34>
 801086a:	6015      	str	r5, [r2, #0]
 801086c:	2000      	movs	r0, #0
 801086e:	e005      	b.n	801087c <__strtok_r+0x2c>
 8010870:	42b5      	cmp	r5, r6
 8010872:	d1f6      	bne.n	8010862 <__strtok_r+0x12>
 8010874:	2b00      	cmp	r3, #0
 8010876:	d1f0      	bne.n	801085a <__strtok_r+0xa>
 8010878:	6014      	str	r4, [r2, #0]
 801087a:	7003      	strb	r3, [r0, #0]
 801087c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801087e:	461c      	mov	r4, r3
 8010880:	e00c      	b.n	801089c <__strtok_r+0x4c>
 8010882:	b915      	cbnz	r5, 801088a <__strtok_r+0x3a>
 8010884:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010888:	460e      	mov	r6, r1
 801088a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801088e:	42ab      	cmp	r3, r5
 8010890:	d1f7      	bne.n	8010882 <__strtok_r+0x32>
 8010892:	2b00      	cmp	r3, #0
 8010894:	d0f3      	beq.n	801087e <__strtok_r+0x2e>
 8010896:	2300      	movs	r3, #0
 8010898:	f804 3c01 	strb.w	r3, [r4, #-1]
 801089c:	6014      	str	r4, [r2, #0]
 801089e:	e7ed      	b.n	801087c <__strtok_r+0x2c>

080108a0 <_localeconv_r>:
 80108a0:	4800      	ldr	r0, [pc, #0]	@ (80108a4 <_localeconv_r+0x4>)
 80108a2:	4770      	bx	lr
 80108a4:	20000204 	.word	0x20000204

080108a8 <_close_r>:
 80108a8:	b538      	push	{r3, r4, r5, lr}
 80108aa:	4d06      	ldr	r5, [pc, #24]	@ (80108c4 <_close_r+0x1c>)
 80108ac:	2300      	movs	r3, #0
 80108ae:	4604      	mov	r4, r0
 80108b0:	4608      	mov	r0, r1
 80108b2:	602b      	str	r3, [r5, #0]
 80108b4:	f7f4 fba4 	bl	8005000 <_close>
 80108b8:	1c43      	adds	r3, r0, #1
 80108ba:	d102      	bne.n	80108c2 <_close_r+0x1a>
 80108bc:	682b      	ldr	r3, [r5, #0]
 80108be:	b103      	cbz	r3, 80108c2 <_close_r+0x1a>
 80108c0:	6023      	str	r3, [r4, #0]
 80108c2:	bd38      	pop	{r3, r4, r5, pc}
 80108c4:	2000571c 	.word	0x2000571c

080108c8 <_lseek_r>:
 80108c8:	b538      	push	{r3, r4, r5, lr}
 80108ca:	4d07      	ldr	r5, [pc, #28]	@ (80108e8 <_lseek_r+0x20>)
 80108cc:	4604      	mov	r4, r0
 80108ce:	4608      	mov	r0, r1
 80108d0:	4611      	mov	r1, r2
 80108d2:	2200      	movs	r2, #0
 80108d4:	602a      	str	r2, [r5, #0]
 80108d6:	461a      	mov	r2, r3
 80108d8:	f7f4 fbb9 	bl	800504e <_lseek>
 80108dc:	1c43      	adds	r3, r0, #1
 80108de:	d102      	bne.n	80108e6 <_lseek_r+0x1e>
 80108e0:	682b      	ldr	r3, [r5, #0]
 80108e2:	b103      	cbz	r3, 80108e6 <_lseek_r+0x1e>
 80108e4:	6023      	str	r3, [r4, #0]
 80108e6:	bd38      	pop	{r3, r4, r5, pc}
 80108e8:	2000571c 	.word	0x2000571c

080108ec <_read_r>:
 80108ec:	b538      	push	{r3, r4, r5, lr}
 80108ee:	4d07      	ldr	r5, [pc, #28]	@ (801090c <_read_r+0x20>)
 80108f0:	4604      	mov	r4, r0
 80108f2:	4608      	mov	r0, r1
 80108f4:	4611      	mov	r1, r2
 80108f6:	2200      	movs	r2, #0
 80108f8:	602a      	str	r2, [r5, #0]
 80108fa:	461a      	mov	r2, r3
 80108fc:	f7f4 fb63 	bl	8004fc6 <_read>
 8010900:	1c43      	adds	r3, r0, #1
 8010902:	d102      	bne.n	801090a <_read_r+0x1e>
 8010904:	682b      	ldr	r3, [r5, #0]
 8010906:	b103      	cbz	r3, 801090a <_read_r+0x1e>
 8010908:	6023      	str	r3, [r4, #0]
 801090a:	bd38      	pop	{r3, r4, r5, pc}
 801090c:	2000571c 	.word	0x2000571c

08010910 <_sbrk_r>:
 8010910:	b538      	push	{r3, r4, r5, lr}
 8010912:	4d06      	ldr	r5, [pc, #24]	@ (801092c <_sbrk_r+0x1c>)
 8010914:	2300      	movs	r3, #0
 8010916:	4604      	mov	r4, r0
 8010918:	4608      	mov	r0, r1
 801091a:	602b      	str	r3, [r5, #0]
 801091c:	f7f4 fba4 	bl	8005068 <_sbrk>
 8010920:	1c43      	adds	r3, r0, #1
 8010922:	d102      	bne.n	801092a <_sbrk_r+0x1a>
 8010924:	682b      	ldr	r3, [r5, #0]
 8010926:	b103      	cbz	r3, 801092a <_sbrk_r+0x1a>
 8010928:	6023      	str	r3, [r4, #0]
 801092a:	bd38      	pop	{r3, r4, r5, pc}
 801092c:	2000571c 	.word	0x2000571c

08010930 <_write_r>:
 8010930:	b538      	push	{r3, r4, r5, lr}
 8010932:	4d07      	ldr	r5, [pc, #28]	@ (8010950 <_write_r+0x20>)
 8010934:	4604      	mov	r4, r0
 8010936:	4608      	mov	r0, r1
 8010938:	4611      	mov	r1, r2
 801093a:	2200      	movs	r2, #0
 801093c:	602a      	str	r2, [r5, #0]
 801093e:	461a      	mov	r2, r3
 8010940:	f7f4 ff1e 	bl	8005780 <_write>
 8010944:	1c43      	adds	r3, r0, #1
 8010946:	d102      	bne.n	801094e <_write_r+0x1e>
 8010948:	682b      	ldr	r3, [r5, #0]
 801094a:	b103      	cbz	r3, 801094e <_write_r+0x1e>
 801094c:	6023      	str	r3, [r4, #0]
 801094e:	bd38      	pop	{r3, r4, r5, pc}
 8010950:	2000571c 	.word	0x2000571c

08010954 <__errno>:
 8010954:	4b01      	ldr	r3, [pc, #4]	@ (801095c <__errno+0x8>)
 8010956:	6818      	ldr	r0, [r3, #0]
 8010958:	4770      	bx	lr
 801095a:	bf00      	nop
 801095c:	200000c4 	.word	0x200000c4

08010960 <__libc_init_array>:
 8010960:	b570      	push	{r4, r5, r6, lr}
 8010962:	4d0d      	ldr	r5, [pc, #52]	@ (8010998 <__libc_init_array+0x38>)
 8010964:	4c0d      	ldr	r4, [pc, #52]	@ (801099c <__libc_init_array+0x3c>)
 8010966:	1b64      	subs	r4, r4, r5
 8010968:	10a4      	asrs	r4, r4, #2
 801096a:	2600      	movs	r6, #0
 801096c:	42a6      	cmp	r6, r4
 801096e:	d109      	bne.n	8010984 <__libc_init_array+0x24>
 8010970:	4d0b      	ldr	r5, [pc, #44]	@ (80109a0 <__libc_init_array+0x40>)
 8010972:	4c0c      	ldr	r4, [pc, #48]	@ (80109a4 <__libc_init_array+0x44>)
 8010974:	f004 fe24 	bl	80155c0 <_init>
 8010978:	1b64      	subs	r4, r4, r5
 801097a:	10a4      	asrs	r4, r4, #2
 801097c:	2600      	movs	r6, #0
 801097e:	42a6      	cmp	r6, r4
 8010980:	d105      	bne.n	801098e <__libc_init_array+0x2e>
 8010982:	bd70      	pop	{r4, r5, r6, pc}
 8010984:	f855 3b04 	ldr.w	r3, [r5], #4
 8010988:	4798      	blx	r3
 801098a:	3601      	adds	r6, #1
 801098c:	e7ee      	b.n	801096c <__libc_init_array+0xc>
 801098e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010992:	4798      	blx	r3
 8010994:	3601      	adds	r6, #1
 8010996:	e7f2      	b.n	801097e <__libc_init_array+0x1e>
 8010998:	08015f10 	.word	0x08015f10
 801099c:	08015f10 	.word	0x08015f10
 80109a0:	08015f10 	.word	0x08015f10
 80109a4:	08015f14 	.word	0x08015f14

080109a8 <__retarget_lock_init_recursive>:
 80109a8:	4770      	bx	lr

080109aa <__retarget_lock_acquire_recursive>:
 80109aa:	4770      	bx	lr

080109ac <__retarget_lock_release_recursive>:
 80109ac:	4770      	bx	lr

080109ae <memcpy>:
 80109ae:	440a      	add	r2, r1
 80109b0:	4291      	cmp	r1, r2
 80109b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80109b6:	d100      	bne.n	80109ba <memcpy+0xc>
 80109b8:	4770      	bx	lr
 80109ba:	b510      	push	{r4, lr}
 80109bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109c4:	4291      	cmp	r1, r2
 80109c6:	d1f9      	bne.n	80109bc <memcpy+0xe>
 80109c8:	bd10      	pop	{r4, pc}
	...

080109cc <nanf>:
 80109cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80109d4 <nanf+0x8>
 80109d0:	4770      	bx	lr
 80109d2:	bf00      	nop
 80109d4:	7fc00000 	.word	0x7fc00000

080109d8 <__assert_func>:
 80109d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109da:	4614      	mov	r4, r2
 80109dc:	461a      	mov	r2, r3
 80109de:	4b09      	ldr	r3, [pc, #36]	@ (8010a04 <__assert_func+0x2c>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	4605      	mov	r5, r0
 80109e4:	68d8      	ldr	r0, [r3, #12]
 80109e6:	b954      	cbnz	r4, 80109fe <__assert_func+0x26>
 80109e8:	4b07      	ldr	r3, [pc, #28]	@ (8010a08 <__assert_func+0x30>)
 80109ea:	461c      	mov	r4, r3
 80109ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80109f0:	9100      	str	r1, [sp, #0]
 80109f2:	462b      	mov	r3, r5
 80109f4:	4905      	ldr	r1, [pc, #20]	@ (8010a0c <__assert_func+0x34>)
 80109f6:	f002 fefb 	bl	80137f0 <fiprintf>
 80109fa:	f002 ffa1 	bl	8013940 <abort>
 80109fe:	4b04      	ldr	r3, [pc, #16]	@ (8010a10 <__assert_func+0x38>)
 8010a00:	e7f4      	b.n	80109ec <__assert_func+0x14>
 8010a02:	bf00      	nop
 8010a04:	200000c4 	.word	0x200000c4
 8010a08:	08015b18 	.word	0x08015b18
 8010a0c:	08015aea 	.word	0x08015aea
 8010a10:	08015add 	.word	0x08015add

08010a14 <quorem>:
 8010a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a18:	6903      	ldr	r3, [r0, #16]
 8010a1a:	690c      	ldr	r4, [r1, #16]
 8010a1c:	42a3      	cmp	r3, r4
 8010a1e:	4607      	mov	r7, r0
 8010a20:	db7e      	blt.n	8010b20 <quorem+0x10c>
 8010a22:	3c01      	subs	r4, #1
 8010a24:	f101 0814 	add.w	r8, r1, #20
 8010a28:	00a3      	lsls	r3, r4, #2
 8010a2a:	f100 0514 	add.w	r5, r0, #20
 8010a2e:	9300      	str	r3, [sp, #0]
 8010a30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a34:	9301      	str	r3, [sp, #4]
 8010a36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010a3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a3e:	3301      	adds	r3, #1
 8010a40:	429a      	cmp	r2, r3
 8010a42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010a46:	fbb2 f6f3 	udiv	r6, r2, r3
 8010a4a:	d32e      	bcc.n	8010aaa <quorem+0x96>
 8010a4c:	f04f 0a00 	mov.w	sl, #0
 8010a50:	46c4      	mov	ip, r8
 8010a52:	46ae      	mov	lr, r5
 8010a54:	46d3      	mov	fp, sl
 8010a56:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010a5a:	b298      	uxth	r0, r3
 8010a5c:	fb06 a000 	mla	r0, r6, r0, sl
 8010a60:	0c02      	lsrs	r2, r0, #16
 8010a62:	0c1b      	lsrs	r3, r3, #16
 8010a64:	fb06 2303 	mla	r3, r6, r3, r2
 8010a68:	f8de 2000 	ldr.w	r2, [lr]
 8010a6c:	b280      	uxth	r0, r0
 8010a6e:	b292      	uxth	r2, r2
 8010a70:	1a12      	subs	r2, r2, r0
 8010a72:	445a      	add	r2, fp
 8010a74:	f8de 0000 	ldr.w	r0, [lr]
 8010a78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010a82:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010a86:	b292      	uxth	r2, r2
 8010a88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010a8c:	45e1      	cmp	r9, ip
 8010a8e:	f84e 2b04 	str.w	r2, [lr], #4
 8010a92:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010a96:	d2de      	bcs.n	8010a56 <quorem+0x42>
 8010a98:	9b00      	ldr	r3, [sp, #0]
 8010a9a:	58eb      	ldr	r3, [r5, r3]
 8010a9c:	b92b      	cbnz	r3, 8010aaa <quorem+0x96>
 8010a9e:	9b01      	ldr	r3, [sp, #4]
 8010aa0:	3b04      	subs	r3, #4
 8010aa2:	429d      	cmp	r5, r3
 8010aa4:	461a      	mov	r2, r3
 8010aa6:	d32f      	bcc.n	8010b08 <quorem+0xf4>
 8010aa8:	613c      	str	r4, [r7, #16]
 8010aaa:	4638      	mov	r0, r7
 8010aac:	f001 f90e 	bl	8011ccc <__mcmp>
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	db25      	blt.n	8010b00 <quorem+0xec>
 8010ab4:	4629      	mov	r1, r5
 8010ab6:	2000      	movs	r0, #0
 8010ab8:	f858 2b04 	ldr.w	r2, [r8], #4
 8010abc:	f8d1 c000 	ldr.w	ip, [r1]
 8010ac0:	fa1f fe82 	uxth.w	lr, r2
 8010ac4:	fa1f f38c 	uxth.w	r3, ip
 8010ac8:	eba3 030e 	sub.w	r3, r3, lr
 8010acc:	4403      	add	r3, r0
 8010ace:	0c12      	lsrs	r2, r2, #16
 8010ad0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010ad4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ade:	45c1      	cmp	r9, r8
 8010ae0:	f841 3b04 	str.w	r3, [r1], #4
 8010ae4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010ae8:	d2e6      	bcs.n	8010ab8 <quorem+0xa4>
 8010aea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010aee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010af2:	b922      	cbnz	r2, 8010afe <quorem+0xea>
 8010af4:	3b04      	subs	r3, #4
 8010af6:	429d      	cmp	r5, r3
 8010af8:	461a      	mov	r2, r3
 8010afa:	d30b      	bcc.n	8010b14 <quorem+0x100>
 8010afc:	613c      	str	r4, [r7, #16]
 8010afe:	3601      	adds	r6, #1
 8010b00:	4630      	mov	r0, r6
 8010b02:	b003      	add	sp, #12
 8010b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b08:	6812      	ldr	r2, [r2, #0]
 8010b0a:	3b04      	subs	r3, #4
 8010b0c:	2a00      	cmp	r2, #0
 8010b0e:	d1cb      	bne.n	8010aa8 <quorem+0x94>
 8010b10:	3c01      	subs	r4, #1
 8010b12:	e7c6      	b.n	8010aa2 <quorem+0x8e>
 8010b14:	6812      	ldr	r2, [r2, #0]
 8010b16:	3b04      	subs	r3, #4
 8010b18:	2a00      	cmp	r2, #0
 8010b1a:	d1ef      	bne.n	8010afc <quorem+0xe8>
 8010b1c:	3c01      	subs	r4, #1
 8010b1e:	e7ea      	b.n	8010af6 <quorem+0xe2>
 8010b20:	2000      	movs	r0, #0
 8010b22:	e7ee      	b.n	8010b02 <quorem+0xee>
 8010b24:	0000      	movs	r0, r0
	...

08010b28 <_dtoa_r>:
 8010b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b2c:	69c7      	ldr	r7, [r0, #28]
 8010b2e:	b099      	sub	sp, #100	@ 0x64
 8010b30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010b34:	ec55 4b10 	vmov	r4, r5, d0
 8010b38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010b3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8010b3c:	4683      	mov	fp, r0
 8010b3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010b40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010b42:	b97f      	cbnz	r7, 8010b64 <_dtoa_r+0x3c>
 8010b44:	2010      	movs	r0, #16
 8010b46:	f7fe fd21 	bl	800f58c <malloc>
 8010b4a:	4602      	mov	r2, r0
 8010b4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010b50:	b920      	cbnz	r0, 8010b5c <_dtoa_r+0x34>
 8010b52:	4ba7      	ldr	r3, [pc, #668]	@ (8010df0 <_dtoa_r+0x2c8>)
 8010b54:	21ef      	movs	r1, #239	@ 0xef
 8010b56:	48a7      	ldr	r0, [pc, #668]	@ (8010df4 <_dtoa_r+0x2cc>)
 8010b58:	f7ff ff3e 	bl	80109d8 <__assert_func>
 8010b5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010b60:	6007      	str	r7, [r0, #0]
 8010b62:	60c7      	str	r7, [r0, #12]
 8010b64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010b68:	6819      	ldr	r1, [r3, #0]
 8010b6a:	b159      	cbz	r1, 8010b84 <_dtoa_r+0x5c>
 8010b6c:	685a      	ldr	r2, [r3, #4]
 8010b6e:	604a      	str	r2, [r1, #4]
 8010b70:	2301      	movs	r3, #1
 8010b72:	4093      	lsls	r3, r2
 8010b74:	608b      	str	r3, [r1, #8]
 8010b76:	4658      	mov	r0, fp
 8010b78:	f000 fe24 	bl	80117c4 <_Bfree>
 8010b7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010b80:	2200      	movs	r2, #0
 8010b82:	601a      	str	r2, [r3, #0]
 8010b84:	1e2b      	subs	r3, r5, #0
 8010b86:	bfb9      	ittee	lt
 8010b88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010b8c:	9303      	strlt	r3, [sp, #12]
 8010b8e:	2300      	movge	r3, #0
 8010b90:	6033      	strge	r3, [r6, #0]
 8010b92:	9f03      	ldr	r7, [sp, #12]
 8010b94:	4b98      	ldr	r3, [pc, #608]	@ (8010df8 <_dtoa_r+0x2d0>)
 8010b96:	bfbc      	itt	lt
 8010b98:	2201      	movlt	r2, #1
 8010b9a:	6032      	strlt	r2, [r6, #0]
 8010b9c:	43bb      	bics	r3, r7
 8010b9e:	d112      	bne.n	8010bc6 <_dtoa_r+0x9e>
 8010ba0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010ba2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010ba6:	6013      	str	r3, [r2, #0]
 8010ba8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010bac:	4323      	orrs	r3, r4
 8010bae:	f000 854d 	beq.w	801164c <_dtoa_r+0xb24>
 8010bb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010bb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010e0c <_dtoa_r+0x2e4>
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	f000 854f 	beq.w	801165c <_dtoa_r+0xb34>
 8010bbe:	f10a 0303 	add.w	r3, sl, #3
 8010bc2:	f000 bd49 	b.w	8011658 <_dtoa_r+0xb30>
 8010bc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	ec51 0b17 	vmov	r0, r1, d7
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010bd6:	f7ef ff87 	bl	8000ae8 <__aeabi_dcmpeq>
 8010bda:	4680      	mov	r8, r0
 8010bdc:	b158      	cbz	r0, 8010bf6 <_dtoa_r+0xce>
 8010bde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010be0:	2301      	movs	r3, #1
 8010be2:	6013      	str	r3, [r2, #0]
 8010be4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010be6:	b113      	cbz	r3, 8010bee <_dtoa_r+0xc6>
 8010be8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010bea:	4b84      	ldr	r3, [pc, #528]	@ (8010dfc <_dtoa_r+0x2d4>)
 8010bec:	6013      	str	r3, [r2, #0]
 8010bee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010e10 <_dtoa_r+0x2e8>
 8010bf2:	f000 bd33 	b.w	801165c <_dtoa_r+0xb34>
 8010bf6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010bfa:	aa16      	add	r2, sp, #88	@ 0x58
 8010bfc:	a917      	add	r1, sp, #92	@ 0x5c
 8010bfe:	4658      	mov	r0, fp
 8010c00:	f001 f984 	bl	8011f0c <__d2b>
 8010c04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010c08:	4681      	mov	r9, r0
 8010c0a:	2e00      	cmp	r6, #0
 8010c0c:	d077      	beq.n	8010cfe <_dtoa_r+0x1d6>
 8010c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010c10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010c1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010c20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010c24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010c28:	4619      	mov	r1, r3
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	4b74      	ldr	r3, [pc, #464]	@ (8010e00 <_dtoa_r+0x2d8>)
 8010c2e:	f7ef fb3b 	bl	80002a8 <__aeabi_dsub>
 8010c32:	a369      	add	r3, pc, #420	@ (adr r3, 8010dd8 <_dtoa_r+0x2b0>)
 8010c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c38:	f7ef fcee 	bl	8000618 <__aeabi_dmul>
 8010c3c:	a368      	add	r3, pc, #416	@ (adr r3, 8010de0 <_dtoa_r+0x2b8>)
 8010c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c42:	f7ef fb33 	bl	80002ac <__adddf3>
 8010c46:	4604      	mov	r4, r0
 8010c48:	4630      	mov	r0, r6
 8010c4a:	460d      	mov	r5, r1
 8010c4c:	f7ef fc7a 	bl	8000544 <__aeabi_i2d>
 8010c50:	a365      	add	r3, pc, #404	@ (adr r3, 8010de8 <_dtoa_r+0x2c0>)
 8010c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c56:	f7ef fcdf 	bl	8000618 <__aeabi_dmul>
 8010c5a:	4602      	mov	r2, r0
 8010c5c:	460b      	mov	r3, r1
 8010c5e:	4620      	mov	r0, r4
 8010c60:	4629      	mov	r1, r5
 8010c62:	f7ef fb23 	bl	80002ac <__adddf3>
 8010c66:	4604      	mov	r4, r0
 8010c68:	460d      	mov	r5, r1
 8010c6a:	f7ef ff85 	bl	8000b78 <__aeabi_d2iz>
 8010c6e:	2200      	movs	r2, #0
 8010c70:	4607      	mov	r7, r0
 8010c72:	2300      	movs	r3, #0
 8010c74:	4620      	mov	r0, r4
 8010c76:	4629      	mov	r1, r5
 8010c78:	f7ef ff40 	bl	8000afc <__aeabi_dcmplt>
 8010c7c:	b140      	cbz	r0, 8010c90 <_dtoa_r+0x168>
 8010c7e:	4638      	mov	r0, r7
 8010c80:	f7ef fc60 	bl	8000544 <__aeabi_i2d>
 8010c84:	4622      	mov	r2, r4
 8010c86:	462b      	mov	r3, r5
 8010c88:	f7ef ff2e 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c8c:	b900      	cbnz	r0, 8010c90 <_dtoa_r+0x168>
 8010c8e:	3f01      	subs	r7, #1
 8010c90:	2f16      	cmp	r7, #22
 8010c92:	d851      	bhi.n	8010d38 <_dtoa_r+0x210>
 8010c94:	4b5b      	ldr	r3, [pc, #364]	@ (8010e04 <_dtoa_r+0x2dc>)
 8010c96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010ca2:	f7ef ff2b 	bl	8000afc <__aeabi_dcmplt>
 8010ca6:	2800      	cmp	r0, #0
 8010ca8:	d048      	beq.n	8010d3c <_dtoa_r+0x214>
 8010caa:	3f01      	subs	r7, #1
 8010cac:	2300      	movs	r3, #0
 8010cae:	9312      	str	r3, [sp, #72]	@ 0x48
 8010cb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010cb2:	1b9b      	subs	r3, r3, r6
 8010cb4:	1e5a      	subs	r2, r3, #1
 8010cb6:	bf44      	itt	mi
 8010cb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8010cbc:	2300      	movmi	r3, #0
 8010cbe:	9208      	str	r2, [sp, #32]
 8010cc0:	bf54      	ite	pl
 8010cc2:	f04f 0800 	movpl.w	r8, #0
 8010cc6:	9308      	strmi	r3, [sp, #32]
 8010cc8:	2f00      	cmp	r7, #0
 8010cca:	db39      	blt.n	8010d40 <_dtoa_r+0x218>
 8010ccc:	9b08      	ldr	r3, [sp, #32]
 8010cce:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010cd0:	443b      	add	r3, r7
 8010cd2:	9308      	str	r3, [sp, #32]
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cda:	2b09      	cmp	r3, #9
 8010cdc:	d864      	bhi.n	8010da8 <_dtoa_r+0x280>
 8010cde:	2b05      	cmp	r3, #5
 8010ce0:	bfc4      	itt	gt
 8010ce2:	3b04      	subgt	r3, #4
 8010ce4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ce8:	f1a3 0302 	sub.w	r3, r3, #2
 8010cec:	bfcc      	ite	gt
 8010cee:	2400      	movgt	r4, #0
 8010cf0:	2401      	movle	r4, #1
 8010cf2:	2b03      	cmp	r3, #3
 8010cf4:	d863      	bhi.n	8010dbe <_dtoa_r+0x296>
 8010cf6:	e8df f003 	tbb	[pc, r3]
 8010cfa:	372a      	.short	0x372a
 8010cfc:	5535      	.short	0x5535
 8010cfe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010d02:	441e      	add	r6, r3
 8010d04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010d08:	2b20      	cmp	r3, #32
 8010d0a:	bfc1      	itttt	gt
 8010d0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010d10:	409f      	lslgt	r7, r3
 8010d12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010d16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010d1a:	bfd6      	itet	le
 8010d1c:	f1c3 0320 	rsble	r3, r3, #32
 8010d20:	ea47 0003 	orrgt.w	r0, r7, r3
 8010d24:	fa04 f003 	lslle.w	r0, r4, r3
 8010d28:	f7ef fbfc 	bl	8000524 <__aeabi_ui2d>
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010d32:	3e01      	subs	r6, #1
 8010d34:	9214      	str	r2, [sp, #80]	@ 0x50
 8010d36:	e777      	b.n	8010c28 <_dtoa_r+0x100>
 8010d38:	2301      	movs	r3, #1
 8010d3a:	e7b8      	b.n	8010cae <_dtoa_r+0x186>
 8010d3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8010d3e:	e7b7      	b.n	8010cb0 <_dtoa_r+0x188>
 8010d40:	427b      	negs	r3, r7
 8010d42:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d44:	2300      	movs	r3, #0
 8010d46:	eba8 0807 	sub.w	r8, r8, r7
 8010d4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010d4c:	e7c4      	b.n	8010cd8 <_dtoa_r+0x1b0>
 8010d4e:	2300      	movs	r3, #0
 8010d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	dc35      	bgt.n	8010dc4 <_dtoa_r+0x29c>
 8010d58:	2301      	movs	r3, #1
 8010d5a:	9300      	str	r3, [sp, #0]
 8010d5c:	9307      	str	r3, [sp, #28]
 8010d5e:	461a      	mov	r2, r3
 8010d60:	920e      	str	r2, [sp, #56]	@ 0x38
 8010d62:	e00b      	b.n	8010d7c <_dtoa_r+0x254>
 8010d64:	2301      	movs	r3, #1
 8010d66:	e7f3      	b.n	8010d50 <_dtoa_r+0x228>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d6e:	18fb      	adds	r3, r7, r3
 8010d70:	9300      	str	r3, [sp, #0]
 8010d72:	3301      	adds	r3, #1
 8010d74:	2b01      	cmp	r3, #1
 8010d76:	9307      	str	r3, [sp, #28]
 8010d78:	bfb8      	it	lt
 8010d7a:	2301      	movlt	r3, #1
 8010d7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010d80:	2100      	movs	r1, #0
 8010d82:	2204      	movs	r2, #4
 8010d84:	f102 0514 	add.w	r5, r2, #20
 8010d88:	429d      	cmp	r5, r3
 8010d8a:	d91f      	bls.n	8010dcc <_dtoa_r+0x2a4>
 8010d8c:	6041      	str	r1, [r0, #4]
 8010d8e:	4658      	mov	r0, fp
 8010d90:	f000 fcd8 	bl	8011744 <_Balloc>
 8010d94:	4682      	mov	sl, r0
 8010d96:	2800      	cmp	r0, #0
 8010d98:	d13c      	bne.n	8010e14 <_dtoa_r+0x2ec>
 8010d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8010e08 <_dtoa_r+0x2e0>)
 8010d9c:	4602      	mov	r2, r0
 8010d9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010da2:	e6d8      	b.n	8010b56 <_dtoa_r+0x2e>
 8010da4:	2301      	movs	r3, #1
 8010da6:	e7e0      	b.n	8010d6a <_dtoa_r+0x242>
 8010da8:	2401      	movs	r4, #1
 8010daa:	2300      	movs	r3, #0
 8010dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010db0:	f04f 33ff 	mov.w	r3, #4294967295
 8010db4:	9300      	str	r3, [sp, #0]
 8010db6:	9307      	str	r3, [sp, #28]
 8010db8:	2200      	movs	r2, #0
 8010dba:	2312      	movs	r3, #18
 8010dbc:	e7d0      	b.n	8010d60 <_dtoa_r+0x238>
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010dc2:	e7f5      	b.n	8010db0 <_dtoa_r+0x288>
 8010dc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010dc6:	9300      	str	r3, [sp, #0]
 8010dc8:	9307      	str	r3, [sp, #28]
 8010dca:	e7d7      	b.n	8010d7c <_dtoa_r+0x254>
 8010dcc:	3101      	adds	r1, #1
 8010dce:	0052      	lsls	r2, r2, #1
 8010dd0:	e7d8      	b.n	8010d84 <_dtoa_r+0x25c>
 8010dd2:	bf00      	nop
 8010dd4:	f3af 8000 	nop.w
 8010dd8:	636f4361 	.word	0x636f4361
 8010ddc:	3fd287a7 	.word	0x3fd287a7
 8010de0:	8b60c8b3 	.word	0x8b60c8b3
 8010de4:	3fc68a28 	.word	0x3fc68a28
 8010de8:	509f79fb 	.word	0x509f79fb
 8010dec:	3fd34413 	.word	0x3fd34413
 8010df0:	08015a6c 	.word	0x08015a6c
 8010df4:	08015b26 	.word	0x08015b26
 8010df8:	7ff00000 	.word	0x7ff00000
 8010dfc:	08015e69 	.word	0x08015e69
 8010e00:	3ff80000 	.word	0x3ff80000
 8010e04:	08015c20 	.word	0x08015c20
 8010e08:	08015b7e 	.word	0x08015b7e
 8010e0c:	08015b22 	.word	0x08015b22
 8010e10:	08015e68 	.word	0x08015e68
 8010e14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010e18:	6018      	str	r0, [r3, #0]
 8010e1a:	9b07      	ldr	r3, [sp, #28]
 8010e1c:	2b0e      	cmp	r3, #14
 8010e1e:	f200 80a4 	bhi.w	8010f6a <_dtoa_r+0x442>
 8010e22:	2c00      	cmp	r4, #0
 8010e24:	f000 80a1 	beq.w	8010f6a <_dtoa_r+0x442>
 8010e28:	2f00      	cmp	r7, #0
 8010e2a:	dd33      	ble.n	8010e94 <_dtoa_r+0x36c>
 8010e2c:	4bad      	ldr	r3, [pc, #692]	@ (80110e4 <_dtoa_r+0x5bc>)
 8010e2e:	f007 020f 	and.w	r2, r7, #15
 8010e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e36:	ed93 7b00 	vldr	d7, [r3]
 8010e3a:	05f8      	lsls	r0, r7, #23
 8010e3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010e40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010e44:	d516      	bpl.n	8010e74 <_dtoa_r+0x34c>
 8010e46:	4ba8      	ldr	r3, [pc, #672]	@ (80110e8 <_dtoa_r+0x5c0>)
 8010e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010e50:	f7ef fd0c 	bl	800086c <__aeabi_ddiv>
 8010e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e58:	f004 040f 	and.w	r4, r4, #15
 8010e5c:	2603      	movs	r6, #3
 8010e5e:	4da2      	ldr	r5, [pc, #648]	@ (80110e8 <_dtoa_r+0x5c0>)
 8010e60:	b954      	cbnz	r4, 8010e78 <_dtoa_r+0x350>
 8010e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e6a:	f7ef fcff 	bl	800086c <__aeabi_ddiv>
 8010e6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e72:	e028      	b.n	8010ec6 <_dtoa_r+0x39e>
 8010e74:	2602      	movs	r6, #2
 8010e76:	e7f2      	b.n	8010e5e <_dtoa_r+0x336>
 8010e78:	07e1      	lsls	r1, r4, #31
 8010e7a:	d508      	bpl.n	8010e8e <_dtoa_r+0x366>
 8010e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010e84:	f7ef fbc8 	bl	8000618 <__aeabi_dmul>
 8010e88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010e8c:	3601      	adds	r6, #1
 8010e8e:	1064      	asrs	r4, r4, #1
 8010e90:	3508      	adds	r5, #8
 8010e92:	e7e5      	b.n	8010e60 <_dtoa_r+0x338>
 8010e94:	f000 80d2 	beq.w	801103c <_dtoa_r+0x514>
 8010e98:	427c      	negs	r4, r7
 8010e9a:	4b92      	ldr	r3, [pc, #584]	@ (80110e4 <_dtoa_r+0x5bc>)
 8010e9c:	4d92      	ldr	r5, [pc, #584]	@ (80110e8 <_dtoa_r+0x5c0>)
 8010e9e:	f004 020f 	and.w	r2, r4, #15
 8010ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010eae:	f7ef fbb3 	bl	8000618 <__aeabi_dmul>
 8010eb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010eb6:	1124      	asrs	r4, r4, #4
 8010eb8:	2300      	movs	r3, #0
 8010eba:	2602      	movs	r6, #2
 8010ebc:	2c00      	cmp	r4, #0
 8010ebe:	f040 80b2 	bne.w	8011026 <_dtoa_r+0x4fe>
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d1d3      	bne.n	8010e6e <_dtoa_r+0x346>
 8010ec6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010ec8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	f000 80b7 	beq.w	8011040 <_dtoa_r+0x518>
 8010ed2:	4b86      	ldr	r3, [pc, #536]	@ (80110ec <_dtoa_r+0x5c4>)
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	4629      	mov	r1, r5
 8010eda:	f7ef fe0f 	bl	8000afc <__aeabi_dcmplt>
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	f000 80ae 	beq.w	8011040 <_dtoa_r+0x518>
 8010ee4:	9b07      	ldr	r3, [sp, #28]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	f000 80aa 	beq.w	8011040 <_dtoa_r+0x518>
 8010eec:	9b00      	ldr	r3, [sp, #0]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	dd37      	ble.n	8010f62 <_dtoa_r+0x43a>
 8010ef2:	1e7b      	subs	r3, r7, #1
 8010ef4:	9304      	str	r3, [sp, #16]
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	4b7d      	ldr	r3, [pc, #500]	@ (80110f0 <_dtoa_r+0x5c8>)
 8010efa:	2200      	movs	r2, #0
 8010efc:	4629      	mov	r1, r5
 8010efe:	f7ef fb8b 	bl	8000618 <__aeabi_dmul>
 8010f02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f06:	9c00      	ldr	r4, [sp, #0]
 8010f08:	3601      	adds	r6, #1
 8010f0a:	4630      	mov	r0, r6
 8010f0c:	f7ef fb1a 	bl	8000544 <__aeabi_i2d>
 8010f10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010f14:	f7ef fb80 	bl	8000618 <__aeabi_dmul>
 8010f18:	4b76      	ldr	r3, [pc, #472]	@ (80110f4 <_dtoa_r+0x5cc>)
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f7ef f9c6 	bl	80002ac <__adddf3>
 8010f20:	4605      	mov	r5, r0
 8010f22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010f26:	2c00      	cmp	r4, #0
 8010f28:	f040 808d 	bne.w	8011046 <_dtoa_r+0x51e>
 8010f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f30:	4b71      	ldr	r3, [pc, #452]	@ (80110f8 <_dtoa_r+0x5d0>)
 8010f32:	2200      	movs	r2, #0
 8010f34:	f7ef f9b8 	bl	80002a8 <__aeabi_dsub>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	460b      	mov	r3, r1
 8010f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f40:	462a      	mov	r2, r5
 8010f42:	4633      	mov	r3, r6
 8010f44:	f7ef fdf8 	bl	8000b38 <__aeabi_dcmpgt>
 8010f48:	2800      	cmp	r0, #0
 8010f4a:	f040 828b 	bne.w	8011464 <_dtoa_r+0x93c>
 8010f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f52:	462a      	mov	r2, r5
 8010f54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010f58:	f7ef fdd0 	bl	8000afc <__aeabi_dcmplt>
 8010f5c:	2800      	cmp	r0, #0
 8010f5e:	f040 8128 	bne.w	80111b2 <_dtoa_r+0x68a>
 8010f62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010f66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010f6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f2c0 815a 	blt.w	8011226 <_dtoa_r+0x6fe>
 8010f72:	2f0e      	cmp	r7, #14
 8010f74:	f300 8157 	bgt.w	8011226 <_dtoa_r+0x6fe>
 8010f78:	4b5a      	ldr	r3, [pc, #360]	@ (80110e4 <_dtoa_r+0x5bc>)
 8010f7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010f7e:	ed93 7b00 	vldr	d7, [r3]
 8010f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	ed8d 7b00 	vstr	d7, [sp]
 8010f8a:	da03      	bge.n	8010f94 <_dtoa_r+0x46c>
 8010f8c:	9b07      	ldr	r3, [sp, #28]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	f340 8101 	ble.w	8011196 <_dtoa_r+0x66e>
 8010f94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010f98:	4656      	mov	r6, sl
 8010f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	4629      	mov	r1, r5
 8010fa2:	f7ef fc63 	bl	800086c <__aeabi_ddiv>
 8010fa6:	f7ef fde7 	bl	8000b78 <__aeabi_d2iz>
 8010faa:	4680      	mov	r8, r0
 8010fac:	f7ef faca 	bl	8000544 <__aeabi_i2d>
 8010fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fb4:	f7ef fb30 	bl	8000618 <__aeabi_dmul>
 8010fb8:	4602      	mov	r2, r0
 8010fba:	460b      	mov	r3, r1
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	4629      	mov	r1, r5
 8010fc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010fc4:	f7ef f970 	bl	80002a8 <__aeabi_dsub>
 8010fc8:	f806 4b01 	strb.w	r4, [r6], #1
 8010fcc:	9d07      	ldr	r5, [sp, #28]
 8010fce:	eba6 040a 	sub.w	r4, r6, sl
 8010fd2:	42a5      	cmp	r5, r4
 8010fd4:	4602      	mov	r2, r0
 8010fd6:	460b      	mov	r3, r1
 8010fd8:	f040 8117 	bne.w	801120a <_dtoa_r+0x6e2>
 8010fdc:	f7ef f966 	bl	80002ac <__adddf3>
 8010fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fe4:	4604      	mov	r4, r0
 8010fe6:	460d      	mov	r5, r1
 8010fe8:	f7ef fda6 	bl	8000b38 <__aeabi_dcmpgt>
 8010fec:	2800      	cmp	r0, #0
 8010fee:	f040 80f9 	bne.w	80111e4 <_dtoa_r+0x6bc>
 8010ff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ff6:	4620      	mov	r0, r4
 8010ff8:	4629      	mov	r1, r5
 8010ffa:	f7ef fd75 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ffe:	b118      	cbz	r0, 8011008 <_dtoa_r+0x4e0>
 8011000:	f018 0f01 	tst.w	r8, #1
 8011004:	f040 80ee 	bne.w	80111e4 <_dtoa_r+0x6bc>
 8011008:	4649      	mov	r1, r9
 801100a:	4658      	mov	r0, fp
 801100c:	f000 fbda 	bl	80117c4 <_Bfree>
 8011010:	2300      	movs	r3, #0
 8011012:	7033      	strb	r3, [r6, #0]
 8011014:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011016:	3701      	adds	r7, #1
 8011018:	601f      	str	r7, [r3, #0]
 801101a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801101c:	2b00      	cmp	r3, #0
 801101e:	f000 831d 	beq.w	801165c <_dtoa_r+0xb34>
 8011022:	601e      	str	r6, [r3, #0]
 8011024:	e31a      	b.n	801165c <_dtoa_r+0xb34>
 8011026:	07e2      	lsls	r2, r4, #31
 8011028:	d505      	bpl.n	8011036 <_dtoa_r+0x50e>
 801102a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801102e:	f7ef faf3 	bl	8000618 <__aeabi_dmul>
 8011032:	3601      	adds	r6, #1
 8011034:	2301      	movs	r3, #1
 8011036:	1064      	asrs	r4, r4, #1
 8011038:	3508      	adds	r5, #8
 801103a:	e73f      	b.n	8010ebc <_dtoa_r+0x394>
 801103c:	2602      	movs	r6, #2
 801103e:	e742      	b.n	8010ec6 <_dtoa_r+0x39e>
 8011040:	9c07      	ldr	r4, [sp, #28]
 8011042:	9704      	str	r7, [sp, #16]
 8011044:	e761      	b.n	8010f0a <_dtoa_r+0x3e2>
 8011046:	4b27      	ldr	r3, [pc, #156]	@ (80110e4 <_dtoa_r+0x5bc>)
 8011048:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801104a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801104e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011052:	4454      	add	r4, sl
 8011054:	2900      	cmp	r1, #0
 8011056:	d053      	beq.n	8011100 <_dtoa_r+0x5d8>
 8011058:	4928      	ldr	r1, [pc, #160]	@ (80110fc <_dtoa_r+0x5d4>)
 801105a:	2000      	movs	r0, #0
 801105c:	f7ef fc06 	bl	800086c <__aeabi_ddiv>
 8011060:	4633      	mov	r3, r6
 8011062:	462a      	mov	r2, r5
 8011064:	f7ef f920 	bl	80002a8 <__aeabi_dsub>
 8011068:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801106c:	4656      	mov	r6, sl
 801106e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011072:	f7ef fd81 	bl	8000b78 <__aeabi_d2iz>
 8011076:	4605      	mov	r5, r0
 8011078:	f7ef fa64 	bl	8000544 <__aeabi_i2d>
 801107c:	4602      	mov	r2, r0
 801107e:	460b      	mov	r3, r1
 8011080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011084:	f7ef f910 	bl	80002a8 <__aeabi_dsub>
 8011088:	3530      	adds	r5, #48	@ 0x30
 801108a:	4602      	mov	r2, r0
 801108c:	460b      	mov	r3, r1
 801108e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011092:	f806 5b01 	strb.w	r5, [r6], #1
 8011096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801109a:	f7ef fd2f 	bl	8000afc <__aeabi_dcmplt>
 801109e:	2800      	cmp	r0, #0
 80110a0:	d171      	bne.n	8011186 <_dtoa_r+0x65e>
 80110a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80110a6:	4911      	ldr	r1, [pc, #68]	@ (80110ec <_dtoa_r+0x5c4>)
 80110a8:	2000      	movs	r0, #0
 80110aa:	f7ef f8fd 	bl	80002a8 <__aeabi_dsub>
 80110ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80110b2:	f7ef fd23 	bl	8000afc <__aeabi_dcmplt>
 80110b6:	2800      	cmp	r0, #0
 80110b8:	f040 8095 	bne.w	80111e6 <_dtoa_r+0x6be>
 80110bc:	42a6      	cmp	r6, r4
 80110be:	f43f af50 	beq.w	8010f62 <_dtoa_r+0x43a>
 80110c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80110c6:	4b0a      	ldr	r3, [pc, #40]	@ (80110f0 <_dtoa_r+0x5c8>)
 80110c8:	2200      	movs	r2, #0
 80110ca:	f7ef faa5 	bl	8000618 <__aeabi_dmul>
 80110ce:	4b08      	ldr	r3, [pc, #32]	@ (80110f0 <_dtoa_r+0x5c8>)
 80110d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80110d4:	2200      	movs	r2, #0
 80110d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110da:	f7ef fa9d 	bl	8000618 <__aeabi_dmul>
 80110de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110e2:	e7c4      	b.n	801106e <_dtoa_r+0x546>
 80110e4:	08015c20 	.word	0x08015c20
 80110e8:	08015bf8 	.word	0x08015bf8
 80110ec:	3ff00000 	.word	0x3ff00000
 80110f0:	40240000 	.word	0x40240000
 80110f4:	401c0000 	.word	0x401c0000
 80110f8:	40140000 	.word	0x40140000
 80110fc:	3fe00000 	.word	0x3fe00000
 8011100:	4631      	mov	r1, r6
 8011102:	4628      	mov	r0, r5
 8011104:	f7ef fa88 	bl	8000618 <__aeabi_dmul>
 8011108:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801110c:	9415      	str	r4, [sp, #84]	@ 0x54
 801110e:	4656      	mov	r6, sl
 8011110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011114:	f7ef fd30 	bl	8000b78 <__aeabi_d2iz>
 8011118:	4605      	mov	r5, r0
 801111a:	f7ef fa13 	bl	8000544 <__aeabi_i2d>
 801111e:	4602      	mov	r2, r0
 8011120:	460b      	mov	r3, r1
 8011122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011126:	f7ef f8bf 	bl	80002a8 <__aeabi_dsub>
 801112a:	3530      	adds	r5, #48	@ 0x30
 801112c:	f806 5b01 	strb.w	r5, [r6], #1
 8011130:	4602      	mov	r2, r0
 8011132:	460b      	mov	r3, r1
 8011134:	42a6      	cmp	r6, r4
 8011136:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801113a:	f04f 0200 	mov.w	r2, #0
 801113e:	d124      	bne.n	801118a <_dtoa_r+0x662>
 8011140:	4bac      	ldr	r3, [pc, #688]	@ (80113f4 <_dtoa_r+0x8cc>)
 8011142:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011146:	f7ef f8b1 	bl	80002ac <__adddf3>
 801114a:	4602      	mov	r2, r0
 801114c:	460b      	mov	r3, r1
 801114e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011152:	f7ef fcf1 	bl	8000b38 <__aeabi_dcmpgt>
 8011156:	2800      	cmp	r0, #0
 8011158:	d145      	bne.n	80111e6 <_dtoa_r+0x6be>
 801115a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801115e:	49a5      	ldr	r1, [pc, #660]	@ (80113f4 <_dtoa_r+0x8cc>)
 8011160:	2000      	movs	r0, #0
 8011162:	f7ef f8a1 	bl	80002a8 <__aeabi_dsub>
 8011166:	4602      	mov	r2, r0
 8011168:	460b      	mov	r3, r1
 801116a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801116e:	f7ef fcc5 	bl	8000afc <__aeabi_dcmplt>
 8011172:	2800      	cmp	r0, #0
 8011174:	f43f aef5 	beq.w	8010f62 <_dtoa_r+0x43a>
 8011178:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801117a:	1e73      	subs	r3, r6, #1
 801117c:	9315      	str	r3, [sp, #84]	@ 0x54
 801117e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011182:	2b30      	cmp	r3, #48	@ 0x30
 8011184:	d0f8      	beq.n	8011178 <_dtoa_r+0x650>
 8011186:	9f04      	ldr	r7, [sp, #16]
 8011188:	e73e      	b.n	8011008 <_dtoa_r+0x4e0>
 801118a:	4b9b      	ldr	r3, [pc, #620]	@ (80113f8 <_dtoa_r+0x8d0>)
 801118c:	f7ef fa44 	bl	8000618 <__aeabi_dmul>
 8011190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011194:	e7bc      	b.n	8011110 <_dtoa_r+0x5e8>
 8011196:	d10c      	bne.n	80111b2 <_dtoa_r+0x68a>
 8011198:	4b98      	ldr	r3, [pc, #608]	@ (80113fc <_dtoa_r+0x8d4>)
 801119a:	2200      	movs	r2, #0
 801119c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80111a0:	f7ef fa3a 	bl	8000618 <__aeabi_dmul>
 80111a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80111a8:	f7ef fcbc 	bl	8000b24 <__aeabi_dcmpge>
 80111ac:	2800      	cmp	r0, #0
 80111ae:	f000 8157 	beq.w	8011460 <_dtoa_r+0x938>
 80111b2:	2400      	movs	r4, #0
 80111b4:	4625      	mov	r5, r4
 80111b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80111b8:	43db      	mvns	r3, r3
 80111ba:	9304      	str	r3, [sp, #16]
 80111bc:	4656      	mov	r6, sl
 80111be:	2700      	movs	r7, #0
 80111c0:	4621      	mov	r1, r4
 80111c2:	4658      	mov	r0, fp
 80111c4:	f000 fafe 	bl	80117c4 <_Bfree>
 80111c8:	2d00      	cmp	r5, #0
 80111ca:	d0dc      	beq.n	8011186 <_dtoa_r+0x65e>
 80111cc:	b12f      	cbz	r7, 80111da <_dtoa_r+0x6b2>
 80111ce:	42af      	cmp	r7, r5
 80111d0:	d003      	beq.n	80111da <_dtoa_r+0x6b2>
 80111d2:	4639      	mov	r1, r7
 80111d4:	4658      	mov	r0, fp
 80111d6:	f000 faf5 	bl	80117c4 <_Bfree>
 80111da:	4629      	mov	r1, r5
 80111dc:	4658      	mov	r0, fp
 80111de:	f000 faf1 	bl	80117c4 <_Bfree>
 80111e2:	e7d0      	b.n	8011186 <_dtoa_r+0x65e>
 80111e4:	9704      	str	r7, [sp, #16]
 80111e6:	4633      	mov	r3, r6
 80111e8:	461e      	mov	r6, r3
 80111ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111ee:	2a39      	cmp	r2, #57	@ 0x39
 80111f0:	d107      	bne.n	8011202 <_dtoa_r+0x6da>
 80111f2:	459a      	cmp	sl, r3
 80111f4:	d1f8      	bne.n	80111e8 <_dtoa_r+0x6c0>
 80111f6:	9a04      	ldr	r2, [sp, #16]
 80111f8:	3201      	adds	r2, #1
 80111fa:	9204      	str	r2, [sp, #16]
 80111fc:	2230      	movs	r2, #48	@ 0x30
 80111fe:	f88a 2000 	strb.w	r2, [sl]
 8011202:	781a      	ldrb	r2, [r3, #0]
 8011204:	3201      	adds	r2, #1
 8011206:	701a      	strb	r2, [r3, #0]
 8011208:	e7bd      	b.n	8011186 <_dtoa_r+0x65e>
 801120a:	4b7b      	ldr	r3, [pc, #492]	@ (80113f8 <_dtoa_r+0x8d0>)
 801120c:	2200      	movs	r2, #0
 801120e:	f7ef fa03 	bl	8000618 <__aeabi_dmul>
 8011212:	2200      	movs	r2, #0
 8011214:	2300      	movs	r3, #0
 8011216:	4604      	mov	r4, r0
 8011218:	460d      	mov	r5, r1
 801121a:	f7ef fc65 	bl	8000ae8 <__aeabi_dcmpeq>
 801121e:	2800      	cmp	r0, #0
 8011220:	f43f aebb 	beq.w	8010f9a <_dtoa_r+0x472>
 8011224:	e6f0      	b.n	8011008 <_dtoa_r+0x4e0>
 8011226:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011228:	2a00      	cmp	r2, #0
 801122a:	f000 80db 	beq.w	80113e4 <_dtoa_r+0x8bc>
 801122e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011230:	2a01      	cmp	r2, #1
 8011232:	f300 80bf 	bgt.w	80113b4 <_dtoa_r+0x88c>
 8011236:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011238:	2a00      	cmp	r2, #0
 801123a:	f000 80b7 	beq.w	80113ac <_dtoa_r+0x884>
 801123e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011242:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011244:	4646      	mov	r6, r8
 8011246:	9a08      	ldr	r2, [sp, #32]
 8011248:	2101      	movs	r1, #1
 801124a:	441a      	add	r2, r3
 801124c:	4658      	mov	r0, fp
 801124e:	4498      	add	r8, r3
 8011250:	9208      	str	r2, [sp, #32]
 8011252:	f000 fbb5 	bl	80119c0 <__i2b>
 8011256:	4605      	mov	r5, r0
 8011258:	b15e      	cbz	r6, 8011272 <_dtoa_r+0x74a>
 801125a:	9b08      	ldr	r3, [sp, #32]
 801125c:	2b00      	cmp	r3, #0
 801125e:	dd08      	ble.n	8011272 <_dtoa_r+0x74a>
 8011260:	42b3      	cmp	r3, r6
 8011262:	9a08      	ldr	r2, [sp, #32]
 8011264:	bfa8      	it	ge
 8011266:	4633      	movge	r3, r6
 8011268:	eba8 0803 	sub.w	r8, r8, r3
 801126c:	1af6      	subs	r6, r6, r3
 801126e:	1ad3      	subs	r3, r2, r3
 8011270:	9308      	str	r3, [sp, #32]
 8011272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011274:	b1f3      	cbz	r3, 80112b4 <_dtoa_r+0x78c>
 8011276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011278:	2b00      	cmp	r3, #0
 801127a:	f000 80b7 	beq.w	80113ec <_dtoa_r+0x8c4>
 801127e:	b18c      	cbz	r4, 80112a4 <_dtoa_r+0x77c>
 8011280:	4629      	mov	r1, r5
 8011282:	4622      	mov	r2, r4
 8011284:	4658      	mov	r0, fp
 8011286:	f000 fc5b 	bl	8011b40 <__pow5mult>
 801128a:	464a      	mov	r2, r9
 801128c:	4601      	mov	r1, r0
 801128e:	4605      	mov	r5, r0
 8011290:	4658      	mov	r0, fp
 8011292:	f000 fbab 	bl	80119ec <__multiply>
 8011296:	4649      	mov	r1, r9
 8011298:	9004      	str	r0, [sp, #16]
 801129a:	4658      	mov	r0, fp
 801129c:	f000 fa92 	bl	80117c4 <_Bfree>
 80112a0:	9b04      	ldr	r3, [sp, #16]
 80112a2:	4699      	mov	r9, r3
 80112a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80112a6:	1b1a      	subs	r2, r3, r4
 80112a8:	d004      	beq.n	80112b4 <_dtoa_r+0x78c>
 80112aa:	4649      	mov	r1, r9
 80112ac:	4658      	mov	r0, fp
 80112ae:	f000 fc47 	bl	8011b40 <__pow5mult>
 80112b2:	4681      	mov	r9, r0
 80112b4:	2101      	movs	r1, #1
 80112b6:	4658      	mov	r0, fp
 80112b8:	f000 fb82 	bl	80119c0 <__i2b>
 80112bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112be:	4604      	mov	r4, r0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f000 81cf 	beq.w	8011664 <_dtoa_r+0xb3c>
 80112c6:	461a      	mov	r2, r3
 80112c8:	4601      	mov	r1, r0
 80112ca:	4658      	mov	r0, fp
 80112cc:	f000 fc38 	bl	8011b40 <__pow5mult>
 80112d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112d2:	2b01      	cmp	r3, #1
 80112d4:	4604      	mov	r4, r0
 80112d6:	f300 8095 	bgt.w	8011404 <_dtoa_r+0x8dc>
 80112da:	9b02      	ldr	r3, [sp, #8]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	f040 8087 	bne.w	80113f0 <_dtoa_r+0x8c8>
 80112e2:	9b03      	ldr	r3, [sp, #12]
 80112e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	f040 8089 	bne.w	8011400 <_dtoa_r+0x8d8>
 80112ee:	9b03      	ldr	r3, [sp, #12]
 80112f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80112f4:	0d1b      	lsrs	r3, r3, #20
 80112f6:	051b      	lsls	r3, r3, #20
 80112f8:	b12b      	cbz	r3, 8011306 <_dtoa_r+0x7de>
 80112fa:	9b08      	ldr	r3, [sp, #32]
 80112fc:	3301      	adds	r3, #1
 80112fe:	9308      	str	r3, [sp, #32]
 8011300:	f108 0801 	add.w	r8, r8, #1
 8011304:	2301      	movs	r3, #1
 8011306:	930a      	str	r3, [sp, #40]	@ 0x28
 8011308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801130a:	2b00      	cmp	r3, #0
 801130c:	f000 81b0 	beq.w	8011670 <_dtoa_r+0xb48>
 8011310:	6923      	ldr	r3, [r4, #16]
 8011312:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011316:	6918      	ldr	r0, [r3, #16]
 8011318:	f000 fb06 	bl	8011928 <__hi0bits>
 801131c:	f1c0 0020 	rsb	r0, r0, #32
 8011320:	9b08      	ldr	r3, [sp, #32]
 8011322:	4418      	add	r0, r3
 8011324:	f010 001f 	ands.w	r0, r0, #31
 8011328:	d077      	beq.n	801141a <_dtoa_r+0x8f2>
 801132a:	f1c0 0320 	rsb	r3, r0, #32
 801132e:	2b04      	cmp	r3, #4
 8011330:	dd6b      	ble.n	801140a <_dtoa_r+0x8e2>
 8011332:	9b08      	ldr	r3, [sp, #32]
 8011334:	f1c0 001c 	rsb	r0, r0, #28
 8011338:	4403      	add	r3, r0
 801133a:	4480      	add	r8, r0
 801133c:	4406      	add	r6, r0
 801133e:	9308      	str	r3, [sp, #32]
 8011340:	f1b8 0f00 	cmp.w	r8, #0
 8011344:	dd05      	ble.n	8011352 <_dtoa_r+0x82a>
 8011346:	4649      	mov	r1, r9
 8011348:	4642      	mov	r2, r8
 801134a:	4658      	mov	r0, fp
 801134c:	f000 fc52 	bl	8011bf4 <__lshift>
 8011350:	4681      	mov	r9, r0
 8011352:	9b08      	ldr	r3, [sp, #32]
 8011354:	2b00      	cmp	r3, #0
 8011356:	dd05      	ble.n	8011364 <_dtoa_r+0x83c>
 8011358:	4621      	mov	r1, r4
 801135a:	461a      	mov	r2, r3
 801135c:	4658      	mov	r0, fp
 801135e:	f000 fc49 	bl	8011bf4 <__lshift>
 8011362:	4604      	mov	r4, r0
 8011364:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011366:	2b00      	cmp	r3, #0
 8011368:	d059      	beq.n	801141e <_dtoa_r+0x8f6>
 801136a:	4621      	mov	r1, r4
 801136c:	4648      	mov	r0, r9
 801136e:	f000 fcad 	bl	8011ccc <__mcmp>
 8011372:	2800      	cmp	r0, #0
 8011374:	da53      	bge.n	801141e <_dtoa_r+0x8f6>
 8011376:	1e7b      	subs	r3, r7, #1
 8011378:	9304      	str	r3, [sp, #16]
 801137a:	4649      	mov	r1, r9
 801137c:	2300      	movs	r3, #0
 801137e:	220a      	movs	r2, #10
 8011380:	4658      	mov	r0, fp
 8011382:	f000 fa41 	bl	8011808 <__multadd>
 8011386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011388:	4681      	mov	r9, r0
 801138a:	2b00      	cmp	r3, #0
 801138c:	f000 8172 	beq.w	8011674 <_dtoa_r+0xb4c>
 8011390:	2300      	movs	r3, #0
 8011392:	4629      	mov	r1, r5
 8011394:	220a      	movs	r2, #10
 8011396:	4658      	mov	r0, fp
 8011398:	f000 fa36 	bl	8011808 <__multadd>
 801139c:	9b00      	ldr	r3, [sp, #0]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	4605      	mov	r5, r0
 80113a2:	dc67      	bgt.n	8011474 <_dtoa_r+0x94c>
 80113a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113a6:	2b02      	cmp	r3, #2
 80113a8:	dc41      	bgt.n	801142e <_dtoa_r+0x906>
 80113aa:	e063      	b.n	8011474 <_dtoa_r+0x94c>
 80113ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80113ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80113b2:	e746      	b.n	8011242 <_dtoa_r+0x71a>
 80113b4:	9b07      	ldr	r3, [sp, #28]
 80113b6:	1e5c      	subs	r4, r3, #1
 80113b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80113ba:	42a3      	cmp	r3, r4
 80113bc:	bfbf      	itttt	lt
 80113be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80113c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80113c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80113c4:	1ae3      	sublt	r3, r4, r3
 80113c6:	bfb4      	ite	lt
 80113c8:	18d2      	addlt	r2, r2, r3
 80113ca:	1b1c      	subge	r4, r3, r4
 80113cc:	9b07      	ldr	r3, [sp, #28]
 80113ce:	bfbc      	itt	lt
 80113d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80113d2:	2400      	movlt	r4, #0
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	bfb5      	itete	lt
 80113d8:	eba8 0603 	sublt.w	r6, r8, r3
 80113dc:	9b07      	ldrge	r3, [sp, #28]
 80113de:	2300      	movlt	r3, #0
 80113e0:	4646      	movge	r6, r8
 80113e2:	e730      	b.n	8011246 <_dtoa_r+0x71e>
 80113e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80113e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80113e8:	4646      	mov	r6, r8
 80113ea:	e735      	b.n	8011258 <_dtoa_r+0x730>
 80113ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80113ee:	e75c      	b.n	80112aa <_dtoa_r+0x782>
 80113f0:	2300      	movs	r3, #0
 80113f2:	e788      	b.n	8011306 <_dtoa_r+0x7de>
 80113f4:	3fe00000 	.word	0x3fe00000
 80113f8:	40240000 	.word	0x40240000
 80113fc:	40140000 	.word	0x40140000
 8011400:	9b02      	ldr	r3, [sp, #8]
 8011402:	e780      	b.n	8011306 <_dtoa_r+0x7de>
 8011404:	2300      	movs	r3, #0
 8011406:	930a      	str	r3, [sp, #40]	@ 0x28
 8011408:	e782      	b.n	8011310 <_dtoa_r+0x7e8>
 801140a:	d099      	beq.n	8011340 <_dtoa_r+0x818>
 801140c:	9a08      	ldr	r2, [sp, #32]
 801140e:	331c      	adds	r3, #28
 8011410:	441a      	add	r2, r3
 8011412:	4498      	add	r8, r3
 8011414:	441e      	add	r6, r3
 8011416:	9208      	str	r2, [sp, #32]
 8011418:	e792      	b.n	8011340 <_dtoa_r+0x818>
 801141a:	4603      	mov	r3, r0
 801141c:	e7f6      	b.n	801140c <_dtoa_r+0x8e4>
 801141e:	9b07      	ldr	r3, [sp, #28]
 8011420:	9704      	str	r7, [sp, #16]
 8011422:	2b00      	cmp	r3, #0
 8011424:	dc20      	bgt.n	8011468 <_dtoa_r+0x940>
 8011426:	9300      	str	r3, [sp, #0]
 8011428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801142a:	2b02      	cmp	r3, #2
 801142c:	dd1e      	ble.n	801146c <_dtoa_r+0x944>
 801142e:	9b00      	ldr	r3, [sp, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	f47f aec0 	bne.w	80111b6 <_dtoa_r+0x68e>
 8011436:	4621      	mov	r1, r4
 8011438:	2205      	movs	r2, #5
 801143a:	4658      	mov	r0, fp
 801143c:	f000 f9e4 	bl	8011808 <__multadd>
 8011440:	4601      	mov	r1, r0
 8011442:	4604      	mov	r4, r0
 8011444:	4648      	mov	r0, r9
 8011446:	f000 fc41 	bl	8011ccc <__mcmp>
 801144a:	2800      	cmp	r0, #0
 801144c:	f77f aeb3 	ble.w	80111b6 <_dtoa_r+0x68e>
 8011450:	4656      	mov	r6, sl
 8011452:	2331      	movs	r3, #49	@ 0x31
 8011454:	f806 3b01 	strb.w	r3, [r6], #1
 8011458:	9b04      	ldr	r3, [sp, #16]
 801145a:	3301      	adds	r3, #1
 801145c:	9304      	str	r3, [sp, #16]
 801145e:	e6ae      	b.n	80111be <_dtoa_r+0x696>
 8011460:	9c07      	ldr	r4, [sp, #28]
 8011462:	9704      	str	r7, [sp, #16]
 8011464:	4625      	mov	r5, r4
 8011466:	e7f3      	b.n	8011450 <_dtoa_r+0x928>
 8011468:	9b07      	ldr	r3, [sp, #28]
 801146a:	9300      	str	r3, [sp, #0]
 801146c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801146e:	2b00      	cmp	r3, #0
 8011470:	f000 8104 	beq.w	801167c <_dtoa_r+0xb54>
 8011474:	2e00      	cmp	r6, #0
 8011476:	dd05      	ble.n	8011484 <_dtoa_r+0x95c>
 8011478:	4629      	mov	r1, r5
 801147a:	4632      	mov	r2, r6
 801147c:	4658      	mov	r0, fp
 801147e:	f000 fbb9 	bl	8011bf4 <__lshift>
 8011482:	4605      	mov	r5, r0
 8011484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011486:	2b00      	cmp	r3, #0
 8011488:	d05a      	beq.n	8011540 <_dtoa_r+0xa18>
 801148a:	6869      	ldr	r1, [r5, #4]
 801148c:	4658      	mov	r0, fp
 801148e:	f000 f959 	bl	8011744 <_Balloc>
 8011492:	4606      	mov	r6, r0
 8011494:	b928      	cbnz	r0, 80114a2 <_dtoa_r+0x97a>
 8011496:	4b84      	ldr	r3, [pc, #528]	@ (80116a8 <_dtoa_r+0xb80>)
 8011498:	4602      	mov	r2, r0
 801149a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801149e:	f7ff bb5a 	b.w	8010b56 <_dtoa_r+0x2e>
 80114a2:	692a      	ldr	r2, [r5, #16]
 80114a4:	3202      	adds	r2, #2
 80114a6:	0092      	lsls	r2, r2, #2
 80114a8:	f105 010c 	add.w	r1, r5, #12
 80114ac:	300c      	adds	r0, #12
 80114ae:	f7ff fa7e 	bl	80109ae <memcpy>
 80114b2:	2201      	movs	r2, #1
 80114b4:	4631      	mov	r1, r6
 80114b6:	4658      	mov	r0, fp
 80114b8:	f000 fb9c 	bl	8011bf4 <__lshift>
 80114bc:	f10a 0301 	add.w	r3, sl, #1
 80114c0:	9307      	str	r3, [sp, #28]
 80114c2:	9b00      	ldr	r3, [sp, #0]
 80114c4:	4453      	add	r3, sl
 80114c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80114c8:	9b02      	ldr	r3, [sp, #8]
 80114ca:	f003 0301 	and.w	r3, r3, #1
 80114ce:	462f      	mov	r7, r5
 80114d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80114d2:	4605      	mov	r5, r0
 80114d4:	9b07      	ldr	r3, [sp, #28]
 80114d6:	4621      	mov	r1, r4
 80114d8:	3b01      	subs	r3, #1
 80114da:	4648      	mov	r0, r9
 80114dc:	9300      	str	r3, [sp, #0]
 80114de:	f7ff fa99 	bl	8010a14 <quorem>
 80114e2:	4639      	mov	r1, r7
 80114e4:	9002      	str	r0, [sp, #8]
 80114e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80114ea:	4648      	mov	r0, r9
 80114ec:	f000 fbee 	bl	8011ccc <__mcmp>
 80114f0:	462a      	mov	r2, r5
 80114f2:	9008      	str	r0, [sp, #32]
 80114f4:	4621      	mov	r1, r4
 80114f6:	4658      	mov	r0, fp
 80114f8:	f000 fc04 	bl	8011d04 <__mdiff>
 80114fc:	68c2      	ldr	r2, [r0, #12]
 80114fe:	4606      	mov	r6, r0
 8011500:	bb02      	cbnz	r2, 8011544 <_dtoa_r+0xa1c>
 8011502:	4601      	mov	r1, r0
 8011504:	4648      	mov	r0, r9
 8011506:	f000 fbe1 	bl	8011ccc <__mcmp>
 801150a:	4602      	mov	r2, r0
 801150c:	4631      	mov	r1, r6
 801150e:	4658      	mov	r0, fp
 8011510:	920e      	str	r2, [sp, #56]	@ 0x38
 8011512:	f000 f957 	bl	80117c4 <_Bfree>
 8011516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011518:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801151a:	9e07      	ldr	r6, [sp, #28]
 801151c:	ea43 0102 	orr.w	r1, r3, r2
 8011520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011522:	4319      	orrs	r1, r3
 8011524:	d110      	bne.n	8011548 <_dtoa_r+0xa20>
 8011526:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801152a:	d029      	beq.n	8011580 <_dtoa_r+0xa58>
 801152c:	9b08      	ldr	r3, [sp, #32]
 801152e:	2b00      	cmp	r3, #0
 8011530:	dd02      	ble.n	8011538 <_dtoa_r+0xa10>
 8011532:	9b02      	ldr	r3, [sp, #8]
 8011534:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011538:	9b00      	ldr	r3, [sp, #0]
 801153a:	f883 8000 	strb.w	r8, [r3]
 801153e:	e63f      	b.n	80111c0 <_dtoa_r+0x698>
 8011540:	4628      	mov	r0, r5
 8011542:	e7bb      	b.n	80114bc <_dtoa_r+0x994>
 8011544:	2201      	movs	r2, #1
 8011546:	e7e1      	b.n	801150c <_dtoa_r+0x9e4>
 8011548:	9b08      	ldr	r3, [sp, #32]
 801154a:	2b00      	cmp	r3, #0
 801154c:	db04      	blt.n	8011558 <_dtoa_r+0xa30>
 801154e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011550:	430b      	orrs	r3, r1
 8011552:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011554:	430b      	orrs	r3, r1
 8011556:	d120      	bne.n	801159a <_dtoa_r+0xa72>
 8011558:	2a00      	cmp	r2, #0
 801155a:	dded      	ble.n	8011538 <_dtoa_r+0xa10>
 801155c:	4649      	mov	r1, r9
 801155e:	2201      	movs	r2, #1
 8011560:	4658      	mov	r0, fp
 8011562:	f000 fb47 	bl	8011bf4 <__lshift>
 8011566:	4621      	mov	r1, r4
 8011568:	4681      	mov	r9, r0
 801156a:	f000 fbaf 	bl	8011ccc <__mcmp>
 801156e:	2800      	cmp	r0, #0
 8011570:	dc03      	bgt.n	801157a <_dtoa_r+0xa52>
 8011572:	d1e1      	bne.n	8011538 <_dtoa_r+0xa10>
 8011574:	f018 0f01 	tst.w	r8, #1
 8011578:	d0de      	beq.n	8011538 <_dtoa_r+0xa10>
 801157a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801157e:	d1d8      	bne.n	8011532 <_dtoa_r+0xa0a>
 8011580:	9a00      	ldr	r2, [sp, #0]
 8011582:	2339      	movs	r3, #57	@ 0x39
 8011584:	7013      	strb	r3, [r2, #0]
 8011586:	4633      	mov	r3, r6
 8011588:	461e      	mov	r6, r3
 801158a:	3b01      	subs	r3, #1
 801158c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011590:	2a39      	cmp	r2, #57	@ 0x39
 8011592:	d052      	beq.n	801163a <_dtoa_r+0xb12>
 8011594:	3201      	adds	r2, #1
 8011596:	701a      	strb	r2, [r3, #0]
 8011598:	e612      	b.n	80111c0 <_dtoa_r+0x698>
 801159a:	2a00      	cmp	r2, #0
 801159c:	dd07      	ble.n	80115ae <_dtoa_r+0xa86>
 801159e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80115a2:	d0ed      	beq.n	8011580 <_dtoa_r+0xa58>
 80115a4:	9a00      	ldr	r2, [sp, #0]
 80115a6:	f108 0301 	add.w	r3, r8, #1
 80115aa:	7013      	strb	r3, [r2, #0]
 80115ac:	e608      	b.n	80111c0 <_dtoa_r+0x698>
 80115ae:	9b07      	ldr	r3, [sp, #28]
 80115b0:	9a07      	ldr	r2, [sp, #28]
 80115b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80115b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80115b8:	4293      	cmp	r3, r2
 80115ba:	d028      	beq.n	801160e <_dtoa_r+0xae6>
 80115bc:	4649      	mov	r1, r9
 80115be:	2300      	movs	r3, #0
 80115c0:	220a      	movs	r2, #10
 80115c2:	4658      	mov	r0, fp
 80115c4:	f000 f920 	bl	8011808 <__multadd>
 80115c8:	42af      	cmp	r7, r5
 80115ca:	4681      	mov	r9, r0
 80115cc:	f04f 0300 	mov.w	r3, #0
 80115d0:	f04f 020a 	mov.w	r2, #10
 80115d4:	4639      	mov	r1, r7
 80115d6:	4658      	mov	r0, fp
 80115d8:	d107      	bne.n	80115ea <_dtoa_r+0xac2>
 80115da:	f000 f915 	bl	8011808 <__multadd>
 80115de:	4607      	mov	r7, r0
 80115e0:	4605      	mov	r5, r0
 80115e2:	9b07      	ldr	r3, [sp, #28]
 80115e4:	3301      	adds	r3, #1
 80115e6:	9307      	str	r3, [sp, #28]
 80115e8:	e774      	b.n	80114d4 <_dtoa_r+0x9ac>
 80115ea:	f000 f90d 	bl	8011808 <__multadd>
 80115ee:	4629      	mov	r1, r5
 80115f0:	4607      	mov	r7, r0
 80115f2:	2300      	movs	r3, #0
 80115f4:	220a      	movs	r2, #10
 80115f6:	4658      	mov	r0, fp
 80115f8:	f000 f906 	bl	8011808 <__multadd>
 80115fc:	4605      	mov	r5, r0
 80115fe:	e7f0      	b.n	80115e2 <_dtoa_r+0xaba>
 8011600:	9b00      	ldr	r3, [sp, #0]
 8011602:	2b00      	cmp	r3, #0
 8011604:	bfcc      	ite	gt
 8011606:	461e      	movgt	r6, r3
 8011608:	2601      	movle	r6, #1
 801160a:	4456      	add	r6, sl
 801160c:	2700      	movs	r7, #0
 801160e:	4649      	mov	r1, r9
 8011610:	2201      	movs	r2, #1
 8011612:	4658      	mov	r0, fp
 8011614:	f000 faee 	bl	8011bf4 <__lshift>
 8011618:	4621      	mov	r1, r4
 801161a:	4681      	mov	r9, r0
 801161c:	f000 fb56 	bl	8011ccc <__mcmp>
 8011620:	2800      	cmp	r0, #0
 8011622:	dcb0      	bgt.n	8011586 <_dtoa_r+0xa5e>
 8011624:	d102      	bne.n	801162c <_dtoa_r+0xb04>
 8011626:	f018 0f01 	tst.w	r8, #1
 801162a:	d1ac      	bne.n	8011586 <_dtoa_r+0xa5e>
 801162c:	4633      	mov	r3, r6
 801162e:	461e      	mov	r6, r3
 8011630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011634:	2a30      	cmp	r2, #48	@ 0x30
 8011636:	d0fa      	beq.n	801162e <_dtoa_r+0xb06>
 8011638:	e5c2      	b.n	80111c0 <_dtoa_r+0x698>
 801163a:	459a      	cmp	sl, r3
 801163c:	d1a4      	bne.n	8011588 <_dtoa_r+0xa60>
 801163e:	9b04      	ldr	r3, [sp, #16]
 8011640:	3301      	adds	r3, #1
 8011642:	9304      	str	r3, [sp, #16]
 8011644:	2331      	movs	r3, #49	@ 0x31
 8011646:	f88a 3000 	strb.w	r3, [sl]
 801164a:	e5b9      	b.n	80111c0 <_dtoa_r+0x698>
 801164c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801164e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80116ac <_dtoa_r+0xb84>
 8011652:	b11b      	cbz	r3, 801165c <_dtoa_r+0xb34>
 8011654:	f10a 0308 	add.w	r3, sl, #8
 8011658:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801165a:	6013      	str	r3, [r2, #0]
 801165c:	4650      	mov	r0, sl
 801165e:	b019      	add	sp, #100	@ 0x64
 8011660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011666:	2b01      	cmp	r3, #1
 8011668:	f77f ae37 	ble.w	80112da <_dtoa_r+0x7b2>
 801166c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801166e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011670:	2001      	movs	r0, #1
 8011672:	e655      	b.n	8011320 <_dtoa_r+0x7f8>
 8011674:	9b00      	ldr	r3, [sp, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	f77f aed6 	ble.w	8011428 <_dtoa_r+0x900>
 801167c:	4656      	mov	r6, sl
 801167e:	4621      	mov	r1, r4
 8011680:	4648      	mov	r0, r9
 8011682:	f7ff f9c7 	bl	8010a14 <quorem>
 8011686:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801168a:	f806 8b01 	strb.w	r8, [r6], #1
 801168e:	9b00      	ldr	r3, [sp, #0]
 8011690:	eba6 020a 	sub.w	r2, r6, sl
 8011694:	4293      	cmp	r3, r2
 8011696:	ddb3      	ble.n	8011600 <_dtoa_r+0xad8>
 8011698:	4649      	mov	r1, r9
 801169a:	2300      	movs	r3, #0
 801169c:	220a      	movs	r2, #10
 801169e:	4658      	mov	r0, fp
 80116a0:	f000 f8b2 	bl	8011808 <__multadd>
 80116a4:	4681      	mov	r9, r0
 80116a6:	e7ea      	b.n	801167e <_dtoa_r+0xb56>
 80116a8:	08015b7e 	.word	0x08015b7e
 80116ac:	08015b19 	.word	0x08015b19

080116b0 <_free_r>:
 80116b0:	b538      	push	{r3, r4, r5, lr}
 80116b2:	4605      	mov	r5, r0
 80116b4:	2900      	cmp	r1, #0
 80116b6:	d041      	beq.n	801173c <_free_r+0x8c>
 80116b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116bc:	1f0c      	subs	r4, r1, #4
 80116be:	2b00      	cmp	r3, #0
 80116c0:	bfb8      	it	lt
 80116c2:	18e4      	addlt	r4, r4, r3
 80116c4:	f7fe f814 	bl	800f6f0 <__malloc_lock>
 80116c8:	4a1d      	ldr	r2, [pc, #116]	@ (8011740 <_free_r+0x90>)
 80116ca:	6813      	ldr	r3, [r2, #0]
 80116cc:	b933      	cbnz	r3, 80116dc <_free_r+0x2c>
 80116ce:	6063      	str	r3, [r4, #4]
 80116d0:	6014      	str	r4, [r2, #0]
 80116d2:	4628      	mov	r0, r5
 80116d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116d8:	f7fe b810 	b.w	800f6fc <__malloc_unlock>
 80116dc:	42a3      	cmp	r3, r4
 80116de:	d908      	bls.n	80116f2 <_free_r+0x42>
 80116e0:	6820      	ldr	r0, [r4, #0]
 80116e2:	1821      	adds	r1, r4, r0
 80116e4:	428b      	cmp	r3, r1
 80116e6:	bf01      	itttt	eq
 80116e8:	6819      	ldreq	r1, [r3, #0]
 80116ea:	685b      	ldreq	r3, [r3, #4]
 80116ec:	1809      	addeq	r1, r1, r0
 80116ee:	6021      	streq	r1, [r4, #0]
 80116f0:	e7ed      	b.n	80116ce <_free_r+0x1e>
 80116f2:	461a      	mov	r2, r3
 80116f4:	685b      	ldr	r3, [r3, #4]
 80116f6:	b10b      	cbz	r3, 80116fc <_free_r+0x4c>
 80116f8:	42a3      	cmp	r3, r4
 80116fa:	d9fa      	bls.n	80116f2 <_free_r+0x42>
 80116fc:	6811      	ldr	r1, [r2, #0]
 80116fe:	1850      	adds	r0, r2, r1
 8011700:	42a0      	cmp	r0, r4
 8011702:	d10b      	bne.n	801171c <_free_r+0x6c>
 8011704:	6820      	ldr	r0, [r4, #0]
 8011706:	4401      	add	r1, r0
 8011708:	1850      	adds	r0, r2, r1
 801170a:	4283      	cmp	r3, r0
 801170c:	6011      	str	r1, [r2, #0]
 801170e:	d1e0      	bne.n	80116d2 <_free_r+0x22>
 8011710:	6818      	ldr	r0, [r3, #0]
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	6053      	str	r3, [r2, #4]
 8011716:	4408      	add	r0, r1
 8011718:	6010      	str	r0, [r2, #0]
 801171a:	e7da      	b.n	80116d2 <_free_r+0x22>
 801171c:	d902      	bls.n	8011724 <_free_r+0x74>
 801171e:	230c      	movs	r3, #12
 8011720:	602b      	str	r3, [r5, #0]
 8011722:	e7d6      	b.n	80116d2 <_free_r+0x22>
 8011724:	6820      	ldr	r0, [r4, #0]
 8011726:	1821      	adds	r1, r4, r0
 8011728:	428b      	cmp	r3, r1
 801172a:	bf04      	itt	eq
 801172c:	6819      	ldreq	r1, [r3, #0]
 801172e:	685b      	ldreq	r3, [r3, #4]
 8011730:	6063      	str	r3, [r4, #4]
 8011732:	bf04      	itt	eq
 8011734:	1809      	addeq	r1, r1, r0
 8011736:	6021      	streq	r1, [r4, #0]
 8011738:	6054      	str	r4, [r2, #4]
 801173a:	e7ca      	b.n	80116d2 <_free_r+0x22>
 801173c:	bd38      	pop	{r3, r4, r5, pc}
 801173e:	bf00      	nop
 8011740:	200055dc 	.word	0x200055dc

08011744 <_Balloc>:
 8011744:	b570      	push	{r4, r5, r6, lr}
 8011746:	69c6      	ldr	r6, [r0, #28]
 8011748:	4604      	mov	r4, r0
 801174a:	460d      	mov	r5, r1
 801174c:	b976      	cbnz	r6, 801176c <_Balloc+0x28>
 801174e:	2010      	movs	r0, #16
 8011750:	f7fd ff1c 	bl	800f58c <malloc>
 8011754:	4602      	mov	r2, r0
 8011756:	61e0      	str	r0, [r4, #28]
 8011758:	b920      	cbnz	r0, 8011764 <_Balloc+0x20>
 801175a:	4b18      	ldr	r3, [pc, #96]	@ (80117bc <_Balloc+0x78>)
 801175c:	4818      	ldr	r0, [pc, #96]	@ (80117c0 <_Balloc+0x7c>)
 801175e:	216b      	movs	r1, #107	@ 0x6b
 8011760:	f7ff f93a 	bl	80109d8 <__assert_func>
 8011764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011768:	6006      	str	r6, [r0, #0]
 801176a:	60c6      	str	r6, [r0, #12]
 801176c:	69e6      	ldr	r6, [r4, #28]
 801176e:	68f3      	ldr	r3, [r6, #12]
 8011770:	b183      	cbz	r3, 8011794 <_Balloc+0x50>
 8011772:	69e3      	ldr	r3, [r4, #28]
 8011774:	68db      	ldr	r3, [r3, #12]
 8011776:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801177a:	b9b8      	cbnz	r0, 80117ac <_Balloc+0x68>
 801177c:	2101      	movs	r1, #1
 801177e:	fa01 f605 	lsl.w	r6, r1, r5
 8011782:	1d72      	adds	r2, r6, #5
 8011784:	0092      	lsls	r2, r2, #2
 8011786:	4620      	mov	r0, r4
 8011788:	f002 f8e1 	bl	801394e <_calloc_r>
 801178c:	b160      	cbz	r0, 80117a8 <_Balloc+0x64>
 801178e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011792:	e00e      	b.n	80117b2 <_Balloc+0x6e>
 8011794:	2221      	movs	r2, #33	@ 0x21
 8011796:	2104      	movs	r1, #4
 8011798:	4620      	mov	r0, r4
 801179a:	f002 f8d8 	bl	801394e <_calloc_r>
 801179e:	69e3      	ldr	r3, [r4, #28]
 80117a0:	60f0      	str	r0, [r6, #12]
 80117a2:	68db      	ldr	r3, [r3, #12]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d1e4      	bne.n	8011772 <_Balloc+0x2e>
 80117a8:	2000      	movs	r0, #0
 80117aa:	bd70      	pop	{r4, r5, r6, pc}
 80117ac:	6802      	ldr	r2, [r0, #0]
 80117ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80117b2:	2300      	movs	r3, #0
 80117b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80117b8:	e7f7      	b.n	80117aa <_Balloc+0x66>
 80117ba:	bf00      	nop
 80117bc:	08015a6c 	.word	0x08015a6c
 80117c0:	08015b8f 	.word	0x08015b8f

080117c4 <_Bfree>:
 80117c4:	b570      	push	{r4, r5, r6, lr}
 80117c6:	69c6      	ldr	r6, [r0, #28]
 80117c8:	4605      	mov	r5, r0
 80117ca:	460c      	mov	r4, r1
 80117cc:	b976      	cbnz	r6, 80117ec <_Bfree+0x28>
 80117ce:	2010      	movs	r0, #16
 80117d0:	f7fd fedc 	bl	800f58c <malloc>
 80117d4:	4602      	mov	r2, r0
 80117d6:	61e8      	str	r0, [r5, #28]
 80117d8:	b920      	cbnz	r0, 80117e4 <_Bfree+0x20>
 80117da:	4b09      	ldr	r3, [pc, #36]	@ (8011800 <_Bfree+0x3c>)
 80117dc:	4809      	ldr	r0, [pc, #36]	@ (8011804 <_Bfree+0x40>)
 80117de:	218f      	movs	r1, #143	@ 0x8f
 80117e0:	f7ff f8fa 	bl	80109d8 <__assert_func>
 80117e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80117e8:	6006      	str	r6, [r0, #0]
 80117ea:	60c6      	str	r6, [r0, #12]
 80117ec:	b13c      	cbz	r4, 80117fe <_Bfree+0x3a>
 80117ee:	69eb      	ldr	r3, [r5, #28]
 80117f0:	6862      	ldr	r2, [r4, #4]
 80117f2:	68db      	ldr	r3, [r3, #12]
 80117f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80117f8:	6021      	str	r1, [r4, #0]
 80117fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80117fe:	bd70      	pop	{r4, r5, r6, pc}
 8011800:	08015a6c 	.word	0x08015a6c
 8011804:	08015b8f 	.word	0x08015b8f

08011808 <__multadd>:
 8011808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801180c:	690d      	ldr	r5, [r1, #16]
 801180e:	4607      	mov	r7, r0
 8011810:	460c      	mov	r4, r1
 8011812:	461e      	mov	r6, r3
 8011814:	f101 0c14 	add.w	ip, r1, #20
 8011818:	2000      	movs	r0, #0
 801181a:	f8dc 3000 	ldr.w	r3, [ip]
 801181e:	b299      	uxth	r1, r3
 8011820:	fb02 6101 	mla	r1, r2, r1, r6
 8011824:	0c1e      	lsrs	r6, r3, #16
 8011826:	0c0b      	lsrs	r3, r1, #16
 8011828:	fb02 3306 	mla	r3, r2, r6, r3
 801182c:	b289      	uxth	r1, r1
 801182e:	3001      	adds	r0, #1
 8011830:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011834:	4285      	cmp	r5, r0
 8011836:	f84c 1b04 	str.w	r1, [ip], #4
 801183a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801183e:	dcec      	bgt.n	801181a <__multadd+0x12>
 8011840:	b30e      	cbz	r6, 8011886 <__multadd+0x7e>
 8011842:	68a3      	ldr	r3, [r4, #8]
 8011844:	42ab      	cmp	r3, r5
 8011846:	dc19      	bgt.n	801187c <__multadd+0x74>
 8011848:	6861      	ldr	r1, [r4, #4]
 801184a:	4638      	mov	r0, r7
 801184c:	3101      	adds	r1, #1
 801184e:	f7ff ff79 	bl	8011744 <_Balloc>
 8011852:	4680      	mov	r8, r0
 8011854:	b928      	cbnz	r0, 8011862 <__multadd+0x5a>
 8011856:	4602      	mov	r2, r0
 8011858:	4b0c      	ldr	r3, [pc, #48]	@ (801188c <__multadd+0x84>)
 801185a:	480d      	ldr	r0, [pc, #52]	@ (8011890 <__multadd+0x88>)
 801185c:	21ba      	movs	r1, #186	@ 0xba
 801185e:	f7ff f8bb 	bl	80109d8 <__assert_func>
 8011862:	6922      	ldr	r2, [r4, #16]
 8011864:	3202      	adds	r2, #2
 8011866:	f104 010c 	add.w	r1, r4, #12
 801186a:	0092      	lsls	r2, r2, #2
 801186c:	300c      	adds	r0, #12
 801186e:	f7ff f89e 	bl	80109ae <memcpy>
 8011872:	4621      	mov	r1, r4
 8011874:	4638      	mov	r0, r7
 8011876:	f7ff ffa5 	bl	80117c4 <_Bfree>
 801187a:	4644      	mov	r4, r8
 801187c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011880:	3501      	adds	r5, #1
 8011882:	615e      	str	r6, [r3, #20]
 8011884:	6125      	str	r5, [r4, #16]
 8011886:	4620      	mov	r0, r4
 8011888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801188c:	08015b7e 	.word	0x08015b7e
 8011890:	08015b8f 	.word	0x08015b8f

08011894 <__s2b>:
 8011894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011898:	460c      	mov	r4, r1
 801189a:	4615      	mov	r5, r2
 801189c:	461f      	mov	r7, r3
 801189e:	2209      	movs	r2, #9
 80118a0:	3308      	adds	r3, #8
 80118a2:	4606      	mov	r6, r0
 80118a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80118a8:	2100      	movs	r1, #0
 80118aa:	2201      	movs	r2, #1
 80118ac:	429a      	cmp	r2, r3
 80118ae:	db09      	blt.n	80118c4 <__s2b+0x30>
 80118b0:	4630      	mov	r0, r6
 80118b2:	f7ff ff47 	bl	8011744 <_Balloc>
 80118b6:	b940      	cbnz	r0, 80118ca <__s2b+0x36>
 80118b8:	4602      	mov	r2, r0
 80118ba:	4b19      	ldr	r3, [pc, #100]	@ (8011920 <__s2b+0x8c>)
 80118bc:	4819      	ldr	r0, [pc, #100]	@ (8011924 <__s2b+0x90>)
 80118be:	21d3      	movs	r1, #211	@ 0xd3
 80118c0:	f7ff f88a 	bl	80109d8 <__assert_func>
 80118c4:	0052      	lsls	r2, r2, #1
 80118c6:	3101      	adds	r1, #1
 80118c8:	e7f0      	b.n	80118ac <__s2b+0x18>
 80118ca:	9b08      	ldr	r3, [sp, #32]
 80118cc:	6143      	str	r3, [r0, #20]
 80118ce:	2d09      	cmp	r5, #9
 80118d0:	f04f 0301 	mov.w	r3, #1
 80118d4:	6103      	str	r3, [r0, #16]
 80118d6:	dd16      	ble.n	8011906 <__s2b+0x72>
 80118d8:	f104 0909 	add.w	r9, r4, #9
 80118dc:	46c8      	mov	r8, r9
 80118de:	442c      	add	r4, r5
 80118e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80118e4:	4601      	mov	r1, r0
 80118e6:	3b30      	subs	r3, #48	@ 0x30
 80118e8:	220a      	movs	r2, #10
 80118ea:	4630      	mov	r0, r6
 80118ec:	f7ff ff8c 	bl	8011808 <__multadd>
 80118f0:	45a0      	cmp	r8, r4
 80118f2:	d1f5      	bne.n	80118e0 <__s2b+0x4c>
 80118f4:	f1a5 0408 	sub.w	r4, r5, #8
 80118f8:	444c      	add	r4, r9
 80118fa:	1b2d      	subs	r5, r5, r4
 80118fc:	1963      	adds	r3, r4, r5
 80118fe:	42bb      	cmp	r3, r7
 8011900:	db04      	blt.n	801190c <__s2b+0x78>
 8011902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011906:	340a      	adds	r4, #10
 8011908:	2509      	movs	r5, #9
 801190a:	e7f6      	b.n	80118fa <__s2b+0x66>
 801190c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011910:	4601      	mov	r1, r0
 8011912:	3b30      	subs	r3, #48	@ 0x30
 8011914:	220a      	movs	r2, #10
 8011916:	4630      	mov	r0, r6
 8011918:	f7ff ff76 	bl	8011808 <__multadd>
 801191c:	e7ee      	b.n	80118fc <__s2b+0x68>
 801191e:	bf00      	nop
 8011920:	08015b7e 	.word	0x08015b7e
 8011924:	08015b8f 	.word	0x08015b8f

08011928 <__hi0bits>:
 8011928:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801192c:	4603      	mov	r3, r0
 801192e:	bf36      	itet	cc
 8011930:	0403      	lslcc	r3, r0, #16
 8011932:	2000      	movcs	r0, #0
 8011934:	2010      	movcc	r0, #16
 8011936:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801193a:	bf3c      	itt	cc
 801193c:	021b      	lslcc	r3, r3, #8
 801193e:	3008      	addcc	r0, #8
 8011940:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011944:	bf3c      	itt	cc
 8011946:	011b      	lslcc	r3, r3, #4
 8011948:	3004      	addcc	r0, #4
 801194a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801194e:	bf3c      	itt	cc
 8011950:	009b      	lslcc	r3, r3, #2
 8011952:	3002      	addcc	r0, #2
 8011954:	2b00      	cmp	r3, #0
 8011956:	db05      	blt.n	8011964 <__hi0bits+0x3c>
 8011958:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801195c:	f100 0001 	add.w	r0, r0, #1
 8011960:	bf08      	it	eq
 8011962:	2020      	moveq	r0, #32
 8011964:	4770      	bx	lr

08011966 <__lo0bits>:
 8011966:	6803      	ldr	r3, [r0, #0]
 8011968:	4602      	mov	r2, r0
 801196a:	f013 0007 	ands.w	r0, r3, #7
 801196e:	d00b      	beq.n	8011988 <__lo0bits+0x22>
 8011970:	07d9      	lsls	r1, r3, #31
 8011972:	d421      	bmi.n	80119b8 <__lo0bits+0x52>
 8011974:	0798      	lsls	r0, r3, #30
 8011976:	bf49      	itett	mi
 8011978:	085b      	lsrmi	r3, r3, #1
 801197a:	089b      	lsrpl	r3, r3, #2
 801197c:	2001      	movmi	r0, #1
 801197e:	6013      	strmi	r3, [r2, #0]
 8011980:	bf5c      	itt	pl
 8011982:	6013      	strpl	r3, [r2, #0]
 8011984:	2002      	movpl	r0, #2
 8011986:	4770      	bx	lr
 8011988:	b299      	uxth	r1, r3
 801198a:	b909      	cbnz	r1, 8011990 <__lo0bits+0x2a>
 801198c:	0c1b      	lsrs	r3, r3, #16
 801198e:	2010      	movs	r0, #16
 8011990:	b2d9      	uxtb	r1, r3
 8011992:	b909      	cbnz	r1, 8011998 <__lo0bits+0x32>
 8011994:	3008      	adds	r0, #8
 8011996:	0a1b      	lsrs	r3, r3, #8
 8011998:	0719      	lsls	r1, r3, #28
 801199a:	bf04      	itt	eq
 801199c:	091b      	lsreq	r3, r3, #4
 801199e:	3004      	addeq	r0, #4
 80119a0:	0799      	lsls	r1, r3, #30
 80119a2:	bf04      	itt	eq
 80119a4:	089b      	lsreq	r3, r3, #2
 80119a6:	3002      	addeq	r0, #2
 80119a8:	07d9      	lsls	r1, r3, #31
 80119aa:	d403      	bmi.n	80119b4 <__lo0bits+0x4e>
 80119ac:	085b      	lsrs	r3, r3, #1
 80119ae:	f100 0001 	add.w	r0, r0, #1
 80119b2:	d003      	beq.n	80119bc <__lo0bits+0x56>
 80119b4:	6013      	str	r3, [r2, #0]
 80119b6:	4770      	bx	lr
 80119b8:	2000      	movs	r0, #0
 80119ba:	4770      	bx	lr
 80119bc:	2020      	movs	r0, #32
 80119be:	4770      	bx	lr

080119c0 <__i2b>:
 80119c0:	b510      	push	{r4, lr}
 80119c2:	460c      	mov	r4, r1
 80119c4:	2101      	movs	r1, #1
 80119c6:	f7ff febd 	bl	8011744 <_Balloc>
 80119ca:	4602      	mov	r2, r0
 80119cc:	b928      	cbnz	r0, 80119da <__i2b+0x1a>
 80119ce:	4b05      	ldr	r3, [pc, #20]	@ (80119e4 <__i2b+0x24>)
 80119d0:	4805      	ldr	r0, [pc, #20]	@ (80119e8 <__i2b+0x28>)
 80119d2:	f240 1145 	movw	r1, #325	@ 0x145
 80119d6:	f7fe ffff 	bl	80109d8 <__assert_func>
 80119da:	2301      	movs	r3, #1
 80119dc:	6144      	str	r4, [r0, #20]
 80119de:	6103      	str	r3, [r0, #16]
 80119e0:	bd10      	pop	{r4, pc}
 80119e2:	bf00      	nop
 80119e4:	08015b7e 	.word	0x08015b7e
 80119e8:	08015b8f 	.word	0x08015b8f

080119ec <__multiply>:
 80119ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f0:	4614      	mov	r4, r2
 80119f2:	690a      	ldr	r2, [r1, #16]
 80119f4:	6923      	ldr	r3, [r4, #16]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	bfa8      	it	ge
 80119fa:	4623      	movge	r3, r4
 80119fc:	460f      	mov	r7, r1
 80119fe:	bfa4      	itt	ge
 8011a00:	460c      	movge	r4, r1
 8011a02:	461f      	movge	r7, r3
 8011a04:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011a08:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011a0c:	68a3      	ldr	r3, [r4, #8]
 8011a0e:	6861      	ldr	r1, [r4, #4]
 8011a10:	eb0a 0609 	add.w	r6, sl, r9
 8011a14:	42b3      	cmp	r3, r6
 8011a16:	b085      	sub	sp, #20
 8011a18:	bfb8      	it	lt
 8011a1a:	3101      	addlt	r1, #1
 8011a1c:	f7ff fe92 	bl	8011744 <_Balloc>
 8011a20:	b930      	cbnz	r0, 8011a30 <__multiply+0x44>
 8011a22:	4602      	mov	r2, r0
 8011a24:	4b44      	ldr	r3, [pc, #272]	@ (8011b38 <__multiply+0x14c>)
 8011a26:	4845      	ldr	r0, [pc, #276]	@ (8011b3c <__multiply+0x150>)
 8011a28:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011a2c:	f7fe ffd4 	bl	80109d8 <__assert_func>
 8011a30:	f100 0514 	add.w	r5, r0, #20
 8011a34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011a38:	462b      	mov	r3, r5
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	4543      	cmp	r3, r8
 8011a3e:	d321      	bcc.n	8011a84 <__multiply+0x98>
 8011a40:	f107 0114 	add.w	r1, r7, #20
 8011a44:	f104 0214 	add.w	r2, r4, #20
 8011a48:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011a4c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011a50:	9302      	str	r3, [sp, #8]
 8011a52:	1b13      	subs	r3, r2, r4
 8011a54:	3b15      	subs	r3, #21
 8011a56:	f023 0303 	bic.w	r3, r3, #3
 8011a5a:	3304      	adds	r3, #4
 8011a5c:	f104 0715 	add.w	r7, r4, #21
 8011a60:	42ba      	cmp	r2, r7
 8011a62:	bf38      	it	cc
 8011a64:	2304      	movcc	r3, #4
 8011a66:	9301      	str	r3, [sp, #4]
 8011a68:	9b02      	ldr	r3, [sp, #8]
 8011a6a:	9103      	str	r1, [sp, #12]
 8011a6c:	428b      	cmp	r3, r1
 8011a6e:	d80c      	bhi.n	8011a8a <__multiply+0x9e>
 8011a70:	2e00      	cmp	r6, #0
 8011a72:	dd03      	ble.n	8011a7c <__multiply+0x90>
 8011a74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d05b      	beq.n	8011b34 <__multiply+0x148>
 8011a7c:	6106      	str	r6, [r0, #16]
 8011a7e:	b005      	add	sp, #20
 8011a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a84:	f843 2b04 	str.w	r2, [r3], #4
 8011a88:	e7d8      	b.n	8011a3c <__multiply+0x50>
 8011a8a:	f8b1 a000 	ldrh.w	sl, [r1]
 8011a8e:	f1ba 0f00 	cmp.w	sl, #0
 8011a92:	d024      	beq.n	8011ade <__multiply+0xf2>
 8011a94:	f104 0e14 	add.w	lr, r4, #20
 8011a98:	46a9      	mov	r9, r5
 8011a9a:	f04f 0c00 	mov.w	ip, #0
 8011a9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011aa2:	f8d9 3000 	ldr.w	r3, [r9]
 8011aa6:	fa1f fb87 	uxth.w	fp, r7
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	fb0a 330b 	mla	r3, sl, fp, r3
 8011ab0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011ab4:	f8d9 7000 	ldr.w	r7, [r9]
 8011ab8:	4463      	add	r3, ip
 8011aba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011abe:	fb0a c70b 	mla	r7, sl, fp, ip
 8011ac2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011acc:	4572      	cmp	r2, lr
 8011ace:	f849 3b04 	str.w	r3, [r9], #4
 8011ad2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011ad6:	d8e2      	bhi.n	8011a9e <__multiply+0xb2>
 8011ad8:	9b01      	ldr	r3, [sp, #4]
 8011ada:	f845 c003 	str.w	ip, [r5, r3]
 8011ade:	9b03      	ldr	r3, [sp, #12]
 8011ae0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011ae4:	3104      	adds	r1, #4
 8011ae6:	f1b9 0f00 	cmp.w	r9, #0
 8011aea:	d021      	beq.n	8011b30 <__multiply+0x144>
 8011aec:	682b      	ldr	r3, [r5, #0]
 8011aee:	f104 0c14 	add.w	ip, r4, #20
 8011af2:	46ae      	mov	lr, r5
 8011af4:	f04f 0a00 	mov.w	sl, #0
 8011af8:	f8bc b000 	ldrh.w	fp, [ip]
 8011afc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011b00:	fb09 770b 	mla	r7, r9, fp, r7
 8011b04:	4457      	add	r7, sl
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011b0c:	f84e 3b04 	str.w	r3, [lr], #4
 8011b10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011b14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011b18:	f8be 3000 	ldrh.w	r3, [lr]
 8011b1c:	fb09 330a 	mla	r3, r9, sl, r3
 8011b20:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011b24:	4562      	cmp	r2, ip
 8011b26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011b2a:	d8e5      	bhi.n	8011af8 <__multiply+0x10c>
 8011b2c:	9f01      	ldr	r7, [sp, #4]
 8011b2e:	51eb      	str	r3, [r5, r7]
 8011b30:	3504      	adds	r5, #4
 8011b32:	e799      	b.n	8011a68 <__multiply+0x7c>
 8011b34:	3e01      	subs	r6, #1
 8011b36:	e79b      	b.n	8011a70 <__multiply+0x84>
 8011b38:	08015b7e 	.word	0x08015b7e
 8011b3c:	08015b8f 	.word	0x08015b8f

08011b40 <__pow5mult>:
 8011b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b44:	4615      	mov	r5, r2
 8011b46:	f012 0203 	ands.w	r2, r2, #3
 8011b4a:	4607      	mov	r7, r0
 8011b4c:	460e      	mov	r6, r1
 8011b4e:	d007      	beq.n	8011b60 <__pow5mult+0x20>
 8011b50:	4c25      	ldr	r4, [pc, #148]	@ (8011be8 <__pow5mult+0xa8>)
 8011b52:	3a01      	subs	r2, #1
 8011b54:	2300      	movs	r3, #0
 8011b56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011b5a:	f7ff fe55 	bl	8011808 <__multadd>
 8011b5e:	4606      	mov	r6, r0
 8011b60:	10ad      	asrs	r5, r5, #2
 8011b62:	d03d      	beq.n	8011be0 <__pow5mult+0xa0>
 8011b64:	69fc      	ldr	r4, [r7, #28]
 8011b66:	b97c      	cbnz	r4, 8011b88 <__pow5mult+0x48>
 8011b68:	2010      	movs	r0, #16
 8011b6a:	f7fd fd0f 	bl	800f58c <malloc>
 8011b6e:	4602      	mov	r2, r0
 8011b70:	61f8      	str	r0, [r7, #28]
 8011b72:	b928      	cbnz	r0, 8011b80 <__pow5mult+0x40>
 8011b74:	4b1d      	ldr	r3, [pc, #116]	@ (8011bec <__pow5mult+0xac>)
 8011b76:	481e      	ldr	r0, [pc, #120]	@ (8011bf0 <__pow5mult+0xb0>)
 8011b78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011b7c:	f7fe ff2c 	bl	80109d8 <__assert_func>
 8011b80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011b84:	6004      	str	r4, [r0, #0]
 8011b86:	60c4      	str	r4, [r0, #12]
 8011b88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011b8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011b90:	b94c      	cbnz	r4, 8011ba6 <__pow5mult+0x66>
 8011b92:	f240 2171 	movw	r1, #625	@ 0x271
 8011b96:	4638      	mov	r0, r7
 8011b98:	f7ff ff12 	bl	80119c0 <__i2b>
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011ba2:	4604      	mov	r4, r0
 8011ba4:	6003      	str	r3, [r0, #0]
 8011ba6:	f04f 0900 	mov.w	r9, #0
 8011baa:	07eb      	lsls	r3, r5, #31
 8011bac:	d50a      	bpl.n	8011bc4 <__pow5mult+0x84>
 8011bae:	4631      	mov	r1, r6
 8011bb0:	4622      	mov	r2, r4
 8011bb2:	4638      	mov	r0, r7
 8011bb4:	f7ff ff1a 	bl	80119ec <__multiply>
 8011bb8:	4631      	mov	r1, r6
 8011bba:	4680      	mov	r8, r0
 8011bbc:	4638      	mov	r0, r7
 8011bbe:	f7ff fe01 	bl	80117c4 <_Bfree>
 8011bc2:	4646      	mov	r6, r8
 8011bc4:	106d      	asrs	r5, r5, #1
 8011bc6:	d00b      	beq.n	8011be0 <__pow5mult+0xa0>
 8011bc8:	6820      	ldr	r0, [r4, #0]
 8011bca:	b938      	cbnz	r0, 8011bdc <__pow5mult+0x9c>
 8011bcc:	4622      	mov	r2, r4
 8011bce:	4621      	mov	r1, r4
 8011bd0:	4638      	mov	r0, r7
 8011bd2:	f7ff ff0b 	bl	80119ec <__multiply>
 8011bd6:	6020      	str	r0, [r4, #0]
 8011bd8:	f8c0 9000 	str.w	r9, [r0]
 8011bdc:	4604      	mov	r4, r0
 8011bde:	e7e4      	b.n	8011baa <__pow5mult+0x6a>
 8011be0:	4630      	mov	r0, r6
 8011be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011be6:	bf00      	nop
 8011be8:	08015be8 	.word	0x08015be8
 8011bec:	08015a6c 	.word	0x08015a6c
 8011bf0:	08015b8f 	.word	0x08015b8f

08011bf4 <__lshift>:
 8011bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bf8:	460c      	mov	r4, r1
 8011bfa:	6849      	ldr	r1, [r1, #4]
 8011bfc:	6923      	ldr	r3, [r4, #16]
 8011bfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011c02:	68a3      	ldr	r3, [r4, #8]
 8011c04:	4607      	mov	r7, r0
 8011c06:	4691      	mov	r9, r2
 8011c08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011c0c:	f108 0601 	add.w	r6, r8, #1
 8011c10:	42b3      	cmp	r3, r6
 8011c12:	db0b      	blt.n	8011c2c <__lshift+0x38>
 8011c14:	4638      	mov	r0, r7
 8011c16:	f7ff fd95 	bl	8011744 <_Balloc>
 8011c1a:	4605      	mov	r5, r0
 8011c1c:	b948      	cbnz	r0, 8011c32 <__lshift+0x3e>
 8011c1e:	4602      	mov	r2, r0
 8011c20:	4b28      	ldr	r3, [pc, #160]	@ (8011cc4 <__lshift+0xd0>)
 8011c22:	4829      	ldr	r0, [pc, #164]	@ (8011cc8 <__lshift+0xd4>)
 8011c24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011c28:	f7fe fed6 	bl	80109d8 <__assert_func>
 8011c2c:	3101      	adds	r1, #1
 8011c2e:	005b      	lsls	r3, r3, #1
 8011c30:	e7ee      	b.n	8011c10 <__lshift+0x1c>
 8011c32:	2300      	movs	r3, #0
 8011c34:	f100 0114 	add.w	r1, r0, #20
 8011c38:	f100 0210 	add.w	r2, r0, #16
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	4553      	cmp	r3, sl
 8011c40:	db33      	blt.n	8011caa <__lshift+0xb6>
 8011c42:	6920      	ldr	r0, [r4, #16]
 8011c44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011c48:	f104 0314 	add.w	r3, r4, #20
 8011c4c:	f019 091f 	ands.w	r9, r9, #31
 8011c50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011c54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011c58:	d02b      	beq.n	8011cb2 <__lshift+0xbe>
 8011c5a:	f1c9 0e20 	rsb	lr, r9, #32
 8011c5e:	468a      	mov	sl, r1
 8011c60:	2200      	movs	r2, #0
 8011c62:	6818      	ldr	r0, [r3, #0]
 8011c64:	fa00 f009 	lsl.w	r0, r0, r9
 8011c68:	4310      	orrs	r0, r2
 8011c6a:	f84a 0b04 	str.w	r0, [sl], #4
 8011c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c72:	459c      	cmp	ip, r3
 8011c74:	fa22 f20e 	lsr.w	r2, r2, lr
 8011c78:	d8f3      	bhi.n	8011c62 <__lshift+0x6e>
 8011c7a:	ebac 0304 	sub.w	r3, ip, r4
 8011c7e:	3b15      	subs	r3, #21
 8011c80:	f023 0303 	bic.w	r3, r3, #3
 8011c84:	3304      	adds	r3, #4
 8011c86:	f104 0015 	add.w	r0, r4, #21
 8011c8a:	4584      	cmp	ip, r0
 8011c8c:	bf38      	it	cc
 8011c8e:	2304      	movcc	r3, #4
 8011c90:	50ca      	str	r2, [r1, r3]
 8011c92:	b10a      	cbz	r2, 8011c98 <__lshift+0xa4>
 8011c94:	f108 0602 	add.w	r6, r8, #2
 8011c98:	3e01      	subs	r6, #1
 8011c9a:	4638      	mov	r0, r7
 8011c9c:	612e      	str	r6, [r5, #16]
 8011c9e:	4621      	mov	r1, r4
 8011ca0:	f7ff fd90 	bl	80117c4 <_Bfree>
 8011ca4:	4628      	mov	r0, r5
 8011ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011caa:	f842 0f04 	str.w	r0, [r2, #4]!
 8011cae:	3301      	adds	r3, #1
 8011cb0:	e7c5      	b.n	8011c3e <__lshift+0x4a>
 8011cb2:	3904      	subs	r1, #4
 8011cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8011cbc:	459c      	cmp	ip, r3
 8011cbe:	d8f9      	bhi.n	8011cb4 <__lshift+0xc0>
 8011cc0:	e7ea      	b.n	8011c98 <__lshift+0xa4>
 8011cc2:	bf00      	nop
 8011cc4:	08015b7e 	.word	0x08015b7e
 8011cc8:	08015b8f 	.word	0x08015b8f

08011ccc <__mcmp>:
 8011ccc:	690a      	ldr	r2, [r1, #16]
 8011cce:	4603      	mov	r3, r0
 8011cd0:	6900      	ldr	r0, [r0, #16]
 8011cd2:	1a80      	subs	r0, r0, r2
 8011cd4:	b530      	push	{r4, r5, lr}
 8011cd6:	d10e      	bne.n	8011cf6 <__mcmp+0x2a>
 8011cd8:	3314      	adds	r3, #20
 8011cda:	3114      	adds	r1, #20
 8011cdc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011ce0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011ce4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011ce8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011cec:	4295      	cmp	r5, r2
 8011cee:	d003      	beq.n	8011cf8 <__mcmp+0x2c>
 8011cf0:	d205      	bcs.n	8011cfe <__mcmp+0x32>
 8011cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8011cf6:	bd30      	pop	{r4, r5, pc}
 8011cf8:	42a3      	cmp	r3, r4
 8011cfa:	d3f3      	bcc.n	8011ce4 <__mcmp+0x18>
 8011cfc:	e7fb      	b.n	8011cf6 <__mcmp+0x2a>
 8011cfe:	2001      	movs	r0, #1
 8011d00:	e7f9      	b.n	8011cf6 <__mcmp+0x2a>
	...

08011d04 <__mdiff>:
 8011d04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d08:	4689      	mov	r9, r1
 8011d0a:	4606      	mov	r6, r0
 8011d0c:	4611      	mov	r1, r2
 8011d0e:	4648      	mov	r0, r9
 8011d10:	4614      	mov	r4, r2
 8011d12:	f7ff ffdb 	bl	8011ccc <__mcmp>
 8011d16:	1e05      	subs	r5, r0, #0
 8011d18:	d112      	bne.n	8011d40 <__mdiff+0x3c>
 8011d1a:	4629      	mov	r1, r5
 8011d1c:	4630      	mov	r0, r6
 8011d1e:	f7ff fd11 	bl	8011744 <_Balloc>
 8011d22:	4602      	mov	r2, r0
 8011d24:	b928      	cbnz	r0, 8011d32 <__mdiff+0x2e>
 8011d26:	4b3f      	ldr	r3, [pc, #252]	@ (8011e24 <__mdiff+0x120>)
 8011d28:	f240 2137 	movw	r1, #567	@ 0x237
 8011d2c:	483e      	ldr	r0, [pc, #248]	@ (8011e28 <__mdiff+0x124>)
 8011d2e:	f7fe fe53 	bl	80109d8 <__assert_func>
 8011d32:	2301      	movs	r3, #1
 8011d34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011d38:	4610      	mov	r0, r2
 8011d3a:	b003      	add	sp, #12
 8011d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d40:	bfbc      	itt	lt
 8011d42:	464b      	movlt	r3, r9
 8011d44:	46a1      	movlt	r9, r4
 8011d46:	4630      	mov	r0, r6
 8011d48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011d4c:	bfba      	itte	lt
 8011d4e:	461c      	movlt	r4, r3
 8011d50:	2501      	movlt	r5, #1
 8011d52:	2500      	movge	r5, #0
 8011d54:	f7ff fcf6 	bl	8011744 <_Balloc>
 8011d58:	4602      	mov	r2, r0
 8011d5a:	b918      	cbnz	r0, 8011d64 <__mdiff+0x60>
 8011d5c:	4b31      	ldr	r3, [pc, #196]	@ (8011e24 <__mdiff+0x120>)
 8011d5e:	f240 2145 	movw	r1, #581	@ 0x245
 8011d62:	e7e3      	b.n	8011d2c <__mdiff+0x28>
 8011d64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011d68:	6926      	ldr	r6, [r4, #16]
 8011d6a:	60c5      	str	r5, [r0, #12]
 8011d6c:	f109 0310 	add.w	r3, r9, #16
 8011d70:	f109 0514 	add.w	r5, r9, #20
 8011d74:	f104 0e14 	add.w	lr, r4, #20
 8011d78:	f100 0b14 	add.w	fp, r0, #20
 8011d7c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011d80:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011d84:	9301      	str	r3, [sp, #4]
 8011d86:	46d9      	mov	r9, fp
 8011d88:	f04f 0c00 	mov.w	ip, #0
 8011d8c:	9b01      	ldr	r3, [sp, #4]
 8011d8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011d92:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011d96:	9301      	str	r3, [sp, #4]
 8011d98:	fa1f f38a 	uxth.w	r3, sl
 8011d9c:	4619      	mov	r1, r3
 8011d9e:	b283      	uxth	r3, r0
 8011da0:	1acb      	subs	r3, r1, r3
 8011da2:	0c00      	lsrs	r0, r0, #16
 8011da4:	4463      	add	r3, ip
 8011da6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011daa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011db4:	4576      	cmp	r6, lr
 8011db6:	f849 3b04 	str.w	r3, [r9], #4
 8011dba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011dbe:	d8e5      	bhi.n	8011d8c <__mdiff+0x88>
 8011dc0:	1b33      	subs	r3, r6, r4
 8011dc2:	3b15      	subs	r3, #21
 8011dc4:	f023 0303 	bic.w	r3, r3, #3
 8011dc8:	3415      	adds	r4, #21
 8011dca:	3304      	adds	r3, #4
 8011dcc:	42a6      	cmp	r6, r4
 8011dce:	bf38      	it	cc
 8011dd0:	2304      	movcc	r3, #4
 8011dd2:	441d      	add	r5, r3
 8011dd4:	445b      	add	r3, fp
 8011dd6:	461e      	mov	r6, r3
 8011dd8:	462c      	mov	r4, r5
 8011dda:	4544      	cmp	r4, r8
 8011ddc:	d30e      	bcc.n	8011dfc <__mdiff+0xf8>
 8011dde:	f108 0103 	add.w	r1, r8, #3
 8011de2:	1b49      	subs	r1, r1, r5
 8011de4:	f021 0103 	bic.w	r1, r1, #3
 8011de8:	3d03      	subs	r5, #3
 8011dea:	45a8      	cmp	r8, r5
 8011dec:	bf38      	it	cc
 8011dee:	2100      	movcc	r1, #0
 8011df0:	440b      	add	r3, r1
 8011df2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011df6:	b191      	cbz	r1, 8011e1e <__mdiff+0x11a>
 8011df8:	6117      	str	r7, [r2, #16]
 8011dfa:	e79d      	b.n	8011d38 <__mdiff+0x34>
 8011dfc:	f854 1b04 	ldr.w	r1, [r4], #4
 8011e00:	46e6      	mov	lr, ip
 8011e02:	0c08      	lsrs	r0, r1, #16
 8011e04:	fa1c fc81 	uxtah	ip, ip, r1
 8011e08:	4471      	add	r1, lr
 8011e0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011e0e:	b289      	uxth	r1, r1
 8011e10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011e14:	f846 1b04 	str.w	r1, [r6], #4
 8011e18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011e1c:	e7dd      	b.n	8011dda <__mdiff+0xd6>
 8011e1e:	3f01      	subs	r7, #1
 8011e20:	e7e7      	b.n	8011df2 <__mdiff+0xee>
 8011e22:	bf00      	nop
 8011e24:	08015b7e 	.word	0x08015b7e
 8011e28:	08015b8f 	.word	0x08015b8f

08011e2c <__ulp>:
 8011e2c:	b082      	sub	sp, #8
 8011e2e:	ed8d 0b00 	vstr	d0, [sp]
 8011e32:	9a01      	ldr	r2, [sp, #4]
 8011e34:	4b0f      	ldr	r3, [pc, #60]	@ (8011e74 <__ulp+0x48>)
 8011e36:	4013      	ands	r3, r2
 8011e38:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	dc08      	bgt.n	8011e52 <__ulp+0x26>
 8011e40:	425b      	negs	r3, r3
 8011e42:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011e46:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011e4a:	da04      	bge.n	8011e56 <__ulp+0x2a>
 8011e4c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011e50:	4113      	asrs	r3, r2
 8011e52:	2200      	movs	r2, #0
 8011e54:	e008      	b.n	8011e68 <__ulp+0x3c>
 8011e56:	f1a2 0314 	sub.w	r3, r2, #20
 8011e5a:	2b1e      	cmp	r3, #30
 8011e5c:	bfda      	itte	le
 8011e5e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011e62:	40da      	lsrle	r2, r3
 8011e64:	2201      	movgt	r2, #1
 8011e66:	2300      	movs	r3, #0
 8011e68:	4619      	mov	r1, r3
 8011e6a:	4610      	mov	r0, r2
 8011e6c:	ec41 0b10 	vmov	d0, r0, r1
 8011e70:	b002      	add	sp, #8
 8011e72:	4770      	bx	lr
 8011e74:	7ff00000 	.word	0x7ff00000

08011e78 <__b2d>:
 8011e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e7c:	6906      	ldr	r6, [r0, #16]
 8011e7e:	f100 0814 	add.w	r8, r0, #20
 8011e82:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011e86:	1f37      	subs	r7, r6, #4
 8011e88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011e8c:	4610      	mov	r0, r2
 8011e8e:	f7ff fd4b 	bl	8011928 <__hi0bits>
 8011e92:	f1c0 0320 	rsb	r3, r0, #32
 8011e96:	280a      	cmp	r0, #10
 8011e98:	600b      	str	r3, [r1, #0]
 8011e9a:	491b      	ldr	r1, [pc, #108]	@ (8011f08 <__b2d+0x90>)
 8011e9c:	dc15      	bgt.n	8011eca <__b2d+0x52>
 8011e9e:	f1c0 0c0b 	rsb	ip, r0, #11
 8011ea2:	fa22 f30c 	lsr.w	r3, r2, ip
 8011ea6:	45b8      	cmp	r8, r7
 8011ea8:	ea43 0501 	orr.w	r5, r3, r1
 8011eac:	bf34      	ite	cc
 8011eae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011eb2:	2300      	movcs	r3, #0
 8011eb4:	3015      	adds	r0, #21
 8011eb6:	fa02 f000 	lsl.w	r0, r2, r0
 8011eba:	fa23 f30c 	lsr.w	r3, r3, ip
 8011ebe:	4303      	orrs	r3, r0
 8011ec0:	461c      	mov	r4, r3
 8011ec2:	ec45 4b10 	vmov	d0, r4, r5
 8011ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eca:	45b8      	cmp	r8, r7
 8011ecc:	bf3a      	itte	cc
 8011ece:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011ed2:	f1a6 0708 	subcc.w	r7, r6, #8
 8011ed6:	2300      	movcs	r3, #0
 8011ed8:	380b      	subs	r0, #11
 8011eda:	d012      	beq.n	8011f02 <__b2d+0x8a>
 8011edc:	f1c0 0120 	rsb	r1, r0, #32
 8011ee0:	fa23 f401 	lsr.w	r4, r3, r1
 8011ee4:	4082      	lsls	r2, r0
 8011ee6:	4322      	orrs	r2, r4
 8011ee8:	4547      	cmp	r7, r8
 8011eea:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011eee:	bf8c      	ite	hi
 8011ef0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011ef4:	2200      	movls	r2, #0
 8011ef6:	4083      	lsls	r3, r0
 8011ef8:	40ca      	lsrs	r2, r1
 8011efa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011efe:	4313      	orrs	r3, r2
 8011f00:	e7de      	b.n	8011ec0 <__b2d+0x48>
 8011f02:	ea42 0501 	orr.w	r5, r2, r1
 8011f06:	e7db      	b.n	8011ec0 <__b2d+0x48>
 8011f08:	3ff00000 	.word	0x3ff00000

08011f0c <__d2b>:
 8011f0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f10:	460f      	mov	r7, r1
 8011f12:	2101      	movs	r1, #1
 8011f14:	ec59 8b10 	vmov	r8, r9, d0
 8011f18:	4616      	mov	r6, r2
 8011f1a:	f7ff fc13 	bl	8011744 <_Balloc>
 8011f1e:	4604      	mov	r4, r0
 8011f20:	b930      	cbnz	r0, 8011f30 <__d2b+0x24>
 8011f22:	4602      	mov	r2, r0
 8011f24:	4b23      	ldr	r3, [pc, #140]	@ (8011fb4 <__d2b+0xa8>)
 8011f26:	4824      	ldr	r0, [pc, #144]	@ (8011fb8 <__d2b+0xac>)
 8011f28:	f240 310f 	movw	r1, #783	@ 0x30f
 8011f2c:	f7fe fd54 	bl	80109d8 <__assert_func>
 8011f30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011f34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011f38:	b10d      	cbz	r5, 8011f3e <__d2b+0x32>
 8011f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011f3e:	9301      	str	r3, [sp, #4]
 8011f40:	f1b8 0300 	subs.w	r3, r8, #0
 8011f44:	d023      	beq.n	8011f8e <__d2b+0x82>
 8011f46:	4668      	mov	r0, sp
 8011f48:	9300      	str	r3, [sp, #0]
 8011f4a:	f7ff fd0c 	bl	8011966 <__lo0bits>
 8011f4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011f52:	b1d0      	cbz	r0, 8011f8a <__d2b+0x7e>
 8011f54:	f1c0 0320 	rsb	r3, r0, #32
 8011f58:	fa02 f303 	lsl.w	r3, r2, r3
 8011f5c:	430b      	orrs	r3, r1
 8011f5e:	40c2      	lsrs	r2, r0
 8011f60:	6163      	str	r3, [r4, #20]
 8011f62:	9201      	str	r2, [sp, #4]
 8011f64:	9b01      	ldr	r3, [sp, #4]
 8011f66:	61a3      	str	r3, [r4, #24]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	bf0c      	ite	eq
 8011f6c:	2201      	moveq	r2, #1
 8011f6e:	2202      	movne	r2, #2
 8011f70:	6122      	str	r2, [r4, #16]
 8011f72:	b1a5      	cbz	r5, 8011f9e <__d2b+0x92>
 8011f74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011f78:	4405      	add	r5, r0
 8011f7a:	603d      	str	r5, [r7, #0]
 8011f7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011f80:	6030      	str	r0, [r6, #0]
 8011f82:	4620      	mov	r0, r4
 8011f84:	b003      	add	sp, #12
 8011f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f8a:	6161      	str	r1, [r4, #20]
 8011f8c:	e7ea      	b.n	8011f64 <__d2b+0x58>
 8011f8e:	a801      	add	r0, sp, #4
 8011f90:	f7ff fce9 	bl	8011966 <__lo0bits>
 8011f94:	9b01      	ldr	r3, [sp, #4]
 8011f96:	6163      	str	r3, [r4, #20]
 8011f98:	3020      	adds	r0, #32
 8011f9a:	2201      	movs	r2, #1
 8011f9c:	e7e8      	b.n	8011f70 <__d2b+0x64>
 8011f9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011fa2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011fa6:	6038      	str	r0, [r7, #0]
 8011fa8:	6918      	ldr	r0, [r3, #16]
 8011faa:	f7ff fcbd 	bl	8011928 <__hi0bits>
 8011fae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011fb2:	e7e5      	b.n	8011f80 <__d2b+0x74>
 8011fb4:	08015b7e 	.word	0x08015b7e
 8011fb8:	08015b8f 	.word	0x08015b8f

08011fbc <__ratio>:
 8011fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc0:	b085      	sub	sp, #20
 8011fc2:	e9cd 1000 	strd	r1, r0, [sp]
 8011fc6:	a902      	add	r1, sp, #8
 8011fc8:	f7ff ff56 	bl	8011e78 <__b2d>
 8011fcc:	9800      	ldr	r0, [sp, #0]
 8011fce:	a903      	add	r1, sp, #12
 8011fd0:	ec55 4b10 	vmov	r4, r5, d0
 8011fd4:	f7ff ff50 	bl	8011e78 <__b2d>
 8011fd8:	9b01      	ldr	r3, [sp, #4]
 8011fda:	6919      	ldr	r1, [r3, #16]
 8011fdc:	9b00      	ldr	r3, [sp, #0]
 8011fde:	691b      	ldr	r3, [r3, #16]
 8011fe0:	1ac9      	subs	r1, r1, r3
 8011fe2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011fe6:	1a9b      	subs	r3, r3, r2
 8011fe8:	ec5b ab10 	vmov	sl, fp, d0
 8011fec:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	bfce      	itee	gt
 8011ff4:	462a      	movgt	r2, r5
 8011ff6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011ffa:	465a      	movle	r2, fp
 8011ffc:	462f      	mov	r7, r5
 8011ffe:	46d9      	mov	r9, fp
 8012000:	bfcc      	ite	gt
 8012002:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012006:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801200a:	464b      	mov	r3, r9
 801200c:	4652      	mov	r2, sl
 801200e:	4620      	mov	r0, r4
 8012010:	4639      	mov	r1, r7
 8012012:	f7ee fc2b 	bl	800086c <__aeabi_ddiv>
 8012016:	ec41 0b10 	vmov	d0, r0, r1
 801201a:	b005      	add	sp, #20
 801201c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012020 <__copybits>:
 8012020:	3901      	subs	r1, #1
 8012022:	b570      	push	{r4, r5, r6, lr}
 8012024:	1149      	asrs	r1, r1, #5
 8012026:	6914      	ldr	r4, [r2, #16]
 8012028:	3101      	adds	r1, #1
 801202a:	f102 0314 	add.w	r3, r2, #20
 801202e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012032:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012036:	1f05      	subs	r5, r0, #4
 8012038:	42a3      	cmp	r3, r4
 801203a:	d30c      	bcc.n	8012056 <__copybits+0x36>
 801203c:	1aa3      	subs	r3, r4, r2
 801203e:	3b11      	subs	r3, #17
 8012040:	f023 0303 	bic.w	r3, r3, #3
 8012044:	3211      	adds	r2, #17
 8012046:	42a2      	cmp	r2, r4
 8012048:	bf88      	it	hi
 801204a:	2300      	movhi	r3, #0
 801204c:	4418      	add	r0, r3
 801204e:	2300      	movs	r3, #0
 8012050:	4288      	cmp	r0, r1
 8012052:	d305      	bcc.n	8012060 <__copybits+0x40>
 8012054:	bd70      	pop	{r4, r5, r6, pc}
 8012056:	f853 6b04 	ldr.w	r6, [r3], #4
 801205a:	f845 6f04 	str.w	r6, [r5, #4]!
 801205e:	e7eb      	b.n	8012038 <__copybits+0x18>
 8012060:	f840 3b04 	str.w	r3, [r0], #4
 8012064:	e7f4      	b.n	8012050 <__copybits+0x30>

08012066 <__any_on>:
 8012066:	f100 0214 	add.w	r2, r0, #20
 801206a:	6900      	ldr	r0, [r0, #16]
 801206c:	114b      	asrs	r3, r1, #5
 801206e:	4298      	cmp	r0, r3
 8012070:	b510      	push	{r4, lr}
 8012072:	db11      	blt.n	8012098 <__any_on+0x32>
 8012074:	dd0a      	ble.n	801208c <__any_on+0x26>
 8012076:	f011 011f 	ands.w	r1, r1, #31
 801207a:	d007      	beq.n	801208c <__any_on+0x26>
 801207c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012080:	fa24 f001 	lsr.w	r0, r4, r1
 8012084:	fa00 f101 	lsl.w	r1, r0, r1
 8012088:	428c      	cmp	r4, r1
 801208a:	d10b      	bne.n	80120a4 <__any_on+0x3e>
 801208c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012090:	4293      	cmp	r3, r2
 8012092:	d803      	bhi.n	801209c <__any_on+0x36>
 8012094:	2000      	movs	r0, #0
 8012096:	bd10      	pop	{r4, pc}
 8012098:	4603      	mov	r3, r0
 801209a:	e7f7      	b.n	801208c <__any_on+0x26>
 801209c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80120a0:	2900      	cmp	r1, #0
 80120a2:	d0f5      	beq.n	8012090 <__any_on+0x2a>
 80120a4:	2001      	movs	r0, #1
 80120a6:	e7f6      	b.n	8012096 <__any_on+0x30>

080120a8 <sulp>:
 80120a8:	b570      	push	{r4, r5, r6, lr}
 80120aa:	4604      	mov	r4, r0
 80120ac:	460d      	mov	r5, r1
 80120ae:	ec45 4b10 	vmov	d0, r4, r5
 80120b2:	4616      	mov	r6, r2
 80120b4:	f7ff feba 	bl	8011e2c <__ulp>
 80120b8:	ec51 0b10 	vmov	r0, r1, d0
 80120bc:	b17e      	cbz	r6, 80120de <sulp+0x36>
 80120be:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80120c2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	dd09      	ble.n	80120de <sulp+0x36>
 80120ca:	051b      	lsls	r3, r3, #20
 80120cc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80120d0:	2400      	movs	r4, #0
 80120d2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80120d6:	4622      	mov	r2, r4
 80120d8:	462b      	mov	r3, r5
 80120da:	f7ee fa9d 	bl	8000618 <__aeabi_dmul>
 80120de:	ec41 0b10 	vmov	d0, r0, r1
 80120e2:	bd70      	pop	{r4, r5, r6, pc}
 80120e4:	0000      	movs	r0, r0
	...

080120e8 <_strtod_l>:
 80120e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ec:	b09f      	sub	sp, #124	@ 0x7c
 80120ee:	460c      	mov	r4, r1
 80120f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80120f2:	2200      	movs	r2, #0
 80120f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80120f6:	9005      	str	r0, [sp, #20]
 80120f8:	f04f 0a00 	mov.w	sl, #0
 80120fc:	f04f 0b00 	mov.w	fp, #0
 8012100:	460a      	mov	r2, r1
 8012102:	9219      	str	r2, [sp, #100]	@ 0x64
 8012104:	7811      	ldrb	r1, [r2, #0]
 8012106:	292b      	cmp	r1, #43	@ 0x2b
 8012108:	d04a      	beq.n	80121a0 <_strtod_l+0xb8>
 801210a:	d838      	bhi.n	801217e <_strtod_l+0x96>
 801210c:	290d      	cmp	r1, #13
 801210e:	d832      	bhi.n	8012176 <_strtod_l+0x8e>
 8012110:	2908      	cmp	r1, #8
 8012112:	d832      	bhi.n	801217a <_strtod_l+0x92>
 8012114:	2900      	cmp	r1, #0
 8012116:	d03b      	beq.n	8012190 <_strtod_l+0xa8>
 8012118:	2200      	movs	r2, #0
 801211a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801211c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801211e:	782a      	ldrb	r2, [r5, #0]
 8012120:	2a30      	cmp	r2, #48	@ 0x30
 8012122:	f040 80b3 	bne.w	801228c <_strtod_l+0x1a4>
 8012126:	786a      	ldrb	r2, [r5, #1]
 8012128:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801212c:	2a58      	cmp	r2, #88	@ 0x58
 801212e:	d16e      	bne.n	801220e <_strtod_l+0x126>
 8012130:	9302      	str	r3, [sp, #8]
 8012132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012134:	9301      	str	r3, [sp, #4]
 8012136:	ab1a      	add	r3, sp, #104	@ 0x68
 8012138:	9300      	str	r3, [sp, #0]
 801213a:	4a8e      	ldr	r2, [pc, #568]	@ (8012374 <_strtod_l+0x28c>)
 801213c:	9805      	ldr	r0, [sp, #20]
 801213e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012140:	a919      	add	r1, sp, #100	@ 0x64
 8012142:	f001 fc7f 	bl	8013a44 <__gethex>
 8012146:	f010 060f 	ands.w	r6, r0, #15
 801214a:	4604      	mov	r4, r0
 801214c:	d005      	beq.n	801215a <_strtod_l+0x72>
 801214e:	2e06      	cmp	r6, #6
 8012150:	d128      	bne.n	80121a4 <_strtod_l+0xbc>
 8012152:	3501      	adds	r5, #1
 8012154:	2300      	movs	r3, #0
 8012156:	9519      	str	r5, [sp, #100]	@ 0x64
 8012158:	930b      	str	r3, [sp, #44]	@ 0x2c
 801215a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801215c:	2b00      	cmp	r3, #0
 801215e:	f040 858e 	bne.w	8012c7e <_strtod_l+0xb96>
 8012162:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012164:	b1cb      	cbz	r3, 801219a <_strtod_l+0xb2>
 8012166:	4652      	mov	r2, sl
 8012168:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801216c:	ec43 2b10 	vmov	d0, r2, r3
 8012170:	b01f      	add	sp, #124	@ 0x7c
 8012172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012176:	2920      	cmp	r1, #32
 8012178:	d1ce      	bne.n	8012118 <_strtod_l+0x30>
 801217a:	3201      	adds	r2, #1
 801217c:	e7c1      	b.n	8012102 <_strtod_l+0x1a>
 801217e:	292d      	cmp	r1, #45	@ 0x2d
 8012180:	d1ca      	bne.n	8012118 <_strtod_l+0x30>
 8012182:	2101      	movs	r1, #1
 8012184:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012186:	1c51      	adds	r1, r2, #1
 8012188:	9119      	str	r1, [sp, #100]	@ 0x64
 801218a:	7852      	ldrb	r2, [r2, #1]
 801218c:	2a00      	cmp	r2, #0
 801218e:	d1c5      	bne.n	801211c <_strtod_l+0x34>
 8012190:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012192:	9419      	str	r4, [sp, #100]	@ 0x64
 8012194:	2b00      	cmp	r3, #0
 8012196:	f040 8570 	bne.w	8012c7a <_strtod_l+0xb92>
 801219a:	4652      	mov	r2, sl
 801219c:	465b      	mov	r3, fp
 801219e:	e7e5      	b.n	801216c <_strtod_l+0x84>
 80121a0:	2100      	movs	r1, #0
 80121a2:	e7ef      	b.n	8012184 <_strtod_l+0x9c>
 80121a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80121a6:	b13a      	cbz	r2, 80121b8 <_strtod_l+0xd0>
 80121a8:	2135      	movs	r1, #53	@ 0x35
 80121aa:	a81c      	add	r0, sp, #112	@ 0x70
 80121ac:	f7ff ff38 	bl	8012020 <__copybits>
 80121b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80121b2:	9805      	ldr	r0, [sp, #20]
 80121b4:	f7ff fb06 	bl	80117c4 <_Bfree>
 80121b8:	3e01      	subs	r6, #1
 80121ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80121bc:	2e04      	cmp	r6, #4
 80121be:	d806      	bhi.n	80121ce <_strtod_l+0xe6>
 80121c0:	e8df f006 	tbb	[pc, r6]
 80121c4:	201d0314 	.word	0x201d0314
 80121c8:	14          	.byte	0x14
 80121c9:	00          	.byte	0x00
 80121ca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80121ce:	05e1      	lsls	r1, r4, #23
 80121d0:	bf48      	it	mi
 80121d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80121d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80121da:	0d1b      	lsrs	r3, r3, #20
 80121dc:	051b      	lsls	r3, r3, #20
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d1bb      	bne.n	801215a <_strtod_l+0x72>
 80121e2:	f7fe fbb7 	bl	8010954 <__errno>
 80121e6:	2322      	movs	r3, #34	@ 0x22
 80121e8:	6003      	str	r3, [r0, #0]
 80121ea:	e7b6      	b.n	801215a <_strtod_l+0x72>
 80121ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80121f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80121f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80121f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80121fc:	e7e7      	b.n	80121ce <_strtod_l+0xe6>
 80121fe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801237c <_strtod_l+0x294>
 8012202:	e7e4      	b.n	80121ce <_strtod_l+0xe6>
 8012204:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012208:	f04f 3aff 	mov.w	sl, #4294967295
 801220c:	e7df      	b.n	80121ce <_strtod_l+0xe6>
 801220e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012210:	1c5a      	adds	r2, r3, #1
 8012212:	9219      	str	r2, [sp, #100]	@ 0x64
 8012214:	785b      	ldrb	r3, [r3, #1]
 8012216:	2b30      	cmp	r3, #48	@ 0x30
 8012218:	d0f9      	beq.n	801220e <_strtod_l+0x126>
 801221a:	2b00      	cmp	r3, #0
 801221c:	d09d      	beq.n	801215a <_strtod_l+0x72>
 801221e:	2301      	movs	r3, #1
 8012220:	9309      	str	r3, [sp, #36]	@ 0x24
 8012222:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012224:	930c      	str	r3, [sp, #48]	@ 0x30
 8012226:	2300      	movs	r3, #0
 8012228:	9308      	str	r3, [sp, #32]
 801222a:	930a      	str	r3, [sp, #40]	@ 0x28
 801222c:	461f      	mov	r7, r3
 801222e:	220a      	movs	r2, #10
 8012230:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8012232:	7805      	ldrb	r5, [r0, #0]
 8012234:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8012238:	b2d9      	uxtb	r1, r3
 801223a:	2909      	cmp	r1, #9
 801223c:	d928      	bls.n	8012290 <_strtod_l+0x1a8>
 801223e:	494e      	ldr	r1, [pc, #312]	@ (8012378 <_strtod_l+0x290>)
 8012240:	2201      	movs	r2, #1
 8012242:	f7fe faab 	bl	801079c <strncmp>
 8012246:	2800      	cmp	r0, #0
 8012248:	d032      	beq.n	80122b0 <_strtod_l+0x1c8>
 801224a:	2000      	movs	r0, #0
 801224c:	462a      	mov	r2, r5
 801224e:	4681      	mov	r9, r0
 8012250:	463d      	mov	r5, r7
 8012252:	4603      	mov	r3, r0
 8012254:	2a65      	cmp	r2, #101	@ 0x65
 8012256:	d001      	beq.n	801225c <_strtod_l+0x174>
 8012258:	2a45      	cmp	r2, #69	@ 0x45
 801225a:	d114      	bne.n	8012286 <_strtod_l+0x19e>
 801225c:	b91d      	cbnz	r5, 8012266 <_strtod_l+0x17e>
 801225e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012260:	4302      	orrs	r2, r0
 8012262:	d095      	beq.n	8012190 <_strtod_l+0xa8>
 8012264:	2500      	movs	r5, #0
 8012266:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8012268:	1c62      	adds	r2, r4, #1
 801226a:	9219      	str	r2, [sp, #100]	@ 0x64
 801226c:	7862      	ldrb	r2, [r4, #1]
 801226e:	2a2b      	cmp	r2, #43	@ 0x2b
 8012270:	d077      	beq.n	8012362 <_strtod_l+0x27a>
 8012272:	2a2d      	cmp	r2, #45	@ 0x2d
 8012274:	d07b      	beq.n	801236e <_strtod_l+0x286>
 8012276:	f04f 0c00 	mov.w	ip, #0
 801227a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801227e:	2909      	cmp	r1, #9
 8012280:	f240 8082 	bls.w	8012388 <_strtod_l+0x2a0>
 8012284:	9419      	str	r4, [sp, #100]	@ 0x64
 8012286:	f04f 0800 	mov.w	r8, #0
 801228a:	e0a2      	b.n	80123d2 <_strtod_l+0x2ea>
 801228c:	2300      	movs	r3, #0
 801228e:	e7c7      	b.n	8012220 <_strtod_l+0x138>
 8012290:	2f08      	cmp	r7, #8
 8012292:	bfd5      	itete	le
 8012294:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8012296:	9908      	ldrgt	r1, [sp, #32]
 8012298:	fb02 3301 	mlale	r3, r2, r1, r3
 801229c:	fb02 3301 	mlagt	r3, r2, r1, r3
 80122a0:	f100 0001 	add.w	r0, r0, #1
 80122a4:	bfd4      	ite	le
 80122a6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80122a8:	9308      	strgt	r3, [sp, #32]
 80122aa:	3701      	adds	r7, #1
 80122ac:	9019      	str	r0, [sp, #100]	@ 0x64
 80122ae:	e7bf      	b.n	8012230 <_strtod_l+0x148>
 80122b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80122b2:	1c5a      	adds	r2, r3, #1
 80122b4:	9219      	str	r2, [sp, #100]	@ 0x64
 80122b6:	785a      	ldrb	r2, [r3, #1]
 80122b8:	b37f      	cbz	r7, 801231a <_strtod_l+0x232>
 80122ba:	4681      	mov	r9, r0
 80122bc:	463d      	mov	r5, r7
 80122be:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80122c2:	2b09      	cmp	r3, #9
 80122c4:	d912      	bls.n	80122ec <_strtod_l+0x204>
 80122c6:	2301      	movs	r3, #1
 80122c8:	e7c4      	b.n	8012254 <_strtod_l+0x16c>
 80122ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80122cc:	1c5a      	adds	r2, r3, #1
 80122ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80122d0:	785a      	ldrb	r2, [r3, #1]
 80122d2:	3001      	adds	r0, #1
 80122d4:	2a30      	cmp	r2, #48	@ 0x30
 80122d6:	d0f8      	beq.n	80122ca <_strtod_l+0x1e2>
 80122d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80122dc:	2b08      	cmp	r3, #8
 80122de:	f200 84d3 	bhi.w	8012c88 <_strtod_l+0xba0>
 80122e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80122e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80122e6:	4681      	mov	r9, r0
 80122e8:	2000      	movs	r0, #0
 80122ea:	4605      	mov	r5, r0
 80122ec:	3a30      	subs	r2, #48	@ 0x30
 80122ee:	f100 0301 	add.w	r3, r0, #1
 80122f2:	d02a      	beq.n	801234a <_strtod_l+0x262>
 80122f4:	4499      	add	r9, r3
 80122f6:	eb00 0c05 	add.w	ip, r0, r5
 80122fa:	462b      	mov	r3, r5
 80122fc:	210a      	movs	r1, #10
 80122fe:	4563      	cmp	r3, ip
 8012300:	d10d      	bne.n	801231e <_strtod_l+0x236>
 8012302:	1c69      	adds	r1, r5, #1
 8012304:	4401      	add	r1, r0
 8012306:	4428      	add	r0, r5
 8012308:	2808      	cmp	r0, #8
 801230a:	dc16      	bgt.n	801233a <_strtod_l+0x252>
 801230c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801230e:	230a      	movs	r3, #10
 8012310:	fb03 2300 	mla	r3, r3, r0, r2
 8012314:	930a      	str	r3, [sp, #40]	@ 0x28
 8012316:	2300      	movs	r3, #0
 8012318:	e018      	b.n	801234c <_strtod_l+0x264>
 801231a:	4638      	mov	r0, r7
 801231c:	e7da      	b.n	80122d4 <_strtod_l+0x1ec>
 801231e:	2b08      	cmp	r3, #8
 8012320:	f103 0301 	add.w	r3, r3, #1
 8012324:	dc03      	bgt.n	801232e <_strtod_l+0x246>
 8012326:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8012328:	434e      	muls	r6, r1
 801232a:	960a      	str	r6, [sp, #40]	@ 0x28
 801232c:	e7e7      	b.n	80122fe <_strtod_l+0x216>
 801232e:	2b10      	cmp	r3, #16
 8012330:	bfde      	ittt	le
 8012332:	9e08      	ldrle	r6, [sp, #32]
 8012334:	434e      	mulle	r6, r1
 8012336:	9608      	strle	r6, [sp, #32]
 8012338:	e7e1      	b.n	80122fe <_strtod_l+0x216>
 801233a:	280f      	cmp	r0, #15
 801233c:	dceb      	bgt.n	8012316 <_strtod_l+0x22e>
 801233e:	9808      	ldr	r0, [sp, #32]
 8012340:	230a      	movs	r3, #10
 8012342:	fb03 2300 	mla	r3, r3, r0, r2
 8012346:	9308      	str	r3, [sp, #32]
 8012348:	e7e5      	b.n	8012316 <_strtod_l+0x22e>
 801234a:	4629      	mov	r1, r5
 801234c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801234e:	1c50      	adds	r0, r2, #1
 8012350:	9019      	str	r0, [sp, #100]	@ 0x64
 8012352:	7852      	ldrb	r2, [r2, #1]
 8012354:	4618      	mov	r0, r3
 8012356:	460d      	mov	r5, r1
 8012358:	e7b1      	b.n	80122be <_strtod_l+0x1d6>
 801235a:	f04f 0900 	mov.w	r9, #0
 801235e:	2301      	movs	r3, #1
 8012360:	e77d      	b.n	801225e <_strtod_l+0x176>
 8012362:	f04f 0c00 	mov.w	ip, #0
 8012366:	1ca2      	adds	r2, r4, #2
 8012368:	9219      	str	r2, [sp, #100]	@ 0x64
 801236a:	78a2      	ldrb	r2, [r4, #2]
 801236c:	e785      	b.n	801227a <_strtod_l+0x192>
 801236e:	f04f 0c01 	mov.w	ip, #1
 8012372:	e7f8      	b.n	8012366 <_strtod_l+0x27e>
 8012374:	08015d00 	.word	0x08015d00
 8012378:	08015ce8 	.word	0x08015ce8
 801237c:	7ff00000 	.word	0x7ff00000
 8012380:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012382:	1c51      	adds	r1, r2, #1
 8012384:	9119      	str	r1, [sp, #100]	@ 0x64
 8012386:	7852      	ldrb	r2, [r2, #1]
 8012388:	2a30      	cmp	r2, #48	@ 0x30
 801238a:	d0f9      	beq.n	8012380 <_strtod_l+0x298>
 801238c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8012390:	2908      	cmp	r1, #8
 8012392:	f63f af78 	bhi.w	8012286 <_strtod_l+0x19e>
 8012396:	3a30      	subs	r2, #48	@ 0x30
 8012398:	920e      	str	r2, [sp, #56]	@ 0x38
 801239a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801239c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801239e:	f04f 080a 	mov.w	r8, #10
 80123a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80123a4:	1c56      	adds	r6, r2, #1
 80123a6:	9619      	str	r6, [sp, #100]	@ 0x64
 80123a8:	7852      	ldrb	r2, [r2, #1]
 80123aa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80123ae:	f1be 0f09 	cmp.w	lr, #9
 80123b2:	d939      	bls.n	8012428 <_strtod_l+0x340>
 80123b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80123b6:	1a76      	subs	r6, r6, r1
 80123b8:	2e08      	cmp	r6, #8
 80123ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80123be:	dc03      	bgt.n	80123c8 <_strtod_l+0x2e0>
 80123c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80123c2:	4588      	cmp	r8, r1
 80123c4:	bfa8      	it	ge
 80123c6:	4688      	movge	r8, r1
 80123c8:	f1bc 0f00 	cmp.w	ip, #0
 80123cc:	d001      	beq.n	80123d2 <_strtod_l+0x2ea>
 80123ce:	f1c8 0800 	rsb	r8, r8, #0
 80123d2:	2d00      	cmp	r5, #0
 80123d4:	d14e      	bne.n	8012474 <_strtod_l+0x38c>
 80123d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80123d8:	4308      	orrs	r0, r1
 80123da:	f47f aebe 	bne.w	801215a <_strtod_l+0x72>
 80123de:	2b00      	cmp	r3, #0
 80123e0:	f47f aed6 	bne.w	8012190 <_strtod_l+0xa8>
 80123e4:	2a69      	cmp	r2, #105	@ 0x69
 80123e6:	d028      	beq.n	801243a <_strtod_l+0x352>
 80123e8:	dc25      	bgt.n	8012436 <_strtod_l+0x34e>
 80123ea:	2a49      	cmp	r2, #73	@ 0x49
 80123ec:	d025      	beq.n	801243a <_strtod_l+0x352>
 80123ee:	2a4e      	cmp	r2, #78	@ 0x4e
 80123f0:	f47f aece 	bne.w	8012190 <_strtod_l+0xa8>
 80123f4:	499b      	ldr	r1, [pc, #620]	@ (8012664 <_strtod_l+0x57c>)
 80123f6:	a819      	add	r0, sp, #100	@ 0x64
 80123f8:	f001 fd46 	bl	8013e88 <__match>
 80123fc:	2800      	cmp	r0, #0
 80123fe:	f43f aec7 	beq.w	8012190 <_strtod_l+0xa8>
 8012402:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012404:	781b      	ldrb	r3, [r3, #0]
 8012406:	2b28      	cmp	r3, #40	@ 0x28
 8012408:	d12e      	bne.n	8012468 <_strtod_l+0x380>
 801240a:	4997      	ldr	r1, [pc, #604]	@ (8012668 <_strtod_l+0x580>)
 801240c:	aa1c      	add	r2, sp, #112	@ 0x70
 801240e:	a819      	add	r0, sp, #100	@ 0x64
 8012410:	f001 fd4e 	bl	8013eb0 <__hexnan>
 8012414:	2805      	cmp	r0, #5
 8012416:	d127      	bne.n	8012468 <_strtod_l+0x380>
 8012418:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801241a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801241e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012422:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8012426:	e698      	b.n	801215a <_strtod_l+0x72>
 8012428:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801242a:	fb08 2101 	mla	r1, r8, r1, r2
 801242e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8012432:	920e      	str	r2, [sp, #56]	@ 0x38
 8012434:	e7b5      	b.n	80123a2 <_strtod_l+0x2ba>
 8012436:	2a6e      	cmp	r2, #110	@ 0x6e
 8012438:	e7da      	b.n	80123f0 <_strtod_l+0x308>
 801243a:	498c      	ldr	r1, [pc, #560]	@ (801266c <_strtod_l+0x584>)
 801243c:	a819      	add	r0, sp, #100	@ 0x64
 801243e:	f001 fd23 	bl	8013e88 <__match>
 8012442:	2800      	cmp	r0, #0
 8012444:	f43f aea4 	beq.w	8012190 <_strtod_l+0xa8>
 8012448:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801244a:	4989      	ldr	r1, [pc, #548]	@ (8012670 <_strtod_l+0x588>)
 801244c:	3b01      	subs	r3, #1
 801244e:	a819      	add	r0, sp, #100	@ 0x64
 8012450:	9319      	str	r3, [sp, #100]	@ 0x64
 8012452:	f001 fd19 	bl	8013e88 <__match>
 8012456:	b910      	cbnz	r0, 801245e <_strtod_l+0x376>
 8012458:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801245a:	3301      	adds	r3, #1
 801245c:	9319      	str	r3, [sp, #100]	@ 0x64
 801245e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8012680 <_strtod_l+0x598>
 8012462:	f04f 0a00 	mov.w	sl, #0
 8012466:	e678      	b.n	801215a <_strtod_l+0x72>
 8012468:	4882      	ldr	r0, [pc, #520]	@ (8012674 <_strtod_l+0x58c>)
 801246a:	f001 fa61 	bl	8013930 <nan>
 801246e:	ec5b ab10 	vmov	sl, fp, d0
 8012472:	e672      	b.n	801215a <_strtod_l+0x72>
 8012474:	eba8 0309 	sub.w	r3, r8, r9
 8012478:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801247a:	9309      	str	r3, [sp, #36]	@ 0x24
 801247c:	2f00      	cmp	r7, #0
 801247e:	bf08      	it	eq
 8012480:	462f      	moveq	r7, r5
 8012482:	2d10      	cmp	r5, #16
 8012484:	462c      	mov	r4, r5
 8012486:	bfa8      	it	ge
 8012488:	2410      	movge	r4, #16
 801248a:	f7ee f84b 	bl	8000524 <__aeabi_ui2d>
 801248e:	2d09      	cmp	r5, #9
 8012490:	4682      	mov	sl, r0
 8012492:	468b      	mov	fp, r1
 8012494:	dc13      	bgt.n	80124be <_strtod_l+0x3d6>
 8012496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012498:	2b00      	cmp	r3, #0
 801249a:	f43f ae5e 	beq.w	801215a <_strtod_l+0x72>
 801249e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124a0:	dd78      	ble.n	8012594 <_strtod_l+0x4ac>
 80124a2:	2b16      	cmp	r3, #22
 80124a4:	dc5f      	bgt.n	8012566 <_strtod_l+0x47e>
 80124a6:	4974      	ldr	r1, [pc, #464]	@ (8012678 <_strtod_l+0x590>)
 80124a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80124ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124b0:	4652      	mov	r2, sl
 80124b2:	465b      	mov	r3, fp
 80124b4:	f7ee f8b0 	bl	8000618 <__aeabi_dmul>
 80124b8:	4682      	mov	sl, r0
 80124ba:	468b      	mov	fp, r1
 80124bc:	e64d      	b.n	801215a <_strtod_l+0x72>
 80124be:	4b6e      	ldr	r3, [pc, #440]	@ (8012678 <_strtod_l+0x590>)
 80124c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80124c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80124c8:	f7ee f8a6 	bl	8000618 <__aeabi_dmul>
 80124cc:	4682      	mov	sl, r0
 80124ce:	9808      	ldr	r0, [sp, #32]
 80124d0:	468b      	mov	fp, r1
 80124d2:	f7ee f827 	bl	8000524 <__aeabi_ui2d>
 80124d6:	4602      	mov	r2, r0
 80124d8:	460b      	mov	r3, r1
 80124da:	4650      	mov	r0, sl
 80124dc:	4659      	mov	r1, fp
 80124de:	f7ed fee5 	bl	80002ac <__adddf3>
 80124e2:	2d0f      	cmp	r5, #15
 80124e4:	4682      	mov	sl, r0
 80124e6:	468b      	mov	fp, r1
 80124e8:	ddd5      	ble.n	8012496 <_strtod_l+0x3ae>
 80124ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124ec:	1b2c      	subs	r4, r5, r4
 80124ee:	441c      	add	r4, r3
 80124f0:	2c00      	cmp	r4, #0
 80124f2:	f340 8096 	ble.w	8012622 <_strtod_l+0x53a>
 80124f6:	f014 030f 	ands.w	r3, r4, #15
 80124fa:	d00a      	beq.n	8012512 <_strtod_l+0x42a>
 80124fc:	495e      	ldr	r1, [pc, #376]	@ (8012678 <_strtod_l+0x590>)
 80124fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012502:	4652      	mov	r2, sl
 8012504:	465b      	mov	r3, fp
 8012506:	e9d1 0100 	ldrd	r0, r1, [r1]
 801250a:	f7ee f885 	bl	8000618 <__aeabi_dmul>
 801250e:	4682      	mov	sl, r0
 8012510:	468b      	mov	fp, r1
 8012512:	f034 040f 	bics.w	r4, r4, #15
 8012516:	d073      	beq.n	8012600 <_strtod_l+0x518>
 8012518:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801251c:	dd48      	ble.n	80125b0 <_strtod_l+0x4c8>
 801251e:	2400      	movs	r4, #0
 8012520:	46a0      	mov	r8, r4
 8012522:	940a      	str	r4, [sp, #40]	@ 0x28
 8012524:	46a1      	mov	r9, r4
 8012526:	9a05      	ldr	r2, [sp, #20]
 8012528:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8012680 <_strtod_l+0x598>
 801252c:	2322      	movs	r3, #34	@ 0x22
 801252e:	6013      	str	r3, [r2, #0]
 8012530:	f04f 0a00 	mov.w	sl, #0
 8012534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012536:	2b00      	cmp	r3, #0
 8012538:	f43f ae0f 	beq.w	801215a <_strtod_l+0x72>
 801253c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801253e:	9805      	ldr	r0, [sp, #20]
 8012540:	f7ff f940 	bl	80117c4 <_Bfree>
 8012544:	9805      	ldr	r0, [sp, #20]
 8012546:	4649      	mov	r1, r9
 8012548:	f7ff f93c 	bl	80117c4 <_Bfree>
 801254c:	9805      	ldr	r0, [sp, #20]
 801254e:	4641      	mov	r1, r8
 8012550:	f7ff f938 	bl	80117c4 <_Bfree>
 8012554:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012556:	9805      	ldr	r0, [sp, #20]
 8012558:	f7ff f934 	bl	80117c4 <_Bfree>
 801255c:	9805      	ldr	r0, [sp, #20]
 801255e:	4621      	mov	r1, r4
 8012560:	f7ff f930 	bl	80117c4 <_Bfree>
 8012564:	e5f9      	b.n	801215a <_strtod_l+0x72>
 8012566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012568:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801256c:	4293      	cmp	r3, r2
 801256e:	dbbc      	blt.n	80124ea <_strtod_l+0x402>
 8012570:	4c41      	ldr	r4, [pc, #260]	@ (8012678 <_strtod_l+0x590>)
 8012572:	f1c5 050f 	rsb	r5, r5, #15
 8012576:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801257a:	4652      	mov	r2, sl
 801257c:	465b      	mov	r3, fp
 801257e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012582:	f7ee f849 	bl	8000618 <__aeabi_dmul>
 8012586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012588:	1b5d      	subs	r5, r3, r5
 801258a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801258e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012592:	e78f      	b.n	80124b4 <_strtod_l+0x3cc>
 8012594:	3316      	adds	r3, #22
 8012596:	dba8      	blt.n	80124ea <_strtod_l+0x402>
 8012598:	4b37      	ldr	r3, [pc, #220]	@ (8012678 <_strtod_l+0x590>)
 801259a:	eba9 0808 	sub.w	r8, r9, r8
 801259e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80125a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80125a6:	4650      	mov	r0, sl
 80125a8:	4659      	mov	r1, fp
 80125aa:	f7ee f95f 	bl	800086c <__aeabi_ddiv>
 80125ae:	e783      	b.n	80124b8 <_strtod_l+0x3d0>
 80125b0:	4b32      	ldr	r3, [pc, #200]	@ (801267c <_strtod_l+0x594>)
 80125b2:	9308      	str	r3, [sp, #32]
 80125b4:	2300      	movs	r3, #0
 80125b6:	1124      	asrs	r4, r4, #4
 80125b8:	4650      	mov	r0, sl
 80125ba:	4659      	mov	r1, fp
 80125bc:	461e      	mov	r6, r3
 80125be:	2c01      	cmp	r4, #1
 80125c0:	dc21      	bgt.n	8012606 <_strtod_l+0x51e>
 80125c2:	b10b      	cbz	r3, 80125c8 <_strtod_l+0x4e0>
 80125c4:	4682      	mov	sl, r0
 80125c6:	468b      	mov	fp, r1
 80125c8:	492c      	ldr	r1, [pc, #176]	@ (801267c <_strtod_l+0x594>)
 80125ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80125ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80125d2:	4652      	mov	r2, sl
 80125d4:	465b      	mov	r3, fp
 80125d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125da:	f7ee f81d 	bl	8000618 <__aeabi_dmul>
 80125de:	4b28      	ldr	r3, [pc, #160]	@ (8012680 <_strtod_l+0x598>)
 80125e0:	460a      	mov	r2, r1
 80125e2:	400b      	ands	r3, r1
 80125e4:	4927      	ldr	r1, [pc, #156]	@ (8012684 <_strtod_l+0x59c>)
 80125e6:	428b      	cmp	r3, r1
 80125e8:	4682      	mov	sl, r0
 80125ea:	d898      	bhi.n	801251e <_strtod_l+0x436>
 80125ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80125f0:	428b      	cmp	r3, r1
 80125f2:	bf86      	itte	hi
 80125f4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8012688 <_strtod_l+0x5a0>
 80125f8:	f04f 3aff 	movhi.w	sl, #4294967295
 80125fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012600:	2300      	movs	r3, #0
 8012602:	9308      	str	r3, [sp, #32]
 8012604:	e07a      	b.n	80126fc <_strtod_l+0x614>
 8012606:	07e2      	lsls	r2, r4, #31
 8012608:	d505      	bpl.n	8012616 <_strtod_l+0x52e>
 801260a:	9b08      	ldr	r3, [sp, #32]
 801260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012610:	f7ee f802 	bl	8000618 <__aeabi_dmul>
 8012614:	2301      	movs	r3, #1
 8012616:	9a08      	ldr	r2, [sp, #32]
 8012618:	3208      	adds	r2, #8
 801261a:	3601      	adds	r6, #1
 801261c:	1064      	asrs	r4, r4, #1
 801261e:	9208      	str	r2, [sp, #32]
 8012620:	e7cd      	b.n	80125be <_strtod_l+0x4d6>
 8012622:	d0ed      	beq.n	8012600 <_strtod_l+0x518>
 8012624:	4264      	negs	r4, r4
 8012626:	f014 020f 	ands.w	r2, r4, #15
 801262a:	d00a      	beq.n	8012642 <_strtod_l+0x55a>
 801262c:	4b12      	ldr	r3, [pc, #72]	@ (8012678 <_strtod_l+0x590>)
 801262e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012632:	4650      	mov	r0, sl
 8012634:	4659      	mov	r1, fp
 8012636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263a:	f7ee f917 	bl	800086c <__aeabi_ddiv>
 801263e:	4682      	mov	sl, r0
 8012640:	468b      	mov	fp, r1
 8012642:	1124      	asrs	r4, r4, #4
 8012644:	d0dc      	beq.n	8012600 <_strtod_l+0x518>
 8012646:	2c1f      	cmp	r4, #31
 8012648:	dd20      	ble.n	801268c <_strtod_l+0x5a4>
 801264a:	2400      	movs	r4, #0
 801264c:	46a0      	mov	r8, r4
 801264e:	940a      	str	r4, [sp, #40]	@ 0x28
 8012650:	46a1      	mov	r9, r4
 8012652:	9a05      	ldr	r2, [sp, #20]
 8012654:	2322      	movs	r3, #34	@ 0x22
 8012656:	f04f 0a00 	mov.w	sl, #0
 801265a:	f04f 0b00 	mov.w	fp, #0
 801265e:	6013      	str	r3, [r2, #0]
 8012660:	e768      	b.n	8012534 <_strtod_l+0x44c>
 8012662:	bf00      	nop
 8012664:	08015a42 	.word	0x08015a42
 8012668:	08015cec 	.word	0x08015cec
 801266c:	08015a3a 	.word	0x08015a3a
 8012670:	08015b1c 	.word	0x08015b1c
 8012674:	08015b18 	.word	0x08015b18
 8012678:	08015c20 	.word	0x08015c20
 801267c:	08015bf8 	.word	0x08015bf8
 8012680:	7ff00000 	.word	0x7ff00000
 8012684:	7ca00000 	.word	0x7ca00000
 8012688:	7fefffff 	.word	0x7fefffff
 801268c:	f014 0310 	ands.w	r3, r4, #16
 8012690:	bf18      	it	ne
 8012692:	236a      	movne	r3, #106	@ 0x6a
 8012694:	4ea9      	ldr	r6, [pc, #676]	@ (801293c <_strtod_l+0x854>)
 8012696:	9308      	str	r3, [sp, #32]
 8012698:	4650      	mov	r0, sl
 801269a:	4659      	mov	r1, fp
 801269c:	2300      	movs	r3, #0
 801269e:	07e2      	lsls	r2, r4, #31
 80126a0:	d504      	bpl.n	80126ac <_strtod_l+0x5c4>
 80126a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80126a6:	f7ed ffb7 	bl	8000618 <__aeabi_dmul>
 80126aa:	2301      	movs	r3, #1
 80126ac:	1064      	asrs	r4, r4, #1
 80126ae:	f106 0608 	add.w	r6, r6, #8
 80126b2:	d1f4      	bne.n	801269e <_strtod_l+0x5b6>
 80126b4:	b10b      	cbz	r3, 80126ba <_strtod_l+0x5d2>
 80126b6:	4682      	mov	sl, r0
 80126b8:	468b      	mov	fp, r1
 80126ba:	9b08      	ldr	r3, [sp, #32]
 80126bc:	b1b3      	cbz	r3, 80126ec <_strtod_l+0x604>
 80126be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80126c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	4659      	mov	r1, fp
 80126ca:	dd0f      	ble.n	80126ec <_strtod_l+0x604>
 80126cc:	2b1f      	cmp	r3, #31
 80126ce:	dd55      	ble.n	801277c <_strtod_l+0x694>
 80126d0:	2b34      	cmp	r3, #52	@ 0x34
 80126d2:	bfde      	ittt	le
 80126d4:	f04f 33ff 	movle.w	r3, #4294967295
 80126d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80126dc:	4093      	lslle	r3, r2
 80126de:	f04f 0a00 	mov.w	sl, #0
 80126e2:	bfcc      	ite	gt
 80126e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80126e8:	ea03 0b01 	andle.w	fp, r3, r1
 80126ec:	2200      	movs	r2, #0
 80126ee:	2300      	movs	r3, #0
 80126f0:	4650      	mov	r0, sl
 80126f2:	4659      	mov	r1, fp
 80126f4:	f7ee f9f8 	bl	8000ae8 <__aeabi_dcmpeq>
 80126f8:	2800      	cmp	r0, #0
 80126fa:	d1a6      	bne.n	801264a <_strtod_l+0x562>
 80126fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126fe:	9300      	str	r3, [sp, #0]
 8012700:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012702:	9805      	ldr	r0, [sp, #20]
 8012704:	462b      	mov	r3, r5
 8012706:	463a      	mov	r2, r7
 8012708:	f7ff f8c4 	bl	8011894 <__s2b>
 801270c:	900a      	str	r0, [sp, #40]	@ 0x28
 801270e:	2800      	cmp	r0, #0
 8012710:	f43f af05 	beq.w	801251e <_strtod_l+0x436>
 8012714:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012716:	2a00      	cmp	r2, #0
 8012718:	eba9 0308 	sub.w	r3, r9, r8
 801271c:	bfa8      	it	ge
 801271e:	2300      	movge	r3, #0
 8012720:	9312      	str	r3, [sp, #72]	@ 0x48
 8012722:	2400      	movs	r4, #0
 8012724:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012728:	9316      	str	r3, [sp, #88]	@ 0x58
 801272a:	46a0      	mov	r8, r4
 801272c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801272e:	9805      	ldr	r0, [sp, #20]
 8012730:	6859      	ldr	r1, [r3, #4]
 8012732:	f7ff f807 	bl	8011744 <_Balloc>
 8012736:	4681      	mov	r9, r0
 8012738:	2800      	cmp	r0, #0
 801273a:	f43f aef4 	beq.w	8012526 <_strtod_l+0x43e>
 801273e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012740:	691a      	ldr	r2, [r3, #16]
 8012742:	3202      	adds	r2, #2
 8012744:	f103 010c 	add.w	r1, r3, #12
 8012748:	0092      	lsls	r2, r2, #2
 801274a:	300c      	adds	r0, #12
 801274c:	f7fe f92f 	bl	80109ae <memcpy>
 8012750:	ec4b ab10 	vmov	d0, sl, fp
 8012754:	9805      	ldr	r0, [sp, #20]
 8012756:	aa1c      	add	r2, sp, #112	@ 0x70
 8012758:	a91b      	add	r1, sp, #108	@ 0x6c
 801275a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801275e:	f7ff fbd5 	bl	8011f0c <__d2b>
 8012762:	901a      	str	r0, [sp, #104]	@ 0x68
 8012764:	2800      	cmp	r0, #0
 8012766:	f43f aede 	beq.w	8012526 <_strtod_l+0x43e>
 801276a:	9805      	ldr	r0, [sp, #20]
 801276c:	2101      	movs	r1, #1
 801276e:	f7ff f927 	bl	80119c0 <__i2b>
 8012772:	4680      	mov	r8, r0
 8012774:	b948      	cbnz	r0, 801278a <_strtod_l+0x6a2>
 8012776:	f04f 0800 	mov.w	r8, #0
 801277a:	e6d4      	b.n	8012526 <_strtod_l+0x43e>
 801277c:	f04f 32ff 	mov.w	r2, #4294967295
 8012780:	fa02 f303 	lsl.w	r3, r2, r3
 8012784:	ea03 0a0a 	and.w	sl, r3, sl
 8012788:	e7b0      	b.n	80126ec <_strtod_l+0x604>
 801278a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801278c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801278e:	2d00      	cmp	r5, #0
 8012790:	bfab      	itete	ge
 8012792:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012794:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012796:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012798:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801279a:	bfac      	ite	ge
 801279c:	18ef      	addge	r7, r5, r3
 801279e:	1b5e      	sublt	r6, r3, r5
 80127a0:	9b08      	ldr	r3, [sp, #32]
 80127a2:	1aed      	subs	r5, r5, r3
 80127a4:	4415      	add	r5, r2
 80127a6:	4b66      	ldr	r3, [pc, #408]	@ (8012940 <_strtod_l+0x858>)
 80127a8:	3d01      	subs	r5, #1
 80127aa:	429d      	cmp	r5, r3
 80127ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80127b0:	da50      	bge.n	8012854 <_strtod_l+0x76c>
 80127b2:	1b5b      	subs	r3, r3, r5
 80127b4:	2b1f      	cmp	r3, #31
 80127b6:	eba2 0203 	sub.w	r2, r2, r3
 80127ba:	f04f 0101 	mov.w	r1, #1
 80127be:	dc3d      	bgt.n	801283c <_strtod_l+0x754>
 80127c0:	fa01 f303 	lsl.w	r3, r1, r3
 80127c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80127c6:	2300      	movs	r3, #0
 80127c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80127ca:	18bd      	adds	r5, r7, r2
 80127cc:	9b08      	ldr	r3, [sp, #32]
 80127ce:	42af      	cmp	r7, r5
 80127d0:	4416      	add	r6, r2
 80127d2:	441e      	add	r6, r3
 80127d4:	463b      	mov	r3, r7
 80127d6:	bfa8      	it	ge
 80127d8:	462b      	movge	r3, r5
 80127da:	42b3      	cmp	r3, r6
 80127dc:	bfa8      	it	ge
 80127de:	4633      	movge	r3, r6
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	bfc2      	ittt	gt
 80127e4:	1aed      	subgt	r5, r5, r3
 80127e6:	1af6      	subgt	r6, r6, r3
 80127e8:	1aff      	subgt	r7, r7, r3
 80127ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	dd16      	ble.n	801281e <_strtod_l+0x736>
 80127f0:	4641      	mov	r1, r8
 80127f2:	9805      	ldr	r0, [sp, #20]
 80127f4:	461a      	mov	r2, r3
 80127f6:	f7ff f9a3 	bl	8011b40 <__pow5mult>
 80127fa:	4680      	mov	r8, r0
 80127fc:	2800      	cmp	r0, #0
 80127fe:	d0ba      	beq.n	8012776 <_strtod_l+0x68e>
 8012800:	4601      	mov	r1, r0
 8012802:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012804:	9805      	ldr	r0, [sp, #20]
 8012806:	f7ff f8f1 	bl	80119ec <__multiply>
 801280a:	900e      	str	r0, [sp, #56]	@ 0x38
 801280c:	2800      	cmp	r0, #0
 801280e:	f43f ae8a 	beq.w	8012526 <_strtod_l+0x43e>
 8012812:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012814:	9805      	ldr	r0, [sp, #20]
 8012816:	f7fe ffd5 	bl	80117c4 <_Bfree>
 801281a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801281c:	931a      	str	r3, [sp, #104]	@ 0x68
 801281e:	2d00      	cmp	r5, #0
 8012820:	dc1d      	bgt.n	801285e <_strtod_l+0x776>
 8012822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012824:	2b00      	cmp	r3, #0
 8012826:	dd23      	ble.n	8012870 <_strtod_l+0x788>
 8012828:	4649      	mov	r1, r9
 801282a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801282c:	9805      	ldr	r0, [sp, #20]
 801282e:	f7ff f987 	bl	8011b40 <__pow5mult>
 8012832:	4681      	mov	r9, r0
 8012834:	b9e0      	cbnz	r0, 8012870 <_strtod_l+0x788>
 8012836:	f04f 0900 	mov.w	r9, #0
 801283a:	e674      	b.n	8012526 <_strtod_l+0x43e>
 801283c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012840:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012844:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012848:	35e2      	adds	r5, #226	@ 0xe2
 801284a:	fa01 f305 	lsl.w	r3, r1, r5
 801284e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012850:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012852:	e7ba      	b.n	80127ca <_strtod_l+0x6e2>
 8012854:	2300      	movs	r3, #0
 8012856:	9310      	str	r3, [sp, #64]	@ 0x40
 8012858:	2301      	movs	r3, #1
 801285a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801285c:	e7b5      	b.n	80127ca <_strtod_l+0x6e2>
 801285e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012860:	9805      	ldr	r0, [sp, #20]
 8012862:	462a      	mov	r2, r5
 8012864:	f7ff f9c6 	bl	8011bf4 <__lshift>
 8012868:	901a      	str	r0, [sp, #104]	@ 0x68
 801286a:	2800      	cmp	r0, #0
 801286c:	d1d9      	bne.n	8012822 <_strtod_l+0x73a>
 801286e:	e65a      	b.n	8012526 <_strtod_l+0x43e>
 8012870:	2e00      	cmp	r6, #0
 8012872:	dd07      	ble.n	8012884 <_strtod_l+0x79c>
 8012874:	4649      	mov	r1, r9
 8012876:	9805      	ldr	r0, [sp, #20]
 8012878:	4632      	mov	r2, r6
 801287a:	f7ff f9bb 	bl	8011bf4 <__lshift>
 801287e:	4681      	mov	r9, r0
 8012880:	2800      	cmp	r0, #0
 8012882:	d0d8      	beq.n	8012836 <_strtod_l+0x74e>
 8012884:	2f00      	cmp	r7, #0
 8012886:	dd08      	ble.n	801289a <_strtod_l+0x7b2>
 8012888:	4641      	mov	r1, r8
 801288a:	9805      	ldr	r0, [sp, #20]
 801288c:	463a      	mov	r2, r7
 801288e:	f7ff f9b1 	bl	8011bf4 <__lshift>
 8012892:	4680      	mov	r8, r0
 8012894:	2800      	cmp	r0, #0
 8012896:	f43f ae46 	beq.w	8012526 <_strtod_l+0x43e>
 801289a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801289c:	9805      	ldr	r0, [sp, #20]
 801289e:	464a      	mov	r2, r9
 80128a0:	f7ff fa30 	bl	8011d04 <__mdiff>
 80128a4:	4604      	mov	r4, r0
 80128a6:	2800      	cmp	r0, #0
 80128a8:	f43f ae3d 	beq.w	8012526 <_strtod_l+0x43e>
 80128ac:	68c3      	ldr	r3, [r0, #12]
 80128ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80128b0:	2300      	movs	r3, #0
 80128b2:	60c3      	str	r3, [r0, #12]
 80128b4:	4641      	mov	r1, r8
 80128b6:	f7ff fa09 	bl	8011ccc <__mcmp>
 80128ba:	2800      	cmp	r0, #0
 80128bc:	da46      	bge.n	801294c <_strtod_l+0x864>
 80128be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128c0:	ea53 030a 	orrs.w	r3, r3, sl
 80128c4:	d16c      	bne.n	80129a0 <_strtod_l+0x8b8>
 80128c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d168      	bne.n	80129a0 <_strtod_l+0x8b8>
 80128ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80128d2:	0d1b      	lsrs	r3, r3, #20
 80128d4:	051b      	lsls	r3, r3, #20
 80128d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80128da:	d961      	bls.n	80129a0 <_strtod_l+0x8b8>
 80128dc:	6963      	ldr	r3, [r4, #20]
 80128de:	b913      	cbnz	r3, 80128e6 <_strtod_l+0x7fe>
 80128e0:	6923      	ldr	r3, [r4, #16]
 80128e2:	2b01      	cmp	r3, #1
 80128e4:	dd5c      	ble.n	80129a0 <_strtod_l+0x8b8>
 80128e6:	4621      	mov	r1, r4
 80128e8:	2201      	movs	r2, #1
 80128ea:	9805      	ldr	r0, [sp, #20]
 80128ec:	f7ff f982 	bl	8011bf4 <__lshift>
 80128f0:	4641      	mov	r1, r8
 80128f2:	4604      	mov	r4, r0
 80128f4:	f7ff f9ea 	bl	8011ccc <__mcmp>
 80128f8:	2800      	cmp	r0, #0
 80128fa:	dd51      	ble.n	80129a0 <_strtod_l+0x8b8>
 80128fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012900:	9a08      	ldr	r2, [sp, #32]
 8012902:	0d1b      	lsrs	r3, r3, #20
 8012904:	051b      	lsls	r3, r3, #20
 8012906:	2a00      	cmp	r2, #0
 8012908:	d06b      	beq.n	80129e2 <_strtod_l+0x8fa>
 801290a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801290e:	d868      	bhi.n	80129e2 <_strtod_l+0x8fa>
 8012910:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012914:	f67f ae9d 	bls.w	8012652 <_strtod_l+0x56a>
 8012918:	4b0a      	ldr	r3, [pc, #40]	@ (8012944 <_strtod_l+0x85c>)
 801291a:	4650      	mov	r0, sl
 801291c:	4659      	mov	r1, fp
 801291e:	2200      	movs	r2, #0
 8012920:	f7ed fe7a 	bl	8000618 <__aeabi_dmul>
 8012924:	4b08      	ldr	r3, [pc, #32]	@ (8012948 <_strtod_l+0x860>)
 8012926:	400b      	ands	r3, r1
 8012928:	4682      	mov	sl, r0
 801292a:	468b      	mov	fp, r1
 801292c:	2b00      	cmp	r3, #0
 801292e:	f47f ae05 	bne.w	801253c <_strtod_l+0x454>
 8012932:	9a05      	ldr	r2, [sp, #20]
 8012934:	2322      	movs	r3, #34	@ 0x22
 8012936:	6013      	str	r3, [r2, #0]
 8012938:	e600      	b.n	801253c <_strtod_l+0x454>
 801293a:	bf00      	nop
 801293c:	08015d18 	.word	0x08015d18
 8012940:	fffffc02 	.word	0xfffffc02
 8012944:	39500000 	.word	0x39500000
 8012948:	7ff00000 	.word	0x7ff00000
 801294c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012950:	d165      	bne.n	8012a1e <_strtod_l+0x936>
 8012952:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012954:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012958:	b35a      	cbz	r2, 80129b2 <_strtod_l+0x8ca>
 801295a:	4a9f      	ldr	r2, [pc, #636]	@ (8012bd8 <_strtod_l+0xaf0>)
 801295c:	4293      	cmp	r3, r2
 801295e:	d12b      	bne.n	80129b8 <_strtod_l+0x8d0>
 8012960:	9b08      	ldr	r3, [sp, #32]
 8012962:	4651      	mov	r1, sl
 8012964:	b303      	cbz	r3, 80129a8 <_strtod_l+0x8c0>
 8012966:	4b9d      	ldr	r3, [pc, #628]	@ (8012bdc <_strtod_l+0xaf4>)
 8012968:	465a      	mov	r2, fp
 801296a:	4013      	ands	r3, r2
 801296c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012970:	f04f 32ff 	mov.w	r2, #4294967295
 8012974:	d81b      	bhi.n	80129ae <_strtod_l+0x8c6>
 8012976:	0d1b      	lsrs	r3, r3, #20
 8012978:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801297c:	fa02 f303 	lsl.w	r3, r2, r3
 8012980:	4299      	cmp	r1, r3
 8012982:	d119      	bne.n	80129b8 <_strtod_l+0x8d0>
 8012984:	4b96      	ldr	r3, [pc, #600]	@ (8012be0 <_strtod_l+0xaf8>)
 8012986:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012988:	429a      	cmp	r2, r3
 801298a:	d102      	bne.n	8012992 <_strtod_l+0x8aa>
 801298c:	3101      	adds	r1, #1
 801298e:	f43f adca 	beq.w	8012526 <_strtod_l+0x43e>
 8012992:	4b92      	ldr	r3, [pc, #584]	@ (8012bdc <_strtod_l+0xaf4>)
 8012994:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012996:	401a      	ands	r2, r3
 8012998:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801299c:	f04f 0a00 	mov.w	sl, #0
 80129a0:	9b08      	ldr	r3, [sp, #32]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d1b8      	bne.n	8012918 <_strtod_l+0x830>
 80129a6:	e5c9      	b.n	801253c <_strtod_l+0x454>
 80129a8:	f04f 33ff 	mov.w	r3, #4294967295
 80129ac:	e7e8      	b.n	8012980 <_strtod_l+0x898>
 80129ae:	4613      	mov	r3, r2
 80129b0:	e7e6      	b.n	8012980 <_strtod_l+0x898>
 80129b2:	ea53 030a 	orrs.w	r3, r3, sl
 80129b6:	d0a1      	beq.n	80128fc <_strtod_l+0x814>
 80129b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80129ba:	b1db      	cbz	r3, 80129f4 <_strtod_l+0x90c>
 80129bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80129be:	4213      	tst	r3, r2
 80129c0:	d0ee      	beq.n	80129a0 <_strtod_l+0x8b8>
 80129c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129c4:	9a08      	ldr	r2, [sp, #32]
 80129c6:	4650      	mov	r0, sl
 80129c8:	4659      	mov	r1, fp
 80129ca:	b1bb      	cbz	r3, 80129fc <_strtod_l+0x914>
 80129cc:	f7ff fb6c 	bl	80120a8 <sulp>
 80129d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80129d4:	ec53 2b10 	vmov	r2, r3, d0
 80129d8:	f7ed fc68 	bl	80002ac <__adddf3>
 80129dc:	4682      	mov	sl, r0
 80129de:	468b      	mov	fp, r1
 80129e0:	e7de      	b.n	80129a0 <_strtod_l+0x8b8>
 80129e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80129e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80129ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80129ee:	f04f 3aff 	mov.w	sl, #4294967295
 80129f2:	e7d5      	b.n	80129a0 <_strtod_l+0x8b8>
 80129f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80129f6:	ea13 0f0a 	tst.w	r3, sl
 80129fa:	e7e1      	b.n	80129c0 <_strtod_l+0x8d8>
 80129fc:	f7ff fb54 	bl	80120a8 <sulp>
 8012a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012a04:	ec53 2b10 	vmov	r2, r3, d0
 8012a08:	f7ed fc4e 	bl	80002a8 <__aeabi_dsub>
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	2300      	movs	r3, #0
 8012a10:	4682      	mov	sl, r0
 8012a12:	468b      	mov	fp, r1
 8012a14:	f7ee f868 	bl	8000ae8 <__aeabi_dcmpeq>
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	d0c1      	beq.n	80129a0 <_strtod_l+0x8b8>
 8012a1c:	e619      	b.n	8012652 <_strtod_l+0x56a>
 8012a1e:	4641      	mov	r1, r8
 8012a20:	4620      	mov	r0, r4
 8012a22:	f7ff facb 	bl	8011fbc <__ratio>
 8012a26:	ec57 6b10 	vmov	r6, r7, d0
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012a30:	4630      	mov	r0, r6
 8012a32:	4639      	mov	r1, r7
 8012a34:	f7ee f86c 	bl	8000b10 <__aeabi_dcmple>
 8012a38:	2800      	cmp	r0, #0
 8012a3a:	d06f      	beq.n	8012b1c <_strtod_l+0xa34>
 8012a3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d17a      	bne.n	8012b38 <_strtod_l+0xa50>
 8012a42:	f1ba 0f00 	cmp.w	sl, #0
 8012a46:	d158      	bne.n	8012afa <_strtod_l+0xa12>
 8012a48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d15a      	bne.n	8012b08 <_strtod_l+0xa20>
 8012a52:	4b64      	ldr	r3, [pc, #400]	@ (8012be4 <_strtod_l+0xafc>)
 8012a54:	2200      	movs	r2, #0
 8012a56:	4630      	mov	r0, r6
 8012a58:	4639      	mov	r1, r7
 8012a5a:	f7ee f84f 	bl	8000afc <__aeabi_dcmplt>
 8012a5e:	2800      	cmp	r0, #0
 8012a60:	d159      	bne.n	8012b16 <_strtod_l+0xa2e>
 8012a62:	4630      	mov	r0, r6
 8012a64:	4639      	mov	r1, r7
 8012a66:	4b60      	ldr	r3, [pc, #384]	@ (8012be8 <_strtod_l+0xb00>)
 8012a68:	2200      	movs	r2, #0
 8012a6a:	f7ed fdd5 	bl	8000618 <__aeabi_dmul>
 8012a6e:	4606      	mov	r6, r0
 8012a70:	460f      	mov	r7, r1
 8012a72:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012a76:	9606      	str	r6, [sp, #24]
 8012a78:	9307      	str	r3, [sp, #28]
 8012a7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012a7e:	4d57      	ldr	r5, [pc, #348]	@ (8012bdc <_strtod_l+0xaf4>)
 8012a80:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a86:	401d      	ands	r5, r3
 8012a88:	4b58      	ldr	r3, [pc, #352]	@ (8012bec <_strtod_l+0xb04>)
 8012a8a:	429d      	cmp	r5, r3
 8012a8c:	f040 80b2 	bne.w	8012bf4 <_strtod_l+0xb0c>
 8012a90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a92:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012a96:	ec4b ab10 	vmov	d0, sl, fp
 8012a9a:	f7ff f9c7 	bl	8011e2c <__ulp>
 8012a9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012aa2:	ec51 0b10 	vmov	r0, r1, d0
 8012aa6:	f7ed fdb7 	bl	8000618 <__aeabi_dmul>
 8012aaa:	4652      	mov	r2, sl
 8012aac:	465b      	mov	r3, fp
 8012aae:	f7ed fbfd 	bl	80002ac <__adddf3>
 8012ab2:	460b      	mov	r3, r1
 8012ab4:	4949      	ldr	r1, [pc, #292]	@ (8012bdc <_strtod_l+0xaf4>)
 8012ab6:	4a4e      	ldr	r2, [pc, #312]	@ (8012bf0 <_strtod_l+0xb08>)
 8012ab8:	4019      	ands	r1, r3
 8012aba:	4291      	cmp	r1, r2
 8012abc:	4682      	mov	sl, r0
 8012abe:	d942      	bls.n	8012b46 <_strtod_l+0xa5e>
 8012ac0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012ac2:	4b47      	ldr	r3, [pc, #284]	@ (8012be0 <_strtod_l+0xaf8>)
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d103      	bne.n	8012ad0 <_strtod_l+0x9e8>
 8012ac8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012aca:	3301      	adds	r3, #1
 8012acc:	f43f ad2b 	beq.w	8012526 <_strtod_l+0x43e>
 8012ad0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012be0 <_strtod_l+0xaf8>
 8012ad4:	f04f 3aff 	mov.w	sl, #4294967295
 8012ad8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012ada:	9805      	ldr	r0, [sp, #20]
 8012adc:	f7fe fe72 	bl	80117c4 <_Bfree>
 8012ae0:	9805      	ldr	r0, [sp, #20]
 8012ae2:	4649      	mov	r1, r9
 8012ae4:	f7fe fe6e 	bl	80117c4 <_Bfree>
 8012ae8:	9805      	ldr	r0, [sp, #20]
 8012aea:	4641      	mov	r1, r8
 8012aec:	f7fe fe6a 	bl	80117c4 <_Bfree>
 8012af0:	9805      	ldr	r0, [sp, #20]
 8012af2:	4621      	mov	r1, r4
 8012af4:	f7fe fe66 	bl	80117c4 <_Bfree>
 8012af8:	e618      	b.n	801272c <_strtod_l+0x644>
 8012afa:	f1ba 0f01 	cmp.w	sl, #1
 8012afe:	d103      	bne.n	8012b08 <_strtod_l+0xa20>
 8012b00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	f43f ada5 	beq.w	8012652 <_strtod_l+0x56a>
 8012b08:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012bb8 <_strtod_l+0xad0>
 8012b0c:	4f35      	ldr	r7, [pc, #212]	@ (8012be4 <_strtod_l+0xafc>)
 8012b0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012b12:	2600      	movs	r6, #0
 8012b14:	e7b1      	b.n	8012a7a <_strtod_l+0x992>
 8012b16:	4f34      	ldr	r7, [pc, #208]	@ (8012be8 <_strtod_l+0xb00>)
 8012b18:	2600      	movs	r6, #0
 8012b1a:	e7aa      	b.n	8012a72 <_strtod_l+0x98a>
 8012b1c:	4b32      	ldr	r3, [pc, #200]	@ (8012be8 <_strtod_l+0xb00>)
 8012b1e:	4630      	mov	r0, r6
 8012b20:	4639      	mov	r1, r7
 8012b22:	2200      	movs	r2, #0
 8012b24:	f7ed fd78 	bl	8000618 <__aeabi_dmul>
 8012b28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b2a:	4606      	mov	r6, r0
 8012b2c:	460f      	mov	r7, r1
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d09f      	beq.n	8012a72 <_strtod_l+0x98a>
 8012b32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012b36:	e7a0      	b.n	8012a7a <_strtod_l+0x992>
 8012b38:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012bc0 <_strtod_l+0xad8>
 8012b3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012b40:	ec57 6b17 	vmov	r6, r7, d7
 8012b44:	e799      	b.n	8012a7a <_strtod_l+0x992>
 8012b46:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012b4a:	9b08      	ldr	r3, [sp, #32]
 8012b4c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d1c1      	bne.n	8012ad8 <_strtod_l+0x9f0>
 8012b54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012b58:	0d1b      	lsrs	r3, r3, #20
 8012b5a:	051b      	lsls	r3, r3, #20
 8012b5c:	429d      	cmp	r5, r3
 8012b5e:	d1bb      	bne.n	8012ad8 <_strtod_l+0x9f0>
 8012b60:	4630      	mov	r0, r6
 8012b62:	4639      	mov	r1, r7
 8012b64:	f7ee f8b8 	bl	8000cd8 <__aeabi_d2lz>
 8012b68:	f7ed fd28 	bl	80005bc <__aeabi_l2d>
 8012b6c:	4602      	mov	r2, r0
 8012b6e:	460b      	mov	r3, r1
 8012b70:	4630      	mov	r0, r6
 8012b72:	4639      	mov	r1, r7
 8012b74:	f7ed fb98 	bl	80002a8 <__aeabi_dsub>
 8012b78:	460b      	mov	r3, r1
 8012b7a:	4602      	mov	r2, r0
 8012b7c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012b80:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012b84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b86:	ea46 060a 	orr.w	r6, r6, sl
 8012b8a:	431e      	orrs	r6, r3
 8012b8c:	d06f      	beq.n	8012c6e <_strtod_l+0xb86>
 8012b8e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012bc8 <_strtod_l+0xae0>)
 8012b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b94:	f7ed ffb2 	bl	8000afc <__aeabi_dcmplt>
 8012b98:	2800      	cmp	r0, #0
 8012b9a:	f47f accf 	bne.w	801253c <_strtod_l+0x454>
 8012b9e:	a30c      	add	r3, pc, #48	@ (adr r3, 8012bd0 <_strtod_l+0xae8>)
 8012ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012ba8:	f7ed ffc6 	bl	8000b38 <__aeabi_dcmpgt>
 8012bac:	2800      	cmp	r0, #0
 8012bae:	d093      	beq.n	8012ad8 <_strtod_l+0x9f0>
 8012bb0:	e4c4      	b.n	801253c <_strtod_l+0x454>
 8012bb2:	bf00      	nop
 8012bb4:	f3af 8000 	nop.w
 8012bb8:	00000000 	.word	0x00000000
 8012bbc:	bff00000 	.word	0xbff00000
 8012bc0:	00000000 	.word	0x00000000
 8012bc4:	3ff00000 	.word	0x3ff00000
 8012bc8:	94a03595 	.word	0x94a03595
 8012bcc:	3fdfffff 	.word	0x3fdfffff
 8012bd0:	35afe535 	.word	0x35afe535
 8012bd4:	3fe00000 	.word	0x3fe00000
 8012bd8:	000fffff 	.word	0x000fffff
 8012bdc:	7ff00000 	.word	0x7ff00000
 8012be0:	7fefffff 	.word	0x7fefffff
 8012be4:	3ff00000 	.word	0x3ff00000
 8012be8:	3fe00000 	.word	0x3fe00000
 8012bec:	7fe00000 	.word	0x7fe00000
 8012bf0:	7c9fffff 	.word	0x7c9fffff
 8012bf4:	9b08      	ldr	r3, [sp, #32]
 8012bf6:	b323      	cbz	r3, 8012c42 <_strtod_l+0xb5a>
 8012bf8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012bfc:	d821      	bhi.n	8012c42 <_strtod_l+0xb5a>
 8012bfe:	a328      	add	r3, pc, #160	@ (adr r3, 8012ca0 <_strtod_l+0xbb8>)
 8012c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c04:	4630      	mov	r0, r6
 8012c06:	4639      	mov	r1, r7
 8012c08:	f7ed ff82 	bl	8000b10 <__aeabi_dcmple>
 8012c0c:	b1a0      	cbz	r0, 8012c38 <_strtod_l+0xb50>
 8012c0e:	4639      	mov	r1, r7
 8012c10:	4630      	mov	r0, r6
 8012c12:	f7ed ffd9 	bl	8000bc8 <__aeabi_d2uiz>
 8012c16:	2801      	cmp	r0, #1
 8012c18:	bf38      	it	cc
 8012c1a:	2001      	movcc	r0, #1
 8012c1c:	f7ed fc82 	bl	8000524 <__aeabi_ui2d>
 8012c20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c22:	4606      	mov	r6, r0
 8012c24:	460f      	mov	r7, r1
 8012c26:	b9fb      	cbnz	r3, 8012c68 <_strtod_l+0xb80>
 8012c28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012c2c:	9014      	str	r0, [sp, #80]	@ 0x50
 8012c2e:	9315      	str	r3, [sp, #84]	@ 0x54
 8012c30:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012c34:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012c38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012c3a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012c3e:	1b5b      	subs	r3, r3, r5
 8012c40:	9311      	str	r3, [sp, #68]	@ 0x44
 8012c42:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012c46:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8012c4a:	f7ff f8ef 	bl	8011e2c <__ulp>
 8012c4e:	4650      	mov	r0, sl
 8012c50:	ec53 2b10 	vmov	r2, r3, d0
 8012c54:	4659      	mov	r1, fp
 8012c56:	f7ed fcdf 	bl	8000618 <__aeabi_dmul>
 8012c5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012c5e:	f7ed fb25 	bl	80002ac <__adddf3>
 8012c62:	4682      	mov	sl, r0
 8012c64:	468b      	mov	fp, r1
 8012c66:	e770      	b.n	8012b4a <_strtod_l+0xa62>
 8012c68:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8012c6c:	e7e0      	b.n	8012c30 <_strtod_l+0xb48>
 8012c6e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012ca8 <_strtod_l+0xbc0>)
 8012c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c74:	f7ed ff42 	bl	8000afc <__aeabi_dcmplt>
 8012c78:	e798      	b.n	8012bac <_strtod_l+0xac4>
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c7e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012c80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012c82:	6013      	str	r3, [r2, #0]
 8012c84:	f7ff ba6d 	b.w	8012162 <_strtod_l+0x7a>
 8012c88:	2a65      	cmp	r2, #101	@ 0x65
 8012c8a:	f43f ab66 	beq.w	801235a <_strtod_l+0x272>
 8012c8e:	2a45      	cmp	r2, #69	@ 0x45
 8012c90:	f43f ab63 	beq.w	801235a <_strtod_l+0x272>
 8012c94:	2301      	movs	r3, #1
 8012c96:	f7ff bb9e 	b.w	80123d6 <_strtod_l+0x2ee>
 8012c9a:	bf00      	nop
 8012c9c:	f3af 8000 	nop.w
 8012ca0:	ffc00000 	.word	0xffc00000
 8012ca4:	41dfffff 	.word	0x41dfffff
 8012ca8:	94a03595 	.word	0x94a03595
 8012cac:	3fcfffff 	.word	0x3fcfffff

08012cb0 <_strtod_r>:
 8012cb0:	4b01      	ldr	r3, [pc, #4]	@ (8012cb8 <_strtod_r+0x8>)
 8012cb2:	f7ff ba19 	b.w	80120e8 <_strtod_l>
 8012cb6:	bf00      	nop
 8012cb8:	20000114 	.word	0x20000114

08012cbc <_strtol_l.constprop.0>:
 8012cbc:	2b24      	cmp	r3, #36	@ 0x24
 8012cbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cc2:	4686      	mov	lr, r0
 8012cc4:	4690      	mov	r8, r2
 8012cc6:	d801      	bhi.n	8012ccc <_strtol_l.constprop.0+0x10>
 8012cc8:	2b01      	cmp	r3, #1
 8012cca:	d106      	bne.n	8012cda <_strtol_l.constprop.0+0x1e>
 8012ccc:	f7fd fe42 	bl	8010954 <__errno>
 8012cd0:	2316      	movs	r3, #22
 8012cd2:	6003      	str	r3, [r0, #0]
 8012cd4:	2000      	movs	r0, #0
 8012cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cda:	4834      	ldr	r0, [pc, #208]	@ (8012dac <_strtol_l.constprop.0+0xf0>)
 8012cdc:	460d      	mov	r5, r1
 8012cde:	462a      	mov	r2, r5
 8012ce0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ce4:	5d06      	ldrb	r6, [r0, r4]
 8012ce6:	f016 0608 	ands.w	r6, r6, #8
 8012cea:	d1f8      	bne.n	8012cde <_strtol_l.constprop.0+0x22>
 8012cec:	2c2d      	cmp	r4, #45	@ 0x2d
 8012cee:	d12d      	bne.n	8012d4c <_strtol_l.constprop.0+0x90>
 8012cf0:	782c      	ldrb	r4, [r5, #0]
 8012cf2:	2601      	movs	r6, #1
 8012cf4:	1c95      	adds	r5, r2, #2
 8012cf6:	f033 0210 	bics.w	r2, r3, #16
 8012cfa:	d109      	bne.n	8012d10 <_strtol_l.constprop.0+0x54>
 8012cfc:	2c30      	cmp	r4, #48	@ 0x30
 8012cfe:	d12a      	bne.n	8012d56 <_strtol_l.constprop.0+0x9a>
 8012d00:	782a      	ldrb	r2, [r5, #0]
 8012d02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012d06:	2a58      	cmp	r2, #88	@ 0x58
 8012d08:	d125      	bne.n	8012d56 <_strtol_l.constprop.0+0x9a>
 8012d0a:	786c      	ldrb	r4, [r5, #1]
 8012d0c:	2310      	movs	r3, #16
 8012d0e:	3502      	adds	r5, #2
 8012d10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012d14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012d18:	2200      	movs	r2, #0
 8012d1a:	fbbc f9f3 	udiv	r9, ip, r3
 8012d1e:	4610      	mov	r0, r2
 8012d20:	fb03 ca19 	mls	sl, r3, r9, ip
 8012d24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012d28:	2f09      	cmp	r7, #9
 8012d2a:	d81b      	bhi.n	8012d64 <_strtol_l.constprop.0+0xa8>
 8012d2c:	463c      	mov	r4, r7
 8012d2e:	42a3      	cmp	r3, r4
 8012d30:	dd27      	ble.n	8012d82 <_strtol_l.constprop.0+0xc6>
 8012d32:	1c57      	adds	r7, r2, #1
 8012d34:	d007      	beq.n	8012d46 <_strtol_l.constprop.0+0x8a>
 8012d36:	4581      	cmp	r9, r0
 8012d38:	d320      	bcc.n	8012d7c <_strtol_l.constprop.0+0xc0>
 8012d3a:	d101      	bne.n	8012d40 <_strtol_l.constprop.0+0x84>
 8012d3c:	45a2      	cmp	sl, r4
 8012d3e:	db1d      	blt.n	8012d7c <_strtol_l.constprop.0+0xc0>
 8012d40:	fb00 4003 	mla	r0, r0, r3, r4
 8012d44:	2201      	movs	r2, #1
 8012d46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012d4a:	e7eb      	b.n	8012d24 <_strtol_l.constprop.0+0x68>
 8012d4c:	2c2b      	cmp	r4, #43	@ 0x2b
 8012d4e:	bf04      	itt	eq
 8012d50:	782c      	ldrbeq	r4, [r5, #0]
 8012d52:	1c95      	addeq	r5, r2, #2
 8012d54:	e7cf      	b.n	8012cf6 <_strtol_l.constprop.0+0x3a>
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d1da      	bne.n	8012d10 <_strtol_l.constprop.0+0x54>
 8012d5a:	2c30      	cmp	r4, #48	@ 0x30
 8012d5c:	bf0c      	ite	eq
 8012d5e:	2308      	moveq	r3, #8
 8012d60:	230a      	movne	r3, #10
 8012d62:	e7d5      	b.n	8012d10 <_strtol_l.constprop.0+0x54>
 8012d64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012d68:	2f19      	cmp	r7, #25
 8012d6a:	d801      	bhi.n	8012d70 <_strtol_l.constprop.0+0xb4>
 8012d6c:	3c37      	subs	r4, #55	@ 0x37
 8012d6e:	e7de      	b.n	8012d2e <_strtol_l.constprop.0+0x72>
 8012d70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012d74:	2f19      	cmp	r7, #25
 8012d76:	d804      	bhi.n	8012d82 <_strtol_l.constprop.0+0xc6>
 8012d78:	3c57      	subs	r4, #87	@ 0x57
 8012d7a:	e7d8      	b.n	8012d2e <_strtol_l.constprop.0+0x72>
 8012d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8012d80:	e7e1      	b.n	8012d46 <_strtol_l.constprop.0+0x8a>
 8012d82:	1c53      	adds	r3, r2, #1
 8012d84:	d108      	bne.n	8012d98 <_strtol_l.constprop.0+0xdc>
 8012d86:	2322      	movs	r3, #34	@ 0x22
 8012d88:	f8ce 3000 	str.w	r3, [lr]
 8012d8c:	4660      	mov	r0, ip
 8012d8e:	f1b8 0f00 	cmp.w	r8, #0
 8012d92:	d0a0      	beq.n	8012cd6 <_strtol_l.constprop.0+0x1a>
 8012d94:	1e69      	subs	r1, r5, #1
 8012d96:	e006      	b.n	8012da6 <_strtol_l.constprop.0+0xea>
 8012d98:	b106      	cbz	r6, 8012d9c <_strtol_l.constprop.0+0xe0>
 8012d9a:	4240      	negs	r0, r0
 8012d9c:	f1b8 0f00 	cmp.w	r8, #0
 8012da0:	d099      	beq.n	8012cd6 <_strtol_l.constprop.0+0x1a>
 8012da2:	2a00      	cmp	r2, #0
 8012da4:	d1f6      	bne.n	8012d94 <_strtol_l.constprop.0+0xd8>
 8012da6:	f8c8 1000 	str.w	r1, [r8]
 8012daa:	e794      	b.n	8012cd6 <_strtol_l.constprop.0+0x1a>
 8012dac:	08015d41 	.word	0x08015d41

08012db0 <_strtol_r>:
 8012db0:	f7ff bf84 	b.w	8012cbc <_strtol_l.constprop.0>

08012db4 <__ssputs_r>:
 8012db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012db8:	688e      	ldr	r6, [r1, #8]
 8012dba:	461f      	mov	r7, r3
 8012dbc:	42be      	cmp	r6, r7
 8012dbe:	680b      	ldr	r3, [r1, #0]
 8012dc0:	4682      	mov	sl, r0
 8012dc2:	460c      	mov	r4, r1
 8012dc4:	4690      	mov	r8, r2
 8012dc6:	d82d      	bhi.n	8012e24 <__ssputs_r+0x70>
 8012dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012dcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012dd0:	d026      	beq.n	8012e20 <__ssputs_r+0x6c>
 8012dd2:	6965      	ldr	r5, [r4, #20]
 8012dd4:	6909      	ldr	r1, [r1, #16]
 8012dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012dda:	eba3 0901 	sub.w	r9, r3, r1
 8012dde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012de2:	1c7b      	adds	r3, r7, #1
 8012de4:	444b      	add	r3, r9
 8012de6:	106d      	asrs	r5, r5, #1
 8012de8:	429d      	cmp	r5, r3
 8012dea:	bf38      	it	cc
 8012dec:	461d      	movcc	r5, r3
 8012dee:	0553      	lsls	r3, r2, #21
 8012df0:	d527      	bpl.n	8012e42 <__ssputs_r+0x8e>
 8012df2:	4629      	mov	r1, r5
 8012df4:	f7fc fbfc 	bl	800f5f0 <_malloc_r>
 8012df8:	4606      	mov	r6, r0
 8012dfa:	b360      	cbz	r0, 8012e56 <__ssputs_r+0xa2>
 8012dfc:	6921      	ldr	r1, [r4, #16]
 8012dfe:	464a      	mov	r2, r9
 8012e00:	f7fd fdd5 	bl	80109ae <memcpy>
 8012e04:	89a3      	ldrh	r3, [r4, #12]
 8012e06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e0e:	81a3      	strh	r3, [r4, #12]
 8012e10:	6126      	str	r6, [r4, #16]
 8012e12:	6165      	str	r5, [r4, #20]
 8012e14:	444e      	add	r6, r9
 8012e16:	eba5 0509 	sub.w	r5, r5, r9
 8012e1a:	6026      	str	r6, [r4, #0]
 8012e1c:	60a5      	str	r5, [r4, #8]
 8012e1e:	463e      	mov	r6, r7
 8012e20:	42be      	cmp	r6, r7
 8012e22:	d900      	bls.n	8012e26 <__ssputs_r+0x72>
 8012e24:	463e      	mov	r6, r7
 8012e26:	6820      	ldr	r0, [r4, #0]
 8012e28:	4632      	mov	r2, r6
 8012e2a:	4641      	mov	r1, r8
 8012e2c:	f000 fd65 	bl	80138fa <memmove>
 8012e30:	68a3      	ldr	r3, [r4, #8]
 8012e32:	1b9b      	subs	r3, r3, r6
 8012e34:	60a3      	str	r3, [r4, #8]
 8012e36:	6823      	ldr	r3, [r4, #0]
 8012e38:	4433      	add	r3, r6
 8012e3a:	6023      	str	r3, [r4, #0]
 8012e3c:	2000      	movs	r0, #0
 8012e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e42:	462a      	mov	r2, r5
 8012e44:	f001 f8e1 	bl	801400a <_realloc_r>
 8012e48:	4606      	mov	r6, r0
 8012e4a:	2800      	cmp	r0, #0
 8012e4c:	d1e0      	bne.n	8012e10 <__ssputs_r+0x5c>
 8012e4e:	6921      	ldr	r1, [r4, #16]
 8012e50:	4650      	mov	r0, sl
 8012e52:	f7fe fc2d 	bl	80116b0 <_free_r>
 8012e56:	230c      	movs	r3, #12
 8012e58:	f8ca 3000 	str.w	r3, [sl]
 8012e5c:	89a3      	ldrh	r3, [r4, #12]
 8012e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e62:	81a3      	strh	r3, [r4, #12]
 8012e64:	f04f 30ff 	mov.w	r0, #4294967295
 8012e68:	e7e9      	b.n	8012e3e <__ssputs_r+0x8a>
	...

08012e6c <_svfiprintf_r>:
 8012e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e70:	4698      	mov	r8, r3
 8012e72:	898b      	ldrh	r3, [r1, #12]
 8012e74:	061b      	lsls	r3, r3, #24
 8012e76:	b09d      	sub	sp, #116	@ 0x74
 8012e78:	4607      	mov	r7, r0
 8012e7a:	460d      	mov	r5, r1
 8012e7c:	4614      	mov	r4, r2
 8012e7e:	d510      	bpl.n	8012ea2 <_svfiprintf_r+0x36>
 8012e80:	690b      	ldr	r3, [r1, #16]
 8012e82:	b973      	cbnz	r3, 8012ea2 <_svfiprintf_r+0x36>
 8012e84:	2140      	movs	r1, #64	@ 0x40
 8012e86:	f7fc fbb3 	bl	800f5f0 <_malloc_r>
 8012e8a:	6028      	str	r0, [r5, #0]
 8012e8c:	6128      	str	r0, [r5, #16]
 8012e8e:	b930      	cbnz	r0, 8012e9e <_svfiprintf_r+0x32>
 8012e90:	230c      	movs	r3, #12
 8012e92:	603b      	str	r3, [r7, #0]
 8012e94:	f04f 30ff 	mov.w	r0, #4294967295
 8012e98:	b01d      	add	sp, #116	@ 0x74
 8012e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e9e:	2340      	movs	r3, #64	@ 0x40
 8012ea0:	616b      	str	r3, [r5, #20]
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ea6:	2320      	movs	r3, #32
 8012ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8012eb0:	2330      	movs	r3, #48	@ 0x30
 8012eb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013050 <_svfiprintf_r+0x1e4>
 8012eb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012eba:	f04f 0901 	mov.w	r9, #1
 8012ebe:	4623      	mov	r3, r4
 8012ec0:	469a      	mov	sl, r3
 8012ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ec6:	b10a      	cbz	r2, 8012ecc <_svfiprintf_r+0x60>
 8012ec8:	2a25      	cmp	r2, #37	@ 0x25
 8012eca:	d1f9      	bne.n	8012ec0 <_svfiprintf_r+0x54>
 8012ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8012ed0:	d00b      	beq.n	8012eea <_svfiprintf_r+0x7e>
 8012ed2:	465b      	mov	r3, fp
 8012ed4:	4622      	mov	r2, r4
 8012ed6:	4629      	mov	r1, r5
 8012ed8:	4638      	mov	r0, r7
 8012eda:	f7ff ff6b 	bl	8012db4 <__ssputs_r>
 8012ede:	3001      	adds	r0, #1
 8012ee0:	f000 80a7 	beq.w	8013032 <_svfiprintf_r+0x1c6>
 8012ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ee6:	445a      	add	r2, fp
 8012ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8012eea:	f89a 3000 	ldrb.w	r3, [sl]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	f000 809f 	beq.w	8013032 <_svfiprintf_r+0x1c6>
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8012efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012efe:	f10a 0a01 	add.w	sl, sl, #1
 8012f02:	9304      	str	r3, [sp, #16]
 8012f04:	9307      	str	r3, [sp, #28]
 8012f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8012f0c:	4654      	mov	r4, sl
 8012f0e:	2205      	movs	r2, #5
 8012f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f14:	484e      	ldr	r0, [pc, #312]	@ (8013050 <_svfiprintf_r+0x1e4>)
 8012f16:	f7ed f96b 	bl	80001f0 <memchr>
 8012f1a:	9a04      	ldr	r2, [sp, #16]
 8012f1c:	b9d8      	cbnz	r0, 8012f56 <_svfiprintf_r+0xea>
 8012f1e:	06d0      	lsls	r0, r2, #27
 8012f20:	bf44      	itt	mi
 8012f22:	2320      	movmi	r3, #32
 8012f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f28:	0711      	lsls	r1, r2, #28
 8012f2a:	bf44      	itt	mi
 8012f2c:	232b      	movmi	r3, #43	@ 0x2b
 8012f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f32:	f89a 3000 	ldrb.w	r3, [sl]
 8012f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f38:	d015      	beq.n	8012f66 <_svfiprintf_r+0xfa>
 8012f3a:	9a07      	ldr	r2, [sp, #28]
 8012f3c:	4654      	mov	r4, sl
 8012f3e:	2000      	movs	r0, #0
 8012f40:	f04f 0c0a 	mov.w	ip, #10
 8012f44:	4621      	mov	r1, r4
 8012f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f4a:	3b30      	subs	r3, #48	@ 0x30
 8012f4c:	2b09      	cmp	r3, #9
 8012f4e:	d94b      	bls.n	8012fe8 <_svfiprintf_r+0x17c>
 8012f50:	b1b0      	cbz	r0, 8012f80 <_svfiprintf_r+0x114>
 8012f52:	9207      	str	r2, [sp, #28]
 8012f54:	e014      	b.n	8012f80 <_svfiprintf_r+0x114>
 8012f56:	eba0 0308 	sub.w	r3, r0, r8
 8012f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8012f5e:	4313      	orrs	r3, r2
 8012f60:	9304      	str	r3, [sp, #16]
 8012f62:	46a2      	mov	sl, r4
 8012f64:	e7d2      	b.n	8012f0c <_svfiprintf_r+0xa0>
 8012f66:	9b03      	ldr	r3, [sp, #12]
 8012f68:	1d19      	adds	r1, r3, #4
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	9103      	str	r1, [sp, #12]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	bfbb      	ittet	lt
 8012f72:	425b      	neglt	r3, r3
 8012f74:	f042 0202 	orrlt.w	r2, r2, #2
 8012f78:	9307      	strge	r3, [sp, #28]
 8012f7a:	9307      	strlt	r3, [sp, #28]
 8012f7c:	bfb8      	it	lt
 8012f7e:	9204      	strlt	r2, [sp, #16]
 8012f80:	7823      	ldrb	r3, [r4, #0]
 8012f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f84:	d10a      	bne.n	8012f9c <_svfiprintf_r+0x130>
 8012f86:	7863      	ldrb	r3, [r4, #1]
 8012f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f8a:	d132      	bne.n	8012ff2 <_svfiprintf_r+0x186>
 8012f8c:	9b03      	ldr	r3, [sp, #12]
 8012f8e:	1d1a      	adds	r2, r3, #4
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	9203      	str	r2, [sp, #12]
 8012f94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f98:	3402      	adds	r4, #2
 8012f9a:	9305      	str	r3, [sp, #20]
 8012f9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013060 <_svfiprintf_r+0x1f4>
 8012fa0:	7821      	ldrb	r1, [r4, #0]
 8012fa2:	2203      	movs	r2, #3
 8012fa4:	4650      	mov	r0, sl
 8012fa6:	f7ed f923 	bl	80001f0 <memchr>
 8012faa:	b138      	cbz	r0, 8012fbc <_svfiprintf_r+0x150>
 8012fac:	9b04      	ldr	r3, [sp, #16]
 8012fae:	eba0 000a 	sub.w	r0, r0, sl
 8012fb2:	2240      	movs	r2, #64	@ 0x40
 8012fb4:	4082      	lsls	r2, r0
 8012fb6:	4313      	orrs	r3, r2
 8012fb8:	3401      	adds	r4, #1
 8012fba:	9304      	str	r3, [sp, #16]
 8012fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fc0:	4824      	ldr	r0, [pc, #144]	@ (8013054 <_svfiprintf_r+0x1e8>)
 8012fc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012fc6:	2206      	movs	r2, #6
 8012fc8:	f7ed f912 	bl	80001f0 <memchr>
 8012fcc:	2800      	cmp	r0, #0
 8012fce:	d036      	beq.n	801303e <_svfiprintf_r+0x1d2>
 8012fd0:	4b21      	ldr	r3, [pc, #132]	@ (8013058 <_svfiprintf_r+0x1ec>)
 8012fd2:	bb1b      	cbnz	r3, 801301c <_svfiprintf_r+0x1b0>
 8012fd4:	9b03      	ldr	r3, [sp, #12]
 8012fd6:	3307      	adds	r3, #7
 8012fd8:	f023 0307 	bic.w	r3, r3, #7
 8012fdc:	3308      	adds	r3, #8
 8012fde:	9303      	str	r3, [sp, #12]
 8012fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fe2:	4433      	add	r3, r6
 8012fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fe6:	e76a      	b.n	8012ebe <_svfiprintf_r+0x52>
 8012fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012fec:	460c      	mov	r4, r1
 8012fee:	2001      	movs	r0, #1
 8012ff0:	e7a8      	b.n	8012f44 <_svfiprintf_r+0xd8>
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	3401      	adds	r4, #1
 8012ff6:	9305      	str	r3, [sp, #20]
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	f04f 0c0a 	mov.w	ip, #10
 8012ffe:	4620      	mov	r0, r4
 8013000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013004:	3a30      	subs	r2, #48	@ 0x30
 8013006:	2a09      	cmp	r2, #9
 8013008:	d903      	bls.n	8013012 <_svfiprintf_r+0x1a6>
 801300a:	2b00      	cmp	r3, #0
 801300c:	d0c6      	beq.n	8012f9c <_svfiprintf_r+0x130>
 801300e:	9105      	str	r1, [sp, #20]
 8013010:	e7c4      	b.n	8012f9c <_svfiprintf_r+0x130>
 8013012:	fb0c 2101 	mla	r1, ip, r1, r2
 8013016:	4604      	mov	r4, r0
 8013018:	2301      	movs	r3, #1
 801301a:	e7f0      	b.n	8012ffe <_svfiprintf_r+0x192>
 801301c:	ab03      	add	r3, sp, #12
 801301e:	9300      	str	r3, [sp, #0]
 8013020:	462a      	mov	r2, r5
 8013022:	4b0e      	ldr	r3, [pc, #56]	@ (801305c <_svfiprintf_r+0x1f0>)
 8013024:	a904      	add	r1, sp, #16
 8013026:	4638      	mov	r0, r7
 8013028:	f7fc fc50 	bl	800f8cc <_printf_float>
 801302c:	1c42      	adds	r2, r0, #1
 801302e:	4606      	mov	r6, r0
 8013030:	d1d6      	bne.n	8012fe0 <_svfiprintf_r+0x174>
 8013032:	89ab      	ldrh	r3, [r5, #12]
 8013034:	065b      	lsls	r3, r3, #25
 8013036:	f53f af2d 	bmi.w	8012e94 <_svfiprintf_r+0x28>
 801303a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801303c:	e72c      	b.n	8012e98 <_svfiprintf_r+0x2c>
 801303e:	ab03      	add	r3, sp, #12
 8013040:	9300      	str	r3, [sp, #0]
 8013042:	462a      	mov	r2, r5
 8013044:	4b05      	ldr	r3, [pc, #20]	@ (801305c <_svfiprintf_r+0x1f0>)
 8013046:	a904      	add	r1, sp, #16
 8013048:	4638      	mov	r0, r7
 801304a:	f7fc fed7 	bl	800fdfc <_printf_i>
 801304e:	e7ed      	b.n	801302c <_svfiprintf_r+0x1c0>
 8013050:	08015e41 	.word	0x08015e41
 8013054:	08015e4b 	.word	0x08015e4b
 8013058:	0800f8cd 	.word	0x0800f8cd
 801305c:	08012db5 	.word	0x08012db5
 8013060:	08015e47 	.word	0x08015e47

08013064 <_sungetc_r>:
 8013064:	b538      	push	{r3, r4, r5, lr}
 8013066:	1c4b      	adds	r3, r1, #1
 8013068:	4614      	mov	r4, r2
 801306a:	d103      	bne.n	8013074 <_sungetc_r+0x10>
 801306c:	f04f 35ff 	mov.w	r5, #4294967295
 8013070:	4628      	mov	r0, r5
 8013072:	bd38      	pop	{r3, r4, r5, pc}
 8013074:	8993      	ldrh	r3, [r2, #12]
 8013076:	f023 0320 	bic.w	r3, r3, #32
 801307a:	8193      	strh	r3, [r2, #12]
 801307c:	6853      	ldr	r3, [r2, #4]
 801307e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8013080:	b2cd      	uxtb	r5, r1
 8013082:	b18a      	cbz	r2, 80130a8 <_sungetc_r+0x44>
 8013084:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8013086:	429a      	cmp	r2, r3
 8013088:	dd08      	ble.n	801309c <_sungetc_r+0x38>
 801308a:	6823      	ldr	r3, [r4, #0]
 801308c:	1e5a      	subs	r2, r3, #1
 801308e:	6022      	str	r2, [r4, #0]
 8013090:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013094:	6863      	ldr	r3, [r4, #4]
 8013096:	3301      	adds	r3, #1
 8013098:	6063      	str	r3, [r4, #4]
 801309a:	e7e9      	b.n	8013070 <_sungetc_r+0xc>
 801309c:	4621      	mov	r1, r4
 801309e:	f000 fbf2 	bl	8013886 <__submore>
 80130a2:	2800      	cmp	r0, #0
 80130a4:	d0f1      	beq.n	801308a <_sungetc_r+0x26>
 80130a6:	e7e1      	b.n	801306c <_sungetc_r+0x8>
 80130a8:	6921      	ldr	r1, [r4, #16]
 80130aa:	6822      	ldr	r2, [r4, #0]
 80130ac:	b141      	cbz	r1, 80130c0 <_sungetc_r+0x5c>
 80130ae:	4291      	cmp	r1, r2
 80130b0:	d206      	bcs.n	80130c0 <_sungetc_r+0x5c>
 80130b2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80130b6:	42a9      	cmp	r1, r5
 80130b8:	d102      	bne.n	80130c0 <_sungetc_r+0x5c>
 80130ba:	3a01      	subs	r2, #1
 80130bc:	6022      	str	r2, [r4, #0]
 80130be:	e7ea      	b.n	8013096 <_sungetc_r+0x32>
 80130c0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80130c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80130c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80130ca:	2303      	movs	r3, #3
 80130cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80130ce:	4623      	mov	r3, r4
 80130d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80130d4:	6023      	str	r3, [r4, #0]
 80130d6:	2301      	movs	r3, #1
 80130d8:	e7de      	b.n	8013098 <_sungetc_r+0x34>

080130da <__ssrefill_r>:
 80130da:	b510      	push	{r4, lr}
 80130dc:	460c      	mov	r4, r1
 80130de:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80130e0:	b169      	cbz	r1, 80130fe <__ssrefill_r+0x24>
 80130e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80130e6:	4299      	cmp	r1, r3
 80130e8:	d001      	beq.n	80130ee <__ssrefill_r+0x14>
 80130ea:	f7fe fae1 	bl	80116b0 <_free_r>
 80130ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80130f0:	6063      	str	r3, [r4, #4]
 80130f2:	2000      	movs	r0, #0
 80130f4:	6360      	str	r0, [r4, #52]	@ 0x34
 80130f6:	b113      	cbz	r3, 80130fe <__ssrefill_r+0x24>
 80130f8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80130fa:	6023      	str	r3, [r4, #0]
 80130fc:	bd10      	pop	{r4, pc}
 80130fe:	6923      	ldr	r3, [r4, #16]
 8013100:	6023      	str	r3, [r4, #0]
 8013102:	2300      	movs	r3, #0
 8013104:	6063      	str	r3, [r4, #4]
 8013106:	89a3      	ldrh	r3, [r4, #12]
 8013108:	f043 0320 	orr.w	r3, r3, #32
 801310c:	81a3      	strh	r3, [r4, #12]
 801310e:	f04f 30ff 	mov.w	r0, #4294967295
 8013112:	e7f3      	b.n	80130fc <__ssrefill_r+0x22>

08013114 <__ssvfiscanf_r>:
 8013114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013118:	460c      	mov	r4, r1
 801311a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801311e:	2100      	movs	r1, #0
 8013120:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8013124:	49a5      	ldr	r1, [pc, #660]	@ (80133bc <__ssvfiscanf_r+0x2a8>)
 8013126:	91a0      	str	r1, [sp, #640]	@ 0x280
 8013128:	f10d 0804 	add.w	r8, sp, #4
 801312c:	49a4      	ldr	r1, [pc, #656]	@ (80133c0 <__ssvfiscanf_r+0x2ac>)
 801312e:	4fa5      	ldr	r7, [pc, #660]	@ (80133c4 <__ssvfiscanf_r+0x2b0>)
 8013130:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8013134:	4606      	mov	r6, r0
 8013136:	91a1      	str	r1, [sp, #644]	@ 0x284
 8013138:	9300      	str	r3, [sp, #0]
 801313a:	7813      	ldrb	r3, [r2, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	f000 8158 	beq.w	80133f2 <__ssvfiscanf_r+0x2de>
 8013142:	5cf9      	ldrb	r1, [r7, r3]
 8013144:	f011 0108 	ands.w	r1, r1, #8
 8013148:	f102 0501 	add.w	r5, r2, #1
 801314c:	d019      	beq.n	8013182 <__ssvfiscanf_r+0x6e>
 801314e:	6863      	ldr	r3, [r4, #4]
 8013150:	2b00      	cmp	r3, #0
 8013152:	dd0f      	ble.n	8013174 <__ssvfiscanf_r+0x60>
 8013154:	6823      	ldr	r3, [r4, #0]
 8013156:	781a      	ldrb	r2, [r3, #0]
 8013158:	5cba      	ldrb	r2, [r7, r2]
 801315a:	0712      	lsls	r2, r2, #28
 801315c:	d401      	bmi.n	8013162 <__ssvfiscanf_r+0x4e>
 801315e:	462a      	mov	r2, r5
 8013160:	e7eb      	b.n	801313a <__ssvfiscanf_r+0x26>
 8013162:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013164:	3201      	adds	r2, #1
 8013166:	9245      	str	r2, [sp, #276]	@ 0x114
 8013168:	6862      	ldr	r2, [r4, #4]
 801316a:	3301      	adds	r3, #1
 801316c:	3a01      	subs	r2, #1
 801316e:	6062      	str	r2, [r4, #4]
 8013170:	6023      	str	r3, [r4, #0]
 8013172:	e7ec      	b.n	801314e <__ssvfiscanf_r+0x3a>
 8013174:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013176:	4621      	mov	r1, r4
 8013178:	4630      	mov	r0, r6
 801317a:	4798      	blx	r3
 801317c:	2800      	cmp	r0, #0
 801317e:	d0e9      	beq.n	8013154 <__ssvfiscanf_r+0x40>
 8013180:	e7ed      	b.n	801315e <__ssvfiscanf_r+0x4a>
 8013182:	2b25      	cmp	r3, #37	@ 0x25
 8013184:	d012      	beq.n	80131ac <__ssvfiscanf_r+0x98>
 8013186:	4699      	mov	r9, r3
 8013188:	6863      	ldr	r3, [r4, #4]
 801318a:	2b00      	cmp	r3, #0
 801318c:	f340 8093 	ble.w	80132b6 <__ssvfiscanf_r+0x1a2>
 8013190:	6822      	ldr	r2, [r4, #0]
 8013192:	7813      	ldrb	r3, [r2, #0]
 8013194:	454b      	cmp	r3, r9
 8013196:	f040 812c 	bne.w	80133f2 <__ssvfiscanf_r+0x2de>
 801319a:	6863      	ldr	r3, [r4, #4]
 801319c:	3b01      	subs	r3, #1
 801319e:	6063      	str	r3, [r4, #4]
 80131a0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80131a2:	3201      	adds	r2, #1
 80131a4:	3301      	adds	r3, #1
 80131a6:	6022      	str	r2, [r4, #0]
 80131a8:	9345      	str	r3, [sp, #276]	@ 0x114
 80131aa:	e7d8      	b.n	801315e <__ssvfiscanf_r+0x4a>
 80131ac:	9141      	str	r1, [sp, #260]	@ 0x104
 80131ae:	9143      	str	r1, [sp, #268]	@ 0x10c
 80131b0:	7853      	ldrb	r3, [r2, #1]
 80131b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80131b4:	bf02      	ittt	eq
 80131b6:	2310      	moveq	r3, #16
 80131b8:	1c95      	addeq	r5, r2, #2
 80131ba:	9341      	streq	r3, [sp, #260]	@ 0x104
 80131bc:	220a      	movs	r2, #10
 80131be:	46a9      	mov	r9, r5
 80131c0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80131c4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80131c8:	2b09      	cmp	r3, #9
 80131ca:	d91e      	bls.n	801320a <__ssvfiscanf_r+0xf6>
 80131cc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80133c8 <__ssvfiscanf_r+0x2b4>
 80131d0:	2203      	movs	r2, #3
 80131d2:	4650      	mov	r0, sl
 80131d4:	f7ed f80c 	bl	80001f0 <memchr>
 80131d8:	b138      	cbz	r0, 80131ea <__ssvfiscanf_r+0xd6>
 80131da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80131dc:	eba0 000a 	sub.w	r0, r0, sl
 80131e0:	2301      	movs	r3, #1
 80131e2:	4083      	lsls	r3, r0
 80131e4:	4313      	orrs	r3, r2
 80131e6:	9341      	str	r3, [sp, #260]	@ 0x104
 80131e8:	464d      	mov	r5, r9
 80131ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80131ee:	2b78      	cmp	r3, #120	@ 0x78
 80131f0:	d806      	bhi.n	8013200 <__ssvfiscanf_r+0xec>
 80131f2:	2b57      	cmp	r3, #87	@ 0x57
 80131f4:	d810      	bhi.n	8013218 <__ssvfiscanf_r+0x104>
 80131f6:	2b25      	cmp	r3, #37	@ 0x25
 80131f8:	d0c5      	beq.n	8013186 <__ssvfiscanf_r+0x72>
 80131fa:	d857      	bhi.n	80132ac <__ssvfiscanf_r+0x198>
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d065      	beq.n	80132cc <__ssvfiscanf_r+0x1b8>
 8013200:	2303      	movs	r3, #3
 8013202:	9347      	str	r3, [sp, #284]	@ 0x11c
 8013204:	230a      	movs	r3, #10
 8013206:	9342      	str	r3, [sp, #264]	@ 0x108
 8013208:	e078      	b.n	80132fc <__ssvfiscanf_r+0x1e8>
 801320a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801320c:	fb02 1103 	mla	r1, r2, r3, r1
 8013210:	3930      	subs	r1, #48	@ 0x30
 8013212:	9143      	str	r1, [sp, #268]	@ 0x10c
 8013214:	464d      	mov	r5, r9
 8013216:	e7d2      	b.n	80131be <__ssvfiscanf_r+0xaa>
 8013218:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801321c:	2a20      	cmp	r2, #32
 801321e:	d8ef      	bhi.n	8013200 <__ssvfiscanf_r+0xec>
 8013220:	a101      	add	r1, pc, #4	@ (adr r1, 8013228 <__ssvfiscanf_r+0x114>)
 8013222:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013226:	bf00      	nop
 8013228:	080132db 	.word	0x080132db
 801322c:	08013201 	.word	0x08013201
 8013230:	08013201 	.word	0x08013201
 8013234:	08013335 	.word	0x08013335
 8013238:	08013201 	.word	0x08013201
 801323c:	08013201 	.word	0x08013201
 8013240:	08013201 	.word	0x08013201
 8013244:	08013201 	.word	0x08013201
 8013248:	08013201 	.word	0x08013201
 801324c:	08013201 	.word	0x08013201
 8013250:	08013201 	.word	0x08013201
 8013254:	0801334b 	.word	0x0801334b
 8013258:	08013331 	.word	0x08013331
 801325c:	080132b3 	.word	0x080132b3
 8013260:	080132b3 	.word	0x080132b3
 8013264:	080132b3 	.word	0x080132b3
 8013268:	08013201 	.word	0x08013201
 801326c:	080132ed 	.word	0x080132ed
 8013270:	08013201 	.word	0x08013201
 8013274:	08013201 	.word	0x08013201
 8013278:	08013201 	.word	0x08013201
 801327c:	08013201 	.word	0x08013201
 8013280:	0801335b 	.word	0x0801335b
 8013284:	080132f5 	.word	0x080132f5
 8013288:	080132d3 	.word	0x080132d3
 801328c:	08013201 	.word	0x08013201
 8013290:	08013201 	.word	0x08013201
 8013294:	08013357 	.word	0x08013357
 8013298:	08013201 	.word	0x08013201
 801329c:	08013331 	.word	0x08013331
 80132a0:	08013201 	.word	0x08013201
 80132a4:	08013201 	.word	0x08013201
 80132a8:	080132db 	.word	0x080132db
 80132ac:	3b45      	subs	r3, #69	@ 0x45
 80132ae:	2b02      	cmp	r3, #2
 80132b0:	d8a6      	bhi.n	8013200 <__ssvfiscanf_r+0xec>
 80132b2:	2305      	movs	r3, #5
 80132b4:	e021      	b.n	80132fa <__ssvfiscanf_r+0x1e6>
 80132b6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80132b8:	4621      	mov	r1, r4
 80132ba:	4630      	mov	r0, r6
 80132bc:	4798      	blx	r3
 80132be:	2800      	cmp	r0, #0
 80132c0:	f43f af66 	beq.w	8013190 <__ssvfiscanf_r+0x7c>
 80132c4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80132c6:	2800      	cmp	r0, #0
 80132c8:	f040 808b 	bne.w	80133e2 <__ssvfiscanf_r+0x2ce>
 80132cc:	f04f 30ff 	mov.w	r0, #4294967295
 80132d0:	e08b      	b.n	80133ea <__ssvfiscanf_r+0x2d6>
 80132d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80132d4:	f042 0220 	orr.w	r2, r2, #32
 80132d8:	9241      	str	r2, [sp, #260]	@ 0x104
 80132da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80132dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80132e0:	9241      	str	r2, [sp, #260]	@ 0x104
 80132e2:	2210      	movs	r2, #16
 80132e4:	2b6e      	cmp	r3, #110	@ 0x6e
 80132e6:	9242      	str	r2, [sp, #264]	@ 0x108
 80132e8:	d902      	bls.n	80132f0 <__ssvfiscanf_r+0x1dc>
 80132ea:	e005      	b.n	80132f8 <__ssvfiscanf_r+0x1e4>
 80132ec:	2300      	movs	r3, #0
 80132ee:	9342      	str	r3, [sp, #264]	@ 0x108
 80132f0:	2303      	movs	r3, #3
 80132f2:	e002      	b.n	80132fa <__ssvfiscanf_r+0x1e6>
 80132f4:	2308      	movs	r3, #8
 80132f6:	9342      	str	r3, [sp, #264]	@ 0x108
 80132f8:	2304      	movs	r3, #4
 80132fa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80132fc:	6863      	ldr	r3, [r4, #4]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	dd39      	ble.n	8013376 <__ssvfiscanf_r+0x262>
 8013302:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8013304:	0659      	lsls	r1, r3, #25
 8013306:	d404      	bmi.n	8013312 <__ssvfiscanf_r+0x1fe>
 8013308:	6823      	ldr	r3, [r4, #0]
 801330a:	781a      	ldrb	r2, [r3, #0]
 801330c:	5cba      	ldrb	r2, [r7, r2]
 801330e:	0712      	lsls	r2, r2, #28
 8013310:	d438      	bmi.n	8013384 <__ssvfiscanf_r+0x270>
 8013312:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8013314:	2b02      	cmp	r3, #2
 8013316:	dc47      	bgt.n	80133a8 <__ssvfiscanf_r+0x294>
 8013318:	466b      	mov	r3, sp
 801331a:	4622      	mov	r2, r4
 801331c:	a941      	add	r1, sp, #260	@ 0x104
 801331e:	4630      	mov	r0, r6
 8013320:	f000 f86c 	bl	80133fc <_scanf_chars>
 8013324:	2801      	cmp	r0, #1
 8013326:	d064      	beq.n	80133f2 <__ssvfiscanf_r+0x2de>
 8013328:	2802      	cmp	r0, #2
 801332a:	f47f af18 	bne.w	801315e <__ssvfiscanf_r+0x4a>
 801332e:	e7c9      	b.n	80132c4 <__ssvfiscanf_r+0x1b0>
 8013330:	220a      	movs	r2, #10
 8013332:	e7d7      	b.n	80132e4 <__ssvfiscanf_r+0x1d0>
 8013334:	4629      	mov	r1, r5
 8013336:	4640      	mov	r0, r8
 8013338:	f000 fa6c 	bl	8013814 <__sccl>
 801333c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801333e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013342:	9341      	str	r3, [sp, #260]	@ 0x104
 8013344:	4605      	mov	r5, r0
 8013346:	2301      	movs	r3, #1
 8013348:	e7d7      	b.n	80132fa <__ssvfiscanf_r+0x1e6>
 801334a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801334c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013350:	9341      	str	r3, [sp, #260]	@ 0x104
 8013352:	2300      	movs	r3, #0
 8013354:	e7d1      	b.n	80132fa <__ssvfiscanf_r+0x1e6>
 8013356:	2302      	movs	r3, #2
 8013358:	e7cf      	b.n	80132fa <__ssvfiscanf_r+0x1e6>
 801335a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801335c:	06c3      	lsls	r3, r0, #27
 801335e:	f53f aefe 	bmi.w	801315e <__ssvfiscanf_r+0x4a>
 8013362:	9b00      	ldr	r3, [sp, #0]
 8013364:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013366:	1d19      	adds	r1, r3, #4
 8013368:	9100      	str	r1, [sp, #0]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	07c0      	lsls	r0, r0, #31
 801336e:	bf4c      	ite	mi
 8013370:	801a      	strhmi	r2, [r3, #0]
 8013372:	601a      	strpl	r2, [r3, #0]
 8013374:	e6f3      	b.n	801315e <__ssvfiscanf_r+0x4a>
 8013376:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013378:	4621      	mov	r1, r4
 801337a:	4630      	mov	r0, r6
 801337c:	4798      	blx	r3
 801337e:	2800      	cmp	r0, #0
 8013380:	d0bf      	beq.n	8013302 <__ssvfiscanf_r+0x1ee>
 8013382:	e79f      	b.n	80132c4 <__ssvfiscanf_r+0x1b0>
 8013384:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013386:	3201      	adds	r2, #1
 8013388:	9245      	str	r2, [sp, #276]	@ 0x114
 801338a:	6862      	ldr	r2, [r4, #4]
 801338c:	3a01      	subs	r2, #1
 801338e:	2a00      	cmp	r2, #0
 8013390:	6062      	str	r2, [r4, #4]
 8013392:	dd02      	ble.n	801339a <__ssvfiscanf_r+0x286>
 8013394:	3301      	adds	r3, #1
 8013396:	6023      	str	r3, [r4, #0]
 8013398:	e7b6      	b.n	8013308 <__ssvfiscanf_r+0x1f4>
 801339a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801339c:	4621      	mov	r1, r4
 801339e:	4630      	mov	r0, r6
 80133a0:	4798      	blx	r3
 80133a2:	2800      	cmp	r0, #0
 80133a4:	d0b0      	beq.n	8013308 <__ssvfiscanf_r+0x1f4>
 80133a6:	e78d      	b.n	80132c4 <__ssvfiscanf_r+0x1b0>
 80133a8:	2b04      	cmp	r3, #4
 80133aa:	dc0f      	bgt.n	80133cc <__ssvfiscanf_r+0x2b8>
 80133ac:	466b      	mov	r3, sp
 80133ae:	4622      	mov	r2, r4
 80133b0:	a941      	add	r1, sp, #260	@ 0x104
 80133b2:	4630      	mov	r0, r6
 80133b4:	f000 f87c 	bl	80134b0 <_scanf_i>
 80133b8:	e7b4      	b.n	8013324 <__ssvfiscanf_r+0x210>
 80133ba:	bf00      	nop
 80133bc:	08013065 	.word	0x08013065
 80133c0:	080130db 	.word	0x080130db
 80133c4:	08015d41 	.word	0x08015d41
 80133c8:	08015e47 	.word	0x08015e47
 80133cc:	4b0a      	ldr	r3, [pc, #40]	@ (80133f8 <__ssvfiscanf_r+0x2e4>)
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	f43f aec5 	beq.w	801315e <__ssvfiscanf_r+0x4a>
 80133d4:	466b      	mov	r3, sp
 80133d6:	4622      	mov	r2, r4
 80133d8:	a941      	add	r1, sp, #260	@ 0x104
 80133da:	4630      	mov	r0, r6
 80133dc:	f7fc fe2e 	bl	801003c <_scanf_float>
 80133e0:	e7a0      	b.n	8013324 <__ssvfiscanf_r+0x210>
 80133e2:	89a3      	ldrh	r3, [r4, #12]
 80133e4:	065b      	lsls	r3, r3, #25
 80133e6:	f53f af71 	bmi.w	80132cc <__ssvfiscanf_r+0x1b8>
 80133ea:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80133ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133f2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80133f4:	e7f9      	b.n	80133ea <__ssvfiscanf_r+0x2d6>
 80133f6:	bf00      	nop
 80133f8:	0801003d 	.word	0x0801003d

080133fc <_scanf_chars>:
 80133fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013400:	4615      	mov	r5, r2
 8013402:	688a      	ldr	r2, [r1, #8]
 8013404:	4680      	mov	r8, r0
 8013406:	460c      	mov	r4, r1
 8013408:	b932      	cbnz	r2, 8013418 <_scanf_chars+0x1c>
 801340a:	698a      	ldr	r2, [r1, #24]
 801340c:	2a00      	cmp	r2, #0
 801340e:	bf14      	ite	ne
 8013410:	f04f 32ff 	movne.w	r2, #4294967295
 8013414:	2201      	moveq	r2, #1
 8013416:	608a      	str	r2, [r1, #8]
 8013418:	6822      	ldr	r2, [r4, #0]
 801341a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80134ac <_scanf_chars+0xb0>
 801341e:	06d1      	lsls	r1, r2, #27
 8013420:	bf5f      	itttt	pl
 8013422:	681a      	ldrpl	r2, [r3, #0]
 8013424:	1d11      	addpl	r1, r2, #4
 8013426:	6019      	strpl	r1, [r3, #0]
 8013428:	6816      	ldrpl	r6, [r2, #0]
 801342a:	2700      	movs	r7, #0
 801342c:	69a0      	ldr	r0, [r4, #24]
 801342e:	b188      	cbz	r0, 8013454 <_scanf_chars+0x58>
 8013430:	2801      	cmp	r0, #1
 8013432:	d107      	bne.n	8013444 <_scanf_chars+0x48>
 8013434:	682b      	ldr	r3, [r5, #0]
 8013436:	781a      	ldrb	r2, [r3, #0]
 8013438:	6963      	ldr	r3, [r4, #20]
 801343a:	5c9b      	ldrb	r3, [r3, r2]
 801343c:	b953      	cbnz	r3, 8013454 <_scanf_chars+0x58>
 801343e:	2f00      	cmp	r7, #0
 8013440:	d031      	beq.n	80134a6 <_scanf_chars+0xaa>
 8013442:	e022      	b.n	801348a <_scanf_chars+0x8e>
 8013444:	2802      	cmp	r0, #2
 8013446:	d120      	bne.n	801348a <_scanf_chars+0x8e>
 8013448:	682b      	ldr	r3, [r5, #0]
 801344a:	781b      	ldrb	r3, [r3, #0]
 801344c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013450:	071b      	lsls	r3, r3, #28
 8013452:	d41a      	bmi.n	801348a <_scanf_chars+0x8e>
 8013454:	6823      	ldr	r3, [r4, #0]
 8013456:	06da      	lsls	r2, r3, #27
 8013458:	bf5e      	ittt	pl
 801345a:	682b      	ldrpl	r3, [r5, #0]
 801345c:	781b      	ldrbpl	r3, [r3, #0]
 801345e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013462:	682a      	ldr	r2, [r5, #0]
 8013464:	686b      	ldr	r3, [r5, #4]
 8013466:	3201      	adds	r2, #1
 8013468:	602a      	str	r2, [r5, #0]
 801346a:	68a2      	ldr	r2, [r4, #8]
 801346c:	3b01      	subs	r3, #1
 801346e:	3a01      	subs	r2, #1
 8013470:	606b      	str	r3, [r5, #4]
 8013472:	3701      	adds	r7, #1
 8013474:	60a2      	str	r2, [r4, #8]
 8013476:	b142      	cbz	r2, 801348a <_scanf_chars+0x8e>
 8013478:	2b00      	cmp	r3, #0
 801347a:	dcd7      	bgt.n	801342c <_scanf_chars+0x30>
 801347c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013480:	4629      	mov	r1, r5
 8013482:	4640      	mov	r0, r8
 8013484:	4798      	blx	r3
 8013486:	2800      	cmp	r0, #0
 8013488:	d0d0      	beq.n	801342c <_scanf_chars+0x30>
 801348a:	6823      	ldr	r3, [r4, #0]
 801348c:	f013 0310 	ands.w	r3, r3, #16
 8013490:	d105      	bne.n	801349e <_scanf_chars+0xa2>
 8013492:	68e2      	ldr	r2, [r4, #12]
 8013494:	3201      	adds	r2, #1
 8013496:	60e2      	str	r2, [r4, #12]
 8013498:	69a2      	ldr	r2, [r4, #24]
 801349a:	b102      	cbz	r2, 801349e <_scanf_chars+0xa2>
 801349c:	7033      	strb	r3, [r6, #0]
 801349e:	6923      	ldr	r3, [r4, #16]
 80134a0:	443b      	add	r3, r7
 80134a2:	6123      	str	r3, [r4, #16]
 80134a4:	2000      	movs	r0, #0
 80134a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134aa:	bf00      	nop
 80134ac:	08015d41 	.word	0x08015d41

080134b0 <_scanf_i>:
 80134b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b4:	4698      	mov	r8, r3
 80134b6:	4b74      	ldr	r3, [pc, #464]	@ (8013688 <_scanf_i+0x1d8>)
 80134b8:	460c      	mov	r4, r1
 80134ba:	4682      	mov	sl, r0
 80134bc:	4616      	mov	r6, r2
 80134be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80134c2:	b087      	sub	sp, #28
 80134c4:	ab03      	add	r3, sp, #12
 80134c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80134ca:	4b70      	ldr	r3, [pc, #448]	@ (801368c <_scanf_i+0x1dc>)
 80134cc:	69a1      	ldr	r1, [r4, #24]
 80134ce:	4a70      	ldr	r2, [pc, #448]	@ (8013690 <_scanf_i+0x1e0>)
 80134d0:	2903      	cmp	r1, #3
 80134d2:	bf08      	it	eq
 80134d4:	461a      	moveq	r2, r3
 80134d6:	68a3      	ldr	r3, [r4, #8]
 80134d8:	9201      	str	r2, [sp, #4]
 80134da:	1e5a      	subs	r2, r3, #1
 80134dc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80134e0:	bf88      	it	hi
 80134e2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80134e6:	4627      	mov	r7, r4
 80134e8:	bf82      	ittt	hi
 80134ea:	eb03 0905 	addhi.w	r9, r3, r5
 80134ee:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80134f2:	60a3      	strhi	r3, [r4, #8]
 80134f4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80134f8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80134fc:	bf98      	it	ls
 80134fe:	f04f 0900 	movls.w	r9, #0
 8013502:	6023      	str	r3, [r4, #0]
 8013504:	463d      	mov	r5, r7
 8013506:	f04f 0b00 	mov.w	fp, #0
 801350a:	6831      	ldr	r1, [r6, #0]
 801350c:	ab03      	add	r3, sp, #12
 801350e:	7809      	ldrb	r1, [r1, #0]
 8013510:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013514:	2202      	movs	r2, #2
 8013516:	f7ec fe6b 	bl	80001f0 <memchr>
 801351a:	b328      	cbz	r0, 8013568 <_scanf_i+0xb8>
 801351c:	f1bb 0f01 	cmp.w	fp, #1
 8013520:	d159      	bne.n	80135d6 <_scanf_i+0x126>
 8013522:	6862      	ldr	r2, [r4, #4]
 8013524:	b92a      	cbnz	r2, 8013532 <_scanf_i+0x82>
 8013526:	6822      	ldr	r2, [r4, #0]
 8013528:	2108      	movs	r1, #8
 801352a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801352e:	6061      	str	r1, [r4, #4]
 8013530:	6022      	str	r2, [r4, #0]
 8013532:	6822      	ldr	r2, [r4, #0]
 8013534:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8013538:	6022      	str	r2, [r4, #0]
 801353a:	68a2      	ldr	r2, [r4, #8]
 801353c:	1e51      	subs	r1, r2, #1
 801353e:	60a1      	str	r1, [r4, #8]
 8013540:	b192      	cbz	r2, 8013568 <_scanf_i+0xb8>
 8013542:	6832      	ldr	r2, [r6, #0]
 8013544:	1c51      	adds	r1, r2, #1
 8013546:	6031      	str	r1, [r6, #0]
 8013548:	7812      	ldrb	r2, [r2, #0]
 801354a:	f805 2b01 	strb.w	r2, [r5], #1
 801354e:	6872      	ldr	r2, [r6, #4]
 8013550:	3a01      	subs	r2, #1
 8013552:	2a00      	cmp	r2, #0
 8013554:	6072      	str	r2, [r6, #4]
 8013556:	dc07      	bgt.n	8013568 <_scanf_i+0xb8>
 8013558:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801355c:	4631      	mov	r1, r6
 801355e:	4650      	mov	r0, sl
 8013560:	4790      	blx	r2
 8013562:	2800      	cmp	r0, #0
 8013564:	f040 8085 	bne.w	8013672 <_scanf_i+0x1c2>
 8013568:	f10b 0b01 	add.w	fp, fp, #1
 801356c:	f1bb 0f03 	cmp.w	fp, #3
 8013570:	d1cb      	bne.n	801350a <_scanf_i+0x5a>
 8013572:	6863      	ldr	r3, [r4, #4]
 8013574:	b90b      	cbnz	r3, 801357a <_scanf_i+0xca>
 8013576:	230a      	movs	r3, #10
 8013578:	6063      	str	r3, [r4, #4]
 801357a:	6863      	ldr	r3, [r4, #4]
 801357c:	4945      	ldr	r1, [pc, #276]	@ (8013694 <_scanf_i+0x1e4>)
 801357e:	6960      	ldr	r0, [r4, #20]
 8013580:	1ac9      	subs	r1, r1, r3
 8013582:	f000 f947 	bl	8013814 <__sccl>
 8013586:	f04f 0b00 	mov.w	fp, #0
 801358a:	68a3      	ldr	r3, [r4, #8]
 801358c:	6822      	ldr	r2, [r4, #0]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d03d      	beq.n	801360e <_scanf_i+0x15e>
 8013592:	6831      	ldr	r1, [r6, #0]
 8013594:	6960      	ldr	r0, [r4, #20]
 8013596:	f891 c000 	ldrb.w	ip, [r1]
 801359a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801359e:	2800      	cmp	r0, #0
 80135a0:	d035      	beq.n	801360e <_scanf_i+0x15e>
 80135a2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80135a6:	d124      	bne.n	80135f2 <_scanf_i+0x142>
 80135a8:	0510      	lsls	r0, r2, #20
 80135aa:	d522      	bpl.n	80135f2 <_scanf_i+0x142>
 80135ac:	f10b 0b01 	add.w	fp, fp, #1
 80135b0:	f1b9 0f00 	cmp.w	r9, #0
 80135b4:	d003      	beq.n	80135be <_scanf_i+0x10e>
 80135b6:	3301      	adds	r3, #1
 80135b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80135bc:	60a3      	str	r3, [r4, #8]
 80135be:	6873      	ldr	r3, [r6, #4]
 80135c0:	3b01      	subs	r3, #1
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	6073      	str	r3, [r6, #4]
 80135c6:	dd1b      	ble.n	8013600 <_scanf_i+0x150>
 80135c8:	6833      	ldr	r3, [r6, #0]
 80135ca:	3301      	adds	r3, #1
 80135cc:	6033      	str	r3, [r6, #0]
 80135ce:	68a3      	ldr	r3, [r4, #8]
 80135d0:	3b01      	subs	r3, #1
 80135d2:	60a3      	str	r3, [r4, #8]
 80135d4:	e7d9      	b.n	801358a <_scanf_i+0xda>
 80135d6:	f1bb 0f02 	cmp.w	fp, #2
 80135da:	d1ae      	bne.n	801353a <_scanf_i+0x8a>
 80135dc:	6822      	ldr	r2, [r4, #0]
 80135de:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80135e2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80135e6:	d1bf      	bne.n	8013568 <_scanf_i+0xb8>
 80135e8:	2110      	movs	r1, #16
 80135ea:	6061      	str	r1, [r4, #4]
 80135ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80135f0:	e7a2      	b.n	8013538 <_scanf_i+0x88>
 80135f2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80135f6:	6022      	str	r2, [r4, #0]
 80135f8:	780b      	ldrb	r3, [r1, #0]
 80135fa:	f805 3b01 	strb.w	r3, [r5], #1
 80135fe:	e7de      	b.n	80135be <_scanf_i+0x10e>
 8013600:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013604:	4631      	mov	r1, r6
 8013606:	4650      	mov	r0, sl
 8013608:	4798      	blx	r3
 801360a:	2800      	cmp	r0, #0
 801360c:	d0df      	beq.n	80135ce <_scanf_i+0x11e>
 801360e:	6823      	ldr	r3, [r4, #0]
 8013610:	05d9      	lsls	r1, r3, #23
 8013612:	d50d      	bpl.n	8013630 <_scanf_i+0x180>
 8013614:	42bd      	cmp	r5, r7
 8013616:	d909      	bls.n	801362c <_scanf_i+0x17c>
 8013618:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801361c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013620:	4632      	mov	r2, r6
 8013622:	4650      	mov	r0, sl
 8013624:	4798      	blx	r3
 8013626:	f105 39ff 	add.w	r9, r5, #4294967295
 801362a:	464d      	mov	r5, r9
 801362c:	42bd      	cmp	r5, r7
 801362e:	d028      	beq.n	8013682 <_scanf_i+0x1d2>
 8013630:	6822      	ldr	r2, [r4, #0]
 8013632:	f012 0210 	ands.w	r2, r2, #16
 8013636:	d113      	bne.n	8013660 <_scanf_i+0x1b0>
 8013638:	702a      	strb	r2, [r5, #0]
 801363a:	6863      	ldr	r3, [r4, #4]
 801363c:	9e01      	ldr	r6, [sp, #4]
 801363e:	4639      	mov	r1, r7
 8013640:	4650      	mov	r0, sl
 8013642:	47b0      	blx	r6
 8013644:	f8d8 3000 	ldr.w	r3, [r8]
 8013648:	6821      	ldr	r1, [r4, #0]
 801364a:	1d1a      	adds	r2, r3, #4
 801364c:	f8c8 2000 	str.w	r2, [r8]
 8013650:	f011 0f20 	tst.w	r1, #32
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	d00f      	beq.n	8013678 <_scanf_i+0x1c8>
 8013658:	6018      	str	r0, [r3, #0]
 801365a:	68e3      	ldr	r3, [r4, #12]
 801365c:	3301      	adds	r3, #1
 801365e:	60e3      	str	r3, [r4, #12]
 8013660:	6923      	ldr	r3, [r4, #16]
 8013662:	1bed      	subs	r5, r5, r7
 8013664:	445d      	add	r5, fp
 8013666:	442b      	add	r3, r5
 8013668:	6123      	str	r3, [r4, #16]
 801366a:	2000      	movs	r0, #0
 801366c:	b007      	add	sp, #28
 801366e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013672:	f04f 0b00 	mov.w	fp, #0
 8013676:	e7ca      	b.n	801360e <_scanf_i+0x15e>
 8013678:	07ca      	lsls	r2, r1, #31
 801367a:	bf4c      	ite	mi
 801367c:	8018      	strhmi	r0, [r3, #0]
 801367e:	6018      	strpl	r0, [r3, #0]
 8013680:	e7eb      	b.n	801365a <_scanf_i+0x1aa>
 8013682:	2001      	movs	r0, #1
 8013684:	e7f2      	b.n	801366c <_scanf_i+0x1bc>
 8013686:	bf00      	nop
 8013688:	08015910 	.word	0x08015910
 801368c:	08012db1 	.word	0x08012db1
 8013690:	08014145 	.word	0x08014145
 8013694:	08015e62 	.word	0x08015e62

08013698 <__sflush_r>:
 8013698:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801369c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136a0:	0716      	lsls	r6, r2, #28
 80136a2:	4605      	mov	r5, r0
 80136a4:	460c      	mov	r4, r1
 80136a6:	d454      	bmi.n	8013752 <__sflush_r+0xba>
 80136a8:	684b      	ldr	r3, [r1, #4]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	dc02      	bgt.n	80136b4 <__sflush_r+0x1c>
 80136ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	dd48      	ble.n	8013746 <__sflush_r+0xae>
 80136b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80136b6:	2e00      	cmp	r6, #0
 80136b8:	d045      	beq.n	8013746 <__sflush_r+0xae>
 80136ba:	2300      	movs	r3, #0
 80136bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80136c0:	682f      	ldr	r7, [r5, #0]
 80136c2:	6a21      	ldr	r1, [r4, #32]
 80136c4:	602b      	str	r3, [r5, #0]
 80136c6:	d030      	beq.n	801372a <__sflush_r+0x92>
 80136c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80136ca:	89a3      	ldrh	r3, [r4, #12]
 80136cc:	0759      	lsls	r1, r3, #29
 80136ce:	d505      	bpl.n	80136dc <__sflush_r+0x44>
 80136d0:	6863      	ldr	r3, [r4, #4]
 80136d2:	1ad2      	subs	r2, r2, r3
 80136d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80136d6:	b10b      	cbz	r3, 80136dc <__sflush_r+0x44>
 80136d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80136da:	1ad2      	subs	r2, r2, r3
 80136dc:	2300      	movs	r3, #0
 80136de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80136e0:	6a21      	ldr	r1, [r4, #32]
 80136e2:	4628      	mov	r0, r5
 80136e4:	47b0      	blx	r6
 80136e6:	1c43      	adds	r3, r0, #1
 80136e8:	89a3      	ldrh	r3, [r4, #12]
 80136ea:	d106      	bne.n	80136fa <__sflush_r+0x62>
 80136ec:	6829      	ldr	r1, [r5, #0]
 80136ee:	291d      	cmp	r1, #29
 80136f0:	d82b      	bhi.n	801374a <__sflush_r+0xb2>
 80136f2:	4a2a      	ldr	r2, [pc, #168]	@ (801379c <__sflush_r+0x104>)
 80136f4:	410a      	asrs	r2, r1
 80136f6:	07d6      	lsls	r6, r2, #31
 80136f8:	d427      	bmi.n	801374a <__sflush_r+0xb2>
 80136fa:	2200      	movs	r2, #0
 80136fc:	6062      	str	r2, [r4, #4]
 80136fe:	04d9      	lsls	r1, r3, #19
 8013700:	6922      	ldr	r2, [r4, #16]
 8013702:	6022      	str	r2, [r4, #0]
 8013704:	d504      	bpl.n	8013710 <__sflush_r+0x78>
 8013706:	1c42      	adds	r2, r0, #1
 8013708:	d101      	bne.n	801370e <__sflush_r+0x76>
 801370a:	682b      	ldr	r3, [r5, #0]
 801370c:	b903      	cbnz	r3, 8013710 <__sflush_r+0x78>
 801370e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013710:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013712:	602f      	str	r7, [r5, #0]
 8013714:	b1b9      	cbz	r1, 8013746 <__sflush_r+0xae>
 8013716:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801371a:	4299      	cmp	r1, r3
 801371c:	d002      	beq.n	8013724 <__sflush_r+0x8c>
 801371e:	4628      	mov	r0, r5
 8013720:	f7fd ffc6 	bl	80116b0 <_free_r>
 8013724:	2300      	movs	r3, #0
 8013726:	6363      	str	r3, [r4, #52]	@ 0x34
 8013728:	e00d      	b.n	8013746 <__sflush_r+0xae>
 801372a:	2301      	movs	r3, #1
 801372c:	4628      	mov	r0, r5
 801372e:	47b0      	blx	r6
 8013730:	4602      	mov	r2, r0
 8013732:	1c50      	adds	r0, r2, #1
 8013734:	d1c9      	bne.n	80136ca <__sflush_r+0x32>
 8013736:	682b      	ldr	r3, [r5, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d0c6      	beq.n	80136ca <__sflush_r+0x32>
 801373c:	2b1d      	cmp	r3, #29
 801373e:	d001      	beq.n	8013744 <__sflush_r+0xac>
 8013740:	2b16      	cmp	r3, #22
 8013742:	d11e      	bne.n	8013782 <__sflush_r+0xea>
 8013744:	602f      	str	r7, [r5, #0]
 8013746:	2000      	movs	r0, #0
 8013748:	e022      	b.n	8013790 <__sflush_r+0xf8>
 801374a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801374e:	b21b      	sxth	r3, r3
 8013750:	e01b      	b.n	801378a <__sflush_r+0xf2>
 8013752:	690f      	ldr	r7, [r1, #16]
 8013754:	2f00      	cmp	r7, #0
 8013756:	d0f6      	beq.n	8013746 <__sflush_r+0xae>
 8013758:	0793      	lsls	r3, r2, #30
 801375a:	680e      	ldr	r6, [r1, #0]
 801375c:	bf08      	it	eq
 801375e:	694b      	ldreq	r3, [r1, #20]
 8013760:	600f      	str	r7, [r1, #0]
 8013762:	bf18      	it	ne
 8013764:	2300      	movne	r3, #0
 8013766:	eba6 0807 	sub.w	r8, r6, r7
 801376a:	608b      	str	r3, [r1, #8]
 801376c:	f1b8 0f00 	cmp.w	r8, #0
 8013770:	dde9      	ble.n	8013746 <__sflush_r+0xae>
 8013772:	6a21      	ldr	r1, [r4, #32]
 8013774:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013776:	4643      	mov	r3, r8
 8013778:	463a      	mov	r2, r7
 801377a:	4628      	mov	r0, r5
 801377c:	47b0      	blx	r6
 801377e:	2800      	cmp	r0, #0
 8013780:	dc08      	bgt.n	8013794 <__sflush_r+0xfc>
 8013782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801378a:	81a3      	strh	r3, [r4, #12]
 801378c:	f04f 30ff 	mov.w	r0, #4294967295
 8013790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013794:	4407      	add	r7, r0
 8013796:	eba8 0800 	sub.w	r8, r8, r0
 801379a:	e7e7      	b.n	801376c <__sflush_r+0xd4>
 801379c:	dfbffffe 	.word	0xdfbffffe

080137a0 <_fflush_r>:
 80137a0:	b538      	push	{r3, r4, r5, lr}
 80137a2:	690b      	ldr	r3, [r1, #16]
 80137a4:	4605      	mov	r5, r0
 80137a6:	460c      	mov	r4, r1
 80137a8:	b913      	cbnz	r3, 80137b0 <_fflush_r+0x10>
 80137aa:	2500      	movs	r5, #0
 80137ac:	4628      	mov	r0, r5
 80137ae:	bd38      	pop	{r3, r4, r5, pc}
 80137b0:	b118      	cbz	r0, 80137ba <_fflush_r+0x1a>
 80137b2:	6a03      	ldr	r3, [r0, #32]
 80137b4:	b90b      	cbnz	r3, 80137ba <_fflush_r+0x1a>
 80137b6:	f7fc fee1 	bl	801057c <__sinit>
 80137ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d0f3      	beq.n	80137aa <_fflush_r+0xa>
 80137c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80137c4:	07d0      	lsls	r0, r2, #31
 80137c6:	d404      	bmi.n	80137d2 <_fflush_r+0x32>
 80137c8:	0599      	lsls	r1, r3, #22
 80137ca:	d402      	bmi.n	80137d2 <_fflush_r+0x32>
 80137cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80137ce:	f7fd f8ec 	bl	80109aa <__retarget_lock_acquire_recursive>
 80137d2:	4628      	mov	r0, r5
 80137d4:	4621      	mov	r1, r4
 80137d6:	f7ff ff5f 	bl	8013698 <__sflush_r>
 80137da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80137dc:	07da      	lsls	r2, r3, #31
 80137de:	4605      	mov	r5, r0
 80137e0:	d4e4      	bmi.n	80137ac <_fflush_r+0xc>
 80137e2:	89a3      	ldrh	r3, [r4, #12]
 80137e4:	059b      	lsls	r3, r3, #22
 80137e6:	d4e1      	bmi.n	80137ac <_fflush_r+0xc>
 80137e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80137ea:	f7fd f8df 	bl	80109ac <__retarget_lock_release_recursive>
 80137ee:	e7dd      	b.n	80137ac <_fflush_r+0xc>

080137f0 <fiprintf>:
 80137f0:	b40e      	push	{r1, r2, r3}
 80137f2:	b503      	push	{r0, r1, lr}
 80137f4:	4601      	mov	r1, r0
 80137f6:	ab03      	add	r3, sp, #12
 80137f8:	4805      	ldr	r0, [pc, #20]	@ (8013810 <fiprintf+0x20>)
 80137fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80137fe:	6800      	ldr	r0, [r0, #0]
 8013800:	9301      	str	r3, [sp, #4]
 8013802:	f000 fcd7 	bl	80141b4 <_vfiprintf_r>
 8013806:	b002      	add	sp, #8
 8013808:	f85d eb04 	ldr.w	lr, [sp], #4
 801380c:	b003      	add	sp, #12
 801380e:	4770      	bx	lr
 8013810:	200000c4 	.word	0x200000c4

08013814 <__sccl>:
 8013814:	b570      	push	{r4, r5, r6, lr}
 8013816:	780b      	ldrb	r3, [r1, #0]
 8013818:	4604      	mov	r4, r0
 801381a:	2b5e      	cmp	r3, #94	@ 0x5e
 801381c:	bf0b      	itete	eq
 801381e:	784b      	ldrbeq	r3, [r1, #1]
 8013820:	1c4a      	addne	r2, r1, #1
 8013822:	1c8a      	addeq	r2, r1, #2
 8013824:	2100      	movne	r1, #0
 8013826:	bf08      	it	eq
 8013828:	2101      	moveq	r1, #1
 801382a:	3801      	subs	r0, #1
 801382c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8013830:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013834:	42a8      	cmp	r0, r5
 8013836:	d1fb      	bne.n	8013830 <__sccl+0x1c>
 8013838:	b90b      	cbnz	r3, 801383e <__sccl+0x2a>
 801383a:	1e50      	subs	r0, r2, #1
 801383c:	bd70      	pop	{r4, r5, r6, pc}
 801383e:	f081 0101 	eor.w	r1, r1, #1
 8013842:	54e1      	strb	r1, [r4, r3]
 8013844:	4610      	mov	r0, r2
 8013846:	4602      	mov	r2, r0
 8013848:	f812 5b01 	ldrb.w	r5, [r2], #1
 801384c:	2d2d      	cmp	r5, #45	@ 0x2d
 801384e:	d005      	beq.n	801385c <__sccl+0x48>
 8013850:	2d5d      	cmp	r5, #93	@ 0x5d
 8013852:	d016      	beq.n	8013882 <__sccl+0x6e>
 8013854:	2d00      	cmp	r5, #0
 8013856:	d0f1      	beq.n	801383c <__sccl+0x28>
 8013858:	462b      	mov	r3, r5
 801385a:	e7f2      	b.n	8013842 <__sccl+0x2e>
 801385c:	7846      	ldrb	r6, [r0, #1]
 801385e:	2e5d      	cmp	r6, #93	@ 0x5d
 8013860:	d0fa      	beq.n	8013858 <__sccl+0x44>
 8013862:	42b3      	cmp	r3, r6
 8013864:	dcf8      	bgt.n	8013858 <__sccl+0x44>
 8013866:	3002      	adds	r0, #2
 8013868:	461a      	mov	r2, r3
 801386a:	3201      	adds	r2, #1
 801386c:	4296      	cmp	r6, r2
 801386e:	54a1      	strb	r1, [r4, r2]
 8013870:	dcfb      	bgt.n	801386a <__sccl+0x56>
 8013872:	1af2      	subs	r2, r6, r3
 8013874:	3a01      	subs	r2, #1
 8013876:	1c5d      	adds	r5, r3, #1
 8013878:	42b3      	cmp	r3, r6
 801387a:	bfa8      	it	ge
 801387c:	2200      	movge	r2, #0
 801387e:	18ab      	adds	r3, r5, r2
 8013880:	e7e1      	b.n	8013846 <__sccl+0x32>
 8013882:	4610      	mov	r0, r2
 8013884:	e7da      	b.n	801383c <__sccl+0x28>

08013886 <__submore>:
 8013886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801388a:	460c      	mov	r4, r1
 801388c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801388e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013892:	4299      	cmp	r1, r3
 8013894:	d11d      	bne.n	80138d2 <__submore+0x4c>
 8013896:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801389a:	f7fb fea9 	bl	800f5f0 <_malloc_r>
 801389e:	b918      	cbnz	r0, 80138a8 <__submore+0x22>
 80138a0:	f04f 30ff 	mov.w	r0, #4294967295
 80138a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80138ac:	63a3      	str	r3, [r4, #56]	@ 0x38
 80138ae:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80138b2:	6360      	str	r0, [r4, #52]	@ 0x34
 80138b4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80138b8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80138bc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80138c0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80138c4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80138c8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80138cc:	6020      	str	r0, [r4, #0]
 80138ce:	2000      	movs	r0, #0
 80138d0:	e7e8      	b.n	80138a4 <__submore+0x1e>
 80138d2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80138d4:	0077      	lsls	r7, r6, #1
 80138d6:	463a      	mov	r2, r7
 80138d8:	f000 fb97 	bl	801400a <_realloc_r>
 80138dc:	4605      	mov	r5, r0
 80138de:	2800      	cmp	r0, #0
 80138e0:	d0de      	beq.n	80138a0 <__submore+0x1a>
 80138e2:	eb00 0806 	add.w	r8, r0, r6
 80138e6:	4601      	mov	r1, r0
 80138e8:	4632      	mov	r2, r6
 80138ea:	4640      	mov	r0, r8
 80138ec:	f7fd f85f 	bl	80109ae <memcpy>
 80138f0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80138f4:	f8c4 8000 	str.w	r8, [r4]
 80138f8:	e7e9      	b.n	80138ce <__submore+0x48>

080138fa <memmove>:
 80138fa:	4288      	cmp	r0, r1
 80138fc:	b510      	push	{r4, lr}
 80138fe:	eb01 0402 	add.w	r4, r1, r2
 8013902:	d902      	bls.n	801390a <memmove+0x10>
 8013904:	4284      	cmp	r4, r0
 8013906:	4623      	mov	r3, r4
 8013908:	d807      	bhi.n	801391a <memmove+0x20>
 801390a:	1e43      	subs	r3, r0, #1
 801390c:	42a1      	cmp	r1, r4
 801390e:	d008      	beq.n	8013922 <memmove+0x28>
 8013910:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013914:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013918:	e7f8      	b.n	801390c <memmove+0x12>
 801391a:	4402      	add	r2, r0
 801391c:	4601      	mov	r1, r0
 801391e:	428a      	cmp	r2, r1
 8013920:	d100      	bne.n	8013924 <memmove+0x2a>
 8013922:	bd10      	pop	{r4, pc}
 8013924:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013928:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801392c:	e7f7      	b.n	801391e <memmove+0x24>
	...

08013930 <nan>:
 8013930:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013938 <nan+0x8>
 8013934:	4770      	bx	lr
 8013936:	bf00      	nop
 8013938:	00000000 	.word	0x00000000
 801393c:	7ff80000 	.word	0x7ff80000

08013940 <abort>:
 8013940:	b508      	push	{r3, lr}
 8013942:	2006      	movs	r0, #6
 8013944:	f000 fe0a 	bl	801455c <raise>
 8013948:	2001      	movs	r0, #1
 801394a:	f7f1 fb31 	bl	8004fb0 <_exit>

0801394e <_calloc_r>:
 801394e:	b570      	push	{r4, r5, r6, lr}
 8013950:	fba1 5402 	umull	r5, r4, r1, r2
 8013954:	b93c      	cbnz	r4, 8013966 <_calloc_r+0x18>
 8013956:	4629      	mov	r1, r5
 8013958:	f7fb fe4a 	bl	800f5f0 <_malloc_r>
 801395c:	4606      	mov	r6, r0
 801395e:	b928      	cbnz	r0, 801396c <_calloc_r+0x1e>
 8013960:	2600      	movs	r6, #0
 8013962:	4630      	mov	r0, r6
 8013964:	bd70      	pop	{r4, r5, r6, pc}
 8013966:	220c      	movs	r2, #12
 8013968:	6002      	str	r2, [r0, #0]
 801396a:	e7f9      	b.n	8013960 <_calloc_r+0x12>
 801396c:	462a      	mov	r2, r5
 801396e:	4621      	mov	r1, r4
 8013970:	f7fc fefd 	bl	801076e <memset>
 8013974:	e7f5      	b.n	8013962 <_calloc_r+0x14>

08013976 <rshift>:
 8013976:	6903      	ldr	r3, [r0, #16]
 8013978:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801397c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013980:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013984:	f100 0414 	add.w	r4, r0, #20
 8013988:	dd45      	ble.n	8013a16 <rshift+0xa0>
 801398a:	f011 011f 	ands.w	r1, r1, #31
 801398e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013992:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013996:	d10c      	bne.n	80139b2 <rshift+0x3c>
 8013998:	f100 0710 	add.w	r7, r0, #16
 801399c:	4629      	mov	r1, r5
 801399e:	42b1      	cmp	r1, r6
 80139a0:	d334      	bcc.n	8013a0c <rshift+0x96>
 80139a2:	1a9b      	subs	r3, r3, r2
 80139a4:	009b      	lsls	r3, r3, #2
 80139a6:	1eea      	subs	r2, r5, #3
 80139a8:	4296      	cmp	r6, r2
 80139aa:	bf38      	it	cc
 80139ac:	2300      	movcc	r3, #0
 80139ae:	4423      	add	r3, r4
 80139b0:	e015      	b.n	80139de <rshift+0x68>
 80139b2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80139b6:	f1c1 0820 	rsb	r8, r1, #32
 80139ba:	40cf      	lsrs	r7, r1
 80139bc:	f105 0e04 	add.w	lr, r5, #4
 80139c0:	46a1      	mov	r9, r4
 80139c2:	4576      	cmp	r6, lr
 80139c4:	46f4      	mov	ip, lr
 80139c6:	d815      	bhi.n	80139f4 <rshift+0x7e>
 80139c8:	1a9a      	subs	r2, r3, r2
 80139ca:	0092      	lsls	r2, r2, #2
 80139cc:	3a04      	subs	r2, #4
 80139ce:	3501      	adds	r5, #1
 80139d0:	42ae      	cmp	r6, r5
 80139d2:	bf38      	it	cc
 80139d4:	2200      	movcc	r2, #0
 80139d6:	18a3      	adds	r3, r4, r2
 80139d8:	50a7      	str	r7, [r4, r2]
 80139da:	b107      	cbz	r7, 80139de <rshift+0x68>
 80139dc:	3304      	adds	r3, #4
 80139de:	1b1a      	subs	r2, r3, r4
 80139e0:	42a3      	cmp	r3, r4
 80139e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80139e6:	bf08      	it	eq
 80139e8:	2300      	moveq	r3, #0
 80139ea:	6102      	str	r2, [r0, #16]
 80139ec:	bf08      	it	eq
 80139ee:	6143      	streq	r3, [r0, #20]
 80139f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139f4:	f8dc c000 	ldr.w	ip, [ip]
 80139f8:	fa0c fc08 	lsl.w	ip, ip, r8
 80139fc:	ea4c 0707 	orr.w	r7, ip, r7
 8013a00:	f849 7b04 	str.w	r7, [r9], #4
 8013a04:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013a08:	40cf      	lsrs	r7, r1
 8013a0a:	e7da      	b.n	80139c2 <rshift+0x4c>
 8013a0c:	f851 cb04 	ldr.w	ip, [r1], #4
 8013a10:	f847 cf04 	str.w	ip, [r7, #4]!
 8013a14:	e7c3      	b.n	801399e <rshift+0x28>
 8013a16:	4623      	mov	r3, r4
 8013a18:	e7e1      	b.n	80139de <rshift+0x68>

08013a1a <__hexdig_fun>:
 8013a1a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8013a1e:	2b09      	cmp	r3, #9
 8013a20:	d802      	bhi.n	8013a28 <__hexdig_fun+0xe>
 8013a22:	3820      	subs	r0, #32
 8013a24:	b2c0      	uxtb	r0, r0
 8013a26:	4770      	bx	lr
 8013a28:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8013a2c:	2b05      	cmp	r3, #5
 8013a2e:	d801      	bhi.n	8013a34 <__hexdig_fun+0x1a>
 8013a30:	3847      	subs	r0, #71	@ 0x47
 8013a32:	e7f7      	b.n	8013a24 <__hexdig_fun+0xa>
 8013a34:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013a38:	2b05      	cmp	r3, #5
 8013a3a:	d801      	bhi.n	8013a40 <__hexdig_fun+0x26>
 8013a3c:	3827      	subs	r0, #39	@ 0x27
 8013a3e:	e7f1      	b.n	8013a24 <__hexdig_fun+0xa>
 8013a40:	2000      	movs	r0, #0
 8013a42:	4770      	bx	lr

08013a44 <__gethex>:
 8013a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a48:	b085      	sub	sp, #20
 8013a4a:	468a      	mov	sl, r1
 8013a4c:	9302      	str	r3, [sp, #8]
 8013a4e:	680b      	ldr	r3, [r1, #0]
 8013a50:	9001      	str	r0, [sp, #4]
 8013a52:	4690      	mov	r8, r2
 8013a54:	1c9c      	adds	r4, r3, #2
 8013a56:	46a1      	mov	r9, r4
 8013a58:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013a5c:	2830      	cmp	r0, #48	@ 0x30
 8013a5e:	d0fa      	beq.n	8013a56 <__gethex+0x12>
 8013a60:	eba9 0303 	sub.w	r3, r9, r3
 8013a64:	f1a3 0b02 	sub.w	fp, r3, #2
 8013a68:	f7ff ffd7 	bl	8013a1a <__hexdig_fun>
 8013a6c:	4605      	mov	r5, r0
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	d168      	bne.n	8013b44 <__gethex+0x100>
 8013a72:	49a0      	ldr	r1, [pc, #640]	@ (8013cf4 <__gethex+0x2b0>)
 8013a74:	2201      	movs	r2, #1
 8013a76:	4648      	mov	r0, r9
 8013a78:	f7fc fe90 	bl	801079c <strncmp>
 8013a7c:	4607      	mov	r7, r0
 8013a7e:	2800      	cmp	r0, #0
 8013a80:	d167      	bne.n	8013b52 <__gethex+0x10e>
 8013a82:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013a86:	4626      	mov	r6, r4
 8013a88:	f7ff ffc7 	bl	8013a1a <__hexdig_fun>
 8013a8c:	2800      	cmp	r0, #0
 8013a8e:	d062      	beq.n	8013b56 <__gethex+0x112>
 8013a90:	4623      	mov	r3, r4
 8013a92:	7818      	ldrb	r0, [r3, #0]
 8013a94:	2830      	cmp	r0, #48	@ 0x30
 8013a96:	4699      	mov	r9, r3
 8013a98:	f103 0301 	add.w	r3, r3, #1
 8013a9c:	d0f9      	beq.n	8013a92 <__gethex+0x4e>
 8013a9e:	f7ff ffbc 	bl	8013a1a <__hexdig_fun>
 8013aa2:	fab0 f580 	clz	r5, r0
 8013aa6:	096d      	lsrs	r5, r5, #5
 8013aa8:	f04f 0b01 	mov.w	fp, #1
 8013aac:	464a      	mov	r2, r9
 8013aae:	4616      	mov	r6, r2
 8013ab0:	3201      	adds	r2, #1
 8013ab2:	7830      	ldrb	r0, [r6, #0]
 8013ab4:	f7ff ffb1 	bl	8013a1a <__hexdig_fun>
 8013ab8:	2800      	cmp	r0, #0
 8013aba:	d1f8      	bne.n	8013aae <__gethex+0x6a>
 8013abc:	498d      	ldr	r1, [pc, #564]	@ (8013cf4 <__gethex+0x2b0>)
 8013abe:	2201      	movs	r2, #1
 8013ac0:	4630      	mov	r0, r6
 8013ac2:	f7fc fe6b 	bl	801079c <strncmp>
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	d13f      	bne.n	8013b4a <__gethex+0x106>
 8013aca:	b944      	cbnz	r4, 8013ade <__gethex+0x9a>
 8013acc:	1c74      	adds	r4, r6, #1
 8013ace:	4622      	mov	r2, r4
 8013ad0:	4616      	mov	r6, r2
 8013ad2:	3201      	adds	r2, #1
 8013ad4:	7830      	ldrb	r0, [r6, #0]
 8013ad6:	f7ff ffa0 	bl	8013a1a <__hexdig_fun>
 8013ada:	2800      	cmp	r0, #0
 8013adc:	d1f8      	bne.n	8013ad0 <__gethex+0x8c>
 8013ade:	1ba4      	subs	r4, r4, r6
 8013ae0:	00a7      	lsls	r7, r4, #2
 8013ae2:	7833      	ldrb	r3, [r6, #0]
 8013ae4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013ae8:	2b50      	cmp	r3, #80	@ 0x50
 8013aea:	d13e      	bne.n	8013b6a <__gethex+0x126>
 8013aec:	7873      	ldrb	r3, [r6, #1]
 8013aee:	2b2b      	cmp	r3, #43	@ 0x2b
 8013af0:	d033      	beq.n	8013b5a <__gethex+0x116>
 8013af2:	2b2d      	cmp	r3, #45	@ 0x2d
 8013af4:	d034      	beq.n	8013b60 <__gethex+0x11c>
 8013af6:	1c71      	adds	r1, r6, #1
 8013af8:	2400      	movs	r4, #0
 8013afa:	7808      	ldrb	r0, [r1, #0]
 8013afc:	f7ff ff8d 	bl	8013a1a <__hexdig_fun>
 8013b00:	1e43      	subs	r3, r0, #1
 8013b02:	b2db      	uxtb	r3, r3
 8013b04:	2b18      	cmp	r3, #24
 8013b06:	d830      	bhi.n	8013b6a <__gethex+0x126>
 8013b08:	f1a0 0210 	sub.w	r2, r0, #16
 8013b0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013b10:	f7ff ff83 	bl	8013a1a <__hexdig_fun>
 8013b14:	f100 3cff 	add.w	ip, r0, #4294967295
 8013b18:	fa5f fc8c 	uxtb.w	ip, ip
 8013b1c:	f1bc 0f18 	cmp.w	ip, #24
 8013b20:	f04f 030a 	mov.w	r3, #10
 8013b24:	d91e      	bls.n	8013b64 <__gethex+0x120>
 8013b26:	b104      	cbz	r4, 8013b2a <__gethex+0xe6>
 8013b28:	4252      	negs	r2, r2
 8013b2a:	4417      	add	r7, r2
 8013b2c:	f8ca 1000 	str.w	r1, [sl]
 8013b30:	b1ed      	cbz	r5, 8013b6e <__gethex+0x12a>
 8013b32:	f1bb 0f00 	cmp.w	fp, #0
 8013b36:	bf0c      	ite	eq
 8013b38:	2506      	moveq	r5, #6
 8013b3a:	2500      	movne	r5, #0
 8013b3c:	4628      	mov	r0, r5
 8013b3e:	b005      	add	sp, #20
 8013b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b44:	2500      	movs	r5, #0
 8013b46:	462c      	mov	r4, r5
 8013b48:	e7b0      	b.n	8013aac <__gethex+0x68>
 8013b4a:	2c00      	cmp	r4, #0
 8013b4c:	d1c7      	bne.n	8013ade <__gethex+0x9a>
 8013b4e:	4627      	mov	r7, r4
 8013b50:	e7c7      	b.n	8013ae2 <__gethex+0x9e>
 8013b52:	464e      	mov	r6, r9
 8013b54:	462f      	mov	r7, r5
 8013b56:	2501      	movs	r5, #1
 8013b58:	e7c3      	b.n	8013ae2 <__gethex+0x9e>
 8013b5a:	2400      	movs	r4, #0
 8013b5c:	1cb1      	adds	r1, r6, #2
 8013b5e:	e7cc      	b.n	8013afa <__gethex+0xb6>
 8013b60:	2401      	movs	r4, #1
 8013b62:	e7fb      	b.n	8013b5c <__gethex+0x118>
 8013b64:	fb03 0002 	mla	r0, r3, r2, r0
 8013b68:	e7ce      	b.n	8013b08 <__gethex+0xc4>
 8013b6a:	4631      	mov	r1, r6
 8013b6c:	e7de      	b.n	8013b2c <__gethex+0xe8>
 8013b6e:	eba6 0309 	sub.w	r3, r6, r9
 8013b72:	3b01      	subs	r3, #1
 8013b74:	4629      	mov	r1, r5
 8013b76:	2b07      	cmp	r3, #7
 8013b78:	dc0a      	bgt.n	8013b90 <__gethex+0x14c>
 8013b7a:	9801      	ldr	r0, [sp, #4]
 8013b7c:	f7fd fde2 	bl	8011744 <_Balloc>
 8013b80:	4604      	mov	r4, r0
 8013b82:	b940      	cbnz	r0, 8013b96 <__gethex+0x152>
 8013b84:	4b5c      	ldr	r3, [pc, #368]	@ (8013cf8 <__gethex+0x2b4>)
 8013b86:	4602      	mov	r2, r0
 8013b88:	21e4      	movs	r1, #228	@ 0xe4
 8013b8a:	485c      	ldr	r0, [pc, #368]	@ (8013cfc <__gethex+0x2b8>)
 8013b8c:	f7fc ff24 	bl	80109d8 <__assert_func>
 8013b90:	3101      	adds	r1, #1
 8013b92:	105b      	asrs	r3, r3, #1
 8013b94:	e7ef      	b.n	8013b76 <__gethex+0x132>
 8013b96:	f100 0a14 	add.w	sl, r0, #20
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	4655      	mov	r5, sl
 8013b9e:	469b      	mov	fp, r3
 8013ba0:	45b1      	cmp	r9, r6
 8013ba2:	d337      	bcc.n	8013c14 <__gethex+0x1d0>
 8013ba4:	f845 bb04 	str.w	fp, [r5], #4
 8013ba8:	eba5 050a 	sub.w	r5, r5, sl
 8013bac:	10ad      	asrs	r5, r5, #2
 8013bae:	6125      	str	r5, [r4, #16]
 8013bb0:	4658      	mov	r0, fp
 8013bb2:	f7fd feb9 	bl	8011928 <__hi0bits>
 8013bb6:	016d      	lsls	r5, r5, #5
 8013bb8:	f8d8 6000 	ldr.w	r6, [r8]
 8013bbc:	1a2d      	subs	r5, r5, r0
 8013bbe:	42b5      	cmp	r5, r6
 8013bc0:	dd54      	ble.n	8013c6c <__gethex+0x228>
 8013bc2:	1bad      	subs	r5, r5, r6
 8013bc4:	4629      	mov	r1, r5
 8013bc6:	4620      	mov	r0, r4
 8013bc8:	f7fe fa4d 	bl	8012066 <__any_on>
 8013bcc:	4681      	mov	r9, r0
 8013bce:	b178      	cbz	r0, 8013bf0 <__gethex+0x1ac>
 8013bd0:	1e6b      	subs	r3, r5, #1
 8013bd2:	1159      	asrs	r1, r3, #5
 8013bd4:	f003 021f 	and.w	r2, r3, #31
 8013bd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013bdc:	f04f 0901 	mov.w	r9, #1
 8013be0:	fa09 f202 	lsl.w	r2, r9, r2
 8013be4:	420a      	tst	r2, r1
 8013be6:	d003      	beq.n	8013bf0 <__gethex+0x1ac>
 8013be8:	454b      	cmp	r3, r9
 8013bea:	dc36      	bgt.n	8013c5a <__gethex+0x216>
 8013bec:	f04f 0902 	mov.w	r9, #2
 8013bf0:	4629      	mov	r1, r5
 8013bf2:	4620      	mov	r0, r4
 8013bf4:	f7ff febf 	bl	8013976 <rshift>
 8013bf8:	442f      	add	r7, r5
 8013bfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013bfe:	42bb      	cmp	r3, r7
 8013c00:	da42      	bge.n	8013c88 <__gethex+0x244>
 8013c02:	9801      	ldr	r0, [sp, #4]
 8013c04:	4621      	mov	r1, r4
 8013c06:	f7fd fddd 	bl	80117c4 <_Bfree>
 8013c0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	6013      	str	r3, [r2, #0]
 8013c10:	25a3      	movs	r5, #163	@ 0xa3
 8013c12:	e793      	b.n	8013b3c <__gethex+0xf8>
 8013c14:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013c18:	2a2e      	cmp	r2, #46	@ 0x2e
 8013c1a:	d012      	beq.n	8013c42 <__gethex+0x1fe>
 8013c1c:	2b20      	cmp	r3, #32
 8013c1e:	d104      	bne.n	8013c2a <__gethex+0x1e6>
 8013c20:	f845 bb04 	str.w	fp, [r5], #4
 8013c24:	f04f 0b00 	mov.w	fp, #0
 8013c28:	465b      	mov	r3, fp
 8013c2a:	7830      	ldrb	r0, [r6, #0]
 8013c2c:	9303      	str	r3, [sp, #12]
 8013c2e:	f7ff fef4 	bl	8013a1a <__hexdig_fun>
 8013c32:	9b03      	ldr	r3, [sp, #12]
 8013c34:	f000 000f 	and.w	r0, r0, #15
 8013c38:	4098      	lsls	r0, r3
 8013c3a:	ea4b 0b00 	orr.w	fp, fp, r0
 8013c3e:	3304      	adds	r3, #4
 8013c40:	e7ae      	b.n	8013ba0 <__gethex+0x15c>
 8013c42:	45b1      	cmp	r9, r6
 8013c44:	d8ea      	bhi.n	8013c1c <__gethex+0x1d8>
 8013c46:	492b      	ldr	r1, [pc, #172]	@ (8013cf4 <__gethex+0x2b0>)
 8013c48:	9303      	str	r3, [sp, #12]
 8013c4a:	2201      	movs	r2, #1
 8013c4c:	4630      	mov	r0, r6
 8013c4e:	f7fc fda5 	bl	801079c <strncmp>
 8013c52:	9b03      	ldr	r3, [sp, #12]
 8013c54:	2800      	cmp	r0, #0
 8013c56:	d1e1      	bne.n	8013c1c <__gethex+0x1d8>
 8013c58:	e7a2      	b.n	8013ba0 <__gethex+0x15c>
 8013c5a:	1ea9      	subs	r1, r5, #2
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	f7fe fa02 	bl	8012066 <__any_on>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	d0c2      	beq.n	8013bec <__gethex+0x1a8>
 8013c66:	f04f 0903 	mov.w	r9, #3
 8013c6a:	e7c1      	b.n	8013bf0 <__gethex+0x1ac>
 8013c6c:	da09      	bge.n	8013c82 <__gethex+0x23e>
 8013c6e:	1b75      	subs	r5, r6, r5
 8013c70:	4621      	mov	r1, r4
 8013c72:	9801      	ldr	r0, [sp, #4]
 8013c74:	462a      	mov	r2, r5
 8013c76:	f7fd ffbd 	bl	8011bf4 <__lshift>
 8013c7a:	1b7f      	subs	r7, r7, r5
 8013c7c:	4604      	mov	r4, r0
 8013c7e:	f100 0a14 	add.w	sl, r0, #20
 8013c82:	f04f 0900 	mov.w	r9, #0
 8013c86:	e7b8      	b.n	8013bfa <__gethex+0x1b6>
 8013c88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013c8c:	42bd      	cmp	r5, r7
 8013c8e:	dd6f      	ble.n	8013d70 <__gethex+0x32c>
 8013c90:	1bed      	subs	r5, r5, r7
 8013c92:	42ae      	cmp	r6, r5
 8013c94:	dc34      	bgt.n	8013d00 <__gethex+0x2bc>
 8013c96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013c9a:	2b02      	cmp	r3, #2
 8013c9c:	d022      	beq.n	8013ce4 <__gethex+0x2a0>
 8013c9e:	2b03      	cmp	r3, #3
 8013ca0:	d024      	beq.n	8013cec <__gethex+0x2a8>
 8013ca2:	2b01      	cmp	r3, #1
 8013ca4:	d115      	bne.n	8013cd2 <__gethex+0x28e>
 8013ca6:	42ae      	cmp	r6, r5
 8013ca8:	d113      	bne.n	8013cd2 <__gethex+0x28e>
 8013caa:	2e01      	cmp	r6, #1
 8013cac:	d10b      	bne.n	8013cc6 <__gethex+0x282>
 8013cae:	9a02      	ldr	r2, [sp, #8]
 8013cb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013cb4:	6013      	str	r3, [r2, #0]
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	6123      	str	r3, [r4, #16]
 8013cba:	f8ca 3000 	str.w	r3, [sl]
 8013cbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013cc0:	2562      	movs	r5, #98	@ 0x62
 8013cc2:	601c      	str	r4, [r3, #0]
 8013cc4:	e73a      	b.n	8013b3c <__gethex+0xf8>
 8013cc6:	1e71      	subs	r1, r6, #1
 8013cc8:	4620      	mov	r0, r4
 8013cca:	f7fe f9cc 	bl	8012066 <__any_on>
 8013cce:	2800      	cmp	r0, #0
 8013cd0:	d1ed      	bne.n	8013cae <__gethex+0x26a>
 8013cd2:	9801      	ldr	r0, [sp, #4]
 8013cd4:	4621      	mov	r1, r4
 8013cd6:	f7fd fd75 	bl	80117c4 <_Bfree>
 8013cda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013cdc:	2300      	movs	r3, #0
 8013cde:	6013      	str	r3, [r2, #0]
 8013ce0:	2550      	movs	r5, #80	@ 0x50
 8013ce2:	e72b      	b.n	8013b3c <__gethex+0xf8>
 8013ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d1f3      	bne.n	8013cd2 <__gethex+0x28e>
 8013cea:	e7e0      	b.n	8013cae <__gethex+0x26a>
 8013cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d1dd      	bne.n	8013cae <__gethex+0x26a>
 8013cf2:	e7ee      	b.n	8013cd2 <__gethex+0x28e>
 8013cf4:	08015ce8 	.word	0x08015ce8
 8013cf8:	08015b7e 	.word	0x08015b7e
 8013cfc:	08015e75 	.word	0x08015e75
 8013d00:	1e6f      	subs	r7, r5, #1
 8013d02:	f1b9 0f00 	cmp.w	r9, #0
 8013d06:	d130      	bne.n	8013d6a <__gethex+0x326>
 8013d08:	b127      	cbz	r7, 8013d14 <__gethex+0x2d0>
 8013d0a:	4639      	mov	r1, r7
 8013d0c:	4620      	mov	r0, r4
 8013d0e:	f7fe f9aa 	bl	8012066 <__any_on>
 8013d12:	4681      	mov	r9, r0
 8013d14:	117a      	asrs	r2, r7, #5
 8013d16:	2301      	movs	r3, #1
 8013d18:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013d1c:	f007 071f 	and.w	r7, r7, #31
 8013d20:	40bb      	lsls	r3, r7
 8013d22:	4213      	tst	r3, r2
 8013d24:	4629      	mov	r1, r5
 8013d26:	4620      	mov	r0, r4
 8013d28:	bf18      	it	ne
 8013d2a:	f049 0902 	orrne.w	r9, r9, #2
 8013d2e:	f7ff fe22 	bl	8013976 <rshift>
 8013d32:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013d36:	1b76      	subs	r6, r6, r5
 8013d38:	2502      	movs	r5, #2
 8013d3a:	f1b9 0f00 	cmp.w	r9, #0
 8013d3e:	d047      	beq.n	8013dd0 <__gethex+0x38c>
 8013d40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013d44:	2b02      	cmp	r3, #2
 8013d46:	d015      	beq.n	8013d74 <__gethex+0x330>
 8013d48:	2b03      	cmp	r3, #3
 8013d4a:	d017      	beq.n	8013d7c <__gethex+0x338>
 8013d4c:	2b01      	cmp	r3, #1
 8013d4e:	d109      	bne.n	8013d64 <__gethex+0x320>
 8013d50:	f019 0f02 	tst.w	r9, #2
 8013d54:	d006      	beq.n	8013d64 <__gethex+0x320>
 8013d56:	f8da 3000 	ldr.w	r3, [sl]
 8013d5a:	ea49 0903 	orr.w	r9, r9, r3
 8013d5e:	f019 0f01 	tst.w	r9, #1
 8013d62:	d10e      	bne.n	8013d82 <__gethex+0x33e>
 8013d64:	f045 0510 	orr.w	r5, r5, #16
 8013d68:	e032      	b.n	8013dd0 <__gethex+0x38c>
 8013d6a:	f04f 0901 	mov.w	r9, #1
 8013d6e:	e7d1      	b.n	8013d14 <__gethex+0x2d0>
 8013d70:	2501      	movs	r5, #1
 8013d72:	e7e2      	b.n	8013d3a <__gethex+0x2f6>
 8013d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d76:	f1c3 0301 	rsb	r3, r3, #1
 8013d7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d0f0      	beq.n	8013d64 <__gethex+0x320>
 8013d82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013d86:	f104 0314 	add.w	r3, r4, #20
 8013d8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013d8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013d92:	f04f 0c00 	mov.w	ip, #0
 8013d96:	4618      	mov	r0, r3
 8013d98:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013da0:	d01b      	beq.n	8013dda <__gethex+0x396>
 8013da2:	3201      	adds	r2, #1
 8013da4:	6002      	str	r2, [r0, #0]
 8013da6:	2d02      	cmp	r5, #2
 8013da8:	f104 0314 	add.w	r3, r4, #20
 8013dac:	d13c      	bne.n	8013e28 <__gethex+0x3e4>
 8013dae:	f8d8 2000 	ldr.w	r2, [r8]
 8013db2:	3a01      	subs	r2, #1
 8013db4:	42b2      	cmp	r2, r6
 8013db6:	d109      	bne.n	8013dcc <__gethex+0x388>
 8013db8:	1171      	asrs	r1, r6, #5
 8013dba:	2201      	movs	r2, #1
 8013dbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013dc0:	f006 061f 	and.w	r6, r6, #31
 8013dc4:	fa02 f606 	lsl.w	r6, r2, r6
 8013dc8:	421e      	tst	r6, r3
 8013dca:	d13a      	bne.n	8013e42 <__gethex+0x3fe>
 8013dcc:	f045 0520 	orr.w	r5, r5, #32
 8013dd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013dd2:	601c      	str	r4, [r3, #0]
 8013dd4:	9b02      	ldr	r3, [sp, #8]
 8013dd6:	601f      	str	r7, [r3, #0]
 8013dd8:	e6b0      	b.n	8013b3c <__gethex+0xf8>
 8013dda:	4299      	cmp	r1, r3
 8013ddc:	f843 cc04 	str.w	ip, [r3, #-4]
 8013de0:	d8d9      	bhi.n	8013d96 <__gethex+0x352>
 8013de2:	68a3      	ldr	r3, [r4, #8]
 8013de4:	459b      	cmp	fp, r3
 8013de6:	db17      	blt.n	8013e18 <__gethex+0x3d4>
 8013de8:	6861      	ldr	r1, [r4, #4]
 8013dea:	9801      	ldr	r0, [sp, #4]
 8013dec:	3101      	adds	r1, #1
 8013dee:	f7fd fca9 	bl	8011744 <_Balloc>
 8013df2:	4681      	mov	r9, r0
 8013df4:	b918      	cbnz	r0, 8013dfe <__gethex+0x3ba>
 8013df6:	4b1a      	ldr	r3, [pc, #104]	@ (8013e60 <__gethex+0x41c>)
 8013df8:	4602      	mov	r2, r0
 8013dfa:	2184      	movs	r1, #132	@ 0x84
 8013dfc:	e6c5      	b.n	8013b8a <__gethex+0x146>
 8013dfe:	6922      	ldr	r2, [r4, #16]
 8013e00:	3202      	adds	r2, #2
 8013e02:	f104 010c 	add.w	r1, r4, #12
 8013e06:	0092      	lsls	r2, r2, #2
 8013e08:	300c      	adds	r0, #12
 8013e0a:	f7fc fdd0 	bl	80109ae <memcpy>
 8013e0e:	4621      	mov	r1, r4
 8013e10:	9801      	ldr	r0, [sp, #4]
 8013e12:	f7fd fcd7 	bl	80117c4 <_Bfree>
 8013e16:	464c      	mov	r4, r9
 8013e18:	6923      	ldr	r3, [r4, #16]
 8013e1a:	1c5a      	adds	r2, r3, #1
 8013e1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013e20:	6122      	str	r2, [r4, #16]
 8013e22:	2201      	movs	r2, #1
 8013e24:	615a      	str	r2, [r3, #20]
 8013e26:	e7be      	b.n	8013da6 <__gethex+0x362>
 8013e28:	6922      	ldr	r2, [r4, #16]
 8013e2a:	455a      	cmp	r2, fp
 8013e2c:	dd0b      	ble.n	8013e46 <__gethex+0x402>
 8013e2e:	2101      	movs	r1, #1
 8013e30:	4620      	mov	r0, r4
 8013e32:	f7ff fda0 	bl	8013976 <rshift>
 8013e36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013e3a:	3701      	adds	r7, #1
 8013e3c:	42bb      	cmp	r3, r7
 8013e3e:	f6ff aee0 	blt.w	8013c02 <__gethex+0x1be>
 8013e42:	2501      	movs	r5, #1
 8013e44:	e7c2      	b.n	8013dcc <__gethex+0x388>
 8013e46:	f016 061f 	ands.w	r6, r6, #31
 8013e4a:	d0fa      	beq.n	8013e42 <__gethex+0x3fe>
 8013e4c:	4453      	add	r3, sl
 8013e4e:	f1c6 0620 	rsb	r6, r6, #32
 8013e52:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013e56:	f7fd fd67 	bl	8011928 <__hi0bits>
 8013e5a:	42b0      	cmp	r0, r6
 8013e5c:	dbe7      	blt.n	8013e2e <__gethex+0x3ea>
 8013e5e:	e7f0      	b.n	8013e42 <__gethex+0x3fe>
 8013e60:	08015b7e 	.word	0x08015b7e

08013e64 <L_shift>:
 8013e64:	f1c2 0208 	rsb	r2, r2, #8
 8013e68:	0092      	lsls	r2, r2, #2
 8013e6a:	b570      	push	{r4, r5, r6, lr}
 8013e6c:	f1c2 0620 	rsb	r6, r2, #32
 8013e70:	6843      	ldr	r3, [r0, #4]
 8013e72:	6804      	ldr	r4, [r0, #0]
 8013e74:	fa03 f506 	lsl.w	r5, r3, r6
 8013e78:	432c      	orrs	r4, r5
 8013e7a:	40d3      	lsrs	r3, r2
 8013e7c:	6004      	str	r4, [r0, #0]
 8013e7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013e82:	4288      	cmp	r0, r1
 8013e84:	d3f4      	bcc.n	8013e70 <L_shift+0xc>
 8013e86:	bd70      	pop	{r4, r5, r6, pc}

08013e88 <__match>:
 8013e88:	b530      	push	{r4, r5, lr}
 8013e8a:	6803      	ldr	r3, [r0, #0]
 8013e8c:	3301      	adds	r3, #1
 8013e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e92:	b914      	cbnz	r4, 8013e9a <__match+0x12>
 8013e94:	6003      	str	r3, [r0, #0]
 8013e96:	2001      	movs	r0, #1
 8013e98:	bd30      	pop	{r4, r5, pc}
 8013e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e9e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013ea2:	2d19      	cmp	r5, #25
 8013ea4:	bf98      	it	ls
 8013ea6:	3220      	addls	r2, #32
 8013ea8:	42a2      	cmp	r2, r4
 8013eaa:	d0f0      	beq.n	8013e8e <__match+0x6>
 8013eac:	2000      	movs	r0, #0
 8013eae:	e7f3      	b.n	8013e98 <__match+0x10>

08013eb0 <__hexnan>:
 8013eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eb4:	680b      	ldr	r3, [r1, #0]
 8013eb6:	6801      	ldr	r1, [r0, #0]
 8013eb8:	115e      	asrs	r6, r3, #5
 8013eba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013ebe:	f013 031f 	ands.w	r3, r3, #31
 8013ec2:	b087      	sub	sp, #28
 8013ec4:	bf18      	it	ne
 8013ec6:	3604      	addne	r6, #4
 8013ec8:	2500      	movs	r5, #0
 8013eca:	1f37      	subs	r7, r6, #4
 8013ecc:	4682      	mov	sl, r0
 8013ece:	4690      	mov	r8, r2
 8013ed0:	9301      	str	r3, [sp, #4]
 8013ed2:	f846 5c04 	str.w	r5, [r6, #-4]
 8013ed6:	46b9      	mov	r9, r7
 8013ed8:	463c      	mov	r4, r7
 8013eda:	9502      	str	r5, [sp, #8]
 8013edc:	46ab      	mov	fp, r5
 8013ede:	784a      	ldrb	r2, [r1, #1]
 8013ee0:	1c4b      	adds	r3, r1, #1
 8013ee2:	9303      	str	r3, [sp, #12]
 8013ee4:	b342      	cbz	r2, 8013f38 <__hexnan+0x88>
 8013ee6:	4610      	mov	r0, r2
 8013ee8:	9105      	str	r1, [sp, #20]
 8013eea:	9204      	str	r2, [sp, #16]
 8013eec:	f7ff fd95 	bl	8013a1a <__hexdig_fun>
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	d151      	bne.n	8013f98 <__hexnan+0xe8>
 8013ef4:	9a04      	ldr	r2, [sp, #16]
 8013ef6:	9905      	ldr	r1, [sp, #20]
 8013ef8:	2a20      	cmp	r2, #32
 8013efa:	d818      	bhi.n	8013f2e <__hexnan+0x7e>
 8013efc:	9b02      	ldr	r3, [sp, #8]
 8013efe:	459b      	cmp	fp, r3
 8013f00:	dd13      	ble.n	8013f2a <__hexnan+0x7a>
 8013f02:	454c      	cmp	r4, r9
 8013f04:	d206      	bcs.n	8013f14 <__hexnan+0x64>
 8013f06:	2d07      	cmp	r5, #7
 8013f08:	dc04      	bgt.n	8013f14 <__hexnan+0x64>
 8013f0a:	462a      	mov	r2, r5
 8013f0c:	4649      	mov	r1, r9
 8013f0e:	4620      	mov	r0, r4
 8013f10:	f7ff ffa8 	bl	8013e64 <L_shift>
 8013f14:	4544      	cmp	r4, r8
 8013f16:	d952      	bls.n	8013fbe <__hexnan+0x10e>
 8013f18:	2300      	movs	r3, #0
 8013f1a:	f1a4 0904 	sub.w	r9, r4, #4
 8013f1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013f22:	f8cd b008 	str.w	fp, [sp, #8]
 8013f26:	464c      	mov	r4, r9
 8013f28:	461d      	mov	r5, r3
 8013f2a:	9903      	ldr	r1, [sp, #12]
 8013f2c:	e7d7      	b.n	8013ede <__hexnan+0x2e>
 8013f2e:	2a29      	cmp	r2, #41	@ 0x29
 8013f30:	d157      	bne.n	8013fe2 <__hexnan+0x132>
 8013f32:	3102      	adds	r1, #2
 8013f34:	f8ca 1000 	str.w	r1, [sl]
 8013f38:	f1bb 0f00 	cmp.w	fp, #0
 8013f3c:	d051      	beq.n	8013fe2 <__hexnan+0x132>
 8013f3e:	454c      	cmp	r4, r9
 8013f40:	d206      	bcs.n	8013f50 <__hexnan+0xa0>
 8013f42:	2d07      	cmp	r5, #7
 8013f44:	dc04      	bgt.n	8013f50 <__hexnan+0xa0>
 8013f46:	462a      	mov	r2, r5
 8013f48:	4649      	mov	r1, r9
 8013f4a:	4620      	mov	r0, r4
 8013f4c:	f7ff ff8a 	bl	8013e64 <L_shift>
 8013f50:	4544      	cmp	r4, r8
 8013f52:	d936      	bls.n	8013fc2 <__hexnan+0x112>
 8013f54:	f1a8 0204 	sub.w	r2, r8, #4
 8013f58:	4623      	mov	r3, r4
 8013f5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8013f5e:	f842 1f04 	str.w	r1, [r2, #4]!
 8013f62:	429f      	cmp	r7, r3
 8013f64:	d2f9      	bcs.n	8013f5a <__hexnan+0xaa>
 8013f66:	1b3b      	subs	r3, r7, r4
 8013f68:	f023 0303 	bic.w	r3, r3, #3
 8013f6c:	3304      	adds	r3, #4
 8013f6e:	3401      	adds	r4, #1
 8013f70:	3e03      	subs	r6, #3
 8013f72:	42b4      	cmp	r4, r6
 8013f74:	bf88      	it	hi
 8013f76:	2304      	movhi	r3, #4
 8013f78:	4443      	add	r3, r8
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	f843 2b04 	str.w	r2, [r3], #4
 8013f80:	429f      	cmp	r7, r3
 8013f82:	d2fb      	bcs.n	8013f7c <__hexnan+0xcc>
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	b91b      	cbnz	r3, 8013f90 <__hexnan+0xe0>
 8013f88:	4547      	cmp	r7, r8
 8013f8a:	d128      	bne.n	8013fde <__hexnan+0x12e>
 8013f8c:	2301      	movs	r3, #1
 8013f8e:	603b      	str	r3, [r7, #0]
 8013f90:	2005      	movs	r0, #5
 8013f92:	b007      	add	sp, #28
 8013f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f98:	3501      	adds	r5, #1
 8013f9a:	2d08      	cmp	r5, #8
 8013f9c:	f10b 0b01 	add.w	fp, fp, #1
 8013fa0:	dd06      	ble.n	8013fb0 <__hexnan+0x100>
 8013fa2:	4544      	cmp	r4, r8
 8013fa4:	d9c1      	bls.n	8013f2a <__hexnan+0x7a>
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	f844 3c04 	str.w	r3, [r4, #-4]
 8013fac:	2501      	movs	r5, #1
 8013fae:	3c04      	subs	r4, #4
 8013fb0:	6822      	ldr	r2, [r4, #0]
 8013fb2:	f000 000f 	and.w	r0, r0, #15
 8013fb6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013fba:	6020      	str	r0, [r4, #0]
 8013fbc:	e7b5      	b.n	8013f2a <__hexnan+0x7a>
 8013fbe:	2508      	movs	r5, #8
 8013fc0:	e7b3      	b.n	8013f2a <__hexnan+0x7a>
 8013fc2:	9b01      	ldr	r3, [sp, #4]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d0dd      	beq.n	8013f84 <__hexnan+0xd4>
 8013fc8:	f1c3 0320 	rsb	r3, r3, #32
 8013fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8013fd0:	40da      	lsrs	r2, r3
 8013fd2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013fd6:	4013      	ands	r3, r2
 8013fd8:	f846 3c04 	str.w	r3, [r6, #-4]
 8013fdc:	e7d2      	b.n	8013f84 <__hexnan+0xd4>
 8013fde:	3f04      	subs	r7, #4
 8013fe0:	e7d0      	b.n	8013f84 <__hexnan+0xd4>
 8013fe2:	2004      	movs	r0, #4
 8013fe4:	e7d5      	b.n	8013f92 <__hexnan+0xe2>

08013fe6 <__ascii_mbtowc>:
 8013fe6:	b082      	sub	sp, #8
 8013fe8:	b901      	cbnz	r1, 8013fec <__ascii_mbtowc+0x6>
 8013fea:	a901      	add	r1, sp, #4
 8013fec:	b142      	cbz	r2, 8014000 <__ascii_mbtowc+0x1a>
 8013fee:	b14b      	cbz	r3, 8014004 <__ascii_mbtowc+0x1e>
 8013ff0:	7813      	ldrb	r3, [r2, #0]
 8013ff2:	600b      	str	r3, [r1, #0]
 8013ff4:	7812      	ldrb	r2, [r2, #0]
 8013ff6:	1e10      	subs	r0, r2, #0
 8013ff8:	bf18      	it	ne
 8013ffa:	2001      	movne	r0, #1
 8013ffc:	b002      	add	sp, #8
 8013ffe:	4770      	bx	lr
 8014000:	4610      	mov	r0, r2
 8014002:	e7fb      	b.n	8013ffc <__ascii_mbtowc+0x16>
 8014004:	f06f 0001 	mvn.w	r0, #1
 8014008:	e7f8      	b.n	8013ffc <__ascii_mbtowc+0x16>

0801400a <_realloc_r>:
 801400a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801400e:	4680      	mov	r8, r0
 8014010:	4615      	mov	r5, r2
 8014012:	460c      	mov	r4, r1
 8014014:	b921      	cbnz	r1, 8014020 <_realloc_r+0x16>
 8014016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801401a:	4611      	mov	r1, r2
 801401c:	f7fb bae8 	b.w	800f5f0 <_malloc_r>
 8014020:	b92a      	cbnz	r2, 801402e <_realloc_r+0x24>
 8014022:	f7fd fb45 	bl	80116b0 <_free_r>
 8014026:	2400      	movs	r4, #0
 8014028:	4620      	mov	r0, r4
 801402a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801402e:	f000 fab1 	bl	8014594 <_malloc_usable_size_r>
 8014032:	4285      	cmp	r5, r0
 8014034:	4606      	mov	r6, r0
 8014036:	d802      	bhi.n	801403e <_realloc_r+0x34>
 8014038:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801403c:	d8f4      	bhi.n	8014028 <_realloc_r+0x1e>
 801403e:	4629      	mov	r1, r5
 8014040:	4640      	mov	r0, r8
 8014042:	f7fb fad5 	bl	800f5f0 <_malloc_r>
 8014046:	4607      	mov	r7, r0
 8014048:	2800      	cmp	r0, #0
 801404a:	d0ec      	beq.n	8014026 <_realloc_r+0x1c>
 801404c:	42b5      	cmp	r5, r6
 801404e:	462a      	mov	r2, r5
 8014050:	4621      	mov	r1, r4
 8014052:	bf28      	it	cs
 8014054:	4632      	movcs	r2, r6
 8014056:	f7fc fcaa 	bl	80109ae <memcpy>
 801405a:	4621      	mov	r1, r4
 801405c:	4640      	mov	r0, r8
 801405e:	f7fd fb27 	bl	80116b0 <_free_r>
 8014062:	463c      	mov	r4, r7
 8014064:	e7e0      	b.n	8014028 <_realloc_r+0x1e>
	...

08014068 <_strtoul_l.constprop.0>:
 8014068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801406c:	4e34      	ldr	r6, [pc, #208]	@ (8014140 <_strtoul_l.constprop.0+0xd8>)
 801406e:	4686      	mov	lr, r0
 8014070:	460d      	mov	r5, r1
 8014072:	4628      	mov	r0, r5
 8014074:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014078:	5d37      	ldrb	r7, [r6, r4]
 801407a:	f017 0708 	ands.w	r7, r7, #8
 801407e:	d1f8      	bne.n	8014072 <_strtoul_l.constprop.0+0xa>
 8014080:	2c2d      	cmp	r4, #45	@ 0x2d
 8014082:	d12f      	bne.n	80140e4 <_strtoul_l.constprop.0+0x7c>
 8014084:	782c      	ldrb	r4, [r5, #0]
 8014086:	2701      	movs	r7, #1
 8014088:	1c85      	adds	r5, r0, #2
 801408a:	f033 0010 	bics.w	r0, r3, #16
 801408e:	d109      	bne.n	80140a4 <_strtoul_l.constprop.0+0x3c>
 8014090:	2c30      	cmp	r4, #48	@ 0x30
 8014092:	d12c      	bne.n	80140ee <_strtoul_l.constprop.0+0x86>
 8014094:	7828      	ldrb	r0, [r5, #0]
 8014096:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801409a:	2858      	cmp	r0, #88	@ 0x58
 801409c:	d127      	bne.n	80140ee <_strtoul_l.constprop.0+0x86>
 801409e:	786c      	ldrb	r4, [r5, #1]
 80140a0:	2310      	movs	r3, #16
 80140a2:	3502      	adds	r5, #2
 80140a4:	f04f 38ff 	mov.w	r8, #4294967295
 80140a8:	2600      	movs	r6, #0
 80140aa:	fbb8 f8f3 	udiv	r8, r8, r3
 80140ae:	fb03 f908 	mul.w	r9, r3, r8
 80140b2:	ea6f 0909 	mvn.w	r9, r9
 80140b6:	4630      	mov	r0, r6
 80140b8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80140bc:	f1bc 0f09 	cmp.w	ip, #9
 80140c0:	d81c      	bhi.n	80140fc <_strtoul_l.constprop.0+0x94>
 80140c2:	4664      	mov	r4, ip
 80140c4:	42a3      	cmp	r3, r4
 80140c6:	dd2a      	ble.n	801411e <_strtoul_l.constprop.0+0xb6>
 80140c8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80140cc:	d007      	beq.n	80140de <_strtoul_l.constprop.0+0x76>
 80140ce:	4580      	cmp	r8, r0
 80140d0:	d322      	bcc.n	8014118 <_strtoul_l.constprop.0+0xb0>
 80140d2:	d101      	bne.n	80140d8 <_strtoul_l.constprop.0+0x70>
 80140d4:	45a1      	cmp	r9, r4
 80140d6:	db1f      	blt.n	8014118 <_strtoul_l.constprop.0+0xb0>
 80140d8:	fb00 4003 	mla	r0, r0, r3, r4
 80140dc:	2601      	movs	r6, #1
 80140de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80140e2:	e7e9      	b.n	80140b8 <_strtoul_l.constprop.0+0x50>
 80140e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80140e6:	bf04      	itt	eq
 80140e8:	782c      	ldrbeq	r4, [r5, #0]
 80140ea:	1c85      	addeq	r5, r0, #2
 80140ec:	e7cd      	b.n	801408a <_strtoul_l.constprop.0+0x22>
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d1d8      	bne.n	80140a4 <_strtoul_l.constprop.0+0x3c>
 80140f2:	2c30      	cmp	r4, #48	@ 0x30
 80140f4:	bf0c      	ite	eq
 80140f6:	2308      	moveq	r3, #8
 80140f8:	230a      	movne	r3, #10
 80140fa:	e7d3      	b.n	80140a4 <_strtoul_l.constprop.0+0x3c>
 80140fc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8014100:	f1bc 0f19 	cmp.w	ip, #25
 8014104:	d801      	bhi.n	801410a <_strtoul_l.constprop.0+0xa2>
 8014106:	3c37      	subs	r4, #55	@ 0x37
 8014108:	e7dc      	b.n	80140c4 <_strtoul_l.constprop.0+0x5c>
 801410a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801410e:	f1bc 0f19 	cmp.w	ip, #25
 8014112:	d804      	bhi.n	801411e <_strtoul_l.constprop.0+0xb6>
 8014114:	3c57      	subs	r4, #87	@ 0x57
 8014116:	e7d5      	b.n	80140c4 <_strtoul_l.constprop.0+0x5c>
 8014118:	f04f 36ff 	mov.w	r6, #4294967295
 801411c:	e7df      	b.n	80140de <_strtoul_l.constprop.0+0x76>
 801411e:	1c73      	adds	r3, r6, #1
 8014120:	d106      	bne.n	8014130 <_strtoul_l.constprop.0+0xc8>
 8014122:	2322      	movs	r3, #34	@ 0x22
 8014124:	f8ce 3000 	str.w	r3, [lr]
 8014128:	4630      	mov	r0, r6
 801412a:	b932      	cbnz	r2, 801413a <_strtoul_l.constprop.0+0xd2>
 801412c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014130:	b107      	cbz	r7, 8014134 <_strtoul_l.constprop.0+0xcc>
 8014132:	4240      	negs	r0, r0
 8014134:	2a00      	cmp	r2, #0
 8014136:	d0f9      	beq.n	801412c <_strtoul_l.constprop.0+0xc4>
 8014138:	b106      	cbz	r6, 801413c <_strtoul_l.constprop.0+0xd4>
 801413a:	1e69      	subs	r1, r5, #1
 801413c:	6011      	str	r1, [r2, #0]
 801413e:	e7f5      	b.n	801412c <_strtoul_l.constprop.0+0xc4>
 8014140:	08015d41 	.word	0x08015d41

08014144 <_strtoul_r>:
 8014144:	f7ff bf90 	b.w	8014068 <_strtoul_l.constprop.0>

08014148 <__ascii_wctomb>:
 8014148:	4603      	mov	r3, r0
 801414a:	4608      	mov	r0, r1
 801414c:	b141      	cbz	r1, 8014160 <__ascii_wctomb+0x18>
 801414e:	2aff      	cmp	r2, #255	@ 0xff
 8014150:	d904      	bls.n	801415c <__ascii_wctomb+0x14>
 8014152:	228a      	movs	r2, #138	@ 0x8a
 8014154:	601a      	str	r2, [r3, #0]
 8014156:	f04f 30ff 	mov.w	r0, #4294967295
 801415a:	4770      	bx	lr
 801415c:	700a      	strb	r2, [r1, #0]
 801415e:	2001      	movs	r0, #1
 8014160:	4770      	bx	lr

08014162 <__sfputc_r>:
 8014162:	6893      	ldr	r3, [r2, #8]
 8014164:	3b01      	subs	r3, #1
 8014166:	2b00      	cmp	r3, #0
 8014168:	b410      	push	{r4}
 801416a:	6093      	str	r3, [r2, #8]
 801416c:	da08      	bge.n	8014180 <__sfputc_r+0x1e>
 801416e:	6994      	ldr	r4, [r2, #24]
 8014170:	42a3      	cmp	r3, r4
 8014172:	db01      	blt.n	8014178 <__sfputc_r+0x16>
 8014174:	290a      	cmp	r1, #10
 8014176:	d103      	bne.n	8014180 <__sfputc_r+0x1e>
 8014178:	f85d 4b04 	ldr.w	r4, [sp], #4
 801417c:	f000 b932 	b.w	80143e4 <__swbuf_r>
 8014180:	6813      	ldr	r3, [r2, #0]
 8014182:	1c58      	adds	r0, r3, #1
 8014184:	6010      	str	r0, [r2, #0]
 8014186:	7019      	strb	r1, [r3, #0]
 8014188:	4608      	mov	r0, r1
 801418a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801418e:	4770      	bx	lr

08014190 <__sfputs_r>:
 8014190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014192:	4606      	mov	r6, r0
 8014194:	460f      	mov	r7, r1
 8014196:	4614      	mov	r4, r2
 8014198:	18d5      	adds	r5, r2, r3
 801419a:	42ac      	cmp	r4, r5
 801419c:	d101      	bne.n	80141a2 <__sfputs_r+0x12>
 801419e:	2000      	movs	r0, #0
 80141a0:	e007      	b.n	80141b2 <__sfputs_r+0x22>
 80141a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141a6:	463a      	mov	r2, r7
 80141a8:	4630      	mov	r0, r6
 80141aa:	f7ff ffda 	bl	8014162 <__sfputc_r>
 80141ae:	1c43      	adds	r3, r0, #1
 80141b0:	d1f3      	bne.n	801419a <__sfputs_r+0xa>
 80141b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080141b4 <_vfiprintf_r>:
 80141b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b8:	460d      	mov	r5, r1
 80141ba:	b09d      	sub	sp, #116	@ 0x74
 80141bc:	4614      	mov	r4, r2
 80141be:	4698      	mov	r8, r3
 80141c0:	4606      	mov	r6, r0
 80141c2:	b118      	cbz	r0, 80141cc <_vfiprintf_r+0x18>
 80141c4:	6a03      	ldr	r3, [r0, #32]
 80141c6:	b90b      	cbnz	r3, 80141cc <_vfiprintf_r+0x18>
 80141c8:	f7fc f9d8 	bl	801057c <__sinit>
 80141cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80141ce:	07d9      	lsls	r1, r3, #31
 80141d0:	d405      	bmi.n	80141de <_vfiprintf_r+0x2a>
 80141d2:	89ab      	ldrh	r3, [r5, #12]
 80141d4:	059a      	lsls	r2, r3, #22
 80141d6:	d402      	bmi.n	80141de <_vfiprintf_r+0x2a>
 80141d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80141da:	f7fc fbe6 	bl	80109aa <__retarget_lock_acquire_recursive>
 80141de:	89ab      	ldrh	r3, [r5, #12]
 80141e0:	071b      	lsls	r3, r3, #28
 80141e2:	d501      	bpl.n	80141e8 <_vfiprintf_r+0x34>
 80141e4:	692b      	ldr	r3, [r5, #16]
 80141e6:	b99b      	cbnz	r3, 8014210 <_vfiprintf_r+0x5c>
 80141e8:	4629      	mov	r1, r5
 80141ea:	4630      	mov	r0, r6
 80141ec:	f000 f938 	bl	8014460 <__swsetup_r>
 80141f0:	b170      	cbz	r0, 8014210 <_vfiprintf_r+0x5c>
 80141f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80141f4:	07dc      	lsls	r4, r3, #31
 80141f6:	d504      	bpl.n	8014202 <_vfiprintf_r+0x4e>
 80141f8:	f04f 30ff 	mov.w	r0, #4294967295
 80141fc:	b01d      	add	sp, #116	@ 0x74
 80141fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014202:	89ab      	ldrh	r3, [r5, #12]
 8014204:	0598      	lsls	r0, r3, #22
 8014206:	d4f7      	bmi.n	80141f8 <_vfiprintf_r+0x44>
 8014208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801420a:	f7fc fbcf 	bl	80109ac <__retarget_lock_release_recursive>
 801420e:	e7f3      	b.n	80141f8 <_vfiprintf_r+0x44>
 8014210:	2300      	movs	r3, #0
 8014212:	9309      	str	r3, [sp, #36]	@ 0x24
 8014214:	2320      	movs	r3, #32
 8014216:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801421a:	f8cd 800c 	str.w	r8, [sp, #12]
 801421e:	2330      	movs	r3, #48	@ 0x30
 8014220:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80143d0 <_vfiprintf_r+0x21c>
 8014224:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014228:	f04f 0901 	mov.w	r9, #1
 801422c:	4623      	mov	r3, r4
 801422e:	469a      	mov	sl, r3
 8014230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014234:	b10a      	cbz	r2, 801423a <_vfiprintf_r+0x86>
 8014236:	2a25      	cmp	r2, #37	@ 0x25
 8014238:	d1f9      	bne.n	801422e <_vfiprintf_r+0x7a>
 801423a:	ebba 0b04 	subs.w	fp, sl, r4
 801423e:	d00b      	beq.n	8014258 <_vfiprintf_r+0xa4>
 8014240:	465b      	mov	r3, fp
 8014242:	4622      	mov	r2, r4
 8014244:	4629      	mov	r1, r5
 8014246:	4630      	mov	r0, r6
 8014248:	f7ff ffa2 	bl	8014190 <__sfputs_r>
 801424c:	3001      	adds	r0, #1
 801424e:	f000 80a7 	beq.w	80143a0 <_vfiprintf_r+0x1ec>
 8014252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014254:	445a      	add	r2, fp
 8014256:	9209      	str	r2, [sp, #36]	@ 0x24
 8014258:	f89a 3000 	ldrb.w	r3, [sl]
 801425c:	2b00      	cmp	r3, #0
 801425e:	f000 809f 	beq.w	80143a0 <_vfiprintf_r+0x1ec>
 8014262:	2300      	movs	r3, #0
 8014264:	f04f 32ff 	mov.w	r2, #4294967295
 8014268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801426c:	f10a 0a01 	add.w	sl, sl, #1
 8014270:	9304      	str	r3, [sp, #16]
 8014272:	9307      	str	r3, [sp, #28]
 8014274:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014278:	931a      	str	r3, [sp, #104]	@ 0x68
 801427a:	4654      	mov	r4, sl
 801427c:	2205      	movs	r2, #5
 801427e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014282:	4853      	ldr	r0, [pc, #332]	@ (80143d0 <_vfiprintf_r+0x21c>)
 8014284:	f7eb ffb4 	bl	80001f0 <memchr>
 8014288:	9a04      	ldr	r2, [sp, #16]
 801428a:	b9d8      	cbnz	r0, 80142c4 <_vfiprintf_r+0x110>
 801428c:	06d1      	lsls	r1, r2, #27
 801428e:	bf44      	itt	mi
 8014290:	2320      	movmi	r3, #32
 8014292:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014296:	0713      	lsls	r3, r2, #28
 8014298:	bf44      	itt	mi
 801429a:	232b      	movmi	r3, #43	@ 0x2b
 801429c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142a0:	f89a 3000 	ldrb.w	r3, [sl]
 80142a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80142a6:	d015      	beq.n	80142d4 <_vfiprintf_r+0x120>
 80142a8:	9a07      	ldr	r2, [sp, #28]
 80142aa:	4654      	mov	r4, sl
 80142ac:	2000      	movs	r0, #0
 80142ae:	f04f 0c0a 	mov.w	ip, #10
 80142b2:	4621      	mov	r1, r4
 80142b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142b8:	3b30      	subs	r3, #48	@ 0x30
 80142ba:	2b09      	cmp	r3, #9
 80142bc:	d94b      	bls.n	8014356 <_vfiprintf_r+0x1a2>
 80142be:	b1b0      	cbz	r0, 80142ee <_vfiprintf_r+0x13a>
 80142c0:	9207      	str	r2, [sp, #28]
 80142c2:	e014      	b.n	80142ee <_vfiprintf_r+0x13a>
 80142c4:	eba0 0308 	sub.w	r3, r0, r8
 80142c8:	fa09 f303 	lsl.w	r3, r9, r3
 80142cc:	4313      	orrs	r3, r2
 80142ce:	9304      	str	r3, [sp, #16]
 80142d0:	46a2      	mov	sl, r4
 80142d2:	e7d2      	b.n	801427a <_vfiprintf_r+0xc6>
 80142d4:	9b03      	ldr	r3, [sp, #12]
 80142d6:	1d19      	adds	r1, r3, #4
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	9103      	str	r1, [sp, #12]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	bfbb      	ittet	lt
 80142e0:	425b      	neglt	r3, r3
 80142e2:	f042 0202 	orrlt.w	r2, r2, #2
 80142e6:	9307      	strge	r3, [sp, #28]
 80142e8:	9307      	strlt	r3, [sp, #28]
 80142ea:	bfb8      	it	lt
 80142ec:	9204      	strlt	r2, [sp, #16]
 80142ee:	7823      	ldrb	r3, [r4, #0]
 80142f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80142f2:	d10a      	bne.n	801430a <_vfiprintf_r+0x156>
 80142f4:	7863      	ldrb	r3, [r4, #1]
 80142f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80142f8:	d132      	bne.n	8014360 <_vfiprintf_r+0x1ac>
 80142fa:	9b03      	ldr	r3, [sp, #12]
 80142fc:	1d1a      	adds	r2, r3, #4
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	9203      	str	r2, [sp, #12]
 8014302:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014306:	3402      	adds	r4, #2
 8014308:	9305      	str	r3, [sp, #20]
 801430a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80143e0 <_vfiprintf_r+0x22c>
 801430e:	7821      	ldrb	r1, [r4, #0]
 8014310:	2203      	movs	r2, #3
 8014312:	4650      	mov	r0, sl
 8014314:	f7eb ff6c 	bl	80001f0 <memchr>
 8014318:	b138      	cbz	r0, 801432a <_vfiprintf_r+0x176>
 801431a:	9b04      	ldr	r3, [sp, #16]
 801431c:	eba0 000a 	sub.w	r0, r0, sl
 8014320:	2240      	movs	r2, #64	@ 0x40
 8014322:	4082      	lsls	r2, r0
 8014324:	4313      	orrs	r3, r2
 8014326:	3401      	adds	r4, #1
 8014328:	9304      	str	r3, [sp, #16]
 801432a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801432e:	4829      	ldr	r0, [pc, #164]	@ (80143d4 <_vfiprintf_r+0x220>)
 8014330:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014334:	2206      	movs	r2, #6
 8014336:	f7eb ff5b 	bl	80001f0 <memchr>
 801433a:	2800      	cmp	r0, #0
 801433c:	d03f      	beq.n	80143be <_vfiprintf_r+0x20a>
 801433e:	4b26      	ldr	r3, [pc, #152]	@ (80143d8 <_vfiprintf_r+0x224>)
 8014340:	bb1b      	cbnz	r3, 801438a <_vfiprintf_r+0x1d6>
 8014342:	9b03      	ldr	r3, [sp, #12]
 8014344:	3307      	adds	r3, #7
 8014346:	f023 0307 	bic.w	r3, r3, #7
 801434a:	3308      	adds	r3, #8
 801434c:	9303      	str	r3, [sp, #12]
 801434e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014350:	443b      	add	r3, r7
 8014352:	9309      	str	r3, [sp, #36]	@ 0x24
 8014354:	e76a      	b.n	801422c <_vfiprintf_r+0x78>
 8014356:	fb0c 3202 	mla	r2, ip, r2, r3
 801435a:	460c      	mov	r4, r1
 801435c:	2001      	movs	r0, #1
 801435e:	e7a8      	b.n	80142b2 <_vfiprintf_r+0xfe>
 8014360:	2300      	movs	r3, #0
 8014362:	3401      	adds	r4, #1
 8014364:	9305      	str	r3, [sp, #20]
 8014366:	4619      	mov	r1, r3
 8014368:	f04f 0c0a 	mov.w	ip, #10
 801436c:	4620      	mov	r0, r4
 801436e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014372:	3a30      	subs	r2, #48	@ 0x30
 8014374:	2a09      	cmp	r2, #9
 8014376:	d903      	bls.n	8014380 <_vfiprintf_r+0x1cc>
 8014378:	2b00      	cmp	r3, #0
 801437a:	d0c6      	beq.n	801430a <_vfiprintf_r+0x156>
 801437c:	9105      	str	r1, [sp, #20]
 801437e:	e7c4      	b.n	801430a <_vfiprintf_r+0x156>
 8014380:	fb0c 2101 	mla	r1, ip, r1, r2
 8014384:	4604      	mov	r4, r0
 8014386:	2301      	movs	r3, #1
 8014388:	e7f0      	b.n	801436c <_vfiprintf_r+0x1b8>
 801438a:	ab03      	add	r3, sp, #12
 801438c:	9300      	str	r3, [sp, #0]
 801438e:	462a      	mov	r2, r5
 8014390:	4b12      	ldr	r3, [pc, #72]	@ (80143dc <_vfiprintf_r+0x228>)
 8014392:	a904      	add	r1, sp, #16
 8014394:	4630      	mov	r0, r6
 8014396:	f7fb fa99 	bl	800f8cc <_printf_float>
 801439a:	4607      	mov	r7, r0
 801439c:	1c78      	adds	r0, r7, #1
 801439e:	d1d6      	bne.n	801434e <_vfiprintf_r+0x19a>
 80143a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80143a2:	07d9      	lsls	r1, r3, #31
 80143a4:	d405      	bmi.n	80143b2 <_vfiprintf_r+0x1fe>
 80143a6:	89ab      	ldrh	r3, [r5, #12]
 80143a8:	059a      	lsls	r2, r3, #22
 80143aa:	d402      	bmi.n	80143b2 <_vfiprintf_r+0x1fe>
 80143ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80143ae:	f7fc fafd 	bl	80109ac <__retarget_lock_release_recursive>
 80143b2:	89ab      	ldrh	r3, [r5, #12]
 80143b4:	065b      	lsls	r3, r3, #25
 80143b6:	f53f af1f 	bmi.w	80141f8 <_vfiprintf_r+0x44>
 80143ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80143bc:	e71e      	b.n	80141fc <_vfiprintf_r+0x48>
 80143be:	ab03      	add	r3, sp, #12
 80143c0:	9300      	str	r3, [sp, #0]
 80143c2:	462a      	mov	r2, r5
 80143c4:	4b05      	ldr	r3, [pc, #20]	@ (80143dc <_vfiprintf_r+0x228>)
 80143c6:	a904      	add	r1, sp, #16
 80143c8:	4630      	mov	r0, r6
 80143ca:	f7fb fd17 	bl	800fdfc <_printf_i>
 80143ce:	e7e4      	b.n	801439a <_vfiprintf_r+0x1e6>
 80143d0:	08015e41 	.word	0x08015e41
 80143d4:	08015e4b 	.word	0x08015e4b
 80143d8:	0800f8cd 	.word	0x0800f8cd
 80143dc:	08014191 	.word	0x08014191
 80143e0:	08015e47 	.word	0x08015e47

080143e4 <__swbuf_r>:
 80143e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143e6:	460e      	mov	r6, r1
 80143e8:	4614      	mov	r4, r2
 80143ea:	4605      	mov	r5, r0
 80143ec:	b118      	cbz	r0, 80143f6 <__swbuf_r+0x12>
 80143ee:	6a03      	ldr	r3, [r0, #32]
 80143f0:	b90b      	cbnz	r3, 80143f6 <__swbuf_r+0x12>
 80143f2:	f7fc f8c3 	bl	801057c <__sinit>
 80143f6:	69a3      	ldr	r3, [r4, #24]
 80143f8:	60a3      	str	r3, [r4, #8]
 80143fa:	89a3      	ldrh	r3, [r4, #12]
 80143fc:	071a      	lsls	r2, r3, #28
 80143fe:	d501      	bpl.n	8014404 <__swbuf_r+0x20>
 8014400:	6923      	ldr	r3, [r4, #16]
 8014402:	b943      	cbnz	r3, 8014416 <__swbuf_r+0x32>
 8014404:	4621      	mov	r1, r4
 8014406:	4628      	mov	r0, r5
 8014408:	f000 f82a 	bl	8014460 <__swsetup_r>
 801440c:	b118      	cbz	r0, 8014416 <__swbuf_r+0x32>
 801440e:	f04f 37ff 	mov.w	r7, #4294967295
 8014412:	4638      	mov	r0, r7
 8014414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014416:	6823      	ldr	r3, [r4, #0]
 8014418:	6922      	ldr	r2, [r4, #16]
 801441a:	1a98      	subs	r0, r3, r2
 801441c:	6963      	ldr	r3, [r4, #20]
 801441e:	b2f6      	uxtb	r6, r6
 8014420:	4283      	cmp	r3, r0
 8014422:	4637      	mov	r7, r6
 8014424:	dc05      	bgt.n	8014432 <__swbuf_r+0x4e>
 8014426:	4621      	mov	r1, r4
 8014428:	4628      	mov	r0, r5
 801442a:	f7ff f9b9 	bl	80137a0 <_fflush_r>
 801442e:	2800      	cmp	r0, #0
 8014430:	d1ed      	bne.n	801440e <__swbuf_r+0x2a>
 8014432:	68a3      	ldr	r3, [r4, #8]
 8014434:	3b01      	subs	r3, #1
 8014436:	60a3      	str	r3, [r4, #8]
 8014438:	6823      	ldr	r3, [r4, #0]
 801443a:	1c5a      	adds	r2, r3, #1
 801443c:	6022      	str	r2, [r4, #0]
 801443e:	701e      	strb	r6, [r3, #0]
 8014440:	6962      	ldr	r2, [r4, #20]
 8014442:	1c43      	adds	r3, r0, #1
 8014444:	429a      	cmp	r2, r3
 8014446:	d004      	beq.n	8014452 <__swbuf_r+0x6e>
 8014448:	89a3      	ldrh	r3, [r4, #12]
 801444a:	07db      	lsls	r3, r3, #31
 801444c:	d5e1      	bpl.n	8014412 <__swbuf_r+0x2e>
 801444e:	2e0a      	cmp	r6, #10
 8014450:	d1df      	bne.n	8014412 <__swbuf_r+0x2e>
 8014452:	4621      	mov	r1, r4
 8014454:	4628      	mov	r0, r5
 8014456:	f7ff f9a3 	bl	80137a0 <_fflush_r>
 801445a:	2800      	cmp	r0, #0
 801445c:	d0d9      	beq.n	8014412 <__swbuf_r+0x2e>
 801445e:	e7d6      	b.n	801440e <__swbuf_r+0x2a>

08014460 <__swsetup_r>:
 8014460:	b538      	push	{r3, r4, r5, lr}
 8014462:	4b29      	ldr	r3, [pc, #164]	@ (8014508 <__swsetup_r+0xa8>)
 8014464:	4605      	mov	r5, r0
 8014466:	6818      	ldr	r0, [r3, #0]
 8014468:	460c      	mov	r4, r1
 801446a:	b118      	cbz	r0, 8014474 <__swsetup_r+0x14>
 801446c:	6a03      	ldr	r3, [r0, #32]
 801446e:	b90b      	cbnz	r3, 8014474 <__swsetup_r+0x14>
 8014470:	f7fc f884 	bl	801057c <__sinit>
 8014474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014478:	0719      	lsls	r1, r3, #28
 801447a:	d422      	bmi.n	80144c2 <__swsetup_r+0x62>
 801447c:	06da      	lsls	r2, r3, #27
 801447e:	d407      	bmi.n	8014490 <__swsetup_r+0x30>
 8014480:	2209      	movs	r2, #9
 8014482:	602a      	str	r2, [r5, #0]
 8014484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014488:	81a3      	strh	r3, [r4, #12]
 801448a:	f04f 30ff 	mov.w	r0, #4294967295
 801448e:	e033      	b.n	80144f8 <__swsetup_r+0x98>
 8014490:	0758      	lsls	r0, r3, #29
 8014492:	d512      	bpl.n	80144ba <__swsetup_r+0x5a>
 8014494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014496:	b141      	cbz	r1, 80144aa <__swsetup_r+0x4a>
 8014498:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801449c:	4299      	cmp	r1, r3
 801449e:	d002      	beq.n	80144a6 <__swsetup_r+0x46>
 80144a0:	4628      	mov	r0, r5
 80144a2:	f7fd f905 	bl	80116b0 <_free_r>
 80144a6:	2300      	movs	r3, #0
 80144a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80144aa:	89a3      	ldrh	r3, [r4, #12]
 80144ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80144b0:	81a3      	strh	r3, [r4, #12]
 80144b2:	2300      	movs	r3, #0
 80144b4:	6063      	str	r3, [r4, #4]
 80144b6:	6923      	ldr	r3, [r4, #16]
 80144b8:	6023      	str	r3, [r4, #0]
 80144ba:	89a3      	ldrh	r3, [r4, #12]
 80144bc:	f043 0308 	orr.w	r3, r3, #8
 80144c0:	81a3      	strh	r3, [r4, #12]
 80144c2:	6923      	ldr	r3, [r4, #16]
 80144c4:	b94b      	cbnz	r3, 80144da <__swsetup_r+0x7a>
 80144c6:	89a3      	ldrh	r3, [r4, #12]
 80144c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80144cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80144d0:	d003      	beq.n	80144da <__swsetup_r+0x7a>
 80144d2:	4621      	mov	r1, r4
 80144d4:	4628      	mov	r0, r5
 80144d6:	f000 f88b 	bl	80145f0 <__smakebuf_r>
 80144da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144de:	f013 0201 	ands.w	r2, r3, #1
 80144e2:	d00a      	beq.n	80144fa <__swsetup_r+0x9a>
 80144e4:	2200      	movs	r2, #0
 80144e6:	60a2      	str	r2, [r4, #8]
 80144e8:	6962      	ldr	r2, [r4, #20]
 80144ea:	4252      	negs	r2, r2
 80144ec:	61a2      	str	r2, [r4, #24]
 80144ee:	6922      	ldr	r2, [r4, #16]
 80144f0:	b942      	cbnz	r2, 8014504 <__swsetup_r+0xa4>
 80144f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80144f6:	d1c5      	bne.n	8014484 <__swsetup_r+0x24>
 80144f8:	bd38      	pop	{r3, r4, r5, pc}
 80144fa:	0799      	lsls	r1, r3, #30
 80144fc:	bf58      	it	pl
 80144fe:	6962      	ldrpl	r2, [r4, #20]
 8014500:	60a2      	str	r2, [r4, #8]
 8014502:	e7f4      	b.n	80144ee <__swsetup_r+0x8e>
 8014504:	2000      	movs	r0, #0
 8014506:	e7f7      	b.n	80144f8 <__swsetup_r+0x98>
 8014508:	200000c4 	.word	0x200000c4

0801450c <_raise_r>:
 801450c:	291f      	cmp	r1, #31
 801450e:	b538      	push	{r3, r4, r5, lr}
 8014510:	4605      	mov	r5, r0
 8014512:	460c      	mov	r4, r1
 8014514:	d904      	bls.n	8014520 <_raise_r+0x14>
 8014516:	2316      	movs	r3, #22
 8014518:	6003      	str	r3, [r0, #0]
 801451a:	f04f 30ff 	mov.w	r0, #4294967295
 801451e:	bd38      	pop	{r3, r4, r5, pc}
 8014520:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014522:	b112      	cbz	r2, 801452a <_raise_r+0x1e>
 8014524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014528:	b94b      	cbnz	r3, 801453e <_raise_r+0x32>
 801452a:	4628      	mov	r0, r5
 801452c:	f000 f830 	bl	8014590 <_getpid_r>
 8014530:	4622      	mov	r2, r4
 8014532:	4601      	mov	r1, r0
 8014534:	4628      	mov	r0, r5
 8014536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801453a:	f000 b817 	b.w	801456c <_kill_r>
 801453e:	2b01      	cmp	r3, #1
 8014540:	d00a      	beq.n	8014558 <_raise_r+0x4c>
 8014542:	1c59      	adds	r1, r3, #1
 8014544:	d103      	bne.n	801454e <_raise_r+0x42>
 8014546:	2316      	movs	r3, #22
 8014548:	6003      	str	r3, [r0, #0]
 801454a:	2001      	movs	r0, #1
 801454c:	e7e7      	b.n	801451e <_raise_r+0x12>
 801454e:	2100      	movs	r1, #0
 8014550:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014554:	4620      	mov	r0, r4
 8014556:	4798      	blx	r3
 8014558:	2000      	movs	r0, #0
 801455a:	e7e0      	b.n	801451e <_raise_r+0x12>

0801455c <raise>:
 801455c:	4b02      	ldr	r3, [pc, #8]	@ (8014568 <raise+0xc>)
 801455e:	4601      	mov	r1, r0
 8014560:	6818      	ldr	r0, [r3, #0]
 8014562:	f7ff bfd3 	b.w	801450c <_raise_r>
 8014566:	bf00      	nop
 8014568:	200000c4 	.word	0x200000c4

0801456c <_kill_r>:
 801456c:	b538      	push	{r3, r4, r5, lr}
 801456e:	4d07      	ldr	r5, [pc, #28]	@ (801458c <_kill_r+0x20>)
 8014570:	2300      	movs	r3, #0
 8014572:	4604      	mov	r4, r0
 8014574:	4608      	mov	r0, r1
 8014576:	4611      	mov	r1, r2
 8014578:	602b      	str	r3, [r5, #0]
 801457a:	f7f0 fd09 	bl	8004f90 <_kill>
 801457e:	1c43      	adds	r3, r0, #1
 8014580:	d102      	bne.n	8014588 <_kill_r+0x1c>
 8014582:	682b      	ldr	r3, [r5, #0]
 8014584:	b103      	cbz	r3, 8014588 <_kill_r+0x1c>
 8014586:	6023      	str	r3, [r4, #0]
 8014588:	bd38      	pop	{r3, r4, r5, pc}
 801458a:	bf00      	nop
 801458c:	2000571c 	.word	0x2000571c

08014590 <_getpid_r>:
 8014590:	f7f0 bcf6 	b.w	8004f80 <_getpid>

08014594 <_malloc_usable_size_r>:
 8014594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014598:	1f18      	subs	r0, r3, #4
 801459a:	2b00      	cmp	r3, #0
 801459c:	bfbc      	itt	lt
 801459e:	580b      	ldrlt	r3, [r1, r0]
 80145a0:	18c0      	addlt	r0, r0, r3
 80145a2:	4770      	bx	lr

080145a4 <__swhatbuf_r>:
 80145a4:	b570      	push	{r4, r5, r6, lr}
 80145a6:	460c      	mov	r4, r1
 80145a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145ac:	2900      	cmp	r1, #0
 80145ae:	b096      	sub	sp, #88	@ 0x58
 80145b0:	4615      	mov	r5, r2
 80145b2:	461e      	mov	r6, r3
 80145b4:	da0d      	bge.n	80145d2 <__swhatbuf_r+0x2e>
 80145b6:	89a3      	ldrh	r3, [r4, #12]
 80145b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80145bc:	f04f 0100 	mov.w	r1, #0
 80145c0:	bf14      	ite	ne
 80145c2:	2340      	movne	r3, #64	@ 0x40
 80145c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80145c8:	2000      	movs	r0, #0
 80145ca:	6031      	str	r1, [r6, #0]
 80145cc:	602b      	str	r3, [r5, #0]
 80145ce:	b016      	add	sp, #88	@ 0x58
 80145d0:	bd70      	pop	{r4, r5, r6, pc}
 80145d2:	466a      	mov	r2, sp
 80145d4:	f000 f848 	bl	8014668 <_fstat_r>
 80145d8:	2800      	cmp	r0, #0
 80145da:	dbec      	blt.n	80145b6 <__swhatbuf_r+0x12>
 80145dc:	9901      	ldr	r1, [sp, #4]
 80145de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80145e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80145e6:	4259      	negs	r1, r3
 80145e8:	4159      	adcs	r1, r3
 80145ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80145ee:	e7eb      	b.n	80145c8 <__swhatbuf_r+0x24>

080145f0 <__smakebuf_r>:
 80145f0:	898b      	ldrh	r3, [r1, #12]
 80145f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80145f4:	079d      	lsls	r5, r3, #30
 80145f6:	4606      	mov	r6, r0
 80145f8:	460c      	mov	r4, r1
 80145fa:	d507      	bpl.n	801460c <__smakebuf_r+0x1c>
 80145fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014600:	6023      	str	r3, [r4, #0]
 8014602:	6123      	str	r3, [r4, #16]
 8014604:	2301      	movs	r3, #1
 8014606:	6163      	str	r3, [r4, #20]
 8014608:	b003      	add	sp, #12
 801460a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801460c:	ab01      	add	r3, sp, #4
 801460e:	466a      	mov	r2, sp
 8014610:	f7ff ffc8 	bl	80145a4 <__swhatbuf_r>
 8014614:	9f00      	ldr	r7, [sp, #0]
 8014616:	4605      	mov	r5, r0
 8014618:	4639      	mov	r1, r7
 801461a:	4630      	mov	r0, r6
 801461c:	f7fa ffe8 	bl	800f5f0 <_malloc_r>
 8014620:	b948      	cbnz	r0, 8014636 <__smakebuf_r+0x46>
 8014622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014626:	059a      	lsls	r2, r3, #22
 8014628:	d4ee      	bmi.n	8014608 <__smakebuf_r+0x18>
 801462a:	f023 0303 	bic.w	r3, r3, #3
 801462e:	f043 0302 	orr.w	r3, r3, #2
 8014632:	81a3      	strh	r3, [r4, #12]
 8014634:	e7e2      	b.n	80145fc <__smakebuf_r+0xc>
 8014636:	89a3      	ldrh	r3, [r4, #12]
 8014638:	6020      	str	r0, [r4, #0]
 801463a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801463e:	81a3      	strh	r3, [r4, #12]
 8014640:	9b01      	ldr	r3, [sp, #4]
 8014642:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014646:	b15b      	cbz	r3, 8014660 <__smakebuf_r+0x70>
 8014648:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801464c:	4630      	mov	r0, r6
 801464e:	f000 f81d 	bl	801468c <_isatty_r>
 8014652:	b128      	cbz	r0, 8014660 <__smakebuf_r+0x70>
 8014654:	89a3      	ldrh	r3, [r4, #12]
 8014656:	f023 0303 	bic.w	r3, r3, #3
 801465a:	f043 0301 	orr.w	r3, r3, #1
 801465e:	81a3      	strh	r3, [r4, #12]
 8014660:	89a3      	ldrh	r3, [r4, #12]
 8014662:	431d      	orrs	r5, r3
 8014664:	81a5      	strh	r5, [r4, #12]
 8014666:	e7cf      	b.n	8014608 <__smakebuf_r+0x18>

08014668 <_fstat_r>:
 8014668:	b538      	push	{r3, r4, r5, lr}
 801466a:	4d07      	ldr	r5, [pc, #28]	@ (8014688 <_fstat_r+0x20>)
 801466c:	2300      	movs	r3, #0
 801466e:	4604      	mov	r4, r0
 8014670:	4608      	mov	r0, r1
 8014672:	4611      	mov	r1, r2
 8014674:	602b      	str	r3, [r5, #0]
 8014676:	f7f0 fccf 	bl	8005018 <_fstat>
 801467a:	1c43      	adds	r3, r0, #1
 801467c:	d102      	bne.n	8014684 <_fstat_r+0x1c>
 801467e:	682b      	ldr	r3, [r5, #0]
 8014680:	b103      	cbz	r3, 8014684 <_fstat_r+0x1c>
 8014682:	6023      	str	r3, [r4, #0]
 8014684:	bd38      	pop	{r3, r4, r5, pc}
 8014686:	bf00      	nop
 8014688:	2000571c 	.word	0x2000571c

0801468c <_isatty_r>:
 801468c:	b538      	push	{r3, r4, r5, lr}
 801468e:	4d06      	ldr	r5, [pc, #24]	@ (80146a8 <_isatty_r+0x1c>)
 8014690:	2300      	movs	r3, #0
 8014692:	4604      	mov	r4, r0
 8014694:	4608      	mov	r0, r1
 8014696:	602b      	str	r3, [r5, #0]
 8014698:	f7f0 fcce 	bl	8005038 <_isatty>
 801469c:	1c43      	adds	r3, r0, #1
 801469e:	d102      	bne.n	80146a6 <_isatty_r+0x1a>
 80146a0:	682b      	ldr	r3, [r5, #0]
 80146a2:	b103      	cbz	r3, 80146a6 <_isatty_r+0x1a>
 80146a4:	6023      	str	r3, [r4, #0]
 80146a6:	bd38      	pop	{r3, r4, r5, pc}
 80146a8:	2000571c 	.word	0x2000571c

080146ac <pow>:
 80146ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146ae:	ed2d 8b02 	vpush	{d8}
 80146b2:	eeb0 8a40 	vmov.f32	s16, s0
 80146b6:	eef0 8a60 	vmov.f32	s17, s1
 80146ba:	ec55 4b11 	vmov	r4, r5, d1
 80146be:	f000 f977 	bl	80149b0 <__ieee754_pow>
 80146c2:	4622      	mov	r2, r4
 80146c4:	462b      	mov	r3, r5
 80146c6:	4620      	mov	r0, r4
 80146c8:	4629      	mov	r1, r5
 80146ca:	ec57 6b10 	vmov	r6, r7, d0
 80146ce:	f7ec fa3d 	bl	8000b4c <__aeabi_dcmpun>
 80146d2:	2800      	cmp	r0, #0
 80146d4:	d13b      	bne.n	801474e <pow+0xa2>
 80146d6:	ec51 0b18 	vmov	r0, r1, d8
 80146da:	2200      	movs	r2, #0
 80146dc:	2300      	movs	r3, #0
 80146de:	f7ec fa03 	bl	8000ae8 <__aeabi_dcmpeq>
 80146e2:	b1b8      	cbz	r0, 8014714 <pow+0x68>
 80146e4:	2200      	movs	r2, #0
 80146e6:	2300      	movs	r3, #0
 80146e8:	4620      	mov	r0, r4
 80146ea:	4629      	mov	r1, r5
 80146ec:	f7ec f9fc 	bl	8000ae8 <__aeabi_dcmpeq>
 80146f0:	2800      	cmp	r0, #0
 80146f2:	d146      	bne.n	8014782 <pow+0xd6>
 80146f4:	ec45 4b10 	vmov	d0, r4, r5
 80146f8:	f000 f874 	bl	80147e4 <finite>
 80146fc:	b338      	cbz	r0, 801474e <pow+0xa2>
 80146fe:	2200      	movs	r2, #0
 8014700:	2300      	movs	r3, #0
 8014702:	4620      	mov	r0, r4
 8014704:	4629      	mov	r1, r5
 8014706:	f7ec f9f9 	bl	8000afc <__aeabi_dcmplt>
 801470a:	b300      	cbz	r0, 801474e <pow+0xa2>
 801470c:	f7fc f922 	bl	8010954 <__errno>
 8014710:	2322      	movs	r3, #34	@ 0x22
 8014712:	e01b      	b.n	801474c <pow+0xa0>
 8014714:	ec47 6b10 	vmov	d0, r6, r7
 8014718:	f000 f864 	bl	80147e4 <finite>
 801471c:	b9e0      	cbnz	r0, 8014758 <pow+0xac>
 801471e:	eeb0 0a48 	vmov.f32	s0, s16
 8014722:	eef0 0a68 	vmov.f32	s1, s17
 8014726:	f000 f85d 	bl	80147e4 <finite>
 801472a:	b1a8      	cbz	r0, 8014758 <pow+0xac>
 801472c:	ec45 4b10 	vmov	d0, r4, r5
 8014730:	f000 f858 	bl	80147e4 <finite>
 8014734:	b180      	cbz	r0, 8014758 <pow+0xac>
 8014736:	4632      	mov	r2, r6
 8014738:	463b      	mov	r3, r7
 801473a:	4630      	mov	r0, r6
 801473c:	4639      	mov	r1, r7
 801473e:	f7ec fa05 	bl	8000b4c <__aeabi_dcmpun>
 8014742:	2800      	cmp	r0, #0
 8014744:	d0e2      	beq.n	801470c <pow+0x60>
 8014746:	f7fc f905 	bl	8010954 <__errno>
 801474a:	2321      	movs	r3, #33	@ 0x21
 801474c:	6003      	str	r3, [r0, #0]
 801474e:	ecbd 8b02 	vpop	{d8}
 8014752:	ec47 6b10 	vmov	d0, r6, r7
 8014756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014758:	2200      	movs	r2, #0
 801475a:	2300      	movs	r3, #0
 801475c:	4630      	mov	r0, r6
 801475e:	4639      	mov	r1, r7
 8014760:	f7ec f9c2 	bl	8000ae8 <__aeabi_dcmpeq>
 8014764:	2800      	cmp	r0, #0
 8014766:	d0f2      	beq.n	801474e <pow+0xa2>
 8014768:	eeb0 0a48 	vmov.f32	s0, s16
 801476c:	eef0 0a68 	vmov.f32	s1, s17
 8014770:	f000 f838 	bl	80147e4 <finite>
 8014774:	2800      	cmp	r0, #0
 8014776:	d0ea      	beq.n	801474e <pow+0xa2>
 8014778:	ec45 4b10 	vmov	d0, r4, r5
 801477c:	f000 f832 	bl	80147e4 <finite>
 8014780:	e7c3      	b.n	801470a <pow+0x5e>
 8014782:	4f01      	ldr	r7, [pc, #4]	@ (8014788 <pow+0xdc>)
 8014784:	2600      	movs	r6, #0
 8014786:	e7e2      	b.n	801474e <pow+0xa2>
 8014788:	3ff00000 	.word	0x3ff00000

0801478c <sqrt>:
 801478c:	b538      	push	{r3, r4, r5, lr}
 801478e:	ed2d 8b02 	vpush	{d8}
 8014792:	ec55 4b10 	vmov	r4, r5, d0
 8014796:	f000 f831 	bl	80147fc <__ieee754_sqrt>
 801479a:	4622      	mov	r2, r4
 801479c:	462b      	mov	r3, r5
 801479e:	4620      	mov	r0, r4
 80147a0:	4629      	mov	r1, r5
 80147a2:	eeb0 8a40 	vmov.f32	s16, s0
 80147a6:	eef0 8a60 	vmov.f32	s17, s1
 80147aa:	f7ec f9cf 	bl	8000b4c <__aeabi_dcmpun>
 80147ae:	b990      	cbnz	r0, 80147d6 <sqrt+0x4a>
 80147b0:	2200      	movs	r2, #0
 80147b2:	2300      	movs	r3, #0
 80147b4:	4620      	mov	r0, r4
 80147b6:	4629      	mov	r1, r5
 80147b8:	f7ec f9a0 	bl	8000afc <__aeabi_dcmplt>
 80147bc:	b158      	cbz	r0, 80147d6 <sqrt+0x4a>
 80147be:	f7fc f8c9 	bl	8010954 <__errno>
 80147c2:	2321      	movs	r3, #33	@ 0x21
 80147c4:	6003      	str	r3, [r0, #0]
 80147c6:	2200      	movs	r2, #0
 80147c8:	2300      	movs	r3, #0
 80147ca:	4610      	mov	r0, r2
 80147cc:	4619      	mov	r1, r3
 80147ce:	f7ec f84d 	bl	800086c <__aeabi_ddiv>
 80147d2:	ec41 0b18 	vmov	d8, r0, r1
 80147d6:	eeb0 0a48 	vmov.f32	s0, s16
 80147da:	eef0 0a68 	vmov.f32	s1, s17
 80147de:	ecbd 8b02 	vpop	{d8}
 80147e2:	bd38      	pop	{r3, r4, r5, pc}

080147e4 <finite>:
 80147e4:	b082      	sub	sp, #8
 80147e6:	ed8d 0b00 	vstr	d0, [sp]
 80147ea:	9801      	ldr	r0, [sp, #4]
 80147ec:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80147f0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80147f4:	0fc0      	lsrs	r0, r0, #31
 80147f6:	b002      	add	sp, #8
 80147f8:	4770      	bx	lr
	...

080147fc <__ieee754_sqrt>:
 80147fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014800:	4a68      	ldr	r2, [pc, #416]	@ (80149a4 <__ieee754_sqrt+0x1a8>)
 8014802:	ec55 4b10 	vmov	r4, r5, d0
 8014806:	43aa      	bics	r2, r5
 8014808:	462b      	mov	r3, r5
 801480a:	4621      	mov	r1, r4
 801480c:	d110      	bne.n	8014830 <__ieee754_sqrt+0x34>
 801480e:	4622      	mov	r2, r4
 8014810:	4620      	mov	r0, r4
 8014812:	4629      	mov	r1, r5
 8014814:	f7eb ff00 	bl	8000618 <__aeabi_dmul>
 8014818:	4602      	mov	r2, r0
 801481a:	460b      	mov	r3, r1
 801481c:	4620      	mov	r0, r4
 801481e:	4629      	mov	r1, r5
 8014820:	f7eb fd44 	bl	80002ac <__adddf3>
 8014824:	4604      	mov	r4, r0
 8014826:	460d      	mov	r5, r1
 8014828:	ec45 4b10 	vmov	d0, r4, r5
 801482c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014830:	2d00      	cmp	r5, #0
 8014832:	dc0e      	bgt.n	8014852 <__ieee754_sqrt+0x56>
 8014834:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8014838:	4322      	orrs	r2, r4
 801483a:	d0f5      	beq.n	8014828 <__ieee754_sqrt+0x2c>
 801483c:	b19d      	cbz	r5, 8014866 <__ieee754_sqrt+0x6a>
 801483e:	4622      	mov	r2, r4
 8014840:	4620      	mov	r0, r4
 8014842:	4629      	mov	r1, r5
 8014844:	f7eb fd30 	bl	80002a8 <__aeabi_dsub>
 8014848:	4602      	mov	r2, r0
 801484a:	460b      	mov	r3, r1
 801484c:	f7ec f80e 	bl	800086c <__aeabi_ddiv>
 8014850:	e7e8      	b.n	8014824 <__ieee754_sqrt+0x28>
 8014852:	152a      	asrs	r2, r5, #20
 8014854:	d115      	bne.n	8014882 <__ieee754_sqrt+0x86>
 8014856:	2000      	movs	r0, #0
 8014858:	e009      	b.n	801486e <__ieee754_sqrt+0x72>
 801485a:	0acb      	lsrs	r3, r1, #11
 801485c:	3a15      	subs	r2, #21
 801485e:	0549      	lsls	r1, r1, #21
 8014860:	2b00      	cmp	r3, #0
 8014862:	d0fa      	beq.n	801485a <__ieee754_sqrt+0x5e>
 8014864:	e7f7      	b.n	8014856 <__ieee754_sqrt+0x5a>
 8014866:	462a      	mov	r2, r5
 8014868:	e7fa      	b.n	8014860 <__ieee754_sqrt+0x64>
 801486a:	005b      	lsls	r3, r3, #1
 801486c:	3001      	adds	r0, #1
 801486e:	02dc      	lsls	r4, r3, #11
 8014870:	d5fb      	bpl.n	801486a <__ieee754_sqrt+0x6e>
 8014872:	1e44      	subs	r4, r0, #1
 8014874:	1b12      	subs	r2, r2, r4
 8014876:	f1c0 0420 	rsb	r4, r0, #32
 801487a:	fa21 f404 	lsr.w	r4, r1, r4
 801487e:	4323      	orrs	r3, r4
 8014880:	4081      	lsls	r1, r0
 8014882:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014886:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801488a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801488e:	07d2      	lsls	r2, r2, #31
 8014890:	bf5c      	itt	pl
 8014892:	005b      	lslpl	r3, r3, #1
 8014894:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8014898:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801489c:	bf58      	it	pl
 801489e:	0049      	lslpl	r1, r1, #1
 80148a0:	2600      	movs	r6, #0
 80148a2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80148a6:	106d      	asrs	r5, r5, #1
 80148a8:	0049      	lsls	r1, r1, #1
 80148aa:	2016      	movs	r0, #22
 80148ac:	4632      	mov	r2, r6
 80148ae:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80148b2:	1917      	adds	r7, r2, r4
 80148b4:	429f      	cmp	r7, r3
 80148b6:	bfde      	ittt	le
 80148b8:	193a      	addle	r2, r7, r4
 80148ba:	1bdb      	suble	r3, r3, r7
 80148bc:	1936      	addle	r6, r6, r4
 80148be:	0fcf      	lsrs	r7, r1, #31
 80148c0:	3801      	subs	r0, #1
 80148c2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80148c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80148ca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80148ce:	d1f0      	bne.n	80148b2 <__ieee754_sqrt+0xb6>
 80148d0:	4604      	mov	r4, r0
 80148d2:	2720      	movs	r7, #32
 80148d4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80148d8:	429a      	cmp	r2, r3
 80148da:	eb00 0e0c 	add.w	lr, r0, ip
 80148de:	db02      	blt.n	80148e6 <__ieee754_sqrt+0xea>
 80148e0:	d113      	bne.n	801490a <__ieee754_sqrt+0x10e>
 80148e2:	458e      	cmp	lr, r1
 80148e4:	d811      	bhi.n	801490a <__ieee754_sqrt+0x10e>
 80148e6:	f1be 0f00 	cmp.w	lr, #0
 80148ea:	eb0e 000c 	add.w	r0, lr, ip
 80148ee:	da42      	bge.n	8014976 <__ieee754_sqrt+0x17a>
 80148f0:	2800      	cmp	r0, #0
 80148f2:	db40      	blt.n	8014976 <__ieee754_sqrt+0x17a>
 80148f4:	f102 0801 	add.w	r8, r2, #1
 80148f8:	1a9b      	subs	r3, r3, r2
 80148fa:	458e      	cmp	lr, r1
 80148fc:	bf88      	it	hi
 80148fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014902:	eba1 010e 	sub.w	r1, r1, lr
 8014906:	4464      	add	r4, ip
 8014908:	4642      	mov	r2, r8
 801490a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801490e:	3f01      	subs	r7, #1
 8014910:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8014914:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014918:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801491c:	d1dc      	bne.n	80148d8 <__ieee754_sqrt+0xdc>
 801491e:	4319      	orrs	r1, r3
 8014920:	d01b      	beq.n	801495a <__ieee754_sqrt+0x15e>
 8014922:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80149a8 <__ieee754_sqrt+0x1ac>
 8014926:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80149ac <__ieee754_sqrt+0x1b0>
 801492a:	e9da 0100 	ldrd	r0, r1, [sl]
 801492e:	e9db 2300 	ldrd	r2, r3, [fp]
 8014932:	f7eb fcb9 	bl	80002a8 <__aeabi_dsub>
 8014936:	e9da 8900 	ldrd	r8, r9, [sl]
 801493a:	4602      	mov	r2, r0
 801493c:	460b      	mov	r3, r1
 801493e:	4640      	mov	r0, r8
 8014940:	4649      	mov	r1, r9
 8014942:	f7ec f8e5 	bl	8000b10 <__aeabi_dcmple>
 8014946:	b140      	cbz	r0, 801495a <__ieee754_sqrt+0x15e>
 8014948:	f1b4 3fff 	cmp.w	r4, #4294967295
 801494c:	e9da 0100 	ldrd	r0, r1, [sl]
 8014950:	e9db 2300 	ldrd	r2, r3, [fp]
 8014954:	d111      	bne.n	801497a <__ieee754_sqrt+0x17e>
 8014956:	3601      	adds	r6, #1
 8014958:	463c      	mov	r4, r7
 801495a:	1072      	asrs	r2, r6, #1
 801495c:	0863      	lsrs	r3, r4, #1
 801495e:	07f1      	lsls	r1, r6, #31
 8014960:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8014964:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8014968:	bf48      	it	mi
 801496a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801496e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8014972:	4618      	mov	r0, r3
 8014974:	e756      	b.n	8014824 <__ieee754_sqrt+0x28>
 8014976:	4690      	mov	r8, r2
 8014978:	e7be      	b.n	80148f8 <__ieee754_sqrt+0xfc>
 801497a:	f7eb fc97 	bl	80002ac <__adddf3>
 801497e:	e9da 8900 	ldrd	r8, r9, [sl]
 8014982:	4602      	mov	r2, r0
 8014984:	460b      	mov	r3, r1
 8014986:	4640      	mov	r0, r8
 8014988:	4649      	mov	r1, r9
 801498a:	f7ec f8b7 	bl	8000afc <__aeabi_dcmplt>
 801498e:	b120      	cbz	r0, 801499a <__ieee754_sqrt+0x19e>
 8014990:	1ca0      	adds	r0, r4, #2
 8014992:	bf08      	it	eq
 8014994:	3601      	addeq	r6, #1
 8014996:	3402      	adds	r4, #2
 8014998:	e7df      	b.n	801495a <__ieee754_sqrt+0x15e>
 801499a:	1c63      	adds	r3, r4, #1
 801499c:	f023 0401 	bic.w	r4, r3, #1
 80149a0:	e7db      	b.n	801495a <__ieee754_sqrt+0x15e>
 80149a2:	bf00      	nop
 80149a4:	7ff00000 	.word	0x7ff00000
 80149a8:	20000288 	.word	0x20000288
 80149ac:	20000280 	.word	0x20000280

080149b0 <__ieee754_pow>:
 80149b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149b4:	b091      	sub	sp, #68	@ 0x44
 80149b6:	ed8d 1b00 	vstr	d1, [sp]
 80149ba:	e9dd 1900 	ldrd	r1, r9, [sp]
 80149be:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80149c2:	ea5a 0001 	orrs.w	r0, sl, r1
 80149c6:	ec57 6b10 	vmov	r6, r7, d0
 80149ca:	d113      	bne.n	80149f4 <__ieee754_pow+0x44>
 80149cc:	19b3      	adds	r3, r6, r6
 80149ce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80149d2:	4152      	adcs	r2, r2
 80149d4:	4298      	cmp	r0, r3
 80149d6:	4b98      	ldr	r3, [pc, #608]	@ (8014c38 <__ieee754_pow+0x288>)
 80149d8:	4193      	sbcs	r3, r2
 80149da:	f080 84ea 	bcs.w	80153b2 <__ieee754_pow+0xa02>
 80149de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80149e2:	4630      	mov	r0, r6
 80149e4:	4639      	mov	r1, r7
 80149e6:	f7eb fc61 	bl	80002ac <__adddf3>
 80149ea:	ec41 0b10 	vmov	d0, r0, r1
 80149ee:	b011      	add	sp, #68	@ 0x44
 80149f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149f4:	4a91      	ldr	r2, [pc, #580]	@ (8014c3c <__ieee754_pow+0x28c>)
 80149f6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80149fa:	4590      	cmp	r8, r2
 80149fc:	463d      	mov	r5, r7
 80149fe:	4633      	mov	r3, r6
 8014a00:	d806      	bhi.n	8014a10 <__ieee754_pow+0x60>
 8014a02:	d101      	bne.n	8014a08 <__ieee754_pow+0x58>
 8014a04:	2e00      	cmp	r6, #0
 8014a06:	d1ea      	bne.n	80149de <__ieee754_pow+0x2e>
 8014a08:	4592      	cmp	sl, r2
 8014a0a:	d801      	bhi.n	8014a10 <__ieee754_pow+0x60>
 8014a0c:	d10e      	bne.n	8014a2c <__ieee754_pow+0x7c>
 8014a0e:	b169      	cbz	r1, 8014a2c <__ieee754_pow+0x7c>
 8014a10:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8014a14:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8014a18:	431d      	orrs	r5, r3
 8014a1a:	d1e0      	bne.n	80149de <__ieee754_pow+0x2e>
 8014a1c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014a20:	18db      	adds	r3, r3, r3
 8014a22:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8014a26:	4152      	adcs	r2, r2
 8014a28:	429d      	cmp	r5, r3
 8014a2a:	e7d4      	b.n	80149d6 <__ieee754_pow+0x26>
 8014a2c:	2d00      	cmp	r5, #0
 8014a2e:	46c3      	mov	fp, r8
 8014a30:	da3a      	bge.n	8014aa8 <__ieee754_pow+0xf8>
 8014a32:	4a83      	ldr	r2, [pc, #524]	@ (8014c40 <__ieee754_pow+0x290>)
 8014a34:	4592      	cmp	sl, r2
 8014a36:	d84d      	bhi.n	8014ad4 <__ieee754_pow+0x124>
 8014a38:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8014a3c:	4592      	cmp	sl, r2
 8014a3e:	f240 84c7 	bls.w	80153d0 <__ieee754_pow+0xa20>
 8014a42:	ea4f 522a 	mov.w	r2, sl, asr #20
 8014a46:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8014a4a:	2a14      	cmp	r2, #20
 8014a4c:	dd0f      	ble.n	8014a6e <__ieee754_pow+0xbe>
 8014a4e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8014a52:	fa21 f402 	lsr.w	r4, r1, r2
 8014a56:	fa04 f202 	lsl.w	r2, r4, r2
 8014a5a:	428a      	cmp	r2, r1
 8014a5c:	f040 84b8 	bne.w	80153d0 <__ieee754_pow+0xa20>
 8014a60:	f004 0401 	and.w	r4, r4, #1
 8014a64:	f1c4 0402 	rsb	r4, r4, #2
 8014a68:	2900      	cmp	r1, #0
 8014a6a:	d158      	bne.n	8014b1e <__ieee754_pow+0x16e>
 8014a6c:	e00e      	b.n	8014a8c <__ieee754_pow+0xdc>
 8014a6e:	2900      	cmp	r1, #0
 8014a70:	d154      	bne.n	8014b1c <__ieee754_pow+0x16c>
 8014a72:	f1c2 0214 	rsb	r2, r2, #20
 8014a76:	fa4a f402 	asr.w	r4, sl, r2
 8014a7a:	fa04 f202 	lsl.w	r2, r4, r2
 8014a7e:	4552      	cmp	r2, sl
 8014a80:	f040 84a3 	bne.w	80153ca <__ieee754_pow+0xa1a>
 8014a84:	f004 0401 	and.w	r4, r4, #1
 8014a88:	f1c4 0402 	rsb	r4, r4, #2
 8014a8c:	4a6d      	ldr	r2, [pc, #436]	@ (8014c44 <__ieee754_pow+0x294>)
 8014a8e:	4592      	cmp	sl, r2
 8014a90:	d12e      	bne.n	8014af0 <__ieee754_pow+0x140>
 8014a92:	f1b9 0f00 	cmp.w	r9, #0
 8014a96:	f280 8494 	bge.w	80153c2 <__ieee754_pow+0xa12>
 8014a9a:	496a      	ldr	r1, [pc, #424]	@ (8014c44 <__ieee754_pow+0x294>)
 8014a9c:	4632      	mov	r2, r6
 8014a9e:	463b      	mov	r3, r7
 8014aa0:	2000      	movs	r0, #0
 8014aa2:	f7eb fee3 	bl	800086c <__aeabi_ddiv>
 8014aa6:	e7a0      	b.n	80149ea <__ieee754_pow+0x3a>
 8014aa8:	2400      	movs	r4, #0
 8014aaa:	bbc1      	cbnz	r1, 8014b1e <__ieee754_pow+0x16e>
 8014aac:	4a63      	ldr	r2, [pc, #396]	@ (8014c3c <__ieee754_pow+0x28c>)
 8014aae:	4592      	cmp	sl, r2
 8014ab0:	d1ec      	bne.n	8014a8c <__ieee754_pow+0xdc>
 8014ab2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8014ab6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8014aba:	431a      	orrs	r2, r3
 8014abc:	f000 8479 	beq.w	80153b2 <__ieee754_pow+0xa02>
 8014ac0:	4b61      	ldr	r3, [pc, #388]	@ (8014c48 <__ieee754_pow+0x298>)
 8014ac2:	4598      	cmp	r8, r3
 8014ac4:	d908      	bls.n	8014ad8 <__ieee754_pow+0x128>
 8014ac6:	f1b9 0f00 	cmp.w	r9, #0
 8014aca:	f2c0 8476 	blt.w	80153ba <__ieee754_pow+0xa0a>
 8014ace:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ad2:	e78a      	b.n	80149ea <__ieee754_pow+0x3a>
 8014ad4:	2402      	movs	r4, #2
 8014ad6:	e7e8      	b.n	8014aaa <__ieee754_pow+0xfa>
 8014ad8:	f1b9 0f00 	cmp.w	r9, #0
 8014adc:	f04f 0000 	mov.w	r0, #0
 8014ae0:	f04f 0100 	mov.w	r1, #0
 8014ae4:	da81      	bge.n	80149ea <__ieee754_pow+0x3a>
 8014ae6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014aea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8014aee:	e77c      	b.n	80149ea <__ieee754_pow+0x3a>
 8014af0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8014af4:	d106      	bne.n	8014b04 <__ieee754_pow+0x154>
 8014af6:	4632      	mov	r2, r6
 8014af8:	463b      	mov	r3, r7
 8014afa:	4630      	mov	r0, r6
 8014afc:	4639      	mov	r1, r7
 8014afe:	f7eb fd8b 	bl	8000618 <__aeabi_dmul>
 8014b02:	e772      	b.n	80149ea <__ieee754_pow+0x3a>
 8014b04:	4a51      	ldr	r2, [pc, #324]	@ (8014c4c <__ieee754_pow+0x29c>)
 8014b06:	4591      	cmp	r9, r2
 8014b08:	d109      	bne.n	8014b1e <__ieee754_pow+0x16e>
 8014b0a:	2d00      	cmp	r5, #0
 8014b0c:	db07      	blt.n	8014b1e <__ieee754_pow+0x16e>
 8014b0e:	ec47 6b10 	vmov	d0, r6, r7
 8014b12:	b011      	add	sp, #68	@ 0x44
 8014b14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b18:	f7ff be70 	b.w	80147fc <__ieee754_sqrt>
 8014b1c:	2400      	movs	r4, #0
 8014b1e:	ec47 6b10 	vmov	d0, r6, r7
 8014b22:	9302      	str	r3, [sp, #8]
 8014b24:	f000 fc88 	bl	8015438 <fabs>
 8014b28:	9b02      	ldr	r3, [sp, #8]
 8014b2a:	ec51 0b10 	vmov	r0, r1, d0
 8014b2e:	bb53      	cbnz	r3, 8014b86 <__ieee754_pow+0x1d6>
 8014b30:	4b44      	ldr	r3, [pc, #272]	@ (8014c44 <__ieee754_pow+0x294>)
 8014b32:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8014b36:	429a      	cmp	r2, r3
 8014b38:	d002      	beq.n	8014b40 <__ieee754_pow+0x190>
 8014b3a:	f1b8 0f00 	cmp.w	r8, #0
 8014b3e:	d122      	bne.n	8014b86 <__ieee754_pow+0x1d6>
 8014b40:	f1b9 0f00 	cmp.w	r9, #0
 8014b44:	da05      	bge.n	8014b52 <__ieee754_pow+0x1a2>
 8014b46:	4602      	mov	r2, r0
 8014b48:	460b      	mov	r3, r1
 8014b4a:	2000      	movs	r0, #0
 8014b4c:	493d      	ldr	r1, [pc, #244]	@ (8014c44 <__ieee754_pow+0x294>)
 8014b4e:	f7eb fe8d 	bl	800086c <__aeabi_ddiv>
 8014b52:	2d00      	cmp	r5, #0
 8014b54:	f6bf af49 	bge.w	80149ea <__ieee754_pow+0x3a>
 8014b58:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8014b5c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8014b60:	ea58 0804 	orrs.w	r8, r8, r4
 8014b64:	d108      	bne.n	8014b78 <__ieee754_pow+0x1c8>
 8014b66:	4602      	mov	r2, r0
 8014b68:	460b      	mov	r3, r1
 8014b6a:	4610      	mov	r0, r2
 8014b6c:	4619      	mov	r1, r3
 8014b6e:	f7eb fb9b 	bl	80002a8 <__aeabi_dsub>
 8014b72:	4602      	mov	r2, r0
 8014b74:	460b      	mov	r3, r1
 8014b76:	e794      	b.n	8014aa2 <__ieee754_pow+0xf2>
 8014b78:	2c01      	cmp	r4, #1
 8014b7a:	f47f af36 	bne.w	80149ea <__ieee754_pow+0x3a>
 8014b7e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014b82:	4619      	mov	r1, r3
 8014b84:	e731      	b.n	80149ea <__ieee754_pow+0x3a>
 8014b86:	0feb      	lsrs	r3, r5, #31
 8014b88:	3b01      	subs	r3, #1
 8014b8a:	ea53 0204 	orrs.w	r2, r3, r4
 8014b8e:	d102      	bne.n	8014b96 <__ieee754_pow+0x1e6>
 8014b90:	4632      	mov	r2, r6
 8014b92:	463b      	mov	r3, r7
 8014b94:	e7e9      	b.n	8014b6a <__ieee754_pow+0x1ba>
 8014b96:	3c01      	subs	r4, #1
 8014b98:	431c      	orrs	r4, r3
 8014b9a:	d016      	beq.n	8014bca <__ieee754_pow+0x21a>
 8014b9c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8014c28 <__ieee754_pow+0x278>
 8014ba0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8014ba4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014ba8:	f240 8112 	bls.w	8014dd0 <__ieee754_pow+0x420>
 8014bac:	4b28      	ldr	r3, [pc, #160]	@ (8014c50 <__ieee754_pow+0x2a0>)
 8014bae:	459a      	cmp	sl, r3
 8014bb0:	4b25      	ldr	r3, [pc, #148]	@ (8014c48 <__ieee754_pow+0x298>)
 8014bb2:	d916      	bls.n	8014be2 <__ieee754_pow+0x232>
 8014bb4:	4598      	cmp	r8, r3
 8014bb6:	d80b      	bhi.n	8014bd0 <__ieee754_pow+0x220>
 8014bb8:	f1b9 0f00 	cmp.w	r9, #0
 8014bbc:	da0b      	bge.n	8014bd6 <__ieee754_pow+0x226>
 8014bbe:	2000      	movs	r0, #0
 8014bc0:	b011      	add	sp, #68	@ 0x44
 8014bc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bc6:	f000 bcf3 	b.w	80155b0 <__math_oflow>
 8014bca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8014c30 <__ieee754_pow+0x280>
 8014bce:	e7e7      	b.n	8014ba0 <__ieee754_pow+0x1f0>
 8014bd0:	f1b9 0f00 	cmp.w	r9, #0
 8014bd4:	dcf3      	bgt.n	8014bbe <__ieee754_pow+0x20e>
 8014bd6:	2000      	movs	r0, #0
 8014bd8:	b011      	add	sp, #68	@ 0x44
 8014bda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bde:	f000 bcdf 	b.w	80155a0 <__math_uflow>
 8014be2:	4598      	cmp	r8, r3
 8014be4:	d20c      	bcs.n	8014c00 <__ieee754_pow+0x250>
 8014be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014bea:	2200      	movs	r2, #0
 8014bec:	2300      	movs	r3, #0
 8014bee:	f7eb ff85 	bl	8000afc <__aeabi_dcmplt>
 8014bf2:	3800      	subs	r0, #0
 8014bf4:	bf18      	it	ne
 8014bf6:	2001      	movne	r0, #1
 8014bf8:	f1b9 0f00 	cmp.w	r9, #0
 8014bfc:	daec      	bge.n	8014bd8 <__ieee754_pow+0x228>
 8014bfe:	e7df      	b.n	8014bc0 <__ieee754_pow+0x210>
 8014c00:	4b10      	ldr	r3, [pc, #64]	@ (8014c44 <__ieee754_pow+0x294>)
 8014c02:	4598      	cmp	r8, r3
 8014c04:	f04f 0200 	mov.w	r2, #0
 8014c08:	d924      	bls.n	8014c54 <__ieee754_pow+0x2a4>
 8014c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c0e:	2300      	movs	r3, #0
 8014c10:	f7eb ff74 	bl	8000afc <__aeabi_dcmplt>
 8014c14:	3800      	subs	r0, #0
 8014c16:	bf18      	it	ne
 8014c18:	2001      	movne	r0, #1
 8014c1a:	f1b9 0f00 	cmp.w	r9, #0
 8014c1e:	dccf      	bgt.n	8014bc0 <__ieee754_pow+0x210>
 8014c20:	e7da      	b.n	8014bd8 <__ieee754_pow+0x228>
 8014c22:	bf00      	nop
 8014c24:	f3af 8000 	nop.w
 8014c28:	00000000 	.word	0x00000000
 8014c2c:	3ff00000 	.word	0x3ff00000
 8014c30:	00000000 	.word	0x00000000
 8014c34:	bff00000 	.word	0xbff00000
 8014c38:	fff00000 	.word	0xfff00000
 8014c3c:	7ff00000 	.word	0x7ff00000
 8014c40:	433fffff 	.word	0x433fffff
 8014c44:	3ff00000 	.word	0x3ff00000
 8014c48:	3fefffff 	.word	0x3fefffff
 8014c4c:	3fe00000 	.word	0x3fe00000
 8014c50:	43f00000 	.word	0x43f00000
 8014c54:	4b5a      	ldr	r3, [pc, #360]	@ (8014dc0 <__ieee754_pow+0x410>)
 8014c56:	f7eb fb27 	bl	80002a8 <__aeabi_dsub>
 8014c5a:	a351      	add	r3, pc, #324	@ (adr r3, 8014da0 <__ieee754_pow+0x3f0>)
 8014c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c60:	4604      	mov	r4, r0
 8014c62:	460d      	mov	r5, r1
 8014c64:	f7eb fcd8 	bl	8000618 <__aeabi_dmul>
 8014c68:	a34f      	add	r3, pc, #316	@ (adr r3, 8014da8 <__ieee754_pow+0x3f8>)
 8014c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c6e:	4606      	mov	r6, r0
 8014c70:	460f      	mov	r7, r1
 8014c72:	4620      	mov	r0, r4
 8014c74:	4629      	mov	r1, r5
 8014c76:	f7eb fccf 	bl	8000618 <__aeabi_dmul>
 8014c7a:	4b52      	ldr	r3, [pc, #328]	@ (8014dc4 <__ieee754_pow+0x414>)
 8014c7c:	4682      	mov	sl, r0
 8014c7e:	468b      	mov	fp, r1
 8014c80:	2200      	movs	r2, #0
 8014c82:	4620      	mov	r0, r4
 8014c84:	4629      	mov	r1, r5
 8014c86:	f7eb fcc7 	bl	8000618 <__aeabi_dmul>
 8014c8a:	4602      	mov	r2, r0
 8014c8c:	460b      	mov	r3, r1
 8014c8e:	a148      	add	r1, pc, #288	@ (adr r1, 8014db0 <__ieee754_pow+0x400>)
 8014c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c94:	f7eb fb08 	bl	80002a8 <__aeabi_dsub>
 8014c98:	4622      	mov	r2, r4
 8014c9a:	462b      	mov	r3, r5
 8014c9c:	f7eb fcbc 	bl	8000618 <__aeabi_dmul>
 8014ca0:	4602      	mov	r2, r0
 8014ca2:	460b      	mov	r3, r1
 8014ca4:	2000      	movs	r0, #0
 8014ca6:	4948      	ldr	r1, [pc, #288]	@ (8014dc8 <__ieee754_pow+0x418>)
 8014ca8:	f7eb fafe 	bl	80002a8 <__aeabi_dsub>
 8014cac:	4622      	mov	r2, r4
 8014cae:	4680      	mov	r8, r0
 8014cb0:	4689      	mov	r9, r1
 8014cb2:	462b      	mov	r3, r5
 8014cb4:	4620      	mov	r0, r4
 8014cb6:	4629      	mov	r1, r5
 8014cb8:	f7eb fcae 	bl	8000618 <__aeabi_dmul>
 8014cbc:	4602      	mov	r2, r0
 8014cbe:	460b      	mov	r3, r1
 8014cc0:	4640      	mov	r0, r8
 8014cc2:	4649      	mov	r1, r9
 8014cc4:	f7eb fca8 	bl	8000618 <__aeabi_dmul>
 8014cc8:	a33b      	add	r3, pc, #236	@ (adr r3, 8014db8 <__ieee754_pow+0x408>)
 8014cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cce:	f7eb fca3 	bl	8000618 <__aeabi_dmul>
 8014cd2:	4602      	mov	r2, r0
 8014cd4:	460b      	mov	r3, r1
 8014cd6:	4650      	mov	r0, sl
 8014cd8:	4659      	mov	r1, fp
 8014cda:	f7eb fae5 	bl	80002a8 <__aeabi_dsub>
 8014cde:	4602      	mov	r2, r0
 8014ce0:	460b      	mov	r3, r1
 8014ce2:	4680      	mov	r8, r0
 8014ce4:	4689      	mov	r9, r1
 8014ce6:	4630      	mov	r0, r6
 8014ce8:	4639      	mov	r1, r7
 8014cea:	f7eb fadf 	bl	80002ac <__adddf3>
 8014cee:	2400      	movs	r4, #0
 8014cf0:	4632      	mov	r2, r6
 8014cf2:	463b      	mov	r3, r7
 8014cf4:	4620      	mov	r0, r4
 8014cf6:	460d      	mov	r5, r1
 8014cf8:	f7eb fad6 	bl	80002a8 <__aeabi_dsub>
 8014cfc:	4602      	mov	r2, r0
 8014cfe:	460b      	mov	r3, r1
 8014d00:	4640      	mov	r0, r8
 8014d02:	4649      	mov	r1, r9
 8014d04:	f7eb fad0 	bl	80002a8 <__aeabi_dsub>
 8014d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014d10:	2300      	movs	r3, #0
 8014d12:	9304      	str	r3, [sp, #16]
 8014d14:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014d18:	4606      	mov	r6, r0
 8014d1a:	460f      	mov	r7, r1
 8014d1c:	4652      	mov	r2, sl
 8014d1e:	465b      	mov	r3, fp
 8014d20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d24:	f7eb fac0 	bl	80002a8 <__aeabi_dsub>
 8014d28:	4622      	mov	r2, r4
 8014d2a:	462b      	mov	r3, r5
 8014d2c:	f7eb fc74 	bl	8000618 <__aeabi_dmul>
 8014d30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d34:	4680      	mov	r8, r0
 8014d36:	4689      	mov	r9, r1
 8014d38:	4630      	mov	r0, r6
 8014d3a:	4639      	mov	r1, r7
 8014d3c:	f7eb fc6c 	bl	8000618 <__aeabi_dmul>
 8014d40:	4602      	mov	r2, r0
 8014d42:	460b      	mov	r3, r1
 8014d44:	4640      	mov	r0, r8
 8014d46:	4649      	mov	r1, r9
 8014d48:	f7eb fab0 	bl	80002ac <__adddf3>
 8014d4c:	4652      	mov	r2, sl
 8014d4e:	465b      	mov	r3, fp
 8014d50:	4606      	mov	r6, r0
 8014d52:	460f      	mov	r7, r1
 8014d54:	4620      	mov	r0, r4
 8014d56:	4629      	mov	r1, r5
 8014d58:	f7eb fc5e 	bl	8000618 <__aeabi_dmul>
 8014d5c:	460b      	mov	r3, r1
 8014d5e:	4602      	mov	r2, r0
 8014d60:	4680      	mov	r8, r0
 8014d62:	4689      	mov	r9, r1
 8014d64:	4630      	mov	r0, r6
 8014d66:	4639      	mov	r1, r7
 8014d68:	f7eb faa0 	bl	80002ac <__adddf3>
 8014d6c:	4b17      	ldr	r3, [pc, #92]	@ (8014dcc <__ieee754_pow+0x41c>)
 8014d6e:	4299      	cmp	r1, r3
 8014d70:	4604      	mov	r4, r0
 8014d72:	460d      	mov	r5, r1
 8014d74:	468a      	mov	sl, r1
 8014d76:	468b      	mov	fp, r1
 8014d78:	f340 82ef 	ble.w	801535a <__ieee754_pow+0x9aa>
 8014d7c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8014d80:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8014d84:	4303      	orrs	r3, r0
 8014d86:	f000 81e8 	beq.w	801515a <__ieee754_pow+0x7aa>
 8014d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	2300      	movs	r3, #0
 8014d92:	f7eb feb3 	bl	8000afc <__aeabi_dcmplt>
 8014d96:	3800      	subs	r0, #0
 8014d98:	bf18      	it	ne
 8014d9a:	2001      	movne	r0, #1
 8014d9c:	e710      	b.n	8014bc0 <__ieee754_pow+0x210>
 8014d9e:	bf00      	nop
 8014da0:	60000000 	.word	0x60000000
 8014da4:	3ff71547 	.word	0x3ff71547
 8014da8:	f85ddf44 	.word	0xf85ddf44
 8014dac:	3e54ae0b 	.word	0x3e54ae0b
 8014db0:	55555555 	.word	0x55555555
 8014db4:	3fd55555 	.word	0x3fd55555
 8014db8:	652b82fe 	.word	0x652b82fe
 8014dbc:	3ff71547 	.word	0x3ff71547
 8014dc0:	3ff00000 	.word	0x3ff00000
 8014dc4:	3fd00000 	.word	0x3fd00000
 8014dc8:	3fe00000 	.word	0x3fe00000
 8014dcc:	408fffff 	.word	0x408fffff
 8014dd0:	4bd5      	ldr	r3, [pc, #852]	@ (8015128 <__ieee754_pow+0x778>)
 8014dd2:	402b      	ands	r3, r5
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	b92b      	cbnz	r3, 8014de4 <__ieee754_pow+0x434>
 8014dd8:	4bd4      	ldr	r3, [pc, #848]	@ (801512c <__ieee754_pow+0x77c>)
 8014dda:	f7eb fc1d 	bl	8000618 <__aeabi_dmul>
 8014dde:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8014de2:	468b      	mov	fp, r1
 8014de4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8014de8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8014dec:	4413      	add	r3, r2
 8014dee:	930a      	str	r3, [sp, #40]	@ 0x28
 8014df0:	4bcf      	ldr	r3, [pc, #828]	@ (8015130 <__ieee754_pow+0x780>)
 8014df2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8014df6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8014dfa:	459b      	cmp	fp, r3
 8014dfc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014e00:	dd08      	ble.n	8014e14 <__ieee754_pow+0x464>
 8014e02:	4bcc      	ldr	r3, [pc, #816]	@ (8015134 <__ieee754_pow+0x784>)
 8014e04:	459b      	cmp	fp, r3
 8014e06:	f340 81a5 	ble.w	8015154 <__ieee754_pow+0x7a4>
 8014e0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014e0c:	3301      	adds	r3, #1
 8014e0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014e10:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8014e14:	f04f 0a00 	mov.w	sl, #0
 8014e18:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014e1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014e1e:	4bc6      	ldr	r3, [pc, #792]	@ (8015138 <__ieee754_pow+0x788>)
 8014e20:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014e24:	ed93 7b00 	vldr	d7, [r3]
 8014e28:	4629      	mov	r1, r5
 8014e2a:	ec53 2b17 	vmov	r2, r3, d7
 8014e2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014e32:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014e36:	f7eb fa37 	bl	80002a8 <__aeabi_dsub>
 8014e3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014e3e:	4606      	mov	r6, r0
 8014e40:	460f      	mov	r7, r1
 8014e42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014e46:	f7eb fa31 	bl	80002ac <__adddf3>
 8014e4a:	4602      	mov	r2, r0
 8014e4c:	460b      	mov	r3, r1
 8014e4e:	2000      	movs	r0, #0
 8014e50:	49ba      	ldr	r1, [pc, #744]	@ (801513c <__ieee754_pow+0x78c>)
 8014e52:	f7eb fd0b 	bl	800086c <__aeabi_ddiv>
 8014e56:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8014e5a:	4602      	mov	r2, r0
 8014e5c:	460b      	mov	r3, r1
 8014e5e:	4630      	mov	r0, r6
 8014e60:	4639      	mov	r1, r7
 8014e62:	f7eb fbd9 	bl	8000618 <__aeabi_dmul>
 8014e66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014e6a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8014e6e:	106d      	asrs	r5, r5, #1
 8014e70:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8014e74:	f04f 0b00 	mov.w	fp, #0
 8014e78:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8014e7c:	4661      	mov	r1, ip
 8014e7e:	2200      	movs	r2, #0
 8014e80:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014e84:	4658      	mov	r0, fp
 8014e86:	46e1      	mov	r9, ip
 8014e88:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8014e8c:	4614      	mov	r4, r2
 8014e8e:	461d      	mov	r5, r3
 8014e90:	f7eb fbc2 	bl	8000618 <__aeabi_dmul>
 8014e94:	4602      	mov	r2, r0
 8014e96:	460b      	mov	r3, r1
 8014e98:	4630      	mov	r0, r6
 8014e9a:	4639      	mov	r1, r7
 8014e9c:	f7eb fa04 	bl	80002a8 <__aeabi_dsub>
 8014ea0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014ea4:	4606      	mov	r6, r0
 8014ea6:	460f      	mov	r7, r1
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	4629      	mov	r1, r5
 8014eac:	f7eb f9fc 	bl	80002a8 <__aeabi_dsub>
 8014eb0:	4602      	mov	r2, r0
 8014eb2:	460b      	mov	r3, r1
 8014eb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014eb8:	f7eb f9f6 	bl	80002a8 <__aeabi_dsub>
 8014ebc:	465a      	mov	r2, fp
 8014ebe:	464b      	mov	r3, r9
 8014ec0:	f7eb fbaa 	bl	8000618 <__aeabi_dmul>
 8014ec4:	4602      	mov	r2, r0
 8014ec6:	460b      	mov	r3, r1
 8014ec8:	4630      	mov	r0, r6
 8014eca:	4639      	mov	r1, r7
 8014ecc:	f7eb f9ec 	bl	80002a8 <__aeabi_dsub>
 8014ed0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8014ed4:	f7eb fba0 	bl	8000618 <__aeabi_dmul>
 8014ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014edc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014ee0:	4610      	mov	r0, r2
 8014ee2:	4619      	mov	r1, r3
 8014ee4:	f7eb fb98 	bl	8000618 <__aeabi_dmul>
 8014ee8:	a37d      	add	r3, pc, #500	@ (adr r3, 80150e0 <__ieee754_pow+0x730>)
 8014eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eee:	4604      	mov	r4, r0
 8014ef0:	460d      	mov	r5, r1
 8014ef2:	f7eb fb91 	bl	8000618 <__aeabi_dmul>
 8014ef6:	a37c      	add	r3, pc, #496	@ (adr r3, 80150e8 <__ieee754_pow+0x738>)
 8014ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014efc:	f7eb f9d6 	bl	80002ac <__adddf3>
 8014f00:	4622      	mov	r2, r4
 8014f02:	462b      	mov	r3, r5
 8014f04:	f7eb fb88 	bl	8000618 <__aeabi_dmul>
 8014f08:	a379      	add	r3, pc, #484	@ (adr r3, 80150f0 <__ieee754_pow+0x740>)
 8014f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f0e:	f7eb f9cd 	bl	80002ac <__adddf3>
 8014f12:	4622      	mov	r2, r4
 8014f14:	462b      	mov	r3, r5
 8014f16:	f7eb fb7f 	bl	8000618 <__aeabi_dmul>
 8014f1a:	a377      	add	r3, pc, #476	@ (adr r3, 80150f8 <__ieee754_pow+0x748>)
 8014f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f20:	f7eb f9c4 	bl	80002ac <__adddf3>
 8014f24:	4622      	mov	r2, r4
 8014f26:	462b      	mov	r3, r5
 8014f28:	f7eb fb76 	bl	8000618 <__aeabi_dmul>
 8014f2c:	a374      	add	r3, pc, #464	@ (adr r3, 8015100 <__ieee754_pow+0x750>)
 8014f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f32:	f7eb f9bb 	bl	80002ac <__adddf3>
 8014f36:	4622      	mov	r2, r4
 8014f38:	462b      	mov	r3, r5
 8014f3a:	f7eb fb6d 	bl	8000618 <__aeabi_dmul>
 8014f3e:	a372      	add	r3, pc, #456	@ (adr r3, 8015108 <__ieee754_pow+0x758>)
 8014f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f44:	f7eb f9b2 	bl	80002ac <__adddf3>
 8014f48:	4622      	mov	r2, r4
 8014f4a:	4606      	mov	r6, r0
 8014f4c:	460f      	mov	r7, r1
 8014f4e:	462b      	mov	r3, r5
 8014f50:	4620      	mov	r0, r4
 8014f52:	4629      	mov	r1, r5
 8014f54:	f7eb fb60 	bl	8000618 <__aeabi_dmul>
 8014f58:	4602      	mov	r2, r0
 8014f5a:	460b      	mov	r3, r1
 8014f5c:	4630      	mov	r0, r6
 8014f5e:	4639      	mov	r1, r7
 8014f60:	f7eb fb5a 	bl	8000618 <__aeabi_dmul>
 8014f64:	465a      	mov	r2, fp
 8014f66:	4604      	mov	r4, r0
 8014f68:	460d      	mov	r5, r1
 8014f6a:	464b      	mov	r3, r9
 8014f6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014f70:	f7eb f99c 	bl	80002ac <__adddf3>
 8014f74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014f78:	f7eb fb4e 	bl	8000618 <__aeabi_dmul>
 8014f7c:	4622      	mov	r2, r4
 8014f7e:	462b      	mov	r3, r5
 8014f80:	f7eb f994 	bl	80002ac <__adddf3>
 8014f84:	465a      	mov	r2, fp
 8014f86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014f8a:	464b      	mov	r3, r9
 8014f8c:	4658      	mov	r0, fp
 8014f8e:	4649      	mov	r1, r9
 8014f90:	f7eb fb42 	bl	8000618 <__aeabi_dmul>
 8014f94:	4b6a      	ldr	r3, [pc, #424]	@ (8015140 <__ieee754_pow+0x790>)
 8014f96:	2200      	movs	r2, #0
 8014f98:	4606      	mov	r6, r0
 8014f9a:	460f      	mov	r7, r1
 8014f9c:	f7eb f986 	bl	80002ac <__adddf3>
 8014fa0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014fa4:	f7eb f982 	bl	80002ac <__adddf3>
 8014fa8:	46d8      	mov	r8, fp
 8014faa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8014fae:	460d      	mov	r5, r1
 8014fb0:	465a      	mov	r2, fp
 8014fb2:	460b      	mov	r3, r1
 8014fb4:	4640      	mov	r0, r8
 8014fb6:	4649      	mov	r1, r9
 8014fb8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8014fbc:	f7eb fb2c 	bl	8000618 <__aeabi_dmul>
 8014fc0:	465c      	mov	r4, fp
 8014fc2:	4680      	mov	r8, r0
 8014fc4:	4689      	mov	r9, r1
 8014fc6:	4b5e      	ldr	r3, [pc, #376]	@ (8015140 <__ieee754_pow+0x790>)
 8014fc8:	2200      	movs	r2, #0
 8014fca:	4620      	mov	r0, r4
 8014fcc:	4629      	mov	r1, r5
 8014fce:	f7eb f96b 	bl	80002a8 <__aeabi_dsub>
 8014fd2:	4632      	mov	r2, r6
 8014fd4:	463b      	mov	r3, r7
 8014fd6:	f7eb f967 	bl	80002a8 <__aeabi_dsub>
 8014fda:	4602      	mov	r2, r0
 8014fdc:	460b      	mov	r3, r1
 8014fde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014fe2:	f7eb f961 	bl	80002a8 <__aeabi_dsub>
 8014fe6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014fea:	f7eb fb15 	bl	8000618 <__aeabi_dmul>
 8014fee:	4622      	mov	r2, r4
 8014ff0:	4606      	mov	r6, r0
 8014ff2:	460f      	mov	r7, r1
 8014ff4:	462b      	mov	r3, r5
 8014ff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014ffa:	f7eb fb0d 	bl	8000618 <__aeabi_dmul>
 8014ffe:	4602      	mov	r2, r0
 8015000:	460b      	mov	r3, r1
 8015002:	4630      	mov	r0, r6
 8015004:	4639      	mov	r1, r7
 8015006:	f7eb f951 	bl	80002ac <__adddf3>
 801500a:	4606      	mov	r6, r0
 801500c:	460f      	mov	r7, r1
 801500e:	4602      	mov	r2, r0
 8015010:	460b      	mov	r3, r1
 8015012:	4640      	mov	r0, r8
 8015014:	4649      	mov	r1, r9
 8015016:	f7eb f949 	bl	80002ac <__adddf3>
 801501a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801501e:	a33c      	add	r3, pc, #240	@ (adr r3, 8015110 <__ieee754_pow+0x760>)
 8015020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015024:	4658      	mov	r0, fp
 8015026:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801502a:	460d      	mov	r5, r1
 801502c:	f7eb faf4 	bl	8000618 <__aeabi_dmul>
 8015030:	465c      	mov	r4, fp
 8015032:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015036:	4642      	mov	r2, r8
 8015038:	464b      	mov	r3, r9
 801503a:	4620      	mov	r0, r4
 801503c:	4629      	mov	r1, r5
 801503e:	f7eb f933 	bl	80002a8 <__aeabi_dsub>
 8015042:	4602      	mov	r2, r0
 8015044:	460b      	mov	r3, r1
 8015046:	4630      	mov	r0, r6
 8015048:	4639      	mov	r1, r7
 801504a:	f7eb f92d 	bl	80002a8 <__aeabi_dsub>
 801504e:	a332      	add	r3, pc, #200	@ (adr r3, 8015118 <__ieee754_pow+0x768>)
 8015050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015054:	f7eb fae0 	bl	8000618 <__aeabi_dmul>
 8015058:	a331      	add	r3, pc, #196	@ (adr r3, 8015120 <__ieee754_pow+0x770>)
 801505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801505e:	4606      	mov	r6, r0
 8015060:	460f      	mov	r7, r1
 8015062:	4620      	mov	r0, r4
 8015064:	4629      	mov	r1, r5
 8015066:	f7eb fad7 	bl	8000618 <__aeabi_dmul>
 801506a:	4602      	mov	r2, r0
 801506c:	460b      	mov	r3, r1
 801506e:	4630      	mov	r0, r6
 8015070:	4639      	mov	r1, r7
 8015072:	f7eb f91b 	bl	80002ac <__adddf3>
 8015076:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015078:	4b32      	ldr	r3, [pc, #200]	@ (8015144 <__ieee754_pow+0x794>)
 801507a:	4413      	add	r3, r2
 801507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015080:	f7eb f914 	bl	80002ac <__adddf3>
 8015084:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015088:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801508a:	f7eb fa5b 	bl	8000544 <__aeabi_i2d>
 801508e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015090:	4b2d      	ldr	r3, [pc, #180]	@ (8015148 <__ieee754_pow+0x798>)
 8015092:	4413      	add	r3, r2
 8015094:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015098:	4606      	mov	r6, r0
 801509a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801509e:	460f      	mov	r7, r1
 80150a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80150a4:	f7eb f902 	bl	80002ac <__adddf3>
 80150a8:	4642      	mov	r2, r8
 80150aa:	464b      	mov	r3, r9
 80150ac:	f7eb f8fe 	bl	80002ac <__adddf3>
 80150b0:	4632      	mov	r2, r6
 80150b2:	463b      	mov	r3, r7
 80150b4:	f7eb f8fa 	bl	80002ac <__adddf3>
 80150b8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80150bc:	4632      	mov	r2, r6
 80150be:	463b      	mov	r3, r7
 80150c0:	4658      	mov	r0, fp
 80150c2:	460d      	mov	r5, r1
 80150c4:	f7eb f8f0 	bl	80002a8 <__aeabi_dsub>
 80150c8:	4642      	mov	r2, r8
 80150ca:	464b      	mov	r3, r9
 80150cc:	f7eb f8ec 	bl	80002a8 <__aeabi_dsub>
 80150d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80150d4:	f7eb f8e8 	bl	80002a8 <__aeabi_dsub>
 80150d8:	465c      	mov	r4, fp
 80150da:	4602      	mov	r2, r0
 80150dc:	e036      	b.n	801514c <__ieee754_pow+0x79c>
 80150de:	bf00      	nop
 80150e0:	4a454eef 	.word	0x4a454eef
 80150e4:	3fca7e28 	.word	0x3fca7e28
 80150e8:	93c9db65 	.word	0x93c9db65
 80150ec:	3fcd864a 	.word	0x3fcd864a
 80150f0:	a91d4101 	.word	0xa91d4101
 80150f4:	3fd17460 	.word	0x3fd17460
 80150f8:	518f264d 	.word	0x518f264d
 80150fc:	3fd55555 	.word	0x3fd55555
 8015100:	db6fabff 	.word	0xdb6fabff
 8015104:	3fdb6db6 	.word	0x3fdb6db6
 8015108:	33333303 	.word	0x33333303
 801510c:	3fe33333 	.word	0x3fe33333
 8015110:	e0000000 	.word	0xe0000000
 8015114:	3feec709 	.word	0x3feec709
 8015118:	dc3a03fd 	.word	0xdc3a03fd
 801511c:	3feec709 	.word	0x3feec709
 8015120:	145b01f5 	.word	0x145b01f5
 8015124:	be3e2fe0 	.word	0xbe3e2fe0
 8015128:	7ff00000 	.word	0x7ff00000
 801512c:	43400000 	.word	0x43400000
 8015130:	0003988e 	.word	0x0003988e
 8015134:	000bb679 	.word	0x000bb679
 8015138:	08015ef8 	.word	0x08015ef8
 801513c:	3ff00000 	.word	0x3ff00000
 8015140:	40080000 	.word	0x40080000
 8015144:	08015ed8 	.word	0x08015ed8
 8015148:	08015ee8 	.word	0x08015ee8
 801514c:	460b      	mov	r3, r1
 801514e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015152:	e5d7      	b.n	8014d04 <__ieee754_pow+0x354>
 8015154:	f04f 0a01 	mov.w	sl, #1
 8015158:	e65e      	b.n	8014e18 <__ieee754_pow+0x468>
 801515a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801542c <__ieee754_pow+0xa7c>)
 801515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015160:	4630      	mov	r0, r6
 8015162:	4639      	mov	r1, r7
 8015164:	f7eb f8a2 	bl	80002ac <__adddf3>
 8015168:	4642      	mov	r2, r8
 801516a:	e9cd 0100 	strd	r0, r1, [sp]
 801516e:	464b      	mov	r3, r9
 8015170:	4620      	mov	r0, r4
 8015172:	4629      	mov	r1, r5
 8015174:	f7eb f898 	bl	80002a8 <__aeabi_dsub>
 8015178:	4602      	mov	r2, r0
 801517a:	460b      	mov	r3, r1
 801517c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015180:	f7eb fcda 	bl	8000b38 <__aeabi_dcmpgt>
 8015184:	2800      	cmp	r0, #0
 8015186:	f47f ae00 	bne.w	8014d8a <__ieee754_pow+0x3da>
 801518a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801518e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8015192:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8015196:	fa43 fa0a 	asr.w	sl, r3, sl
 801519a:	44da      	add	sl, fp
 801519c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80151a0:	489d      	ldr	r0, [pc, #628]	@ (8015418 <__ieee754_pow+0xa68>)
 80151a2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80151a6:	4108      	asrs	r0, r1
 80151a8:	ea00 030a 	and.w	r3, r0, sl
 80151ac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80151b0:	f1c1 0114 	rsb	r1, r1, #20
 80151b4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80151b8:	fa4a fa01 	asr.w	sl, sl, r1
 80151bc:	f1bb 0f00 	cmp.w	fp, #0
 80151c0:	4640      	mov	r0, r8
 80151c2:	4649      	mov	r1, r9
 80151c4:	f04f 0200 	mov.w	r2, #0
 80151c8:	bfb8      	it	lt
 80151ca:	f1ca 0a00 	rsblt	sl, sl, #0
 80151ce:	f7eb f86b 	bl	80002a8 <__aeabi_dsub>
 80151d2:	4680      	mov	r8, r0
 80151d4:	4689      	mov	r9, r1
 80151d6:	4632      	mov	r2, r6
 80151d8:	463b      	mov	r3, r7
 80151da:	4640      	mov	r0, r8
 80151dc:	4649      	mov	r1, r9
 80151de:	f7eb f865 	bl	80002ac <__adddf3>
 80151e2:	2400      	movs	r4, #0
 80151e4:	a37c      	add	r3, pc, #496	@ (adr r3, 80153d8 <__ieee754_pow+0xa28>)
 80151e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ea:	4620      	mov	r0, r4
 80151ec:	460d      	mov	r5, r1
 80151ee:	f7eb fa13 	bl	8000618 <__aeabi_dmul>
 80151f2:	4642      	mov	r2, r8
 80151f4:	e9cd 0100 	strd	r0, r1, [sp]
 80151f8:	464b      	mov	r3, r9
 80151fa:	4620      	mov	r0, r4
 80151fc:	4629      	mov	r1, r5
 80151fe:	f7eb f853 	bl	80002a8 <__aeabi_dsub>
 8015202:	4602      	mov	r2, r0
 8015204:	460b      	mov	r3, r1
 8015206:	4630      	mov	r0, r6
 8015208:	4639      	mov	r1, r7
 801520a:	f7eb f84d 	bl	80002a8 <__aeabi_dsub>
 801520e:	a374      	add	r3, pc, #464	@ (adr r3, 80153e0 <__ieee754_pow+0xa30>)
 8015210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015214:	f7eb fa00 	bl	8000618 <__aeabi_dmul>
 8015218:	a373      	add	r3, pc, #460	@ (adr r3, 80153e8 <__ieee754_pow+0xa38>)
 801521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801521e:	4680      	mov	r8, r0
 8015220:	4689      	mov	r9, r1
 8015222:	4620      	mov	r0, r4
 8015224:	4629      	mov	r1, r5
 8015226:	f7eb f9f7 	bl	8000618 <__aeabi_dmul>
 801522a:	4602      	mov	r2, r0
 801522c:	460b      	mov	r3, r1
 801522e:	4640      	mov	r0, r8
 8015230:	4649      	mov	r1, r9
 8015232:	f7eb f83b 	bl	80002ac <__adddf3>
 8015236:	4604      	mov	r4, r0
 8015238:	460d      	mov	r5, r1
 801523a:	4602      	mov	r2, r0
 801523c:	460b      	mov	r3, r1
 801523e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015242:	f7eb f833 	bl	80002ac <__adddf3>
 8015246:	e9dd 2300 	ldrd	r2, r3, [sp]
 801524a:	4680      	mov	r8, r0
 801524c:	4689      	mov	r9, r1
 801524e:	f7eb f82b 	bl	80002a8 <__aeabi_dsub>
 8015252:	4602      	mov	r2, r0
 8015254:	460b      	mov	r3, r1
 8015256:	4620      	mov	r0, r4
 8015258:	4629      	mov	r1, r5
 801525a:	f7eb f825 	bl	80002a8 <__aeabi_dsub>
 801525e:	4642      	mov	r2, r8
 8015260:	4606      	mov	r6, r0
 8015262:	460f      	mov	r7, r1
 8015264:	464b      	mov	r3, r9
 8015266:	4640      	mov	r0, r8
 8015268:	4649      	mov	r1, r9
 801526a:	f7eb f9d5 	bl	8000618 <__aeabi_dmul>
 801526e:	a360      	add	r3, pc, #384	@ (adr r3, 80153f0 <__ieee754_pow+0xa40>)
 8015270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015274:	4604      	mov	r4, r0
 8015276:	460d      	mov	r5, r1
 8015278:	f7eb f9ce 	bl	8000618 <__aeabi_dmul>
 801527c:	a35e      	add	r3, pc, #376	@ (adr r3, 80153f8 <__ieee754_pow+0xa48>)
 801527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015282:	f7eb f811 	bl	80002a8 <__aeabi_dsub>
 8015286:	4622      	mov	r2, r4
 8015288:	462b      	mov	r3, r5
 801528a:	f7eb f9c5 	bl	8000618 <__aeabi_dmul>
 801528e:	a35c      	add	r3, pc, #368	@ (adr r3, 8015400 <__ieee754_pow+0xa50>)
 8015290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015294:	f7eb f80a 	bl	80002ac <__adddf3>
 8015298:	4622      	mov	r2, r4
 801529a:	462b      	mov	r3, r5
 801529c:	f7eb f9bc 	bl	8000618 <__aeabi_dmul>
 80152a0:	a359      	add	r3, pc, #356	@ (adr r3, 8015408 <__ieee754_pow+0xa58>)
 80152a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152a6:	f7ea ffff 	bl	80002a8 <__aeabi_dsub>
 80152aa:	4622      	mov	r2, r4
 80152ac:	462b      	mov	r3, r5
 80152ae:	f7eb f9b3 	bl	8000618 <__aeabi_dmul>
 80152b2:	a357      	add	r3, pc, #348	@ (adr r3, 8015410 <__ieee754_pow+0xa60>)
 80152b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152b8:	f7ea fff8 	bl	80002ac <__adddf3>
 80152bc:	4622      	mov	r2, r4
 80152be:	462b      	mov	r3, r5
 80152c0:	f7eb f9aa 	bl	8000618 <__aeabi_dmul>
 80152c4:	4602      	mov	r2, r0
 80152c6:	460b      	mov	r3, r1
 80152c8:	4640      	mov	r0, r8
 80152ca:	4649      	mov	r1, r9
 80152cc:	f7ea ffec 	bl	80002a8 <__aeabi_dsub>
 80152d0:	4604      	mov	r4, r0
 80152d2:	460d      	mov	r5, r1
 80152d4:	4602      	mov	r2, r0
 80152d6:	460b      	mov	r3, r1
 80152d8:	4640      	mov	r0, r8
 80152da:	4649      	mov	r1, r9
 80152dc:	f7eb f99c 	bl	8000618 <__aeabi_dmul>
 80152e0:	2200      	movs	r2, #0
 80152e2:	e9cd 0100 	strd	r0, r1, [sp]
 80152e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80152ea:	4620      	mov	r0, r4
 80152ec:	4629      	mov	r1, r5
 80152ee:	f7ea ffdb 	bl	80002a8 <__aeabi_dsub>
 80152f2:	4602      	mov	r2, r0
 80152f4:	460b      	mov	r3, r1
 80152f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152fa:	f7eb fab7 	bl	800086c <__aeabi_ddiv>
 80152fe:	4632      	mov	r2, r6
 8015300:	4604      	mov	r4, r0
 8015302:	460d      	mov	r5, r1
 8015304:	463b      	mov	r3, r7
 8015306:	4640      	mov	r0, r8
 8015308:	4649      	mov	r1, r9
 801530a:	f7eb f985 	bl	8000618 <__aeabi_dmul>
 801530e:	4632      	mov	r2, r6
 8015310:	463b      	mov	r3, r7
 8015312:	f7ea ffcb 	bl	80002ac <__adddf3>
 8015316:	4602      	mov	r2, r0
 8015318:	460b      	mov	r3, r1
 801531a:	4620      	mov	r0, r4
 801531c:	4629      	mov	r1, r5
 801531e:	f7ea ffc3 	bl	80002a8 <__aeabi_dsub>
 8015322:	4642      	mov	r2, r8
 8015324:	464b      	mov	r3, r9
 8015326:	f7ea ffbf 	bl	80002a8 <__aeabi_dsub>
 801532a:	460b      	mov	r3, r1
 801532c:	4602      	mov	r2, r0
 801532e:	493b      	ldr	r1, [pc, #236]	@ (801541c <__ieee754_pow+0xa6c>)
 8015330:	2000      	movs	r0, #0
 8015332:	f7ea ffb9 	bl	80002a8 <__aeabi_dsub>
 8015336:	ec41 0b10 	vmov	d0, r0, r1
 801533a:	ee10 3a90 	vmov	r3, s1
 801533e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8015342:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015346:	da30      	bge.n	80153aa <__ieee754_pow+0x9fa>
 8015348:	4650      	mov	r0, sl
 801534a:	f000 f87d 	bl	8015448 <scalbn>
 801534e:	ec51 0b10 	vmov	r0, r1, d0
 8015352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015356:	f7ff bbd2 	b.w	8014afe <__ieee754_pow+0x14e>
 801535a:	4c31      	ldr	r4, [pc, #196]	@ (8015420 <__ieee754_pow+0xa70>)
 801535c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015360:	42a3      	cmp	r3, r4
 8015362:	d91a      	bls.n	801539a <__ieee754_pow+0x9ea>
 8015364:	4b2f      	ldr	r3, [pc, #188]	@ (8015424 <__ieee754_pow+0xa74>)
 8015366:	440b      	add	r3, r1
 8015368:	4303      	orrs	r3, r0
 801536a:	d009      	beq.n	8015380 <__ieee754_pow+0x9d0>
 801536c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015370:	2200      	movs	r2, #0
 8015372:	2300      	movs	r3, #0
 8015374:	f7eb fbc2 	bl	8000afc <__aeabi_dcmplt>
 8015378:	3800      	subs	r0, #0
 801537a:	bf18      	it	ne
 801537c:	2001      	movne	r0, #1
 801537e:	e42b      	b.n	8014bd8 <__ieee754_pow+0x228>
 8015380:	4642      	mov	r2, r8
 8015382:	464b      	mov	r3, r9
 8015384:	f7ea ff90 	bl	80002a8 <__aeabi_dsub>
 8015388:	4632      	mov	r2, r6
 801538a:	463b      	mov	r3, r7
 801538c:	f7eb fbca 	bl	8000b24 <__aeabi_dcmpge>
 8015390:	2800      	cmp	r0, #0
 8015392:	d1eb      	bne.n	801536c <__ieee754_pow+0x9bc>
 8015394:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8015434 <__ieee754_pow+0xa84>
 8015398:	e6f7      	b.n	801518a <__ieee754_pow+0x7da>
 801539a:	469a      	mov	sl, r3
 801539c:	4b22      	ldr	r3, [pc, #136]	@ (8015428 <__ieee754_pow+0xa78>)
 801539e:	459a      	cmp	sl, r3
 80153a0:	f63f aef3 	bhi.w	801518a <__ieee754_pow+0x7da>
 80153a4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80153a8:	e715      	b.n	80151d6 <__ieee754_pow+0x826>
 80153aa:	ec51 0b10 	vmov	r0, r1, d0
 80153ae:	4619      	mov	r1, r3
 80153b0:	e7cf      	b.n	8015352 <__ieee754_pow+0x9a2>
 80153b2:	491a      	ldr	r1, [pc, #104]	@ (801541c <__ieee754_pow+0xa6c>)
 80153b4:	2000      	movs	r0, #0
 80153b6:	f7ff bb18 	b.w	80149ea <__ieee754_pow+0x3a>
 80153ba:	2000      	movs	r0, #0
 80153bc:	2100      	movs	r1, #0
 80153be:	f7ff bb14 	b.w	80149ea <__ieee754_pow+0x3a>
 80153c2:	4630      	mov	r0, r6
 80153c4:	4639      	mov	r1, r7
 80153c6:	f7ff bb10 	b.w	80149ea <__ieee754_pow+0x3a>
 80153ca:	460c      	mov	r4, r1
 80153cc:	f7ff bb5e 	b.w	8014a8c <__ieee754_pow+0xdc>
 80153d0:	2400      	movs	r4, #0
 80153d2:	f7ff bb49 	b.w	8014a68 <__ieee754_pow+0xb8>
 80153d6:	bf00      	nop
 80153d8:	00000000 	.word	0x00000000
 80153dc:	3fe62e43 	.word	0x3fe62e43
 80153e0:	fefa39ef 	.word	0xfefa39ef
 80153e4:	3fe62e42 	.word	0x3fe62e42
 80153e8:	0ca86c39 	.word	0x0ca86c39
 80153ec:	be205c61 	.word	0xbe205c61
 80153f0:	72bea4d0 	.word	0x72bea4d0
 80153f4:	3e663769 	.word	0x3e663769
 80153f8:	c5d26bf1 	.word	0xc5d26bf1
 80153fc:	3ebbbd41 	.word	0x3ebbbd41
 8015400:	af25de2c 	.word	0xaf25de2c
 8015404:	3f11566a 	.word	0x3f11566a
 8015408:	16bebd93 	.word	0x16bebd93
 801540c:	3f66c16c 	.word	0x3f66c16c
 8015410:	5555553e 	.word	0x5555553e
 8015414:	3fc55555 	.word	0x3fc55555
 8015418:	fff00000 	.word	0xfff00000
 801541c:	3ff00000 	.word	0x3ff00000
 8015420:	4090cbff 	.word	0x4090cbff
 8015424:	3f6f3400 	.word	0x3f6f3400
 8015428:	3fe00000 	.word	0x3fe00000
 801542c:	652b82fe 	.word	0x652b82fe
 8015430:	3c971547 	.word	0x3c971547
 8015434:	4090cc00 	.word	0x4090cc00

08015438 <fabs>:
 8015438:	ec51 0b10 	vmov	r0, r1, d0
 801543c:	4602      	mov	r2, r0
 801543e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015442:	ec43 2b10 	vmov	d0, r2, r3
 8015446:	4770      	bx	lr

08015448 <scalbn>:
 8015448:	b570      	push	{r4, r5, r6, lr}
 801544a:	ec55 4b10 	vmov	r4, r5, d0
 801544e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8015452:	4606      	mov	r6, r0
 8015454:	462b      	mov	r3, r5
 8015456:	b991      	cbnz	r1, 801547e <scalbn+0x36>
 8015458:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801545c:	4323      	orrs	r3, r4
 801545e:	d03d      	beq.n	80154dc <scalbn+0x94>
 8015460:	4b35      	ldr	r3, [pc, #212]	@ (8015538 <scalbn+0xf0>)
 8015462:	4620      	mov	r0, r4
 8015464:	4629      	mov	r1, r5
 8015466:	2200      	movs	r2, #0
 8015468:	f7eb f8d6 	bl	8000618 <__aeabi_dmul>
 801546c:	4b33      	ldr	r3, [pc, #204]	@ (801553c <scalbn+0xf4>)
 801546e:	429e      	cmp	r6, r3
 8015470:	4604      	mov	r4, r0
 8015472:	460d      	mov	r5, r1
 8015474:	da0f      	bge.n	8015496 <scalbn+0x4e>
 8015476:	a328      	add	r3, pc, #160	@ (adr r3, 8015518 <scalbn+0xd0>)
 8015478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801547c:	e01e      	b.n	80154bc <scalbn+0x74>
 801547e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8015482:	4291      	cmp	r1, r2
 8015484:	d10b      	bne.n	801549e <scalbn+0x56>
 8015486:	4622      	mov	r2, r4
 8015488:	4620      	mov	r0, r4
 801548a:	4629      	mov	r1, r5
 801548c:	f7ea ff0e 	bl	80002ac <__adddf3>
 8015490:	4604      	mov	r4, r0
 8015492:	460d      	mov	r5, r1
 8015494:	e022      	b.n	80154dc <scalbn+0x94>
 8015496:	460b      	mov	r3, r1
 8015498:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801549c:	3936      	subs	r1, #54	@ 0x36
 801549e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80154a2:	4296      	cmp	r6, r2
 80154a4:	dd0d      	ble.n	80154c2 <scalbn+0x7a>
 80154a6:	2d00      	cmp	r5, #0
 80154a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8015520 <scalbn+0xd8>)
 80154aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154ae:	da02      	bge.n	80154b6 <scalbn+0x6e>
 80154b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8015528 <scalbn+0xe0>)
 80154b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154b6:	a31a      	add	r3, pc, #104	@ (adr r3, 8015520 <scalbn+0xd8>)
 80154b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154bc:	f7eb f8ac 	bl	8000618 <__aeabi_dmul>
 80154c0:	e7e6      	b.n	8015490 <scalbn+0x48>
 80154c2:	1872      	adds	r2, r6, r1
 80154c4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80154c8:	428a      	cmp	r2, r1
 80154ca:	dcec      	bgt.n	80154a6 <scalbn+0x5e>
 80154cc:	2a00      	cmp	r2, #0
 80154ce:	dd08      	ble.n	80154e2 <scalbn+0x9a>
 80154d0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80154d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80154d8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80154dc:	ec45 4b10 	vmov	d0, r4, r5
 80154e0:	bd70      	pop	{r4, r5, r6, pc}
 80154e2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80154e6:	da08      	bge.n	80154fa <scalbn+0xb2>
 80154e8:	2d00      	cmp	r5, #0
 80154ea:	a10b      	add	r1, pc, #44	@ (adr r1, 8015518 <scalbn+0xd0>)
 80154ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154f0:	dac1      	bge.n	8015476 <scalbn+0x2e>
 80154f2:	a10f      	add	r1, pc, #60	@ (adr r1, 8015530 <scalbn+0xe8>)
 80154f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154f8:	e7bd      	b.n	8015476 <scalbn+0x2e>
 80154fa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80154fe:	3236      	adds	r2, #54	@ 0x36
 8015500:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015504:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015508:	4620      	mov	r0, r4
 801550a:	4b0d      	ldr	r3, [pc, #52]	@ (8015540 <scalbn+0xf8>)
 801550c:	4629      	mov	r1, r5
 801550e:	2200      	movs	r2, #0
 8015510:	e7d4      	b.n	80154bc <scalbn+0x74>
 8015512:	bf00      	nop
 8015514:	f3af 8000 	nop.w
 8015518:	c2f8f359 	.word	0xc2f8f359
 801551c:	01a56e1f 	.word	0x01a56e1f
 8015520:	8800759c 	.word	0x8800759c
 8015524:	7e37e43c 	.word	0x7e37e43c
 8015528:	8800759c 	.word	0x8800759c
 801552c:	fe37e43c 	.word	0xfe37e43c
 8015530:	c2f8f359 	.word	0xc2f8f359
 8015534:	81a56e1f 	.word	0x81a56e1f
 8015538:	43500000 	.word	0x43500000
 801553c:	ffff3cb0 	.word	0xffff3cb0
 8015540:	3c900000 	.word	0x3c900000

08015544 <with_errno>:
 8015544:	b510      	push	{r4, lr}
 8015546:	ed2d 8b02 	vpush	{d8}
 801554a:	eeb0 8a40 	vmov.f32	s16, s0
 801554e:	eef0 8a60 	vmov.f32	s17, s1
 8015552:	4604      	mov	r4, r0
 8015554:	f7fb f9fe 	bl	8010954 <__errno>
 8015558:	eeb0 0a48 	vmov.f32	s0, s16
 801555c:	eef0 0a68 	vmov.f32	s1, s17
 8015560:	ecbd 8b02 	vpop	{d8}
 8015564:	6004      	str	r4, [r0, #0]
 8015566:	bd10      	pop	{r4, pc}

08015568 <xflow>:
 8015568:	4603      	mov	r3, r0
 801556a:	b507      	push	{r0, r1, r2, lr}
 801556c:	ec51 0b10 	vmov	r0, r1, d0
 8015570:	b183      	cbz	r3, 8015594 <xflow+0x2c>
 8015572:	4602      	mov	r2, r0
 8015574:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015578:	e9cd 2300 	strd	r2, r3, [sp]
 801557c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015580:	f7eb f84a 	bl	8000618 <__aeabi_dmul>
 8015584:	ec41 0b10 	vmov	d0, r0, r1
 8015588:	2022      	movs	r0, #34	@ 0x22
 801558a:	b003      	add	sp, #12
 801558c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015590:	f7ff bfd8 	b.w	8015544 <with_errno>
 8015594:	4602      	mov	r2, r0
 8015596:	460b      	mov	r3, r1
 8015598:	e7ee      	b.n	8015578 <xflow+0x10>
 801559a:	0000      	movs	r0, r0
 801559c:	0000      	movs	r0, r0
	...

080155a0 <__math_uflow>:
 80155a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80155a8 <__math_uflow+0x8>
 80155a4:	f7ff bfe0 	b.w	8015568 <xflow>
 80155a8:	00000000 	.word	0x00000000
 80155ac:	10000000 	.word	0x10000000

080155b0 <__math_oflow>:
 80155b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80155b8 <__math_oflow+0x8>
 80155b4:	f7ff bfd8 	b.w	8015568 <xflow>
 80155b8:	00000000 	.word	0x00000000
 80155bc:	70000000 	.word	0x70000000

080155c0 <_init>:
 80155c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155c2:	bf00      	nop
 80155c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155c6:	bc08      	pop	{r3}
 80155c8:	469e      	mov	lr, r3
 80155ca:	4770      	bx	lr

080155cc <_fini>:
 80155cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155ce:	bf00      	nop
 80155d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80155d2:	bc08      	pop	{r3}
 80155d4:	469e      	mov	lr, r3
 80155d6:	4770      	bx	lr
