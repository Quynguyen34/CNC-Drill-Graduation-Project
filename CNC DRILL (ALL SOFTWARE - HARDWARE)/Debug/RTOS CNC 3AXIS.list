
RTOS CNC 3AXIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ae8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  08014c78  08014c78  00015c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015578  08015578  00017290  2**0
                  CONTENTS
  4 .ARM          00000008  08015578  08015578  00016578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015580  08015580  00017290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015580  08015580  00016580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015584  08015584  00016584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08015588  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00017290  2**0
                  CONTENTS
 10 .bss          000053e0  20000290  20000290  00017290  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005670  20005670  00017290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00017290  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023e76  00000000  00000000  000172c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005405  00000000  00000000  0003b136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e30  00000000  00000000  00040540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001771  00000000  00000000  00042370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028622  00000000  00000000  00043ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000260ad  00000000  00000000  0006c103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e86b9  00000000  00000000  000921b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017a869  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000990c  00000000  00000000  0017a8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  001841b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000290 	.word	0x20000290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014c60 	.word	0x08014c60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000294 	.word	0x20000294
 80001cc:	08014c60 	.word	0x08014c60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <Accel_Stepper_SetPin>:
 * dir_port : GPIO port of direction pin
 * dir_pin : gpio pin number of direction pin
 */
void Accel_Stepper_SetPin(Acceleration_t* Accel_stepper, GPIO_TypeDef* step_port,
		uint16_t step_pin, GPIO_TypeDef* dir_port, uint16_t dir_pin)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	80fb      	strh	r3, [r7, #6]
	Accel_stepper->Step_Port = step_port;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	651a      	str	r2, [r3, #80]	@ 0x50
	Accel_stepper->Step_Pin = step_pin;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	88fa      	ldrh	r2, [r7, #6]
 800101e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	Accel_stepper->Dir_Pin = dir_pin;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8b3a      	ldrh	r2, [r7, #24]
 8001026:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	Accel_stepper->Dir_Port = dir_port;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <Accel_Stepper_SetTimer>:
/*
 * Set Timer for each motor
 * timer : pointer to timer typedef(Which timer is use for control speed)
 */
void Accel_Stepper_SetTimer(Acceleration_t *Accel_stepper, TIM_HandleTypeDef* timer){
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	Accel_stepper->htim = timer;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <Accel_Stepper_TIMIT_Handler>:
/*
 * Accel_Stepper_TIMIT_Handler
 * stepper : Num of which stepper use found @ Stepper_t
 */
void Accel_Stepper_TIMIT_Handler(Acceleration_t *Accel_stepper){
 8001058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800105c:	b0a2      	sub	sp, #136	@ 0x88
 800105e:	af00      	add	r7, sp, #0
 8001060:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (state.stop_press) {
 8001064:	4bb4      	ldr	r3, [pc, #720]	@ (8001338 <Accel_Stepper_TIMIT_Handler+0x2e0>)
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <Accel_Stepper_TIMIT_Handler+0x1e>
        Accel_stepper->run_state = STOP;
 800106e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001072:	2300      	movs	r3, #0
 8001074:	7053      	strb	r3, [r2, #1]
    }

	__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, Accel_stepper->step_delay);
 8001076:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800107a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800107e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4603      	mov	r3, r0
 8001088:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800108a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800108e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001092:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001096:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001098:	4603      	mov	r3, r0
 800109a:	60d3      	str	r3, [r2, #12]

	switch(Accel_stepper->run_state) {
 800109c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010a0:	785b      	ldrb	r3, [r3, #1]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	f200 81eb 	bhi.w	800147e <Accel_Stepper_TIMIT_Handler+0x426>
 80010a8:	a201      	add	r2, pc, #4	@ (adr r2, 80010b0 <Accel_Stepper_TIMIT_Handler+0x58>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010c1 	.word	0x080010c1
 80010b4:	080010f7 	.word	0x080010f7
 80010b8:	0800133d 	.word	0x0800133d
 80010bc:	080012af 	.word	0x080012af
		case STOP:
			Accel_stepper->step_count = 0;
 80010c0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
			Accel_stepper->rest = 0;
 80010d0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		     // Stop Timer/Counter 1.
		   	HAL_TIM_Base_Stop_IT(Accel_stepper->htim);
 80010e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010e6:	4618      	mov	r0, r3
 80010e8:	f008 fc48 	bl	800997c <HAL_TIM_Base_Stop_IT>
		   	Accel_stepper->run_status = 0;
 80010ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
		   	break;
 80010f4:	e1c3      	b.n	800147e <Accel_Stepper_TIMIT_Handler+0x426>
	    case ACCEL:
	    	Accel_stepper->run_status = 1;
 80010f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80010fa:	2301      	movs	r3, #1
 80010fc:	7013      	strb	r3, [r2, #0]
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 80010fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001102:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001104:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001108:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800110c:	4619      	mov	r1, r3
 800110e:	4610      	mov	r0, r2
 8001110:	f005 fd09 	bl	8006b26 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 8001114:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001118:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800111c:	f112 0a01 	adds.w	sl, r2, #1
 8001120:	f143 0b00 	adc.w	fp, r3, #0
 8001124:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001128:	e9c3 ab0c 	strd	sl, fp, [r3, #48]	@ 0x30
			Accel_stepper->accel_count++;
 800112c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001130:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001134:	1c51      	adds	r1, r2, #1
 8001136:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001138:	f143 0300 	adc.w	r3, r3, #0
 800113c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800113e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001142:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8001146:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
			Accel_stepper->new_step_delay = Accel_stepper->step_delay - (((2 * (long)Accel_stepper->step_delay) + Accel_stepper->rest)/(4 * Accel_stepper->accel_count + 1));
 800114a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800114e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001152:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001156:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	17da      	asrs	r2, r3, #31
 8001160:	673b      	str	r3, [r7, #112]	@ 0x70
 8001162:	677a      	str	r2, [r7, #116]	@ 0x74
 8001164:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001168:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800116c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001170:	4641      	mov	r1, r8
 8001172:	1889      	adds	r1, r1, r2
 8001174:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001176:	4649      	mov	r1, r9
 8001178:	eb43 0101 	adc.w	r1, r3, r1
 800117c:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800117e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001182:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	f04f 0100 	mov.w	r1, #0
 800118e:	0099      	lsls	r1, r3, #2
 8001190:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001194:	0090      	lsls	r0, r2, #2
 8001196:	1c43      	adds	r3, r0, #1
 8001198:	663b      	str	r3, [r7, #96]	@ 0x60
 800119a:	f141 0300 	adc.w	r3, r1, #0
 800119e:	667b      	str	r3, [r7, #100]	@ 0x64
 80011a0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80011a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80011a8:	f7ff fd7e 	bl	8000ca8 <__aeabi_uldivmod>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	1aa1      	subs	r1, r4, r2
 80011b2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80011b4:	eb65 0303 	sbc.w	r3, r5, r3
 80011b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80011c2:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
			Accel_stepper->rest = ((2 * (long)Accel_stepper->step_delay)+Accel_stepper->rest)%(4 * Accel_stepper->accel_count + 1);
 80011c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	17da      	asrs	r2, r3, #31
 80011d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80011d6:	657a      	str	r2, [r7, #84]	@ 0x54
 80011d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80011e0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80011e4:	4621      	mov	r1, r4
 80011e6:	1889      	adds	r1, r1, r2
 80011e8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80011ea:	4629      	mov	r1, r5
 80011ec:	eb43 0101 	adc.w	r1, r3, r1
 80011f0:	64f9      	str	r1, [r7, #76]	@ 0x4c
 80011f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011f6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	008b      	lsls	r3, r1, #2
 8001204:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001208:	0082      	lsls	r2, r0, #2
 800120a:	1c51      	adds	r1, r2, #1
 800120c:	6439      	str	r1, [r7, #64]	@ 0x40
 800120e:	f143 0300 	adc.w	r3, r3, #0
 8001212:	647b      	str	r3, [r7, #68]	@ 0x44
 8001214:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001218:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800121c:	f7ff fd44 	bl	8000ca8 <__aeabi_uldivmod>
 8001220:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001224:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	      // Chech if we should start decelration.
			if(Accel_stepper->step_count >= Accel_stepper->decel_start) {
 8001228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800122c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001234:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001238:	4290      	cmp	r0, r2
 800123a:	eb71 0303 	sbcs.w	r3, r1, r3
 800123e:	d30c      	bcc.n	800125a <Accel_Stepper_TIMIT_Handler+0x202>
				Accel_stepper->accel_count = Accel_stepper->decel_val;
 8001240:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001244:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001248:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800124c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
				Accel_stepper->run_state = DECEL;
 8001250:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001254:	2202      	movs	r2, #2
 8001256:	705a      	strb	r2, [r3, #1]
				Accel_stepper->last_accel_delay = Accel_stepper->new_step_delay;
				Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
				Accel_stepper->rest = 0;
				Accel_stepper->run_state = RUN;
			}
			break;
 8001258:	e10c      	b.n	8001474 <Accel_Stepper_TIMIT_Handler+0x41c>
			else if(Accel_stepper->new_step_delay <= Accel_stepper->min_step_delay) {
 800125a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800125e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001262:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001266:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800126a:	4290      	cmp	r0, r2
 800126c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001270:	f0c0 8100 	bcc.w	8001474 <Accel_Stepper_TIMIT_Handler+0x41c>
				Accel_stepper->last_accel_delay = Accel_stepper->new_step_delay;
 8001274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001278:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800127c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001280:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
				Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
 8001284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001288:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800128c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001290:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
				Accel_stepper->rest = 0;
 8001294:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				Accel_stepper->run_state = RUN;
 80012a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012a8:	2203      	movs	r2, #3
 80012aa:	705a      	strb	r2, [r3, #1]
			break;
 80012ac:	e0e2      	b.n	8001474 <Accel_Stepper_TIMIT_Handler+0x41c>

	    case RUN:
	    	Accel_stepper->run_status = 1;
 80012ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 80012b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80012c4:	4619      	mov	r1, r3
 80012c6:	4610      	mov	r0, r2
 80012c8:	f005 fc2d 	bl	8006b26 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 80012cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80012d4:	1c54      	adds	r4, r2, #1
 80012d6:	f143 0500 	adc.w	r5, r3, #0
 80012da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012de:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
	    	Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
 80012e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012ea:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80012ee:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
//	         Check if we should start deceleration.
			 if(Accel_stepper->step_count >= Accel_stepper->decel_start) {
 80012f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012f6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80012fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001302:	4290      	cmp	r0, r2
 8001304:	eb71 0303 	sbcs.w	r3, r1, r3
 8001308:	f0c0 80b6 	bcc.w	8001478 <Accel_Stepper_TIMIT_Handler+0x420>
				 Accel_stepper->accel_count = Accel_stepper->decel_val;
 800130c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001310:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001314:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001318:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//	         Start deceleration with same delay as accel ended with.
				 Accel_stepper->new_step_delay = Accel_stepper->last_accel_delay;
 800131c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001320:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001324:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001328:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
				 Accel_stepper->run_state = DECEL;
 800132c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001330:	2202      	movs	r2, #2
 8001332:	705a      	strb	r2, [r3, #1]
			 }
			 break;
 8001334:	e0a0      	b.n	8001478 <Accel_Stepper_TIMIT_Handler+0x420>
 8001336:	bf00      	nop
 8001338:	200009c8 	.word	0x200009c8

	    case DECEL:
	    	Accel_stepper->run_status = 1;
 800133c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001340:	2301      	movs	r3, #1
 8001342:	7013      	strb	r3, [r2, #0]
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 8001344:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800134a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800134e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8001352:	4619      	mov	r1, r3
 8001354:	4610      	mov	r0, r2
 8001356:	f005 fbe6 	bl	8006b26 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 800135a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800135e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001362:	f112 0801 	adds.w	r8, r2, #1
 8001366:	f143 0900 	adc.w	r9, r3, #0
 800136a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800136e:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
			 Accel_stepper->accel_count++;
 8001372:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001376:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800137a:	1c51      	adds	r1, r2, #1
 800137c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800137e:	f143 0300 	adc.w	r3, r3, #0
 8001382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001384:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001388:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800138c:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
			 Accel_stepper->new_step_delay = Accel_stepper->step_delay + (((2 * (long)Accel_stepper->step_delay) + Accel_stepper->rest)/(4 * abs(Accel_stepper->accel_count) + 1));
 8001390:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001394:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001398:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800139c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	17da      	asrs	r2, r3, #31
 80013a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80013a8:	637a      	str	r2, [r7, #52]	@ 0x34
 80013aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80013b2:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 80013b6:	4641      	mov	r1, r8
 80013b8:	1889      	adds	r1, r1, r2
 80013ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80013bc:	4649      	mov	r1, r9
 80013be:	eb43 0101 	adc.w	r1, r3, r1
 80013c2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80013c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80013cc:	4613      	mov	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bfb8      	it	lt
 80013d2:	425b      	neglt	r3, r3
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	3301      	adds	r3, #1
 80013d8:	17da      	asrs	r2, r3, #31
 80013da:	623b      	str	r3, [r7, #32]
 80013dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80013de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80013e6:	f7ff fc5f 	bl	8000ca8 <__aeabi_uldivmod>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	18a1      	adds	r1, r4, r2
 80013f0:	61b9      	str	r1, [r7, #24]
 80013f2:	eb45 0303 	adc.w	r3, r5, r3
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001400:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
			 Accel_stepper->rest = ((2 * (long)Accel_stepper->step_delay)+Accel_stepper->rest)%(4 * (long) abs(Accel_stepper->accel_count) + 1);
 8001404:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001408:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	17da      	asrs	r2, r3, #31
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	617a      	str	r2, [r7, #20]
 8001416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800141a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800141e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001422:	4621      	mov	r1, r4
 8001424:	1889      	adds	r1, r1, r2
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	4629      	mov	r1, r5
 800142a:	eb43 0101 	adc.w	r1, r3, r1
 800142e:	60f9      	str	r1, [r7, #12]
 8001430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001434:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001438:	4613      	mov	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	bfb8      	it	lt
 800143e:	425b      	neglt	r3, r3
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	3301      	adds	r3, #1
 8001444:	17da      	asrs	r2, r3, #31
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800144e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001452:	f7ff fc29 	bl	8000ca8 <__aeabi_uldivmod>
 8001456:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800145a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
//	         Check if we at last step
			 if(Accel_stepper->accel_count >= 0){
 800145e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001462:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001466:	2b00      	cmp	r3, #0
 8001468:	db08      	blt.n	800147c <Accel_Stepper_TIMIT_Handler+0x424>
				 Accel_stepper->run_state = STOP;
 800146a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800146e:	2200      	movs	r2, #0
 8001470:	705a      	strb	r2, [r3, #1]
			 }
			 break;
 8001472:	e003      	b.n	800147c <Accel_Stepper_TIMIT_Handler+0x424>
			break;
 8001474:	bf00      	nop
 8001476:	e002      	b.n	800147e <Accel_Stepper_TIMIT_Handler+0x426>
			 break;
 8001478:	bf00      	nop
 800147a:	e000      	b.n	800147e <Accel_Stepper_TIMIT_Handler+0x426>
			 break;
 800147c:	bf00      	nop
	  }
	 Accel_stepper->step_delay = Accel_stepper->new_step_delay;
 800147e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001482:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001486:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800148a:	e9c1 2302 	strd	r2, r3, [r1, #8]
//		  return rc;
}
 800148e:	bf00      	nop
 8001490:	3788      	adds	r7, #136	@ 0x88
 8001492:	46bd      	mov	sp, r7
 8001494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001498 <Accel_Stepper_Move>:
 * accel : acceleration
 * decel : deceleration
 * rpm : speed at run state
 */
void Accel_Stepper_Move(Acceleration_t *Accel_stepper, signed long long int step, unsigned long long int accel, unsigned long long int decel, unsigned long long int rpm)//acc*100
{
 8001498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800149c:	b0ab      	sub	sp, #172	@ 0xac
 800149e:	af00      	add	r7, sp, #0
 80014a0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80014a4:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	unsigned long long int max_step_lim; //! Number of steps before we hit max speed.
	unsigned long long int accel_lim;//! Number of steps before we must start deceleration (if accel does not hit max speed).
	unsigned long long int speed = 2 * 3.14159 * rpm/60;
 80014a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80014ac:	f7ff f87e 	bl	80005ac <__aeabi_ul2d>
 80014b0:	a3e8      	add	r3, pc, #928	@ (adr r3, 8001854 <Accel_Stepper_Move+0x3bc>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f8af 	bl	8000618 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4be2      	ldr	r3, [pc, #904]	@ (8001850 <Accel_Stepper_Move+0x3b8>)
 80014c8:	f7ff f9d0 	bl	800086c <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fc18 	bl	8000d08 <__aeabi_d2ulz>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	Accel_stepper->step_count = 0;
 80014e0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	if(step>0){
 80014f0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80014f4:	2a01      	cmp	r2, #1
 80014f6:	f173 0300 	sbcs.w	r3, r3, #0
 80014fa:	db14      	blt.n	8001526 <Accel_Stepper_Move+0x8e>
		HAL_GPIO_WritePin(Accel_stepper->Dir_Port, Accel_stepper->Dir_Pin, 1);
 80014fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001500:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001506:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800150a:	2201      	movs	r2, #1
 800150c:	4619      	mov	r1, r3
 800150e:	f005 faf1 	bl	8006af4 <HAL_GPIO_WritePin>
		step = 2*step;
 8001512:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001516:	1891      	adds	r1, r2, r2
 8001518:	62b9      	str	r1, [r7, #40]	@ 0x28
 800151a:	415b      	adcs	r3, r3
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800151e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001522:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
//    srd.dir = CW;
	}
//   Set direction from sign on step value.
	if(step < 0){
 8001526:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800152a:	2b00      	cmp	r3, #0
 800152c:	da1c      	bge.n	8001568 <Accel_Stepper_Move+0xd0>
//    srd.dir = CCW;
		HAL_GPIO_WritePin(Accel_stepper->Dir_Port, Accel_stepper->Dir_Pin, 0);
 800152e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001532:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001538:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800153c:	2200      	movs	r2, #0
 800153e:	4619      	mov	r1, r3
 8001540:	f005 fad8 	bl	8006af4 <HAL_GPIO_WritePin>
		step = -2*step;
 8001544:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	1a14      	subs	r4, r2, r0
 8001552:	eb63 0501 	sbc.w	r5, r3, r1
 8001556:	1923      	adds	r3, r4, r4
 8001558:	623b      	str	r3, [r7, #32]
 800155a:	eb45 0305 	adc.w	r3, r5, r5
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001560:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001564:	e9c7 4520 	strd	r4, r5, [r7, #128]	@ 0x80
	}


//  If moving only 1 step.
	if(step == 1){
 8001568:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800156c:	1e51      	subs	r1, r2, #1
 800156e:	430b      	orrs	r3, r1
 8001570:	d11a      	bne.n	80015a8 <Accel_Stepper_Move+0x110>

//      Move one step...
		Accel_stepper->accel_count = -1;
 8001572:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001576:	f04f 32ff 	mov.w	r2, #4294967295
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//      ...in DECEL state.
		Accel_stepper->run_state = DECEL;
 8001582:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001586:	2202      	movs	r2, #2
 8001588:	705a      	strb	r2, [r3, #1]
//      Just a short delay so main() can act on 'running'.
		Accel_stepper->step_delay = 1000;
 800158a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800158e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	e9c1 2302 	strd	r2, r3, [r1, #8]
//      status.running = TRUE;
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
 800159a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800159e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a0:	4618      	mov	r0, r3
 80015a2:	f008 f97b 	bl	800989c <HAL_TIM_Base_Start_IT>
		Accel_stepper->accel_count = 0;
//    status.running = TRUE;
		__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, 1000);
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
	}
}
 80015a6:	e1cd      	b.n	8001944 <Accel_Stepper_Move+0x4ac>
	else if(step != 0){
 80015a8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80015ac:	4313      	orrs	r3, r2
 80015ae:	f000 81c9 	beq.w	8001944 <Accel_Stepper_Move+0x4ac>
		Accel_stepper->min_step_delay = ALPHA*TIM_FREQ/speed;
 80015b2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80015b6:	f7fe fff9 	bl	80005ac <__aeabi_ul2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	a19c      	add	r1, pc, #624	@ (adr r1, 8001830 <Accel_Stepper_Move+0x398>)
 80015c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015c4:	f7ff f952 	bl	800086c <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fb82 	bl	8000cd8 <__aeabi_d2lz>
 80015d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015d8:	e9c3 0108 	strd	r0, r1, [r3, #32]
		Accel_stepper->step_delay = (TIM_FREQ_SCALE * sqrt(A_SQ / accel))/10000;;
 80015dc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80015e0:	a195      	add	r1, pc, #596	@ (adr r1, 8001838 <Accel_Stepper_Move+0x3a0>)
 80015e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015e6:	f7ff fb5f 	bl	8000ca8 <__aeabi_uldivmod>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7fe ffdb 	bl	80005ac <__aeabi_ul2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	ec43 2b10 	vmov	d0, r2, r3
 80015fe:	f012 fc15 	bl	8013e2c <sqrt>
 8001602:	ec51 0b10 	vmov	r0, r1, d0
 8001606:	a38e      	add	r3, pc, #568	@ (adr r3, 8001840 <Accel_Stepper_Move+0x3a8>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7ff f804 	bl	8000618 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	a38b      	add	r3, pc, #556	@ (adr r3, 8001848 <Accel_Stepper_Move+0x3b0>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7ff f925 	bl	800086c <__aeabi_ddiv>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fb6d 	bl	8000d08 <__aeabi_d2ulz>
 800162e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001632:	e9c3 0102 	strd	r0, r1, [r3, #8]
		max_step_lim = (long)speed*speed*10000/(long)(((long)A_x20000*accel)/100);
 8001636:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800163a:	17da      	asrs	r2, r3, #31
 800163c:	673b      	str	r3, [r7, #112]	@ 0x70
 800163e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001640:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001644:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001648:	462a      	mov	r2, r5
 800164a:	fb02 f203 	mul.w	r2, r2, r3
 800164e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001652:	4621      	mov	r1, r4
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	441a      	add	r2, r3
 800165a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800165e:	4621      	mov	r1, r4
 8001660:	fba3 ab01 	umull	sl, fp, r3, r1
 8001664:	eb02 030b 	add.w	r3, r2, fp
 8001668:	469b      	mov	fp, r3
 800166a:	4652      	mov	r2, sl
 800166c:	465b      	mov	r3, fp
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	0099      	lsls	r1, r3, #2
 8001678:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800167c:	0090      	lsls	r0, r2, #2
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	eb12 080a 	adds.w	r8, r2, sl
 8001686:	eb43 090b 	adc.w	r9, r3, fp
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800169a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800169e:	4690      	mov	r8, r2
 80016a0:	4699      	mov	r9, r3
 80016a2:	ebb8 030a 	subs.w	r3, r8, sl
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	eb69 030b 	sbc.w	r3, r9, fp
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80016ba:	4629      	mov	r1, r5
 80016bc:	010b      	lsls	r3, r1, #4
 80016be:	4621      	mov	r1, r4
 80016c0:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80016c4:	4621      	mov	r1, r4
 80016c6:	010a      	lsls	r2, r1, #4
 80016c8:	4611      	mov	r1, r2
 80016ca:	461a      	mov	r2, r3
 80016cc:	460b      	mov	r3, r1
 80016ce:	eb13 030a 	adds.w	r3, r3, sl
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	4613      	mov	r3, r2
 80016d6:	eb43 030b 	adc.w	r3, r3, fp
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016e8:	4629      	mov	r1, r5
 80016ea:	010b      	lsls	r3, r1, #4
 80016ec:	4621      	mov	r1, r4
 80016ee:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80016f2:	4621      	mov	r1, r4
 80016f4:	010a      	lsls	r2, r1, #4
 80016f6:	4614      	mov	r4, r2
 80016f8:	461d      	mov	r5, r3
 80016fa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	1896      	adds	r6, r2, r2
 8001704:	60be      	str	r6, [r7, #8]
 8001706:	415b      	adcs	r3, r3
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800170e:	1816      	adds	r6, r2, r0
 8001710:	603e      	str	r6, [r7, #0]
 8001712:	414b      	adcs	r3, r1
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001722:	464e      	mov	r6, r9
 8001724:	00f3      	lsls	r3, r6, #3
 8001726:	4646      	mov	r6, r8
 8001728:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 800172c:	4646      	mov	r6, r8
 800172e:	00f2      	lsls	r2, r6, #3
 8001730:	4690      	mov	r8, r2
 8001732:	4699      	mov	r9, r3
 8001734:	4643      	mov	r3, r8
 8001736:	181b      	adds	r3, r3, r0
 8001738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800173a:	464b      	mov	r3, r9
 800173c:	eb41 0303 	adc.w	r3, r1, r3
 8001740:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001742:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800174e:	f7ff faab 	bl	8000ca8 <__aeabi_uldivmod>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4613      	mov	r3, r2
 8001758:	17da      	asrs	r2, r3, #31
 800175a:	663b      	str	r3, [r7, #96]	@ 0x60
 800175c:	667a      	str	r2, [r7, #100]	@ 0x64
 800175e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7ff fa9f 	bl	8000ca8 <__aeabi_uldivmod>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		if(max_step_lim == 0){
 8001772:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001776:	4313      	orrs	r3, r2
 8001778:	d105      	bne.n	8001786 <Accel_Stepper_Move+0x2ee>
			max_step_lim = 1;
 800177a:	f04f 0201 	mov.w	r2, #1
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		accel_lim = ((long)step*decel) / (accel+decel);
 8001786:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800178a:	17da      	asrs	r2, r3, #31
 800178c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800178e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001794:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001798:	462a      	mov	r2, r5
 800179a:	fb02 f203 	mul.w	r2, r2, r3
 800179e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017a2:	4621      	mov	r1, r4
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	441a      	add	r2, r3
 80017aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80017ae:	4621      	mov	r1, r4
 80017b0:	fba3 1301 	umull	r1, r3, r3, r1
 80017b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017b6:	460b      	mov	r3, r1
 80017b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80017ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017bc:	18d3      	adds	r3, r2, r3
 80017be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017c0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80017c4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80017c8:	1884      	adds	r4, r0, r2
 80017ca:	653c      	str	r4, [r7, #80]	@ 0x50
 80017cc:	eb41 0303 	adc.w	r3, r1, r3
 80017d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80017d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80017d6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80017da:	f7ff fa65 	bl	8000ca8 <__aeabi_uldivmod>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		if(accel_lim == 0){
 80017e6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80017ea:	4313      	orrs	r3, r2
 80017ec:	d105      	bne.n	80017fa <Accel_Stepper_Move+0x362>
			accel_lim = 1;
 80017ee:	f04f 0201 	mov.w	r2, #1
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		if(accel_lim <= max_step_lim){
 80017fa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80017fe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001802:	4290      	cmp	r0, r2
 8001804:	eb71 0303 	sbcs.w	r3, r1, r3
 8001808:	d328      	bcc.n	800185c <Accel_Stepper_Move+0x3c4>
			Accel_stepper->decel_val = accel_lim - step;//decel_val: step for decel)
 800180a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800180e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001812:	1a84      	subs	r4, r0, r2
 8001814:	64bc      	str	r4, [r7, #72]	@ 0x48
 8001816:	eb61 0303 	sbc.w	r3, r1, r3
 800181a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800181c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001820:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001824:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001828:	e035      	b.n	8001896 <Accel_Stepper_Move+0x3fe>
 800182a:	bf00      	nop
 800182c:	f3af 8000 	nop.w
 8001830:	43958106 	.word	0x43958106
 8001834:	4093a28b 	.word	0x4093a28b
 8001838:	017f7eb0 	.word	0x017f7eb0
	...
 8001844:	4124a140 	.word	0x4124a140
 8001848:	00000000 	.word	0x00000000
 800184c:	40c38800 	.word	0x40c38800
 8001850:	404e0000 	.word	0x404e0000
 8001854:	f01b866e 	.word	0xf01b866e
 8001858:	401921f9 	.word	0x401921f9
			Accel_stepper->decel_val = -(((long)(max_step_lim*accel))/decel);
 800185c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001860:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	17da      	asrs	r2, r3, #31
 800186a:	643b      	str	r3, [r7, #64]	@ 0x40
 800186c:	647a      	str	r2, [r7, #68]	@ 0x44
 800186e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8001872:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001876:	f7ff fa17 	bl	8000ca8 <__aeabi_uldivmod>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	2100      	movs	r1, #0
 8001880:	4250      	negs	r0, r2
 8001882:	63b8      	str	r0, [r7, #56]	@ 0x38
 8001884:	eb61 0303 	sbc.w	r3, r1, r3
 8001888:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800188a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800188e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001892:	e9c1 2306 	strd	r2, r3, [r1, #24]
		if(Accel_stepper->decel_val == 0){
 8001896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800189a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	d107      	bne.n	80018b2 <Accel_Stepper_Move+0x41a>
			Accel_stepper->decel_val = -1;
 80018a2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018a6:	f04f 32ff 	mov.w	r2, #4294967295
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e9c1 2306 	strd	r2, r3, [r1, #24]
		Accel_stepper->decel_start = step + Accel_stepper->decel_val;
 80018b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018b6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80018ba:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80018be:	1884      	adds	r4, r0, r2
 80018c0:	633c      	str	r4, [r7, #48]	@ 0x30
 80018c2:	eb41 0303 	adc.w	r3, r1, r3
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80018c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80018cc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if(Accel_stepper->step_delay <= Accel_stepper->min_step_delay){
 80018d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018dc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018e0:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 80018e4:	4290      	cmp	r0, r2
 80018e6:	eb71 0303 	sbcs.w	r3, r1, r3
 80018ea:	d30c      	bcc.n	8001906 <Accel_Stepper_Move+0x46e>
			Accel_stepper->step_delay = Accel_stepper->min_step_delay;
 80018ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80018f4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Accel_stepper->run_state = RUN;
 80018fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001900:	2203      	movs	r2, #3
 8001902:	705a      	strb	r2, [r3, #1]
 8001904:	e003      	b.n	800190e <Accel_Stepper_Move+0x476>
			Accel_stepper->run_state = ACCEL;
 8001906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800190a:	2201      	movs	r2, #1
 800190c:	705a      	strb	r2, [r3, #1]
		Accel_stepper->accel_count = 0;
 800190e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, 1000);
 800191e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800192c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001932:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001936:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
 8001938:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800193c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193e:	4618      	mov	r0, r3
 8001940:	f007 ffac 	bl	800989c <HAL_TIM_Base_Start_IT>
}
 8001944:	bf00      	nop
 8001946:	37ac      	adds	r7, #172	@ 0xac
 8001948:	46bd      	mov	sp, r7
 800194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800194e:	bf00      	nop

08001950 <initializeCNC_pos>:
#include "Inverse_cnc.h"

extern Inv_CNC_t CNC;
extern CNC_pos_t CNC_pos;

void initializeCNC_pos(CNC_pos_t *cnc) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	cnc->Lsw1 = 0;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
	cnc->Lsw2 = 0;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	705a      	strb	r2, [r3, #1]
	cnc->Lsw3 = 0;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	709a      	strb	r2, [r3, #2]
	cnc->Lsw4 = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	70da      	strb	r2, [r3, #3]
	cnc->Lsw5 = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	711a      	strb	r2, [r3, #4]
	cnc->Lsw6 = 0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	715a      	strb	r2, [r3, #5]
    cnc->accel1 = 0;
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    cnc->accel2 = 0;
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    cnc->accel3 = 0;
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    cnc->jerk1 = 0;
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    cnc->jerk2 = 0;
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    cnc->jerk3 = 0;
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
    cnc->max_speedXY = 30000;
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	a320      	add	r3, pc, #128	@ (adr r3, 8001a54 <initializeCNC_pos+0x104>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    cnc->max_speedZ = 7000;
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	a31f      	add	r3, pc, #124	@ (adr r3, 8001a5c <initializeCNC_pos+0x10c>)
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    cnc->a_maxX = 10000;
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	a31e      	add	r3, pc, #120	@ (adr r3, 8001a64 <initializeCNC_pos+0x114>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    cnc->j_maxX = 7000;
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	a319      	add	r3, pc, #100	@ (adr r3, 8001a5c <initializeCNC_pos+0x10c>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    cnc->a_maxY = 10000;
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	a318      	add	r3, pc, #96	@ (adr r3, 8001a64 <initializeCNC_pos+0x114>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    cnc->j_maxY = 7000;
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	a313      	add	r3, pc, #76	@ (adr r3, 8001a5c <initializeCNC_pos+0x10c>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    cnc->a_maxZ = 1000;
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <initializeCNC_pos+0x100>)
 8001a20:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    cnc->j_maxZ = 1000;
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <initializeCNC_pos+0x100>)
 8001a2c:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
    cnc->t = 0.25;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8001a36:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    cnc->t1 = 0.5;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001a40:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	408f4000 	.word	0x408f4000
 8001a54:	00000000 	.word	0x00000000
 8001a58:	40dd4c00 	.word	0x40dd4c00
 8001a5c:	00000000 	.word	0x00000000
 8001a60:	40bb5800 	.word	0x40bb5800
 8001a64:	00000000 	.word	0x00000000
 8001a68:	40c38800 	.word	0x40c38800

08001a6c <trans_to_posXY>:

void trans_to_posXY(float x,float y)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a76:	edc7 0a00 	vstr	s1, [r7]
	CNC.set_posX = x - CNC.pos_x;
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7fe fd74 	bl	8000568 <__aeabi_f2d>
 8001a80:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <trans_to_posXY+0x4c>)
 8001a82:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a86:	f7fe fc0f 	bl	80002a8 <__aeabi_dsub>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	490a      	ldr	r1, [pc, #40]	@ (8001ab8 <trans_to_posXY+0x4c>)
 8001a90:	e9c1 2300 	strd	r2, r3, [r1]
	CNC.set_posY = y - CNC.pos_y;
 8001a94:	6838      	ldr	r0, [r7, #0]
 8001a96:	f7fe fd67 	bl	8000568 <__aeabi_f2d>
 8001a9a:	4b07      	ldr	r3, [pc, #28]	@ (8001ab8 <trans_to_posXY+0x4c>)
 8001a9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001aa0:	f7fe fc02 	bl	80002a8 <__aeabi_dsub>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4903      	ldr	r1, [pc, #12]	@ (8001ab8 <trans_to_posXY+0x4c>)
 8001aaa:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200007d8 	.word	0x200007d8

08001abc <trans_to_posZ>:
void trans_to_posZ(float z)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	ed87 0a01 	vstr	s0, [r7, #4]
	CNC.set_posZ = z - CNC.pos_z;
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7fe fd4e 	bl	8000568 <__aeabi_f2d>
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <trans_to_posZ+0x2c>)
 8001ace:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ad2:	f7fe fbe9 	bl	80002a8 <__aeabi_dsub>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4903      	ldr	r1, [pc, #12]	@ (8001ae8 <trans_to_posZ+0x2c>)
 8001adc:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200007d8 	.word	0x200007d8

08001aec <caculate_pos>:

signed long long int caculate_pos(double pos, double pwm)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	ed87 0b02 	vstr	d0, [r7, #8]
 8001af6:	ed87 1b00 	vstr	d1, [r7]
	return pos*pwm;
 8001afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001afe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b02:	f7fe fd89 	bl	8000618 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7ff f8e3 	bl	8000cd8 <__aeabi_d2lz>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
}
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b26:	463b      	mov	r3, r7
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b32:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b34:	4a19      	ldr	r2, [pc, #100]	@ (8001b9c <MX_ADC1_Init+0x7c>)
 8001b36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b38:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b40:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b46:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b52:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b60:	4b0d      	ldr	r3, [pc, #52]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b62:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba0 <MX_ADC1_Init+0x80>)
 8001b64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b66:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b72:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b80:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b82:	f003 ff19 	bl	80059b8 <HAL_ADC_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b8c:	f001 fbd2 	bl	8003334 <Error_Handler>
//  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
//  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//  {
//    Error_Handler();
//  }
}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200003d0 	.word	0x200003d0
 8001b9c:	40012000 	.word	0x40012000
 8001ba0:	0f000001 	.word	0x0f000001

08001ba4 <ADC_Select_CH10>:

void ADC_Select_CH10(void){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
	ADC_ChannelConfTypeDef sConfig = {0};
 8001baa:	463b      	mov	r3, r7
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_10;
 8001bb6:	230a      	movs	r3, #10
 8001bb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4806      	ldr	r0, [pc, #24]	@ (8001be0 <ADC_Select_CH10+0x3c>)
 8001bc8:	f004 fa06 	bl	8005fd8 <HAL_ADC_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <ADC_Select_CH10+0x32>
  {
    Error_Handler();
 8001bd2:	f001 fbaf 	bl	8003334 <Error_Handler>
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200003d0 	.word	0x200003d0

08001be4 <ADC_Select_CH11>:

void ADC_Select_CH11(void){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
	ADC_ChannelConfTypeDef sConfig = {0};
 8001bea:	463b      	mov	r3, r7
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_11;
 8001bf6:	230b      	movs	r3, #11
 8001bf8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001bfe:	2307      	movs	r3, #7
 8001c00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	4619      	mov	r1, r3
 8001c06:	4806      	ldr	r0, [pc, #24]	@ (8001c20 <ADC_Select_CH11+0x3c>)
 8001c08:	f004 f9e6 	bl	8005fd8 <HAL_ADC_ConfigChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <ADC_Select_CH11+0x32>
  {
    Error_Handler();
 8001c12:	f001 fb8f 	bl	8003334 <Error_Handler>
  }
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200003d0 	.word	0x200003d0

08001c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	@ 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb0 <HAL_ADC_MspInit+0x8c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d12f      	bne.n	8001ca6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <HAL_ADC_MspInit+0x90>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	4a19      	ldr	r2, [pc, #100]	@ (8001cb4 <HAL_ADC_MspInit+0x90>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c56:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <HAL_ADC_MspInit+0x90>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <HAL_ADC_MspInit+0x90>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <HAL_ADC_MspInit+0x90>)
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_ADC_MspInit+0x90>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c82:	2303      	movs	r3, #3
 8001c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4809      	ldr	r0, [pc, #36]	@ (8001cb8 <HAL_ADC_MspInit+0x94>)
 8001c92:	f004 fd7b 	bl	800678c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2105      	movs	r1, #5
 8001c9a:	2012      	movs	r0, #18
 8001c9c:	f004 fc9f 	bl	80065de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ca0:	2012      	movs	r0, #18
 8001ca2:	f004 fcb8 	bl	8006616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3728      	adds	r7, #40	@ 0x28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40012000 	.word	0x40012000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020800 	.word	0x40020800

08001cbc <prepare_data>:
/* USER CODE END PTD */
extern osMutexId_t lcdMutexHandle;
extern osSemaphoreId_t uartRxSemaphoreHandle;
extern UART_HandleTypeDef huart2;
/* UART TX BEGIN */
void prepare_data(void) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af02      	add	r7, sp, #8
    snprintf(transmitData.voltage_data, sizeof(transmitData.voltage_data), "%.2f", LCD_adc.voltage);
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d38 <prepare_data+0x7c>)
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc4e 	bl	8000568 <__aeabi_f2d>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	e9cd 2300 	strd	r2, r3, [sp]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	@ (8001d3c <prepare_data+0x80>)
 8001cd6:	2114      	movs	r1, #20
 8001cd8:	4819      	ldr	r0, [pc, #100]	@ (8001d40 <prepare_data+0x84>)
 8001cda:	f00d ffd5 	bl	800fc88 <sniprintf>
    snprintf(transmitData.current_data, sizeof(transmitData.current_data), "%.2f", LCD_adc.current);
 8001cde:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <prepare_data+0x7c>)
 8001ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fc40 	bl	8000568 <__aeabi_f2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	e9cd 2300 	strd	r2, r3, [sp]
 8001cf0:	4a12      	ldr	r2, [pc, #72]	@ (8001d3c <prepare_data+0x80>)
 8001cf2:	2114      	movs	r1, #20
 8001cf4:	4813      	ldr	r0, [pc, #76]	@ (8001d44 <prepare_data+0x88>)
 8001cf6:	f00d ffc7 	bl	800fc88 <sniprintf>
    snprintf(transmitData.temperature_data, sizeof(transmitData.temperature_data), "%.2f", LCD_adc.Temp);
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <prepare_data+0x7c>)
 8001cfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc32 	bl	8000568 <__aeabi_f2d>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	e9cd 2300 	strd	r2, r3, [sp]
 8001d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d3c <prepare_data+0x80>)
 8001d0e:	2114      	movs	r1, #20
 8001d10:	480d      	ldr	r0, [pc, #52]	@ (8001d48 <prepare_data+0x8c>)
 8001d12:	f00d ffb9 	bl	800fc88 <sniprintf>
    snprintf(transmitData.power_data, sizeof(transmitData.power_data), "%.2f", LCD_adc.power);
 8001d16:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <prepare_data+0x7c>)
 8001d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc24 	bl	8000568 <__aeabi_f2d>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	e9cd 2300 	strd	r2, r3, [sp]
 8001d28:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <prepare_data+0x80>)
 8001d2a:	2114      	movs	r1, #20
 8001d2c:	4807      	ldr	r0, [pc, #28]	@ (8001d4c <prepare_data+0x90>)
 8001d2e:	f00d ffab 	bl	800fc88 <sniprintf>
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	2000085c 	.word	0x2000085c
 8001d3c:	08014c78 	.word	0x08014c78
 8001d40:	20000418 	.word	0x20000418
 8001d44:	2000042c 	.word	0x2000042c
 8001d48:	20000440 	.word	0x20000440
 8001d4c:	20000454 	.word	0x20000454

08001d50 <UART_transmit_init>:


void UART_transmit_init(void) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
    send_uart_data();
 8001d54:	f000 f802 	bl	8001d5c <send_uart_data>
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <send_uart_data>:

void send_uart_data(void) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af04      	add	r7, sp, #16
    prepare_data();
 8001d62:	f7ff ffab 	bl	8001cbc <prepare_data>
    int len = snprintf((char *)buffer, sizeof(buffer),
 8001d66:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <send_uart_data+0x3c>)
 8001d68:	9302      	str	r3, [sp, #8]
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <send_uart_data+0x40>)
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <send_uart_data+0x44>)
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <send_uart_data+0x48>)
 8001d74:	4a0c      	ldr	r2, [pc, #48]	@ (8001da8 <send_uart_data+0x4c>)
 8001d76:	2164      	movs	r1, #100	@ 0x64
 8001d78:	480c      	ldr	r0, [pc, #48]	@ (8001dac <send_uart_data+0x50>)
 8001d7a:	f00d ff85 	bl	800fc88 <sniprintf>
 8001d7e:	6078      	str	r0, [r7, #4]
                       "V:%s,C:%s,T:%s,P:%s\n",
                       transmitData.voltage_data,
                       transmitData.current_data,
                       transmitData.temperature_data,
                       transmitData.power_data);
    HAL_UART_Transmit_IT(&huart2, (uint8_t *)buffer, len);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	4909      	ldr	r1, [pc, #36]	@ (8001dac <send_uart_data+0x50>)
 8001d88:	4809      	ldr	r0, [pc, #36]	@ (8001db0 <send_uart_data+0x54>)
 8001d8a:	f008 fab6 	bl	800a2fa <HAL_UART_Transmit_IT>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000454 	.word	0x20000454
 8001d9c:	20000440 	.word	0x20000440
 8001da0:	2000042c 	.word	0x2000042c
 8001da4:	20000418 	.word	0x20000418
 8001da8:	08014c80 	.word	0x08014c80
 8001dac:	2000046c 	.word	0x2000046c
 8001db0:	20000b88 	.word	0x20000b88

08001db4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
        // Do nothing, the timer will call send_uart_data to send data
    }
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <UART_RECEIVE_Init>:

/* UART TX END */

/* UART RX BEGIN */
void UART_RECEIVE_Init(void) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);  // Nhận từng byte một
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4903      	ldr	r1, [pc, #12]	@ (8001ddc <UART_RECEIVE_Init+0x14>)
 8001dd0:	4803      	ldr	r0, [pc, #12]	@ (8001de0 <UART_RECEIVE_Init+0x18>)
 8001dd2:	f008 fac8 	bl	800a366 <HAL_UART_Receive_IT>
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200004d0 	.word	0x200004d0
 8001de0:	20000b88 	.word	0x20000b88

08001de4 <start_command>:

void start_command(void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	handle_start_button_press();
 8001de8:	f002 ff06 	bl	8004bf8 <handle_start_button_press>
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <stop_command>:

void stop_command(void) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	handle_stop_button_press();
 8001df4:	f002 ff26 	bl	8004c44 <handle_stop_button_press>
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <reset_command>:

void reset_command(void) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	handle_reset_button_press();
 8001e00:	f002 feea 	bl	8004bd8 <handle_reset_button_press>
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <drill_on_command>:

void drill_on_command(void) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(drill_port, drill_pin, GPIO_PIN_SET);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e12:	4802      	ldr	r0, [pc, #8]	@ (8001e1c <drill_on_command+0x14>)
 8001e14:	f004 fe6e 	bl	8006af4 <HAL_GPIO_WritePin>
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40020400 	.word	0x40020400

08001e20 <drill_off_command>:

void drill_off_command(void) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(drill_port, drill_pin, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e2a:	4802      	ldr	r0, [pc, #8]	@ (8001e34 <drill_off_command+0x14>)
 8001e2c:	f004 fe62 	bl	8006af4 <HAL_GPIO_WritePin>
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40020400 	.word	0x40020400

08001e38 <low_command>:

void low_command(void) {
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 10000;
 8001e3c:	491e      	ldr	r1, [pc, #120]	@ (8001eb8 <low_command+0x80>)
 8001e3e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001ea8 <low_command+0x70>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    CNC_pos.max_speedZ = 5000;
 8001e48:	491b      	ldr	r1, [pc, #108]	@ (8001eb8 <low_command+0x80>)
 8001e4a:	a319      	add	r3, pc, #100	@ (adr r3, 8001eb0 <low_command+0x78>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    CNC_pos.a_maxX = 5000;
 8001e54:	4918      	ldr	r1, [pc, #96]	@ (8001eb8 <low_command+0x80>)
 8001e56:	a316      	add	r3, pc, #88	@ (adr r3, 8001eb0 <low_command+0x78>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    CNC_pos.j_maxX = 5000;
 8001e60:	4915      	ldr	r1, [pc, #84]	@ (8001eb8 <low_command+0x80>)
 8001e62:	a313      	add	r3, pc, #76	@ (adr r3, 8001eb0 <low_command+0x78>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    CNC_pos.a_maxY = 5000;
 8001e6c:	4912      	ldr	r1, [pc, #72]	@ (8001eb8 <low_command+0x80>)
 8001e6e:	a310      	add	r3, pc, #64	@ (adr r3, 8001eb0 <low_command+0x78>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    CNC_pos.j_maxY = 5000;
 8001e78:	490f      	ldr	r1, [pc, #60]	@ (8001eb8 <low_command+0x80>)
 8001e7a:	a30d      	add	r3, pc, #52	@ (adr r3, 8001eb0 <low_command+0x78>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    CNC_pos.a_maxZ = 500;
 8001e84:	490c      	ldr	r1, [pc, #48]	@ (8001eb8 <low_command+0x80>)
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <low_command+0x84>)
 8001e8c:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    CNC_pos.j_maxZ = 500;
 8001e90:	4909      	ldr	r1, [pc, #36]	@ (8001eb8 <low_command+0x80>)
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <low_command+0x84>)
 8001e98:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	40c38800 	.word	0x40c38800
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	40b38800 	.word	0x40b38800
 8001eb8:	20000718 	.word	0x20000718
 8001ebc:	407f4000 	.word	0x407f4000

08001ec0 <medium_command>:

void medium_command(void) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 30000;
 8001ec4:	4920      	ldr	r1, [pc, #128]	@ (8001f48 <medium_command+0x88>)
 8001ec6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001f30 <medium_command+0x70>)
 8001ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ecc:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    CNC_pos.max_speedZ = 7000;
 8001ed0:	491d      	ldr	r1, [pc, #116]	@ (8001f48 <medium_command+0x88>)
 8001ed2:	a319      	add	r3, pc, #100	@ (adr r3, 8001f38 <medium_command+0x78>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    CNC_pos.a_maxX = 10000;
 8001edc:	491a      	ldr	r1, [pc, #104]	@ (8001f48 <medium_command+0x88>)
 8001ede:	a318      	add	r3, pc, #96	@ (adr r3, 8001f40 <medium_command+0x80>)
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    CNC_pos.j_maxX = 7000;
 8001ee8:	4917      	ldr	r1, [pc, #92]	@ (8001f48 <medium_command+0x88>)
 8001eea:	a313      	add	r3, pc, #76	@ (adr r3, 8001f38 <medium_command+0x78>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    CNC_pos.a_maxY = 10000;
 8001ef4:	4914      	ldr	r1, [pc, #80]	@ (8001f48 <medium_command+0x88>)
 8001ef6:	a312      	add	r3, pc, #72	@ (adr r3, 8001f40 <medium_command+0x80>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    CNC_pos.j_maxY = 7000;
 8001f00:	4911      	ldr	r1, [pc, #68]	@ (8001f48 <medium_command+0x88>)
 8001f02:	a30d      	add	r3, pc, #52	@ (adr r3, 8001f38 <medium_command+0x78>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    CNC_pos.a_maxZ = 1000;
 8001f0c:	490e      	ldr	r1, [pc, #56]	@ (8001f48 <medium_command+0x88>)
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <medium_command+0x8c>)
 8001f14:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    CNC_pos.j_maxZ = 1000;
 8001f18:	490b      	ldr	r1, [pc, #44]	@ (8001f48 <medium_command+0x88>)
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <medium_command+0x8c>)
 8001f20:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	00000000 	.word	0x00000000
 8001f34:	40dd4c00 	.word	0x40dd4c00
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	40bb5800 	.word	0x40bb5800
 8001f40:	00000000 	.word	0x00000000
 8001f44:	40c38800 	.word	0x40c38800
 8001f48:	20000718 	.word	0x20000718
 8001f4c:	408f4000 	.word	0x408f4000

08001f50 <high_command>:

void high_command(void) {
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 50000;
 8001f54:	4922      	ldr	r1, [pc, #136]	@ (8001fe0 <high_command+0x90>)
 8001f56:	a31a      	add	r3, pc, #104	@ (adr r3, 8001fc0 <high_command+0x70>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    CNC_pos.max_speedZ = 10000;
 8001f60:	491f      	ldr	r1, [pc, #124]	@ (8001fe0 <high_command+0x90>)
 8001f62:	a319      	add	r3, pc, #100	@ (adr r3, 8001fc8 <high_command+0x78>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    CNC_pos.a_maxX = 20000;
 8001f6c:	491c      	ldr	r1, [pc, #112]	@ (8001fe0 <high_command+0x90>)
 8001f6e:	a318      	add	r3, pc, #96	@ (adr r3, 8001fd0 <high_command+0x80>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    CNC_pos.j_maxX = 10000;
 8001f78:	4919      	ldr	r1, [pc, #100]	@ (8001fe0 <high_command+0x90>)
 8001f7a:	a313      	add	r3, pc, #76	@ (adr r3, 8001fc8 <high_command+0x78>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    CNC_pos.a_maxY = 20000;
 8001f84:	4916      	ldr	r1, [pc, #88]	@ (8001fe0 <high_command+0x90>)
 8001f86:	a312      	add	r3, pc, #72	@ (adr r3, 8001fd0 <high_command+0x80>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    CNC_pos.j_maxY = 10000;
 8001f90:	4913      	ldr	r1, [pc, #76]	@ (8001fe0 <high_command+0x90>)
 8001f92:	a30d      	add	r3, pc, #52	@ (adr r3, 8001fc8 <high_command+0x78>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    CNC_pos.a_maxZ = 1500;
 8001f9c:	4910      	ldr	r1, [pc, #64]	@ (8001fe0 <high_command+0x90>)
 8001f9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8001fd8 <high_command+0x88>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    CNC_pos.j_maxZ = 1000;
 8001fa8:	490d      	ldr	r1, [pc, #52]	@ (8001fe0 <high_command+0x90>)
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <high_command+0x94>)
 8001fb0:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	40e86a00 	.word	0x40e86a00
 8001fc8:	00000000 	.word	0x00000000
 8001fcc:	40c38800 	.word	0x40c38800
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	40d38800 	.word	0x40d38800
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	40977000 	.word	0x40977000
 8001fe0:	20000718 	.word	0x20000718
 8001fe4:	408f4000 	.word	0x408f4000

08001fe8 <add_coordinate>:

void add_coordinate(float x, float y, float z) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ff2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ff6:	ed87 1a01 	vstr	s2, [r7, #4]
    CoordinateNode *newNode = (CoordinateNode*)malloc(sizeof(CoordinateNode));
 8001ffa:	2010      	movs	r0, #16
 8001ffc:	f00c fe16 	bl	800ec2c <malloc>
 8002000:	4603      	mov	r3, r0
 8002002:	613b      	str	r3, [r7, #16]
    newNode->x = x;
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	601a      	str	r2, [r3, #0]
    newNode->y = y;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	605a      	str	r2, [r3, #4]
    newNode->z = z;
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	609a      	str	r2, [r3, #8]
    newNode->next = NULL;
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]

    if (head == NULL) {
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <add_coordinate+0x68>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d103      	bne.n	800202c <add_coordinate+0x44>
        head = newNode;
 8002024:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <add_coordinate+0x68>)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	6013      	str	r3, [r2, #0]
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}
 800202a:	e00d      	b.n	8002048 <add_coordinate+0x60>
        CoordinateNode *current = head;
 800202c:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <add_coordinate+0x68>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	617b      	str	r3, [r7, #20]
        while (current->next != NULL) {
 8002032:	e002      	b.n	800203a <add_coordinate+0x52>
            current = current->next;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	617b      	str	r3, [r7, #20]
        while (current->next != NULL) {
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f8      	bne.n	8002034 <add_coordinate+0x4c>
        current->next = newNode;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	60da      	str	r2, [r3, #12]
}
 8002048:	bf00      	nop
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000468 	.word	0x20000468

08002054 <clear_coordinates>:

void clear_coordinates(void) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
    CoordinateNode *current = head;
 800205a:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <clear_coordinates+0x34>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	607b      	str	r3, [r7, #4]
    CoordinateNode *next;

    while (current != NULL) {
 8002060:	e007      	b.n	8002072 <clear_coordinates+0x1e>
        next = current->next;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	603b      	str	r3, [r7, #0]
        free(current);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f00c fde7 	bl	800ec3c <free>
        current = next;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	607b      	str	r3, [r7, #4]
    while (current != NULL) {
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f4      	bne.n	8002062 <clear_coordinates+0xe>
    }

    head = NULL;
 8002078:	4b03      	ldr	r3, [pc, #12]	@ (8002088 <clear_coordinates+0x34>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000468 	.word	0x20000468

0800208c <move_to_coordinates>:

void move_to_coordinates(void) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
    CoordinateNode *current = head;
 8002092:	4b17      	ldr	r3, [pc, #92]	@ (80020f0 <move_to_coordinates+0x64>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	607b      	str	r3, [r7, #4]

    while (current != NULL) {
 8002098:	e021      	b.n	80020de <move_to_coordinates+0x52>
    	coordinate_X = current->x;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a15      	ldr	r2, [pc, #84]	@ (80020f4 <move_to_coordinates+0x68>)
 80020a0:	6013      	str	r3, [r2, #0]
    	coordinate_Y = current->y;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4a14      	ldr	r2, [pc, #80]	@ (80020f8 <move_to_coordinates+0x6c>)
 80020a8:	6013      	str	r3, [r2, #0]
    	coordinate_Z = current->z;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	4a13      	ldr	r2, [pc, #76]	@ (80020fc <move_to_coordinates+0x70>)
 80020b0:	6013      	str	r3, [r2, #0]
        MoveToPosXY(coordinate_X, coordinate_Y);
 80020b2:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <move_to_coordinates+0x68>)
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	4b0f      	ldr	r3, [pc, #60]	@ (80020f8 <move_to_coordinates+0x6c>)
 80020ba:	ed93 7a00 	vldr	s14, [r3]
 80020be:	eef0 0a47 	vmov.f32	s1, s14
 80020c2:	eeb0 0a67 	vmov.f32	s0, s15
 80020c6:	f000 fa03 	bl	80024d0 <MoveToPosXY>
        MoveToPosZ(coordinate_Z);
 80020ca:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <move_to_coordinates+0x70>)
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	eeb0 0a67 	vmov.f32	s0, s15
 80020d4:	f000 fbc0 	bl	8002858 <MoveToPosZ>
        current = current->next;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	607b      	str	r3, [r7, #4]
    while (current != NULL) {
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1da      	bne.n	800209a <move_to_coordinates+0xe>
    }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000468 	.word	0x20000468
 80020f4:	200006e8 	.word	0x200006e8
 80020f8:	200006ec 	.word	0x200006ec
 80020fc:	200006f0 	.word	0x200006f0

08002100 <process_goto_command>:

void process_goto_command(char *cmd) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af02      	add	r7, sp, #8
 8002106:	6078      	str	r0, [r7, #4]
    char *line = strtok(cmd, "GOTO");
 8002108:	491c      	ldr	r1, [pc, #112]	@ (800217c <process_goto_command+0x7c>)
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f00d febc 	bl	800fe88 <strtok>
 8002110:	6178      	str	r0, [r7, #20]
    clear_coordinates(); // Xóa danh sách tọa độ hiện tại
 8002112:	f7ff ff9f 	bl	8002054 <clear_coordinates>

    while (line != NULL) {
 8002116:	e021      	b.n	800215c <process_goto_command+0x5c>
        float x, y, z;
        if (sscanf(line, "%f,%f,%f", &x, &y, &z) == 3) {
 8002118:	f107 010c 	add.w	r1, r7, #12
 800211c:	f107 0210 	add.w	r2, r7, #16
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	460b      	mov	r3, r1
 8002128:	4915      	ldr	r1, [pc, #84]	@ (8002180 <process_goto_command+0x80>)
 800212a:	6978      	ldr	r0, [r7, #20]
 800212c:	f00d fe00 	bl	800fd30 <siscanf>
 8002130:	4603      	mov	r3, r0
 8002132:	2b03      	cmp	r3, #3
 8002134:	d10d      	bne.n	8002152 <process_goto_command+0x52>
            add_coordinate(x, y, z);
 8002136:	edd7 7a04 	vldr	s15, [r7, #16]
 800213a:	ed97 7a03 	vldr	s14, [r7, #12]
 800213e:	edd7 6a02 	vldr	s13, [r7, #8]
 8002142:	eeb0 1a66 	vmov.f32	s2, s13
 8002146:	eef0 0a47 	vmov.f32	s1, s14
 800214a:	eeb0 0a67 	vmov.f32	s0, s15
 800214e:	f7ff ff4b 	bl	8001fe8 <add_coordinate>
        }
        line = strtok(NULL, "GOTO");
 8002152:	490a      	ldr	r1, [pc, #40]	@ (800217c <process_goto_command+0x7c>)
 8002154:	2000      	movs	r0, #0
 8002156:	f00d fe97 	bl	800fe88 <strtok>
 800215a:	6178      	str	r0, [r7, #20]
    while (line != NULL) {
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1da      	bne.n	8002118 <process_goto_command+0x18>
    }

    state.start_press = 1; // Đặt cờ để bắt đầu di chuyển đến tọa độ
 8002162:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <process_goto_command+0x84>)
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
    state.stop_press = 0;
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <process_goto_command+0x84>)
 800216a:	2200      	movs	r2, #0
 800216c:	705a      	strb	r2, [r3, #1]
    state.reset_press = 0;
 800216e:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <process_goto_command+0x84>)
 8002170:	2200      	movs	r2, #0
 8002172:	709a      	strb	r2, [r3, #2]
}
 8002174:	bf00      	nop
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	08014c98 	.word	0x08014c98
 8002180:	08014ca0 	.word	0x08014ca0
 8002184:	200009c8 	.word	0x200009c8

08002188 <UART_rx_process>:

void UART_rx_process(void) {
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
    if (cmdstate) {
 800218c:	4b33      	ldr	r3, [pc, #204]	@ (800225c <UART_rx_process+0xd4>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d061      	beq.n	8002258 <UART_rx_process+0xd0>
    	cmdstate = 0;
 8002194:	4b31      	ldr	r3, [pc, #196]	@ (800225c <UART_rx_process+0xd4>)
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]

        if (strcmp(cmd, "START") == 0) {
 800219a:	4931      	ldr	r1, [pc, #196]	@ (8002260 <UART_rx_process+0xd8>)
 800219c:	4831      	ldr	r0, [pc, #196]	@ (8002264 <UART_rx_process+0xdc>)
 800219e:	f7fe f817 	bl	80001d0 <strcmp>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <UART_rx_process+0x26>
            start_command();
 80021a8:	f7ff fe1c 	bl	8001de4 <start_command>
            process_goto_command(cmd);
        } else {
        	process_ip_address(cmd);
        }
    }
}
 80021ac:	e054      	b.n	8002258 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "STOP") == 0) {
 80021ae:	492e      	ldr	r1, [pc, #184]	@ (8002268 <UART_rx_process+0xe0>)
 80021b0:	482c      	ldr	r0, [pc, #176]	@ (8002264 <UART_rx_process+0xdc>)
 80021b2:	f7fe f80d 	bl	80001d0 <strcmp>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <UART_rx_process+0x3a>
            stop_command();
 80021bc:	f7ff fe18 	bl	8001df0 <stop_command>
}
 80021c0:	e04a      	b.n	8002258 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "RESET") == 0) {
 80021c2:	492a      	ldr	r1, [pc, #168]	@ (800226c <UART_rx_process+0xe4>)
 80021c4:	4827      	ldr	r0, [pc, #156]	@ (8002264 <UART_rx_process+0xdc>)
 80021c6:	f7fe f803 	bl	80001d0 <strcmp>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <UART_rx_process+0x4e>
            reset_command();
 80021d0:	f7ff fe14 	bl	8001dfc <reset_command>
}
 80021d4:	e040      	b.n	8002258 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "ON") == 0) {
 80021d6:	4926      	ldr	r1, [pc, #152]	@ (8002270 <UART_rx_process+0xe8>)
 80021d8:	4822      	ldr	r0, [pc, #136]	@ (8002264 <UART_rx_process+0xdc>)
 80021da:	f7fd fff9 	bl	80001d0 <strcmp>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <UART_rx_process+0x62>
            drill_on_command();
 80021e4:	f7ff fe10 	bl	8001e08 <drill_on_command>
}
 80021e8:	e036      	b.n	8002258 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "OFF") == 0) {
 80021ea:	4922      	ldr	r1, [pc, #136]	@ (8002274 <UART_rx_process+0xec>)
 80021ec:	481d      	ldr	r0, [pc, #116]	@ (8002264 <UART_rx_process+0xdc>)
 80021ee:	f7fd ffef 	bl	80001d0 <strcmp>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <UART_rx_process+0x76>
            drill_off_command();
 80021f8:	f7ff fe12 	bl	8001e20 <drill_off_command>
}
 80021fc:	e02c      	b.n	8002258 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "LOW") == 0) {
 80021fe:	491e      	ldr	r1, [pc, #120]	@ (8002278 <UART_rx_process+0xf0>)
 8002200:	4818      	ldr	r0, [pc, #96]	@ (8002264 <UART_rx_process+0xdc>)
 8002202:	f7fd ffe5 	bl	80001d0 <strcmp>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <UART_rx_process+0x8a>
            low_command();
 800220c:	f7ff fe14 	bl	8001e38 <low_command>
}
 8002210:	e022      	b.n	8002258 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "MEDIUM") == 0) {
 8002212:	491a      	ldr	r1, [pc, #104]	@ (800227c <UART_rx_process+0xf4>)
 8002214:	4813      	ldr	r0, [pc, #76]	@ (8002264 <UART_rx_process+0xdc>)
 8002216:	f7fd ffdb 	bl	80001d0 <strcmp>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <UART_rx_process+0x9e>
            medium_command();
 8002220:	f7ff fe4e 	bl	8001ec0 <medium_command>
}
 8002224:	e018      	b.n	8002258 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "HIGH") == 0) {
 8002226:	4916      	ldr	r1, [pc, #88]	@ (8002280 <UART_rx_process+0xf8>)
 8002228:	480e      	ldr	r0, [pc, #56]	@ (8002264 <UART_rx_process+0xdc>)
 800222a:	f7fd ffd1 	bl	80001d0 <strcmp>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <UART_rx_process+0xb2>
            high_command();
 8002234:	f7ff fe8c 	bl	8001f50 <high_command>
}
 8002238:	e00e      	b.n	8002258 <UART_rx_process+0xd0>
        } else if (strncmp(cmd, "GOTO", 4) == 0) {
 800223a:	2204      	movs	r2, #4
 800223c:	4911      	ldr	r1, [pc, #68]	@ (8002284 <UART_rx_process+0xfc>)
 800223e:	4809      	ldr	r0, [pc, #36]	@ (8002264 <UART_rx_process+0xdc>)
 8002240:	f00d fdfc 	bl	800fe3c <strncmp>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <UART_rx_process+0xca>
            process_goto_command(cmd);
 800224a:	4806      	ldr	r0, [pc, #24]	@ (8002264 <UART_rx_process+0xdc>)
 800224c:	f7ff ff58 	bl	8002100 <process_goto_command>
}
 8002250:	e002      	b.n	8002258 <UART_rx_process+0xd0>
        	process_ip_address(cmd);
 8002252:	4804      	ldr	r0, [pc, #16]	@ (8002264 <UART_rx_process+0xdc>)
 8002254:	f000 f818 	bl	8002288 <process_ip_address>
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200006e4 	.word	0x200006e4
 8002260:	08014cac 	.word	0x08014cac
 8002264:	200005d0 	.word	0x200005d0
 8002268:	08014cb4 	.word	0x08014cb4
 800226c:	08014cbc 	.word	0x08014cbc
 8002270:	08014cc4 	.word	0x08014cc4
 8002274:	08014cc8 	.word	0x08014cc8
 8002278:	08014ccc 	.word	0x08014ccc
 800227c:	08014cd0 	.word	0x08014cd0
 8002280:	08014cd8 	.word	0x08014cd8
 8002284:	08014c98 	.word	0x08014c98

08002288 <process_ip_address>:

void process_ip_address(char *ip_address) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    // Store the received IP address
    strncpy(ip_config, ip_address, sizeof(ip_config) - 1);
 8002290:	2213      	movs	r2, #19
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4804      	ldr	r0, [pc, #16]	@ (80022a8 <process_ip_address+0x20>)
 8002296:	f00d fde3 	bl	800fe60 <strncpy>
    ip_config[sizeof(ip_config) - 1] = '\0';  // Ensure null termination
 800229a:	4b03      	ldr	r3, [pc, #12]	@ (80022a8 <process_ip_address+0x20>)
 800229c:	2200      	movs	r2, #0
 800229e:	74da      	strb	r2, [r3, #19]
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	200006d0 	.word	0x200006d0

080022ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
    static uint8_t index = 0;

    if (huart->Instance == USART2) {
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002334 <HAL_UART_RxCpltCallback+0x88>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d135      	bne.n	800232a <HAL_UART_RxCpltCallback+0x7e>
        if (rxBuffer[0] != '\r' && rxBuffer[0] != '\n') {
 80022be:	4b1e      	ldr	r3, [pc, #120]	@ (8002338 <HAL_UART_RxCpltCallback+0x8c>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b0d      	cmp	r3, #13
 80022c4:	d013      	beq.n	80022ee <HAL_UART_RxCpltCallback+0x42>
 80022c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002338 <HAL_UART_RxCpltCallback+0x8c>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b0a      	cmp	r3, #10
 80022cc:	d00f      	beq.n	80022ee <HAL_UART_RxCpltCallback+0x42>
            if (index < sizeof(cmd) - 1) {
 80022ce:	4b1b      	ldr	r3, [pc, #108]	@ (800233c <HAL_UART_RxCpltCallback+0x90>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2bff      	cmp	r3, #255	@ 0xff
 80022d4:	d024      	beq.n	8002320 <HAL_UART_RxCpltCallback+0x74>
            	cmd[index++] = rxBuffer[0];
 80022d6:	4b19      	ldr	r3, [pc, #100]	@ (800233c <HAL_UART_RxCpltCallback+0x90>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	b2d1      	uxtb	r1, r2
 80022de:	4a17      	ldr	r2, [pc, #92]	@ (800233c <HAL_UART_RxCpltCallback+0x90>)
 80022e0:	7011      	strb	r1, [r2, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b14      	ldr	r3, [pc, #80]	@ (8002338 <HAL_UART_RxCpltCallback+0x8c>)
 80022e6:	7819      	ldrb	r1, [r3, #0]
 80022e8:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <HAL_UART_RxCpltCallback+0x94>)
 80022ea:	5499      	strb	r1, [r3, r2]
            if (index < sizeof(cmd) - 1) {
 80022ec:	e018      	b.n	8002320 <HAL_UART_RxCpltCallback+0x74>
            }
        } else if (rxBuffer[0] == '\r') {
 80022ee:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <HAL_UART_RxCpltCallback+0x8c>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b0d      	cmp	r3, #13
 80022f4:	d114      	bne.n	8002320 <HAL_UART_RxCpltCallback+0x74>
            if (index > 0) {
 80022f6:	4b11      	ldr	r3, [pc, #68]	@ (800233c <HAL_UART_RxCpltCallback+0x90>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d010      	beq.n	8002320 <HAL_UART_RxCpltCallback+0x74>
            	cmd[index] = '\0';
 80022fe:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <HAL_UART_RxCpltCallback+0x90>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <HAL_UART_RxCpltCallback+0x94>)
 8002306:	2100      	movs	r1, #0
 8002308:	5499      	strb	r1, [r3, r2]
                index = 0;
 800230a:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <HAL_UART_RxCpltCallback+0x90>)
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
                cmdstate = 1;
 8002310:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <HAL_UART_RxCpltCallback+0x98>)
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
                osSemaphoreRelease(uartRxSemaphoreHandle);
 8002316:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <HAL_UART_RxCpltCallback+0x9c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f009 faa8 	bl	800b870 <osSemaphoreRelease>
            }
        }
        HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8002320:	2201      	movs	r2, #1
 8002322:	4905      	ldr	r1, [pc, #20]	@ (8002338 <HAL_UART_RxCpltCallback+0x8c>)
 8002324:	4809      	ldr	r0, [pc, #36]	@ (800234c <HAL_UART_RxCpltCallback+0xa0>)
 8002326:	f008 f81e 	bl	800a366 <HAL_UART_Receive_IT>
    }
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40004400 	.word	0x40004400
 8002338:	200004d0 	.word	0x200004d0
 800233c:	200006f4 	.word	0x200006f4
 8002340:	200005d0 	.word	0x200005d0
 8002344:	200006e4 	.word	0x200006e4
 8002348:	200006fc 	.word	0x200006fc
 800234c:	20000b88 	.word	0x20000b88

08002350 <max3>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
/*----------------------------------*/
/* Config speed for stepper */
double_t max3(double_t a, double_t b, double_t c) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
 8002356:	ed87 0b04 	vstr	d0, [r7, #16]
 800235a:	ed87 1b02 	vstr	d1, [r7, #8]
 800235e:	ed87 2b00 	vstr	d2, [r7]
	double_t n1 = max(a, b);
 8002362:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002366:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800236a:	f7fe fbe5 	bl	8000b38 <__aeabi_dcmpgt>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <max3+0x2a>
 8002374:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002378:	e001      	b.n	800237e <max3+0x2e>
 800237a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800237e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    return max(n1, c);
 8002382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002386:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800238a:	f7fe fbd5 	bl	8000b38 <__aeabi_dcmpgt>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <max3+0x4a>
 8002394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002398:	e001      	b.n	800239e <max3+0x4e>
 800239a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800239e:	ec43 2b17 	vmov	d7, r2, r3
}
 80023a2:	eeb0 0a47 	vmov.f32	s0, s14
 80023a6:	eef0 0a67 	vmov.f32	s1, s15
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <DelayUs_step>:
/* Function set home */
void DelayUs_step(uint32_t us)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim1);
 80023b8:	480a      	ldr	r0, [pc, #40]	@ (80023e4 <DelayUs_step+0x34>)
 80023ba:	f007 fa6f 	bl	800989c <HAL_TIM_Base_Start_IT>
	//(&htim7)->Instance->CNT = (0);
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80023be:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <DelayUs_step+0x34>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2200      	movs	r2, #0
 80023c4:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 80023c6:	bf00      	nop
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <DelayUs_step+0x34>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d8f9      	bhi.n	80023c8 <DelayUs_step+0x18>
	HAL_TIM_Base_Stop_IT(&htim1);
 80023d4:	4803      	ldr	r0, [pc, #12]	@ (80023e4 <DelayUs_step+0x34>)
 80023d6:	f007 fad1 	bl	800997c <HAL_TIM_Base_Stop_IT>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200009d8 	.word	0x200009d8

080023e8 <HOME>:

void HOME(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
    // Home Z axis
    HAL_GPIO_WritePin(dir_3_GPIO_Port, dir_3_pin, GPIO_PIN_RESET); // Set direction to move towards home
 80023ee:	2200      	movs	r2, #0
 80023f0:	2120      	movs	r1, #32
 80023f2:	4833      	ldr	r0, [pc, #204]	@ (80024c0 <HOME+0xd8>)
 80023f4:	f004 fb7e 	bl	8006af4 <HAL_GPIO_WritePin>
    while (HAL_GPIO_ReadPin(moveZsub_port, moveZsub_pin) != CNC_pos.Lsw6) {
 80023f8:	e006      	b.n	8002408 <HOME+0x20>
        HAL_GPIO_TogglePin(step_3_GPIO_Port, step_3_pin); // Toggle step pin to move towards home
 80023fa:	2110      	movs	r1, #16
 80023fc:	4830      	ldr	r0, [pc, #192]	@ (80024c0 <HOME+0xd8>)
 80023fe:	f004 fb92 	bl	8006b26 <HAL_GPIO_TogglePin>
        DelayUs_step(30); // Adjust delay as needed
 8002402:	201e      	movs	r0, #30
 8002404:	f7ff ffd4 	bl	80023b0 <DelayUs_step>
    while (HAL_GPIO_ReadPin(moveZsub_port, moveZsub_pin) != CNC_pos.Lsw6) {
 8002408:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800240c:	482d      	ldr	r0, [pc, #180]	@ (80024c4 <HOME+0xdc>)
 800240e:	f004 fb59 	bl	8006ac4 <HAL_GPIO_ReadPin>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	4b2c      	ldr	r3, [pc, #176]	@ (80024c8 <HOME+0xe0>)
 8002418:	795b      	ldrb	r3, [r3, #5]
 800241a:	429a      	cmp	r2, r3
 800241c:	d1ed      	bne.n	80023fa <HOME+0x12>
    }
    // Home X axis
    HAL_GPIO_WritePin(dir_1_GPIO_Port, dir_1_pin, GPIO_PIN_RESET); // Set direction to move towards home
 800241e:	2200      	movs	r2, #0
 8002420:	2102      	movs	r1, #2
 8002422:	4827      	ldr	r0, [pc, #156]	@ (80024c0 <HOME+0xd8>)
 8002424:	f004 fb66 	bl	8006af4 <HAL_GPIO_WritePin>
    bool isXHome = false;
 8002428:	2300      	movs	r3, #0
 800242a:	71fb      	strb	r3, [r7, #7]

    // Home Y axis
    HAL_GPIO_WritePin(dir_2_GPIO_Port, dir_2_pin, GPIO_PIN_RESET); // Set direction to move towards home
 800242c:	2200      	movs	r2, #0
 800242e:	2108      	movs	r1, #8
 8002430:	4823      	ldr	r0, [pc, #140]	@ (80024c0 <HOME+0xd8>)
 8002432:	f004 fb5f 	bl	8006af4 <HAL_GPIO_WritePin>
    bool isYHome = false;
 8002436:	2300      	movs	r3, #0
 8002438:	71bb      	strb	r3, [r7, #6]

    while (!(isXHome && isYHome)) {
 800243a:	e030      	b.n	800249e <HOME+0xb6>
        if (!isXHome && (HAL_GPIO_ReadPin(moveXsub_port, moveXsub_pin) != CNC_pos.Lsw2)) {
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f083 0301 	eor.w	r3, r3, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00e      	beq.n	8002466 <HOME+0x7e>
 8002448:	2101      	movs	r1, #1
 800244a:	4820      	ldr	r0, [pc, #128]	@ (80024cc <HOME+0xe4>)
 800244c:	f004 fb3a 	bl	8006ac4 <HAL_GPIO_ReadPin>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <HOME+0xe0>)
 8002456:	785b      	ldrb	r3, [r3, #1]
 8002458:	429a      	cmp	r2, r3
 800245a:	d004      	beq.n	8002466 <HOME+0x7e>
            HAL_GPIO_TogglePin(step_1_GPIO_Port, step_1_pin); // Toggle step pin to move towards home
 800245c:	2101      	movs	r1, #1
 800245e:	4818      	ldr	r0, [pc, #96]	@ (80024c0 <HOME+0xd8>)
 8002460:	f004 fb61 	bl	8006b26 <HAL_GPIO_TogglePin>
 8002464:	e001      	b.n	800246a <HOME+0x82>
        } else {
            isXHome = true;
 8002466:	2301      	movs	r3, #1
 8002468:	71fb      	strb	r3, [r7, #7]
        }

        if (!isYHome && (HAL_GPIO_ReadPin(moveYsub_port, moveYsub_pin) != CNC_pos.Lsw4)) {
 800246a:	79bb      	ldrb	r3, [r7, #6]
 800246c:	f083 0301 	eor.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00e      	beq.n	8002494 <HOME+0xac>
 8002476:	2102      	movs	r1, #2
 8002478:	4814      	ldr	r0, [pc, #80]	@ (80024cc <HOME+0xe4>)
 800247a:	f004 fb23 	bl	8006ac4 <HAL_GPIO_ReadPin>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HOME+0xe0>)
 8002484:	78db      	ldrb	r3, [r3, #3]
 8002486:	429a      	cmp	r2, r3
 8002488:	d004      	beq.n	8002494 <HOME+0xac>
            HAL_GPIO_TogglePin(step_2_GPIO_Port, step_2_pin); // Toggle step pin to move towards home
 800248a:	2104      	movs	r1, #4
 800248c:	480c      	ldr	r0, [pc, #48]	@ (80024c0 <HOME+0xd8>)
 800248e:	f004 fb4a 	bl	8006b26 <HAL_GPIO_TogglePin>
 8002492:	e001      	b.n	8002498 <HOME+0xb0>
        } else {
            isYHome = true;
 8002494:	2301      	movs	r3, #1
 8002496:	71bb      	strb	r3, [r7, #6]
        }
        DelayUs_step(30); // Adjust delay as needed
 8002498:	201e      	movs	r0, #30
 800249a:	f7ff ff89 	bl	80023b0 <DelayUs_step>
    while (!(isXHome && isYHome)) {
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f083 0301 	eor.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1c8      	bne.n	800243c <HOME+0x54>
 80024aa:	79bb      	ldrb	r3, [r7, #6]
 80024ac:	f083 0301 	eor.w	r3, r3, #1
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1c2      	bne.n	800243c <HOME+0x54>
    }
}
 80024b6:	bf00      	nop
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40021000 	.word	0x40021000
 80024c8:	20000718 	.word	0x20000718
 80024cc:	40020400 	.word	0x40020400

080024d0 <MoveToPosXY>:
/* Function control 3 axis */
//Move X-Y
void MoveToPosXY(float x, float y) {
 80024d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d4:	ed2d 8b02 	vpush	{d8}
 80024d8:	b092      	sub	sp, #72	@ 0x48
 80024da:	af06      	add	r7, sp, #24
 80024dc:	ed87 0a05 	vstr	s0, [r7, #20]
 80024e0:	edc7 0a04 	vstr	s1, [r7, #16]
    trans_to_posXY(x,y);
 80024e4:	edd7 0a04 	vldr	s1, [r7, #16]
 80024e8:	ed97 0a05 	vldr	s0, [r7, #20]
 80024ec:	f7ff fabe 	bl	8001a6c <trans_to_posXY>
    CNC_pos.MoveX = caculate_pos(CNC.set_posX, 161);
 80024f0:	4bb3      	ldr	r3, [pc, #716]	@ (80027c0 <MoveToPosXY+0x2f0>)
 80024f2:	ed93 7b00 	vldr	d7, [r3]
 80024f6:	ed9f 1bb0 	vldr	d1, [pc, #704]	@ 80027b8 <MoveToPosXY+0x2e8>
 80024fa:	eeb0 0a47 	vmov.f32	s0, s14
 80024fe:	eef0 0a67 	vmov.f32	s1, s15
 8002502:	f7ff faf3 	bl	8001aec <caculate_pos>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe f855 	bl	80005bc <__aeabi_l2d>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	49ab      	ldr	r1, [pc, #684]	@ (80027c4 <MoveToPosXY+0x2f4>)
 8002518:	e9c1 2306 	strd	r2, r3, [r1, #24]
    CNC_pos.MoveY = caculate_pos(CNC.set_posY, 161);
 800251c:	4ba8      	ldr	r3, [pc, #672]	@ (80027c0 <MoveToPosXY+0x2f0>)
 800251e:	ed93 7b02 	vldr	d7, [r3, #8]
 8002522:	ed9f 1ba5 	vldr	d1, [pc, #660]	@ 80027b8 <MoveToPosXY+0x2e8>
 8002526:	eeb0 0a47 	vmov.f32	s0, s14
 800252a:	eef0 0a67 	vmov.f32	s1, s15
 800252e:	f7ff fadd 	bl	8001aec <caculate_pos>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	f7fe f83f 	bl	80005bc <__aeabi_l2d>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	49a0      	ldr	r1, [pc, #640]	@ (80027c4 <MoveToPosXY+0x2f4>)
 8002544:	e9c1 2308 	strd	r2, r3, [r1, #32]
    long long int step_max = max3(llabs(CNC_pos.MoveX), llabs(CNC_pos.MoveY), llabs(CNC_pos.MoveZ));
 8002548:	4b9e      	ldr	r3, [pc, #632]	@ (80027c4 <MoveToPosXY+0x2f4>)
 800254a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7fe fbc1 	bl	8000cd8 <__aeabi_d2lz>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	2b00      	cmp	r3, #0
 800255c:	da05      	bge.n	800256a <MoveToPosXY+0x9a>
 800255e:	2100      	movs	r1, #0
 8002560:	4254      	negs	r4, r2
 8002562:	eb61 0503 	sbc.w	r5, r1, r3
 8002566:	4622      	mov	r2, r4
 8002568:	462b      	mov	r3, r5
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f7fe f825 	bl	80005bc <__aeabi_l2d>
 8002572:	ec41 0b18 	vmov	d8, r0, r1
 8002576:	4b93      	ldr	r3, [pc, #588]	@ (80027c4 <MoveToPosXY+0x2f4>)
 8002578:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe fbaa 	bl	8000cd8 <__aeabi_d2lz>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	2b00      	cmp	r3, #0
 800258a:	da06      	bge.n	800259a <MoveToPosXY+0xca>
 800258c:	2100      	movs	r1, #0
 800258e:	f1d2 0800 	rsbs	r8, r2, #0
 8002592:	eb61 0903 	sbc.w	r9, r1, r3
 8002596:	4642      	mov	r2, r8
 8002598:	464b      	mov	r3, r9
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	f7fe f80d 	bl	80005bc <__aeabi_l2d>
 80025a2:	4604      	mov	r4, r0
 80025a4:	460d      	mov	r5, r1
 80025a6:	4b87      	ldr	r3, [pc, #540]	@ (80027c4 <MoveToPosXY+0x2f4>)
 80025a8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f7fe fb92 	bl	8000cd8 <__aeabi_d2lz>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	da06      	bge.n	80025ca <MoveToPosXY+0xfa>
 80025bc:	2100      	movs	r1, #0
 80025be:	f1d2 0a00 	rsbs	sl, r2, #0
 80025c2:	eb61 0b03 	sbc.w	fp, r1, r3
 80025c6:	4652      	mov	r2, sl
 80025c8:	465b      	mov	r3, fp
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f7fd fff5 	bl	80005bc <__aeabi_l2d>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	ec43 2b12 	vmov	d2, r2, r3
 80025da:	ec45 4b11 	vmov	d1, r4, r5
 80025de:	eeb0 0a48 	vmov.f32	s0, s16
 80025e2:	eef0 0a68 	vmov.f32	s1, s17
 80025e6:	f7ff feb3 	bl	8002350 <max3>
 80025ea:	ec53 2b10 	vmov	r2, r3, d0
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fe fb71 	bl	8000cd8 <__aeabi_d2lz>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double_t coef1 = fabs(CNC_pos.MoveX) / step_max;
 80025fe:	4b71      	ldr	r3, [pc, #452]	@ (80027c4 <MoveToPosXY+0x2f4>)
 8002600:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002604:	60ba      	str	r2, [r7, #8]
 8002606:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002610:	f7fd ffd4 	bl	80005bc <__aeabi_l2d>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800261c:	f7fe f926 	bl	800086c <__aeabi_ddiv>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double_t coef2 = fabs(CNC_pos.MoveY) / step_max;
 8002628:	4b66      	ldr	r3, [pc, #408]	@ (80027c4 <MoveToPosXY+0x2f4>)
 800262a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800262e:	603a      	str	r2, [r7, #0]
 8002630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800263a:	f7fd ffbf 	bl	80005bc <__aeabi_l2d>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002646:	f7fe f911 	bl	800086c <__aeabi_ddiv>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    CNC_pos.pos1dot = CNC_pos.max_speedXY * coef1;
 8002652:	4b5c      	ldr	r3, [pc, #368]	@ (80027c4 <MoveToPosXY+0x2f4>)
 8002654:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002658:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800265c:	f7fd ffdc 	bl	8000618 <__aeabi_dmul>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4957      	ldr	r1, [pc, #348]	@ (80027c4 <MoveToPosXY+0x2f4>)
 8002666:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    CNC_pos.pos2dot = CNC_pos.max_speedXY * coef2;
 800266a:	4b56      	ldr	r3, [pc, #344]	@ (80027c4 <MoveToPosXY+0x2f4>)
 800266c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002674:	f7fd ffd0 	bl	8000618 <__aeabi_dmul>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4951      	ldr	r1, [pc, #324]	@ (80027c4 <MoveToPosXY+0x2f4>)
 800267e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    CNC_pos.accel1 = CNC_pos.a_maxX * coef1;
 8002682:	4b50      	ldr	r3, [pc, #320]	@ (80027c4 <MoveToPosXY+0x2f4>)
 8002684:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 8002688:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800268c:	f7fd ffc4 	bl	8000618 <__aeabi_dmul>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	494b      	ldr	r1, [pc, #300]	@ (80027c4 <MoveToPosXY+0x2f4>)
 8002696:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    CNC_pos.accel2 = CNC_pos.a_maxY * coef2;
 800269a:	4b4a      	ldr	r3, [pc, #296]	@ (80027c4 <MoveToPosXY+0x2f4>)
 800269c:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	@ 0x98
 80026a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026a4:	f7fd ffb8 	bl	8000618 <__aeabi_dmul>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4945      	ldr	r1, [pc, #276]	@ (80027c4 <MoveToPosXY+0x2f4>)
 80026ae:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    CNC_pos.jerk1 = CNC_pos.j_maxX * coef1;
 80026b2:	4b44      	ldr	r3, [pc, #272]	@ (80027c4 <MoveToPosXY+0x2f4>)
 80026b4:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 80026b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026bc:	f7fd ffac 	bl	8000618 <__aeabi_dmul>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	493f      	ldr	r1, [pc, #252]	@ (80027c4 <MoveToPosXY+0x2f4>)
 80026c6:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    CNC_pos.jerk2 = CNC_pos.j_maxY * coef2;
 80026ca:	4b3e      	ldr	r3, [pc, #248]	@ (80027c4 <MoveToPosXY+0x2f4>)
 80026cc:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	@ 0xa0
 80026d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d4:	f7fd ffa0 	bl	8000618 <__aeabi_dmul>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4939      	ldr	r1, [pc, #228]	@ (80027c4 <MoveToPosXY+0x2f4>)
 80026de:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    if (Stepper1.run_state != 1 && Stepper2.run_state != 1) {
 80026e2:	4b39      	ldr	r3, [pc, #228]	@ (80027c8 <MoveToPosXY+0x2f8>)
 80026e4:	785b      	ldrb	r3, [r3, #1]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	f000 80a3 	beq.w	8002832 <MoveToPosXY+0x362>
 80026ec:	4b37      	ldr	r3, [pc, #220]	@ (80027cc <MoveToPosXY+0x2fc>)
 80026ee:	785b      	ldrb	r3, [r3, #1]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	f000 809e 	beq.w	8002832 <MoveToPosXY+0x362>
        Accel_Stepper_Move(&Stepper1, CNC_pos.MoveX, CNC_pos.accel1, CNC_pos.jerk1, CNC_pos.pos1dot);
 80026f6:	4b33      	ldr	r3, [pc, #204]	@ (80027c4 <MoveToPosXY+0x2f4>)
 80026f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	f7fe faea 	bl	8000cd8 <__aeabi_d2lz>
 8002704:	4682      	mov	sl, r0
 8002706:	468b      	mov	fp, r1
 8002708:	4b2e      	ldr	r3, [pc, #184]	@ (80027c4 <MoveToPosXY+0x2f4>)
 800270a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	f7fe faf9 	bl	8000d08 <__aeabi_d2ulz>
 8002716:	4604      	mov	r4, r0
 8002718:	460d      	mov	r5, r1
 800271a:	4b2a      	ldr	r3, [pc, #168]	@ (80027c4 <MoveToPosXY+0x2f4>)
 800271c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	f7fe faf0 	bl	8000d08 <__aeabi_d2ulz>
 8002728:	4680      	mov	r8, r0
 800272a:	4689      	mov	r9, r1
 800272c:	4b25      	ldr	r3, [pc, #148]	@ (80027c4 <MoveToPosXY+0x2f4>)
 800272e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f7fe fae7 	bl	8000d08 <__aeabi_d2ulz>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002742:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002746:	e9cd 4500 	strd	r4, r5, [sp]
 800274a:	4652      	mov	r2, sl
 800274c:	465b      	mov	r3, fp
 800274e:	481e      	ldr	r0, [pc, #120]	@ (80027c8 <MoveToPosXY+0x2f8>)
 8002750:	f7fe fea2 	bl	8001498 <Accel_Stepper_Move>
        Accel_Stepper_Move(&Stepper2, CNC_pos.MoveY, CNC_pos.accel2, CNC_pos.jerk2, CNC_pos.pos2dot);
 8002754:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <MoveToPosXY+0x2f4>)
 8002756:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	f7fe fabb 	bl	8000cd8 <__aeabi_d2lz>
 8002762:	4682      	mov	sl, r0
 8002764:	468b      	mov	fp, r1
 8002766:	4b17      	ldr	r3, [pc, #92]	@ (80027c4 <MoveToPosXY+0x2f4>)
 8002768:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	f7fe faca 	bl	8000d08 <__aeabi_d2ulz>
 8002774:	4604      	mov	r4, r0
 8002776:	460d      	mov	r5, r1
 8002778:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <MoveToPosXY+0x2f4>)
 800277a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f7fe fac1 	bl	8000d08 <__aeabi_d2ulz>
 8002786:	4680      	mov	r8, r0
 8002788:	4689      	mov	r9, r1
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <MoveToPosXY+0x2f4>)
 800278c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	f7fe fab8 	bl	8000d08 <__aeabi_d2ulz>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80027a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80027a4:	e9cd 4500 	strd	r4, r5, [sp]
 80027a8:	4652      	mov	r2, sl
 80027aa:	465b      	mov	r3, fp
 80027ac:	4807      	ldr	r0, [pc, #28]	@ (80027cc <MoveToPosXY+0x2fc>)
 80027ae:	f7fe fe73 	bl	8001498 <Accel_Stepper_Move>
        while (Stepper1.run_state != STOP || Stepper2.run_state != STOP) {
 80027b2:	e026      	b.n	8002802 <MoveToPosXY+0x332>
 80027b4:	f3af 8000 	nop.w
 80027b8:	00000000 	.word	0x00000000
 80027bc:	40642000 	.word	0x40642000
 80027c0:	200007d8 	.word	0x200007d8
 80027c4:	20000718 	.word	0x20000718
 80027c8:	200002b0 	.word	0x200002b0
 80027cc:	20000310 	.word	0x20000310
        	if(HAL_GPIO_ReadPin(moveXplus_port, moveXplus_pin) == CNC_pos.Lsw1 ||
 80027d0:	2120      	movs	r1, #32
 80027d2:	481b      	ldr	r0, [pc, #108]	@ (8002840 <MoveToPosXY+0x370>)
 80027d4:	f004 f976 	bl	8006ac4 <HAL_GPIO_ReadPin>
 80027d8:	4603      	mov	r3, r0
 80027da:	461a      	mov	r2, r3
 80027dc:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <MoveToPosXY+0x374>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d009      	beq.n	80027f8 <MoveToPosXY+0x328>
        		HAL_GPIO_ReadPin(moveYplus_port, moveYplus_pin) == CNC_pos.Lsw3){
 80027e4:	2104      	movs	r1, #4
 80027e6:	4818      	ldr	r0, [pc, #96]	@ (8002848 <MoveToPosXY+0x378>)
 80027e8:	f004 f96c 	bl	8006ac4 <HAL_GPIO_ReadPin>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461a      	mov	r2, r3
 80027f0:	4b14      	ldr	r3, [pc, #80]	@ (8002844 <MoveToPosXY+0x374>)
 80027f2:	789b      	ldrb	r3, [r3, #2]
        	if(HAL_GPIO_ReadPin(moveXplus_port, moveXplus_pin) == CNC_pos.Lsw1 ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d101      	bne.n	80027fc <MoveToPosXY+0x32c>
        		handle_stop_button_press();
 80027f8:	f002 fa24 	bl	8004c44 <handle_stop_button_press>
        	}
        	osDelay(1);
 80027fc:	2001      	movs	r0, #1
 80027fe:	f008 fe33 	bl	800b468 <osDelay>
        while (Stepper1.run_state != STOP || Stepper2.run_state != STOP) {
 8002802:	4b12      	ldr	r3, [pc, #72]	@ (800284c <MoveToPosXY+0x37c>)
 8002804:	785b      	ldrb	r3, [r3, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e2      	bne.n	80027d0 <MoveToPosXY+0x300>
 800280a:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <MoveToPosXY+0x380>)
 800280c:	785b      	ldrb	r3, [r3, #1]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1de      	bne.n	80027d0 <MoveToPosXY+0x300>
        }
        CNC.pos_x = x;
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7fd fea8 	bl	8000568 <__aeabi_f2d>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	490d      	ldr	r1, [pc, #52]	@ (8002854 <MoveToPosXY+0x384>)
 800281e:	e9c1 2306 	strd	r2, r3, [r1, #24]
        CNC.pos_y = y;
 8002822:	6938      	ldr	r0, [r7, #16]
 8002824:	f7fd fea0 	bl	8000568 <__aeabi_f2d>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4909      	ldr	r1, [pc, #36]	@ (8002854 <MoveToPosXY+0x384>)
 800282e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    }
}
 8002832:	bf00      	nop
 8002834:	3730      	adds	r7, #48	@ 0x30
 8002836:	46bd      	mov	sp, r7
 8002838:	ecbd 8b02 	vpop	{d8}
 800283c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002840:	40020800 	.word	0x40020800
 8002844:	20000718 	.word	0x20000718
 8002848:	40020400 	.word	0x40020400
 800284c:	200002b0 	.word	0x200002b0
 8002850:	20000310 	.word	0x20000310
 8002854:	200007d8 	.word	0x200007d8

08002858 <MoveToPosZ>:
// Move Z
void MoveToPosZ(float z) {
 8002858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800285c:	b08e      	sub	sp, #56	@ 0x38
 800285e:	af06      	add	r7, sp, #24
 8002860:	ed87 0a03 	vstr	s0, [r7, #12]
    trans_to_posZ(z);
 8002864:	ed97 0a03 	vldr	s0, [r7, #12]
 8002868:	f7ff f928 	bl	8001abc <trans_to_posZ>
    CNC_pos.MoveZ = caculate_pos(CNC.set_posZ, 161);
 800286c:	4b80      	ldr	r3, [pc, #512]	@ (8002a70 <MoveToPosZ+0x218>)
 800286e:	ed93 7b04 	vldr	d7, [r3, #16]
 8002872:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 8002a68 <MoveToPosZ+0x210>
 8002876:	eeb0 0a47 	vmov.f32	s0, s14
 800287a:	eef0 0a67 	vmov.f32	s1, s15
 800287e:	f7ff f935 	bl	8001aec <caculate_pos>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f7fd fe97 	bl	80005bc <__aeabi_l2d>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4978      	ldr	r1, [pc, #480]	@ (8002a74 <MoveToPosZ+0x21c>)
 8002894:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    long long int step_max = max3(llabs(CNC_pos.MoveX), llabs(CNC_pos.MoveY), llabs(CNC_pos.MoveZ));
 8002898:	4b76      	ldr	r3, [pc, #472]	@ (8002a74 <MoveToPosZ+0x21c>)
 800289a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	f7fe fa19 	bl	8000cd8 <__aeabi_d2lz>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	da06      	bge.n	80028bc <MoveToPosZ+0x64>
 80028ae:	2100      	movs	r1, #0
 80028b0:	f1d2 0a00 	rsbs	sl, r2, #0
 80028b4:	eb61 0b03 	sbc.w	fp, r1, r3
 80028b8:	4652      	mov	r2, sl
 80028ba:	465b      	mov	r3, fp
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	f7fd fe7c 	bl	80005bc <__aeabi_l2d>
 80028c4:	4682      	mov	sl, r0
 80028c6:	468b      	mov	fp, r1
 80028c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002a74 <MoveToPosZ+0x21c>)
 80028ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80028ce:	4610      	mov	r0, r2
 80028d0:	4619      	mov	r1, r3
 80028d2:	f7fe fa01 	bl	8000cd8 <__aeabi_d2lz>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	da06      	bge.n	80028ec <MoveToPosZ+0x94>
 80028de:	2100      	movs	r1, #0
 80028e0:	f1d2 0800 	rsbs	r8, r2, #0
 80028e4:	eb61 0903 	sbc.w	r9, r1, r3
 80028e8:	4642      	mov	r2, r8
 80028ea:	464b      	mov	r3, r9
 80028ec:	4610      	mov	r0, r2
 80028ee:	4619      	mov	r1, r3
 80028f0:	f7fd fe64 	bl	80005bc <__aeabi_l2d>
 80028f4:	4680      	mov	r8, r0
 80028f6:	4689      	mov	r9, r1
 80028f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002a74 <MoveToPosZ+0x21c>)
 80028fa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	f7fe f9e9 	bl	8000cd8 <__aeabi_d2lz>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	2b00      	cmp	r3, #0
 800290c:	da05      	bge.n	800291a <MoveToPosZ+0xc2>
 800290e:	2100      	movs	r1, #0
 8002910:	4254      	negs	r4, r2
 8002912:	eb61 0503 	sbc.w	r5, r1, r3
 8002916:	4622      	mov	r2, r4
 8002918:	462b      	mov	r3, r5
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	f7fd fe4d 	bl	80005bc <__aeabi_l2d>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	ec43 2b12 	vmov	d2, r2, r3
 800292a:	ec49 8b11 	vmov	d1, r8, r9
 800292e:	ec4b ab10 	vmov	d0, sl, fp
 8002932:	f7ff fd0d 	bl	8002350 <max3>
 8002936:	ec53 2b10 	vmov	r2, r3, d0
 800293a:	4610      	mov	r0, r2
 800293c:	4619      	mov	r1, r3
 800293e:	f7fe f9cb 	bl	8000cd8 <__aeabi_d2lz>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double_t coef3 = fabs(CNC_pos.MoveZ) / step_max;
 800294a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a74 <MoveToPosZ+0x21c>)
 800294c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002950:	603a      	str	r2, [r7, #0]
 8002952:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002956:	607b      	str	r3, [r7, #4]
 8002958:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800295c:	f7fd fe2e 	bl	80005bc <__aeabi_l2d>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002968:	f7fd ff80 	bl	800086c <__aeabi_ddiv>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	e9c7 2304 	strd	r2, r3, [r7, #16]
    CNC_pos.pos3dot = CNC_pos.max_speedZ * coef3;
 8002974:	4b3f      	ldr	r3, [pc, #252]	@ (8002a74 <MoveToPosZ+0x21c>)
 8002976:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800297a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800297e:	f7fd fe4b 	bl	8000618 <__aeabi_dmul>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	493b      	ldr	r1, [pc, #236]	@ (8002a74 <MoveToPosZ+0x21c>)
 8002988:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    CNC_pos.accel3 = CNC_pos.a_maxZ * coef3;
 800298c:	4b39      	ldr	r3, [pc, #228]	@ (8002a74 <MoveToPosZ+0x21c>)
 800298e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 8002992:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002996:	f7fd fe3f 	bl	8000618 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4935      	ldr	r1, [pc, #212]	@ (8002a74 <MoveToPosZ+0x21c>)
 80029a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    CNC_pos.jerk3 = CNC_pos.j_maxZ * coef3;
 80029a4:	4b33      	ldr	r3, [pc, #204]	@ (8002a74 <MoveToPosZ+0x21c>)
 80029a6:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 80029aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029ae:	f7fd fe33 	bl	8000618 <__aeabi_dmul>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	492f      	ldr	r1, [pc, #188]	@ (8002a74 <MoveToPosZ+0x21c>)
 80029b8:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
    if (Stepper3.run_state != 1) {
 80029bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002a78 <MoveToPosZ+0x220>)
 80029be:	785b      	ldrb	r3, [r3, #1]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d04a      	beq.n	8002a5a <MoveToPosZ+0x202>
        Accel_Stepper_Move(&Stepper3, CNC_pos.MoveZ, CNC_pos.accel3, CNC_pos.jerk3, CNC_pos.pos3dot);
 80029c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a74 <MoveToPosZ+0x21c>)
 80029c6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	f7fe f983 	bl	8000cd8 <__aeabi_d2lz>
 80029d2:	4682      	mov	sl, r0
 80029d4:	468b      	mov	fp, r1
 80029d6:	4b27      	ldr	r3, [pc, #156]	@ (8002a74 <MoveToPosZ+0x21c>)
 80029d8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80029dc:	4610      	mov	r0, r2
 80029de:	4619      	mov	r1, r3
 80029e0:	f7fe f992 	bl	8000d08 <__aeabi_d2ulz>
 80029e4:	4604      	mov	r4, r0
 80029e6:	460d      	mov	r5, r1
 80029e8:	4b22      	ldr	r3, [pc, #136]	@ (8002a74 <MoveToPosZ+0x21c>)
 80029ea:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	f7fe f989 	bl	8000d08 <__aeabi_d2ulz>
 80029f6:	4680      	mov	r8, r0
 80029f8:	4689      	mov	r9, r1
 80029fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <MoveToPosZ+0x21c>)
 80029fc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	f7fe f980 	bl	8000d08 <__aeabi_d2ulz>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a10:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002a14:	e9cd 4500 	strd	r4, r5, [sp]
 8002a18:	4652      	mov	r2, sl
 8002a1a:	465b      	mov	r3, fp
 8002a1c:	4816      	ldr	r0, [pc, #88]	@ (8002a78 <MoveToPosZ+0x220>)
 8002a1e:	f7fe fd3b 	bl	8001498 <Accel_Stepper_Move>
        while(Stepper3.run_state != STOP){
 8002a22:	e00e      	b.n	8002a42 <MoveToPosZ+0x1ea>
        	if(HAL_GPIO_ReadPin(moveZplus_port, moveZplus_pin) ==  CNC_pos.Lsw5){
 8002a24:	2180      	movs	r1, #128	@ 0x80
 8002a26:	4815      	ldr	r0, [pc, #84]	@ (8002a7c <MoveToPosZ+0x224>)
 8002a28:	f004 f84c 	bl	8006ac4 <HAL_GPIO_ReadPin>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <MoveToPosZ+0x21c>)
 8002a32:	791b      	ldrb	r3, [r3, #4]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d101      	bne.n	8002a3c <MoveToPosZ+0x1e4>
        		handle_stop_button_press();
 8002a38:	f002 f904 	bl	8004c44 <handle_stop_button_press>
        	}
			osDelay(1);
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	f008 fd13 	bl	800b468 <osDelay>
        while(Stepper3.run_state != STOP){
 8002a42:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <MoveToPosZ+0x220>)
 8002a44:	785b      	ldrb	r3, [r3, #1]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ec      	bne.n	8002a24 <MoveToPosZ+0x1cc>
		}
        CNC.pos_z = z;
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f7fd fd8c 	bl	8000568 <__aeabi_f2d>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4906      	ldr	r1, [pc, #24]	@ (8002a70 <MoveToPosZ+0x218>)
 8002a56:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    }
}
 8002a5a:	bf00      	nop
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a64:	f3af 8000 	nop.w
 8002a68:	00000000 	.word	0x00000000
 8002a6c:	40642000 	.word	0x40642000
 8002a70:	200007d8 	.word	0x200007d8
 8002a74:	20000718 	.word	0x20000718
 8002a78:	20000370 	.word	0x20000370
 8002a7c:	40021000 	.word	0x40021000

08002a80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HOME();
 8002a88:	f7ff fcae 	bl	80023e8 <HOME>
  initializeCNC_pos(&CNC_pos);
 8002a8c:	4826      	ldr	r0, [pc, #152]	@ (8002b28 <StartDefaultTask+0xa8>)
 8002a8e:	f7fe ff5f 	bl	8001950 <initializeCNC_pos>
  Accel_Stepper_SetPin(&Stepper1, step_1_GPIO_Port, step_1_pin, dir_1_GPIO_Port, dir_1_pin);
 8002a92:	2302      	movs	r3, #2
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	4b25      	ldr	r3, [pc, #148]	@ (8002b2c <StartDefaultTask+0xac>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	4924      	ldr	r1, [pc, #144]	@ (8002b2c <StartDefaultTask+0xac>)
 8002a9c:	4824      	ldr	r0, [pc, #144]	@ (8002b30 <StartDefaultTask+0xb0>)
 8002a9e:	f7fe fab1 	bl	8001004 <Accel_Stepper_SetPin>
  Accel_Stepper_SetPin(&Stepper2, step_2_GPIO_Port, step_2_pin, dir_2_GPIO_Port, dir_2_pin);
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	4b21      	ldr	r3, [pc, #132]	@ (8002b2c <StartDefaultTask+0xac>)
 8002aa8:	2204      	movs	r2, #4
 8002aaa:	4920      	ldr	r1, [pc, #128]	@ (8002b2c <StartDefaultTask+0xac>)
 8002aac:	4821      	ldr	r0, [pc, #132]	@ (8002b34 <StartDefaultTask+0xb4>)
 8002aae:	f7fe faa9 	bl	8001004 <Accel_Stepper_SetPin>
  Accel_Stepper_SetPin(&Stepper3, step_3_GPIO_Port, step_3_pin, dir_3_GPIO_Port, dir_3_pin);
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b2c <StartDefaultTask+0xac>)
 8002ab8:	2210      	movs	r2, #16
 8002aba:	491c      	ldr	r1, [pc, #112]	@ (8002b2c <StartDefaultTask+0xac>)
 8002abc:	481e      	ldr	r0, [pc, #120]	@ (8002b38 <StartDefaultTask+0xb8>)
 8002abe:	f7fe faa1 	bl	8001004 <Accel_Stepper_SetPin>

  Accel_Stepper_SetTimer(&Stepper1, &htim2);
 8002ac2:	491e      	ldr	r1, [pc, #120]	@ (8002b3c <StartDefaultTask+0xbc>)
 8002ac4:	481a      	ldr	r0, [pc, #104]	@ (8002b30 <StartDefaultTask+0xb0>)
 8002ac6:	f7fe fab9 	bl	800103c <Accel_Stepper_SetTimer>
  Accel_Stepper_SetTimer(&Stepper2, &htim3);
 8002aca:	491d      	ldr	r1, [pc, #116]	@ (8002b40 <StartDefaultTask+0xc0>)
 8002acc:	4819      	ldr	r0, [pc, #100]	@ (8002b34 <StartDefaultTask+0xb4>)
 8002ace:	f7fe fab5 	bl	800103c <Accel_Stepper_SetTimer>
  Accel_Stepper_SetTimer(&Stepper3, &htim4);
 8002ad2:	491c      	ldr	r1, [pc, #112]	@ (8002b44 <StartDefaultTask+0xc4>)
 8002ad4:	4818      	ldr	r0, [pc, #96]	@ (8002b38 <StartDefaultTask+0xb8>)
 8002ad6:	f7fe fab1 	bl	800103c <Accel_Stepper_SetTimer>

  CNC.pos_x = 0;
 8002ada:	491b      	ldr	r1, [pc, #108]	@ (8002b48 <StartDefaultTask+0xc8>)
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9c1 2306 	strd	r2, r3, [r1, #24]
  CNC.pos_y = 0;
 8002ae8:	4917      	ldr	r1, [pc, #92]	@ (8002b48 <StartDefaultTask+0xc8>)
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	e9c1 2308 	strd	r2, r3, [r1, #32]
  CNC.pos_z = 0;
 8002af6:	4914      	ldr	r1, [pc, #80]	@ (8002b48 <StartDefaultTask+0xc8>)
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

  //vTaskDelay(pdMS_TO_TICKS(2000));
  /* Infinite loop */
  for(;;)
  {
      if (state.start_press) {
 8002b04:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <StartDefaultTask+0xcc>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <StartDefaultTask+0x9e>
    	  HAL_GPIO_WritePin(drill_port, drill_pin, 1);
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b14:	480e      	ldr	r0, [pc, #56]	@ (8002b50 <StartDefaultTask+0xd0>)
 8002b16:	f003 ffed 	bl	8006af4 <HAL_GPIO_WritePin>
          move_to_coordinates();
 8002b1a:	f7ff fab7 	bl	800208c <move_to_coordinates>
      }

    osDelay(1);
 8002b1e:	2001      	movs	r0, #1
 8002b20:	f008 fca2 	bl	800b468 <osDelay>
      if (state.start_press) {
 8002b24:	e7ee      	b.n	8002b04 <StartDefaultTask+0x84>
 8002b26:	bf00      	nop
 8002b28:	20000718 	.word	0x20000718
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	200002b0 	.word	0x200002b0
 8002b34:	20000310 	.word	0x20000310
 8002b38:	20000370 	.word	0x20000370
 8002b3c:	20000a20 	.word	0x20000a20
 8002b40:	20000a68 	.word	0x20000a68
 8002b44:	20000ab0 	.word	0x20000ab0
 8002b48:	200007d8 	.word	0x200007d8
 8002b4c:	200009c8 	.word	0x200009c8
 8002b50:	40020400 	.word	0x40020400

08002b54 <StartADC>:
* @retval None
*/

/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
  /* Infinite loop */
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)LCD_adc.readValue, 2);
  initialize_Kalman(&kalman_fil_volt);
 8002b5c:	4806      	ldr	r0, [pc, #24]	@ (8002b78 <StartADC+0x24>)
 8002b5e:	f000 fc1b 	bl	8003398 <initialize_Kalman>
  initialize_Kalman(&kalman_fil_curr);
 8002b62:	4806      	ldr	r0, [pc, #24]	@ (8002b7c <StartADC+0x28>)
 8002b64:	f000 fc18 	bl	8003398 <initialize_Kalman>
  for(;;)
  {
	startADC();
 8002b68:	f000 ffbc 	bl	8003ae4 <startADC>
    osDelay(1);
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	f008 fc7b 	bl	800b468 <osDelay>
	startADC();
 8002b72:	bf00      	nop
 8002b74:	e7f8      	b.n	8002b68 <StartADC+0x14>
 8002b76:	bf00      	nop
 8002b78:	20000978 	.word	0x20000978
 8002b7c:	20000928 	.word	0x20000928

08002b80 <StartLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD */
void StartLCD(void *argument)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD */
  /* Infinite loop */
  initialize_LCD(&LCD_adc);
 8002b88:	4808      	ldr	r0, [pc, #32]	@ (8002bac <StartLCD+0x2c>)
 8002b8a:	f000 fbd9 	bl	8003340 <initialize_LCD>
  initialize_Kalman(&kalman_fil_curr);
 8002b8e:	4808      	ldr	r0, [pc, #32]	@ (8002bb0 <StartLCD+0x30>)
 8002b90:	f000 fc02 	bl	8003398 <initialize_Kalman>
  initialize_Kalman(&kalman_fil_volt);
 8002b94:	4807      	ldr	r0, [pc, #28]	@ (8002bb4 <StartLCD+0x34>)
 8002b96:	f000 fbff 	bl	8003398 <initialize_Kalman>
  display_menu();
 8002b9a:	f001 f863 	bl	8003c64 <display_menu>
  for(;;)
  {
	ButtonTask();
 8002b9e:	f001 fd67 	bl	8004670 <ButtonTask>
    osDelay(1);
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f008 fc60 	bl	800b468 <osDelay>
	ButtonTask();
 8002ba8:	bf00      	nop
 8002baa:	e7f8      	b.n	8002b9e <StartLCD+0x1e>
 8002bac:	2000085c 	.word	0x2000085c
 8002bb0:	20000928 	.word	0x20000928
 8002bb4:	20000978 	.word	0x20000978

08002bb8 <StartUART_TX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_TX */
void StartUART_TX(void *argument)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART_TX */
  /* Infinite loop */
  UART_transmit_init();
 8002bc0:	f7ff f8c6 	bl	8001d50 <UART_transmit_init>
  for(;;)
  {
    osDelay(1000);  // Delay 1000 milliseconds (1 second)
 8002bc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bc8:	f008 fc4e 	bl	800b468 <osDelay>
    send_uart_data();  // Send data every second
 8002bcc:	f7ff f8c6 	bl	8001d5c <send_uart_data>
    osDelay(1000);  // Delay 1000 milliseconds (1 second)
 8002bd0:	bf00      	nop
 8002bd2:	e7f7      	b.n	8002bc4 <StartUART_TX+0xc>

08002bd4 <StartUART_RX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_RX */

void StartUART_RX(void *argument) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartUART_RX */
    /* Initialize UART receive in DMA mode */
    UART_RECEIVE_Init();
 8002bdc:	f7ff f8f4 	bl	8001dc8 <UART_RECEIVE_Init>
    /* Infinite loop */
    for(;;)
    {
        if (osSemaphoreAcquire(uartRxSemaphoreHandle, osWaitForever) == osOK) {
 8002be0:	4b07      	ldr	r3, [pc, #28]	@ (8002c00 <StartUART_RX+0x2c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f04f 31ff 	mov.w	r1, #4294967295
 8002be8:	4618      	mov	r0, r3
 8002bea:	f008 fdef 	bl	800b7cc <osSemaphoreAcquire>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <StartUART_RX+0x24>
            UART_rx_process();
 8002bf4:	f7ff fac8 	bl	8002188 <UART_rx_process>
        }
        osDelay(1);
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f008 fc35 	bl	800b468 <osDelay>
        if (osSemaphoreAcquire(uartRxSemaphoreHandle, osWaitForever) == osOK) {
 8002bfe:	e7ef      	b.n	8002be0 <StartUART_RX+0xc>
 8002c00:	200006fc 	.word	0x200006fc

08002c04 <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  lcdMutexHandle = osMutexNew(&lcdMutex_attributes);
 8002c08:	481b      	ldr	r0, [pc, #108]	@ (8002c78 <MX_FREERTOS_Init+0x74>)
 8002c0a:	f008 fc48 	bl	800b49e <osMutexNew>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4a1a      	ldr	r2, [pc, #104]	@ (8002c7c <MX_FREERTOS_Init+0x78>)
 8002c12:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  uartRxSemaphoreHandle = osSemaphoreNew(1, 1, &uartRxSemaphore_attributes);
 8002c14:	4a1a      	ldr	r2, [pc, #104]	@ (8002c80 <MX_FREERTOS_Init+0x7c>)
 8002c16:	2101      	movs	r1, #1
 8002c18:	2001      	movs	r0, #1
 8002c1a:	f008 fd4e 	bl	800b6ba <osSemaphoreNew>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4a18      	ldr	r2, [pc, #96]	@ (8002c84 <MX_FREERTOS_Init+0x80>)
 8002c22:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002c24:	4a18      	ldr	r2, [pc, #96]	@ (8002c88 <MX_FREERTOS_Init+0x84>)
 8002c26:	2100      	movs	r1, #0
 8002c28:	4818      	ldr	r0, [pc, #96]	@ (8002c8c <MX_FREERTOS_Init+0x88>)
 8002c2a:	f008 fb8b 	bl	800b344 <osThreadNew>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4a17      	ldr	r2, [pc, #92]	@ (8002c90 <MX_FREERTOS_Init+0x8c>)
 8002c32:	6013      	str	r3, [r2, #0]

  /* creation of startADC */
  startADCHandle = osThreadNew(StartADC, NULL, &startADC_attributes);
 8002c34:	4a17      	ldr	r2, [pc, #92]	@ (8002c94 <MX_FREERTOS_Init+0x90>)
 8002c36:	2100      	movs	r1, #0
 8002c38:	4817      	ldr	r0, [pc, #92]	@ (8002c98 <MX_FREERTOS_Init+0x94>)
 8002c3a:	f008 fb83 	bl	800b344 <osThreadNew>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4a16      	ldr	r2, [pc, #88]	@ (8002c9c <MX_FREERTOS_Init+0x98>)
 8002c42:	6013      	str	r3, [r2, #0]

  /* creation of startLCD */
  startLCDHandle = osThreadNew(StartLCD, NULL, &startLCD_attributes);
 8002c44:	4a16      	ldr	r2, [pc, #88]	@ (8002ca0 <MX_FREERTOS_Init+0x9c>)
 8002c46:	2100      	movs	r1, #0
 8002c48:	4816      	ldr	r0, [pc, #88]	@ (8002ca4 <MX_FREERTOS_Init+0xa0>)
 8002c4a:	f008 fb7b 	bl	800b344 <osThreadNew>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4a15      	ldr	r2, [pc, #84]	@ (8002ca8 <MX_FREERTOS_Init+0xa4>)
 8002c52:	6013      	str	r3, [r2, #0]

  /* creation of startUART_TX */
  startUART_TXHandle = osThreadNew(StartUART_TX, NULL, &startUART_TX_attributes);
 8002c54:	4a15      	ldr	r2, [pc, #84]	@ (8002cac <MX_FREERTOS_Init+0xa8>)
 8002c56:	2100      	movs	r1, #0
 8002c58:	4815      	ldr	r0, [pc, #84]	@ (8002cb0 <MX_FREERTOS_Init+0xac>)
 8002c5a:	f008 fb73 	bl	800b344 <osThreadNew>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4a14      	ldr	r2, [pc, #80]	@ (8002cb4 <MX_FREERTOS_Init+0xb0>)
 8002c62:	6013      	str	r3, [r2, #0]

  /* creation of startUART_RX */
  startUART_RXHandle = osThreadNew(StartUART_RX, NULL, &startUART_RX_attributes);
 8002c64:	4a14      	ldr	r2, [pc, #80]	@ (8002cb8 <MX_FREERTOS_Init+0xb4>)
 8002c66:	2100      	movs	r1, #0
 8002c68:	4814      	ldr	r0, [pc, #80]	@ (8002cbc <MX_FREERTOS_Init+0xb8>)
 8002c6a:	f008 fb6b 	bl	800b344 <osThreadNew>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4a13      	ldr	r2, [pc, #76]	@ (8002cc0 <MX_FREERTOS_Init+0xbc>)
 8002c72:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	08014f98 	.word	0x08014f98
 8002c7c:	200006f8 	.word	0x200006f8
 8002c80:	08014fa8 	.word	0x08014fa8
 8002c84:	200006fc 	.word	0x200006fc
 8002c88:	08014fb8 	.word	0x08014fb8
 8002c8c:	08002a81 	.word	0x08002a81
 8002c90:	20000700 	.word	0x20000700
 8002c94:	08014fdc 	.word	0x08014fdc
 8002c98:	08002b55 	.word	0x08002b55
 8002c9c:	20000704 	.word	0x20000704
 8002ca0:	08015000 	.word	0x08015000
 8002ca4:	08002b81 	.word	0x08002b81
 8002ca8:	20000708 	.word	0x20000708
 8002cac:	08015024 	.word	0x08015024
 8002cb0:	08002bb9 	.word	0x08002bb9
 8002cb4:	2000070c 	.word	0x2000070c
 8002cb8:	08015048 	.word	0x08015048
 8002cbc:	08002bd5 	.word	0x08002bd5
 8002cc0:	20000710 	.word	0x20000710

08002cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08c      	sub	sp, #48	@ 0x30
 8002cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cca:	f107 031c 	add.w	r3, r7, #28
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	60da      	str	r2, [r3, #12]
 8002cd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	4b7c      	ldr	r3, [pc, #496]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	4a7b      	ldr	r2, [pc, #492]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cea:	4b79      	ldr	r3, [pc, #484]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	4b75      	ldr	r3, [pc, #468]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	4a74      	ldr	r2, [pc, #464]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002d00:	f043 0304 	orr.w	r3, r3, #4
 8002d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d06:	4b72      	ldr	r3, [pc, #456]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	4b6e      	ldr	r3, [pc, #440]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	4a6d      	ldr	r2, [pc, #436]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d22:	4b6b      	ldr	r3, [pc, #428]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	4b67      	ldr	r3, [pc, #412]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	4a66      	ldr	r2, [pc, #408]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d3e:	4b64      	ldr	r3, [pc, #400]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	4b60      	ldr	r3, [pc, #384]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	4a5f      	ldr	r2, [pc, #380]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002d54:	f043 0310 	orr.w	r3, r3, #16
 8002d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	4b59      	ldr	r3, [pc, #356]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	4a58      	ldr	r2, [pc, #352]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002d70:	f043 0308 	orr.w	r3, r3, #8
 8002d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d76:	4b56      	ldr	r3, [pc, #344]	@ (8002ed0 <MX_GPIO_Init+0x20c>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, step_1_pin|dir_1_pin|step_2_pin|dir_2_pin
 8002d82:	2200      	movs	r2, #0
 8002d84:	213f      	movs	r1, #63	@ 0x3f
 8002d86:	4853      	ldr	r0, [pc, #332]	@ (8002ed4 <MX_GPIO_Init+0x210>)
 8002d88:	f003 feb4 	bl	8006af4 <HAL_GPIO_WritePin>
                          |step_3_pin|dir_3_pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, led1_pin|led2_pin, GPIO_PIN_RESET);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8002d92:	4851      	ldr	r0, [pc, #324]	@ (8002ed8 <MX_GPIO_Init+0x214>)
 8002d94:	f003 feae 	bl	8006af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led3_pin|drill_pin, GPIO_PIN_RESET);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8002d9e:	484f      	ldr	r0, [pc, #316]	@ (8002edc <MX_GPIO_Init+0x218>)
 8002da0:	f003 fea8 	bl	8006af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 */
  GPIO_InitStruct.Pin = step_1_pin|dir_1_pin|step_2_pin|dir_2_pin
 8002da4:	233f      	movs	r3, #63	@ 0x3f
 8002da6:	61fb      	str	r3, [r7, #28]
                          |step_3_pin|dir_3_pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da8:	2301      	movs	r3, #1
 8002daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db4:	f107 031c 	add.w	r3, r7, #28
 8002db8:	4619      	mov	r1, r3
 8002dba:	4846      	ldr	r0, [pc, #280]	@ (8002ed4 <MX_GPIO_Init+0x210>)
 8002dbc:	f003 fce6 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = backKey|start_pin;
 8002dc0:	23c0      	movs	r3, #192	@ 0xc0
 8002dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002dc4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dce:	f107 031c 	add.w	r3, r7, #28
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	483f      	ldr	r0, [pc, #252]	@ (8002ed4 <MX_GPIO_Init+0x210>)
 8002dd6:	f003 fcd9 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = downKey;
 8002dda:	2310      	movs	r3, #16
 8002ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002dde:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de4:	2301      	movs	r3, #1
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de8:	f107 031c 	add.w	r3, r7, #28
 8002dec:	4619      	mov	r1, r3
 8002dee:	483c      	ldr	r0, [pc, #240]	@ (8002ee0 <MX_GPIO_Init+0x21c>)
 8002df0:	f003 fccc 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = moveXplus_pin;
 8002df4:	2320      	movs	r3, #32
 8002df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	4619      	mov	r1, r3
 8002e06:	4836      	ldr	r0, [pc, #216]	@ (8002ee0 <MX_GPIO_Init+0x21c>)
 8002e08:	f003 fcc0 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = moveXsub_pin|moveYplus_pin|moveYsub_pin|GPIO_PIN_12;
 8002e0c:	f241 0307 	movw	r3, #4103	@ 0x1007
 8002e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e16:	2301      	movs	r3, #1
 8002e18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	4619      	mov	r1, r3
 8002e20:	482e      	ldr	r0, [pc, #184]	@ (8002edc <MX_GPIO_Init+0x218>)
 8002e22:	f003 fcb3 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = moveZplus_pin|moveZsub_pin;
 8002e26:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e30:	2301      	movs	r3, #1
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e34:	f107 031c 	add.w	r3, r7, #28
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4827      	ldr	r0, [pc, #156]	@ (8002ed8 <MX_GPIO_Init+0x214>)
 8002e3c:	f003 fca6 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE11 PE12 */
  GPIO_InitStruct.Pin = stop_pin|upKey|resetKey|selectKey;
 8002e40:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8002e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e46:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e50:	f107 031c 	add.w	r3, r7, #28
 8002e54:	4619      	mov	r1, r3
 8002e56:	4820      	ldr	r0, [pc, #128]	@ (8002ed8 <MX_GPIO_Init+0x214>)
 8002e58:	f003 fc98 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE15 */
  GPIO_InitStruct.Pin = led1_pin|led2_pin;
 8002e5c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e62:	2301      	movs	r3, #1
 8002e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e6e:	f107 031c 	add.w	r3, r7, #28
 8002e72:	4619      	mov	r1, r3
 8002e74:	4818      	ldr	r0, [pc, #96]	@ (8002ed8 <MX_GPIO_Init+0x214>)
 8002e76:	f003 fc89 	bl	800678c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 */
  GPIO_InitStruct.Pin = led3_pin|drill_pin;
 8002e7a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e80:	2301      	movs	r3, #1
 8002e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8c:	f107 031c 	add.w	r3, r7, #28
 8002e90:	4619      	mov	r1, r3
 8002e92:	4812      	ldr	r0, [pc, #72]	@ (8002edc <MX_GPIO_Init+0x218>)
 8002e94:	f003 fc7a 	bl	800678c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2105      	movs	r1, #5
 8002e9c:	200a      	movs	r0, #10
 8002e9e:	f003 fb9e 	bl	80065de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002ea2:	200a      	movs	r0, #10
 8002ea4:	f003 fbb7 	bl	8006616 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2105      	movs	r1, #5
 8002eac:	2017      	movs	r0, #23
 8002eae:	f003 fb96 	bl	80065de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002eb2:	2017      	movs	r0, #23
 8002eb4:	f003 fbaf 	bl	8006616 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2105      	movs	r1, #5
 8002ebc:	2028      	movs	r0, #40	@ 0x28
 8002ebe:	f003 fb8e 	bl	80065de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ec2:	2028      	movs	r0, #40	@ 0x28
 8002ec4:	f003 fba7 	bl	8006616 <HAL_NVIC_EnableIRQ>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ec8:	bf00      	nop
 8002eca:	3730      	adds	r7, #48	@ 0x30
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40020000 	.word	0x40020000
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40020400 	.word	0x40020400
 8002ee0:	40020800 	.word	0x40020800

08002ee4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ee8:	4b12      	ldr	r3, [pc, #72]	@ (8002f34 <MX_I2C1_Init+0x50>)
 8002eea:	4a13      	ldr	r2, [pc, #76]	@ (8002f38 <MX_I2C1_Init+0x54>)
 8002eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002eee:	4b11      	ldr	r3, [pc, #68]	@ (8002f34 <MX_I2C1_Init+0x50>)
 8002ef0:	4a12      	ldr	r2, [pc, #72]	@ (8002f3c <MX_I2C1_Init+0x58>)
 8002ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f34 <MX_I2C1_Init+0x50>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002efa:	4b0e      	ldr	r3, [pc, #56]	@ (8002f34 <MX_I2C1_Init+0x50>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f00:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <MX_I2C1_Init+0x50>)
 8002f02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f08:	4b0a      	ldr	r3, [pc, #40]	@ (8002f34 <MX_I2C1_Init+0x50>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f0e:	4b09      	ldr	r3, [pc, #36]	@ (8002f34 <MX_I2C1_Init+0x50>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f14:	4b07      	ldr	r3, [pc, #28]	@ (8002f34 <MX_I2C1_Init+0x50>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f1a:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <MX_I2C1_Init+0x50>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f20:	4804      	ldr	r0, [pc, #16]	@ (8002f34 <MX_I2C1_Init+0x50>)
 8002f22:	f003 fe33 	bl	8006b8c <HAL_I2C_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f2c:	f000 fa02 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f30:	bf00      	nop
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000808 	.word	0x20000808
 8002f38:	40005400 	.word	0x40005400
 8002f3c:	000186a0 	.word	0x000186a0

08002f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	@ 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a21      	ldr	r2, [pc, #132]	@ (8002fe4 <HAL_I2C_MspInit+0xa4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d13b      	bne.n	8002fda <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	4b20      	ldr	r3, [pc, #128]	@ (8002fe8 <HAL_I2C_MspInit+0xa8>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe8 <HAL_I2C_MspInit+0xa8>)
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f72:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe8 <HAL_I2C_MspInit+0xa8>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f7e:	23c0      	movs	r3, #192	@ 0xc0
 8002f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f82:	2312      	movs	r3, #18
 8002f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f8e:	2304      	movs	r3, #4
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f92:	f107 0314 	add.w	r3, r7, #20
 8002f96:	4619      	mov	r1, r3
 8002f98:	4814      	ldr	r0, [pc, #80]	@ (8002fec <HAL_I2C_MspInit+0xac>)
 8002f9a:	f003 fbf7 	bl	800678c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <HAL_I2C_MspInit+0xa8>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	4a10      	ldr	r2, [pc, #64]	@ (8002fe8 <HAL_I2C_MspInit+0xa8>)
 8002fa8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fae:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe8 <HAL_I2C_MspInit+0xa8>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2105      	movs	r1, #5
 8002fbe:	201f      	movs	r0, #31
 8002fc0:	f003 fb0d 	bl	80065de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002fc4:	201f      	movs	r0, #31
 8002fc6:	f003 fb26 	bl	8006616 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2105      	movs	r1, #5
 8002fce:	2020      	movs	r0, #32
 8002fd0:	f003 fb05 	bl	80065de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002fd4:	2020      	movs	r0, #32
 8002fd6:	f003 fb1e 	bl	8006616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002fda:	bf00      	nop
 8002fdc:	3728      	adds	r7, #40	@ 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40005400 	.word	0x40005400
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40020400 	.word	0x40020400

08002ff0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // Change your handler here accordingly
#define SLAVE_ADDRESS_LCD 0x4E    // Change this according to your setup
extern osMutexId_t lcdMutexHandle;
extern osSemaphoreId_t uartRxSemaphoreHandle;

void lcd_send_cmd(char cmd) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xF0);
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	f023 030f 	bic.w	r3, r3, #15
 8003000:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xF0);
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C;  // EN=1, RS=0
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	f043 030c 	orr.w	r3, r3, #12
 800300e:	b2db      	uxtb	r3, r3
 8003010:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;  // EN=0, RS=0
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	f043 0308 	orr.w	r3, r3, #8
 8003018:	b2db      	uxtb	r3, r3
 800301a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C;  // EN=1, RS=0
 800301c:	7bbb      	ldrb	r3, [r7, #14]
 800301e:	f043 030c 	orr.w	r3, r3, #12
 8003022:	b2db      	uxtb	r3, r3
 8003024:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;  // EN=0, RS=0
 8003026:	7bbb      	ldrb	r3, [r7, #14]
 8003028:	f043 0308 	orr.w	r3, r3, #8
 800302c:	b2db      	uxtb	r3, r3
 800302e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8003030:	f107 0208 	add.w	r2, r7, #8
 8003034:	2364      	movs	r3, #100	@ 0x64
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2304      	movs	r3, #4
 800303a:	214e      	movs	r1, #78	@ 0x4e
 800303c:	4803      	ldr	r0, [pc, #12]	@ (800304c <lcd_send_cmd+0x5c>)
 800303e:	f003 feff 	bl	8006e40 <HAL_I2C_Master_Transmit>
}
 8003042:	bf00      	nop
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000808 	.word	0x20000808

08003050 <lcd_send_data>:

void lcd_send_data(char data) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af02      	add	r7, sp, #8
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xF0);
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	f023 030f 	bic.w	r3, r3, #15
 8003060:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xF0);
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D;  // EN=1, RS=1
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	f043 030d 	orr.w	r3, r3, #13
 800306e:	b2db      	uxtb	r3, r3
 8003070:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  // EN=0, RS=1
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	f043 0309 	orr.w	r3, r3, #9
 8003078:	b2db      	uxtb	r3, r3
 800307a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  // EN=1, RS=1
 800307c:	7bbb      	ldrb	r3, [r7, #14]
 800307e:	f043 030d 	orr.w	r3, r3, #13
 8003082:	b2db      	uxtb	r3, r3
 8003084:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  // EN=0, RS=1
 8003086:	7bbb      	ldrb	r3, [r7, #14]
 8003088:	f043 0309 	orr.w	r3, r3, #9
 800308c:	b2db      	uxtb	r3, r3
 800308e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8003090:	f107 0208 	add.w	r2, r7, #8
 8003094:	2364      	movs	r3, #100	@ 0x64
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2304      	movs	r3, #4
 800309a:	214e      	movs	r1, #78	@ 0x4e
 800309c:	4803      	ldr	r0, [pc, #12]	@ (80030ac <lcd_send_data+0x5c>)
 800309e:	f003 fecf 	bl	8006e40 <HAL_I2C_Master_Transmit>
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000808 	.word	0x20000808

080030b0 <lcd_clear>:

void lcd_clear(void) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
    osMutexAcquire(lcdMutexHandle, osWaitForever);
 80030b4:	4b09      	ldr	r3, [pc, #36]	@ (80030dc <lcd_clear+0x2c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295
 80030bc:	4618      	mov	r0, r3
 80030be:	f008 fa74 	bl	800b5aa <osMutexAcquire>
    lcd_send_cmd(0x01);  // Clear display
 80030c2:	2001      	movs	r0, #1
 80030c4:	f7ff ff94 	bl	8002ff0 <lcd_send_cmd>
    HAL_Delay(2);        // Delay for clearing
 80030c8:	2002      	movs	r0, #2
 80030ca:	f002 fc51 	bl	8005970 <HAL_Delay>
    osMutexRelease(lcdMutexHandle);
 80030ce:	4b03      	ldr	r3, [pc, #12]	@ (80030dc <lcd_clear+0x2c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f008 fab4 	bl	800b640 <osMutexRelease>
}
 80030d8:	bf00      	nop
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	200006f8 	.word	0x200006f8

080030e0 <lcd_put_cur>:

void lcd_put_cur(int row, int col) {
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
    int row_offsets[] = {0x00, 0x40, 0x14, 0x54}; // Line offsets for 20x04 LCD
 80030ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003124 <lcd_put_cur+0x44>)
 80030ec:	f107 0408 	add.w	r4, r7, #8
 80030f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lcd_send_cmd(0x80 | (col + row_offsets[row])); // Set DDRAM address
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	3318      	adds	r3, #24
 80030fc:	443b      	add	r3, r7
 80030fe:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	4413      	add	r3, r2
 800310a:	b2db      	uxtb	r3, r3
 800310c:	b25b      	sxtb	r3, r3
 800310e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003112:	b25b      	sxtb	r3, r3
 8003114:	b2db      	uxtb	r3, r3
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ff6a 	bl	8002ff0 <lcd_send_cmd>
}
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	bd90      	pop	{r4, r7, pc}
 8003124:	08014d40 	.word	0x08014d40

08003128 <lcd_init>:

void lcd_init(void) {
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
    HAL_Delay(50);        // Wait for >40ms
 800312c:	2032      	movs	r0, #50	@ 0x32
 800312e:	f002 fc1f 	bl	8005970 <HAL_Delay>
    lcd_send_cmd(0x33);   // Initialization sequence for 4-bit mode
 8003132:	2033      	movs	r0, #51	@ 0x33
 8003134:	f7ff ff5c 	bl	8002ff0 <lcd_send_cmd>
    HAL_Delay(5);         // Wait for >4.1ms
 8003138:	2005      	movs	r0, #5
 800313a:	f002 fc19 	bl	8005970 <HAL_Delay>
    lcd_send_cmd(0x32);   // Initialization sequence for 4-bit mode
 800313e:	2032      	movs	r0, #50	@ 0x32
 8003140:	f7ff ff56 	bl	8002ff0 <lcd_send_cmd>
    HAL_Delay(1);         // Wait for >100us
 8003144:	2001      	movs	r0, #1
 8003146:	f002 fc13 	bl	8005970 <HAL_Delay>

    // Display initialization
    lcd_send_cmd(0x28);   // Function set: DL=0 (4-bit mode), N=2 (2 lines), F=0 (5x8 dots)
 800314a:	2028      	movs	r0, #40	@ 0x28
 800314c:	f7ff ff50 	bl	8002ff0 <lcd_send_cmd>
    HAL_Delay(1);
 8003150:	2001      	movs	r0, #1
 8003152:	f002 fc0d 	bl	8005970 <HAL_Delay>
    lcd_send_cmd(0x08);   // Display on/off control: D=0, C=0, B=0 (Display off)
 8003156:	2008      	movs	r0, #8
 8003158:	f7ff ff4a 	bl	8002ff0 <lcd_send_cmd>
    HAL_Delay(1);
 800315c:	2001      	movs	r0, #1
 800315e:	f002 fc07 	bl	8005970 <HAL_Delay>
    lcd_send_cmd(0x01);   // Clear display
 8003162:	2001      	movs	r0, #1
 8003164:	f7ff ff44 	bl	8002ff0 <lcd_send_cmd>
    HAL_Delay(2);
 8003168:	2002      	movs	r0, #2
 800316a:	f002 fc01 	bl	8005970 <HAL_Delay>
    lcd_send_cmd(0x06);   // Entry mode set: I/D=1 (Increment), S=0 (No shift)
 800316e:	2006      	movs	r0, #6
 8003170:	f7ff ff3e 	bl	8002ff0 <lcd_send_cmd>
    HAL_Delay(1);
 8003174:	2001      	movs	r0, #1
 8003176:	f002 fbfb 	bl	8005970 <HAL_Delay>
    lcd_send_cmd(0x0C);   // Display on/off control: D=1, C=0, B=0 (Display on, cursor off, blink off)
 800317a:	200c      	movs	r0, #12
 800317c:	f7ff ff38 	bl	8002ff0 <lcd_send_cmd>
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}

08003184 <lcd_send_string>:

void lcd_send_string(char *str) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
    osMutexAcquire(lcdMutexHandle, osWaitForever);
 800318c:	4b0d      	ldr	r3, [pc, #52]	@ (80031c4 <lcd_send_string+0x40>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f04f 31ff 	mov.w	r1, #4294967295
 8003194:	4618      	mov	r0, r3
 8003196:	f008 fa08 	bl	800b5aa <osMutexAcquire>
    while (*str) {
 800319a:	e006      	b.n	80031aa <lcd_send_string+0x26>
        lcd_send_data(*str++);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff53 	bl	8003050 <lcd_send_data>
    while (*str) {
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f4      	bne.n	800319c <lcd_send_string+0x18>
    }
    osMutexRelease(lcdMutexHandle);
 80031b2:	4b04      	ldr	r3, [pc, #16]	@ (80031c4 <lcd_send_string+0x40>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f008 fa42 	bl	800b640 <osMutexRelease>
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	200006f8 	.word	0x200006f8

080031c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031cc:	f002 fb5e 	bl	800588c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031d0:	f000 f81c 	bl	800320c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031d4:	f7ff fd76 	bl	8002cc4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80031d8:	f7fe fca2 	bl	8001b20 <MX_ADC1_Init>
  MX_I2C1_Init();
 80031dc:	f7ff fe82 	bl	8002ee4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80031e0:	f002 f824 	bl	800522c <MX_TIM1_Init>
  MX_TIM2_Init();
 80031e4:	f002 f872 	bl	80052cc <MX_TIM2_Init>
  MX_TIM3_Init();
 80031e8:	f002 f8bc 	bl	8005364 <MX_TIM3_Init>
  MX_TIM4_Init();
 80031ec:	f002 f908 	bl	8005400 <MX_TIM4_Init>
  MX_TIM5_Init();
 80031f0:	f002 f954 	bl	800549c <MX_TIM5_Init>
  MX_TIM6_Init();
 80031f4:	f002 f9a0 	bl	8005538 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80031f8:	f002 fa90 	bl	800571c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80031fc:	f008 f858 	bl	800b2b0 <osKernelInitialize>

  MX_FREERTOS_Init();
 8003200:	f7ff fd00 	bl	8002c04 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003204:	f008 f878 	bl	800b2f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003208:	bf00      	nop
 800320a:	e7fd      	b.n	8003208 <main+0x40>

0800320c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b094      	sub	sp, #80	@ 0x50
 8003210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003212:	f107 0320 	add.w	r3, r7, #32
 8003216:	2230      	movs	r2, #48	@ 0x30
 8003218:	2100      	movs	r1, #0
 800321a:	4618      	mov	r0, r3
 800321c:	f00c fdf7 	bl	800fe0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003220:	f107 030c 	add.w	r3, r7, #12
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	4b28      	ldr	r3, [pc, #160]	@ (80032d8 <SystemClock_Config+0xcc>)
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	4a27      	ldr	r2, [pc, #156]	@ (80032d8 <SystemClock_Config+0xcc>)
 800323a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800323e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003240:	4b25      	ldr	r3, [pc, #148]	@ (80032d8 <SystemClock_Config+0xcc>)
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800324c:	2300      	movs	r3, #0
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	4b22      	ldr	r3, [pc, #136]	@ (80032dc <SystemClock_Config+0xd0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a21      	ldr	r2, [pc, #132]	@ (80032dc <SystemClock_Config+0xd0>)
 8003256:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	4b1f      	ldr	r3, [pc, #124]	@ (80032dc <SystemClock_Config+0xd0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003268:	2301      	movs	r3, #1
 800326a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800326c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003270:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003272:	2302      	movs	r3, #2
 8003274:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003276:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800327a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800327c:	2304      	movs	r3, #4
 800327e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003280:	23a8      	movs	r3, #168	@ 0xa8
 8003282:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003284:	2302      	movs	r3, #2
 8003286:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003288:	2304      	movs	r3, #4
 800328a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800328c:	f107 0320 	add.w	r3, r7, #32
 8003290:	4618      	mov	r0, r3
 8003292:	f005 fe1b 	bl	8008ecc <HAL_RCC_OscConfig>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800329c:	f000 f84a 	bl	8003334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032a0:	230f      	movs	r3, #15
 80032a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032a4:	2302      	movs	r3, #2
 80032a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80032b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80032b8:	f107 030c 	add.w	r3, r7, #12
 80032bc:	2105      	movs	r1, #5
 80032be:	4618      	mov	r0, r3
 80032c0:	f006 f87c 	bl	80093bc <HAL_RCC_ClockConfig>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80032ca:	f000 f833 	bl	8003334 <Error_Handler>
  }
}
 80032ce:	bf00      	nop
 80032d0:	3750      	adds	r7, #80	@ 0x50
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40007000 	.word	0x40007000

080032e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

	  if(htim->Instance == TIM2){
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f0:	d102      	bne.n	80032f8 <HAL_TIM_PeriodElapsedCallback+0x18>
		  Accel_Stepper_TIMIT_Handler(&Stepper1);
 80032f2:	480b      	ldr	r0, [pc, #44]	@ (8003320 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80032f4:	f7fd feb0 	bl	8001058 <Accel_Stepper_TIMIT_Handler>
	  }
	  if(htim->Instance == TIM3){
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a09      	ldr	r2, [pc, #36]	@ (8003324 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d102      	bne.n	8003308 <HAL_TIM_PeriodElapsedCallback+0x28>
		  Accel_Stepper_TIMIT_Handler(&Stepper2);
 8003302:	4809      	ldr	r0, [pc, #36]	@ (8003328 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003304:	f7fd fea8 	bl	8001058 <Accel_Stepper_TIMIT_Handler>
	  }
	  if(htim->Instance == TIM4){
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a07      	ldr	r2, [pc, #28]	@ (800332c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d102      	bne.n	8003318 <HAL_TIM_PeriodElapsedCallback+0x38>
		  Accel_Stepper_TIMIT_Handler(&Stepper3);
 8003312:	4807      	ldr	r0, [pc, #28]	@ (8003330 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003314:	f7fd fea0 	bl	8001058 <Accel_Stepper_TIMIT_Handler>
	  }
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	200002b0 	.word	0x200002b0
 8003324:	40000400 	.word	0x40000400
 8003328:	20000310 	.word	0x20000310
 800332c:	40000800 	.word	0x40000800
 8003330:	20000370 	.word	0x20000370

08003334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003338:	b672      	cpsid	i
}
 800333a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <Error_Handler+0x8>

08003340 <initialize_LCD>:
const int numButtons = sizeof(buttons) / sizeof(Button*);

float l,m,k;
extern char ip_config[20];
void initialize_LCD(LCD_adc_t *lcd)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	lcd->sensitivity = 0.066;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a0e      	ldr	r2, [pc, #56]	@ (8003384 <initialize_LCD+0x44>)
 800334c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	lcd->ACSoffset=2.5;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a0d      	ldr	r2, [pc, #52]	@ (8003388 <initialize_LCD+0x48>)
 8003354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	lcd->m = 0.4;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a0c      	ldr	r2, [pc, #48]	@ (800338c <initialize_LCD+0x4c>)
 800335c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	lcd->C = 2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003366:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	lcd->V25 = 0.0025;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a08      	ldr	r2, [pc, #32]	@ (8003390 <initialize_LCD+0x50>)
 800336e:	675a      	str	r2, [r3, #116]	@ 0x74
	lcd->Avg_Slope = 0.76;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a08      	ldr	r2, [pc, #32]	@ (8003394 <initialize_LCD+0x54>)
 8003374:	679a      	str	r2, [r3, #120]	@ 0x78
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	3d872b02 	.word	0x3d872b02
 8003388:	40200000 	.word	0x40200000
 800338c:	3ecccccd 	.word	0x3ecccccd
 8003390:	3b23d70a 	.word	0x3b23d70a
 8003394:	3f428f5c 	.word	0x3f428f5c

08003398 <initialize_Kalman>:

void initialize_Kalman(Kalman_filter *kf)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	memset(kf->buffer, 0, sizeof(kf->buffer));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3334      	adds	r3, #52	@ 0x34
 80033a4:	2214      	movs	r2, #20
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f00c fd30 	bl	800fe0e <memset>
    kf->N = 10;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	220a      	movs	r2, #10
 80033b2:	601a      	str	r2, [r3, #0]
    kf->ema_filtered_value = 0.0f;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
    kf->Q = KALMAN_Q;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a17      	ldr	r2, [pc, #92]	@ (800341c <initialize_Kalman+0x84>)
 80033c0:	61da      	str	r2, [r3, #28]
    kf->R = KALMAN_R;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a16      	ldr	r2, [pc, #88]	@ (8003420 <initialize_Kalman+0x88>)
 80033c6:	621a      	str	r2, [r3, #32]
    kf->Kg = 0.0f;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	625a      	str	r2, [r3, #36]	@ 0x24
    kf->P_k_k1 = 1.0f;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033d6:	629a      	str	r2, [r3, #40]	@ 0x28
    kf->kalman_adc_old = 0.0f;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->index = 0;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	649a      	str	r2, [r3, #72]	@ 0x48
    kf->sum = 0;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	64da      	str	r2, [r3, #76]	@ 0x4c
    for (int i = 0; i < kf->N; ++i) {
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e009      	b.n	8003406 <initialize_Kalman+0x6e>
        kf->buffer[i] = 0;
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3318      	adds	r3, #24
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	2200      	movs	r2, #0
 80033fe:	809a      	strh	r2, [r3, #4]
    for (int i = 0; i < kf->N; ++i) {
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	429a      	cmp	r2, r3
 800340e:	dbf0      	blt.n	80033f2 <initialize_Kalman+0x5a>
    }
}
 8003410:	bf00      	nop
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	38d1b717 	.word	0x38d1b717
 8003420:	3dcccccd 	.word	0x3dcccccd

08003424 <delay_lcd>:


void delay_lcd(uint16_t delay)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim6);
 800342e:	480a      	ldr	r0, [pc, #40]	@ (8003458 <delay_lcd+0x34>)
 8003430:	f006 fa34 	bl	800989c <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8003434:	4b08      	ldr	r3, [pc, #32]	@ (8003458 <delay_lcd+0x34>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2200      	movs	r2, #0
 800343a:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < delay);
 800343c:	bf00      	nop
 800343e:	4b06      	ldr	r3, [pc, #24]	@ (8003458 <delay_lcd+0x34>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	429a      	cmp	r2, r3
 8003448:	d3f9      	bcc.n	800343e <delay_lcd+0x1a>
	HAL_TIM_Base_Stop_IT(&htim6);
 800344a:	4803      	ldr	r0, [pc, #12]	@ (8003458 <delay_lcd+0x34>)
 800344c:	f006 fa96 	bl	800997c <HAL_TIM_Base_Stop_IT>
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000b40 	.word	0x20000b40

0800345c <stepX>:

void stepX(int steps, uint8_t direction, uint16_t delay)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
 8003468:	4613      	mov	r3, r2
 800346a:	803b      	strh	r3, [r7, #0]
    int a;
    HAL_GPIO_WritePin(dir_1_GPIO_Port, dir_1_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	2b00      	cmp	r3, #0
 8003470:	bf0c      	ite	eq
 8003472:	2301      	moveq	r3, #1
 8003474:	2300      	movne	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	2102      	movs	r1, #2
 800347c:	480c      	ldr	r0, [pc, #48]	@ (80034b0 <stepX+0x54>)
 800347e:	f003 fb39 	bl	8006af4 <HAL_GPIO_WritePin>
    for (a = 0; a < steps; ++a)
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e00a      	b.n	800349e <stepX+0x42>
    {
        HAL_GPIO_TogglePin(step_1_GPIO_Port, step_1_pin);
 8003488:	2101      	movs	r1, #1
 800348a:	4809      	ldr	r0, [pc, #36]	@ (80034b0 <stepX+0x54>)
 800348c:	f003 fb4b 	bl	8006b26 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 8003490:	883b      	ldrh	r3, [r7, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff ffc6 	bl	8003424 <delay_lcd>
    for (a = 0; a < steps; ++a)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	dbf0      	blt.n	8003488 <stepX+0x2c>
    }
}
 80034a6:	bf00      	nop
 80034a8:	bf00      	nop
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40020000 	.word	0x40020000

080034b4 <stepY>:

void stepY(int steps, uint8_t direction, uint16_t delay)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
 80034c0:	4613      	mov	r3, r2
 80034c2:	803b      	strh	r3, [r7, #0]
    int b;
    HAL_GPIO_WritePin(dir_2_GPIO_Port, dir_2_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf0c      	ite	eq
 80034ca:	2301      	moveq	r3, #1
 80034cc:	2300      	movne	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	2108      	movs	r1, #8
 80034d4:	480c      	ldr	r0, [pc, #48]	@ (8003508 <stepY+0x54>)
 80034d6:	f003 fb0d 	bl	8006af4 <HAL_GPIO_WritePin>
    for (b = 0; b < steps; ++b)
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e00a      	b.n	80034f6 <stepY+0x42>
    {
        HAL_GPIO_TogglePin(step_2_GPIO_Port, step_2_pin);
 80034e0:	2104      	movs	r1, #4
 80034e2:	4809      	ldr	r0, [pc, #36]	@ (8003508 <stepY+0x54>)
 80034e4:	f003 fb1f 	bl	8006b26 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 80034e8:	883b      	ldrh	r3, [r7, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff ff9a 	bl	8003424 <delay_lcd>
    for (b = 0; b < steps; ++b)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3301      	adds	r3, #1
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	dbf0      	blt.n	80034e0 <stepY+0x2c>
    }
}
 80034fe:	bf00      	nop
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40020000 	.word	0x40020000

0800350c <stepZ>:

void stepZ(int steps, uint8_t direction, uint16_t delay)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	70fb      	strb	r3, [r7, #3]
 8003518:	4613      	mov	r3, r2
 800351a:	803b      	strh	r3, [r7, #0]
    int c;
    HAL_GPIO_WritePin(dir_3_GPIO_Port, dir_3_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	2b00      	cmp	r3, #0
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	2120      	movs	r1, #32
 800352c:	480c      	ldr	r0, [pc, #48]	@ (8003560 <stepZ+0x54>)
 800352e:	f003 fae1 	bl	8006af4 <HAL_GPIO_WritePin>
    for (c = 0; c < steps; ++c)
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	e00a      	b.n	800354e <stepZ+0x42>
    {
        HAL_GPIO_TogglePin(step_3_GPIO_Port, step_3_pin);
 8003538:	2110      	movs	r1, #16
 800353a:	4809      	ldr	r0, [pc, #36]	@ (8003560 <stepZ+0x54>)
 800353c:	f003 faf3 	bl	8006b26 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 8003540:	883b      	ldrh	r3, [r7, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff ff6e 	bl	8003424 <delay_lcd>
    for (c = 0; c < steps; ++c)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	3301      	adds	r3, #1
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	429a      	cmp	r2, r3
 8003554:	dbf0      	blt.n	8003538 <stepZ+0x2c>
    }
}
 8003556:	bf00      	nop
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40020000 	.word	0x40020000

08003564 <moving_average_filter>:

uint16_t moving_average_filter(Kalman_filter *kf, uint16_t ADC_Value)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	807b      	strh	r3, [r7, #2]
    kf->sum -= kf->buffer[kf->index];
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	3318      	adds	r3, #24
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	440b      	add	r3, r1
 8003580:	889b      	ldrh	r3, [r3, #4]
 8003582:	1ad2      	subs	r2, r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	64da      	str	r2, [r3, #76]	@ 0x4c
    kf->buffer[kf->index] = ADC_Value;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	3318      	adds	r3, #24
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4413      	add	r3, r2
 8003594:	887a      	ldrh	r2, [r7, #2]
 8003596:	809a      	strh	r2, [r3, #4]
    kf->sum += kf->buffer[kf->index];
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	3318      	adds	r3, #24
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	440b      	add	r3, r1
 80035a8:	889b      	ldrh	r3, [r3, #4]
 80035aa:	441a      	add	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	64da      	str	r2, [r3, #76]	@ 0x4c

    kf->index = (kf->index + 1) % kf->N;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035b4:	3301      	adds	r3, #1
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	fb93 f1f2 	sdiv	r1, r3, r2
 80035be:	fb01 f202 	mul.w	r2, r1, r2
 80035c2:	1a9a      	subs	r2, r3, r2
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	649a      	str	r2, [r3, #72]	@ 0x48

    return (uint16_t)(kf->sum / kf->N);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80035d4:	b29b      	uxth	r3, r3
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <exponential_moving_average_filter>:

uint16_t exponential_moving_average_filter(Kalman_filter *kf, uint16_t ADC_Value, float alpha)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	460b      	mov	r3, r1
 80035ec:	ed87 0a01 	vstr	s0, [r7, #4]
 80035f0:	817b      	strh	r3, [r7, #10]
    kf->ema_filtered_value = (alpha * ADC_Value) + ((1 - alpha) * kf->ema_filtered_value);
 80035f2:	897b      	ldrh	r3, [r7, #10]
 80035f4:	ee07 3a90 	vmov	s15, r3
 80035f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003604:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003608:	edd7 7a01 	vldr	s15, [r7, #4]
 800360c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	edd3 7a02 	vldr	s15, [r3, #8]
 8003616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800361a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	edc3 7a02 	vstr	s15, [r3, #8]
    return (uint16_t)kf->ema_filtered_value;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	edd3 7a02 	vldr	s15, [r3, #8]
 800362a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800362e:	ee17 3a90 	vmov	r3, s15
 8003632:	b29b      	uxth	r3, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <kalman_filter>:

uint16_t kalman_filter(Kalman_filter *kf, uint16_t ADC_Value)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]
    kf->Z_k = (float)ADC_Value;
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->x_k1_k1 = kf->kalman_adc_old;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	60da      	str	r2, [r3, #12]

    kf->x_k_k1 = kf->x_k1_k1;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	611a      	str	r2, [r3, #16]
    kf->P_k_k1 = kf->P_k1_k1 + kf->Q;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	edd3 7a07 	vldr	s15, [r3, #28]
 8003678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    kf->Kg = kf->P_k_k1 / (kf->P_k_k1 + kf->R);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	edd3 7a08 	vldr	s15, [r3, #32]
 8003694:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    kf->kalman_adc = kf->x_k_k1 + kf->Kg * (kf->Z_k - kf->kalman_adc_old);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	ed93 7a04 	vldr	s14, [r3, #16]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	ed93 6a05 	vldr	s12, [r3, #20]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80036ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80036be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    kf->P_k1_k1 = (1 - kf->Kg) * kf->P_k_k1;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80036d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80036d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80036e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	edc3 7a06 	vstr	s15, [r3, #24]

    kf->kalman_adc_old = kf->kalman_adc;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (uint16_t)kf->kalman_adc;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80036f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036fc:	ee17 3a90 	vmov	r3, s15
 8003700:	b29b      	uxth	r3, r3
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <vol_messure>:

void vol_messure(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
	static uint8_t is_initialized = 0;
	if (!is_initialized) {
 8003716:	4b44      	ldr	r3, [pc, #272]	@ (8003828 <vol_messure+0x118>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d105      	bne.n	800372a <vol_messure+0x1a>
		initialize_Kalman(&kalman_fil_volt);
 800371e:	4843      	ldr	r0, [pc, #268]	@ (800382c <vol_messure+0x11c>)
 8003720:	f7ff fe3a 	bl	8003398 <initialize_Kalman>
		is_initialized = 1;
 8003724:	4b40      	ldr	r3, [pc, #256]	@ (8003828 <vol_messure+0x118>)
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
	}
    ADC_Select_CH10();
 800372a:	f7fe fa3b 	bl	8001ba4 <ADC_Select_CH10>
    HAL_ADC_Start(&hadc1);
 800372e:	4840      	ldr	r0, [pc, #256]	@ (8003830 <vol_messure+0x120>)
 8003730:	f002 f986 	bl	8005a40 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8003734:	2101      	movs	r1, #1
 8003736:	483e      	ldr	r0, [pc, #248]	@ (8003830 <vol_messure+0x120>)
 8003738:	f002 fa87 	bl	8005c4a <HAL_ADC_PollForConversion>
    LCD_adc.readValue[0] = HAL_ADC_GetValue(&hadc1);
 800373c:	483c      	ldr	r0, [pc, #240]	@ (8003830 <vol_messure+0x120>)
 800373e:	f002 fc1f 	bl	8005f80 <HAL_ADC_GetValue>
 8003742:	4603      	mov	r3, r0
 8003744:	b29a      	uxth	r2, r3
 8003746:	4b3b      	ldr	r3, [pc, #236]	@ (8003834 <vol_messure+0x124>)
 8003748:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    uint16_t moving_avg_filtered = moving_average_filter(&kalman_fil_volt, LCD_adc.readValue[0]); // Apply moving average filter
 800374c:	4b39      	ldr	r3, [pc, #228]	@ (8003834 <vol_messure+0x124>)
 800374e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8003752:	4619      	mov	r1, r3
 8003754:	4835      	ldr	r0, [pc, #212]	@ (800382c <vol_messure+0x11c>)
 8003756:	f7ff ff05 	bl	8003564 <moving_average_filter>
 800375a:	4603      	mov	r3, r0
 800375c:	80fb      	strh	r3, [r7, #6]
    uint16_t ema_filtered = exponential_moving_average_filter(&kalman_fil_volt, moving_avg_filtered, EMA_ALPHA_VOLT); // Apply EMA filter
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8003838 <vol_messure+0x128>
 8003764:	4619      	mov	r1, r3
 8003766:	4831      	ldr	r0, [pc, #196]	@ (800382c <vol_messure+0x11c>)
 8003768:	f7ff ff3b 	bl	80035e2 <exponential_moving_average_filter>
 800376c:	4603      	mov	r3, r0
 800376e:	80bb      	strh	r3, [r7, #4]
    kalman_fil_volt.filter_kal = kalman_filter(&kalman_fil_volt, ema_filtered); // Apply Kalman filter
 8003770:	88bb      	ldrh	r3, [r7, #4]
 8003772:	4619      	mov	r1, r3
 8003774:	482d      	ldr	r0, [pc, #180]	@ (800382c <vol_messure+0x11c>)
 8003776:	f7ff ff63 	bl	8003640 <kalman_filter>
 800377a:	4603      	mov	r3, r0
 800377c:	461a      	mov	r2, r3
 800377e:	4b2b      	ldr	r3, [pc, #172]	@ (800382c <vol_messure+0x11c>)
 8003780:	809a      	strh	r2, [r3, #4]

    LCD_adc.volt = ((float)kalman_fil_volt.filter_kal / 4095) * 3.6f;
 8003782:	4b2a      	ldr	r3, [pc, #168]	@ (800382c <vol_messure+0x11c>)
 8003784:	889b      	ldrh	r3, [r3, #4]
 8003786:	ee07 3a90 	vmov	s15, r3
 800378a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800378e:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 800383c <vol_messure+0x12c>
 8003792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003796:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003840 <vol_messure+0x130>
 800379a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800379e:	4b25      	ldr	r3, [pc, #148]	@ (8003834 <vol_messure+0x124>)
 80037a0:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
    LCD_adc.sum = (LCD_adc.volt * 6.5f) + 0.2f;
 80037a4:	4b23      	ldr	r3, [pc, #140]	@ (8003834 <vol_messure+0x124>)
 80037a6:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 80037aa:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 80037ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037b2:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003844 <vol_messure+0x134>
 80037b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003834 <vol_messure+0x124>)
 80037bc:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (LCD_adc.sum > 16.3 && LCD_adc.sum < 21)
 80037c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003834 <vol_messure+0x124>)
 80037c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fc fecf 	bl	8000568 <__aeabi_f2d>
 80037ca:	a315      	add	r3, pc, #84	@ (adr r3, 8003820 <vol_messure+0x110>)
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f7fd f9b2 	bl	8000b38 <__aeabi_dcmpgt>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00d      	beq.n	80037f6 <vol_messure+0xe6>
 80037da:	4b16      	ldr	r3, [pc, #88]	@ (8003834 <vol_messure+0x124>)
 80037dc:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80037e0:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 80037e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ec:	d503      	bpl.n	80037f6 <vol_messure+0xe6>
        LCD_adc.voltage = LCD_adc.sum; // Default value when no voltage exceeds the threshold
 80037ee:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <vol_messure+0x124>)
 80037f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f2:	4a10      	ldr	r2, [pc, #64]	@ (8003834 <vol_messure+0x124>)
 80037f4:	6553      	str	r3, [r2, #84]	@ 0x54
    if (LCD_adc.sum < 14)
 80037f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003834 <vol_messure+0x124>)
 80037f8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80037fc:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8003800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003808:	d503      	bpl.n	8003812 <vol_messure+0x102>
        LCD_adc.voltage = 0;
 800380a:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <vol_messure+0x124>)
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_Stop(&hadc1);
 8003812:	4807      	ldr	r0, [pc, #28]	@ (8003830 <vol_messure+0x120>)
 8003814:	f002 f9e6 	bl	8005be4 <HAL_ADC_Stop>
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	cccccccd 	.word	0xcccccccd
 8003824:	40304ccc 	.word	0x40304ccc
 8003828:	200009d0 	.word	0x200009d0
 800382c:	20000978 	.word	0x20000978
 8003830:	200003d0 	.word	0x200003d0
 8003834:	2000085c 	.word	0x2000085c
 8003838:	3ba3d70a 	.word	0x3ba3d70a
 800383c:	457ff000 	.word	0x457ff000
 8003840:	40666666 	.word	0x40666666
 8003844:	3e4ccccd 	.word	0x3e4ccccd

08003848 <cur_messure>:

void cur_messure(void)
{
 8003848:	b5b0      	push	{r4, r5, r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
	static uint8_t is_initialized = 0;
	if (!is_initialized) {
 800384e:	4b6a      	ldr	r3, [pc, #424]	@ (80039f8 <cur_messure+0x1b0>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d105      	bne.n	8003862 <cur_messure+0x1a>
		initialize_Kalman(&kalman_fil_curr);
 8003856:	4869      	ldr	r0, [pc, #420]	@ (80039fc <cur_messure+0x1b4>)
 8003858:	f7ff fd9e 	bl	8003398 <initialize_Kalman>
		is_initialized = 1;
 800385c:	4b66      	ldr	r3, [pc, #408]	@ (80039f8 <cur_messure+0x1b0>)
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
	}
    ADC_Select_CH11();
 8003862:	f7fe f9bf 	bl	8001be4 <ADC_Select_CH11>
    HAL_ADC_Start(&hadc1);
 8003866:	4866      	ldr	r0, [pc, #408]	@ (8003a00 <cur_messure+0x1b8>)
 8003868:	f002 f8ea 	bl	8005a40 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 800386c:	2101      	movs	r1, #1
 800386e:	4864      	ldr	r0, [pc, #400]	@ (8003a00 <cur_messure+0x1b8>)
 8003870:	f002 f9eb 	bl	8005c4a <HAL_ADC_PollForConversion>
    LCD_adc.readValue[1] = HAL_ADC_GetValue(&hadc1);
 8003874:	4862      	ldr	r0, [pc, #392]	@ (8003a00 <cur_messure+0x1b8>)
 8003876:	f002 fb83 	bl	8005f80 <HAL_ADC_GetValue>
 800387a:	4603      	mov	r3, r0
 800387c:	b29a      	uxth	r2, r3
 800387e:	4b61      	ldr	r3, [pc, #388]	@ (8003a04 <cur_messure+0x1bc>)
 8003880:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    uint16_t moving_avg_filtered = moving_average_filter(&kalman_fil_curr, LCD_adc.readValue[1]); // Apply moving average filter
 8003884:	4b5f      	ldr	r3, [pc, #380]	@ (8003a04 <cur_messure+0x1bc>)
 8003886:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800388a:	4619      	mov	r1, r3
 800388c:	485b      	ldr	r0, [pc, #364]	@ (80039fc <cur_messure+0x1b4>)
 800388e:	f7ff fe69 	bl	8003564 <moving_average_filter>
 8003892:	4603      	mov	r3, r0
 8003894:	80fb      	strh	r3, [r7, #6]
    uint16_t ema_filtered = exponential_moving_average_filter(&kalman_fil_curr, moving_avg_filtered, EMA_ALPHA_CURR); // Apply EMA filter
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 8003a08 <cur_messure+0x1c0>
 800389c:	4619      	mov	r1, r3
 800389e:	4857      	ldr	r0, [pc, #348]	@ (80039fc <cur_messure+0x1b4>)
 80038a0:	f7ff fe9f 	bl	80035e2 <exponential_moving_average_filter>
 80038a4:	4603      	mov	r3, r0
 80038a6:	80bb      	strh	r3, [r7, #4]
    kalman_fil_curr.filter_kal = kalman_filter(&kalman_fil_curr, ema_filtered); // Apply Kalman filter
 80038a8:	88bb      	ldrh	r3, [r7, #4]
 80038aa:	4619      	mov	r1, r3
 80038ac:	4853      	ldr	r0, [pc, #332]	@ (80039fc <cur_messure+0x1b4>)
 80038ae:	f7ff fec7 	bl	8003640 <kalman_filter>
 80038b2:	4603      	mov	r3, r0
 80038b4:	461a      	mov	r2, r3
 80038b6:	4b51      	ldr	r3, [pc, #324]	@ (80039fc <cur_messure+0x1b4>)
 80038b8:	809a      	strh	r2, [r3, #4]
    //    LCD_adc.sum1 = 0.0000002f * kalman_fil_curr.filter_kal_cur * kalman_fil_curr.filter_kal_cur - 0.0114f * kalman_fil_curr.filter_kal_cur + 35.5522898f -0.43 -  0.277999997; //- 0.897746623 + 0.105 + 0.085 - 0.02
    //    if (LCD_adc.sum1 > 0.43 && LCD_adc.sum1 < 15) LCD_adc.current = LCD_adc.sum1;
    //    if (LCD_adc.sum1 < 0.43) LCD_adc.current = 0;
    //    LCD_adc.Temp = ((3.3 * kalman_fil_curr.filter_kal_cur / 4095 - LCD_adc.V25) / LCD_adc.Avg_Slope) + 25;
    	// Calculate CURRENT using the cubic polynomial equation
    LCD_adc.sum1 = 0.00000009 * kalman_fil_curr.filter_kal * kalman_fil_curr.filter_kal + 0.0102 * kalman_fil_curr.filter_kal - 34.52249168 +0.7 + l ;
 80038ba:	4b50      	ldr	r3, [pc, #320]	@ (80039fc <cur_messure+0x1b4>)
 80038bc:	889b      	ldrh	r3, [r3, #4]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fc fe40 	bl	8000544 <__aeabi_i2d>
 80038c4:	a342      	add	r3, pc, #264	@ (adr r3, 80039d0 <cur_messure+0x188>)
 80038c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ca:	f7fc fea5 	bl	8000618 <__aeabi_dmul>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4614      	mov	r4, r2
 80038d4:	461d      	mov	r5, r3
 80038d6:	4b49      	ldr	r3, [pc, #292]	@ (80039fc <cur_messure+0x1b4>)
 80038d8:	889b      	ldrh	r3, [r3, #4]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fc fe32 	bl	8000544 <__aeabi_i2d>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4620      	mov	r0, r4
 80038e6:	4629      	mov	r1, r5
 80038e8:	f7fc fe96 	bl	8000618 <__aeabi_dmul>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4614      	mov	r4, r2
 80038f2:	461d      	mov	r5, r3
 80038f4:	4b41      	ldr	r3, [pc, #260]	@ (80039fc <cur_messure+0x1b4>)
 80038f6:	889b      	ldrh	r3, [r3, #4]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc fe23 	bl	8000544 <__aeabi_i2d>
 80038fe:	a336      	add	r3, pc, #216	@ (adr r3, 80039d8 <cur_messure+0x190>)
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f7fc fe88 	bl	8000618 <__aeabi_dmul>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4620      	mov	r0, r4
 800390e:	4629      	mov	r1, r5
 8003910:	f7fc fccc 	bl	80002ac <__adddf3>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	a330      	add	r3, pc, #192	@ (adr r3, 80039e0 <cur_messure+0x198>)
 800391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003922:	f7fc fcc1 	bl	80002a8 <__aeabi_dsub>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4610      	mov	r0, r2
 800392c:	4619      	mov	r1, r3
 800392e:	a32e      	add	r3, pc, #184	@ (adr r3, 80039e8 <cur_messure+0x1a0>)
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f7fc fcba 	bl	80002ac <__adddf3>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4614      	mov	r4, r2
 800393e:	461d      	mov	r5, r3
 8003940:	4b32      	ldr	r3, [pc, #200]	@ (8003a0c <cur_messure+0x1c4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc fe0f 	bl	8000568 <__aeabi_f2d>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4620      	mov	r0, r4
 8003950:	4629      	mov	r1, r5
 8003952:	f7fc fcab 	bl	80002ac <__adddf3>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4610      	mov	r0, r2
 800395c:	4619      	mov	r1, r3
 800395e:	f7fd f953 	bl	8000c08 <__aeabi_d2f>
 8003962:	4603      	mov	r3, r0
 8003964:	4a27      	ldr	r2, [pc, #156]	@ (8003a04 <cur_messure+0x1bc>)
 8003966:	6453      	str	r3, [r2, #68]	@ 0x44
    if (LCD_adc.sum1 > 0.4 && LCD_adc.sum1 < 15)
 8003968:	4b26      	ldr	r3, [pc, #152]	@ (8003a04 <cur_messure+0x1bc>)
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fdfb 	bl	8000568 <__aeabi_f2d>
 8003972:	a31f      	add	r3, pc, #124	@ (adr r3, 80039f0 <cur_messure+0x1a8>)
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f7fd f8de 	bl	8000b38 <__aeabi_dcmpgt>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00d      	beq.n	800399e <cur_messure+0x156>
 8003982:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <cur_messure+0x1bc>)
 8003984:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003988:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800398c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003994:	d503      	bpl.n	800399e <cur_messure+0x156>
        LCD_adc.current = LCD_adc.sum1;
 8003996:	4b1b      	ldr	r3, [pc, #108]	@ (8003a04 <cur_messure+0x1bc>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a04 <cur_messure+0x1bc>)
 800399c:	6513      	str	r3, [r2, #80]	@ 0x50
    if (LCD_adc.sum1 < 0.4)
 800399e:	4b19      	ldr	r3, [pc, #100]	@ (8003a04 <cur_messure+0x1bc>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fc fde0 	bl	8000568 <__aeabi_f2d>
 80039a8:	a311      	add	r3, pc, #68	@ (adr r3, 80039f0 <cur_messure+0x1a8>)
 80039aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ae:	f7fd f8a5 	bl	8000afc <__aeabi_dcmplt>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <cur_messure+0x178>
        LCD_adc.current = 0;
 80039b8:	4b12      	ldr	r3, [pc, #72]	@ (8003a04 <cur_messure+0x1bc>)
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_ADC_Stop(&hadc1);
 80039c0:	480f      	ldr	r0, [pc, #60]	@ (8003a00 <cur_messure+0x1b8>)
 80039c2:	f002 f90f 	bl	8005be4 <HAL_ADC_Stop>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bdb0      	pop	{r4, r5, r7, pc}
 80039ce:	bf00      	nop
 80039d0:	be769dc1 	.word	0xbe769dc1
 80039d4:	3e7828c0 	.word	0x3e7828c0
 80039d8:	d35a8588 	.word	0xd35a8588
 80039dc:	3f84e3bc 	.word	0x3f84e3bc
 80039e0:	01e3041c 	.word	0x01e3041c
 80039e4:	404142e1 	.word	0x404142e1
 80039e8:	66666666 	.word	0x66666666
 80039ec:	3fe66666 	.word	0x3fe66666
 80039f0:	9999999a 	.word	0x9999999a
 80039f4:	3fd99999 	.word	0x3fd99999
 80039f8:	200009d1 	.word	0x200009d1
 80039fc:	20000928 	.word	0x20000928
 8003a00:	200003d0 	.word	0x200003d0
 8003a04:	2000085c 	.word	0x2000085c
 8003a08:	3a83126f 	.word	0x3a83126f
 8003a0c:	200009cc 	.word	0x200009cc

08003a10 <power_messure>:

void power_messure(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
    LCD_adc.power = LCD_adc.current * LCD_adc.voltage;
 8003a14:	4b07      	ldr	r3, [pc, #28]	@ (8003a34 <power_messure+0x24>)
 8003a16:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8003a1a:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <power_messure+0x24>)
 8003a1c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a24:	4b03      	ldr	r3, [pc, #12]	@ (8003a34 <power_messure+0x24>)
 8003a26:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
}
 8003a2a:	bf00      	nop
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	2000085c 	.word	0x2000085c

08003a38 <temperature_messure>:

void temperature_messure(void)
{
 8003a38:	b5b0      	push	{r4, r5, r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
    LCD_adc.Temp = ((3.6 * kalman_fil_curr.filter_kal / 4095 - LCD_adc.V25) / LCD_adc.Avg_Slope) + 25;
 8003a3c:	4b26      	ldr	r3, [pc, #152]	@ (8003ad8 <temperature_messure+0xa0>)
 8003a3e:	889b      	ldrh	r3, [r3, #4]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fd7f 	bl	8000544 <__aeabi_i2d>
 8003a46:	a320      	add	r3, pc, #128	@ (adr r3, 8003ac8 <temperature_messure+0x90>)
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f7fc fde4 	bl	8000618 <__aeabi_dmul>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4610      	mov	r0, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	a31d      	add	r3, pc, #116	@ (adr r3, 8003ad0 <temperature_messure+0x98>)
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f7fc ff05 	bl	800086c <__aeabi_ddiv>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4614      	mov	r4, r2
 8003a68:	461d      	mov	r5, r3
 8003a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003adc <temperature_messure+0xa4>)
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fc fd7a 	bl	8000568 <__aeabi_f2d>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4620      	mov	r0, r4
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	f7fc fc14 	bl	80002a8 <__aeabi_dsub>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4614      	mov	r4, r2
 8003a86:	461d      	mov	r5, r3
 8003a88:	4b14      	ldr	r3, [pc, #80]	@ (8003adc <temperature_messure+0xa4>)
 8003a8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fc fd6b 	bl	8000568 <__aeabi_f2d>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4620      	mov	r0, r4
 8003a98:	4629      	mov	r1, r5
 8003a9a:	f7fc fee7 	bl	800086c <__aeabi_ddiv>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae0 <temperature_messure+0xa8>)
 8003aac:	f7fc fbfe 	bl	80002ac <__adddf3>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f7fd f8a6 	bl	8000c08 <__aeabi_d2f>
 8003abc:	4603      	mov	r3, r0
 8003abe:	4a07      	ldr	r2, [pc, #28]	@ (8003adc <temperature_messure+0xa4>)
 8003ac0:	67d3      	str	r3, [r2, #124]	@ 0x7c
}
 8003ac2:	bf00      	nop
 8003ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	cccccccd 	.word	0xcccccccd
 8003acc:	400ccccc 	.word	0x400ccccc
 8003ad0:	00000000 	.word	0x00000000
 8003ad4:	40affe00 	.word	0x40affe00
 8003ad8:	20000928 	.word	0x20000928
 8003adc:	2000085c 	.word	0x2000085c
 8003ae0:	40390000 	.word	0x40390000

08003ae4 <startADC>:

void startADC(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
    vol_messure();
 8003ae8:	f7ff fe12 	bl	8003710 <vol_messure>
    cur_messure();
 8003aec:	f7ff feac 	bl	8003848 <cur_messure>
    power_messure();
 8003af0:	f7ff ff8e 	bl	8003a10 <power_messure>
    temperature_messure();
 8003af4:	f7ff ffa0 	bl	8003a38 <temperature_messure>
}
 8003af8:	bf00      	nop
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	0000      	movs	r0, r0
	...

08003b00 <float_to_string>:

void float_to_string(float num, char *str, int decimalPlaces) {
 8003b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b04:	b08d      	sub	sp, #52	@ 0x34
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	ed87 0a03 	vstr	s0, [r7, #12]
 8003b0c:	60b8      	str	r0, [r7, #8]
 8003b0e:	6079      	str	r1, [r7, #4]
 8003b10:	466b      	mov	r3, sp
 8003b12:	461e      	mov	r6, r3
    int intPart = (int)num;
 8003b14:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b1c:	ee17 3a90 	vmov	r3, s15
 8003b20:	62bb      	str	r3, [r7, #40]	@ 0x28
    int decPart = (int)((num - intPart) * pow(10, decimalPlaces));
 8003b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b34:	ee17 0a90 	vmov	r0, s15
 8003b38:	f7fc fd16 	bl	8000568 <__aeabi_f2d>
 8003b3c:	4682      	mov	sl, r0
 8003b3e:	468b      	mov	fp, r1
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7fc fcff 	bl	8000544 <__aeabi_i2d>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	ec43 2b11 	vmov	d1, r2, r3
 8003b4e:	ed9f 0b42 	vldr	d0, [pc, #264]	@ 8003c58 <float_to_string+0x158>
 8003b52:	f010 f8fb 	bl	8013d4c <pow>
 8003b56:	ec53 2b10 	vmov	r2, r3, d0
 8003b5a:	4650      	mov	r0, sl
 8003b5c:	4659      	mov	r1, fp
 8003b5e:	f7fc fd5b 	bl	8000618 <__aeabi_dmul>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4610      	mov	r0, r2
 8003b68:	4619      	mov	r1, r3
 8003b6a:	f7fd f805 	bl	8000b78 <__aeabi_d2iz>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	627b      	str	r3, [r7, #36]	@ 0x24

    // Convert integer part to string
    itoa(intPart, str, 10);
 8003b72:	220a      	movs	r2, #10
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b78:	f00b f856 	bl	800ec28 <itoa>

    // Find length of integer part
    int len = strlen(str);
 8003b7c:	68b8      	ldr	r0, [r7, #8]
 8003b7e:	f7fc fb87 	bl	8000290 <strlen>
 8003b82:	4603      	mov	r3, r0
 8003b84:	623b      	str	r3, [r7, #32]

    // Append decimal point
    str[len] = '.';
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	222e      	movs	r2, #46	@ 0x2e
 8003b8e:	701a      	strb	r2, [r3, #0]
    str[len + 1] = '\0';
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	3301      	adds	r3, #1
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	4413      	add	r3, r2
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]

    // Convert decimal part to string
    char decStr[decimalPlaces + 1];
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	1c59      	adds	r1, r3, #1
 8003ba0:	1e4b      	subs	r3, r1, #1
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	460a      	mov	r2, r1
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	4690      	mov	r8, r2
 8003baa:	4699      	mov	r9, r3
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bbc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bc0:	460a      	mov	r2, r1
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	4614      	mov	r4, r2
 8003bc6:	461d      	mov	r5, r3
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	00eb      	lsls	r3, r5, #3
 8003bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bd6:	00e2      	lsls	r2, r4, #3
 8003bd8:	460b      	mov	r3, r1
 8003bda:	3307      	adds	r3, #7
 8003bdc:	08db      	lsrs	r3, r3, #3
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	ebad 0d03 	sub.w	sp, sp, r3
 8003be4:	466b      	mov	r3, sp
 8003be6:	3300      	adds	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
    itoa(decPart, decStr, 10);
 8003bea:	220a      	movs	r2, #10
 8003bec:	69b9      	ldr	r1, [r7, #24]
 8003bee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003bf0:	f00b f81a 	bl	800ec28 <itoa>

    // Pad with zeros if needed
    int decLen = strlen(decStr);
 8003bf4:	69b8      	ldr	r0, [r7, #24]
 8003bf6:	f7fc fb4b 	bl	8000290 <strlen>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < decimalPlaces - decLen; ++i) {
 8003bfe:	2300      	movs	r3, #0
 8003c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c02:	e00e      	b.n	8003c22 <float_to_string+0x122>
        strcat(str, "0");
 8003c04:	68b8      	ldr	r0, [r7, #8]
 8003c06:	f7fc fb43 	bl	8000290 <strlen>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4413      	add	r3, r2
 8003c12:	4913      	ldr	r1, [pc, #76]	@ (8003c60 <float_to_string+0x160>)
 8003c14:	461a      	mov	r2, r3
 8003c16:	460b      	mov	r3, r1
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	8013      	strh	r3, [r2, #0]
    for (int i = 0; i < decimalPlaces - decLen; ++i) {
 8003c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1e:	3301      	adds	r3, #1
 8003c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	dbea      	blt.n	8003c04 <float_to_string+0x104>
    }

    // Append decimal part to the string
    strcat(str, decStr);
 8003c2e:	69b9      	ldr	r1, [r7, #24]
 8003c30:	68b8      	ldr	r0, [r7, #8]
 8003c32:	f00c f8f4 	bl	800fe1e <strcat>

    // Null-terminate the string
    str[len + 1 + decimalPlaces] = '\0';
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	461a      	mov	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4413      	add	r3, r2
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	46b5      	mov	sp, r6
}
 8003c4a:	bf00      	nop
 8003c4c:	3734      	adds	r7, #52	@ 0x34
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c54:	f3af 8000 	nop.w
 8003c58:	00000000 	.word	0x00000000
 8003c5c:	40240000 	.word	0x40240000
 8003c60:	08014d50 	.word	0x08014d50

08003c64 <display_menu>:


void display_menu(void) {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
    lcd_init();
 8003c68:	f7ff fa5e 	bl	8003128 <lcd_init>
    lcd_clear();
 8003c6c:	f7ff fa20 	bl	80030b0 <lcd_clear>
    lcd_put_cur(0, 2);
 8003c70:	2102      	movs	r1, #2
 8003c72:	2000      	movs	r0, #0
 8003c74:	f7ff fa34 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("CNC DRILL 3 AXIS");
 8003c78:	480c      	ldr	r0, [pc, #48]	@ (8003cac <display_menu+0x48>)
 8003c7a:	f7ff fa83 	bl	8003184 <lcd_send_string>
    lcd_put_cur(1, 2);
 8003c7e:	2102      	movs	r1, #2
 8003c80:	2001      	movs	r0, #1
 8003c82:	f7ff fa2d 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("HCMUTE CDT K20");
 8003c86:	480a      	ldr	r0, [pc, #40]	@ (8003cb0 <display_menu+0x4c>)
 8003c88:	f7ff fa7c 	bl	8003184 <lcd_send_string>
    lcd_put_cur(2, 2);
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	2002      	movs	r0, #2
 8003c90:	f7ff fa26 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("KHOA CO KHI CTM");
 8003c94:	4807      	ldr	r0, [pc, #28]	@ (8003cb4 <display_menu+0x50>)
 8003c96:	f7ff fa75 	bl	8003184 <lcd_send_string>
    lcd_put_cur(3, 0);
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	2003      	movs	r0, #3
 8003c9e:	f7ff fa1f 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("GVHD: ThS N.M. TRIET");
 8003ca2:	4805      	ldr	r0, [pc, #20]	@ (8003cb8 <display_menu+0x54>)
 8003ca4:	f7ff fa6e 	bl	8003184 <lcd_send_string>
}
 8003ca8:	bf00      	nop
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	08014d54 	.word	0x08014d54
 8003cb0:	08014d68 	.word	0x08014d68
 8003cb4:	08014d78 	.word	0x08014d78
 8003cb8:	08014d88 	.word	0x08014d88

08003cbc <display_main>:

void display_main(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
	if (LCD_adc.menu_main == 0)
 8003cc0:	4b46      	ldr	r3, [pc, #280]	@ (8003ddc <display_main+0x120>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d11e      	bne.n	8003d06 <display_main+0x4a>
	{
		lcd_clear();
 8003cc8:	f7ff f9f2 	bl	80030b0 <lcd_clear>
		lcd_put_cur(0, 0);
 8003ccc:	2100      	movs	r1, #0
 8003cce:	2000      	movs	r0, #0
 8003cd0:	f7ff fa06 	bl	80030e0 <lcd_put_cur>
		lcd_send_string(">VOLT/CURRENT");
 8003cd4:	4842      	ldr	r0, [pc, #264]	@ (8003de0 <display_main+0x124>)
 8003cd6:	f7ff fa55 	bl	8003184 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003cda:	2100      	movs	r1, #0
 8003cdc:	2001      	movs	r0, #1
 8003cde:	f7ff f9ff 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 8003ce2:	4840      	ldr	r0, [pc, #256]	@ (8003de4 <display_main+0x128>)
 8003ce4:	f7ff fa4e 	bl	8003184 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003ce8:	2100      	movs	r1, #0
 8003cea:	2002      	movs	r0, #2
 8003cec:	f7ff f9f8 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 8003cf0:	483d      	ldr	r0, [pc, #244]	@ (8003de8 <display_main+0x12c>)
 8003cf2:	f7ff fa47 	bl	8003184 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	2003      	movs	r0, #3
 8003cfa:	f7ff f9f1 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 8003cfe:	483b      	ldr	r0, [pc, #236]	@ (8003dec <display_main+0x130>)
 8003d00:	f7ff fa40 	bl	8003184 <lcd_send_string>
		lcd_put_cur(2, 0);
		lcd_send_string("CONTROLL CNC");
		lcd_put_cur(3, 0);
		lcd_send_string(">SPEED-XY/SPEED-Z");
	}
}
 8003d04:	e067      	b.n	8003dd6 <display_main+0x11a>
	else if (LCD_adc.menu_main == 1)
 8003d06:	4b35      	ldr	r3, [pc, #212]	@ (8003ddc <display_main+0x120>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d11e      	bne.n	8003d4c <display_main+0x90>
		lcd_clear();
 8003d0e:	f7ff f9cf 	bl	80030b0 <lcd_clear>
		lcd_put_cur(0, 0);
 8003d12:	2100      	movs	r1, #0
 8003d14:	2000      	movs	r0, #0
 8003d16:	f7ff f9e3 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 8003d1a:	4835      	ldr	r0, [pc, #212]	@ (8003df0 <display_main+0x134>)
 8003d1c:	f7ff fa32 	bl	8003184 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003d20:	2100      	movs	r1, #0
 8003d22:	2001      	movs	r0, #1
 8003d24:	f7ff f9dc 	bl	80030e0 <lcd_put_cur>
		lcd_send_string(">POWER/TEMPER");
 8003d28:	4832      	ldr	r0, [pc, #200]	@ (8003df4 <display_main+0x138>)
 8003d2a:	f7ff fa2b 	bl	8003184 <lcd_send_string>
        lcd_put_cur(2, 0);
 8003d2e:	2100      	movs	r1, #0
 8003d30:	2002      	movs	r0, #2
 8003d32:	f7ff f9d5 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 8003d36:	482c      	ldr	r0, [pc, #176]	@ (8003de8 <display_main+0x12c>)
 8003d38:	f7ff fa24 	bl	8003184 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	2003      	movs	r0, #3
 8003d40:	f7ff f9ce 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 8003d44:	4829      	ldr	r0, [pc, #164]	@ (8003dec <display_main+0x130>)
 8003d46:	f7ff fa1d 	bl	8003184 <lcd_send_string>
}
 8003d4a:	e044      	b.n	8003dd6 <display_main+0x11a>
	else if (LCD_adc.menu_main == 2)
 8003d4c:	4b23      	ldr	r3, [pc, #140]	@ (8003ddc <display_main+0x120>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d11e      	bne.n	8003d92 <display_main+0xd6>
		lcd_clear();
 8003d54:	f7ff f9ac 	bl	80030b0 <lcd_clear>
        lcd_put_cur(0, 0);
 8003d58:	2100      	movs	r1, #0
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f7ff f9c0 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 8003d60:	4823      	ldr	r0, [pc, #140]	@ (8003df0 <display_main+0x134>)
 8003d62:	f7ff fa0f 	bl	8003184 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003d66:	2100      	movs	r1, #0
 8003d68:	2001      	movs	r0, #1
 8003d6a:	f7ff f9b9 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 8003d6e:	481d      	ldr	r0, [pc, #116]	@ (8003de4 <display_main+0x128>)
 8003d70:	f7ff fa08 	bl	8003184 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003d74:	2100      	movs	r1, #0
 8003d76:	2002      	movs	r0, #2
 8003d78:	f7ff f9b2 	bl	80030e0 <lcd_put_cur>
		lcd_send_string(">CONTROLL CNC");
 8003d7c:	481e      	ldr	r0, [pc, #120]	@ (8003df8 <display_main+0x13c>)
 8003d7e:	f7ff fa01 	bl	8003184 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003d82:	2100      	movs	r1, #0
 8003d84:	2003      	movs	r0, #3
 8003d86:	f7ff f9ab 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 8003d8a:	4818      	ldr	r0, [pc, #96]	@ (8003dec <display_main+0x130>)
 8003d8c:	f7ff f9fa 	bl	8003184 <lcd_send_string>
}
 8003d90:	e021      	b.n	8003dd6 <display_main+0x11a>
	else if (LCD_adc.menu_main == 3)
 8003d92:	4b12      	ldr	r3, [pc, #72]	@ (8003ddc <display_main+0x120>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d11d      	bne.n	8003dd6 <display_main+0x11a>
		lcd_clear();
 8003d9a:	f7ff f989 	bl	80030b0 <lcd_clear>
        lcd_put_cur(0, 0);
 8003d9e:	2100      	movs	r1, #0
 8003da0:	2000      	movs	r0, #0
 8003da2:	f7ff f99d 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 8003da6:	4812      	ldr	r0, [pc, #72]	@ (8003df0 <display_main+0x134>)
 8003da8:	f7ff f9ec 	bl	8003184 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003dac:	2100      	movs	r1, #0
 8003dae:	2001      	movs	r0, #1
 8003db0:	f7ff f996 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 8003db4:	480b      	ldr	r0, [pc, #44]	@ (8003de4 <display_main+0x128>)
 8003db6:	f7ff f9e5 	bl	8003184 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003dba:	2100      	movs	r1, #0
 8003dbc:	2002      	movs	r0, #2
 8003dbe:	f7ff f98f 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 8003dc2:	4809      	ldr	r0, [pc, #36]	@ (8003de8 <display_main+0x12c>)
 8003dc4:	f7ff f9de 	bl	8003184 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003dc8:	2100      	movs	r1, #0
 8003dca:	2003      	movs	r0, #3
 8003dcc:	f7ff f988 	bl	80030e0 <lcd_put_cur>
		lcd_send_string(">SPEED-XY/SPEED-Z");
 8003dd0:	480a      	ldr	r0, [pc, #40]	@ (8003dfc <display_main+0x140>)
 8003dd2:	f7ff f9d7 	bl	8003184 <lcd_send_string>
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	2000085c 	.word	0x2000085c
 8003de0:	08014da0 	.word	0x08014da0
 8003de4:	08014db0 	.word	0x08014db0
 8003de8:	08014dc0 	.word	0x08014dc0
 8003dec:	08014dd0 	.word	0x08014dd0
 8003df0:	08014de4 	.word	0x08014de4
 8003df4:	08014df4 	.word	0x08014df4
 8003df8:	08014e04 	.word	0x08014e04
 8003dfc:	08014e14 	.word	0x08014e14

08003e00 <menu_1>:
      break;
  }
}

void menu_1(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
    lcd_clear();
 8003e06:	f7ff f953 	bl	80030b0 <lcd_clear>
    lcd_put_cur(0,0);
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f7ff f967 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("VOLTAGE= ");
 8003e12:	4861      	ldr	r0, [pc, #388]	@ (8003f98 <menu_1+0x198>)
 8003e14:	f7ff f9b6 	bl	8003184 <lcd_send_string>
    lcd_put_cur(1,0);
 8003e18:	2100      	movs	r1, #0
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	f7ff f960 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("CURRENT= ");
 8003e20:	485e      	ldr	r0, [pc, #376]	@ (8003f9c <menu_1+0x19c>)
 8003e22:	f7ff f9af 	bl	8003184 <lcd_send_string>
    lcd_put_cur(2,0);
 8003e26:	2100      	movs	r1, #0
 8003e28:	2002      	movs	r0, #2
 8003e2a:	f7ff f959 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("ADC VOL= ");
 8003e2e:	485c      	ldr	r0, [pc, #368]	@ (8003fa0 <menu_1+0x1a0>)
 8003e30:	f7ff f9a8 	bl	8003184 <lcd_send_string>
    lcd_put_cur(3,0);
 8003e34:	2100      	movs	r1, #0
 8003e36:	2003      	movs	r0, #3
 8003e38:	f7ff f952 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("ADC CUR= ");
 8003e3c:	4859      	ldr	r0, [pc, #356]	@ (8003fa4 <menu_1+0x1a4>)
 8003e3e:	f7ff f9a1 	bl	8003184 <lcd_send_string>

    float last_voltage = -1;
 8003e42:	4b59      	ldr	r3, [pc, #356]	@ (8003fa8 <menu_1+0x1a8>)
 8003e44:	60fb      	str	r3, [r7, #12]
    float last_current = -1;
 8003e46:	4b58      	ldr	r3, [pc, #352]	@ (8003fa8 <menu_1+0x1a8>)
 8003e48:	60bb      	str	r3, [r7, #8]
    int last_adc_vol = -1;
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4e:	607b      	str	r3, [r7, #4]
    int last_adc_cur = -1;
 8003e50:	f04f 33ff 	mov.w	r3, #4294967295
 8003e54:	603b      	str	r3, [r7, #0]
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8003e56:	e07c      	b.n	8003f52 <menu_1+0x152>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
        {
        // Đo điện áp và dòng điện
        vol_messure();
 8003e58:	f7ff fc5a 	bl	8003710 <vol_messure>
        cur_messure();
 8003e5c:	f7ff fcf4 	bl	8003848 <cur_messure>

        // Cập nhật điện áp nếu có thay đổi
        if (LCD_adc.voltage != last_voltage)
 8003e60:	4b52      	ldr	r3, [pc, #328]	@ (8003fac <menu_1+0x1ac>)
 8003e62:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003e66:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e6a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e72:	d019      	beq.n	8003ea8 <menu_1+0xa8>
        {
            last_voltage = LCD_adc.voltage;
 8003e74:	4b4d      	ldr	r3, [pc, #308]	@ (8003fac <menu_1+0x1ac>)
 8003e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e78:	60fb      	str	r3, [r7, #12]
            float_to_string(LCD_adc.voltage, LCD_adc.volVal, 2);
 8003e7a:	4b4c      	ldr	r3, [pc, #304]	@ (8003fac <menu_1+0x1ac>)
 8003e7c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003e80:	2102      	movs	r1, #2
 8003e82:	484b      	ldr	r0, [pc, #300]	@ (8003fb0 <menu_1+0x1b0>)
 8003e84:	eeb0 0a67 	vmov.f32	s0, s15
 8003e88:	f7ff fe3a 	bl	8003b00 <float_to_string>
            lcd_put_cur(0, 9);
 8003e8c:	2109      	movs	r1, #9
 8003e8e:	2000      	movs	r0, #0
 8003e90:	f7ff f926 	bl	80030e0 <lcd_put_cur>
            lcd_send_string(LCD_adc.volVal);
 8003e94:	4846      	ldr	r0, [pc, #280]	@ (8003fb0 <menu_1+0x1b0>)
 8003e96:	f7ff f975 	bl	8003184 <lcd_send_string>
            lcd_put_cur(0, 15);
 8003e9a:	210f      	movs	r1, #15
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	f7ff f91f 	bl	80030e0 <lcd_put_cur>
            lcd_send_string("V");
 8003ea2:	4844      	ldr	r0, [pc, #272]	@ (8003fb4 <menu_1+0x1b4>)
 8003ea4:	f7ff f96e 	bl	8003184 <lcd_send_string>
        }

        // Cập nhật dòng điện nếu có thay đổi
        if (LCD_adc.current != last_current)
 8003ea8:	4b40      	ldr	r3, [pc, #256]	@ (8003fac <menu_1+0x1ac>)
 8003eaa:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003eae:	ed97 7a02 	vldr	s14, [r7, #8]
 8003eb2:	eeb4 7a67 	vcmp.f32	s14, s15
 8003eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eba:	d019      	beq.n	8003ef0 <menu_1+0xf0>
        {
            last_current = LCD_adc.current;
 8003ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8003fac <menu_1+0x1ac>)
 8003ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec0:	60bb      	str	r3, [r7, #8]
            float_to_string(LCD_adc.current, LCD_adc.curVal, 3);
 8003ec2:	4b3a      	ldr	r3, [pc, #232]	@ (8003fac <menu_1+0x1ac>)
 8003ec4:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003ec8:	2103      	movs	r1, #3
 8003eca:	483b      	ldr	r0, [pc, #236]	@ (8003fb8 <menu_1+0x1b8>)
 8003ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed0:	f7ff fe16 	bl	8003b00 <float_to_string>
            lcd_put_cur(1, 9);
 8003ed4:	2109      	movs	r1, #9
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	f7ff f902 	bl	80030e0 <lcd_put_cur>
            lcd_send_string(LCD_adc.curVal);
 8003edc:	4836      	ldr	r0, [pc, #216]	@ (8003fb8 <menu_1+0x1b8>)
 8003ede:	f7ff f951 	bl	8003184 <lcd_send_string>
            lcd_put_cur(1, 15);
 8003ee2:	210f      	movs	r1, #15
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	f7ff f8fb 	bl	80030e0 <lcd_put_cur>
            lcd_send_string("A");
 8003eea:	4834      	ldr	r0, [pc, #208]	@ (8003fbc <menu_1+0x1bc>)
 8003eec:	f7ff f94a 	bl	8003184 <lcd_send_string>
        }

        // Cập nhật adc volt nếu có thay đổi
        if (kalman_fil_volt.filter_kal != last_adc_vol)
 8003ef0:	4b33      	ldr	r3, [pc, #204]	@ (8003fc0 <menu_1+0x1c0>)
 8003ef2:	889b      	ldrh	r3, [r3, #4]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d010      	beq.n	8003f1e <menu_1+0x11e>
        {
            last_adc_vol = kalman_fil_curr.filter_kal; // Fixed: updating last_adc instead of last_current
 8003efc:	4b31      	ldr	r3, [pc, #196]	@ (8003fc4 <menu_1+0x1c4>)
 8003efe:	889b      	ldrh	r3, [r3, #4]
 8003f00:	607b      	str	r3, [r7, #4]
            snprintf(LCD_adc.adc_volVal, 6, "%d", kalman_fil_volt.filter_kal);
 8003f02:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc0 <menu_1+0x1c0>)
 8003f04:	889b      	ldrh	r3, [r3, #4]
 8003f06:	4a30      	ldr	r2, [pc, #192]	@ (8003fc8 <menu_1+0x1c8>)
 8003f08:	2106      	movs	r1, #6
 8003f0a:	4830      	ldr	r0, [pc, #192]	@ (8003fcc <menu_1+0x1cc>)
 8003f0c:	f00b febc 	bl	800fc88 <sniprintf>
            lcd_put_cur(2, 9);
 8003f10:	2109      	movs	r1, #9
 8003f12:	2002      	movs	r0, #2
 8003f14:	f7ff f8e4 	bl	80030e0 <lcd_put_cur>
            lcd_send_string(LCD_adc.adc_volVal);
 8003f18:	482c      	ldr	r0, [pc, #176]	@ (8003fcc <menu_1+0x1cc>)
 8003f1a:	f7ff f933 	bl	8003184 <lcd_send_string>
        }

        // Cập nhật adc curr nếu có thay đổi
        if (kalman_fil_curr.filter_kal != last_adc_cur)
 8003f1e:	4b29      	ldr	r3, [pc, #164]	@ (8003fc4 <menu_1+0x1c4>)
 8003f20:	889b      	ldrh	r3, [r3, #4]
 8003f22:	461a      	mov	r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d010      	beq.n	8003f4c <menu_1+0x14c>
        {
            last_adc_cur = kalman_fil_curr.filter_kal; // Fixed: updating last_adc instead of last_current
 8003f2a:	4b26      	ldr	r3, [pc, #152]	@ (8003fc4 <menu_1+0x1c4>)
 8003f2c:	889b      	ldrh	r3, [r3, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
            snprintf(LCD_adc.adc_curVal, 6, "%d", kalman_fil_curr.filter_kal);
 8003f30:	4b24      	ldr	r3, [pc, #144]	@ (8003fc4 <menu_1+0x1c4>)
 8003f32:	889b      	ldrh	r3, [r3, #4]
 8003f34:	4a24      	ldr	r2, [pc, #144]	@ (8003fc8 <menu_1+0x1c8>)
 8003f36:	2106      	movs	r1, #6
 8003f38:	4825      	ldr	r0, [pc, #148]	@ (8003fd0 <menu_1+0x1d0>)
 8003f3a:	f00b fea5 	bl	800fc88 <sniprintf>
            lcd_put_cur(3, 9);
 8003f3e:	2109      	movs	r1, #9
 8003f40:	2003      	movs	r0, #3
 8003f42:	f7ff f8cd 	bl	80030e0 <lcd_put_cur>
            lcd_send_string(LCD_adc.adc_curVal);
 8003f46:	4822      	ldr	r0, [pc, #136]	@ (8003fd0 <menu_1+0x1d0>)
 8003f48:	f7ff f91c 	bl	8003184 <lcd_send_string>
        }

        // Thêm một khoảng trễ nhỏ để ngăn việc sử dụng CPU quá mức
        osDelay(150);
 8003f4c:	2096      	movs	r0, #150	@ 0x96
 8003f4e:	f007 fa8b 	bl	800b468 <osDelay>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8003f52:	2140      	movs	r1, #64	@ 0x40
 8003f54:	481f      	ldr	r0, [pc, #124]	@ (8003fd4 <menu_1+0x1d4>)
 8003f56:	f002 fdb5 	bl	8006ac4 <HAL_GPIO_ReadPin>
 8003f5a:	4603      	mov	r3, r0
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d017      	beq.n	8003f90 <menu_1+0x190>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8003f60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f64:	481c      	ldr	r0, [pc, #112]	@ (8003fd8 <menu_1+0x1d8>)
 8003f66:	f002 fdad 	bl	8006ac4 <HAL_GPIO_ReadPin>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00f      	beq.n	8003f90 <menu_1+0x190>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 8003f70:	2180      	movs	r1, #128	@ 0x80
 8003f72:	4818      	ldr	r0, [pc, #96]	@ (8003fd4 <menu_1+0x1d4>)
 8003f74:	f002 fda6 	bl	8006ac4 <HAL_GPIO_ReadPin>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <menu_1+0x190>
 8003f7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f82:	4815      	ldr	r0, [pc, #84]	@ (8003fd8 <menu_1+0x1d8>)
 8003f84:	f002 fd9e 	bl	8006ac4 <HAL_GPIO_ReadPin>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f47f af64 	bne.w	8003e58 <menu_1+0x58>
    }
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	08014e48 	.word	0x08014e48
 8003f9c:	08014e54 	.word	0x08014e54
 8003fa0:	08014e60 	.word	0x08014e60
 8003fa4:	08014e6c 	.word	0x08014e6c
 8003fa8:	bf800000 	.word	0xbf800000
 8003fac:	2000085c 	.word	0x2000085c
 8003fb0:	200008f0 	.word	0x200008f0
 8003fb4:	08014e78 	.word	0x08014e78
 8003fb8:	200008f5 	.word	0x200008f5
 8003fbc:	08014e7c 	.word	0x08014e7c
 8003fc0:	20000978 	.word	0x20000978
 8003fc4:	20000928 	.word	0x20000928
 8003fc8:	08014e80 	.word	0x08014e80
 8003fcc:	200008fa 	.word	0x200008fa
 8003fd0:	200008ff 	.word	0x200008ff
 8003fd4:	40020000 	.word	0x40020000
 8003fd8:	40021000 	.word	0x40021000

08003fdc <menu_2>:



void menu_2(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
    lcd_clear();
 8003fe2:	f7ff f865 	bl	80030b0 <lcd_clear>
    lcd_put_cur(0,0);
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	2000      	movs	r0, #0
 8003fea:	f7ff f879 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("POWER= ");
 8003fee:	4843      	ldr	r0, [pc, #268]	@ (80040fc <menu_2+0x120>)
 8003ff0:	f7ff f8c8 	bl	8003184 <lcd_send_string>
    lcd_put_cur(1,0);
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	f7ff f872 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("TEMPER= ");
 8003ffc:	4840      	ldr	r0, [pc, #256]	@ (8004100 <menu_2+0x124>)
 8003ffe:	f7ff f8c1 	bl	8003184 <lcd_send_string>

    float last_power = -1;
 8004002:	4b40      	ldr	r3, [pc, #256]	@ (8004104 <menu_2+0x128>)
 8004004:	60fb      	str	r3, [r7, #12]
    float last_temp = -1;
 8004006:	4b3f      	ldr	r3, [pc, #252]	@ (8004104 <menu_2+0x128>)
 8004008:	60bb      	str	r3, [r7, #8]

    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 800400a:	e054      	b.n	80040b6 <menu_2+0xda>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
        {
        // Đo điện áp và dòng điện (để tính công suất và nhiệt độ)
        vol_messure();
 800400c:	f7ff fb80 	bl	8003710 <vol_messure>
        cur_messure();
 8004010:	f7ff fc1a 	bl	8003848 <cur_messure>

        // Cập nhật công suất nếu có thay đổi
        if (LCD_adc.power != last_power)
 8004014:	4b3c      	ldr	r3, [pc, #240]	@ (8004108 <menu_2+0x12c>)
 8004016:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800401a:	ed97 7a03 	vldr	s14, [r7, #12]
 800401e:	eeb4 7a67 	vcmp.f32	s14, s15
 8004022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004026:	d019      	beq.n	800405c <menu_2+0x80>
        {
            last_power = LCD_adc.power;
 8004028:	4b37      	ldr	r3, [pc, #220]	@ (8004108 <menu_2+0x12c>)
 800402a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402c:	60fb      	str	r3, [r7, #12]
            float_to_string(LCD_adc.power, LCD_adc.powVal, 2);
 800402e:	4b36      	ldr	r3, [pc, #216]	@ (8004108 <menu_2+0x12c>)
 8004030:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8004034:	2102      	movs	r1, #2
 8004036:	4835      	ldr	r0, [pc, #212]	@ (800410c <menu_2+0x130>)
 8004038:	eeb0 0a67 	vmov.f32	s0, s15
 800403c:	f7ff fd60 	bl	8003b00 <float_to_string>
            lcd_put_cur(0, 9);
 8004040:	2109      	movs	r1, #9
 8004042:	2000      	movs	r0, #0
 8004044:	f7ff f84c 	bl	80030e0 <lcd_put_cur>
            lcd_send_string(LCD_adc.powVal);
 8004048:	4830      	ldr	r0, [pc, #192]	@ (800410c <menu_2+0x130>)
 800404a:	f7ff f89b 	bl	8003184 <lcd_send_string>
            lcd_put_cur(0, 15);
 800404e:	210f      	movs	r1, #15
 8004050:	2000      	movs	r0, #0
 8004052:	f7ff f845 	bl	80030e0 <lcd_put_cur>
            lcd_send_string("W");
 8004056:	482e      	ldr	r0, [pc, #184]	@ (8004110 <menu_2+0x134>)
 8004058:	f7ff f894 	bl	8003184 <lcd_send_string>
        }

        // Cập nhật nhiệt độ nếu có thay đổi
        if (LCD_adc.temp != last_temp)
 800405c:	4b2a      	ldr	r3, [pc, #168]	@ (8004108 <menu_2+0x12c>)
 800405e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8004062:	ed97 7a02 	vldr	s14, [r7, #8]
 8004066:	eeb4 7a67 	vcmp.f32	s14, s15
 800406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406e:	d01f      	beq.n	80040b0 <menu_2+0xd4>
        {
            last_temp = LCD_adc.Temp;
 8004070:	4b25      	ldr	r3, [pc, #148]	@ (8004108 <menu_2+0x12c>)
 8004072:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004074:	60bb      	str	r3, [r7, #8]
            float_to_string(LCD_adc.Temp, LCD_adc.tempVal, 3);
 8004076:	4b24      	ldr	r3, [pc, #144]	@ (8004108 <menu_2+0x12c>)
 8004078:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 800407c:	2103      	movs	r1, #3
 800407e:	4825      	ldr	r0, [pc, #148]	@ (8004114 <menu_2+0x138>)
 8004080:	eeb0 0a67 	vmov.f32	s0, s15
 8004084:	f7ff fd3c 	bl	8003b00 <float_to_string>
            char celsiusSymbol[] = {0xDF, 'C', '\0'};
 8004088:	4a23      	ldr	r2, [pc, #140]	@ (8004118 <menu_2+0x13c>)
 800408a:	1d3b      	adds	r3, r7, #4
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	4611      	mov	r1, r2
 8004090:	8019      	strh	r1, [r3, #0]
 8004092:	3302      	adds	r3, #2
 8004094:	0c12      	lsrs	r2, r2, #16
 8004096:	701a      	strb	r2, [r3, #0]
            strcat(LCD_adc.tempVal, celsiusSymbol);
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	4619      	mov	r1, r3
 800409c:	481d      	ldr	r0, [pc, #116]	@ (8004114 <menu_2+0x138>)
 800409e:	f00b febe 	bl	800fe1e <strcat>
            lcd_put_cur(1, 9);
 80040a2:	2109      	movs	r1, #9
 80040a4:	2001      	movs	r0, #1
 80040a6:	f7ff f81b 	bl	80030e0 <lcd_put_cur>
            lcd_send_string(LCD_adc.tempVal);
 80040aa:	481a      	ldr	r0, [pc, #104]	@ (8004114 <menu_2+0x138>)
 80040ac:	f7ff f86a 	bl	8003184 <lcd_send_string>
        }

        // Thêm một khoảng trễ nhỏ để ngăn việc sử dụng CPU quá mức
        osDelay(100);
 80040b0:	2064      	movs	r0, #100	@ 0x64
 80040b2:	f007 f9d9 	bl	800b468 <osDelay>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 80040b6:	2140      	movs	r1, #64	@ 0x40
 80040b8:	4818      	ldr	r0, [pc, #96]	@ (800411c <menu_2+0x140>)
 80040ba:	f002 fd03 	bl	8006ac4 <HAL_GPIO_ReadPin>
 80040be:	4603      	mov	r3, r0
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d016      	beq.n	80040f2 <menu_2+0x116>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 80040c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80040c8:	4815      	ldr	r0, [pc, #84]	@ (8004120 <menu_2+0x144>)
 80040ca:	f002 fcfb 	bl	8006ac4 <HAL_GPIO_ReadPin>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00e      	beq.n	80040f2 <menu_2+0x116>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 80040d4:	2180      	movs	r1, #128	@ 0x80
 80040d6:	4811      	ldr	r0, [pc, #68]	@ (800411c <menu_2+0x140>)
 80040d8:	f002 fcf4 	bl	8006ac4 <HAL_GPIO_ReadPin>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <menu_2+0x116>
 80040e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80040e6:	480e      	ldr	r0, [pc, #56]	@ (8004120 <menu_2+0x144>)
 80040e8:	f002 fcec 	bl	8006ac4 <HAL_GPIO_ReadPin>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d18c      	bne.n	800400c <menu_2+0x30>
    }
}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	08014e84 	.word	0x08014e84
 8004100:	08014e8c 	.word	0x08014e8c
 8004104:	bf800000 	.word	0xbf800000
 8004108:	2000085c 	.word	0x2000085c
 800410c:	20000909 	.word	0x20000909
 8004110:	08014e98 	.word	0x08014e98
 8004114:	20000904 	.word	0x20000904
 8004118:	08014e9c 	.word	0x08014e9c
 800411c:	40020000 	.word	0x40020000
 8004120:	40021000 	.word	0x40021000

08004124 <menu_3>:


void menu_3(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
	if (LCD_adc.selected_menu3_item == 0)
 8004128:	4b2a      	ldr	r3, [pc, #168]	@ (80041d4 <menu_3+0xb0>)
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d117      	bne.n	8004160 <menu_3+0x3c>
	{
		lcd_clear();
 8004130:	f7fe ffbe 	bl	80030b0 <lcd_clear>
		lcd_put_cur(0, 0);
 8004134:	2100      	movs	r1, #0
 8004136:	2000      	movs	r0, #0
 8004138:	f7fe ffd2 	bl	80030e0 <lcd_put_cur>
		lcd_send_string(">TYPE X= ");
 800413c:	4826      	ldr	r0, [pc, #152]	@ (80041d8 <menu_3+0xb4>)
 800413e:	f7ff f821 	bl	8003184 <lcd_send_string>
		lcd_put_cur(1, 0);
 8004142:	2100      	movs	r1, #0
 8004144:	2001      	movs	r0, #1
 8004146:	f7fe ffcb 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("TYPE Y= ");
 800414a:	4824      	ldr	r0, [pc, #144]	@ (80041dc <menu_3+0xb8>)
 800414c:	f7ff f81a 	bl	8003184 <lcd_send_string>
		lcd_put_cur(2, 0);
 8004150:	2100      	movs	r1, #0
 8004152:	2002      	movs	r0, #2
 8004154:	f7fe ffc4 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("TYPE Z= ");
 8004158:	4821      	ldr	r0, [pc, #132]	@ (80041e0 <menu_3+0xbc>)
 800415a:	f7ff f813 	bl	8003184 <lcd_send_string>
		lcd_put_cur(1, 0);
		lcd_send_string("TYPE Y= ");
		lcd_put_cur(2, 0);
		lcd_send_string(">TYPE Z= ");
	}
}
 800415e:	e036      	b.n	80041ce <menu_3+0xaa>
	else if (LCD_adc.selected_menu3_item == 1)
 8004160:	4b1c      	ldr	r3, [pc, #112]	@ (80041d4 <menu_3+0xb0>)
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d117      	bne.n	8004198 <menu_3+0x74>
		lcd_clear();
 8004168:	f7fe ffa2 	bl	80030b0 <lcd_clear>
		lcd_put_cur(0, 0);
 800416c:	2100      	movs	r1, #0
 800416e:	2000      	movs	r0, #0
 8004170:	f7fe ffb6 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("TYPE X= ");
 8004174:	481b      	ldr	r0, [pc, #108]	@ (80041e4 <menu_3+0xc0>)
 8004176:	f7ff f805 	bl	8003184 <lcd_send_string>
		lcd_put_cur(1, 0);
 800417a:	2100      	movs	r1, #0
 800417c:	2001      	movs	r0, #1
 800417e:	f7fe ffaf 	bl	80030e0 <lcd_put_cur>
		lcd_send_string(">TYPE Y= ");
 8004182:	4819      	ldr	r0, [pc, #100]	@ (80041e8 <menu_3+0xc4>)
 8004184:	f7fe fffe 	bl	8003184 <lcd_send_string>
		lcd_put_cur(2, 0);
 8004188:	2100      	movs	r1, #0
 800418a:	2002      	movs	r0, #2
 800418c:	f7fe ffa8 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("TYPE Z= ");
 8004190:	4813      	ldr	r0, [pc, #76]	@ (80041e0 <menu_3+0xbc>)
 8004192:	f7fe fff7 	bl	8003184 <lcd_send_string>
}
 8004196:	e01a      	b.n	80041ce <menu_3+0xaa>
	else if (LCD_adc.selected_menu3_item == 2)
 8004198:	4b0e      	ldr	r3, [pc, #56]	@ (80041d4 <menu_3+0xb0>)
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d116      	bne.n	80041ce <menu_3+0xaa>
		lcd_clear();
 80041a0:	f7fe ff86 	bl	80030b0 <lcd_clear>
		lcd_put_cur(0, 0);
 80041a4:	2100      	movs	r1, #0
 80041a6:	2000      	movs	r0, #0
 80041a8:	f7fe ff9a 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("TYPE X= ");
 80041ac:	480d      	ldr	r0, [pc, #52]	@ (80041e4 <menu_3+0xc0>)
 80041ae:	f7fe ffe9 	bl	8003184 <lcd_send_string>
		lcd_put_cur(1, 0);
 80041b2:	2100      	movs	r1, #0
 80041b4:	2001      	movs	r0, #1
 80041b6:	f7fe ff93 	bl	80030e0 <lcd_put_cur>
		lcd_send_string("TYPE Y= ");
 80041ba:	4808      	ldr	r0, [pc, #32]	@ (80041dc <menu_3+0xb8>)
 80041bc:	f7fe ffe2 	bl	8003184 <lcd_send_string>
		lcd_put_cur(2, 0);
 80041c0:	2100      	movs	r1, #0
 80041c2:	2002      	movs	r0, #2
 80041c4:	f7fe ff8c 	bl	80030e0 <lcd_put_cur>
		lcd_send_string(">TYPE Z= ");
 80041c8:	4808      	ldr	r0, [pc, #32]	@ (80041ec <menu_3+0xc8>)
 80041ca:	f7fe ffdb 	bl	8003184 <lcd_send_string>
}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	2000085c 	.word	0x2000085c
 80041d8:	08014ea0 	.word	0x08014ea0
 80041dc:	08014eac 	.word	0x08014eac
 80041e0:	08014eb8 	.word	0x08014eb8
 80041e4:	08014ec4 	.word	0x08014ec4
 80041e8:	08014ed0 	.word	0x08014ed0
 80041ec:	08014edc 	.word	0x08014edc

080041f0 <select_menu3>:

void select_menu3(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
    switch (LCD_adc.selected_menu3_item)
 80041f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004220 <select_menu3+0x30>)
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d00c      	beq.n	8004216 <select_menu3+0x26>
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	dc0d      	bgt.n	800421c <select_menu3+0x2c>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <select_menu3+0x1a>
 8004204:	2b01      	cmp	r3, #1
 8004206:	d003      	beq.n	8004210 <select_menu3+0x20>
            break;
        case 2:
            lcd_clear();
            break;
    }
}
 8004208:	e008      	b.n	800421c <select_menu3+0x2c>
            lcd_clear();
 800420a:	f7fe ff51 	bl	80030b0 <lcd_clear>
            break;
 800420e:	e005      	b.n	800421c <select_menu3+0x2c>
            lcd_clear();
 8004210:	f7fe ff4e 	bl	80030b0 <lcd_clear>
            break;
 8004214:	e002      	b.n	800421c <select_menu3+0x2c>
            lcd_clear();
 8004216:	f7fe ff4b 	bl	80030b0 <lcd_clear>
            break;
 800421a:	bf00      	nop
}
 800421c:	bf00      	nop
 800421e:	bd80      	pop	{r7, pc}
 8004220:	2000085c 	.word	0x2000085c

08004224 <X_count>:

void X_count(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8004228:	e01c      	b.n	8004264 <X_count+0x40>
    {
        if (HAL_GPIO_ReadPin(moveXplus_port, moveXplus_pin) == CNC_pos.Lsw1)
 800422a:	2120      	movs	r1, #32
 800422c:	4825      	ldr	r0, [pc, #148]	@ (80042c4 <X_count+0xa0>)
 800422e:	f002 fc49 	bl	8006ac4 <HAL_GPIO_ReadPin>
 8004232:	4603      	mov	r3, r0
 8004234:	461a      	mov	r2, r3
 8004236:	4b24      	ldr	r3, [pc, #144]	@ (80042c8 <X_count+0xa4>)
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d103      	bne.n	8004246 <X_count+0x22>
        {
        	state.stop_press = 1;
 800423e:	4b23      	ldr	r3, [pc, #140]	@ (80042cc <X_count+0xa8>)
 8004240:	2201      	movs	r2, #1
 8004242:	705a      	strb	r2, [r3, #1]
            break;
 8004244:	e016      	b.n	8004274 <X_count+0x50>
        }
        LCD_adc.typeX_value++;
 8004246:	4b22      	ldr	r3, [pc, #136]	@ (80042d0 <X_count+0xac>)
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	3301      	adds	r3, #1
 800424c:	4a20      	ldr	r2, [pc, #128]	@ (80042d0 <X_count+0xac>)
 800424e:	6253      	str	r3, [r2, #36]	@ 0x24
        stepX(abs(LCD_adc.typeX_value), 0, 15);
 8004250:	4b1f      	ldr	r3, [pc, #124]	@ (80042d0 <X_count+0xac>)
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	2b00      	cmp	r3, #0
 8004256:	bfb8      	it	lt
 8004258:	425b      	neglt	r3, r3
 800425a:	220f      	movs	r2, #15
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff f8fc 	bl	800345c <stepX>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8004264:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004268:	481a      	ldr	r0, [pc, #104]	@ (80042d4 <X_count+0xb0>)
 800426a:	f002 fc2b 	bl	8006ac4 <HAL_GPIO_ReadPin>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0da      	beq.n	800422a <X_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004274:	e01c      	b.n	80042b0 <X_count+0x8c>
    {
        if (HAL_GPIO_ReadPin(moveXsub_port, moveXsub_pin) == CNC_pos.Lsw2)
 8004276:	2101      	movs	r1, #1
 8004278:	4817      	ldr	r0, [pc, #92]	@ (80042d8 <X_count+0xb4>)
 800427a:	f002 fc23 	bl	8006ac4 <HAL_GPIO_ReadPin>
 800427e:	4603      	mov	r3, r0
 8004280:	461a      	mov	r2, r3
 8004282:	4b11      	ldr	r3, [pc, #68]	@ (80042c8 <X_count+0xa4>)
 8004284:	785b      	ldrb	r3, [r3, #1]
 8004286:	429a      	cmp	r2, r3
 8004288:	d103      	bne.n	8004292 <X_count+0x6e>
        {
        	state.stop_press = 1;
 800428a:	4b10      	ldr	r3, [pc, #64]	@ (80042cc <X_count+0xa8>)
 800428c:	2201      	movs	r2, #1
 800428e:	705a      	strb	r2, [r3, #1]
            break;
 8004290:	e016      	b.n	80042c0 <X_count+0x9c>
        }
        LCD_adc.typeX_value--;
 8004292:	4b0f      	ldr	r3, [pc, #60]	@ (80042d0 <X_count+0xac>)
 8004294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004296:	3b01      	subs	r3, #1
 8004298:	4a0d      	ldr	r2, [pc, #52]	@ (80042d0 <X_count+0xac>)
 800429a:	6253      	str	r3, [r2, #36]	@ 0x24
        stepX(abs(LCD_adc.typeX_value), 1, 15);
 800429c:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <X_count+0xac>)
 800429e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bfb8      	it	lt
 80042a4:	425b      	neglt	r3, r3
 80042a6:	220f      	movs	r2, #15
 80042a8:	2101      	movs	r1, #1
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff f8d6 	bl	800345c <stepX>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 80042b0:	2110      	movs	r1, #16
 80042b2:	4804      	ldr	r0, [pc, #16]	@ (80042c4 <X_count+0xa0>)
 80042b4:	f002 fc06 	bl	8006ac4 <HAL_GPIO_ReadPin>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0db      	beq.n	8004276 <X_count+0x52>
    }
}
 80042be:	bf00      	nop
 80042c0:	bf00      	nop
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40020800 	.word	0x40020800
 80042c8:	20000718 	.word	0x20000718
 80042cc:	200009c8 	.word	0x200009c8
 80042d0:	2000085c 	.word	0x2000085c
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40020400 	.word	0x40020400

080042dc <Y_count>:

void Y_count(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 80042e0:	e01c      	b.n	800431c <Y_count+0x40>
    {
        if (HAL_GPIO_ReadPin(moveYplus_port, moveYplus_pin) == CNC_pos.Lsw3)
 80042e2:	2104      	movs	r1, #4
 80042e4:	4825      	ldr	r0, [pc, #148]	@ (800437c <Y_count+0xa0>)
 80042e6:	f002 fbed 	bl	8006ac4 <HAL_GPIO_ReadPin>
 80042ea:	4603      	mov	r3, r0
 80042ec:	461a      	mov	r2, r3
 80042ee:	4b24      	ldr	r3, [pc, #144]	@ (8004380 <Y_count+0xa4>)
 80042f0:	789b      	ldrb	r3, [r3, #2]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d103      	bne.n	80042fe <Y_count+0x22>
        {
        	state.stop_press = 1;
 80042f6:	4b23      	ldr	r3, [pc, #140]	@ (8004384 <Y_count+0xa8>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	705a      	strb	r2, [r3, #1]
            break;
 80042fc:	e016      	b.n	800432c <Y_count+0x50>
        }
        LCD_adc.typeY_value++;
 80042fe:	4b22      	ldr	r3, [pc, #136]	@ (8004388 <Y_count+0xac>)
 8004300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004302:	3301      	adds	r3, #1
 8004304:	4a20      	ldr	r2, [pc, #128]	@ (8004388 <Y_count+0xac>)
 8004306:	6293      	str	r3, [r2, #40]	@ 0x28
        stepY(abs(LCD_adc.typeY_value), 0, 15);
 8004308:	4b1f      	ldr	r3, [pc, #124]	@ (8004388 <Y_count+0xac>)
 800430a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430c:	2b00      	cmp	r3, #0
 800430e:	bfb8      	it	lt
 8004310:	425b      	neglt	r3, r3
 8004312:	220f      	movs	r2, #15
 8004314:	2100      	movs	r1, #0
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff f8cc 	bl	80034b4 <stepY>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 800431c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004320:	481a      	ldr	r0, [pc, #104]	@ (800438c <Y_count+0xb0>)
 8004322:	f002 fbcf 	bl	8006ac4 <HAL_GPIO_ReadPin>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0da      	beq.n	80042e2 <Y_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 800432c:	e01c      	b.n	8004368 <Y_count+0x8c>
    {
        if (HAL_GPIO_ReadPin(moveYsub_port, moveYsub_pin) == CNC_pos.Lsw4)
 800432e:	2102      	movs	r1, #2
 8004330:	4812      	ldr	r0, [pc, #72]	@ (800437c <Y_count+0xa0>)
 8004332:	f002 fbc7 	bl	8006ac4 <HAL_GPIO_ReadPin>
 8004336:	4603      	mov	r3, r0
 8004338:	461a      	mov	r2, r3
 800433a:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <Y_count+0xa4>)
 800433c:	78db      	ldrb	r3, [r3, #3]
 800433e:	429a      	cmp	r2, r3
 8004340:	d103      	bne.n	800434a <Y_count+0x6e>
        {
        	state.stop_press = 1;
 8004342:	4b10      	ldr	r3, [pc, #64]	@ (8004384 <Y_count+0xa8>)
 8004344:	2201      	movs	r2, #1
 8004346:	705a      	strb	r2, [r3, #1]
            break;
 8004348:	e016      	b.n	8004378 <Y_count+0x9c>
        }
        LCD_adc.typeY_value--;
 800434a:	4b0f      	ldr	r3, [pc, #60]	@ (8004388 <Y_count+0xac>)
 800434c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434e:	3b01      	subs	r3, #1
 8004350:	4a0d      	ldr	r2, [pc, #52]	@ (8004388 <Y_count+0xac>)
 8004352:	6293      	str	r3, [r2, #40]	@ 0x28
        stepY(abs(LCD_adc.typeY_value), 1, 15);
 8004354:	4b0c      	ldr	r3, [pc, #48]	@ (8004388 <Y_count+0xac>)
 8004356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004358:	2b00      	cmp	r3, #0
 800435a:	bfb8      	it	lt
 800435c:	425b      	neglt	r3, r3
 800435e:	220f      	movs	r2, #15
 8004360:	2101      	movs	r1, #1
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff f8a6 	bl	80034b4 <stepY>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004368:	2110      	movs	r1, #16
 800436a:	4809      	ldr	r0, [pc, #36]	@ (8004390 <Y_count+0xb4>)
 800436c:	f002 fbaa 	bl	8006ac4 <HAL_GPIO_ReadPin>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0db      	beq.n	800432e <Y_count+0x52>
    }
}
 8004376:	bf00      	nop
 8004378:	bf00      	nop
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40020400 	.word	0x40020400
 8004380:	20000718 	.word	0x20000718
 8004384:	200009c8 	.word	0x200009c8
 8004388:	2000085c 	.word	0x2000085c
 800438c:	40021000 	.word	0x40021000
 8004390:	40020800 	.word	0x40020800

08004394 <Z_count>:

void Z_count(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8004398:	e01d      	b.n	80043d6 <Z_count+0x42>
    {
        if (HAL_GPIO_ReadPin(moveZsub_port, moveZsub_pin) ==  CNC_pos.Lsw6)
 800439a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800439e:	4826      	ldr	r0, [pc, #152]	@ (8004438 <Z_count+0xa4>)
 80043a0:	f002 fb90 	bl	8006ac4 <HAL_GPIO_ReadPin>
 80043a4:	4603      	mov	r3, r0
 80043a6:	461a      	mov	r2, r3
 80043a8:	4b24      	ldr	r3, [pc, #144]	@ (800443c <Z_count+0xa8>)
 80043aa:	795b      	ldrb	r3, [r3, #5]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d103      	bne.n	80043b8 <Z_count+0x24>
        {
        	state.stop_press = 1;
 80043b0:	4b23      	ldr	r3, [pc, #140]	@ (8004440 <Z_count+0xac>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	705a      	strb	r2, [r3, #1]
            break;
 80043b6:	e016      	b.n	80043e6 <Z_count+0x52>
        }
        LCD_adc.typeZ_value--;
 80043b8:	4b22      	ldr	r3, [pc, #136]	@ (8004444 <Z_count+0xb0>)
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	3b01      	subs	r3, #1
 80043be:	4a21      	ldr	r2, [pc, #132]	@ (8004444 <Z_count+0xb0>)
 80043c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        stepZ(abs(LCD_adc.typeZ_value), 1, 15);
 80043c2:	4b20      	ldr	r3, [pc, #128]	@ (8004444 <Z_count+0xb0>)
 80043c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	bfb8      	it	lt
 80043ca:	425b      	neglt	r3, r3
 80043cc:	220f      	movs	r2, #15
 80043ce:	2101      	movs	r1, #1
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff f89b 	bl	800350c <stepZ>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 80043d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80043da:	4817      	ldr	r0, [pc, #92]	@ (8004438 <Z_count+0xa4>)
 80043dc:	f002 fb72 	bl	8006ac4 <HAL_GPIO_ReadPin>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0d9      	beq.n	800439a <Z_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 80043e6:	e01c      	b.n	8004422 <Z_count+0x8e>
    {
        if (HAL_GPIO_ReadPin(moveZplus_port, moveZplus_pin) ==  CNC_pos.Lsw5)
 80043e8:	2180      	movs	r1, #128	@ 0x80
 80043ea:	4813      	ldr	r0, [pc, #76]	@ (8004438 <Z_count+0xa4>)
 80043ec:	f002 fb6a 	bl	8006ac4 <HAL_GPIO_ReadPin>
 80043f0:	4603      	mov	r3, r0
 80043f2:	461a      	mov	r2, r3
 80043f4:	4b11      	ldr	r3, [pc, #68]	@ (800443c <Z_count+0xa8>)
 80043f6:	791b      	ldrb	r3, [r3, #4]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d103      	bne.n	8004404 <Z_count+0x70>
        {
        	state.stop_press = 1;
 80043fc:	4b10      	ldr	r3, [pc, #64]	@ (8004440 <Z_count+0xac>)
 80043fe:	2201      	movs	r2, #1
 8004400:	705a      	strb	r2, [r3, #1]
            break;
 8004402:	e016      	b.n	8004432 <Z_count+0x9e>
        }
        LCD_adc.typeZ_value++;
 8004404:	4b0f      	ldr	r3, [pc, #60]	@ (8004444 <Z_count+0xb0>)
 8004406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004408:	3301      	adds	r3, #1
 800440a:	4a0e      	ldr	r2, [pc, #56]	@ (8004444 <Z_count+0xb0>)
 800440c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        stepZ(abs(LCD_adc.typeZ_value), 0, 15);
 800440e:	4b0d      	ldr	r3, [pc, #52]	@ (8004444 <Z_count+0xb0>)
 8004410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004412:	2b00      	cmp	r3, #0
 8004414:	bfb8      	it	lt
 8004416:	425b      	neglt	r3, r3
 8004418:	220f      	movs	r2, #15
 800441a:	2100      	movs	r1, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff f875 	bl	800350c <stepZ>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004422:	2110      	movs	r1, #16
 8004424:	4808      	ldr	r0, [pc, #32]	@ (8004448 <Z_count+0xb4>)
 8004426:	f002 fb4d 	bl	8006ac4 <HAL_GPIO_ReadPin>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0db      	beq.n	80043e8 <Z_count+0x54>
    }
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000
 800443c:	20000718 	.word	0x20000718
 8004440:	200009c8 	.word	0x200009c8
 8004444:	2000085c 	.word	0x2000085c
 8004448:	40020800 	.word	0x40020800

0800444c <menu_4>:

void menu_4(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
    if (LCD_adc.selected_menu4_item == 0)
 8004450:	4b17      	ldr	r3, [pc, #92]	@ (80044b0 <menu_4+0x64>)
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d112      	bne.n	800447e <menu_4+0x32>
    {
        lcd_clear();
 8004458:	f7fe fe2a 	bl	80030b0 <lcd_clear>
        lcd_put_cur(0, 0);
 800445c:	2100      	movs	r1, #0
 800445e:	2000      	movs	r0, #0
 8004460:	f7fe fe3e 	bl	80030e0 <lcd_put_cur>
        lcd_send_string(">SPEED X-Y= ");
 8004464:	4813      	ldr	r0, [pc, #76]	@ (80044b4 <menu_4+0x68>)
 8004466:	f7fe fe8d 	bl	8003184 <lcd_send_string>
        lcd_put_cur(1, 0);
 800446a:	2100      	movs	r1, #0
 800446c:	2001      	movs	r0, #1
 800446e:	f7fe fe37 	bl	80030e0 <lcd_put_cur>
        lcd_send_string("SPEED Z= ");
 8004472:	4811      	ldr	r0, [pc, #68]	@ (80044b8 <menu_4+0x6c>)
 8004474:	f7fe fe86 	bl	8003184 <lcd_send_string>
        speedXY_count();
 8004478:	f000 f838 	bl	80044ec <speedXY_count>
        lcd_send_string("SPEED X-Y= ");
        lcd_put_cur(1, 0);
        lcd_send_string(">SPEED Z= ");
        speedZ_count();
    }
}
 800447c:	e015      	b.n	80044aa <menu_4+0x5e>
    else if (LCD_adc.selected_menu4_item == 1)
 800447e:	4b0c      	ldr	r3, [pc, #48]	@ (80044b0 <menu_4+0x64>)
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d111      	bne.n	80044aa <menu_4+0x5e>
        lcd_clear();
 8004486:	f7fe fe13 	bl	80030b0 <lcd_clear>
        lcd_put_cur(0, 0);
 800448a:	2100      	movs	r1, #0
 800448c:	2000      	movs	r0, #0
 800448e:	f7fe fe27 	bl	80030e0 <lcd_put_cur>
        lcd_send_string("SPEED X-Y= ");
 8004492:	480a      	ldr	r0, [pc, #40]	@ (80044bc <menu_4+0x70>)
 8004494:	f7fe fe76 	bl	8003184 <lcd_send_string>
        lcd_put_cur(1, 0);
 8004498:	2100      	movs	r1, #0
 800449a:	2001      	movs	r0, #1
 800449c:	f7fe fe20 	bl	80030e0 <lcd_put_cur>
        lcd_send_string(">SPEED Z= ");
 80044a0:	4807      	ldr	r0, [pc, #28]	@ (80044c0 <menu_4+0x74>)
 80044a2:	f7fe fe6f 	bl	8003184 <lcd_send_string>
        speedZ_count();
 80044a6:	f000 f861 	bl	800456c <speedZ_count>
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	2000085c 	.word	0x2000085c
 80044b4:	08014ee8 	.word	0x08014ee8
 80044b8:	08014ef8 	.word	0x08014ef8
 80044bc:	08014f04 	.word	0x08014f04
 80044c0:	08014f10 	.word	0x08014f10

080044c4 <select_menu4>:

void select_menu4(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
    switch (LCD_adc.selected_menu4_item)
 80044c8:	4b07      	ldr	r3, [pc, #28]	@ (80044e8 <select_menu4+0x24>)
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <select_menu4+0x12>
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d003      	beq.n	80044dc <select_menu4+0x18>
            break;
        case 1:
            lcd_clear();
            break;
    }
}
 80044d4:	e005      	b.n	80044e2 <select_menu4+0x1e>
            lcd_clear();
 80044d6:	f7fe fdeb 	bl	80030b0 <lcd_clear>
            break;
 80044da:	e002      	b.n	80044e2 <select_menu4+0x1e>
            lcd_clear();
 80044dc:	f7fe fde8 	bl	80030b0 <lcd_clear>
            break;
 80044e0:	bf00      	nop
}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	2000085c 	.word	0x2000085c

080044ec <speedXY_count>:

void speedXY_count(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 80044f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80044f4:	4819      	ldr	r0, [pc, #100]	@ (800455c <speedXY_count+0x70>)
 80044f6:	f002 fae5 	bl	8006ac4 <HAL_GPIO_ReadPin>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d111      	bne.n	8004524 <speedXY_count+0x38>
    {
        LCD_adc.speed_valueXY += 100;
 8004500:	4b17      	ldr	r3, [pc, #92]	@ (8004560 <speedXY_count+0x74>)
 8004502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004504:	3364      	adds	r3, #100	@ 0x64
 8004506:	4a16      	ldr	r2, [pc, #88]	@ (8004560 <speedXY_count+0x74>)
 8004508:	6313      	str	r3, [r2, #48]	@ 0x30
        CNC_pos.max_speedXY = LCD_adc.speed_valueXY;
 800450a:	4b15      	ldr	r3, [pc, #84]	@ (8004560 <speedXY_count+0x74>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	4618      	mov	r0, r3
 8004510:	f7fc f818 	bl	8000544 <__aeabi_i2d>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4912      	ldr	r1, [pc, #72]	@ (8004564 <speedXY_count+0x78>)
 800451a:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
        osDelay(10);
 800451e:	200a      	movs	r0, #10
 8004520:	f006 ffa2 	bl	800b468 <osDelay>
    }
    if (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004524:	2110      	movs	r1, #16
 8004526:	4810      	ldr	r0, [pc, #64]	@ (8004568 <speedXY_count+0x7c>)
 8004528:	f002 facc 	bl	8006ac4 <HAL_GPIO_ReadPin>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d111      	bne.n	8004556 <speedXY_count+0x6a>
    {
        LCD_adc.speed_valueXY -= 100;
 8004532:	4b0b      	ldr	r3, [pc, #44]	@ (8004560 <speedXY_count+0x74>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004536:	3b64      	subs	r3, #100	@ 0x64
 8004538:	4a09      	ldr	r2, [pc, #36]	@ (8004560 <speedXY_count+0x74>)
 800453a:	6313      	str	r3, [r2, #48]	@ 0x30
        CNC_pos.max_speedXY = LCD_adc.speed_valueXY;
 800453c:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <speedXY_count+0x74>)
 800453e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004540:	4618      	mov	r0, r3
 8004542:	f7fb ffff 	bl	8000544 <__aeabi_i2d>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4906      	ldr	r1, [pc, #24]	@ (8004564 <speedXY_count+0x78>)
 800454c:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
        osDelay(10);
 8004550:	200a      	movs	r0, #10
 8004552:	f006 ff89 	bl	800b468 <osDelay>
    }
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	2000085c 	.word	0x2000085c
 8004564:	20000718 	.word	0x20000718
 8004568:	40020800 	.word	0x40020800

0800456c <speedZ_count>:

void speedZ_count(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8004570:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004574:	4819      	ldr	r0, [pc, #100]	@ (80045dc <speedZ_count+0x70>)
 8004576:	f002 faa5 	bl	8006ac4 <HAL_GPIO_ReadPin>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d111      	bne.n	80045a4 <speedZ_count+0x38>
    {
        LCD_adc.speed_valueZ += 100;
 8004580:	4b17      	ldr	r3, [pc, #92]	@ (80045e0 <speedZ_count+0x74>)
 8004582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004584:	3364      	adds	r3, #100	@ 0x64
 8004586:	4a16      	ldr	r2, [pc, #88]	@ (80045e0 <speedZ_count+0x74>)
 8004588:	6353      	str	r3, [r2, #52]	@ 0x34
        CNC_pos.max_speedZ = LCD_adc.speed_valueZ;
 800458a:	4b15      	ldr	r3, [pc, #84]	@ (80045e0 <speedZ_count+0x74>)
 800458c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458e:	4618      	mov	r0, r3
 8004590:	f7fb ffd8 	bl	8000544 <__aeabi_i2d>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4912      	ldr	r1, [pc, #72]	@ (80045e4 <speedZ_count+0x78>)
 800459a:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
        osDelay(10);
 800459e:	200a      	movs	r0, #10
 80045a0:	f006 ff62 	bl	800b468 <osDelay>
    }
    if (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 80045a4:	2110      	movs	r1, #16
 80045a6:	4810      	ldr	r0, [pc, #64]	@ (80045e8 <speedZ_count+0x7c>)
 80045a8:	f002 fa8c 	bl	8006ac4 <HAL_GPIO_ReadPin>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d111      	bne.n	80045d6 <speedZ_count+0x6a>
    {
        LCD_adc.speed_valueZ -= 100;
 80045b2:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <speedZ_count+0x74>)
 80045b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b6:	3b64      	subs	r3, #100	@ 0x64
 80045b8:	4a09      	ldr	r2, [pc, #36]	@ (80045e0 <speedZ_count+0x74>)
 80045ba:	6353      	str	r3, [r2, #52]	@ 0x34
        CNC_pos.max_speedZ = LCD_adc.speed_valueZ;
 80045bc:	4b08      	ldr	r3, [pc, #32]	@ (80045e0 <speedZ_count+0x74>)
 80045be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fb ffbf 	bl	8000544 <__aeabi_i2d>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4906      	ldr	r1, [pc, #24]	@ (80045e4 <speedZ_count+0x78>)
 80045cc:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
        osDelay(10);
 80045d0:	200a      	movs	r0, #10
 80045d2:	f006 ff49 	bl	800b468 <osDelay>
    }
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000
 80045e0:	2000085c 	.word	0x2000085c
 80045e4:	20000718 	.word	0x20000718
 80045e8:	40020800 	.word	0x40020800

080045ec <updateButtonState>:

// Function to update button state and debounce time
void updateButtonState(Button* button, uint32_t currentTime) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
    button->last_stable_state = HAL_GPIO_ReadPin(button->port, button->pin);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f002 fa5f 	bl	8006ac4 <HAL_GPIO_ReadPin>
 8004606:	4603      	mov	r3, r0
 8004608:	461a      	mov	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	609a      	str	r2, [r3, #8]
    button->last_debounce_time = currentTime;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	60da      	str	r2, [r3, #12]
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_GPIO_EXTI_Callback>:

// HAL GPIO EXTI Callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	80fb      	strh	r3, [r7, #6]
    uint32_t currentTime = HAL_GetTick();
 8004626:	f001 f997 	bl	8005958 <HAL_GetTick>
 800462a:	60b8      	str	r0, [r7, #8]

    for (int i = 0; i < numButtons; ++i) {
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e013      	b.n	800465a <HAL_GPIO_EXTI_Callback+0x3e>
        if (buttons[i]->pin == GPIO_Pin) {
 8004632:	4a0e      	ldr	r2, [pc, #56]	@ (800466c <HAL_GPIO_EXTI_Callback+0x50>)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	88fa      	ldrh	r2, [r7, #6]
 800463e:	429a      	cmp	r2, r3
 8004640:	d108      	bne.n	8004654 <HAL_GPIO_EXTI_Callback+0x38>
            updateButtonState(buttons[i], currentTime);
 8004642:	4a0a      	ldr	r2, [pc, #40]	@ (800466c <HAL_GPIO_EXTI_Callback+0x50>)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff ffcd 	bl	80045ec <updateButtonState>
            break;
 8004652:	e007      	b.n	8004664 <HAL_GPIO_EXTI_Callback+0x48>
    for (int i = 0; i < numButtons; ++i) {
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3301      	adds	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	2207      	movs	r2, #7
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4293      	cmp	r3, r2
 8004660:	dbe7      	blt.n	8004632 <HAL_GPIO_EXTI_Callback+0x16>
        }
    }
}
 8004662:	bf00      	nop
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	2000008c 	.word	0x2000008c

08004670 <ButtonTask>:

// Function to handle button tasks
void ButtonTask(void) {
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8004676:	f001 f96f 	bl	8005958 <HAL_GetTick>
 800467a:	60b8      	str	r0, [r7, #8]

    for (int i = 0; i < numButtons; ++i) {
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e017      	b.n	80046b2 <ButtonTask+0x42>
        Button* button = buttons[i];
 8004682:	4a69      	ldr	r2, [pc, #420]	@ (8004828 <ButtonTask+0x1b8>)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468a:	607b      	str	r3, [r7, #4]

        if ((current_time - button->last_debounce_time > DEBOUNCE_DELAY) && (button->last_stable_state == GPIO_PIN_RESET)) {
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b50      	cmp	r3, #80	@ 0x50
 8004696:	d909      	bls.n	80046ac <ButtonTask+0x3c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d105      	bne.n	80046ac <ButtonTask+0x3c>
            button->handler();
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	4798      	blx	r3
            button->last_debounce_time = current_time;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < numButtons; ++i) {
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3301      	adds	r3, #1
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	2207      	movs	r2, #7
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4293      	cmp	r3, r2
 80046b8:	dbe3      	blt.n	8004682 <ButtonTask+0x12>
        }
    }

    // Check button states for menu 3 and menu 4
    if (LCD_adc.demtong == 3 && LCD_adc.demmenu_3 == 1) {
 80046ba:	4b5c      	ldr	r3, [pc, #368]	@ (800482c <ButtonTask+0x1bc>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d165      	bne.n	800478e <ButtonTask+0x11e>
 80046c2:	4b5a      	ldr	r3, [pc, #360]	@ (800482c <ButtonTask+0x1bc>)
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d161      	bne.n	800478e <ButtonTask+0x11e>
        switch (LCD_adc.selected_menu3_item) {
 80046ca:	4b58      	ldr	r3, [pc, #352]	@ (800482c <ButtonTask+0x1bc>)
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d040      	beq.n	8004754 <ButtonTask+0xe4>
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	dc5b      	bgt.n	800478e <ButtonTask+0x11e>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <ButtonTask+0x70>
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d01d      	beq.n	800471a <ButtonTask+0xaa>
 80046de:	e056      	b.n	800478e <ButtonTask+0x11e>
            case 0:
                lcd_put_cur(0, 0);
 80046e0:	2100      	movs	r1, #0
 80046e2:	2000      	movs	r0, #0
 80046e4:	f7fe fcfc 	bl	80030e0 <lcd_put_cur>
                lcd_send_string(">TYPE X= ");
 80046e8:	4851      	ldr	r0, [pc, #324]	@ (8004830 <ButtonTask+0x1c0>)
 80046ea:	f7fe fd4b 	bl	8003184 <lcd_send_string>
                float_to_string(LCD_adc.typeX_value, LCD_adc.X_Val, 2);
 80046ee:	4b4f      	ldr	r3, [pc, #316]	@ (800482c <ButtonTask+0x1bc>)
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046fa:	2102      	movs	r1, #2
 80046fc:	484d      	ldr	r0, [pc, #308]	@ (8004834 <ButtonTask+0x1c4>)
 80046fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004702:	f7ff f9fd 	bl	8003b00 <float_to_string>
                lcd_put_cur(0, 9);
 8004706:	2109      	movs	r1, #9
 8004708:	2000      	movs	r0, #0
 800470a:	f7fe fce9 	bl	80030e0 <lcd_put_cur>
                lcd_send_string(LCD_adc.X_Val);
 800470e:	4849      	ldr	r0, [pc, #292]	@ (8004834 <ButtonTask+0x1c4>)
 8004710:	f7fe fd38 	bl	8003184 <lcd_send_string>
                X_count();
 8004714:	f7ff fd86 	bl	8004224 <X_count>
                break;
 8004718:	e039      	b.n	800478e <ButtonTask+0x11e>
            case 1:
                lcd_put_cur(1, 0);
 800471a:	2100      	movs	r1, #0
 800471c:	2001      	movs	r0, #1
 800471e:	f7fe fcdf 	bl	80030e0 <lcd_put_cur>
                lcd_send_string(">TYPE Y= ");
 8004722:	4845      	ldr	r0, [pc, #276]	@ (8004838 <ButtonTask+0x1c8>)
 8004724:	f7fe fd2e 	bl	8003184 <lcd_send_string>
                float_to_string(LCD_adc.typeY_value, LCD_adc.Y_Val, 2);
 8004728:	4b40      	ldr	r3, [pc, #256]	@ (800482c <ButtonTask+0x1bc>)
 800472a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472c:	ee07 3a90 	vmov	s15, r3
 8004730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004734:	2102      	movs	r1, #2
 8004736:	4841      	ldr	r0, [pc, #260]	@ (800483c <ButtonTask+0x1cc>)
 8004738:	eeb0 0a67 	vmov.f32	s0, s15
 800473c:	f7ff f9e0 	bl	8003b00 <float_to_string>
                lcd_put_cur(1, 9);
 8004740:	2109      	movs	r1, #9
 8004742:	2001      	movs	r0, #1
 8004744:	f7fe fccc 	bl	80030e0 <lcd_put_cur>
                lcd_send_string(LCD_adc.Y_Val);
 8004748:	483c      	ldr	r0, [pc, #240]	@ (800483c <ButtonTask+0x1cc>)
 800474a:	f7fe fd1b 	bl	8003184 <lcd_send_string>
                Y_count();
 800474e:	f7ff fdc5 	bl	80042dc <Y_count>
                break;
 8004752:	e01c      	b.n	800478e <ButtonTask+0x11e>
            case 2:
                lcd_put_cur(2, 0);
 8004754:	2100      	movs	r1, #0
 8004756:	2002      	movs	r0, #2
 8004758:	f7fe fcc2 	bl	80030e0 <lcd_put_cur>
                lcd_send_string(">TYPE Z= ");
 800475c:	4838      	ldr	r0, [pc, #224]	@ (8004840 <ButtonTask+0x1d0>)
 800475e:	f7fe fd11 	bl	8003184 <lcd_send_string>
                float_to_string(LCD_adc.typeZ_value, LCD_adc.Z_Val, 2);
 8004762:	4b32      	ldr	r3, [pc, #200]	@ (800482c <ButtonTask+0x1bc>)
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800476e:	2102      	movs	r1, #2
 8004770:	4834      	ldr	r0, [pc, #208]	@ (8004844 <ButtonTask+0x1d4>)
 8004772:	eeb0 0a67 	vmov.f32	s0, s15
 8004776:	f7ff f9c3 	bl	8003b00 <float_to_string>
                lcd_put_cur(2, 9);
 800477a:	2109      	movs	r1, #9
 800477c:	2002      	movs	r0, #2
 800477e:	f7fe fcaf 	bl	80030e0 <lcd_put_cur>
                lcd_send_string(LCD_adc.Z_Val);
 8004782:	4830      	ldr	r0, [pc, #192]	@ (8004844 <ButtonTask+0x1d4>)
 8004784:	f7fe fcfe 	bl	8003184 <lcd_send_string>
                Z_count();
 8004788:	f7ff fe04 	bl	8004394 <Z_count>
                break;
 800478c:	bf00      	nop
        }
    }

    if (LCD_adc.demtong == 3 && LCD_adc.demmenu_4 == 1) {
 800478e:	4b27      	ldr	r3, [pc, #156]	@ (800482c <ButtonTask+0x1bc>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b03      	cmp	r3, #3
 8004794:	d144      	bne.n	8004820 <ButtonTask+0x1b0>
 8004796:	4b25      	ldr	r3, [pc, #148]	@ (800482c <ButtonTask+0x1bc>)
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d140      	bne.n	8004820 <ButtonTask+0x1b0>
        switch (LCD_adc.selected_menu4_item) {
 800479e:	4b23      	ldr	r3, [pc, #140]	@ (800482c <ButtonTask+0x1bc>)
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <ButtonTask+0x13c>
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d01d      	beq.n	80047e6 <ButtonTask+0x176>
                lcd_send_string(LCD_adc.speed_ValZ);
                speedZ_count();
                break;
        }
    }
}
 80047aa:	e039      	b.n	8004820 <ButtonTask+0x1b0>
                lcd_put_cur(0, 0);
 80047ac:	2100      	movs	r1, #0
 80047ae:	2000      	movs	r0, #0
 80047b0:	f7fe fc96 	bl	80030e0 <lcd_put_cur>
                lcd_send_string(">SPEED X-Y= ");
 80047b4:	4824      	ldr	r0, [pc, #144]	@ (8004848 <ButtonTask+0x1d8>)
 80047b6:	f7fe fce5 	bl	8003184 <lcd_send_string>
                float_to_string(LCD_adc.speed_valueXY, LCD_adc.speed_ValXY, 2);
 80047ba:	4b1c      	ldr	r3, [pc, #112]	@ (800482c <ButtonTask+0x1bc>)
 80047bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047c6:	2102      	movs	r1, #2
 80047c8:	4820      	ldr	r0, [pc, #128]	@ (800484c <ButtonTask+0x1dc>)
 80047ca:	eeb0 0a67 	vmov.f32	s0, s15
 80047ce:	f7ff f997 	bl	8003b00 <float_to_string>
                lcd_put_cur(0, 12);
 80047d2:	210c      	movs	r1, #12
 80047d4:	2000      	movs	r0, #0
 80047d6:	f7fe fc83 	bl	80030e0 <lcd_put_cur>
                lcd_send_string(LCD_adc.speed_ValXY);
 80047da:	481c      	ldr	r0, [pc, #112]	@ (800484c <ButtonTask+0x1dc>)
 80047dc:	f7fe fcd2 	bl	8003184 <lcd_send_string>
                speedXY_count();
 80047e0:	f7ff fe84 	bl	80044ec <speedXY_count>
                break;
 80047e4:	e01c      	b.n	8004820 <ButtonTask+0x1b0>
                lcd_put_cur(1, 0);
 80047e6:	2100      	movs	r1, #0
 80047e8:	2001      	movs	r0, #1
 80047ea:	f7fe fc79 	bl	80030e0 <lcd_put_cur>
                lcd_send_string(">SPEED Z= ");
 80047ee:	4818      	ldr	r0, [pc, #96]	@ (8004850 <ButtonTask+0x1e0>)
 80047f0:	f7fe fcc8 	bl	8003184 <lcd_send_string>
                float_to_string(LCD_adc.speed_valueZ, LCD_adc.speed_ValZ, 2);
 80047f4:	4b0d      	ldr	r3, [pc, #52]	@ (800482c <ButtonTask+0x1bc>)
 80047f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f8:	ee07 3a90 	vmov	s15, r3
 80047fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004800:	2102      	movs	r1, #2
 8004802:	4814      	ldr	r0, [pc, #80]	@ (8004854 <ButtonTask+0x1e4>)
 8004804:	eeb0 0a67 	vmov.f32	s0, s15
 8004808:	f7ff f97a 	bl	8003b00 <float_to_string>
                lcd_put_cur(1, 12);
 800480c:	210c      	movs	r1, #12
 800480e:	2001      	movs	r0, #1
 8004810:	f7fe fc66 	bl	80030e0 <lcd_put_cur>
                lcd_send_string(LCD_adc.speed_ValZ);
 8004814:	480f      	ldr	r0, [pc, #60]	@ (8004854 <ButtonTask+0x1e4>)
 8004816:	f7fe fcb5 	bl	8003184 <lcd_send_string>
                speedZ_count();
 800481a:	f7ff fea7 	bl	800456c <speedZ_count>
                break;
 800481e:	bf00      	nop
}
 8004820:	bf00      	nop
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	2000008c 	.word	0x2000008c
 800482c:	2000085c 	.word	0x2000085c
 8004830:	08014ea0 	.word	0x08014ea0
 8004834:	2000090e 	.word	0x2000090e
 8004838:	08014ed0 	.word	0x08014ed0
 800483c:	20000913 	.word	0x20000913
 8004840:	08014edc 	.word	0x08014edc
 8004844:	20000918 	.word	0x20000918
 8004848:	08014ee8 	.word	0x08014ee8
 800484c:	2000091d 	.word	0x2000091d
 8004850:	08014f10 	.word	0x08014f10
 8004854:	20000922 	.word	0x20000922

08004858 <handle_up_button_press>:

void handle_up_button_press(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
    if (LCD_adc.demtong == 1) // move down in menu_main
 800485c:	4b22      	ldr	r3, [pc, #136]	@ (80048e8 <handle_up_button_press+0x90>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d10f      	bne.n	8004884 <handle_up_button_press+0x2c>
    {
        if (LCD_adc.menu_main <= 0)
 8004864:	4b20      	ldr	r3, [pc, #128]	@ (80048e8 <handle_up_button_press+0x90>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	dc03      	bgt.n	8004874 <handle_up_button_press+0x1c>
        {
            LCD_adc.menu_main = 3;
 800486c:	4b1e      	ldr	r3, [pc, #120]	@ (80048e8 <handle_up_button_press+0x90>)
 800486e:	2203      	movs	r2, #3
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e004      	b.n	800487e <handle_up_button_press+0x26>
        }
        else
        {
            LCD_adc.menu_main -= 1;
 8004874:	4b1c      	ldr	r3, [pc, #112]	@ (80048e8 <handle_up_button_press+0x90>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3b01      	subs	r3, #1
 800487a:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <handle_up_button_press+0x90>)
 800487c:	6013      	str	r3, [r2, #0]
        }
        display_main();
 800487e:	f7ff fa1d 	bl	8003cbc <display_main>
        {
            LCD_adc.selected_menu4_item -= 1;
        }
        menu_4();
    }
}
 8004882:	e02e      	b.n	80048e2 <handle_up_button_press+0x8a>
    else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 2)
 8004884:	4b18      	ldr	r3, [pc, #96]	@ (80048e8 <handle_up_button_press+0x90>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b02      	cmp	r3, #2
 800488a:	d113      	bne.n	80048b4 <handle_up_button_press+0x5c>
 800488c:	4b16      	ldr	r3, [pc, #88]	@ (80048e8 <handle_up_button_press+0x90>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d10f      	bne.n	80048b4 <handle_up_button_press+0x5c>
        if(LCD_adc.selected_menu3_item <= 0)
 8004894:	4b14      	ldr	r3, [pc, #80]	@ (80048e8 <handle_up_button_press+0x90>)
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	dc03      	bgt.n	80048a4 <handle_up_button_press+0x4c>
            LCD_adc.selected_menu3_item = 2;
 800489c:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <handle_up_button_press+0x90>)
 800489e:	2202      	movs	r2, #2
 80048a0:	615a      	str	r2, [r3, #20]
 80048a2:	e004      	b.n	80048ae <handle_up_button_press+0x56>
            LCD_adc.selected_menu3_item -= 1;
 80048a4:	4b10      	ldr	r3, [pc, #64]	@ (80048e8 <handle_up_button_press+0x90>)
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	4a0f      	ldr	r2, [pc, #60]	@ (80048e8 <handle_up_button_press+0x90>)
 80048ac:	6153      	str	r3, [r2, #20]
        menu_3();
 80048ae:	f7ff fc39 	bl	8004124 <menu_3>
}
 80048b2:	e016      	b.n	80048e2 <handle_up_button_press+0x8a>
    else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 3)
 80048b4:	4b0c      	ldr	r3, [pc, #48]	@ (80048e8 <handle_up_button_press+0x90>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d112      	bne.n	80048e2 <handle_up_button_press+0x8a>
 80048bc:	4b0a      	ldr	r3, [pc, #40]	@ (80048e8 <handle_up_button_press+0x90>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d10e      	bne.n	80048e2 <handle_up_button_press+0x8a>
        if(LCD_adc.selected_menu4_item <= 0)
 80048c4:	4b08      	ldr	r3, [pc, #32]	@ (80048e8 <handle_up_button_press+0x90>)
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	dc03      	bgt.n	80048d4 <handle_up_button_press+0x7c>
            LCD_adc.selected_menu4_item = 1;
 80048cc:	4b06      	ldr	r3, [pc, #24]	@ (80048e8 <handle_up_button_press+0x90>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	619a      	str	r2, [r3, #24]
 80048d2:	e004      	b.n	80048de <handle_up_button_press+0x86>
            LCD_adc.selected_menu4_item -= 1;
 80048d4:	4b04      	ldr	r3, [pc, #16]	@ (80048e8 <handle_up_button_press+0x90>)
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	3b01      	subs	r3, #1
 80048da:	4a03      	ldr	r2, [pc, #12]	@ (80048e8 <handle_up_button_press+0x90>)
 80048dc:	6193      	str	r3, [r2, #24]
        menu_4();
 80048de:	f7ff fdb5 	bl	800444c <menu_4>
}
 80048e2:	bf00      	nop
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	2000085c 	.word	0x2000085c

080048ec <handle_down_button_press>:

void handle_down_button_press(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
	if (LCD_adc.demtong == 1) // move up in menu_main
 80048f0:	4b22      	ldr	r3, [pc, #136]	@ (800497c <handle_down_button_press+0x90>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d10f      	bne.n	8004918 <handle_down_button_press+0x2c>
	{
		if (LCD_adc.menu_main >= 3)
 80048f8:	4b20      	ldr	r3, [pc, #128]	@ (800497c <handle_down_button_press+0x90>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	dd03      	ble.n	8004908 <handle_down_button_press+0x1c>
		{
		   LCD_adc.menu_main = 0;
 8004900:	4b1e      	ldr	r3, [pc, #120]	@ (800497c <handle_down_button_press+0x90>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	e004      	b.n	8004912 <handle_down_button_press+0x26>
		}
		else
		{
		   LCD_adc.menu_main += 1;
 8004908:	4b1c      	ldr	r3, [pc, #112]	@ (800497c <handle_down_button_press+0x90>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3301      	adds	r3, #1
 800490e:	4a1b      	ldr	r2, [pc, #108]	@ (800497c <handle_down_button_press+0x90>)
 8004910:	6013      	str	r3, [r2, #0]
		}
		display_main();
 8004912:	f7ff f9d3 	bl	8003cbc <display_main>
		{
			LCD_adc.selected_menu4_item += 1;
		}
		menu_4();
	}
}
 8004916:	e02e      	b.n	8004976 <handle_down_button_press+0x8a>
	else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 2)
 8004918:	4b18      	ldr	r3, [pc, #96]	@ (800497c <handle_down_button_press+0x90>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d113      	bne.n	8004948 <handle_down_button_press+0x5c>
 8004920:	4b16      	ldr	r3, [pc, #88]	@ (800497c <handle_down_button_press+0x90>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b02      	cmp	r3, #2
 8004926:	d10f      	bne.n	8004948 <handle_down_button_press+0x5c>
		if(LCD_adc.selected_menu3_item >= 2)
 8004928:	4b14      	ldr	r3, [pc, #80]	@ (800497c <handle_down_button_press+0x90>)
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	2b01      	cmp	r3, #1
 800492e:	dd03      	ble.n	8004938 <handle_down_button_press+0x4c>
			LCD_adc.selected_menu3_item = 0;
 8004930:	4b12      	ldr	r3, [pc, #72]	@ (800497c <handle_down_button_press+0x90>)
 8004932:	2200      	movs	r2, #0
 8004934:	615a      	str	r2, [r3, #20]
 8004936:	e004      	b.n	8004942 <handle_down_button_press+0x56>
			LCD_adc.selected_menu3_item += 1;
 8004938:	4b10      	ldr	r3, [pc, #64]	@ (800497c <handle_down_button_press+0x90>)
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	3301      	adds	r3, #1
 800493e:	4a0f      	ldr	r2, [pc, #60]	@ (800497c <handle_down_button_press+0x90>)
 8004940:	6153      	str	r3, [r2, #20]
		menu_3();
 8004942:	f7ff fbef 	bl	8004124 <menu_3>
}
 8004946:	e016      	b.n	8004976 <handle_down_button_press+0x8a>
	else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 3)
 8004948:	4b0c      	ldr	r3, [pc, #48]	@ (800497c <handle_down_button_press+0x90>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d112      	bne.n	8004976 <handle_down_button_press+0x8a>
 8004950:	4b0a      	ldr	r3, [pc, #40]	@ (800497c <handle_down_button_press+0x90>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d10e      	bne.n	8004976 <handle_down_button_press+0x8a>
		if(LCD_adc.selected_menu4_item >= 1)
 8004958:	4b08      	ldr	r3, [pc, #32]	@ (800497c <handle_down_button_press+0x90>)
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	dd03      	ble.n	8004968 <handle_down_button_press+0x7c>
			LCD_adc.selected_menu4_item = 0;
 8004960:	4b06      	ldr	r3, [pc, #24]	@ (800497c <handle_down_button_press+0x90>)
 8004962:	2200      	movs	r2, #0
 8004964:	619a      	str	r2, [r3, #24]
 8004966:	e004      	b.n	8004972 <handle_down_button_press+0x86>
			LCD_adc.selected_menu4_item += 1;
 8004968:	4b04      	ldr	r3, [pc, #16]	@ (800497c <handle_down_button_press+0x90>)
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	3301      	adds	r3, #1
 800496e:	4a03      	ldr	r2, [pc, #12]	@ (800497c <handle_down_button_press+0x90>)
 8004970:	6193      	str	r3, [r2, #24]
		menu_4();
 8004972:	f7ff fd6b 	bl	800444c <menu_4>
}
 8004976:	bf00      	nop
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	2000085c 	.word	0x2000085c

08004980 <handle_back_button_press>:

void handle_back_button_press(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
    LCD_adc.demback += 1;
 8004984:	4b54      	ldr	r3, [pc, #336]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	3301      	adds	r3, #1
 800498a:	4a53      	ldr	r2, [pc, #332]	@ (8004ad8 <handle_back_button_press+0x158>)
 800498c:	6113      	str	r3, [r2, #16]
    if (LCD_adc.demback == 1)
 800498e:	4b52      	ldr	r3, [pc, #328]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b01      	cmp	r3, #1
 8004994:	f040 8099 	bne.w	8004aca <handle_back_button_press+0x14a>
    {
       if (LCD_adc.demtong == 1 && (LCD_adc.menu_main == 0 || LCD_adc.menu_main == 1 || LCD_adc.menu_main == 2 || LCD_adc.menu_main == 3))
 8004998:	4b4f      	ldr	r3, [pc, #316]	@ (8004ad8 <handle_back_button_press+0x158>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d11a      	bne.n	80049d6 <handle_back_button_press+0x56>
 80049a0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ad8 <handle_back_button_press+0x158>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00b      	beq.n	80049c0 <handle_back_button_press+0x40>
 80049a8:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad8 <handle_back_button_press+0x158>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d007      	beq.n	80049c0 <handle_back_button_press+0x40>
 80049b0:	4b49      	ldr	r3, [pc, #292]	@ (8004ad8 <handle_back_button_press+0x158>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d003      	beq.n	80049c0 <handle_back_button_press+0x40>
 80049b8:	4b47      	ldr	r3, [pc, #284]	@ (8004ad8 <handle_back_button_press+0x158>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d10a      	bne.n	80049d6 <handle_back_button_press+0x56>
       {
           LCD_adc.demtong -= 1;
 80049c0:	4b45      	ldr	r3, [pc, #276]	@ (8004ad8 <handle_back_button_press+0x158>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	4a44      	ldr	r2, [pc, #272]	@ (8004ad8 <handle_back_button_press+0x158>)
 80049c8:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 80049ca:	4b43      	ldr	r3, [pc, #268]	@ (8004ad8 <handle_back_button_press+0x158>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	611a      	str	r2, [r3, #16]
           display_menu();
 80049d0:	f7ff f948 	bl	8003c64 <display_menu>
 80049d4:	e07d      	b.n	8004ad2 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 0) // From menu_1 back to display main_menu
 80049d6:	4b40      	ldr	r3, [pc, #256]	@ (8004ad8 <handle_back_button_press+0x158>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d10e      	bne.n	80049fc <handle_back_button_press+0x7c>
 80049de:	4b3e      	ldr	r3, [pc, #248]	@ (8004ad8 <handle_back_button_press+0x158>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <handle_back_button_press+0x7c>
       {
           LCD_adc.demtong -= 1;
 80049e6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ad8 <handle_back_button_press+0x158>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	4a3a      	ldr	r2, [pc, #232]	@ (8004ad8 <handle_back_button_press+0x158>)
 80049ee:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 80049f0:	4b39      	ldr	r3, [pc, #228]	@ (8004ad8 <handle_back_button_press+0x158>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	611a      	str	r2, [r3, #16]
           display_main();
 80049f6:	f7ff f961 	bl	8003cbc <display_main>
 80049fa:	e06a      	b.n	8004ad2 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 1) // From menu_2 back to display main_menu
 80049fc:	4b36      	ldr	r3, [pc, #216]	@ (8004ad8 <handle_back_button_press+0x158>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d10e      	bne.n	8004a22 <handle_back_button_press+0xa2>
 8004a04:	4b34      	ldr	r3, [pc, #208]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d10a      	bne.n	8004a22 <handle_back_button_press+0xa2>
       {
           LCD_adc.demtong -= 1;
 8004a0c:	4b32      	ldr	r3, [pc, #200]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	4a31      	ldr	r2, [pc, #196]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a14:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 8004a16:	4b30      	ldr	r3, [pc, #192]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	611a      	str	r2, [r3, #16]
           display_main();
 8004a1c:	f7ff f94e 	bl	8003cbc <display_main>
 8004a20:	e057      	b.n	8004ad2 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 2) // From menu_3 back to display main_menu
 8004a22:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d111      	bne.n	8004a4e <handle_back_button_press+0xce>
 8004a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d10d      	bne.n	8004a4e <handle_back_button_press+0xce>
       {
           LCD_adc.demtong -= 1;
 8004a32:	4b29      	ldr	r3, [pc, #164]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	4a27      	ldr	r2, [pc, #156]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a3a:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 8004a3c:	4b26      	ldr	r3, [pc, #152]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	611a      	str	r2, [r3, #16]
           LCD_adc.demmenu_3 = 0;
 8004a42:	4b25      	ldr	r3, [pc, #148]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	61da      	str	r2, [r3, #28]
           display_main();
 8004a48:	f7ff f938 	bl	8003cbc <display_main>
 8004a4c:	e041      	b.n	8004ad2 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 3 && LCD_adc.demmenu_3 >= 1) // From select_menu3 back to menu_3
 8004a4e:	4b22      	ldr	r3, [pc, #136]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d10f      	bne.n	8004a76 <handle_back_button_press+0xf6>
 8004a56:	4b20      	ldr	r3, [pc, #128]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	dd0b      	ble.n	8004a76 <handle_back_button_press+0xf6>
       {
           LCD_adc.demback = 0;
 8004a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	611a      	str	r2, [r3, #16]
           LCD_adc.demtong = 2;
 8004a64:	4b1c      	ldr	r3, [pc, #112]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a66:	2202      	movs	r2, #2
 8004a68:	60da      	str	r2, [r3, #12]
           LCD_adc.selected_menu3_item = 0;
 8004a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	615a      	str	r2, [r3, #20]
           menu_3();
 8004a70:	f7ff fb58 	bl	8004124 <menu_3>
 8004a74:	e02d      	b.n	8004ad2 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 3) // From menu_4 back to display main_menu
 8004a76:	4b18      	ldr	r3, [pc, #96]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d111      	bne.n	8004aa2 <handle_back_button_press+0x122>
 8004a7e:	4b16      	ldr	r3, [pc, #88]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d10d      	bne.n	8004aa2 <handle_back_button_press+0x122>
       {
           LCD_adc.demtong -= 1;
 8004a86:	4b14      	ldr	r3, [pc, #80]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	4a12      	ldr	r2, [pc, #72]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a8e:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 8004a90:	4b11      	ldr	r3, [pc, #68]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	611a      	str	r2, [r3, #16]
           LCD_adc.demmenu_4 = 0;
 8004a96:	4b10      	ldr	r3, [pc, #64]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	621a      	str	r2, [r3, #32]
           display_main();
 8004a9c:	f7ff f90e 	bl	8003cbc <display_main>
 8004aa0:	e017      	b.n	8004ad2 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 3 && LCD_adc.demmenu_4 >= 1) // From select_menu4 back to menu_4
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d113      	bne.n	8004ad2 <handle_back_button_press+0x152>
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	dd0f      	ble.n	8004ad2 <handle_back_button_press+0x152>
       {
           LCD_adc.demback = 0;
 8004ab2:	4b09      	ldr	r3, [pc, #36]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	611a      	str	r2, [r3, #16]
           LCD_adc.demtong = 2;
 8004ab8:	4b07      	ldr	r3, [pc, #28]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004aba:	2202      	movs	r2, #2
 8004abc:	60da      	str	r2, [r3, #12]
           LCD_adc.selected_menu4_item = 0;
 8004abe:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	619a      	str	r2, [r3, #24]
           menu_4();
 8004ac4:	f7ff fcc2 	bl	800444c <menu_4>
    }
    else
    {
       LCD_adc.demback = 0;
    }
}
 8004ac8:	e003      	b.n	8004ad2 <handle_back_button_press+0x152>
       LCD_adc.demback = 0;
 8004aca:	4b03      	ldr	r3, [pc, #12]	@ (8004ad8 <handle_back_button_press+0x158>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	611a      	str	r2, [r3, #16]
}
 8004ad0:	e7ff      	b.n	8004ad2 <handle_back_button_press+0x152>
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	2000085c 	.word	0x2000085c

08004adc <handle_select_button_press>:

void handle_select_button_press(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
    LCD_adc.demtong += 1;
 8004ae0:	4b3c      	ldr	r3, [pc, #240]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	4a3b      	ldr	r2, [pc, #236]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004ae8:	60d3      	str	r3, [r2, #12]
    if (LCD_adc.demtong == 1) // in menu_main
 8004aea:	4b3a      	ldr	r3, [pc, #232]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d105      	bne.n	8004afe <handle_select_button_press+0x22>
    {
       LCD_adc.demback = 0;
 8004af2:	4b38      	ldr	r3, [pc, #224]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	611a      	str	r2, [r3, #16]
       display_main();
 8004af8:	f7ff f8e0 	bl	8003cbc <display_main>
    else if (LCD_adc.demtong > 3)
    {
       LCD_adc.demtong = 3;
       LCD_adc.demback = 0;
    }
}
 8004afc:	e068      	b.n	8004bd0 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 0) // choose menu 1
 8004afe:	4b35      	ldr	r3, [pc, #212]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d109      	bne.n	8004b1a <handle_select_button_press+0x3e>
 8004b06:	4b33      	ldr	r3, [pc, #204]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d105      	bne.n	8004b1a <handle_select_button_press+0x3e>
       LCD_adc.demback = 0;
 8004b0e:	4b31      	ldr	r3, [pc, #196]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	611a      	str	r2, [r3, #16]
       menu_1();
 8004b14:	f7ff f974 	bl	8003e00 <menu_1>
 8004b18:	e05a      	b.n	8004bd0 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 1) // choose menu 2
 8004b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d109      	bne.n	8004b36 <handle_select_button_press+0x5a>
 8004b22:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d105      	bne.n	8004b36 <handle_select_button_press+0x5a>
       LCD_adc.demback = 0;
 8004b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	611a      	str	r2, [r3, #16]
       menu_2();
 8004b30:	f7ff fa54 	bl	8003fdc <menu_2>
 8004b34:	e04c      	b.n	8004bd0 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 2) // In menu 3
 8004b36:	4b27      	ldr	r3, [pc, #156]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d10e      	bne.n	8004b5c <handle_select_button_press+0x80>
 8004b3e:	4b25      	ldr	r3, [pc, #148]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d10a      	bne.n	8004b5c <handle_select_button_press+0x80>
       LCD_adc.demback = 0;
 8004b46:	4b23      	ldr	r3, [pc, #140]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	611a      	str	r2, [r3, #16]
       menu_3();
 8004b4c:	f7ff faea 	bl	8004124 <menu_3>
       LCD_adc.demmenu_3 += 1;
 8004b50:	4b20      	ldr	r3, [pc, #128]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	3301      	adds	r3, #1
 8004b56:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b58:	61d3      	str	r3, [r2, #28]
 8004b5a:	e039      	b.n	8004bd0 <handle_select_button_press+0xf4>
    else if(LCD_adc.demtong == 3 && LCD_adc.demmenu_3 == 1)//choose menu 3
 8004b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d109      	bne.n	8004b78 <handle_select_button_press+0x9c>
 8004b64:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d105      	bne.n	8004b78 <handle_select_button_press+0x9c>
        LCD_adc.demback = 0;
 8004b6c:	4b19      	ldr	r3, [pc, #100]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]
       select_menu3();
 8004b72:	f7ff fb3d 	bl	80041f0 <select_menu3>
 8004b76:	e02b      	b.n	8004bd0 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 3) // In menu 4
 8004b78:	4b16      	ldr	r3, [pc, #88]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d10e      	bne.n	8004b9e <handle_select_button_press+0xc2>
 8004b80:	4b14      	ldr	r3, [pc, #80]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d10a      	bne.n	8004b9e <handle_select_button_press+0xc2>
       LCD_adc.demback = 0;
 8004b88:	4b12      	ldr	r3, [pc, #72]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]
       menu_4();
 8004b8e:	f7ff fc5d 	bl	800444c <menu_4>
       LCD_adc.demmenu_4 += 1;
 8004b92:	4b10      	ldr	r3, [pc, #64]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	3301      	adds	r3, #1
 8004b98:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004b9a:	6213      	str	r3, [r2, #32]
 8004b9c:	e018      	b.n	8004bd0 <handle_select_button_press+0xf4>
    else if(LCD_adc.demtong == 3 && LCD_adc.demmenu_4 == 1)//choose menu 4
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d109      	bne.n	8004bba <handle_select_button_press+0xde>
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d105      	bne.n	8004bba <handle_select_button_press+0xde>
       LCD_adc.demback = 0;
 8004bae:	4b09      	ldr	r3, [pc, #36]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	611a      	str	r2, [r3, #16]
       select_menu4();
 8004bb4:	f7ff fc86 	bl	80044c4 <select_menu4>
 8004bb8:	e00a      	b.n	8004bd0 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong > 3)
 8004bba:	4b06      	ldr	r3, [pc, #24]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	dd06      	ble.n	8004bd0 <handle_select_button_press+0xf4>
       LCD_adc.demtong = 3;
 8004bc2:	4b04      	ldr	r3, [pc, #16]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004bc4:	2203      	movs	r2, #3
 8004bc6:	60da      	str	r2, [r3, #12]
       LCD_adc.demback = 0;
 8004bc8:	4b02      	ldr	r3, [pc, #8]	@ (8004bd4 <handle_select_button_press+0xf8>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	611a      	str	r2, [r3, #16]
}
 8004bce:	e7ff      	b.n	8004bd0 <handle_select_button_press+0xf4>
 8004bd0:	bf00      	nop
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	2000085c 	.word	0x2000085c

08004bd8 <handle_reset_button_press>:

void handle_reset_button_press(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
    if (state.reset_press == 1)
 8004bdc:	4b05      	ldr	r3, [pc, #20]	@ (8004bf4 <handle_reset_button_press+0x1c>)
 8004bde:	789b      	ldrb	r3, [r3, #2]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d104      	bne.n	8004bf0 <handle_reset_button_press+0x18>
    {
        resetProgram();
 8004be6:	f000 f849 	bl	8004c7c <resetProgram>
        // when reseted, restarted again
        state.reset_press = 0;
 8004bea:	4b02      	ldr	r3, [pc, #8]	@ (8004bf4 <handle_reset_button_press+0x1c>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	709a      	strb	r2, [r3, #2]
    }
}
 8004bf0:	bf00      	nop
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	200009c8 	.word	0x200009c8

08004bf8 <handle_start_button_press>:

void handle_start_button_press(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
    if (state.reset_press == 0)
 8004bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004c34 <handle_start_button_press+0x3c>)
 8004bfe:	789b      	ldrb	r3, [r3, #2]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d113      	bne.n	8004c2e <handle_start_button_press+0x36>
    {
    	state.start_press = 1;
 8004c06:	4b0b      	ldr	r3, [pc, #44]	@ (8004c34 <handle_start_button_press+0x3c>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
    	state.stop_press = 0;
 8004c0c:	4b09      	ldr	r3, [pc, #36]	@ (8004c34 <handle_start_button_press+0x3c>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	705a      	strb	r2, [r3, #1]
        HAL_GPIO_WritePin(drill_port, drill_pin, 1);
 8004c12:	2201      	movs	r2, #1
 8004c14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c18:	4807      	ldr	r0, [pc, #28]	@ (8004c38 <handle_start_button_press+0x40>)
 8004c1a:	f001 ff6b 	bl	8006af4 <HAL_GPIO_WritePin>
    	HAL_UART_Transmit(&huart2, (uint8_t*)"IP\n", 3, 10);
 8004c1e:	230a      	movs	r3, #10
 8004c20:	2203      	movs	r2, #3
 8004c22:	4906      	ldr	r1, [pc, #24]	@ (8004c3c <handle_start_button_press+0x44>)
 8004c24:	4806      	ldr	r0, [pc, #24]	@ (8004c40 <handle_start_button_press+0x48>)
 8004c26:	f005 fadd 	bl	800a1e4 <HAL_UART_Transmit>
    	StartProgram();
 8004c2a:	f000 f935 	bl	8004e98 <StartProgram>
    }
}
 8004c2e:	bf00      	nop
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	200009c8 	.word	0x200009c8
 8004c38:	40020400 	.word	0x40020400
 8004c3c:	08014f1c 	.word	0x08014f1c
 8004c40:	20000b88 	.word	0x20000b88

08004c44 <handle_stop_button_press>:

void handle_stop_button_press(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
    if (state.reset_press == 0)
 8004c48:	4b0a      	ldr	r3, [pc, #40]	@ (8004c74 <handle_stop_button_press+0x30>)
 8004c4a:	789b      	ldrb	r3, [r3, #2]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10d      	bne.n	8004c6e <handle_stop_button_press+0x2a>
    {
    	state.stop_press = 1;
 8004c52:	4b08      	ldr	r3, [pc, #32]	@ (8004c74 <handle_stop_button_press+0x30>)
 8004c54:	2201      	movs	r2, #1
 8004c56:	705a      	strb	r2, [r3, #1]
        HAL_GPIO_WritePin(drill_port, drill_pin, 0);
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c5e:	4806      	ldr	r0, [pc, #24]	@ (8004c78 <handle_stop_button_press+0x34>)
 8004c60:	f001 ff48 	bl	8006af4 <HAL_GPIO_WritePin>
        StopProgram();
 8004c64:	f000 f900 	bl	8004e68 <StopProgram>
        // Sau khi dừng, chỉ cho phép nhấn nút reset
        state.reset_press = 1;
 8004c68:	4b02      	ldr	r3, [pc, #8]	@ (8004c74 <handle_stop_button_press+0x30>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	709a      	strb	r2, [r3, #2]
    }
}
 8004c6e:	bf00      	nop
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	200009c8 	.word	0x200009c8
 8004c78:	40020400 	.word	0x40020400

08004c7c <resetProgram>:

void resetProgram(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
	state.start_press = 0;
 8004c80:	4b6e      	ldr	r3, [pc, #440]	@ (8004e3c <resetProgram+0x1c0>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]
	state.stop_press = 1;
 8004c86:	4b6d      	ldr	r3, [pc, #436]	@ (8004e3c <resetProgram+0x1c0>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	705a      	strb	r2, [r3, #1]
    // reset var
    lcd_clear();
 8004c8c:	f7fe fa10 	bl	80030b0 <lcd_clear>
    lcd_put_cur(1, 2);
 8004c90:	2102      	movs	r1, #2
 8004c92:	2001      	movs	r0, #1
 8004c94:	f7fe fa24 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("PROGRAM RESETING");
 8004c98:	4869      	ldr	r0, [pc, #420]	@ (8004e40 <resetProgram+0x1c4>)
 8004c9a:	f7fe fa73 	bl	8003184 <lcd_send_string>
    LCD_adc.demtong = 0;
 8004c9e:	4b69      	ldr	r3, [pc, #420]	@ (8004e44 <resetProgram+0x1c8>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	60da      	str	r2, [r3, #12]
    LCD_adc.demback = 0;
 8004ca4:	4b67      	ldr	r3, [pc, #412]	@ (8004e44 <resetProgram+0x1c8>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	611a      	str	r2, [r3, #16]
    LCD_adc.menu_main = 0;
 8004caa:	4b66      	ldr	r3, [pc, #408]	@ (8004e44 <resetProgram+0x1c8>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
    LCD_adc.selected_menu3_item = 0;
 8004cb0:	4b64      	ldr	r3, [pc, #400]	@ (8004e44 <resetProgram+0x1c8>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	615a      	str	r2, [r3, #20]
    LCD_adc.selected_menu4_item = 0;
 8004cb6:	4b63      	ldr	r3, [pc, #396]	@ (8004e44 <resetProgram+0x1c8>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	619a      	str	r2, [r3, #24]
    LCD_adc.demmenu_3 = 0;
 8004cbc:	4b61      	ldr	r3, [pc, #388]	@ (8004e44 <resetProgram+0x1c8>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	61da      	str	r2, [r3, #28]
    LCD_adc.demmenu_4 = 0;
 8004cc2:	4b60      	ldr	r3, [pc, #384]	@ (8004e44 <resetProgram+0x1c8>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	621a      	str	r2, [r3, #32]
    LCD_adc.typeX_value = 0;
 8004cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8004e44 <resetProgram+0x1c8>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	625a      	str	r2, [r3, #36]	@ 0x24
    LCD_adc.typeY_value = 0;
 8004cce:	4b5d      	ldr	r3, [pc, #372]	@ (8004e44 <resetProgram+0x1c8>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	629a      	str	r2, [r3, #40]	@ 0x28
    LCD_adc.typeZ_value = 0;
 8004cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8004e44 <resetProgram+0x1c8>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    LCD_adc.speed_valueXY = 0;
 8004cda:	4b5a      	ldr	r3, [pc, #360]	@ (8004e44 <resetProgram+0x1c8>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30
    LCD_adc.speed_valueZ = 0;
 8004ce0:	4b58      	ldr	r3, [pc, #352]	@ (8004e44 <resetProgram+0x1c8>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	635a      	str	r2, [r3, #52]	@ 0x34
    LCD_adc.voltage = 0;
 8004ce6:	4b57      	ldr	r3, [pc, #348]	@ (8004e44 <resetProgram+0x1c8>)
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	655a      	str	r2, [r3, #84]	@ 0x54
    LCD_adc.current = 0;
 8004cee:	4b55      	ldr	r3, [pc, #340]	@ (8004e44 <resetProgram+0x1c8>)
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	651a      	str	r2, [r3, #80]	@ 0x50
    LCD_adc.power = 0;
 8004cf6:	4b53      	ldr	r3, [pc, #332]	@ (8004e44 <resetProgram+0x1c8>)
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	65da      	str	r2, [r3, #92]	@ 0x5c
    LCD_adc.temp = 0;
 8004cfe:	4b51      	ldr	r3, [pc, #324]	@ (8004e44 <resetProgram+0x1c8>)
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	659a      	str	r2, [r3, #88]	@ 0x58
    Stepper1.accel_count = 0;
 8004d06:	4950      	ldr	r1, [pc, #320]	@ (8004e48 <resetProgram+0x1cc>)
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Stepper2.accel_count = 0;
 8004d14:	494d      	ldr	r1, [pc, #308]	@ (8004e4c <resetProgram+0x1d0>)
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	f04f 0300 	mov.w	r3, #0
 8004d1e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Stepper3.accel_count = 0;
 8004d22:	494b      	ldr	r1, [pc, #300]	@ (8004e50 <resetProgram+0x1d4>)
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    CNC_pos.x = 0;
 8004d30:	4b48      	ldr	r3, [pc, #288]	@ (8004e54 <resetProgram+0x1d8>)
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	609a      	str	r2, [r3, #8]
    CNC_pos.y = 0;
 8004d38:	4b46      	ldr	r3, [pc, #280]	@ (8004e54 <resetProgram+0x1d8>)
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	60da      	str	r2, [r3, #12]
    CNC_pos.z = 0;
 8004d40:	4b44      	ldr	r3, [pc, #272]	@ (8004e54 <resetProgram+0x1d8>)
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	611a      	str	r2, [r3, #16]
    CNC_pos.MoveX = 0;
 8004d48:	4942      	ldr	r1, [pc, #264]	@ (8004e54 <resetProgram+0x1d8>)
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	e9c1 2306 	strd	r2, r3, [r1, #24]
    CNC_pos.MoveY = 0;
 8004d56:	493f      	ldr	r1, [pc, #252]	@ (8004e54 <resetProgram+0x1d8>)
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9c1 2308 	strd	r2, r3, [r1, #32]
    CNC_pos.MoveZ = 0;
 8004d64:	493b      	ldr	r1, [pc, #236]	@ (8004e54 <resetProgram+0x1d8>)
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    CNC.pos_x = 0;
 8004d72:	4939      	ldr	r1, [pc, #228]	@ (8004e58 <resetProgram+0x1dc>)
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    CNC.pos_y = 0;
 8004d80:	4935      	ldr	r1, [pc, #212]	@ (8004e58 <resetProgram+0x1dc>)
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    CNC.pos_z = 0;
 8004d8e:	4932      	ldr	r1, [pc, #200]	@ (8004e58 <resetProgram+0x1dc>)
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    CNC.set_posX = 0;
 8004d9c:	492e      	ldr	r1, [pc, #184]	@ (8004e58 <resetProgram+0x1dc>)
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	e9c1 2300 	strd	r2, r3, [r1]
    CNC.set_posY = 0;
 8004daa:	492b      	ldr	r1, [pc, #172]	@ (8004e58 <resetProgram+0x1dc>)
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    CNC.set_posZ = 0;
 8004db8:	4927      	ldr	r1, [pc, #156]	@ (8004e58 <resetProgram+0x1dc>)
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	e9c1 2304 	strd	r2, r3, [r1, #16]

    __HAL_TIM_SET_AUTORELOAD(Stepper1.htim, 1000);
 8004dc6:	4b20      	ldr	r3, [pc, #128]	@ (8004e48 <resetProgram+0x1cc>)
 8004dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e48 <resetProgram+0x1cc>)
 8004dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004dda:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_AUTORELOAD(Stepper2.htim, 1000);
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e4c <resetProgram+0x1d0>)
 8004dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004de6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004de8:	4b18      	ldr	r3, [pc, #96]	@ (8004e4c <resetProgram+0x1d0>)
 8004dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004df0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_AUTORELOAD(Stepper3.htim, 1000);
 8004df2:	4b17      	ldr	r3, [pc, #92]	@ (8004e50 <resetProgram+0x1d4>)
 8004df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004dfe:	4b14      	ldr	r3, [pc, #80]	@ (8004e50 <resetProgram+0x1d4>)
 8004e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e06:	60da      	str	r2, [r3, #12]
    // Reset hardware
    initialize_LCD(&LCD_adc);
 8004e08:	480e      	ldr	r0, [pc, #56]	@ (8004e44 <resetProgram+0x1c8>)
 8004e0a:	f7fe fa99 	bl	8003340 <initialize_LCD>
    initialize_Kalman(&kalman_fil_curr);
 8004e0e:	4813      	ldr	r0, [pc, #76]	@ (8004e5c <resetProgram+0x1e0>)
 8004e10:	f7fe fac2 	bl	8003398 <initialize_Kalman>
    initialize_Kalman(&kalman_fil_volt);
 8004e14:	4812      	ldr	r0, [pc, #72]	@ (8004e60 <resetProgram+0x1e4>)
 8004e16:	f7fe fabf 	bl	8003398 <initialize_Kalman>
    initializeCNC_pos(&CNC_pos);
 8004e1a:	480e      	ldr	r0, [pc, #56]	@ (8004e54 <resetProgram+0x1d8>)
 8004e1c:	f7fc fd98 	bl	8001950 <initializeCNC_pos>
    // add code here
    /*
     * code here
     *
     * */
    HOME();
 8004e20:	f7fd fae2 	bl	80023e8 <HOME>
    // Start display lcd
    lcd_clear();
 8004e24:	f7fe f944 	bl	80030b0 <lcd_clear>
    lcd_put_cur(1, 2);
 8004e28:	2102      	movs	r1, #2
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	f7fe f958 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("PROGRAM  RESETED");
 8004e30:	480c      	ldr	r0, [pc, #48]	@ (8004e64 <resetProgram+0x1e8>)
 8004e32:	f7fe f9a7 	bl	8003184 <lcd_send_string>
}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200009c8 	.word	0x200009c8
 8004e40:	08014f20 	.word	0x08014f20
 8004e44:	2000085c 	.word	0x2000085c
 8004e48:	200002b0 	.word	0x200002b0
 8004e4c:	20000310 	.word	0x20000310
 8004e50:	20000370 	.word	0x20000370
 8004e54:	20000718 	.word	0x20000718
 8004e58:	200007d8 	.word	0x200007d8
 8004e5c:	20000928 	.word	0x20000928
 8004e60:	20000978 	.word	0x20000978
 8004e64:	08014f34 	.word	0x08014f34

08004e68 <StopProgram>:

void StopProgram(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
	state.start_press = 0;
 8004e6c:	4b08      	ldr	r3, [pc, #32]	@ (8004e90 <StopProgram+0x28>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]
    lcd_clear();
 8004e72:	f7fe f91d 	bl	80030b0 <lcd_clear>
    lcd_put_cur(1, 2);
 8004e76:	2102      	movs	r1, #2
 8004e78:	2001      	movs	r0, #1
 8004e7a:	f7fe f931 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("PROGRAM  STOPPED");
 8004e7e:	4805      	ldr	r0, [pc, #20]	@ (8004e94 <StopProgram+0x2c>)
 8004e80:	f7fe f980 	bl	8003184 <lcd_send_string>
    lcd_put_cur(3, 0);
 8004e84:	2100      	movs	r1, #0
 8004e86:	2003      	movs	r0, #3
 8004e88:	f7fe f92a 	bl	80030e0 <lcd_put_cur>
}
 8004e8c:	bf00      	nop
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	200009c8 	.word	0x200009c8
 8004e94:	08014f48 	.word	0x08014f48

08004e98 <StartProgram>:

void StartProgram(void){
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
    lcd_clear();
 8004e9c:	f7fe f908 	bl	80030b0 <lcd_clear>
    lcd_put_cur(1, 3);
 8004ea0:	2103      	movs	r1, #3
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	f7fe f91c 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("PROGRAM  START");
 8004ea8:	4809      	ldr	r0, [pc, #36]	@ (8004ed0 <StartProgram+0x38>)
 8004eaa:	f7fe f96b 	bl	8003184 <lcd_send_string>
    lcd_put_cur(2, 0);
 8004eae:	2100      	movs	r1, #0
 8004eb0:	2002      	movs	r0, #2
 8004eb2:	f7fe f915 	bl	80030e0 <lcd_put_cur>
    lcd_send_string("IP ADD:");
 8004eb6:	4807      	ldr	r0, [pc, #28]	@ (8004ed4 <StartProgram+0x3c>)
 8004eb8:	f7fe f964 	bl	8003184 <lcd_send_string>
    lcd_put_cur(2, 7);
 8004ebc:	2107      	movs	r1, #7
 8004ebe:	2002      	movs	r0, #2
 8004ec0:	f7fe f90e 	bl	80030e0 <lcd_put_cur>
    lcd_send_string(ip_config);
 8004ec4:	4804      	ldr	r0, [pc, #16]	@ (8004ed8 <StartProgram+0x40>)
 8004ec6:	f7fe f95d 	bl	8003184 <lcd_send_string>
}
 8004eca:	bf00      	nop
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	08014f5c 	.word	0x08014f5c
 8004ed4:	08014f6c 	.word	0x08014f6c
 8004ed8:	200006d0 	.word	0x200006d0

08004edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	4b16      	ldr	r3, [pc, #88]	@ (8004f40 <HAL_MspInit+0x64>)
 8004ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eea:	4a15      	ldr	r2, [pc, #84]	@ (8004f40 <HAL_MspInit+0x64>)
 8004eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ef2:	4b13      	ldr	r3, [pc, #76]	@ (8004f40 <HAL_MspInit+0x64>)
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004efa:	607b      	str	r3, [r7, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	4b0f      	ldr	r3, [pc, #60]	@ (8004f40 <HAL_MspInit+0x64>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	4a0e      	ldr	r2, [pc, #56]	@ (8004f40 <HAL_MspInit+0x64>)
 8004f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f40 <HAL_MspInit+0x64>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	210f      	movs	r1, #15
 8004f1e:	f06f 0001 	mvn.w	r0, #1
 8004f22:	f001 fb5c 	bl	80065de <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8004f26:	2200      	movs	r2, #0
 8004f28:	2105      	movs	r1, #5
 8004f2a:	2001      	movs	r0, #1
 8004f2c:	f001 fb57 	bl	80065de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8004f30:	2001      	movs	r0, #1
 8004f32:	f001 fb70 	bl	8006616 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f36:	bf00      	nop
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40023800 	.word	0x40023800

08004f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f48:	bf00      	nop
 8004f4a:	e7fd      	b.n	8004f48 <NMI_Handler+0x4>

08004f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <HardFault_Handler+0x4>

08004f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f58:	bf00      	nop
 8004f5a:	e7fd      	b.n	8004f58 <MemManage_Handler+0x4>

08004f5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f60:	bf00      	nop
 8004f62:	e7fd      	b.n	8004f60 <BusFault_Handler+0x4>

08004f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f68:	bf00      	nop
 8004f6a:	e7fd      	b.n	8004f68 <UsageFault_Handler+0x4>

08004f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f70:	bf00      	nop
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f7e:	f000 fcd7 	bl	8005930 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004f82:	f008 fcbf 	bl	800d904 <xTaskGetSchedulerState>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d001      	beq.n	8004f90 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004f8c:	f009 fbb4 	bl	800e6f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f90:	bf00      	nop
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8004f98:	f003 ff7e 	bl	8008e98 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8004f9c:	bf00      	nop
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004fa4:	2010      	movs	r0, #16
 8004fa6:	f001 fdd9 	bl	8006b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004faa:	bf00      	nop
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004fb4:	4802      	ldr	r0, [pc, #8]	@ (8004fc0 <ADC_IRQHandler+0x10>)
 8004fb6:	f000 fed3 	bl	8005d60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004fba:	bf00      	nop
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	200003d0 	.word	0x200003d0

08004fc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004fc8:	2040      	movs	r0, #64	@ 0x40
 8004fca:	f001 fdc7 	bl	8006b5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004fce:	2080      	movs	r0, #128	@ 0x80
 8004fd0:	f001 fdc4 	bl	8006b5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004fd4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004fd8:	f001 fdc0 	bl	8006b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004fdc:	bf00      	nop
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004fe4:	4802      	ldr	r0, [pc, #8]	@ (8004ff0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004fe6:	f004 fcf8 	bl	80099da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004fea:	bf00      	nop
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	200009d8 	.word	0x200009d8

08004ff4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004ff8:	4802      	ldr	r0, [pc, #8]	@ (8005004 <TIM2_IRQHandler+0x10>)
 8004ffa:	f004 fcee 	bl	80099da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004ffe:	bf00      	nop
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000a20 	.word	0x20000a20

08005008 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800500c:	4802      	ldr	r0, [pc, #8]	@ (8005018 <TIM3_IRQHandler+0x10>)
 800500e:	f004 fce4 	bl	80099da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000a68 	.word	0x20000a68

0800501c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005020:	4802      	ldr	r0, [pc, #8]	@ (800502c <TIM4_IRQHandler+0x10>)
 8005022:	f004 fcda 	bl	80099da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005026:	bf00      	nop
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000ab0 	.word	0x20000ab0

08005030 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005034:	4802      	ldr	r0, [pc, #8]	@ (8005040 <I2C1_EV_IRQHandler+0x10>)
 8005036:	f002 f801 	bl	800703c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800503a:	bf00      	nop
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000808 	.word	0x20000808

08005044 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005048:	4802      	ldr	r0, [pc, #8]	@ (8005054 <I2C1_ER_IRQHandler+0x10>)
 800504a:	f002 f94a 	bl	80072e2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800504e:	bf00      	nop
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000808 	.word	0x20000808

08005058 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800505c:	4802      	ldr	r0, [pc, #8]	@ (8005068 <USART2_IRQHandler+0x10>)
 800505e:	f005 f9a7 	bl	800a3b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000b88 	.word	0x20000b88

0800506c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005070:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005074:	f001 fd72 	bl	8006b5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8005078:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800507c:	f001 fd6e 	bl	8006b5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005080:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005084:	f001 fd6a 	bl	8006b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005088:	bf00      	nop
 800508a:	bd80      	pop	{r7, pc}

0800508c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005090:	4802      	ldr	r0, [pc, #8]	@ (800509c <TIM5_IRQHandler+0x10>)
 8005092:	f004 fca2 	bl	80099da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000af8 	.word	0x20000af8

080050a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80050a4:	4802      	ldr	r0, [pc, #8]	@ (80050b0 <TIM6_DAC_IRQHandler+0x10>)
 80050a6:	f004 fc98 	bl	80099da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80050aa:	bf00      	nop
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000b40 	.word	0x20000b40

080050b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  return 1;
 80050b8:	2301      	movs	r3, #1
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <_kill>:

int _kill(int pid, int sig)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050ce:	f00a ff91 	bl	800fff4 <__errno>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2216      	movs	r2, #22
 80050d6:	601a      	str	r2, [r3, #0]
  return -1;
 80050d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <_exit>:

void _exit (int status)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80050ec:	f04f 31ff 	mov.w	r1, #4294967295
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff ffe7 	bl	80050c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <_exit+0x12>

080050fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b086      	sub	sp, #24
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	e00a      	b.n	8005122 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800510c:	f3af 8000 	nop.w
 8005110:	4601      	mov	r1, r0
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	60ba      	str	r2, [r7, #8]
 8005118:	b2ca      	uxtb	r2, r1
 800511a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	3301      	adds	r3, #1
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	429a      	cmp	r2, r3
 8005128:	dbf0      	blt.n	800510c <_read+0x12>
  }

  return len;
 800512a:	687b      	ldr	r3, [r7, #4]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800513c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800515c:	605a      	str	r2, [r3, #4]
  return 0;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <_isatty>:

int _isatty(int file)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005174:	2301      	movs	r3, #1
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051a4:	4a14      	ldr	r2, [pc, #80]	@ (80051f8 <_sbrk+0x5c>)
 80051a6:	4b15      	ldr	r3, [pc, #84]	@ (80051fc <_sbrk+0x60>)
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051b0:	4b13      	ldr	r3, [pc, #76]	@ (8005200 <_sbrk+0x64>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d102      	bne.n	80051be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051b8:	4b11      	ldr	r3, [pc, #68]	@ (8005200 <_sbrk+0x64>)
 80051ba:	4a12      	ldr	r2, [pc, #72]	@ (8005204 <_sbrk+0x68>)
 80051bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051be:	4b10      	ldr	r3, [pc, #64]	@ (8005200 <_sbrk+0x64>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d207      	bcs.n	80051dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051cc:	f00a ff12 	bl	800fff4 <__errno>
 80051d0:	4603      	mov	r3, r0
 80051d2:	220c      	movs	r2, #12
 80051d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295
 80051da:	e009      	b.n	80051f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051dc:	4b08      	ldr	r3, [pc, #32]	@ (8005200 <_sbrk+0x64>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051e2:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <_sbrk+0x64>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4413      	add	r3, r2
 80051ea:	4a05      	ldr	r2, [pc, #20]	@ (8005200 <_sbrk+0x64>)
 80051ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051ee:	68fb      	ldr	r3, [r7, #12]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20020000 	.word	0x20020000
 80051fc:	00000400 	.word	0x00000400
 8005200:	200009d4 	.word	0x200009d4
 8005204:	20005670 	.word	0x20005670

08005208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800520c:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <SystemInit+0x20>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005212:	4a05      	ldr	r2, [pc, #20]	@ (8005228 <SystemInit+0x20>)
 8005214:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005218:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800521c:	bf00      	nop
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	e000ed00 	.word	0xe000ed00

0800522c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005232:	f107 0308 	add.w	r3, r7, #8
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	605a      	str	r2, [r3, #4]
 800523c:	609a      	str	r2, [r3, #8]
 800523e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005240:	463b      	mov	r3, r7
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005248:	4b1e      	ldr	r3, [pc, #120]	@ (80052c4 <MX_TIM1_Init+0x98>)
 800524a:	4a1f      	ldr	r2, [pc, #124]	@ (80052c8 <MX_TIM1_Init+0x9c>)
 800524c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800524e:	4b1d      	ldr	r3, [pc, #116]	@ (80052c4 <MX_TIM1_Init+0x98>)
 8005250:	2253      	movs	r2, #83	@ 0x53
 8005252:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005254:	4b1b      	ldr	r3, [pc, #108]	@ (80052c4 <MX_TIM1_Init+0x98>)
 8005256:	2200      	movs	r2, #0
 8005258:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800525a:	4b1a      	ldr	r3, [pc, #104]	@ (80052c4 <MX_TIM1_Init+0x98>)
 800525c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005260:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005262:	4b18      	ldr	r3, [pc, #96]	@ (80052c4 <MX_TIM1_Init+0x98>)
 8005264:	2200      	movs	r2, #0
 8005266:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005268:	4b16      	ldr	r3, [pc, #88]	@ (80052c4 <MX_TIM1_Init+0x98>)
 800526a:	2200      	movs	r2, #0
 800526c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800526e:	4b15      	ldr	r3, [pc, #84]	@ (80052c4 <MX_TIM1_Init+0x98>)
 8005270:	2280      	movs	r2, #128	@ 0x80
 8005272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005274:	4813      	ldr	r0, [pc, #76]	@ (80052c4 <MX_TIM1_Init+0x98>)
 8005276:	f004 fac1 	bl	80097fc <HAL_TIM_Base_Init>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8005280:	f7fe f858 	bl	8003334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005288:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800528a:	f107 0308 	add.w	r3, r7, #8
 800528e:	4619      	mov	r1, r3
 8005290:	480c      	ldr	r0, [pc, #48]	@ (80052c4 <MX_TIM1_Init+0x98>)
 8005292:	f004 fc92 	bl	8009bba <HAL_TIM_ConfigClockSource>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800529c:	f7fe f84a 	bl	8003334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052a0:	2300      	movs	r3, #0
 80052a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80052a8:	463b      	mov	r3, r7
 80052aa:	4619      	mov	r1, r3
 80052ac:	4805      	ldr	r0, [pc, #20]	@ (80052c4 <MX_TIM1_Init+0x98>)
 80052ae:	f004 feb9 	bl	800a024 <HAL_TIMEx_MasterConfigSynchronization>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80052b8:	f7fe f83c 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80052bc:	bf00      	nop
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	200009d8 	.word	0x200009d8
 80052c8:	40010000 	.word	0x40010000

080052cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052d2:	f107 0308 	add.w	r3, r7, #8
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	609a      	str	r2, [r3, #8]
 80052de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052e0:	463b      	mov	r3, r7
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80052e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005360 <MX_TIM2_Init+0x94>)
 80052ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80052ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80052f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005360 <MX_TIM2_Init+0x94>)
 80052f2:	22a7      	movs	r2, #167	@ 0xa7
 80052f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005360 <MX_TIM2_Init+0x94>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80052fc:	4b18      	ldr	r3, [pc, #96]	@ (8005360 <MX_TIM2_Init+0x94>)
 80052fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005304:	4b16      	ldr	r3, [pc, #88]	@ (8005360 <MX_TIM2_Init+0x94>)
 8005306:	2200      	movs	r2, #0
 8005308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800530a:	4b15      	ldr	r3, [pc, #84]	@ (8005360 <MX_TIM2_Init+0x94>)
 800530c:	2280      	movs	r2, #128	@ 0x80
 800530e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005310:	4813      	ldr	r0, [pc, #76]	@ (8005360 <MX_TIM2_Init+0x94>)
 8005312:	f004 fa73 	bl	80097fc <HAL_TIM_Base_Init>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800531c:	f7fe f80a 	bl	8003334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005324:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005326:	f107 0308 	add.w	r3, r7, #8
 800532a:	4619      	mov	r1, r3
 800532c:	480c      	ldr	r0, [pc, #48]	@ (8005360 <MX_TIM2_Init+0x94>)
 800532e:	f004 fc44 	bl	8009bba <HAL_TIM_ConfigClockSource>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005338:	f7fd fffc 	bl	8003334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800533c:	2300      	movs	r3, #0
 800533e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005340:	2300      	movs	r3, #0
 8005342:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005344:	463b      	mov	r3, r7
 8005346:	4619      	mov	r1, r3
 8005348:	4805      	ldr	r0, [pc, #20]	@ (8005360 <MX_TIM2_Init+0x94>)
 800534a:	f004 fe6b 	bl	800a024 <HAL_TIMEx_MasterConfigSynchronization>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005354:	f7fd ffee 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005358:	bf00      	nop
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20000a20 	.word	0x20000a20

08005364 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800536a:	f107 0308 	add.w	r3, r7, #8
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	605a      	str	r2, [r3, #4]
 8005374:	609a      	str	r2, [r3, #8]
 8005376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005378:	463b      	mov	r3, r7
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005380:	4b1d      	ldr	r3, [pc, #116]	@ (80053f8 <MX_TIM3_Init+0x94>)
 8005382:	4a1e      	ldr	r2, [pc, #120]	@ (80053fc <MX_TIM3_Init+0x98>)
 8005384:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8005386:	4b1c      	ldr	r3, [pc, #112]	@ (80053f8 <MX_TIM3_Init+0x94>)
 8005388:	22a7      	movs	r2, #167	@ 0xa7
 800538a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800538c:	4b1a      	ldr	r3, [pc, #104]	@ (80053f8 <MX_TIM3_Init+0x94>)
 800538e:	2200      	movs	r2, #0
 8005390:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8005392:	4b19      	ldr	r3, [pc, #100]	@ (80053f8 <MX_TIM3_Init+0x94>)
 8005394:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005398:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800539a:	4b17      	ldr	r3, [pc, #92]	@ (80053f8 <MX_TIM3_Init+0x94>)
 800539c:	2200      	movs	r2, #0
 800539e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80053a0:	4b15      	ldr	r3, [pc, #84]	@ (80053f8 <MX_TIM3_Init+0x94>)
 80053a2:	2280      	movs	r2, #128	@ 0x80
 80053a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80053a6:	4814      	ldr	r0, [pc, #80]	@ (80053f8 <MX_TIM3_Init+0x94>)
 80053a8:	f004 fa28 	bl	80097fc <HAL_TIM_Base_Init>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80053b2:	f7fd ffbf 	bl	8003334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80053bc:	f107 0308 	add.w	r3, r7, #8
 80053c0:	4619      	mov	r1, r3
 80053c2:	480d      	ldr	r0, [pc, #52]	@ (80053f8 <MX_TIM3_Init+0x94>)
 80053c4:	f004 fbf9 	bl	8009bba <HAL_TIM_ConfigClockSource>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80053ce:	f7fd ffb1 	bl	8003334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053d2:	2300      	movs	r3, #0
 80053d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053d6:	2300      	movs	r3, #0
 80053d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80053da:	463b      	mov	r3, r7
 80053dc:	4619      	mov	r1, r3
 80053de:	4806      	ldr	r0, [pc, #24]	@ (80053f8 <MX_TIM3_Init+0x94>)
 80053e0:	f004 fe20 	bl	800a024 <HAL_TIMEx_MasterConfigSynchronization>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80053ea:	f7fd ffa3 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80053ee:	bf00      	nop
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000a68 	.word	0x20000a68
 80053fc:	40000400 	.word	0x40000400

08005400 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005406:	f107 0308 	add.w	r3, r7, #8
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	605a      	str	r2, [r3, #4]
 8005410:	609a      	str	r2, [r3, #8]
 8005412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005414:	463b      	mov	r3, r7
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800541c:	4b1d      	ldr	r3, [pc, #116]	@ (8005494 <MX_TIM4_Init+0x94>)
 800541e:	4a1e      	ldr	r2, [pc, #120]	@ (8005498 <MX_TIM4_Init+0x98>)
 8005420:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8005422:	4b1c      	ldr	r3, [pc, #112]	@ (8005494 <MX_TIM4_Init+0x94>)
 8005424:	2253      	movs	r2, #83	@ 0x53
 8005426:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005428:	4b1a      	ldr	r3, [pc, #104]	@ (8005494 <MX_TIM4_Init+0x94>)
 800542a:	2200      	movs	r2, #0
 800542c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800542e:	4b19      	ldr	r3, [pc, #100]	@ (8005494 <MX_TIM4_Init+0x94>)
 8005430:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005434:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005436:	4b17      	ldr	r3, [pc, #92]	@ (8005494 <MX_TIM4_Init+0x94>)
 8005438:	2200      	movs	r2, #0
 800543a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800543c:	4b15      	ldr	r3, [pc, #84]	@ (8005494 <MX_TIM4_Init+0x94>)
 800543e:	2280      	movs	r2, #128	@ 0x80
 8005440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005442:	4814      	ldr	r0, [pc, #80]	@ (8005494 <MX_TIM4_Init+0x94>)
 8005444:	f004 f9da 	bl	80097fc <HAL_TIM_Base_Init>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800544e:	f7fd ff71 	bl	8003334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005452:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005456:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005458:	f107 0308 	add.w	r3, r7, #8
 800545c:	4619      	mov	r1, r3
 800545e:	480d      	ldr	r0, [pc, #52]	@ (8005494 <MX_TIM4_Init+0x94>)
 8005460:	f004 fbab 	bl	8009bba <HAL_TIM_ConfigClockSource>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800546a:	f7fd ff63 	bl	8003334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800546e:	2300      	movs	r3, #0
 8005470:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005476:	463b      	mov	r3, r7
 8005478:	4619      	mov	r1, r3
 800547a:	4806      	ldr	r0, [pc, #24]	@ (8005494 <MX_TIM4_Init+0x94>)
 800547c:	f004 fdd2 	bl	800a024 <HAL_TIMEx_MasterConfigSynchronization>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005486:	f7fd ff55 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800548a:	bf00      	nop
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20000ab0 	.word	0x20000ab0
 8005498:	40000800 	.word	0x40000800

0800549c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054a2:	f107 0308 	add.w	r3, r7, #8
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	605a      	str	r2, [r3, #4]
 80054ac:	609a      	str	r2, [r3, #8]
 80054ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054b0:	463b      	mov	r3, r7
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80054b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005530 <MX_TIM5_Init+0x94>)
 80054ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005534 <MX_TIM5_Init+0x98>)
 80054bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80054be:	4b1c      	ldr	r3, [pc, #112]	@ (8005530 <MX_TIM5_Init+0x94>)
 80054c0:	2253      	movs	r2, #83	@ 0x53
 80054c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005530 <MX_TIM5_Init+0x94>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 80054ca:	4b19      	ldr	r3, [pc, #100]	@ (8005530 <MX_TIM5_Init+0x94>)
 80054cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054d2:	4b17      	ldr	r3, [pc, #92]	@ (8005530 <MX_TIM5_Init+0x94>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80054d8:	4b15      	ldr	r3, [pc, #84]	@ (8005530 <MX_TIM5_Init+0x94>)
 80054da:	2280      	movs	r2, #128	@ 0x80
 80054dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80054de:	4814      	ldr	r0, [pc, #80]	@ (8005530 <MX_TIM5_Init+0x94>)
 80054e0:	f004 f98c 	bl	80097fc <HAL_TIM_Base_Init>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80054ea:	f7fd ff23 	bl	8003334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80054f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80054f4:	f107 0308 	add.w	r3, r7, #8
 80054f8:	4619      	mov	r1, r3
 80054fa:	480d      	ldr	r0, [pc, #52]	@ (8005530 <MX_TIM5_Init+0x94>)
 80054fc:	f004 fb5d 	bl	8009bba <HAL_TIM_ConfigClockSource>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8005506:	f7fd ff15 	bl	8003334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800550a:	2300      	movs	r3, #0
 800550c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800550e:	2300      	movs	r3, #0
 8005510:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005512:	463b      	mov	r3, r7
 8005514:	4619      	mov	r1, r3
 8005516:	4806      	ldr	r0, [pc, #24]	@ (8005530 <MX_TIM5_Init+0x94>)
 8005518:	f004 fd84 	bl	800a024 <HAL_TIMEx_MasterConfigSynchronization>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8005522:	f7fd ff07 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005526:	bf00      	nop
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000af8 	.word	0x20000af8
 8005534:	40000c00 	.word	0x40000c00

08005538 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM6_Init(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800553e:	463b      	mov	r3, r7
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005546:	4b15      	ldr	r3, [pc, #84]	@ (800559c <MX_TIM6_Init+0x64>)
 8005548:	4a15      	ldr	r2, [pc, #84]	@ (80055a0 <MX_TIM6_Init+0x68>)
 800554a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800554c:	4b13      	ldr	r3, [pc, #76]	@ (800559c <MX_TIM6_Init+0x64>)
 800554e:	2253      	movs	r2, #83	@ 0x53
 8005550:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005552:	4b12      	ldr	r3, [pc, #72]	@ (800559c <MX_TIM6_Init+0x64>)
 8005554:	2200      	movs	r2, #0
 8005556:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8005558:	4b10      	ldr	r3, [pc, #64]	@ (800559c <MX_TIM6_Init+0x64>)
 800555a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800555e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005560:	4b0e      	ldr	r3, [pc, #56]	@ (800559c <MX_TIM6_Init+0x64>)
 8005562:	2280      	movs	r2, #128	@ 0x80
 8005564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005566:	480d      	ldr	r0, [pc, #52]	@ (800559c <MX_TIM6_Init+0x64>)
 8005568:	f004 f948 	bl	80097fc <HAL_TIM_Base_Init>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005572:	f7fd fedf 	bl	8003334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005576:	2300      	movs	r3, #0
 8005578:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800557a:	2300      	movs	r3, #0
 800557c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800557e:	463b      	mov	r3, r7
 8005580:	4619      	mov	r1, r3
 8005582:	4806      	ldr	r0, [pc, #24]	@ (800559c <MX_TIM6_Init+0x64>)
 8005584:	f004 fd4e 	bl	800a024 <HAL_TIMEx_MasterConfigSynchronization>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800558e:	f7fd fed1 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20000b40 	.word	0x20000b40
 80055a0:	40001000 	.word	0x40001000

080055a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b088      	sub	sp, #32
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a54      	ldr	r2, [pc, #336]	@ (8005704 <HAL_TIM_Base_MspInit+0x160>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d116      	bne.n	80055e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80055b6:	2300      	movs	r3, #0
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	4b53      	ldr	r3, [pc, #332]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 80055bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055be:	4a52      	ldr	r2, [pc, #328]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80055c6:	4b50      	ldr	r3, [pc, #320]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 80055c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	61fb      	str	r3, [r7, #28]
 80055d0:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80055d2:	2200      	movs	r2, #0
 80055d4:	2105      	movs	r1, #5
 80055d6:	2018      	movs	r0, #24
 80055d8:	f001 f801 	bl	80065de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80055dc:	2018      	movs	r0, #24
 80055de:	f001 f81a 	bl	8006616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80055e2:	e08a      	b.n	80056fa <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ec:	d116      	bne.n	800561c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055ee:	2300      	movs	r3, #0
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	4b45      	ldr	r3, [pc, #276]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	4a44      	ldr	r2, [pc, #272]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 80055f8:	f043 0301 	orr.w	r3, r3, #1
 80055fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80055fe:	4b42      	ldr	r3, [pc, #264]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800560a:	2200      	movs	r2, #0
 800560c:	2105      	movs	r1, #5
 800560e:	201c      	movs	r0, #28
 8005610:	f000 ffe5 	bl	80065de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005614:	201c      	movs	r0, #28
 8005616:	f000 fffe 	bl	8006616 <HAL_NVIC_EnableIRQ>
}
 800561a:	e06e      	b.n	80056fa <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a3a      	ldr	r2, [pc, #232]	@ (800570c <HAL_TIM_Base_MspInit+0x168>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d116      	bne.n	8005654 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	4b37      	ldr	r3, [pc, #220]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562e:	4a36      	ldr	r2, [pc, #216]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 8005630:	f043 0302 	orr.w	r3, r3, #2
 8005634:	6413      	str	r3, [r2, #64]	@ 0x40
 8005636:	4b34      	ldr	r3, [pc, #208]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005642:	2200      	movs	r2, #0
 8005644:	2105      	movs	r1, #5
 8005646:	201d      	movs	r0, #29
 8005648:	f000 ffc9 	bl	80065de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800564c:	201d      	movs	r0, #29
 800564e:	f000 ffe2 	bl	8006616 <HAL_NVIC_EnableIRQ>
}
 8005652:	e052      	b.n	80056fa <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a2d      	ldr	r2, [pc, #180]	@ (8005710 <HAL_TIM_Base_MspInit+0x16c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d116      	bne.n	800568c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800565e:	2300      	movs	r3, #0
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	4b29      	ldr	r3, [pc, #164]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 8005664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005666:	4a28      	ldr	r2, [pc, #160]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 8005668:	f043 0304 	orr.w	r3, r3, #4
 800566c:	6413      	str	r3, [r2, #64]	@ 0x40
 800566e:	4b26      	ldr	r3, [pc, #152]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 8005670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800567a:	2200      	movs	r2, #0
 800567c:	2105      	movs	r1, #5
 800567e:	201e      	movs	r0, #30
 8005680:	f000 ffad 	bl	80065de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005684:	201e      	movs	r0, #30
 8005686:	f000 ffc6 	bl	8006616 <HAL_NVIC_EnableIRQ>
}
 800568a:	e036      	b.n	80056fa <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM5)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a20      	ldr	r2, [pc, #128]	@ (8005714 <HAL_TIM_Base_MspInit+0x170>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d116      	bne.n	80056c4 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	4b1b      	ldr	r3, [pc, #108]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 800569c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569e:	4a1a      	ldr	r2, [pc, #104]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 80056a0:	f043 0308 	orr.w	r3, r3, #8
 80056a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80056a6:	4b18      	ldr	r3, [pc, #96]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 80056a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80056b2:	2200      	movs	r2, #0
 80056b4:	2105      	movs	r1, #5
 80056b6:	2032      	movs	r0, #50	@ 0x32
 80056b8:	f000 ff91 	bl	80065de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80056bc:	2032      	movs	r0, #50	@ 0x32
 80056be:	f000 ffaa 	bl	8006616 <HAL_NVIC_EnableIRQ>
}
 80056c2:	e01a      	b.n	80056fa <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM6)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a13      	ldr	r2, [pc, #76]	@ (8005718 <HAL_TIM_Base_MspInit+0x174>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d115      	bne.n	80056fa <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80056ce:	2300      	movs	r3, #0
 80056d0:	60bb      	str	r3, [r7, #8]
 80056d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 80056d8:	f043 0310 	orr.w	r3, r3, #16
 80056dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80056de:	4b0a      	ldr	r3, [pc, #40]	@ (8005708 <HAL_TIM_Base_MspInit+0x164>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	f003 0310 	and.w	r3, r3, #16
 80056e6:	60bb      	str	r3, [r7, #8]
 80056e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80056ea:	2200      	movs	r2, #0
 80056ec:	2105      	movs	r1, #5
 80056ee:	2036      	movs	r0, #54	@ 0x36
 80056f0:	f000 ff75 	bl	80065de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80056f4:	2036      	movs	r0, #54	@ 0x36
 80056f6:	f000 ff8e 	bl	8006616 <HAL_NVIC_EnableIRQ>
}
 80056fa:	bf00      	nop
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40010000 	.word	0x40010000
 8005708:	40023800 	.word	0x40023800
 800570c:	40000400 	.word	0x40000400
 8005710:	40000800 	.word	0x40000800
 8005714:	40000c00 	.word	0x40000c00
 8005718:	40001000 	.word	0x40001000

0800571c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005720:	4b11      	ldr	r3, [pc, #68]	@ (8005768 <MX_USART2_UART_Init+0x4c>)
 8005722:	4a12      	ldr	r2, [pc, #72]	@ (800576c <MX_USART2_UART_Init+0x50>)
 8005724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8005726:	4b10      	ldr	r3, [pc, #64]	@ (8005768 <MX_USART2_UART_Init+0x4c>)
 8005728:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800572c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800572e:	4b0e      	ldr	r3, [pc, #56]	@ (8005768 <MX_USART2_UART_Init+0x4c>)
 8005730:	2200      	movs	r2, #0
 8005732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005734:	4b0c      	ldr	r3, [pc, #48]	@ (8005768 <MX_USART2_UART_Init+0x4c>)
 8005736:	2200      	movs	r2, #0
 8005738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800573a:	4b0b      	ldr	r3, [pc, #44]	@ (8005768 <MX_USART2_UART_Init+0x4c>)
 800573c:	2200      	movs	r2, #0
 800573e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005740:	4b09      	ldr	r3, [pc, #36]	@ (8005768 <MX_USART2_UART_Init+0x4c>)
 8005742:	220c      	movs	r2, #12
 8005744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005746:	4b08      	ldr	r3, [pc, #32]	@ (8005768 <MX_USART2_UART_Init+0x4c>)
 8005748:	2200      	movs	r2, #0
 800574a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800574c:	4b06      	ldr	r3, [pc, #24]	@ (8005768 <MX_USART2_UART_Init+0x4c>)
 800574e:	2200      	movs	r2, #0
 8005750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005752:	4805      	ldr	r0, [pc, #20]	@ (8005768 <MX_USART2_UART_Init+0x4c>)
 8005754:	f004 fcf6 	bl	800a144 <HAL_UART_Init>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800575e:	f7fd fde9 	bl	8003334 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005762:	bf00      	nop
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000b88 	.word	0x20000b88
 800576c:	40004400 	.word	0x40004400

08005770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b08a      	sub	sp, #40	@ 0x28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005778:	f107 0314 	add.w	r3, r7, #20
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	609a      	str	r2, [r3, #8]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1d      	ldr	r2, [pc, #116]	@ (8005804 <HAL_UART_MspInit+0x94>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d133      	bne.n	80057fa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	4b1c      	ldr	r3, [pc, #112]	@ (8005808 <HAL_UART_MspInit+0x98>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579a:	4a1b      	ldr	r2, [pc, #108]	@ (8005808 <HAL_UART_MspInit+0x98>)
 800579c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80057a2:	4b19      	ldr	r3, [pc, #100]	@ (8005808 <HAL_UART_MspInit+0x98>)
 80057a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	4b15      	ldr	r3, [pc, #84]	@ (8005808 <HAL_UART_MspInit+0x98>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b6:	4a14      	ldr	r2, [pc, #80]	@ (8005808 <HAL_UART_MspInit+0x98>)
 80057b8:	f043 0308 	orr.w	r3, r3, #8
 80057bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80057be:	4b12      	ldr	r3, [pc, #72]	@ (8005808 <HAL_UART_MspInit+0x98>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80057ca:	2360      	movs	r3, #96	@ 0x60
 80057cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ce:	2302      	movs	r3, #2
 80057d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d6:	2303      	movs	r3, #3
 80057d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80057da:	2307      	movs	r3, #7
 80057dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057de:	f107 0314 	add.w	r3, r7, #20
 80057e2:	4619      	mov	r1, r3
 80057e4:	4809      	ldr	r0, [pc, #36]	@ (800580c <HAL_UART_MspInit+0x9c>)
 80057e6:	f000 ffd1 	bl	800678c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80057ea:	2200      	movs	r2, #0
 80057ec:	2105      	movs	r1, #5
 80057ee:	2026      	movs	r0, #38	@ 0x26
 80057f0:	f000 fef5 	bl	80065de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80057f4:	2026      	movs	r0, #38	@ 0x26
 80057f6:	f000 ff0e 	bl	8006616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80057fa:	bf00      	nop
 80057fc:	3728      	adds	r7, #40	@ 0x28
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40004400 	.word	0x40004400
 8005808:	40023800 	.word	0x40023800
 800580c:	40020c00 	.word	0x40020c00

08005810 <_write>:

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
int _write(int file, char *ptr, int len){
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]


	//while(!UART_SendFlag);

	//UART_SendFlag=0;
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)ptr, len);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	b29b      	uxth	r3, r3
 8005820:	461a      	mov	r2, r3
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	4803      	ldr	r0, [pc, #12]	@ (8005834 <_write+0x24>)
 8005826:	f004 fd68 	bl	800a2fa <HAL_UART_Transmit_IT>

	return len;
 800582a:	687b      	ldr	r3, [r7, #4]

}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20000b88 	.word	0x20000b88

08005838 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 8005838:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005870 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800583c:	f7ff fce4 	bl	8005208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005840:	480c      	ldr	r0, [pc, #48]	@ (8005874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005842:	490d      	ldr	r1, [pc, #52]	@ (8005878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005844:	4a0d      	ldr	r2, [pc, #52]	@ (800587c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005848:	e002      	b.n	8005850 <LoopCopyDataInit>

0800584a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800584a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800584c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800584e:	3304      	adds	r3, #4

08005850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005854:	d3f9      	bcc.n	800584a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005856:	4a0a      	ldr	r2, [pc, #40]	@ (8005880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005858:	4c0a      	ldr	r4, [pc, #40]	@ (8005884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800585a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800585c:	e001      	b.n	8005862 <LoopFillZerobss>

0800585e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800585e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005860:	3204      	adds	r2, #4

08005862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005864:	d3fb      	bcc.n	800585e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005866:	f00a fbcb 	bl	8010000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800586a:	f7fd fcad 	bl	80031c8 <main>
  bx  lr    
 800586e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005870:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005878:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 800587c:	08015588 	.word	0x08015588
  ldr r2, =_sbss
 8005880:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8005884:	20005670 	.word	0x20005670

08005888 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005888:	e7fe      	b.n	8005888 <CAN1_RX0_IRQHandler>
	...

0800588c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005890:	4b0e      	ldr	r3, [pc, #56]	@ (80058cc <HAL_Init+0x40>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a0d      	ldr	r2, [pc, #52]	@ (80058cc <HAL_Init+0x40>)
 8005896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800589a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800589c:	4b0b      	ldr	r3, [pc, #44]	@ (80058cc <HAL_Init+0x40>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a0a      	ldr	r2, [pc, #40]	@ (80058cc <HAL_Init+0x40>)
 80058a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058a8:	4b08      	ldr	r3, [pc, #32]	@ (80058cc <HAL_Init+0x40>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a07      	ldr	r2, [pc, #28]	@ (80058cc <HAL_Init+0x40>)
 80058ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058b4:	2003      	movs	r0, #3
 80058b6:	f000 fe87 	bl	80065c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058ba:	200f      	movs	r0, #15
 80058bc:	f000 f808 	bl	80058d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058c0:	f7ff fb0c 	bl	8004edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40023c00 	.word	0x40023c00

080058d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058d8:	4b12      	ldr	r3, [pc, #72]	@ (8005924 <HAL_InitTick+0x54>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b12      	ldr	r3, [pc, #72]	@ (8005928 <HAL_InitTick+0x58>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	4619      	mov	r1, r3
 80058e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80058ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fe9f 	bl	8006632 <HAL_SYSTICK_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e00e      	b.n	800591c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b0f      	cmp	r3, #15
 8005902:	d80a      	bhi.n	800591a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005904:	2200      	movs	r2, #0
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	f04f 30ff 	mov.w	r0, #4294967295
 800590c:	f000 fe67 	bl	80065de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005910:	4a06      	ldr	r2, [pc, #24]	@ (800592c <HAL_InitTick+0x5c>)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	e000      	b.n	800591c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	200000a8 	.word	0x200000a8
 8005928:	200000b0 	.word	0x200000b0
 800592c:	200000ac 	.word	0x200000ac

08005930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005934:	4b06      	ldr	r3, [pc, #24]	@ (8005950 <HAL_IncTick+0x20>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	4b06      	ldr	r3, [pc, #24]	@ (8005954 <HAL_IncTick+0x24>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4413      	add	r3, r2
 8005940:	4a04      	ldr	r2, [pc, #16]	@ (8005954 <HAL_IncTick+0x24>)
 8005942:	6013      	str	r3, [r2, #0]
}
 8005944:	bf00      	nop
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	200000b0 	.word	0x200000b0
 8005954:	20000bd0 	.word	0x20000bd0

08005958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  return uwTick;
 800595c:	4b03      	ldr	r3, [pc, #12]	@ (800596c <HAL_GetTick+0x14>)
 800595e:	681b      	ldr	r3, [r3, #0]
}
 8005960:	4618      	mov	r0, r3
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20000bd0 	.word	0x20000bd0

08005970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005978:	f7ff ffee 	bl	8005958 <HAL_GetTick>
 800597c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005988:	d005      	beq.n	8005996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800598a:	4b0a      	ldr	r3, [pc, #40]	@ (80059b4 <HAL_Delay+0x44>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005996:	bf00      	nop
 8005998:	f7ff ffde 	bl	8005958 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d8f7      	bhi.n	8005998 <HAL_Delay+0x28>
  {
  }
}
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	200000b0 	.word	0x200000b0

080059b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e033      	b.n	8005a36 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d109      	bne.n	80059ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fc f924 	bl	8001c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d118      	bne.n	8005a28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80059fe:	f023 0302 	bic.w	r3, r3, #2
 8005a02:	f043 0202 	orr.w	r2, r3, #2
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fc06 	bl	800621c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1a:	f023 0303 	bic.w	r3, r3, #3
 8005a1e:	f043 0201 	orr.w	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	641a      	str	r2, [r3, #64]	@ 0x40
 8005a26:	e001      	b.n	8005a2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_ADC_Start+0x1a>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e0b2      	b.n	8005bc0 <HAL_ADC_Start+0x180>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d018      	beq.n	8005aa2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005a80:	4b52      	ldr	r3, [pc, #328]	@ (8005bcc <HAL_ADC_Start+0x18c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a52      	ldr	r2, [pc, #328]	@ (8005bd0 <HAL_ADC_Start+0x190>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	0c9a      	lsrs	r2, r3, #18
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	4413      	add	r3, r2
 8005a92:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005a94:	e002      	b.n	8005a9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f9      	bne.n	8005a96 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d17a      	bne.n	8005ba6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005ada:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aee:	d106      	bne.n	8005afe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af4:	f023 0206 	bic.w	r2, r3, #6
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	645a      	str	r2, [r3, #68]	@ 0x44
 8005afc:	e002      	b.n	8005b04 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b0c:	4b31      	ldr	r3, [pc, #196]	@ (8005bd4 <HAL_ADC_Start+0x194>)
 8005b0e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005b18:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f003 031f 	and.w	r3, r3, #31
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d12a      	bne.n	8005b7c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a2b      	ldr	r2, [pc, #172]	@ (8005bd8 <HAL_ADC_Start+0x198>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d015      	beq.n	8005b5c <HAL_ADC_Start+0x11c>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a29      	ldr	r2, [pc, #164]	@ (8005bdc <HAL_ADC_Start+0x19c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d105      	bne.n	8005b46 <HAL_ADC_Start+0x106>
 8005b3a:	4b26      	ldr	r3, [pc, #152]	@ (8005bd4 <HAL_ADC_Start+0x194>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a25      	ldr	r2, [pc, #148]	@ (8005be0 <HAL_ADC_Start+0x1a0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d136      	bne.n	8005bbe <HAL_ADC_Start+0x17e>
 8005b50:	4b20      	ldr	r3, [pc, #128]	@ (8005bd4 <HAL_ADC_Start+0x194>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d130      	bne.n	8005bbe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d129      	bne.n	8005bbe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005b78:	609a      	str	r2, [r3, #8]
 8005b7a:	e020      	b.n	8005bbe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a15      	ldr	r2, [pc, #84]	@ (8005bd8 <HAL_ADC_Start+0x198>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d11b      	bne.n	8005bbe <HAL_ADC_Start+0x17e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d114      	bne.n	8005bbe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005ba2:	609a      	str	r2, [r3, #8]
 8005ba4:	e00b      	b.n	8005bbe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	f043 0210 	orr.w	r2, r3, #16
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb6:	f043 0201 	orr.w	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	200000a8 	.word	0x200000a8
 8005bd0:	431bde83 	.word	0x431bde83
 8005bd4:	40012300 	.word	0x40012300
 8005bd8:	40012000 	.word	0x40012000
 8005bdc:	40012100 	.word	0x40012100
 8005be0:	40012200 	.word	0x40012200

08005be4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_ADC_Stop+0x16>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e021      	b.n	8005c3e <HAL_ADC_Stop+0x5a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0201 	bic.w	r2, r2, #1
 8005c10:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d109      	bne.n	8005c34 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005c28:	f023 0301 	bic.w	r3, r3, #1
 8005c2c:	f043 0201 	orr.w	r2, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c66:	d113      	bne.n	8005c90 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c76:	d10b      	bne.n	8005c90 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7c:	f043 0220 	orr.w	r2, r3, #32
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e063      	b.n	8005d58 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c90:	f7ff fe62 	bl	8005958 <HAL_GetTick>
 8005c94:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c96:	e021      	b.n	8005cdc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	d01d      	beq.n	8005cdc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d007      	beq.n	8005cb6 <HAL_ADC_PollForConversion+0x6c>
 8005ca6:	f7ff fe57 	bl	8005958 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d212      	bcs.n	8005cdc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d00b      	beq.n	8005cdc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc8:	f043 0204 	orr.w	r2, r3, #4
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e03d      	b.n	8005d58 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d1d6      	bne.n	8005c98 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f06f 0212 	mvn.w	r2, #18
 8005cf2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d123      	bne.n	8005d56 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d11f      	bne.n	8005d56 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d006      	beq.n	8005d32 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d111      	bne.n	8005d56 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d105      	bne.n	8005d56 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4e:	f043 0201 	orr.w	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d049      	beq.n	8005e2a <HAL_ADC_IRQHandler+0xca>
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d046      	beq.n	8005e2a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d105      	bne.n	8005db4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d12b      	bne.n	8005e1a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d127      	bne.n	8005e1a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d006      	beq.n	8005de6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d119      	bne.n	8005e1a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0220 	bic.w	r2, r2, #32
 8005df4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d105      	bne.n	8005e1a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	f043 0201 	orr.w	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f8bd 	bl	8005f9a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0212 	mvn.w	r2, #18
 8005e28:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e38:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d057      	beq.n	8005ef0 <HAL_ADC_IRQHandler+0x190>
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d054      	beq.n	8005ef0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d105      	bne.n	8005e5e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e56:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d139      	bne.n	8005ee0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e72:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d006      	beq.n	8005e88 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d12b      	bne.n	8005ee0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d124      	bne.n	8005ee0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d11d      	bne.n	8005ee0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d119      	bne.n	8005ee0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005eba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d105      	bne.n	8005ee0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed8:	f043 0201 	orr.w	r2, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fa97 	bl	8006414 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f06f 020c 	mvn.w	r2, #12
 8005eee:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efe:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d017      	beq.n	8005f36 <HAL_ADC_IRQHandler+0x1d6>
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d014      	beq.n	8005f36 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d10d      	bne.n	8005f36 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f841 	bl	8005fae <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0201 	mvn.w	r2, #1
 8005f34:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f44:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d015      	beq.n	8005f78 <HAL_ADC_IRQHandler+0x218>
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d012      	beq.n	8005f78 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f56:	f043 0202 	orr.w	r2, r3, #2
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f06f 0220 	mvn.w	r2, #32
 8005f66:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f82a 	bl	8005fc2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f06f 0220 	mvn.w	r2, #32
 8005f76:	601a      	str	r2, [r3, #0]
  }
}
 8005f78:	bf00      	nop
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
	...

08005fd8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <HAL_ADC_ConfigChannel+0x1c>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e105      	b.n	8006200 <HAL_ADC_ConfigChannel+0x228>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b09      	cmp	r3, #9
 8006002:	d925      	bls.n	8006050 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68d9      	ldr	r1, [r3, #12]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	461a      	mov	r2, r3
 8006012:	4613      	mov	r3, r2
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	4413      	add	r3, r2
 8006018:	3b1e      	subs	r3, #30
 800601a:	2207      	movs	r2, #7
 800601c:	fa02 f303 	lsl.w	r3, r2, r3
 8006020:	43da      	mvns	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	400a      	ands	r2, r1
 8006028:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68d9      	ldr	r1, [r3, #12]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	4618      	mov	r0, r3
 800603c:	4603      	mov	r3, r0
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	4403      	add	r3, r0
 8006042:	3b1e      	subs	r3, #30
 8006044:	409a      	lsls	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	60da      	str	r2, [r3, #12]
 800604e:	e022      	b.n	8006096 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6919      	ldr	r1, [r3, #16]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	4613      	mov	r3, r2
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	4413      	add	r3, r2
 8006064:	2207      	movs	r2, #7
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	43da      	mvns	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	400a      	ands	r2, r1
 8006072:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6919      	ldr	r1, [r3, #16]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	4618      	mov	r0, r3
 8006086:	4603      	mov	r3, r0
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	4403      	add	r3, r0
 800608c:	409a      	lsls	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b06      	cmp	r3, #6
 800609c:	d824      	bhi.n	80060e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	3b05      	subs	r3, #5
 80060b0:	221f      	movs	r2, #31
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	43da      	mvns	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	400a      	ands	r2, r1
 80060be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	4618      	mov	r0, r3
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	3b05      	subs	r3, #5
 80060da:	fa00 f203 	lsl.w	r2, r0, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80060e6:	e04c      	b.n	8006182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	2b0c      	cmp	r3, #12
 80060ee:	d824      	bhi.n	800613a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	3b23      	subs	r3, #35	@ 0x23
 8006102:	221f      	movs	r2, #31
 8006104:	fa02 f303 	lsl.w	r3, r2, r3
 8006108:	43da      	mvns	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	400a      	ands	r2, r1
 8006110:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	b29b      	uxth	r3, r3
 800611e:	4618      	mov	r0, r3
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	3b23      	subs	r3, #35	@ 0x23
 800612c:	fa00 f203 	lsl.w	r2, r0, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	631a      	str	r2, [r3, #48]	@ 0x30
 8006138:	e023      	b.n	8006182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	3b41      	subs	r3, #65	@ 0x41
 800614c:	221f      	movs	r2, #31
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	43da      	mvns	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	400a      	ands	r2, r1
 800615a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	4618      	mov	r0, r3
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	3b41      	subs	r3, #65	@ 0x41
 8006176:	fa00 f203 	lsl.w	r2, r0, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006182:	4b22      	ldr	r3, [pc, #136]	@ (800620c <HAL_ADC_ConfigChannel+0x234>)
 8006184:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a21      	ldr	r2, [pc, #132]	@ (8006210 <HAL_ADC_ConfigChannel+0x238>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d109      	bne.n	80061a4 <HAL_ADC_ConfigChannel+0x1cc>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b12      	cmp	r3, #18
 8006196:	d105      	bne.n	80061a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a19      	ldr	r2, [pc, #100]	@ (8006210 <HAL_ADC_ConfigChannel+0x238>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d123      	bne.n	80061f6 <HAL_ADC_ConfigChannel+0x21e>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b10      	cmp	r3, #16
 80061b4:	d003      	beq.n	80061be <HAL_ADC_ConfigChannel+0x1e6>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b11      	cmp	r3, #17
 80061bc:	d11b      	bne.n	80061f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b10      	cmp	r3, #16
 80061d0:	d111      	bne.n	80061f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80061d2:	4b10      	ldr	r3, [pc, #64]	@ (8006214 <HAL_ADC_ConfigChannel+0x23c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a10      	ldr	r2, [pc, #64]	@ (8006218 <HAL_ADC_ConfigChannel+0x240>)
 80061d8:	fba2 2303 	umull	r2, r3, r2, r3
 80061dc:	0c9a      	lsrs	r2, r3, #18
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80061e8:	e002      	b.n	80061f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f9      	bne.n	80061ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	40012300 	.word	0x40012300
 8006210:	40012000 	.word	0x40012000
 8006214:	200000a8 	.word	0x200000a8
 8006218:	431bde83 	.word	0x431bde83

0800621c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006224:	4b79      	ldr	r3, [pc, #484]	@ (800640c <ADC_Init+0x1f0>)
 8006226:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	431a      	orrs	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006250:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6859      	ldr	r1, [r3, #4]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	021a      	lsls	r2, r3, #8
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6859      	ldr	r1, [r3, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6899      	ldr	r1, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ae:	4a58      	ldr	r2, [pc, #352]	@ (8006410 <ADC_Init+0x1f4>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d022      	beq.n	80062fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80062c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6899      	ldr	r1, [r3, #8]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80062e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6899      	ldr	r1, [r3, #8]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	e00f      	b.n	800631a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006318:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0202 	bic.w	r2, r2, #2
 8006328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6899      	ldr	r1, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	7e1b      	ldrb	r3, [r3, #24]
 8006334:	005a      	lsls	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01b      	beq.n	8006380 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006356:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006366:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6859      	ldr	r1, [r3, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006372:	3b01      	subs	r3, #1
 8006374:	035a      	lsls	r2, r3, #13
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
 800637e:	e007      	b.n	8006390 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800638e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800639e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	051a      	lsls	r2, r3, #20
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80063c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6899      	ldr	r1, [r3, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80063d2:	025a      	lsls	r2, r3, #9
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6899      	ldr	r1, [r3, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	029a      	lsls	r2, r3, #10
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	609a      	str	r2, [r3, #8]
}
 8006400:	bf00      	nop
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	40012300 	.word	0x40012300
 8006410:	0f000001 	.word	0x0f000001

08006414 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006438:	4b0c      	ldr	r3, [pc, #48]	@ (800646c <__NVIC_SetPriorityGrouping+0x44>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006444:	4013      	ands	r3, r2
 8006446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800645a:	4a04      	ldr	r2, [pc, #16]	@ (800646c <__NVIC_SetPriorityGrouping+0x44>)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	60d3      	str	r3, [r2, #12]
}
 8006460:	bf00      	nop
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	e000ed00 	.word	0xe000ed00

08006470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006474:	4b04      	ldr	r3, [pc, #16]	@ (8006488 <__NVIC_GetPriorityGrouping+0x18>)
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	f003 0307 	and.w	r3, r3, #7
}
 800647e:	4618      	mov	r0, r3
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	e000ed00 	.word	0xe000ed00

0800648c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800649a:	2b00      	cmp	r3, #0
 800649c:	db0b      	blt.n	80064b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	f003 021f 	and.w	r2, r3, #31
 80064a4:	4907      	ldr	r1, [pc, #28]	@ (80064c4 <__NVIC_EnableIRQ+0x38>)
 80064a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	2001      	movs	r0, #1
 80064ae:	fa00 f202 	lsl.w	r2, r0, r2
 80064b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	e000e100 	.word	0xe000e100

080064c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	6039      	str	r1, [r7, #0]
 80064d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	db0a      	blt.n	80064f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	490c      	ldr	r1, [pc, #48]	@ (8006514 <__NVIC_SetPriority+0x4c>)
 80064e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e6:	0112      	lsls	r2, r2, #4
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	440b      	add	r3, r1
 80064ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064f0:	e00a      	b.n	8006508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	4908      	ldr	r1, [pc, #32]	@ (8006518 <__NVIC_SetPriority+0x50>)
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	3b04      	subs	r3, #4
 8006500:	0112      	lsls	r2, r2, #4
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	440b      	add	r3, r1
 8006506:	761a      	strb	r2, [r3, #24]
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	e000e100 	.word	0xe000e100
 8006518:	e000ed00 	.word	0xe000ed00

0800651c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800651c:	b480      	push	{r7}
 800651e:	b089      	sub	sp, #36	@ 0x24
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f003 0307 	and.w	r3, r3, #7
 800652e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	f1c3 0307 	rsb	r3, r3, #7
 8006536:	2b04      	cmp	r3, #4
 8006538:	bf28      	it	cs
 800653a:	2304      	movcs	r3, #4
 800653c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	3304      	adds	r3, #4
 8006542:	2b06      	cmp	r3, #6
 8006544:	d902      	bls.n	800654c <NVIC_EncodePriority+0x30>
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	3b03      	subs	r3, #3
 800654a:	e000      	b.n	800654e <NVIC_EncodePriority+0x32>
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006550:	f04f 32ff 	mov.w	r2, #4294967295
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	43da      	mvns	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	401a      	ands	r2, r3
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006564:	f04f 31ff 	mov.w	r1, #4294967295
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	fa01 f303 	lsl.w	r3, r1, r3
 800656e:	43d9      	mvns	r1, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006574:	4313      	orrs	r3, r2
         );
}
 8006576:	4618      	mov	r0, r3
 8006578:	3724      	adds	r7, #36	@ 0x24
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
	...

08006584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3b01      	subs	r3, #1
 8006590:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006594:	d301      	bcc.n	800659a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006596:	2301      	movs	r3, #1
 8006598:	e00f      	b.n	80065ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800659a:	4a0a      	ldr	r2, [pc, #40]	@ (80065c4 <SysTick_Config+0x40>)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3b01      	subs	r3, #1
 80065a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065a2:	210f      	movs	r1, #15
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	f7ff ff8e 	bl	80064c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065ac:	4b05      	ldr	r3, [pc, #20]	@ (80065c4 <SysTick_Config+0x40>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065b2:	4b04      	ldr	r3, [pc, #16]	@ (80065c4 <SysTick_Config+0x40>)
 80065b4:	2207      	movs	r2, #7
 80065b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	e000e010 	.word	0xe000e010

080065c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff ff29 	bl	8006428 <__NVIC_SetPriorityGrouping>
}
 80065d6:	bf00      	nop
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80065de:	b580      	push	{r7, lr}
 80065e0:	b086      	sub	sp, #24
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	4603      	mov	r3, r0
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	607a      	str	r2, [r7, #4]
 80065ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80065f0:	f7ff ff3e 	bl	8006470 <__NVIC_GetPriorityGrouping>
 80065f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	68b9      	ldr	r1, [r7, #8]
 80065fa:	6978      	ldr	r0, [r7, #20]
 80065fc:	f7ff ff8e 	bl	800651c <NVIC_EncodePriority>
 8006600:	4602      	mov	r2, r0
 8006602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006606:	4611      	mov	r1, r2
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff ff5d 	bl	80064c8 <__NVIC_SetPriority>
}
 800660e:	bf00      	nop
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	4603      	mov	r3, r0
 800661e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff ff31 	bl	800648c <__NVIC_EnableIRQ>
}
 800662a:	bf00      	nop
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b082      	sub	sp, #8
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff ffa2 	bl	8006584 <SysTick_Config>
 8006640:	4603      	mov	r3, r0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b084      	sub	sp, #16
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006656:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006658:	f7ff f97e 	bl	8005958 <HAL_GetTick>
 800665c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d008      	beq.n	800667c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2280      	movs	r2, #128	@ 0x80
 800666e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e052      	b.n	8006722 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0216 	bic.w	r2, r2, #22
 800668a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695a      	ldr	r2, [r3, #20]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800669a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d103      	bne.n	80066ac <HAL_DMA_Abort+0x62>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d007      	beq.n	80066bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0208 	bic.w	r2, r2, #8
 80066ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 0201 	bic.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066cc:	e013      	b.n	80066f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066ce:	f7ff f943 	bl	8005958 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b05      	cmp	r3, #5
 80066da:	d90c      	bls.n	80066f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2220      	movs	r2, #32
 80066e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2203      	movs	r2, #3
 80066e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e015      	b.n	8006722 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1e4      	bne.n	80066ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006708:	223f      	movs	r2, #63	@ 0x3f
 800670a:	409a      	lsls	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d004      	beq.n	8006748 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2280      	movs	r2, #128	@ 0x80
 8006742:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e00c      	b.n	8006762 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2205      	movs	r2, #5
 800674c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0201 	bic.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800677c:	b2db      	uxtb	r3, r3
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
	...

0800678c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800678c:	b480      	push	{r7}
 800678e:	b089      	sub	sp, #36	@ 0x24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006796:	2300      	movs	r3, #0
 8006798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800679a:	2300      	movs	r3, #0
 800679c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800679e:	2300      	movs	r3, #0
 80067a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067a2:	2300      	movs	r3, #0
 80067a4:	61fb      	str	r3, [r7, #28]
 80067a6:	e16b      	b.n	8006a80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067a8:	2201      	movs	r2, #1
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	4013      	ands	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	f040 815a 	bne.w	8006a7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d005      	beq.n	80067de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d130      	bne.n	8006840 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	2203      	movs	r2, #3
 80067ea:	fa02 f303 	lsl.w	r3, r2, r3
 80067ee:	43db      	mvns	r3, r3
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	4013      	ands	r3, r2
 80067f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	4313      	orrs	r3, r2
 8006806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006814:	2201      	movs	r2, #1
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	fa02 f303 	lsl.w	r3, r2, r3
 800681c:	43db      	mvns	r3, r3
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	4013      	ands	r3, r2
 8006822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	091b      	lsrs	r3, r3, #4
 800682a:	f003 0201 	and.w	r2, r3, #1
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	fa02 f303 	lsl.w	r3, r2, r3
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	4313      	orrs	r3, r2
 8006838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f003 0303 	and.w	r3, r3, #3
 8006848:	2b03      	cmp	r3, #3
 800684a:	d017      	beq.n	800687c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	2203      	movs	r2, #3
 8006858:	fa02 f303 	lsl.w	r3, r2, r3
 800685c:	43db      	mvns	r3, r3
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	4013      	ands	r3, r2
 8006862:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	fa02 f303 	lsl.w	r3, r2, r3
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	4313      	orrs	r3, r2
 8006874:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f003 0303 	and.w	r3, r3, #3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d123      	bne.n	80068d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	08da      	lsrs	r2, r3, #3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3208      	adds	r2, #8
 8006890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006894:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	220f      	movs	r2, #15
 80068a0:	fa02 f303 	lsl.w	r3, r2, r3
 80068a4:	43db      	mvns	r3, r3
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	4013      	ands	r3, r2
 80068aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	691a      	ldr	r2, [r3, #16]
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	fa02 f303 	lsl.w	r3, r2, r3
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	4313      	orrs	r3, r2
 80068c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	08da      	lsrs	r2, r3, #3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3208      	adds	r2, #8
 80068ca:	69b9      	ldr	r1, [r7, #24]
 80068cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	2203      	movs	r2, #3
 80068dc:	fa02 f303 	lsl.w	r3, r2, r3
 80068e0:	43db      	mvns	r3, r3
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	4013      	ands	r3, r2
 80068e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f003 0203 	and.w	r2, r3, #3
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	fa02 f303 	lsl.w	r3, r2, r3
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 80b4 	beq.w	8006a7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	4b60      	ldr	r3, [pc, #384]	@ (8006a98 <HAL_GPIO_Init+0x30c>)
 8006918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691a:	4a5f      	ldr	r2, [pc, #380]	@ (8006a98 <HAL_GPIO_Init+0x30c>)
 800691c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006920:	6453      	str	r3, [r2, #68]	@ 0x44
 8006922:	4b5d      	ldr	r3, [pc, #372]	@ (8006a98 <HAL_GPIO_Init+0x30c>)
 8006924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800692e:	4a5b      	ldr	r2, [pc, #364]	@ (8006a9c <HAL_GPIO_Init+0x310>)
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	089b      	lsrs	r3, r3, #2
 8006934:	3302      	adds	r3, #2
 8006936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800693a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	220f      	movs	r2, #15
 8006946:	fa02 f303 	lsl.w	r3, r2, r3
 800694a:	43db      	mvns	r3, r3
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	4013      	ands	r3, r2
 8006950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a52      	ldr	r2, [pc, #328]	@ (8006aa0 <HAL_GPIO_Init+0x314>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d02b      	beq.n	80069b2 <HAL_GPIO_Init+0x226>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a51      	ldr	r2, [pc, #324]	@ (8006aa4 <HAL_GPIO_Init+0x318>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d025      	beq.n	80069ae <HAL_GPIO_Init+0x222>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a50      	ldr	r2, [pc, #320]	@ (8006aa8 <HAL_GPIO_Init+0x31c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d01f      	beq.n	80069aa <HAL_GPIO_Init+0x21e>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a4f      	ldr	r2, [pc, #316]	@ (8006aac <HAL_GPIO_Init+0x320>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d019      	beq.n	80069a6 <HAL_GPIO_Init+0x21a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a4e      	ldr	r2, [pc, #312]	@ (8006ab0 <HAL_GPIO_Init+0x324>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d013      	beq.n	80069a2 <HAL_GPIO_Init+0x216>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a4d      	ldr	r2, [pc, #308]	@ (8006ab4 <HAL_GPIO_Init+0x328>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00d      	beq.n	800699e <HAL_GPIO_Init+0x212>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a4c      	ldr	r2, [pc, #304]	@ (8006ab8 <HAL_GPIO_Init+0x32c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d007      	beq.n	800699a <HAL_GPIO_Init+0x20e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a4b      	ldr	r2, [pc, #300]	@ (8006abc <HAL_GPIO_Init+0x330>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d101      	bne.n	8006996 <HAL_GPIO_Init+0x20a>
 8006992:	2307      	movs	r3, #7
 8006994:	e00e      	b.n	80069b4 <HAL_GPIO_Init+0x228>
 8006996:	2308      	movs	r3, #8
 8006998:	e00c      	b.n	80069b4 <HAL_GPIO_Init+0x228>
 800699a:	2306      	movs	r3, #6
 800699c:	e00a      	b.n	80069b4 <HAL_GPIO_Init+0x228>
 800699e:	2305      	movs	r3, #5
 80069a0:	e008      	b.n	80069b4 <HAL_GPIO_Init+0x228>
 80069a2:	2304      	movs	r3, #4
 80069a4:	e006      	b.n	80069b4 <HAL_GPIO_Init+0x228>
 80069a6:	2303      	movs	r3, #3
 80069a8:	e004      	b.n	80069b4 <HAL_GPIO_Init+0x228>
 80069aa:	2302      	movs	r3, #2
 80069ac:	e002      	b.n	80069b4 <HAL_GPIO_Init+0x228>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <HAL_GPIO_Init+0x228>
 80069b2:	2300      	movs	r3, #0
 80069b4:	69fa      	ldr	r2, [r7, #28]
 80069b6:	f002 0203 	and.w	r2, r2, #3
 80069ba:	0092      	lsls	r2, r2, #2
 80069bc:	4093      	lsls	r3, r2
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069c4:	4935      	ldr	r1, [pc, #212]	@ (8006a9c <HAL_GPIO_Init+0x310>)
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	089b      	lsrs	r3, r3, #2
 80069ca:	3302      	adds	r3, #2
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80069d2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ac0 <HAL_GPIO_Init+0x334>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	43db      	mvns	r3, r3
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	4013      	ands	r3, r2
 80069e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80069f6:	4a32      	ldr	r2, [pc, #200]	@ (8006ac0 <HAL_GPIO_Init+0x334>)
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80069fc:	4b30      	ldr	r3, [pc, #192]	@ (8006ac0 <HAL_GPIO_Init+0x334>)
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	43db      	mvns	r3, r3
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006a20:	4a27      	ldr	r2, [pc, #156]	@ (8006ac0 <HAL_GPIO_Init+0x334>)
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006a26:	4b26      	ldr	r3, [pc, #152]	@ (8006ac0 <HAL_GPIO_Init+0x334>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	43db      	mvns	r3, r3
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	4013      	ands	r3, r2
 8006a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ac0 <HAL_GPIO_Init+0x334>)
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a50:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac0 <HAL_GPIO_Init+0x334>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a74:	4a12      	ldr	r2, [pc, #72]	@ (8006ac0 <HAL_GPIO_Init+0x334>)
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	61fb      	str	r3, [r7, #28]
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	2b0f      	cmp	r3, #15
 8006a84:	f67f ae90 	bls.w	80067a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006a88:	bf00      	nop
 8006a8a:	bf00      	nop
 8006a8c:	3724      	adds	r7, #36	@ 0x24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	40023800 	.word	0x40023800
 8006a9c:	40013800 	.word	0x40013800
 8006aa0:	40020000 	.word	0x40020000
 8006aa4:	40020400 	.word	0x40020400
 8006aa8:	40020800 	.word	0x40020800
 8006aac:	40020c00 	.word	0x40020c00
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	40021400 	.word	0x40021400
 8006ab8:	40021800 	.word	0x40021800
 8006abc:	40021c00 	.word	0x40021c00
 8006ac0:	40013c00 	.word	0x40013c00

08006ac4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691a      	ldr	r2, [r3, #16]
 8006ad4:	887b      	ldrh	r3, [r7, #2]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006adc:	2301      	movs	r3, #1
 8006ade:	73fb      	strb	r3, [r7, #15]
 8006ae0:	e001      	b.n	8006ae6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	807b      	strh	r3, [r7, #2]
 8006b00:	4613      	mov	r3, r2
 8006b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b04:	787b      	ldrb	r3, [r7, #1]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b0a:	887a      	ldrh	r2, [r7, #2]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b10:	e003      	b.n	8006b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b12:	887b      	ldrh	r3, [r7, #2]
 8006b14:	041a      	lsls	r2, r3, #16
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	619a      	str	r2, [r3, #24]
}
 8006b1a:	bf00      	nop
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b085      	sub	sp, #20
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b38:	887a      	ldrh	r2, [r7, #2]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	041a      	lsls	r2, r3, #16
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	43d9      	mvns	r1, r3
 8006b44:	887b      	ldrh	r3, [r7, #2]
 8006b46:	400b      	ands	r3, r1
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	619a      	str	r2, [r3, #24]
}
 8006b4e:	bf00      	nop
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
	...

08006b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006b66:	4b08      	ldr	r3, [pc, #32]	@ (8006b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b68:	695a      	ldr	r2, [r3, #20]
 8006b6a:	88fb      	ldrh	r3, [r7, #6]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d006      	beq.n	8006b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b72:	4a05      	ldr	r2, [pc, #20]	@ (8006b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fd fd4e 	bl	800461c <HAL_GPIO_EXTI_Callback>
  }
}
 8006b80:	bf00      	nop
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40013c00 	.word	0x40013c00

08006b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e12b      	b.n	8006df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d106      	bne.n	8006bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fc f9c4 	bl	8002f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2224      	movs	r2, #36	@ 0x24
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0201 	bic.w	r2, r2, #1
 8006bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006bf0:	f002 fddc 	bl	80097ac <HAL_RCC_GetPCLK1Freq>
 8006bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	4a81      	ldr	r2, [pc, #516]	@ (8006e00 <HAL_I2C_Init+0x274>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d807      	bhi.n	8006c10 <HAL_I2C_Init+0x84>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4a80      	ldr	r2, [pc, #512]	@ (8006e04 <HAL_I2C_Init+0x278>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	bf94      	ite	ls
 8006c08:	2301      	movls	r3, #1
 8006c0a:	2300      	movhi	r3, #0
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	e006      	b.n	8006c1e <HAL_I2C_Init+0x92>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4a7d      	ldr	r2, [pc, #500]	@ (8006e08 <HAL_I2C_Init+0x27c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	bf94      	ite	ls
 8006c18:	2301      	movls	r3, #1
 8006c1a:	2300      	movhi	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e0e7      	b.n	8006df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4a78      	ldr	r2, [pc, #480]	@ (8006e0c <HAL_I2C_Init+0x280>)
 8006c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2e:	0c9b      	lsrs	r3, r3, #18
 8006c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	4a6a      	ldr	r2, [pc, #424]	@ (8006e00 <HAL_I2C_Init+0x274>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d802      	bhi.n	8006c60 <HAL_I2C_Init+0xd4>
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	e009      	b.n	8006c74 <HAL_I2C_Init+0xe8>
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006c66:	fb02 f303 	mul.w	r3, r2, r3
 8006c6a:	4a69      	ldr	r2, [pc, #420]	@ (8006e10 <HAL_I2C_Init+0x284>)
 8006c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c70:	099b      	lsrs	r3, r3, #6
 8006c72:	3301      	adds	r3, #1
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6812      	ldr	r2, [r2, #0]
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006c86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	495c      	ldr	r1, [pc, #368]	@ (8006e00 <HAL_I2C_Init+0x274>)
 8006c90:	428b      	cmp	r3, r1
 8006c92:	d819      	bhi.n	8006cc8 <HAL_I2C_Init+0x13c>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	1e59      	subs	r1, r3, #1
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ca2:	1c59      	adds	r1, r3, #1
 8006ca4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006ca8:	400b      	ands	r3, r1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <HAL_I2C_Init+0x138>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1e59      	subs	r1, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cc2:	e051      	b.n	8006d68 <HAL_I2C_Init+0x1dc>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	e04f      	b.n	8006d68 <HAL_I2C_Init+0x1dc>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d111      	bne.n	8006cf4 <HAL_I2C_Init+0x168>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	1e58      	subs	r0, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6859      	ldr	r1, [r3, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	440b      	add	r3, r1
 8006cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bf0c      	ite	eq
 8006cec:	2301      	moveq	r3, #1
 8006cee:	2300      	movne	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	e012      	b.n	8006d1a <HAL_I2C_Init+0x18e>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	1e58      	subs	r0, r3, #1
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6859      	ldr	r1, [r3, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	440b      	add	r3, r1
 8006d02:	0099      	lsls	r1, r3, #2
 8006d04:	440b      	add	r3, r1
 8006d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bf0c      	ite	eq
 8006d14:	2301      	moveq	r3, #1
 8006d16:	2300      	movne	r3, #0
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <HAL_I2C_Init+0x196>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e022      	b.n	8006d68 <HAL_I2C_Init+0x1dc>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10e      	bne.n	8006d48 <HAL_I2C_Init+0x1bc>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	1e58      	subs	r0, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6859      	ldr	r1, [r3, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	440b      	add	r3, r1
 8006d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d46:	e00f      	b.n	8006d68 <HAL_I2C_Init+0x1dc>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	1e58      	subs	r0, r3, #1
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6859      	ldr	r1, [r3, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	0099      	lsls	r1, r3, #2
 8006d58:	440b      	add	r3, r1
 8006d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d5e:	3301      	adds	r3, #1
 8006d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	6809      	ldr	r1, [r1, #0]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69da      	ldr	r2, [r3, #28]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006d96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6911      	ldr	r1, [r2, #16]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	68d2      	ldr	r2, [r2, #12]
 8006da2:	4311      	orrs	r1, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6812      	ldr	r2, [r2, #0]
 8006da8:	430b      	orrs	r3, r1
 8006daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695a      	ldr	r2, [r3, #20]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	000186a0 	.word	0x000186a0
 8006e04:	001e847f 	.word	0x001e847f
 8006e08:	003d08ff 	.word	0x003d08ff
 8006e0c:	431bde83 	.word	0x431bde83
 8006e10:	10624dd3 	.word	0x10624dd3

08006e14 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e26:	2b80      	cmp	r3, #128	@ 0x80
 8006e28:	d103      	bne.n	8006e32 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	611a      	str	r2, [r3, #16]
  }
}
 8006e32:	bf00      	nop
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
	...

08006e40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	817b      	strh	r3, [r7, #10]
 8006e50:	4613      	mov	r3, r2
 8006e52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e54:	f7fe fd80 	bl	8005958 <HAL_GetTick>
 8006e58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	f040 80e0 	bne.w	8007028 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	2319      	movs	r3, #25
 8006e6e:	2201      	movs	r2, #1
 8006e70:	4970      	ldr	r1, [pc, #448]	@ (8007034 <HAL_I2C_Master_Transmit+0x1f4>)
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f001 fdea 	bl	8008a4c <I2C_WaitOnFlagUntilTimeout>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e0d3      	b.n	800702a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_I2C_Master_Transmit+0x50>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e0cc      	b.n	800702a <HAL_I2C_Master_Transmit+0x1ea>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d007      	beq.n	8006eb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f042 0201 	orr.w	r2, r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ec4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2221      	movs	r2, #33	@ 0x21
 8006eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2210      	movs	r2, #16
 8006ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	893a      	ldrh	r2, [r7, #8]
 8006ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4a50      	ldr	r2, [pc, #320]	@ (8007038 <HAL_I2C_Master_Transmit+0x1f8>)
 8006ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006ef8:	8979      	ldrh	r1, [r7, #10]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	6a3a      	ldr	r2, [r7, #32]
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f001 fc7a 	bl	80087f8 <I2C_MasterRequestWrite>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e08d      	b.n	800702a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f0e:	2300      	movs	r3, #0
 8006f10:	613b      	str	r3, [r7, #16]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	613b      	str	r3, [r7, #16]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	613b      	str	r3, [r7, #16]
 8006f22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006f24:	e066      	b.n	8006ff4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	6a39      	ldr	r1, [r7, #32]
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f001 fea8 	bl	8008c80 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00d      	beq.n	8006f52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d107      	bne.n	8006f4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e06b      	b.n	800702a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f56:	781a      	ldrb	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	d11b      	bne.n	8006fc8 <HAL_I2C_Master_Transmit+0x188>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d017      	beq.n	8006fc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9c:	781a      	ldrb	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	6a39      	ldr	r1, [r7, #32]
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f001 fe9f 	bl	8008d10 <I2C_WaitOnBTFFlagUntilTimeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00d      	beq.n	8006ff4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d107      	bne.n	8006ff0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e01a      	b.n	800702a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d194      	bne.n	8006f26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800700a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	e000      	b.n	800702a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007028:	2302      	movs	r3, #2
  }
}
 800702a:	4618      	mov	r0, r3
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	00100002 	.word	0x00100002
 8007038:	ffff0000 	.word	0xffff0000

0800703c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b088      	sub	sp, #32
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007054:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800705c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007064:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007066:	7bfb      	ldrb	r3, [r7, #15]
 8007068:	2b10      	cmp	r3, #16
 800706a:	d003      	beq.n	8007074 <HAL_I2C_EV_IRQHandler+0x38>
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	2b40      	cmp	r3, #64	@ 0x40
 8007070:	f040 80b1 	bne.w	80071d6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10d      	bne.n	80070aa <HAL_I2C_EV_IRQHandler+0x6e>
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007094:	d003      	beq.n	800709e <HAL_I2C_EV_IRQHandler+0x62>
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800709c:	d101      	bne.n	80070a2 <HAL_I2C_EV_IRQHandler+0x66>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <HAL_I2C_EV_IRQHandler+0x68>
 80070a2:	2300      	movs	r3, #0
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	f000 8114 	beq.w	80072d2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00b      	beq.n	80070cc <HAL_I2C_EV_IRQHandler+0x90>
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d006      	beq.n	80070cc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 fecf 	bl	8008e62 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fd7a 	bl	8007bbe <I2C_Master_SB>
 80070ca:	e083      	b.n	80071d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	f003 0308 	and.w	r3, r3, #8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d008      	beq.n	80070e8 <HAL_I2C_EV_IRQHandler+0xac>
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fdf2 	bl	8007cca <I2C_Master_ADD10>
 80070e6:	e075      	b.n	80071d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d008      	beq.n	8007104 <HAL_I2C_EV_IRQHandler+0xc8>
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fe0e 	bl	8007d1e <I2C_Master_ADDR>
 8007102:	e067      	b.n	80071d4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	f003 0304 	and.w	r3, r3, #4
 800710a:	2b00      	cmp	r3, #0
 800710c:	d036      	beq.n	800717c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800711c:	f000 80db 	beq.w	80072d6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00d      	beq.n	8007146 <HAL_I2C_EV_IRQHandler+0x10a>
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007130:	2b00      	cmp	r3, #0
 8007132:	d008      	beq.n	8007146 <HAL_I2C_EV_IRQHandler+0x10a>
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	2b00      	cmp	r3, #0
 800713c:	d103      	bne.n	8007146 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f9d6 	bl	80074f0 <I2C_MasterTransmit_TXE>
 8007144:	e046      	b.n	80071d4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 80c2 	beq.w	80072d6 <HAL_I2C_EV_IRQHandler+0x29a>
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80bc 	beq.w	80072d6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800715e:	7bbb      	ldrb	r3, [r7, #14]
 8007160:	2b21      	cmp	r3, #33	@ 0x21
 8007162:	d103      	bne.n	800716c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fa5f 	bl	8007628 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800716a:	e0b4      	b.n	80072d6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	2b40      	cmp	r3, #64	@ 0x40
 8007170:	f040 80b1 	bne.w	80072d6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 facd 	bl	8007714 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800717a:	e0ac      	b.n	80072d6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007186:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800718a:	f000 80a4 	beq.w	80072d6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00d      	beq.n	80071b4 <HAL_I2C_EV_IRQHandler+0x178>
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d008      	beq.n	80071b4 <HAL_I2C_EV_IRQHandler+0x178>
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d103      	bne.n	80071b4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fb49 	bl	8007844 <I2C_MasterReceive_RXNE>
 80071b2:	e00f      	b.n	80071d4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	f003 0304 	and.w	r3, r3, #4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 808b 	beq.w	80072d6 <HAL_I2C_EV_IRQHandler+0x29a>
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 8085 	beq.w	80072d6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fc01 	bl	80079d4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071d2:	e080      	b.n	80072d6 <HAL_I2C_EV_IRQHandler+0x29a>
 80071d4:	e07f      	b.n	80072d6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d004      	beq.n	80071e8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	61fb      	str	r3, [r7, #28]
 80071e6:	e007      	b.n	80071f8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d011      	beq.n	8007226 <HAL_I2C_EV_IRQHandler+0x1ea>
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00c      	beq.n	8007226 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800721c:	69b9      	ldr	r1, [r7, #24]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 ffcc 	bl	80081bc <I2C_Slave_ADDR>
 8007224:	e05a      	b.n	80072dc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <HAL_I2C_EV_IRQHandler+0x206>
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 f806 	bl	800824c <I2C_Slave_STOPF>
 8007240:	e04c      	b.n	80072dc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007242:	7bbb      	ldrb	r3, [r7, #14]
 8007244:	2b21      	cmp	r3, #33	@ 0x21
 8007246:	d002      	beq.n	800724e <HAL_I2C_EV_IRQHandler+0x212>
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	2b29      	cmp	r3, #41	@ 0x29
 800724c:	d120      	bne.n	8007290 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00d      	beq.n	8007274 <HAL_I2C_EV_IRQHandler+0x238>
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800725e:	2b00      	cmp	r3, #0
 8007260:	d008      	beq.n	8007274 <HAL_I2C_EV_IRQHandler+0x238>
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d103      	bne.n	8007274 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fee7 	bl	8008040 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007272:	e032      	b.n	80072da <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	f003 0304 	and.w	r3, r3, #4
 800727a:	2b00      	cmp	r3, #0
 800727c:	d02d      	beq.n	80072da <HAL_I2C_EV_IRQHandler+0x29e>
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007284:	2b00      	cmp	r3, #0
 8007286:	d028      	beq.n	80072da <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 ff16 	bl	80080ba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800728e:	e024      	b.n	80072da <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00d      	beq.n	80072b6 <HAL_I2C_EV_IRQHandler+0x27a>
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d008      	beq.n	80072b6 <HAL_I2C_EV_IRQHandler+0x27a>
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	f003 0304 	and.w	r3, r3, #4
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 ff24 	bl	80080fc <I2C_SlaveReceive_RXNE>
 80072b4:	e012      	b.n	80072dc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00d      	beq.n	80072dc <HAL_I2C_EV_IRQHandler+0x2a0>
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d008      	beq.n	80072dc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 ff54 	bl	8008178 <I2C_SlaveReceive_BTF>
 80072d0:	e004      	b.n	80072dc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80072d2:	bf00      	nop
 80072d4:	e002      	b.n	80072dc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072d6:	bf00      	nop
 80072d8:	e000      	b.n	80072dc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072da:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80072dc:	3720      	adds	r7, #32
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b08a      	sub	sp, #40	@ 0x28
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80072fa:	2300      	movs	r3, #0
 80072fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007304:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00d      	beq.n	800732c <HAL_I2C_ER_IRQHandler+0x4a>
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007316:	2b00      	cmp	r3, #0
 8007318:	d008      	beq.n	800732c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	f043 0301 	orr.w	r3, r3, #1
 8007320:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800732a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00d      	beq.n	8007352 <HAL_I2C_ER_IRQHandler+0x70>
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007342:	f043 0302 	orr.w	r3, r3, #2
 8007346:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8007350:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007358:	2b00      	cmp	r3, #0
 800735a:	d03e      	beq.n	80073da <HAL_I2C_ER_IRQHandler+0xf8>
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007362:	2b00      	cmp	r3, #0
 8007364:	d039      	beq.n	80073da <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8007366:	7efb      	ldrb	r3, [r7, #27]
 8007368:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800736e:	b29b      	uxth	r3, r3
 8007370:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007378:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800737e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007380:	7ebb      	ldrb	r3, [r7, #26]
 8007382:	2b20      	cmp	r3, #32
 8007384:	d112      	bne.n	80073ac <HAL_I2C_ER_IRQHandler+0xca>
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10f      	bne.n	80073ac <HAL_I2C_ER_IRQHandler+0xca>
 800738c:	7cfb      	ldrb	r3, [r7, #19]
 800738e:	2b21      	cmp	r3, #33	@ 0x21
 8007390:	d008      	beq.n	80073a4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007392:	7cfb      	ldrb	r3, [r7, #19]
 8007394:	2b29      	cmp	r3, #41	@ 0x29
 8007396:	d005      	beq.n	80073a4 <HAL_I2C_ER_IRQHandler+0xc2>
 8007398:	7cfb      	ldrb	r3, [r7, #19]
 800739a:	2b28      	cmp	r3, #40	@ 0x28
 800739c:	d106      	bne.n	80073ac <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b21      	cmp	r3, #33	@ 0x21
 80073a2:	d103      	bne.n	80073ac <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 f881 	bl	80084ac <I2C_Slave_AF>
 80073aa:	e016      	b.n	80073da <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073b4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	f043 0304 	orr.w	r3, r3, #4
 80073bc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80073be:	7efb      	ldrb	r3, [r7, #27]
 80073c0:	2b10      	cmp	r3, #16
 80073c2:	d002      	beq.n	80073ca <HAL_I2C_ER_IRQHandler+0xe8>
 80073c4:	7efb      	ldrb	r3, [r7, #27]
 80073c6:	2b40      	cmp	r3, #64	@ 0x40
 80073c8:	d107      	bne.n	80073da <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073d8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00d      	beq.n	8007400 <HAL_I2C_ER_IRQHandler+0x11e>
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d008      	beq.n	8007400 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	f043 0308 	orr.w	r3, r3, #8
 80073f4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80073fe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	2b00      	cmp	r3, #0
 8007404:	d008      	beq.n	8007418 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 f8be 	bl	8008594 <I2C_ITError>
  }
}
 8007418:	bf00      	nop
 800741a:	3728      	adds	r7, #40	@ 0x28
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	70fb      	strb	r3, [r7, #3]
 800747c:	4613      	mov	r3, r2
 800747e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007506:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800750c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	d150      	bne.n	80075b8 <I2C_MasterTransmit_TXE+0xc8>
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	2b21      	cmp	r3, #33	@ 0x21
 800751a:	d14d      	bne.n	80075b8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b08      	cmp	r3, #8
 8007520:	d01d      	beq.n	800755e <I2C_MasterTransmit_TXE+0x6e>
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b20      	cmp	r3, #32
 8007526:	d01a      	beq.n	800755e <I2C_MasterTransmit_TXE+0x6e>
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800752e:	d016      	beq.n	800755e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800753e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2211      	movs	r2, #17
 8007544:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff ff62 	bl	8007420 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800755c:	e060      	b.n	8007620 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800756c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800757c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b40      	cmp	r3, #64	@ 0x40
 8007596:	d107      	bne.n	80075a8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff ff7d 	bl	80074a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80075a6:	e03b      	b.n	8007620 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff ff35 	bl	8007420 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80075b6:	e033      	b.n	8007620 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	2b21      	cmp	r3, #33	@ 0x21
 80075bc:	d005      	beq.n	80075ca <I2C_MasterTransmit_TXE+0xda>
 80075be:	7bbb      	ldrb	r3, [r7, #14]
 80075c0:	2b40      	cmp	r3, #64	@ 0x40
 80075c2:	d12d      	bne.n	8007620 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	2b22      	cmp	r3, #34	@ 0x22
 80075c8:	d12a      	bne.n	8007620 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d108      	bne.n	80075e6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075e2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80075e4:	e01c      	b.n	8007620 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b40      	cmp	r3, #64	@ 0x40
 80075f0:	d103      	bne.n	80075fa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f88e 	bl	8007714 <I2C_MemoryTransmit_TXE_BTF>
}
 80075f8:	e012      	b.n	8007620 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fe:	781a      	ldrb	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007614:	b29b      	uxth	r3, r3
 8007616:	3b01      	subs	r3, #1
 8007618:	b29a      	uxth	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800761e:	e7ff      	b.n	8007620 <I2C_MasterTransmit_TXE+0x130>
 8007620:	bf00      	nop
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007634:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800763c:	b2db      	uxtb	r3, r3
 800763e:	2b21      	cmp	r3, #33	@ 0x21
 8007640:	d164      	bne.n	800770c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d012      	beq.n	8007672 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007650:	781a      	ldrb	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007666:	b29b      	uxth	r3, r3
 8007668:	3b01      	subs	r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007670:	e04c      	b.n	800770c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b08      	cmp	r3, #8
 8007676:	d01d      	beq.n	80076b4 <I2C_MasterTransmit_BTF+0x8c>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b20      	cmp	r3, #32
 800767c:	d01a      	beq.n	80076b4 <I2C_MasterTransmit_BTF+0x8c>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007684:	d016      	beq.n	80076b4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007694:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2211      	movs	r2, #17
 800769a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff feb7 	bl	8007420 <HAL_I2C_MasterTxCpltCallback>
}
 80076b2:	e02b      	b.n	800770c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80076c2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076d2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b40      	cmp	r3, #64	@ 0x40
 80076ec:	d107      	bne.n	80076fe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7ff fed2 	bl	80074a0 <HAL_I2C_MemTxCpltCallback>
}
 80076fc:	e006      	b.n	800770c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff fe8a 	bl	8007420 <HAL_I2C_MasterTxCpltCallback>
}
 800770c:	bf00      	nop
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007722:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007728:	2b00      	cmp	r3, #0
 800772a:	d11d      	bne.n	8007768 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007730:	2b01      	cmp	r3, #1
 8007732:	d10b      	bne.n	800774c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007738:	b2da      	uxtb	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007744:	1c9a      	adds	r2, r3, #2
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800774a:	e077      	b.n	800783c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007750:	b29b      	uxth	r3, r3
 8007752:	121b      	asrs	r3, r3, #8
 8007754:	b2da      	uxtb	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007766:	e069      	b.n	800783c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800776c:	2b01      	cmp	r3, #1
 800776e:	d10b      	bne.n	8007788 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007774:	b2da      	uxtb	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007786:	e059      	b.n	800783c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800778c:	2b02      	cmp	r3, #2
 800778e:	d152      	bne.n	8007836 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007790:	7bfb      	ldrb	r3, [r7, #15]
 8007792:	2b22      	cmp	r3, #34	@ 0x22
 8007794:	d10d      	bne.n	80077b2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077a4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80077b0:	e044      	b.n	800783c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d015      	beq.n	80077e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	2b21      	cmp	r3, #33	@ 0x21
 80077c0:	d112      	bne.n	80077e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c6:	781a      	ldrb	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077dc:	b29b      	uxth	r3, r3
 80077de:	3b01      	subs	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80077e6:	e029      	b.n	800783c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d124      	bne.n	800783c <I2C_MemoryTransmit_TXE_BTF+0x128>
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
 80077f4:	2b21      	cmp	r3, #33	@ 0x21
 80077f6:	d121      	bne.n	800783c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007806:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007816:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7ff fe36 	bl	80074a0 <HAL_I2C_MemTxCpltCallback>
}
 8007834:	e002      	b.n	800783c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff faec 	bl	8006e14 <I2C_Flush_DR>
}
 800783c:	bf00      	nop
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b22      	cmp	r3, #34	@ 0x22
 8007856:	f040 80b9 	bne.w	80079cc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007864:	b29b      	uxth	r3, r3
 8007866:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b03      	cmp	r3, #3
 800786c:	d921      	bls.n	80078b2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	691a      	ldr	r2, [r3, #16]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007878:	b2d2      	uxtb	r2, r2
 800787a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800788a:	b29b      	uxth	r3, r3
 800788c:	3b01      	subs	r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b03      	cmp	r3, #3
 800789c:	f040 8096 	bne.w	80079cc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078ae:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80078b0:	e08c      	b.n	80079cc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d07f      	beq.n	80079ba <I2C_MasterReceive_RXNE+0x176>
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d002      	beq.n	80078c6 <I2C_MasterReceive_RXNE+0x82>
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d179      	bne.n	80079ba <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 fa6a 	bl	8008da0 <I2C_WaitOnSTOPRequestThroughIT>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d14c      	bne.n	800796c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078e0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80078f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	691a      	ldr	r2, [r3, #16]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fc:	b2d2      	uxtb	r2, r2
 80078fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800790e:	b29b      	uxth	r3, r3
 8007910:	3b01      	subs	r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b40      	cmp	r3, #64	@ 0x40
 800792a:	d10a      	bne.n	8007942 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7ff fdba 	bl	80074b4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007940:	e044      	b.n	80079cc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b08      	cmp	r3, #8
 800794e:	d002      	beq.n	8007956 <I2C_MasterReceive_RXNE+0x112>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b20      	cmp	r3, #32
 8007954:	d103      	bne.n	800795e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	631a      	str	r2, [r3, #48]	@ 0x30
 800795c:	e002      	b.n	8007964 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2212      	movs	r2, #18
 8007962:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff fd65 	bl	8007434 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800796a:	e02f      	b.n	80079cc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800797a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691a      	ldr	r2, [r3, #16]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007986:	b2d2      	uxtb	r2, r2
 8007988:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007998:	b29b      	uxth	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	b29a      	uxth	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff fd88 	bl	80074c8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80079b8:	e008      	b.n	80079cc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079c8:	605a      	str	r2, [r3, #4]
}
 80079ca:	e7ff      	b.n	80079cc <I2C_MasterReceive_RXNE+0x188>
 80079cc:	bf00      	nop
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2b04      	cmp	r3, #4
 80079ea:	d11b      	bne.n	8007a24 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079fa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691a      	ldr	r2, [r3, #16]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a06:	b2d2      	uxtb	r2, r2
 8007a08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007a22:	e0c8      	b.n	8007bb6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d129      	bne.n	8007a82 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a3c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	d00a      	beq.n	8007a5a <I2C_MasterReceive_BTF+0x86>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d007      	beq.n	8007a5a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a58:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a64:	b2d2      	uxtb	r2, r2
 8007a66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007a80:	e099      	b.n	8007bb6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	f040 8081 	bne.w	8007b90 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d002      	beq.n	8007a9a <I2C_MasterReceive_BTF+0xc6>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b10      	cmp	r3, #16
 8007a98:	d108      	bne.n	8007aac <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	e019      	b.n	8007ae0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	d002      	beq.n	8007ab8 <I2C_MasterReceive_BTF+0xe4>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d108      	bne.n	8007aca <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	e00a      	b.n	8007ae0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b10      	cmp	r3, #16
 8007ace:	d007      	beq.n	8007ae0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ade:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	691a      	ldr	r2, [r3, #16]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aea:	b2d2      	uxtb	r2, r2
 8007aec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	b2d2      	uxtb	r2, r2
 8007b12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007b3a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b40      	cmp	r3, #64	@ 0x40
 8007b4e:	d10a      	bne.n	8007b66 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff fca8 	bl	80074b4 <HAL_I2C_MemRxCpltCallback>
}
 8007b64:	e027      	b.n	8007bb6 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b08      	cmp	r3, #8
 8007b72:	d002      	beq.n	8007b7a <I2C_MasterReceive_BTF+0x1a6>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	d103      	bne.n	8007b82 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b80:	e002      	b.n	8007b88 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2212      	movs	r2, #18
 8007b86:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff fc53 	bl	8007434 <HAL_I2C_MasterRxCpltCallback>
}
 8007b8e:	e012      	b.n	8007bb6 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691a      	ldr	r2, [r3, #16]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007bb6:	bf00      	nop
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b40      	cmp	r3, #64	@ 0x40
 8007bd0:	d117      	bne.n	8007c02 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d109      	bne.n	8007bee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	461a      	mov	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007bea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007bec:	e067      	b.n	8007cbe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	f043 0301 	orr.w	r3, r3, #1
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	611a      	str	r2, [r3, #16]
}
 8007c00:	e05d      	b.n	8007cbe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c0a:	d133      	bne.n	8007c74 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b21      	cmp	r3, #33	@ 0x21
 8007c16:	d109      	bne.n	8007c2c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007c28:	611a      	str	r2, [r3, #16]
 8007c2a:	e008      	b.n	8007c3e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	f043 0301 	orr.w	r3, r3, #1
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d004      	beq.n	8007c50 <I2C_Master_SB+0x92>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d108      	bne.n	8007c62 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d032      	beq.n	8007cbe <I2C_Master_SB+0x100>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d02d      	beq.n	8007cbe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c70:	605a      	str	r2, [r3, #4]
}
 8007c72:	e024      	b.n	8007cbe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10e      	bne.n	8007c9a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	11db      	asrs	r3, r3, #7
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	f003 0306 	and.w	r3, r3, #6
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	f063 030f 	orn	r3, r3, #15
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	611a      	str	r2, [r3, #16]
}
 8007c98:	e011      	b.n	8007cbe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d10d      	bne.n	8007cbe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	11db      	asrs	r3, r3, #7
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	f003 0306 	and.w	r3, r3, #6
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	f063 030e 	orn	r3, r3, #14
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	611a      	str	r2, [r3, #16]
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d004      	beq.n	8007cf0 <I2C_Master_ADD10+0x26>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d108      	bne.n	8007d02 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00c      	beq.n	8007d12 <I2C_Master_ADD10+0x48>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d007      	beq.n	8007d12 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d10:	605a      	str	r2, [r3, #4]
  }
}
 8007d12:	bf00      	nop
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b091      	sub	sp, #68	@ 0x44
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d34:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d3a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b22      	cmp	r3, #34	@ 0x22
 8007d46:	f040 8169 	bne.w	800801c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10f      	bne.n	8007d72 <I2C_Master_ADDR+0x54>
 8007d52:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007d56:	2b40      	cmp	r3, #64	@ 0x40
 8007d58:	d10b      	bne.n	8007d72 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d70:	e160      	b.n	8008034 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d11d      	bne.n	8007db6 <I2C_Master_ADDR+0x98>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007d82:	d118      	bne.n	8007db6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d84:	2300      	movs	r3, #0
 8007d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007da8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dae:	1c5a      	adds	r2, r3, #1
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	651a      	str	r2, [r3, #80]	@ 0x50
 8007db4:	e13e      	b.n	8008034 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d113      	bne.n	8007de8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	e115      	b.n	8008014 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	f040 808a 	bne.w	8007f08 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007dfa:	d137      	bne.n	8007e6c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e0a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e1a:	d113      	bne.n	8007e44 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e2a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e42:	e0e7      	b.n	8008014 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e44:	2300      	movs	r3, #0
 8007e46:	623b      	str	r3, [r7, #32]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	623b      	str	r3, [r7, #32]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	623b      	str	r3, [r7, #32]
 8007e58:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	e0d3      	b.n	8008014 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6e:	2b08      	cmp	r3, #8
 8007e70:	d02e      	beq.n	8007ed0 <I2C_Master_ADDR+0x1b2>
 8007e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d02b      	beq.n	8007ed0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e7a:	2b12      	cmp	r3, #18
 8007e7c:	d102      	bne.n	8007e84 <I2C_Master_ADDR+0x166>
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d125      	bne.n	8007ed0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d00e      	beq.n	8007ea8 <I2C_Master_ADDR+0x18a>
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d00b      	beq.n	8007ea8 <I2C_Master_ADDR+0x18a>
 8007e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e92:	2b10      	cmp	r3, #16
 8007e94:	d008      	beq.n	8007ea8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	e007      	b.n	8007eb8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007eb6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eb8:	2300      	movs	r3, #0
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	61fb      	str	r3, [r7, #28]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	61fb      	str	r3, [r7, #28]
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	e0a1      	b.n	8008014 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ede:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61bb      	str	r3, [r7, #24]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	61bb      	str	r3, [r7, #24]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	61bb      	str	r3, [r7, #24]
 8007ef4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	e085      	b.n	8008014 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d14d      	bne.n	8007fae <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f14:	2b04      	cmp	r3, #4
 8007f16:	d016      	beq.n	8007f46 <I2C_Master_ADDR+0x228>
 8007f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d013      	beq.n	8007f46 <I2C_Master_ADDR+0x228>
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f20:	2b10      	cmp	r3, #16
 8007f22:	d010      	beq.n	8007f46 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f32:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	e007      	b.n	8007f56 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f54:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f64:	d117      	bne.n	8007f96 <I2C_Master_ADDR+0x278>
 8007f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f6c:	d00b      	beq.n	8007f86 <I2C_Master_ADDR+0x268>
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d008      	beq.n	8007f86 <I2C_Master_ADDR+0x268>
 8007f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f76:	2b08      	cmp	r3, #8
 8007f78:	d005      	beq.n	8007f86 <I2C_Master_ADDR+0x268>
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7c:	2b10      	cmp	r3, #16
 8007f7e:	d002      	beq.n	8007f86 <I2C_Master_ADDR+0x268>
 8007f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	d107      	bne.n	8007f96 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f96:	2300      	movs	r3, #0
 8007f98:	617b      	str	r3, [r7, #20]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	695b      	ldr	r3, [r3, #20]
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	e032      	b.n	8008014 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007fbc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fcc:	d117      	bne.n	8007ffe <I2C_Master_ADDR+0x2e0>
 8007fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007fd4:	d00b      	beq.n	8007fee <I2C_Master_ADDR+0x2d0>
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d008      	beq.n	8007fee <I2C_Master_ADDR+0x2d0>
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fde:	2b08      	cmp	r3, #8
 8007fe0:	d005      	beq.n	8007fee <I2C_Master_ADDR+0x2d0>
 8007fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe4:	2b10      	cmp	r3, #16
 8007fe6:	d002      	beq.n	8007fee <I2C_Master_ADDR+0x2d0>
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fea:	2b20      	cmp	r3, #32
 8007fec:	d107      	bne.n	8007ffe <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ffc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ffe:	2300      	movs	r3, #0
 8008000:	613b      	str	r3, [r7, #16]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	613b      	str	r3, [r7, #16]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	613b      	str	r3, [r7, #16]
 8008012:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800801a:	e00b      	b.n	8008034 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	68fb      	ldr	r3, [r7, #12]
}
 8008032:	e7ff      	b.n	8008034 <I2C_Master_ADDR+0x316>
 8008034:	bf00      	nop
 8008036:	3744      	adds	r7, #68	@ 0x44
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800804e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008054:	b29b      	uxth	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d02b      	beq.n	80080b2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805e:	781a      	ldrb	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008074:	b29b      	uxth	r3, r3
 8008076:	3b01      	subs	r3, #1
 8008078:	b29a      	uxth	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008082:	b29b      	uxth	r3, r3
 8008084:	2b00      	cmp	r3, #0
 8008086:	d114      	bne.n	80080b2 <I2C_SlaveTransmit_TXE+0x72>
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	2b29      	cmp	r3, #41	@ 0x29
 800808c:	d111      	bne.n	80080b2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800809c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2221      	movs	r2, #33	@ 0x21
 80080a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2228      	movs	r2, #40	@ 0x28
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7ff f9cb 	bl	8007448 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80080b2:	bf00      	nop
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b083      	sub	sp, #12
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d011      	beq.n	80080f0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d0:	781a      	ldrb	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800810a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008110:	b29b      	uxth	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d02c      	beq.n	8008170 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008120:	b2d2      	uxtb	r2, r2
 8008122:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008132:	b29b      	uxth	r3, r3
 8008134:	3b01      	subs	r3, #1
 8008136:	b29a      	uxth	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008140:	b29b      	uxth	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d114      	bne.n	8008170 <I2C_SlaveReceive_RXNE+0x74>
 8008146:	7bfb      	ldrb	r3, [r7, #15]
 8008148:	2b2a      	cmp	r3, #42	@ 0x2a
 800814a:	d111      	bne.n	8008170 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800815a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2222      	movs	r2, #34	@ 0x22
 8008160:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2228      	movs	r2, #40	@ 0x28
 8008166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7ff f976 	bl	800745c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008184:	b29b      	uxth	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d012      	beq.n	80081b0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	691a      	ldr	r2, [r3, #16]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008194:	b2d2      	uxtb	r2, r2
 8008196:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	3b01      	subs	r3, #1
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80081c6:	2300      	movs	r3, #0
 80081c8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80081d6:	2b28      	cmp	r3, #40	@ 0x28
 80081d8:	d125      	bne.n	8008226 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081e8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	f003 0304 	and.w	r3, r3, #4
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80081f4:	2301      	movs	r3, #1
 80081f6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d103      	bne.n	800820a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	81bb      	strh	r3, [r7, #12]
 8008208:	e002      	b.n	8008210 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008218:	89ba      	ldrh	r2, [r7, #12]
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	4619      	mov	r1, r3
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff f926 	bl	8007470 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008224:	e00e      	b.n	8008244 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008226:	2300      	movs	r3, #0
 8008228:	60bb      	str	r3, [r7, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	60bb      	str	r3, [r7, #8]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	60bb      	str	r3, [r7, #8]
 800823a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800825a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800826a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800826c:	2300      	movs	r3, #0
 800826e:	60bb      	str	r3, [r7, #8]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	60bb      	str	r3, [r7, #8]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0201 	orr.w	r2, r2, #1
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008298:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082a8:	d172      	bne.n	8008390 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
 80082ac:	2b22      	cmp	r3, #34	@ 0x22
 80082ae:	d002      	beq.n	80082b6 <I2C_Slave_STOPF+0x6a>
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
 80082b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80082b4:	d135      	bne.n	8008322 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	b29a      	uxth	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d2:	f043 0204 	orr.w	r2, r3, #4
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fa3d 	bl	800676e <HAL_DMA_GetState>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d049      	beq.n	800838e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fe:	4a69      	ldr	r2, [pc, #420]	@ (80084a4 <I2C_Slave_STOPF+0x258>)
 8008300:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fa0f 	bl	800672a <HAL_DMA_Abort_IT>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d03d      	beq.n	800838e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800831c:	4610      	mov	r0, r2
 800831e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008320:	e035      	b.n	800838e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	b29a      	uxth	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008334:	b29b      	uxth	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d005      	beq.n	8008346 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833e:	f043 0204 	orr.w	r2, r3, #4
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008354:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fa07 	bl	800676e <HAL_DMA_GetState>
 8008360:	4603      	mov	r3, r0
 8008362:	2b01      	cmp	r3, #1
 8008364:	d014      	beq.n	8008390 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800836a:	4a4e      	ldr	r2, [pc, #312]	@ (80084a4 <I2C_Slave_STOPF+0x258>)
 800836c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008372:	4618      	mov	r0, r3
 8008374:	f7fe f9d9 	bl	800672a <HAL_DMA_Abort_IT>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d008      	beq.n	8008390 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008388:	4610      	mov	r0, r2
 800838a:	4798      	blx	r3
 800838c:	e000      	b.n	8008390 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800838e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008394:	b29b      	uxth	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d03e      	beq.n	8008418 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	f003 0304 	and.w	r3, r3, #4
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d112      	bne.n	80083ce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691a      	ldr	r2, [r3, #16]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b2:	b2d2      	uxtb	r2, r2
 80083b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	3b01      	subs	r3, #1
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d8:	2b40      	cmp	r3, #64	@ 0x40
 80083da:	d112      	bne.n	8008402 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	691a      	ldr	r2, [r3, #16]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	3b01      	subs	r3, #1
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008406:	b29b      	uxth	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008410:	f043 0204 	orr.w	r2, r3, #4
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f8b7 	bl	8008594 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008426:	e039      	b.n	800849c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008428:	7bfb      	ldrb	r3, [r7, #15]
 800842a:	2b2a      	cmp	r3, #42	@ 0x2a
 800842c:	d109      	bne.n	8008442 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2228      	movs	r2, #40	@ 0x28
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff f80d 	bl	800745c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b28      	cmp	r3, #40	@ 0x28
 800844c:	d111      	bne.n	8008472 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a15      	ldr	r2, [pc, #84]	@ (80084a8 <I2C_Slave_STOPF+0x25c>)
 8008452:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff f80e 	bl	800748c <HAL_I2C_ListenCpltCallback>
}
 8008470:	e014      	b.n	800849c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008476:	2b22      	cmp	r3, #34	@ 0x22
 8008478:	d002      	beq.n	8008480 <I2C_Slave_STOPF+0x234>
 800847a:	7bfb      	ldrb	r3, [r7, #15]
 800847c:	2b22      	cmp	r3, #34	@ 0x22
 800847e:	d10d      	bne.n	800849c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2220      	movs	r2, #32
 800848a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7fe ffe0 	bl	800745c <HAL_I2C_SlaveRxCpltCallback>
}
 800849c:	bf00      	nop
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	080088fd 	.word	0x080088fd
 80084a8:	ffff0000 	.word	0xffff0000

080084ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d002      	beq.n	80084ce <I2C_Slave_AF+0x22>
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	2b20      	cmp	r3, #32
 80084cc:	d129      	bne.n	8008522 <I2C_Slave_AF+0x76>
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	2b28      	cmp	r3, #40	@ 0x28
 80084d2:	d126      	bne.n	8008522 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a2e      	ldr	r2, [pc, #184]	@ (8008590 <I2C_Slave_AF+0xe4>)
 80084d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80084e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80084f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008502:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2220      	movs	r2, #32
 800850e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7fe ffb6 	bl	800748c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008520:	e031      	b.n	8008586 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	2b21      	cmp	r3, #33	@ 0x21
 8008526:	d129      	bne.n	800857c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a19      	ldr	r2, [pc, #100]	@ (8008590 <I2C_Slave_AF+0xe4>)
 800852c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2221      	movs	r2, #33	@ 0x21
 8008532:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2220      	movs	r2, #32
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008552:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800855c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800856c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7fe fc50 	bl	8006e14 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7fe ff67 	bl	8007448 <HAL_I2C_SlaveTxCpltCallback>
}
 800857a:	e004      	b.n	8008586 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008584:	615a      	str	r2, [r3, #20]
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	ffff0000 	.word	0xffff0000

08008594 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80085aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
 80085ae:	2b10      	cmp	r3, #16
 80085b0:	d002      	beq.n	80085b8 <I2C_ITError+0x24>
 80085b2:	7bbb      	ldrb	r3, [r7, #14]
 80085b4:	2b40      	cmp	r3, #64	@ 0x40
 80085b6:	d10a      	bne.n	80085ce <I2C_ITError+0x3a>
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	2b22      	cmp	r3, #34	@ 0x22
 80085bc:	d107      	bne.n	80085ce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80085cc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
 80085d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80085d4:	2b28      	cmp	r3, #40	@ 0x28
 80085d6:	d107      	bne.n	80085e8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2228      	movs	r2, #40	@ 0x28
 80085e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80085e6:	e015      	b.n	8008614 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085f6:	d00a      	beq.n	800860e <I2C_ITError+0x7a>
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	2b60      	cmp	r3, #96	@ 0x60
 80085fc:	d007      	beq.n	800860e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2220      	movs	r2, #32
 8008602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800861e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008622:	d162      	bne.n	80086ea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008632:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008638:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b01      	cmp	r3, #1
 8008640:	d020      	beq.n	8008684 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008646:	4a6a      	ldr	r2, [pc, #424]	@ (80087f0 <I2C_ITError+0x25c>)
 8008648:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe f86b 	bl	800672a <HAL_DMA_Abort_IT>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 8089 	beq.w	800876e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 0201 	bic.w	r2, r2, #1
 800866a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2220      	movs	r2, #32
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800867e:	4610      	mov	r0, r2
 8008680:	4798      	blx	r3
 8008682:	e074      	b.n	800876e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008688:	4a59      	ldr	r2, [pc, #356]	@ (80087f0 <I2C_ITError+0x25c>)
 800868a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008690:	4618      	mov	r0, r3
 8008692:	f7fe f84a 	bl	800672a <HAL_DMA_Abort_IT>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d068      	beq.n	800876e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086a6:	2b40      	cmp	r3, #64	@ 0x40
 80086a8:	d10b      	bne.n	80086c2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	691a      	ldr	r2, [r3, #16]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b4:	b2d2      	uxtb	r2, r2
 80086b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f022 0201 	bic.w	r2, r2, #1
 80086d0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2220      	movs	r2, #32
 80086d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80086e4:	4610      	mov	r0, r2
 80086e6:	4798      	blx	r3
 80086e8:	e041      	b.n	800876e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b60      	cmp	r3, #96	@ 0x60
 80086f4:	d125      	bne.n	8008742 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2220      	movs	r2, #32
 80086fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800870e:	2b40      	cmp	r3, #64	@ 0x40
 8008710:	d10b      	bne.n	800872a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	691a      	ldr	r2, [r3, #16]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871c:	b2d2      	uxtb	r2, r2
 800871e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f022 0201 	bic.w	r2, r2, #1
 8008738:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7fe fece 	bl	80074dc <HAL_I2C_AbortCpltCallback>
 8008740:	e015      	b.n	800876e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800874c:	2b40      	cmp	r3, #64	@ 0x40
 800874e:	d10b      	bne.n	8008768 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	691a      	ldr	r2, [r3, #16]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800875a:	b2d2      	uxtb	r2, r2
 800875c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008762:	1c5a      	adds	r2, r3, #1
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7fe fead 	bl	80074c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008772:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10e      	bne.n	800879c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008784:	2b00      	cmp	r3, #0
 8008786:	d109      	bne.n	800879c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800878e:	2b00      	cmp	r3, #0
 8008790:	d104      	bne.n	800879c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008798:	2b00      	cmp	r3, #0
 800879a:	d007      	beq.n	80087ac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80087aa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087b2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087b8:	f003 0304 	and.w	r3, r3, #4
 80087bc:	2b04      	cmp	r3, #4
 80087be:	d113      	bne.n	80087e8 <I2C_ITError+0x254>
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	2b28      	cmp	r3, #40	@ 0x28
 80087c4:	d110      	bne.n	80087e8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a0a      	ldr	r2, [pc, #40]	@ (80087f4 <I2C_ITError+0x260>)
 80087ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2220      	movs	r2, #32
 80087d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f7fe fe52 	bl	800748c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087e8:	bf00      	nop
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	080088fd 	.word	0x080088fd
 80087f4:	ffff0000 	.word	0xffff0000

080087f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	607a      	str	r2, [r7, #4]
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	460b      	mov	r3, r1
 8008806:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b08      	cmp	r3, #8
 8008812:	d006      	beq.n	8008822 <I2C_MasterRequestWrite+0x2a>
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d003      	beq.n	8008822 <I2C_MasterRequestWrite+0x2a>
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008820:	d108      	bne.n	8008834 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	e00b      	b.n	800884c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008838:	2b12      	cmp	r3, #18
 800883a:	d107      	bne.n	800884c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800884a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f000 f8f7 	bl	8008a4c <I2C_WaitOnFlagUntilTimeout>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00d      	beq.n	8008880 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800886e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008872:	d103      	bne.n	800887c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800887a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e035      	b.n	80088ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008888:	d108      	bne.n	800889c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800888a:	897b      	ldrh	r3, [r7, #10]
 800888c:	b2db      	uxtb	r3, r3
 800888e:	461a      	mov	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008898:	611a      	str	r2, [r3, #16]
 800889a:	e01b      	b.n	80088d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800889c:	897b      	ldrh	r3, [r7, #10]
 800889e:	11db      	asrs	r3, r3, #7
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	f003 0306 	and.w	r3, r3, #6
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f063 030f 	orn	r3, r3, #15
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	490e      	ldr	r1, [pc, #56]	@ (80088f4 <I2C_MasterRequestWrite+0xfc>)
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 f940 	bl	8008b40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e010      	b.n	80088ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80088ca:	897b      	ldrh	r3, [r7, #10]
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	4907      	ldr	r1, [pc, #28]	@ (80088f8 <I2C_MasterRequestWrite+0x100>)
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 f930 	bl	8008b40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	00010008 	.word	0x00010008
 80088f8:	00010002 	.word	0x00010002

080088fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800890c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008914:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008916:	4b4b      	ldr	r3, [pc, #300]	@ (8008a44 <I2C_DMAAbort+0x148>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	08db      	lsrs	r3, r3, #3
 800891c:	4a4a      	ldr	r2, [pc, #296]	@ (8008a48 <I2C_DMAAbort+0x14c>)
 800891e:	fba2 2303 	umull	r2, r3, r2, r3
 8008922:	0a1a      	lsrs	r2, r3, #8
 8008924:	4613      	mov	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	00da      	lsls	r2, r3, #3
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d106      	bne.n	8008944 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800893a:	f043 0220 	orr.w	r2, r3, #32
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8008942:	e00a      	b.n	800895a <I2C_DMAAbort+0x5e>
    }
    count--;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3b01      	subs	r3, #1
 8008948:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008958:	d0ea      	beq.n	8008930 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800895e:	2b00      	cmp	r3, #0
 8008960:	d003      	beq.n	800896a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008966:	2200      	movs	r2, #0
 8008968:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008976:	2200      	movs	r2, #0
 8008978:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008988:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	2200      	movs	r2, #0
 800898e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800899c:	2200      	movs	r2, #0
 800899e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d003      	beq.n	80089b0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ac:	2200      	movs	r2, #0
 80089ae:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 0201 	bic.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b60      	cmp	r3, #96	@ 0x60
 80089ca:	d10e      	bne.n	80089ea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2220      	movs	r2, #32
 80089d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2200      	movs	r2, #0
 80089e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80089e2:	6978      	ldr	r0, [r7, #20]
 80089e4:	f7fe fd7a 	bl	80074dc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80089e8:	e027      	b.n	8008a3a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80089ea:	7cfb      	ldrb	r3, [r7, #19]
 80089ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80089f0:	2b28      	cmp	r3, #40	@ 0x28
 80089f2:	d117      	bne.n	8008a24 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0201 	orr.w	r2, r2, #1
 8008a02:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008a12:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2200      	movs	r2, #0
 8008a18:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	2228      	movs	r2, #40	@ 0x28
 8008a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008a22:	e007      	b.n	8008a34 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2220      	movs	r2, #32
 8008a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008a34:	6978      	ldr	r0, [r7, #20]
 8008a36:	f7fe fd47 	bl	80074c8 <HAL_I2C_ErrorCallback>
}
 8008a3a:	bf00      	nop
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	200000a8 	.word	0x200000a8
 8008a48:	14f8b589 	.word	0x14f8b589

08008a4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	603b      	str	r3, [r7, #0]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a5c:	e048      	b.n	8008af0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a64:	d044      	beq.n	8008af0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a66:	f7fc ff77 	bl	8005958 <HAL_GetTick>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d302      	bcc.n	8008a7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d139      	bne.n	8008af0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	0c1b      	lsrs	r3, r3, #16
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d10d      	bne.n	8008aa2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	43da      	mvns	r2, r3
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	4013      	ands	r3, r2
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	bf0c      	ite	eq
 8008a98:	2301      	moveq	r3, #1
 8008a9a:	2300      	movne	r3, #0
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	e00c      	b.n	8008abc <I2C_WaitOnFlagUntilTimeout+0x70>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	43da      	mvns	r2, r3
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	4013      	ands	r3, r2
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	bf0c      	ite	eq
 8008ab4:	2301      	moveq	r3, #1
 8008ab6:	2300      	movne	r3, #0
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	461a      	mov	r2, r3
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d116      	bne.n	8008af0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2220      	movs	r2, #32
 8008acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008adc:	f043 0220 	orr.w	r2, r3, #32
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e023      	b.n	8008b38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	0c1b      	lsrs	r3, r3, #16
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d10d      	bne.n	8008b16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	43da      	mvns	r2, r3
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	4013      	ands	r3, r2
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	bf0c      	ite	eq
 8008b0c:	2301      	moveq	r3, #1
 8008b0e:	2300      	movne	r3, #0
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	461a      	mov	r2, r3
 8008b14:	e00c      	b.n	8008b30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	43da      	mvns	r2, r3
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	4013      	ands	r3, r2
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	bf0c      	ite	eq
 8008b28:	2301      	moveq	r3, #1
 8008b2a:	2300      	movne	r3, #0
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	461a      	mov	r2, r3
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d093      	beq.n	8008a5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b4e:	e071      	b.n	8008c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b5e:	d123      	bne.n	8008ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008b78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2220      	movs	r2, #32
 8008b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b94:	f043 0204 	orr.w	r2, r3, #4
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e067      	b.n	8008c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bae:	d041      	beq.n	8008c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bb0:	f7fc fed2 	bl	8005958 <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d302      	bcc.n	8008bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d136      	bne.n	8008c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	0c1b      	lsrs	r3, r3, #16
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d10c      	bne.n	8008bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	43da      	mvns	r2, r3
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	4013      	ands	r3, r2
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	bf14      	ite	ne
 8008be2:	2301      	movne	r3, #1
 8008be4:	2300      	moveq	r3, #0
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	e00b      	b.n	8008c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	43da      	mvns	r2, r3
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	bf14      	ite	ne
 8008bfc:	2301      	movne	r3, #1
 8008bfe:	2300      	moveq	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d016      	beq.n	8008c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c20:	f043 0220 	orr.w	r2, r3, #32
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e021      	b.n	8008c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	0c1b      	lsrs	r3, r3, #16
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d10c      	bne.n	8008c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	43da      	mvns	r2, r3
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	4013      	ands	r3, r2
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	bf14      	ite	ne
 8008c50:	2301      	movne	r3, #1
 8008c52:	2300      	moveq	r3, #0
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	e00b      	b.n	8008c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	43da      	mvns	r2, r3
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	4013      	ands	r3, r2
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	bf14      	ite	ne
 8008c6a:	2301      	movne	r3, #1
 8008c6c:	2300      	moveq	r3, #0
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f47f af6d 	bne.w	8008b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c8c:	e034      	b.n	8008cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 f8b8 	bl	8008e04 <I2C_IsAcknowledgeFailed>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e034      	b.n	8008d08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca4:	d028      	beq.n	8008cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ca6:	f7fc fe57 	bl	8005958 <HAL_GetTick>
 8008caa:	4602      	mov	r2, r0
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d302      	bcc.n	8008cbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d11d      	bne.n	8008cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cc6:	2b80      	cmp	r3, #128	@ 0x80
 8008cc8:	d016      	beq.n	8008cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce4:	f043 0220 	orr.w	r2, r3, #32
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e007      	b.n	8008d08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d02:	2b80      	cmp	r3, #128	@ 0x80
 8008d04:	d1c3      	bne.n	8008c8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008d1c:	e034      	b.n	8008d88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f000 f870 	bl	8008e04 <I2C_IsAcknowledgeFailed>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e034      	b.n	8008d98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d34:	d028      	beq.n	8008d88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d36:	f7fc fe0f 	bl	8005958 <HAL_GetTick>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d302      	bcc.n	8008d4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d11d      	bne.n	8008d88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	f003 0304 	and.w	r3, r3, #4
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	d016      	beq.n	8008d88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d74:	f043 0220 	orr.w	r2, r3, #32
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e007      	b.n	8008d98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	f003 0304 	and.w	r3, r3, #4
 8008d92:	2b04      	cmp	r3, #4
 8008d94:	d1c3      	bne.n	8008d1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008dac:	4b13      	ldr	r3, [pc, #76]	@ (8008dfc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	08db      	lsrs	r3, r3, #3
 8008db2:	4a13      	ldr	r2, [pc, #76]	@ (8008e00 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008db4:	fba2 2303 	umull	r2, r3, r2, r3
 8008db8:	0a1a      	lsrs	r2, r3, #8
 8008dba:	4613      	mov	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d107      	bne.n	8008dde <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dd2:	f043 0220 	orr.w	r2, r3, #32
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e008      	b.n	8008df0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dec:	d0e9      	beq.n	8008dc2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr
 8008dfc:	200000a8 	.word	0x200000a8
 8008e00:	14f8b589 	.word	0x14f8b589

08008e04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e1a:	d11b      	bne.n	8008e54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008e24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e40:	f043 0204 	orr.w	r2, r3, #4
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e000      	b.n	8008e56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008e72:	d103      	bne.n	8008e7c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008e7a:	e007      	b.n	8008e8c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e80:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008e84:	d102      	bne.n	8008e8c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2208      	movs	r2, #8
 8008e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8008e9c:	4b06      	ldr	r3, [pc, #24]	@ (8008eb8 <HAL_PWR_PVD_IRQHandler+0x20>)
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d005      	beq.n	8008eb4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8008ea8:	f000 f808 	bl	8008ebc <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8008eac:	4b02      	ldr	r3, [pc, #8]	@ (8008eb8 <HAL_PWR_PVD_IRQHandler+0x20>)
 8008eae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008eb2:	615a      	str	r2, [r3, #20]
  }
}
 8008eb4:	bf00      	nop
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	40013c00 	.word	0x40013c00

08008ebc <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8008ec0:	bf00      	nop
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
	...

08008ecc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b086      	sub	sp, #24
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e267      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d075      	beq.n	8008fd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008eea:	4b88      	ldr	r3, [pc, #544]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	f003 030c 	and.w	r3, r3, #12
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d00c      	beq.n	8008f10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ef6:	4b85      	ldr	r3, [pc, #532]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008efe:	2b08      	cmp	r3, #8
 8008f00:	d112      	bne.n	8008f28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f02:	4b82      	ldr	r3, [pc, #520]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f0e:	d10b      	bne.n	8008f28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f10:	4b7e      	ldr	r3, [pc, #504]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d05b      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x108>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d157      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e242      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f30:	d106      	bne.n	8008f40 <HAL_RCC_OscConfig+0x74>
 8008f32:	4b76      	ldr	r3, [pc, #472]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a75      	ldr	r2, [pc, #468]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f3c:	6013      	str	r3, [r2, #0]
 8008f3e:	e01d      	b.n	8008f7c <HAL_RCC_OscConfig+0xb0>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f48:	d10c      	bne.n	8008f64 <HAL_RCC_OscConfig+0x98>
 8008f4a:	4b70      	ldr	r3, [pc, #448]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a6f      	ldr	r2, [pc, #444]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f54:	6013      	str	r3, [r2, #0]
 8008f56:	4b6d      	ldr	r3, [pc, #436]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a6c      	ldr	r2, [pc, #432]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f60:	6013      	str	r3, [r2, #0]
 8008f62:	e00b      	b.n	8008f7c <HAL_RCC_OscConfig+0xb0>
 8008f64:	4b69      	ldr	r3, [pc, #420]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a68      	ldr	r2, [pc, #416]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	4b66      	ldr	r3, [pc, #408]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a65      	ldr	r2, [pc, #404]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d013      	beq.n	8008fac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f84:	f7fc fce8 	bl	8005958 <HAL_GetTick>
 8008f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f8a:	e008      	b.n	8008f9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f8c:	f7fc fce4 	bl	8005958 <HAL_GetTick>
 8008f90:	4602      	mov	r2, r0
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	2b64      	cmp	r3, #100	@ 0x64
 8008f98:	d901      	bls.n	8008f9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e207      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f9e:	4b5b      	ldr	r3, [pc, #364]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d0f0      	beq.n	8008f8c <HAL_RCC_OscConfig+0xc0>
 8008faa:	e014      	b.n	8008fd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fac:	f7fc fcd4 	bl	8005958 <HAL_GetTick>
 8008fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fb2:	e008      	b.n	8008fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fb4:	f7fc fcd0 	bl	8005958 <HAL_GetTick>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	2b64      	cmp	r3, #100	@ 0x64
 8008fc0:	d901      	bls.n	8008fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e1f3      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fc6:	4b51      	ldr	r3, [pc, #324]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1f0      	bne.n	8008fb4 <HAL_RCC_OscConfig+0xe8>
 8008fd2:	e000      	b.n	8008fd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0302 	and.w	r3, r3, #2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d063      	beq.n	80090aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008fe2:	4b4a      	ldr	r3, [pc, #296]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f003 030c 	and.w	r3, r3, #12
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00b      	beq.n	8009006 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008fee:	4b47      	ldr	r3, [pc, #284]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008ff6:	2b08      	cmp	r3, #8
 8008ff8:	d11c      	bne.n	8009034 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ffa:	4b44      	ldr	r3, [pc, #272]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d116      	bne.n	8009034 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009006:	4b41      	ldr	r3, [pc, #260]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d005      	beq.n	800901e <HAL_RCC_OscConfig+0x152>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	2b01      	cmp	r3, #1
 8009018:	d001      	beq.n	800901e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e1c7      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800901e:	4b3b      	ldr	r3, [pc, #236]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	00db      	lsls	r3, r3, #3
 800902c:	4937      	ldr	r1, [pc, #220]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 800902e:	4313      	orrs	r3, r2
 8009030:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009032:	e03a      	b.n	80090aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d020      	beq.n	800907e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800903c:	4b34      	ldr	r3, [pc, #208]	@ (8009110 <HAL_RCC_OscConfig+0x244>)
 800903e:	2201      	movs	r2, #1
 8009040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009042:	f7fc fc89 	bl	8005958 <HAL_GetTick>
 8009046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009048:	e008      	b.n	800905c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800904a:	f7fc fc85 	bl	8005958 <HAL_GetTick>
 800904e:	4602      	mov	r2, r0
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	2b02      	cmp	r3, #2
 8009056:	d901      	bls.n	800905c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e1a8      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800905c:	4b2b      	ldr	r3, [pc, #172]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0302 	and.w	r3, r3, #2
 8009064:	2b00      	cmp	r3, #0
 8009066:	d0f0      	beq.n	800904a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009068:	4b28      	ldr	r3, [pc, #160]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	00db      	lsls	r3, r3, #3
 8009076:	4925      	ldr	r1, [pc, #148]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 8009078:	4313      	orrs	r3, r2
 800907a:	600b      	str	r3, [r1, #0]
 800907c:	e015      	b.n	80090aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800907e:	4b24      	ldr	r3, [pc, #144]	@ (8009110 <HAL_RCC_OscConfig+0x244>)
 8009080:	2200      	movs	r2, #0
 8009082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009084:	f7fc fc68 	bl	8005958 <HAL_GetTick>
 8009088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800908a:	e008      	b.n	800909e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800908c:	f7fc fc64 	bl	8005958 <HAL_GetTick>
 8009090:	4602      	mov	r2, r0
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	2b02      	cmp	r3, #2
 8009098:	d901      	bls.n	800909e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	e187      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800909e:	4b1b      	ldr	r3, [pc, #108]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0302 	and.w	r3, r3, #2
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1f0      	bne.n	800908c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0308 	and.w	r3, r3, #8
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d036      	beq.n	8009124 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d016      	beq.n	80090ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090be:	4b15      	ldr	r3, [pc, #84]	@ (8009114 <HAL_RCC_OscConfig+0x248>)
 80090c0:	2201      	movs	r2, #1
 80090c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090c4:	f7fc fc48 	bl	8005958 <HAL_GetTick>
 80090c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090ca:	e008      	b.n	80090de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80090cc:	f7fc fc44 	bl	8005958 <HAL_GetTick>
 80090d0:	4602      	mov	r2, r0
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d901      	bls.n	80090de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e167      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090de:	4b0b      	ldr	r3, [pc, #44]	@ (800910c <HAL_RCC_OscConfig+0x240>)
 80090e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090e2:	f003 0302 	and.w	r3, r3, #2
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d0f0      	beq.n	80090cc <HAL_RCC_OscConfig+0x200>
 80090ea:	e01b      	b.n	8009124 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090ec:	4b09      	ldr	r3, [pc, #36]	@ (8009114 <HAL_RCC_OscConfig+0x248>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80090f2:	f7fc fc31 	bl	8005958 <HAL_GetTick>
 80090f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090f8:	e00e      	b.n	8009118 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80090fa:	f7fc fc2d 	bl	8005958 <HAL_GetTick>
 80090fe:	4602      	mov	r2, r0
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	2b02      	cmp	r3, #2
 8009106:	d907      	bls.n	8009118 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e150      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
 800910c:	40023800 	.word	0x40023800
 8009110:	42470000 	.word	0x42470000
 8009114:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009118:	4b88      	ldr	r3, [pc, #544]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 800911a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800911c:	f003 0302 	and.w	r3, r3, #2
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1ea      	bne.n	80090fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b00      	cmp	r3, #0
 800912e:	f000 8097 	beq.w	8009260 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009132:	2300      	movs	r3, #0
 8009134:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009136:	4b81      	ldr	r3, [pc, #516]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 8009138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10f      	bne.n	8009162 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009142:	2300      	movs	r3, #0
 8009144:	60bb      	str	r3, [r7, #8]
 8009146:	4b7d      	ldr	r3, [pc, #500]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 8009148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914a:	4a7c      	ldr	r2, [pc, #496]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 800914c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009150:	6413      	str	r3, [r2, #64]	@ 0x40
 8009152:	4b7a      	ldr	r3, [pc, #488]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 8009154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800915a:	60bb      	str	r3, [r7, #8]
 800915c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800915e:	2301      	movs	r3, #1
 8009160:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009162:	4b77      	ldr	r3, [pc, #476]	@ (8009340 <HAL_RCC_OscConfig+0x474>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800916a:	2b00      	cmp	r3, #0
 800916c:	d118      	bne.n	80091a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800916e:	4b74      	ldr	r3, [pc, #464]	@ (8009340 <HAL_RCC_OscConfig+0x474>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a73      	ldr	r2, [pc, #460]	@ (8009340 <HAL_RCC_OscConfig+0x474>)
 8009174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800917a:	f7fc fbed 	bl	8005958 <HAL_GetTick>
 800917e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009180:	e008      	b.n	8009194 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009182:	f7fc fbe9 	bl	8005958 <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b02      	cmp	r3, #2
 800918e:	d901      	bls.n	8009194 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e10c      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009194:	4b6a      	ldr	r3, [pc, #424]	@ (8009340 <HAL_RCC_OscConfig+0x474>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0f0      	beq.n	8009182 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d106      	bne.n	80091b6 <HAL_RCC_OscConfig+0x2ea>
 80091a8:	4b64      	ldr	r3, [pc, #400]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 80091aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091ac:	4a63      	ldr	r2, [pc, #396]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 80091ae:	f043 0301 	orr.w	r3, r3, #1
 80091b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80091b4:	e01c      	b.n	80091f0 <HAL_RCC_OscConfig+0x324>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	2b05      	cmp	r3, #5
 80091bc:	d10c      	bne.n	80091d8 <HAL_RCC_OscConfig+0x30c>
 80091be:	4b5f      	ldr	r3, [pc, #380]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 80091c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091c2:	4a5e      	ldr	r2, [pc, #376]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 80091c4:	f043 0304 	orr.w	r3, r3, #4
 80091c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80091ca:	4b5c      	ldr	r3, [pc, #368]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 80091cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091ce:	4a5b      	ldr	r2, [pc, #364]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 80091d0:	f043 0301 	orr.w	r3, r3, #1
 80091d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80091d6:	e00b      	b.n	80091f0 <HAL_RCC_OscConfig+0x324>
 80091d8:	4b58      	ldr	r3, [pc, #352]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 80091da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091dc:	4a57      	ldr	r2, [pc, #348]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 80091de:	f023 0301 	bic.w	r3, r3, #1
 80091e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80091e4:	4b55      	ldr	r3, [pc, #340]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 80091e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091e8:	4a54      	ldr	r2, [pc, #336]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 80091ea:	f023 0304 	bic.w	r3, r3, #4
 80091ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d015      	beq.n	8009224 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091f8:	f7fc fbae 	bl	8005958 <HAL_GetTick>
 80091fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091fe:	e00a      	b.n	8009216 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009200:	f7fc fbaa 	bl	8005958 <HAL_GetTick>
 8009204:	4602      	mov	r2, r0
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800920e:	4293      	cmp	r3, r2
 8009210:	d901      	bls.n	8009216 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e0cb      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009216:	4b49      	ldr	r3, [pc, #292]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 8009218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0ee      	beq.n	8009200 <HAL_RCC_OscConfig+0x334>
 8009222:	e014      	b.n	800924e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009224:	f7fc fb98 	bl	8005958 <HAL_GetTick>
 8009228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800922a:	e00a      	b.n	8009242 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800922c:	f7fc fb94 	bl	8005958 <HAL_GetTick>
 8009230:	4602      	mov	r2, r0
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800923a:	4293      	cmp	r3, r2
 800923c:	d901      	bls.n	8009242 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e0b5      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009242:	4b3e      	ldr	r3, [pc, #248]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 8009244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1ee      	bne.n	800922c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d105      	bne.n	8009260 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009254:	4b39      	ldr	r3, [pc, #228]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 8009256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009258:	4a38      	ldr	r2, [pc, #224]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 800925a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800925e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 80a1 	beq.w	80093ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800926a:	4b34      	ldr	r3, [pc, #208]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	f003 030c 	and.w	r3, r3, #12
 8009272:	2b08      	cmp	r3, #8
 8009274:	d05c      	beq.n	8009330 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	2b02      	cmp	r3, #2
 800927c:	d141      	bne.n	8009302 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800927e:	4b31      	ldr	r3, [pc, #196]	@ (8009344 <HAL_RCC_OscConfig+0x478>)
 8009280:	2200      	movs	r2, #0
 8009282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009284:	f7fc fb68 	bl	8005958 <HAL_GetTick>
 8009288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800928a:	e008      	b.n	800929e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800928c:	f7fc fb64 	bl	8005958 <HAL_GetTick>
 8009290:	4602      	mov	r2, r0
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	2b02      	cmp	r3, #2
 8009298:	d901      	bls.n	800929e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800929a:	2303      	movs	r3, #3
 800929c:	e087      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800929e:	4b27      	ldr	r3, [pc, #156]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1f0      	bne.n	800928c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	69da      	ldr	r2, [r3, #28]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	431a      	orrs	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b8:	019b      	lsls	r3, r3, #6
 80092ba:	431a      	orrs	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c0:	085b      	lsrs	r3, r3, #1
 80092c2:	3b01      	subs	r3, #1
 80092c4:	041b      	lsls	r3, r3, #16
 80092c6:	431a      	orrs	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092cc:	061b      	lsls	r3, r3, #24
 80092ce:	491b      	ldr	r1, [pc, #108]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092d4:	4b1b      	ldr	r3, [pc, #108]	@ (8009344 <HAL_RCC_OscConfig+0x478>)
 80092d6:	2201      	movs	r2, #1
 80092d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092da:	f7fc fb3d 	bl	8005958 <HAL_GetTick>
 80092de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092e0:	e008      	b.n	80092f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092e2:	f7fc fb39 	bl	8005958 <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d901      	bls.n	80092f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e05c      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092f4:	4b11      	ldr	r3, [pc, #68]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0f0      	beq.n	80092e2 <HAL_RCC_OscConfig+0x416>
 8009300:	e054      	b.n	80093ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009302:	4b10      	ldr	r3, [pc, #64]	@ (8009344 <HAL_RCC_OscConfig+0x478>)
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009308:	f7fc fb26 	bl	8005958 <HAL_GetTick>
 800930c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800930e:	e008      	b.n	8009322 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009310:	f7fc fb22 	bl	8005958 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	2b02      	cmp	r3, #2
 800931c:	d901      	bls.n	8009322 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e045      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009322:	4b06      	ldr	r3, [pc, #24]	@ (800933c <HAL_RCC_OscConfig+0x470>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1f0      	bne.n	8009310 <HAL_RCC_OscConfig+0x444>
 800932e:	e03d      	b.n	80093ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d107      	bne.n	8009348 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	e038      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
 800933c:	40023800 	.word	0x40023800
 8009340:	40007000 	.word	0x40007000
 8009344:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009348:	4b1b      	ldr	r3, [pc, #108]	@ (80093b8 <HAL_RCC_OscConfig+0x4ec>)
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d028      	beq.n	80093a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009360:	429a      	cmp	r2, r3
 8009362:	d121      	bne.n	80093a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800936e:	429a      	cmp	r2, r3
 8009370:	d11a      	bne.n	80093a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009372:	68fa      	ldr	r2, [r7, #12]
 8009374:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009378:	4013      	ands	r3, r2
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800937e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009380:	4293      	cmp	r3, r2
 8009382:	d111      	bne.n	80093a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938e:	085b      	lsrs	r3, r3, #1
 8009390:	3b01      	subs	r3, #1
 8009392:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009394:	429a      	cmp	r2, r3
 8009396:	d107      	bne.n	80093a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d001      	beq.n	80093ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	40023800 	.word	0x40023800

080093bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d101      	bne.n	80093d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	e0cc      	b.n	800956a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80093d0:	4b68      	ldr	r3, [pc, #416]	@ (8009574 <HAL_RCC_ClockConfig+0x1b8>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0307 	and.w	r3, r3, #7
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d90c      	bls.n	80093f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093de:	4b65      	ldr	r3, [pc, #404]	@ (8009574 <HAL_RCC_ClockConfig+0x1b8>)
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	b2d2      	uxtb	r2, r2
 80093e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093e6:	4b63      	ldr	r3, [pc, #396]	@ (8009574 <HAL_RCC_ClockConfig+0x1b8>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0307 	and.w	r3, r3, #7
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d001      	beq.n	80093f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e0b8      	b.n	800956a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0302 	and.w	r3, r3, #2
 8009400:	2b00      	cmp	r3, #0
 8009402:	d020      	beq.n	8009446 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0304 	and.w	r3, r3, #4
 800940c:	2b00      	cmp	r3, #0
 800940e:	d005      	beq.n	800941c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009410:	4b59      	ldr	r3, [pc, #356]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	4a58      	ldr	r2, [pc, #352]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 8009416:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800941a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 0308 	and.w	r3, r3, #8
 8009424:	2b00      	cmp	r3, #0
 8009426:	d005      	beq.n	8009434 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009428:	4b53      	ldr	r3, [pc, #332]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	4a52      	ldr	r2, [pc, #328]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 800942e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009432:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009434:	4b50      	ldr	r3, [pc, #320]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	494d      	ldr	r1, [pc, #308]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 8009442:	4313      	orrs	r3, r2
 8009444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	d044      	beq.n	80094dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d107      	bne.n	800946a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800945a:	4b47      	ldr	r3, [pc, #284]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009462:	2b00      	cmp	r3, #0
 8009464:	d119      	bne.n	800949a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e07f      	b.n	800956a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	2b02      	cmp	r3, #2
 8009470:	d003      	beq.n	800947a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009476:	2b03      	cmp	r3, #3
 8009478:	d107      	bne.n	800948a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800947a:	4b3f      	ldr	r3, [pc, #252]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d109      	bne.n	800949a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e06f      	b.n	800956a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800948a:	4b3b      	ldr	r3, [pc, #236]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e067      	b.n	800956a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800949a:	4b37      	ldr	r3, [pc, #220]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f023 0203 	bic.w	r2, r3, #3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	4934      	ldr	r1, [pc, #208]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 80094a8:	4313      	orrs	r3, r2
 80094aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80094ac:	f7fc fa54 	bl	8005958 <HAL_GetTick>
 80094b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094b2:	e00a      	b.n	80094ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094b4:	f7fc fa50 	bl	8005958 <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d901      	bls.n	80094ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80094c6:	2303      	movs	r3, #3
 80094c8:	e04f      	b.n	800956a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094ca:	4b2b      	ldr	r3, [pc, #172]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f003 020c 	and.w	r2, r3, #12
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	429a      	cmp	r2, r3
 80094da:	d1eb      	bne.n	80094b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80094dc:	4b25      	ldr	r3, [pc, #148]	@ (8009574 <HAL_RCC_ClockConfig+0x1b8>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 0307 	and.w	r3, r3, #7
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d20c      	bcs.n	8009504 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094ea:	4b22      	ldr	r3, [pc, #136]	@ (8009574 <HAL_RCC_ClockConfig+0x1b8>)
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	b2d2      	uxtb	r2, r2
 80094f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094f2:	4b20      	ldr	r3, [pc, #128]	@ (8009574 <HAL_RCC_ClockConfig+0x1b8>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0307 	and.w	r3, r3, #7
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d001      	beq.n	8009504 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e032      	b.n	800956a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 0304 	and.w	r3, r3, #4
 800950c:	2b00      	cmp	r3, #0
 800950e:	d008      	beq.n	8009522 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009510:	4b19      	ldr	r3, [pc, #100]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	4916      	ldr	r1, [pc, #88]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 800951e:	4313      	orrs	r3, r2
 8009520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0308 	and.w	r3, r3, #8
 800952a:	2b00      	cmp	r3, #0
 800952c:	d009      	beq.n	8009542 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800952e:	4b12      	ldr	r3, [pc, #72]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	00db      	lsls	r3, r3, #3
 800953c:	490e      	ldr	r1, [pc, #56]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 800953e:	4313      	orrs	r3, r2
 8009540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009542:	f000 f821 	bl	8009588 <HAL_RCC_GetSysClockFreq>
 8009546:	4602      	mov	r2, r0
 8009548:	4b0b      	ldr	r3, [pc, #44]	@ (8009578 <HAL_RCC_ClockConfig+0x1bc>)
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	091b      	lsrs	r3, r3, #4
 800954e:	f003 030f 	and.w	r3, r3, #15
 8009552:	490a      	ldr	r1, [pc, #40]	@ (800957c <HAL_RCC_ClockConfig+0x1c0>)
 8009554:	5ccb      	ldrb	r3, [r1, r3]
 8009556:	fa22 f303 	lsr.w	r3, r2, r3
 800955a:	4a09      	ldr	r2, [pc, #36]	@ (8009580 <HAL_RCC_ClockConfig+0x1c4>)
 800955c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800955e:	4b09      	ldr	r3, [pc, #36]	@ (8009584 <HAL_RCC_ClockConfig+0x1c8>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4618      	mov	r0, r3
 8009564:	f7fc f9b4 	bl	80058d0 <HAL_InitTick>

  return HAL_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	40023c00 	.word	0x40023c00
 8009578:	40023800 	.word	0x40023800
 800957c:	0801506c 	.word	0x0801506c
 8009580:	200000a8 	.word	0x200000a8
 8009584:	200000ac 	.word	0x200000ac

08009588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800958c:	b094      	sub	sp, #80	@ 0x50
 800958e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	647b      	str	r3, [r7, #68]	@ 0x44
 8009594:	2300      	movs	r3, #0
 8009596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009598:	2300      	movs	r3, #0
 800959a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095a0:	4b79      	ldr	r3, [pc, #484]	@ (8009788 <HAL_RCC_GetSysClockFreq+0x200>)
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	f003 030c 	and.w	r3, r3, #12
 80095a8:	2b08      	cmp	r3, #8
 80095aa:	d00d      	beq.n	80095c8 <HAL_RCC_GetSysClockFreq+0x40>
 80095ac:	2b08      	cmp	r3, #8
 80095ae:	f200 80e1 	bhi.w	8009774 <HAL_RCC_GetSysClockFreq+0x1ec>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <HAL_RCC_GetSysClockFreq+0x34>
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	d003      	beq.n	80095c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80095ba:	e0db      	b.n	8009774 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80095bc:	4b73      	ldr	r3, [pc, #460]	@ (800978c <HAL_RCC_GetSysClockFreq+0x204>)
 80095be:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80095c0:	e0db      	b.n	800977a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80095c2:	4b73      	ldr	r3, [pc, #460]	@ (8009790 <HAL_RCC_GetSysClockFreq+0x208>)
 80095c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80095c6:	e0d8      	b.n	800977a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80095c8:	4b6f      	ldr	r3, [pc, #444]	@ (8009788 <HAL_RCC_GetSysClockFreq+0x200>)
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80095d2:	4b6d      	ldr	r3, [pc, #436]	@ (8009788 <HAL_RCC_GetSysClockFreq+0x200>)
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d063      	beq.n	80096a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095de:	4b6a      	ldr	r3, [pc, #424]	@ (8009788 <HAL_RCC_GetSysClockFreq+0x200>)
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	099b      	lsrs	r3, r3, #6
 80095e4:	2200      	movs	r2, #0
 80095e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80095e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80095ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80095f2:	2300      	movs	r3, #0
 80095f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80095f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80095fa:	4622      	mov	r2, r4
 80095fc:	462b      	mov	r3, r5
 80095fe:	f04f 0000 	mov.w	r0, #0
 8009602:	f04f 0100 	mov.w	r1, #0
 8009606:	0159      	lsls	r1, r3, #5
 8009608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800960c:	0150      	lsls	r0, r2, #5
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	4621      	mov	r1, r4
 8009614:	1a51      	subs	r1, r2, r1
 8009616:	6139      	str	r1, [r7, #16]
 8009618:	4629      	mov	r1, r5
 800961a:	eb63 0301 	sbc.w	r3, r3, r1
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	f04f 0200 	mov.w	r2, #0
 8009624:	f04f 0300 	mov.w	r3, #0
 8009628:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800962c:	4659      	mov	r1, fp
 800962e:	018b      	lsls	r3, r1, #6
 8009630:	4651      	mov	r1, sl
 8009632:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009636:	4651      	mov	r1, sl
 8009638:	018a      	lsls	r2, r1, #6
 800963a:	4651      	mov	r1, sl
 800963c:	ebb2 0801 	subs.w	r8, r2, r1
 8009640:	4659      	mov	r1, fp
 8009642:	eb63 0901 	sbc.w	r9, r3, r1
 8009646:	f04f 0200 	mov.w	r2, #0
 800964a:	f04f 0300 	mov.w	r3, #0
 800964e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009652:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009656:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800965a:	4690      	mov	r8, r2
 800965c:	4699      	mov	r9, r3
 800965e:	4623      	mov	r3, r4
 8009660:	eb18 0303 	adds.w	r3, r8, r3
 8009664:	60bb      	str	r3, [r7, #8]
 8009666:	462b      	mov	r3, r5
 8009668:	eb49 0303 	adc.w	r3, r9, r3
 800966c:	60fb      	str	r3, [r7, #12]
 800966e:	f04f 0200 	mov.w	r2, #0
 8009672:	f04f 0300 	mov.w	r3, #0
 8009676:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800967a:	4629      	mov	r1, r5
 800967c:	024b      	lsls	r3, r1, #9
 800967e:	4621      	mov	r1, r4
 8009680:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009684:	4621      	mov	r1, r4
 8009686:	024a      	lsls	r2, r1, #9
 8009688:	4610      	mov	r0, r2
 800968a:	4619      	mov	r1, r3
 800968c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800968e:	2200      	movs	r2, #0
 8009690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009692:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009694:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009698:	f7f7 fb06 	bl	8000ca8 <__aeabi_uldivmod>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4613      	mov	r3, r2
 80096a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096a4:	e058      	b.n	8009758 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096a6:	4b38      	ldr	r3, [pc, #224]	@ (8009788 <HAL_RCC_GetSysClockFreq+0x200>)
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	099b      	lsrs	r3, r3, #6
 80096ac:	2200      	movs	r2, #0
 80096ae:	4618      	mov	r0, r3
 80096b0:	4611      	mov	r1, r2
 80096b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80096b6:	623b      	str	r3, [r7, #32]
 80096b8:	2300      	movs	r3, #0
 80096ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80096bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80096c0:	4642      	mov	r2, r8
 80096c2:	464b      	mov	r3, r9
 80096c4:	f04f 0000 	mov.w	r0, #0
 80096c8:	f04f 0100 	mov.w	r1, #0
 80096cc:	0159      	lsls	r1, r3, #5
 80096ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80096d2:	0150      	lsls	r0, r2, #5
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4641      	mov	r1, r8
 80096da:	ebb2 0a01 	subs.w	sl, r2, r1
 80096de:	4649      	mov	r1, r9
 80096e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80096e4:	f04f 0200 	mov.w	r2, #0
 80096e8:	f04f 0300 	mov.w	r3, #0
 80096ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80096f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80096f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80096f8:	ebb2 040a 	subs.w	r4, r2, sl
 80096fc:	eb63 050b 	sbc.w	r5, r3, fp
 8009700:	f04f 0200 	mov.w	r2, #0
 8009704:	f04f 0300 	mov.w	r3, #0
 8009708:	00eb      	lsls	r3, r5, #3
 800970a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800970e:	00e2      	lsls	r2, r4, #3
 8009710:	4614      	mov	r4, r2
 8009712:	461d      	mov	r5, r3
 8009714:	4643      	mov	r3, r8
 8009716:	18e3      	adds	r3, r4, r3
 8009718:	603b      	str	r3, [r7, #0]
 800971a:	464b      	mov	r3, r9
 800971c:	eb45 0303 	adc.w	r3, r5, r3
 8009720:	607b      	str	r3, [r7, #4]
 8009722:	f04f 0200 	mov.w	r2, #0
 8009726:	f04f 0300 	mov.w	r3, #0
 800972a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800972e:	4629      	mov	r1, r5
 8009730:	028b      	lsls	r3, r1, #10
 8009732:	4621      	mov	r1, r4
 8009734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009738:	4621      	mov	r1, r4
 800973a:	028a      	lsls	r2, r1, #10
 800973c:	4610      	mov	r0, r2
 800973e:	4619      	mov	r1, r3
 8009740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009742:	2200      	movs	r2, #0
 8009744:	61bb      	str	r3, [r7, #24]
 8009746:	61fa      	str	r2, [r7, #28]
 8009748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800974c:	f7f7 faac 	bl	8000ca8 <__aeabi_uldivmod>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4613      	mov	r3, r2
 8009756:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009758:	4b0b      	ldr	r3, [pc, #44]	@ (8009788 <HAL_RCC_GetSysClockFreq+0x200>)
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	0c1b      	lsrs	r3, r3, #16
 800975e:	f003 0303 	and.w	r3, r3, #3
 8009762:	3301      	adds	r3, #1
 8009764:	005b      	lsls	r3, r3, #1
 8009766:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8009768:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800976a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800976c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009770:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009772:	e002      	b.n	800977a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009774:	4b05      	ldr	r3, [pc, #20]	@ (800978c <HAL_RCC_GetSysClockFreq+0x204>)
 8009776:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800977a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800977c:	4618      	mov	r0, r3
 800977e:	3750      	adds	r7, #80	@ 0x50
 8009780:	46bd      	mov	sp, r7
 8009782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009786:	bf00      	nop
 8009788:	40023800 	.word	0x40023800
 800978c:	00f42400 	.word	0x00f42400
 8009790:	007a1200 	.word	0x007a1200

08009794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009794:	b480      	push	{r7}
 8009796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009798:	4b03      	ldr	r3, [pc, #12]	@ (80097a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800979a:	681b      	ldr	r3, [r3, #0]
}
 800979c:	4618      	mov	r0, r3
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	200000a8 	.word	0x200000a8

080097ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80097b0:	f7ff fff0 	bl	8009794 <HAL_RCC_GetHCLKFreq>
 80097b4:	4602      	mov	r2, r0
 80097b6:	4b05      	ldr	r3, [pc, #20]	@ (80097cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	0a9b      	lsrs	r3, r3, #10
 80097bc:	f003 0307 	and.w	r3, r3, #7
 80097c0:	4903      	ldr	r1, [pc, #12]	@ (80097d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097c2:	5ccb      	ldrb	r3, [r1, r3]
 80097c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	40023800 	.word	0x40023800
 80097d0:	0801507c 	.word	0x0801507c

080097d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80097d8:	f7ff ffdc 	bl	8009794 <HAL_RCC_GetHCLKFreq>
 80097dc:	4602      	mov	r2, r0
 80097de:	4b05      	ldr	r3, [pc, #20]	@ (80097f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	0b5b      	lsrs	r3, r3, #13
 80097e4:	f003 0307 	and.w	r3, r3, #7
 80097e8:	4903      	ldr	r1, [pc, #12]	@ (80097f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80097ea:	5ccb      	ldrb	r3, [r1, r3]
 80097ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	40023800 	.word	0x40023800
 80097f8:	0801507c 	.word	0x0801507c

080097fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e041      	b.n	8009892 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b00      	cmp	r3, #0
 8009818:	d106      	bne.n	8009828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7fb febe 	bl	80055a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2202      	movs	r2, #2
 800982c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3304      	adds	r3, #4
 8009838:	4619      	mov	r1, r3
 800983a:	4610      	mov	r0, r2
 800983c:	f000 faac 	bl	8009d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d001      	beq.n	80098b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e04e      	b.n	8009952 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68da      	ldr	r2, [r3, #12]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f042 0201 	orr.w	r2, r2, #1
 80098ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a23      	ldr	r2, [pc, #140]	@ (8009960 <HAL_TIM_Base_Start_IT+0xc4>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d022      	beq.n	800991c <HAL_TIM_Base_Start_IT+0x80>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098de:	d01d      	beq.n	800991c <HAL_TIM_Base_Start_IT+0x80>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a1f      	ldr	r2, [pc, #124]	@ (8009964 <HAL_TIM_Base_Start_IT+0xc8>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d018      	beq.n	800991c <HAL_TIM_Base_Start_IT+0x80>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a1e      	ldr	r2, [pc, #120]	@ (8009968 <HAL_TIM_Base_Start_IT+0xcc>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d013      	beq.n	800991c <HAL_TIM_Base_Start_IT+0x80>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a1c      	ldr	r2, [pc, #112]	@ (800996c <HAL_TIM_Base_Start_IT+0xd0>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d00e      	beq.n	800991c <HAL_TIM_Base_Start_IT+0x80>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a1b      	ldr	r2, [pc, #108]	@ (8009970 <HAL_TIM_Base_Start_IT+0xd4>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d009      	beq.n	800991c <HAL_TIM_Base_Start_IT+0x80>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a19      	ldr	r2, [pc, #100]	@ (8009974 <HAL_TIM_Base_Start_IT+0xd8>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d004      	beq.n	800991c <HAL_TIM_Base_Start_IT+0x80>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a18      	ldr	r2, [pc, #96]	@ (8009978 <HAL_TIM_Base_Start_IT+0xdc>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d111      	bne.n	8009940 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f003 0307 	and.w	r3, r3, #7
 8009926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b06      	cmp	r3, #6
 800992c:	d010      	beq.n	8009950 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f042 0201 	orr.w	r2, r2, #1
 800993c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800993e:	e007      	b.n	8009950 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f042 0201 	orr.w	r2, r2, #1
 800994e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	40010000 	.word	0x40010000
 8009964:	40000400 	.word	0x40000400
 8009968:	40000800 	.word	0x40000800
 800996c:	40000c00 	.word	0x40000c00
 8009970:	40010400 	.word	0x40010400
 8009974:	40014000 	.word	0x40014000
 8009978:	40001800 	.word	0x40001800

0800997c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68da      	ldr	r2, [r3, #12]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f022 0201 	bic.w	r2, r2, #1
 8009992:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6a1a      	ldr	r2, [r3, #32]
 800999a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800999e:	4013      	ands	r3, r2
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10f      	bne.n	80099c4 <HAL_TIM_Base_Stop_IT+0x48>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6a1a      	ldr	r2, [r3, #32]
 80099aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80099ae:	4013      	ands	r3, r2
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d107      	bne.n	80099c4 <HAL_TIM_Base_Stop_IT+0x48>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f022 0201 	bic.w	r2, r2, #1
 80099c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr

080099da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b084      	sub	sp, #16
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	f003 0302 	and.w	r3, r3, #2
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d020      	beq.n	8009a3e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f003 0302 	and.w	r3, r3, #2
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d01b      	beq.n	8009a3e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f06f 0202 	mvn.w	r2, #2
 8009a0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2201      	movs	r2, #1
 8009a14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	f003 0303 	and.w	r3, r3, #3
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d003      	beq.n	8009a2c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f999 	bl	8009d5c <HAL_TIM_IC_CaptureCallback>
 8009a2a:	e005      	b.n	8009a38 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f98b 	bl	8009d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f99c 	bl	8009d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f003 0304 	and.w	r3, r3, #4
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d020      	beq.n	8009a8a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f003 0304 	and.w	r3, r3, #4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d01b      	beq.n	8009a8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f06f 0204 	mvn.w	r2, #4
 8009a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d003      	beq.n	8009a78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f973 	bl	8009d5c <HAL_TIM_IC_CaptureCallback>
 8009a76:	e005      	b.n	8009a84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f965 	bl	8009d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f976 	bl	8009d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f003 0308 	and.w	r3, r3, #8
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d020      	beq.n	8009ad6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f003 0308 	and.w	r3, r3, #8
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d01b      	beq.n	8009ad6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f06f 0208 	mvn.w	r2, #8
 8009aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2204      	movs	r2, #4
 8009aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	69db      	ldr	r3, [r3, #28]
 8009ab4:	f003 0303 	and.w	r3, r3, #3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d003      	beq.n	8009ac4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f94d 	bl	8009d5c <HAL_TIM_IC_CaptureCallback>
 8009ac2:	e005      	b.n	8009ad0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f93f 	bl	8009d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f950 	bl	8009d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	f003 0310 	and.w	r3, r3, #16
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d020      	beq.n	8009b22 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f003 0310 	and.w	r3, r3, #16
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d01b      	beq.n	8009b22 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f06f 0210 	mvn.w	r2, #16
 8009af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2208      	movs	r2, #8
 8009af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	69db      	ldr	r3, [r3, #28]
 8009b00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d003      	beq.n	8009b10 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f927 	bl	8009d5c <HAL_TIM_IC_CaptureCallback>
 8009b0e:	e005      	b.n	8009b1c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f919 	bl	8009d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f92a 	bl	8009d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	f003 0301 	and.w	r3, r3, #1
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00c      	beq.n	8009b46 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d007      	beq.n	8009b46 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f06f 0201 	mvn.w	r2, #1
 8009b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7f9 fbcd 	bl	80032e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00c      	beq.n	8009b6a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d007      	beq.n	8009b6a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fae3 	bl	800a130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00c      	beq.n	8009b8e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d007      	beq.n	8009b8e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 f8fb 	bl	8009d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	f003 0320 	and.w	r3, r3, #32
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00c      	beq.n	8009bb2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f003 0320 	and.w	r3, r3, #32
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d007      	beq.n	8009bb2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f06f 0220 	mvn.w	r2, #32
 8009baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fab5 	bl	800a11c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bb2:	bf00      	nop
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d101      	bne.n	8009bd6 <HAL_TIM_ConfigClockSource+0x1c>
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	e0b4      	b.n	8009d40 <HAL_TIM_ConfigClockSource+0x186>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2202      	movs	r2, #2
 8009be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009bf4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009bfc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c0e:	d03e      	beq.n	8009c8e <HAL_TIM_ConfigClockSource+0xd4>
 8009c10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c14:	f200 8087 	bhi.w	8009d26 <HAL_TIM_ConfigClockSource+0x16c>
 8009c18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c1c:	f000 8086 	beq.w	8009d2c <HAL_TIM_ConfigClockSource+0x172>
 8009c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c24:	d87f      	bhi.n	8009d26 <HAL_TIM_ConfigClockSource+0x16c>
 8009c26:	2b70      	cmp	r3, #112	@ 0x70
 8009c28:	d01a      	beq.n	8009c60 <HAL_TIM_ConfigClockSource+0xa6>
 8009c2a:	2b70      	cmp	r3, #112	@ 0x70
 8009c2c:	d87b      	bhi.n	8009d26 <HAL_TIM_ConfigClockSource+0x16c>
 8009c2e:	2b60      	cmp	r3, #96	@ 0x60
 8009c30:	d050      	beq.n	8009cd4 <HAL_TIM_ConfigClockSource+0x11a>
 8009c32:	2b60      	cmp	r3, #96	@ 0x60
 8009c34:	d877      	bhi.n	8009d26 <HAL_TIM_ConfigClockSource+0x16c>
 8009c36:	2b50      	cmp	r3, #80	@ 0x50
 8009c38:	d03c      	beq.n	8009cb4 <HAL_TIM_ConfigClockSource+0xfa>
 8009c3a:	2b50      	cmp	r3, #80	@ 0x50
 8009c3c:	d873      	bhi.n	8009d26 <HAL_TIM_ConfigClockSource+0x16c>
 8009c3e:	2b40      	cmp	r3, #64	@ 0x40
 8009c40:	d058      	beq.n	8009cf4 <HAL_TIM_ConfigClockSource+0x13a>
 8009c42:	2b40      	cmp	r3, #64	@ 0x40
 8009c44:	d86f      	bhi.n	8009d26 <HAL_TIM_ConfigClockSource+0x16c>
 8009c46:	2b30      	cmp	r3, #48	@ 0x30
 8009c48:	d064      	beq.n	8009d14 <HAL_TIM_ConfigClockSource+0x15a>
 8009c4a:	2b30      	cmp	r3, #48	@ 0x30
 8009c4c:	d86b      	bhi.n	8009d26 <HAL_TIM_ConfigClockSource+0x16c>
 8009c4e:	2b20      	cmp	r3, #32
 8009c50:	d060      	beq.n	8009d14 <HAL_TIM_ConfigClockSource+0x15a>
 8009c52:	2b20      	cmp	r3, #32
 8009c54:	d867      	bhi.n	8009d26 <HAL_TIM_ConfigClockSource+0x16c>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d05c      	beq.n	8009d14 <HAL_TIM_ConfigClockSource+0x15a>
 8009c5a:	2b10      	cmp	r3, #16
 8009c5c:	d05a      	beq.n	8009d14 <HAL_TIM_ConfigClockSource+0x15a>
 8009c5e:	e062      	b.n	8009d26 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c70:	f000 f9b8 	bl	8009fe4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009c82:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	609a      	str	r2, [r3, #8]
      break;
 8009c8c:	e04f      	b.n	8009d2e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c9e:	f000 f9a1 	bl	8009fe4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009cb0:	609a      	str	r2, [r3, #8]
      break;
 8009cb2:	e03c      	b.n	8009d2e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	f000 f915 	bl	8009ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2150      	movs	r1, #80	@ 0x50
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f000 f96e 	bl	8009fae <TIM_ITRx_SetConfig>
      break;
 8009cd2:	e02c      	b.n	8009d2e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	f000 f934 	bl	8009f4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2160      	movs	r1, #96	@ 0x60
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 f95e 	bl	8009fae <TIM_ITRx_SetConfig>
      break;
 8009cf2:	e01c      	b.n	8009d2e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d00:	461a      	mov	r2, r3
 8009d02:	f000 f8f5 	bl	8009ef0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2140      	movs	r1, #64	@ 0x40
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 f94e 	bl	8009fae <TIM_ITRx_SetConfig>
      break;
 8009d12:	e00c      	b.n	8009d2e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4610      	mov	r0, r2
 8009d20:	f000 f945 	bl	8009fae <TIM_ITRx_SetConfig>
      break;
 8009d24:	e003      	b.n	8009d2e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	73fb      	strb	r3, [r7, #15]
      break;
 8009d2a:	e000      	b.n	8009d2e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009d2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a46      	ldr	r2, [pc, #280]	@ (8009ec4 <TIM_Base_SetConfig+0x12c>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d013      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009db6:	d00f      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a43      	ldr	r2, [pc, #268]	@ (8009ec8 <TIM_Base_SetConfig+0x130>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d00b      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a42      	ldr	r2, [pc, #264]	@ (8009ecc <TIM_Base_SetConfig+0x134>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d007      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a41      	ldr	r2, [pc, #260]	@ (8009ed0 <TIM_Base_SetConfig+0x138>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d003      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a40      	ldr	r2, [pc, #256]	@ (8009ed4 <TIM_Base_SetConfig+0x13c>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d108      	bne.n	8009dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a35      	ldr	r2, [pc, #212]	@ (8009ec4 <TIM_Base_SetConfig+0x12c>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d02b      	beq.n	8009e4a <TIM_Base_SetConfig+0xb2>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009df8:	d027      	beq.n	8009e4a <TIM_Base_SetConfig+0xb2>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a32      	ldr	r2, [pc, #200]	@ (8009ec8 <TIM_Base_SetConfig+0x130>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d023      	beq.n	8009e4a <TIM_Base_SetConfig+0xb2>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a31      	ldr	r2, [pc, #196]	@ (8009ecc <TIM_Base_SetConfig+0x134>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d01f      	beq.n	8009e4a <TIM_Base_SetConfig+0xb2>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a30      	ldr	r2, [pc, #192]	@ (8009ed0 <TIM_Base_SetConfig+0x138>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d01b      	beq.n	8009e4a <TIM_Base_SetConfig+0xb2>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a2f      	ldr	r2, [pc, #188]	@ (8009ed4 <TIM_Base_SetConfig+0x13c>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d017      	beq.n	8009e4a <TIM_Base_SetConfig+0xb2>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8009ed8 <TIM_Base_SetConfig+0x140>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d013      	beq.n	8009e4a <TIM_Base_SetConfig+0xb2>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a2d      	ldr	r2, [pc, #180]	@ (8009edc <TIM_Base_SetConfig+0x144>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d00f      	beq.n	8009e4a <TIM_Base_SetConfig+0xb2>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8009ee0 <TIM_Base_SetConfig+0x148>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d00b      	beq.n	8009e4a <TIM_Base_SetConfig+0xb2>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a2b      	ldr	r2, [pc, #172]	@ (8009ee4 <TIM_Base_SetConfig+0x14c>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d007      	beq.n	8009e4a <TIM_Base_SetConfig+0xb2>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8009ee8 <TIM_Base_SetConfig+0x150>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d003      	beq.n	8009e4a <TIM_Base_SetConfig+0xb2>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a29      	ldr	r2, [pc, #164]	@ (8009eec <TIM_Base_SetConfig+0x154>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d108      	bne.n	8009e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a10      	ldr	r2, [pc, #64]	@ (8009ec4 <TIM_Base_SetConfig+0x12c>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d003      	beq.n	8009e90 <TIM_Base_SetConfig+0xf8>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a12      	ldr	r2, [pc, #72]	@ (8009ed4 <TIM_Base_SetConfig+0x13c>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d103      	bne.n	8009e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	691a      	ldr	r2, [r3, #16]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d105      	bne.n	8009eb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	f023 0201 	bic.w	r2, r3, #1
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	611a      	str	r2, [r3, #16]
  }
}
 8009eb6:	bf00      	nop
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	40010000 	.word	0x40010000
 8009ec8:	40000400 	.word	0x40000400
 8009ecc:	40000800 	.word	0x40000800
 8009ed0:	40000c00 	.word	0x40000c00
 8009ed4:	40010400 	.word	0x40010400
 8009ed8:	40014000 	.word	0x40014000
 8009edc:	40014400 	.word	0x40014400
 8009ee0:	40014800 	.word	0x40014800
 8009ee4:	40001800 	.word	0x40001800
 8009ee8:	40001c00 	.word	0x40001c00
 8009eec:	40002000 	.word	0x40002000

08009ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6a1b      	ldr	r3, [r3, #32]
 8009f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	f023 0201 	bic.w	r2, r3, #1
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	011b      	lsls	r3, r3, #4
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f023 030a 	bic.w	r3, r3, #10
 8009f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	621a      	str	r2, [r3, #32]
}
 8009f42:	bf00      	nop
 8009f44:	371c      	adds	r7, #28
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b087      	sub	sp, #28
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	60f8      	str	r0, [r7, #12]
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6a1b      	ldr	r3, [r3, #32]
 8009f64:	f023 0210 	bic.w	r2, r3, #16
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	031b      	lsls	r3, r3, #12
 8009f7e:	693a      	ldr	r2, [r7, #16]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009f8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	011b      	lsls	r3, r3, #4
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	693a      	ldr	r2, [r7, #16]
 8009f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	621a      	str	r2, [r3, #32]
}
 8009fa2:	bf00      	nop
 8009fa4:	371c      	adds	r7, #28
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fae:	b480      	push	{r7}
 8009fb0:	b085      	sub	sp, #20
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	f043 0307 	orr.w	r3, r3, #7
 8009fd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	609a      	str	r2, [r3, #8]
}
 8009fd8:	bf00      	nop
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
 8009ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ffe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	021a      	lsls	r2, r3, #8
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	431a      	orrs	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	4313      	orrs	r3, r2
 800a010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	609a      	str	r2, [r3, #8]
}
 800a018:	bf00      	nop
 800a01a:	371c      	adds	r7, #28
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a034:	2b01      	cmp	r3, #1
 800a036:	d101      	bne.n	800a03c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a038:	2302      	movs	r3, #2
 800a03a:	e05a      	b.n	800a0f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2202      	movs	r2, #2
 800a048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a21      	ldr	r2, [pc, #132]	@ (800a100 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d022      	beq.n	800a0c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a088:	d01d      	beq.n	800a0c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a1d      	ldr	r2, [pc, #116]	@ (800a104 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d018      	beq.n	800a0c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a1b      	ldr	r2, [pc, #108]	@ (800a108 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d013      	beq.n	800a0c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a1a      	ldr	r2, [pc, #104]	@ (800a10c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d00e      	beq.n	800a0c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a18      	ldr	r2, [pc, #96]	@ (800a110 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d009      	beq.n	800a0c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a17      	ldr	r2, [pc, #92]	@ (800a114 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d004      	beq.n	800a0c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a15      	ldr	r2, [pc, #84]	@ (800a118 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d10c      	bne.n	800a0e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	40010000 	.word	0x40010000
 800a104:	40000400 	.word	0x40000400
 800a108:	40000800 	.word	0x40000800
 800a10c:	40000c00 	.word	0x40000c00
 800a110:	40010400 	.word	0x40010400
 800a114:	40014000 	.word	0x40014000
 800a118:	40001800 	.word	0x40001800

0800a11c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e042      	b.n	800a1dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d106      	bne.n	800a170 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7fb fb00 	bl	8005770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2224      	movs	r2, #36	@ 0x24
 800a174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68da      	ldr	r2, [r3, #12]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a186:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fde9 	bl	800ad60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	691a      	ldr	r2, [r3, #16]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a19c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	695a      	ldr	r2, [r3, #20]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a1ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68da      	ldr	r2, [r3, #12]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a1bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2220      	movs	r2, #32
 800a1c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2220      	movs	r2, #32
 800a1d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b08a      	sub	sp, #40	@ 0x28
 800a1e8:	af02      	add	r7, sp, #8
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	603b      	str	r3, [r7, #0]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	2b20      	cmp	r3, #32
 800a202:	d175      	bne.n	800a2f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d002      	beq.n	800a210 <HAL_UART_Transmit+0x2c>
 800a20a:	88fb      	ldrh	r3, [r7, #6]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e06e      	b.n	800a2f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2221      	movs	r2, #33	@ 0x21
 800a21e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a222:	f7fb fb99 	bl	8005958 <HAL_GetTick>
 800a226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	88fa      	ldrh	r2, [r7, #6]
 800a22c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	88fa      	ldrh	r2, [r7, #6]
 800a232:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a23c:	d108      	bne.n	800a250 <HAL_UART_Transmit+0x6c>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d104      	bne.n	800a250 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a246:	2300      	movs	r3, #0
 800a248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	61bb      	str	r3, [r7, #24]
 800a24e:	e003      	b.n	800a258 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a254:	2300      	movs	r3, #0
 800a256:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a258:	e02e      	b.n	800a2b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2200      	movs	r2, #0
 800a262:	2180      	movs	r1, #128	@ 0x80
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 fb4b 	bl	800a900 <UART_WaitOnFlagUntilTimeout>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d005      	beq.n	800a27c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2220      	movs	r2, #32
 800a274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e03a      	b.n	800a2f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10b      	bne.n	800a29a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	881b      	ldrh	r3, [r3, #0]
 800a286:	461a      	mov	r2, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a290:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	3302      	adds	r3, #2
 800a296:	61bb      	str	r3, [r7, #24]
 800a298:	e007      	b.n	800a2aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	781a      	ldrb	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1cb      	bne.n	800a25a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2140      	movs	r1, #64	@ 0x40
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f000 fb17 	bl	800a900 <UART_WaitOnFlagUntilTimeout>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d005      	beq.n	800a2e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2220      	movs	r2, #32
 800a2dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	e006      	b.n	800a2f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2220      	movs	r2, #32
 800a2e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	e000      	b.n	800a2f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a2f0:	2302      	movs	r3, #2
  }
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3720      	adds	r7, #32
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b085      	sub	sp, #20
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	60f8      	str	r0, [r7, #12]
 800a302:	60b9      	str	r1, [r7, #8]
 800a304:	4613      	mov	r3, r2
 800a306:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b20      	cmp	r3, #32
 800a312:	d121      	bne.n	800a358 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d002      	beq.n	800a320 <HAL_UART_Transmit_IT+0x26>
 800a31a:	88fb      	ldrh	r3, [r7, #6]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e01a      	b.n	800a35a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	88fa      	ldrh	r2, [r7, #6]
 800a32e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	88fa      	ldrh	r2, [r7, #6]
 800a334:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2221      	movs	r2, #33	@ 0x21
 800a340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68da      	ldr	r2, [r3, #12]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a352:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	e000      	b.n	800a35a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a358:	2302      	movs	r3, #2
  }
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3714      	adds	r7, #20
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b084      	sub	sp, #16
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	60f8      	str	r0, [r7, #12]
 800a36e:	60b9      	str	r1, [r7, #8]
 800a370:	4613      	mov	r3, r2
 800a372:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b20      	cmp	r3, #32
 800a37e:	d112      	bne.n	800a3a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d002      	beq.n	800a38c <HAL_UART_Receive_IT+0x26>
 800a386:	88fb      	ldrh	r3, [r7, #6]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d101      	bne.n	800a390 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e00b      	b.n	800a3a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a396:	88fb      	ldrh	r3, [r7, #6]
 800a398:	461a      	mov	r2, r3
 800a39a:	68b9      	ldr	r1, [r7, #8]
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f000 fb08 	bl	800a9b2 <UART_Start_Receive_IT>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	e000      	b.n	800a3a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a3a6:	2302      	movs	r3, #2
  }
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b0ba      	sub	sp, #232	@ 0xe8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a3e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3e6:	f003 030f 	and.w	r3, r3, #15
 800a3ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a3ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10f      	bne.n	800a416 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3fa:	f003 0320 	and.w	r3, r3, #32
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d009      	beq.n	800a416 <HAL_UART_IRQHandler+0x66>
 800a402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a406:	f003 0320 	and.w	r3, r3, #32
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d003      	beq.n	800a416 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fbe8 	bl	800abe4 <UART_Receive_IT>
      return;
 800a414:	e25b      	b.n	800a8ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f000 80de 	beq.w	800a5dc <HAL_UART_IRQHandler+0x22c>
 800a420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a424:	f003 0301 	and.w	r3, r3, #1
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d106      	bne.n	800a43a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a42c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a430:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a434:	2b00      	cmp	r3, #0
 800a436:	f000 80d1 	beq.w	800a5dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a43a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00b      	beq.n	800a45e <HAL_UART_IRQHandler+0xae>
 800a446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a44a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d005      	beq.n	800a45e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a456:	f043 0201 	orr.w	r2, r3, #1
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a462:	f003 0304 	and.w	r3, r3, #4
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00b      	beq.n	800a482 <HAL_UART_IRQHandler+0xd2>
 800a46a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	2b00      	cmp	r3, #0
 800a474:	d005      	beq.n	800a482 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a47a:	f043 0202 	orr.w	r2, r3, #2
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a486:	f003 0302 	and.w	r3, r3, #2
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00b      	beq.n	800a4a6 <HAL_UART_IRQHandler+0xf6>
 800a48e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b00      	cmp	r3, #0
 800a498:	d005      	beq.n	800a4a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a49e:	f043 0204 	orr.w	r2, r3, #4
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4aa:	f003 0308 	and.w	r3, r3, #8
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d011      	beq.n	800a4d6 <HAL_UART_IRQHandler+0x126>
 800a4b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4b6:	f003 0320 	and.w	r3, r3, #32
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d105      	bne.n	800a4ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a4be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4c2:	f003 0301 	and.w	r3, r3, #1
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d005      	beq.n	800a4d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4ce:	f043 0208 	orr.w	r2, r3, #8
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f000 81f2 	beq.w	800a8c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4e4:	f003 0320 	and.w	r3, r3, #32
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d008      	beq.n	800a4fe <HAL_UART_IRQHandler+0x14e>
 800a4ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4f0:	f003 0320 	and.w	r3, r3, #32
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d002      	beq.n	800a4fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fb73 	bl	800abe4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	695b      	ldr	r3, [r3, #20]
 800a504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a508:	2b40      	cmp	r3, #64	@ 0x40
 800a50a:	bf0c      	ite	eq
 800a50c:	2301      	moveq	r3, #1
 800a50e:	2300      	movne	r3, #0
 800a510:	b2db      	uxtb	r3, r3
 800a512:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a51a:	f003 0308 	and.w	r3, r3, #8
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d103      	bne.n	800a52a <HAL_UART_IRQHandler+0x17a>
 800a522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a526:	2b00      	cmp	r3, #0
 800a528:	d04f      	beq.n	800a5ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fa7b 	bl	800aa26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a53a:	2b40      	cmp	r3, #64	@ 0x40
 800a53c:	d141      	bne.n	800a5c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3314      	adds	r3, #20
 800a544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a548:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a54c:	e853 3f00 	ldrex	r3, [r3]
 800a550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a554:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a558:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a55c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3314      	adds	r3, #20
 800a566:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a56a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a56e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a572:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a576:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a57a:	e841 2300 	strex	r3, r2, [r1]
 800a57e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a582:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1d9      	bne.n	800a53e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d013      	beq.n	800a5ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a596:	4a7e      	ldr	r2, [pc, #504]	@ (800a790 <HAL_UART_IRQHandler+0x3e0>)
 800a598:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fc f8c3 	bl	800672a <HAL_DMA_Abort_IT>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d016      	beq.n	800a5d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5b8:	e00e      	b.n	800a5d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f98a 	bl	800a8d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c0:	e00a      	b.n	800a5d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f986 	bl	800a8d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c8:	e006      	b.n	800a5d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f982 	bl	800a8d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a5d6:	e175      	b.n	800a8c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5d8:	bf00      	nop
    return;
 800a5da:	e173      	b.n	800a8c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	f040 814f 	bne.w	800a884 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a5e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5ea:	f003 0310 	and.w	r3, r3, #16
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f000 8148 	beq.w	800a884 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a5f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5f8:	f003 0310 	and.w	r3, r3, #16
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 8141 	beq.w	800a884 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a602:	2300      	movs	r3, #0
 800a604:	60bb      	str	r3, [r7, #8]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60bb      	str	r3, [r7, #8]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	60bb      	str	r3, [r7, #8]
 800a616:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a622:	2b40      	cmp	r3, #64	@ 0x40
 800a624:	f040 80b6 	bne.w	800a794 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a634:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f000 8145 	beq.w	800a8c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a646:	429a      	cmp	r2, r3
 800a648:	f080 813e 	bcs.w	800a8c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a652:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a658:	69db      	ldr	r3, [r3, #28]
 800a65a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a65e:	f000 8088 	beq.w	800a772 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	330c      	adds	r3, #12
 800a668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a670:	e853 3f00 	ldrex	r3, [r3]
 800a674:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a678:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a67c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a680:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	330c      	adds	r3, #12
 800a68a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a68e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a692:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a69a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a69e:	e841 2300 	strex	r3, r2, [r1]
 800a6a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a6a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1d9      	bne.n	800a662 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3314      	adds	r3, #20
 800a6b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6b8:	e853 3f00 	ldrex	r3, [r3]
 800a6bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a6be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a6c0:	f023 0301 	bic.w	r3, r3, #1
 800a6c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3314      	adds	r3, #20
 800a6ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a6d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a6d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a6da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a6de:	e841 2300 	strex	r3, r2, [r1]
 800a6e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a6e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1e1      	bne.n	800a6ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3314      	adds	r3, #20
 800a6f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6f4:	e853 3f00 	ldrex	r3, [r3]
 800a6f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a6fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	3314      	adds	r3, #20
 800a70a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a70e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a710:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a712:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a714:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a716:	e841 2300 	strex	r3, r2, [r1]
 800a71a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a71c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1e3      	bne.n	800a6ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2220      	movs	r2, #32
 800a726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	330c      	adds	r3, #12
 800a736:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a73a:	e853 3f00 	ldrex	r3, [r3]
 800a73e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a740:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a742:	f023 0310 	bic.w	r3, r3, #16
 800a746:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	330c      	adds	r3, #12
 800a750:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a754:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a756:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a758:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a75a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a75c:	e841 2300 	strex	r3, r2, [r1]
 800a760:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a764:	2b00      	cmp	r3, #0
 800a766:	d1e3      	bne.n	800a730 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fb ff6c 	bl	800664a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2202      	movs	r2, #2
 800a776:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a780:	b29b      	uxth	r3, r3
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	b29b      	uxth	r3, r3
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f8ad 	bl	800a8e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a78e:	e09b      	b.n	800a8c8 <HAL_UART_IRQHandler+0x518>
 800a790:	0800aaed 	.word	0x0800aaed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f000 808e 	beq.w	800a8cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a7b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 8089 	beq.w	800a8cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	330c      	adds	r3, #12
 800a7c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c4:	e853 3f00 	ldrex	r3, [r3]
 800a7c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	330c      	adds	r3, #12
 800a7da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a7de:	647a      	str	r2, [r7, #68]	@ 0x44
 800a7e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e3      	bne.n	800a7ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3314      	adds	r3, #20
 800a7f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fc:	e853 3f00 	ldrex	r3, [r3]
 800a800:	623b      	str	r3, [r7, #32]
   return(result);
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	f023 0301 	bic.w	r3, r3, #1
 800a808:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	3314      	adds	r3, #20
 800a812:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a816:	633a      	str	r2, [r7, #48]	@ 0x30
 800a818:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a81c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a81e:	e841 2300 	strex	r3, r2, [r1]
 800a822:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1e3      	bne.n	800a7f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2220      	movs	r2, #32
 800a82e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	330c      	adds	r3, #12
 800a83e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	e853 3f00 	ldrex	r3, [r3]
 800a846:	60fb      	str	r3, [r7, #12]
   return(result);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f023 0310 	bic.w	r3, r3, #16
 800a84e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	330c      	adds	r3, #12
 800a858:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a85c:	61fa      	str	r2, [r7, #28]
 800a85e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a860:	69b9      	ldr	r1, [r7, #24]
 800a862:	69fa      	ldr	r2, [r7, #28]
 800a864:	e841 2300 	strex	r3, r2, [r1]
 800a868:	617b      	str	r3, [r7, #20]
   return(result);
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e3      	bne.n	800a838 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2202      	movs	r2, #2
 800a874:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a876:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a87a:	4619      	mov	r1, r3
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 f833 	bl	800a8e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a882:	e023      	b.n	800a8cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d009      	beq.n	800a8a4 <HAL_UART_IRQHandler+0x4f4>
 800a890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 f939 	bl	800ab14 <UART_Transmit_IT>
    return;
 800a8a2:	e014      	b.n	800a8ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a8a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00e      	beq.n	800a8ce <HAL_UART_IRQHandler+0x51e>
 800a8b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d008      	beq.n	800a8ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 f979 	bl	800abb4 <UART_EndTransmit_IT>
    return;
 800a8c2:	e004      	b.n	800a8ce <HAL_UART_IRQHandler+0x51e>
    return;
 800a8c4:	bf00      	nop
 800a8c6:	e002      	b.n	800a8ce <HAL_UART_IRQHandler+0x51e>
      return;
 800a8c8:	bf00      	nop
 800a8ca:	e000      	b.n	800a8ce <HAL_UART_IRQHandler+0x51e>
      return;
 800a8cc:	bf00      	nop
  }
}
 800a8ce:	37e8      	adds	r7, #232	@ 0xe8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a8f4:	bf00      	nop
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	603b      	str	r3, [r7, #0]
 800a90c:	4613      	mov	r3, r2
 800a90e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a910:	e03b      	b.n	800a98a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a912:	6a3b      	ldr	r3, [r7, #32]
 800a914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a918:	d037      	beq.n	800a98a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a91a:	f7fb f81d 	bl	8005958 <HAL_GetTick>
 800a91e:	4602      	mov	r2, r0
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	6a3a      	ldr	r2, [r7, #32]
 800a926:	429a      	cmp	r2, r3
 800a928:	d302      	bcc.n	800a930 <UART_WaitOnFlagUntilTimeout+0x30>
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a930:	2303      	movs	r3, #3
 800a932:	e03a      	b.n	800a9aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	f003 0304 	and.w	r3, r3, #4
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d023      	beq.n	800a98a <UART_WaitOnFlagUntilTimeout+0x8a>
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	2b80      	cmp	r3, #128	@ 0x80
 800a946:	d020      	beq.n	800a98a <UART_WaitOnFlagUntilTimeout+0x8a>
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	2b40      	cmp	r3, #64	@ 0x40
 800a94c:	d01d      	beq.n	800a98a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 0308 	and.w	r3, r3, #8
 800a958:	2b08      	cmp	r3, #8
 800a95a:	d116      	bne.n	800a98a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a95c:	2300      	movs	r3, #0
 800a95e:	617b      	str	r3, [r7, #20]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	617b      	str	r3, [r7, #20]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	617b      	str	r3, [r7, #20]
 800a970:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f000 f857 	bl	800aa26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2208      	movs	r2, #8
 800a97c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e00f      	b.n	800a9aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	4013      	ands	r3, r2
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	429a      	cmp	r2, r3
 800a998:	bf0c      	ite	eq
 800a99a:	2301      	moveq	r3, #1
 800a99c:	2300      	movne	r3, #0
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	79fb      	ldrb	r3, [r7, #7]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d0b4      	beq.n	800a912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b085      	sub	sp, #20
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	60f8      	str	r0, [r7, #12]
 800a9ba:	60b9      	str	r1, [r7, #8]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	88fa      	ldrh	r2, [r7, #6]
 800a9ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	88fa      	ldrh	r2, [r7, #6]
 800a9d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2222      	movs	r2, #34	@ 0x22
 800a9dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d007      	beq.n	800a9f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	68da      	ldr	r2, [r3, #12]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a9f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	695a      	ldr	r2, [r3, #20]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f042 0201 	orr.w	r2, r2, #1
 800aa06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68da      	ldr	r2, [r3, #12]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f042 0220 	orr.w	r2, r2, #32
 800aa16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b095      	sub	sp, #84	@ 0x54
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	330c      	adds	r3, #12
 800aa34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa38:	e853 3f00 	ldrex	r3, [r3]
 800aa3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	330c      	adds	r3, #12
 800aa4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa4e:	643a      	str	r2, [r7, #64]	@ 0x40
 800aa50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa56:	e841 2300 	strex	r3, r2, [r1]
 800aa5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1e5      	bne.n	800aa2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3314      	adds	r3, #20
 800aa68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	e853 3f00 	ldrex	r3, [r3]
 800aa70:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	f023 0301 	bic.w	r3, r3, #1
 800aa78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3314      	adds	r3, #20
 800aa80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa8a:	e841 2300 	strex	r3, r2, [r1]
 800aa8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d1e5      	bne.n	800aa62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d119      	bne.n	800aad2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	330c      	adds	r3, #12
 800aaa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	60bb      	str	r3, [r7, #8]
   return(result);
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	f023 0310 	bic.w	r3, r3, #16
 800aab4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	330c      	adds	r3, #12
 800aabc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aabe:	61ba      	str	r2, [r7, #24]
 800aac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac2:	6979      	ldr	r1, [r7, #20]
 800aac4:	69ba      	ldr	r2, [r7, #24]
 800aac6:	e841 2300 	strex	r3, r2, [r1]
 800aaca:	613b      	str	r3, [r7, #16]
   return(result);
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1e5      	bne.n	800aa9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2220      	movs	r2, #32
 800aad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800aae0:	bf00      	nop
 800aae2:	3754      	adds	r7, #84	@ 0x54
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7ff fee4 	bl	800a8d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab0c:	bf00      	nop
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b21      	cmp	r3, #33	@ 0x21
 800ab26:	d13e      	bne.n	800aba6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab30:	d114      	bne.n	800ab5c <UART_Transmit_IT+0x48>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d110      	bne.n	800ab5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a1b      	ldr	r3, [r3, #32]
 800ab3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	881b      	ldrh	r3, [r3, #0]
 800ab44:	461a      	mov	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	1c9a      	adds	r2, r3, #2
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	621a      	str	r2, [r3, #32]
 800ab5a:	e008      	b.n	800ab6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a1b      	ldr	r3, [r3, #32]
 800ab60:	1c59      	adds	r1, r3, #1
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	6211      	str	r1, [r2, #32]
 800ab66:	781a      	ldrb	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	3b01      	subs	r3, #1
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10f      	bne.n	800aba2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68da      	ldr	r2, [r3, #12]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ab90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68da      	ldr	r2, [r3, #12]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aba0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	e000      	b.n	800aba8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aba6:	2302      	movs	r3, #2
  }
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3714      	adds	r7, #20
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68da      	ldr	r2, [r3, #12]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800abca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2220      	movs	r2, #32
 800abd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7f7 f8ed 	bl	8001db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b08c      	sub	sp, #48	@ 0x30
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b22      	cmp	r3, #34	@ 0x22
 800abf6:	f040 80ae 	bne.w	800ad56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac02:	d117      	bne.n	800ac34 <UART_Receive_IT+0x50>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d113      	bne.n	800ac34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac2c:	1c9a      	adds	r2, r3, #2
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	629a      	str	r2, [r3, #40]	@ 0x28
 800ac32:	e026      	b.n	800ac82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac46:	d007      	beq.n	800ac58 <UART_Receive_IT+0x74>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10a      	bne.n	800ac66 <UART_Receive_IT+0x82>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d106      	bne.n	800ac66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	b2da      	uxtb	r2, r3
 800ac60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac62:	701a      	strb	r2, [r3, #0]
 800ac64:	e008      	b.n	800ac78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac7c:	1c5a      	adds	r2, r3, #1
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	4619      	mov	r1, r3
 800ac90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d15d      	bne.n	800ad52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68da      	ldr	r2, [r3, #12]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f022 0220 	bic.w	r2, r2, #32
 800aca4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68da      	ldr	r2, [r3, #12]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800acb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	695a      	ldr	r2, [r3, #20]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f022 0201 	bic.w	r2, r2, #1
 800acc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2220      	movs	r2, #32
 800acca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d135      	bne.n	800ad48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	330c      	adds	r3, #12
 800ace8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	e853 3f00 	ldrex	r3, [r3]
 800acf0:	613b      	str	r3, [r7, #16]
   return(result);
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	f023 0310 	bic.w	r3, r3, #16
 800acf8:	627b      	str	r3, [r7, #36]	@ 0x24
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	330c      	adds	r3, #12
 800ad00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad02:	623a      	str	r2, [r7, #32]
 800ad04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad06:	69f9      	ldr	r1, [r7, #28]
 800ad08:	6a3a      	ldr	r2, [r7, #32]
 800ad0a:	e841 2300 	strex	r3, r2, [r1]
 800ad0e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d1e5      	bne.n	800ace2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0310 	and.w	r3, r3, #16
 800ad20:	2b10      	cmp	r3, #16
 800ad22:	d10a      	bne.n	800ad3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad24:	2300      	movs	r3, #0
 800ad26:	60fb      	str	r3, [r7, #12]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	60fb      	str	r3, [r7, #12]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	60fb      	str	r3, [r7, #12]
 800ad38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ad3e:	4619      	mov	r1, r3
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7ff fdd1 	bl	800a8e8 <HAL_UARTEx_RxEventCallback>
 800ad46:	e002      	b.n	800ad4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7f7 faaf 	bl	80022ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	e002      	b.n	800ad58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	e000      	b.n	800ad58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ad56:	2302      	movs	r3, #2
  }
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3730      	adds	r7, #48	@ 0x30
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad64:	b0c0      	sub	sp, #256	@ 0x100
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ad78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad7c:	68d9      	ldr	r1, [r3, #12]
 800ad7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	ea40 0301 	orr.w	r3, r0, r1
 800ad88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ad8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad8e:	689a      	ldr	r2, [r3, #8]
 800ad90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	431a      	orrs	r2, r3
 800ad98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	431a      	orrs	r2, r3
 800ada0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ada4:	69db      	ldr	r3, [r3, #28]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800adac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800adb8:	f021 010c 	bic.w	r1, r1, #12
 800adbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800adc6:	430b      	orrs	r3, r1
 800adc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800adca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800add6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adda:	6999      	ldr	r1, [r3, #24]
 800addc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	ea40 0301 	orr.w	r3, r0, r1
 800ade6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ade8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	4b8f      	ldr	r3, [pc, #572]	@ (800b02c <UART_SetConfig+0x2cc>)
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d005      	beq.n	800ae00 <UART_SetConfig+0xa0>
 800adf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	4b8d      	ldr	r3, [pc, #564]	@ (800b030 <UART_SetConfig+0x2d0>)
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d104      	bne.n	800ae0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ae00:	f7fe fce8 	bl	80097d4 <HAL_RCC_GetPCLK2Freq>
 800ae04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ae08:	e003      	b.n	800ae12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ae0a:	f7fe fccf 	bl	80097ac <HAL_RCC_GetPCLK1Freq>
 800ae0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae16:	69db      	ldr	r3, [r3, #28]
 800ae18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae1c:	f040 810c 	bne.w	800b038 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ae20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae24:	2200      	movs	r2, #0
 800ae26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ae2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ae2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ae32:	4622      	mov	r2, r4
 800ae34:	462b      	mov	r3, r5
 800ae36:	1891      	adds	r1, r2, r2
 800ae38:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ae3a:	415b      	adcs	r3, r3
 800ae3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ae42:	4621      	mov	r1, r4
 800ae44:	eb12 0801 	adds.w	r8, r2, r1
 800ae48:	4629      	mov	r1, r5
 800ae4a:	eb43 0901 	adc.w	r9, r3, r1
 800ae4e:	f04f 0200 	mov.w	r2, #0
 800ae52:	f04f 0300 	mov.w	r3, #0
 800ae56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ae5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ae5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ae62:	4690      	mov	r8, r2
 800ae64:	4699      	mov	r9, r3
 800ae66:	4623      	mov	r3, r4
 800ae68:	eb18 0303 	adds.w	r3, r8, r3
 800ae6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ae70:	462b      	mov	r3, r5
 800ae72:	eb49 0303 	adc.w	r3, r9, r3
 800ae76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ae7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ae86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ae8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ae8e:	460b      	mov	r3, r1
 800ae90:	18db      	adds	r3, r3, r3
 800ae92:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae94:	4613      	mov	r3, r2
 800ae96:	eb42 0303 	adc.w	r3, r2, r3
 800ae9a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800aea0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800aea4:	f7f5 ff00 	bl	8000ca8 <__aeabi_uldivmod>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4b61      	ldr	r3, [pc, #388]	@ (800b034 <UART_SetConfig+0x2d4>)
 800aeae:	fba3 2302 	umull	r2, r3, r3, r2
 800aeb2:	095b      	lsrs	r3, r3, #5
 800aeb4:	011c      	lsls	r4, r3, #4
 800aeb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aeba:	2200      	movs	r2, #0
 800aebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aec0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800aec4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800aec8:	4642      	mov	r2, r8
 800aeca:	464b      	mov	r3, r9
 800aecc:	1891      	adds	r1, r2, r2
 800aece:	64b9      	str	r1, [r7, #72]	@ 0x48
 800aed0:	415b      	adcs	r3, r3
 800aed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aed4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800aed8:	4641      	mov	r1, r8
 800aeda:	eb12 0a01 	adds.w	sl, r2, r1
 800aede:	4649      	mov	r1, r9
 800aee0:	eb43 0b01 	adc.w	fp, r3, r1
 800aee4:	f04f 0200 	mov.w	r2, #0
 800aee8:	f04f 0300 	mov.w	r3, #0
 800aeec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aef0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aef8:	4692      	mov	sl, r2
 800aefa:	469b      	mov	fp, r3
 800aefc:	4643      	mov	r3, r8
 800aefe:	eb1a 0303 	adds.w	r3, sl, r3
 800af02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800af06:	464b      	mov	r3, r9
 800af08:	eb4b 0303 	adc.w	r3, fp, r3
 800af0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800af10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800af1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800af20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800af24:	460b      	mov	r3, r1
 800af26:	18db      	adds	r3, r3, r3
 800af28:	643b      	str	r3, [r7, #64]	@ 0x40
 800af2a:	4613      	mov	r3, r2
 800af2c:	eb42 0303 	adc.w	r3, r2, r3
 800af30:	647b      	str	r3, [r7, #68]	@ 0x44
 800af32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800af36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800af3a:	f7f5 feb5 	bl	8000ca8 <__aeabi_uldivmod>
 800af3e:	4602      	mov	r2, r0
 800af40:	460b      	mov	r3, r1
 800af42:	4611      	mov	r1, r2
 800af44:	4b3b      	ldr	r3, [pc, #236]	@ (800b034 <UART_SetConfig+0x2d4>)
 800af46:	fba3 2301 	umull	r2, r3, r3, r1
 800af4a:	095b      	lsrs	r3, r3, #5
 800af4c:	2264      	movs	r2, #100	@ 0x64
 800af4e:	fb02 f303 	mul.w	r3, r2, r3
 800af52:	1acb      	subs	r3, r1, r3
 800af54:	00db      	lsls	r3, r3, #3
 800af56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800af5a:	4b36      	ldr	r3, [pc, #216]	@ (800b034 <UART_SetConfig+0x2d4>)
 800af5c:	fba3 2302 	umull	r2, r3, r3, r2
 800af60:	095b      	lsrs	r3, r3, #5
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800af68:	441c      	add	r4, r3
 800af6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af6e:	2200      	movs	r2, #0
 800af70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800af74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800af78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800af7c:	4642      	mov	r2, r8
 800af7e:	464b      	mov	r3, r9
 800af80:	1891      	adds	r1, r2, r2
 800af82:	63b9      	str	r1, [r7, #56]	@ 0x38
 800af84:	415b      	adcs	r3, r3
 800af86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800af8c:	4641      	mov	r1, r8
 800af8e:	1851      	adds	r1, r2, r1
 800af90:	6339      	str	r1, [r7, #48]	@ 0x30
 800af92:	4649      	mov	r1, r9
 800af94:	414b      	adcs	r3, r1
 800af96:	637b      	str	r3, [r7, #52]	@ 0x34
 800af98:	f04f 0200 	mov.w	r2, #0
 800af9c:	f04f 0300 	mov.w	r3, #0
 800afa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800afa4:	4659      	mov	r1, fp
 800afa6:	00cb      	lsls	r3, r1, #3
 800afa8:	4651      	mov	r1, sl
 800afaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800afae:	4651      	mov	r1, sl
 800afb0:	00ca      	lsls	r2, r1, #3
 800afb2:	4610      	mov	r0, r2
 800afb4:	4619      	mov	r1, r3
 800afb6:	4603      	mov	r3, r0
 800afb8:	4642      	mov	r2, r8
 800afba:	189b      	adds	r3, r3, r2
 800afbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800afc0:	464b      	mov	r3, r9
 800afc2:	460a      	mov	r2, r1
 800afc4:	eb42 0303 	adc.w	r3, r2, r3
 800afc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800afcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800afd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800afdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800afe0:	460b      	mov	r3, r1
 800afe2:	18db      	adds	r3, r3, r3
 800afe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afe6:	4613      	mov	r3, r2
 800afe8:	eb42 0303 	adc.w	r3, r2, r3
 800afec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800aff2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800aff6:	f7f5 fe57 	bl	8000ca8 <__aeabi_uldivmod>
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	4b0d      	ldr	r3, [pc, #52]	@ (800b034 <UART_SetConfig+0x2d4>)
 800b000:	fba3 1302 	umull	r1, r3, r3, r2
 800b004:	095b      	lsrs	r3, r3, #5
 800b006:	2164      	movs	r1, #100	@ 0x64
 800b008:	fb01 f303 	mul.w	r3, r1, r3
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	00db      	lsls	r3, r3, #3
 800b010:	3332      	adds	r3, #50	@ 0x32
 800b012:	4a08      	ldr	r2, [pc, #32]	@ (800b034 <UART_SetConfig+0x2d4>)
 800b014:	fba2 2303 	umull	r2, r3, r2, r3
 800b018:	095b      	lsrs	r3, r3, #5
 800b01a:	f003 0207 	and.w	r2, r3, #7
 800b01e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4422      	add	r2, r4
 800b026:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b028:	e106      	b.n	800b238 <UART_SetConfig+0x4d8>
 800b02a:	bf00      	nop
 800b02c:	40011000 	.word	0x40011000
 800b030:	40011400 	.word	0x40011400
 800b034:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b03c:	2200      	movs	r2, #0
 800b03e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b042:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b046:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b04a:	4642      	mov	r2, r8
 800b04c:	464b      	mov	r3, r9
 800b04e:	1891      	adds	r1, r2, r2
 800b050:	6239      	str	r1, [r7, #32]
 800b052:	415b      	adcs	r3, r3
 800b054:	627b      	str	r3, [r7, #36]	@ 0x24
 800b056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b05a:	4641      	mov	r1, r8
 800b05c:	1854      	adds	r4, r2, r1
 800b05e:	4649      	mov	r1, r9
 800b060:	eb43 0501 	adc.w	r5, r3, r1
 800b064:	f04f 0200 	mov.w	r2, #0
 800b068:	f04f 0300 	mov.w	r3, #0
 800b06c:	00eb      	lsls	r3, r5, #3
 800b06e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b072:	00e2      	lsls	r2, r4, #3
 800b074:	4614      	mov	r4, r2
 800b076:	461d      	mov	r5, r3
 800b078:	4643      	mov	r3, r8
 800b07a:	18e3      	adds	r3, r4, r3
 800b07c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b080:	464b      	mov	r3, r9
 800b082:	eb45 0303 	adc.w	r3, r5, r3
 800b086:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b08a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b096:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b09a:	f04f 0200 	mov.w	r2, #0
 800b09e:	f04f 0300 	mov.w	r3, #0
 800b0a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	008b      	lsls	r3, r1, #2
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	008a      	lsls	r2, r1, #2
 800b0b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b0b8:	f7f5 fdf6 	bl	8000ca8 <__aeabi_uldivmod>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	4b60      	ldr	r3, [pc, #384]	@ (800b244 <UART_SetConfig+0x4e4>)
 800b0c2:	fba3 2302 	umull	r2, r3, r3, r2
 800b0c6:	095b      	lsrs	r3, r3, #5
 800b0c8:	011c      	lsls	r4, r3, #4
 800b0ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b0d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b0d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b0dc:	4642      	mov	r2, r8
 800b0de:	464b      	mov	r3, r9
 800b0e0:	1891      	adds	r1, r2, r2
 800b0e2:	61b9      	str	r1, [r7, #24]
 800b0e4:	415b      	adcs	r3, r3
 800b0e6:	61fb      	str	r3, [r7, #28]
 800b0e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b0ec:	4641      	mov	r1, r8
 800b0ee:	1851      	adds	r1, r2, r1
 800b0f0:	6139      	str	r1, [r7, #16]
 800b0f2:	4649      	mov	r1, r9
 800b0f4:	414b      	adcs	r3, r1
 800b0f6:	617b      	str	r3, [r7, #20]
 800b0f8:	f04f 0200 	mov.w	r2, #0
 800b0fc:	f04f 0300 	mov.w	r3, #0
 800b100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b104:	4659      	mov	r1, fp
 800b106:	00cb      	lsls	r3, r1, #3
 800b108:	4651      	mov	r1, sl
 800b10a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b10e:	4651      	mov	r1, sl
 800b110:	00ca      	lsls	r2, r1, #3
 800b112:	4610      	mov	r0, r2
 800b114:	4619      	mov	r1, r3
 800b116:	4603      	mov	r3, r0
 800b118:	4642      	mov	r2, r8
 800b11a:	189b      	adds	r3, r3, r2
 800b11c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b120:	464b      	mov	r3, r9
 800b122:	460a      	mov	r2, r1
 800b124:	eb42 0303 	adc.w	r3, r2, r3
 800b128:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b12c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b136:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b138:	f04f 0200 	mov.w	r2, #0
 800b13c:	f04f 0300 	mov.w	r3, #0
 800b140:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b144:	4649      	mov	r1, r9
 800b146:	008b      	lsls	r3, r1, #2
 800b148:	4641      	mov	r1, r8
 800b14a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b14e:	4641      	mov	r1, r8
 800b150:	008a      	lsls	r2, r1, #2
 800b152:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b156:	f7f5 fda7 	bl	8000ca8 <__aeabi_uldivmod>
 800b15a:	4602      	mov	r2, r0
 800b15c:	460b      	mov	r3, r1
 800b15e:	4611      	mov	r1, r2
 800b160:	4b38      	ldr	r3, [pc, #224]	@ (800b244 <UART_SetConfig+0x4e4>)
 800b162:	fba3 2301 	umull	r2, r3, r3, r1
 800b166:	095b      	lsrs	r3, r3, #5
 800b168:	2264      	movs	r2, #100	@ 0x64
 800b16a:	fb02 f303 	mul.w	r3, r2, r3
 800b16e:	1acb      	subs	r3, r1, r3
 800b170:	011b      	lsls	r3, r3, #4
 800b172:	3332      	adds	r3, #50	@ 0x32
 800b174:	4a33      	ldr	r2, [pc, #204]	@ (800b244 <UART_SetConfig+0x4e4>)
 800b176:	fba2 2303 	umull	r2, r3, r2, r3
 800b17a:	095b      	lsrs	r3, r3, #5
 800b17c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b180:	441c      	add	r4, r3
 800b182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b186:	2200      	movs	r2, #0
 800b188:	673b      	str	r3, [r7, #112]	@ 0x70
 800b18a:	677a      	str	r2, [r7, #116]	@ 0x74
 800b18c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b190:	4642      	mov	r2, r8
 800b192:	464b      	mov	r3, r9
 800b194:	1891      	adds	r1, r2, r2
 800b196:	60b9      	str	r1, [r7, #8]
 800b198:	415b      	adcs	r3, r3
 800b19a:	60fb      	str	r3, [r7, #12]
 800b19c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b1a0:	4641      	mov	r1, r8
 800b1a2:	1851      	adds	r1, r2, r1
 800b1a4:	6039      	str	r1, [r7, #0]
 800b1a6:	4649      	mov	r1, r9
 800b1a8:	414b      	adcs	r3, r1
 800b1aa:	607b      	str	r3, [r7, #4]
 800b1ac:	f04f 0200 	mov.w	r2, #0
 800b1b0:	f04f 0300 	mov.w	r3, #0
 800b1b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b1b8:	4659      	mov	r1, fp
 800b1ba:	00cb      	lsls	r3, r1, #3
 800b1bc:	4651      	mov	r1, sl
 800b1be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1c2:	4651      	mov	r1, sl
 800b1c4:	00ca      	lsls	r2, r1, #3
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	4642      	mov	r2, r8
 800b1ce:	189b      	adds	r3, r3, r2
 800b1d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b1d2:	464b      	mov	r3, r9
 800b1d4:	460a      	mov	r2, r1
 800b1d6:	eb42 0303 	adc.w	r3, r2, r3
 800b1da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1e6:	667a      	str	r2, [r7, #100]	@ 0x64
 800b1e8:	f04f 0200 	mov.w	r2, #0
 800b1ec:	f04f 0300 	mov.w	r3, #0
 800b1f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b1f4:	4649      	mov	r1, r9
 800b1f6:	008b      	lsls	r3, r1, #2
 800b1f8:	4641      	mov	r1, r8
 800b1fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1fe:	4641      	mov	r1, r8
 800b200:	008a      	lsls	r2, r1, #2
 800b202:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b206:	f7f5 fd4f 	bl	8000ca8 <__aeabi_uldivmod>
 800b20a:	4602      	mov	r2, r0
 800b20c:	460b      	mov	r3, r1
 800b20e:	4b0d      	ldr	r3, [pc, #52]	@ (800b244 <UART_SetConfig+0x4e4>)
 800b210:	fba3 1302 	umull	r1, r3, r3, r2
 800b214:	095b      	lsrs	r3, r3, #5
 800b216:	2164      	movs	r1, #100	@ 0x64
 800b218:	fb01 f303 	mul.w	r3, r1, r3
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	011b      	lsls	r3, r3, #4
 800b220:	3332      	adds	r3, #50	@ 0x32
 800b222:	4a08      	ldr	r2, [pc, #32]	@ (800b244 <UART_SetConfig+0x4e4>)
 800b224:	fba2 2303 	umull	r2, r3, r2, r3
 800b228:	095b      	lsrs	r3, r3, #5
 800b22a:	f003 020f 	and.w	r2, r3, #15
 800b22e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4422      	add	r2, r4
 800b236:	609a      	str	r2, [r3, #8]
}
 800b238:	bf00      	nop
 800b23a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b23e:	46bd      	mov	sp, r7
 800b240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b244:	51eb851f 	.word	0x51eb851f

0800b248 <__NVIC_SetPriority>:
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	4603      	mov	r3, r0
 800b250:	6039      	str	r1, [r7, #0]
 800b252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	db0a      	blt.n	800b272 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	b2da      	uxtb	r2, r3
 800b260:	490c      	ldr	r1, [pc, #48]	@ (800b294 <__NVIC_SetPriority+0x4c>)
 800b262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b266:	0112      	lsls	r2, r2, #4
 800b268:	b2d2      	uxtb	r2, r2
 800b26a:	440b      	add	r3, r1
 800b26c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b270:	e00a      	b.n	800b288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	b2da      	uxtb	r2, r3
 800b276:	4908      	ldr	r1, [pc, #32]	@ (800b298 <__NVIC_SetPriority+0x50>)
 800b278:	79fb      	ldrb	r3, [r7, #7]
 800b27a:	f003 030f 	and.w	r3, r3, #15
 800b27e:	3b04      	subs	r3, #4
 800b280:	0112      	lsls	r2, r2, #4
 800b282:	b2d2      	uxtb	r2, r2
 800b284:	440b      	add	r3, r1
 800b286:	761a      	strb	r2, [r3, #24]
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	e000e100 	.word	0xe000e100
 800b298:	e000ed00 	.word	0xe000ed00

0800b29c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	f06f 0004 	mvn.w	r0, #4
 800b2a6:	f7ff ffcf 	bl	800b248 <__NVIC_SetPriority>
#endif
}
 800b2aa:	bf00      	nop
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2b6:	f3ef 8305 	mrs	r3, IPSR
 800b2ba:	603b      	str	r3, [r7, #0]
  return(result);
 800b2bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d003      	beq.n	800b2ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b2c2:	f06f 0305 	mvn.w	r3, #5
 800b2c6:	607b      	str	r3, [r7, #4]
 800b2c8:	e00c      	b.n	800b2e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b2ca:	4b0a      	ldr	r3, [pc, #40]	@ (800b2f4 <osKernelInitialize+0x44>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d105      	bne.n	800b2de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b2d2:	4b08      	ldr	r3, [pc, #32]	@ (800b2f4 <osKernelInitialize+0x44>)
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	607b      	str	r3, [r7, #4]
 800b2dc:	e002      	b.n	800b2e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b2de:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b2e4:	687b      	ldr	r3, [r7, #4]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	20000bd4 	.word	0x20000bd4

0800b2f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2fe:	f3ef 8305 	mrs	r3, IPSR
 800b302:	603b      	str	r3, [r7, #0]
  return(result);
 800b304:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b30a:	f06f 0305 	mvn.w	r3, #5
 800b30e:	607b      	str	r3, [r7, #4]
 800b310:	e010      	b.n	800b334 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b312:	4b0b      	ldr	r3, [pc, #44]	@ (800b340 <osKernelStart+0x48>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d109      	bne.n	800b32e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b31a:	f7ff ffbf 	bl	800b29c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b31e:	4b08      	ldr	r3, [pc, #32]	@ (800b340 <osKernelStart+0x48>)
 800b320:	2202      	movs	r2, #2
 800b322:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b324:	f001 fe90 	bl	800d048 <vTaskStartScheduler>
      stat = osOK;
 800b328:	2300      	movs	r3, #0
 800b32a:	607b      	str	r3, [r7, #4]
 800b32c:	e002      	b.n	800b334 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b32e:	f04f 33ff 	mov.w	r3, #4294967295
 800b332:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b334:	687b      	ldr	r3, [r7, #4]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	20000bd4 	.word	0x20000bd4

0800b344 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b344:	b580      	push	{r7, lr}
 800b346:	b08e      	sub	sp, #56	@ 0x38
 800b348:	af04      	add	r7, sp, #16
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b350:	2300      	movs	r3, #0
 800b352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b354:	f3ef 8305 	mrs	r3, IPSR
 800b358:	617b      	str	r3, [r7, #20]
  return(result);
 800b35a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d17e      	bne.n	800b45e <osThreadNew+0x11a>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d07b      	beq.n	800b45e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b366:	2380      	movs	r3, #128	@ 0x80
 800b368:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b36a:	2318      	movs	r3, #24
 800b36c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b36e:	2300      	movs	r3, #0
 800b370:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b372:	f04f 33ff 	mov.w	r3, #4294967295
 800b376:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d045      	beq.n	800b40a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d002      	beq.n	800b38c <osThreadNew+0x48>
        name = attr->name;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	699b      	ldr	r3, [r3, #24]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	699b      	ldr	r3, [r3, #24]
 800b398:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d008      	beq.n	800b3b2 <osThreadNew+0x6e>
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	2b38      	cmp	r3, #56	@ 0x38
 800b3a4:	d805      	bhi.n	800b3b2 <osThreadNew+0x6e>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d001      	beq.n	800b3b6 <osThreadNew+0x72>
        return (NULL);
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	e054      	b.n	800b460 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d003      	beq.n	800b3c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	089b      	lsrs	r3, r3, #2
 800b3c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00e      	beq.n	800b3ec <osThreadNew+0xa8>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	2b5b      	cmp	r3, #91	@ 0x5b
 800b3d4:	d90a      	bls.n	800b3ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d006      	beq.n	800b3ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d002      	beq.n	800b3ec <osThreadNew+0xa8>
        mem = 1;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	61bb      	str	r3, [r7, #24]
 800b3ea:	e010      	b.n	800b40e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10c      	bne.n	800b40e <osThreadNew+0xca>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d108      	bne.n	800b40e <osThreadNew+0xca>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d104      	bne.n	800b40e <osThreadNew+0xca>
          mem = 0;
 800b404:	2300      	movs	r3, #0
 800b406:	61bb      	str	r3, [r7, #24]
 800b408:	e001      	b.n	800b40e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d110      	bne.n	800b436 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b41c:	9202      	str	r2, [sp, #8]
 800b41e:	9301      	str	r3, [sp, #4]
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	6a3a      	ldr	r2, [r7, #32]
 800b428:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f001 fc30 	bl	800cc90 <xTaskCreateStatic>
 800b430:	4603      	mov	r3, r0
 800b432:	613b      	str	r3, [r7, #16]
 800b434:	e013      	b.n	800b45e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d110      	bne.n	800b45e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b43c:	6a3b      	ldr	r3, [r7, #32]
 800b43e:	b29a      	uxth	r2, r3
 800b440:	f107 0310 	add.w	r3, r7, #16
 800b444:	9301      	str	r3, [sp, #4]
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f001 fc7e 	bl	800cd50 <xTaskCreate>
 800b454:	4603      	mov	r3, r0
 800b456:	2b01      	cmp	r3, #1
 800b458:	d001      	beq.n	800b45e <osThreadNew+0x11a>
            hTask = NULL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b45e:	693b      	ldr	r3, [r7, #16]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3728      	adds	r7, #40	@ 0x28
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b470:	f3ef 8305 	mrs	r3, IPSR
 800b474:	60bb      	str	r3, [r7, #8]
  return(result);
 800b476:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d003      	beq.n	800b484 <osDelay+0x1c>
    stat = osErrorISR;
 800b47c:	f06f 0305 	mvn.w	r3, #5
 800b480:	60fb      	str	r3, [r7, #12]
 800b482:	e007      	b.n	800b494 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b484:	2300      	movs	r3, #0
 800b486:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f001 fda4 	bl	800cfdc <vTaskDelay>
    }
  }

  return (stat);
 800b494:	68fb      	ldr	r3, [r7, #12]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b088      	sub	sp, #32
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4aa:	f3ef 8305 	mrs	r3, IPSR
 800b4ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800b4b0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d174      	bne.n	800b5a0 <osMutexNew+0x102>
    if (attr != NULL) {
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d003      	beq.n	800b4c4 <osMutexNew+0x26>
      type = attr->attr_bits;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	61bb      	str	r3, [r7, #24]
 800b4c2:	e001      	b.n	800b4c8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	f003 0301 	and.w	r3, r3, #1
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d002      	beq.n	800b4d8 <osMutexNew+0x3a>
      rmtx = 1U;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	617b      	str	r3, [r7, #20]
 800b4d6:	e001      	b.n	800b4dc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	f003 0308 	and.w	r3, r3, #8
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d15c      	bne.n	800b5a0 <osMutexNew+0x102>
      mem = -1;
 800b4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ea:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d015      	beq.n	800b51e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d006      	beq.n	800b508 <osMutexNew+0x6a>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	2b4f      	cmp	r3, #79	@ 0x4f
 800b500:	d902      	bls.n	800b508 <osMutexNew+0x6a>
          mem = 1;
 800b502:	2301      	movs	r3, #1
 800b504:	613b      	str	r3, [r7, #16]
 800b506:	e00c      	b.n	800b522 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d108      	bne.n	800b522 <osMutexNew+0x84>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d104      	bne.n	800b522 <osMutexNew+0x84>
            mem = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	613b      	str	r3, [r7, #16]
 800b51c:	e001      	b.n	800b522 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d112      	bne.n	800b54e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d007      	beq.n	800b53e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	4619      	mov	r1, r3
 800b534:	2004      	movs	r0, #4
 800b536:	f000 fc3e 	bl	800bdb6 <xQueueCreateMutexStatic>
 800b53a:	61f8      	str	r0, [r7, #28]
 800b53c:	e016      	b.n	800b56c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	4619      	mov	r1, r3
 800b544:	2001      	movs	r0, #1
 800b546:	f000 fc36 	bl	800bdb6 <xQueueCreateMutexStatic>
 800b54a:	61f8      	str	r0, [r7, #28]
 800b54c:	e00e      	b.n	800b56c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10b      	bne.n	800b56c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d004      	beq.n	800b564 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b55a:	2004      	movs	r0, #4
 800b55c:	f000 fc13 	bl	800bd86 <xQueueCreateMutex>
 800b560:	61f8      	str	r0, [r7, #28]
 800b562:	e003      	b.n	800b56c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b564:	2001      	movs	r0, #1
 800b566:	f000 fc0e 	bl	800bd86 <xQueueCreateMutex>
 800b56a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00c      	beq.n	800b58c <osMutexNew+0xee>
        if (attr != NULL) {
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d003      	beq.n	800b580 <osMutexNew+0xe2>
          name = attr->name;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	60fb      	str	r3, [r7, #12]
 800b57e:	e001      	b.n	800b584 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b580:	2300      	movs	r3, #0
 800b582:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b584:	68f9      	ldr	r1, [r7, #12]
 800b586:	69f8      	ldr	r0, [r7, #28]
 800b588:	f001 fafa 	bl	800cb80 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d006      	beq.n	800b5a0 <osMutexNew+0x102>
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d003      	beq.n	800b5a0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	f043 0301 	orr.w	r3, r3, #1
 800b59e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b5a0:	69fb      	ldr	r3, [r7, #28]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3720      	adds	r7, #32
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b086      	sub	sp, #24
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f023 0301 	bic.w	r3, r3, #1
 800b5ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f003 0301 	and.w	r3, r3, #1
 800b5c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5c8:	f3ef 8305 	mrs	r3, IPSR
 800b5cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d003      	beq.n	800b5dc <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b5d4:	f06f 0305 	mvn.w	r3, #5
 800b5d8:	617b      	str	r3, [r7, #20]
 800b5da:	e02c      	b.n	800b636 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d103      	bne.n	800b5ea <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b5e2:	f06f 0303 	mvn.w	r3, #3
 800b5e6:	617b      	str	r3, [r7, #20]
 800b5e8:	e025      	b.n	800b636 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d011      	beq.n	800b614 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b5f0:	6839      	ldr	r1, [r7, #0]
 800b5f2:	6938      	ldr	r0, [r7, #16]
 800b5f4:	f000 fc2f 	bl	800be56 <xQueueTakeMutexRecursive>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d01b      	beq.n	800b636 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d003      	beq.n	800b60c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b604:	f06f 0301 	mvn.w	r3, #1
 800b608:	617b      	str	r3, [r7, #20]
 800b60a:	e014      	b.n	800b636 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b60c:	f06f 0302 	mvn.w	r3, #2
 800b610:	617b      	str	r3, [r7, #20]
 800b612:	e010      	b.n	800b636 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6938      	ldr	r0, [r7, #16]
 800b618:	f000 ffd4 	bl	800c5c4 <xQueueSemaphoreTake>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d009      	beq.n	800b636 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d003      	beq.n	800b630 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b628:	f06f 0301 	mvn.w	r3, #1
 800b62c:	617b      	str	r3, [r7, #20]
 800b62e:	e002      	b.n	800b636 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b630:	f06f 0302 	mvn.w	r3, #2
 800b634:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b636:	697b      	ldr	r3, [r7, #20]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3718      	adds	r7, #24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f023 0301 	bic.w	r3, r3, #1
 800b64e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f003 0301 	and.w	r3, r3, #1
 800b656:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b658:	2300      	movs	r3, #0
 800b65a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b65c:	f3ef 8305 	mrs	r3, IPSR
 800b660:	60bb      	str	r3, [r7, #8]
  return(result);
 800b662:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b664:	2b00      	cmp	r3, #0
 800b666:	d003      	beq.n	800b670 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b668:	f06f 0305 	mvn.w	r3, #5
 800b66c:	617b      	str	r3, [r7, #20]
 800b66e:	e01f      	b.n	800b6b0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d103      	bne.n	800b67e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b676:	f06f 0303 	mvn.w	r3, #3
 800b67a:	617b      	str	r3, [r7, #20]
 800b67c:	e018      	b.n	800b6b0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d009      	beq.n	800b698 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b684:	6938      	ldr	r0, [r7, #16]
 800b686:	f000 fbb1 	bl	800bdec <xQueueGiveMutexRecursive>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d00f      	beq.n	800b6b0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b690:	f06f 0302 	mvn.w	r3, #2
 800b694:	617b      	str	r3, [r7, #20]
 800b696:	e00b      	b.n	800b6b0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b698:	2300      	movs	r3, #0
 800b69a:	2200      	movs	r2, #0
 800b69c:	2100      	movs	r1, #0
 800b69e:	6938      	ldr	r0, [r7, #16]
 800b6a0:	f000 fc7e 	bl	800bfa0 <xQueueGenericSend>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d002      	beq.n	800b6b0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b6aa:	f06f 0302 	mvn.w	r3, #2
 800b6ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b6b0:	697b      	ldr	r3, [r7, #20]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3718      	adds	r7, #24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b08a      	sub	sp, #40	@ 0x28
 800b6be:	af02      	add	r7, sp, #8
 800b6c0:	60f8      	str	r0, [r7, #12]
 800b6c2:	60b9      	str	r1, [r7, #8]
 800b6c4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6ca:	f3ef 8305 	mrs	r3, IPSR
 800b6ce:	613b      	str	r3, [r7, #16]
  return(result);
 800b6d0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d175      	bne.n	800b7c2 <osSemaphoreNew+0x108>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d072      	beq.n	800b7c2 <osSemaphoreNew+0x108>
 800b6dc:	68ba      	ldr	r2, [r7, #8]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d86e      	bhi.n	800b7c2 <osSemaphoreNew+0x108>
    mem = -1;
 800b6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d015      	beq.n	800b71c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d006      	beq.n	800b706 <osSemaphoreNew+0x4c>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	2b4f      	cmp	r3, #79	@ 0x4f
 800b6fe:	d902      	bls.n	800b706 <osSemaphoreNew+0x4c>
        mem = 1;
 800b700:	2301      	movs	r3, #1
 800b702:	61bb      	str	r3, [r7, #24]
 800b704:	e00c      	b.n	800b720 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d108      	bne.n	800b720 <osSemaphoreNew+0x66>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d104      	bne.n	800b720 <osSemaphoreNew+0x66>
          mem = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	61bb      	str	r3, [r7, #24]
 800b71a:	e001      	b.n	800b720 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b71c:	2300      	movs	r3, #0
 800b71e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b726:	d04c      	beq.n	800b7c2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d128      	bne.n	800b780 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d10a      	bne.n	800b74a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	2203      	movs	r2, #3
 800b73a:	9200      	str	r2, [sp, #0]
 800b73c:	2200      	movs	r2, #0
 800b73e:	2100      	movs	r1, #0
 800b740:	2001      	movs	r0, #1
 800b742:	f000 fa2b 	bl	800bb9c <xQueueGenericCreateStatic>
 800b746:	61f8      	str	r0, [r7, #28]
 800b748:	e005      	b.n	800b756 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b74a:	2203      	movs	r2, #3
 800b74c:	2100      	movs	r1, #0
 800b74e:	2001      	movs	r0, #1
 800b750:	f000 faa1 	bl	800bc96 <xQueueGenericCreate>
 800b754:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d022      	beq.n	800b7a2 <osSemaphoreNew+0xe8>
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d01f      	beq.n	800b7a2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b762:	2300      	movs	r3, #0
 800b764:	2200      	movs	r2, #0
 800b766:	2100      	movs	r1, #0
 800b768:	69f8      	ldr	r0, [r7, #28]
 800b76a:	f000 fc19 	bl	800bfa0 <xQueueGenericSend>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b01      	cmp	r3, #1
 800b772:	d016      	beq.n	800b7a2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b774:	69f8      	ldr	r0, [r7, #28]
 800b776:	f001 f8b7 	bl	800c8e8 <vQueueDelete>
            hSemaphore = NULL;
 800b77a:	2300      	movs	r3, #0
 800b77c:	61fb      	str	r3, [r7, #28]
 800b77e:	e010      	b.n	800b7a2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d108      	bne.n	800b798 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	461a      	mov	r2, r3
 800b78c:	68b9      	ldr	r1, [r7, #8]
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f000 fb98 	bl	800bec4 <xQueueCreateCountingSemaphoreStatic>
 800b794:	61f8      	str	r0, [r7, #28]
 800b796:	e004      	b.n	800b7a2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b798:	68b9      	ldr	r1, [r7, #8]
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f000 fbcb 	bl	800bf36 <xQueueCreateCountingSemaphore>
 800b7a0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00c      	beq.n	800b7c2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d003      	beq.n	800b7b6 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	617b      	str	r3, [r7, #20]
 800b7b4:	e001      	b.n	800b7ba <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b7ba:	6979      	ldr	r1, [r7, #20]
 800b7bc:	69f8      	ldr	r0, [r7, #28]
 800b7be:	f001 f9df 	bl	800cb80 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b7c2:	69fb      	ldr	r3, [r7, #28]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3720      	adds	r7, #32
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d103      	bne.n	800b7ec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b7e4:	f06f 0303 	mvn.w	r3, #3
 800b7e8:	617b      	str	r3, [r7, #20]
 800b7ea:	e039      	b.n	800b860 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7ec:	f3ef 8305 	mrs	r3, IPSR
 800b7f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d022      	beq.n	800b83e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d003      	beq.n	800b806 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b7fe:	f06f 0303 	mvn.w	r3, #3
 800b802:	617b      	str	r3, [r7, #20]
 800b804:	e02c      	b.n	800b860 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b806:	2300      	movs	r3, #0
 800b808:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b80a:	f107 0308 	add.w	r3, r7, #8
 800b80e:	461a      	mov	r2, r3
 800b810:	2100      	movs	r1, #0
 800b812:	6938      	ldr	r0, [r7, #16]
 800b814:	f000 ffe6 	bl	800c7e4 <xQueueReceiveFromISR>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d003      	beq.n	800b826 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b81e:	f06f 0302 	mvn.w	r3, #2
 800b822:	617b      	str	r3, [r7, #20]
 800b824:	e01c      	b.n	800b860 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d019      	beq.n	800b860 <osSemaphoreAcquire+0x94>
 800b82c:	4b0f      	ldr	r3, [pc, #60]	@ (800b86c <osSemaphoreAcquire+0xa0>)
 800b82e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	e010      	b.n	800b860 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6938      	ldr	r0, [r7, #16]
 800b842:	f000 febf 	bl	800c5c4 <xQueueSemaphoreTake>
 800b846:	4603      	mov	r3, r0
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d009      	beq.n	800b860 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d003      	beq.n	800b85a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b852:	f06f 0301 	mvn.w	r3, #1
 800b856:	617b      	str	r3, [r7, #20]
 800b858:	e002      	b.n	800b860 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b85a:	f06f 0302 	mvn.w	r3, #2
 800b85e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b860:	697b      	ldr	r3, [r7, #20]
}
 800b862:	4618      	mov	r0, r3
 800b864:	3718      	adds	r7, #24
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	e000ed04 	.word	0xe000ed04

0800b870 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d103      	bne.n	800b88e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b886:	f06f 0303 	mvn.w	r3, #3
 800b88a:	617b      	str	r3, [r7, #20]
 800b88c:	e02c      	b.n	800b8e8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b88e:	f3ef 8305 	mrs	r3, IPSR
 800b892:	60fb      	str	r3, [r7, #12]
  return(result);
 800b894:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b896:	2b00      	cmp	r3, #0
 800b898:	d01a      	beq.n	800b8d0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b89a:	2300      	movs	r3, #0
 800b89c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b89e:	f107 0308 	add.w	r3, r7, #8
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	6938      	ldr	r0, [r7, #16]
 800b8a6:	f000 fd1b 	bl	800c2e0 <xQueueGiveFromISR>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d003      	beq.n	800b8b8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b8b0:	f06f 0302 	mvn.w	r3, #2
 800b8b4:	617b      	str	r3, [r7, #20]
 800b8b6:	e017      	b.n	800b8e8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d014      	beq.n	800b8e8 <osSemaphoreRelease+0x78>
 800b8be:	4b0d      	ldr	r3, [pc, #52]	@ (800b8f4 <osSemaphoreRelease+0x84>)
 800b8c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8c4:	601a      	str	r2, [r3, #0]
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	f3bf 8f6f 	isb	sy
 800b8ce:	e00b      	b.n	800b8e8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	6938      	ldr	r0, [r7, #16]
 800b8d8:	f000 fb62 	bl	800bfa0 <xQueueGenericSend>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d002      	beq.n	800b8e8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b8e2:	f06f 0302 	mvn.w	r3, #2
 800b8e6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b8e8:	697b      	ldr	r3, [r7, #20]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3718      	adds	r7, #24
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	e000ed04 	.word	0xe000ed04

0800b8f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	4a07      	ldr	r2, [pc, #28]	@ (800b924 <vApplicationGetIdleTaskMemory+0x2c>)
 800b908:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	4a06      	ldr	r2, [pc, #24]	@ (800b928 <vApplicationGetIdleTaskMemory+0x30>)
 800b90e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2280      	movs	r2, #128	@ 0x80
 800b914:	601a      	str	r2, [r3, #0]
}
 800b916:	bf00      	nop
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
 800b922:	bf00      	nop
 800b924:	20000bd8 	.word	0x20000bd8
 800b928:	20000c34 	.word	0x20000c34

0800b92c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	4a07      	ldr	r2, [pc, #28]	@ (800b958 <vApplicationGetTimerTaskMemory+0x2c>)
 800b93c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	4a06      	ldr	r2, [pc, #24]	@ (800b95c <vApplicationGetTimerTaskMemory+0x30>)
 800b942:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b94a:	601a      	str	r2, [r3, #0]
}
 800b94c:	bf00      	nop
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr
 800b958:	20000e34 	.word	0x20000e34
 800b95c:	20000e90 	.word	0x20000e90

0800b960 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f103 0208 	add.w	r2, r3, #8
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f04f 32ff 	mov.w	r2, #4294967295
 800b978:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f103 0208 	add.w	r2, r3, #8
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f103 0208 	add.w	r2, r3, #8
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2200      	movs	r2, #0
 800b992:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b994:	bf00      	nop
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b9ae:	bf00      	nop
 800b9b0:	370c      	adds	r7, #12
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr

0800b9ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b9ba:	b480      	push	{r7}
 800b9bc:	b085      	sub	sp, #20
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
 800b9c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	689a      	ldr	r2, [r3, #8]
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	683a      	ldr	r2, [r7, #0]
 800b9de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	683a      	ldr	r2, [r7, #0]
 800b9e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	1c5a      	adds	r2, r3, #1
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	601a      	str	r2, [r3, #0]
}
 800b9f6:	bf00      	nop
 800b9f8:	3714      	adds	r7, #20
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba02:	b480      	push	{r7}
 800ba04:	b085      	sub	sp, #20
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba18:	d103      	bne.n	800ba22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	60fb      	str	r3, [r7, #12]
 800ba20:	e00c      	b.n	800ba3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	3308      	adds	r3, #8
 800ba26:	60fb      	str	r3, [r7, #12]
 800ba28:	e002      	b.n	800ba30 <vListInsert+0x2e>
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	60fb      	str	r3, [r7, #12]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	68ba      	ldr	r2, [r7, #8]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d2f6      	bcs.n	800ba2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	1c5a      	adds	r2, r3, #1
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	601a      	str	r2, [r3, #0]
}
 800ba68:	bf00      	nop
 800ba6a:	3714      	adds	r7, #20
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	6892      	ldr	r2, [r2, #8]
 800ba8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	6852      	ldr	r2, [r2, #4]
 800ba94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d103      	bne.n	800baa8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	689a      	ldr	r2, [r3, #8]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	1e5a      	subs	r2, r3, #1
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
}
 800babc:	4618      	mov	r0, r3
 800babe:	3714      	adds	r7, #20
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10b      	bne.n	800baf4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae0:	f383 8811 	msr	BASEPRI, r3
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800baee:	bf00      	nop
 800baf0:	bf00      	nop
 800baf2:	e7fd      	b.n	800baf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800baf4:	f002 fd70 	bl	800e5d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb00:	68f9      	ldr	r1, [r7, #12]
 800bb02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bb04:	fb01 f303 	mul.w	r3, r1, r3
 800bb08:	441a      	add	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb24:	3b01      	subs	r3, #1
 800bb26:	68f9      	ldr	r1, [r7, #12]
 800bb28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bb2a:	fb01 f303 	mul.w	r3, r1, r3
 800bb2e:	441a      	add	r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	22ff      	movs	r2, #255	@ 0xff
 800bb38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	22ff      	movs	r2, #255	@ 0xff
 800bb40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d114      	bne.n	800bb74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d01a      	beq.n	800bb88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	3310      	adds	r3, #16
 800bb56:	4618      	mov	r0, r3
 800bb58:	f001 fd04 	bl	800d564 <xTaskRemoveFromEventList>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d012      	beq.n	800bb88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bb62:	4b0d      	ldr	r3, [pc, #52]	@ (800bb98 <xQueueGenericReset+0xd0>)
 800bb64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb68:	601a      	str	r2, [r3, #0]
 800bb6a:	f3bf 8f4f 	dsb	sy
 800bb6e:	f3bf 8f6f 	isb	sy
 800bb72:	e009      	b.n	800bb88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	3310      	adds	r3, #16
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7ff fef1 	bl	800b960 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	3324      	adds	r3, #36	@ 0x24
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7ff feec 	bl	800b960 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb88:	f002 fd58 	bl	800e63c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb8c:	2301      	movs	r3, #1
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	e000ed04 	.word	0xe000ed04

0800bb9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b08e      	sub	sp, #56	@ 0x38
 800bba0:	af02      	add	r7, sp, #8
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	607a      	str	r2, [r7, #4]
 800bba8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10b      	bne.n	800bbc8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bbc2:	bf00      	nop
 800bbc4:	bf00      	nop
 800bbc6:	e7fd      	b.n	800bbc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d10b      	bne.n	800bbe6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bbce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbd2:	f383 8811 	msr	BASEPRI, r3
 800bbd6:	f3bf 8f6f 	isb	sy
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bbe0:	bf00      	nop
 800bbe2:	bf00      	nop
 800bbe4:	e7fd      	b.n	800bbe2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <xQueueGenericCreateStatic+0x56>
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <xQueueGenericCreateStatic+0x5a>
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e000      	b.n	800bbf8 <xQueueGenericCreateStatic+0x5c>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10b      	bne.n	800bc14 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	623b      	str	r3, [r7, #32]
}
 800bc0e:	bf00      	nop
 800bc10:	bf00      	nop
 800bc12:	e7fd      	b.n	800bc10 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d102      	bne.n	800bc20 <xQueueGenericCreateStatic+0x84>
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <xQueueGenericCreateStatic+0x88>
 800bc20:	2301      	movs	r3, #1
 800bc22:	e000      	b.n	800bc26 <xQueueGenericCreateStatic+0x8a>
 800bc24:	2300      	movs	r3, #0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10b      	bne.n	800bc42 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	61fb      	str	r3, [r7, #28]
}
 800bc3c:	bf00      	nop
 800bc3e:	bf00      	nop
 800bc40:	e7fd      	b.n	800bc3e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc42:	2350      	movs	r3, #80	@ 0x50
 800bc44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	2b50      	cmp	r3, #80	@ 0x50
 800bc4a:	d00b      	beq.n	800bc64 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bc4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc50:	f383 8811 	msr	BASEPRI, r3
 800bc54:	f3bf 8f6f 	isb	sy
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	61bb      	str	r3, [r7, #24]
}
 800bc5e:	bf00      	nop
 800bc60:	bf00      	nop
 800bc62:	e7fd      	b.n	800bc60 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00d      	beq.n	800bc8c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bc70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc72:	2201      	movs	r2, #1
 800bc74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc78:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bc7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7e:	9300      	str	r3, [sp, #0]
 800bc80:	4613      	mov	r3, r2
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	68b9      	ldr	r1, [r7, #8]
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f000 f840 	bl	800bd0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3730      	adds	r7, #48	@ 0x30
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b08a      	sub	sp, #40	@ 0x28
 800bc9a:	af02      	add	r7, sp, #8
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	60b9      	str	r1, [r7, #8]
 800bca0:	4613      	mov	r3, r2
 800bca2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d10b      	bne.n	800bcc2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800bcaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcae:	f383 8811 	msr	BASEPRI, r3
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	613b      	str	r3, [r7, #16]
}
 800bcbc:	bf00      	nop
 800bcbe:	bf00      	nop
 800bcc0:	e7fd      	b.n	800bcbe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	fb02 f303 	mul.w	r3, r2, r3
 800bcca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	3350      	adds	r3, #80	@ 0x50
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f002 fda3 	bl	800e81c <pvPortMalloc>
 800bcd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d011      	beq.n	800bd02 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	3350      	adds	r3, #80	@ 0x50
 800bce6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	2200      	movs	r2, #0
 800bcec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bcf0:	79fa      	ldrb	r2, [r7, #7]
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	697a      	ldr	r2, [r7, #20]
 800bcfa:	68b9      	ldr	r1, [r7, #8]
 800bcfc:	68f8      	ldr	r0, [r7, #12]
 800bcfe:	f000 f805 	bl	800bd0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd02:	69bb      	ldr	r3, [r7, #24]
	}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3720      	adds	r7, #32
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	607a      	str	r2, [r7, #4]
 800bd18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d103      	bne.n	800bd28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd20:	69bb      	ldr	r3, [r7, #24]
 800bd22:	69ba      	ldr	r2, [r7, #24]
 800bd24:	601a      	str	r2, [r3, #0]
 800bd26:	e002      	b.n	800bd2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bd28:	69bb      	ldr	r3, [r7, #24]
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd3a:	2101      	movs	r1, #1
 800bd3c:	69b8      	ldr	r0, [r7, #24]
 800bd3e:	f7ff fec3 	bl	800bac8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	78fa      	ldrb	r2, [r7, #3]
 800bd46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bd4a:	bf00      	nop
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b082      	sub	sp, #8
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00e      	beq.n	800bd7e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bd72:	2300      	movs	r3, #0
 800bd74:	2200      	movs	r2, #0
 800bd76:	2100      	movs	r1, #0
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 f911 	bl	800bfa0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bd7e:	bf00      	nop
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b086      	sub	sp, #24
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bd90:	2301      	movs	r3, #1
 800bd92:	617b      	str	r3, [r7, #20]
 800bd94:	2300      	movs	r3, #0
 800bd96:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bd98:	79fb      	ldrb	r3, [r7, #7]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	6939      	ldr	r1, [r7, #16]
 800bd9e:	6978      	ldr	r0, [r7, #20]
 800bda0:	f7ff ff79 	bl	800bc96 <xQueueGenericCreate>
 800bda4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f7ff ffd3 	bl	800bd52 <prvInitialiseMutex>

		return xNewQueue;
 800bdac:	68fb      	ldr	r3, [r7, #12]
	}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3718      	adds	r7, #24
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b088      	sub	sp, #32
 800bdba:	af02      	add	r7, sp, #8
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	6039      	str	r1, [r7, #0]
 800bdc0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	617b      	str	r3, [r7, #20]
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bdca:	79fb      	ldrb	r3, [r7, #7]
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	6939      	ldr	r1, [r7, #16]
 800bdd4:	6978      	ldr	r0, [r7, #20]
 800bdd6:	f7ff fee1 	bl	800bb9c <xQueueGenericCreateStatic>
 800bdda:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f7ff ffb8 	bl	800bd52 <prvInitialiseMutex>

		return xNewQueue;
 800bde2:	68fb      	ldr	r3, [r7, #12]
	}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3718      	adds	r7, #24
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800bdec:	b590      	push	{r4, r7, lr}
 800bdee:	b087      	sub	sp, #28
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d10b      	bne.n	800be16 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800bdfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be02:	f383 8811 	msr	BASEPRI, r3
 800be06:	f3bf 8f6f 	isb	sy
 800be0a:	f3bf 8f4f 	dsb	sy
 800be0e:	60fb      	str	r3, [r7, #12]
}
 800be10:	bf00      	nop
 800be12:	bf00      	nop
 800be14:	e7fd      	b.n	800be12 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	689c      	ldr	r4, [r3, #8]
 800be1a:	f001 fd63 	bl	800d8e4 <xTaskGetCurrentTaskHandle>
 800be1e:	4603      	mov	r3, r0
 800be20:	429c      	cmp	r4, r3
 800be22:	d111      	bne.n	800be48 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	1e5a      	subs	r2, r3, #1
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d105      	bne.n	800be42 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800be36:	2300      	movs	r3, #0
 800be38:	2200      	movs	r2, #0
 800be3a:	2100      	movs	r1, #0
 800be3c:	6938      	ldr	r0, [r7, #16]
 800be3e:	f000 f8af 	bl	800bfa0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800be42:	2301      	movs	r3, #1
 800be44:	617b      	str	r3, [r7, #20]
 800be46:	e001      	b.n	800be4c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800be48:	2300      	movs	r3, #0
 800be4a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800be4c:	697b      	ldr	r3, [r7, #20]
	}
 800be4e:	4618      	mov	r0, r3
 800be50:	371c      	adds	r7, #28
 800be52:	46bd      	mov	sp, r7
 800be54:	bd90      	pop	{r4, r7, pc}

0800be56 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800be56:	b590      	push	{r4, r7, lr}
 800be58:	b087      	sub	sp, #28
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
 800be5e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10b      	bne.n	800be82 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800be6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be6e:	f383 8811 	msr	BASEPRI, r3
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	f3bf 8f4f 	dsb	sy
 800be7a:	60fb      	str	r3, [r7, #12]
}
 800be7c:	bf00      	nop
 800be7e:	bf00      	nop
 800be80:	e7fd      	b.n	800be7e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	689c      	ldr	r4, [r3, #8]
 800be86:	f001 fd2d 	bl	800d8e4 <xTaskGetCurrentTaskHandle>
 800be8a:	4603      	mov	r3, r0
 800be8c:	429c      	cmp	r4, r3
 800be8e:	d107      	bne.n	800bea0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	1c5a      	adds	r2, r3, #1
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800be9a:	2301      	movs	r3, #1
 800be9c:	617b      	str	r3, [r7, #20]
 800be9e:	e00c      	b.n	800beba <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800bea0:	6839      	ldr	r1, [r7, #0]
 800bea2:	6938      	ldr	r0, [r7, #16]
 800bea4:	f000 fb8e 	bl	800c5c4 <xQueueSemaphoreTake>
 800bea8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d004      	beq.n	800beba <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	1c5a      	adds	r2, r3, #1
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800beba:	697b      	ldr	r3, [r7, #20]
	}
 800bebc:	4618      	mov	r0, r3
 800bebe:	371c      	adds	r7, #28
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd90      	pop	{r4, r7, pc}

0800bec4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b08a      	sub	sp, #40	@ 0x28
 800bec8:	af02      	add	r7, sp, #8
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d10b      	bne.n	800beee <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800bed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beda:	f383 8811 	msr	BASEPRI, r3
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	61bb      	str	r3, [r7, #24]
}
 800bee8:	bf00      	nop
 800beea:	bf00      	nop
 800beec:	e7fd      	b.n	800beea <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d90b      	bls.n	800bf0e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800bef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800befa:	f383 8811 	msr	BASEPRI, r3
 800befe:	f3bf 8f6f 	isb	sy
 800bf02:	f3bf 8f4f 	dsb	sy
 800bf06:	617b      	str	r3, [r7, #20]
}
 800bf08:	bf00      	nop
 800bf0a:	bf00      	nop
 800bf0c:	e7fd      	b.n	800bf0a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bf0e:	2302      	movs	r3, #2
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	2100      	movs	r1, #0
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f7ff fe3f 	bl	800bb9c <xQueueGenericCreateStatic>
 800bf1e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d002      	beq.n	800bf2c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bf2c:	69fb      	ldr	r3, [r7, #28]
	}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3720      	adds	r7, #32
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b086      	sub	sp, #24
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
 800bf3e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d10b      	bne.n	800bf5e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4a:	f383 8811 	msr	BASEPRI, r3
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	613b      	str	r3, [r7, #16]
}
 800bf58:	bf00      	nop
 800bf5a:	bf00      	nop
 800bf5c:	e7fd      	b.n	800bf5a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bf5e:	683a      	ldr	r2, [r7, #0]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d90b      	bls.n	800bf7e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800bf66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf6a:	f383 8811 	msr	BASEPRI, r3
 800bf6e:	f3bf 8f6f 	isb	sy
 800bf72:	f3bf 8f4f 	dsb	sy
 800bf76:	60fb      	str	r3, [r7, #12]
}
 800bf78:	bf00      	nop
 800bf7a:	bf00      	nop
 800bf7c:	e7fd      	b.n	800bf7a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bf7e:	2202      	movs	r2, #2
 800bf80:	2100      	movs	r1, #0
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff fe87 	bl	800bc96 <xQueueGenericCreate>
 800bf88:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d002      	beq.n	800bf96 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	683a      	ldr	r2, [r7, #0]
 800bf94:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bf96:	697b      	ldr	r3, [r7, #20]
	}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3718      	adds	r7, #24
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b08e      	sub	sp, #56	@ 0x38
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	607a      	str	r2, [r7, #4]
 800bfac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10b      	bne.n	800bfd4 <xQueueGenericSend+0x34>
	__asm volatile
 800bfbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc0:	f383 8811 	msr	BASEPRI, r3
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bfce:	bf00      	nop
 800bfd0:	bf00      	nop
 800bfd2:	e7fd      	b.n	800bfd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d103      	bne.n	800bfe2 <xQueueGenericSend+0x42>
 800bfda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d101      	bne.n	800bfe6 <xQueueGenericSend+0x46>
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e000      	b.n	800bfe8 <xQueueGenericSend+0x48>
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10b      	bne.n	800c004 <xQueueGenericSend+0x64>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bffe:	bf00      	nop
 800c000:	bf00      	nop
 800c002:	e7fd      	b.n	800c000 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	2b02      	cmp	r3, #2
 800c008:	d103      	bne.n	800c012 <xQueueGenericSend+0x72>
 800c00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d101      	bne.n	800c016 <xQueueGenericSend+0x76>
 800c012:	2301      	movs	r3, #1
 800c014:	e000      	b.n	800c018 <xQueueGenericSend+0x78>
 800c016:	2300      	movs	r3, #0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d10b      	bne.n	800c034 <xQueueGenericSend+0x94>
	__asm volatile
 800c01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	623b      	str	r3, [r7, #32]
}
 800c02e:	bf00      	nop
 800c030:	bf00      	nop
 800c032:	e7fd      	b.n	800c030 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c034:	f001 fc66 	bl	800d904 <xTaskGetSchedulerState>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d102      	bne.n	800c044 <xQueueGenericSend+0xa4>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d101      	bne.n	800c048 <xQueueGenericSend+0xa8>
 800c044:	2301      	movs	r3, #1
 800c046:	e000      	b.n	800c04a <xQueueGenericSend+0xaa>
 800c048:	2300      	movs	r3, #0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d10b      	bne.n	800c066 <xQueueGenericSend+0xc6>
	__asm volatile
 800c04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	61fb      	str	r3, [r7, #28]
}
 800c060:	bf00      	nop
 800c062:	bf00      	nop
 800c064:	e7fd      	b.n	800c062 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c066:	f002 fab7 	bl	800e5d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c06c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c072:	429a      	cmp	r2, r3
 800c074:	d302      	bcc.n	800c07c <xQueueGenericSend+0xdc>
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d129      	bne.n	800c0d0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c07c:	683a      	ldr	r2, [r7, #0]
 800c07e:	68b9      	ldr	r1, [r7, #8]
 800c080:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c082:	f000 fc6d 	bl	800c960 <prvCopyDataToQueue>
 800c086:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d010      	beq.n	800c0b2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c092:	3324      	adds	r3, #36	@ 0x24
 800c094:	4618      	mov	r0, r3
 800c096:	f001 fa65 	bl	800d564 <xTaskRemoveFromEventList>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d013      	beq.n	800c0c8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c0a0:	4b3f      	ldr	r3, [pc, #252]	@ (800c1a0 <xQueueGenericSend+0x200>)
 800c0a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0a6:	601a      	str	r2, [r3, #0]
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	e00a      	b.n	800c0c8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d007      	beq.n	800c0c8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c0b8:	4b39      	ldr	r3, [pc, #228]	@ (800c1a0 <xQueueGenericSend+0x200>)
 800c0ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0be:	601a      	str	r2, [r3, #0]
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c0c8:	f002 fab8 	bl	800e63c <vPortExitCritical>
				return pdPASS;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e063      	b.n	800c198 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d103      	bne.n	800c0de <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c0d6:	f002 fab1 	bl	800e63c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	e05c      	b.n	800c198 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d106      	bne.n	800c0f2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0e4:	f107 0314 	add.w	r3, r7, #20
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f001 fa9f 	bl	800d62c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0f2:	f002 faa3 	bl	800e63c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0f6:	f001 f80f 	bl	800d118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0fa:	f002 fa6d 	bl	800e5d8 <vPortEnterCritical>
 800c0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c100:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c104:	b25b      	sxtb	r3, r3
 800c106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10a:	d103      	bne.n	800c114 <xQueueGenericSend+0x174>
 800c10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c116:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c11a:	b25b      	sxtb	r3, r3
 800c11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c120:	d103      	bne.n	800c12a <xQueueGenericSend+0x18a>
 800c122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c124:	2200      	movs	r2, #0
 800c126:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c12a:	f002 fa87 	bl	800e63c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c12e:	1d3a      	adds	r2, r7, #4
 800c130:	f107 0314 	add.w	r3, r7, #20
 800c134:	4611      	mov	r1, r2
 800c136:	4618      	mov	r0, r3
 800c138:	f001 fa8e 	bl	800d658 <xTaskCheckForTimeOut>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d124      	bne.n	800c18c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c142:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c144:	f000 fd04 	bl	800cb50 <prvIsQueueFull>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d018      	beq.n	800c180 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c150:	3310      	adds	r3, #16
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	4611      	mov	r1, r2
 800c156:	4618      	mov	r0, r3
 800c158:	f001 f9b2 	bl	800d4c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c15c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c15e:	f000 fc8f 	bl	800ca80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c162:	f000 ffe7 	bl	800d134 <xTaskResumeAll>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f47f af7c 	bne.w	800c066 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c16e:	4b0c      	ldr	r3, [pc, #48]	@ (800c1a0 <xQueueGenericSend+0x200>)
 800c170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c174:	601a      	str	r2, [r3, #0]
 800c176:	f3bf 8f4f 	dsb	sy
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	e772      	b.n	800c066 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c180:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c182:	f000 fc7d 	bl	800ca80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c186:	f000 ffd5 	bl	800d134 <xTaskResumeAll>
 800c18a:	e76c      	b.n	800c066 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c18c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c18e:	f000 fc77 	bl	800ca80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c192:	f000 ffcf 	bl	800d134 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c196:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3738      	adds	r7, #56	@ 0x38
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	e000ed04 	.word	0xe000ed04

0800c1a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b090      	sub	sp, #64	@ 0x40
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	607a      	str	r2, [r7, #4]
 800c1b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10b      	bne.n	800c1d4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c1ce:	bf00      	nop
 800c1d0:	bf00      	nop
 800c1d2:	e7fd      	b.n	800c1d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d103      	bne.n	800c1e2 <xQueueGenericSendFromISR+0x3e>
 800c1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d101      	bne.n	800c1e6 <xQueueGenericSendFromISR+0x42>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e000      	b.n	800c1e8 <xQueueGenericSendFromISR+0x44>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d10b      	bne.n	800c204 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c1fe:	bf00      	nop
 800c200:	bf00      	nop
 800c202:	e7fd      	b.n	800c200 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2b02      	cmp	r3, #2
 800c208:	d103      	bne.n	800c212 <xQueueGenericSendFromISR+0x6e>
 800c20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c20c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d101      	bne.n	800c216 <xQueueGenericSendFromISR+0x72>
 800c212:	2301      	movs	r3, #1
 800c214:	e000      	b.n	800c218 <xQueueGenericSendFromISR+0x74>
 800c216:	2300      	movs	r3, #0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d10b      	bne.n	800c234 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c220:	f383 8811 	msr	BASEPRI, r3
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	f3bf 8f4f 	dsb	sy
 800c22c:	623b      	str	r3, [r7, #32]
}
 800c22e:	bf00      	nop
 800c230:	bf00      	nop
 800c232:	e7fd      	b.n	800c230 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c234:	f002 fab0 	bl	800e798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c238:	f3ef 8211 	mrs	r2, BASEPRI
 800c23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	61fa      	str	r2, [r7, #28]
 800c24e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c250:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c252:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c25a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d302      	bcc.n	800c266 <xQueueGenericSendFromISR+0xc2>
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	2b02      	cmp	r3, #2
 800c264:	d12f      	bne.n	800c2c6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c268:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c26c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c274:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c276:	683a      	ldr	r2, [r7, #0]
 800c278:	68b9      	ldr	r1, [r7, #8]
 800c27a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c27c:	f000 fb70 	bl	800c960 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c280:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c288:	d112      	bne.n	800c2b0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c28c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d016      	beq.n	800c2c0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c294:	3324      	adds	r3, #36	@ 0x24
 800c296:	4618      	mov	r0, r3
 800c298:	f001 f964 	bl	800d564 <xTaskRemoveFromEventList>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00e      	beq.n	800c2c0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00b      	beq.n	800c2c0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	601a      	str	r2, [r3, #0]
 800c2ae:	e007      	b.n	800c2c0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c2b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	b25a      	sxtb	r2, r3
 800c2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c2c4:	e001      	b.n	800c2ca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2cc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c2d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3740      	adds	r7, #64	@ 0x40
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b08e      	sub	sp, #56	@ 0x38
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10b      	bne.n	800c30c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	623b      	str	r3, [r7, #32]
}
 800c306:	bf00      	nop
 800c308:	bf00      	nop
 800c30a:	e7fd      	b.n	800c308 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c310:	2b00      	cmp	r3, #0
 800c312:	d00b      	beq.n	800c32c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c318:	f383 8811 	msr	BASEPRI, r3
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	61fb      	str	r3, [r7, #28]
}
 800c326:	bf00      	nop
 800c328:	bf00      	nop
 800c32a:	e7fd      	b.n	800c328 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d103      	bne.n	800c33c <xQueueGiveFromISR+0x5c>
 800c334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d101      	bne.n	800c340 <xQueueGiveFromISR+0x60>
 800c33c:	2301      	movs	r3, #1
 800c33e:	e000      	b.n	800c342 <xQueueGiveFromISR+0x62>
 800c340:	2300      	movs	r3, #0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10b      	bne.n	800c35e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	61bb      	str	r3, [r7, #24]
}
 800c358:	bf00      	nop
 800c35a:	bf00      	nop
 800c35c:	e7fd      	b.n	800c35a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c35e:	f002 fa1b 	bl	800e798 <vPortValidateInterruptPriority>
	__asm volatile
 800c362:	f3ef 8211 	mrs	r2, BASEPRI
 800c366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	617a      	str	r2, [r7, #20]
 800c378:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c37a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c37c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c382:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c388:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d22b      	bcs.n	800c3e6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c390:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c39a:	1c5a      	adds	r2, r3, #1
 800c39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c39e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c3a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a8:	d112      	bne.n	800c3d0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d016      	beq.n	800c3e0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b4:	3324      	adds	r3, #36	@ 0x24
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f001 f8d4 	bl	800d564 <xTaskRemoveFromEventList>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00e      	beq.n	800c3e0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00b      	beq.n	800c3e0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	601a      	str	r2, [r3, #0]
 800c3ce:	e007      	b.n	800c3e0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c3d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	b25a      	sxtb	r2, r3
 800c3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3e4:	e001      	b.n	800c3ea <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f383 8811 	msr	BASEPRI, r3
}
 800c3f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3738      	adds	r7, #56	@ 0x38
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b08c      	sub	sp, #48	@ 0x30
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c40c:	2300      	movs	r3, #0
 800c40e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10b      	bne.n	800c432 <xQueueReceive+0x32>
	__asm volatile
 800c41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	623b      	str	r3, [r7, #32]
}
 800c42c:	bf00      	nop
 800c42e:	bf00      	nop
 800c430:	e7fd      	b.n	800c42e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d103      	bne.n	800c440 <xQueueReceive+0x40>
 800c438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d101      	bne.n	800c444 <xQueueReceive+0x44>
 800c440:	2301      	movs	r3, #1
 800c442:	e000      	b.n	800c446 <xQueueReceive+0x46>
 800c444:	2300      	movs	r3, #0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d10b      	bne.n	800c462 <xQueueReceive+0x62>
	__asm volatile
 800c44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c44e:	f383 8811 	msr	BASEPRI, r3
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	61fb      	str	r3, [r7, #28]
}
 800c45c:	bf00      	nop
 800c45e:	bf00      	nop
 800c460:	e7fd      	b.n	800c45e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c462:	f001 fa4f 	bl	800d904 <xTaskGetSchedulerState>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d102      	bne.n	800c472 <xQueueReceive+0x72>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d101      	bne.n	800c476 <xQueueReceive+0x76>
 800c472:	2301      	movs	r3, #1
 800c474:	e000      	b.n	800c478 <xQueueReceive+0x78>
 800c476:	2300      	movs	r3, #0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d10b      	bne.n	800c494 <xQueueReceive+0x94>
	__asm volatile
 800c47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c480:	f383 8811 	msr	BASEPRI, r3
 800c484:	f3bf 8f6f 	isb	sy
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	61bb      	str	r3, [r7, #24]
}
 800c48e:	bf00      	nop
 800c490:	bf00      	nop
 800c492:	e7fd      	b.n	800c490 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c494:	f002 f8a0 	bl	800e5d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c49c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d01f      	beq.n	800c4e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4a4:	68b9      	ldr	r1, [r7, #8]
 800c4a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4a8:	f000 fac4 	bl	800ca34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ae:	1e5a      	subs	r2, r3, #1
 800c4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b6:	691b      	ldr	r3, [r3, #16]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00f      	beq.n	800c4dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4be:	3310      	adds	r3, #16
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f001 f84f 	bl	800d564 <xTaskRemoveFromEventList>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d007      	beq.n	800c4dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c4cc:	4b3c      	ldr	r3, [pc, #240]	@ (800c5c0 <xQueueReceive+0x1c0>)
 800c4ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4d2:	601a      	str	r2, [r3, #0]
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c4dc:	f002 f8ae 	bl	800e63c <vPortExitCritical>
				return pdPASS;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	e069      	b.n	800c5b8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d103      	bne.n	800c4f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4ea:	f002 f8a7 	bl	800e63c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	e062      	b.n	800c5b8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d106      	bne.n	800c506 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4f8:	f107 0310 	add.w	r3, r7, #16
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f001 f895 	bl	800d62c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c502:	2301      	movs	r3, #1
 800c504:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c506:	f002 f899 	bl	800e63c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c50a:	f000 fe05 	bl	800d118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c50e:	f002 f863 	bl	800e5d8 <vPortEnterCritical>
 800c512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c514:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c518:	b25b      	sxtb	r3, r3
 800c51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c51e:	d103      	bne.n	800c528 <xQueueReceive+0x128>
 800c520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c522:	2200      	movs	r2, #0
 800c524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c52e:	b25b      	sxtb	r3, r3
 800c530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c534:	d103      	bne.n	800c53e <xQueueReceive+0x13e>
 800c536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c538:	2200      	movs	r2, #0
 800c53a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c53e:	f002 f87d 	bl	800e63c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c542:	1d3a      	adds	r2, r7, #4
 800c544:	f107 0310 	add.w	r3, r7, #16
 800c548:	4611      	mov	r1, r2
 800c54a:	4618      	mov	r0, r3
 800c54c:	f001 f884 	bl	800d658 <xTaskCheckForTimeOut>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d123      	bne.n	800c59e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c558:	f000 fae4 	bl	800cb24 <prvIsQueueEmpty>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d017      	beq.n	800c592 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c564:	3324      	adds	r3, #36	@ 0x24
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	4611      	mov	r1, r2
 800c56a:	4618      	mov	r0, r3
 800c56c:	f000 ffa8 	bl	800d4c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c570:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c572:	f000 fa85 	bl	800ca80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c576:	f000 fddd 	bl	800d134 <xTaskResumeAll>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d189      	bne.n	800c494 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c580:	4b0f      	ldr	r3, [pc, #60]	@ (800c5c0 <xQueueReceive+0x1c0>)
 800c582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c586:	601a      	str	r2, [r3, #0]
 800c588:	f3bf 8f4f 	dsb	sy
 800c58c:	f3bf 8f6f 	isb	sy
 800c590:	e780      	b.n	800c494 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c594:	f000 fa74 	bl	800ca80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c598:	f000 fdcc 	bl	800d134 <xTaskResumeAll>
 800c59c:	e77a      	b.n	800c494 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c59e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5a0:	f000 fa6e 	bl	800ca80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5a4:	f000 fdc6 	bl	800d134 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5aa:	f000 fabb 	bl	800cb24 <prvIsQueueEmpty>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f43f af6f 	beq.w	800c494 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c5b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3730      	adds	r7, #48	@ 0x30
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	e000ed04 	.word	0xe000ed04

0800c5c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b08e      	sub	sp, #56	@ 0x38
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d10b      	bne.n	800c5f8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	623b      	str	r3, [r7, #32]
}
 800c5f2:	bf00      	nop
 800c5f4:	bf00      	nop
 800c5f6:	e7fd      	b.n	800c5f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00b      	beq.n	800c618 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	61fb      	str	r3, [r7, #28]
}
 800c612:	bf00      	nop
 800c614:	bf00      	nop
 800c616:	e7fd      	b.n	800c614 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c618:	f001 f974 	bl	800d904 <xTaskGetSchedulerState>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d102      	bne.n	800c628 <xQueueSemaphoreTake+0x64>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d101      	bne.n	800c62c <xQueueSemaphoreTake+0x68>
 800c628:	2301      	movs	r3, #1
 800c62a:	e000      	b.n	800c62e <xQueueSemaphoreTake+0x6a>
 800c62c:	2300      	movs	r3, #0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10b      	bne.n	800c64a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	61bb      	str	r3, [r7, #24]
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop
 800c648:	e7fd      	b.n	800c646 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c64a:	f001 ffc5 	bl	800e5d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c652:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c656:	2b00      	cmp	r3, #0
 800c658:	d024      	beq.n	800c6a4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65c:	1e5a      	subs	r2, r3, #1
 800c65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c660:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d104      	bne.n	800c674 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c66a:	f001 fac5 	bl	800dbf8 <pvTaskIncrementMutexHeldCount>
 800c66e:	4602      	mov	r2, r0
 800c670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c672:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00f      	beq.n	800c69c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c67e:	3310      	adds	r3, #16
 800c680:	4618      	mov	r0, r3
 800c682:	f000 ff6f 	bl	800d564 <xTaskRemoveFromEventList>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d007      	beq.n	800c69c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c68c:	4b54      	ldr	r3, [pc, #336]	@ (800c7e0 <xQueueSemaphoreTake+0x21c>)
 800c68e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c69c:	f001 ffce 	bl	800e63c <vPortExitCritical>
				return pdPASS;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e098      	b.n	800c7d6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d112      	bne.n	800c6d0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00b      	beq.n	800c6c8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	617b      	str	r3, [r7, #20]
}
 800c6c2:	bf00      	nop
 800c6c4:	bf00      	nop
 800c6c6:	e7fd      	b.n	800c6c4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c6c8:	f001 ffb8 	bl	800e63c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	e082      	b.n	800c7d6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d106      	bne.n	800c6e4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6d6:	f107 030c 	add.w	r3, r7, #12
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 ffa6 	bl	800d62c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6e4:	f001 ffaa 	bl	800e63c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6e8:	f000 fd16 	bl	800d118 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6ec:	f001 ff74 	bl	800e5d8 <vPortEnterCritical>
 800c6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c6f6:	b25b      	sxtb	r3, r3
 800c6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6fc:	d103      	bne.n	800c706 <xQueueSemaphoreTake+0x142>
 800c6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c700:	2200      	movs	r2, #0
 800c702:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c708:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c70c:	b25b      	sxtb	r3, r3
 800c70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c712:	d103      	bne.n	800c71c <xQueueSemaphoreTake+0x158>
 800c714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c716:	2200      	movs	r2, #0
 800c718:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c71c:	f001 ff8e 	bl	800e63c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c720:	463a      	mov	r2, r7
 800c722:	f107 030c 	add.w	r3, r7, #12
 800c726:	4611      	mov	r1, r2
 800c728:	4618      	mov	r0, r3
 800c72a:	f000 ff95 	bl	800d658 <xTaskCheckForTimeOut>
 800c72e:	4603      	mov	r3, r0
 800c730:	2b00      	cmp	r3, #0
 800c732:	d132      	bne.n	800c79a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c734:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c736:	f000 f9f5 	bl	800cb24 <prvIsQueueEmpty>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d026      	beq.n	800c78e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d109      	bne.n	800c75c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c748:	f001 ff46 	bl	800e5d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	4618      	mov	r0, r3
 800c752:	f001 f8f5 	bl	800d940 <xTaskPriorityInherit>
 800c756:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c758:	f001 ff70 	bl	800e63c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c75e:	3324      	adds	r3, #36	@ 0x24
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	4611      	mov	r1, r2
 800c764:	4618      	mov	r0, r3
 800c766:	f000 feab 	bl	800d4c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c76a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c76c:	f000 f988 	bl	800ca80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c770:	f000 fce0 	bl	800d134 <xTaskResumeAll>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	f47f af67 	bne.w	800c64a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c77c:	4b18      	ldr	r3, [pc, #96]	@ (800c7e0 <xQueueSemaphoreTake+0x21c>)
 800c77e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c782:	601a      	str	r2, [r3, #0]
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	f3bf 8f6f 	isb	sy
 800c78c:	e75d      	b.n	800c64a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c78e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c790:	f000 f976 	bl	800ca80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c794:	f000 fcce 	bl	800d134 <xTaskResumeAll>
 800c798:	e757      	b.n	800c64a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c79a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c79c:	f000 f970 	bl	800ca80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7a0:	f000 fcc8 	bl	800d134 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7a6:	f000 f9bd 	bl	800cb24 <prvIsQueueEmpty>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f43f af4c 	beq.w	800c64a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d00d      	beq.n	800c7d4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c7b8:	f001 ff0e 	bl	800e5d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c7bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7be:	f000 f8b7 	bl	800c930 <prvGetDisinheritPriorityAfterTimeout>
 800c7c2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f001 f990 	bl	800daf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c7d0:	f001 ff34 	bl	800e63c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3738      	adds	r7, #56	@ 0x38
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	e000ed04 	.word	0xe000ed04

0800c7e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b08e      	sub	sp, #56	@ 0x38
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10b      	bne.n	800c812 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	623b      	str	r3, [r7, #32]
}
 800c80c:	bf00      	nop
 800c80e:	bf00      	nop
 800c810:	e7fd      	b.n	800c80e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d103      	bne.n	800c820 <xQueueReceiveFromISR+0x3c>
 800c818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d101      	bne.n	800c824 <xQueueReceiveFromISR+0x40>
 800c820:	2301      	movs	r3, #1
 800c822:	e000      	b.n	800c826 <xQueueReceiveFromISR+0x42>
 800c824:	2300      	movs	r3, #0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10b      	bne.n	800c842 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c82a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c82e:	f383 8811 	msr	BASEPRI, r3
 800c832:	f3bf 8f6f 	isb	sy
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	61fb      	str	r3, [r7, #28]
}
 800c83c:	bf00      	nop
 800c83e:	bf00      	nop
 800c840:	e7fd      	b.n	800c83e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c842:	f001 ffa9 	bl	800e798 <vPortValidateInterruptPriority>
	__asm volatile
 800c846:	f3ef 8211 	mrs	r2, BASEPRI
 800c84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84e:	f383 8811 	msr	BASEPRI, r3
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	f3bf 8f4f 	dsb	sy
 800c85a:	61ba      	str	r2, [r7, #24]
 800c85c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c85e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c860:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c866:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d02f      	beq.n	800c8ce <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c870:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c874:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c878:	68b9      	ldr	r1, [r7, #8]
 800c87a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c87c:	f000 f8da 	bl	800ca34 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c882:	1e5a      	subs	r2, r3, #1
 800c884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c886:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c888:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c890:	d112      	bne.n	800c8b8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c894:	691b      	ldr	r3, [r3, #16]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d016      	beq.n	800c8c8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89c:	3310      	adds	r3, #16
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f000 fe60 	bl	800d564 <xTaskRemoveFromEventList>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00e      	beq.n	800c8c8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00b      	beq.n	800c8c8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	601a      	str	r2, [r3, #0]
 800c8b6:	e007      	b.n	800c8c8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8bc:	3301      	adds	r3, #1
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	b25a      	sxtb	r2, r3
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8cc:	e001      	b.n	800c8d2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	f383 8811 	msr	BASEPRI, r3
}
 800c8dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3738      	adds	r7, #56	@ 0x38
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10b      	bne.n	800c912 <vQueueDelete+0x2a>
	__asm volatile
 800c8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	60bb      	str	r3, [r7, #8]
}
 800c90c:	bf00      	nop
 800c90e:	bf00      	nop
 800c910:	e7fd      	b.n	800c90e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	f000 f95e 	bl	800cbd4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d102      	bne.n	800c928 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800c922:	68f8      	ldr	r0, [r7, #12]
 800c924:	f002 f848 	bl	800e9b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c928:	bf00      	nop
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d006      	beq.n	800c94e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c94a:	60fb      	str	r3, [r7, #12]
 800c94c:	e001      	b.n	800c952 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c94e:	2300      	movs	r3, #0
 800c950:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c952:	68fb      	ldr	r3, [r7, #12]
	}
 800c954:	4618      	mov	r0, r3
 800c956:	3714      	adds	r7, #20
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b086      	sub	sp, #24
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c96c:	2300      	movs	r3, #0
 800c96e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c974:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d10d      	bne.n	800c99a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d14d      	bne.n	800ca22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	4618      	mov	r0, r3
 800c98c:	f001 f840 	bl	800da10 <xTaskPriorityDisinherit>
 800c990:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2200      	movs	r2, #0
 800c996:	609a      	str	r2, [r3, #8]
 800c998:	e043      	b.n	800ca22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d119      	bne.n	800c9d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6858      	ldr	r0, [r3, #4]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	68b9      	ldr	r1, [r7, #8]
 800c9ac:	f003 fb4f 	bl	801004e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	685a      	ldr	r2, [r3, #4]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9b8:	441a      	add	r2, r3
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	685a      	ldr	r2, [r3, #4]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d32b      	bcc.n	800ca22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	605a      	str	r2, [r3, #4]
 800c9d2:	e026      	b.n	800ca22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	68d8      	ldr	r0, [r3, #12]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9dc:	461a      	mov	r2, r3
 800c9de:	68b9      	ldr	r1, [r7, #8]
 800c9e0:	f003 fb35 	bl	801004e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	68da      	ldr	r2, [r3, #12]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ec:	425b      	negs	r3, r3
 800c9ee:	441a      	add	r2, r3
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	68da      	ldr	r2, [r3, #12]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d207      	bcs.n	800ca10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	689a      	ldr	r2, [r3, #8]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca08:	425b      	negs	r3, r3
 800ca0a:	441a      	add	r2, r3
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2b02      	cmp	r3, #2
 800ca14:	d105      	bne.n	800ca22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d002      	beq.n	800ca22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	1c5a      	adds	r2, r3, #1
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ca2a:	697b      	ldr	r3, [r7, #20]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3718      	adds	r7, #24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d018      	beq.n	800ca78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	68da      	ldr	r2, [r3, #12]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca4e:	441a      	add	r2, r3
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	68da      	ldr	r2, [r3, #12]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d303      	bcc.n	800ca68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	68d9      	ldr	r1, [r3, #12]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca70:	461a      	mov	r2, r3
 800ca72:	6838      	ldr	r0, [r7, #0]
 800ca74:	f003 faeb 	bl	801004e <memcpy>
	}
}
 800ca78:	bf00      	nop
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca88:	f001 fda6 	bl	800e5d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca94:	e011      	b.n	800caba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d012      	beq.n	800cac4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	3324      	adds	r3, #36	@ 0x24
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 fd5e 	bl	800d564 <xTaskRemoveFromEventList>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d001      	beq.n	800cab2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800caae:	f000 fe37 	bl	800d720 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cab2:	7bfb      	ldrb	r3, [r7, #15]
 800cab4:	3b01      	subs	r3, #1
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800caba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	dce9      	bgt.n	800ca96 <prvUnlockQueue+0x16>
 800cac2:	e000      	b.n	800cac6 <prvUnlockQueue+0x46>
					break;
 800cac4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	22ff      	movs	r2, #255	@ 0xff
 800caca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cace:	f001 fdb5 	bl	800e63c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cad2:	f001 fd81 	bl	800e5d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cadc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cade:	e011      	b.n	800cb04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	691b      	ldr	r3, [r3, #16]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d012      	beq.n	800cb0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	3310      	adds	r3, #16
 800caec:	4618      	mov	r0, r3
 800caee:	f000 fd39 	bl	800d564 <xTaskRemoveFromEventList>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800caf8:	f000 fe12 	bl	800d720 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cafc:	7bbb      	ldrb	r3, [r7, #14]
 800cafe:	3b01      	subs	r3, #1
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	dce9      	bgt.n	800cae0 <prvUnlockQueue+0x60>
 800cb0c:	e000      	b.n	800cb10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	22ff      	movs	r2, #255	@ 0xff
 800cb14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cb18:	f001 fd90 	bl	800e63c <vPortExitCritical>
}
 800cb1c:	bf00      	nop
 800cb1e:	3710      	adds	r7, #16
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb2c:	f001 fd54 	bl	800e5d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d102      	bne.n	800cb3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	60fb      	str	r3, [r7, #12]
 800cb3c:	e001      	b.n	800cb42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb42:	f001 fd7b 	bl	800e63c <vPortExitCritical>

	return xReturn;
 800cb46:	68fb      	ldr	r3, [r7, #12]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb58:	f001 fd3e 	bl	800e5d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d102      	bne.n	800cb6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	60fb      	str	r3, [r7, #12]
 800cb6c:	e001      	b.n	800cb72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb72:	f001 fd63 	bl	800e63c <vPortExitCritical>

	return xReturn;
 800cb76:	68fb      	ldr	r3, [r7, #12]
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cb80:	b480      	push	{r7}
 800cb82:	b085      	sub	sp, #20
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	60fb      	str	r3, [r7, #12]
 800cb8e:	e014      	b.n	800cbba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cb90:	4a0f      	ldr	r2, [pc, #60]	@ (800cbd0 <vQueueAddToRegistry+0x50>)
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10b      	bne.n	800cbb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cb9c:	490c      	ldr	r1, [pc, #48]	@ (800cbd0 <vQueueAddToRegistry+0x50>)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	683a      	ldr	r2, [r7, #0]
 800cba2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cba6:	4a0a      	ldr	r2, [pc, #40]	@ (800cbd0 <vQueueAddToRegistry+0x50>)
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	00db      	lsls	r3, r3, #3
 800cbac:	4413      	add	r3, r2
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cbb2:	e006      	b.n	800cbc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	60fb      	str	r3, [r7, #12]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2b07      	cmp	r3, #7
 800cbbe:	d9e7      	bls.n	800cb90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cbc0:	bf00      	nop
 800cbc2:	bf00      	nop
 800cbc4:	3714      	adds	r7, #20
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop
 800cbd0:	20001290 	.word	0x20001290

0800cbd4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbdc:	2300      	movs	r3, #0
 800cbde:	60fb      	str	r3, [r7, #12]
 800cbe0:	e016      	b.n	800cc10 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cbe2:	4a10      	ldr	r2, [pc, #64]	@ (800cc24 <vQueueUnregisterQueue+0x50>)
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	00db      	lsls	r3, r3, #3
 800cbe8:	4413      	add	r3, r2
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d10b      	bne.n	800cc0a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cbf2:	4a0c      	ldr	r2, [pc, #48]	@ (800cc24 <vQueueUnregisterQueue+0x50>)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2100      	movs	r1, #0
 800cbf8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cbfc:	4a09      	ldr	r2, [pc, #36]	@ (800cc24 <vQueueUnregisterQueue+0x50>)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	00db      	lsls	r3, r3, #3
 800cc02:	4413      	add	r3, r2
 800cc04:	2200      	movs	r2, #0
 800cc06:	605a      	str	r2, [r3, #4]
				break;
 800cc08:	e006      	b.n	800cc18 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	60fb      	str	r3, [r7, #12]
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2b07      	cmp	r3, #7
 800cc14:	d9e5      	bls.n	800cbe2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cc16:	bf00      	nop
 800cc18:	bf00      	nop
 800cc1a:	3714      	adds	r7, #20
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr
 800cc24:	20001290 	.word	0x20001290

0800cc28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b086      	sub	sp, #24
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cc38:	f001 fcce 	bl	800e5d8 <vPortEnterCritical>
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc42:	b25b      	sxtb	r3, r3
 800cc44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc48:	d103      	bne.n	800cc52 <vQueueWaitForMessageRestricted+0x2a>
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc58:	b25b      	sxtb	r3, r3
 800cc5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc5e:	d103      	bne.n	800cc68 <vQueueWaitForMessageRestricted+0x40>
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	2200      	movs	r2, #0
 800cc64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc68:	f001 fce8 	bl	800e63c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d106      	bne.n	800cc82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	3324      	adds	r3, #36	@ 0x24
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	68b9      	ldr	r1, [r7, #8]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 fc45 	bl	800d50c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cc82:	6978      	ldr	r0, [r7, #20]
 800cc84:	f7ff fefc 	bl	800ca80 <prvUnlockQueue>
	}
 800cc88:	bf00      	nop
 800cc8a:	3718      	adds	r7, #24
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b08e      	sub	sp, #56	@ 0x38
 800cc94:	af04      	add	r7, sp, #16
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	607a      	str	r2, [r7, #4]
 800cc9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cc9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d10b      	bne.n	800ccbc <xTaskCreateStatic+0x2c>
	__asm volatile
 800cca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca8:	f383 8811 	msr	BASEPRI, r3
 800ccac:	f3bf 8f6f 	isb	sy
 800ccb0:	f3bf 8f4f 	dsb	sy
 800ccb4:	623b      	str	r3, [r7, #32]
}
 800ccb6:	bf00      	nop
 800ccb8:	bf00      	nop
 800ccba:	e7fd      	b.n	800ccb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10b      	bne.n	800ccda <xTaskCreateStatic+0x4a>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc6:	f383 8811 	msr	BASEPRI, r3
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	61fb      	str	r3, [r7, #28]
}
 800ccd4:	bf00      	nop
 800ccd6:	bf00      	nop
 800ccd8:	e7fd      	b.n	800ccd6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ccda:	235c      	movs	r3, #92	@ 0x5c
 800ccdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	2b5c      	cmp	r3, #92	@ 0x5c
 800cce2:	d00b      	beq.n	800ccfc <xTaskCreateStatic+0x6c>
	__asm volatile
 800cce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce8:	f383 8811 	msr	BASEPRI, r3
 800ccec:	f3bf 8f6f 	isb	sy
 800ccf0:	f3bf 8f4f 	dsb	sy
 800ccf4:	61bb      	str	r3, [r7, #24]
}
 800ccf6:	bf00      	nop
 800ccf8:	bf00      	nop
 800ccfa:	e7fd      	b.n	800ccf8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ccfc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ccfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d01e      	beq.n	800cd42 <xTaskCreateStatic+0xb2>
 800cd04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d01b      	beq.n	800cd42 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd16:	2202      	movs	r2, #2
 800cd18:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	9303      	str	r3, [sp, #12]
 800cd20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd22:	9302      	str	r3, [sp, #8]
 800cd24:	f107 0314 	add.w	r3, r7, #20
 800cd28:	9301      	str	r3, [sp, #4]
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2c:	9300      	str	r3, [sp, #0]
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	68b9      	ldr	r1, [r7, #8]
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f000 f850 	bl	800cdda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd3c:	f000 f8de 	bl	800cefc <prvAddNewTaskToReadyList>
 800cd40:	e001      	b.n	800cd46 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cd42:	2300      	movs	r3, #0
 800cd44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cd46:	697b      	ldr	r3, [r7, #20]
	}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3728      	adds	r7, #40	@ 0x28
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b08c      	sub	sp, #48	@ 0x30
 800cd54:	af04      	add	r7, sp, #16
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	603b      	str	r3, [r7, #0]
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cd60:	88fb      	ldrh	r3, [r7, #6]
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4618      	mov	r0, r3
 800cd66:	f001 fd59 	bl	800e81c <pvPortMalloc>
 800cd6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d00e      	beq.n	800cd90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cd72:	205c      	movs	r0, #92	@ 0x5c
 800cd74:	f001 fd52 	bl	800e81c <pvPortMalloc>
 800cd78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d003      	beq.n	800cd88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	631a      	str	r2, [r3, #48]	@ 0x30
 800cd86:	e005      	b.n	800cd94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cd88:	6978      	ldr	r0, [r7, #20]
 800cd8a:	f001 fe15 	bl	800e9b8 <vPortFree>
 800cd8e:	e001      	b.n	800cd94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cd90:	2300      	movs	r3, #0
 800cd92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d017      	beq.n	800cdca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd9a:	69fb      	ldr	r3, [r7, #28]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cda2:	88fa      	ldrh	r2, [r7, #6]
 800cda4:	2300      	movs	r3, #0
 800cda6:	9303      	str	r3, [sp, #12]
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	9302      	str	r3, [sp, #8]
 800cdac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdae:	9301      	str	r3, [sp, #4]
 800cdb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb2:	9300      	str	r3, [sp, #0]
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	68b9      	ldr	r1, [r7, #8]
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f000 f80e 	bl	800cdda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cdbe:	69f8      	ldr	r0, [r7, #28]
 800cdc0:	f000 f89c 	bl	800cefc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	61bb      	str	r3, [r7, #24]
 800cdc8:	e002      	b.n	800cdd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cdca:	f04f 33ff 	mov.w	r3, #4294967295
 800cdce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cdd0:	69bb      	ldr	r3, [r7, #24]
	}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3720      	adds	r7, #32
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b088      	sub	sp, #32
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	60f8      	str	r0, [r7, #12]
 800cde2:	60b9      	str	r1, [r7, #8]
 800cde4:	607a      	str	r2, [r7, #4]
 800cde6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cde8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	009b      	lsls	r3, r3, #2
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	21a5      	movs	r1, #165	@ 0xa5
 800cdf4:	f003 f80b 	bl	800fe0e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cdf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce02:	3b01      	subs	r3, #1
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	4413      	add	r3, r2
 800ce08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	f023 0307 	bic.w	r3, r3, #7
 800ce10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	f003 0307 	and.w	r3, r3, #7
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00b      	beq.n	800ce34 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ce1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce20:	f383 8811 	msr	BASEPRI, r3
 800ce24:	f3bf 8f6f 	isb	sy
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	617b      	str	r3, [r7, #20]
}
 800ce2e:	bf00      	nop
 800ce30:	bf00      	nop
 800ce32:	e7fd      	b.n	800ce30 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d01f      	beq.n	800ce7a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	61fb      	str	r3, [r7, #28]
 800ce3e:	e012      	b.n	800ce66 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	69fb      	ldr	r3, [r7, #28]
 800ce44:	4413      	add	r3, r2
 800ce46:	7819      	ldrb	r1, [r3, #0]
 800ce48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	3334      	adds	r3, #52	@ 0x34
 800ce50:	460a      	mov	r2, r1
 800ce52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ce54:	68ba      	ldr	r2, [r7, #8]
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	4413      	add	r3, r2
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d006      	beq.n	800ce6e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	3301      	adds	r3, #1
 800ce64:	61fb      	str	r3, [r7, #28]
 800ce66:	69fb      	ldr	r3, [r7, #28]
 800ce68:	2b0f      	cmp	r3, #15
 800ce6a:	d9e9      	bls.n	800ce40 <prvInitialiseNewTask+0x66>
 800ce6c:	e000      	b.n	800ce70 <prvInitialiseNewTask+0x96>
			{
				break;
 800ce6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ce70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce72:	2200      	movs	r2, #0
 800ce74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ce78:	e003      	b.n	800ce82 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ce7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ce82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce84:	2b37      	cmp	r3, #55	@ 0x37
 800ce86:	d901      	bls.n	800ce8c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ce88:	2337      	movs	r3, #55	@ 0x37
 800ce8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ce8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce90:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ce92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce96:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ce98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ce9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea0:	3304      	adds	r3, #4
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7fe fd7c 	bl	800b9a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceaa:	3318      	adds	r3, #24
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7fe fd77 	bl	800b9a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cec6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceca:	2200      	movs	r2, #0
 800cecc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced0:	2200      	movs	r2, #0
 800ced2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ced6:	683a      	ldr	r2, [r7, #0]
 800ced8:	68f9      	ldr	r1, [r7, #12]
 800ceda:	69b8      	ldr	r0, [r7, #24]
 800cedc:	f001 fa4e 	bl	800e37c <pxPortInitialiseStack>
 800cee0:	4602      	mov	r2, r0
 800cee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d002      	beq.n	800cef2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ceec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cef0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cef2:	bf00      	nop
 800cef4:	3720      	adds	r7, #32
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
	...

0800cefc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf04:	f001 fb68 	bl	800e5d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf08:	4b2d      	ldr	r3, [pc, #180]	@ (800cfc0 <prvAddNewTaskToReadyList+0xc4>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	4a2c      	ldr	r2, [pc, #176]	@ (800cfc0 <prvAddNewTaskToReadyList+0xc4>)
 800cf10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf12:	4b2c      	ldr	r3, [pc, #176]	@ (800cfc4 <prvAddNewTaskToReadyList+0xc8>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d109      	bne.n	800cf2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cf1a:	4a2a      	ldr	r2, [pc, #168]	@ (800cfc4 <prvAddNewTaskToReadyList+0xc8>)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cf20:	4b27      	ldr	r3, [pc, #156]	@ (800cfc0 <prvAddNewTaskToReadyList+0xc4>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d110      	bne.n	800cf4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cf28:	f000 fc1e 	bl	800d768 <prvInitialiseTaskLists>
 800cf2c:	e00d      	b.n	800cf4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cf2e:	4b26      	ldr	r3, [pc, #152]	@ (800cfc8 <prvAddNewTaskToReadyList+0xcc>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d109      	bne.n	800cf4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cf36:	4b23      	ldr	r3, [pc, #140]	@ (800cfc4 <prvAddNewTaskToReadyList+0xc8>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d802      	bhi.n	800cf4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cf44:	4a1f      	ldr	r2, [pc, #124]	@ (800cfc4 <prvAddNewTaskToReadyList+0xc8>)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cf4a:	4b20      	ldr	r3, [pc, #128]	@ (800cfcc <prvAddNewTaskToReadyList+0xd0>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	3301      	adds	r3, #1
 800cf50:	4a1e      	ldr	r2, [pc, #120]	@ (800cfcc <prvAddNewTaskToReadyList+0xd0>)
 800cf52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cf54:	4b1d      	ldr	r3, [pc, #116]	@ (800cfcc <prvAddNewTaskToReadyList+0xd0>)
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf60:	4b1b      	ldr	r3, [pc, #108]	@ (800cfd0 <prvAddNewTaskToReadyList+0xd4>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d903      	bls.n	800cf70 <prvAddNewTaskToReadyList+0x74>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf6c:	4a18      	ldr	r2, [pc, #96]	@ (800cfd0 <prvAddNewTaskToReadyList+0xd4>)
 800cf6e:	6013      	str	r3, [r2, #0]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf74:	4613      	mov	r3, r2
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	4413      	add	r3, r2
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	4a15      	ldr	r2, [pc, #84]	@ (800cfd4 <prvAddNewTaskToReadyList+0xd8>)
 800cf7e:	441a      	add	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	3304      	adds	r3, #4
 800cf84:	4619      	mov	r1, r3
 800cf86:	4610      	mov	r0, r2
 800cf88:	f7fe fd17 	bl	800b9ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cf8c:	f001 fb56 	bl	800e63c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cf90:	4b0d      	ldr	r3, [pc, #52]	@ (800cfc8 <prvAddNewTaskToReadyList+0xcc>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00e      	beq.n	800cfb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf98:	4b0a      	ldr	r3, [pc, #40]	@ (800cfc4 <prvAddNewTaskToReadyList+0xc8>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d207      	bcs.n	800cfb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cfa6:	4b0c      	ldr	r3, [pc, #48]	@ (800cfd8 <prvAddNewTaskToReadyList+0xdc>)
 800cfa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfac:	601a      	str	r2, [r3, #0]
 800cfae:	f3bf 8f4f 	dsb	sy
 800cfb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfb6:	bf00      	nop
 800cfb8:	3708      	adds	r7, #8
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	200017a4 	.word	0x200017a4
 800cfc4:	200012d0 	.word	0x200012d0
 800cfc8:	200017b0 	.word	0x200017b0
 800cfcc:	200017c0 	.word	0x200017c0
 800cfd0:	200017ac 	.word	0x200017ac
 800cfd4:	200012d4 	.word	0x200012d4
 800cfd8:	e000ed04 	.word	0xe000ed04

0800cfdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d018      	beq.n	800d020 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cfee:	4b14      	ldr	r3, [pc, #80]	@ (800d040 <vTaskDelay+0x64>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00b      	beq.n	800d00e <vTaskDelay+0x32>
	__asm volatile
 800cff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cffa:	f383 8811 	msr	BASEPRI, r3
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	f3bf 8f4f 	dsb	sy
 800d006:	60bb      	str	r3, [r7, #8]
}
 800d008:	bf00      	nop
 800d00a:	bf00      	nop
 800d00c:	e7fd      	b.n	800d00a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d00e:	f000 f883 	bl	800d118 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d012:	2100      	movs	r1, #0
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fe03 	bl	800dc20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d01a:	f000 f88b 	bl	800d134 <xTaskResumeAll>
 800d01e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d107      	bne.n	800d036 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d026:	4b07      	ldr	r3, [pc, #28]	@ (800d044 <vTaskDelay+0x68>)
 800d028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	f3bf 8f4f 	dsb	sy
 800d032:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d036:	bf00      	nop
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	200017cc 	.word	0x200017cc
 800d044:	e000ed04 	.word	0xe000ed04

0800d048 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b08a      	sub	sp, #40	@ 0x28
 800d04c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d04e:	2300      	movs	r3, #0
 800d050:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d052:	2300      	movs	r3, #0
 800d054:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d056:	463a      	mov	r2, r7
 800d058:	1d39      	adds	r1, r7, #4
 800d05a:	f107 0308 	add.w	r3, r7, #8
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fe fc4a 	bl	800b8f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d064:	6839      	ldr	r1, [r7, #0]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	9202      	str	r2, [sp, #8]
 800d06c:	9301      	str	r3, [sp, #4]
 800d06e:	2300      	movs	r3, #0
 800d070:	9300      	str	r3, [sp, #0]
 800d072:	2300      	movs	r3, #0
 800d074:	460a      	mov	r2, r1
 800d076:	4922      	ldr	r1, [pc, #136]	@ (800d100 <vTaskStartScheduler+0xb8>)
 800d078:	4822      	ldr	r0, [pc, #136]	@ (800d104 <vTaskStartScheduler+0xbc>)
 800d07a:	f7ff fe09 	bl	800cc90 <xTaskCreateStatic>
 800d07e:	4603      	mov	r3, r0
 800d080:	4a21      	ldr	r2, [pc, #132]	@ (800d108 <vTaskStartScheduler+0xc0>)
 800d082:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d084:	4b20      	ldr	r3, [pc, #128]	@ (800d108 <vTaskStartScheduler+0xc0>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d002      	beq.n	800d092 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d08c:	2301      	movs	r3, #1
 800d08e:	617b      	str	r3, [r7, #20]
 800d090:	e001      	b.n	800d096 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d092:	2300      	movs	r3, #0
 800d094:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d102      	bne.n	800d0a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d09c:	f000 fe14 	bl	800dcc8 <xTimerCreateTimerTask>
 800d0a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d116      	bne.n	800d0d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d0a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ac:	f383 8811 	msr	BASEPRI, r3
 800d0b0:	f3bf 8f6f 	isb	sy
 800d0b4:	f3bf 8f4f 	dsb	sy
 800d0b8:	613b      	str	r3, [r7, #16]
}
 800d0ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d0bc:	4b13      	ldr	r3, [pc, #76]	@ (800d10c <vTaskStartScheduler+0xc4>)
 800d0be:	f04f 32ff 	mov.w	r2, #4294967295
 800d0c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d0c4:	4b12      	ldr	r3, [pc, #72]	@ (800d110 <vTaskStartScheduler+0xc8>)
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d0ca:	4b12      	ldr	r3, [pc, #72]	@ (800d114 <vTaskStartScheduler+0xcc>)
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d0d0:	f001 f9de 	bl	800e490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d0d4:	e00f      	b.n	800d0f6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0dc:	d10b      	bne.n	800d0f6 <vTaskStartScheduler+0xae>
	__asm volatile
 800d0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	60fb      	str	r3, [r7, #12]
}
 800d0f0:	bf00      	nop
 800d0f2:	bf00      	nop
 800d0f4:	e7fd      	b.n	800d0f2 <vTaskStartScheduler+0xaa>
}
 800d0f6:	bf00      	nop
 800d0f8:	3718      	adds	r7, #24
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	08014f74 	.word	0x08014f74
 800d104:	0800d739 	.word	0x0800d739
 800d108:	200017c8 	.word	0x200017c8
 800d10c:	200017c4 	.word	0x200017c4
 800d110:	200017b0 	.word	0x200017b0
 800d114:	200017a8 	.word	0x200017a8

0800d118 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d118:	b480      	push	{r7}
 800d11a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d11c:	4b04      	ldr	r3, [pc, #16]	@ (800d130 <vTaskSuspendAll+0x18>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	3301      	adds	r3, #1
 800d122:	4a03      	ldr	r2, [pc, #12]	@ (800d130 <vTaskSuspendAll+0x18>)
 800d124:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d126:	bf00      	nop
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	200017cc 	.word	0x200017cc

0800d134 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d13a:	2300      	movs	r3, #0
 800d13c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d13e:	2300      	movs	r3, #0
 800d140:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d142:	4b42      	ldr	r3, [pc, #264]	@ (800d24c <xTaskResumeAll+0x118>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d10b      	bne.n	800d162 <xTaskResumeAll+0x2e>
	__asm volatile
 800d14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d14e:	f383 8811 	msr	BASEPRI, r3
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	f3bf 8f4f 	dsb	sy
 800d15a:	603b      	str	r3, [r7, #0]
}
 800d15c:	bf00      	nop
 800d15e:	bf00      	nop
 800d160:	e7fd      	b.n	800d15e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d162:	f001 fa39 	bl	800e5d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d166:	4b39      	ldr	r3, [pc, #228]	@ (800d24c <xTaskResumeAll+0x118>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	3b01      	subs	r3, #1
 800d16c:	4a37      	ldr	r2, [pc, #220]	@ (800d24c <xTaskResumeAll+0x118>)
 800d16e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d170:	4b36      	ldr	r3, [pc, #216]	@ (800d24c <xTaskResumeAll+0x118>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d162      	bne.n	800d23e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d178:	4b35      	ldr	r3, [pc, #212]	@ (800d250 <xTaskResumeAll+0x11c>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d05e      	beq.n	800d23e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d180:	e02f      	b.n	800d1e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d182:	4b34      	ldr	r3, [pc, #208]	@ (800d254 <xTaskResumeAll+0x120>)
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	3318      	adds	r3, #24
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fe fc70 	bl	800ba74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	3304      	adds	r3, #4
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fe fc6b 	bl	800ba74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1a2:	4b2d      	ldr	r3, [pc, #180]	@ (800d258 <xTaskResumeAll+0x124>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d903      	bls.n	800d1b2 <xTaskResumeAll+0x7e>
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ae:	4a2a      	ldr	r2, [pc, #168]	@ (800d258 <xTaskResumeAll+0x124>)
 800d1b0:	6013      	str	r3, [r2, #0]
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4413      	add	r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	4a27      	ldr	r2, [pc, #156]	@ (800d25c <xTaskResumeAll+0x128>)
 800d1c0:	441a      	add	r2, r3
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	3304      	adds	r3, #4
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	4610      	mov	r0, r2
 800d1ca:	f7fe fbf6 	bl	800b9ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1d2:	4b23      	ldr	r3, [pc, #140]	@ (800d260 <xTaskResumeAll+0x12c>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d302      	bcc.n	800d1e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d1dc:	4b21      	ldr	r3, [pc, #132]	@ (800d264 <xTaskResumeAll+0x130>)
 800d1de:	2201      	movs	r2, #1
 800d1e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d1e2:	4b1c      	ldr	r3, [pc, #112]	@ (800d254 <xTaskResumeAll+0x120>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d1cb      	bne.n	800d182 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d001      	beq.n	800d1f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d1f0:	f000 fb58 	bl	800d8a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d1f4:	4b1c      	ldr	r3, [pc, #112]	@ (800d268 <xTaskResumeAll+0x134>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d010      	beq.n	800d222 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d200:	f000 f846 	bl	800d290 <xTaskIncrementTick>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d002      	beq.n	800d210 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d20a:	4b16      	ldr	r3, [pc, #88]	@ (800d264 <xTaskResumeAll+0x130>)
 800d20c:	2201      	movs	r2, #1
 800d20e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	3b01      	subs	r3, #1
 800d214:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d1f1      	bne.n	800d200 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d21c:	4b12      	ldr	r3, [pc, #72]	@ (800d268 <xTaskResumeAll+0x134>)
 800d21e:	2200      	movs	r2, #0
 800d220:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d222:	4b10      	ldr	r3, [pc, #64]	@ (800d264 <xTaskResumeAll+0x130>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d009      	beq.n	800d23e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d22a:	2301      	movs	r3, #1
 800d22c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d22e:	4b0f      	ldr	r3, [pc, #60]	@ (800d26c <xTaskResumeAll+0x138>)
 800d230:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d234:	601a      	str	r2, [r3, #0]
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d23e:	f001 f9fd 	bl	800e63c <vPortExitCritical>

	return xAlreadyYielded;
 800d242:	68bb      	ldr	r3, [r7, #8]
}
 800d244:	4618      	mov	r0, r3
 800d246:	3710      	adds	r7, #16
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	200017cc 	.word	0x200017cc
 800d250:	200017a4 	.word	0x200017a4
 800d254:	20001764 	.word	0x20001764
 800d258:	200017ac 	.word	0x200017ac
 800d25c:	200012d4 	.word	0x200012d4
 800d260:	200012d0 	.word	0x200012d0
 800d264:	200017b8 	.word	0x200017b8
 800d268:	200017b4 	.word	0x200017b4
 800d26c:	e000ed04 	.word	0xe000ed04

0800d270 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d270:	b480      	push	{r7}
 800d272:	b083      	sub	sp, #12
 800d274:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d276:	4b05      	ldr	r3, [pc, #20]	@ (800d28c <xTaskGetTickCount+0x1c>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d27c:	687b      	ldr	r3, [r7, #4]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	370c      	adds	r7, #12
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	200017a8 	.word	0x200017a8

0800d290 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b086      	sub	sp, #24
 800d294:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d296:	2300      	movs	r3, #0
 800d298:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d29a:	4b4f      	ldr	r3, [pc, #316]	@ (800d3d8 <xTaskIncrementTick+0x148>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	f040 8090 	bne.w	800d3c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d2a4:	4b4d      	ldr	r3, [pc, #308]	@ (800d3dc <xTaskIncrementTick+0x14c>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d2ac:	4a4b      	ldr	r2, [pc, #300]	@ (800d3dc <xTaskIncrementTick+0x14c>)
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d121      	bne.n	800d2fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d2b8:	4b49      	ldr	r3, [pc, #292]	@ (800d3e0 <xTaskIncrementTick+0x150>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d00b      	beq.n	800d2da <xTaskIncrementTick+0x4a>
	__asm volatile
 800d2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2c6:	f383 8811 	msr	BASEPRI, r3
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	f3bf 8f4f 	dsb	sy
 800d2d2:	603b      	str	r3, [r7, #0]
}
 800d2d4:	bf00      	nop
 800d2d6:	bf00      	nop
 800d2d8:	e7fd      	b.n	800d2d6 <xTaskIncrementTick+0x46>
 800d2da:	4b41      	ldr	r3, [pc, #260]	@ (800d3e0 <xTaskIncrementTick+0x150>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	60fb      	str	r3, [r7, #12]
 800d2e0:	4b40      	ldr	r3, [pc, #256]	@ (800d3e4 <xTaskIncrementTick+0x154>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a3e      	ldr	r2, [pc, #248]	@ (800d3e0 <xTaskIncrementTick+0x150>)
 800d2e6:	6013      	str	r3, [r2, #0]
 800d2e8:	4a3e      	ldr	r2, [pc, #248]	@ (800d3e4 <xTaskIncrementTick+0x154>)
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6013      	str	r3, [r2, #0]
 800d2ee:	4b3e      	ldr	r3, [pc, #248]	@ (800d3e8 <xTaskIncrementTick+0x158>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	4a3c      	ldr	r2, [pc, #240]	@ (800d3e8 <xTaskIncrementTick+0x158>)
 800d2f6:	6013      	str	r3, [r2, #0]
 800d2f8:	f000 fad4 	bl	800d8a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d2fc:	4b3b      	ldr	r3, [pc, #236]	@ (800d3ec <xTaskIncrementTick+0x15c>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	693a      	ldr	r2, [r7, #16]
 800d302:	429a      	cmp	r2, r3
 800d304:	d349      	bcc.n	800d39a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d306:	4b36      	ldr	r3, [pc, #216]	@ (800d3e0 <xTaskIncrementTick+0x150>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d104      	bne.n	800d31a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d310:	4b36      	ldr	r3, [pc, #216]	@ (800d3ec <xTaskIncrementTick+0x15c>)
 800d312:	f04f 32ff 	mov.w	r2, #4294967295
 800d316:	601a      	str	r2, [r3, #0]
					break;
 800d318:	e03f      	b.n	800d39a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d31a:	4b31      	ldr	r3, [pc, #196]	@ (800d3e0 <xTaskIncrementTick+0x150>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	68db      	ldr	r3, [r3, #12]
 800d322:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d32a:	693a      	ldr	r2, [r7, #16]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	429a      	cmp	r2, r3
 800d330:	d203      	bcs.n	800d33a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d332:	4a2e      	ldr	r2, [pc, #184]	@ (800d3ec <xTaskIncrementTick+0x15c>)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d338:	e02f      	b.n	800d39a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	3304      	adds	r3, #4
 800d33e:	4618      	mov	r0, r3
 800d340:	f7fe fb98 	bl	800ba74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d004      	beq.n	800d356 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	3318      	adds	r3, #24
 800d350:	4618      	mov	r0, r3
 800d352:	f7fe fb8f 	bl	800ba74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d35a:	4b25      	ldr	r3, [pc, #148]	@ (800d3f0 <xTaskIncrementTick+0x160>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d903      	bls.n	800d36a <xTaskIncrementTick+0xda>
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d366:	4a22      	ldr	r2, [pc, #136]	@ (800d3f0 <xTaskIncrementTick+0x160>)
 800d368:	6013      	str	r3, [r2, #0]
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d36e:	4613      	mov	r3, r2
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	4413      	add	r3, r2
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	4a1f      	ldr	r2, [pc, #124]	@ (800d3f4 <xTaskIncrementTick+0x164>)
 800d378:	441a      	add	r2, r3
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	3304      	adds	r3, #4
 800d37e:	4619      	mov	r1, r3
 800d380:	4610      	mov	r0, r2
 800d382:	f7fe fb1a 	bl	800b9ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d38a:	4b1b      	ldr	r3, [pc, #108]	@ (800d3f8 <xTaskIncrementTick+0x168>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d390:	429a      	cmp	r2, r3
 800d392:	d3b8      	bcc.n	800d306 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d394:	2301      	movs	r3, #1
 800d396:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d398:	e7b5      	b.n	800d306 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d39a:	4b17      	ldr	r3, [pc, #92]	@ (800d3f8 <xTaskIncrementTick+0x168>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3a0:	4914      	ldr	r1, [pc, #80]	@ (800d3f4 <xTaskIncrementTick+0x164>)
 800d3a2:	4613      	mov	r3, r2
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	4413      	add	r3, r2
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	440b      	add	r3, r1
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d901      	bls.n	800d3b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d3b6:	4b11      	ldr	r3, [pc, #68]	@ (800d3fc <xTaskIncrementTick+0x16c>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d007      	beq.n	800d3ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	617b      	str	r3, [r7, #20]
 800d3c2:	e004      	b.n	800d3ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d3c4:	4b0e      	ldr	r3, [pc, #56]	@ (800d400 <xTaskIncrementTick+0x170>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	4a0d      	ldr	r2, [pc, #52]	@ (800d400 <xTaskIncrementTick+0x170>)
 800d3cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d3ce:	697b      	ldr	r3, [r7, #20]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3718      	adds	r7, #24
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	200017cc 	.word	0x200017cc
 800d3dc:	200017a8 	.word	0x200017a8
 800d3e0:	2000175c 	.word	0x2000175c
 800d3e4:	20001760 	.word	0x20001760
 800d3e8:	200017bc 	.word	0x200017bc
 800d3ec:	200017c4 	.word	0x200017c4
 800d3f0:	200017ac 	.word	0x200017ac
 800d3f4:	200012d4 	.word	0x200012d4
 800d3f8:	200012d0 	.word	0x200012d0
 800d3fc:	200017b8 	.word	0x200017b8
 800d400:	200017b4 	.word	0x200017b4

0800d404 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d404:	b480      	push	{r7}
 800d406:	b085      	sub	sp, #20
 800d408:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d40a:	4b28      	ldr	r3, [pc, #160]	@ (800d4ac <vTaskSwitchContext+0xa8>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d003      	beq.n	800d41a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d412:	4b27      	ldr	r3, [pc, #156]	@ (800d4b0 <vTaskSwitchContext+0xac>)
 800d414:	2201      	movs	r2, #1
 800d416:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d418:	e042      	b.n	800d4a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800d41a:	4b25      	ldr	r3, [pc, #148]	@ (800d4b0 <vTaskSwitchContext+0xac>)
 800d41c:	2200      	movs	r2, #0
 800d41e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d420:	4b24      	ldr	r3, [pc, #144]	@ (800d4b4 <vTaskSwitchContext+0xb0>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	60fb      	str	r3, [r7, #12]
 800d426:	e011      	b.n	800d44c <vTaskSwitchContext+0x48>
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d10b      	bne.n	800d446 <vTaskSwitchContext+0x42>
	__asm volatile
 800d42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d432:	f383 8811 	msr	BASEPRI, r3
 800d436:	f3bf 8f6f 	isb	sy
 800d43a:	f3bf 8f4f 	dsb	sy
 800d43e:	607b      	str	r3, [r7, #4]
}
 800d440:	bf00      	nop
 800d442:	bf00      	nop
 800d444:	e7fd      	b.n	800d442 <vTaskSwitchContext+0x3e>
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	3b01      	subs	r3, #1
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	491a      	ldr	r1, [pc, #104]	@ (800d4b8 <vTaskSwitchContext+0xb4>)
 800d44e:	68fa      	ldr	r2, [r7, #12]
 800d450:	4613      	mov	r3, r2
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	4413      	add	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	440b      	add	r3, r1
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d0e3      	beq.n	800d428 <vTaskSwitchContext+0x24>
 800d460:	68fa      	ldr	r2, [r7, #12]
 800d462:	4613      	mov	r3, r2
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	4413      	add	r3, r2
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	4a13      	ldr	r2, [pc, #76]	@ (800d4b8 <vTaskSwitchContext+0xb4>)
 800d46c:	4413      	add	r3, r2
 800d46e:	60bb      	str	r3, [r7, #8]
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	685a      	ldr	r2, [r3, #4]
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	605a      	str	r2, [r3, #4]
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	685a      	ldr	r2, [r3, #4]
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	3308      	adds	r3, #8
 800d482:	429a      	cmp	r2, r3
 800d484:	d104      	bne.n	800d490 <vTaskSwitchContext+0x8c>
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	685a      	ldr	r2, [r3, #4]
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	605a      	str	r2, [r3, #4]
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	68db      	ldr	r3, [r3, #12]
 800d496:	4a09      	ldr	r2, [pc, #36]	@ (800d4bc <vTaskSwitchContext+0xb8>)
 800d498:	6013      	str	r3, [r2, #0]
 800d49a:	4a06      	ldr	r2, [pc, #24]	@ (800d4b4 <vTaskSwitchContext+0xb0>)
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	6013      	str	r3, [r2, #0]
}
 800d4a0:	bf00      	nop
 800d4a2:	3714      	adds	r7, #20
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	200017cc 	.word	0x200017cc
 800d4b0:	200017b8 	.word	0x200017b8
 800d4b4:	200017ac 	.word	0x200017ac
 800d4b8:	200012d4 	.word	0x200012d4
 800d4bc:	200012d0 	.word	0x200012d0

0800d4c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d10b      	bne.n	800d4e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d4:	f383 8811 	msr	BASEPRI, r3
 800d4d8:	f3bf 8f6f 	isb	sy
 800d4dc:	f3bf 8f4f 	dsb	sy
 800d4e0:	60fb      	str	r3, [r7, #12]
}
 800d4e2:	bf00      	nop
 800d4e4:	bf00      	nop
 800d4e6:	e7fd      	b.n	800d4e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4e8:	4b07      	ldr	r3, [pc, #28]	@ (800d508 <vTaskPlaceOnEventList+0x48>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3318      	adds	r3, #24
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7fe fa86 	bl	800ba02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d4f6:	2101      	movs	r1, #1
 800d4f8:	6838      	ldr	r0, [r7, #0]
 800d4fa:	f000 fb91 	bl	800dc20 <prvAddCurrentTaskToDelayedList>
}
 800d4fe:	bf00      	nop
 800d500:	3710      	adds	r7, #16
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	200012d0 	.word	0x200012d0

0800d50c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b086      	sub	sp, #24
 800d510:	af00      	add	r7, sp, #0
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d10b      	bne.n	800d536 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	617b      	str	r3, [r7, #20]
}
 800d530:	bf00      	nop
 800d532:	bf00      	nop
 800d534:	e7fd      	b.n	800d532 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d536:	4b0a      	ldr	r3, [pc, #40]	@ (800d560 <vTaskPlaceOnEventListRestricted+0x54>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	3318      	adds	r3, #24
 800d53c:	4619      	mov	r1, r3
 800d53e:	68f8      	ldr	r0, [r7, #12]
 800d540:	f7fe fa3b 	bl	800b9ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d002      	beq.n	800d550 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d54a:	f04f 33ff 	mov.w	r3, #4294967295
 800d54e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d550:	6879      	ldr	r1, [r7, #4]
 800d552:	68b8      	ldr	r0, [r7, #8]
 800d554:	f000 fb64 	bl	800dc20 <prvAddCurrentTaskToDelayedList>
	}
 800d558:	bf00      	nop
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	200012d0 	.word	0x200012d0

0800d564 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b086      	sub	sp, #24
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d10b      	bne.n	800d592 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d57e:	f383 8811 	msr	BASEPRI, r3
 800d582:	f3bf 8f6f 	isb	sy
 800d586:	f3bf 8f4f 	dsb	sy
 800d58a:	60fb      	str	r3, [r7, #12]
}
 800d58c:	bf00      	nop
 800d58e:	bf00      	nop
 800d590:	e7fd      	b.n	800d58e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	3318      	adds	r3, #24
 800d596:	4618      	mov	r0, r3
 800d598:	f7fe fa6c 	bl	800ba74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d59c:	4b1d      	ldr	r3, [pc, #116]	@ (800d614 <xTaskRemoveFromEventList+0xb0>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d11d      	bne.n	800d5e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	3304      	adds	r3, #4
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7fe fa63 	bl	800ba74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5b2:	4b19      	ldr	r3, [pc, #100]	@ (800d618 <xTaskRemoveFromEventList+0xb4>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d903      	bls.n	800d5c2 <xTaskRemoveFromEventList+0x5e>
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5be:	4a16      	ldr	r2, [pc, #88]	@ (800d618 <xTaskRemoveFromEventList+0xb4>)
 800d5c0:	6013      	str	r3, [r2, #0]
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	4413      	add	r3, r2
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	4a13      	ldr	r2, [pc, #76]	@ (800d61c <xTaskRemoveFromEventList+0xb8>)
 800d5d0:	441a      	add	r2, r3
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	3304      	adds	r3, #4
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	4610      	mov	r0, r2
 800d5da:	f7fe f9ee 	bl	800b9ba <vListInsertEnd>
 800d5de:	e005      	b.n	800d5ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	3318      	adds	r3, #24
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	480e      	ldr	r0, [pc, #56]	@ (800d620 <xTaskRemoveFromEventList+0xbc>)
 800d5e8:	f7fe f9e7 	bl	800b9ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800d624 <xTaskRemoveFromEventList+0xc0>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d905      	bls.n	800d606 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d5fe:	4b0a      	ldr	r3, [pc, #40]	@ (800d628 <xTaskRemoveFromEventList+0xc4>)
 800d600:	2201      	movs	r2, #1
 800d602:	601a      	str	r2, [r3, #0]
 800d604:	e001      	b.n	800d60a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d606:	2300      	movs	r3, #0
 800d608:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d60a:	697b      	ldr	r3, [r7, #20]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3718      	adds	r7, #24
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	200017cc 	.word	0x200017cc
 800d618:	200017ac 	.word	0x200017ac
 800d61c:	200012d4 	.word	0x200012d4
 800d620:	20001764 	.word	0x20001764
 800d624:	200012d0 	.word	0x200012d0
 800d628:	200017b8 	.word	0x200017b8

0800d62c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d634:	4b06      	ldr	r3, [pc, #24]	@ (800d650 <vTaskInternalSetTimeOutState+0x24>)
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d63c:	4b05      	ldr	r3, [pc, #20]	@ (800d654 <vTaskInternalSetTimeOutState+0x28>)
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	605a      	str	r2, [r3, #4]
}
 800d644:	bf00      	nop
 800d646:	370c      	adds	r7, #12
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr
 800d650:	200017bc 	.word	0x200017bc
 800d654:	200017a8 	.word	0x200017a8

0800d658 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b088      	sub	sp, #32
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d10b      	bne.n	800d680 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d66c:	f383 8811 	msr	BASEPRI, r3
 800d670:	f3bf 8f6f 	isb	sy
 800d674:	f3bf 8f4f 	dsb	sy
 800d678:	613b      	str	r3, [r7, #16]
}
 800d67a:	bf00      	nop
 800d67c:	bf00      	nop
 800d67e:	e7fd      	b.n	800d67c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d10b      	bne.n	800d69e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d68a:	f383 8811 	msr	BASEPRI, r3
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f3bf 8f4f 	dsb	sy
 800d696:	60fb      	str	r3, [r7, #12]
}
 800d698:	bf00      	nop
 800d69a:	bf00      	nop
 800d69c:	e7fd      	b.n	800d69a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d69e:	f000 ff9b 	bl	800e5d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d6a2:	4b1d      	ldr	r3, [pc, #116]	@ (800d718 <xTaskCheckForTimeOut+0xc0>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	69ba      	ldr	r2, [r7, #24]
 800d6ae:	1ad3      	subs	r3, r2, r3
 800d6b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ba:	d102      	bne.n	800d6c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	61fb      	str	r3, [r7, #28]
 800d6c0:	e023      	b.n	800d70a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	4b15      	ldr	r3, [pc, #84]	@ (800d71c <xTaskCheckForTimeOut+0xc4>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d007      	beq.n	800d6de <xTaskCheckForTimeOut+0x86>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	69ba      	ldr	r2, [r7, #24]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d302      	bcc.n	800d6de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	61fb      	str	r3, [r7, #28]
 800d6dc:	e015      	b.n	800d70a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	697a      	ldr	r2, [r7, #20]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d20b      	bcs.n	800d700 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	1ad2      	subs	r2, r2, r3
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f7ff ff99 	bl	800d62c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	61fb      	str	r3, [r7, #28]
 800d6fe:	e004      	b.n	800d70a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	2200      	movs	r2, #0
 800d704:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d706:	2301      	movs	r3, #1
 800d708:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d70a:	f000 ff97 	bl	800e63c <vPortExitCritical>

	return xReturn;
 800d70e:	69fb      	ldr	r3, [r7, #28]
}
 800d710:	4618      	mov	r0, r3
 800d712:	3720      	adds	r7, #32
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	200017a8 	.word	0x200017a8
 800d71c:	200017bc 	.word	0x200017bc

0800d720 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d720:	b480      	push	{r7}
 800d722:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d724:	4b03      	ldr	r3, [pc, #12]	@ (800d734 <vTaskMissedYield+0x14>)
 800d726:	2201      	movs	r2, #1
 800d728:	601a      	str	r2, [r3, #0]
}
 800d72a:	bf00      	nop
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr
 800d734:	200017b8 	.word	0x200017b8

0800d738 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d740:	f000 f852 	bl	800d7e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d744:	4b06      	ldr	r3, [pc, #24]	@ (800d760 <prvIdleTask+0x28>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d9f9      	bls.n	800d740 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d74c:	4b05      	ldr	r3, [pc, #20]	@ (800d764 <prvIdleTask+0x2c>)
 800d74e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d752:	601a      	str	r2, [r3, #0]
 800d754:	f3bf 8f4f 	dsb	sy
 800d758:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d75c:	e7f0      	b.n	800d740 <prvIdleTask+0x8>
 800d75e:	bf00      	nop
 800d760:	200012d4 	.word	0x200012d4
 800d764:	e000ed04 	.word	0xe000ed04

0800d768 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d76e:	2300      	movs	r3, #0
 800d770:	607b      	str	r3, [r7, #4]
 800d772:	e00c      	b.n	800d78e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	4613      	mov	r3, r2
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	4413      	add	r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	4a12      	ldr	r2, [pc, #72]	@ (800d7c8 <prvInitialiseTaskLists+0x60>)
 800d780:	4413      	add	r3, r2
 800d782:	4618      	mov	r0, r3
 800d784:	f7fe f8ec 	bl	800b960 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	3301      	adds	r3, #1
 800d78c:	607b      	str	r3, [r7, #4]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2b37      	cmp	r3, #55	@ 0x37
 800d792:	d9ef      	bls.n	800d774 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d794:	480d      	ldr	r0, [pc, #52]	@ (800d7cc <prvInitialiseTaskLists+0x64>)
 800d796:	f7fe f8e3 	bl	800b960 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d79a:	480d      	ldr	r0, [pc, #52]	@ (800d7d0 <prvInitialiseTaskLists+0x68>)
 800d79c:	f7fe f8e0 	bl	800b960 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d7a0:	480c      	ldr	r0, [pc, #48]	@ (800d7d4 <prvInitialiseTaskLists+0x6c>)
 800d7a2:	f7fe f8dd 	bl	800b960 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d7a6:	480c      	ldr	r0, [pc, #48]	@ (800d7d8 <prvInitialiseTaskLists+0x70>)
 800d7a8:	f7fe f8da 	bl	800b960 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d7ac:	480b      	ldr	r0, [pc, #44]	@ (800d7dc <prvInitialiseTaskLists+0x74>)
 800d7ae:	f7fe f8d7 	bl	800b960 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d7b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d7e0 <prvInitialiseTaskLists+0x78>)
 800d7b4:	4a05      	ldr	r2, [pc, #20]	@ (800d7cc <prvInitialiseTaskLists+0x64>)
 800d7b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800d7e4 <prvInitialiseTaskLists+0x7c>)
 800d7ba:	4a05      	ldr	r2, [pc, #20]	@ (800d7d0 <prvInitialiseTaskLists+0x68>)
 800d7bc:	601a      	str	r2, [r3, #0]
}
 800d7be:	bf00      	nop
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	200012d4 	.word	0x200012d4
 800d7cc:	20001734 	.word	0x20001734
 800d7d0:	20001748 	.word	0x20001748
 800d7d4:	20001764 	.word	0x20001764
 800d7d8:	20001778 	.word	0x20001778
 800d7dc:	20001790 	.word	0x20001790
 800d7e0:	2000175c 	.word	0x2000175c
 800d7e4:	20001760 	.word	0x20001760

0800d7e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d7ee:	e019      	b.n	800d824 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d7f0:	f000 fef2 	bl	800e5d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7f4:	4b10      	ldr	r3, [pc, #64]	@ (800d838 <prvCheckTasksWaitingTermination+0x50>)
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	3304      	adds	r3, #4
 800d800:	4618      	mov	r0, r3
 800d802:	f7fe f937 	bl	800ba74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d806:	4b0d      	ldr	r3, [pc, #52]	@ (800d83c <prvCheckTasksWaitingTermination+0x54>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	3b01      	subs	r3, #1
 800d80c:	4a0b      	ldr	r2, [pc, #44]	@ (800d83c <prvCheckTasksWaitingTermination+0x54>)
 800d80e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d810:	4b0b      	ldr	r3, [pc, #44]	@ (800d840 <prvCheckTasksWaitingTermination+0x58>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	3b01      	subs	r3, #1
 800d816:	4a0a      	ldr	r2, [pc, #40]	@ (800d840 <prvCheckTasksWaitingTermination+0x58>)
 800d818:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d81a:	f000 ff0f 	bl	800e63c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 f810 	bl	800d844 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d824:	4b06      	ldr	r3, [pc, #24]	@ (800d840 <prvCheckTasksWaitingTermination+0x58>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d1e1      	bne.n	800d7f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d82c:	bf00      	nop
 800d82e:	bf00      	nop
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	20001778 	.word	0x20001778
 800d83c:	200017a4 	.word	0x200017a4
 800d840:	2000178c 	.word	0x2000178c

0800d844 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d852:	2b00      	cmp	r3, #0
 800d854:	d108      	bne.n	800d868 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d85a:	4618      	mov	r0, r3
 800d85c:	f001 f8ac 	bl	800e9b8 <vPortFree>
				vPortFree( pxTCB );
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f001 f8a9 	bl	800e9b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d866:	e019      	b.n	800d89c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d86e:	2b01      	cmp	r3, #1
 800d870:	d103      	bne.n	800d87a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f001 f8a0 	bl	800e9b8 <vPortFree>
	}
 800d878:	e010      	b.n	800d89c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d880:	2b02      	cmp	r3, #2
 800d882:	d00b      	beq.n	800d89c <prvDeleteTCB+0x58>
	__asm volatile
 800d884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d888:	f383 8811 	msr	BASEPRI, r3
 800d88c:	f3bf 8f6f 	isb	sy
 800d890:	f3bf 8f4f 	dsb	sy
 800d894:	60fb      	str	r3, [r7, #12]
}
 800d896:	bf00      	nop
 800d898:	bf00      	nop
 800d89a:	e7fd      	b.n	800d898 <prvDeleteTCB+0x54>
	}
 800d89c:	bf00      	nop
 800d89e:	3710      	adds	r7, #16
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d8aa:	4b0c      	ldr	r3, [pc, #48]	@ (800d8dc <prvResetNextTaskUnblockTime+0x38>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d104      	bne.n	800d8be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d8b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d8e0 <prvResetNextTaskUnblockTime+0x3c>)
 800d8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d8bc:	e008      	b.n	800d8d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8be:	4b07      	ldr	r3, [pc, #28]	@ (800d8dc <prvResetNextTaskUnblockTime+0x38>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	4a04      	ldr	r2, [pc, #16]	@ (800d8e0 <prvResetNextTaskUnblockTime+0x3c>)
 800d8ce:	6013      	str	r3, [r2, #0]
}
 800d8d0:	bf00      	nop
 800d8d2:	370c      	adds	r7, #12
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr
 800d8dc:	2000175c 	.word	0x2000175c
 800d8e0:	200017c4 	.word	0x200017c4

0800d8e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d8ea:	4b05      	ldr	r3, [pc, #20]	@ (800d900 <xTaskGetCurrentTaskHandle+0x1c>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d8f0:	687b      	ldr	r3, [r7, #4]
	}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	370c      	adds	r7, #12
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	200012d0 	.word	0x200012d0

0800d904 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d90a:	4b0b      	ldr	r3, [pc, #44]	@ (800d938 <xTaskGetSchedulerState+0x34>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d102      	bne.n	800d918 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d912:	2301      	movs	r3, #1
 800d914:	607b      	str	r3, [r7, #4]
 800d916:	e008      	b.n	800d92a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d918:	4b08      	ldr	r3, [pc, #32]	@ (800d93c <xTaskGetSchedulerState+0x38>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d102      	bne.n	800d926 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d920:	2302      	movs	r3, #2
 800d922:	607b      	str	r3, [r7, #4]
 800d924:	e001      	b.n	800d92a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d926:	2300      	movs	r3, #0
 800d928:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d92a:	687b      	ldr	r3, [r7, #4]
	}
 800d92c:	4618      	mov	r0, r3
 800d92e:	370c      	adds	r7, #12
 800d930:	46bd      	mov	sp, r7
 800d932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d936:	4770      	bx	lr
 800d938:	200017b0 	.word	0x200017b0
 800d93c:	200017cc 	.word	0x200017cc

0800d940 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d94c:	2300      	movs	r3, #0
 800d94e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d051      	beq.n	800d9fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d95a:	4b2a      	ldr	r3, [pc, #168]	@ (800da04 <xTaskPriorityInherit+0xc4>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d960:	429a      	cmp	r2, r3
 800d962:	d241      	bcs.n	800d9e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	699b      	ldr	r3, [r3, #24]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	db06      	blt.n	800d97a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d96c:	4b25      	ldr	r3, [pc, #148]	@ (800da04 <xTaskPriorityInherit+0xc4>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d972:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	6959      	ldr	r1, [r3, #20]
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d982:	4613      	mov	r3, r2
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	4413      	add	r3, r2
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	4a1f      	ldr	r2, [pc, #124]	@ (800da08 <xTaskPriorityInherit+0xc8>)
 800d98c:	4413      	add	r3, r2
 800d98e:	4299      	cmp	r1, r3
 800d990:	d122      	bne.n	800d9d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	3304      	adds	r3, #4
 800d996:	4618      	mov	r0, r3
 800d998:	f7fe f86c 	bl	800ba74 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d99c:	4b19      	ldr	r3, [pc, #100]	@ (800da04 <xTaskPriorityInherit+0xc4>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9aa:	4b18      	ldr	r3, [pc, #96]	@ (800da0c <xTaskPriorityInherit+0xcc>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d903      	bls.n	800d9ba <xTaskPriorityInherit+0x7a>
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b6:	4a15      	ldr	r2, [pc, #84]	@ (800da0c <xTaskPriorityInherit+0xcc>)
 800d9b8:	6013      	str	r3, [r2, #0]
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9be:	4613      	mov	r3, r2
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	4413      	add	r3, r2
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	4a10      	ldr	r2, [pc, #64]	@ (800da08 <xTaskPriorityInherit+0xc8>)
 800d9c8:	441a      	add	r2, r3
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	3304      	adds	r3, #4
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	4610      	mov	r0, r2
 800d9d2:	f7fd fff2 	bl	800b9ba <vListInsertEnd>
 800d9d6:	e004      	b.n	800d9e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d9d8:	4b0a      	ldr	r3, [pc, #40]	@ (800da04 <xTaskPriorityInherit+0xc4>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	60fb      	str	r3, [r7, #12]
 800d9e6:	e008      	b.n	800d9fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9ec:	4b05      	ldr	r3, [pc, #20]	@ (800da04 <xTaskPriorityInherit+0xc4>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d201      	bcs.n	800d9fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
	}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3710      	adds	r7, #16
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	200012d0 	.word	0x200012d0
 800da08:	200012d4 	.word	0x200012d4
 800da0c:	200017ac 	.word	0x200017ac

0800da10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800da10:	b580      	push	{r7, lr}
 800da12:	b086      	sub	sp, #24
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800da1c:	2300      	movs	r3, #0
 800da1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d058      	beq.n	800dad8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800da26:	4b2f      	ldr	r3, [pc, #188]	@ (800dae4 <xTaskPriorityDisinherit+0xd4>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	693a      	ldr	r2, [r7, #16]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d00b      	beq.n	800da48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800da30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da34:	f383 8811 	msr	BASEPRI, r3
 800da38:	f3bf 8f6f 	isb	sy
 800da3c:	f3bf 8f4f 	dsb	sy
 800da40:	60fb      	str	r3, [r7, #12]
}
 800da42:	bf00      	nop
 800da44:	bf00      	nop
 800da46:	e7fd      	b.n	800da44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d10b      	bne.n	800da68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800da50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da54:	f383 8811 	msr	BASEPRI, r3
 800da58:	f3bf 8f6f 	isb	sy
 800da5c:	f3bf 8f4f 	dsb	sy
 800da60:	60bb      	str	r3, [r7, #8]
}
 800da62:	bf00      	nop
 800da64:	bf00      	nop
 800da66:	e7fd      	b.n	800da64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da6c:	1e5a      	subs	r2, r3, #1
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d02c      	beq.n	800dad8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da82:	2b00      	cmp	r3, #0
 800da84:	d128      	bne.n	800dad8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	3304      	adds	r3, #4
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7fd fff2 	bl	800ba74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daa8:	4b0f      	ldr	r3, [pc, #60]	@ (800dae8 <xTaskPriorityDisinherit+0xd8>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	429a      	cmp	r2, r3
 800daae:	d903      	bls.n	800dab8 <xTaskPriorityDisinherit+0xa8>
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dab4:	4a0c      	ldr	r2, [pc, #48]	@ (800dae8 <xTaskPriorityDisinherit+0xd8>)
 800dab6:	6013      	str	r3, [r2, #0]
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dabc:	4613      	mov	r3, r2
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	4413      	add	r3, r2
 800dac2:	009b      	lsls	r3, r3, #2
 800dac4:	4a09      	ldr	r2, [pc, #36]	@ (800daec <xTaskPriorityDisinherit+0xdc>)
 800dac6:	441a      	add	r2, r3
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	3304      	adds	r3, #4
 800dacc:	4619      	mov	r1, r3
 800dace:	4610      	mov	r0, r2
 800dad0:	f7fd ff73 	bl	800b9ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dad4:	2301      	movs	r3, #1
 800dad6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dad8:	697b      	ldr	r3, [r7, #20]
	}
 800dada:	4618      	mov	r0, r3
 800dadc:	3718      	adds	r7, #24
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	200012d0 	.word	0x200012d0
 800dae8:	200017ac 	.word	0x200017ac
 800daec:	200012d4 	.word	0x200012d4

0800daf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b088      	sub	sp, #32
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dafe:	2301      	movs	r3, #1
 800db00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d06c      	beq.n	800dbe2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800db08:	69bb      	ldr	r3, [r7, #24]
 800db0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10b      	bne.n	800db28 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800db10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db14:	f383 8811 	msr	BASEPRI, r3
 800db18:	f3bf 8f6f 	isb	sy
 800db1c:	f3bf 8f4f 	dsb	sy
 800db20:	60fb      	str	r3, [r7, #12]
}
 800db22:	bf00      	nop
 800db24:	bf00      	nop
 800db26:	e7fd      	b.n	800db24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db2c:	683a      	ldr	r2, [r7, #0]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d902      	bls.n	800db38 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	61fb      	str	r3, [r7, #28]
 800db36:	e002      	b.n	800db3e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db3c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db42:	69fa      	ldr	r2, [r7, #28]
 800db44:	429a      	cmp	r2, r3
 800db46:	d04c      	beq.n	800dbe2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800db48:	69bb      	ldr	r3, [r7, #24]
 800db4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db4c:	697a      	ldr	r2, [r7, #20]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d147      	bne.n	800dbe2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800db52:	4b26      	ldr	r3, [pc, #152]	@ (800dbec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	69ba      	ldr	r2, [r7, #24]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d10b      	bne.n	800db74 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800db5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db60:	f383 8811 	msr	BASEPRI, r3
 800db64:	f3bf 8f6f 	isb	sy
 800db68:	f3bf 8f4f 	dsb	sy
 800db6c:	60bb      	str	r3, [r7, #8]
}
 800db6e:	bf00      	nop
 800db70:	bf00      	nop
 800db72:	e7fd      	b.n	800db70 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	69fa      	ldr	r2, [r7, #28]
 800db7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db80:	69bb      	ldr	r3, [r7, #24]
 800db82:	699b      	ldr	r3, [r3, #24]
 800db84:	2b00      	cmp	r3, #0
 800db86:	db04      	blt.n	800db92 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800db92:	69bb      	ldr	r3, [r7, #24]
 800db94:	6959      	ldr	r1, [r3, #20]
 800db96:	693a      	ldr	r2, [r7, #16]
 800db98:	4613      	mov	r3, r2
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	4413      	add	r3, r2
 800db9e:	009b      	lsls	r3, r3, #2
 800dba0:	4a13      	ldr	r2, [pc, #76]	@ (800dbf0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dba2:	4413      	add	r3, r2
 800dba4:	4299      	cmp	r1, r3
 800dba6:	d11c      	bne.n	800dbe2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	3304      	adds	r3, #4
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7fd ff61 	bl	800ba74 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbb6:	4b0f      	ldr	r3, [pc, #60]	@ (800dbf4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d903      	bls.n	800dbc6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc2:	4a0c      	ldr	r2, [pc, #48]	@ (800dbf4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dbc4:	6013      	str	r3, [r2, #0]
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbca:	4613      	mov	r3, r2
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	4413      	add	r3, r2
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	4a07      	ldr	r2, [pc, #28]	@ (800dbf0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dbd4:	441a      	add	r2, r3
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	3304      	adds	r3, #4
 800dbda:	4619      	mov	r1, r3
 800dbdc:	4610      	mov	r0, r2
 800dbde:	f7fd feec 	bl	800b9ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbe2:	bf00      	nop
 800dbe4:	3720      	adds	r7, #32
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop
 800dbec:	200012d0 	.word	0x200012d0
 800dbf0:	200012d4 	.word	0x200012d4
 800dbf4:	200017ac 	.word	0x200017ac

0800dbf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dbf8:	b480      	push	{r7}
 800dbfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dbfc:	4b07      	ldr	r3, [pc, #28]	@ (800dc1c <pvTaskIncrementMutexHeldCount+0x24>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d004      	beq.n	800dc0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dc04:	4b05      	ldr	r3, [pc, #20]	@ (800dc1c <pvTaskIncrementMutexHeldCount+0x24>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc0a:	3201      	adds	r2, #1
 800dc0c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800dc0e:	4b03      	ldr	r3, [pc, #12]	@ (800dc1c <pvTaskIncrementMutexHeldCount+0x24>)
 800dc10:	681b      	ldr	r3, [r3, #0]
	}
 800dc12:	4618      	mov	r0, r3
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr
 800dc1c:	200012d0 	.word	0x200012d0

0800dc20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dc2a:	4b21      	ldr	r3, [pc, #132]	@ (800dcb0 <prvAddCurrentTaskToDelayedList+0x90>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc30:	4b20      	ldr	r3, [pc, #128]	@ (800dcb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	3304      	adds	r3, #4
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fd ff1c 	bl	800ba74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc42:	d10a      	bne.n	800dc5a <prvAddCurrentTaskToDelayedList+0x3a>
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d007      	beq.n	800dc5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc4a:	4b1a      	ldr	r3, [pc, #104]	@ (800dcb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	3304      	adds	r3, #4
 800dc50:	4619      	mov	r1, r3
 800dc52:	4819      	ldr	r0, [pc, #100]	@ (800dcb8 <prvAddCurrentTaskToDelayedList+0x98>)
 800dc54:	f7fd feb1 	bl	800b9ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc58:	e026      	b.n	800dca8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc5a:	68fa      	ldr	r2, [r7, #12]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4413      	add	r3, r2
 800dc60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc62:	4b14      	ldr	r3, [pc, #80]	@ (800dcb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	68ba      	ldr	r2, [r7, #8]
 800dc68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc6a:	68ba      	ldr	r2, [r7, #8]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d209      	bcs.n	800dc86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc72:	4b12      	ldr	r3, [pc, #72]	@ (800dcbc <prvAddCurrentTaskToDelayedList+0x9c>)
 800dc74:	681a      	ldr	r2, [r3, #0]
 800dc76:	4b0f      	ldr	r3, [pc, #60]	@ (800dcb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	3304      	adds	r3, #4
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	4610      	mov	r0, r2
 800dc80:	f7fd febf 	bl	800ba02 <vListInsert>
}
 800dc84:	e010      	b.n	800dca8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc86:	4b0e      	ldr	r3, [pc, #56]	@ (800dcc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	4b0a      	ldr	r3, [pc, #40]	@ (800dcb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	3304      	adds	r3, #4
 800dc90:	4619      	mov	r1, r3
 800dc92:	4610      	mov	r0, r2
 800dc94:	f7fd feb5 	bl	800ba02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc98:	4b0a      	ldr	r3, [pc, #40]	@ (800dcc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d202      	bcs.n	800dca8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dca2:	4a08      	ldr	r2, [pc, #32]	@ (800dcc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	6013      	str	r3, [r2, #0]
}
 800dca8:	bf00      	nop
 800dcaa:	3710      	adds	r7, #16
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	200017a8 	.word	0x200017a8
 800dcb4:	200012d0 	.word	0x200012d0
 800dcb8:	20001790 	.word	0x20001790
 800dcbc:	20001760 	.word	0x20001760
 800dcc0:	2000175c 	.word	0x2000175c
 800dcc4:	200017c4 	.word	0x200017c4

0800dcc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b08a      	sub	sp, #40	@ 0x28
 800dccc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dcd2:	f000 fb13 	bl	800e2fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dcd6:	4b1d      	ldr	r3, [pc, #116]	@ (800dd4c <xTimerCreateTimerTask+0x84>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d021      	beq.n	800dd22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dcde:	2300      	movs	r3, #0
 800dce0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dce2:	2300      	movs	r3, #0
 800dce4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dce6:	1d3a      	adds	r2, r7, #4
 800dce8:	f107 0108 	add.w	r1, r7, #8
 800dcec:	f107 030c 	add.w	r3, r7, #12
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7fd fe1b 	bl	800b92c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dcf6:	6879      	ldr	r1, [r7, #4]
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	9202      	str	r2, [sp, #8]
 800dcfe:	9301      	str	r3, [sp, #4]
 800dd00:	2302      	movs	r3, #2
 800dd02:	9300      	str	r3, [sp, #0]
 800dd04:	2300      	movs	r3, #0
 800dd06:	460a      	mov	r2, r1
 800dd08:	4911      	ldr	r1, [pc, #68]	@ (800dd50 <xTimerCreateTimerTask+0x88>)
 800dd0a:	4812      	ldr	r0, [pc, #72]	@ (800dd54 <xTimerCreateTimerTask+0x8c>)
 800dd0c:	f7fe ffc0 	bl	800cc90 <xTaskCreateStatic>
 800dd10:	4603      	mov	r3, r0
 800dd12:	4a11      	ldr	r2, [pc, #68]	@ (800dd58 <xTimerCreateTimerTask+0x90>)
 800dd14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dd16:	4b10      	ldr	r3, [pc, #64]	@ (800dd58 <xTimerCreateTimerTask+0x90>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d001      	beq.n	800dd22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dd1e:	2301      	movs	r3, #1
 800dd20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d10b      	bne.n	800dd40 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dd28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd2c:	f383 8811 	msr	BASEPRI, r3
 800dd30:	f3bf 8f6f 	isb	sy
 800dd34:	f3bf 8f4f 	dsb	sy
 800dd38:	613b      	str	r3, [r7, #16]
}
 800dd3a:	bf00      	nop
 800dd3c:	bf00      	nop
 800dd3e:	e7fd      	b.n	800dd3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dd40:	697b      	ldr	r3, [r7, #20]
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3718      	adds	r7, #24
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	20001800 	.word	0x20001800
 800dd50:	08014f7c 	.word	0x08014f7c
 800dd54:	0800de95 	.word	0x0800de95
 800dd58:	20001804 	.word	0x20001804

0800dd5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b08a      	sub	sp, #40	@ 0x28
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
 800dd68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d10b      	bne.n	800dd8c <xTimerGenericCommand+0x30>
	__asm volatile
 800dd74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd78:	f383 8811 	msr	BASEPRI, r3
 800dd7c:	f3bf 8f6f 	isb	sy
 800dd80:	f3bf 8f4f 	dsb	sy
 800dd84:	623b      	str	r3, [r7, #32]
}
 800dd86:	bf00      	nop
 800dd88:	bf00      	nop
 800dd8a:	e7fd      	b.n	800dd88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dd8c:	4b19      	ldr	r3, [pc, #100]	@ (800ddf4 <xTimerGenericCommand+0x98>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d02a      	beq.n	800ddea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	2b05      	cmp	r3, #5
 800dda4:	dc18      	bgt.n	800ddd8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dda6:	f7ff fdad 	bl	800d904 <xTaskGetSchedulerState>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	2b02      	cmp	r3, #2
 800ddae:	d109      	bne.n	800ddc4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ddb0:	4b10      	ldr	r3, [pc, #64]	@ (800ddf4 <xTimerGenericCommand+0x98>)
 800ddb2:	6818      	ldr	r0, [r3, #0]
 800ddb4:	f107 0110 	add.w	r1, r7, #16
 800ddb8:	2300      	movs	r3, #0
 800ddba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddbc:	f7fe f8f0 	bl	800bfa0 <xQueueGenericSend>
 800ddc0:	6278      	str	r0, [r7, #36]	@ 0x24
 800ddc2:	e012      	b.n	800ddea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ddc4:	4b0b      	ldr	r3, [pc, #44]	@ (800ddf4 <xTimerGenericCommand+0x98>)
 800ddc6:	6818      	ldr	r0, [r3, #0]
 800ddc8:	f107 0110 	add.w	r1, r7, #16
 800ddcc:	2300      	movs	r3, #0
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f7fe f8e6 	bl	800bfa0 <xQueueGenericSend>
 800ddd4:	6278      	str	r0, [r7, #36]	@ 0x24
 800ddd6:	e008      	b.n	800ddea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ddd8:	4b06      	ldr	r3, [pc, #24]	@ (800ddf4 <xTimerGenericCommand+0x98>)
 800ddda:	6818      	ldr	r0, [r3, #0]
 800dddc:	f107 0110 	add.w	r1, r7, #16
 800dde0:	2300      	movs	r3, #0
 800dde2:	683a      	ldr	r2, [r7, #0]
 800dde4:	f7fe f9de 	bl	800c1a4 <xQueueGenericSendFromISR>
 800dde8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ddea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3728      	adds	r7, #40	@ 0x28
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	20001800 	.word	0x20001800

0800ddf8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b088      	sub	sp, #32
 800ddfc:	af02      	add	r7, sp, #8
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de02:	4b23      	ldr	r3, [pc, #140]	@ (800de90 <prvProcessExpiredTimer+0x98>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	68db      	ldr	r3, [r3, #12]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	3304      	adds	r3, #4
 800de10:	4618      	mov	r0, r3
 800de12:	f7fd fe2f 	bl	800ba74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de1c:	f003 0304 	and.w	r3, r3, #4
 800de20:	2b00      	cmp	r3, #0
 800de22:	d023      	beq.n	800de6c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	699a      	ldr	r2, [r3, #24]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	18d1      	adds	r1, r2, r3
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	683a      	ldr	r2, [r7, #0]
 800de30:	6978      	ldr	r0, [r7, #20]
 800de32:	f000 f8d5 	bl	800dfe0 <prvInsertTimerInActiveList>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d020      	beq.n	800de7e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de3c:	2300      	movs	r3, #0
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	2300      	movs	r3, #0
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	2100      	movs	r1, #0
 800de46:	6978      	ldr	r0, [r7, #20]
 800de48:	f7ff ff88 	bl	800dd5c <xTimerGenericCommand>
 800de4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d114      	bne.n	800de7e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800de54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de58:	f383 8811 	msr	BASEPRI, r3
 800de5c:	f3bf 8f6f 	isb	sy
 800de60:	f3bf 8f4f 	dsb	sy
 800de64:	60fb      	str	r3, [r7, #12]
}
 800de66:	bf00      	nop
 800de68:	bf00      	nop
 800de6a:	e7fd      	b.n	800de68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de72:	f023 0301 	bic.w	r3, r3, #1
 800de76:	b2da      	uxtb	r2, r3
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	6a1b      	ldr	r3, [r3, #32]
 800de82:	6978      	ldr	r0, [r7, #20]
 800de84:	4798      	blx	r3
}
 800de86:	bf00      	nop
 800de88:	3718      	adds	r7, #24
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	200017f8 	.word	0x200017f8

0800de94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800de9c:	f107 0308 	add.w	r3, r7, #8
 800dea0:	4618      	mov	r0, r3
 800dea2:	f000 f859 	bl	800df58 <prvGetNextExpireTime>
 800dea6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	4619      	mov	r1, r3
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f000 f805 	bl	800debc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800deb2:	f000 f8d7 	bl	800e064 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800deb6:	bf00      	nop
 800deb8:	e7f0      	b.n	800de9c <prvTimerTask+0x8>
	...

0800debc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dec6:	f7ff f927 	bl	800d118 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800deca:	f107 0308 	add.w	r3, r7, #8
 800dece:	4618      	mov	r0, r3
 800ded0:	f000 f866 	bl	800dfa0 <prvSampleTimeNow>
 800ded4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d130      	bne.n	800df3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d10a      	bne.n	800def8 <prvProcessTimerOrBlockTask+0x3c>
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d806      	bhi.n	800def8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800deea:	f7ff f923 	bl	800d134 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800deee:	68f9      	ldr	r1, [r7, #12]
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f7ff ff81 	bl	800ddf8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800def6:	e024      	b.n	800df42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d008      	beq.n	800df10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800defe:	4b13      	ldr	r3, [pc, #76]	@ (800df4c <prvProcessTimerOrBlockTask+0x90>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d101      	bne.n	800df0c <prvProcessTimerOrBlockTask+0x50>
 800df08:	2301      	movs	r3, #1
 800df0a:	e000      	b.n	800df0e <prvProcessTimerOrBlockTask+0x52>
 800df0c:	2300      	movs	r3, #0
 800df0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df10:	4b0f      	ldr	r3, [pc, #60]	@ (800df50 <prvProcessTimerOrBlockTask+0x94>)
 800df12:	6818      	ldr	r0, [r3, #0]
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	683a      	ldr	r2, [r7, #0]
 800df1c:	4619      	mov	r1, r3
 800df1e:	f7fe fe83 	bl	800cc28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df22:	f7ff f907 	bl	800d134 <xTaskResumeAll>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d10a      	bne.n	800df42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800df2c:	4b09      	ldr	r3, [pc, #36]	@ (800df54 <prvProcessTimerOrBlockTask+0x98>)
 800df2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df32:	601a      	str	r2, [r3, #0]
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	f3bf 8f6f 	isb	sy
}
 800df3c:	e001      	b.n	800df42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800df3e:	f7ff f8f9 	bl	800d134 <xTaskResumeAll>
}
 800df42:	bf00      	nop
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	200017fc 	.word	0x200017fc
 800df50:	20001800 	.word	0x20001800
 800df54:	e000ed04 	.word	0xe000ed04

0800df58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800df58:	b480      	push	{r7}
 800df5a:	b085      	sub	sp, #20
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df60:	4b0e      	ldr	r3, [pc, #56]	@ (800df9c <prvGetNextExpireTime+0x44>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d101      	bne.n	800df6e <prvGetNextExpireTime+0x16>
 800df6a:	2201      	movs	r2, #1
 800df6c:	e000      	b.n	800df70 <prvGetNextExpireTime+0x18>
 800df6e:	2200      	movs	r2, #0
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d105      	bne.n	800df88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df7c:	4b07      	ldr	r3, [pc, #28]	@ (800df9c <prvGetNextExpireTime+0x44>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	60fb      	str	r3, [r7, #12]
 800df86:	e001      	b.n	800df8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800df88:	2300      	movs	r3, #0
 800df8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800df8c:	68fb      	ldr	r3, [r7, #12]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3714      	adds	r7, #20
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop
 800df9c:	200017f8 	.word	0x200017f8

0800dfa0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dfa8:	f7ff f962 	bl	800d270 <xTaskGetTickCount>
 800dfac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dfae:	4b0b      	ldr	r3, [pc, #44]	@ (800dfdc <prvSampleTimeNow+0x3c>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	68fa      	ldr	r2, [r7, #12]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d205      	bcs.n	800dfc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dfb8:	f000 f93a 	bl	800e230 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	601a      	str	r2, [r3, #0]
 800dfc2:	e002      	b.n	800dfca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dfca:	4a04      	ldr	r2, [pc, #16]	@ (800dfdc <prvSampleTimeNow+0x3c>)
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3710      	adds	r7, #16
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	20001808 	.word	0x20001808

0800dfe0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b086      	sub	sp, #24
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]
 800dfec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dfee:	2300      	movs	r3, #0
 800dff0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	68ba      	ldr	r2, [r7, #8]
 800dff6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	68fa      	ldr	r2, [r7, #12]
 800dffc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dffe:	68ba      	ldr	r2, [r7, #8]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	429a      	cmp	r2, r3
 800e004:	d812      	bhi.n	800e02c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e006:	687a      	ldr	r2, [r7, #4]
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	1ad2      	subs	r2, r2, r3
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	699b      	ldr	r3, [r3, #24]
 800e010:	429a      	cmp	r2, r3
 800e012:	d302      	bcc.n	800e01a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e014:	2301      	movs	r3, #1
 800e016:	617b      	str	r3, [r7, #20]
 800e018:	e01b      	b.n	800e052 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e01a:	4b10      	ldr	r3, [pc, #64]	@ (800e05c <prvInsertTimerInActiveList+0x7c>)
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	3304      	adds	r3, #4
 800e022:	4619      	mov	r1, r3
 800e024:	4610      	mov	r0, r2
 800e026:	f7fd fcec 	bl	800ba02 <vListInsert>
 800e02a:	e012      	b.n	800e052 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	429a      	cmp	r2, r3
 800e032:	d206      	bcs.n	800e042 <prvInsertTimerInActiveList+0x62>
 800e034:	68ba      	ldr	r2, [r7, #8]
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	429a      	cmp	r2, r3
 800e03a:	d302      	bcc.n	800e042 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e03c:	2301      	movs	r3, #1
 800e03e:	617b      	str	r3, [r7, #20]
 800e040:	e007      	b.n	800e052 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e042:	4b07      	ldr	r3, [pc, #28]	@ (800e060 <prvInsertTimerInActiveList+0x80>)
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	3304      	adds	r3, #4
 800e04a:	4619      	mov	r1, r3
 800e04c:	4610      	mov	r0, r2
 800e04e:	f7fd fcd8 	bl	800ba02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e052:	697b      	ldr	r3, [r7, #20]
}
 800e054:	4618      	mov	r0, r3
 800e056:	3718      	adds	r7, #24
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	200017fc 	.word	0x200017fc
 800e060:	200017f8 	.word	0x200017f8

0800e064 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b08e      	sub	sp, #56	@ 0x38
 800e068:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e06a:	e0ce      	b.n	800e20a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	da19      	bge.n	800e0a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e072:	1d3b      	adds	r3, r7, #4
 800e074:	3304      	adds	r3, #4
 800e076:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d10b      	bne.n	800e096 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	61fb      	str	r3, [r7, #28]
}
 800e090:	bf00      	nop
 800e092:	bf00      	nop
 800e094:	e7fd      	b.n	800e092 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e09c:	6850      	ldr	r0, [r2, #4]
 800e09e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0a0:	6892      	ldr	r2, [r2, #8]
 800e0a2:	4611      	mov	r1, r2
 800e0a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	f2c0 80ae 	blt.w	800e20a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0b4:	695b      	ldr	r3, [r3, #20]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d004      	beq.n	800e0c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0bc:	3304      	adds	r3, #4
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7fd fcd8 	bl	800ba74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0c4:	463b      	mov	r3, r7
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7ff ff6a 	bl	800dfa0 <prvSampleTimeNow>
 800e0cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2b09      	cmp	r3, #9
 800e0d2:	f200 8097 	bhi.w	800e204 <prvProcessReceivedCommands+0x1a0>
 800e0d6:	a201      	add	r2, pc, #4	@ (adr r2, 800e0dc <prvProcessReceivedCommands+0x78>)
 800e0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0dc:	0800e105 	.word	0x0800e105
 800e0e0:	0800e105 	.word	0x0800e105
 800e0e4:	0800e105 	.word	0x0800e105
 800e0e8:	0800e17b 	.word	0x0800e17b
 800e0ec:	0800e18f 	.word	0x0800e18f
 800e0f0:	0800e1db 	.word	0x0800e1db
 800e0f4:	0800e105 	.word	0x0800e105
 800e0f8:	0800e105 	.word	0x0800e105
 800e0fc:	0800e17b 	.word	0x0800e17b
 800e100:	0800e18f 	.word	0x0800e18f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e106:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e10a:	f043 0301 	orr.w	r3, r3, #1
 800e10e:	b2da      	uxtb	r2, r3
 800e110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e112:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e116:	68ba      	ldr	r2, [r7, #8]
 800e118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	18d1      	adds	r1, r2, r3
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e124:	f7ff ff5c 	bl	800dfe0 <prvInsertTimerInActiveList>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d06c      	beq.n	800e208 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e130:	6a1b      	ldr	r3, [r3, #32]
 800e132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e134:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e138:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e13c:	f003 0304 	and.w	r3, r3, #4
 800e140:	2b00      	cmp	r3, #0
 800e142:	d061      	beq.n	800e208 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e144:	68ba      	ldr	r2, [r7, #8]
 800e146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e148:	699b      	ldr	r3, [r3, #24]
 800e14a:	441a      	add	r2, r3
 800e14c:	2300      	movs	r3, #0
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	2300      	movs	r3, #0
 800e152:	2100      	movs	r1, #0
 800e154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e156:	f7ff fe01 	bl	800dd5c <xTimerGenericCommand>
 800e15a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e15c:	6a3b      	ldr	r3, [r7, #32]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d152      	bne.n	800e208 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	61bb      	str	r3, [r7, #24]
}
 800e174:	bf00      	nop
 800e176:	bf00      	nop
 800e178:	e7fd      	b.n	800e176 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e17c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e180:	f023 0301 	bic.w	r3, r3, #1
 800e184:	b2da      	uxtb	r2, r3
 800e186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e188:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e18c:	e03d      	b.n	800e20a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e190:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e194:	f043 0301 	orr.w	r3, r3, #1
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e19c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e1a0:	68ba      	ldr	r2, [r7, #8]
 800e1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1a8:	699b      	ldr	r3, [r3, #24]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d10b      	bne.n	800e1c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b2:	f383 8811 	msr	BASEPRI, r3
 800e1b6:	f3bf 8f6f 	isb	sy
 800e1ba:	f3bf 8f4f 	dsb	sy
 800e1be:	617b      	str	r3, [r7, #20]
}
 800e1c0:	bf00      	nop
 800e1c2:	bf00      	nop
 800e1c4:	e7fd      	b.n	800e1c2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1c8:	699a      	ldr	r2, [r3, #24]
 800e1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1cc:	18d1      	adds	r1, r2, r3
 800e1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e1d4:	f7ff ff04 	bl	800dfe0 <prvInsertTimerInActiveList>
					break;
 800e1d8:	e017      	b.n	800e20a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1e0:	f003 0302 	and.w	r3, r3, #2
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d103      	bne.n	800e1f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e1e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e1ea:	f000 fbe5 	bl	800e9b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e1ee:	e00c      	b.n	800e20a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1f6:	f023 0301 	bic.w	r3, r3, #1
 800e1fa:	b2da      	uxtb	r2, r3
 800e1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e202:	e002      	b.n	800e20a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e204:	bf00      	nop
 800e206:	e000      	b.n	800e20a <prvProcessReceivedCommands+0x1a6>
					break;
 800e208:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e20a:	4b08      	ldr	r3, [pc, #32]	@ (800e22c <prvProcessReceivedCommands+0x1c8>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	1d39      	adds	r1, r7, #4
 800e210:	2200      	movs	r2, #0
 800e212:	4618      	mov	r0, r3
 800e214:	f7fe f8f4 	bl	800c400 <xQueueReceive>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f47f af26 	bne.w	800e06c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e220:	bf00      	nop
 800e222:	bf00      	nop
 800e224:	3730      	adds	r7, #48	@ 0x30
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	20001800 	.word	0x20001800

0800e230 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b088      	sub	sp, #32
 800e234:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e236:	e049      	b.n	800e2cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e238:	4b2e      	ldr	r3, [pc, #184]	@ (800e2f4 <prvSwitchTimerLists+0xc4>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e242:	4b2c      	ldr	r3, [pc, #176]	@ (800e2f4 <prvSwitchTimerLists+0xc4>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	68db      	ldr	r3, [r3, #12]
 800e248:	68db      	ldr	r3, [r3, #12]
 800e24a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	3304      	adds	r3, #4
 800e250:	4618      	mov	r0, r3
 800e252:	f7fd fc0f 	bl	800ba74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	6a1b      	ldr	r3, [r3, #32]
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e264:	f003 0304 	and.w	r3, r3, #4
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d02f      	beq.n	800e2cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	699b      	ldr	r3, [r3, #24]
 800e270:	693a      	ldr	r2, [r7, #16]
 800e272:	4413      	add	r3, r2
 800e274:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e276:	68ba      	ldr	r2, [r7, #8]
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d90e      	bls.n	800e29c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	68ba      	ldr	r2, [r7, #8]
 800e282:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	68fa      	ldr	r2, [r7, #12]
 800e288:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e28a:	4b1a      	ldr	r3, [pc, #104]	@ (800e2f4 <prvSwitchTimerLists+0xc4>)
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	3304      	adds	r3, #4
 800e292:	4619      	mov	r1, r3
 800e294:	4610      	mov	r0, r2
 800e296:	f7fd fbb4 	bl	800ba02 <vListInsert>
 800e29a:	e017      	b.n	800e2cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e29c:	2300      	movs	r3, #0
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	693a      	ldr	r2, [r7, #16]
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f7ff fd58 	bl	800dd5c <xTimerGenericCommand>
 800e2ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d10b      	bne.n	800e2cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b8:	f383 8811 	msr	BASEPRI, r3
 800e2bc:	f3bf 8f6f 	isb	sy
 800e2c0:	f3bf 8f4f 	dsb	sy
 800e2c4:	603b      	str	r3, [r7, #0]
}
 800e2c6:	bf00      	nop
 800e2c8:	bf00      	nop
 800e2ca:	e7fd      	b.n	800e2c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2cc:	4b09      	ldr	r3, [pc, #36]	@ (800e2f4 <prvSwitchTimerLists+0xc4>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d1b0      	bne.n	800e238 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e2d6:	4b07      	ldr	r3, [pc, #28]	@ (800e2f4 <prvSwitchTimerLists+0xc4>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e2dc:	4b06      	ldr	r3, [pc, #24]	@ (800e2f8 <prvSwitchTimerLists+0xc8>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a04      	ldr	r2, [pc, #16]	@ (800e2f4 <prvSwitchTimerLists+0xc4>)
 800e2e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e2e4:	4a04      	ldr	r2, [pc, #16]	@ (800e2f8 <prvSwitchTimerLists+0xc8>)
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	6013      	str	r3, [r2, #0]
}
 800e2ea:	bf00      	nop
 800e2ec:	3718      	adds	r7, #24
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	200017f8 	.word	0x200017f8
 800e2f8:	200017fc 	.word	0x200017fc

0800e2fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e302:	f000 f969 	bl	800e5d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e306:	4b15      	ldr	r3, [pc, #84]	@ (800e35c <prvCheckForValidListAndQueue+0x60>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d120      	bne.n	800e350 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e30e:	4814      	ldr	r0, [pc, #80]	@ (800e360 <prvCheckForValidListAndQueue+0x64>)
 800e310:	f7fd fb26 	bl	800b960 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e314:	4813      	ldr	r0, [pc, #76]	@ (800e364 <prvCheckForValidListAndQueue+0x68>)
 800e316:	f7fd fb23 	bl	800b960 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e31a:	4b13      	ldr	r3, [pc, #76]	@ (800e368 <prvCheckForValidListAndQueue+0x6c>)
 800e31c:	4a10      	ldr	r2, [pc, #64]	@ (800e360 <prvCheckForValidListAndQueue+0x64>)
 800e31e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e320:	4b12      	ldr	r3, [pc, #72]	@ (800e36c <prvCheckForValidListAndQueue+0x70>)
 800e322:	4a10      	ldr	r2, [pc, #64]	@ (800e364 <prvCheckForValidListAndQueue+0x68>)
 800e324:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e326:	2300      	movs	r3, #0
 800e328:	9300      	str	r3, [sp, #0]
 800e32a:	4b11      	ldr	r3, [pc, #68]	@ (800e370 <prvCheckForValidListAndQueue+0x74>)
 800e32c:	4a11      	ldr	r2, [pc, #68]	@ (800e374 <prvCheckForValidListAndQueue+0x78>)
 800e32e:	2110      	movs	r1, #16
 800e330:	200a      	movs	r0, #10
 800e332:	f7fd fc33 	bl	800bb9c <xQueueGenericCreateStatic>
 800e336:	4603      	mov	r3, r0
 800e338:	4a08      	ldr	r2, [pc, #32]	@ (800e35c <prvCheckForValidListAndQueue+0x60>)
 800e33a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e33c:	4b07      	ldr	r3, [pc, #28]	@ (800e35c <prvCheckForValidListAndQueue+0x60>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d005      	beq.n	800e350 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e344:	4b05      	ldr	r3, [pc, #20]	@ (800e35c <prvCheckForValidListAndQueue+0x60>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	490b      	ldr	r1, [pc, #44]	@ (800e378 <prvCheckForValidListAndQueue+0x7c>)
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe fc18 	bl	800cb80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e350:	f000 f974 	bl	800e63c <vPortExitCritical>
}
 800e354:	bf00      	nop
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	20001800 	.word	0x20001800
 800e360:	200017d0 	.word	0x200017d0
 800e364:	200017e4 	.word	0x200017e4
 800e368:	200017f8 	.word	0x200017f8
 800e36c:	200017fc 	.word	0x200017fc
 800e370:	200018ac 	.word	0x200018ac
 800e374:	2000180c 	.word	0x2000180c
 800e378:	08014f84 	.word	0x08014f84

0800e37c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e37c:	b480      	push	{r7}
 800e37e:	b085      	sub	sp, #20
 800e380:	af00      	add	r7, sp, #0
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	60b9      	str	r1, [r7, #8]
 800e386:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	3b04      	subs	r3, #4
 800e38c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	3b04      	subs	r3, #4
 800e39a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	f023 0201 	bic.w	r2, r3, #1
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	3b04      	subs	r3, #4
 800e3aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3ac:	4a0c      	ldr	r2, [pc, #48]	@ (800e3e0 <pxPortInitialiseStack+0x64>)
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	3b14      	subs	r3, #20
 800e3b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	3b04      	subs	r3, #4
 800e3c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f06f 0202 	mvn.w	r2, #2
 800e3ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	3b20      	subs	r3, #32
 800e3d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3714      	adds	r7, #20
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr
 800e3e0:	0800e3e5 	.word	0x0800e3e5

0800e3e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e3ee:	4b13      	ldr	r3, [pc, #76]	@ (800e43c <prvTaskExitError+0x58>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3f6:	d00b      	beq.n	800e410 <prvTaskExitError+0x2c>
	__asm volatile
 800e3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3fc:	f383 8811 	msr	BASEPRI, r3
 800e400:	f3bf 8f6f 	isb	sy
 800e404:	f3bf 8f4f 	dsb	sy
 800e408:	60fb      	str	r3, [r7, #12]
}
 800e40a:	bf00      	nop
 800e40c:	bf00      	nop
 800e40e:	e7fd      	b.n	800e40c <prvTaskExitError+0x28>
	__asm volatile
 800e410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e414:	f383 8811 	msr	BASEPRI, r3
 800e418:	f3bf 8f6f 	isb	sy
 800e41c:	f3bf 8f4f 	dsb	sy
 800e420:	60bb      	str	r3, [r7, #8]
}
 800e422:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e424:	bf00      	nop
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d0fc      	beq.n	800e426 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e42c:	bf00      	nop
 800e42e:	bf00      	nop
 800e430:	3714      	adds	r7, #20
 800e432:	46bd      	mov	sp, r7
 800e434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e438:	4770      	bx	lr
 800e43a:	bf00      	nop
 800e43c:	200000b4 	.word	0x200000b4

0800e440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e440:	4b07      	ldr	r3, [pc, #28]	@ (800e460 <pxCurrentTCBConst2>)
 800e442:	6819      	ldr	r1, [r3, #0]
 800e444:	6808      	ldr	r0, [r1, #0]
 800e446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44a:	f380 8809 	msr	PSP, r0
 800e44e:	f3bf 8f6f 	isb	sy
 800e452:	f04f 0000 	mov.w	r0, #0
 800e456:	f380 8811 	msr	BASEPRI, r0
 800e45a:	4770      	bx	lr
 800e45c:	f3af 8000 	nop.w

0800e460 <pxCurrentTCBConst2>:
 800e460:	200012d0 	.word	0x200012d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e464:	bf00      	nop
 800e466:	bf00      	nop

0800e468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e468:	4808      	ldr	r0, [pc, #32]	@ (800e48c <prvPortStartFirstTask+0x24>)
 800e46a:	6800      	ldr	r0, [r0, #0]
 800e46c:	6800      	ldr	r0, [r0, #0]
 800e46e:	f380 8808 	msr	MSP, r0
 800e472:	f04f 0000 	mov.w	r0, #0
 800e476:	f380 8814 	msr	CONTROL, r0
 800e47a:	b662      	cpsie	i
 800e47c:	b661      	cpsie	f
 800e47e:	f3bf 8f4f 	dsb	sy
 800e482:	f3bf 8f6f 	isb	sy
 800e486:	df00      	svc	0
 800e488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e48a:	bf00      	nop
 800e48c:	e000ed08 	.word	0xe000ed08

0800e490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e496:	4b47      	ldr	r3, [pc, #284]	@ (800e5b4 <xPortStartScheduler+0x124>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4a47      	ldr	r2, [pc, #284]	@ (800e5b8 <xPortStartScheduler+0x128>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d10b      	bne.n	800e4b8 <xPortStartScheduler+0x28>
	__asm volatile
 800e4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4a4:	f383 8811 	msr	BASEPRI, r3
 800e4a8:	f3bf 8f6f 	isb	sy
 800e4ac:	f3bf 8f4f 	dsb	sy
 800e4b0:	613b      	str	r3, [r7, #16]
}
 800e4b2:	bf00      	nop
 800e4b4:	bf00      	nop
 800e4b6:	e7fd      	b.n	800e4b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e4b8:	4b3e      	ldr	r3, [pc, #248]	@ (800e5b4 <xPortStartScheduler+0x124>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a3f      	ldr	r2, [pc, #252]	@ (800e5bc <xPortStartScheduler+0x12c>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d10b      	bne.n	800e4da <xPortStartScheduler+0x4a>
	__asm volatile
 800e4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c6:	f383 8811 	msr	BASEPRI, r3
 800e4ca:	f3bf 8f6f 	isb	sy
 800e4ce:	f3bf 8f4f 	dsb	sy
 800e4d2:	60fb      	str	r3, [r7, #12]
}
 800e4d4:	bf00      	nop
 800e4d6:	bf00      	nop
 800e4d8:	e7fd      	b.n	800e4d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e4da:	4b39      	ldr	r3, [pc, #228]	@ (800e5c0 <xPortStartScheduler+0x130>)
 800e4dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e4de:	697b      	ldr	r3, [r7, #20]
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	22ff      	movs	r2, #255	@ 0xff
 800e4ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	b2db      	uxtb	r3, r3
 800e4f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e4f4:	78fb      	ldrb	r3, [r7, #3]
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e4fc:	b2da      	uxtb	r2, r3
 800e4fe:	4b31      	ldr	r3, [pc, #196]	@ (800e5c4 <xPortStartScheduler+0x134>)
 800e500:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e502:	4b31      	ldr	r3, [pc, #196]	@ (800e5c8 <xPortStartScheduler+0x138>)
 800e504:	2207      	movs	r2, #7
 800e506:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e508:	e009      	b.n	800e51e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e50a:	4b2f      	ldr	r3, [pc, #188]	@ (800e5c8 <xPortStartScheduler+0x138>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	3b01      	subs	r3, #1
 800e510:	4a2d      	ldr	r2, [pc, #180]	@ (800e5c8 <xPortStartScheduler+0x138>)
 800e512:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e514:	78fb      	ldrb	r3, [r7, #3]
 800e516:	b2db      	uxtb	r3, r3
 800e518:	005b      	lsls	r3, r3, #1
 800e51a:	b2db      	uxtb	r3, r3
 800e51c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e51e:	78fb      	ldrb	r3, [r7, #3]
 800e520:	b2db      	uxtb	r3, r3
 800e522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e526:	2b80      	cmp	r3, #128	@ 0x80
 800e528:	d0ef      	beq.n	800e50a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e52a:	4b27      	ldr	r3, [pc, #156]	@ (800e5c8 <xPortStartScheduler+0x138>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f1c3 0307 	rsb	r3, r3, #7
 800e532:	2b04      	cmp	r3, #4
 800e534:	d00b      	beq.n	800e54e <xPortStartScheduler+0xbe>
	__asm volatile
 800e536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e53a:	f383 8811 	msr	BASEPRI, r3
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f3bf 8f4f 	dsb	sy
 800e546:	60bb      	str	r3, [r7, #8]
}
 800e548:	bf00      	nop
 800e54a:	bf00      	nop
 800e54c:	e7fd      	b.n	800e54a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e54e:	4b1e      	ldr	r3, [pc, #120]	@ (800e5c8 <xPortStartScheduler+0x138>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	021b      	lsls	r3, r3, #8
 800e554:	4a1c      	ldr	r2, [pc, #112]	@ (800e5c8 <xPortStartScheduler+0x138>)
 800e556:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e558:	4b1b      	ldr	r3, [pc, #108]	@ (800e5c8 <xPortStartScheduler+0x138>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e560:	4a19      	ldr	r2, [pc, #100]	@ (800e5c8 <xPortStartScheduler+0x138>)
 800e562:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	b2da      	uxtb	r2, r3
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e56c:	4b17      	ldr	r3, [pc, #92]	@ (800e5cc <xPortStartScheduler+0x13c>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a16      	ldr	r2, [pc, #88]	@ (800e5cc <xPortStartScheduler+0x13c>)
 800e572:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e576:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e578:	4b14      	ldr	r3, [pc, #80]	@ (800e5cc <xPortStartScheduler+0x13c>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4a13      	ldr	r2, [pc, #76]	@ (800e5cc <xPortStartScheduler+0x13c>)
 800e57e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e582:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e584:	f000 f8da 	bl	800e73c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e588:	4b11      	ldr	r3, [pc, #68]	@ (800e5d0 <xPortStartScheduler+0x140>)
 800e58a:	2200      	movs	r2, #0
 800e58c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e58e:	f000 f8f9 	bl	800e784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e592:	4b10      	ldr	r3, [pc, #64]	@ (800e5d4 <xPortStartScheduler+0x144>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4a0f      	ldr	r2, [pc, #60]	@ (800e5d4 <xPortStartScheduler+0x144>)
 800e598:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e59c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e59e:	f7ff ff63 	bl	800e468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e5a2:	f7fe ff2f 	bl	800d404 <vTaskSwitchContext>
	prvTaskExitError();
 800e5a6:	f7ff ff1d 	bl	800e3e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5aa:	2300      	movs	r3, #0
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3718      	adds	r7, #24
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	e000ed00 	.word	0xe000ed00
 800e5b8:	410fc271 	.word	0x410fc271
 800e5bc:	410fc270 	.word	0x410fc270
 800e5c0:	e000e400 	.word	0xe000e400
 800e5c4:	200018fc 	.word	0x200018fc
 800e5c8:	20001900 	.word	0x20001900
 800e5cc:	e000ed20 	.word	0xe000ed20
 800e5d0:	200000b4 	.word	0x200000b4
 800e5d4:	e000ef34 	.word	0xe000ef34

0800e5d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	607b      	str	r3, [r7, #4]
}
 800e5f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e5f2:	4b10      	ldr	r3, [pc, #64]	@ (800e634 <vPortEnterCritical+0x5c>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	4a0e      	ldr	r2, [pc, #56]	@ (800e634 <vPortEnterCritical+0x5c>)
 800e5fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e5fc:	4b0d      	ldr	r3, [pc, #52]	@ (800e634 <vPortEnterCritical+0x5c>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2b01      	cmp	r3, #1
 800e602:	d110      	bne.n	800e626 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e604:	4b0c      	ldr	r3, [pc, #48]	@ (800e638 <vPortEnterCritical+0x60>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d00b      	beq.n	800e626 <vPortEnterCritical+0x4e>
	__asm volatile
 800e60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e612:	f383 8811 	msr	BASEPRI, r3
 800e616:	f3bf 8f6f 	isb	sy
 800e61a:	f3bf 8f4f 	dsb	sy
 800e61e:	603b      	str	r3, [r7, #0]
}
 800e620:	bf00      	nop
 800e622:	bf00      	nop
 800e624:	e7fd      	b.n	800e622 <vPortEnterCritical+0x4a>
	}
}
 800e626:	bf00      	nop
 800e628:	370c      	adds	r7, #12
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr
 800e632:	bf00      	nop
 800e634:	200000b4 	.word	0x200000b4
 800e638:	e000ed04 	.word	0xe000ed04

0800e63c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e63c:	b480      	push	{r7}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e642:	4b12      	ldr	r3, [pc, #72]	@ (800e68c <vPortExitCritical+0x50>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d10b      	bne.n	800e662 <vPortExitCritical+0x26>
	__asm volatile
 800e64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e64e:	f383 8811 	msr	BASEPRI, r3
 800e652:	f3bf 8f6f 	isb	sy
 800e656:	f3bf 8f4f 	dsb	sy
 800e65a:	607b      	str	r3, [r7, #4]
}
 800e65c:	bf00      	nop
 800e65e:	bf00      	nop
 800e660:	e7fd      	b.n	800e65e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e662:	4b0a      	ldr	r3, [pc, #40]	@ (800e68c <vPortExitCritical+0x50>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	3b01      	subs	r3, #1
 800e668:	4a08      	ldr	r2, [pc, #32]	@ (800e68c <vPortExitCritical+0x50>)
 800e66a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e66c:	4b07      	ldr	r3, [pc, #28]	@ (800e68c <vPortExitCritical+0x50>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d105      	bne.n	800e680 <vPortExitCritical+0x44>
 800e674:	2300      	movs	r3, #0
 800e676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	f383 8811 	msr	BASEPRI, r3
}
 800e67e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e680:	bf00      	nop
 800e682:	370c      	adds	r7, #12
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr
 800e68c:	200000b4 	.word	0x200000b4

0800e690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e690:	f3ef 8009 	mrs	r0, PSP
 800e694:	f3bf 8f6f 	isb	sy
 800e698:	4b15      	ldr	r3, [pc, #84]	@ (800e6f0 <pxCurrentTCBConst>)
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	f01e 0f10 	tst.w	lr, #16
 800e6a0:	bf08      	it	eq
 800e6a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e6a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6aa:	6010      	str	r0, [r2, #0]
 800e6ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e6b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e6b4:	f380 8811 	msr	BASEPRI, r0
 800e6b8:	f3bf 8f4f 	dsb	sy
 800e6bc:	f3bf 8f6f 	isb	sy
 800e6c0:	f7fe fea0 	bl	800d404 <vTaskSwitchContext>
 800e6c4:	f04f 0000 	mov.w	r0, #0
 800e6c8:	f380 8811 	msr	BASEPRI, r0
 800e6cc:	bc09      	pop	{r0, r3}
 800e6ce:	6819      	ldr	r1, [r3, #0]
 800e6d0:	6808      	ldr	r0, [r1, #0]
 800e6d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d6:	f01e 0f10 	tst.w	lr, #16
 800e6da:	bf08      	it	eq
 800e6dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e6e0:	f380 8809 	msr	PSP, r0
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	f3af 8000 	nop.w

0800e6f0 <pxCurrentTCBConst>:
 800e6f0:	200012d0 	.word	0x200012d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e6f4:	bf00      	nop
 800e6f6:	bf00      	nop

0800e6f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e702:	f383 8811 	msr	BASEPRI, r3
 800e706:	f3bf 8f6f 	isb	sy
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	607b      	str	r3, [r7, #4]
}
 800e710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e712:	f7fe fdbd 	bl	800d290 <xTaskIncrementTick>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d003      	beq.n	800e724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e71c:	4b06      	ldr	r3, [pc, #24]	@ (800e738 <xPortSysTickHandler+0x40>)
 800e71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e722:	601a      	str	r2, [r3, #0]
 800e724:	2300      	movs	r3, #0
 800e726:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	f383 8811 	msr	BASEPRI, r3
}
 800e72e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e730:	bf00      	nop
 800e732:	3708      	adds	r7, #8
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	e000ed04 	.word	0xe000ed04

0800e73c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e73c:	b480      	push	{r7}
 800e73e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e740:	4b0b      	ldr	r3, [pc, #44]	@ (800e770 <vPortSetupTimerInterrupt+0x34>)
 800e742:	2200      	movs	r2, #0
 800e744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e746:	4b0b      	ldr	r3, [pc, #44]	@ (800e774 <vPortSetupTimerInterrupt+0x38>)
 800e748:	2200      	movs	r2, #0
 800e74a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e74c:	4b0a      	ldr	r3, [pc, #40]	@ (800e778 <vPortSetupTimerInterrupt+0x3c>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a0a      	ldr	r2, [pc, #40]	@ (800e77c <vPortSetupTimerInterrupt+0x40>)
 800e752:	fba2 2303 	umull	r2, r3, r2, r3
 800e756:	099b      	lsrs	r3, r3, #6
 800e758:	4a09      	ldr	r2, [pc, #36]	@ (800e780 <vPortSetupTimerInterrupt+0x44>)
 800e75a:	3b01      	subs	r3, #1
 800e75c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e75e:	4b04      	ldr	r3, [pc, #16]	@ (800e770 <vPortSetupTimerInterrupt+0x34>)
 800e760:	2207      	movs	r2, #7
 800e762:	601a      	str	r2, [r3, #0]
}
 800e764:	bf00      	nop
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr
 800e76e:	bf00      	nop
 800e770:	e000e010 	.word	0xe000e010
 800e774:	e000e018 	.word	0xe000e018
 800e778:	200000a8 	.word	0x200000a8
 800e77c:	10624dd3 	.word	0x10624dd3
 800e780:	e000e014 	.word	0xe000e014

0800e784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e784:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e794 <vPortEnableVFP+0x10>
 800e788:	6801      	ldr	r1, [r0, #0]
 800e78a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e78e:	6001      	str	r1, [r0, #0]
 800e790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e792:	bf00      	nop
 800e794:	e000ed88 	.word	0xe000ed88

0800e798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e798:	b480      	push	{r7}
 800e79a:	b085      	sub	sp, #20
 800e79c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e79e:	f3ef 8305 	mrs	r3, IPSR
 800e7a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2b0f      	cmp	r3, #15
 800e7a8:	d915      	bls.n	800e7d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e7aa:	4a18      	ldr	r2, [pc, #96]	@ (800e80c <vPortValidateInterruptPriority+0x74>)
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e7b4:	4b16      	ldr	r3, [pc, #88]	@ (800e810 <vPortValidateInterruptPriority+0x78>)
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	7afa      	ldrb	r2, [r7, #11]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d20b      	bcs.n	800e7d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c2:	f383 8811 	msr	BASEPRI, r3
 800e7c6:	f3bf 8f6f 	isb	sy
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	607b      	str	r3, [r7, #4]
}
 800e7d0:	bf00      	nop
 800e7d2:	bf00      	nop
 800e7d4:	e7fd      	b.n	800e7d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e7d6:	4b0f      	ldr	r3, [pc, #60]	@ (800e814 <vPortValidateInterruptPriority+0x7c>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e7de:	4b0e      	ldr	r3, [pc, #56]	@ (800e818 <vPortValidateInterruptPriority+0x80>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d90b      	bls.n	800e7fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7ea:	f383 8811 	msr	BASEPRI, r3
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	603b      	str	r3, [r7, #0]
}
 800e7f8:	bf00      	nop
 800e7fa:	bf00      	nop
 800e7fc:	e7fd      	b.n	800e7fa <vPortValidateInterruptPriority+0x62>
	}
 800e7fe:	bf00      	nop
 800e800:	3714      	adds	r7, #20
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr
 800e80a:	bf00      	nop
 800e80c:	e000e3f0 	.word	0xe000e3f0
 800e810:	200018fc 	.word	0x200018fc
 800e814:	e000ed0c 	.word	0xe000ed0c
 800e818:	20001900 	.word	0x20001900

0800e81c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b08a      	sub	sp, #40	@ 0x28
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e824:	2300      	movs	r3, #0
 800e826:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e828:	f7fe fc76 	bl	800d118 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e82c:	4b5c      	ldr	r3, [pc, #368]	@ (800e9a0 <pvPortMalloc+0x184>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d101      	bne.n	800e838 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e834:	f000 f924 	bl	800ea80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e838:	4b5a      	ldr	r3, [pc, #360]	@ (800e9a4 <pvPortMalloc+0x188>)
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4013      	ands	r3, r2
 800e840:	2b00      	cmp	r3, #0
 800e842:	f040 8095 	bne.w	800e970 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d01e      	beq.n	800e88a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e84c:	2208      	movs	r2, #8
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	4413      	add	r3, r2
 800e852:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f003 0307 	and.w	r3, r3, #7
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d015      	beq.n	800e88a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f023 0307 	bic.w	r3, r3, #7
 800e864:	3308      	adds	r3, #8
 800e866:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f003 0307 	and.w	r3, r3, #7
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00b      	beq.n	800e88a <pvPortMalloc+0x6e>
	__asm volatile
 800e872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e876:	f383 8811 	msr	BASEPRI, r3
 800e87a:	f3bf 8f6f 	isb	sy
 800e87e:	f3bf 8f4f 	dsb	sy
 800e882:	617b      	str	r3, [r7, #20]
}
 800e884:	bf00      	nop
 800e886:	bf00      	nop
 800e888:	e7fd      	b.n	800e886 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d06f      	beq.n	800e970 <pvPortMalloc+0x154>
 800e890:	4b45      	ldr	r3, [pc, #276]	@ (800e9a8 <pvPortMalloc+0x18c>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	429a      	cmp	r2, r3
 800e898:	d86a      	bhi.n	800e970 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e89a:	4b44      	ldr	r3, [pc, #272]	@ (800e9ac <pvPortMalloc+0x190>)
 800e89c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e89e:	4b43      	ldr	r3, [pc, #268]	@ (800e9ac <pvPortMalloc+0x190>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8a4:	e004      	b.n	800e8b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d903      	bls.n	800e8c2 <pvPortMalloc+0xa6>
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d1f1      	bne.n	800e8a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e8c2:	4b37      	ldr	r3, [pc, #220]	@ (800e9a0 <pvPortMalloc+0x184>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d051      	beq.n	800e970 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e8cc:	6a3b      	ldr	r3, [r7, #32]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2208      	movs	r2, #8
 800e8d2:	4413      	add	r3, r2
 800e8d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	6a3b      	ldr	r3, [r7, #32]
 800e8dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e0:	685a      	ldr	r2, [r3, #4]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	1ad2      	subs	r2, r2, r3
 800e8e6:	2308      	movs	r3, #8
 800e8e8:	005b      	lsls	r3, r3, #1
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d920      	bls.n	800e930 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e8ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	4413      	add	r3, r2
 800e8f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8f6:	69bb      	ldr	r3, [r7, #24]
 800e8f8:	f003 0307 	and.w	r3, r3, #7
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00b      	beq.n	800e918 <pvPortMalloc+0xfc>
	__asm volatile
 800e900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	613b      	str	r3, [r7, #16]
}
 800e912:	bf00      	nop
 800e914:	bf00      	nop
 800e916:	e7fd      	b.n	800e914 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e91a:	685a      	ldr	r2, [r3, #4]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	1ad2      	subs	r2, r2, r3
 800e920:	69bb      	ldr	r3, [r7, #24]
 800e922:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e926:	687a      	ldr	r2, [r7, #4]
 800e928:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e92a:	69b8      	ldr	r0, [r7, #24]
 800e92c:	f000 f90a 	bl	800eb44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e930:	4b1d      	ldr	r3, [pc, #116]	@ (800e9a8 <pvPortMalloc+0x18c>)
 800e932:	681a      	ldr	r2, [r3, #0]
 800e934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	1ad3      	subs	r3, r2, r3
 800e93a:	4a1b      	ldr	r2, [pc, #108]	@ (800e9a8 <pvPortMalloc+0x18c>)
 800e93c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e93e:	4b1a      	ldr	r3, [pc, #104]	@ (800e9a8 <pvPortMalloc+0x18c>)
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	4b1b      	ldr	r3, [pc, #108]	@ (800e9b0 <pvPortMalloc+0x194>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	429a      	cmp	r2, r3
 800e948:	d203      	bcs.n	800e952 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e94a:	4b17      	ldr	r3, [pc, #92]	@ (800e9a8 <pvPortMalloc+0x18c>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	4a18      	ldr	r2, [pc, #96]	@ (800e9b0 <pvPortMalloc+0x194>)
 800e950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e954:	685a      	ldr	r2, [r3, #4]
 800e956:	4b13      	ldr	r3, [pc, #76]	@ (800e9a4 <pvPortMalloc+0x188>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	431a      	orrs	r2, r3
 800e95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e95e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e962:	2200      	movs	r2, #0
 800e964:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e966:	4b13      	ldr	r3, [pc, #76]	@ (800e9b4 <pvPortMalloc+0x198>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	3301      	adds	r3, #1
 800e96c:	4a11      	ldr	r2, [pc, #68]	@ (800e9b4 <pvPortMalloc+0x198>)
 800e96e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e970:	f7fe fbe0 	bl	800d134 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	f003 0307 	and.w	r3, r3, #7
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d00b      	beq.n	800e996 <pvPortMalloc+0x17a>
	__asm volatile
 800e97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e982:	f383 8811 	msr	BASEPRI, r3
 800e986:	f3bf 8f6f 	isb	sy
 800e98a:	f3bf 8f4f 	dsb	sy
 800e98e:	60fb      	str	r3, [r7, #12]
}
 800e990:	bf00      	nop
 800e992:	bf00      	nop
 800e994:	e7fd      	b.n	800e992 <pvPortMalloc+0x176>
	return pvReturn;
 800e996:	69fb      	ldr	r3, [r7, #28]
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3728      	adds	r7, #40	@ 0x28
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}
 800e9a0:	2000550c 	.word	0x2000550c
 800e9a4:	20005520 	.word	0x20005520
 800e9a8:	20005510 	.word	0x20005510
 800e9ac:	20005504 	.word	0x20005504
 800e9b0:	20005514 	.word	0x20005514
 800e9b4:	20005518 	.word	0x20005518

0800e9b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b086      	sub	sp, #24
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d04f      	beq.n	800ea6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e9ca:	2308      	movs	r3, #8
 800e9cc:	425b      	negs	r3, r3
 800e9ce:	697a      	ldr	r2, [r7, #20]
 800e9d0:	4413      	add	r3, r2
 800e9d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	685a      	ldr	r2, [r3, #4]
 800e9dc:	4b25      	ldr	r3, [pc, #148]	@ (800ea74 <vPortFree+0xbc>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4013      	ands	r3, r2
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d10b      	bne.n	800e9fe <vPortFree+0x46>
	__asm volatile
 800e9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ea:	f383 8811 	msr	BASEPRI, r3
 800e9ee:	f3bf 8f6f 	isb	sy
 800e9f2:	f3bf 8f4f 	dsb	sy
 800e9f6:	60fb      	str	r3, [r7, #12]
}
 800e9f8:	bf00      	nop
 800e9fa:	bf00      	nop
 800e9fc:	e7fd      	b.n	800e9fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d00b      	beq.n	800ea1e <vPortFree+0x66>
	__asm volatile
 800ea06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea0a:	f383 8811 	msr	BASEPRI, r3
 800ea0e:	f3bf 8f6f 	isb	sy
 800ea12:	f3bf 8f4f 	dsb	sy
 800ea16:	60bb      	str	r3, [r7, #8]
}
 800ea18:	bf00      	nop
 800ea1a:	bf00      	nop
 800ea1c:	e7fd      	b.n	800ea1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	685a      	ldr	r2, [r3, #4]
 800ea22:	4b14      	ldr	r3, [pc, #80]	@ (800ea74 <vPortFree+0xbc>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	4013      	ands	r3, r2
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d01e      	beq.n	800ea6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d11a      	bne.n	800ea6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	685a      	ldr	r2, [r3, #4]
 800ea38:	4b0e      	ldr	r3, [pc, #56]	@ (800ea74 <vPortFree+0xbc>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	43db      	mvns	r3, r3
 800ea3e:	401a      	ands	r2, r3
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea44:	f7fe fb68 	bl	800d118 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	685a      	ldr	r2, [r3, #4]
 800ea4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ea78 <vPortFree+0xc0>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4413      	add	r3, r2
 800ea52:	4a09      	ldr	r2, [pc, #36]	@ (800ea78 <vPortFree+0xc0>)
 800ea54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea56:	6938      	ldr	r0, [r7, #16]
 800ea58:	f000 f874 	bl	800eb44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ea5c:	4b07      	ldr	r3, [pc, #28]	@ (800ea7c <vPortFree+0xc4>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	3301      	adds	r3, #1
 800ea62:	4a06      	ldr	r2, [pc, #24]	@ (800ea7c <vPortFree+0xc4>)
 800ea64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ea66:	f7fe fb65 	bl	800d134 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ea6a:	bf00      	nop
 800ea6c:	3718      	adds	r7, #24
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	20005520 	.word	0x20005520
 800ea78:	20005510 	.word	0x20005510
 800ea7c:	2000551c 	.word	0x2000551c

0800ea80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ea80:	b480      	push	{r7}
 800ea82:	b085      	sub	sp, #20
 800ea84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ea86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ea8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ea8c:	4b27      	ldr	r3, [pc, #156]	@ (800eb2c <prvHeapInit+0xac>)
 800ea8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f003 0307 	and.w	r3, r3, #7
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d00c      	beq.n	800eab4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	3307      	adds	r3, #7
 800ea9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f023 0307 	bic.w	r3, r3, #7
 800eaa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	1ad3      	subs	r3, r2, r3
 800eaae:	4a1f      	ldr	r2, [pc, #124]	@ (800eb2c <prvHeapInit+0xac>)
 800eab0:	4413      	add	r3, r2
 800eab2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eab8:	4a1d      	ldr	r2, [pc, #116]	@ (800eb30 <prvHeapInit+0xb0>)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eabe:	4b1c      	ldr	r3, [pc, #112]	@ (800eb30 <prvHeapInit+0xb0>)
 800eac0:	2200      	movs	r2, #0
 800eac2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	68ba      	ldr	r2, [r7, #8]
 800eac8:	4413      	add	r3, r2
 800eaca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eacc:	2208      	movs	r2, #8
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	1a9b      	subs	r3, r3, r2
 800ead2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f023 0307 	bic.w	r3, r3, #7
 800eada:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	4a15      	ldr	r2, [pc, #84]	@ (800eb34 <prvHeapInit+0xb4>)
 800eae0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eae2:	4b14      	ldr	r3, [pc, #80]	@ (800eb34 <prvHeapInit+0xb4>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2200      	movs	r2, #0
 800eae8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eaea:	4b12      	ldr	r3, [pc, #72]	@ (800eb34 <prvHeapInit+0xb4>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	68fa      	ldr	r2, [r7, #12]
 800eafa:	1ad2      	subs	r2, r2, r3
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb00:	4b0c      	ldr	r3, [pc, #48]	@ (800eb34 <prvHeapInit+0xb4>)
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	4a0a      	ldr	r2, [pc, #40]	@ (800eb38 <prvHeapInit+0xb8>)
 800eb0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	4a09      	ldr	r2, [pc, #36]	@ (800eb3c <prvHeapInit+0xbc>)
 800eb16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb18:	4b09      	ldr	r3, [pc, #36]	@ (800eb40 <prvHeapInit+0xc0>)
 800eb1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800eb1e:	601a      	str	r2, [r3, #0]
}
 800eb20:	bf00      	nop
 800eb22:	3714      	adds	r7, #20
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr
 800eb2c:	20001904 	.word	0x20001904
 800eb30:	20005504 	.word	0x20005504
 800eb34:	2000550c 	.word	0x2000550c
 800eb38:	20005514 	.word	0x20005514
 800eb3c:	20005510 	.word	0x20005510
 800eb40:	20005520 	.word	0x20005520

0800eb44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb44:	b480      	push	{r7}
 800eb46:	b085      	sub	sp, #20
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb4c:	4b28      	ldr	r3, [pc, #160]	@ (800ebf0 <prvInsertBlockIntoFreeList+0xac>)
 800eb4e:	60fb      	str	r3, [r7, #12]
 800eb50:	e002      	b.n	800eb58 <prvInsertBlockIntoFreeList+0x14>
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	60fb      	str	r3, [r7, #12]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d8f7      	bhi.n	800eb52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	68ba      	ldr	r2, [r7, #8]
 800eb6c:	4413      	add	r3, r2
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d108      	bne.n	800eb86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	685a      	ldr	r2, [r3, #4]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	441a      	add	r2, r3
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	68ba      	ldr	r2, [r7, #8]
 800eb90:	441a      	add	r2, r3
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d118      	bne.n	800ebcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681a      	ldr	r2, [r3, #0]
 800eb9e:	4b15      	ldr	r3, [pc, #84]	@ (800ebf4 <prvInsertBlockIntoFreeList+0xb0>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d00d      	beq.n	800ebc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	685a      	ldr	r2, [r3, #4]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	441a      	add	r2, r3
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	601a      	str	r2, [r3, #0]
 800ebc0:	e008      	b.n	800ebd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ebc2:	4b0c      	ldr	r3, [pc, #48]	@ (800ebf4 <prvInsertBlockIntoFreeList+0xb0>)
 800ebc4:	681a      	ldr	r2, [r3, #0]
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	601a      	str	r2, [r3, #0]
 800ebca:	e003      	b.n	800ebd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ebd4:	68fa      	ldr	r2, [r7, #12]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d002      	beq.n	800ebe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebe2:	bf00      	nop
 800ebe4:	3714      	adds	r7, #20
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	20005504 	.word	0x20005504
 800ebf4:	2000550c 	.word	0x2000550c

0800ebf8 <__itoa>:
 800ebf8:	1e93      	subs	r3, r2, #2
 800ebfa:	2b22      	cmp	r3, #34	@ 0x22
 800ebfc:	b510      	push	{r4, lr}
 800ebfe:	460c      	mov	r4, r1
 800ec00:	d904      	bls.n	800ec0c <__itoa+0x14>
 800ec02:	2300      	movs	r3, #0
 800ec04:	700b      	strb	r3, [r1, #0]
 800ec06:	461c      	mov	r4, r3
 800ec08:	4620      	mov	r0, r4
 800ec0a:	bd10      	pop	{r4, pc}
 800ec0c:	2a0a      	cmp	r2, #10
 800ec0e:	d109      	bne.n	800ec24 <__itoa+0x2c>
 800ec10:	2800      	cmp	r0, #0
 800ec12:	da07      	bge.n	800ec24 <__itoa+0x2c>
 800ec14:	232d      	movs	r3, #45	@ 0x2d
 800ec16:	700b      	strb	r3, [r1, #0]
 800ec18:	4240      	negs	r0, r0
 800ec1a:	2101      	movs	r1, #1
 800ec1c:	4421      	add	r1, r4
 800ec1e:	f000 f8c3 	bl	800eda8 <__utoa>
 800ec22:	e7f1      	b.n	800ec08 <__itoa+0x10>
 800ec24:	2100      	movs	r1, #0
 800ec26:	e7f9      	b.n	800ec1c <__itoa+0x24>

0800ec28 <itoa>:
 800ec28:	f7ff bfe6 	b.w	800ebf8 <__itoa>

0800ec2c <malloc>:
 800ec2c:	4b02      	ldr	r3, [pc, #8]	@ (800ec38 <malloc+0xc>)
 800ec2e:	4601      	mov	r1, r0
 800ec30:	6818      	ldr	r0, [r3, #0]
 800ec32:	f000 b82d 	b.w	800ec90 <_malloc_r>
 800ec36:	bf00      	nop
 800ec38:	200000c4 	.word	0x200000c4

0800ec3c <free>:
 800ec3c:	4b02      	ldr	r3, [pc, #8]	@ (800ec48 <free+0xc>)
 800ec3e:	4601      	mov	r1, r0
 800ec40:	6818      	ldr	r0, [r3, #0]
 800ec42:	f002 b885 	b.w	8010d50 <_free_r>
 800ec46:	bf00      	nop
 800ec48:	200000c4 	.word	0x200000c4

0800ec4c <sbrk_aligned>:
 800ec4c:	b570      	push	{r4, r5, r6, lr}
 800ec4e:	4e0f      	ldr	r6, [pc, #60]	@ (800ec8c <sbrk_aligned+0x40>)
 800ec50:	460c      	mov	r4, r1
 800ec52:	6831      	ldr	r1, [r6, #0]
 800ec54:	4605      	mov	r5, r0
 800ec56:	b911      	cbnz	r1, 800ec5e <sbrk_aligned+0x12>
 800ec58:	f001 f9aa 	bl	800ffb0 <_sbrk_r>
 800ec5c:	6030      	str	r0, [r6, #0]
 800ec5e:	4621      	mov	r1, r4
 800ec60:	4628      	mov	r0, r5
 800ec62:	f001 f9a5 	bl	800ffb0 <_sbrk_r>
 800ec66:	1c43      	adds	r3, r0, #1
 800ec68:	d103      	bne.n	800ec72 <sbrk_aligned+0x26>
 800ec6a:	f04f 34ff 	mov.w	r4, #4294967295
 800ec6e:	4620      	mov	r0, r4
 800ec70:	bd70      	pop	{r4, r5, r6, pc}
 800ec72:	1cc4      	adds	r4, r0, #3
 800ec74:	f024 0403 	bic.w	r4, r4, #3
 800ec78:	42a0      	cmp	r0, r4
 800ec7a:	d0f8      	beq.n	800ec6e <sbrk_aligned+0x22>
 800ec7c:	1a21      	subs	r1, r4, r0
 800ec7e:	4628      	mov	r0, r5
 800ec80:	f001 f996 	bl	800ffb0 <_sbrk_r>
 800ec84:	3001      	adds	r0, #1
 800ec86:	d1f2      	bne.n	800ec6e <sbrk_aligned+0x22>
 800ec88:	e7ef      	b.n	800ec6a <sbrk_aligned+0x1e>
 800ec8a:	bf00      	nop
 800ec8c:	20005524 	.word	0x20005524

0800ec90 <_malloc_r>:
 800ec90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec94:	1ccd      	adds	r5, r1, #3
 800ec96:	f025 0503 	bic.w	r5, r5, #3
 800ec9a:	3508      	adds	r5, #8
 800ec9c:	2d0c      	cmp	r5, #12
 800ec9e:	bf38      	it	cc
 800eca0:	250c      	movcc	r5, #12
 800eca2:	2d00      	cmp	r5, #0
 800eca4:	4606      	mov	r6, r0
 800eca6:	db01      	blt.n	800ecac <_malloc_r+0x1c>
 800eca8:	42a9      	cmp	r1, r5
 800ecaa:	d904      	bls.n	800ecb6 <_malloc_r+0x26>
 800ecac:	230c      	movs	r3, #12
 800ecae:	6033      	str	r3, [r6, #0]
 800ecb0:	2000      	movs	r0, #0
 800ecb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ed8c <_malloc_r+0xfc>
 800ecba:	f000 f869 	bl	800ed90 <__malloc_lock>
 800ecbe:	f8d8 3000 	ldr.w	r3, [r8]
 800ecc2:	461c      	mov	r4, r3
 800ecc4:	bb44      	cbnz	r4, 800ed18 <_malloc_r+0x88>
 800ecc6:	4629      	mov	r1, r5
 800ecc8:	4630      	mov	r0, r6
 800ecca:	f7ff ffbf 	bl	800ec4c <sbrk_aligned>
 800ecce:	1c43      	adds	r3, r0, #1
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	d158      	bne.n	800ed86 <_malloc_r+0xf6>
 800ecd4:	f8d8 4000 	ldr.w	r4, [r8]
 800ecd8:	4627      	mov	r7, r4
 800ecda:	2f00      	cmp	r7, #0
 800ecdc:	d143      	bne.n	800ed66 <_malloc_r+0xd6>
 800ecde:	2c00      	cmp	r4, #0
 800ece0:	d04b      	beq.n	800ed7a <_malloc_r+0xea>
 800ece2:	6823      	ldr	r3, [r4, #0]
 800ece4:	4639      	mov	r1, r7
 800ece6:	4630      	mov	r0, r6
 800ece8:	eb04 0903 	add.w	r9, r4, r3
 800ecec:	f001 f960 	bl	800ffb0 <_sbrk_r>
 800ecf0:	4581      	cmp	r9, r0
 800ecf2:	d142      	bne.n	800ed7a <_malloc_r+0xea>
 800ecf4:	6821      	ldr	r1, [r4, #0]
 800ecf6:	1a6d      	subs	r5, r5, r1
 800ecf8:	4629      	mov	r1, r5
 800ecfa:	4630      	mov	r0, r6
 800ecfc:	f7ff ffa6 	bl	800ec4c <sbrk_aligned>
 800ed00:	3001      	adds	r0, #1
 800ed02:	d03a      	beq.n	800ed7a <_malloc_r+0xea>
 800ed04:	6823      	ldr	r3, [r4, #0]
 800ed06:	442b      	add	r3, r5
 800ed08:	6023      	str	r3, [r4, #0]
 800ed0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ed0e:	685a      	ldr	r2, [r3, #4]
 800ed10:	bb62      	cbnz	r2, 800ed6c <_malloc_r+0xdc>
 800ed12:	f8c8 7000 	str.w	r7, [r8]
 800ed16:	e00f      	b.n	800ed38 <_malloc_r+0xa8>
 800ed18:	6822      	ldr	r2, [r4, #0]
 800ed1a:	1b52      	subs	r2, r2, r5
 800ed1c:	d420      	bmi.n	800ed60 <_malloc_r+0xd0>
 800ed1e:	2a0b      	cmp	r2, #11
 800ed20:	d917      	bls.n	800ed52 <_malloc_r+0xc2>
 800ed22:	1961      	adds	r1, r4, r5
 800ed24:	42a3      	cmp	r3, r4
 800ed26:	6025      	str	r5, [r4, #0]
 800ed28:	bf18      	it	ne
 800ed2a:	6059      	strne	r1, [r3, #4]
 800ed2c:	6863      	ldr	r3, [r4, #4]
 800ed2e:	bf08      	it	eq
 800ed30:	f8c8 1000 	streq.w	r1, [r8]
 800ed34:	5162      	str	r2, [r4, r5]
 800ed36:	604b      	str	r3, [r1, #4]
 800ed38:	4630      	mov	r0, r6
 800ed3a:	f000 f82f 	bl	800ed9c <__malloc_unlock>
 800ed3e:	f104 000b 	add.w	r0, r4, #11
 800ed42:	1d23      	adds	r3, r4, #4
 800ed44:	f020 0007 	bic.w	r0, r0, #7
 800ed48:	1ac2      	subs	r2, r0, r3
 800ed4a:	bf1c      	itt	ne
 800ed4c:	1a1b      	subne	r3, r3, r0
 800ed4e:	50a3      	strne	r3, [r4, r2]
 800ed50:	e7af      	b.n	800ecb2 <_malloc_r+0x22>
 800ed52:	6862      	ldr	r2, [r4, #4]
 800ed54:	42a3      	cmp	r3, r4
 800ed56:	bf0c      	ite	eq
 800ed58:	f8c8 2000 	streq.w	r2, [r8]
 800ed5c:	605a      	strne	r2, [r3, #4]
 800ed5e:	e7eb      	b.n	800ed38 <_malloc_r+0xa8>
 800ed60:	4623      	mov	r3, r4
 800ed62:	6864      	ldr	r4, [r4, #4]
 800ed64:	e7ae      	b.n	800ecc4 <_malloc_r+0x34>
 800ed66:	463c      	mov	r4, r7
 800ed68:	687f      	ldr	r7, [r7, #4]
 800ed6a:	e7b6      	b.n	800ecda <_malloc_r+0x4a>
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	42a3      	cmp	r3, r4
 800ed72:	d1fb      	bne.n	800ed6c <_malloc_r+0xdc>
 800ed74:	2300      	movs	r3, #0
 800ed76:	6053      	str	r3, [r2, #4]
 800ed78:	e7de      	b.n	800ed38 <_malloc_r+0xa8>
 800ed7a:	230c      	movs	r3, #12
 800ed7c:	6033      	str	r3, [r6, #0]
 800ed7e:	4630      	mov	r0, r6
 800ed80:	f000 f80c 	bl	800ed9c <__malloc_unlock>
 800ed84:	e794      	b.n	800ecb0 <_malloc_r+0x20>
 800ed86:	6005      	str	r5, [r0, #0]
 800ed88:	e7d6      	b.n	800ed38 <_malloc_r+0xa8>
 800ed8a:	bf00      	nop
 800ed8c:	20005528 	.word	0x20005528

0800ed90 <__malloc_lock>:
 800ed90:	4801      	ldr	r0, [pc, #4]	@ (800ed98 <__malloc_lock+0x8>)
 800ed92:	f001 b95a 	b.w	801004a <__retarget_lock_acquire_recursive>
 800ed96:	bf00      	nop
 800ed98:	2000566c 	.word	0x2000566c

0800ed9c <__malloc_unlock>:
 800ed9c:	4801      	ldr	r0, [pc, #4]	@ (800eda4 <__malloc_unlock+0x8>)
 800ed9e:	f001 b955 	b.w	801004c <__retarget_lock_release_recursive>
 800eda2:	bf00      	nop
 800eda4:	2000566c 	.word	0x2000566c

0800eda8 <__utoa>:
 800eda8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edaa:	4c1f      	ldr	r4, [pc, #124]	@ (800ee28 <__utoa+0x80>)
 800edac:	b08b      	sub	sp, #44	@ 0x2c
 800edae:	4605      	mov	r5, r0
 800edb0:	460b      	mov	r3, r1
 800edb2:	466e      	mov	r6, sp
 800edb4:	f104 0c20 	add.w	ip, r4, #32
 800edb8:	6820      	ldr	r0, [r4, #0]
 800edba:	6861      	ldr	r1, [r4, #4]
 800edbc:	4637      	mov	r7, r6
 800edbe:	c703      	stmia	r7!, {r0, r1}
 800edc0:	3408      	adds	r4, #8
 800edc2:	4564      	cmp	r4, ip
 800edc4:	463e      	mov	r6, r7
 800edc6:	d1f7      	bne.n	800edb8 <__utoa+0x10>
 800edc8:	7921      	ldrb	r1, [r4, #4]
 800edca:	7139      	strb	r1, [r7, #4]
 800edcc:	1e91      	subs	r1, r2, #2
 800edce:	6820      	ldr	r0, [r4, #0]
 800edd0:	6038      	str	r0, [r7, #0]
 800edd2:	2922      	cmp	r1, #34	@ 0x22
 800edd4:	f04f 0100 	mov.w	r1, #0
 800edd8:	d904      	bls.n	800ede4 <__utoa+0x3c>
 800edda:	7019      	strb	r1, [r3, #0]
 800eddc:	460b      	mov	r3, r1
 800edde:	4618      	mov	r0, r3
 800ede0:	b00b      	add	sp, #44	@ 0x2c
 800ede2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ede4:	1e58      	subs	r0, r3, #1
 800ede6:	4684      	mov	ip, r0
 800ede8:	fbb5 f7f2 	udiv	r7, r5, r2
 800edec:	fb02 5617 	mls	r6, r2, r7, r5
 800edf0:	3628      	adds	r6, #40	@ 0x28
 800edf2:	446e      	add	r6, sp
 800edf4:	460c      	mov	r4, r1
 800edf6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800edfa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800edfe:	462e      	mov	r6, r5
 800ee00:	42b2      	cmp	r2, r6
 800ee02:	f101 0101 	add.w	r1, r1, #1
 800ee06:	463d      	mov	r5, r7
 800ee08:	d9ee      	bls.n	800ede8 <__utoa+0x40>
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	545a      	strb	r2, [r3, r1]
 800ee0e:	1919      	adds	r1, r3, r4
 800ee10:	1aa5      	subs	r5, r4, r2
 800ee12:	42aa      	cmp	r2, r5
 800ee14:	dae3      	bge.n	800edde <__utoa+0x36>
 800ee16:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ee1a:	780e      	ldrb	r6, [r1, #0]
 800ee1c:	7006      	strb	r6, [r0, #0]
 800ee1e:	3201      	adds	r2, #1
 800ee20:	f801 5901 	strb.w	r5, [r1], #-1
 800ee24:	e7f4      	b.n	800ee10 <__utoa+0x68>
 800ee26:	bf00      	nop
 800ee28:	08015084 	.word	0x08015084

0800ee2c <__cvt>:
 800ee2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee30:	ec57 6b10 	vmov	r6, r7, d0
 800ee34:	2f00      	cmp	r7, #0
 800ee36:	460c      	mov	r4, r1
 800ee38:	4619      	mov	r1, r3
 800ee3a:	463b      	mov	r3, r7
 800ee3c:	bfbb      	ittet	lt
 800ee3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ee42:	461f      	movlt	r7, r3
 800ee44:	2300      	movge	r3, #0
 800ee46:	232d      	movlt	r3, #45	@ 0x2d
 800ee48:	700b      	strb	r3, [r1, #0]
 800ee4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ee4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ee50:	4691      	mov	r9, r2
 800ee52:	f023 0820 	bic.w	r8, r3, #32
 800ee56:	bfbc      	itt	lt
 800ee58:	4632      	movlt	r2, r6
 800ee5a:	4616      	movlt	r6, r2
 800ee5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ee60:	d005      	beq.n	800ee6e <__cvt+0x42>
 800ee62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ee66:	d100      	bne.n	800ee6a <__cvt+0x3e>
 800ee68:	3401      	adds	r4, #1
 800ee6a:	2102      	movs	r1, #2
 800ee6c:	e000      	b.n	800ee70 <__cvt+0x44>
 800ee6e:	2103      	movs	r1, #3
 800ee70:	ab03      	add	r3, sp, #12
 800ee72:	9301      	str	r3, [sp, #4]
 800ee74:	ab02      	add	r3, sp, #8
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	ec47 6b10 	vmov	d0, r6, r7
 800ee7c:	4653      	mov	r3, sl
 800ee7e:	4622      	mov	r2, r4
 800ee80:	f001 f9a2 	bl	80101c8 <_dtoa_r>
 800ee84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ee88:	4605      	mov	r5, r0
 800ee8a:	d119      	bne.n	800eec0 <__cvt+0x94>
 800ee8c:	f019 0f01 	tst.w	r9, #1
 800ee90:	d00e      	beq.n	800eeb0 <__cvt+0x84>
 800ee92:	eb00 0904 	add.w	r9, r0, r4
 800ee96:	2200      	movs	r2, #0
 800ee98:	2300      	movs	r3, #0
 800ee9a:	4630      	mov	r0, r6
 800ee9c:	4639      	mov	r1, r7
 800ee9e:	f7f1 fe23 	bl	8000ae8 <__aeabi_dcmpeq>
 800eea2:	b108      	cbz	r0, 800eea8 <__cvt+0x7c>
 800eea4:	f8cd 900c 	str.w	r9, [sp, #12]
 800eea8:	2230      	movs	r2, #48	@ 0x30
 800eeaa:	9b03      	ldr	r3, [sp, #12]
 800eeac:	454b      	cmp	r3, r9
 800eeae:	d31e      	bcc.n	800eeee <__cvt+0xc2>
 800eeb0:	9b03      	ldr	r3, [sp, #12]
 800eeb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eeb4:	1b5b      	subs	r3, r3, r5
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	6013      	str	r3, [r2, #0]
 800eeba:	b004      	add	sp, #16
 800eebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eec0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eec4:	eb00 0904 	add.w	r9, r0, r4
 800eec8:	d1e5      	bne.n	800ee96 <__cvt+0x6a>
 800eeca:	7803      	ldrb	r3, [r0, #0]
 800eecc:	2b30      	cmp	r3, #48	@ 0x30
 800eece:	d10a      	bne.n	800eee6 <__cvt+0xba>
 800eed0:	2200      	movs	r2, #0
 800eed2:	2300      	movs	r3, #0
 800eed4:	4630      	mov	r0, r6
 800eed6:	4639      	mov	r1, r7
 800eed8:	f7f1 fe06 	bl	8000ae8 <__aeabi_dcmpeq>
 800eedc:	b918      	cbnz	r0, 800eee6 <__cvt+0xba>
 800eede:	f1c4 0401 	rsb	r4, r4, #1
 800eee2:	f8ca 4000 	str.w	r4, [sl]
 800eee6:	f8da 3000 	ldr.w	r3, [sl]
 800eeea:	4499      	add	r9, r3
 800eeec:	e7d3      	b.n	800ee96 <__cvt+0x6a>
 800eeee:	1c59      	adds	r1, r3, #1
 800eef0:	9103      	str	r1, [sp, #12]
 800eef2:	701a      	strb	r2, [r3, #0]
 800eef4:	e7d9      	b.n	800eeaa <__cvt+0x7e>

0800eef6 <__exponent>:
 800eef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eef8:	2900      	cmp	r1, #0
 800eefa:	bfba      	itte	lt
 800eefc:	4249      	neglt	r1, r1
 800eefe:	232d      	movlt	r3, #45	@ 0x2d
 800ef00:	232b      	movge	r3, #43	@ 0x2b
 800ef02:	2909      	cmp	r1, #9
 800ef04:	7002      	strb	r2, [r0, #0]
 800ef06:	7043      	strb	r3, [r0, #1]
 800ef08:	dd29      	ble.n	800ef5e <__exponent+0x68>
 800ef0a:	f10d 0307 	add.w	r3, sp, #7
 800ef0e:	461d      	mov	r5, r3
 800ef10:	270a      	movs	r7, #10
 800ef12:	461a      	mov	r2, r3
 800ef14:	fbb1 f6f7 	udiv	r6, r1, r7
 800ef18:	fb07 1416 	mls	r4, r7, r6, r1
 800ef1c:	3430      	adds	r4, #48	@ 0x30
 800ef1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ef22:	460c      	mov	r4, r1
 800ef24:	2c63      	cmp	r4, #99	@ 0x63
 800ef26:	f103 33ff 	add.w	r3, r3, #4294967295
 800ef2a:	4631      	mov	r1, r6
 800ef2c:	dcf1      	bgt.n	800ef12 <__exponent+0x1c>
 800ef2e:	3130      	adds	r1, #48	@ 0x30
 800ef30:	1e94      	subs	r4, r2, #2
 800ef32:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ef36:	1c41      	adds	r1, r0, #1
 800ef38:	4623      	mov	r3, r4
 800ef3a:	42ab      	cmp	r3, r5
 800ef3c:	d30a      	bcc.n	800ef54 <__exponent+0x5e>
 800ef3e:	f10d 0309 	add.w	r3, sp, #9
 800ef42:	1a9b      	subs	r3, r3, r2
 800ef44:	42ac      	cmp	r4, r5
 800ef46:	bf88      	it	hi
 800ef48:	2300      	movhi	r3, #0
 800ef4a:	3302      	adds	r3, #2
 800ef4c:	4403      	add	r3, r0
 800ef4e:	1a18      	subs	r0, r3, r0
 800ef50:	b003      	add	sp, #12
 800ef52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef54:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ef58:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ef5c:	e7ed      	b.n	800ef3a <__exponent+0x44>
 800ef5e:	2330      	movs	r3, #48	@ 0x30
 800ef60:	3130      	adds	r1, #48	@ 0x30
 800ef62:	7083      	strb	r3, [r0, #2]
 800ef64:	70c1      	strb	r1, [r0, #3]
 800ef66:	1d03      	adds	r3, r0, #4
 800ef68:	e7f1      	b.n	800ef4e <__exponent+0x58>
	...

0800ef6c <_printf_float>:
 800ef6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef70:	b08d      	sub	sp, #52	@ 0x34
 800ef72:	460c      	mov	r4, r1
 800ef74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ef78:	4616      	mov	r6, r2
 800ef7a:	461f      	mov	r7, r3
 800ef7c:	4605      	mov	r5, r0
 800ef7e:	f000 ffdf 	bl	800ff40 <_localeconv_r>
 800ef82:	6803      	ldr	r3, [r0, #0]
 800ef84:	9304      	str	r3, [sp, #16]
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7f1 f982 	bl	8000290 <strlen>
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef90:	f8d8 3000 	ldr.w	r3, [r8]
 800ef94:	9005      	str	r0, [sp, #20]
 800ef96:	3307      	adds	r3, #7
 800ef98:	f023 0307 	bic.w	r3, r3, #7
 800ef9c:	f103 0208 	add.w	r2, r3, #8
 800efa0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800efa4:	f8d4 b000 	ldr.w	fp, [r4]
 800efa8:	f8c8 2000 	str.w	r2, [r8]
 800efac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800efb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800efb4:	9307      	str	r3, [sp, #28]
 800efb6:	f8cd 8018 	str.w	r8, [sp, #24]
 800efba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800efbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efc2:	4b9c      	ldr	r3, [pc, #624]	@ (800f234 <_printf_float+0x2c8>)
 800efc4:	f04f 32ff 	mov.w	r2, #4294967295
 800efc8:	f7f1 fdc0 	bl	8000b4c <__aeabi_dcmpun>
 800efcc:	bb70      	cbnz	r0, 800f02c <_printf_float+0xc0>
 800efce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efd2:	4b98      	ldr	r3, [pc, #608]	@ (800f234 <_printf_float+0x2c8>)
 800efd4:	f04f 32ff 	mov.w	r2, #4294967295
 800efd8:	f7f1 fd9a 	bl	8000b10 <__aeabi_dcmple>
 800efdc:	bb30      	cbnz	r0, 800f02c <_printf_float+0xc0>
 800efde:	2200      	movs	r2, #0
 800efe0:	2300      	movs	r3, #0
 800efe2:	4640      	mov	r0, r8
 800efe4:	4649      	mov	r1, r9
 800efe6:	f7f1 fd89 	bl	8000afc <__aeabi_dcmplt>
 800efea:	b110      	cbz	r0, 800eff2 <_printf_float+0x86>
 800efec:	232d      	movs	r3, #45	@ 0x2d
 800efee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eff2:	4a91      	ldr	r2, [pc, #580]	@ (800f238 <_printf_float+0x2cc>)
 800eff4:	4b91      	ldr	r3, [pc, #580]	@ (800f23c <_printf_float+0x2d0>)
 800eff6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800effa:	bf94      	ite	ls
 800effc:	4690      	movls	r8, r2
 800effe:	4698      	movhi	r8, r3
 800f000:	2303      	movs	r3, #3
 800f002:	6123      	str	r3, [r4, #16]
 800f004:	f02b 0304 	bic.w	r3, fp, #4
 800f008:	6023      	str	r3, [r4, #0]
 800f00a:	f04f 0900 	mov.w	r9, #0
 800f00e:	9700      	str	r7, [sp, #0]
 800f010:	4633      	mov	r3, r6
 800f012:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f014:	4621      	mov	r1, r4
 800f016:	4628      	mov	r0, r5
 800f018:	f000 f9d2 	bl	800f3c0 <_printf_common>
 800f01c:	3001      	adds	r0, #1
 800f01e:	f040 808d 	bne.w	800f13c <_printf_float+0x1d0>
 800f022:	f04f 30ff 	mov.w	r0, #4294967295
 800f026:	b00d      	add	sp, #52	@ 0x34
 800f028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f02c:	4642      	mov	r2, r8
 800f02e:	464b      	mov	r3, r9
 800f030:	4640      	mov	r0, r8
 800f032:	4649      	mov	r1, r9
 800f034:	f7f1 fd8a 	bl	8000b4c <__aeabi_dcmpun>
 800f038:	b140      	cbz	r0, 800f04c <_printf_float+0xe0>
 800f03a:	464b      	mov	r3, r9
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	bfbc      	itt	lt
 800f040:	232d      	movlt	r3, #45	@ 0x2d
 800f042:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f046:	4a7e      	ldr	r2, [pc, #504]	@ (800f240 <_printf_float+0x2d4>)
 800f048:	4b7e      	ldr	r3, [pc, #504]	@ (800f244 <_printf_float+0x2d8>)
 800f04a:	e7d4      	b.n	800eff6 <_printf_float+0x8a>
 800f04c:	6863      	ldr	r3, [r4, #4]
 800f04e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f052:	9206      	str	r2, [sp, #24]
 800f054:	1c5a      	adds	r2, r3, #1
 800f056:	d13b      	bne.n	800f0d0 <_printf_float+0x164>
 800f058:	2306      	movs	r3, #6
 800f05a:	6063      	str	r3, [r4, #4]
 800f05c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f060:	2300      	movs	r3, #0
 800f062:	6022      	str	r2, [r4, #0]
 800f064:	9303      	str	r3, [sp, #12]
 800f066:	ab0a      	add	r3, sp, #40	@ 0x28
 800f068:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f06c:	ab09      	add	r3, sp, #36	@ 0x24
 800f06e:	9300      	str	r3, [sp, #0]
 800f070:	6861      	ldr	r1, [r4, #4]
 800f072:	ec49 8b10 	vmov	d0, r8, r9
 800f076:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f07a:	4628      	mov	r0, r5
 800f07c:	f7ff fed6 	bl	800ee2c <__cvt>
 800f080:	9b06      	ldr	r3, [sp, #24]
 800f082:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f084:	2b47      	cmp	r3, #71	@ 0x47
 800f086:	4680      	mov	r8, r0
 800f088:	d129      	bne.n	800f0de <_printf_float+0x172>
 800f08a:	1cc8      	adds	r0, r1, #3
 800f08c:	db02      	blt.n	800f094 <_printf_float+0x128>
 800f08e:	6863      	ldr	r3, [r4, #4]
 800f090:	4299      	cmp	r1, r3
 800f092:	dd41      	ble.n	800f118 <_printf_float+0x1ac>
 800f094:	f1aa 0a02 	sub.w	sl, sl, #2
 800f098:	fa5f fa8a 	uxtb.w	sl, sl
 800f09c:	3901      	subs	r1, #1
 800f09e:	4652      	mov	r2, sl
 800f0a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f0a4:	9109      	str	r1, [sp, #36]	@ 0x24
 800f0a6:	f7ff ff26 	bl	800eef6 <__exponent>
 800f0aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f0ac:	1813      	adds	r3, r2, r0
 800f0ae:	2a01      	cmp	r2, #1
 800f0b0:	4681      	mov	r9, r0
 800f0b2:	6123      	str	r3, [r4, #16]
 800f0b4:	dc02      	bgt.n	800f0bc <_printf_float+0x150>
 800f0b6:	6822      	ldr	r2, [r4, #0]
 800f0b8:	07d2      	lsls	r2, r2, #31
 800f0ba:	d501      	bpl.n	800f0c0 <_printf_float+0x154>
 800f0bc:	3301      	adds	r3, #1
 800f0be:	6123      	str	r3, [r4, #16]
 800f0c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d0a2      	beq.n	800f00e <_printf_float+0xa2>
 800f0c8:	232d      	movs	r3, #45	@ 0x2d
 800f0ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0ce:	e79e      	b.n	800f00e <_printf_float+0xa2>
 800f0d0:	9a06      	ldr	r2, [sp, #24]
 800f0d2:	2a47      	cmp	r2, #71	@ 0x47
 800f0d4:	d1c2      	bne.n	800f05c <_printf_float+0xf0>
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d1c0      	bne.n	800f05c <_printf_float+0xf0>
 800f0da:	2301      	movs	r3, #1
 800f0dc:	e7bd      	b.n	800f05a <_printf_float+0xee>
 800f0de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f0e2:	d9db      	bls.n	800f09c <_printf_float+0x130>
 800f0e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f0e8:	d118      	bne.n	800f11c <_printf_float+0x1b0>
 800f0ea:	2900      	cmp	r1, #0
 800f0ec:	6863      	ldr	r3, [r4, #4]
 800f0ee:	dd0b      	ble.n	800f108 <_printf_float+0x19c>
 800f0f0:	6121      	str	r1, [r4, #16]
 800f0f2:	b913      	cbnz	r3, 800f0fa <_printf_float+0x18e>
 800f0f4:	6822      	ldr	r2, [r4, #0]
 800f0f6:	07d0      	lsls	r0, r2, #31
 800f0f8:	d502      	bpl.n	800f100 <_printf_float+0x194>
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	440b      	add	r3, r1
 800f0fe:	6123      	str	r3, [r4, #16]
 800f100:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f102:	f04f 0900 	mov.w	r9, #0
 800f106:	e7db      	b.n	800f0c0 <_printf_float+0x154>
 800f108:	b913      	cbnz	r3, 800f110 <_printf_float+0x1a4>
 800f10a:	6822      	ldr	r2, [r4, #0]
 800f10c:	07d2      	lsls	r2, r2, #31
 800f10e:	d501      	bpl.n	800f114 <_printf_float+0x1a8>
 800f110:	3302      	adds	r3, #2
 800f112:	e7f4      	b.n	800f0fe <_printf_float+0x192>
 800f114:	2301      	movs	r3, #1
 800f116:	e7f2      	b.n	800f0fe <_printf_float+0x192>
 800f118:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f11e:	4299      	cmp	r1, r3
 800f120:	db05      	blt.n	800f12e <_printf_float+0x1c2>
 800f122:	6823      	ldr	r3, [r4, #0]
 800f124:	6121      	str	r1, [r4, #16]
 800f126:	07d8      	lsls	r0, r3, #31
 800f128:	d5ea      	bpl.n	800f100 <_printf_float+0x194>
 800f12a:	1c4b      	adds	r3, r1, #1
 800f12c:	e7e7      	b.n	800f0fe <_printf_float+0x192>
 800f12e:	2900      	cmp	r1, #0
 800f130:	bfd4      	ite	le
 800f132:	f1c1 0202 	rsble	r2, r1, #2
 800f136:	2201      	movgt	r2, #1
 800f138:	4413      	add	r3, r2
 800f13a:	e7e0      	b.n	800f0fe <_printf_float+0x192>
 800f13c:	6823      	ldr	r3, [r4, #0]
 800f13e:	055a      	lsls	r2, r3, #21
 800f140:	d407      	bmi.n	800f152 <_printf_float+0x1e6>
 800f142:	6923      	ldr	r3, [r4, #16]
 800f144:	4642      	mov	r2, r8
 800f146:	4631      	mov	r1, r6
 800f148:	4628      	mov	r0, r5
 800f14a:	47b8      	blx	r7
 800f14c:	3001      	adds	r0, #1
 800f14e:	d12b      	bne.n	800f1a8 <_printf_float+0x23c>
 800f150:	e767      	b.n	800f022 <_printf_float+0xb6>
 800f152:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f156:	f240 80dd 	bls.w	800f314 <_printf_float+0x3a8>
 800f15a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f15e:	2200      	movs	r2, #0
 800f160:	2300      	movs	r3, #0
 800f162:	f7f1 fcc1 	bl	8000ae8 <__aeabi_dcmpeq>
 800f166:	2800      	cmp	r0, #0
 800f168:	d033      	beq.n	800f1d2 <_printf_float+0x266>
 800f16a:	4a37      	ldr	r2, [pc, #220]	@ (800f248 <_printf_float+0x2dc>)
 800f16c:	2301      	movs	r3, #1
 800f16e:	4631      	mov	r1, r6
 800f170:	4628      	mov	r0, r5
 800f172:	47b8      	blx	r7
 800f174:	3001      	adds	r0, #1
 800f176:	f43f af54 	beq.w	800f022 <_printf_float+0xb6>
 800f17a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f17e:	4543      	cmp	r3, r8
 800f180:	db02      	blt.n	800f188 <_printf_float+0x21c>
 800f182:	6823      	ldr	r3, [r4, #0]
 800f184:	07d8      	lsls	r0, r3, #31
 800f186:	d50f      	bpl.n	800f1a8 <_printf_float+0x23c>
 800f188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f18c:	4631      	mov	r1, r6
 800f18e:	4628      	mov	r0, r5
 800f190:	47b8      	blx	r7
 800f192:	3001      	adds	r0, #1
 800f194:	f43f af45 	beq.w	800f022 <_printf_float+0xb6>
 800f198:	f04f 0900 	mov.w	r9, #0
 800f19c:	f108 38ff 	add.w	r8, r8, #4294967295
 800f1a0:	f104 0a1a 	add.w	sl, r4, #26
 800f1a4:	45c8      	cmp	r8, r9
 800f1a6:	dc09      	bgt.n	800f1bc <_printf_float+0x250>
 800f1a8:	6823      	ldr	r3, [r4, #0]
 800f1aa:	079b      	lsls	r3, r3, #30
 800f1ac:	f100 8103 	bmi.w	800f3b6 <_printf_float+0x44a>
 800f1b0:	68e0      	ldr	r0, [r4, #12]
 800f1b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f1b4:	4298      	cmp	r0, r3
 800f1b6:	bfb8      	it	lt
 800f1b8:	4618      	movlt	r0, r3
 800f1ba:	e734      	b.n	800f026 <_printf_float+0xba>
 800f1bc:	2301      	movs	r3, #1
 800f1be:	4652      	mov	r2, sl
 800f1c0:	4631      	mov	r1, r6
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	47b8      	blx	r7
 800f1c6:	3001      	adds	r0, #1
 800f1c8:	f43f af2b 	beq.w	800f022 <_printf_float+0xb6>
 800f1cc:	f109 0901 	add.w	r9, r9, #1
 800f1d0:	e7e8      	b.n	800f1a4 <_printf_float+0x238>
 800f1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	dc39      	bgt.n	800f24c <_printf_float+0x2e0>
 800f1d8:	4a1b      	ldr	r2, [pc, #108]	@ (800f248 <_printf_float+0x2dc>)
 800f1da:	2301      	movs	r3, #1
 800f1dc:	4631      	mov	r1, r6
 800f1de:	4628      	mov	r0, r5
 800f1e0:	47b8      	blx	r7
 800f1e2:	3001      	adds	r0, #1
 800f1e4:	f43f af1d 	beq.w	800f022 <_printf_float+0xb6>
 800f1e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f1ec:	ea59 0303 	orrs.w	r3, r9, r3
 800f1f0:	d102      	bne.n	800f1f8 <_printf_float+0x28c>
 800f1f2:	6823      	ldr	r3, [r4, #0]
 800f1f4:	07d9      	lsls	r1, r3, #31
 800f1f6:	d5d7      	bpl.n	800f1a8 <_printf_float+0x23c>
 800f1f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1fc:	4631      	mov	r1, r6
 800f1fe:	4628      	mov	r0, r5
 800f200:	47b8      	blx	r7
 800f202:	3001      	adds	r0, #1
 800f204:	f43f af0d 	beq.w	800f022 <_printf_float+0xb6>
 800f208:	f04f 0a00 	mov.w	sl, #0
 800f20c:	f104 0b1a 	add.w	fp, r4, #26
 800f210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f212:	425b      	negs	r3, r3
 800f214:	4553      	cmp	r3, sl
 800f216:	dc01      	bgt.n	800f21c <_printf_float+0x2b0>
 800f218:	464b      	mov	r3, r9
 800f21a:	e793      	b.n	800f144 <_printf_float+0x1d8>
 800f21c:	2301      	movs	r3, #1
 800f21e:	465a      	mov	r2, fp
 800f220:	4631      	mov	r1, r6
 800f222:	4628      	mov	r0, r5
 800f224:	47b8      	blx	r7
 800f226:	3001      	adds	r0, #1
 800f228:	f43f aefb 	beq.w	800f022 <_printf_float+0xb6>
 800f22c:	f10a 0a01 	add.w	sl, sl, #1
 800f230:	e7ee      	b.n	800f210 <_printf_float+0x2a4>
 800f232:	bf00      	nop
 800f234:	7fefffff 	.word	0x7fefffff
 800f238:	080150a9 	.word	0x080150a9
 800f23c:	080150ad 	.word	0x080150ad
 800f240:	080150b1 	.word	0x080150b1
 800f244:	080150b5 	.word	0x080150b5
 800f248:	080154d8 	.word	0x080154d8
 800f24c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f24e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f252:	4553      	cmp	r3, sl
 800f254:	bfa8      	it	ge
 800f256:	4653      	movge	r3, sl
 800f258:	2b00      	cmp	r3, #0
 800f25a:	4699      	mov	r9, r3
 800f25c:	dc36      	bgt.n	800f2cc <_printf_float+0x360>
 800f25e:	f04f 0b00 	mov.w	fp, #0
 800f262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f266:	f104 021a 	add.w	r2, r4, #26
 800f26a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f26c:	9306      	str	r3, [sp, #24]
 800f26e:	eba3 0309 	sub.w	r3, r3, r9
 800f272:	455b      	cmp	r3, fp
 800f274:	dc31      	bgt.n	800f2da <_printf_float+0x36e>
 800f276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f278:	459a      	cmp	sl, r3
 800f27a:	dc3a      	bgt.n	800f2f2 <_printf_float+0x386>
 800f27c:	6823      	ldr	r3, [r4, #0]
 800f27e:	07da      	lsls	r2, r3, #31
 800f280:	d437      	bmi.n	800f2f2 <_printf_float+0x386>
 800f282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f284:	ebaa 0903 	sub.w	r9, sl, r3
 800f288:	9b06      	ldr	r3, [sp, #24]
 800f28a:	ebaa 0303 	sub.w	r3, sl, r3
 800f28e:	4599      	cmp	r9, r3
 800f290:	bfa8      	it	ge
 800f292:	4699      	movge	r9, r3
 800f294:	f1b9 0f00 	cmp.w	r9, #0
 800f298:	dc33      	bgt.n	800f302 <_printf_float+0x396>
 800f29a:	f04f 0800 	mov.w	r8, #0
 800f29e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f2a2:	f104 0b1a 	add.w	fp, r4, #26
 800f2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2a8:	ebaa 0303 	sub.w	r3, sl, r3
 800f2ac:	eba3 0309 	sub.w	r3, r3, r9
 800f2b0:	4543      	cmp	r3, r8
 800f2b2:	f77f af79 	ble.w	800f1a8 <_printf_float+0x23c>
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	465a      	mov	r2, fp
 800f2ba:	4631      	mov	r1, r6
 800f2bc:	4628      	mov	r0, r5
 800f2be:	47b8      	blx	r7
 800f2c0:	3001      	adds	r0, #1
 800f2c2:	f43f aeae 	beq.w	800f022 <_printf_float+0xb6>
 800f2c6:	f108 0801 	add.w	r8, r8, #1
 800f2ca:	e7ec      	b.n	800f2a6 <_printf_float+0x33a>
 800f2cc:	4642      	mov	r2, r8
 800f2ce:	4631      	mov	r1, r6
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	47b8      	blx	r7
 800f2d4:	3001      	adds	r0, #1
 800f2d6:	d1c2      	bne.n	800f25e <_printf_float+0x2f2>
 800f2d8:	e6a3      	b.n	800f022 <_printf_float+0xb6>
 800f2da:	2301      	movs	r3, #1
 800f2dc:	4631      	mov	r1, r6
 800f2de:	4628      	mov	r0, r5
 800f2e0:	9206      	str	r2, [sp, #24]
 800f2e2:	47b8      	blx	r7
 800f2e4:	3001      	adds	r0, #1
 800f2e6:	f43f ae9c 	beq.w	800f022 <_printf_float+0xb6>
 800f2ea:	9a06      	ldr	r2, [sp, #24]
 800f2ec:	f10b 0b01 	add.w	fp, fp, #1
 800f2f0:	e7bb      	b.n	800f26a <_printf_float+0x2fe>
 800f2f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2f6:	4631      	mov	r1, r6
 800f2f8:	4628      	mov	r0, r5
 800f2fa:	47b8      	blx	r7
 800f2fc:	3001      	adds	r0, #1
 800f2fe:	d1c0      	bne.n	800f282 <_printf_float+0x316>
 800f300:	e68f      	b.n	800f022 <_printf_float+0xb6>
 800f302:	9a06      	ldr	r2, [sp, #24]
 800f304:	464b      	mov	r3, r9
 800f306:	4442      	add	r2, r8
 800f308:	4631      	mov	r1, r6
 800f30a:	4628      	mov	r0, r5
 800f30c:	47b8      	blx	r7
 800f30e:	3001      	adds	r0, #1
 800f310:	d1c3      	bne.n	800f29a <_printf_float+0x32e>
 800f312:	e686      	b.n	800f022 <_printf_float+0xb6>
 800f314:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f318:	f1ba 0f01 	cmp.w	sl, #1
 800f31c:	dc01      	bgt.n	800f322 <_printf_float+0x3b6>
 800f31e:	07db      	lsls	r3, r3, #31
 800f320:	d536      	bpl.n	800f390 <_printf_float+0x424>
 800f322:	2301      	movs	r3, #1
 800f324:	4642      	mov	r2, r8
 800f326:	4631      	mov	r1, r6
 800f328:	4628      	mov	r0, r5
 800f32a:	47b8      	blx	r7
 800f32c:	3001      	adds	r0, #1
 800f32e:	f43f ae78 	beq.w	800f022 <_printf_float+0xb6>
 800f332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f336:	4631      	mov	r1, r6
 800f338:	4628      	mov	r0, r5
 800f33a:	47b8      	blx	r7
 800f33c:	3001      	adds	r0, #1
 800f33e:	f43f ae70 	beq.w	800f022 <_printf_float+0xb6>
 800f342:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f346:	2200      	movs	r2, #0
 800f348:	2300      	movs	r3, #0
 800f34a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f34e:	f7f1 fbcb 	bl	8000ae8 <__aeabi_dcmpeq>
 800f352:	b9c0      	cbnz	r0, 800f386 <_printf_float+0x41a>
 800f354:	4653      	mov	r3, sl
 800f356:	f108 0201 	add.w	r2, r8, #1
 800f35a:	4631      	mov	r1, r6
 800f35c:	4628      	mov	r0, r5
 800f35e:	47b8      	blx	r7
 800f360:	3001      	adds	r0, #1
 800f362:	d10c      	bne.n	800f37e <_printf_float+0x412>
 800f364:	e65d      	b.n	800f022 <_printf_float+0xb6>
 800f366:	2301      	movs	r3, #1
 800f368:	465a      	mov	r2, fp
 800f36a:	4631      	mov	r1, r6
 800f36c:	4628      	mov	r0, r5
 800f36e:	47b8      	blx	r7
 800f370:	3001      	adds	r0, #1
 800f372:	f43f ae56 	beq.w	800f022 <_printf_float+0xb6>
 800f376:	f108 0801 	add.w	r8, r8, #1
 800f37a:	45d0      	cmp	r8, sl
 800f37c:	dbf3      	blt.n	800f366 <_printf_float+0x3fa>
 800f37e:	464b      	mov	r3, r9
 800f380:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f384:	e6df      	b.n	800f146 <_printf_float+0x1da>
 800f386:	f04f 0800 	mov.w	r8, #0
 800f38a:	f104 0b1a 	add.w	fp, r4, #26
 800f38e:	e7f4      	b.n	800f37a <_printf_float+0x40e>
 800f390:	2301      	movs	r3, #1
 800f392:	4642      	mov	r2, r8
 800f394:	e7e1      	b.n	800f35a <_printf_float+0x3ee>
 800f396:	2301      	movs	r3, #1
 800f398:	464a      	mov	r2, r9
 800f39a:	4631      	mov	r1, r6
 800f39c:	4628      	mov	r0, r5
 800f39e:	47b8      	blx	r7
 800f3a0:	3001      	adds	r0, #1
 800f3a2:	f43f ae3e 	beq.w	800f022 <_printf_float+0xb6>
 800f3a6:	f108 0801 	add.w	r8, r8, #1
 800f3aa:	68e3      	ldr	r3, [r4, #12]
 800f3ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f3ae:	1a5b      	subs	r3, r3, r1
 800f3b0:	4543      	cmp	r3, r8
 800f3b2:	dcf0      	bgt.n	800f396 <_printf_float+0x42a>
 800f3b4:	e6fc      	b.n	800f1b0 <_printf_float+0x244>
 800f3b6:	f04f 0800 	mov.w	r8, #0
 800f3ba:	f104 0919 	add.w	r9, r4, #25
 800f3be:	e7f4      	b.n	800f3aa <_printf_float+0x43e>

0800f3c0 <_printf_common>:
 800f3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3c4:	4616      	mov	r6, r2
 800f3c6:	4698      	mov	r8, r3
 800f3c8:	688a      	ldr	r2, [r1, #8]
 800f3ca:	690b      	ldr	r3, [r1, #16]
 800f3cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	bfb8      	it	lt
 800f3d4:	4613      	movlt	r3, r2
 800f3d6:	6033      	str	r3, [r6, #0]
 800f3d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f3dc:	4607      	mov	r7, r0
 800f3de:	460c      	mov	r4, r1
 800f3e0:	b10a      	cbz	r2, 800f3e6 <_printf_common+0x26>
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	6033      	str	r3, [r6, #0]
 800f3e6:	6823      	ldr	r3, [r4, #0]
 800f3e8:	0699      	lsls	r1, r3, #26
 800f3ea:	bf42      	ittt	mi
 800f3ec:	6833      	ldrmi	r3, [r6, #0]
 800f3ee:	3302      	addmi	r3, #2
 800f3f0:	6033      	strmi	r3, [r6, #0]
 800f3f2:	6825      	ldr	r5, [r4, #0]
 800f3f4:	f015 0506 	ands.w	r5, r5, #6
 800f3f8:	d106      	bne.n	800f408 <_printf_common+0x48>
 800f3fa:	f104 0a19 	add.w	sl, r4, #25
 800f3fe:	68e3      	ldr	r3, [r4, #12]
 800f400:	6832      	ldr	r2, [r6, #0]
 800f402:	1a9b      	subs	r3, r3, r2
 800f404:	42ab      	cmp	r3, r5
 800f406:	dc26      	bgt.n	800f456 <_printf_common+0x96>
 800f408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f40c:	6822      	ldr	r2, [r4, #0]
 800f40e:	3b00      	subs	r3, #0
 800f410:	bf18      	it	ne
 800f412:	2301      	movne	r3, #1
 800f414:	0692      	lsls	r2, r2, #26
 800f416:	d42b      	bmi.n	800f470 <_printf_common+0xb0>
 800f418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f41c:	4641      	mov	r1, r8
 800f41e:	4638      	mov	r0, r7
 800f420:	47c8      	blx	r9
 800f422:	3001      	adds	r0, #1
 800f424:	d01e      	beq.n	800f464 <_printf_common+0xa4>
 800f426:	6823      	ldr	r3, [r4, #0]
 800f428:	6922      	ldr	r2, [r4, #16]
 800f42a:	f003 0306 	and.w	r3, r3, #6
 800f42e:	2b04      	cmp	r3, #4
 800f430:	bf02      	ittt	eq
 800f432:	68e5      	ldreq	r5, [r4, #12]
 800f434:	6833      	ldreq	r3, [r6, #0]
 800f436:	1aed      	subeq	r5, r5, r3
 800f438:	68a3      	ldr	r3, [r4, #8]
 800f43a:	bf0c      	ite	eq
 800f43c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f440:	2500      	movne	r5, #0
 800f442:	4293      	cmp	r3, r2
 800f444:	bfc4      	itt	gt
 800f446:	1a9b      	subgt	r3, r3, r2
 800f448:	18ed      	addgt	r5, r5, r3
 800f44a:	2600      	movs	r6, #0
 800f44c:	341a      	adds	r4, #26
 800f44e:	42b5      	cmp	r5, r6
 800f450:	d11a      	bne.n	800f488 <_printf_common+0xc8>
 800f452:	2000      	movs	r0, #0
 800f454:	e008      	b.n	800f468 <_printf_common+0xa8>
 800f456:	2301      	movs	r3, #1
 800f458:	4652      	mov	r2, sl
 800f45a:	4641      	mov	r1, r8
 800f45c:	4638      	mov	r0, r7
 800f45e:	47c8      	blx	r9
 800f460:	3001      	adds	r0, #1
 800f462:	d103      	bne.n	800f46c <_printf_common+0xac>
 800f464:	f04f 30ff 	mov.w	r0, #4294967295
 800f468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f46c:	3501      	adds	r5, #1
 800f46e:	e7c6      	b.n	800f3fe <_printf_common+0x3e>
 800f470:	18e1      	adds	r1, r4, r3
 800f472:	1c5a      	adds	r2, r3, #1
 800f474:	2030      	movs	r0, #48	@ 0x30
 800f476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f47a:	4422      	add	r2, r4
 800f47c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f484:	3302      	adds	r3, #2
 800f486:	e7c7      	b.n	800f418 <_printf_common+0x58>
 800f488:	2301      	movs	r3, #1
 800f48a:	4622      	mov	r2, r4
 800f48c:	4641      	mov	r1, r8
 800f48e:	4638      	mov	r0, r7
 800f490:	47c8      	blx	r9
 800f492:	3001      	adds	r0, #1
 800f494:	d0e6      	beq.n	800f464 <_printf_common+0xa4>
 800f496:	3601      	adds	r6, #1
 800f498:	e7d9      	b.n	800f44e <_printf_common+0x8e>
	...

0800f49c <_printf_i>:
 800f49c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4a0:	7e0f      	ldrb	r7, [r1, #24]
 800f4a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f4a4:	2f78      	cmp	r7, #120	@ 0x78
 800f4a6:	4691      	mov	r9, r2
 800f4a8:	4680      	mov	r8, r0
 800f4aa:	460c      	mov	r4, r1
 800f4ac:	469a      	mov	sl, r3
 800f4ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f4b2:	d807      	bhi.n	800f4c4 <_printf_i+0x28>
 800f4b4:	2f62      	cmp	r7, #98	@ 0x62
 800f4b6:	d80a      	bhi.n	800f4ce <_printf_i+0x32>
 800f4b8:	2f00      	cmp	r7, #0
 800f4ba:	f000 80d2 	beq.w	800f662 <_printf_i+0x1c6>
 800f4be:	2f58      	cmp	r7, #88	@ 0x58
 800f4c0:	f000 80b9 	beq.w	800f636 <_printf_i+0x19a>
 800f4c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f4c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f4cc:	e03a      	b.n	800f544 <_printf_i+0xa8>
 800f4ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f4d2:	2b15      	cmp	r3, #21
 800f4d4:	d8f6      	bhi.n	800f4c4 <_printf_i+0x28>
 800f4d6:	a101      	add	r1, pc, #4	@ (adr r1, 800f4dc <_printf_i+0x40>)
 800f4d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4dc:	0800f535 	.word	0x0800f535
 800f4e0:	0800f549 	.word	0x0800f549
 800f4e4:	0800f4c5 	.word	0x0800f4c5
 800f4e8:	0800f4c5 	.word	0x0800f4c5
 800f4ec:	0800f4c5 	.word	0x0800f4c5
 800f4f0:	0800f4c5 	.word	0x0800f4c5
 800f4f4:	0800f549 	.word	0x0800f549
 800f4f8:	0800f4c5 	.word	0x0800f4c5
 800f4fc:	0800f4c5 	.word	0x0800f4c5
 800f500:	0800f4c5 	.word	0x0800f4c5
 800f504:	0800f4c5 	.word	0x0800f4c5
 800f508:	0800f649 	.word	0x0800f649
 800f50c:	0800f573 	.word	0x0800f573
 800f510:	0800f603 	.word	0x0800f603
 800f514:	0800f4c5 	.word	0x0800f4c5
 800f518:	0800f4c5 	.word	0x0800f4c5
 800f51c:	0800f66b 	.word	0x0800f66b
 800f520:	0800f4c5 	.word	0x0800f4c5
 800f524:	0800f573 	.word	0x0800f573
 800f528:	0800f4c5 	.word	0x0800f4c5
 800f52c:	0800f4c5 	.word	0x0800f4c5
 800f530:	0800f60b 	.word	0x0800f60b
 800f534:	6833      	ldr	r3, [r6, #0]
 800f536:	1d1a      	adds	r2, r3, #4
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	6032      	str	r2, [r6, #0]
 800f53c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f544:	2301      	movs	r3, #1
 800f546:	e09d      	b.n	800f684 <_printf_i+0x1e8>
 800f548:	6833      	ldr	r3, [r6, #0]
 800f54a:	6820      	ldr	r0, [r4, #0]
 800f54c:	1d19      	adds	r1, r3, #4
 800f54e:	6031      	str	r1, [r6, #0]
 800f550:	0606      	lsls	r6, r0, #24
 800f552:	d501      	bpl.n	800f558 <_printf_i+0xbc>
 800f554:	681d      	ldr	r5, [r3, #0]
 800f556:	e003      	b.n	800f560 <_printf_i+0xc4>
 800f558:	0645      	lsls	r5, r0, #25
 800f55a:	d5fb      	bpl.n	800f554 <_printf_i+0xb8>
 800f55c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f560:	2d00      	cmp	r5, #0
 800f562:	da03      	bge.n	800f56c <_printf_i+0xd0>
 800f564:	232d      	movs	r3, #45	@ 0x2d
 800f566:	426d      	negs	r5, r5
 800f568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f56c:	4859      	ldr	r0, [pc, #356]	@ (800f6d4 <_printf_i+0x238>)
 800f56e:	230a      	movs	r3, #10
 800f570:	e011      	b.n	800f596 <_printf_i+0xfa>
 800f572:	6821      	ldr	r1, [r4, #0]
 800f574:	6833      	ldr	r3, [r6, #0]
 800f576:	0608      	lsls	r0, r1, #24
 800f578:	f853 5b04 	ldr.w	r5, [r3], #4
 800f57c:	d402      	bmi.n	800f584 <_printf_i+0xe8>
 800f57e:	0649      	lsls	r1, r1, #25
 800f580:	bf48      	it	mi
 800f582:	b2ad      	uxthmi	r5, r5
 800f584:	2f6f      	cmp	r7, #111	@ 0x6f
 800f586:	4853      	ldr	r0, [pc, #332]	@ (800f6d4 <_printf_i+0x238>)
 800f588:	6033      	str	r3, [r6, #0]
 800f58a:	bf14      	ite	ne
 800f58c:	230a      	movne	r3, #10
 800f58e:	2308      	moveq	r3, #8
 800f590:	2100      	movs	r1, #0
 800f592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f596:	6866      	ldr	r6, [r4, #4]
 800f598:	60a6      	str	r6, [r4, #8]
 800f59a:	2e00      	cmp	r6, #0
 800f59c:	bfa2      	ittt	ge
 800f59e:	6821      	ldrge	r1, [r4, #0]
 800f5a0:	f021 0104 	bicge.w	r1, r1, #4
 800f5a4:	6021      	strge	r1, [r4, #0]
 800f5a6:	b90d      	cbnz	r5, 800f5ac <_printf_i+0x110>
 800f5a8:	2e00      	cmp	r6, #0
 800f5aa:	d04b      	beq.n	800f644 <_printf_i+0x1a8>
 800f5ac:	4616      	mov	r6, r2
 800f5ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800f5b2:	fb03 5711 	mls	r7, r3, r1, r5
 800f5b6:	5dc7      	ldrb	r7, [r0, r7]
 800f5b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f5bc:	462f      	mov	r7, r5
 800f5be:	42bb      	cmp	r3, r7
 800f5c0:	460d      	mov	r5, r1
 800f5c2:	d9f4      	bls.n	800f5ae <_printf_i+0x112>
 800f5c4:	2b08      	cmp	r3, #8
 800f5c6:	d10b      	bne.n	800f5e0 <_printf_i+0x144>
 800f5c8:	6823      	ldr	r3, [r4, #0]
 800f5ca:	07df      	lsls	r7, r3, #31
 800f5cc:	d508      	bpl.n	800f5e0 <_printf_i+0x144>
 800f5ce:	6923      	ldr	r3, [r4, #16]
 800f5d0:	6861      	ldr	r1, [r4, #4]
 800f5d2:	4299      	cmp	r1, r3
 800f5d4:	bfde      	ittt	le
 800f5d6:	2330      	movle	r3, #48	@ 0x30
 800f5d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f5dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f5e0:	1b92      	subs	r2, r2, r6
 800f5e2:	6122      	str	r2, [r4, #16]
 800f5e4:	f8cd a000 	str.w	sl, [sp]
 800f5e8:	464b      	mov	r3, r9
 800f5ea:	aa03      	add	r2, sp, #12
 800f5ec:	4621      	mov	r1, r4
 800f5ee:	4640      	mov	r0, r8
 800f5f0:	f7ff fee6 	bl	800f3c0 <_printf_common>
 800f5f4:	3001      	adds	r0, #1
 800f5f6:	d14a      	bne.n	800f68e <_printf_i+0x1f2>
 800f5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5fc:	b004      	add	sp, #16
 800f5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f602:	6823      	ldr	r3, [r4, #0]
 800f604:	f043 0320 	orr.w	r3, r3, #32
 800f608:	6023      	str	r3, [r4, #0]
 800f60a:	4833      	ldr	r0, [pc, #204]	@ (800f6d8 <_printf_i+0x23c>)
 800f60c:	2778      	movs	r7, #120	@ 0x78
 800f60e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f612:	6823      	ldr	r3, [r4, #0]
 800f614:	6831      	ldr	r1, [r6, #0]
 800f616:	061f      	lsls	r7, r3, #24
 800f618:	f851 5b04 	ldr.w	r5, [r1], #4
 800f61c:	d402      	bmi.n	800f624 <_printf_i+0x188>
 800f61e:	065f      	lsls	r7, r3, #25
 800f620:	bf48      	it	mi
 800f622:	b2ad      	uxthmi	r5, r5
 800f624:	6031      	str	r1, [r6, #0]
 800f626:	07d9      	lsls	r1, r3, #31
 800f628:	bf44      	itt	mi
 800f62a:	f043 0320 	orrmi.w	r3, r3, #32
 800f62e:	6023      	strmi	r3, [r4, #0]
 800f630:	b11d      	cbz	r5, 800f63a <_printf_i+0x19e>
 800f632:	2310      	movs	r3, #16
 800f634:	e7ac      	b.n	800f590 <_printf_i+0xf4>
 800f636:	4827      	ldr	r0, [pc, #156]	@ (800f6d4 <_printf_i+0x238>)
 800f638:	e7e9      	b.n	800f60e <_printf_i+0x172>
 800f63a:	6823      	ldr	r3, [r4, #0]
 800f63c:	f023 0320 	bic.w	r3, r3, #32
 800f640:	6023      	str	r3, [r4, #0]
 800f642:	e7f6      	b.n	800f632 <_printf_i+0x196>
 800f644:	4616      	mov	r6, r2
 800f646:	e7bd      	b.n	800f5c4 <_printf_i+0x128>
 800f648:	6833      	ldr	r3, [r6, #0]
 800f64a:	6825      	ldr	r5, [r4, #0]
 800f64c:	6961      	ldr	r1, [r4, #20]
 800f64e:	1d18      	adds	r0, r3, #4
 800f650:	6030      	str	r0, [r6, #0]
 800f652:	062e      	lsls	r6, r5, #24
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	d501      	bpl.n	800f65c <_printf_i+0x1c0>
 800f658:	6019      	str	r1, [r3, #0]
 800f65a:	e002      	b.n	800f662 <_printf_i+0x1c6>
 800f65c:	0668      	lsls	r0, r5, #25
 800f65e:	d5fb      	bpl.n	800f658 <_printf_i+0x1bc>
 800f660:	8019      	strh	r1, [r3, #0]
 800f662:	2300      	movs	r3, #0
 800f664:	6123      	str	r3, [r4, #16]
 800f666:	4616      	mov	r6, r2
 800f668:	e7bc      	b.n	800f5e4 <_printf_i+0x148>
 800f66a:	6833      	ldr	r3, [r6, #0]
 800f66c:	1d1a      	adds	r2, r3, #4
 800f66e:	6032      	str	r2, [r6, #0]
 800f670:	681e      	ldr	r6, [r3, #0]
 800f672:	6862      	ldr	r2, [r4, #4]
 800f674:	2100      	movs	r1, #0
 800f676:	4630      	mov	r0, r6
 800f678:	f7f0 fdba 	bl	80001f0 <memchr>
 800f67c:	b108      	cbz	r0, 800f682 <_printf_i+0x1e6>
 800f67e:	1b80      	subs	r0, r0, r6
 800f680:	6060      	str	r0, [r4, #4]
 800f682:	6863      	ldr	r3, [r4, #4]
 800f684:	6123      	str	r3, [r4, #16]
 800f686:	2300      	movs	r3, #0
 800f688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f68c:	e7aa      	b.n	800f5e4 <_printf_i+0x148>
 800f68e:	6923      	ldr	r3, [r4, #16]
 800f690:	4632      	mov	r2, r6
 800f692:	4649      	mov	r1, r9
 800f694:	4640      	mov	r0, r8
 800f696:	47d0      	blx	sl
 800f698:	3001      	adds	r0, #1
 800f69a:	d0ad      	beq.n	800f5f8 <_printf_i+0x15c>
 800f69c:	6823      	ldr	r3, [r4, #0]
 800f69e:	079b      	lsls	r3, r3, #30
 800f6a0:	d413      	bmi.n	800f6ca <_printf_i+0x22e>
 800f6a2:	68e0      	ldr	r0, [r4, #12]
 800f6a4:	9b03      	ldr	r3, [sp, #12]
 800f6a6:	4298      	cmp	r0, r3
 800f6a8:	bfb8      	it	lt
 800f6aa:	4618      	movlt	r0, r3
 800f6ac:	e7a6      	b.n	800f5fc <_printf_i+0x160>
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	4632      	mov	r2, r6
 800f6b2:	4649      	mov	r1, r9
 800f6b4:	4640      	mov	r0, r8
 800f6b6:	47d0      	blx	sl
 800f6b8:	3001      	adds	r0, #1
 800f6ba:	d09d      	beq.n	800f5f8 <_printf_i+0x15c>
 800f6bc:	3501      	adds	r5, #1
 800f6be:	68e3      	ldr	r3, [r4, #12]
 800f6c0:	9903      	ldr	r1, [sp, #12]
 800f6c2:	1a5b      	subs	r3, r3, r1
 800f6c4:	42ab      	cmp	r3, r5
 800f6c6:	dcf2      	bgt.n	800f6ae <_printf_i+0x212>
 800f6c8:	e7eb      	b.n	800f6a2 <_printf_i+0x206>
 800f6ca:	2500      	movs	r5, #0
 800f6cc:	f104 0619 	add.w	r6, r4, #25
 800f6d0:	e7f5      	b.n	800f6be <_printf_i+0x222>
 800f6d2:	bf00      	nop
 800f6d4:	080150b9 	.word	0x080150b9
 800f6d8:	080150ca 	.word	0x080150ca

0800f6dc <_scanf_float>:
 800f6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e0:	b087      	sub	sp, #28
 800f6e2:	4617      	mov	r7, r2
 800f6e4:	9303      	str	r3, [sp, #12]
 800f6e6:	688b      	ldr	r3, [r1, #8]
 800f6e8:	1e5a      	subs	r2, r3, #1
 800f6ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f6ee:	bf81      	itttt	hi
 800f6f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f6f4:	eb03 0b05 	addhi.w	fp, r3, r5
 800f6f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f6fc:	608b      	strhi	r3, [r1, #8]
 800f6fe:	680b      	ldr	r3, [r1, #0]
 800f700:	460a      	mov	r2, r1
 800f702:	f04f 0500 	mov.w	r5, #0
 800f706:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f70a:	f842 3b1c 	str.w	r3, [r2], #28
 800f70e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f712:	4680      	mov	r8, r0
 800f714:	460c      	mov	r4, r1
 800f716:	bf98      	it	ls
 800f718:	f04f 0b00 	movls.w	fp, #0
 800f71c:	9201      	str	r2, [sp, #4]
 800f71e:	4616      	mov	r6, r2
 800f720:	46aa      	mov	sl, r5
 800f722:	46a9      	mov	r9, r5
 800f724:	9502      	str	r5, [sp, #8]
 800f726:	68a2      	ldr	r2, [r4, #8]
 800f728:	b152      	cbz	r2, 800f740 <_scanf_float+0x64>
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	2b4e      	cmp	r3, #78	@ 0x4e
 800f730:	d864      	bhi.n	800f7fc <_scanf_float+0x120>
 800f732:	2b40      	cmp	r3, #64	@ 0x40
 800f734:	d83c      	bhi.n	800f7b0 <_scanf_float+0xd4>
 800f736:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f73a:	b2c8      	uxtb	r0, r1
 800f73c:	280e      	cmp	r0, #14
 800f73e:	d93a      	bls.n	800f7b6 <_scanf_float+0xda>
 800f740:	f1b9 0f00 	cmp.w	r9, #0
 800f744:	d003      	beq.n	800f74e <_scanf_float+0x72>
 800f746:	6823      	ldr	r3, [r4, #0]
 800f748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f74c:	6023      	str	r3, [r4, #0]
 800f74e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f752:	f1ba 0f01 	cmp.w	sl, #1
 800f756:	f200 8117 	bhi.w	800f988 <_scanf_float+0x2ac>
 800f75a:	9b01      	ldr	r3, [sp, #4]
 800f75c:	429e      	cmp	r6, r3
 800f75e:	f200 8108 	bhi.w	800f972 <_scanf_float+0x296>
 800f762:	2001      	movs	r0, #1
 800f764:	b007      	add	sp, #28
 800f766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f76a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f76e:	2a0d      	cmp	r2, #13
 800f770:	d8e6      	bhi.n	800f740 <_scanf_float+0x64>
 800f772:	a101      	add	r1, pc, #4	@ (adr r1, 800f778 <_scanf_float+0x9c>)
 800f774:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f778:	0800f8bf 	.word	0x0800f8bf
 800f77c:	0800f741 	.word	0x0800f741
 800f780:	0800f741 	.word	0x0800f741
 800f784:	0800f741 	.word	0x0800f741
 800f788:	0800f91f 	.word	0x0800f91f
 800f78c:	0800f8f7 	.word	0x0800f8f7
 800f790:	0800f741 	.word	0x0800f741
 800f794:	0800f741 	.word	0x0800f741
 800f798:	0800f8cd 	.word	0x0800f8cd
 800f79c:	0800f741 	.word	0x0800f741
 800f7a0:	0800f741 	.word	0x0800f741
 800f7a4:	0800f741 	.word	0x0800f741
 800f7a8:	0800f741 	.word	0x0800f741
 800f7ac:	0800f885 	.word	0x0800f885
 800f7b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f7b4:	e7db      	b.n	800f76e <_scanf_float+0x92>
 800f7b6:	290e      	cmp	r1, #14
 800f7b8:	d8c2      	bhi.n	800f740 <_scanf_float+0x64>
 800f7ba:	a001      	add	r0, pc, #4	@ (adr r0, 800f7c0 <_scanf_float+0xe4>)
 800f7bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f7c0:	0800f875 	.word	0x0800f875
 800f7c4:	0800f741 	.word	0x0800f741
 800f7c8:	0800f875 	.word	0x0800f875
 800f7cc:	0800f90b 	.word	0x0800f90b
 800f7d0:	0800f741 	.word	0x0800f741
 800f7d4:	0800f81d 	.word	0x0800f81d
 800f7d8:	0800f85b 	.word	0x0800f85b
 800f7dc:	0800f85b 	.word	0x0800f85b
 800f7e0:	0800f85b 	.word	0x0800f85b
 800f7e4:	0800f85b 	.word	0x0800f85b
 800f7e8:	0800f85b 	.word	0x0800f85b
 800f7ec:	0800f85b 	.word	0x0800f85b
 800f7f0:	0800f85b 	.word	0x0800f85b
 800f7f4:	0800f85b 	.word	0x0800f85b
 800f7f8:	0800f85b 	.word	0x0800f85b
 800f7fc:	2b6e      	cmp	r3, #110	@ 0x6e
 800f7fe:	d809      	bhi.n	800f814 <_scanf_float+0x138>
 800f800:	2b60      	cmp	r3, #96	@ 0x60
 800f802:	d8b2      	bhi.n	800f76a <_scanf_float+0x8e>
 800f804:	2b54      	cmp	r3, #84	@ 0x54
 800f806:	d07b      	beq.n	800f900 <_scanf_float+0x224>
 800f808:	2b59      	cmp	r3, #89	@ 0x59
 800f80a:	d199      	bne.n	800f740 <_scanf_float+0x64>
 800f80c:	2d07      	cmp	r5, #7
 800f80e:	d197      	bne.n	800f740 <_scanf_float+0x64>
 800f810:	2508      	movs	r5, #8
 800f812:	e02c      	b.n	800f86e <_scanf_float+0x192>
 800f814:	2b74      	cmp	r3, #116	@ 0x74
 800f816:	d073      	beq.n	800f900 <_scanf_float+0x224>
 800f818:	2b79      	cmp	r3, #121	@ 0x79
 800f81a:	e7f6      	b.n	800f80a <_scanf_float+0x12e>
 800f81c:	6821      	ldr	r1, [r4, #0]
 800f81e:	05c8      	lsls	r0, r1, #23
 800f820:	d51b      	bpl.n	800f85a <_scanf_float+0x17e>
 800f822:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f826:	6021      	str	r1, [r4, #0]
 800f828:	f109 0901 	add.w	r9, r9, #1
 800f82c:	f1bb 0f00 	cmp.w	fp, #0
 800f830:	d003      	beq.n	800f83a <_scanf_float+0x15e>
 800f832:	3201      	adds	r2, #1
 800f834:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f838:	60a2      	str	r2, [r4, #8]
 800f83a:	68a3      	ldr	r3, [r4, #8]
 800f83c:	3b01      	subs	r3, #1
 800f83e:	60a3      	str	r3, [r4, #8]
 800f840:	6923      	ldr	r3, [r4, #16]
 800f842:	3301      	adds	r3, #1
 800f844:	6123      	str	r3, [r4, #16]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	3b01      	subs	r3, #1
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	607b      	str	r3, [r7, #4]
 800f84e:	f340 8087 	ble.w	800f960 <_scanf_float+0x284>
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	3301      	adds	r3, #1
 800f856:	603b      	str	r3, [r7, #0]
 800f858:	e765      	b.n	800f726 <_scanf_float+0x4a>
 800f85a:	eb1a 0105 	adds.w	r1, sl, r5
 800f85e:	f47f af6f 	bne.w	800f740 <_scanf_float+0x64>
 800f862:	6822      	ldr	r2, [r4, #0]
 800f864:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f868:	6022      	str	r2, [r4, #0]
 800f86a:	460d      	mov	r5, r1
 800f86c:	468a      	mov	sl, r1
 800f86e:	f806 3b01 	strb.w	r3, [r6], #1
 800f872:	e7e2      	b.n	800f83a <_scanf_float+0x15e>
 800f874:	6822      	ldr	r2, [r4, #0]
 800f876:	0610      	lsls	r0, r2, #24
 800f878:	f57f af62 	bpl.w	800f740 <_scanf_float+0x64>
 800f87c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f880:	6022      	str	r2, [r4, #0]
 800f882:	e7f4      	b.n	800f86e <_scanf_float+0x192>
 800f884:	f1ba 0f00 	cmp.w	sl, #0
 800f888:	d10e      	bne.n	800f8a8 <_scanf_float+0x1cc>
 800f88a:	f1b9 0f00 	cmp.w	r9, #0
 800f88e:	d10e      	bne.n	800f8ae <_scanf_float+0x1d2>
 800f890:	6822      	ldr	r2, [r4, #0]
 800f892:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f896:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f89a:	d108      	bne.n	800f8ae <_scanf_float+0x1d2>
 800f89c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f8a0:	6022      	str	r2, [r4, #0]
 800f8a2:	f04f 0a01 	mov.w	sl, #1
 800f8a6:	e7e2      	b.n	800f86e <_scanf_float+0x192>
 800f8a8:	f1ba 0f02 	cmp.w	sl, #2
 800f8ac:	d055      	beq.n	800f95a <_scanf_float+0x27e>
 800f8ae:	2d01      	cmp	r5, #1
 800f8b0:	d002      	beq.n	800f8b8 <_scanf_float+0x1dc>
 800f8b2:	2d04      	cmp	r5, #4
 800f8b4:	f47f af44 	bne.w	800f740 <_scanf_float+0x64>
 800f8b8:	3501      	adds	r5, #1
 800f8ba:	b2ed      	uxtb	r5, r5
 800f8bc:	e7d7      	b.n	800f86e <_scanf_float+0x192>
 800f8be:	f1ba 0f01 	cmp.w	sl, #1
 800f8c2:	f47f af3d 	bne.w	800f740 <_scanf_float+0x64>
 800f8c6:	f04f 0a02 	mov.w	sl, #2
 800f8ca:	e7d0      	b.n	800f86e <_scanf_float+0x192>
 800f8cc:	b97d      	cbnz	r5, 800f8ee <_scanf_float+0x212>
 800f8ce:	f1b9 0f00 	cmp.w	r9, #0
 800f8d2:	f47f af38 	bne.w	800f746 <_scanf_float+0x6a>
 800f8d6:	6822      	ldr	r2, [r4, #0]
 800f8d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f8dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f8e0:	f040 8108 	bne.w	800faf4 <_scanf_float+0x418>
 800f8e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f8e8:	6022      	str	r2, [r4, #0]
 800f8ea:	2501      	movs	r5, #1
 800f8ec:	e7bf      	b.n	800f86e <_scanf_float+0x192>
 800f8ee:	2d03      	cmp	r5, #3
 800f8f0:	d0e2      	beq.n	800f8b8 <_scanf_float+0x1dc>
 800f8f2:	2d05      	cmp	r5, #5
 800f8f4:	e7de      	b.n	800f8b4 <_scanf_float+0x1d8>
 800f8f6:	2d02      	cmp	r5, #2
 800f8f8:	f47f af22 	bne.w	800f740 <_scanf_float+0x64>
 800f8fc:	2503      	movs	r5, #3
 800f8fe:	e7b6      	b.n	800f86e <_scanf_float+0x192>
 800f900:	2d06      	cmp	r5, #6
 800f902:	f47f af1d 	bne.w	800f740 <_scanf_float+0x64>
 800f906:	2507      	movs	r5, #7
 800f908:	e7b1      	b.n	800f86e <_scanf_float+0x192>
 800f90a:	6822      	ldr	r2, [r4, #0]
 800f90c:	0591      	lsls	r1, r2, #22
 800f90e:	f57f af17 	bpl.w	800f740 <_scanf_float+0x64>
 800f912:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f916:	6022      	str	r2, [r4, #0]
 800f918:	f8cd 9008 	str.w	r9, [sp, #8]
 800f91c:	e7a7      	b.n	800f86e <_scanf_float+0x192>
 800f91e:	6822      	ldr	r2, [r4, #0]
 800f920:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f924:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f928:	d006      	beq.n	800f938 <_scanf_float+0x25c>
 800f92a:	0550      	lsls	r0, r2, #21
 800f92c:	f57f af08 	bpl.w	800f740 <_scanf_float+0x64>
 800f930:	f1b9 0f00 	cmp.w	r9, #0
 800f934:	f000 80de 	beq.w	800faf4 <_scanf_float+0x418>
 800f938:	0591      	lsls	r1, r2, #22
 800f93a:	bf58      	it	pl
 800f93c:	9902      	ldrpl	r1, [sp, #8]
 800f93e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f942:	bf58      	it	pl
 800f944:	eba9 0101 	subpl.w	r1, r9, r1
 800f948:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f94c:	bf58      	it	pl
 800f94e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f952:	6022      	str	r2, [r4, #0]
 800f954:	f04f 0900 	mov.w	r9, #0
 800f958:	e789      	b.n	800f86e <_scanf_float+0x192>
 800f95a:	f04f 0a03 	mov.w	sl, #3
 800f95e:	e786      	b.n	800f86e <_scanf_float+0x192>
 800f960:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f964:	4639      	mov	r1, r7
 800f966:	4640      	mov	r0, r8
 800f968:	4798      	blx	r3
 800f96a:	2800      	cmp	r0, #0
 800f96c:	f43f aedb 	beq.w	800f726 <_scanf_float+0x4a>
 800f970:	e6e6      	b.n	800f740 <_scanf_float+0x64>
 800f972:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f976:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f97a:	463a      	mov	r2, r7
 800f97c:	4640      	mov	r0, r8
 800f97e:	4798      	blx	r3
 800f980:	6923      	ldr	r3, [r4, #16]
 800f982:	3b01      	subs	r3, #1
 800f984:	6123      	str	r3, [r4, #16]
 800f986:	e6e8      	b.n	800f75a <_scanf_float+0x7e>
 800f988:	1e6b      	subs	r3, r5, #1
 800f98a:	2b06      	cmp	r3, #6
 800f98c:	d824      	bhi.n	800f9d8 <_scanf_float+0x2fc>
 800f98e:	2d02      	cmp	r5, #2
 800f990:	d836      	bhi.n	800fa00 <_scanf_float+0x324>
 800f992:	9b01      	ldr	r3, [sp, #4]
 800f994:	429e      	cmp	r6, r3
 800f996:	f67f aee4 	bls.w	800f762 <_scanf_float+0x86>
 800f99a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f99e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f9a2:	463a      	mov	r2, r7
 800f9a4:	4640      	mov	r0, r8
 800f9a6:	4798      	blx	r3
 800f9a8:	6923      	ldr	r3, [r4, #16]
 800f9aa:	3b01      	subs	r3, #1
 800f9ac:	6123      	str	r3, [r4, #16]
 800f9ae:	e7f0      	b.n	800f992 <_scanf_float+0x2b6>
 800f9b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f9b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f9b8:	463a      	mov	r2, r7
 800f9ba:	4640      	mov	r0, r8
 800f9bc:	4798      	blx	r3
 800f9be:	6923      	ldr	r3, [r4, #16]
 800f9c0:	3b01      	subs	r3, #1
 800f9c2:	6123      	str	r3, [r4, #16]
 800f9c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f9c8:	fa5f fa8a 	uxtb.w	sl, sl
 800f9cc:	f1ba 0f02 	cmp.w	sl, #2
 800f9d0:	d1ee      	bne.n	800f9b0 <_scanf_float+0x2d4>
 800f9d2:	3d03      	subs	r5, #3
 800f9d4:	b2ed      	uxtb	r5, r5
 800f9d6:	1b76      	subs	r6, r6, r5
 800f9d8:	6823      	ldr	r3, [r4, #0]
 800f9da:	05da      	lsls	r2, r3, #23
 800f9dc:	d530      	bpl.n	800fa40 <_scanf_float+0x364>
 800f9de:	055b      	lsls	r3, r3, #21
 800f9e0:	d511      	bpl.n	800fa06 <_scanf_float+0x32a>
 800f9e2:	9b01      	ldr	r3, [sp, #4]
 800f9e4:	429e      	cmp	r6, r3
 800f9e6:	f67f aebc 	bls.w	800f762 <_scanf_float+0x86>
 800f9ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f9ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f9f2:	463a      	mov	r2, r7
 800f9f4:	4640      	mov	r0, r8
 800f9f6:	4798      	blx	r3
 800f9f8:	6923      	ldr	r3, [r4, #16]
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	6123      	str	r3, [r4, #16]
 800f9fe:	e7f0      	b.n	800f9e2 <_scanf_float+0x306>
 800fa00:	46aa      	mov	sl, r5
 800fa02:	46b3      	mov	fp, r6
 800fa04:	e7de      	b.n	800f9c4 <_scanf_float+0x2e8>
 800fa06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fa0a:	6923      	ldr	r3, [r4, #16]
 800fa0c:	2965      	cmp	r1, #101	@ 0x65
 800fa0e:	f103 33ff 	add.w	r3, r3, #4294967295
 800fa12:	f106 35ff 	add.w	r5, r6, #4294967295
 800fa16:	6123      	str	r3, [r4, #16]
 800fa18:	d00c      	beq.n	800fa34 <_scanf_float+0x358>
 800fa1a:	2945      	cmp	r1, #69	@ 0x45
 800fa1c:	d00a      	beq.n	800fa34 <_scanf_float+0x358>
 800fa1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa22:	463a      	mov	r2, r7
 800fa24:	4640      	mov	r0, r8
 800fa26:	4798      	blx	r3
 800fa28:	6923      	ldr	r3, [r4, #16]
 800fa2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fa2e:	3b01      	subs	r3, #1
 800fa30:	1eb5      	subs	r5, r6, #2
 800fa32:	6123      	str	r3, [r4, #16]
 800fa34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fa38:	463a      	mov	r2, r7
 800fa3a:	4640      	mov	r0, r8
 800fa3c:	4798      	blx	r3
 800fa3e:	462e      	mov	r6, r5
 800fa40:	6822      	ldr	r2, [r4, #0]
 800fa42:	f012 0210 	ands.w	r2, r2, #16
 800fa46:	d001      	beq.n	800fa4c <_scanf_float+0x370>
 800fa48:	2000      	movs	r0, #0
 800fa4a:	e68b      	b.n	800f764 <_scanf_float+0x88>
 800fa4c:	7032      	strb	r2, [r6, #0]
 800fa4e:	6823      	ldr	r3, [r4, #0]
 800fa50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800fa54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fa58:	d11c      	bne.n	800fa94 <_scanf_float+0x3b8>
 800fa5a:	9b02      	ldr	r3, [sp, #8]
 800fa5c:	454b      	cmp	r3, r9
 800fa5e:	eba3 0209 	sub.w	r2, r3, r9
 800fa62:	d123      	bne.n	800faac <_scanf_float+0x3d0>
 800fa64:	9901      	ldr	r1, [sp, #4]
 800fa66:	2200      	movs	r2, #0
 800fa68:	4640      	mov	r0, r8
 800fa6a:	f002 fc71 	bl	8012350 <_strtod_r>
 800fa6e:	9b03      	ldr	r3, [sp, #12]
 800fa70:	6821      	ldr	r1, [r4, #0]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f011 0f02 	tst.w	r1, #2
 800fa78:	ec57 6b10 	vmov	r6, r7, d0
 800fa7c:	f103 0204 	add.w	r2, r3, #4
 800fa80:	d01f      	beq.n	800fac2 <_scanf_float+0x3e6>
 800fa82:	9903      	ldr	r1, [sp, #12]
 800fa84:	600a      	str	r2, [r1, #0]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	e9c3 6700 	strd	r6, r7, [r3]
 800fa8c:	68e3      	ldr	r3, [r4, #12]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	60e3      	str	r3, [r4, #12]
 800fa92:	e7d9      	b.n	800fa48 <_scanf_float+0x36c>
 800fa94:	9b04      	ldr	r3, [sp, #16]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d0e4      	beq.n	800fa64 <_scanf_float+0x388>
 800fa9a:	9905      	ldr	r1, [sp, #20]
 800fa9c:	230a      	movs	r3, #10
 800fa9e:	3101      	adds	r1, #1
 800faa0:	4640      	mov	r0, r8
 800faa2:	f002 fcd5 	bl	8012450 <_strtol_r>
 800faa6:	9b04      	ldr	r3, [sp, #16]
 800faa8:	9e05      	ldr	r6, [sp, #20]
 800faaa:	1ac2      	subs	r2, r0, r3
 800faac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800fab0:	429e      	cmp	r6, r3
 800fab2:	bf28      	it	cs
 800fab4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800fab8:	4910      	ldr	r1, [pc, #64]	@ (800fafc <_scanf_float+0x420>)
 800faba:	4630      	mov	r0, r6
 800fabc:	f000 f918 	bl	800fcf0 <siprintf>
 800fac0:	e7d0      	b.n	800fa64 <_scanf_float+0x388>
 800fac2:	f011 0f04 	tst.w	r1, #4
 800fac6:	9903      	ldr	r1, [sp, #12]
 800fac8:	600a      	str	r2, [r1, #0]
 800faca:	d1dc      	bne.n	800fa86 <_scanf_float+0x3aa>
 800facc:	681d      	ldr	r5, [r3, #0]
 800face:	4632      	mov	r2, r6
 800fad0:	463b      	mov	r3, r7
 800fad2:	4630      	mov	r0, r6
 800fad4:	4639      	mov	r1, r7
 800fad6:	f7f1 f839 	bl	8000b4c <__aeabi_dcmpun>
 800fada:	b128      	cbz	r0, 800fae8 <_scanf_float+0x40c>
 800fadc:	4808      	ldr	r0, [pc, #32]	@ (800fb00 <_scanf_float+0x424>)
 800fade:	f000 fac5 	bl	801006c <nanf>
 800fae2:	ed85 0a00 	vstr	s0, [r5]
 800fae6:	e7d1      	b.n	800fa8c <_scanf_float+0x3b0>
 800fae8:	4630      	mov	r0, r6
 800faea:	4639      	mov	r1, r7
 800faec:	f7f1 f88c 	bl	8000c08 <__aeabi_d2f>
 800faf0:	6028      	str	r0, [r5, #0]
 800faf2:	e7cb      	b.n	800fa8c <_scanf_float+0x3b0>
 800faf4:	f04f 0900 	mov.w	r9, #0
 800faf8:	e629      	b.n	800f74e <_scanf_float+0x72>
 800fafa:	bf00      	nop
 800fafc:	080150db 	.word	0x080150db
 800fb00:	0801518c 	.word	0x0801518c

0800fb04 <std>:
 800fb04:	2300      	movs	r3, #0
 800fb06:	b510      	push	{r4, lr}
 800fb08:	4604      	mov	r4, r0
 800fb0a:	e9c0 3300 	strd	r3, r3, [r0]
 800fb0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb12:	6083      	str	r3, [r0, #8]
 800fb14:	8181      	strh	r1, [r0, #12]
 800fb16:	6643      	str	r3, [r0, #100]	@ 0x64
 800fb18:	81c2      	strh	r2, [r0, #14]
 800fb1a:	6183      	str	r3, [r0, #24]
 800fb1c:	4619      	mov	r1, r3
 800fb1e:	2208      	movs	r2, #8
 800fb20:	305c      	adds	r0, #92	@ 0x5c
 800fb22:	f000 f974 	bl	800fe0e <memset>
 800fb26:	4b0d      	ldr	r3, [pc, #52]	@ (800fb5c <std+0x58>)
 800fb28:	6263      	str	r3, [r4, #36]	@ 0x24
 800fb2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fb60 <std+0x5c>)
 800fb2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fb2e:	4b0d      	ldr	r3, [pc, #52]	@ (800fb64 <std+0x60>)
 800fb30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fb32:	4b0d      	ldr	r3, [pc, #52]	@ (800fb68 <std+0x64>)
 800fb34:	6323      	str	r3, [r4, #48]	@ 0x30
 800fb36:	4b0d      	ldr	r3, [pc, #52]	@ (800fb6c <std+0x68>)
 800fb38:	6224      	str	r4, [r4, #32]
 800fb3a:	429c      	cmp	r4, r3
 800fb3c:	d006      	beq.n	800fb4c <std+0x48>
 800fb3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fb42:	4294      	cmp	r4, r2
 800fb44:	d002      	beq.n	800fb4c <std+0x48>
 800fb46:	33d0      	adds	r3, #208	@ 0xd0
 800fb48:	429c      	cmp	r4, r3
 800fb4a:	d105      	bne.n	800fb58 <std+0x54>
 800fb4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fb50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb54:	f000 ba78 	b.w	8010048 <__retarget_lock_init_recursive>
 800fb58:	bd10      	pop	{r4, pc}
 800fb5a:	bf00      	nop
 800fb5c:	0800fd85 	.word	0x0800fd85
 800fb60:	0800fdab 	.word	0x0800fdab
 800fb64:	0800fde3 	.word	0x0800fde3
 800fb68:	0800fe07 	.word	0x0800fe07
 800fb6c:	2000552c 	.word	0x2000552c

0800fb70 <stdio_exit_handler>:
 800fb70:	4a02      	ldr	r2, [pc, #8]	@ (800fb7c <stdio_exit_handler+0xc>)
 800fb72:	4903      	ldr	r1, [pc, #12]	@ (800fb80 <stdio_exit_handler+0x10>)
 800fb74:	4803      	ldr	r0, [pc, #12]	@ (800fb84 <stdio_exit_handler+0x14>)
 800fb76:	f000 b869 	b.w	800fc4c <_fwalk_sglue>
 800fb7a:	bf00      	nop
 800fb7c:	200000b8 	.word	0x200000b8
 800fb80:	08012e41 	.word	0x08012e41
 800fb84:	200000c8 	.word	0x200000c8

0800fb88 <cleanup_stdio>:
 800fb88:	6841      	ldr	r1, [r0, #4]
 800fb8a:	4b0c      	ldr	r3, [pc, #48]	@ (800fbbc <cleanup_stdio+0x34>)
 800fb8c:	4299      	cmp	r1, r3
 800fb8e:	b510      	push	{r4, lr}
 800fb90:	4604      	mov	r4, r0
 800fb92:	d001      	beq.n	800fb98 <cleanup_stdio+0x10>
 800fb94:	f003 f954 	bl	8012e40 <_fflush_r>
 800fb98:	68a1      	ldr	r1, [r4, #8]
 800fb9a:	4b09      	ldr	r3, [pc, #36]	@ (800fbc0 <cleanup_stdio+0x38>)
 800fb9c:	4299      	cmp	r1, r3
 800fb9e:	d002      	beq.n	800fba6 <cleanup_stdio+0x1e>
 800fba0:	4620      	mov	r0, r4
 800fba2:	f003 f94d 	bl	8012e40 <_fflush_r>
 800fba6:	68e1      	ldr	r1, [r4, #12]
 800fba8:	4b06      	ldr	r3, [pc, #24]	@ (800fbc4 <cleanup_stdio+0x3c>)
 800fbaa:	4299      	cmp	r1, r3
 800fbac:	d004      	beq.n	800fbb8 <cleanup_stdio+0x30>
 800fbae:	4620      	mov	r0, r4
 800fbb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbb4:	f003 b944 	b.w	8012e40 <_fflush_r>
 800fbb8:	bd10      	pop	{r4, pc}
 800fbba:	bf00      	nop
 800fbbc:	2000552c 	.word	0x2000552c
 800fbc0:	20005594 	.word	0x20005594
 800fbc4:	200055fc 	.word	0x200055fc

0800fbc8 <global_stdio_init.part.0>:
 800fbc8:	b510      	push	{r4, lr}
 800fbca:	4b0b      	ldr	r3, [pc, #44]	@ (800fbf8 <global_stdio_init.part.0+0x30>)
 800fbcc:	4c0b      	ldr	r4, [pc, #44]	@ (800fbfc <global_stdio_init.part.0+0x34>)
 800fbce:	4a0c      	ldr	r2, [pc, #48]	@ (800fc00 <global_stdio_init.part.0+0x38>)
 800fbd0:	601a      	str	r2, [r3, #0]
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	2104      	movs	r1, #4
 800fbd8:	f7ff ff94 	bl	800fb04 <std>
 800fbdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	2109      	movs	r1, #9
 800fbe4:	f7ff ff8e 	bl	800fb04 <std>
 800fbe8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fbec:	2202      	movs	r2, #2
 800fbee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbf2:	2112      	movs	r1, #18
 800fbf4:	f7ff bf86 	b.w	800fb04 <std>
 800fbf8:	20005664 	.word	0x20005664
 800fbfc:	2000552c 	.word	0x2000552c
 800fc00:	0800fb71 	.word	0x0800fb71

0800fc04 <__sfp_lock_acquire>:
 800fc04:	4801      	ldr	r0, [pc, #4]	@ (800fc0c <__sfp_lock_acquire+0x8>)
 800fc06:	f000 ba20 	b.w	801004a <__retarget_lock_acquire_recursive>
 800fc0a:	bf00      	nop
 800fc0c:	2000566d 	.word	0x2000566d

0800fc10 <__sfp_lock_release>:
 800fc10:	4801      	ldr	r0, [pc, #4]	@ (800fc18 <__sfp_lock_release+0x8>)
 800fc12:	f000 ba1b 	b.w	801004c <__retarget_lock_release_recursive>
 800fc16:	bf00      	nop
 800fc18:	2000566d 	.word	0x2000566d

0800fc1c <__sinit>:
 800fc1c:	b510      	push	{r4, lr}
 800fc1e:	4604      	mov	r4, r0
 800fc20:	f7ff fff0 	bl	800fc04 <__sfp_lock_acquire>
 800fc24:	6a23      	ldr	r3, [r4, #32]
 800fc26:	b11b      	cbz	r3, 800fc30 <__sinit+0x14>
 800fc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc2c:	f7ff bff0 	b.w	800fc10 <__sfp_lock_release>
 800fc30:	4b04      	ldr	r3, [pc, #16]	@ (800fc44 <__sinit+0x28>)
 800fc32:	6223      	str	r3, [r4, #32]
 800fc34:	4b04      	ldr	r3, [pc, #16]	@ (800fc48 <__sinit+0x2c>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d1f5      	bne.n	800fc28 <__sinit+0xc>
 800fc3c:	f7ff ffc4 	bl	800fbc8 <global_stdio_init.part.0>
 800fc40:	e7f2      	b.n	800fc28 <__sinit+0xc>
 800fc42:	bf00      	nop
 800fc44:	0800fb89 	.word	0x0800fb89
 800fc48:	20005664 	.word	0x20005664

0800fc4c <_fwalk_sglue>:
 800fc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc50:	4607      	mov	r7, r0
 800fc52:	4688      	mov	r8, r1
 800fc54:	4614      	mov	r4, r2
 800fc56:	2600      	movs	r6, #0
 800fc58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fc5c:	f1b9 0901 	subs.w	r9, r9, #1
 800fc60:	d505      	bpl.n	800fc6e <_fwalk_sglue+0x22>
 800fc62:	6824      	ldr	r4, [r4, #0]
 800fc64:	2c00      	cmp	r4, #0
 800fc66:	d1f7      	bne.n	800fc58 <_fwalk_sglue+0xc>
 800fc68:	4630      	mov	r0, r6
 800fc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc6e:	89ab      	ldrh	r3, [r5, #12]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d907      	bls.n	800fc84 <_fwalk_sglue+0x38>
 800fc74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	d003      	beq.n	800fc84 <_fwalk_sglue+0x38>
 800fc7c:	4629      	mov	r1, r5
 800fc7e:	4638      	mov	r0, r7
 800fc80:	47c0      	blx	r8
 800fc82:	4306      	orrs	r6, r0
 800fc84:	3568      	adds	r5, #104	@ 0x68
 800fc86:	e7e9      	b.n	800fc5c <_fwalk_sglue+0x10>

0800fc88 <sniprintf>:
 800fc88:	b40c      	push	{r2, r3}
 800fc8a:	b530      	push	{r4, r5, lr}
 800fc8c:	4b17      	ldr	r3, [pc, #92]	@ (800fcec <sniprintf+0x64>)
 800fc8e:	1e0c      	subs	r4, r1, #0
 800fc90:	681d      	ldr	r5, [r3, #0]
 800fc92:	b09d      	sub	sp, #116	@ 0x74
 800fc94:	da08      	bge.n	800fca8 <sniprintf+0x20>
 800fc96:	238b      	movs	r3, #139	@ 0x8b
 800fc98:	602b      	str	r3, [r5, #0]
 800fc9a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc9e:	b01d      	add	sp, #116	@ 0x74
 800fca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fca4:	b002      	add	sp, #8
 800fca6:	4770      	bx	lr
 800fca8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fcac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fcb0:	bf14      	ite	ne
 800fcb2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fcb6:	4623      	moveq	r3, r4
 800fcb8:	9304      	str	r3, [sp, #16]
 800fcba:	9307      	str	r3, [sp, #28]
 800fcbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fcc0:	9002      	str	r0, [sp, #8]
 800fcc2:	9006      	str	r0, [sp, #24]
 800fcc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fcc8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fcca:	ab21      	add	r3, sp, #132	@ 0x84
 800fccc:	a902      	add	r1, sp, #8
 800fcce:	4628      	mov	r0, r5
 800fcd0:	9301      	str	r3, [sp, #4]
 800fcd2:	f002 fc1b 	bl	801250c <_svfiprintf_r>
 800fcd6:	1c43      	adds	r3, r0, #1
 800fcd8:	bfbc      	itt	lt
 800fcda:	238b      	movlt	r3, #139	@ 0x8b
 800fcdc:	602b      	strlt	r3, [r5, #0]
 800fcde:	2c00      	cmp	r4, #0
 800fce0:	d0dd      	beq.n	800fc9e <sniprintf+0x16>
 800fce2:	9b02      	ldr	r3, [sp, #8]
 800fce4:	2200      	movs	r2, #0
 800fce6:	701a      	strb	r2, [r3, #0]
 800fce8:	e7d9      	b.n	800fc9e <sniprintf+0x16>
 800fcea:	bf00      	nop
 800fcec:	200000c4 	.word	0x200000c4

0800fcf0 <siprintf>:
 800fcf0:	b40e      	push	{r1, r2, r3}
 800fcf2:	b500      	push	{lr}
 800fcf4:	b09c      	sub	sp, #112	@ 0x70
 800fcf6:	ab1d      	add	r3, sp, #116	@ 0x74
 800fcf8:	9002      	str	r0, [sp, #8]
 800fcfa:	9006      	str	r0, [sp, #24]
 800fcfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fd00:	4809      	ldr	r0, [pc, #36]	@ (800fd28 <siprintf+0x38>)
 800fd02:	9107      	str	r1, [sp, #28]
 800fd04:	9104      	str	r1, [sp, #16]
 800fd06:	4909      	ldr	r1, [pc, #36]	@ (800fd2c <siprintf+0x3c>)
 800fd08:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd0c:	9105      	str	r1, [sp, #20]
 800fd0e:	6800      	ldr	r0, [r0, #0]
 800fd10:	9301      	str	r3, [sp, #4]
 800fd12:	a902      	add	r1, sp, #8
 800fd14:	f002 fbfa 	bl	801250c <_svfiprintf_r>
 800fd18:	9b02      	ldr	r3, [sp, #8]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	701a      	strb	r2, [r3, #0]
 800fd1e:	b01c      	add	sp, #112	@ 0x70
 800fd20:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd24:	b003      	add	sp, #12
 800fd26:	4770      	bx	lr
 800fd28:	200000c4 	.word	0x200000c4
 800fd2c:	ffff0208 	.word	0xffff0208

0800fd30 <siscanf>:
 800fd30:	b40e      	push	{r1, r2, r3}
 800fd32:	b530      	push	{r4, r5, lr}
 800fd34:	b09c      	sub	sp, #112	@ 0x70
 800fd36:	ac1f      	add	r4, sp, #124	@ 0x7c
 800fd38:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800fd3c:	f854 5b04 	ldr.w	r5, [r4], #4
 800fd40:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fd44:	9002      	str	r0, [sp, #8]
 800fd46:	9006      	str	r0, [sp, #24]
 800fd48:	f7f0 faa2 	bl	8000290 <strlen>
 800fd4c:	4b0b      	ldr	r3, [pc, #44]	@ (800fd7c <siscanf+0x4c>)
 800fd4e:	9003      	str	r0, [sp, #12]
 800fd50:	9007      	str	r0, [sp, #28]
 800fd52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd54:	480a      	ldr	r0, [pc, #40]	@ (800fd80 <siscanf+0x50>)
 800fd56:	9401      	str	r4, [sp, #4]
 800fd58:	2300      	movs	r3, #0
 800fd5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd5c:	9314      	str	r3, [sp, #80]	@ 0x50
 800fd5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fd62:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd66:	462a      	mov	r2, r5
 800fd68:	4623      	mov	r3, r4
 800fd6a:	a902      	add	r1, sp, #8
 800fd6c:	6800      	ldr	r0, [r0, #0]
 800fd6e:	f002 fd21 	bl	80127b4 <__ssvfiscanf_r>
 800fd72:	b01c      	add	sp, #112	@ 0x70
 800fd74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd78:	b003      	add	sp, #12
 800fd7a:	4770      	bx	lr
 800fd7c:	0800fda7 	.word	0x0800fda7
 800fd80:	200000c4 	.word	0x200000c4

0800fd84 <__sread>:
 800fd84:	b510      	push	{r4, lr}
 800fd86:	460c      	mov	r4, r1
 800fd88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd8c:	f000 f8fe 	bl	800ff8c <_read_r>
 800fd90:	2800      	cmp	r0, #0
 800fd92:	bfab      	itete	ge
 800fd94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fd96:	89a3      	ldrhlt	r3, [r4, #12]
 800fd98:	181b      	addge	r3, r3, r0
 800fd9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fd9e:	bfac      	ite	ge
 800fda0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fda2:	81a3      	strhlt	r3, [r4, #12]
 800fda4:	bd10      	pop	{r4, pc}

0800fda6 <__seofread>:
 800fda6:	2000      	movs	r0, #0
 800fda8:	4770      	bx	lr

0800fdaa <__swrite>:
 800fdaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdae:	461f      	mov	r7, r3
 800fdb0:	898b      	ldrh	r3, [r1, #12]
 800fdb2:	05db      	lsls	r3, r3, #23
 800fdb4:	4605      	mov	r5, r0
 800fdb6:	460c      	mov	r4, r1
 800fdb8:	4616      	mov	r6, r2
 800fdba:	d505      	bpl.n	800fdc8 <__swrite+0x1e>
 800fdbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdc0:	2302      	movs	r3, #2
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f000 f8d0 	bl	800ff68 <_lseek_r>
 800fdc8:	89a3      	ldrh	r3, [r4, #12]
 800fdca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fdd2:	81a3      	strh	r3, [r4, #12]
 800fdd4:	4632      	mov	r2, r6
 800fdd6:	463b      	mov	r3, r7
 800fdd8:	4628      	mov	r0, r5
 800fdda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdde:	f000 b8f7 	b.w	800ffd0 <_write_r>

0800fde2 <__sseek>:
 800fde2:	b510      	push	{r4, lr}
 800fde4:	460c      	mov	r4, r1
 800fde6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdea:	f000 f8bd 	bl	800ff68 <_lseek_r>
 800fdee:	1c43      	adds	r3, r0, #1
 800fdf0:	89a3      	ldrh	r3, [r4, #12]
 800fdf2:	bf15      	itete	ne
 800fdf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fdf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fdfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fdfe:	81a3      	strheq	r3, [r4, #12]
 800fe00:	bf18      	it	ne
 800fe02:	81a3      	strhne	r3, [r4, #12]
 800fe04:	bd10      	pop	{r4, pc}

0800fe06 <__sclose>:
 800fe06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe0a:	f000 b89d 	b.w	800ff48 <_close_r>

0800fe0e <memset>:
 800fe0e:	4402      	add	r2, r0
 800fe10:	4603      	mov	r3, r0
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d100      	bne.n	800fe18 <memset+0xa>
 800fe16:	4770      	bx	lr
 800fe18:	f803 1b01 	strb.w	r1, [r3], #1
 800fe1c:	e7f9      	b.n	800fe12 <memset+0x4>

0800fe1e <strcat>:
 800fe1e:	b510      	push	{r4, lr}
 800fe20:	4602      	mov	r2, r0
 800fe22:	7814      	ldrb	r4, [r2, #0]
 800fe24:	4613      	mov	r3, r2
 800fe26:	3201      	adds	r2, #1
 800fe28:	2c00      	cmp	r4, #0
 800fe2a:	d1fa      	bne.n	800fe22 <strcat+0x4>
 800fe2c:	3b01      	subs	r3, #1
 800fe2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe36:	2a00      	cmp	r2, #0
 800fe38:	d1f9      	bne.n	800fe2e <strcat+0x10>
 800fe3a:	bd10      	pop	{r4, pc}

0800fe3c <strncmp>:
 800fe3c:	b510      	push	{r4, lr}
 800fe3e:	b16a      	cbz	r2, 800fe5c <strncmp+0x20>
 800fe40:	3901      	subs	r1, #1
 800fe42:	1884      	adds	r4, r0, r2
 800fe44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe48:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d103      	bne.n	800fe58 <strncmp+0x1c>
 800fe50:	42a0      	cmp	r0, r4
 800fe52:	d001      	beq.n	800fe58 <strncmp+0x1c>
 800fe54:	2a00      	cmp	r2, #0
 800fe56:	d1f5      	bne.n	800fe44 <strncmp+0x8>
 800fe58:	1ad0      	subs	r0, r2, r3
 800fe5a:	bd10      	pop	{r4, pc}
 800fe5c:	4610      	mov	r0, r2
 800fe5e:	e7fc      	b.n	800fe5a <strncmp+0x1e>

0800fe60 <strncpy>:
 800fe60:	b510      	push	{r4, lr}
 800fe62:	3901      	subs	r1, #1
 800fe64:	4603      	mov	r3, r0
 800fe66:	b132      	cbz	r2, 800fe76 <strncpy+0x16>
 800fe68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fe6c:	f803 4b01 	strb.w	r4, [r3], #1
 800fe70:	3a01      	subs	r2, #1
 800fe72:	2c00      	cmp	r4, #0
 800fe74:	d1f7      	bne.n	800fe66 <strncpy+0x6>
 800fe76:	441a      	add	r2, r3
 800fe78:	2100      	movs	r1, #0
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	d100      	bne.n	800fe80 <strncpy+0x20>
 800fe7e:	bd10      	pop	{r4, pc}
 800fe80:	f803 1b01 	strb.w	r1, [r3], #1
 800fe84:	e7f9      	b.n	800fe7a <strncpy+0x1a>
	...

0800fe88 <strtok>:
 800fe88:	4b16      	ldr	r3, [pc, #88]	@ (800fee4 <strtok+0x5c>)
 800fe8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe8e:	681f      	ldr	r7, [r3, #0]
 800fe90:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800fe92:	4605      	mov	r5, r0
 800fe94:	460e      	mov	r6, r1
 800fe96:	b9ec      	cbnz	r4, 800fed4 <strtok+0x4c>
 800fe98:	2050      	movs	r0, #80	@ 0x50
 800fe9a:	f7fe fec7 	bl	800ec2c <malloc>
 800fe9e:	4602      	mov	r2, r0
 800fea0:	6478      	str	r0, [r7, #68]	@ 0x44
 800fea2:	b920      	cbnz	r0, 800feae <strtok+0x26>
 800fea4:	4b10      	ldr	r3, [pc, #64]	@ (800fee8 <strtok+0x60>)
 800fea6:	4811      	ldr	r0, [pc, #68]	@ (800feec <strtok+0x64>)
 800fea8:	215b      	movs	r1, #91	@ 0x5b
 800feaa:	f000 f8e5 	bl	8010078 <__assert_func>
 800feae:	e9c0 4400 	strd	r4, r4, [r0]
 800feb2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800feb6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800feba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800febe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800fec2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800fec6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800feca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800fece:	6184      	str	r4, [r0, #24]
 800fed0:	7704      	strb	r4, [r0, #28]
 800fed2:	6244      	str	r4, [r0, #36]	@ 0x24
 800fed4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fed6:	4631      	mov	r1, r6
 800fed8:	4628      	mov	r0, r5
 800feda:	2301      	movs	r3, #1
 800fedc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fee0:	f000 b806 	b.w	800fef0 <__strtok_r>
 800fee4:	200000c4 	.word	0x200000c4
 800fee8:	080150e0 	.word	0x080150e0
 800feec:	080150f7 	.word	0x080150f7

0800fef0 <__strtok_r>:
 800fef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fef2:	4604      	mov	r4, r0
 800fef4:	b908      	cbnz	r0, 800fefa <__strtok_r+0xa>
 800fef6:	6814      	ldr	r4, [r2, #0]
 800fef8:	b144      	cbz	r4, 800ff0c <__strtok_r+0x1c>
 800fefa:	4620      	mov	r0, r4
 800fefc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ff00:	460f      	mov	r7, r1
 800ff02:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ff06:	b91e      	cbnz	r6, 800ff10 <__strtok_r+0x20>
 800ff08:	b965      	cbnz	r5, 800ff24 <__strtok_r+0x34>
 800ff0a:	6015      	str	r5, [r2, #0]
 800ff0c:	2000      	movs	r0, #0
 800ff0e:	e005      	b.n	800ff1c <__strtok_r+0x2c>
 800ff10:	42b5      	cmp	r5, r6
 800ff12:	d1f6      	bne.n	800ff02 <__strtok_r+0x12>
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d1f0      	bne.n	800fefa <__strtok_r+0xa>
 800ff18:	6014      	str	r4, [r2, #0]
 800ff1a:	7003      	strb	r3, [r0, #0]
 800ff1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff1e:	461c      	mov	r4, r3
 800ff20:	e00c      	b.n	800ff3c <__strtok_r+0x4c>
 800ff22:	b915      	cbnz	r5, 800ff2a <__strtok_r+0x3a>
 800ff24:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ff28:	460e      	mov	r6, r1
 800ff2a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ff2e:	42ab      	cmp	r3, r5
 800ff30:	d1f7      	bne.n	800ff22 <__strtok_r+0x32>
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d0f3      	beq.n	800ff1e <__strtok_r+0x2e>
 800ff36:	2300      	movs	r3, #0
 800ff38:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ff3c:	6014      	str	r4, [r2, #0]
 800ff3e:	e7ed      	b.n	800ff1c <__strtok_r+0x2c>

0800ff40 <_localeconv_r>:
 800ff40:	4800      	ldr	r0, [pc, #0]	@ (800ff44 <_localeconv_r+0x4>)
 800ff42:	4770      	bx	lr
 800ff44:	20000204 	.word	0x20000204

0800ff48 <_close_r>:
 800ff48:	b538      	push	{r3, r4, r5, lr}
 800ff4a:	4d06      	ldr	r5, [pc, #24]	@ (800ff64 <_close_r+0x1c>)
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	4604      	mov	r4, r0
 800ff50:	4608      	mov	r0, r1
 800ff52:	602b      	str	r3, [r5, #0]
 800ff54:	f7f5 f8ee 	bl	8005134 <_close>
 800ff58:	1c43      	adds	r3, r0, #1
 800ff5a:	d102      	bne.n	800ff62 <_close_r+0x1a>
 800ff5c:	682b      	ldr	r3, [r5, #0]
 800ff5e:	b103      	cbz	r3, 800ff62 <_close_r+0x1a>
 800ff60:	6023      	str	r3, [r4, #0]
 800ff62:	bd38      	pop	{r3, r4, r5, pc}
 800ff64:	20005668 	.word	0x20005668

0800ff68 <_lseek_r>:
 800ff68:	b538      	push	{r3, r4, r5, lr}
 800ff6a:	4d07      	ldr	r5, [pc, #28]	@ (800ff88 <_lseek_r+0x20>)
 800ff6c:	4604      	mov	r4, r0
 800ff6e:	4608      	mov	r0, r1
 800ff70:	4611      	mov	r1, r2
 800ff72:	2200      	movs	r2, #0
 800ff74:	602a      	str	r2, [r5, #0]
 800ff76:	461a      	mov	r2, r3
 800ff78:	f7f5 f903 	bl	8005182 <_lseek>
 800ff7c:	1c43      	adds	r3, r0, #1
 800ff7e:	d102      	bne.n	800ff86 <_lseek_r+0x1e>
 800ff80:	682b      	ldr	r3, [r5, #0]
 800ff82:	b103      	cbz	r3, 800ff86 <_lseek_r+0x1e>
 800ff84:	6023      	str	r3, [r4, #0]
 800ff86:	bd38      	pop	{r3, r4, r5, pc}
 800ff88:	20005668 	.word	0x20005668

0800ff8c <_read_r>:
 800ff8c:	b538      	push	{r3, r4, r5, lr}
 800ff8e:	4d07      	ldr	r5, [pc, #28]	@ (800ffac <_read_r+0x20>)
 800ff90:	4604      	mov	r4, r0
 800ff92:	4608      	mov	r0, r1
 800ff94:	4611      	mov	r1, r2
 800ff96:	2200      	movs	r2, #0
 800ff98:	602a      	str	r2, [r5, #0]
 800ff9a:	461a      	mov	r2, r3
 800ff9c:	f7f5 f8ad 	bl	80050fa <_read>
 800ffa0:	1c43      	adds	r3, r0, #1
 800ffa2:	d102      	bne.n	800ffaa <_read_r+0x1e>
 800ffa4:	682b      	ldr	r3, [r5, #0]
 800ffa6:	b103      	cbz	r3, 800ffaa <_read_r+0x1e>
 800ffa8:	6023      	str	r3, [r4, #0]
 800ffaa:	bd38      	pop	{r3, r4, r5, pc}
 800ffac:	20005668 	.word	0x20005668

0800ffb0 <_sbrk_r>:
 800ffb0:	b538      	push	{r3, r4, r5, lr}
 800ffb2:	4d06      	ldr	r5, [pc, #24]	@ (800ffcc <_sbrk_r+0x1c>)
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	4608      	mov	r0, r1
 800ffba:	602b      	str	r3, [r5, #0]
 800ffbc:	f7f5 f8ee 	bl	800519c <_sbrk>
 800ffc0:	1c43      	adds	r3, r0, #1
 800ffc2:	d102      	bne.n	800ffca <_sbrk_r+0x1a>
 800ffc4:	682b      	ldr	r3, [r5, #0]
 800ffc6:	b103      	cbz	r3, 800ffca <_sbrk_r+0x1a>
 800ffc8:	6023      	str	r3, [r4, #0]
 800ffca:	bd38      	pop	{r3, r4, r5, pc}
 800ffcc:	20005668 	.word	0x20005668

0800ffd0 <_write_r>:
 800ffd0:	b538      	push	{r3, r4, r5, lr}
 800ffd2:	4d07      	ldr	r5, [pc, #28]	@ (800fff0 <_write_r+0x20>)
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	4608      	mov	r0, r1
 800ffd8:	4611      	mov	r1, r2
 800ffda:	2200      	movs	r2, #0
 800ffdc:	602a      	str	r2, [r5, #0]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	f7f5 fc16 	bl	8005810 <_write>
 800ffe4:	1c43      	adds	r3, r0, #1
 800ffe6:	d102      	bne.n	800ffee <_write_r+0x1e>
 800ffe8:	682b      	ldr	r3, [r5, #0]
 800ffea:	b103      	cbz	r3, 800ffee <_write_r+0x1e>
 800ffec:	6023      	str	r3, [r4, #0]
 800ffee:	bd38      	pop	{r3, r4, r5, pc}
 800fff0:	20005668 	.word	0x20005668

0800fff4 <__errno>:
 800fff4:	4b01      	ldr	r3, [pc, #4]	@ (800fffc <__errno+0x8>)
 800fff6:	6818      	ldr	r0, [r3, #0]
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	200000c4 	.word	0x200000c4

08010000 <__libc_init_array>:
 8010000:	b570      	push	{r4, r5, r6, lr}
 8010002:	4d0d      	ldr	r5, [pc, #52]	@ (8010038 <__libc_init_array+0x38>)
 8010004:	4c0d      	ldr	r4, [pc, #52]	@ (801003c <__libc_init_array+0x3c>)
 8010006:	1b64      	subs	r4, r4, r5
 8010008:	10a4      	asrs	r4, r4, #2
 801000a:	2600      	movs	r6, #0
 801000c:	42a6      	cmp	r6, r4
 801000e:	d109      	bne.n	8010024 <__libc_init_array+0x24>
 8010010:	4d0b      	ldr	r5, [pc, #44]	@ (8010040 <__libc_init_array+0x40>)
 8010012:	4c0c      	ldr	r4, [pc, #48]	@ (8010044 <__libc_init_array+0x44>)
 8010014:	f004 fe24 	bl	8014c60 <_init>
 8010018:	1b64      	subs	r4, r4, r5
 801001a:	10a4      	asrs	r4, r4, #2
 801001c:	2600      	movs	r6, #0
 801001e:	42a6      	cmp	r6, r4
 8010020:	d105      	bne.n	801002e <__libc_init_array+0x2e>
 8010022:	bd70      	pop	{r4, r5, r6, pc}
 8010024:	f855 3b04 	ldr.w	r3, [r5], #4
 8010028:	4798      	blx	r3
 801002a:	3601      	adds	r6, #1
 801002c:	e7ee      	b.n	801000c <__libc_init_array+0xc>
 801002e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010032:	4798      	blx	r3
 8010034:	3601      	adds	r6, #1
 8010036:	e7f2      	b.n	801001e <__libc_init_array+0x1e>
 8010038:	08015580 	.word	0x08015580
 801003c:	08015580 	.word	0x08015580
 8010040:	08015580 	.word	0x08015580
 8010044:	08015584 	.word	0x08015584

08010048 <__retarget_lock_init_recursive>:
 8010048:	4770      	bx	lr

0801004a <__retarget_lock_acquire_recursive>:
 801004a:	4770      	bx	lr

0801004c <__retarget_lock_release_recursive>:
 801004c:	4770      	bx	lr

0801004e <memcpy>:
 801004e:	440a      	add	r2, r1
 8010050:	4291      	cmp	r1, r2
 8010052:	f100 33ff 	add.w	r3, r0, #4294967295
 8010056:	d100      	bne.n	801005a <memcpy+0xc>
 8010058:	4770      	bx	lr
 801005a:	b510      	push	{r4, lr}
 801005c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010060:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010064:	4291      	cmp	r1, r2
 8010066:	d1f9      	bne.n	801005c <memcpy+0xe>
 8010068:	bd10      	pop	{r4, pc}
	...

0801006c <nanf>:
 801006c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010074 <nanf+0x8>
 8010070:	4770      	bx	lr
 8010072:	bf00      	nop
 8010074:	7fc00000 	.word	0x7fc00000

08010078 <__assert_func>:
 8010078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801007a:	4614      	mov	r4, r2
 801007c:	461a      	mov	r2, r3
 801007e:	4b09      	ldr	r3, [pc, #36]	@ (80100a4 <__assert_func+0x2c>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4605      	mov	r5, r0
 8010084:	68d8      	ldr	r0, [r3, #12]
 8010086:	b954      	cbnz	r4, 801009e <__assert_func+0x26>
 8010088:	4b07      	ldr	r3, [pc, #28]	@ (80100a8 <__assert_func+0x30>)
 801008a:	461c      	mov	r4, r3
 801008c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010090:	9100      	str	r1, [sp, #0]
 8010092:	462b      	mov	r3, r5
 8010094:	4905      	ldr	r1, [pc, #20]	@ (80100ac <__assert_func+0x34>)
 8010096:	f002 fefb 	bl	8012e90 <fiprintf>
 801009a:	f002 ffa1 	bl	8012fe0 <abort>
 801009e:	4b04      	ldr	r3, [pc, #16]	@ (80100b0 <__assert_func+0x38>)
 80100a0:	e7f4      	b.n	801008c <__assert_func+0x14>
 80100a2:	bf00      	nop
 80100a4:	200000c4 	.word	0x200000c4
 80100a8:	0801518c 	.word	0x0801518c
 80100ac:	0801515e 	.word	0x0801515e
 80100b0:	08015151 	.word	0x08015151

080100b4 <quorem>:
 80100b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b8:	6903      	ldr	r3, [r0, #16]
 80100ba:	690c      	ldr	r4, [r1, #16]
 80100bc:	42a3      	cmp	r3, r4
 80100be:	4607      	mov	r7, r0
 80100c0:	db7e      	blt.n	80101c0 <quorem+0x10c>
 80100c2:	3c01      	subs	r4, #1
 80100c4:	f101 0814 	add.w	r8, r1, #20
 80100c8:	00a3      	lsls	r3, r4, #2
 80100ca:	f100 0514 	add.w	r5, r0, #20
 80100ce:	9300      	str	r3, [sp, #0]
 80100d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100d4:	9301      	str	r3, [sp, #4]
 80100d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80100da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100de:	3301      	adds	r3, #1
 80100e0:	429a      	cmp	r2, r3
 80100e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80100ea:	d32e      	bcc.n	801014a <quorem+0x96>
 80100ec:	f04f 0a00 	mov.w	sl, #0
 80100f0:	46c4      	mov	ip, r8
 80100f2:	46ae      	mov	lr, r5
 80100f4:	46d3      	mov	fp, sl
 80100f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80100fa:	b298      	uxth	r0, r3
 80100fc:	fb06 a000 	mla	r0, r6, r0, sl
 8010100:	0c02      	lsrs	r2, r0, #16
 8010102:	0c1b      	lsrs	r3, r3, #16
 8010104:	fb06 2303 	mla	r3, r6, r3, r2
 8010108:	f8de 2000 	ldr.w	r2, [lr]
 801010c:	b280      	uxth	r0, r0
 801010e:	b292      	uxth	r2, r2
 8010110:	1a12      	subs	r2, r2, r0
 8010112:	445a      	add	r2, fp
 8010114:	f8de 0000 	ldr.w	r0, [lr]
 8010118:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801011c:	b29b      	uxth	r3, r3
 801011e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010122:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010126:	b292      	uxth	r2, r2
 8010128:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801012c:	45e1      	cmp	r9, ip
 801012e:	f84e 2b04 	str.w	r2, [lr], #4
 8010132:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010136:	d2de      	bcs.n	80100f6 <quorem+0x42>
 8010138:	9b00      	ldr	r3, [sp, #0]
 801013a:	58eb      	ldr	r3, [r5, r3]
 801013c:	b92b      	cbnz	r3, 801014a <quorem+0x96>
 801013e:	9b01      	ldr	r3, [sp, #4]
 8010140:	3b04      	subs	r3, #4
 8010142:	429d      	cmp	r5, r3
 8010144:	461a      	mov	r2, r3
 8010146:	d32f      	bcc.n	80101a8 <quorem+0xf4>
 8010148:	613c      	str	r4, [r7, #16]
 801014a:	4638      	mov	r0, r7
 801014c:	f001 f90e 	bl	801136c <__mcmp>
 8010150:	2800      	cmp	r0, #0
 8010152:	db25      	blt.n	80101a0 <quorem+0xec>
 8010154:	4629      	mov	r1, r5
 8010156:	2000      	movs	r0, #0
 8010158:	f858 2b04 	ldr.w	r2, [r8], #4
 801015c:	f8d1 c000 	ldr.w	ip, [r1]
 8010160:	fa1f fe82 	uxth.w	lr, r2
 8010164:	fa1f f38c 	uxth.w	r3, ip
 8010168:	eba3 030e 	sub.w	r3, r3, lr
 801016c:	4403      	add	r3, r0
 801016e:	0c12      	lsrs	r2, r2, #16
 8010170:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010174:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010178:	b29b      	uxth	r3, r3
 801017a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801017e:	45c1      	cmp	r9, r8
 8010180:	f841 3b04 	str.w	r3, [r1], #4
 8010184:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010188:	d2e6      	bcs.n	8010158 <quorem+0xa4>
 801018a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801018e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010192:	b922      	cbnz	r2, 801019e <quorem+0xea>
 8010194:	3b04      	subs	r3, #4
 8010196:	429d      	cmp	r5, r3
 8010198:	461a      	mov	r2, r3
 801019a:	d30b      	bcc.n	80101b4 <quorem+0x100>
 801019c:	613c      	str	r4, [r7, #16]
 801019e:	3601      	adds	r6, #1
 80101a0:	4630      	mov	r0, r6
 80101a2:	b003      	add	sp, #12
 80101a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101a8:	6812      	ldr	r2, [r2, #0]
 80101aa:	3b04      	subs	r3, #4
 80101ac:	2a00      	cmp	r2, #0
 80101ae:	d1cb      	bne.n	8010148 <quorem+0x94>
 80101b0:	3c01      	subs	r4, #1
 80101b2:	e7c6      	b.n	8010142 <quorem+0x8e>
 80101b4:	6812      	ldr	r2, [r2, #0]
 80101b6:	3b04      	subs	r3, #4
 80101b8:	2a00      	cmp	r2, #0
 80101ba:	d1ef      	bne.n	801019c <quorem+0xe8>
 80101bc:	3c01      	subs	r4, #1
 80101be:	e7ea      	b.n	8010196 <quorem+0xe2>
 80101c0:	2000      	movs	r0, #0
 80101c2:	e7ee      	b.n	80101a2 <quorem+0xee>
 80101c4:	0000      	movs	r0, r0
	...

080101c8 <_dtoa_r>:
 80101c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101cc:	69c7      	ldr	r7, [r0, #28]
 80101ce:	b099      	sub	sp, #100	@ 0x64
 80101d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80101d4:	ec55 4b10 	vmov	r4, r5, d0
 80101d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80101da:	9109      	str	r1, [sp, #36]	@ 0x24
 80101dc:	4683      	mov	fp, r0
 80101de:	920e      	str	r2, [sp, #56]	@ 0x38
 80101e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80101e2:	b97f      	cbnz	r7, 8010204 <_dtoa_r+0x3c>
 80101e4:	2010      	movs	r0, #16
 80101e6:	f7fe fd21 	bl	800ec2c <malloc>
 80101ea:	4602      	mov	r2, r0
 80101ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80101f0:	b920      	cbnz	r0, 80101fc <_dtoa_r+0x34>
 80101f2:	4ba7      	ldr	r3, [pc, #668]	@ (8010490 <_dtoa_r+0x2c8>)
 80101f4:	21ef      	movs	r1, #239	@ 0xef
 80101f6:	48a7      	ldr	r0, [pc, #668]	@ (8010494 <_dtoa_r+0x2cc>)
 80101f8:	f7ff ff3e 	bl	8010078 <__assert_func>
 80101fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010200:	6007      	str	r7, [r0, #0]
 8010202:	60c7      	str	r7, [r0, #12]
 8010204:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010208:	6819      	ldr	r1, [r3, #0]
 801020a:	b159      	cbz	r1, 8010224 <_dtoa_r+0x5c>
 801020c:	685a      	ldr	r2, [r3, #4]
 801020e:	604a      	str	r2, [r1, #4]
 8010210:	2301      	movs	r3, #1
 8010212:	4093      	lsls	r3, r2
 8010214:	608b      	str	r3, [r1, #8]
 8010216:	4658      	mov	r0, fp
 8010218:	f000 fe24 	bl	8010e64 <_Bfree>
 801021c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010220:	2200      	movs	r2, #0
 8010222:	601a      	str	r2, [r3, #0]
 8010224:	1e2b      	subs	r3, r5, #0
 8010226:	bfb9      	ittee	lt
 8010228:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801022c:	9303      	strlt	r3, [sp, #12]
 801022e:	2300      	movge	r3, #0
 8010230:	6033      	strge	r3, [r6, #0]
 8010232:	9f03      	ldr	r7, [sp, #12]
 8010234:	4b98      	ldr	r3, [pc, #608]	@ (8010498 <_dtoa_r+0x2d0>)
 8010236:	bfbc      	itt	lt
 8010238:	2201      	movlt	r2, #1
 801023a:	6032      	strlt	r2, [r6, #0]
 801023c:	43bb      	bics	r3, r7
 801023e:	d112      	bne.n	8010266 <_dtoa_r+0x9e>
 8010240:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010242:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010246:	6013      	str	r3, [r2, #0]
 8010248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801024c:	4323      	orrs	r3, r4
 801024e:	f000 854d 	beq.w	8010cec <_dtoa_r+0xb24>
 8010252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010254:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80104ac <_dtoa_r+0x2e4>
 8010258:	2b00      	cmp	r3, #0
 801025a:	f000 854f 	beq.w	8010cfc <_dtoa_r+0xb34>
 801025e:	f10a 0303 	add.w	r3, sl, #3
 8010262:	f000 bd49 	b.w	8010cf8 <_dtoa_r+0xb30>
 8010266:	ed9d 7b02 	vldr	d7, [sp, #8]
 801026a:	2200      	movs	r2, #0
 801026c:	ec51 0b17 	vmov	r0, r1, d7
 8010270:	2300      	movs	r3, #0
 8010272:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010276:	f7f0 fc37 	bl	8000ae8 <__aeabi_dcmpeq>
 801027a:	4680      	mov	r8, r0
 801027c:	b158      	cbz	r0, 8010296 <_dtoa_r+0xce>
 801027e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010280:	2301      	movs	r3, #1
 8010282:	6013      	str	r3, [r2, #0]
 8010284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010286:	b113      	cbz	r3, 801028e <_dtoa_r+0xc6>
 8010288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801028a:	4b84      	ldr	r3, [pc, #528]	@ (801049c <_dtoa_r+0x2d4>)
 801028c:	6013      	str	r3, [r2, #0]
 801028e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80104b0 <_dtoa_r+0x2e8>
 8010292:	f000 bd33 	b.w	8010cfc <_dtoa_r+0xb34>
 8010296:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801029a:	aa16      	add	r2, sp, #88	@ 0x58
 801029c:	a917      	add	r1, sp, #92	@ 0x5c
 801029e:	4658      	mov	r0, fp
 80102a0:	f001 f984 	bl	80115ac <__d2b>
 80102a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80102a8:	4681      	mov	r9, r0
 80102aa:	2e00      	cmp	r6, #0
 80102ac:	d077      	beq.n	801039e <_dtoa_r+0x1d6>
 80102ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80102b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80102b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80102bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80102c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80102c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80102c8:	4619      	mov	r1, r3
 80102ca:	2200      	movs	r2, #0
 80102cc:	4b74      	ldr	r3, [pc, #464]	@ (80104a0 <_dtoa_r+0x2d8>)
 80102ce:	f7ef ffeb 	bl	80002a8 <__aeabi_dsub>
 80102d2:	a369      	add	r3, pc, #420	@ (adr r3, 8010478 <_dtoa_r+0x2b0>)
 80102d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d8:	f7f0 f99e 	bl	8000618 <__aeabi_dmul>
 80102dc:	a368      	add	r3, pc, #416	@ (adr r3, 8010480 <_dtoa_r+0x2b8>)
 80102de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e2:	f7ef ffe3 	bl	80002ac <__adddf3>
 80102e6:	4604      	mov	r4, r0
 80102e8:	4630      	mov	r0, r6
 80102ea:	460d      	mov	r5, r1
 80102ec:	f7f0 f92a 	bl	8000544 <__aeabi_i2d>
 80102f0:	a365      	add	r3, pc, #404	@ (adr r3, 8010488 <_dtoa_r+0x2c0>)
 80102f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f6:	f7f0 f98f 	bl	8000618 <__aeabi_dmul>
 80102fa:	4602      	mov	r2, r0
 80102fc:	460b      	mov	r3, r1
 80102fe:	4620      	mov	r0, r4
 8010300:	4629      	mov	r1, r5
 8010302:	f7ef ffd3 	bl	80002ac <__adddf3>
 8010306:	4604      	mov	r4, r0
 8010308:	460d      	mov	r5, r1
 801030a:	f7f0 fc35 	bl	8000b78 <__aeabi_d2iz>
 801030e:	2200      	movs	r2, #0
 8010310:	4607      	mov	r7, r0
 8010312:	2300      	movs	r3, #0
 8010314:	4620      	mov	r0, r4
 8010316:	4629      	mov	r1, r5
 8010318:	f7f0 fbf0 	bl	8000afc <__aeabi_dcmplt>
 801031c:	b140      	cbz	r0, 8010330 <_dtoa_r+0x168>
 801031e:	4638      	mov	r0, r7
 8010320:	f7f0 f910 	bl	8000544 <__aeabi_i2d>
 8010324:	4622      	mov	r2, r4
 8010326:	462b      	mov	r3, r5
 8010328:	f7f0 fbde 	bl	8000ae8 <__aeabi_dcmpeq>
 801032c:	b900      	cbnz	r0, 8010330 <_dtoa_r+0x168>
 801032e:	3f01      	subs	r7, #1
 8010330:	2f16      	cmp	r7, #22
 8010332:	d851      	bhi.n	80103d8 <_dtoa_r+0x210>
 8010334:	4b5b      	ldr	r3, [pc, #364]	@ (80104a4 <_dtoa_r+0x2dc>)
 8010336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801033a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010342:	f7f0 fbdb 	bl	8000afc <__aeabi_dcmplt>
 8010346:	2800      	cmp	r0, #0
 8010348:	d048      	beq.n	80103dc <_dtoa_r+0x214>
 801034a:	3f01      	subs	r7, #1
 801034c:	2300      	movs	r3, #0
 801034e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010350:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010352:	1b9b      	subs	r3, r3, r6
 8010354:	1e5a      	subs	r2, r3, #1
 8010356:	bf44      	itt	mi
 8010358:	f1c3 0801 	rsbmi	r8, r3, #1
 801035c:	2300      	movmi	r3, #0
 801035e:	9208      	str	r2, [sp, #32]
 8010360:	bf54      	ite	pl
 8010362:	f04f 0800 	movpl.w	r8, #0
 8010366:	9308      	strmi	r3, [sp, #32]
 8010368:	2f00      	cmp	r7, #0
 801036a:	db39      	blt.n	80103e0 <_dtoa_r+0x218>
 801036c:	9b08      	ldr	r3, [sp, #32]
 801036e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010370:	443b      	add	r3, r7
 8010372:	9308      	str	r3, [sp, #32]
 8010374:	2300      	movs	r3, #0
 8010376:	930a      	str	r3, [sp, #40]	@ 0x28
 8010378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801037a:	2b09      	cmp	r3, #9
 801037c:	d864      	bhi.n	8010448 <_dtoa_r+0x280>
 801037e:	2b05      	cmp	r3, #5
 8010380:	bfc4      	itt	gt
 8010382:	3b04      	subgt	r3, #4
 8010384:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010388:	f1a3 0302 	sub.w	r3, r3, #2
 801038c:	bfcc      	ite	gt
 801038e:	2400      	movgt	r4, #0
 8010390:	2401      	movle	r4, #1
 8010392:	2b03      	cmp	r3, #3
 8010394:	d863      	bhi.n	801045e <_dtoa_r+0x296>
 8010396:	e8df f003 	tbb	[pc, r3]
 801039a:	372a      	.short	0x372a
 801039c:	5535      	.short	0x5535
 801039e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80103a2:	441e      	add	r6, r3
 80103a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80103a8:	2b20      	cmp	r3, #32
 80103aa:	bfc1      	itttt	gt
 80103ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80103b0:	409f      	lslgt	r7, r3
 80103b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80103b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80103ba:	bfd6      	itet	le
 80103bc:	f1c3 0320 	rsble	r3, r3, #32
 80103c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80103c4:	fa04 f003 	lslle.w	r0, r4, r3
 80103c8:	f7f0 f8ac 	bl	8000524 <__aeabi_ui2d>
 80103cc:	2201      	movs	r2, #1
 80103ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80103d2:	3e01      	subs	r6, #1
 80103d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80103d6:	e777      	b.n	80102c8 <_dtoa_r+0x100>
 80103d8:	2301      	movs	r3, #1
 80103da:	e7b8      	b.n	801034e <_dtoa_r+0x186>
 80103dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80103de:	e7b7      	b.n	8010350 <_dtoa_r+0x188>
 80103e0:	427b      	negs	r3, r7
 80103e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80103e4:	2300      	movs	r3, #0
 80103e6:	eba8 0807 	sub.w	r8, r8, r7
 80103ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80103ec:	e7c4      	b.n	8010378 <_dtoa_r+0x1b0>
 80103ee:	2300      	movs	r3, #0
 80103f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	dc35      	bgt.n	8010464 <_dtoa_r+0x29c>
 80103f8:	2301      	movs	r3, #1
 80103fa:	9300      	str	r3, [sp, #0]
 80103fc:	9307      	str	r3, [sp, #28]
 80103fe:	461a      	mov	r2, r3
 8010400:	920e      	str	r2, [sp, #56]	@ 0x38
 8010402:	e00b      	b.n	801041c <_dtoa_r+0x254>
 8010404:	2301      	movs	r3, #1
 8010406:	e7f3      	b.n	80103f0 <_dtoa_r+0x228>
 8010408:	2300      	movs	r3, #0
 801040a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801040c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801040e:	18fb      	adds	r3, r7, r3
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	3301      	adds	r3, #1
 8010414:	2b01      	cmp	r3, #1
 8010416:	9307      	str	r3, [sp, #28]
 8010418:	bfb8      	it	lt
 801041a:	2301      	movlt	r3, #1
 801041c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010420:	2100      	movs	r1, #0
 8010422:	2204      	movs	r2, #4
 8010424:	f102 0514 	add.w	r5, r2, #20
 8010428:	429d      	cmp	r5, r3
 801042a:	d91f      	bls.n	801046c <_dtoa_r+0x2a4>
 801042c:	6041      	str	r1, [r0, #4]
 801042e:	4658      	mov	r0, fp
 8010430:	f000 fcd8 	bl	8010de4 <_Balloc>
 8010434:	4682      	mov	sl, r0
 8010436:	2800      	cmp	r0, #0
 8010438:	d13c      	bne.n	80104b4 <_dtoa_r+0x2ec>
 801043a:	4b1b      	ldr	r3, [pc, #108]	@ (80104a8 <_dtoa_r+0x2e0>)
 801043c:	4602      	mov	r2, r0
 801043e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010442:	e6d8      	b.n	80101f6 <_dtoa_r+0x2e>
 8010444:	2301      	movs	r3, #1
 8010446:	e7e0      	b.n	801040a <_dtoa_r+0x242>
 8010448:	2401      	movs	r4, #1
 801044a:	2300      	movs	r3, #0
 801044c:	9309      	str	r3, [sp, #36]	@ 0x24
 801044e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010450:	f04f 33ff 	mov.w	r3, #4294967295
 8010454:	9300      	str	r3, [sp, #0]
 8010456:	9307      	str	r3, [sp, #28]
 8010458:	2200      	movs	r2, #0
 801045a:	2312      	movs	r3, #18
 801045c:	e7d0      	b.n	8010400 <_dtoa_r+0x238>
 801045e:	2301      	movs	r3, #1
 8010460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010462:	e7f5      	b.n	8010450 <_dtoa_r+0x288>
 8010464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010466:	9300      	str	r3, [sp, #0]
 8010468:	9307      	str	r3, [sp, #28]
 801046a:	e7d7      	b.n	801041c <_dtoa_r+0x254>
 801046c:	3101      	adds	r1, #1
 801046e:	0052      	lsls	r2, r2, #1
 8010470:	e7d8      	b.n	8010424 <_dtoa_r+0x25c>
 8010472:	bf00      	nop
 8010474:	f3af 8000 	nop.w
 8010478:	636f4361 	.word	0x636f4361
 801047c:	3fd287a7 	.word	0x3fd287a7
 8010480:	8b60c8b3 	.word	0x8b60c8b3
 8010484:	3fc68a28 	.word	0x3fc68a28
 8010488:	509f79fb 	.word	0x509f79fb
 801048c:	3fd34413 	.word	0x3fd34413
 8010490:	080150e0 	.word	0x080150e0
 8010494:	0801519a 	.word	0x0801519a
 8010498:	7ff00000 	.word	0x7ff00000
 801049c:	080154d9 	.word	0x080154d9
 80104a0:	3ff80000 	.word	0x3ff80000
 80104a4:	08015290 	.word	0x08015290
 80104a8:	080151f2 	.word	0x080151f2
 80104ac:	08015196 	.word	0x08015196
 80104b0:	080154d8 	.word	0x080154d8
 80104b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80104b8:	6018      	str	r0, [r3, #0]
 80104ba:	9b07      	ldr	r3, [sp, #28]
 80104bc:	2b0e      	cmp	r3, #14
 80104be:	f200 80a4 	bhi.w	801060a <_dtoa_r+0x442>
 80104c2:	2c00      	cmp	r4, #0
 80104c4:	f000 80a1 	beq.w	801060a <_dtoa_r+0x442>
 80104c8:	2f00      	cmp	r7, #0
 80104ca:	dd33      	ble.n	8010534 <_dtoa_r+0x36c>
 80104cc:	4bad      	ldr	r3, [pc, #692]	@ (8010784 <_dtoa_r+0x5bc>)
 80104ce:	f007 020f 	and.w	r2, r7, #15
 80104d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104d6:	ed93 7b00 	vldr	d7, [r3]
 80104da:	05f8      	lsls	r0, r7, #23
 80104dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80104e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80104e4:	d516      	bpl.n	8010514 <_dtoa_r+0x34c>
 80104e6:	4ba8      	ldr	r3, [pc, #672]	@ (8010788 <_dtoa_r+0x5c0>)
 80104e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80104ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80104f0:	f7f0 f9bc 	bl	800086c <__aeabi_ddiv>
 80104f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104f8:	f004 040f 	and.w	r4, r4, #15
 80104fc:	2603      	movs	r6, #3
 80104fe:	4da2      	ldr	r5, [pc, #648]	@ (8010788 <_dtoa_r+0x5c0>)
 8010500:	b954      	cbnz	r4, 8010518 <_dtoa_r+0x350>
 8010502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801050a:	f7f0 f9af 	bl	800086c <__aeabi_ddiv>
 801050e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010512:	e028      	b.n	8010566 <_dtoa_r+0x39e>
 8010514:	2602      	movs	r6, #2
 8010516:	e7f2      	b.n	80104fe <_dtoa_r+0x336>
 8010518:	07e1      	lsls	r1, r4, #31
 801051a:	d508      	bpl.n	801052e <_dtoa_r+0x366>
 801051c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010520:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010524:	f7f0 f878 	bl	8000618 <__aeabi_dmul>
 8010528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801052c:	3601      	adds	r6, #1
 801052e:	1064      	asrs	r4, r4, #1
 8010530:	3508      	adds	r5, #8
 8010532:	e7e5      	b.n	8010500 <_dtoa_r+0x338>
 8010534:	f000 80d2 	beq.w	80106dc <_dtoa_r+0x514>
 8010538:	427c      	negs	r4, r7
 801053a:	4b92      	ldr	r3, [pc, #584]	@ (8010784 <_dtoa_r+0x5bc>)
 801053c:	4d92      	ldr	r5, [pc, #584]	@ (8010788 <_dtoa_r+0x5c0>)
 801053e:	f004 020f 	and.w	r2, r4, #15
 8010542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801054e:	f7f0 f863 	bl	8000618 <__aeabi_dmul>
 8010552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010556:	1124      	asrs	r4, r4, #4
 8010558:	2300      	movs	r3, #0
 801055a:	2602      	movs	r6, #2
 801055c:	2c00      	cmp	r4, #0
 801055e:	f040 80b2 	bne.w	80106c6 <_dtoa_r+0x4fe>
 8010562:	2b00      	cmp	r3, #0
 8010564:	d1d3      	bne.n	801050e <_dtoa_r+0x346>
 8010566:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010568:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801056c:	2b00      	cmp	r3, #0
 801056e:	f000 80b7 	beq.w	80106e0 <_dtoa_r+0x518>
 8010572:	4b86      	ldr	r3, [pc, #536]	@ (801078c <_dtoa_r+0x5c4>)
 8010574:	2200      	movs	r2, #0
 8010576:	4620      	mov	r0, r4
 8010578:	4629      	mov	r1, r5
 801057a:	f7f0 fabf 	bl	8000afc <__aeabi_dcmplt>
 801057e:	2800      	cmp	r0, #0
 8010580:	f000 80ae 	beq.w	80106e0 <_dtoa_r+0x518>
 8010584:	9b07      	ldr	r3, [sp, #28]
 8010586:	2b00      	cmp	r3, #0
 8010588:	f000 80aa 	beq.w	80106e0 <_dtoa_r+0x518>
 801058c:	9b00      	ldr	r3, [sp, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	dd37      	ble.n	8010602 <_dtoa_r+0x43a>
 8010592:	1e7b      	subs	r3, r7, #1
 8010594:	9304      	str	r3, [sp, #16]
 8010596:	4620      	mov	r0, r4
 8010598:	4b7d      	ldr	r3, [pc, #500]	@ (8010790 <_dtoa_r+0x5c8>)
 801059a:	2200      	movs	r2, #0
 801059c:	4629      	mov	r1, r5
 801059e:	f7f0 f83b 	bl	8000618 <__aeabi_dmul>
 80105a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105a6:	9c00      	ldr	r4, [sp, #0]
 80105a8:	3601      	adds	r6, #1
 80105aa:	4630      	mov	r0, r6
 80105ac:	f7ef ffca 	bl	8000544 <__aeabi_i2d>
 80105b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80105b4:	f7f0 f830 	bl	8000618 <__aeabi_dmul>
 80105b8:	4b76      	ldr	r3, [pc, #472]	@ (8010794 <_dtoa_r+0x5cc>)
 80105ba:	2200      	movs	r2, #0
 80105bc:	f7ef fe76 	bl	80002ac <__adddf3>
 80105c0:	4605      	mov	r5, r0
 80105c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80105c6:	2c00      	cmp	r4, #0
 80105c8:	f040 808d 	bne.w	80106e6 <_dtoa_r+0x51e>
 80105cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105d0:	4b71      	ldr	r3, [pc, #452]	@ (8010798 <_dtoa_r+0x5d0>)
 80105d2:	2200      	movs	r2, #0
 80105d4:	f7ef fe68 	bl	80002a8 <__aeabi_dsub>
 80105d8:	4602      	mov	r2, r0
 80105da:	460b      	mov	r3, r1
 80105dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80105e0:	462a      	mov	r2, r5
 80105e2:	4633      	mov	r3, r6
 80105e4:	f7f0 faa8 	bl	8000b38 <__aeabi_dcmpgt>
 80105e8:	2800      	cmp	r0, #0
 80105ea:	f040 828b 	bne.w	8010b04 <_dtoa_r+0x93c>
 80105ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105f2:	462a      	mov	r2, r5
 80105f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80105f8:	f7f0 fa80 	bl	8000afc <__aeabi_dcmplt>
 80105fc:	2800      	cmp	r0, #0
 80105fe:	f040 8128 	bne.w	8010852 <_dtoa_r+0x68a>
 8010602:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010606:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801060a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801060c:	2b00      	cmp	r3, #0
 801060e:	f2c0 815a 	blt.w	80108c6 <_dtoa_r+0x6fe>
 8010612:	2f0e      	cmp	r7, #14
 8010614:	f300 8157 	bgt.w	80108c6 <_dtoa_r+0x6fe>
 8010618:	4b5a      	ldr	r3, [pc, #360]	@ (8010784 <_dtoa_r+0x5bc>)
 801061a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801061e:	ed93 7b00 	vldr	d7, [r3]
 8010622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010624:	2b00      	cmp	r3, #0
 8010626:	ed8d 7b00 	vstr	d7, [sp]
 801062a:	da03      	bge.n	8010634 <_dtoa_r+0x46c>
 801062c:	9b07      	ldr	r3, [sp, #28]
 801062e:	2b00      	cmp	r3, #0
 8010630:	f340 8101 	ble.w	8010836 <_dtoa_r+0x66e>
 8010634:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010638:	4656      	mov	r6, sl
 801063a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801063e:	4620      	mov	r0, r4
 8010640:	4629      	mov	r1, r5
 8010642:	f7f0 f913 	bl	800086c <__aeabi_ddiv>
 8010646:	f7f0 fa97 	bl	8000b78 <__aeabi_d2iz>
 801064a:	4680      	mov	r8, r0
 801064c:	f7ef ff7a 	bl	8000544 <__aeabi_i2d>
 8010650:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010654:	f7ef ffe0 	bl	8000618 <__aeabi_dmul>
 8010658:	4602      	mov	r2, r0
 801065a:	460b      	mov	r3, r1
 801065c:	4620      	mov	r0, r4
 801065e:	4629      	mov	r1, r5
 8010660:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010664:	f7ef fe20 	bl	80002a8 <__aeabi_dsub>
 8010668:	f806 4b01 	strb.w	r4, [r6], #1
 801066c:	9d07      	ldr	r5, [sp, #28]
 801066e:	eba6 040a 	sub.w	r4, r6, sl
 8010672:	42a5      	cmp	r5, r4
 8010674:	4602      	mov	r2, r0
 8010676:	460b      	mov	r3, r1
 8010678:	f040 8117 	bne.w	80108aa <_dtoa_r+0x6e2>
 801067c:	f7ef fe16 	bl	80002ac <__adddf3>
 8010680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010684:	4604      	mov	r4, r0
 8010686:	460d      	mov	r5, r1
 8010688:	f7f0 fa56 	bl	8000b38 <__aeabi_dcmpgt>
 801068c:	2800      	cmp	r0, #0
 801068e:	f040 80f9 	bne.w	8010884 <_dtoa_r+0x6bc>
 8010692:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010696:	4620      	mov	r0, r4
 8010698:	4629      	mov	r1, r5
 801069a:	f7f0 fa25 	bl	8000ae8 <__aeabi_dcmpeq>
 801069e:	b118      	cbz	r0, 80106a8 <_dtoa_r+0x4e0>
 80106a0:	f018 0f01 	tst.w	r8, #1
 80106a4:	f040 80ee 	bne.w	8010884 <_dtoa_r+0x6bc>
 80106a8:	4649      	mov	r1, r9
 80106aa:	4658      	mov	r0, fp
 80106ac:	f000 fbda 	bl	8010e64 <_Bfree>
 80106b0:	2300      	movs	r3, #0
 80106b2:	7033      	strb	r3, [r6, #0]
 80106b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80106b6:	3701      	adds	r7, #1
 80106b8:	601f      	str	r7, [r3, #0]
 80106ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f000 831d 	beq.w	8010cfc <_dtoa_r+0xb34>
 80106c2:	601e      	str	r6, [r3, #0]
 80106c4:	e31a      	b.n	8010cfc <_dtoa_r+0xb34>
 80106c6:	07e2      	lsls	r2, r4, #31
 80106c8:	d505      	bpl.n	80106d6 <_dtoa_r+0x50e>
 80106ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80106ce:	f7ef ffa3 	bl	8000618 <__aeabi_dmul>
 80106d2:	3601      	adds	r6, #1
 80106d4:	2301      	movs	r3, #1
 80106d6:	1064      	asrs	r4, r4, #1
 80106d8:	3508      	adds	r5, #8
 80106da:	e73f      	b.n	801055c <_dtoa_r+0x394>
 80106dc:	2602      	movs	r6, #2
 80106de:	e742      	b.n	8010566 <_dtoa_r+0x39e>
 80106e0:	9c07      	ldr	r4, [sp, #28]
 80106e2:	9704      	str	r7, [sp, #16]
 80106e4:	e761      	b.n	80105aa <_dtoa_r+0x3e2>
 80106e6:	4b27      	ldr	r3, [pc, #156]	@ (8010784 <_dtoa_r+0x5bc>)
 80106e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80106f2:	4454      	add	r4, sl
 80106f4:	2900      	cmp	r1, #0
 80106f6:	d053      	beq.n	80107a0 <_dtoa_r+0x5d8>
 80106f8:	4928      	ldr	r1, [pc, #160]	@ (801079c <_dtoa_r+0x5d4>)
 80106fa:	2000      	movs	r0, #0
 80106fc:	f7f0 f8b6 	bl	800086c <__aeabi_ddiv>
 8010700:	4633      	mov	r3, r6
 8010702:	462a      	mov	r2, r5
 8010704:	f7ef fdd0 	bl	80002a8 <__aeabi_dsub>
 8010708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801070c:	4656      	mov	r6, sl
 801070e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010712:	f7f0 fa31 	bl	8000b78 <__aeabi_d2iz>
 8010716:	4605      	mov	r5, r0
 8010718:	f7ef ff14 	bl	8000544 <__aeabi_i2d>
 801071c:	4602      	mov	r2, r0
 801071e:	460b      	mov	r3, r1
 8010720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010724:	f7ef fdc0 	bl	80002a8 <__aeabi_dsub>
 8010728:	3530      	adds	r5, #48	@ 0x30
 801072a:	4602      	mov	r2, r0
 801072c:	460b      	mov	r3, r1
 801072e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010732:	f806 5b01 	strb.w	r5, [r6], #1
 8010736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801073a:	f7f0 f9df 	bl	8000afc <__aeabi_dcmplt>
 801073e:	2800      	cmp	r0, #0
 8010740:	d171      	bne.n	8010826 <_dtoa_r+0x65e>
 8010742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010746:	4911      	ldr	r1, [pc, #68]	@ (801078c <_dtoa_r+0x5c4>)
 8010748:	2000      	movs	r0, #0
 801074a:	f7ef fdad 	bl	80002a8 <__aeabi_dsub>
 801074e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010752:	f7f0 f9d3 	bl	8000afc <__aeabi_dcmplt>
 8010756:	2800      	cmp	r0, #0
 8010758:	f040 8095 	bne.w	8010886 <_dtoa_r+0x6be>
 801075c:	42a6      	cmp	r6, r4
 801075e:	f43f af50 	beq.w	8010602 <_dtoa_r+0x43a>
 8010762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010766:	4b0a      	ldr	r3, [pc, #40]	@ (8010790 <_dtoa_r+0x5c8>)
 8010768:	2200      	movs	r2, #0
 801076a:	f7ef ff55 	bl	8000618 <__aeabi_dmul>
 801076e:	4b08      	ldr	r3, [pc, #32]	@ (8010790 <_dtoa_r+0x5c8>)
 8010770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010774:	2200      	movs	r2, #0
 8010776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801077a:	f7ef ff4d 	bl	8000618 <__aeabi_dmul>
 801077e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010782:	e7c4      	b.n	801070e <_dtoa_r+0x546>
 8010784:	08015290 	.word	0x08015290
 8010788:	08015268 	.word	0x08015268
 801078c:	3ff00000 	.word	0x3ff00000
 8010790:	40240000 	.word	0x40240000
 8010794:	401c0000 	.word	0x401c0000
 8010798:	40140000 	.word	0x40140000
 801079c:	3fe00000 	.word	0x3fe00000
 80107a0:	4631      	mov	r1, r6
 80107a2:	4628      	mov	r0, r5
 80107a4:	f7ef ff38 	bl	8000618 <__aeabi_dmul>
 80107a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80107ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80107ae:	4656      	mov	r6, sl
 80107b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107b4:	f7f0 f9e0 	bl	8000b78 <__aeabi_d2iz>
 80107b8:	4605      	mov	r5, r0
 80107ba:	f7ef fec3 	bl	8000544 <__aeabi_i2d>
 80107be:	4602      	mov	r2, r0
 80107c0:	460b      	mov	r3, r1
 80107c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107c6:	f7ef fd6f 	bl	80002a8 <__aeabi_dsub>
 80107ca:	3530      	adds	r5, #48	@ 0x30
 80107cc:	f806 5b01 	strb.w	r5, [r6], #1
 80107d0:	4602      	mov	r2, r0
 80107d2:	460b      	mov	r3, r1
 80107d4:	42a6      	cmp	r6, r4
 80107d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80107da:	f04f 0200 	mov.w	r2, #0
 80107de:	d124      	bne.n	801082a <_dtoa_r+0x662>
 80107e0:	4bac      	ldr	r3, [pc, #688]	@ (8010a94 <_dtoa_r+0x8cc>)
 80107e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80107e6:	f7ef fd61 	bl	80002ac <__adddf3>
 80107ea:	4602      	mov	r2, r0
 80107ec:	460b      	mov	r3, r1
 80107ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107f2:	f7f0 f9a1 	bl	8000b38 <__aeabi_dcmpgt>
 80107f6:	2800      	cmp	r0, #0
 80107f8:	d145      	bne.n	8010886 <_dtoa_r+0x6be>
 80107fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80107fe:	49a5      	ldr	r1, [pc, #660]	@ (8010a94 <_dtoa_r+0x8cc>)
 8010800:	2000      	movs	r0, #0
 8010802:	f7ef fd51 	bl	80002a8 <__aeabi_dsub>
 8010806:	4602      	mov	r2, r0
 8010808:	460b      	mov	r3, r1
 801080a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801080e:	f7f0 f975 	bl	8000afc <__aeabi_dcmplt>
 8010812:	2800      	cmp	r0, #0
 8010814:	f43f aef5 	beq.w	8010602 <_dtoa_r+0x43a>
 8010818:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801081a:	1e73      	subs	r3, r6, #1
 801081c:	9315      	str	r3, [sp, #84]	@ 0x54
 801081e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010822:	2b30      	cmp	r3, #48	@ 0x30
 8010824:	d0f8      	beq.n	8010818 <_dtoa_r+0x650>
 8010826:	9f04      	ldr	r7, [sp, #16]
 8010828:	e73e      	b.n	80106a8 <_dtoa_r+0x4e0>
 801082a:	4b9b      	ldr	r3, [pc, #620]	@ (8010a98 <_dtoa_r+0x8d0>)
 801082c:	f7ef fef4 	bl	8000618 <__aeabi_dmul>
 8010830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010834:	e7bc      	b.n	80107b0 <_dtoa_r+0x5e8>
 8010836:	d10c      	bne.n	8010852 <_dtoa_r+0x68a>
 8010838:	4b98      	ldr	r3, [pc, #608]	@ (8010a9c <_dtoa_r+0x8d4>)
 801083a:	2200      	movs	r2, #0
 801083c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010840:	f7ef feea 	bl	8000618 <__aeabi_dmul>
 8010844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010848:	f7f0 f96c 	bl	8000b24 <__aeabi_dcmpge>
 801084c:	2800      	cmp	r0, #0
 801084e:	f000 8157 	beq.w	8010b00 <_dtoa_r+0x938>
 8010852:	2400      	movs	r4, #0
 8010854:	4625      	mov	r5, r4
 8010856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010858:	43db      	mvns	r3, r3
 801085a:	9304      	str	r3, [sp, #16]
 801085c:	4656      	mov	r6, sl
 801085e:	2700      	movs	r7, #0
 8010860:	4621      	mov	r1, r4
 8010862:	4658      	mov	r0, fp
 8010864:	f000 fafe 	bl	8010e64 <_Bfree>
 8010868:	2d00      	cmp	r5, #0
 801086a:	d0dc      	beq.n	8010826 <_dtoa_r+0x65e>
 801086c:	b12f      	cbz	r7, 801087a <_dtoa_r+0x6b2>
 801086e:	42af      	cmp	r7, r5
 8010870:	d003      	beq.n	801087a <_dtoa_r+0x6b2>
 8010872:	4639      	mov	r1, r7
 8010874:	4658      	mov	r0, fp
 8010876:	f000 faf5 	bl	8010e64 <_Bfree>
 801087a:	4629      	mov	r1, r5
 801087c:	4658      	mov	r0, fp
 801087e:	f000 faf1 	bl	8010e64 <_Bfree>
 8010882:	e7d0      	b.n	8010826 <_dtoa_r+0x65e>
 8010884:	9704      	str	r7, [sp, #16]
 8010886:	4633      	mov	r3, r6
 8010888:	461e      	mov	r6, r3
 801088a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801088e:	2a39      	cmp	r2, #57	@ 0x39
 8010890:	d107      	bne.n	80108a2 <_dtoa_r+0x6da>
 8010892:	459a      	cmp	sl, r3
 8010894:	d1f8      	bne.n	8010888 <_dtoa_r+0x6c0>
 8010896:	9a04      	ldr	r2, [sp, #16]
 8010898:	3201      	adds	r2, #1
 801089a:	9204      	str	r2, [sp, #16]
 801089c:	2230      	movs	r2, #48	@ 0x30
 801089e:	f88a 2000 	strb.w	r2, [sl]
 80108a2:	781a      	ldrb	r2, [r3, #0]
 80108a4:	3201      	adds	r2, #1
 80108a6:	701a      	strb	r2, [r3, #0]
 80108a8:	e7bd      	b.n	8010826 <_dtoa_r+0x65e>
 80108aa:	4b7b      	ldr	r3, [pc, #492]	@ (8010a98 <_dtoa_r+0x8d0>)
 80108ac:	2200      	movs	r2, #0
 80108ae:	f7ef feb3 	bl	8000618 <__aeabi_dmul>
 80108b2:	2200      	movs	r2, #0
 80108b4:	2300      	movs	r3, #0
 80108b6:	4604      	mov	r4, r0
 80108b8:	460d      	mov	r5, r1
 80108ba:	f7f0 f915 	bl	8000ae8 <__aeabi_dcmpeq>
 80108be:	2800      	cmp	r0, #0
 80108c0:	f43f aebb 	beq.w	801063a <_dtoa_r+0x472>
 80108c4:	e6f0      	b.n	80106a8 <_dtoa_r+0x4e0>
 80108c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80108c8:	2a00      	cmp	r2, #0
 80108ca:	f000 80db 	beq.w	8010a84 <_dtoa_r+0x8bc>
 80108ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108d0:	2a01      	cmp	r2, #1
 80108d2:	f300 80bf 	bgt.w	8010a54 <_dtoa_r+0x88c>
 80108d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80108d8:	2a00      	cmp	r2, #0
 80108da:	f000 80b7 	beq.w	8010a4c <_dtoa_r+0x884>
 80108de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80108e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80108e4:	4646      	mov	r6, r8
 80108e6:	9a08      	ldr	r2, [sp, #32]
 80108e8:	2101      	movs	r1, #1
 80108ea:	441a      	add	r2, r3
 80108ec:	4658      	mov	r0, fp
 80108ee:	4498      	add	r8, r3
 80108f0:	9208      	str	r2, [sp, #32]
 80108f2:	f000 fbb5 	bl	8011060 <__i2b>
 80108f6:	4605      	mov	r5, r0
 80108f8:	b15e      	cbz	r6, 8010912 <_dtoa_r+0x74a>
 80108fa:	9b08      	ldr	r3, [sp, #32]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	dd08      	ble.n	8010912 <_dtoa_r+0x74a>
 8010900:	42b3      	cmp	r3, r6
 8010902:	9a08      	ldr	r2, [sp, #32]
 8010904:	bfa8      	it	ge
 8010906:	4633      	movge	r3, r6
 8010908:	eba8 0803 	sub.w	r8, r8, r3
 801090c:	1af6      	subs	r6, r6, r3
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	9308      	str	r3, [sp, #32]
 8010912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010914:	b1f3      	cbz	r3, 8010954 <_dtoa_r+0x78c>
 8010916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010918:	2b00      	cmp	r3, #0
 801091a:	f000 80b7 	beq.w	8010a8c <_dtoa_r+0x8c4>
 801091e:	b18c      	cbz	r4, 8010944 <_dtoa_r+0x77c>
 8010920:	4629      	mov	r1, r5
 8010922:	4622      	mov	r2, r4
 8010924:	4658      	mov	r0, fp
 8010926:	f000 fc5b 	bl	80111e0 <__pow5mult>
 801092a:	464a      	mov	r2, r9
 801092c:	4601      	mov	r1, r0
 801092e:	4605      	mov	r5, r0
 8010930:	4658      	mov	r0, fp
 8010932:	f000 fbab 	bl	801108c <__multiply>
 8010936:	4649      	mov	r1, r9
 8010938:	9004      	str	r0, [sp, #16]
 801093a:	4658      	mov	r0, fp
 801093c:	f000 fa92 	bl	8010e64 <_Bfree>
 8010940:	9b04      	ldr	r3, [sp, #16]
 8010942:	4699      	mov	r9, r3
 8010944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010946:	1b1a      	subs	r2, r3, r4
 8010948:	d004      	beq.n	8010954 <_dtoa_r+0x78c>
 801094a:	4649      	mov	r1, r9
 801094c:	4658      	mov	r0, fp
 801094e:	f000 fc47 	bl	80111e0 <__pow5mult>
 8010952:	4681      	mov	r9, r0
 8010954:	2101      	movs	r1, #1
 8010956:	4658      	mov	r0, fp
 8010958:	f000 fb82 	bl	8011060 <__i2b>
 801095c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801095e:	4604      	mov	r4, r0
 8010960:	2b00      	cmp	r3, #0
 8010962:	f000 81cf 	beq.w	8010d04 <_dtoa_r+0xb3c>
 8010966:	461a      	mov	r2, r3
 8010968:	4601      	mov	r1, r0
 801096a:	4658      	mov	r0, fp
 801096c:	f000 fc38 	bl	80111e0 <__pow5mult>
 8010970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010972:	2b01      	cmp	r3, #1
 8010974:	4604      	mov	r4, r0
 8010976:	f300 8095 	bgt.w	8010aa4 <_dtoa_r+0x8dc>
 801097a:	9b02      	ldr	r3, [sp, #8]
 801097c:	2b00      	cmp	r3, #0
 801097e:	f040 8087 	bne.w	8010a90 <_dtoa_r+0x8c8>
 8010982:	9b03      	ldr	r3, [sp, #12]
 8010984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010988:	2b00      	cmp	r3, #0
 801098a:	f040 8089 	bne.w	8010aa0 <_dtoa_r+0x8d8>
 801098e:	9b03      	ldr	r3, [sp, #12]
 8010990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010994:	0d1b      	lsrs	r3, r3, #20
 8010996:	051b      	lsls	r3, r3, #20
 8010998:	b12b      	cbz	r3, 80109a6 <_dtoa_r+0x7de>
 801099a:	9b08      	ldr	r3, [sp, #32]
 801099c:	3301      	adds	r3, #1
 801099e:	9308      	str	r3, [sp, #32]
 80109a0:	f108 0801 	add.w	r8, r8, #1
 80109a4:	2301      	movs	r3, #1
 80109a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80109a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	f000 81b0 	beq.w	8010d10 <_dtoa_r+0xb48>
 80109b0:	6923      	ldr	r3, [r4, #16]
 80109b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80109b6:	6918      	ldr	r0, [r3, #16]
 80109b8:	f000 fb06 	bl	8010fc8 <__hi0bits>
 80109bc:	f1c0 0020 	rsb	r0, r0, #32
 80109c0:	9b08      	ldr	r3, [sp, #32]
 80109c2:	4418      	add	r0, r3
 80109c4:	f010 001f 	ands.w	r0, r0, #31
 80109c8:	d077      	beq.n	8010aba <_dtoa_r+0x8f2>
 80109ca:	f1c0 0320 	rsb	r3, r0, #32
 80109ce:	2b04      	cmp	r3, #4
 80109d0:	dd6b      	ble.n	8010aaa <_dtoa_r+0x8e2>
 80109d2:	9b08      	ldr	r3, [sp, #32]
 80109d4:	f1c0 001c 	rsb	r0, r0, #28
 80109d8:	4403      	add	r3, r0
 80109da:	4480      	add	r8, r0
 80109dc:	4406      	add	r6, r0
 80109de:	9308      	str	r3, [sp, #32]
 80109e0:	f1b8 0f00 	cmp.w	r8, #0
 80109e4:	dd05      	ble.n	80109f2 <_dtoa_r+0x82a>
 80109e6:	4649      	mov	r1, r9
 80109e8:	4642      	mov	r2, r8
 80109ea:	4658      	mov	r0, fp
 80109ec:	f000 fc52 	bl	8011294 <__lshift>
 80109f0:	4681      	mov	r9, r0
 80109f2:	9b08      	ldr	r3, [sp, #32]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	dd05      	ble.n	8010a04 <_dtoa_r+0x83c>
 80109f8:	4621      	mov	r1, r4
 80109fa:	461a      	mov	r2, r3
 80109fc:	4658      	mov	r0, fp
 80109fe:	f000 fc49 	bl	8011294 <__lshift>
 8010a02:	4604      	mov	r4, r0
 8010a04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d059      	beq.n	8010abe <_dtoa_r+0x8f6>
 8010a0a:	4621      	mov	r1, r4
 8010a0c:	4648      	mov	r0, r9
 8010a0e:	f000 fcad 	bl	801136c <__mcmp>
 8010a12:	2800      	cmp	r0, #0
 8010a14:	da53      	bge.n	8010abe <_dtoa_r+0x8f6>
 8010a16:	1e7b      	subs	r3, r7, #1
 8010a18:	9304      	str	r3, [sp, #16]
 8010a1a:	4649      	mov	r1, r9
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	220a      	movs	r2, #10
 8010a20:	4658      	mov	r0, fp
 8010a22:	f000 fa41 	bl	8010ea8 <__multadd>
 8010a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a28:	4681      	mov	r9, r0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f000 8172 	beq.w	8010d14 <_dtoa_r+0xb4c>
 8010a30:	2300      	movs	r3, #0
 8010a32:	4629      	mov	r1, r5
 8010a34:	220a      	movs	r2, #10
 8010a36:	4658      	mov	r0, fp
 8010a38:	f000 fa36 	bl	8010ea8 <__multadd>
 8010a3c:	9b00      	ldr	r3, [sp, #0]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	4605      	mov	r5, r0
 8010a42:	dc67      	bgt.n	8010b14 <_dtoa_r+0x94c>
 8010a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a46:	2b02      	cmp	r3, #2
 8010a48:	dc41      	bgt.n	8010ace <_dtoa_r+0x906>
 8010a4a:	e063      	b.n	8010b14 <_dtoa_r+0x94c>
 8010a4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010a4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010a52:	e746      	b.n	80108e2 <_dtoa_r+0x71a>
 8010a54:	9b07      	ldr	r3, [sp, #28]
 8010a56:	1e5c      	subs	r4, r3, #1
 8010a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a5a:	42a3      	cmp	r3, r4
 8010a5c:	bfbf      	itttt	lt
 8010a5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010a60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010a62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010a64:	1ae3      	sublt	r3, r4, r3
 8010a66:	bfb4      	ite	lt
 8010a68:	18d2      	addlt	r2, r2, r3
 8010a6a:	1b1c      	subge	r4, r3, r4
 8010a6c:	9b07      	ldr	r3, [sp, #28]
 8010a6e:	bfbc      	itt	lt
 8010a70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010a72:	2400      	movlt	r4, #0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	bfb5      	itete	lt
 8010a78:	eba8 0603 	sublt.w	r6, r8, r3
 8010a7c:	9b07      	ldrge	r3, [sp, #28]
 8010a7e:	2300      	movlt	r3, #0
 8010a80:	4646      	movge	r6, r8
 8010a82:	e730      	b.n	80108e6 <_dtoa_r+0x71e>
 8010a84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010a86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010a88:	4646      	mov	r6, r8
 8010a8a:	e735      	b.n	80108f8 <_dtoa_r+0x730>
 8010a8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a8e:	e75c      	b.n	801094a <_dtoa_r+0x782>
 8010a90:	2300      	movs	r3, #0
 8010a92:	e788      	b.n	80109a6 <_dtoa_r+0x7de>
 8010a94:	3fe00000 	.word	0x3fe00000
 8010a98:	40240000 	.word	0x40240000
 8010a9c:	40140000 	.word	0x40140000
 8010aa0:	9b02      	ldr	r3, [sp, #8]
 8010aa2:	e780      	b.n	80109a6 <_dtoa_r+0x7de>
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010aa8:	e782      	b.n	80109b0 <_dtoa_r+0x7e8>
 8010aaa:	d099      	beq.n	80109e0 <_dtoa_r+0x818>
 8010aac:	9a08      	ldr	r2, [sp, #32]
 8010aae:	331c      	adds	r3, #28
 8010ab0:	441a      	add	r2, r3
 8010ab2:	4498      	add	r8, r3
 8010ab4:	441e      	add	r6, r3
 8010ab6:	9208      	str	r2, [sp, #32]
 8010ab8:	e792      	b.n	80109e0 <_dtoa_r+0x818>
 8010aba:	4603      	mov	r3, r0
 8010abc:	e7f6      	b.n	8010aac <_dtoa_r+0x8e4>
 8010abe:	9b07      	ldr	r3, [sp, #28]
 8010ac0:	9704      	str	r7, [sp, #16]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	dc20      	bgt.n	8010b08 <_dtoa_r+0x940>
 8010ac6:	9300      	str	r3, [sp, #0]
 8010ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aca:	2b02      	cmp	r3, #2
 8010acc:	dd1e      	ble.n	8010b0c <_dtoa_r+0x944>
 8010ace:	9b00      	ldr	r3, [sp, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	f47f aec0 	bne.w	8010856 <_dtoa_r+0x68e>
 8010ad6:	4621      	mov	r1, r4
 8010ad8:	2205      	movs	r2, #5
 8010ada:	4658      	mov	r0, fp
 8010adc:	f000 f9e4 	bl	8010ea8 <__multadd>
 8010ae0:	4601      	mov	r1, r0
 8010ae2:	4604      	mov	r4, r0
 8010ae4:	4648      	mov	r0, r9
 8010ae6:	f000 fc41 	bl	801136c <__mcmp>
 8010aea:	2800      	cmp	r0, #0
 8010aec:	f77f aeb3 	ble.w	8010856 <_dtoa_r+0x68e>
 8010af0:	4656      	mov	r6, sl
 8010af2:	2331      	movs	r3, #49	@ 0x31
 8010af4:	f806 3b01 	strb.w	r3, [r6], #1
 8010af8:	9b04      	ldr	r3, [sp, #16]
 8010afa:	3301      	adds	r3, #1
 8010afc:	9304      	str	r3, [sp, #16]
 8010afe:	e6ae      	b.n	801085e <_dtoa_r+0x696>
 8010b00:	9c07      	ldr	r4, [sp, #28]
 8010b02:	9704      	str	r7, [sp, #16]
 8010b04:	4625      	mov	r5, r4
 8010b06:	e7f3      	b.n	8010af0 <_dtoa_r+0x928>
 8010b08:	9b07      	ldr	r3, [sp, #28]
 8010b0a:	9300      	str	r3, [sp, #0]
 8010b0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f000 8104 	beq.w	8010d1c <_dtoa_r+0xb54>
 8010b14:	2e00      	cmp	r6, #0
 8010b16:	dd05      	ble.n	8010b24 <_dtoa_r+0x95c>
 8010b18:	4629      	mov	r1, r5
 8010b1a:	4632      	mov	r2, r6
 8010b1c:	4658      	mov	r0, fp
 8010b1e:	f000 fbb9 	bl	8011294 <__lshift>
 8010b22:	4605      	mov	r5, r0
 8010b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d05a      	beq.n	8010be0 <_dtoa_r+0xa18>
 8010b2a:	6869      	ldr	r1, [r5, #4]
 8010b2c:	4658      	mov	r0, fp
 8010b2e:	f000 f959 	bl	8010de4 <_Balloc>
 8010b32:	4606      	mov	r6, r0
 8010b34:	b928      	cbnz	r0, 8010b42 <_dtoa_r+0x97a>
 8010b36:	4b84      	ldr	r3, [pc, #528]	@ (8010d48 <_dtoa_r+0xb80>)
 8010b38:	4602      	mov	r2, r0
 8010b3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010b3e:	f7ff bb5a 	b.w	80101f6 <_dtoa_r+0x2e>
 8010b42:	692a      	ldr	r2, [r5, #16]
 8010b44:	3202      	adds	r2, #2
 8010b46:	0092      	lsls	r2, r2, #2
 8010b48:	f105 010c 	add.w	r1, r5, #12
 8010b4c:	300c      	adds	r0, #12
 8010b4e:	f7ff fa7e 	bl	801004e <memcpy>
 8010b52:	2201      	movs	r2, #1
 8010b54:	4631      	mov	r1, r6
 8010b56:	4658      	mov	r0, fp
 8010b58:	f000 fb9c 	bl	8011294 <__lshift>
 8010b5c:	f10a 0301 	add.w	r3, sl, #1
 8010b60:	9307      	str	r3, [sp, #28]
 8010b62:	9b00      	ldr	r3, [sp, #0]
 8010b64:	4453      	add	r3, sl
 8010b66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b68:	9b02      	ldr	r3, [sp, #8]
 8010b6a:	f003 0301 	and.w	r3, r3, #1
 8010b6e:	462f      	mov	r7, r5
 8010b70:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b72:	4605      	mov	r5, r0
 8010b74:	9b07      	ldr	r3, [sp, #28]
 8010b76:	4621      	mov	r1, r4
 8010b78:	3b01      	subs	r3, #1
 8010b7a:	4648      	mov	r0, r9
 8010b7c:	9300      	str	r3, [sp, #0]
 8010b7e:	f7ff fa99 	bl	80100b4 <quorem>
 8010b82:	4639      	mov	r1, r7
 8010b84:	9002      	str	r0, [sp, #8]
 8010b86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010b8a:	4648      	mov	r0, r9
 8010b8c:	f000 fbee 	bl	801136c <__mcmp>
 8010b90:	462a      	mov	r2, r5
 8010b92:	9008      	str	r0, [sp, #32]
 8010b94:	4621      	mov	r1, r4
 8010b96:	4658      	mov	r0, fp
 8010b98:	f000 fc04 	bl	80113a4 <__mdiff>
 8010b9c:	68c2      	ldr	r2, [r0, #12]
 8010b9e:	4606      	mov	r6, r0
 8010ba0:	bb02      	cbnz	r2, 8010be4 <_dtoa_r+0xa1c>
 8010ba2:	4601      	mov	r1, r0
 8010ba4:	4648      	mov	r0, r9
 8010ba6:	f000 fbe1 	bl	801136c <__mcmp>
 8010baa:	4602      	mov	r2, r0
 8010bac:	4631      	mov	r1, r6
 8010bae:	4658      	mov	r0, fp
 8010bb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010bb2:	f000 f957 	bl	8010e64 <_Bfree>
 8010bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010bba:	9e07      	ldr	r6, [sp, #28]
 8010bbc:	ea43 0102 	orr.w	r1, r3, r2
 8010bc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bc2:	4319      	orrs	r1, r3
 8010bc4:	d110      	bne.n	8010be8 <_dtoa_r+0xa20>
 8010bc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010bca:	d029      	beq.n	8010c20 <_dtoa_r+0xa58>
 8010bcc:	9b08      	ldr	r3, [sp, #32]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	dd02      	ble.n	8010bd8 <_dtoa_r+0xa10>
 8010bd2:	9b02      	ldr	r3, [sp, #8]
 8010bd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010bd8:	9b00      	ldr	r3, [sp, #0]
 8010bda:	f883 8000 	strb.w	r8, [r3]
 8010bde:	e63f      	b.n	8010860 <_dtoa_r+0x698>
 8010be0:	4628      	mov	r0, r5
 8010be2:	e7bb      	b.n	8010b5c <_dtoa_r+0x994>
 8010be4:	2201      	movs	r2, #1
 8010be6:	e7e1      	b.n	8010bac <_dtoa_r+0x9e4>
 8010be8:	9b08      	ldr	r3, [sp, #32]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	db04      	blt.n	8010bf8 <_dtoa_r+0xa30>
 8010bee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010bf0:	430b      	orrs	r3, r1
 8010bf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010bf4:	430b      	orrs	r3, r1
 8010bf6:	d120      	bne.n	8010c3a <_dtoa_r+0xa72>
 8010bf8:	2a00      	cmp	r2, #0
 8010bfa:	dded      	ble.n	8010bd8 <_dtoa_r+0xa10>
 8010bfc:	4649      	mov	r1, r9
 8010bfe:	2201      	movs	r2, #1
 8010c00:	4658      	mov	r0, fp
 8010c02:	f000 fb47 	bl	8011294 <__lshift>
 8010c06:	4621      	mov	r1, r4
 8010c08:	4681      	mov	r9, r0
 8010c0a:	f000 fbaf 	bl	801136c <__mcmp>
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	dc03      	bgt.n	8010c1a <_dtoa_r+0xa52>
 8010c12:	d1e1      	bne.n	8010bd8 <_dtoa_r+0xa10>
 8010c14:	f018 0f01 	tst.w	r8, #1
 8010c18:	d0de      	beq.n	8010bd8 <_dtoa_r+0xa10>
 8010c1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c1e:	d1d8      	bne.n	8010bd2 <_dtoa_r+0xa0a>
 8010c20:	9a00      	ldr	r2, [sp, #0]
 8010c22:	2339      	movs	r3, #57	@ 0x39
 8010c24:	7013      	strb	r3, [r2, #0]
 8010c26:	4633      	mov	r3, r6
 8010c28:	461e      	mov	r6, r3
 8010c2a:	3b01      	subs	r3, #1
 8010c2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010c30:	2a39      	cmp	r2, #57	@ 0x39
 8010c32:	d052      	beq.n	8010cda <_dtoa_r+0xb12>
 8010c34:	3201      	adds	r2, #1
 8010c36:	701a      	strb	r2, [r3, #0]
 8010c38:	e612      	b.n	8010860 <_dtoa_r+0x698>
 8010c3a:	2a00      	cmp	r2, #0
 8010c3c:	dd07      	ble.n	8010c4e <_dtoa_r+0xa86>
 8010c3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c42:	d0ed      	beq.n	8010c20 <_dtoa_r+0xa58>
 8010c44:	9a00      	ldr	r2, [sp, #0]
 8010c46:	f108 0301 	add.w	r3, r8, #1
 8010c4a:	7013      	strb	r3, [r2, #0]
 8010c4c:	e608      	b.n	8010860 <_dtoa_r+0x698>
 8010c4e:	9b07      	ldr	r3, [sp, #28]
 8010c50:	9a07      	ldr	r2, [sp, #28]
 8010c52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010c56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d028      	beq.n	8010cae <_dtoa_r+0xae6>
 8010c5c:	4649      	mov	r1, r9
 8010c5e:	2300      	movs	r3, #0
 8010c60:	220a      	movs	r2, #10
 8010c62:	4658      	mov	r0, fp
 8010c64:	f000 f920 	bl	8010ea8 <__multadd>
 8010c68:	42af      	cmp	r7, r5
 8010c6a:	4681      	mov	r9, r0
 8010c6c:	f04f 0300 	mov.w	r3, #0
 8010c70:	f04f 020a 	mov.w	r2, #10
 8010c74:	4639      	mov	r1, r7
 8010c76:	4658      	mov	r0, fp
 8010c78:	d107      	bne.n	8010c8a <_dtoa_r+0xac2>
 8010c7a:	f000 f915 	bl	8010ea8 <__multadd>
 8010c7e:	4607      	mov	r7, r0
 8010c80:	4605      	mov	r5, r0
 8010c82:	9b07      	ldr	r3, [sp, #28]
 8010c84:	3301      	adds	r3, #1
 8010c86:	9307      	str	r3, [sp, #28]
 8010c88:	e774      	b.n	8010b74 <_dtoa_r+0x9ac>
 8010c8a:	f000 f90d 	bl	8010ea8 <__multadd>
 8010c8e:	4629      	mov	r1, r5
 8010c90:	4607      	mov	r7, r0
 8010c92:	2300      	movs	r3, #0
 8010c94:	220a      	movs	r2, #10
 8010c96:	4658      	mov	r0, fp
 8010c98:	f000 f906 	bl	8010ea8 <__multadd>
 8010c9c:	4605      	mov	r5, r0
 8010c9e:	e7f0      	b.n	8010c82 <_dtoa_r+0xaba>
 8010ca0:	9b00      	ldr	r3, [sp, #0]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	bfcc      	ite	gt
 8010ca6:	461e      	movgt	r6, r3
 8010ca8:	2601      	movle	r6, #1
 8010caa:	4456      	add	r6, sl
 8010cac:	2700      	movs	r7, #0
 8010cae:	4649      	mov	r1, r9
 8010cb0:	2201      	movs	r2, #1
 8010cb2:	4658      	mov	r0, fp
 8010cb4:	f000 faee 	bl	8011294 <__lshift>
 8010cb8:	4621      	mov	r1, r4
 8010cba:	4681      	mov	r9, r0
 8010cbc:	f000 fb56 	bl	801136c <__mcmp>
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	dcb0      	bgt.n	8010c26 <_dtoa_r+0xa5e>
 8010cc4:	d102      	bne.n	8010ccc <_dtoa_r+0xb04>
 8010cc6:	f018 0f01 	tst.w	r8, #1
 8010cca:	d1ac      	bne.n	8010c26 <_dtoa_r+0xa5e>
 8010ccc:	4633      	mov	r3, r6
 8010cce:	461e      	mov	r6, r3
 8010cd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010cd4:	2a30      	cmp	r2, #48	@ 0x30
 8010cd6:	d0fa      	beq.n	8010cce <_dtoa_r+0xb06>
 8010cd8:	e5c2      	b.n	8010860 <_dtoa_r+0x698>
 8010cda:	459a      	cmp	sl, r3
 8010cdc:	d1a4      	bne.n	8010c28 <_dtoa_r+0xa60>
 8010cde:	9b04      	ldr	r3, [sp, #16]
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	9304      	str	r3, [sp, #16]
 8010ce4:	2331      	movs	r3, #49	@ 0x31
 8010ce6:	f88a 3000 	strb.w	r3, [sl]
 8010cea:	e5b9      	b.n	8010860 <_dtoa_r+0x698>
 8010cec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010cee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010d4c <_dtoa_r+0xb84>
 8010cf2:	b11b      	cbz	r3, 8010cfc <_dtoa_r+0xb34>
 8010cf4:	f10a 0308 	add.w	r3, sl, #8
 8010cf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010cfa:	6013      	str	r3, [r2, #0]
 8010cfc:	4650      	mov	r0, sl
 8010cfe:	b019      	add	sp, #100	@ 0x64
 8010d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	f77f ae37 	ble.w	801097a <_dtoa_r+0x7b2>
 8010d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d10:	2001      	movs	r0, #1
 8010d12:	e655      	b.n	80109c0 <_dtoa_r+0x7f8>
 8010d14:	9b00      	ldr	r3, [sp, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	f77f aed6 	ble.w	8010ac8 <_dtoa_r+0x900>
 8010d1c:	4656      	mov	r6, sl
 8010d1e:	4621      	mov	r1, r4
 8010d20:	4648      	mov	r0, r9
 8010d22:	f7ff f9c7 	bl	80100b4 <quorem>
 8010d26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010d2a:	f806 8b01 	strb.w	r8, [r6], #1
 8010d2e:	9b00      	ldr	r3, [sp, #0]
 8010d30:	eba6 020a 	sub.w	r2, r6, sl
 8010d34:	4293      	cmp	r3, r2
 8010d36:	ddb3      	ble.n	8010ca0 <_dtoa_r+0xad8>
 8010d38:	4649      	mov	r1, r9
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	220a      	movs	r2, #10
 8010d3e:	4658      	mov	r0, fp
 8010d40:	f000 f8b2 	bl	8010ea8 <__multadd>
 8010d44:	4681      	mov	r9, r0
 8010d46:	e7ea      	b.n	8010d1e <_dtoa_r+0xb56>
 8010d48:	080151f2 	.word	0x080151f2
 8010d4c:	0801518d 	.word	0x0801518d

08010d50 <_free_r>:
 8010d50:	b538      	push	{r3, r4, r5, lr}
 8010d52:	4605      	mov	r5, r0
 8010d54:	2900      	cmp	r1, #0
 8010d56:	d041      	beq.n	8010ddc <_free_r+0x8c>
 8010d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d5c:	1f0c      	subs	r4, r1, #4
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	bfb8      	it	lt
 8010d62:	18e4      	addlt	r4, r4, r3
 8010d64:	f7fe f814 	bl	800ed90 <__malloc_lock>
 8010d68:	4a1d      	ldr	r2, [pc, #116]	@ (8010de0 <_free_r+0x90>)
 8010d6a:	6813      	ldr	r3, [r2, #0]
 8010d6c:	b933      	cbnz	r3, 8010d7c <_free_r+0x2c>
 8010d6e:	6063      	str	r3, [r4, #4]
 8010d70:	6014      	str	r4, [r2, #0]
 8010d72:	4628      	mov	r0, r5
 8010d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d78:	f7fe b810 	b.w	800ed9c <__malloc_unlock>
 8010d7c:	42a3      	cmp	r3, r4
 8010d7e:	d908      	bls.n	8010d92 <_free_r+0x42>
 8010d80:	6820      	ldr	r0, [r4, #0]
 8010d82:	1821      	adds	r1, r4, r0
 8010d84:	428b      	cmp	r3, r1
 8010d86:	bf01      	itttt	eq
 8010d88:	6819      	ldreq	r1, [r3, #0]
 8010d8a:	685b      	ldreq	r3, [r3, #4]
 8010d8c:	1809      	addeq	r1, r1, r0
 8010d8e:	6021      	streq	r1, [r4, #0]
 8010d90:	e7ed      	b.n	8010d6e <_free_r+0x1e>
 8010d92:	461a      	mov	r2, r3
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	b10b      	cbz	r3, 8010d9c <_free_r+0x4c>
 8010d98:	42a3      	cmp	r3, r4
 8010d9a:	d9fa      	bls.n	8010d92 <_free_r+0x42>
 8010d9c:	6811      	ldr	r1, [r2, #0]
 8010d9e:	1850      	adds	r0, r2, r1
 8010da0:	42a0      	cmp	r0, r4
 8010da2:	d10b      	bne.n	8010dbc <_free_r+0x6c>
 8010da4:	6820      	ldr	r0, [r4, #0]
 8010da6:	4401      	add	r1, r0
 8010da8:	1850      	adds	r0, r2, r1
 8010daa:	4283      	cmp	r3, r0
 8010dac:	6011      	str	r1, [r2, #0]
 8010dae:	d1e0      	bne.n	8010d72 <_free_r+0x22>
 8010db0:	6818      	ldr	r0, [r3, #0]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	6053      	str	r3, [r2, #4]
 8010db6:	4408      	add	r0, r1
 8010db8:	6010      	str	r0, [r2, #0]
 8010dba:	e7da      	b.n	8010d72 <_free_r+0x22>
 8010dbc:	d902      	bls.n	8010dc4 <_free_r+0x74>
 8010dbe:	230c      	movs	r3, #12
 8010dc0:	602b      	str	r3, [r5, #0]
 8010dc2:	e7d6      	b.n	8010d72 <_free_r+0x22>
 8010dc4:	6820      	ldr	r0, [r4, #0]
 8010dc6:	1821      	adds	r1, r4, r0
 8010dc8:	428b      	cmp	r3, r1
 8010dca:	bf04      	itt	eq
 8010dcc:	6819      	ldreq	r1, [r3, #0]
 8010dce:	685b      	ldreq	r3, [r3, #4]
 8010dd0:	6063      	str	r3, [r4, #4]
 8010dd2:	bf04      	itt	eq
 8010dd4:	1809      	addeq	r1, r1, r0
 8010dd6:	6021      	streq	r1, [r4, #0]
 8010dd8:	6054      	str	r4, [r2, #4]
 8010dda:	e7ca      	b.n	8010d72 <_free_r+0x22>
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop
 8010de0:	20005528 	.word	0x20005528

08010de4 <_Balloc>:
 8010de4:	b570      	push	{r4, r5, r6, lr}
 8010de6:	69c6      	ldr	r6, [r0, #28]
 8010de8:	4604      	mov	r4, r0
 8010dea:	460d      	mov	r5, r1
 8010dec:	b976      	cbnz	r6, 8010e0c <_Balloc+0x28>
 8010dee:	2010      	movs	r0, #16
 8010df0:	f7fd ff1c 	bl	800ec2c <malloc>
 8010df4:	4602      	mov	r2, r0
 8010df6:	61e0      	str	r0, [r4, #28]
 8010df8:	b920      	cbnz	r0, 8010e04 <_Balloc+0x20>
 8010dfa:	4b18      	ldr	r3, [pc, #96]	@ (8010e5c <_Balloc+0x78>)
 8010dfc:	4818      	ldr	r0, [pc, #96]	@ (8010e60 <_Balloc+0x7c>)
 8010dfe:	216b      	movs	r1, #107	@ 0x6b
 8010e00:	f7ff f93a 	bl	8010078 <__assert_func>
 8010e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e08:	6006      	str	r6, [r0, #0]
 8010e0a:	60c6      	str	r6, [r0, #12]
 8010e0c:	69e6      	ldr	r6, [r4, #28]
 8010e0e:	68f3      	ldr	r3, [r6, #12]
 8010e10:	b183      	cbz	r3, 8010e34 <_Balloc+0x50>
 8010e12:	69e3      	ldr	r3, [r4, #28]
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e1a:	b9b8      	cbnz	r0, 8010e4c <_Balloc+0x68>
 8010e1c:	2101      	movs	r1, #1
 8010e1e:	fa01 f605 	lsl.w	r6, r1, r5
 8010e22:	1d72      	adds	r2, r6, #5
 8010e24:	0092      	lsls	r2, r2, #2
 8010e26:	4620      	mov	r0, r4
 8010e28:	f002 f8e1 	bl	8012fee <_calloc_r>
 8010e2c:	b160      	cbz	r0, 8010e48 <_Balloc+0x64>
 8010e2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e32:	e00e      	b.n	8010e52 <_Balloc+0x6e>
 8010e34:	2221      	movs	r2, #33	@ 0x21
 8010e36:	2104      	movs	r1, #4
 8010e38:	4620      	mov	r0, r4
 8010e3a:	f002 f8d8 	bl	8012fee <_calloc_r>
 8010e3e:	69e3      	ldr	r3, [r4, #28]
 8010e40:	60f0      	str	r0, [r6, #12]
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d1e4      	bne.n	8010e12 <_Balloc+0x2e>
 8010e48:	2000      	movs	r0, #0
 8010e4a:	bd70      	pop	{r4, r5, r6, pc}
 8010e4c:	6802      	ldr	r2, [r0, #0]
 8010e4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e52:	2300      	movs	r3, #0
 8010e54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e58:	e7f7      	b.n	8010e4a <_Balloc+0x66>
 8010e5a:	bf00      	nop
 8010e5c:	080150e0 	.word	0x080150e0
 8010e60:	08015203 	.word	0x08015203

08010e64 <_Bfree>:
 8010e64:	b570      	push	{r4, r5, r6, lr}
 8010e66:	69c6      	ldr	r6, [r0, #28]
 8010e68:	4605      	mov	r5, r0
 8010e6a:	460c      	mov	r4, r1
 8010e6c:	b976      	cbnz	r6, 8010e8c <_Bfree+0x28>
 8010e6e:	2010      	movs	r0, #16
 8010e70:	f7fd fedc 	bl	800ec2c <malloc>
 8010e74:	4602      	mov	r2, r0
 8010e76:	61e8      	str	r0, [r5, #28]
 8010e78:	b920      	cbnz	r0, 8010e84 <_Bfree+0x20>
 8010e7a:	4b09      	ldr	r3, [pc, #36]	@ (8010ea0 <_Bfree+0x3c>)
 8010e7c:	4809      	ldr	r0, [pc, #36]	@ (8010ea4 <_Bfree+0x40>)
 8010e7e:	218f      	movs	r1, #143	@ 0x8f
 8010e80:	f7ff f8fa 	bl	8010078 <__assert_func>
 8010e84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e88:	6006      	str	r6, [r0, #0]
 8010e8a:	60c6      	str	r6, [r0, #12]
 8010e8c:	b13c      	cbz	r4, 8010e9e <_Bfree+0x3a>
 8010e8e:	69eb      	ldr	r3, [r5, #28]
 8010e90:	6862      	ldr	r2, [r4, #4]
 8010e92:	68db      	ldr	r3, [r3, #12]
 8010e94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e98:	6021      	str	r1, [r4, #0]
 8010e9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e9e:	bd70      	pop	{r4, r5, r6, pc}
 8010ea0:	080150e0 	.word	0x080150e0
 8010ea4:	08015203 	.word	0x08015203

08010ea8 <__multadd>:
 8010ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eac:	690d      	ldr	r5, [r1, #16]
 8010eae:	4607      	mov	r7, r0
 8010eb0:	460c      	mov	r4, r1
 8010eb2:	461e      	mov	r6, r3
 8010eb4:	f101 0c14 	add.w	ip, r1, #20
 8010eb8:	2000      	movs	r0, #0
 8010eba:	f8dc 3000 	ldr.w	r3, [ip]
 8010ebe:	b299      	uxth	r1, r3
 8010ec0:	fb02 6101 	mla	r1, r2, r1, r6
 8010ec4:	0c1e      	lsrs	r6, r3, #16
 8010ec6:	0c0b      	lsrs	r3, r1, #16
 8010ec8:	fb02 3306 	mla	r3, r2, r6, r3
 8010ecc:	b289      	uxth	r1, r1
 8010ece:	3001      	adds	r0, #1
 8010ed0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010ed4:	4285      	cmp	r5, r0
 8010ed6:	f84c 1b04 	str.w	r1, [ip], #4
 8010eda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010ede:	dcec      	bgt.n	8010eba <__multadd+0x12>
 8010ee0:	b30e      	cbz	r6, 8010f26 <__multadd+0x7e>
 8010ee2:	68a3      	ldr	r3, [r4, #8]
 8010ee4:	42ab      	cmp	r3, r5
 8010ee6:	dc19      	bgt.n	8010f1c <__multadd+0x74>
 8010ee8:	6861      	ldr	r1, [r4, #4]
 8010eea:	4638      	mov	r0, r7
 8010eec:	3101      	adds	r1, #1
 8010eee:	f7ff ff79 	bl	8010de4 <_Balloc>
 8010ef2:	4680      	mov	r8, r0
 8010ef4:	b928      	cbnz	r0, 8010f02 <__multadd+0x5a>
 8010ef6:	4602      	mov	r2, r0
 8010ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8010f2c <__multadd+0x84>)
 8010efa:	480d      	ldr	r0, [pc, #52]	@ (8010f30 <__multadd+0x88>)
 8010efc:	21ba      	movs	r1, #186	@ 0xba
 8010efe:	f7ff f8bb 	bl	8010078 <__assert_func>
 8010f02:	6922      	ldr	r2, [r4, #16]
 8010f04:	3202      	adds	r2, #2
 8010f06:	f104 010c 	add.w	r1, r4, #12
 8010f0a:	0092      	lsls	r2, r2, #2
 8010f0c:	300c      	adds	r0, #12
 8010f0e:	f7ff f89e 	bl	801004e <memcpy>
 8010f12:	4621      	mov	r1, r4
 8010f14:	4638      	mov	r0, r7
 8010f16:	f7ff ffa5 	bl	8010e64 <_Bfree>
 8010f1a:	4644      	mov	r4, r8
 8010f1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010f20:	3501      	adds	r5, #1
 8010f22:	615e      	str	r6, [r3, #20]
 8010f24:	6125      	str	r5, [r4, #16]
 8010f26:	4620      	mov	r0, r4
 8010f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f2c:	080151f2 	.word	0x080151f2
 8010f30:	08015203 	.word	0x08015203

08010f34 <__s2b>:
 8010f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f38:	460c      	mov	r4, r1
 8010f3a:	4615      	mov	r5, r2
 8010f3c:	461f      	mov	r7, r3
 8010f3e:	2209      	movs	r2, #9
 8010f40:	3308      	adds	r3, #8
 8010f42:	4606      	mov	r6, r0
 8010f44:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f48:	2100      	movs	r1, #0
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	db09      	blt.n	8010f64 <__s2b+0x30>
 8010f50:	4630      	mov	r0, r6
 8010f52:	f7ff ff47 	bl	8010de4 <_Balloc>
 8010f56:	b940      	cbnz	r0, 8010f6a <__s2b+0x36>
 8010f58:	4602      	mov	r2, r0
 8010f5a:	4b19      	ldr	r3, [pc, #100]	@ (8010fc0 <__s2b+0x8c>)
 8010f5c:	4819      	ldr	r0, [pc, #100]	@ (8010fc4 <__s2b+0x90>)
 8010f5e:	21d3      	movs	r1, #211	@ 0xd3
 8010f60:	f7ff f88a 	bl	8010078 <__assert_func>
 8010f64:	0052      	lsls	r2, r2, #1
 8010f66:	3101      	adds	r1, #1
 8010f68:	e7f0      	b.n	8010f4c <__s2b+0x18>
 8010f6a:	9b08      	ldr	r3, [sp, #32]
 8010f6c:	6143      	str	r3, [r0, #20]
 8010f6e:	2d09      	cmp	r5, #9
 8010f70:	f04f 0301 	mov.w	r3, #1
 8010f74:	6103      	str	r3, [r0, #16]
 8010f76:	dd16      	ble.n	8010fa6 <__s2b+0x72>
 8010f78:	f104 0909 	add.w	r9, r4, #9
 8010f7c:	46c8      	mov	r8, r9
 8010f7e:	442c      	add	r4, r5
 8010f80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010f84:	4601      	mov	r1, r0
 8010f86:	3b30      	subs	r3, #48	@ 0x30
 8010f88:	220a      	movs	r2, #10
 8010f8a:	4630      	mov	r0, r6
 8010f8c:	f7ff ff8c 	bl	8010ea8 <__multadd>
 8010f90:	45a0      	cmp	r8, r4
 8010f92:	d1f5      	bne.n	8010f80 <__s2b+0x4c>
 8010f94:	f1a5 0408 	sub.w	r4, r5, #8
 8010f98:	444c      	add	r4, r9
 8010f9a:	1b2d      	subs	r5, r5, r4
 8010f9c:	1963      	adds	r3, r4, r5
 8010f9e:	42bb      	cmp	r3, r7
 8010fa0:	db04      	blt.n	8010fac <__s2b+0x78>
 8010fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fa6:	340a      	adds	r4, #10
 8010fa8:	2509      	movs	r5, #9
 8010faa:	e7f6      	b.n	8010f9a <__s2b+0x66>
 8010fac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010fb0:	4601      	mov	r1, r0
 8010fb2:	3b30      	subs	r3, #48	@ 0x30
 8010fb4:	220a      	movs	r2, #10
 8010fb6:	4630      	mov	r0, r6
 8010fb8:	f7ff ff76 	bl	8010ea8 <__multadd>
 8010fbc:	e7ee      	b.n	8010f9c <__s2b+0x68>
 8010fbe:	bf00      	nop
 8010fc0:	080151f2 	.word	0x080151f2
 8010fc4:	08015203 	.word	0x08015203

08010fc8 <__hi0bits>:
 8010fc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010fcc:	4603      	mov	r3, r0
 8010fce:	bf36      	itet	cc
 8010fd0:	0403      	lslcc	r3, r0, #16
 8010fd2:	2000      	movcs	r0, #0
 8010fd4:	2010      	movcc	r0, #16
 8010fd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010fda:	bf3c      	itt	cc
 8010fdc:	021b      	lslcc	r3, r3, #8
 8010fde:	3008      	addcc	r0, #8
 8010fe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010fe4:	bf3c      	itt	cc
 8010fe6:	011b      	lslcc	r3, r3, #4
 8010fe8:	3004      	addcc	r0, #4
 8010fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010fee:	bf3c      	itt	cc
 8010ff0:	009b      	lslcc	r3, r3, #2
 8010ff2:	3002      	addcc	r0, #2
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	db05      	blt.n	8011004 <__hi0bits+0x3c>
 8010ff8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010ffc:	f100 0001 	add.w	r0, r0, #1
 8011000:	bf08      	it	eq
 8011002:	2020      	moveq	r0, #32
 8011004:	4770      	bx	lr

08011006 <__lo0bits>:
 8011006:	6803      	ldr	r3, [r0, #0]
 8011008:	4602      	mov	r2, r0
 801100a:	f013 0007 	ands.w	r0, r3, #7
 801100e:	d00b      	beq.n	8011028 <__lo0bits+0x22>
 8011010:	07d9      	lsls	r1, r3, #31
 8011012:	d421      	bmi.n	8011058 <__lo0bits+0x52>
 8011014:	0798      	lsls	r0, r3, #30
 8011016:	bf49      	itett	mi
 8011018:	085b      	lsrmi	r3, r3, #1
 801101a:	089b      	lsrpl	r3, r3, #2
 801101c:	2001      	movmi	r0, #1
 801101e:	6013      	strmi	r3, [r2, #0]
 8011020:	bf5c      	itt	pl
 8011022:	6013      	strpl	r3, [r2, #0]
 8011024:	2002      	movpl	r0, #2
 8011026:	4770      	bx	lr
 8011028:	b299      	uxth	r1, r3
 801102a:	b909      	cbnz	r1, 8011030 <__lo0bits+0x2a>
 801102c:	0c1b      	lsrs	r3, r3, #16
 801102e:	2010      	movs	r0, #16
 8011030:	b2d9      	uxtb	r1, r3
 8011032:	b909      	cbnz	r1, 8011038 <__lo0bits+0x32>
 8011034:	3008      	adds	r0, #8
 8011036:	0a1b      	lsrs	r3, r3, #8
 8011038:	0719      	lsls	r1, r3, #28
 801103a:	bf04      	itt	eq
 801103c:	091b      	lsreq	r3, r3, #4
 801103e:	3004      	addeq	r0, #4
 8011040:	0799      	lsls	r1, r3, #30
 8011042:	bf04      	itt	eq
 8011044:	089b      	lsreq	r3, r3, #2
 8011046:	3002      	addeq	r0, #2
 8011048:	07d9      	lsls	r1, r3, #31
 801104a:	d403      	bmi.n	8011054 <__lo0bits+0x4e>
 801104c:	085b      	lsrs	r3, r3, #1
 801104e:	f100 0001 	add.w	r0, r0, #1
 8011052:	d003      	beq.n	801105c <__lo0bits+0x56>
 8011054:	6013      	str	r3, [r2, #0]
 8011056:	4770      	bx	lr
 8011058:	2000      	movs	r0, #0
 801105a:	4770      	bx	lr
 801105c:	2020      	movs	r0, #32
 801105e:	4770      	bx	lr

08011060 <__i2b>:
 8011060:	b510      	push	{r4, lr}
 8011062:	460c      	mov	r4, r1
 8011064:	2101      	movs	r1, #1
 8011066:	f7ff febd 	bl	8010de4 <_Balloc>
 801106a:	4602      	mov	r2, r0
 801106c:	b928      	cbnz	r0, 801107a <__i2b+0x1a>
 801106e:	4b05      	ldr	r3, [pc, #20]	@ (8011084 <__i2b+0x24>)
 8011070:	4805      	ldr	r0, [pc, #20]	@ (8011088 <__i2b+0x28>)
 8011072:	f240 1145 	movw	r1, #325	@ 0x145
 8011076:	f7fe ffff 	bl	8010078 <__assert_func>
 801107a:	2301      	movs	r3, #1
 801107c:	6144      	str	r4, [r0, #20]
 801107e:	6103      	str	r3, [r0, #16]
 8011080:	bd10      	pop	{r4, pc}
 8011082:	bf00      	nop
 8011084:	080151f2 	.word	0x080151f2
 8011088:	08015203 	.word	0x08015203

0801108c <__multiply>:
 801108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011090:	4614      	mov	r4, r2
 8011092:	690a      	ldr	r2, [r1, #16]
 8011094:	6923      	ldr	r3, [r4, #16]
 8011096:	429a      	cmp	r2, r3
 8011098:	bfa8      	it	ge
 801109a:	4623      	movge	r3, r4
 801109c:	460f      	mov	r7, r1
 801109e:	bfa4      	itt	ge
 80110a0:	460c      	movge	r4, r1
 80110a2:	461f      	movge	r7, r3
 80110a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80110a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80110ac:	68a3      	ldr	r3, [r4, #8]
 80110ae:	6861      	ldr	r1, [r4, #4]
 80110b0:	eb0a 0609 	add.w	r6, sl, r9
 80110b4:	42b3      	cmp	r3, r6
 80110b6:	b085      	sub	sp, #20
 80110b8:	bfb8      	it	lt
 80110ba:	3101      	addlt	r1, #1
 80110bc:	f7ff fe92 	bl	8010de4 <_Balloc>
 80110c0:	b930      	cbnz	r0, 80110d0 <__multiply+0x44>
 80110c2:	4602      	mov	r2, r0
 80110c4:	4b44      	ldr	r3, [pc, #272]	@ (80111d8 <__multiply+0x14c>)
 80110c6:	4845      	ldr	r0, [pc, #276]	@ (80111dc <__multiply+0x150>)
 80110c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80110cc:	f7fe ffd4 	bl	8010078 <__assert_func>
 80110d0:	f100 0514 	add.w	r5, r0, #20
 80110d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80110d8:	462b      	mov	r3, r5
 80110da:	2200      	movs	r2, #0
 80110dc:	4543      	cmp	r3, r8
 80110de:	d321      	bcc.n	8011124 <__multiply+0x98>
 80110e0:	f107 0114 	add.w	r1, r7, #20
 80110e4:	f104 0214 	add.w	r2, r4, #20
 80110e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80110ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80110f0:	9302      	str	r3, [sp, #8]
 80110f2:	1b13      	subs	r3, r2, r4
 80110f4:	3b15      	subs	r3, #21
 80110f6:	f023 0303 	bic.w	r3, r3, #3
 80110fa:	3304      	adds	r3, #4
 80110fc:	f104 0715 	add.w	r7, r4, #21
 8011100:	42ba      	cmp	r2, r7
 8011102:	bf38      	it	cc
 8011104:	2304      	movcc	r3, #4
 8011106:	9301      	str	r3, [sp, #4]
 8011108:	9b02      	ldr	r3, [sp, #8]
 801110a:	9103      	str	r1, [sp, #12]
 801110c:	428b      	cmp	r3, r1
 801110e:	d80c      	bhi.n	801112a <__multiply+0x9e>
 8011110:	2e00      	cmp	r6, #0
 8011112:	dd03      	ble.n	801111c <__multiply+0x90>
 8011114:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011118:	2b00      	cmp	r3, #0
 801111a:	d05b      	beq.n	80111d4 <__multiply+0x148>
 801111c:	6106      	str	r6, [r0, #16]
 801111e:	b005      	add	sp, #20
 8011120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011124:	f843 2b04 	str.w	r2, [r3], #4
 8011128:	e7d8      	b.n	80110dc <__multiply+0x50>
 801112a:	f8b1 a000 	ldrh.w	sl, [r1]
 801112e:	f1ba 0f00 	cmp.w	sl, #0
 8011132:	d024      	beq.n	801117e <__multiply+0xf2>
 8011134:	f104 0e14 	add.w	lr, r4, #20
 8011138:	46a9      	mov	r9, r5
 801113a:	f04f 0c00 	mov.w	ip, #0
 801113e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011142:	f8d9 3000 	ldr.w	r3, [r9]
 8011146:	fa1f fb87 	uxth.w	fp, r7
 801114a:	b29b      	uxth	r3, r3
 801114c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011150:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011154:	f8d9 7000 	ldr.w	r7, [r9]
 8011158:	4463      	add	r3, ip
 801115a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801115e:	fb0a c70b 	mla	r7, sl, fp, ip
 8011162:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011166:	b29b      	uxth	r3, r3
 8011168:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801116c:	4572      	cmp	r2, lr
 801116e:	f849 3b04 	str.w	r3, [r9], #4
 8011172:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011176:	d8e2      	bhi.n	801113e <__multiply+0xb2>
 8011178:	9b01      	ldr	r3, [sp, #4]
 801117a:	f845 c003 	str.w	ip, [r5, r3]
 801117e:	9b03      	ldr	r3, [sp, #12]
 8011180:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011184:	3104      	adds	r1, #4
 8011186:	f1b9 0f00 	cmp.w	r9, #0
 801118a:	d021      	beq.n	80111d0 <__multiply+0x144>
 801118c:	682b      	ldr	r3, [r5, #0]
 801118e:	f104 0c14 	add.w	ip, r4, #20
 8011192:	46ae      	mov	lr, r5
 8011194:	f04f 0a00 	mov.w	sl, #0
 8011198:	f8bc b000 	ldrh.w	fp, [ip]
 801119c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80111a0:	fb09 770b 	mla	r7, r9, fp, r7
 80111a4:	4457      	add	r7, sl
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80111ac:	f84e 3b04 	str.w	r3, [lr], #4
 80111b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80111b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80111b8:	f8be 3000 	ldrh.w	r3, [lr]
 80111bc:	fb09 330a 	mla	r3, r9, sl, r3
 80111c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80111c4:	4562      	cmp	r2, ip
 80111c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80111ca:	d8e5      	bhi.n	8011198 <__multiply+0x10c>
 80111cc:	9f01      	ldr	r7, [sp, #4]
 80111ce:	51eb      	str	r3, [r5, r7]
 80111d0:	3504      	adds	r5, #4
 80111d2:	e799      	b.n	8011108 <__multiply+0x7c>
 80111d4:	3e01      	subs	r6, #1
 80111d6:	e79b      	b.n	8011110 <__multiply+0x84>
 80111d8:	080151f2 	.word	0x080151f2
 80111dc:	08015203 	.word	0x08015203

080111e0 <__pow5mult>:
 80111e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111e4:	4615      	mov	r5, r2
 80111e6:	f012 0203 	ands.w	r2, r2, #3
 80111ea:	4607      	mov	r7, r0
 80111ec:	460e      	mov	r6, r1
 80111ee:	d007      	beq.n	8011200 <__pow5mult+0x20>
 80111f0:	4c25      	ldr	r4, [pc, #148]	@ (8011288 <__pow5mult+0xa8>)
 80111f2:	3a01      	subs	r2, #1
 80111f4:	2300      	movs	r3, #0
 80111f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111fa:	f7ff fe55 	bl	8010ea8 <__multadd>
 80111fe:	4606      	mov	r6, r0
 8011200:	10ad      	asrs	r5, r5, #2
 8011202:	d03d      	beq.n	8011280 <__pow5mult+0xa0>
 8011204:	69fc      	ldr	r4, [r7, #28]
 8011206:	b97c      	cbnz	r4, 8011228 <__pow5mult+0x48>
 8011208:	2010      	movs	r0, #16
 801120a:	f7fd fd0f 	bl	800ec2c <malloc>
 801120e:	4602      	mov	r2, r0
 8011210:	61f8      	str	r0, [r7, #28]
 8011212:	b928      	cbnz	r0, 8011220 <__pow5mult+0x40>
 8011214:	4b1d      	ldr	r3, [pc, #116]	@ (801128c <__pow5mult+0xac>)
 8011216:	481e      	ldr	r0, [pc, #120]	@ (8011290 <__pow5mult+0xb0>)
 8011218:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801121c:	f7fe ff2c 	bl	8010078 <__assert_func>
 8011220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011224:	6004      	str	r4, [r0, #0]
 8011226:	60c4      	str	r4, [r0, #12]
 8011228:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801122c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011230:	b94c      	cbnz	r4, 8011246 <__pow5mult+0x66>
 8011232:	f240 2171 	movw	r1, #625	@ 0x271
 8011236:	4638      	mov	r0, r7
 8011238:	f7ff ff12 	bl	8011060 <__i2b>
 801123c:	2300      	movs	r3, #0
 801123e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011242:	4604      	mov	r4, r0
 8011244:	6003      	str	r3, [r0, #0]
 8011246:	f04f 0900 	mov.w	r9, #0
 801124a:	07eb      	lsls	r3, r5, #31
 801124c:	d50a      	bpl.n	8011264 <__pow5mult+0x84>
 801124e:	4631      	mov	r1, r6
 8011250:	4622      	mov	r2, r4
 8011252:	4638      	mov	r0, r7
 8011254:	f7ff ff1a 	bl	801108c <__multiply>
 8011258:	4631      	mov	r1, r6
 801125a:	4680      	mov	r8, r0
 801125c:	4638      	mov	r0, r7
 801125e:	f7ff fe01 	bl	8010e64 <_Bfree>
 8011262:	4646      	mov	r6, r8
 8011264:	106d      	asrs	r5, r5, #1
 8011266:	d00b      	beq.n	8011280 <__pow5mult+0xa0>
 8011268:	6820      	ldr	r0, [r4, #0]
 801126a:	b938      	cbnz	r0, 801127c <__pow5mult+0x9c>
 801126c:	4622      	mov	r2, r4
 801126e:	4621      	mov	r1, r4
 8011270:	4638      	mov	r0, r7
 8011272:	f7ff ff0b 	bl	801108c <__multiply>
 8011276:	6020      	str	r0, [r4, #0]
 8011278:	f8c0 9000 	str.w	r9, [r0]
 801127c:	4604      	mov	r4, r0
 801127e:	e7e4      	b.n	801124a <__pow5mult+0x6a>
 8011280:	4630      	mov	r0, r6
 8011282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011286:	bf00      	nop
 8011288:	0801525c 	.word	0x0801525c
 801128c:	080150e0 	.word	0x080150e0
 8011290:	08015203 	.word	0x08015203

08011294 <__lshift>:
 8011294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011298:	460c      	mov	r4, r1
 801129a:	6849      	ldr	r1, [r1, #4]
 801129c:	6923      	ldr	r3, [r4, #16]
 801129e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80112a2:	68a3      	ldr	r3, [r4, #8]
 80112a4:	4607      	mov	r7, r0
 80112a6:	4691      	mov	r9, r2
 80112a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80112ac:	f108 0601 	add.w	r6, r8, #1
 80112b0:	42b3      	cmp	r3, r6
 80112b2:	db0b      	blt.n	80112cc <__lshift+0x38>
 80112b4:	4638      	mov	r0, r7
 80112b6:	f7ff fd95 	bl	8010de4 <_Balloc>
 80112ba:	4605      	mov	r5, r0
 80112bc:	b948      	cbnz	r0, 80112d2 <__lshift+0x3e>
 80112be:	4602      	mov	r2, r0
 80112c0:	4b28      	ldr	r3, [pc, #160]	@ (8011364 <__lshift+0xd0>)
 80112c2:	4829      	ldr	r0, [pc, #164]	@ (8011368 <__lshift+0xd4>)
 80112c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80112c8:	f7fe fed6 	bl	8010078 <__assert_func>
 80112cc:	3101      	adds	r1, #1
 80112ce:	005b      	lsls	r3, r3, #1
 80112d0:	e7ee      	b.n	80112b0 <__lshift+0x1c>
 80112d2:	2300      	movs	r3, #0
 80112d4:	f100 0114 	add.w	r1, r0, #20
 80112d8:	f100 0210 	add.w	r2, r0, #16
 80112dc:	4618      	mov	r0, r3
 80112de:	4553      	cmp	r3, sl
 80112e0:	db33      	blt.n	801134a <__lshift+0xb6>
 80112e2:	6920      	ldr	r0, [r4, #16]
 80112e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112e8:	f104 0314 	add.w	r3, r4, #20
 80112ec:	f019 091f 	ands.w	r9, r9, #31
 80112f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80112f8:	d02b      	beq.n	8011352 <__lshift+0xbe>
 80112fa:	f1c9 0e20 	rsb	lr, r9, #32
 80112fe:	468a      	mov	sl, r1
 8011300:	2200      	movs	r2, #0
 8011302:	6818      	ldr	r0, [r3, #0]
 8011304:	fa00 f009 	lsl.w	r0, r0, r9
 8011308:	4310      	orrs	r0, r2
 801130a:	f84a 0b04 	str.w	r0, [sl], #4
 801130e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011312:	459c      	cmp	ip, r3
 8011314:	fa22 f20e 	lsr.w	r2, r2, lr
 8011318:	d8f3      	bhi.n	8011302 <__lshift+0x6e>
 801131a:	ebac 0304 	sub.w	r3, ip, r4
 801131e:	3b15      	subs	r3, #21
 8011320:	f023 0303 	bic.w	r3, r3, #3
 8011324:	3304      	adds	r3, #4
 8011326:	f104 0015 	add.w	r0, r4, #21
 801132a:	4584      	cmp	ip, r0
 801132c:	bf38      	it	cc
 801132e:	2304      	movcc	r3, #4
 8011330:	50ca      	str	r2, [r1, r3]
 8011332:	b10a      	cbz	r2, 8011338 <__lshift+0xa4>
 8011334:	f108 0602 	add.w	r6, r8, #2
 8011338:	3e01      	subs	r6, #1
 801133a:	4638      	mov	r0, r7
 801133c:	612e      	str	r6, [r5, #16]
 801133e:	4621      	mov	r1, r4
 8011340:	f7ff fd90 	bl	8010e64 <_Bfree>
 8011344:	4628      	mov	r0, r5
 8011346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801134a:	f842 0f04 	str.w	r0, [r2, #4]!
 801134e:	3301      	adds	r3, #1
 8011350:	e7c5      	b.n	80112de <__lshift+0x4a>
 8011352:	3904      	subs	r1, #4
 8011354:	f853 2b04 	ldr.w	r2, [r3], #4
 8011358:	f841 2f04 	str.w	r2, [r1, #4]!
 801135c:	459c      	cmp	ip, r3
 801135e:	d8f9      	bhi.n	8011354 <__lshift+0xc0>
 8011360:	e7ea      	b.n	8011338 <__lshift+0xa4>
 8011362:	bf00      	nop
 8011364:	080151f2 	.word	0x080151f2
 8011368:	08015203 	.word	0x08015203

0801136c <__mcmp>:
 801136c:	690a      	ldr	r2, [r1, #16]
 801136e:	4603      	mov	r3, r0
 8011370:	6900      	ldr	r0, [r0, #16]
 8011372:	1a80      	subs	r0, r0, r2
 8011374:	b530      	push	{r4, r5, lr}
 8011376:	d10e      	bne.n	8011396 <__mcmp+0x2a>
 8011378:	3314      	adds	r3, #20
 801137a:	3114      	adds	r1, #20
 801137c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011380:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011384:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011388:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801138c:	4295      	cmp	r5, r2
 801138e:	d003      	beq.n	8011398 <__mcmp+0x2c>
 8011390:	d205      	bcs.n	801139e <__mcmp+0x32>
 8011392:	f04f 30ff 	mov.w	r0, #4294967295
 8011396:	bd30      	pop	{r4, r5, pc}
 8011398:	42a3      	cmp	r3, r4
 801139a:	d3f3      	bcc.n	8011384 <__mcmp+0x18>
 801139c:	e7fb      	b.n	8011396 <__mcmp+0x2a>
 801139e:	2001      	movs	r0, #1
 80113a0:	e7f9      	b.n	8011396 <__mcmp+0x2a>
	...

080113a4 <__mdiff>:
 80113a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a8:	4689      	mov	r9, r1
 80113aa:	4606      	mov	r6, r0
 80113ac:	4611      	mov	r1, r2
 80113ae:	4648      	mov	r0, r9
 80113b0:	4614      	mov	r4, r2
 80113b2:	f7ff ffdb 	bl	801136c <__mcmp>
 80113b6:	1e05      	subs	r5, r0, #0
 80113b8:	d112      	bne.n	80113e0 <__mdiff+0x3c>
 80113ba:	4629      	mov	r1, r5
 80113bc:	4630      	mov	r0, r6
 80113be:	f7ff fd11 	bl	8010de4 <_Balloc>
 80113c2:	4602      	mov	r2, r0
 80113c4:	b928      	cbnz	r0, 80113d2 <__mdiff+0x2e>
 80113c6:	4b3f      	ldr	r3, [pc, #252]	@ (80114c4 <__mdiff+0x120>)
 80113c8:	f240 2137 	movw	r1, #567	@ 0x237
 80113cc:	483e      	ldr	r0, [pc, #248]	@ (80114c8 <__mdiff+0x124>)
 80113ce:	f7fe fe53 	bl	8010078 <__assert_func>
 80113d2:	2301      	movs	r3, #1
 80113d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80113d8:	4610      	mov	r0, r2
 80113da:	b003      	add	sp, #12
 80113dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113e0:	bfbc      	itt	lt
 80113e2:	464b      	movlt	r3, r9
 80113e4:	46a1      	movlt	r9, r4
 80113e6:	4630      	mov	r0, r6
 80113e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80113ec:	bfba      	itte	lt
 80113ee:	461c      	movlt	r4, r3
 80113f0:	2501      	movlt	r5, #1
 80113f2:	2500      	movge	r5, #0
 80113f4:	f7ff fcf6 	bl	8010de4 <_Balloc>
 80113f8:	4602      	mov	r2, r0
 80113fa:	b918      	cbnz	r0, 8011404 <__mdiff+0x60>
 80113fc:	4b31      	ldr	r3, [pc, #196]	@ (80114c4 <__mdiff+0x120>)
 80113fe:	f240 2145 	movw	r1, #581	@ 0x245
 8011402:	e7e3      	b.n	80113cc <__mdiff+0x28>
 8011404:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011408:	6926      	ldr	r6, [r4, #16]
 801140a:	60c5      	str	r5, [r0, #12]
 801140c:	f109 0310 	add.w	r3, r9, #16
 8011410:	f109 0514 	add.w	r5, r9, #20
 8011414:	f104 0e14 	add.w	lr, r4, #20
 8011418:	f100 0b14 	add.w	fp, r0, #20
 801141c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011420:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011424:	9301      	str	r3, [sp, #4]
 8011426:	46d9      	mov	r9, fp
 8011428:	f04f 0c00 	mov.w	ip, #0
 801142c:	9b01      	ldr	r3, [sp, #4]
 801142e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011432:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011436:	9301      	str	r3, [sp, #4]
 8011438:	fa1f f38a 	uxth.w	r3, sl
 801143c:	4619      	mov	r1, r3
 801143e:	b283      	uxth	r3, r0
 8011440:	1acb      	subs	r3, r1, r3
 8011442:	0c00      	lsrs	r0, r0, #16
 8011444:	4463      	add	r3, ip
 8011446:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801144a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801144e:	b29b      	uxth	r3, r3
 8011450:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011454:	4576      	cmp	r6, lr
 8011456:	f849 3b04 	str.w	r3, [r9], #4
 801145a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801145e:	d8e5      	bhi.n	801142c <__mdiff+0x88>
 8011460:	1b33      	subs	r3, r6, r4
 8011462:	3b15      	subs	r3, #21
 8011464:	f023 0303 	bic.w	r3, r3, #3
 8011468:	3415      	adds	r4, #21
 801146a:	3304      	adds	r3, #4
 801146c:	42a6      	cmp	r6, r4
 801146e:	bf38      	it	cc
 8011470:	2304      	movcc	r3, #4
 8011472:	441d      	add	r5, r3
 8011474:	445b      	add	r3, fp
 8011476:	461e      	mov	r6, r3
 8011478:	462c      	mov	r4, r5
 801147a:	4544      	cmp	r4, r8
 801147c:	d30e      	bcc.n	801149c <__mdiff+0xf8>
 801147e:	f108 0103 	add.w	r1, r8, #3
 8011482:	1b49      	subs	r1, r1, r5
 8011484:	f021 0103 	bic.w	r1, r1, #3
 8011488:	3d03      	subs	r5, #3
 801148a:	45a8      	cmp	r8, r5
 801148c:	bf38      	it	cc
 801148e:	2100      	movcc	r1, #0
 8011490:	440b      	add	r3, r1
 8011492:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011496:	b191      	cbz	r1, 80114be <__mdiff+0x11a>
 8011498:	6117      	str	r7, [r2, #16]
 801149a:	e79d      	b.n	80113d8 <__mdiff+0x34>
 801149c:	f854 1b04 	ldr.w	r1, [r4], #4
 80114a0:	46e6      	mov	lr, ip
 80114a2:	0c08      	lsrs	r0, r1, #16
 80114a4:	fa1c fc81 	uxtah	ip, ip, r1
 80114a8:	4471      	add	r1, lr
 80114aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80114ae:	b289      	uxth	r1, r1
 80114b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80114b4:	f846 1b04 	str.w	r1, [r6], #4
 80114b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80114bc:	e7dd      	b.n	801147a <__mdiff+0xd6>
 80114be:	3f01      	subs	r7, #1
 80114c0:	e7e7      	b.n	8011492 <__mdiff+0xee>
 80114c2:	bf00      	nop
 80114c4:	080151f2 	.word	0x080151f2
 80114c8:	08015203 	.word	0x08015203

080114cc <__ulp>:
 80114cc:	b082      	sub	sp, #8
 80114ce:	ed8d 0b00 	vstr	d0, [sp]
 80114d2:	9a01      	ldr	r2, [sp, #4]
 80114d4:	4b0f      	ldr	r3, [pc, #60]	@ (8011514 <__ulp+0x48>)
 80114d6:	4013      	ands	r3, r2
 80114d8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80114dc:	2b00      	cmp	r3, #0
 80114de:	dc08      	bgt.n	80114f2 <__ulp+0x26>
 80114e0:	425b      	negs	r3, r3
 80114e2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80114e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80114ea:	da04      	bge.n	80114f6 <__ulp+0x2a>
 80114ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80114f0:	4113      	asrs	r3, r2
 80114f2:	2200      	movs	r2, #0
 80114f4:	e008      	b.n	8011508 <__ulp+0x3c>
 80114f6:	f1a2 0314 	sub.w	r3, r2, #20
 80114fa:	2b1e      	cmp	r3, #30
 80114fc:	bfda      	itte	le
 80114fe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011502:	40da      	lsrle	r2, r3
 8011504:	2201      	movgt	r2, #1
 8011506:	2300      	movs	r3, #0
 8011508:	4619      	mov	r1, r3
 801150a:	4610      	mov	r0, r2
 801150c:	ec41 0b10 	vmov	d0, r0, r1
 8011510:	b002      	add	sp, #8
 8011512:	4770      	bx	lr
 8011514:	7ff00000 	.word	0x7ff00000

08011518 <__b2d>:
 8011518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801151c:	6906      	ldr	r6, [r0, #16]
 801151e:	f100 0814 	add.w	r8, r0, #20
 8011522:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011526:	1f37      	subs	r7, r6, #4
 8011528:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801152c:	4610      	mov	r0, r2
 801152e:	f7ff fd4b 	bl	8010fc8 <__hi0bits>
 8011532:	f1c0 0320 	rsb	r3, r0, #32
 8011536:	280a      	cmp	r0, #10
 8011538:	600b      	str	r3, [r1, #0]
 801153a:	491b      	ldr	r1, [pc, #108]	@ (80115a8 <__b2d+0x90>)
 801153c:	dc15      	bgt.n	801156a <__b2d+0x52>
 801153e:	f1c0 0c0b 	rsb	ip, r0, #11
 8011542:	fa22 f30c 	lsr.w	r3, r2, ip
 8011546:	45b8      	cmp	r8, r7
 8011548:	ea43 0501 	orr.w	r5, r3, r1
 801154c:	bf34      	ite	cc
 801154e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011552:	2300      	movcs	r3, #0
 8011554:	3015      	adds	r0, #21
 8011556:	fa02 f000 	lsl.w	r0, r2, r0
 801155a:	fa23 f30c 	lsr.w	r3, r3, ip
 801155e:	4303      	orrs	r3, r0
 8011560:	461c      	mov	r4, r3
 8011562:	ec45 4b10 	vmov	d0, r4, r5
 8011566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801156a:	45b8      	cmp	r8, r7
 801156c:	bf3a      	itte	cc
 801156e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011572:	f1a6 0708 	subcc.w	r7, r6, #8
 8011576:	2300      	movcs	r3, #0
 8011578:	380b      	subs	r0, #11
 801157a:	d012      	beq.n	80115a2 <__b2d+0x8a>
 801157c:	f1c0 0120 	rsb	r1, r0, #32
 8011580:	fa23 f401 	lsr.w	r4, r3, r1
 8011584:	4082      	lsls	r2, r0
 8011586:	4322      	orrs	r2, r4
 8011588:	4547      	cmp	r7, r8
 801158a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801158e:	bf8c      	ite	hi
 8011590:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011594:	2200      	movls	r2, #0
 8011596:	4083      	lsls	r3, r0
 8011598:	40ca      	lsrs	r2, r1
 801159a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801159e:	4313      	orrs	r3, r2
 80115a0:	e7de      	b.n	8011560 <__b2d+0x48>
 80115a2:	ea42 0501 	orr.w	r5, r2, r1
 80115a6:	e7db      	b.n	8011560 <__b2d+0x48>
 80115a8:	3ff00000 	.word	0x3ff00000

080115ac <__d2b>:
 80115ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80115b0:	460f      	mov	r7, r1
 80115b2:	2101      	movs	r1, #1
 80115b4:	ec59 8b10 	vmov	r8, r9, d0
 80115b8:	4616      	mov	r6, r2
 80115ba:	f7ff fc13 	bl	8010de4 <_Balloc>
 80115be:	4604      	mov	r4, r0
 80115c0:	b930      	cbnz	r0, 80115d0 <__d2b+0x24>
 80115c2:	4602      	mov	r2, r0
 80115c4:	4b23      	ldr	r3, [pc, #140]	@ (8011654 <__d2b+0xa8>)
 80115c6:	4824      	ldr	r0, [pc, #144]	@ (8011658 <__d2b+0xac>)
 80115c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80115cc:	f7fe fd54 	bl	8010078 <__assert_func>
 80115d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80115d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80115d8:	b10d      	cbz	r5, 80115de <__d2b+0x32>
 80115da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80115de:	9301      	str	r3, [sp, #4]
 80115e0:	f1b8 0300 	subs.w	r3, r8, #0
 80115e4:	d023      	beq.n	801162e <__d2b+0x82>
 80115e6:	4668      	mov	r0, sp
 80115e8:	9300      	str	r3, [sp, #0]
 80115ea:	f7ff fd0c 	bl	8011006 <__lo0bits>
 80115ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80115f2:	b1d0      	cbz	r0, 801162a <__d2b+0x7e>
 80115f4:	f1c0 0320 	rsb	r3, r0, #32
 80115f8:	fa02 f303 	lsl.w	r3, r2, r3
 80115fc:	430b      	orrs	r3, r1
 80115fe:	40c2      	lsrs	r2, r0
 8011600:	6163      	str	r3, [r4, #20]
 8011602:	9201      	str	r2, [sp, #4]
 8011604:	9b01      	ldr	r3, [sp, #4]
 8011606:	61a3      	str	r3, [r4, #24]
 8011608:	2b00      	cmp	r3, #0
 801160a:	bf0c      	ite	eq
 801160c:	2201      	moveq	r2, #1
 801160e:	2202      	movne	r2, #2
 8011610:	6122      	str	r2, [r4, #16]
 8011612:	b1a5      	cbz	r5, 801163e <__d2b+0x92>
 8011614:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011618:	4405      	add	r5, r0
 801161a:	603d      	str	r5, [r7, #0]
 801161c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011620:	6030      	str	r0, [r6, #0]
 8011622:	4620      	mov	r0, r4
 8011624:	b003      	add	sp, #12
 8011626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801162a:	6161      	str	r1, [r4, #20]
 801162c:	e7ea      	b.n	8011604 <__d2b+0x58>
 801162e:	a801      	add	r0, sp, #4
 8011630:	f7ff fce9 	bl	8011006 <__lo0bits>
 8011634:	9b01      	ldr	r3, [sp, #4]
 8011636:	6163      	str	r3, [r4, #20]
 8011638:	3020      	adds	r0, #32
 801163a:	2201      	movs	r2, #1
 801163c:	e7e8      	b.n	8011610 <__d2b+0x64>
 801163e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011642:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011646:	6038      	str	r0, [r7, #0]
 8011648:	6918      	ldr	r0, [r3, #16]
 801164a:	f7ff fcbd 	bl	8010fc8 <__hi0bits>
 801164e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011652:	e7e5      	b.n	8011620 <__d2b+0x74>
 8011654:	080151f2 	.word	0x080151f2
 8011658:	08015203 	.word	0x08015203

0801165c <__ratio>:
 801165c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011660:	b085      	sub	sp, #20
 8011662:	e9cd 1000 	strd	r1, r0, [sp]
 8011666:	a902      	add	r1, sp, #8
 8011668:	f7ff ff56 	bl	8011518 <__b2d>
 801166c:	9800      	ldr	r0, [sp, #0]
 801166e:	a903      	add	r1, sp, #12
 8011670:	ec55 4b10 	vmov	r4, r5, d0
 8011674:	f7ff ff50 	bl	8011518 <__b2d>
 8011678:	9b01      	ldr	r3, [sp, #4]
 801167a:	6919      	ldr	r1, [r3, #16]
 801167c:	9b00      	ldr	r3, [sp, #0]
 801167e:	691b      	ldr	r3, [r3, #16]
 8011680:	1ac9      	subs	r1, r1, r3
 8011682:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011686:	1a9b      	subs	r3, r3, r2
 8011688:	ec5b ab10 	vmov	sl, fp, d0
 801168c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011690:	2b00      	cmp	r3, #0
 8011692:	bfce      	itee	gt
 8011694:	462a      	movgt	r2, r5
 8011696:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801169a:	465a      	movle	r2, fp
 801169c:	462f      	mov	r7, r5
 801169e:	46d9      	mov	r9, fp
 80116a0:	bfcc      	ite	gt
 80116a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80116a6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80116aa:	464b      	mov	r3, r9
 80116ac:	4652      	mov	r2, sl
 80116ae:	4620      	mov	r0, r4
 80116b0:	4639      	mov	r1, r7
 80116b2:	f7ef f8db 	bl	800086c <__aeabi_ddiv>
 80116b6:	ec41 0b10 	vmov	d0, r0, r1
 80116ba:	b005      	add	sp, #20
 80116bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080116c0 <__copybits>:
 80116c0:	3901      	subs	r1, #1
 80116c2:	b570      	push	{r4, r5, r6, lr}
 80116c4:	1149      	asrs	r1, r1, #5
 80116c6:	6914      	ldr	r4, [r2, #16]
 80116c8:	3101      	adds	r1, #1
 80116ca:	f102 0314 	add.w	r3, r2, #20
 80116ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80116d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80116d6:	1f05      	subs	r5, r0, #4
 80116d8:	42a3      	cmp	r3, r4
 80116da:	d30c      	bcc.n	80116f6 <__copybits+0x36>
 80116dc:	1aa3      	subs	r3, r4, r2
 80116de:	3b11      	subs	r3, #17
 80116e0:	f023 0303 	bic.w	r3, r3, #3
 80116e4:	3211      	adds	r2, #17
 80116e6:	42a2      	cmp	r2, r4
 80116e8:	bf88      	it	hi
 80116ea:	2300      	movhi	r3, #0
 80116ec:	4418      	add	r0, r3
 80116ee:	2300      	movs	r3, #0
 80116f0:	4288      	cmp	r0, r1
 80116f2:	d305      	bcc.n	8011700 <__copybits+0x40>
 80116f4:	bd70      	pop	{r4, r5, r6, pc}
 80116f6:	f853 6b04 	ldr.w	r6, [r3], #4
 80116fa:	f845 6f04 	str.w	r6, [r5, #4]!
 80116fe:	e7eb      	b.n	80116d8 <__copybits+0x18>
 8011700:	f840 3b04 	str.w	r3, [r0], #4
 8011704:	e7f4      	b.n	80116f0 <__copybits+0x30>

08011706 <__any_on>:
 8011706:	f100 0214 	add.w	r2, r0, #20
 801170a:	6900      	ldr	r0, [r0, #16]
 801170c:	114b      	asrs	r3, r1, #5
 801170e:	4298      	cmp	r0, r3
 8011710:	b510      	push	{r4, lr}
 8011712:	db11      	blt.n	8011738 <__any_on+0x32>
 8011714:	dd0a      	ble.n	801172c <__any_on+0x26>
 8011716:	f011 011f 	ands.w	r1, r1, #31
 801171a:	d007      	beq.n	801172c <__any_on+0x26>
 801171c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011720:	fa24 f001 	lsr.w	r0, r4, r1
 8011724:	fa00 f101 	lsl.w	r1, r0, r1
 8011728:	428c      	cmp	r4, r1
 801172a:	d10b      	bne.n	8011744 <__any_on+0x3e>
 801172c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011730:	4293      	cmp	r3, r2
 8011732:	d803      	bhi.n	801173c <__any_on+0x36>
 8011734:	2000      	movs	r0, #0
 8011736:	bd10      	pop	{r4, pc}
 8011738:	4603      	mov	r3, r0
 801173a:	e7f7      	b.n	801172c <__any_on+0x26>
 801173c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011740:	2900      	cmp	r1, #0
 8011742:	d0f5      	beq.n	8011730 <__any_on+0x2a>
 8011744:	2001      	movs	r0, #1
 8011746:	e7f6      	b.n	8011736 <__any_on+0x30>

08011748 <sulp>:
 8011748:	b570      	push	{r4, r5, r6, lr}
 801174a:	4604      	mov	r4, r0
 801174c:	460d      	mov	r5, r1
 801174e:	ec45 4b10 	vmov	d0, r4, r5
 8011752:	4616      	mov	r6, r2
 8011754:	f7ff feba 	bl	80114cc <__ulp>
 8011758:	ec51 0b10 	vmov	r0, r1, d0
 801175c:	b17e      	cbz	r6, 801177e <sulp+0x36>
 801175e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011762:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011766:	2b00      	cmp	r3, #0
 8011768:	dd09      	ble.n	801177e <sulp+0x36>
 801176a:	051b      	lsls	r3, r3, #20
 801176c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011770:	2400      	movs	r4, #0
 8011772:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011776:	4622      	mov	r2, r4
 8011778:	462b      	mov	r3, r5
 801177a:	f7ee ff4d 	bl	8000618 <__aeabi_dmul>
 801177e:	ec41 0b10 	vmov	d0, r0, r1
 8011782:	bd70      	pop	{r4, r5, r6, pc}
 8011784:	0000      	movs	r0, r0
	...

08011788 <_strtod_l>:
 8011788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801178c:	b09f      	sub	sp, #124	@ 0x7c
 801178e:	460c      	mov	r4, r1
 8011790:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011792:	2200      	movs	r2, #0
 8011794:	921a      	str	r2, [sp, #104]	@ 0x68
 8011796:	9005      	str	r0, [sp, #20]
 8011798:	f04f 0a00 	mov.w	sl, #0
 801179c:	f04f 0b00 	mov.w	fp, #0
 80117a0:	460a      	mov	r2, r1
 80117a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80117a4:	7811      	ldrb	r1, [r2, #0]
 80117a6:	292b      	cmp	r1, #43	@ 0x2b
 80117a8:	d04a      	beq.n	8011840 <_strtod_l+0xb8>
 80117aa:	d838      	bhi.n	801181e <_strtod_l+0x96>
 80117ac:	290d      	cmp	r1, #13
 80117ae:	d832      	bhi.n	8011816 <_strtod_l+0x8e>
 80117b0:	2908      	cmp	r1, #8
 80117b2:	d832      	bhi.n	801181a <_strtod_l+0x92>
 80117b4:	2900      	cmp	r1, #0
 80117b6:	d03b      	beq.n	8011830 <_strtod_l+0xa8>
 80117b8:	2200      	movs	r2, #0
 80117ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 80117bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80117be:	782a      	ldrb	r2, [r5, #0]
 80117c0:	2a30      	cmp	r2, #48	@ 0x30
 80117c2:	f040 80b3 	bne.w	801192c <_strtod_l+0x1a4>
 80117c6:	786a      	ldrb	r2, [r5, #1]
 80117c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80117cc:	2a58      	cmp	r2, #88	@ 0x58
 80117ce:	d16e      	bne.n	80118ae <_strtod_l+0x126>
 80117d0:	9302      	str	r3, [sp, #8]
 80117d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80117d4:	9301      	str	r3, [sp, #4]
 80117d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80117d8:	9300      	str	r3, [sp, #0]
 80117da:	4a8e      	ldr	r2, [pc, #568]	@ (8011a14 <_strtod_l+0x28c>)
 80117dc:	9805      	ldr	r0, [sp, #20]
 80117de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80117e0:	a919      	add	r1, sp, #100	@ 0x64
 80117e2:	f001 fc7f 	bl	80130e4 <__gethex>
 80117e6:	f010 060f 	ands.w	r6, r0, #15
 80117ea:	4604      	mov	r4, r0
 80117ec:	d005      	beq.n	80117fa <_strtod_l+0x72>
 80117ee:	2e06      	cmp	r6, #6
 80117f0:	d128      	bne.n	8011844 <_strtod_l+0xbc>
 80117f2:	3501      	adds	r5, #1
 80117f4:	2300      	movs	r3, #0
 80117f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80117f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80117fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	f040 858e 	bne.w	801231e <_strtod_l+0xb96>
 8011802:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011804:	b1cb      	cbz	r3, 801183a <_strtod_l+0xb2>
 8011806:	4652      	mov	r2, sl
 8011808:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801180c:	ec43 2b10 	vmov	d0, r2, r3
 8011810:	b01f      	add	sp, #124	@ 0x7c
 8011812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011816:	2920      	cmp	r1, #32
 8011818:	d1ce      	bne.n	80117b8 <_strtod_l+0x30>
 801181a:	3201      	adds	r2, #1
 801181c:	e7c1      	b.n	80117a2 <_strtod_l+0x1a>
 801181e:	292d      	cmp	r1, #45	@ 0x2d
 8011820:	d1ca      	bne.n	80117b8 <_strtod_l+0x30>
 8011822:	2101      	movs	r1, #1
 8011824:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011826:	1c51      	adds	r1, r2, #1
 8011828:	9119      	str	r1, [sp, #100]	@ 0x64
 801182a:	7852      	ldrb	r2, [r2, #1]
 801182c:	2a00      	cmp	r2, #0
 801182e:	d1c5      	bne.n	80117bc <_strtod_l+0x34>
 8011830:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011832:	9419      	str	r4, [sp, #100]	@ 0x64
 8011834:	2b00      	cmp	r3, #0
 8011836:	f040 8570 	bne.w	801231a <_strtod_l+0xb92>
 801183a:	4652      	mov	r2, sl
 801183c:	465b      	mov	r3, fp
 801183e:	e7e5      	b.n	801180c <_strtod_l+0x84>
 8011840:	2100      	movs	r1, #0
 8011842:	e7ef      	b.n	8011824 <_strtod_l+0x9c>
 8011844:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011846:	b13a      	cbz	r2, 8011858 <_strtod_l+0xd0>
 8011848:	2135      	movs	r1, #53	@ 0x35
 801184a:	a81c      	add	r0, sp, #112	@ 0x70
 801184c:	f7ff ff38 	bl	80116c0 <__copybits>
 8011850:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011852:	9805      	ldr	r0, [sp, #20]
 8011854:	f7ff fb06 	bl	8010e64 <_Bfree>
 8011858:	3e01      	subs	r6, #1
 801185a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801185c:	2e04      	cmp	r6, #4
 801185e:	d806      	bhi.n	801186e <_strtod_l+0xe6>
 8011860:	e8df f006 	tbb	[pc, r6]
 8011864:	201d0314 	.word	0x201d0314
 8011868:	14          	.byte	0x14
 8011869:	00          	.byte	0x00
 801186a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801186e:	05e1      	lsls	r1, r4, #23
 8011870:	bf48      	it	mi
 8011872:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011876:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801187a:	0d1b      	lsrs	r3, r3, #20
 801187c:	051b      	lsls	r3, r3, #20
 801187e:	2b00      	cmp	r3, #0
 8011880:	d1bb      	bne.n	80117fa <_strtod_l+0x72>
 8011882:	f7fe fbb7 	bl	800fff4 <__errno>
 8011886:	2322      	movs	r3, #34	@ 0x22
 8011888:	6003      	str	r3, [r0, #0]
 801188a:	e7b6      	b.n	80117fa <_strtod_l+0x72>
 801188c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011890:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011894:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011898:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801189c:	e7e7      	b.n	801186e <_strtod_l+0xe6>
 801189e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8011a1c <_strtod_l+0x294>
 80118a2:	e7e4      	b.n	801186e <_strtod_l+0xe6>
 80118a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80118a8:	f04f 3aff 	mov.w	sl, #4294967295
 80118ac:	e7df      	b.n	801186e <_strtod_l+0xe6>
 80118ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80118b0:	1c5a      	adds	r2, r3, #1
 80118b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80118b4:	785b      	ldrb	r3, [r3, #1]
 80118b6:	2b30      	cmp	r3, #48	@ 0x30
 80118b8:	d0f9      	beq.n	80118ae <_strtod_l+0x126>
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d09d      	beq.n	80117fa <_strtod_l+0x72>
 80118be:	2301      	movs	r3, #1
 80118c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80118c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80118c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80118c6:	2300      	movs	r3, #0
 80118c8:	9308      	str	r3, [sp, #32]
 80118ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80118cc:	461f      	mov	r7, r3
 80118ce:	220a      	movs	r2, #10
 80118d0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80118d2:	7805      	ldrb	r5, [r0, #0]
 80118d4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80118d8:	b2d9      	uxtb	r1, r3
 80118da:	2909      	cmp	r1, #9
 80118dc:	d928      	bls.n	8011930 <_strtod_l+0x1a8>
 80118de:	494e      	ldr	r1, [pc, #312]	@ (8011a18 <_strtod_l+0x290>)
 80118e0:	2201      	movs	r2, #1
 80118e2:	f7fe faab 	bl	800fe3c <strncmp>
 80118e6:	2800      	cmp	r0, #0
 80118e8:	d032      	beq.n	8011950 <_strtod_l+0x1c8>
 80118ea:	2000      	movs	r0, #0
 80118ec:	462a      	mov	r2, r5
 80118ee:	4681      	mov	r9, r0
 80118f0:	463d      	mov	r5, r7
 80118f2:	4603      	mov	r3, r0
 80118f4:	2a65      	cmp	r2, #101	@ 0x65
 80118f6:	d001      	beq.n	80118fc <_strtod_l+0x174>
 80118f8:	2a45      	cmp	r2, #69	@ 0x45
 80118fa:	d114      	bne.n	8011926 <_strtod_l+0x19e>
 80118fc:	b91d      	cbnz	r5, 8011906 <_strtod_l+0x17e>
 80118fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011900:	4302      	orrs	r2, r0
 8011902:	d095      	beq.n	8011830 <_strtod_l+0xa8>
 8011904:	2500      	movs	r5, #0
 8011906:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011908:	1c62      	adds	r2, r4, #1
 801190a:	9219      	str	r2, [sp, #100]	@ 0x64
 801190c:	7862      	ldrb	r2, [r4, #1]
 801190e:	2a2b      	cmp	r2, #43	@ 0x2b
 8011910:	d077      	beq.n	8011a02 <_strtod_l+0x27a>
 8011912:	2a2d      	cmp	r2, #45	@ 0x2d
 8011914:	d07b      	beq.n	8011a0e <_strtod_l+0x286>
 8011916:	f04f 0c00 	mov.w	ip, #0
 801191a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801191e:	2909      	cmp	r1, #9
 8011920:	f240 8082 	bls.w	8011a28 <_strtod_l+0x2a0>
 8011924:	9419      	str	r4, [sp, #100]	@ 0x64
 8011926:	f04f 0800 	mov.w	r8, #0
 801192a:	e0a2      	b.n	8011a72 <_strtod_l+0x2ea>
 801192c:	2300      	movs	r3, #0
 801192e:	e7c7      	b.n	80118c0 <_strtod_l+0x138>
 8011930:	2f08      	cmp	r7, #8
 8011932:	bfd5      	itete	le
 8011934:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8011936:	9908      	ldrgt	r1, [sp, #32]
 8011938:	fb02 3301 	mlale	r3, r2, r1, r3
 801193c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011940:	f100 0001 	add.w	r0, r0, #1
 8011944:	bfd4      	ite	le
 8011946:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011948:	9308      	strgt	r3, [sp, #32]
 801194a:	3701      	adds	r7, #1
 801194c:	9019      	str	r0, [sp, #100]	@ 0x64
 801194e:	e7bf      	b.n	80118d0 <_strtod_l+0x148>
 8011950:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011952:	1c5a      	adds	r2, r3, #1
 8011954:	9219      	str	r2, [sp, #100]	@ 0x64
 8011956:	785a      	ldrb	r2, [r3, #1]
 8011958:	b37f      	cbz	r7, 80119ba <_strtod_l+0x232>
 801195a:	4681      	mov	r9, r0
 801195c:	463d      	mov	r5, r7
 801195e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011962:	2b09      	cmp	r3, #9
 8011964:	d912      	bls.n	801198c <_strtod_l+0x204>
 8011966:	2301      	movs	r3, #1
 8011968:	e7c4      	b.n	80118f4 <_strtod_l+0x16c>
 801196a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801196c:	1c5a      	adds	r2, r3, #1
 801196e:	9219      	str	r2, [sp, #100]	@ 0x64
 8011970:	785a      	ldrb	r2, [r3, #1]
 8011972:	3001      	adds	r0, #1
 8011974:	2a30      	cmp	r2, #48	@ 0x30
 8011976:	d0f8      	beq.n	801196a <_strtod_l+0x1e2>
 8011978:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801197c:	2b08      	cmp	r3, #8
 801197e:	f200 84d3 	bhi.w	8012328 <_strtod_l+0xba0>
 8011982:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011984:	930c      	str	r3, [sp, #48]	@ 0x30
 8011986:	4681      	mov	r9, r0
 8011988:	2000      	movs	r0, #0
 801198a:	4605      	mov	r5, r0
 801198c:	3a30      	subs	r2, #48	@ 0x30
 801198e:	f100 0301 	add.w	r3, r0, #1
 8011992:	d02a      	beq.n	80119ea <_strtod_l+0x262>
 8011994:	4499      	add	r9, r3
 8011996:	eb00 0c05 	add.w	ip, r0, r5
 801199a:	462b      	mov	r3, r5
 801199c:	210a      	movs	r1, #10
 801199e:	4563      	cmp	r3, ip
 80119a0:	d10d      	bne.n	80119be <_strtod_l+0x236>
 80119a2:	1c69      	adds	r1, r5, #1
 80119a4:	4401      	add	r1, r0
 80119a6:	4428      	add	r0, r5
 80119a8:	2808      	cmp	r0, #8
 80119aa:	dc16      	bgt.n	80119da <_strtod_l+0x252>
 80119ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80119ae:	230a      	movs	r3, #10
 80119b0:	fb03 2300 	mla	r3, r3, r0, r2
 80119b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80119b6:	2300      	movs	r3, #0
 80119b8:	e018      	b.n	80119ec <_strtod_l+0x264>
 80119ba:	4638      	mov	r0, r7
 80119bc:	e7da      	b.n	8011974 <_strtod_l+0x1ec>
 80119be:	2b08      	cmp	r3, #8
 80119c0:	f103 0301 	add.w	r3, r3, #1
 80119c4:	dc03      	bgt.n	80119ce <_strtod_l+0x246>
 80119c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80119c8:	434e      	muls	r6, r1
 80119ca:	960a      	str	r6, [sp, #40]	@ 0x28
 80119cc:	e7e7      	b.n	801199e <_strtod_l+0x216>
 80119ce:	2b10      	cmp	r3, #16
 80119d0:	bfde      	ittt	le
 80119d2:	9e08      	ldrle	r6, [sp, #32]
 80119d4:	434e      	mulle	r6, r1
 80119d6:	9608      	strle	r6, [sp, #32]
 80119d8:	e7e1      	b.n	801199e <_strtod_l+0x216>
 80119da:	280f      	cmp	r0, #15
 80119dc:	dceb      	bgt.n	80119b6 <_strtod_l+0x22e>
 80119de:	9808      	ldr	r0, [sp, #32]
 80119e0:	230a      	movs	r3, #10
 80119e2:	fb03 2300 	mla	r3, r3, r0, r2
 80119e6:	9308      	str	r3, [sp, #32]
 80119e8:	e7e5      	b.n	80119b6 <_strtod_l+0x22e>
 80119ea:	4629      	mov	r1, r5
 80119ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80119ee:	1c50      	adds	r0, r2, #1
 80119f0:	9019      	str	r0, [sp, #100]	@ 0x64
 80119f2:	7852      	ldrb	r2, [r2, #1]
 80119f4:	4618      	mov	r0, r3
 80119f6:	460d      	mov	r5, r1
 80119f8:	e7b1      	b.n	801195e <_strtod_l+0x1d6>
 80119fa:	f04f 0900 	mov.w	r9, #0
 80119fe:	2301      	movs	r3, #1
 8011a00:	e77d      	b.n	80118fe <_strtod_l+0x176>
 8011a02:	f04f 0c00 	mov.w	ip, #0
 8011a06:	1ca2      	adds	r2, r4, #2
 8011a08:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a0a:	78a2      	ldrb	r2, [r4, #2]
 8011a0c:	e785      	b.n	801191a <_strtod_l+0x192>
 8011a0e:	f04f 0c01 	mov.w	ip, #1
 8011a12:	e7f8      	b.n	8011a06 <_strtod_l+0x27e>
 8011a14:	08015370 	.word	0x08015370
 8011a18:	08015358 	.word	0x08015358
 8011a1c:	7ff00000 	.word	0x7ff00000
 8011a20:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011a22:	1c51      	adds	r1, r2, #1
 8011a24:	9119      	str	r1, [sp, #100]	@ 0x64
 8011a26:	7852      	ldrb	r2, [r2, #1]
 8011a28:	2a30      	cmp	r2, #48	@ 0x30
 8011a2a:	d0f9      	beq.n	8011a20 <_strtod_l+0x298>
 8011a2c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011a30:	2908      	cmp	r1, #8
 8011a32:	f63f af78 	bhi.w	8011926 <_strtod_l+0x19e>
 8011a36:	3a30      	subs	r2, #48	@ 0x30
 8011a38:	920e      	str	r2, [sp, #56]	@ 0x38
 8011a3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011a3c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011a3e:	f04f 080a 	mov.w	r8, #10
 8011a42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011a44:	1c56      	adds	r6, r2, #1
 8011a46:	9619      	str	r6, [sp, #100]	@ 0x64
 8011a48:	7852      	ldrb	r2, [r2, #1]
 8011a4a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011a4e:	f1be 0f09 	cmp.w	lr, #9
 8011a52:	d939      	bls.n	8011ac8 <_strtod_l+0x340>
 8011a54:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011a56:	1a76      	subs	r6, r6, r1
 8011a58:	2e08      	cmp	r6, #8
 8011a5a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011a5e:	dc03      	bgt.n	8011a68 <_strtod_l+0x2e0>
 8011a60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011a62:	4588      	cmp	r8, r1
 8011a64:	bfa8      	it	ge
 8011a66:	4688      	movge	r8, r1
 8011a68:	f1bc 0f00 	cmp.w	ip, #0
 8011a6c:	d001      	beq.n	8011a72 <_strtod_l+0x2ea>
 8011a6e:	f1c8 0800 	rsb	r8, r8, #0
 8011a72:	2d00      	cmp	r5, #0
 8011a74:	d14e      	bne.n	8011b14 <_strtod_l+0x38c>
 8011a76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011a78:	4308      	orrs	r0, r1
 8011a7a:	f47f aebe 	bne.w	80117fa <_strtod_l+0x72>
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	f47f aed6 	bne.w	8011830 <_strtod_l+0xa8>
 8011a84:	2a69      	cmp	r2, #105	@ 0x69
 8011a86:	d028      	beq.n	8011ada <_strtod_l+0x352>
 8011a88:	dc25      	bgt.n	8011ad6 <_strtod_l+0x34e>
 8011a8a:	2a49      	cmp	r2, #73	@ 0x49
 8011a8c:	d025      	beq.n	8011ada <_strtod_l+0x352>
 8011a8e:	2a4e      	cmp	r2, #78	@ 0x4e
 8011a90:	f47f aece 	bne.w	8011830 <_strtod_l+0xa8>
 8011a94:	499b      	ldr	r1, [pc, #620]	@ (8011d04 <_strtod_l+0x57c>)
 8011a96:	a819      	add	r0, sp, #100	@ 0x64
 8011a98:	f001 fd46 	bl	8013528 <__match>
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	f43f aec7 	beq.w	8011830 <_strtod_l+0xa8>
 8011aa2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011aa4:	781b      	ldrb	r3, [r3, #0]
 8011aa6:	2b28      	cmp	r3, #40	@ 0x28
 8011aa8:	d12e      	bne.n	8011b08 <_strtod_l+0x380>
 8011aaa:	4997      	ldr	r1, [pc, #604]	@ (8011d08 <_strtod_l+0x580>)
 8011aac:	aa1c      	add	r2, sp, #112	@ 0x70
 8011aae:	a819      	add	r0, sp, #100	@ 0x64
 8011ab0:	f001 fd4e 	bl	8013550 <__hexnan>
 8011ab4:	2805      	cmp	r0, #5
 8011ab6:	d127      	bne.n	8011b08 <_strtod_l+0x380>
 8011ab8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011aba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011abe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011ac2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011ac6:	e698      	b.n	80117fa <_strtod_l+0x72>
 8011ac8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011aca:	fb08 2101 	mla	r1, r8, r1, r2
 8011ace:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011ad2:	920e      	str	r2, [sp, #56]	@ 0x38
 8011ad4:	e7b5      	b.n	8011a42 <_strtod_l+0x2ba>
 8011ad6:	2a6e      	cmp	r2, #110	@ 0x6e
 8011ad8:	e7da      	b.n	8011a90 <_strtod_l+0x308>
 8011ada:	498c      	ldr	r1, [pc, #560]	@ (8011d0c <_strtod_l+0x584>)
 8011adc:	a819      	add	r0, sp, #100	@ 0x64
 8011ade:	f001 fd23 	bl	8013528 <__match>
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	f43f aea4 	beq.w	8011830 <_strtod_l+0xa8>
 8011ae8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011aea:	4989      	ldr	r1, [pc, #548]	@ (8011d10 <_strtod_l+0x588>)
 8011aec:	3b01      	subs	r3, #1
 8011aee:	a819      	add	r0, sp, #100	@ 0x64
 8011af0:	9319      	str	r3, [sp, #100]	@ 0x64
 8011af2:	f001 fd19 	bl	8013528 <__match>
 8011af6:	b910      	cbnz	r0, 8011afe <_strtod_l+0x376>
 8011af8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011afa:	3301      	adds	r3, #1
 8011afc:	9319      	str	r3, [sp, #100]	@ 0x64
 8011afe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011d20 <_strtod_l+0x598>
 8011b02:	f04f 0a00 	mov.w	sl, #0
 8011b06:	e678      	b.n	80117fa <_strtod_l+0x72>
 8011b08:	4882      	ldr	r0, [pc, #520]	@ (8011d14 <_strtod_l+0x58c>)
 8011b0a:	f001 fa61 	bl	8012fd0 <nan>
 8011b0e:	ec5b ab10 	vmov	sl, fp, d0
 8011b12:	e672      	b.n	80117fa <_strtod_l+0x72>
 8011b14:	eba8 0309 	sub.w	r3, r8, r9
 8011b18:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011b1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b1c:	2f00      	cmp	r7, #0
 8011b1e:	bf08      	it	eq
 8011b20:	462f      	moveq	r7, r5
 8011b22:	2d10      	cmp	r5, #16
 8011b24:	462c      	mov	r4, r5
 8011b26:	bfa8      	it	ge
 8011b28:	2410      	movge	r4, #16
 8011b2a:	f7ee fcfb 	bl	8000524 <__aeabi_ui2d>
 8011b2e:	2d09      	cmp	r5, #9
 8011b30:	4682      	mov	sl, r0
 8011b32:	468b      	mov	fp, r1
 8011b34:	dc13      	bgt.n	8011b5e <_strtod_l+0x3d6>
 8011b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	f43f ae5e 	beq.w	80117fa <_strtod_l+0x72>
 8011b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b40:	dd78      	ble.n	8011c34 <_strtod_l+0x4ac>
 8011b42:	2b16      	cmp	r3, #22
 8011b44:	dc5f      	bgt.n	8011c06 <_strtod_l+0x47e>
 8011b46:	4974      	ldr	r1, [pc, #464]	@ (8011d18 <_strtod_l+0x590>)
 8011b48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b50:	4652      	mov	r2, sl
 8011b52:	465b      	mov	r3, fp
 8011b54:	f7ee fd60 	bl	8000618 <__aeabi_dmul>
 8011b58:	4682      	mov	sl, r0
 8011b5a:	468b      	mov	fp, r1
 8011b5c:	e64d      	b.n	80117fa <_strtod_l+0x72>
 8011b5e:	4b6e      	ldr	r3, [pc, #440]	@ (8011d18 <_strtod_l+0x590>)
 8011b60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011b64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011b68:	f7ee fd56 	bl	8000618 <__aeabi_dmul>
 8011b6c:	4682      	mov	sl, r0
 8011b6e:	9808      	ldr	r0, [sp, #32]
 8011b70:	468b      	mov	fp, r1
 8011b72:	f7ee fcd7 	bl	8000524 <__aeabi_ui2d>
 8011b76:	4602      	mov	r2, r0
 8011b78:	460b      	mov	r3, r1
 8011b7a:	4650      	mov	r0, sl
 8011b7c:	4659      	mov	r1, fp
 8011b7e:	f7ee fb95 	bl	80002ac <__adddf3>
 8011b82:	2d0f      	cmp	r5, #15
 8011b84:	4682      	mov	sl, r0
 8011b86:	468b      	mov	fp, r1
 8011b88:	ddd5      	ble.n	8011b36 <_strtod_l+0x3ae>
 8011b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b8c:	1b2c      	subs	r4, r5, r4
 8011b8e:	441c      	add	r4, r3
 8011b90:	2c00      	cmp	r4, #0
 8011b92:	f340 8096 	ble.w	8011cc2 <_strtod_l+0x53a>
 8011b96:	f014 030f 	ands.w	r3, r4, #15
 8011b9a:	d00a      	beq.n	8011bb2 <_strtod_l+0x42a>
 8011b9c:	495e      	ldr	r1, [pc, #376]	@ (8011d18 <_strtod_l+0x590>)
 8011b9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011ba2:	4652      	mov	r2, sl
 8011ba4:	465b      	mov	r3, fp
 8011ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011baa:	f7ee fd35 	bl	8000618 <__aeabi_dmul>
 8011bae:	4682      	mov	sl, r0
 8011bb0:	468b      	mov	fp, r1
 8011bb2:	f034 040f 	bics.w	r4, r4, #15
 8011bb6:	d073      	beq.n	8011ca0 <_strtod_l+0x518>
 8011bb8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011bbc:	dd48      	ble.n	8011c50 <_strtod_l+0x4c8>
 8011bbe:	2400      	movs	r4, #0
 8011bc0:	46a0      	mov	r8, r4
 8011bc2:	940a      	str	r4, [sp, #40]	@ 0x28
 8011bc4:	46a1      	mov	r9, r4
 8011bc6:	9a05      	ldr	r2, [sp, #20]
 8011bc8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011d20 <_strtod_l+0x598>
 8011bcc:	2322      	movs	r3, #34	@ 0x22
 8011bce:	6013      	str	r3, [r2, #0]
 8011bd0:	f04f 0a00 	mov.w	sl, #0
 8011bd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	f43f ae0f 	beq.w	80117fa <_strtod_l+0x72>
 8011bdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011bde:	9805      	ldr	r0, [sp, #20]
 8011be0:	f7ff f940 	bl	8010e64 <_Bfree>
 8011be4:	9805      	ldr	r0, [sp, #20]
 8011be6:	4649      	mov	r1, r9
 8011be8:	f7ff f93c 	bl	8010e64 <_Bfree>
 8011bec:	9805      	ldr	r0, [sp, #20]
 8011bee:	4641      	mov	r1, r8
 8011bf0:	f7ff f938 	bl	8010e64 <_Bfree>
 8011bf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011bf6:	9805      	ldr	r0, [sp, #20]
 8011bf8:	f7ff f934 	bl	8010e64 <_Bfree>
 8011bfc:	9805      	ldr	r0, [sp, #20]
 8011bfe:	4621      	mov	r1, r4
 8011c00:	f7ff f930 	bl	8010e64 <_Bfree>
 8011c04:	e5f9      	b.n	80117fa <_strtod_l+0x72>
 8011c06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c08:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011c0c:	4293      	cmp	r3, r2
 8011c0e:	dbbc      	blt.n	8011b8a <_strtod_l+0x402>
 8011c10:	4c41      	ldr	r4, [pc, #260]	@ (8011d18 <_strtod_l+0x590>)
 8011c12:	f1c5 050f 	rsb	r5, r5, #15
 8011c16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011c1a:	4652      	mov	r2, sl
 8011c1c:	465b      	mov	r3, fp
 8011c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c22:	f7ee fcf9 	bl	8000618 <__aeabi_dmul>
 8011c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c28:	1b5d      	subs	r5, r3, r5
 8011c2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011c2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011c32:	e78f      	b.n	8011b54 <_strtod_l+0x3cc>
 8011c34:	3316      	adds	r3, #22
 8011c36:	dba8      	blt.n	8011b8a <_strtod_l+0x402>
 8011c38:	4b37      	ldr	r3, [pc, #220]	@ (8011d18 <_strtod_l+0x590>)
 8011c3a:	eba9 0808 	sub.w	r8, r9, r8
 8011c3e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011c42:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011c46:	4650      	mov	r0, sl
 8011c48:	4659      	mov	r1, fp
 8011c4a:	f7ee fe0f 	bl	800086c <__aeabi_ddiv>
 8011c4e:	e783      	b.n	8011b58 <_strtod_l+0x3d0>
 8011c50:	4b32      	ldr	r3, [pc, #200]	@ (8011d1c <_strtod_l+0x594>)
 8011c52:	9308      	str	r3, [sp, #32]
 8011c54:	2300      	movs	r3, #0
 8011c56:	1124      	asrs	r4, r4, #4
 8011c58:	4650      	mov	r0, sl
 8011c5a:	4659      	mov	r1, fp
 8011c5c:	461e      	mov	r6, r3
 8011c5e:	2c01      	cmp	r4, #1
 8011c60:	dc21      	bgt.n	8011ca6 <_strtod_l+0x51e>
 8011c62:	b10b      	cbz	r3, 8011c68 <_strtod_l+0x4e0>
 8011c64:	4682      	mov	sl, r0
 8011c66:	468b      	mov	fp, r1
 8011c68:	492c      	ldr	r1, [pc, #176]	@ (8011d1c <_strtod_l+0x594>)
 8011c6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011c6e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011c72:	4652      	mov	r2, sl
 8011c74:	465b      	mov	r3, fp
 8011c76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c7a:	f7ee fccd 	bl	8000618 <__aeabi_dmul>
 8011c7e:	4b28      	ldr	r3, [pc, #160]	@ (8011d20 <_strtod_l+0x598>)
 8011c80:	460a      	mov	r2, r1
 8011c82:	400b      	ands	r3, r1
 8011c84:	4927      	ldr	r1, [pc, #156]	@ (8011d24 <_strtod_l+0x59c>)
 8011c86:	428b      	cmp	r3, r1
 8011c88:	4682      	mov	sl, r0
 8011c8a:	d898      	bhi.n	8011bbe <_strtod_l+0x436>
 8011c8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011c90:	428b      	cmp	r3, r1
 8011c92:	bf86      	itte	hi
 8011c94:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011d28 <_strtod_l+0x5a0>
 8011c98:	f04f 3aff 	movhi.w	sl, #4294967295
 8011c9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	9308      	str	r3, [sp, #32]
 8011ca4:	e07a      	b.n	8011d9c <_strtod_l+0x614>
 8011ca6:	07e2      	lsls	r2, r4, #31
 8011ca8:	d505      	bpl.n	8011cb6 <_strtod_l+0x52e>
 8011caa:	9b08      	ldr	r3, [sp, #32]
 8011cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb0:	f7ee fcb2 	bl	8000618 <__aeabi_dmul>
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	9a08      	ldr	r2, [sp, #32]
 8011cb8:	3208      	adds	r2, #8
 8011cba:	3601      	adds	r6, #1
 8011cbc:	1064      	asrs	r4, r4, #1
 8011cbe:	9208      	str	r2, [sp, #32]
 8011cc0:	e7cd      	b.n	8011c5e <_strtod_l+0x4d6>
 8011cc2:	d0ed      	beq.n	8011ca0 <_strtod_l+0x518>
 8011cc4:	4264      	negs	r4, r4
 8011cc6:	f014 020f 	ands.w	r2, r4, #15
 8011cca:	d00a      	beq.n	8011ce2 <_strtod_l+0x55a>
 8011ccc:	4b12      	ldr	r3, [pc, #72]	@ (8011d18 <_strtod_l+0x590>)
 8011cce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011cd2:	4650      	mov	r0, sl
 8011cd4:	4659      	mov	r1, fp
 8011cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cda:	f7ee fdc7 	bl	800086c <__aeabi_ddiv>
 8011cde:	4682      	mov	sl, r0
 8011ce0:	468b      	mov	fp, r1
 8011ce2:	1124      	asrs	r4, r4, #4
 8011ce4:	d0dc      	beq.n	8011ca0 <_strtod_l+0x518>
 8011ce6:	2c1f      	cmp	r4, #31
 8011ce8:	dd20      	ble.n	8011d2c <_strtod_l+0x5a4>
 8011cea:	2400      	movs	r4, #0
 8011cec:	46a0      	mov	r8, r4
 8011cee:	940a      	str	r4, [sp, #40]	@ 0x28
 8011cf0:	46a1      	mov	r9, r4
 8011cf2:	9a05      	ldr	r2, [sp, #20]
 8011cf4:	2322      	movs	r3, #34	@ 0x22
 8011cf6:	f04f 0a00 	mov.w	sl, #0
 8011cfa:	f04f 0b00 	mov.w	fp, #0
 8011cfe:	6013      	str	r3, [r2, #0]
 8011d00:	e768      	b.n	8011bd4 <_strtod_l+0x44c>
 8011d02:	bf00      	nop
 8011d04:	080150b6 	.word	0x080150b6
 8011d08:	0801535c 	.word	0x0801535c
 8011d0c:	080150ae 	.word	0x080150ae
 8011d10:	08015190 	.word	0x08015190
 8011d14:	0801518c 	.word	0x0801518c
 8011d18:	08015290 	.word	0x08015290
 8011d1c:	08015268 	.word	0x08015268
 8011d20:	7ff00000 	.word	0x7ff00000
 8011d24:	7ca00000 	.word	0x7ca00000
 8011d28:	7fefffff 	.word	0x7fefffff
 8011d2c:	f014 0310 	ands.w	r3, r4, #16
 8011d30:	bf18      	it	ne
 8011d32:	236a      	movne	r3, #106	@ 0x6a
 8011d34:	4ea9      	ldr	r6, [pc, #676]	@ (8011fdc <_strtod_l+0x854>)
 8011d36:	9308      	str	r3, [sp, #32]
 8011d38:	4650      	mov	r0, sl
 8011d3a:	4659      	mov	r1, fp
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	07e2      	lsls	r2, r4, #31
 8011d40:	d504      	bpl.n	8011d4c <_strtod_l+0x5c4>
 8011d42:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011d46:	f7ee fc67 	bl	8000618 <__aeabi_dmul>
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	1064      	asrs	r4, r4, #1
 8011d4e:	f106 0608 	add.w	r6, r6, #8
 8011d52:	d1f4      	bne.n	8011d3e <_strtod_l+0x5b6>
 8011d54:	b10b      	cbz	r3, 8011d5a <_strtod_l+0x5d2>
 8011d56:	4682      	mov	sl, r0
 8011d58:	468b      	mov	fp, r1
 8011d5a:	9b08      	ldr	r3, [sp, #32]
 8011d5c:	b1b3      	cbz	r3, 8011d8c <_strtod_l+0x604>
 8011d5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011d62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	4659      	mov	r1, fp
 8011d6a:	dd0f      	ble.n	8011d8c <_strtod_l+0x604>
 8011d6c:	2b1f      	cmp	r3, #31
 8011d6e:	dd55      	ble.n	8011e1c <_strtod_l+0x694>
 8011d70:	2b34      	cmp	r3, #52	@ 0x34
 8011d72:	bfde      	ittt	le
 8011d74:	f04f 33ff 	movle.w	r3, #4294967295
 8011d78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011d7c:	4093      	lslle	r3, r2
 8011d7e:	f04f 0a00 	mov.w	sl, #0
 8011d82:	bfcc      	ite	gt
 8011d84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011d88:	ea03 0b01 	andle.w	fp, r3, r1
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	2300      	movs	r3, #0
 8011d90:	4650      	mov	r0, sl
 8011d92:	4659      	mov	r1, fp
 8011d94:	f7ee fea8 	bl	8000ae8 <__aeabi_dcmpeq>
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	d1a6      	bne.n	8011cea <_strtod_l+0x562>
 8011d9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d9e:	9300      	str	r3, [sp, #0]
 8011da0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011da2:	9805      	ldr	r0, [sp, #20]
 8011da4:	462b      	mov	r3, r5
 8011da6:	463a      	mov	r2, r7
 8011da8:	f7ff f8c4 	bl	8010f34 <__s2b>
 8011dac:	900a      	str	r0, [sp, #40]	@ 0x28
 8011dae:	2800      	cmp	r0, #0
 8011db0:	f43f af05 	beq.w	8011bbe <_strtod_l+0x436>
 8011db4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011db6:	2a00      	cmp	r2, #0
 8011db8:	eba9 0308 	sub.w	r3, r9, r8
 8011dbc:	bfa8      	it	ge
 8011dbe:	2300      	movge	r3, #0
 8011dc0:	9312      	str	r3, [sp, #72]	@ 0x48
 8011dc2:	2400      	movs	r4, #0
 8011dc4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011dc8:	9316      	str	r3, [sp, #88]	@ 0x58
 8011dca:	46a0      	mov	r8, r4
 8011dcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011dce:	9805      	ldr	r0, [sp, #20]
 8011dd0:	6859      	ldr	r1, [r3, #4]
 8011dd2:	f7ff f807 	bl	8010de4 <_Balloc>
 8011dd6:	4681      	mov	r9, r0
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	f43f aef4 	beq.w	8011bc6 <_strtod_l+0x43e>
 8011dde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011de0:	691a      	ldr	r2, [r3, #16]
 8011de2:	3202      	adds	r2, #2
 8011de4:	f103 010c 	add.w	r1, r3, #12
 8011de8:	0092      	lsls	r2, r2, #2
 8011dea:	300c      	adds	r0, #12
 8011dec:	f7fe f92f 	bl	801004e <memcpy>
 8011df0:	ec4b ab10 	vmov	d0, sl, fp
 8011df4:	9805      	ldr	r0, [sp, #20]
 8011df6:	aa1c      	add	r2, sp, #112	@ 0x70
 8011df8:	a91b      	add	r1, sp, #108	@ 0x6c
 8011dfa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011dfe:	f7ff fbd5 	bl	80115ac <__d2b>
 8011e02:	901a      	str	r0, [sp, #104]	@ 0x68
 8011e04:	2800      	cmp	r0, #0
 8011e06:	f43f aede 	beq.w	8011bc6 <_strtod_l+0x43e>
 8011e0a:	9805      	ldr	r0, [sp, #20]
 8011e0c:	2101      	movs	r1, #1
 8011e0e:	f7ff f927 	bl	8011060 <__i2b>
 8011e12:	4680      	mov	r8, r0
 8011e14:	b948      	cbnz	r0, 8011e2a <_strtod_l+0x6a2>
 8011e16:	f04f 0800 	mov.w	r8, #0
 8011e1a:	e6d4      	b.n	8011bc6 <_strtod_l+0x43e>
 8011e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e20:	fa02 f303 	lsl.w	r3, r2, r3
 8011e24:	ea03 0a0a 	and.w	sl, r3, sl
 8011e28:	e7b0      	b.n	8011d8c <_strtod_l+0x604>
 8011e2a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011e2c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011e2e:	2d00      	cmp	r5, #0
 8011e30:	bfab      	itete	ge
 8011e32:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011e34:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011e36:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011e38:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011e3a:	bfac      	ite	ge
 8011e3c:	18ef      	addge	r7, r5, r3
 8011e3e:	1b5e      	sublt	r6, r3, r5
 8011e40:	9b08      	ldr	r3, [sp, #32]
 8011e42:	1aed      	subs	r5, r5, r3
 8011e44:	4415      	add	r5, r2
 8011e46:	4b66      	ldr	r3, [pc, #408]	@ (8011fe0 <_strtod_l+0x858>)
 8011e48:	3d01      	subs	r5, #1
 8011e4a:	429d      	cmp	r5, r3
 8011e4c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011e50:	da50      	bge.n	8011ef4 <_strtod_l+0x76c>
 8011e52:	1b5b      	subs	r3, r3, r5
 8011e54:	2b1f      	cmp	r3, #31
 8011e56:	eba2 0203 	sub.w	r2, r2, r3
 8011e5a:	f04f 0101 	mov.w	r1, #1
 8011e5e:	dc3d      	bgt.n	8011edc <_strtod_l+0x754>
 8011e60:	fa01 f303 	lsl.w	r3, r1, r3
 8011e64:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011e66:	2300      	movs	r3, #0
 8011e68:	9310      	str	r3, [sp, #64]	@ 0x40
 8011e6a:	18bd      	adds	r5, r7, r2
 8011e6c:	9b08      	ldr	r3, [sp, #32]
 8011e6e:	42af      	cmp	r7, r5
 8011e70:	4416      	add	r6, r2
 8011e72:	441e      	add	r6, r3
 8011e74:	463b      	mov	r3, r7
 8011e76:	bfa8      	it	ge
 8011e78:	462b      	movge	r3, r5
 8011e7a:	42b3      	cmp	r3, r6
 8011e7c:	bfa8      	it	ge
 8011e7e:	4633      	movge	r3, r6
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	bfc2      	ittt	gt
 8011e84:	1aed      	subgt	r5, r5, r3
 8011e86:	1af6      	subgt	r6, r6, r3
 8011e88:	1aff      	subgt	r7, r7, r3
 8011e8a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	dd16      	ble.n	8011ebe <_strtod_l+0x736>
 8011e90:	4641      	mov	r1, r8
 8011e92:	9805      	ldr	r0, [sp, #20]
 8011e94:	461a      	mov	r2, r3
 8011e96:	f7ff f9a3 	bl	80111e0 <__pow5mult>
 8011e9a:	4680      	mov	r8, r0
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d0ba      	beq.n	8011e16 <_strtod_l+0x68e>
 8011ea0:	4601      	mov	r1, r0
 8011ea2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011ea4:	9805      	ldr	r0, [sp, #20]
 8011ea6:	f7ff f8f1 	bl	801108c <__multiply>
 8011eaa:	900e      	str	r0, [sp, #56]	@ 0x38
 8011eac:	2800      	cmp	r0, #0
 8011eae:	f43f ae8a 	beq.w	8011bc6 <_strtod_l+0x43e>
 8011eb2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011eb4:	9805      	ldr	r0, [sp, #20]
 8011eb6:	f7fe ffd5 	bl	8010e64 <_Bfree>
 8011eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ebc:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ebe:	2d00      	cmp	r5, #0
 8011ec0:	dc1d      	bgt.n	8011efe <_strtod_l+0x776>
 8011ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	dd23      	ble.n	8011f10 <_strtod_l+0x788>
 8011ec8:	4649      	mov	r1, r9
 8011eca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011ecc:	9805      	ldr	r0, [sp, #20]
 8011ece:	f7ff f987 	bl	80111e0 <__pow5mult>
 8011ed2:	4681      	mov	r9, r0
 8011ed4:	b9e0      	cbnz	r0, 8011f10 <_strtod_l+0x788>
 8011ed6:	f04f 0900 	mov.w	r9, #0
 8011eda:	e674      	b.n	8011bc6 <_strtod_l+0x43e>
 8011edc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011ee0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011ee4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011ee8:	35e2      	adds	r5, #226	@ 0xe2
 8011eea:	fa01 f305 	lsl.w	r3, r1, r5
 8011eee:	9310      	str	r3, [sp, #64]	@ 0x40
 8011ef0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011ef2:	e7ba      	b.n	8011e6a <_strtod_l+0x6e2>
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	9310      	str	r3, [sp, #64]	@ 0x40
 8011ef8:	2301      	movs	r3, #1
 8011efa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011efc:	e7b5      	b.n	8011e6a <_strtod_l+0x6e2>
 8011efe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011f00:	9805      	ldr	r0, [sp, #20]
 8011f02:	462a      	mov	r2, r5
 8011f04:	f7ff f9c6 	bl	8011294 <__lshift>
 8011f08:	901a      	str	r0, [sp, #104]	@ 0x68
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	d1d9      	bne.n	8011ec2 <_strtod_l+0x73a>
 8011f0e:	e65a      	b.n	8011bc6 <_strtod_l+0x43e>
 8011f10:	2e00      	cmp	r6, #0
 8011f12:	dd07      	ble.n	8011f24 <_strtod_l+0x79c>
 8011f14:	4649      	mov	r1, r9
 8011f16:	9805      	ldr	r0, [sp, #20]
 8011f18:	4632      	mov	r2, r6
 8011f1a:	f7ff f9bb 	bl	8011294 <__lshift>
 8011f1e:	4681      	mov	r9, r0
 8011f20:	2800      	cmp	r0, #0
 8011f22:	d0d8      	beq.n	8011ed6 <_strtod_l+0x74e>
 8011f24:	2f00      	cmp	r7, #0
 8011f26:	dd08      	ble.n	8011f3a <_strtod_l+0x7b2>
 8011f28:	4641      	mov	r1, r8
 8011f2a:	9805      	ldr	r0, [sp, #20]
 8011f2c:	463a      	mov	r2, r7
 8011f2e:	f7ff f9b1 	bl	8011294 <__lshift>
 8011f32:	4680      	mov	r8, r0
 8011f34:	2800      	cmp	r0, #0
 8011f36:	f43f ae46 	beq.w	8011bc6 <_strtod_l+0x43e>
 8011f3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011f3c:	9805      	ldr	r0, [sp, #20]
 8011f3e:	464a      	mov	r2, r9
 8011f40:	f7ff fa30 	bl	80113a4 <__mdiff>
 8011f44:	4604      	mov	r4, r0
 8011f46:	2800      	cmp	r0, #0
 8011f48:	f43f ae3d 	beq.w	8011bc6 <_strtod_l+0x43e>
 8011f4c:	68c3      	ldr	r3, [r0, #12]
 8011f4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011f50:	2300      	movs	r3, #0
 8011f52:	60c3      	str	r3, [r0, #12]
 8011f54:	4641      	mov	r1, r8
 8011f56:	f7ff fa09 	bl	801136c <__mcmp>
 8011f5a:	2800      	cmp	r0, #0
 8011f5c:	da46      	bge.n	8011fec <_strtod_l+0x864>
 8011f5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f60:	ea53 030a 	orrs.w	r3, r3, sl
 8011f64:	d16c      	bne.n	8012040 <_strtod_l+0x8b8>
 8011f66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d168      	bne.n	8012040 <_strtod_l+0x8b8>
 8011f6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011f72:	0d1b      	lsrs	r3, r3, #20
 8011f74:	051b      	lsls	r3, r3, #20
 8011f76:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011f7a:	d961      	bls.n	8012040 <_strtod_l+0x8b8>
 8011f7c:	6963      	ldr	r3, [r4, #20]
 8011f7e:	b913      	cbnz	r3, 8011f86 <_strtod_l+0x7fe>
 8011f80:	6923      	ldr	r3, [r4, #16]
 8011f82:	2b01      	cmp	r3, #1
 8011f84:	dd5c      	ble.n	8012040 <_strtod_l+0x8b8>
 8011f86:	4621      	mov	r1, r4
 8011f88:	2201      	movs	r2, #1
 8011f8a:	9805      	ldr	r0, [sp, #20]
 8011f8c:	f7ff f982 	bl	8011294 <__lshift>
 8011f90:	4641      	mov	r1, r8
 8011f92:	4604      	mov	r4, r0
 8011f94:	f7ff f9ea 	bl	801136c <__mcmp>
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	dd51      	ble.n	8012040 <_strtod_l+0x8b8>
 8011f9c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011fa0:	9a08      	ldr	r2, [sp, #32]
 8011fa2:	0d1b      	lsrs	r3, r3, #20
 8011fa4:	051b      	lsls	r3, r3, #20
 8011fa6:	2a00      	cmp	r2, #0
 8011fa8:	d06b      	beq.n	8012082 <_strtod_l+0x8fa>
 8011faa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011fae:	d868      	bhi.n	8012082 <_strtod_l+0x8fa>
 8011fb0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011fb4:	f67f ae9d 	bls.w	8011cf2 <_strtod_l+0x56a>
 8011fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8011fe4 <_strtod_l+0x85c>)
 8011fba:	4650      	mov	r0, sl
 8011fbc:	4659      	mov	r1, fp
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	f7ee fb2a 	bl	8000618 <__aeabi_dmul>
 8011fc4:	4b08      	ldr	r3, [pc, #32]	@ (8011fe8 <_strtod_l+0x860>)
 8011fc6:	400b      	ands	r3, r1
 8011fc8:	4682      	mov	sl, r0
 8011fca:	468b      	mov	fp, r1
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	f47f ae05 	bne.w	8011bdc <_strtod_l+0x454>
 8011fd2:	9a05      	ldr	r2, [sp, #20]
 8011fd4:	2322      	movs	r3, #34	@ 0x22
 8011fd6:	6013      	str	r3, [r2, #0]
 8011fd8:	e600      	b.n	8011bdc <_strtod_l+0x454>
 8011fda:	bf00      	nop
 8011fdc:	08015388 	.word	0x08015388
 8011fe0:	fffffc02 	.word	0xfffffc02
 8011fe4:	39500000 	.word	0x39500000
 8011fe8:	7ff00000 	.word	0x7ff00000
 8011fec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011ff0:	d165      	bne.n	80120be <_strtod_l+0x936>
 8011ff2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011ff4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ff8:	b35a      	cbz	r2, 8012052 <_strtod_l+0x8ca>
 8011ffa:	4a9f      	ldr	r2, [pc, #636]	@ (8012278 <_strtod_l+0xaf0>)
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d12b      	bne.n	8012058 <_strtod_l+0x8d0>
 8012000:	9b08      	ldr	r3, [sp, #32]
 8012002:	4651      	mov	r1, sl
 8012004:	b303      	cbz	r3, 8012048 <_strtod_l+0x8c0>
 8012006:	4b9d      	ldr	r3, [pc, #628]	@ (801227c <_strtod_l+0xaf4>)
 8012008:	465a      	mov	r2, fp
 801200a:	4013      	ands	r3, r2
 801200c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012010:	f04f 32ff 	mov.w	r2, #4294967295
 8012014:	d81b      	bhi.n	801204e <_strtod_l+0x8c6>
 8012016:	0d1b      	lsrs	r3, r3, #20
 8012018:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801201c:	fa02 f303 	lsl.w	r3, r2, r3
 8012020:	4299      	cmp	r1, r3
 8012022:	d119      	bne.n	8012058 <_strtod_l+0x8d0>
 8012024:	4b96      	ldr	r3, [pc, #600]	@ (8012280 <_strtod_l+0xaf8>)
 8012026:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012028:	429a      	cmp	r2, r3
 801202a:	d102      	bne.n	8012032 <_strtod_l+0x8aa>
 801202c:	3101      	adds	r1, #1
 801202e:	f43f adca 	beq.w	8011bc6 <_strtod_l+0x43e>
 8012032:	4b92      	ldr	r3, [pc, #584]	@ (801227c <_strtod_l+0xaf4>)
 8012034:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012036:	401a      	ands	r2, r3
 8012038:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801203c:	f04f 0a00 	mov.w	sl, #0
 8012040:	9b08      	ldr	r3, [sp, #32]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d1b8      	bne.n	8011fb8 <_strtod_l+0x830>
 8012046:	e5c9      	b.n	8011bdc <_strtod_l+0x454>
 8012048:	f04f 33ff 	mov.w	r3, #4294967295
 801204c:	e7e8      	b.n	8012020 <_strtod_l+0x898>
 801204e:	4613      	mov	r3, r2
 8012050:	e7e6      	b.n	8012020 <_strtod_l+0x898>
 8012052:	ea53 030a 	orrs.w	r3, r3, sl
 8012056:	d0a1      	beq.n	8011f9c <_strtod_l+0x814>
 8012058:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801205a:	b1db      	cbz	r3, 8012094 <_strtod_l+0x90c>
 801205c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801205e:	4213      	tst	r3, r2
 8012060:	d0ee      	beq.n	8012040 <_strtod_l+0x8b8>
 8012062:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012064:	9a08      	ldr	r2, [sp, #32]
 8012066:	4650      	mov	r0, sl
 8012068:	4659      	mov	r1, fp
 801206a:	b1bb      	cbz	r3, 801209c <_strtod_l+0x914>
 801206c:	f7ff fb6c 	bl	8011748 <sulp>
 8012070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012074:	ec53 2b10 	vmov	r2, r3, d0
 8012078:	f7ee f918 	bl	80002ac <__adddf3>
 801207c:	4682      	mov	sl, r0
 801207e:	468b      	mov	fp, r1
 8012080:	e7de      	b.n	8012040 <_strtod_l+0x8b8>
 8012082:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012086:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801208a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801208e:	f04f 3aff 	mov.w	sl, #4294967295
 8012092:	e7d5      	b.n	8012040 <_strtod_l+0x8b8>
 8012094:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012096:	ea13 0f0a 	tst.w	r3, sl
 801209a:	e7e1      	b.n	8012060 <_strtod_l+0x8d8>
 801209c:	f7ff fb54 	bl	8011748 <sulp>
 80120a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80120a4:	ec53 2b10 	vmov	r2, r3, d0
 80120a8:	f7ee f8fe 	bl	80002a8 <__aeabi_dsub>
 80120ac:	2200      	movs	r2, #0
 80120ae:	2300      	movs	r3, #0
 80120b0:	4682      	mov	sl, r0
 80120b2:	468b      	mov	fp, r1
 80120b4:	f7ee fd18 	bl	8000ae8 <__aeabi_dcmpeq>
 80120b8:	2800      	cmp	r0, #0
 80120ba:	d0c1      	beq.n	8012040 <_strtod_l+0x8b8>
 80120bc:	e619      	b.n	8011cf2 <_strtod_l+0x56a>
 80120be:	4641      	mov	r1, r8
 80120c0:	4620      	mov	r0, r4
 80120c2:	f7ff facb 	bl	801165c <__ratio>
 80120c6:	ec57 6b10 	vmov	r6, r7, d0
 80120ca:	2200      	movs	r2, #0
 80120cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80120d0:	4630      	mov	r0, r6
 80120d2:	4639      	mov	r1, r7
 80120d4:	f7ee fd1c 	bl	8000b10 <__aeabi_dcmple>
 80120d8:	2800      	cmp	r0, #0
 80120da:	d06f      	beq.n	80121bc <_strtod_l+0xa34>
 80120dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d17a      	bne.n	80121d8 <_strtod_l+0xa50>
 80120e2:	f1ba 0f00 	cmp.w	sl, #0
 80120e6:	d158      	bne.n	801219a <_strtod_l+0xa12>
 80120e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d15a      	bne.n	80121a8 <_strtod_l+0xa20>
 80120f2:	4b64      	ldr	r3, [pc, #400]	@ (8012284 <_strtod_l+0xafc>)
 80120f4:	2200      	movs	r2, #0
 80120f6:	4630      	mov	r0, r6
 80120f8:	4639      	mov	r1, r7
 80120fa:	f7ee fcff 	bl	8000afc <__aeabi_dcmplt>
 80120fe:	2800      	cmp	r0, #0
 8012100:	d159      	bne.n	80121b6 <_strtod_l+0xa2e>
 8012102:	4630      	mov	r0, r6
 8012104:	4639      	mov	r1, r7
 8012106:	4b60      	ldr	r3, [pc, #384]	@ (8012288 <_strtod_l+0xb00>)
 8012108:	2200      	movs	r2, #0
 801210a:	f7ee fa85 	bl	8000618 <__aeabi_dmul>
 801210e:	4606      	mov	r6, r0
 8012110:	460f      	mov	r7, r1
 8012112:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012116:	9606      	str	r6, [sp, #24]
 8012118:	9307      	str	r3, [sp, #28]
 801211a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801211e:	4d57      	ldr	r5, [pc, #348]	@ (801227c <_strtod_l+0xaf4>)
 8012120:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012126:	401d      	ands	r5, r3
 8012128:	4b58      	ldr	r3, [pc, #352]	@ (801228c <_strtod_l+0xb04>)
 801212a:	429d      	cmp	r5, r3
 801212c:	f040 80b2 	bne.w	8012294 <_strtod_l+0xb0c>
 8012130:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012132:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012136:	ec4b ab10 	vmov	d0, sl, fp
 801213a:	f7ff f9c7 	bl	80114cc <__ulp>
 801213e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012142:	ec51 0b10 	vmov	r0, r1, d0
 8012146:	f7ee fa67 	bl	8000618 <__aeabi_dmul>
 801214a:	4652      	mov	r2, sl
 801214c:	465b      	mov	r3, fp
 801214e:	f7ee f8ad 	bl	80002ac <__adddf3>
 8012152:	460b      	mov	r3, r1
 8012154:	4949      	ldr	r1, [pc, #292]	@ (801227c <_strtod_l+0xaf4>)
 8012156:	4a4e      	ldr	r2, [pc, #312]	@ (8012290 <_strtod_l+0xb08>)
 8012158:	4019      	ands	r1, r3
 801215a:	4291      	cmp	r1, r2
 801215c:	4682      	mov	sl, r0
 801215e:	d942      	bls.n	80121e6 <_strtod_l+0xa5e>
 8012160:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012162:	4b47      	ldr	r3, [pc, #284]	@ (8012280 <_strtod_l+0xaf8>)
 8012164:	429a      	cmp	r2, r3
 8012166:	d103      	bne.n	8012170 <_strtod_l+0x9e8>
 8012168:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801216a:	3301      	adds	r3, #1
 801216c:	f43f ad2b 	beq.w	8011bc6 <_strtod_l+0x43e>
 8012170:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012280 <_strtod_l+0xaf8>
 8012174:	f04f 3aff 	mov.w	sl, #4294967295
 8012178:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801217a:	9805      	ldr	r0, [sp, #20]
 801217c:	f7fe fe72 	bl	8010e64 <_Bfree>
 8012180:	9805      	ldr	r0, [sp, #20]
 8012182:	4649      	mov	r1, r9
 8012184:	f7fe fe6e 	bl	8010e64 <_Bfree>
 8012188:	9805      	ldr	r0, [sp, #20]
 801218a:	4641      	mov	r1, r8
 801218c:	f7fe fe6a 	bl	8010e64 <_Bfree>
 8012190:	9805      	ldr	r0, [sp, #20]
 8012192:	4621      	mov	r1, r4
 8012194:	f7fe fe66 	bl	8010e64 <_Bfree>
 8012198:	e618      	b.n	8011dcc <_strtod_l+0x644>
 801219a:	f1ba 0f01 	cmp.w	sl, #1
 801219e:	d103      	bne.n	80121a8 <_strtod_l+0xa20>
 80121a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	f43f ada5 	beq.w	8011cf2 <_strtod_l+0x56a>
 80121a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012258 <_strtod_l+0xad0>
 80121ac:	4f35      	ldr	r7, [pc, #212]	@ (8012284 <_strtod_l+0xafc>)
 80121ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80121b2:	2600      	movs	r6, #0
 80121b4:	e7b1      	b.n	801211a <_strtod_l+0x992>
 80121b6:	4f34      	ldr	r7, [pc, #208]	@ (8012288 <_strtod_l+0xb00>)
 80121b8:	2600      	movs	r6, #0
 80121ba:	e7aa      	b.n	8012112 <_strtod_l+0x98a>
 80121bc:	4b32      	ldr	r3, [pc, #200]	@ (8012288 <_strtod_l+0xb00>)
 80121be:	4630      	mov	r0, r6
 80121c0:	4639      	mov	r1, r7
 80121c2:	2200      	movs	r2, #0
 80121c4:	f7ee fa28 	bl	8000618 <__aeabi_dmul>
 80121c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121ca:	4606      	mov	r6, r0
 80121cc:	460f      	mov	r7, r1
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d09f      	beq.n	8012112 <_strtod_l+0x98a>
 80121d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80121d6:	e7a0      	b.n	801211a <_strtod_l+0x992>
 80121d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012260 <_strtod_l+0xad8>
 80121dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80121e0:	ec57 6b17 	vmov	r6, r7, d7
 80121e4:	e799      	b.n	801211a <_strtod_l+0x992>
 80121e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80121ea:	9b08      	ldr	r3, [sp, #32]
 80121ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d1c1      	bne.n	8012178 <_strtod_l+0x9f0>
 80121f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80121f8:	0d1b      	lsrs	r3, r3, #20
 80121fa:	051b      	lsls	r3, r3, #20
 80121fc:	429d      	cmp	r5, r3
 80121fe:	d1bb      	bne.n	8012178 <_strtod_l+0x9f0>
 8012200:	4630      	mov	r0, r6
 8012202:	4639      	mov	r1, r7
 8012204:	f7ee fd68 	bl	8000cd8 <__aeabi_d2lz>
 8012208:	f7ee f9d8 	bl	80005bc <__aeabi_l2d>
 801220c:	4602      	mov	r2, r0
 801220e:	460b      	mov	r3, r1
 8012210:	4630      	mov	r0, r6
 8012212:	4639      	mov	r1, r7
 8012214:	f7ee f848 	bl	80002a8 <__aeabi_dsub>
 8012218:	460b      	mov	r3, r1
 801221a:	4602      	mov	r2, r0
 801221c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012220:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012226:	ea46 060a 	orr.w	r6, r6, sl
 801222a:	431e      	orrs	r6, r3
 801222c:	d06f      	beq.n	801230e <_strtod_l+0xb86>
 801222e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012268 <_strtod_l+0xae0>)
 8012230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012234:	f7ee fc62 	bl	8000afc <__aeabi_dcmplt>
 8012238:	2800      	cmp	r0, #0
 801223a:	f47f accf 	bne.w	8011bdc <_strtod_l+0x454>
 801223e:	a30c      	add	r3, pc, #48	@ (adr r3, 8012270 <_strtod_l+0xae8>)
 8012240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012248:	f7ee fc76 	bl	8000b38 <__aeabi_dcmpgt>
 801224c:	2800      	cmp	r0, #0
 801224e:	d093      	beq.n	8012178 <_strtod_l+0x9f0>
 8012250:	e4c4      	b.n	8011bdc <_strtod_l+0x454>
 8012252:	bf00      	nop
 8012254:	f3af 8000 	nop.w
 8012258:	00000000 	.word	0x00000000
 801225c:	bff00000 	.word	0xbff00000
 8012260:	00000000 	.word	0x00000000
 8012264:	3ff00000 	.word	0x3ff00000
 8012268:	94a03595 	.word	0x94a03595
 801226c:	3fdfffff 	.word	0x3fdfffff
 8012270:	35afe535 	.word	0x35afe535
 8012274:	3fe00000 	.word	0x3fe00000
 8012278:	000fffff 	.word	0x000fffff
 801227c:	7ff00000 	.word	0x7ff00000
 8012280:	7fefffff 	.word	0x7fefffff
 8012284:	3ff00000 	.word	0x3ff00000
 8012288:	3fe00000 	.word	0x3fe00000
 801228c:	7fe00000 	.word	0x7fe00000
 8012290:	7c9fffff 	.word	0x7c9fffff
 8012294:	9b08      	ldr	r3, [sp, #32]
 8012296:	b323      	cbz	r3, 80122e2 <_strtod_l+0xb5a>
 8012298:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801229c:	d821      	bhi.n	80122e2 <_strtod_l+0xb5a>
 801229e:	a328      	add	r3, pc, #160	@ (adr r3, 8012340 <_strtod_l+0xbb8>)
 80122a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a4:	4630      	mov	r0, r6
 80122a6:	4639      	mov	r1, r7
 80122a8:	f7ee fc32 	bl	8000b10 <__aeabi_dcmple>
 80122ac:	b1a0      	cbz	r0, 80122d8 <_strtod_l+0xb50>
 80122ae:	4639      	mov	r1, r7
 80122b0:	4630      	mov	r0, r6
 80122b2:	f7ee fc89 	bl	8000bc8 <__aeabi_d2uiz>
 80122b6:	2801      	cmp	r0, #1
 80122b8:	bf38      	it	cc
 80122ba:	2001      	movcc	r0, #1
 80122bc:	f7ee f932 	bl	8000524 <__aeabi_ui2d>
 80122c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122c2:	4606      	mov	r6, r0
 80122c4:	460f      	mov	r7, r1
 80122c6:	b9fb      	cbnz	r3, 8012308 <_strtod_l+0xb80>
 80122c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80122cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80122ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80122d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80122d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80122d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80122da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80122de:	1b5b      	subs	r3, r3, r5
 80122e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80122e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80122e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80122ea:	f7ff f8ef 	bl	80114cc <__ulp>
 80122ee:	4650      	mov	r0, sl
 80122f0:	ec53 2b10 	vmov	r2, r3, d0
 80122f4:	4659      	mov	r1, fp
 80122f6:	f7ee f98f 	bl	8000618 <__aeabi_dmul>
 80122fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80122fe:	f7ed ffd5 	bl	80002ac <__adddf3>
 8012302:	4682      	mov	sl, r0
 8012304:	468b      	mov	fp, r1
 8012306:	e770      	b.n	80121ea <_strtod_l+0xa62>
 8012308:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801230c:	e7e0      	b.n	80122d0 <_strtod_l+0xb48>
 801230e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012348 <_strtod_l+0xbc0>)
 8012310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012314:	f7ee fbf2 	bl	8000afc <__aeabi_dcmplt>
 8012318:	e798      	b.n	801224c <_strtod_l+0xac4>
 801231a:	2300      	movs	r3, #0
 801231c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801231e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012320:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012322:	6013      	str	r3, [r2, #0]
 8012324:	f7ff ba6d 	b.w	8011802 <_strtod_l+0x7a>
 8012328:	2a65      	cmp	r2, #101	@ 0x65
 801232a:	f43f ab66 	beq.w	80119fa <_strtod_l+0x272>
 801232e:	2a45      	cmp	r2, #69	@ 0x45
 8012330:	f43f ab63 	beq.w	80119fa <_strtod_l+0x272>
 8012334:	2301      	movs	r3, #1
 8012336:	f7ff bb9e 	b.w	8011a76 <_strtod_l+0x2ee>
 801233a:	bf00      	nop
 801233c:	f3af 8000 	nop.w
 8012340:	ffc00000 	.word	0xffc00000
 8012344:	41dfffff 	.word	0x41dfffff
 8012348:	94a03595 	.word	0x94a03595
 801234c:	3fcfffff 	.word	0x3fcfffff

08012350 <_strtod_r>:
 8012350:	4b01      	ldr	r3, [pc, #4]	@ (8012358 <_strtod_r+0x8>)
 8012352:	f7ff ba19 	b.w	8011788 <_strtod_l>
 8012356:	bf00      	nop
 8012358:	20000114 	.word	0x20000114

0801235c <_strtol_l.constprop.0>:
 801235c:	2b24      	cmp	r3, #36	@ 0x24
 801235e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012362:	4686      	mov	lr, r0
 8012364:	4690      	mov	r8, r2
 8012366:	d801      	bhi.n	801236c <_strtol_l.constprop.0+0x10>
 8012368:	2b01      	cmp	r3, #1
 801236a:	d106      	bne.n	801237a <_strtol_l.constprop.0+0x1e>
 801236c:	f7fd fe42 	bl	800fff4 <__errno>
 8012370:	2316      	movs	r3, #22
 8012372:	6003      	str	r3, [r0, #0]
 8012374:	2000      	movs	r0, #0
 8012376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801237a:	4834      	ldr	r0, [pc, #208]	@ (801244c <_strtol_l.constprop.0+0xf0>)
 801237c:	460d      	mov	r5, r1
 801237e:	462a      	mov	r2, r5
 8012380:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012384:	5d06      	ldrb	r6, [r0, r4]
 8012386:	f016 0608 	ands.w	r6, r6, #8
 801238a:	d1f8      	bne.n	801237e <_strtol_l.constprop.0+0x22>
 801238c:	2c2d      	cmp	r4, #45	@ 0x2d
 801238e:	d12d      	bne.n	80123ec <_strtol_l.constprop.0+0x90>
 8012390:	782c      	ldrb	r4, [r5, #0]
 8012392:	2601      	movs	r6, #1
 8012394:	1c95      	adds	r5, r2, #2
 8012396:	f033 0210 	bics.w	r2, r3, #16
 801239a:	d109      	bne.n	80123b0 <_strtol_l.constprop.0+0x54>
 801239c:	2c30      	cmp	r4, #48	@ 0x30
 801239e:	d12a      	bne.n	80123f6 <_strtol_l.constprop.0+0x9a>
 80123a0:	782a      	ldrb	r2, [r5, #0]
 80123a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80123a6:	2a58      	cmp	r2, #88	@ 0x58
 80123a8:	d125      	bne.n	80123f6 <_strtol_l.constprop.0+0x9a>
 80123aa:	786c      	ldrb	r4, [r5, #1]
 80123ac:	2310      	movs	r3, #16
 80123ae:	3502      	adds	r5, #2
 80123b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80123b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80123b8:	2200      	movs	r2, #0
 80123ba:	fbbc f9f3 	udiv	r9, ip, r3
 80123be:	4610      	mov	r0, r2
 80123c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80123c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80123c8:	2f09      	cmp	r7, #9
 80123ca:	d81b      	bhi.n	8012404 <_strtol_l.constprop.0+0xa8>
 80123cc:	463c      	mov	r4, r7
 80123ce:	42a3      	cmp	r3, r4
 80123d0:	dd27      	ble.n	8012422 <_strtol_l.constprop.0+0xc6>
 80123d2:	1c57      	adds	r7, r2, #1
 80123d4:	d007      	beq.n	80123e6 <_strtol_l.constprop.0+0x8a>
 80123d6:	4581      	cmp	r9, r0
 80123d8:	d320      	bcc.n	801241c <_strtol_l.constprop.0+0xc0>
 80123da:	d101      	bne.n	80123e0 <_strtol_l.constprop.0+0x84>
 80123dc:	45a2      	cmp	sl, r4
 80123de:	db1d      	blt.n	801241c <_strtol_l.constprop.0+0xc0>
 80123e0:	fb00 4003 	mla	r0, r0, r3, r4
 80123e4:	2201      	movs	r2, #1
 80123e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123ea:	e7eb      	b.n	80123c4 <_strtol_l.constprop.0+0x68>
 80123ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80123ee:	bf04      	itt	eq
 80123f0:	782c      	ldrbeq	r4, [r5, #0]
 80123f2:	1c95      	addeq	r5, r2, #2
 80123f4:	e7cf      	b.n	8012396 <_strtol_l.constprop.0+0x3a>
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d1da      	bne.n	80123b0 <_strtol_l.constprop.0+0x54>
 80123fa:	2c30      	cmp	r4, #48	@ 0x30
 80123fc:	bf0c      	ite	eq
 80123fe:	2308      	moveq	r3, #8
 8012400:	230a      	movne	r3, #10
 8012402:	e7d5      	b.n	80123b0 <_strtol_l.constprop.0+0x54>
 8012404:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012408:	2f19      	cmp	r7, #25
 801240a:	d801      	bhi.n	8012410 <_strtol_l.constprop.0+0xb4>
 801240c:	3c37      	subs	r4, #55	@ 0x37
 801240e:	e7de      	b.n	80123ce <_strtol_l.constprop.0+0x72>
 8012410:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012414:	2f19      	cmp	r7, #25
 8012416:	d804      	bhi.n	8012422 <_strtol_l.constprop.0+0xc6>
 8012418:	3c57      	subs	r4, #87	@ 0x57
 801241a:	e7d8      	b.n	80123ce <_strtol_l.constprop.0+0x72>
 801241c:	f04f 32ff 	mov.w	r2, #4294967295
 8012420:	e7e1      	b.n	80123e6 <_strtol_l.constprop.0+0x8a>
 8012422:	1c53      	adds	r3, r2, #1
 8012424:	d108      	bne.n	8012438 <_strtol_l.constprop.0+0xdc>
 8012426:	2322      	movs	r3, #34	@ 0x22
 8012428:	f8ce 3000 	str.w	r3, [lr]
 801242c:	4660      	mov	r0, ip
 801242e:	f1b8 0f00 	cmp.w	r8, #0
 8012432:	d0a0      	beq.n	8012376 <_strtol_l.constprop.0+0x1a>
 8012434:	1e69      	subs	r1, r5, #1
 8012436:	e006      	b.n	8012446 <_strtol_l.constprop.0+0xea>
 8012438:	b106      	cbz	r6, 801243c <_strtol_l.constprop.0+0xe0>
 801243a:	4240      	negs	r0, r0
 801243c:	f1b8 0f00 	cmp.w	r8, #0
 8012440:	d099      	beq.n	8012376 <_strtol_l.constprop.0+0x1a>
 8012442:	2a00      	cmp	r2, #0
 8012444:	d1f6      	bne.n	8012434 <_strtol_l.constprop.0+0xd8>
 8012446:	f8c8 1000 	str.w	r1, [r8]
 801244a:	e794      	b.n	8012376 <_strtol_l.constprop.0+0x1a>
 801244c:	080153b1 	.word	0x080153b1

08012450 <_strtol_r>:
 8012450:	f7ff bf84 	b.w	801235c <_strtol_l.constprop.0>

08012454 <__ssputs_r>:
 8012454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012458:	688e      	ldr	r6, [r1, #8]
 801245a:	461f      	mov	r7, r3
 801245c:	42be      	cmp	r6, r7
 801245e:	680b      	ldr	r3, [r1, #0]
 8012460:	4682      	mov	sl, r0
 8012462:	460c      	mov	r4, r1
 8012464:	4690      	mov	r8, r2
 8012466:	d82d      	bhi.n	80124c4 <__ssputs_r+0x70>
 8012468:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801246c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012470:	d026      	beq.n	80124c0 <__ssputs_r+0x6c>
 8012472:	6965      	ldr	r5, [r4, #20]
 8012474:	6909      	ldr	r1, [r1, #16]
 8012476:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801247a:	eba3 0901 	sub.w	r9, r3, r1
 801247e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012482:	1c7b      	adds	r3, r7, #1
 8012484:	444b      	add	r3, r9
 8012486:	106d      	asrs	r5, r5, #1
 8012488:	429d      	cmp	r5, r3
 801248a:	bf38      	it	cc
 801248c:	461d      	movcc	r5, r3
 801248e:	0553      	lsls	r3, r2, #21
 8012490:	d527      	bpl.n	80124e2 <__ssputs_r+0x8e>
 8012492:	4629      	mov	r1, r5
 8012494:	f7fc fbfc 	bl	800ec90 <_malloc_r>
 8012498:	4606      	mov	r6, r0
 801249a:	b360      	cbz	r0, 80124f6 <__ssputs_r+0xa2>
 801249c:	6921      	ldr	r1, [r4, #16]
 801249e:	464a      	mov	r2, r9
 80124a0:	f7fd fdd5 	bl	801004e <memcpy>
 80124a4:	89a3      	ldrh	r3, [r4, #12]
 80124a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80124aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124ae:	81a3      	strh	r3, [r4, #12]
 80124b0:	6126      	str	r6, [r4, #16]
 80124b2:	6165      	str	r5, [r4, #20]
 80124b4:	444e      	add	r6, r9
 80124b6:	eba5 0509 	sub.w	r5, r5, r9
 80124ba:	6026      	str	r6, [r4, #0]
 80124bc:	60a5      	str	r5, [r4, #8]
 80124be:	463e      	mov	r6, r7
 80124c0:	42be      	cmp	r6, r7
 80124c2:	d900      	bls.n	80124c6 <__ssputs_r+0x72>
 80124c4:	463e      	mov	r6, r7
 80124c6:	6820      	ldr	r0, [r4, #0]
 80124c8:	4632      	mov	r2, r6
 80124ca:	4641      	mov	r1, r8
 80124cc:	f000 fd65 	bl	8012f9a <memmove>
 80124d0:	68a3      	ldr	r3, [r4, #8]
 80124d2:	1b9b      	subs	r3, r3, r6
 80124d4:	60a3      	str	r3, [r4, #8]
 80124d6:	6823      	ldr	r3, [r4, #0]
 80124d8:	4433      	add	r3, r6
 80124da:	6023      	str	r3, [r4, #0]
 80124dc:	2000      	movs	r0, #0
 80124de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124e2:	462a      	mov	r2, r5
 80124e4:	f001 f8e1 	bl	80136aa <_realloc_r>
 80124e8:	4606      	mov	r6, r0
 80124ea:	2800      	cmp	r0, #0
 80124ec:	d1e0      	bne.n	80124b0 <__ssputs_r+0x5c>
 80124ee:	6921      	ldr	r1, [r4, #16]
 80124f0:	4650      	mov	r0, sl
 80124f2:	f7fe fc2d 	bl	8010d50 <_free_r>
 80124f6:	230c      	movs	r3, #12
 80124f8:	f8ca 3000 	str.w	r3, [sl]
 80124fc:	89a3      	ldrh	r3, [r4, #12]
 80124fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012502:	81a3      	strh	r3, [r4, #12]
 8012504:	f04f 30ff 	mov.w	r0, #4294967295
 8012508:	e7e9      	b.n	80124de <__ssputs_r+0x8a>
	...

0801250c <_svfiprintf_r>:
 801250c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012510:	4698      	mov	r8, r3
 8012512:	898b      	ldrh	r3, [r1, #12]
 8012514:	061b      	lsls	r3, r3, #24
 8012516:	b09d      	sub	sp, #116	@ 0x74
 8012518:	4607      	mov	r7, r0
 801251a:	460d      	mov	r5, r1
 801251c:	4614      	mov	r4, r2
 801251e:	d510      	bpl.n	8012542 <_svfiprintf_r+0x36>
 8012520:	690b      	ldr	r3, [r1, #16]
 8012522:	b973      	cbnz	r3, 8012542 <_svfiprintf_r+0x36>
 8012524:	2140      	movs	r1, #64	@ 0x40
 8012526:	f7fc fbb3 	bl	800ec90 <_malloc_r>
 801252a:	6028      	str	r0, [r5, #0]
 801252c:	6128      	str	r0, [r5, #16]
 801252e:	b930      	cbnz	r0, 801253e <_svfiprintf_r+0x32>
 8012530:	230c      	movs	r3, #12
 8012532:	603b      	str	r3, [r7, #0]
 8012534:	f04f 30ff 	mov.w	r0, #4294967295
 8012538:	b01d      	add	sp, #116	@ 0x74
 801253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801253e:	2340      	movs	r3, #64	@ 0x40
 8012540:	616b      	str	r3, [r5, #20]
 8012542:	2300      	movs	r3, #0
 8012544:	9309      	str	r3, [sp, #36]	@ 0x24
 8012546:	2320      	movs	r3, #32
 8012548:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801254c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012550:	2330      	movs	r3, #48	@ 0x30
 8012552:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80126f0 <_svfiprintf_r+0x1e4>
 8012556:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801255a:	f04f 0901 	mov.w	r9, #1
 801255e:	4623      	mov	r3, r4
 8012560:	469a      	mov	sl, r3
 8012562:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012566:	b10a      	cbz	r2, 801256c <_svfiprintf_r+0x60>
 8012568:	2a25      	cmp	r2, #37	@ 0x25
 801256a:	d1f9      	bne.n	8012560 <_svfiprintf_r+0x54>
 801256c:	ebba 0b04 	subs.w	fp, sl, r4
 8012570:	d00b      	beq.n	801258a <_svfiprintf_r+0x7e>
 8012572:	465b      	mov	r3, fp
 8012574:	4622      	mov	r2, r4
 8012576:	4629      	mov	r1, r5
 8012578:	4638      	mov	r0, r7
 801257a:	f7ff ff6b 	bl	8012454 <__ssputs_r>
 801257e:	3001      	adds	r0, #1
 8012580:	f000 80a7 	beq.w	80126d2 <_svfiprintf_r+0x1c6>
 8012584:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012586:	445a      	add	r2, fp
 8012588:	9209      	str	r2, [sp, #36]	@ 0x24
 801258a:	f89a 3000 	ldrb.w	r3, [sl]
 801258e:	2b00      	cmp	r3, #0
 8012590:	f000 809f 	beq.w	80126d2 <_svfiprintf_r+0x1c6>
 8012594:	2300      	movs	r3, #0
 8012596:	f04f 32ff 	mov.w	r2, #4294967295
 801259a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801259e:	f10a 0a01 	add.w	sl, sl, #1
 80125a2:	9304      	str	r3, [sp, #16]
 80125a4:	9307      	str	r3, [sp, #28]
 80125a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80125aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80125ac:	4654      	mov	r4, sl
 80125ae:	2205      	movs	r2, #5
 80125b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125b4:	484e      	ldr	r0, [pc, #312]	@ (80126f0 <_svfiprintf_r+0x1e4>)
 80125b6:	f7ed fe1b 	bl	80001f0 <memchr>
 80125ba:	9a04      	ldr	r2, [sp, #16]
 80125bc:	b9d8      	cbnz	r0, 80125f6 <_svfiprintf_r+0xea>
 80125be:	06d0      	lsls	r0, r2, #27
 80125c0:	bf44      	itt	mi
 80125c2:	2320      	movmi	r3, #32
 80125c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125c8:	0711      	lsls	r1, r2, #28
 80125ca:	bf44      	itt	mi
 80125cc:	232b      	movmi	r3, #43	@ 0x2b
 80125ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125d2:	f89a 3000 	ldrb.w	r3, [sl]
 80125d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80125d8:	d015      	beq.n	8012606 <_svfiprintf_r+0xfa>
 80125da:	9a07      	ldr	r2, [sp, #28]
 80125dc:	4654      	mov	r4, sl
 80125de:	2000      	movs	r0, #0
 80125e0:	f04f 0c0a 	mov.w	ip, #10
 80125e4:	4621      	mov	r1, r4
 80125e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125ea:	3b30      	subs	r3, #48	@ 0x30
 80125ec:	2b09      	cmp	r3, #9
 80125ee:	d94b      	bls.n	8012688 <_svfiprintf_r+0x17c>
 80125f0:	b1b0      	cbz	r0, 8012620 <_svfiprintf_r+0x114>
 80125f2:	9207      	str	r2, [sp, #28]
 80125f4:	e014      	b.n	8012620 <_svfiprintf_r+0x114>
 80125f6:	eba0 0308 	sub.w	r3, r0, r8
 80125fa:	fa09 f303 	lsl.w	r3, r9, r3
 80125fe:	4313      	orrs	r3, r2
 8012600:	9304      	str	r3, [sp, #16]
 8012602:	46a2      	mov	sl, r4
 8012604:	e7d2      	b.n	80125ac <_svfiprintf_r+0xa0>
 8012606:	9b03      	ldr	r3, [sp, #12]
 8012608:	1d19      	adds	r1, r3, #4
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	9103      	str	r1, [sp, #12]
 801260e:	2b00      	cmp	r3, #0
 8012610:	bfbb      	ittet	lt
 8012612:	425b      	neglt	r3, r3
 8012614:	f042 0202 	orrlt.w	r2, r2, #2
 8012618:	9307      	strge	r3, [sp, #28]
 801261a:	9307      	strlt	r3, [sp, #28]
 801261c:	bfb8      	it	lt
 801261e:	9204      	strlt	r2, [sp, #16]
 8012620:	7823      	ldrb	r3, [r4, #0]
 8012622:	2b2e      	cmp	r3, #46	@ 0x2e
 8012624:	d10a      	bne.n	801263c <_svfiprintf_r+0x130>
 8012626:	7863      	ldrb	r3, [r4, #1]
 8012628:	2b2a      	cmp	r3, #42	@ 0x2a
 801262a:	d132      	bne.n	8012692 <_svfiprintf_r+0x186>
 801262c:	9b03      	ldr	r3, [sp, #12]
 801262e:	1d1a      	adds	r2, r3, #4
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	9203      	str	r2, [sp, #12]
 8012634:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012638:	3402      	adds	r4, #2
 801263a:	9305      	str	r3, [sp, #20]
 801263c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012700 <_svfiprintf_r+0x1f4>
 8012640:	7821      	ldrb	r1, [r4, #0]
 8012642:	2203      	movs	r2, #3
 8012644:	4650      	mov	r0, sl
 8012646:	f7ed fdd3 	bl	80001f0 <memchr>
 801264a:	b138      	cbz	r0, 801265c <_svfiprintf_r+0x150>
 801264c:	9b04      	ldr	r3, [sp, #16]
 801264e:	eba0 000a 	sub.w	r0, r0, sl
 8012652:	2240      	movs	r2, #64	@ 0x40
 8012654:	4082      	lsls	r2, r0
 8012656:	4313      	orrs	r3, r2
 8012658:	3401      	adds	r4, #1
 801265a:	9304      	str	r3, [sp, #16]
 801265c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012660:	4824      	ldr	r0, [pc, #144]	@ (80126f4 <_svfiprintf_r+0x1e8>)
 8012662:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012666:	2206      	movs	r2, #6
 8012668:	f7ed fdc2 	bl	80001f0 <memchr>
 801266c:	2800      	cmp	r0, #0
 801266e:	d036      	beq.n	80126de <_svfiprintf_r+0x1d2>
 8012670:	4b21      	ldr	r3, [pc, #132]	@ (80126f8 <_svfiprintf_r+0x1ec>)
 8012672:	bb1b      	cbnz	r3, 80126bc <_svfiprintf_r+0x1b0>
 8012674:	9b03      	ldr	r3, [sp, #12]
 8012676:	3307      	adds	r3, #7
 8012678:	f023 0307 	bic.w	r3, r3, #7
 801267c:	3308      	adds	r3, #8
 801267e:	9303      	str	r3, [sp, #12]
 8012680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012682:	4433      	add	r3, r6
 8012684:	9309      	str	r3, [sp, #36]	@ 0x24
 8012686:	e76a      	b.n	801255e <_svfiprintf_r+0x52>
 8012688:	fb0c 3202 	mla	r2, ip, r2, r3
 801268c:	460c      	mov	r4, r1
 801268e:	2001      	movs	r0, #1
 8012690:	e7a8      	b.n	80125e4 <_svfiprintf_r+0xd8>
 8012692:	2300      	movs	r3, #0
 8012694:	3401      	adds	r4, #1
 8012696:	9305      	str	r3, [sp, #20]
 8012698:	4619      	mov	r1, r3
 801269a:	f04f 0c0a 	mov.w	ip, #10
 801269e:	4620      	mov	r0, r4
 80126a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126a4:	3a30      	subs	r2, #48	@ 0x30
 80126a6:	2a09      	cmp	r2, #9
 80126a8:	d903      	bls.n	80126b2 <_svfiprintf_r+0x1a6>
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d0c6      	beq.n	801263c <_svfiprintf_r+0x130>
 80126ae:	9105      	str	r1, [sp, #20]
 80126b0:	e7c4      	b.n	801263c <_svfiprintf_r+0x130>
 80126b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80126b6:	4604      	mov	r4, r0
 80126b8:	2301      	movs	r3, #1
 80126ba:	e7f0      	b.n	801269e <_svfiprintf_r+0x192>
 80126bc:	ab03      	add	r3, sp, #12
 80126be:	9300      	str	r3, [sp, #0]
 80126c0:	462a      	mov	r2, r5
 80126c2:	4b0e      	ldr	r3, [pc, #56]	@ (80126fc <_svfiprintf_r+0x1f0>)
 80126c4:	a904      	add	r1, sp, #16
 80126c6:	4638      	mov	r0, r7
 80126c8:	f7fc fc50 	bl	800ef6c <_printf_float>
 80126cc:	1c42      	adds	r2, r0, #1
 80126ce:	4606      	mov	r6, r0
 80126d0:	d1d6      	bne.n	8012680 <_svfiprintf_r+0x174>
 80126d2:	89ab      	ldrh	r3, [r5, #12]
 80126d4:	065b      	lsls	r3, r3, #25
 80126d6:	f53f af2d 	bmi.w	8012534 <_svfiprintf_r+0x28>
 80126da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126dc:	e72c      	b.n	8012538 <_svfiprintf_r+0x2c>
 80126de:	ab03      	add	r3, sp, #12
 80126e0:	9300      	str	r3, [sp, #0]
 80126e2:	462a      	mov	r2, r5
 80126e4:	4b05      	ldr	r3, [pc, #20]	@ (80126fc <_svfiprintf_r+0x1f0>)
 80126e6:	a904      	add	r1, sp, #16
 80126e8:	4638      	mov	r0, r7
 80126ea:	f7fc fed7 	bl	800f49c <_printf_i>
 80126ee:	e7ed      	b.n	80126cc <_svfiprintf_r+0x1c0>
 80126f0:	080154b1 	.word	0x080154b1
 80126f4:	080154bb 	.word	0x080154bb
 80126f8:	0800ef6d 	.word	0x0800ef6d
 80126fc:	08012455 	.word	0x08012455
 8012700:	080154b7 	.word	0x080154b7

08012704 <_sungetc_r>:
 8012704:	b538      	push	{r3, r4, r5, lr}
 8012706:	1c4b      	adds	r3, r1, #1
 8012708:	4614      	mov	r4, r2
 801270a:	d103      	bne.n	8012714 <_sungetc_r+0x10>
 801270c:	f04f 35ff 	mov.w	r5, #4294967295
 8012710:	4628      	mov	r0, r5
 8012712:	bd38      	pop	{r3, r4, r5, pc}
 8012714:	8993      	ldrh	r3, [r2, #12]
 8012716:	f023 0320 	bic.w	r3, r3, #32
 801271a:	8193      	strh	r3, [r2, #12]
 801271c:	6853      	ldr	r3, [r2, #4]
 801271e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8012720:	b2cd      	uxtb	r5, r1
 8012722:	b18a      	cbz	r2, 8012748 <_sungetc_r+0x44>
 8012724:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8012726:	429a      	cmp	r2, r3
 8012728:	dd08      	ble.n	801273c <_sungetc_r+0x38>
 801272a:	6823      	ldr	r3, [r4, #0]
 801272c:	1e5a      	subs	r2, r3, #1
 801272e:	6022      	str	r2, [r4, #0]
 8012730:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012734:	6863      	ldr	r3, [r4, #4]
 8012736:	3301      	adds	r3, #1
 8012738:	6063      	str	r3, [r4, #4]
 801273a:	e7e9      	b.n	8012710 <_sungetc_r+0xc>
 801273c:	4621      	mov	r1, r4
 801273e:	f000 fbf2 	bl	8012f26 <__submore>
 8012742:	2800      	cmp	r0, #0
 8012744:	d0f1      	beq.n	801272a <_sungetc_r+0x26>
 8012746:	e7e1      	b.n	801270c <_sungetc_r+0x8>
 8012748:	6921      	ldr	r1, [r4, #16]
 801274a:	6822      	ldr	r2, [r4, #0]
 801274c:	b141      	cbz	r1, 8012760 <_sungetc_r+0x5c>
 801274e:	4291      	cmp	r1, r2
 8012750:	d206      	bcs.n	8012760 <_sungetc_r+0x5c>
 8012752:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8012756:	42a9      	cmp	r1, r5
 8012758:	d102      	bne.n	8012760 <_sungetc_r+0x5c>
 801275a:	3a01      	subs	r2, #1
 801275c:	6022      	str	r2, [r4, #0]
 801275e:	e7ea      	b.n	8012736 <_sungetc_r+0x32>
 8012760:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8012764:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012768:	6363      	str	r3, [r4, #52]	@ 0x34
 801276a:	2303      	movs	r3, #3
 801276c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801276e:	4623      	mov	r3, r4
 8012770:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012774:	6023      	str	r3, [r4, #0]
 8012776:	2301      	movs	r3, #1
 8012778:	e7de      	b.n	8012738 <_sungetc_r+0x34>

0801277a <__ssrefill_r>:
 801277a:	b510      	push	{r4, lr}
 801277c:	460c      	mov	r4, r1
 801277e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012780:	b169      	cbz	r1, 801279e <__ssrefill_r+0x24>
 8012782:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012786:	4299      	cmp	r1, r3
 8012788:	d001      	beq.n	801278e <__ssrefill_r+0x14>
 801278a:	f7fe fae1 	bl	8010d50 <_free_r>
 801278e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012790:	6063      	str	r3, [r4, #4]
 8012792:	2000      	movs	r0, #0
 8012794:	6360      	str	r0, [r4, #52]	@ 0x34
 8012796:	b113      	cbz	r3, 801279e <__ssrefill_r+0x24>
 8012798:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801279a:	6023      	str	r3, [r4, #0]
 801279c:	bd10      	pop	{r4, pc}
 801279e:	6923      	ldr	r3, [r4, #16]
 80127a0:	6023      	str	r3, [r4, #0]
 80127a2:	2300      	movs	r3, #0
 80127a4:	6063      	str	r3, [r4, #4]
 80127a6:	89a3      	ldrh	r3, [r4, #12]
 80127a8:	f043 0320 	orr.w	r3, r3, #32
 80127ac:	81a3      	strh	r3, [r4, #12]
 80127ae:	f04f 30ff 	mov.w	r0, #4294967295
 80127b2:	e7f3      	b.n	801279c <__ssrefill_r+0x22>

080127b4 <__ssvfiscanf_r>:
 80127b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127b8:	460c      	mov	r4, r1
 80127ba:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80127be:	2100      	movs	r1, #0
 80127c0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80127c4:	49a5      	ldr	r1, [pc, #660]	@ (8012a5c <__ssvfiscanf_r+0x2a8>)
 80127c6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80127c8:	f10d 0804 	add.w	r8, sp, #4
 80127cc:	49a4      	ldr	r1, [pc, #656]	@ (8012a60 <__ssvfiscanf_r+0x2ac>)
 80127ce:	4fa5      	ldr	r7, [pc, #660]	@ (8012a64 <__ssvfiscanf_r+0x2b0>)
 80127d0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80127d4:	4606      	mov	r6, r0
 80127d6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80127d8:	9300      	str	r3, [sp, #0]
 80127da:	7813      	ldrb	r3, [r2, #0]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	f000 8158 	beq.w	8012a92 <__ssvfiscanf_r+0x2de>
 80127e2:	5cf9      	ldrb	r1, [r7, r3]
 80127e4:	f011 0108 	ands.w	r1, r1, #8
 80127e8:	f102 0501 	add.w	r5, r2, #1
 80127ec:	d019      	beq.n	8012822 <__ssvfiscanf_r+0x6e>
 80127ee:	6863      	ldr	r3, [r4, #4]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	dd0f      	ble.n	8012814 <__ssvfiscanf_r+0x60>
 80127f4:	6823      	ldr	r3, [r4, #0]
 80127f6:	781a      	ldrb	r2, [r3, #0]
 80127f8:	5cba      	ldrb	r2, [r7, r2]
 80127fa:	0712      	lsls	r2, r2, #28
 80127fc:	d401      	bmi.n	8012802 <__ssvfiscanf_r+0x4e>
 80127fe:	462a      	mov	r2, r5
 8012800:	e7eb      	b.n	80127da <__ssvfiscanf_r+0x26>
 8012802:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012804:	3201      	adds	r2, #1
 8012806:	9245      	str	r2, [sp, #276]	@ 0x114
 8012808:	6862      	ldr	r2, [r4, #4]
 801280a:	3301      	adds	r3, #1
 801280c:	3a01      	subs	r2, #1
 801280e:	6062      	str	r2, [r4, #4]
 8012810:	6023      	str	r3, [r4, #0]
 8012812:	e7ec      	b.n	80127ee <__ssvfiscanf_r+0x3a>
 8012814:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012816:	4621      	mov	r1, r4
 8012818:	4630      	mov	r0, r6
 801281a:	4798      	blx	r3
 801281c:	2800      	cmp	r0, #0
 801281e:	d0e9      	beq.n	80127f4 <__ssvfiscanf_r+0x40>
 8012820:	e7ed      	b.n	80127fe <__ssvfiscanf_r+0x4a>
 8012822:	2b25      	cmp	r3, #37	@ 0x25
 8012824:	d012      	beq.n	801284c <__ssvfiscanf_r+0x98>
 8012826:	4699      	mov	r9, r3
 8012828:	6863      	ldr	r3, [r4, #4]
 801282a:	2b00      	cmp	r3, #0
 801282c:	f340 8093 	ble.w	8012956 <__ssvfiscanf_r+0x1a2>
 8012830:	6822      	ldr	r2, [r4, #0]
 8012832:	7813      	ldrb	r3, [r2, #0]
 8012834:	454b      	cmp	r3, r9
 8012836:	f040 812c 	bne.w	8012a92 <__ssvfiscanf_r+0x2de>
 801283a:	6863      	ldr	r3, [r4, #4]
 801283c:	3b01      	subs	r3, #1
 801283e:	6063      	str	r3, [r4, #4]
 8012840:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8012842:	3201      	adds	r2, #1
 8012844:	3301      	adds	r3, #1
 8012846:	6022      	str	r2, [r4, #0]
 8012848:	9345      	str	r3, [sp, #276]	@ 0x114
 801284a:	e7d8      	b.n	80127fe <__ssvfiscanf_r+0x4a>
 801284c:	9141      	str	r1, [sp, #260]	@ 0x104
 801284e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012850:	7853      	ldrb	r3, [r2, #1]
 8012852:	2b2a      	cmp	r3, #42	@ 0x2a
 8012854:	bf02      	ittt	eq
 8012856:	2310      	moveq	r3, #16
 8012858:	1c95      	addeq	r5, r2, #2
 801285a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801285c:	220a      	movs	r2, #10
 801285e:	46a9      	mov	r9, r5
 8012860:	f819 1b01 	ldrb.w	r1, [r9], #1
 8012864:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012868:	2b09      	cmp	r3, #9
 801286a:	d91e      	bls.n	80128aa <__ssvfiscanf_r+0xf6>
 801286c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8012a68 <__ssvfiscanf_r+0x2b4>
 8012870:	2203      	movs	r2, #3
 8012872:	4650      	mov	r0, sl
 8012874:	f7ed fcbc 	bl	80001f0 <memchr>
 8012878:	b138      	cbz	r0, 801288a <__ssvfiscanf_r+0xd6>
 801287a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801287c:	eba0 000a 	sub.w	r0, r0, sl
 8012880:	2301      	movs	r3, #1
 8012882:	4083      	lsls	r3, r0
 8012884:	4313      	orrs	r3, r2
 8012886:	9341      	str	r3, [sp, #260]	@ 0x104
 8012888:	464d      	mov	r5, r9
 801288a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801288e:	2b78      	cmp	r3, #120	@ 0x78
 8012890:	d806      	bhi.n	80128a0 <__ssvfiscanf_r+0xec>
 8012892:	2b57      	cmp	r3, #87	@ 0x57
 8012894:	d810      	bhi.n	80128b8 <__ssvfiscanf_r+0x104>
 8012896:	2b25      	cmp	r3, #37	@ 0x25
 8012898:	d0c5      	beq.n	8012826 <__ssvfiscanf_r+0x72>
 801289a:	d857      	bhi.n	801294c <__ssvfiscanf_r+0x198>
 801289c:	2b00      	cmp	r3, #0
 801289e:	d065      	beq.n	801296c <__ssvfiscanf_r+0x1b8>
 80128a0:	2303      	movs	r3, #3
 80128a2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80128a4:	230a      	movs	r3, #10
 80128a6:	9342      	str	r3, [sp, #264]	@ 0x108
 80128a8:	e078      	b.n	801299c <__ssvfiscanf_r+0x1e8>
 80128aa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80128ac:	fb02 1103 	mla	r1, r2, r3, r1
 80128b0:	3930      	subs	r1, #48	@ 0x30
 80128b2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80128b4:	464d      	mov	r5, r9
 80128b6:	e7d2      	b.n	801285e <__ssvfiscanf_r+0xaa>
 80128b8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80128bc:	2a20      	cmp	r2, #32
 80128be:	d8ef      	bhi.n	80128a0 <__ssvfiscanf_r+0xec>
 80128c0:	a101      	add	r1, pc, #4	@ (adr r1, 80128c8 <__ssvfiscanf_r+0x114>)
 80128c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80128c6:	bf00      	nop
 80128c8:	0801297b 	.word	0x0801297b
 80128cc:	080128a1 	.word	0x080128a1
 80128d0:	080128a1 	.word	0x080128a1
 80128d4:	080129d5 	.word	0x080129d5
 80128d8:	080128a1 	.word	0x080128a1
 80128dc:	080128a1 	.word	0x080128a1
 80128e0:	080128a1 	.word	0x080128a1
 80128e4:	080128a1 	.word	0x080128a1
 80128e8:	080128a1 	.word	0x080128a1
 80128ec:	080128a1 	.word	0x080128a1
 80128f0:	080128a1 	.word	0x080128a1
 80128f4:	080129eb 	.word	0x080129eb
 80128f8:	080129d1 	.word	0x080129d1
 80128fc:	08012953 	.word	0x08012953
 8012900:	08012953 	.word	0x08012953
 8012904:	08012953 	.word	0x08012953
 8012908:	080128a1 	.word	0x080128a1
 801290c:	0801298d 	.word	0x0801298d
 8012910:	080128a1 	.word	0x080128a1
 8012914:	080128a1 	.word	0x080128a1
 8012918:	080128a1 	.word	0x080128a1
 801291c:	080128a1 	.word	0x080128a1
 8012920:	080129fb 	.word	0x080129fb
 8012924:	08012995 	.word	0x08012995
 8012928:	08012973 	.word	0x08012973
 801292c:	080128a1 	.word	0x080128a1
 8012930:	080128a1 	.word	0x080128a1
 8012934:	080129f7 	.word	0x080129f7
 8012938:	080128a1 	.word	0x080128a1
 801293c:	080129d1 	.word	0x080129d1
 8012940:	080128a1 	.word	0x080128a1
 8012944:	080128a1 	.word	0x080128a1
 8012948:	0801297b 	.word	0x0801297b
 801294c:	3b45      	subs	r3, #69	@ 0x45
 801294e:	2b02      	cmp	r3, #2
 8012950:	d8a6      	bhi.n	80128a0 <__ssvfiscanf_r+0xec>
 8012952:	2305      	movs	r3, #5
 8012954:	e021      	b.n	801299a <__ssvfiscanf_r+0x1e6>
 8012956:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012958:	4621      	mov	r1, r4
 801295a:	4630      	mov	r0, r6
 801295c:	4798      	blx	r3
 801295e:	2800      	cmp	r0, #0
 8012960:	f43f af66 	beq.w	8012830 <__ssvfiscanf_r+0x7c>
 8012964:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012966:	2800      	cmp	r0, #0
 8012968:	f040 808b 	bne.w	8012a82 <__ssvfiscanf_r+0x2ce>
 801296c:	f04f 30ff 	mov.w	r0, #4294967295
 8012970:	e08b      	b.n	8012a8a <__ssvfiscanf_r+0x2d6>
 8012972:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012974:	f042 0220 	orr.w	r2, r2, #32
 8012978:	9241      	str	r2, [sp, #260]	@ 0x104
 801297a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801297c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012980:	9241      	str	r2, [sp, #260]	@ 0x104
 8012982:	2210      	movs	r2, #16
 8012984:	2b6e      	cmp	r3, #110	@ 0x6e
 8012986:	9242      	str	r2, [sp, #264]	@ 0x108
 8012988:	d902      	bls.n	8012990 <__ssvfiscanf_r+0x1dc>
 801298a:	e005      	b.n	8012998 <__ssvfiscanf_r+0x1e4>
 801298c:	2300      	movs	r3, #0
 801298e:	9342      	str	r3, [sp, #264]	@ 0x108
 8012990:	2303      	movs	r3, #3
 8012992:	e002      	b.n	801299a <__ssvfiscanf_r+0x1e6>
 8012994:	2308      	movs	r3, #8
 8012996:	9342      	str	r3, [sp, #264]	@ 0x108
 8012998:	2304      	movs	r3, #4
 801299a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801299c:	6863      	ldr	r3, [r4, #4]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	dd39      	ble.n	8012a16 <__ssvfiscanf_r+0x262>
 80129a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80129a4:	0659      	lsls	r1, r3, #25
 80129a6:	d404      	bmi.n	80129b2 <__ssvfiscanf_r+0x1fe>
 80129a8:	6823      	ldr	r3, [r4, #0]
 80129aa:	781a      	ldrb	r2, [r3, #0]
 80129ac:	5cba      	ldrb	r2, [r7, r2]
 80129ae:	0712      	lsls	r2, r2, #28
 80129b0:	d438      	bmi.n	8012a24 <__ssvfiscanf_r+0x270>
 80129b2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80129b4:	2b02      	cmp	r3, #2
 80129b6:	dc47      	bgt.n	8012a48 <__ssvfiscanf_r+0x294>
 80129b8:	466b      	mov	r3, sp
 80129ba:	4622      	mov	r2, r4
 80129bc:	a941      	add	r1, sp, #260	@ 0x104
 80129be:	4630      	mov	r0, r6
 80129c0:	f000 f86c 	bl	8012a9c <_scanf_chars>
 80129c4:	2801      	cmp	r0, #1
 80129c6:	d064      	beq.n	8012a92 <__ssvfiscanf_r+0x2de>
 80129c8:	2802      	cmp	r0, #2
 80129ca:	f47f af18 	bne.w	80127fe <__ssvfiscanf_r+0x4a>
 80129ce:	e7c9      	b.n	8012964 <__ssvfiscanf_r+0x1b0>
 80129d0:	220a      	movs	r2, #10
 80129d2:	e7d7      	b.n	8012984 <__ssvfiscanf_r+0x1d0>
 80129d4:	4629      	mov	r1, r5
 80129d6:	4640      	mov	r0, r8
 80129d8:	f000 fa6c 	bl	8012eb4 <__sccl>
 80129dc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80129de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129e2:	9341      	str	r3, [sp, #260]	@ 0x104
 80129e4:	4605      	mov	r5, r0
 80129e6:	2301      	movs	r3, #1
 80129e8:	e7d7      	b.n	801299a <__ssvfiscanf_r+0x1e6>
 80129ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80129ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80129f0:	9341      	str	r3, [sp, #260]	@ 0x104
 80129f2:	2300      	movs	r3, #0
 80129f4:	e7d1      	b.n	801299a <__ssvfiscanf_r+0x1e6>
 80129f6:	2302      	movs	r3, #2
 80129f8:	e7cf      	b.n	801299a <__ssvfiscanf_r+0x1e6>
 80129fa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80129fc:	06c3      	lsls	r3, r0, #27
 80129fe:	f53f aefe 	bmi.w	80127fe <__ssvfiscanf_r+0x4a>
 8012a02:	9b00      	ldr	r3, [sp, #0]
 8012a04:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012a06:	1d19      	adds	r1, r3, #4
 8012a08:	9100      	str	r1, [sp, #0]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	07c0      	lsls	r0, r0, #31
 8012a0e:	bf4c      	ite	mi
 8012a10:	801a      	strhmi	r2, [r3, #0]
 8012a12:	601a      	strpl	r2, [r3, #0]
 8012a14:	e6f3      	b.n	80127fe <__ssvfiscanf_r+0x4a>
 8012a16:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012a18:	4621      	mov	r1, r4
 8012a1a:	4630      	mov	r0, r6
 8012a1c:	4798      	blx	r3
 8012a1e:	2800      	cmp	r0, #0
 8012a20:	d0bf      	beq.n	80129a2 <__ssvfiscanf_r+0x1ee>
 8012a22:	e79f      	b.n	8012964 <__ssvfiscanf_r+0x1b0>
 8012a24:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012a26:	3201      	adds	r2, #1
 8012a28:	9245      	str	r2, [sp, #276]	@ 0x114
 8012a2a:	6862      	ldr	r2, [r4, #4]
 8012a2c:	3a01      	subs	r2, #1
 8012a2e:	2a00      	cmp	r2, #0
 8012a30:	6062      	str	r2, [r4, #4]
 8012a32:	dd02      	ble.n	8012a3a <__ssvfiscanf_r+0x286>
 8012a34:	3301      	adds	r3, #1
 8012a36:	6023      	str	r3, [r4, #0]
 8012a38:	e7b6      	b.n	80129a8 <__ssvfiscanf_r+0x1f4>
 8012a3a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012a3c:	4621      	mov	r1, r4
 8012a3e:	4630      	mov	r0, r6
 8012a40:	4798      	blx	r3
 8012a42:	2800      	cmp	r0, #0
 8012a44:	d0b0      	beq.n	80129a8 <__ssvfiscanf_r+0x1f4>
 8012a46:	e78d      	b.n	8012964 <__ssvfiscanf_r+0x1b0>
 8012a48:	2b04      	cmp	r3, #4
 8012a4a:	dc0f      	bgt.n	8012a6c <__ssvfiscanf_r+0x2b8>
 8012a4c:	466b      	mov	r3, sp
 8012a4e:	4622      	mov	r2, r4
 8012a50:	a941      	add	r1, sp, #260	@ 0x104
 8012a52:	4630      	mov	r0, r6
 8012a54:	f000 f87c 	bl	8012b50 <_scanf_i>
 8012a58:	e7b4      	b.n	80129c4 <__ssvfiscanf_r+0x210>
 8012a5a:	bf00      	nop
 8012a5c:	08012705 	.word	0x08012705
 8012a60:	0801277b 	.word	0x0801277b
 8012a64:	080153b1 	.word	0x080153b1
 8012a68:	080154b7 	.word	0x080154b7
 8012a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8012a98 <__ssvfiscanf_r+0x2e4>)
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	f43f aec5 	beq.w	80127fe <__ssvfiscanf_r+0x4a>
 8012a74:	466b      	mov	r3, sp
 8012a76:	4622      	mov	r2, r4
 8012a78:	a941      	add	r1, sp, #260	@ 0x104
 8012a7a:	4630      	mov	r0, r6
 8012a7c:	f7fc fe2e 	bl	800f6dc <_scanf_float>
 8012a80:	e7a0      	b.n	80129c4 <__ssvfiscanf_r+0x210>
 8012a82:	89a3      	ldrh	r3, [r4, #12]
 8012a84:	065b      	lsls	r3, r3, #25
 8012a86:	f53f af71 	bmi.w	801296c <__ssvfiscanf_r+0x1b8>
 8012a8a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a92:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012a94:	e7f9      	b.n	8012a8a <__ssvfiscanf_r+0x2d6>
 8012a96:	bf00      	nop
 8012a98:	0800f6dd 	.word	0x0800f6dd

08012a9c <_scanf_chars>:
 8012a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012aa0:	4615      	mov	r5, r2
 8012aa2:	688a      	ldr	r2, [r1, #8]
 8012aa4:	4680      	mov	r8, r0
 8012aa6:	460c      	mov	r4, r1
 8012aa8:	b932      	cbnz	r2, 8012ab8 <_scanf_chars+0x1c>
 8012aaa:	698a      	ldr	r2, [r1, #24]
 8012aac:	2a00      	cmp	r2, #0
 8012aae:	bf14      	ite	ne
 8012ab0:	f04f 32ff 	movne.w	r2, #4294967295
 8012ab4:	2201      	moveq	r2, #1
 8012ab6:	608a      	str	r2, [r1, #8]
 8012ab8:	6822      	ldr	r2, [r4, #0]
 8012aba:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012b4c <_scanf_chars+0xb0>
 8012abe:	06d1      	lsls	r1, r2, #27
 8012ac0:	bf5f      	itttt	pl
 8012ac2:	681a      	ldrpl	r2, [r3, #0]
 8012ac4:	1d11      	addpl	r1, r2, #4
 8012ac6:	6019      	strpl	r1, [r3, #0]
 8012ac8:	6816      	ldrpl	r6, [r2, #0]
 8012aca:	2700      	movs	r7, #0
 8012acc:	69a0      	ldr	r0, [r4, #24]
 8012ace:	b188      	cbz	r0, 8012af4 <_scanf_chars+0x58>
 8012ad0:	2801      	cmp	r0, #1
 8012ad2:	d107      	bne.n	8012ae4 <_scanf_chars+0x48>
 8012ad4:	682b      	ldr	r3, [r5, #0]
 8012ad6:	781a      	ldrb	r2, [r3, #0]
 8012ad8:	6963      	ldr	r3, [r4, #20]
 8012ada:	5c9b      	ldrb	r3, [r3, r2]
 8012adc:	b953      	cbnz	r3, 8012af4 <_scanf_chars+0x58>
 8012ade:	2f00      	cmp	r7, #0
 8012ae0:	d031      	beq.n	8012b46 <_scanf_chars+0xaa>
 8012ae2:	e022      	b.n	8012b2a <_scanf_chars+0x8e>
 8012ae4:	2802      	cmp	r0, #2
 8012ae6:	d120      	bne.n	8012b2a <_scanf_chars+0x8e>
 8012ae8:	682b      	ldr	r3, [r5, #0]
 8012aea:	781b      	ldrb	r3, [r3, #0]
 8012aec:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012af0:	071b      	lsls	r3, r3, #28
 8012af2:	d41a      	bmi.n	8012b2a <_scanf_chars+0x8e>
 8012af4:	6823      	ldr	r3, [r4, #0]
 8012af6:	06da      	lsls	r2, r3, #27
 8012af8:	bf5e      	ittt	pl
 8012afa:	682b      	ldrpl	r3, [r5, #0]
 8012afc:	781b      	ldrbpl	r3, [r3, #0]
 8012afe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012b02:	682a      	ldr	r2, [r5, #0]
 8012b04:	686b      	ldr	r3, [r5, #4]
 8012b06:	3201      	adds	r2, #1
 8012b08:	602a      	str	r2, [r5, #0]
 8012b0a:	68a2      	ldr	r2, [r4, #8]
 8012b0c:	3b01      	subs	r3, #1
 8012b0e:	3a01      	subs	r2, #1
 8012b10:	606b      	str	r3, [r5, #4]
 8012b12:	3701      	adds	r7, #1
 8012b14:	60a2      	str	r2, [r4, #8]
 8012b16:	b142      	cbz	r2, 8012b2a <_scanf_chars+0x8e>
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	dcd7      	bgt.n	8012acc <_scanf_chars+0x30>
 8012b1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012b20:	4629      	mov	r1, r5
 8012b22:	4640      	mov	r0, r8
 8012b24:	4798      	blx	r3
 8012b26:	2800      	cmp	r0, #0
 8012b28:	d0d0      	beq.n	8012acc <_scanf_chars+0x30>
 8012b2a:	6823      	ldr	r3, [r4, #0]
 8012b2c:	f013 0310 	ands.w	r3, r3, #16
 8012b30:	d105      	bne.n	8012b3e <_scanf_chars+0xa2>
 8012b32:	68e2      	ldr	r2, [r4, #12]
 8012b34:	3201      	adds	r2, #1
 8012b36:	60e2      	str	r2, [r4, #12]
 8012b38:	69a2      	ldr	r2, [r4, #24]
 8012b3a:	b102      	cbz	r2, 8012b3e <_scanf_chars+0xa2>
 8012b3c:	7033      	strb	r3, [r6, #0]
 8012b3e:	6923      	ldr	r3, [r4, #16]
 8012b40:	443b      	add	r3, r7
 8012b42:	6123      	str	r3, [r4, #16]
 8012b44:	2000      	movs	r0, #0
 8012b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b4a:	bf00      	nop
 8012b4c:	080153b1 	.word	0x080153b1

08012b50 <_scanf_i>:
 8012b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b54:	4698      	mov	r8, r3
 8012b56:	4b74      	ldr	r3, [pc, #464]	@ (8012d28 <_scanf_i+0x1d8>)
 8012b58:	460c      	mov	r4, r1
 8012b5a:	4682      	mov	sl, r0
 8012b5c:	4616      	mov	r6, r2
 8012b5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b62:	b087      	sub	sp, #28
 8012b64:	ab03      	add	r3, sp, #12
 8012b66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012b6a:	4b70      	ldr	r3, [pc, #448]	@ (8012d2c <_scanf_i+0x1dc>)
 8012b6c:	69a1      	ldr	r1, [r4, #24]
 8012b6e:	4a70      	ldr	r2, [pc, #448]	@ (8012d30 <_scanf_i+0x1e0>)
 8012b70:	2903      	cmp	r1, #3
 8012b72:	bf08      	it	eq
 8012b74:	461a      	moveq	r2, r3
 8012b76:	68a3      	ldr	r3, [r4, #8]
 8012b78:	9201      	str	r2, [sp, #4]
 8012b7a:	1e5a      	subs	r2, r3, #1
 8012b7c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012b80:	bf88      	it	hi
 8012b82:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012b86:	4627      	mov	r7, r4
 8012b88:	bf82      	ittt	hi
 8012b8a:	eb03 0905 	addhi.w	r9, r3, r5
 8012b8e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012b92:	60a3      	strhi	r3, [r4, #8]
 8012b94:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012b98:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012b9c:	bf98      	it	ls
 8012b9e:	f04f 0900 	movls.w	r9, #0
 8012ba2:	6023      	str	r3, [r4, #0]
 8012ba4:	463d      	mov	r5, r7
 8012ba6:	f04f 0b00 	mov.w	fp, #0
 8012baa:	6831      	ldr	r1, [r6, #0]
 8012bac:	ab03      	add	r3, sp, #12
 8012bae:	7809      	ldrb	r1, [r1, #0]
 8012bb0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012bb4:	2202      	movs	r2, #2
 8012bb6:	f7ed fb1b 	bl	80001f0 <memchr>
 8012bba:	b328      	cbz	r0, 8012c08 <_scanf_i+0xb8>
 8012bbc:	f1bb 0f01 	cmp.w	fp, #1
 8012bc0:	d159      	bne.n	8012c76 <_scanf_i+0x126>
 8012bc2:	6862      	ldr	r2, [r4, #4]
 8012bc4:	b92a      	cbnz	r2, 8012bd2 <_scanf_i+0x82>
 8012bc6:	6822      	ldr	r2, [r4, #0]
 8012bc8:	2108      	movs	r1, #8
 8012bca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012bce:	6061      	str	r1, [r4, #4]
 8012bd0:	6022      	str	r2, [r4, #0]
 8012bd2:	6822      	ldr	r2, [r4, #0]
 8012bd4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012bd8:	6022      	str	r2, [r4, #0]
 8012bda:	68a2      	ldr	r2, [r4, #8]
 8012bdc:	1e51      	subs	r1, r2, #1
 8012bde:	60a1      	str	r1, [r4, #8]
 8012be0:	b192      	cbz	r2, 8012c08 <_scanf_i+0xb8>
 8012be2:	6832      	ldr	r2, [r6, #0]
 8012be4:	1c51      	adds	r1, r2, #1
 8012be6:	6031      	str	r1, [r6, #0]
 8012be8:	7812      	ldrb	r2, [r2, #0]
 8012bea:	f805 2b01 	strb.w	r2, [r5], #1
 8012bee:	6872      	ldr	r2, [r6, #4]
 8012bf0:	3a01      	subs	r2, #1
 8012bf2:	2a00      	cmp	r2, #0
 8012bf4:	6072      	str	r2, [r6, #4]
 8012bf6:	dc07      	bgt.n	8012c08 <_scanf_i+0xb8>
 8012bf8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012bfc:	4631      	mov	r1, r6
 8012bfe:	4650      	mov	r0, sl
 8012c00:	4790      	blx	r2
 8012c02:	2800      	cmp	r0, #0
 8012c04:	f040 8085 	bne.w	8012d12 <_scanf_i+0x1c2>
 8012c08:	f10b 0b01 	add.w	fp, fp, #1
 8012c0c:	f1bb 0f03 	cmp.w	fp, #3
 8012c10:	d1cb      	bne.n	8012baa <_scanf_i+0x5a>
 8012c12:	6863      	ldr	r3, [r4, #4]
 8012c14:	b90b      	cbnz	r3, 8012c1a <_scanf_i+0xca>
 8012c16:	230a      	movs	r3, #10
 8012c18:	6063      	str	r3, [r4, #4]
 8012c1a:	6863      	ldr	r3, [r4, #4]
 8012c1c:	4945      	ldr	r1, [pc, #276]	@ (8012d34 <_scanf_i+0x1e4>)
 8012c1e:	6960      	ldr	r0, [r4, #20]
 8012c20:	1ac9      	subs	r1, r1, r3
 8012c22:	f000 f947 	bl	8012eb4 <__sccl>
 8012c26:	f04f 0b00 	mov.w	fp, #0
 8012c2a:	68a3      	ldr	r3, [r4, #8]
 8012c2c:	6822      	ldr	r2, [r4, #0]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d03d      	beq.n	8012cae <_scanf_i+0x15e>
 8012c32:	6831      	ldr	r1, [r6, #0]
 8012c34:	6960      	ldr	r0, [r4, #20]
 8012c36:	f891 c000 	ldrb.w	ip, [r1]
 8012c3a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012c3e:	2800      	cmp	r0, #0
 8012c40:	d035      	beq.n	8012cae <_scanf_i+0x15e>
 8012c42:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012c46:	d124      	bne.n	8012c92 <_scanf_i+0x142>
 8012c48:	0510      	lsls	r0, r2, #20
 8012c4a:	d522      	bpl.n	8012c92 <_scanf_i+0x142>
 8012c4c:	f10b 0b01 	add.w	fp, fp, #1
 8012c50:	f1b9 0f00 	cmp.w	r9, #0
 8012c54:	d003      	beq.n	8012c5e <_scanf_i+0x10e>
 8012c56:	3301      	adds	r3, #1
 8012c58:	f109 39ff 	add.w	r9, r9, #4294967295
 8012c5c:	60a3      	str	r3, [r4, #8]
 8012c5e:	6873      	ldr	r3, [r6, #4]
 8012c60:	3b01      	subs	r3, #1
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	6073      	str	r3, [r6, #4]
 8012c66:	dd1b      	ble.n	8012ca0 <_scanf_i+0x150>
 8012c68:	6833      	ldr	r3, [r6, #0]
 8012c6a:	3301      	adds	r3, #1
 8012c6c:	6033      	str	r3, [r6, #0]
 8012c6e:	68a3      	ldr	r3, [r4, #8]
 8012c70:	3b01      	subs	r3, #1
 8012c72:	60a3      	str	r3, [r4, #8]
 8012c74:	e7d9      	b.n	8012c2a <_scanf_i+0xda>
 8012c76:	f1bb 0f02 	cmp.w	fp, #2
 8012c7a:	d1ae      	bne.n	8012bda <_scanf_i+0x8a>
 8012c7c:	6822      	ldr	r2, [r4, #0]
 8012c7e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012c82:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012c86:	d1bf      	bne.n	8012c08 <_scanf_i+0xb8>
 8012c88:	2110      	movs	r1, #16
 8012c8a:	6061      	str	r1, [r4, #4]
 8012c8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012c90:	e7a2      	b.n	8012bd8 <_scanf_i+0x88>
 8012c92:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012c96:	6022      	str	r2, [r4, #0]
 8012c98:	780b      	ldrb	r3, [r1, #0]
 8012c9a:	f805 3b01 	strb.w	r3, [r5], #1
 8012c9e:	e7de      	b.n	8012c5e <_scanf_i+0x10e>
 8012ca0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012ca4:	4631      	mov	r1, r6
 8012ca6:	4650      	mov	r0, sl
 8012ca8:	4798      	blx	r3
 8012caa:	2800      	cmp	r0, #0
 8012cac:	d0df      	beq.n	8012c6e <_scanf_i+0x11e>
 8012cae:	6823      	ldr	r3, [r4, #0]
 8012cb0:	05d9      	lsls	r1, r3, #23
 8012cb2:	d50d      	bpl.n	8012cd0 <_scanf_i+0x180>
 8012cb4:	42bd      	cmp	r5, r7
 8012cb6:	d909      	bls.n	8012ccc <_scanf_i+0x17c>
 8012cb8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012cbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012cc0:	4632      	mov	r2, r6
 8012cc2:	4650      	mov	r0, sl
 8012cc4:	4798      	blx	r3
 8012cc6:	f105 39ff 	add.w	r9, r5, #4294967295
 8012cca:	464d      	mov	r5, r9
 8012ccc:	42bd      	cmp	r5, r7
 8012cce:	d028      	beq.n	8012d22 <_scanf_i+0x1d2>
 8012cd0:	6822      	ldr	r2, [r4, #0]
 8012cd2:	f012 0210 	ands.w	r2, r2, #16
 8012cd6:	d113      	bne.n	8012d00 <_scanf_i+0x1b0>
 8012cd8:	702a      	strb	r2, [r5, #0]
 8012cda:	6863      	ldr	r3, [r4, #4]
 8012cdc:	9e01      	ldr	r6, [sp, #4]
 8012cde:	4639      	mov	r1, r7
 8012ce0:	4650      	mov	r0, sl
 8012ce2:	47b0      	blx	r6
 8012ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8012ce8:	6821      	ldr	r1, [r4, #0]
 8012cea:	1d1a      	adds	r2, r3, #4
 8012cec:	f8c8 2000 	str.w	r2, [r8]
 8012cf0:	f011 0f20 	tst.w	r1, #32
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	d00f      	beq.n	8012d18 <_scanf_i+0x1c8>
 8012cf8:	6018      	str	r0, [r3, #0]
 8012cfa:	68e3      	ldr	r3, [r4, #12]
 8012cfc:	3301      	adds	r3, #1
 8012cfe:	60e3      	str	r3, [r4, #12]
 8012d00:	6923      	ldr	r3, [r4, #16]
 8012d02:	1bed      	subs	r5, r5, r7
 8012d04:	445d      	add	r5, fp
 8012d06:	442b      	add	r3, r5
 8012d08:	6123      	str	r3, [r4, #16]
 8012d0a:	2000      	movs	r0, #0
 8012d0c:	b007      	add	sp, #28
 8012d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d12:	f04f 0b00 	mov.w	fp, #0
 8012d16:	e7ca      	b.n	8012cae <_scanf_i+0x15e>
 8012d18:	07ca      	lsls	r2, r1, #31
 8012d1a:	bf4c      	ite	mi
 8012d1c:	8018      	strhmi	r0, [r3, #0]
 8012d1e:	6018      	strpl	r0, [r3, #0]
 8012d20:	e7eb      	b.n	8012cfa <_scanf_i+0x1aa>
 8012d22:	2001      	movs	r0, #1
 8012d24:	e7f2      	b.n	8012d0c <_scanf_i+0x1bc>
 8012d26:	bf00      	nop
 8012d28:	08014f8c 	.word	0x08014f8c
 8012d2c:	08012451 	.word	0x08012451
 8012d30:	080137e5 	.word	0x080137e5
 8012d34:	080154d2 	.word	0x080154d2

08012d38 <__sflush_r>:
 8012d38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d40:	0716      	lsls	r6, r2, #28
 8012d42:	4605      	mov	r5, r0
 8012d44:	460c      	mov	r4, r1
 8012d46:	d454      	bmi.n	8012df2 <__sflush_r+0xba>
 8012d48:	684b      	ldr	r3, [r1, #4]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	dc02      	bgt.n	8012d54 <__sflush_r+0x1c>
 8012d4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	dd48      	ble.n	8012de6 <__sflush_r+0xae>
 8012d54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012d56:	2e00      	cmp	r6, #0
 8012d58:	d045      	beq.n	8012de6 <__sflush_r+0xae>
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012d60:	682f      	ldr	r7, [r5, #0]
 8012d62:	6a21      	ldr	r1, [r4, #32]
 8012d64:	602b      	str	r3, [r5, #0]
 8012d66:	d030      	beq.n	8012dca <__sflush_r+0x92>
 8012d68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012d6a:	89a3      	ldrh	r3, [r4, #12]
 8012d6c:	0759      	lsls	r1, r3, #29
 8012d6e:	d505      	bpl.n	8012d7c <__sflush_r+0x44>
 8012d70:	6863      	ldr	r3, [r4, #4]
 8012d72:	1ad2      	subs	r2, r2, r3
 8012d74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012d76:	b10b      	cbz	r3, 8012d7c <__sflush_r+0x44>
 8012d78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012d7a:	1ad2      	subs	r2, r2, r3
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012d80:	6a21      	ldr	r1, [r4, #32]
 8012d82:	4628      	mov	r0, r5
 8012d84:	47b0      	blx	r6
 8012d86:	1c43      	adds	r3, r0, #1
 8012d88:	89a3      	ldrh	r3, [r4, #12]
 8012d8a:	d106      	bne.n	8012d9a <__sflush_r+0x62>
 8012d8c:	6829      	ldr	r1, [r5, #0]
 8012d8e:	291d      	cmp	r1, #29
 8012d90:	d82b      	bhi.n	8012dea <__sflush_r+0xb2>
 8012d92:	4a2a      	ldr	r2, [pc, #168]	@ (8012e3c <__sflush_r+0x104>)
 8012d94:	410a      	asrs	r2, r1
 8012d96:	07d6      	lsls	r6, r2, #31
 8012d98:	d427      	bmi.n	8012dea <__sflush_r+0xb2>
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	6062      	str	r2, [r4, #4]
 8012d9e:	04d9      	lsls	r1, r3, #19
 8012da0:	6922      	ldr	r2, [r4, #16]
 8012da2:	6022      	str	r2, [r4, #0]
 8012da4:	d504      	bpl.n	8012db0 <__sflush_r+0x78>
 8012da6:	1c42      	adds	r2, r0, #1
 8012da8:	d101      	bne.n	8012dae <__sflush_r+0x76>
 8012daa:	682b      	ldr	r3, [r5, #0]
 8012dac:	b903      	cbnz	r3, 8012db0 <__sflush_r+0x78>
 8012dae:	6560      	str	r0, [r4, #84]	@ 0x54
 8012db0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012db2:	602f      	str	r7, [r5, #0]
 8012db4:	b1b9      	cbz	r1, 8012de6 <__sflush_r+0xae>
 8012db6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012dba:	4299      	cmp	r1, r3
 8012dbc:	d002      	beq.n	8012dc4 <__sflush_r+0x8c>
 8012dbe:	4628      	mov	r0, r5
 8012dc0:	f7fd ffc6 	bl	8010d50 <_free_r>
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8012dc8:	e00d      	b.n	8012de6 <__sflush_r+0xae>
 8012dca:	2301      	movs	r3, #1
 8012dcc:	4628      	mov	r0, r5
 8012dce:	47b0      	blx	r6
 8012dd0:	4602      	mov	r2, r0
 8012dd2:	1c50      	adds	r0, r2, #1
 8012dd4:	d1c9      	bne.n	8012d6a <__sflush_r+0x32>
 8012dd6:	682b      	ldr	r3, [r5, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d0c6      	beq.n	8012d6a <__sflush_r+0x32>
 8012ddc:	2b1d      	cmp	r3, #29
 8012dde:	d001      	beq.n	8012de4 <__sflush_r+0xac>
 8012de0:	2b16      	cmp	r3, #22
 8012de2:	d11e      	bne.n	8012e22 <__sflush_r+0xea>
 8012de4:	602f      	str	r7, [r5, #0]
 8012de6:	2000      	movs	r0, #0
 8012de8:	e022      	b.n	8012e30 <__sflush_r+0xf8>
 8012dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012dee:	b21b      	sxth	r3, r3
 8012df0:	e01b      	b.n	8012e2a <__sflush_r+0xf2>
 8012df2:	690f      	ldr	r7, [r1, #16]
 8012df4:	2f00      	cmp	r7, #0
 8012df6:	d0f6      	beq.n	8012de6 <__sflush_r+0xae>
 8012df8:	0793      	lsls	r3, r2, #30
 8012dfa:	680e      	ldr	r6, [r1, #0]
 8012dfc:	bf08      	it	eq
 8012dfe:	694b      	ldreq	r3, [r1, #20]
 8012e00:	600f      	str	r7, [r1, #0]
 8012e02:	bf18      	it	ne
 8012e04:	2300      	movne	r3, #0
 8012e06:	eba6 0807 	sub.w	r8, r6, r7
 8012e0a:	608b      	str	r3, [r1, #8]
 8012e0c:	f1b8 0f00 	cmp.w	r8, #0
 8012e10:	dde9      	ble.n	8012de6 <__sflush_r+0xae>
 8012e12:	6a21      	ldr	r1, [r4, #32]
 8012e14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012e16:	4643      	mov	r3, r8
 8012e18:	463a      	mov	r2, r7
 8012e1a:	4628      	mov	r0, r5
 8012e1c:	47b0      	blx	r6
 8012e1e:	2800      	cmp	r0, #0
 8012e20:	dc08      	bgt.n	8012e34 <__sflush_r+0xfc>
 8012e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e2a:	81a3      	strh	r3, [r4, #12]
 8012e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e34:	4407      	add	r7, r0
 8012e36:	eba8 0800 	sub.w	r8, r8, r0
 8012e3a:	e7e7      	b.n	8012e0c <__sflush_r+0xd4>
 8012e3c:	dfbffffe 	.word	0xdfbffffe

08012e40 <_fflush_r>:
 8012e40:	b538      	push	{r3, r4, r5, lr}
 8012e42:	690b      	ldr	r3, [r1, #16]
 8012e44:	4605      	mov	r5, r0
 8012e46:	460c      	mov	r4, r1
 8012e48:	b913      	cbnz	r3, 8012e50 <_fflush_r+0x10>
 8012e4a:	2500      	movs	r5, #0
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	bd38      	pop	{r3, r4, r5, pc}
 8012e50:	b118      	cbz	r0, 8012e5a <_fflush_r+0x1a>
 8012e52:	6a03      	ldr	r3, [r0, #32]
 8012e54:	b90b      	cbnz	r3, 8012e5a <_fflush_r+0x1a>
 8012e56:	f7fc fee1 	bl	800fc1c <__sinit>
 8012e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d0f3      	beq.n	8012e4a <_fflush_r+0xa>
 8012e62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012e64:	07d0      	lsls	r0, r2, #31
 8012e66:	d404      	bmi.n	8012e72 <_fflush_r+0x32>
 8012e68:	0599      	lsls	r1, r3, #22
 8012e6a:	d402      	bmi.n	8012e72 <_fflush_r+0x32>
 8012e6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012e6e:	f7fd f8ec 	bl	801004a <__retarget_lock_acquire_recursive>
 8012e72:	4628      	mov	r0, r5
 8012e74:	4621      	mov	r1, r4
 8012e76:	f7ff ff5f 	bl	8012d38 <__sflush_r>
 8012e7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012e7c:	07da      	lsls	r2, r3, #31
 8012e7e:	4605      	mov	r5, r0
 8012e80:	d4e4      	bmi.n	8012e4c <_fflush_r+0xc>
 8012e82:	89a3      	ldrh	r3, [r4, #12]
 8012e84:	059b      	lsls	r3, r3, #22
 8012e86:	d4e1      	bmi.n	8012e4c <_fflush_r+0xc>
 8012e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012e8a:	f7fd f8df 	bl	801004c <__retarget_lock_release_recursive>
 8012e8e:	e7dd      	b.n	8012e4c <_fflush_r+0xc>

08012e90 <fiprintf>:
 8012e90:	b40e      	push	{r1, r2, r3}
 8012e92:	b503      	push	{r0, r1, lr}
 8012e94:	4601      	mov	r1, r0
 8012e96:	ab03      	add	r3, sp, #12
 8012e98:	4805      	ldr	r0, [pc, #20]	@ (8012eb0 <fiprintf+0x20>)
 8012e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e9e:	6800      	ldr	r0, [r0, #0]
 8012ea0:	9301      	str	r3, [sp, #4]
 8012ea2:	f000 fcd7 	bl	8013854 <_vfiprintf_r>
 8012ea6:	b002      	add	sp, #8
 8012ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012eac:	b003      	add	sp, #12
 8012eae:	4770      	bx	lr
 8012eb0:	200000c4 	.word	0x200000c4

08012eb4 <__sccl>:
 8012eb4:	b570      	push	{r4, r5, r6, lr}
 8012eb6:	780b      	ldrb	r3, [r1, #0]
 8012eb8:	4604      	mov	r4, r0
 8012eba:	2b5e      	cmp	r3, #94	@ 0x5e
 8012ebc:	bf0b      	itete	eq
 8012ebe:	784b      	ldrbeq	r3, [r1, #1]
 8012ec0:	1c4a      	addne	r2, r1, #1
 8012ec2:	1c8a      	addeq	r2, r1, #2
 8012ec4:	2100      	movne	r1, #0
 8012ec6:	bf08      	it	eq
 8012ec8:	2101      	moveq	r1, #1
 8012eca:	3801      	subs	r0, #1
 8012ecc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012ed0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012ed4:	42a8      	cmp	r0, r5
 8012ed6:	d1fb      	bne.n	8012ed0 <__sccl+0x1c>
 8012ed8:	b90b      	cbnz	r3, 8012ede <__sccl+0x2a>
 8012eda:	1e50      	subs	r0, r2, #1
 8012edc:	bd70      	pop	{r4, r5, r6, pc}
 8012ede:	f081 0101 	eor.w	r1, r1, #1
 8012ee2:	54e1      	strb	r1, [r4, r3]
 8012ee4:	4610      	mov	r0, r2
 8012ee6:	4602      	mov	r2, r0
 8012ee8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012eec:	2d2d      	cmp	r5, #45	@ 0x2d
 8012eee:	d005      	beq.n	8012efc <__sccl+0x48>
 8012ef0:	2d5d      	cmp	r5, #93	@ 0x5d
 8012ef2:	d016      	beq.n	8012f22 <__sccl+0x6e>
 8012ef4:	2d00      	cmp	r5, #0
 8012ef6:	d0f1      	beq.n	8012edc <__sccl+0x28>
 8012ef8:	462b      	mov	r3, r5
 8012efa:	e7f2      	b.n	8012ee2 <__sccl+0x2e>
 8012efc:	7846      	ldrb	r6, [r0, #1]
 8012efe:	2e5d      	cmp	r6, #93	@ 0x5d
 8012f00:	d0fa      	beq.n	8012ef8 <__sccl+0x44>
 8012f02:	42b3      	cmp	r3, r6
 8012f04:	dcf8      	bgt.n	8012ef8 <__sccl+0x44>
 8012f06:	3002      	adds	r0, #2
 8012f08:	461a      	mov	r2, r3
 8012f0a:	3201      	adds	r2, #1
 8012f0c:	4296      	cmp	r6, r2
 8012f0e:	54a1      	strb	r1, [r4, r2]
 8012f10:	dcfb      	bgt.n	8012f0a <__sccl+0x56>
 8012f12:	1af2      	subs	r2, r6, r3
 8012f14:	3a01      	subs	r2, #1
 8012f16:	1c5d      	adds	r5, r3, #1
 8012f18:	42b3      	cmp	r3, r6
 8012f1a:	bfa8      	it	ge
 8012f1c:	2200      	movge	r2, #0
 8012f1e:	18ab      	adds	r3, r5, r2
 8012f20:	e7e1      	b.n	8012ee6 <__sccl+0x32>
 8012f22:	4610      	mov	r0, r2
 8012f24:	e7da      	b.n	8012edc <__sccl+0x28>

08012f26 <__submore>:
 8012f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f2a:	460c      	mov	r4, r1
 8012f2c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012f2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f32:	4299      	cmp	r1, r3
 8012f34:	d11d      	bne.n	8012f72 <__submore+0x4c>
 8012f36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012f3a:	f7fb fea9 	bl	800ec90 <_malloc_r>
 8012f3e:	b918      	cbnz	r0, 8012f48 <__submore+0x22>
 8012f40:	f04f 30ff 	mov.w	r0, #4294967295
 8012f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012f4c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012f4e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012f52:	6360      	str	r0, [r4, #52]	@ 0x34
 8012f54:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012f58:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012f5c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012f60:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012f64:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012f68:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012f6c:	6020      	str	r0, [r4, #0]
 8012f6e:	2000      	movs	r0, #0
 8012f70:	e7e8      	b.n	8012f44 <__submore+0x1e>
 8012f72:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012f74:	0077      	lsls	r7, r6, #1
 8012f76:	463a      	mov	r2, r7
 8012f78:	f000 fb97 	bl	80136aa <_realloc_r>
 8012f7c:	4605      	mov	r5, r0
 8012f7e:	2800      	cmp	r0, #0
 8012f80:	d0de      	beq.n	8012f40 <__submore+0x1a>
 8012f82:	eb00 0806 	add.w	r8, r0, r6
 8012f86:	4601      	mov	r1, r0
 8012f88:	4632      	mov	r2, r6
 8012f8a:	4640      	mov	r0, r8
 8012f8c:	f7fd f85f 	bl	801004e <memcpy>
 8012f90:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012f94:	f8c4 8000 	str.w	r8, [r4]
 8012f98:	e7e9      	b.n	8012f6e <__submore+0x48>

08012f9a <memmove>:
 8012f9a:	4288      	cmp	r0, r1
 8012f9c:	b510      	push	{r4, lr}
 8012f9e:	eb01 0402 	add.w	r4, r1, r2
 8012fa2:	d902      	bls.n	8012faa <memmove+0x10>
 8012fa4:	4284      	cmp	r4, r0
 8012fa6:	4623      	mov	r3, r4
 8012fa8:	d807      	bhi.n	8012fba <memmove+0x20>
 8012faa:	1e43      	subs	r3, r0, #1
 8012fac:	42a1      	cmp	r1, r4
 8012fae:	d008      	beq.n	8012fc2 <memmove+0x28>
 8012fb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012fb4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012fb8:	e7f8      	b.n	8012fac <memmove+0x12>
 8012fba:	4402      	add	r2, r0
 8012fbc:	4601      	mov	r1, r0
 8012fbe:	428a      	cmp	r2, r1
 8012fc0:	d100      	bne.n	8012fc4 <memmove+0x2a>
 8012fc2:	bd10      	pop	{r4, pc}
 8012fc4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012fc8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012fcc:	e7f7      	b.n	8012fbe <memmove+0x24>
	...

08012fd0 <nan>:
 8012fd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012fd8 <nan+0x8>
 8012fd4:	4770      	bx	lr
 8012fd6:	bf00      	nop
 8012fd8:	00000000 	.word	0x00000000
 8012fdc:	7ff80000 	.word	0x7ff80000

08012fe0 <abort>:
 8012fe0:	b508      	push	{r3, lr}
 8012fe2:	2006      	movs	r0, #6
 8012fe4:	f000 fe0a 	bl	8013bfc <raise>
 8012fe8:	2001      	movs	r0, #1
 8012fea:	f7f2 f87b 	bl	80050e4 <_exit>

08012fee <_calloc_r>:
 8012fee:	b570      	push	{r4, r5, r6, lr}
 8012ff0:	fba1 5402 	umull	r5, r4, r1, r2
 8012ff4:	b93c      	cbnz	r4, 8013006 <_calloc_r+0x18>
 8012ff6:	4629      	mov	r1, r5
 8012ff8:	f7fb fe4a 	bl	800ec90 <_malloc_r>
 8012ffc:	4606      	mov	r6, r0
 8012ffe:	b928      	cbnz	r0, 801300c <_calloc_r+0x1e>
 8013000:	2600      	movs	r6, #0
 8013002:	4630      	mov	r0, r6
 8013004:	bd70      	pop	{r4, r5, r6, pc}
 8013006:	220c      	movs	r2, #12
 8013008:	6002      	str	r2, [r0, #0]
 801300a:	e7f9      	b.n	8013000 <_calloc_r+0x12>
 801300c:	462a      	mov	r2, r5
 801300e:	4621      	mov	r1, r4
 8013010:	f7fc fefd 	bl	800fe0e <memset>
 8013014:	e7f5      	b.n	8013002 <_calloc_r+0x14>

08013016 <rshift>:
 8013016:	6903      	ldr	r3, [r0, #16]
 8013018:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801301c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013020:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013024:	f100 0414 	add.w	r4, r0, #20
 8013028:	dd45      	ble.n	80130b6 <rshift+0xa0>
 801302a:	f011 011f 	ands.w	r1, r1, #31
 801302e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013032:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013036:	d10c      	bne.n	8013052 <rshift+0x3c>
 8013038:	f100 0710 	add.w	r7, r0, #16
 801303c:	4629      	mov	r1, r5
 801303e:	42b1      	cmp	r1, r6
 8013040:	d334      	bcc.n	80130ac <rshift+0x96>
 8013042:	1a9b      	subs	r3, r3, r2
 8013044:	009b      	lsls	r3, r3, #2
 8013046:	1eea      	subs	r2, r5, #3
 8013048:	4296      	cmp	r6, r2
 801304a:	bf38      	it	cc
 801304c:	2300      	movcc	r3, #0
 801304e:	4423      	add	r3, r4
 8013050:	e015      	b.n	801307e <rshift+0x68>
 8013052:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013056:	f1c1 0820 	rsb	r8, r1, #32
 801305a:	40cf      	lsrs	r7, r1
 801305c:	f105 0e04 	add.w	lr, r5, #4
 8013060:	46a1      	mov	r9, r4
 8013062:	4576      	cmp	r6, lr
 8013064:	46f4      	mov	ip, lr
 8013066:	d815      	bhi.n	8013094 <rshift+0x7e>
 8013068:	1a9a      	subs	r2, r3, r2
 801306a:	0092      	lsls	r2, r2, #2
 801306c:	3a04      	subs	r2, #4
 801306e:	3501      	adds	r5, #1
 8013070:	42ae      	cmp	r6, r5
 8013072:	bf38      	it	cc
 8013074:	2200      	movcc	r2, #0
 8013076:	18a3      	adds	r3, r4, r2
 8013078:	50a7      	str	r7, [r4, r2]
 801307a:	b107      	cbz	r7, 801307e <rshift+0x68>
 801307c:	3304      	adds	r3, #4
 801307e:	1b1a      	subs	r2, r3, r4
 8013080:	42a3      	cmp	r3, r4
 8013082:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013086:	bf08      	it	eq
 8013088:	2300      	moveq	r3, #0
 801308a:	6102      	str	r2, [r0, #16]
 801308c:	bf08      	it	eq
 801308e:	6143      	streq	r3, [r0, #20]
 8013090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013094:	f8dc c000 	ldr.w	ip, [ip]
 8013098:	fa0c fc08 	lsl.w	ip, ip, r8
 801309c:	ea4c 0707 	orr.w	r7, ip, r7
 80130a0:	f849 7b04 	str.w	r7, [r9], #4
 80130a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80130a8:	40cf      	lsrs	r7, r1
 80130aa:	e7da      	b.n	8013062 <rshift+0x4c>
 80130ac:	f851 cb04 	ldr.w	ip, [r1], #4
 80130b0:	f847 cf04 	str.w	ip, [r7, #4]!
 80130b4:	e7c3      	b.n	801303e <rshift+0x28>
 80130b6:	4623      	mov	r3, r4
 80130b8:	e7e1      	b.n	801307e <rshift+0x68>

080130ba <__hexdig_fun>:
 80130ba:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80130be:	2b09      	cmp	r3, #9
 80130c0:	d802      	bhi.n	80130c8 <__hexdig_fun+0xe>
 80130c2:	3820      	subs	r0, #32
 80130c4:	b2c0      	uxtb	r0, r0
 80130c6:	4770      	bx	lr
 80130c8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80130cc:	2b05      	cmp	r3, #5
 80130ce:	d801      	bhi.n	80130d4 <__hexdig_fun+0x1a>
 80130d0:	3847      	subs	r0, #71	@ 0x47
 80130d2:	e7f7      	b.n	80130c4 <__hexdig_fun+0xa>
 80130d4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80130d8:	2b05      	cmp	r3, #5
 80130da:	d801      	bhi.n	80130e0 <__hexdig_fun+0x26>
 80130dc:	3827      	subs	r0, #39	@ 0x27
 80130de:	e7f1      	b.n	80130c4 <__hexdig_fun+0xa>
 80130e0:	2000      	movs	r0, #0
 80130e2:	4770      	bx	lr

080130e4 <__gethex>:
 80130e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130e8:	b085      	sub	sp, #20
 80130ea:	468a      	mov	sl, r1
 80130ec:	9302      	str	r3, [sp, #8]
 80130ee:	680b      	ldr	r3, [r1, #0]
 80130f0:	9001      	str	r0, [sp, #4]
 80130f2:	4690      	mov	r8, r2
 80130f4:	1c9c      	adds	r4, r3, #2
 80130f6:	46a1      	mov	r9, r4
 80130f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80130fc:	2830      	cmp	r0, #48	@ 0x30
 80130fe:	d0fa      	beq.n	80130f6 <__gethex+0x12>
 8013100:	eba9 0303 	sub.w	r3, r9, r3
 8013104:	f1a3 0b02 	sub.w	fp, r3, #2
 8013108:	f7ff ffd7 	bl	80130ba <__hexdig_fun>
 801310c:	4605      	mov	r5, r0
 801310e:	2800      	cmp	r0, #0
 8013110:	d168      	bne.n	80131e4 <__gethex+0x100>
 8013112:	49a0      	ldr	r1, [pc, #640]	@ (8013394 <__gethex+0x2b0>)
 8013114:	2201      	movs	r2, #1
 8013116:	4648      	mov	r0, r9
 8013118:	f7fc fe90 	bl	800fe3c <strncmp>
 801311c:	4607      	mov	r7, r0
 801311e:	2800      	cmp	r0, #0
 8013120:	d167      	bne.n	80131f2 <__gethex+0x10e>
 8013122:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013126:	4626      	mov	r6, r4
 8013128:	f7ff ffc7 	bl	80130ba <__hexdig_fun>
 801312c:	2800      	cmp	r0, #0
 801312e:	d062      	beq.n	80131f6 <__gethex+0x112>
 8013130:	4623      	mov	r3, r4
 8013132:	7818      	ldrb	r0, [r3, #0]
 8013134:	2830      	cmp	r0, #48	@ 0x30
 8013136:	4699      	mov	r9, r3
 8013138:	f103 0301 	add.w	r3, r3, #1
 801313c:	d0f9      	beq.n	8013132 <__gethex+0x4e>
 801313e:	f7ff ffbc 	bl	80130ba <__hexdig_fun>
 8013142:	fab0 f580 	clz	r5, r0
 8013146:	096d      	lsrs	r5, r5, #5
 8013148:	f04f 0b01 	mov.w	fp, #1
 801314c:	464a      	mov	r2, r9
 801314e:	4616      	mov	r6, r2
 8013150:	3201      	adds	r2, #1
 8013152:	7830      	ldrb	r0, [r6, #0]
 8013154:	f7ff ffb1 	bl	80130ba <__hexdig_fun>
 8013158:	2800      	cmp	r0, #0
 801315a:	d1f8      	bne.n	801314e <__gethex+0x6a>
 801315c:	498d      	ldr	r1, [pc, #564]	@ (8013394 <__gethex+0x2b0>)
 801315e:	2201      	movs	r2, #1
 8013160:	4630      	mov	r0, r6
 8013162:	f7fc fe6b 	bl	800fe3c <strncmp>
 8013166:	2800      	cmp	r0, #0
 8013168:	d13f      	bne.n	80131ea <__gethex+0x106>
 801316a:	b944      	cbnz	r4, 801317e <__gethex+0x9a>
 801316c:	1c74      	adds	r4, r6, #1
 801316e:	4622      	mov	r2, r4
 8013170:	4616      	mov	r6, r2
 8013172:	3201      	adds	r2, #1
 8013174:	7830      	ldrb	r0, [r6, #0]
 8013176:	f7ff ffa0 	bl	80130ba <__hexdig_fun>
 801317a:	2800      	cmp	r0, #0
 801317c:	d1f8      	bne.n	8013170 <__gethex+0x8c>
 801317e:	1ba4      	subs	r4, r4, r6
 8013180:	00a7      	lsls	r7, r4, #2
 8013182:	7833      	ldrb	r3, [r6, #0]
 8013184:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013188:	2b50      	cmp	r3, #80	@ 0x50
 801318a:	d13e      	bne.n	801320a <__gethex+0x126>
 801318c:	7873      	ldrb	r3, [r6, #1]
 801318e:	2b2b      	cmp	r3, #43	@ 0x2b
 8013190:	d033      	beq.n	80131fa <__gethex+0x116>
 8013192:	2b2d      	cmp	r3, #45	@ 0x2d
 8013194:	d034      	beq.n	8013200 <__gethex+0x11c>
 8013196:	1c71      	adds	r1, r6, #1
 8013198:	2400      	movs	r4, #0
 801319a:	7808      	ldrb	r0, [r1, #0]
 801319c:	f7ff ff8d 	bl	80130ba <__hexdig_fun>
 80131a0:	1e43      	subs	r3, r0, #1
 80131a2:	b2db      	uxtb	r3, r3
 80131a4:	2b18      	cmp	r3, #24
 80131a6:	d830      	bhi.n	801320a <__gethex+0x126>
 80131a8:	f1a0 0210 	sub.w	r2, r0, #16
 80131ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80131b0:	f7ff ff83 	bl	80130ba <__hexdig_fun>
 80131b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80131b8:	fa5f fc8c 	uxtb.w	ip, ip
 80131bc:	f1bc 0f18 	cmp.w	ip, #24
 80131c0:	f04f 030a 	mov.w	r3, #10
 80131c4:	d91e      	bls.n	8013204 <__gethex+0x120>
 80131c6:	b104      	cbz	r4, 80131ca <__gethex+0xe6>
 80131c8:	4252      	negs	r2, r2
 80131ca:	4417      	add	r7, r2
 80131cc:	f8ca 1000 	str.w	r1, [sl]
 80131d0:	b1ed      	cbz	r5, 801320e <__gethex+0x12a>
 80131d2:	f1bb 0f00 	cmp.w	fp, #0
 80131d6:	bf0c      	ite	eq
 80131d8:	2506      	moveq	r5, #6
 80131da:	2500      	movne	r5, #0
 80131dc:	4628      	mov	r0, r5
 80131de:	b005      	add	sp, #20
 80131e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131e4:	2500      	movs	r5, #0
 80131e6:	462c      	mov	r4, r5
 80131e8:	e7b0      	b.n	801314c <__gethex+0x68>
 80131ea:	2c00      	cmp	r4, #0
 80131ec:	d1c7      	bne.n	801317e <__gethex+0x9a>
 80131ee:	4627      	mov	r7, r4
 80131f0:	e7c7      	b.n	8013182 <__gethex+0x9e>
 80131f2:	464e      	mov	r6, r9
 80131f4:	462f      	mov	r7, r5
 80131f6:	2501      	movs	r5, #1
 80131f8:	e7c3      	b.n	8013182 <__gethex+0x9e>
 80131fa:	2400      	movs	r4, #0
 80131fc:	1cb1      	adds	r1, r6, #2
 80131fe:	e7cc      	b.n	801319a <__gethex+0xb6>
 8013200:	2401      	movs	r4, #1
 8013202:	e7fb      	b.n	80131fc <__gethex+0x118>
 8013204:	fb03 0002 	mla	r0, r3, r2, r0
 8013208:	e7ce      	b.n	80131a8 <__gethex+0xc4>
 801320a:	4631      	mov	r1, r6
 801320c:	e7de      	b.n	80131cc <__gethex+0xe8>
 801320e:	eba6 0309 	sub.w	r3, r6, r9
 8013212:	3b01      	subs	r3, #1
 8013214:	4629      	mov	r1, r5
 8013216:	2b07      	cmp	r3, #7
 8013218:	dc0a      	bgt.n	8013230 <__gethex+0x14c>
 801321a:	9801      	ldr	r0, [sp, #4]
 801321c:	f7fd fde2 	bl	8010de4 <_Balloc>
 8013220:	4604      	mov	r4, r0
 8013222:	b940      	cbnz	r0, 8013236 <__gethex+0x152>
 8013224:	4b5c      	ldr	r3, [pc, #368]	@ (8013398 <__gethex+0x2b4>)
 8013226:	4602      	mov	r2, r0
 8013228:	21e4      	movs	r1, #228	@ 0xe4
 801322a:	485c      	ldr	r0, [pc, #368]	@ (801339c <__gethex+0x2b8>)
 801322c:	f7fc ff24 	bl	8010078 <__assert_func>
 8013230:	3101      	adds	r1, #1
 8013232:	105b      	asrs	r3, r3, #1
 8013234:	e7ef      	b.n	8013216 <__gethex+0x132>
 8013236:	f100 0a14 	add.w	sl, r0, #20
 801323a:	2300      	movs	r3, #0
 801323c:	4655      	mov	r5, sl
 801323e:	469b      	mov	fp, r3
 8013240:	45b1      	cmp	r9, r6
 8013242:	d337      	bcc.n	80132b4 <__gethex+0x1d0>
 8013244:	f845 bb04 	str.w	fp, [r5], #4
 8013248:	eba5 050a 	sub.w	r5, r5, sl
 801324c:	10ad      	asrs	r5, r5, #2
 801324e:	6125      	str	r5, [r4, #16]
 8013250:	4658      	mov	r0, fp
 8013252:	f7fd feb9 	bl	8010fc8 <__hi0bits>
 8013256:	016d      	lsls	r5, r5, #5
 8013258:	f8d8 6000 	ldr.w	r6, [r8]
 801325c:	1a2d      	subs	r5, r5, r0
 801325e:	42b5      	cmp	r5, r6
 8013260:	dd54      	ble.n	801330c <__gethex+0x228>
 8013262:	1bad      	subs	r5, r5, r6
 8013264:	4629      	mov	r1, r5
 8013266:	4620      	mov	r0, r4
 8013268:	f7fe fa4d 	bl	8011706 <__any_on>
 801326c:	4681      	mov	r9, r0
 801326e:	b178      	cbz	r0, 8013290 <__gethex+0x1ac>
 8013270:	1e6b      	subs	r3, r5, #1
 8013272:	1159      	asrs	r1, r3, #5
 8013274:	f003 021f 	and.w	r2, r3, #31
 8013278:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801327c:	f04f 0901 	mov.w	r9, #1
 8013280:	fa09 f202 	lsl.w	r2, r9, r2
 8013284:	420a      	tst	r2, r1
 8013286:	d003      	beq.n	8013290 <__gethex+0x1ac>
 8013288:	454b      	cmp	r3, r9
 801328a:	dc36      	bgt.n	80132fa <__gethex+0x216>
 801328c:	f04f 0902 	mov.w	r9, #2
 8013290:	4629      	mov	r1, r5
 8013292:	4620      	mov	r0, r4
 8013294:	f7ff febf 	bl	8013016 <rshift>
 8013298:	442f      	add	r7, r5
 801329a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801329e:	42bb      	cmp	r3, r7
 80132a0:	da42      	bge.n	8013328 <__gethex+0x244>
 80132a2:	9801      	ldr	r0, [sp, #4]
 80132a4:	4621      	mov	r1, r4
 80132a6:	f7fd fddd 	bl	8010e64 <_Bfree>
 80132aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80132ac:	2300      	movs	r3, #0
 80132ae:	6013      	str	r3, [r2, #0]
 80132b0:	25a3      	movs	r5, #163	@ 0xa3
 80132b2:	e793      	b.n	80131dc <__gethex+0xf8>
 80132b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80132b8:	2a2e      	cmp	r2, #46	@ 0x2e
 80132ba:	d012      	beq.n	80132e2 <__gethex+0x1fe>
 80132bc:	2b20      	cmp	r3, #32
 80132be:	d104      	bne.n	80132ca <__gethex+0x1e6>
 80132c0:	f845 bb04 	str.w	fp, [r5], #4
 80132c4:	f04f 0b00 	mov.w	fp, #0
 80132c8:	465b      	mov	r3, fp
 80132ca:	7830      	ldrb	r0, [r6, #0]
 80132cc:	9303      	str	r3, [sp, #12]
 80132ce:	f7ff fef4 	bl	80130ba <__hexdig_fun>
 80132d2:	9b03      	ldr	r3, [sp, #12]
 80132d4:	f000 000f 	and.w	r0, r0, #15
 80132d8:	4098      	lsls	r0, r3
 80132da:	ea4b 0b00 	orr.w	fp, fp, r0
 80132de:	3304      	adds	r3, #4
 80132e0:	e7ae      	b.n	8013240 <__gethex+0x15c>
 80132e2:	45b1      	cmp	r9, r6
 80132e4:	d8ea      	bhi.n	80132bc <__gethex+0x1d8>
 80132e6:	492b      	ldr	r1, [pc, #172]	@ (8013394 <__gethex+0x2b0>)
 80132e8:	9303      	str	r3, [sp, #12]
 80132ea:	2201      	movs	r2, #1
 80132ec:	4630      	mov	r0, r6
 80132ee:	f7fc fda5 	bl	800fe3c <strncmp>
 80132f2:	9b03      	ldr	r3, [sp, #12]
 80132f4:	2800      	cmp	r0, #0
 80132f6:	d1e1      	bne.n	80132bc <__gethex+0x1d8>
 80132f8:	e7a2      	b.n	8013240 <__gethex+0x15c>
 80132fa:	1ea9      	subs	r1, r5, #2
 80132fc:	4620      	mov	r0, r4
 80132fe:	f7fe fa02 	bl	8011706 <__any_on>
 8013302:	2800      	cmp	r0, #0
 8013304:	d0c2      	beq.n	801328c <__gethex+0x1a8>
 8013306:	f04f 0903 	mov.w	r9, #3
 801330a:	e7c1      	b.n	8013290 <__gethex+0x1ac>
 801330c:	da09      	bge.n	8013322 <__gethex+0x23e>
 801330e:	1b75      	subs	r5, r6, r5
 8013310:	4621      	mov	r1, r4
 8013312:	9801      	ldr	r0, [sp, #4]
 8013314:	462a      	mov	r2, r5
 8013316:	f7fd ffbd 	bl	8011294 <__lshift>
 801331a:	1b7f      	subs	r7, r7, r5
 801331c:	4604      	mov	r4, r0
 801331e:	f100 0a14 	add.w	sl, r0, #20
 8013322:	f04f 0900 	mov.w	r9, #0
 8013326:	e7b8      	b.n	801329a <__gethex+0x1b6>
 8013328:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801332c:	42bd      	cmp	r5, r7
 801332e:	dd6f      	ble.n	8013410 <__gethex+0x32c>
 8013330:	1bed      	subs	r5, r5, r7
 8013332:	42ae      	cmp	r6, r5
 8013334:	dc34      	bgt.n	80133a0 <__gethex+0x2bc>
 8013336:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801333a:	2b02      	cmp	r3, #2
 801333c:	d022      	beq.n	8013384 <__gethex+0x2a0>
 801333e:	2b03      	cmp	r3, #3
 8013340:	d024      	beq.n	801338c <__gethex+0x2a8>
 8013342:	2b01      	cmp	r3, #1
 8013344:	d115      	bne.n	8013372 <__gethex+0x28e>
 8013346:	42ae      	cmp	r6, r5
 8013348:	d113      	bne.n	8013372 <__gethex+0x28e>
 801334a:	2e01      	cmp	r6, #1
 801334c:	d10b      	bne.n	8013366 <__gethex+0x282>
 801334e:	9a02      	ldr	r2, [sp, #8]
 8013350:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013354:	6013      	str	r3, [r2, #0]
 8013356:	2301      	movs	r3, #1
 8013358:	6123      	str	r3, [r4, #16]
 801335a:	f8ca 3000 	str.w	r3, [sl]
 801335e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013360:	2562      	movs	r5, #98	@ 0x62
 8013362:	601c      	str	r4, [r3, #0]
 8013364:	e73a      	b.n	80131dc <__gethex+0xf8>
 8013366:	1e71      	subs	r1, r6, #1
 8013368:	4620      	mov	r0, r4
 801336a:	f7fe f9cc 	bl	8011706 <__any_on>
 801336e:	2800      	cmp	r0, #0
 8013370:	d1ed      	bne.n	801334e <__gethex+0x26a>
 8013372:	9801      	ldr	r0, [sp, #4]
 8013374:	4621      	mov	r1, r4
 8013376:	f7fd fd75 	bl	8010e64 <_Bfree>
 801337a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801337c:	2300      	movs	r3, #0
 801337e:	6013      	str	r3, [r2, #0]
 8013380:	2550      	movs	r5, #80	@ 0x50
 8013382:	e72b      	b.n	80131dc <__gethex+0xf8>
 8013384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013386:	2b00      	cmp	r3, #0
 8013388:	d1f3      	bne.n	8013372 <__gethex+0x28e>
 801338a:	e7e0      	b.n	801334e <__gethex+0x26a>
 801338c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801338e:	2b00      	cmp	r3, #0
 8013390:	d1dd      	bne.n	801334e <__gethex+0x26a>
 8013392:	e7ee      	b.n	8013372 <__gethex+0x28e>
 8013394:	08015358 	.word	0x08015358
 8013398:	080151f2 	.word	0x080151f2
 801339c:	080154e5 	.word	0x080154e5
 80133a0:	1e6f      	subs	r7, r5, #1
 80133a2:	f1b9 0f00 	cmp.w	r9, #0
 80133a6:	d130      	bne.n	801340a <__gethex+0x326>
 80133a8:	b127      	cbz	r7, 80133b4 <__gethex+0x2d0>
 80133aa:	4639      	mov	r1, r7
 80133ac:	4620      	mov	r0, r4
 80133ae:	f7fe f9aa 	bl	8011706 <__any_on>
 80133b2:	4681      	mov	r9, r0
 80133b4:	117a      	asrs	r2, r7, #5
 80133b6:	2301      	movs	r3, #1
 80133b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80133bc:	f007 071f 	and.w	r7, r7, #31
 80133c0:	40bb      	lsls	r3, r7
 80133c2:	4213      	tst	r3, r2
 80133c4:	4629      	mov	r1, r5
 80133c6:	4620      	mov	r0, r4
 80133c8:	bf18      	it	ne
 80133ca:	f049 0902 	orrne.w	r9, r9, #2
 80133ce:	f7ff fe22 	bl	8013016 <rshift>
 80133d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80133d6:	1b76      	subs	r6, r6, r5
 80133d8:	2502      	movs	r5, #2
 80133da:	f1b9 0f00 	cmp.w	r9, #0
 80133de:	d047      	beq.n	8013470 <__gethex+0x38c>
 80133e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80133e4:	2b02      	cmp	r3, #2
 80133e6:	d015      	beq.n	8013414 <__gethex+0x330>
 80133e8:	2b03      	cmp	r3, #3
 80133ea:	d017      	beq.n	801341c <__gethex+0x338>
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	d109      	bne.n	8013404 <__gethex+0x320>
 80133f0:	f019 0f02 	tst.w	r9, #2
 80133f4:	d006      	beq.n	8013404 <__gethex+0x320>
 80133f6:	f8da 3000 	ldr.w	r3, [sl]
 80133fa:	ea49 0903 	orr.w	r9, r9, r3
 80133fe:	f019 0f01 	tst.w	r9, #1
 8013402:	d10e      	bne.n	8013422 <__gethex+0x33e>
 8013404:	f045 0510 	orr.w	r5, r5, #16
 8013408:	e032      	b.n	8013470 <__gethex+0x38c>
 801340a:	f04f 0901 	mov.w	r9, #1
 801340e:	e7d1      	b.n	80133b4 <__gethex+0x2d0>
 8013410:	2501      	movs	r5, #1
 8013412:	e7e2      	b.n	80133da <__gethex+0x2f6>
 8013414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013416:	f1c3 0301 	rsb	r3, r3, #1
 801341a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801341c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801341e:	2b00      	cmp	r3, #0
 8013420:	d0f0      	beq.n	8013404 <__gethex+0x320>
 8013422:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013426:	f104 0314 	add.w	r3, r4, #20
 801342a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801342e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013432:	f04f 0c00 	mov.w	ip, #0
 8013436:	4618      	mov	r0, r3
 8013438:	f853 2b04 	ldr.w	r2, [r3], #4
 801343c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013440:	d01b      	beq.n	801347a <__gethex+0x396>
 8013442:	3201      	adds	r2, #1
 8013444:	6002      	str	r2, [r0, #0]
 8013446:	2d02      	cmp	r5, #2
 8013448:	f104 0314 	add.w	r3, r4, #20
 801344c:	d13c      	bne.n	80134c8 <__gethex+0x3e4>
 801344e:	f8d8 2000 	ldr.w	r2, [r8]
 8013452:	3a01      	subs	r2, #1
 8013454:	42b2      	cmp	r2, r6
 8013456:	d109      	bne.n	801346c <__gethex+0x388>
 8013458:	1171      	asrs	r1, r6, #5
 801345a:	2201      	movs	r2, #1
 801345c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013460:	f006 061f 	and.w	r6, r6, #31
 8013464:	fa02 f606 	lsl.w	r6, r2, r6
 8013468:	421e      	tst	r6, r3
 801346a:	d13a      	bne.n	80134e2 <__gethex+0x3fe>
 801346c:	f045 0520 	orr.w	r5, r5, #32
 8013470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013472:	601c      	str	r4, [r3, #0]
 8013474:	9b02      	ldr	r3, [sp, #8]
 8013476:	601f      	str	r7, [r3, #0]
 8013478:	e6b0      	b.n	80131dc <__gethex+0xf8>
 801347a:	4299      	cmp	r1, r3
 801347c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013480:	d8d9      	bhi.n	8013436 <__gethex+0x352>
 8013482:	68a3      	ldr	r3, [r4, #8]
 8013484:	459b      	cmp	fp, r3
 8013486:	db17      	blt.n	80134b8 <__gethex+0x3d4>
 8013488:	6861      	ldr	r1, [r4, #4]
 801348a:	9801      	ldr	r0, [sp, #4]
 801348c:	3101      	adds	r1, #1
 801348e:	f7fd fca9 	bl	8010de4 <_Balloc>
 8013492:	4681      	mov	r9, r0
 8013494:	b918      	cbnz	r0, 801349e <__gethex+0x3ba>
 8013496:	4b1a      	ldr	r3, [pc, #104]	@ (8013500 <__gethex+0x41c>)
 8013498:	4602      	mov	r2, r0
 801349a:	2184      	movs	r1, #132	@ 0x84
 801349c:	e6c5      	b.n	801322a <__gethex+0x146>
 801349e:	6922      	ldr	r2, [r4, #16]
 80134a0:	3202      	adds	r2, #2
 80134a2:	f104 010c 	add.w	r1, r4, #12
 80134a6:	0092      	lsls	r2, r2, #2
 80134a8:	300c      	adds	r0, #12
 80134aa:	f7fc fdd0 	bl	801004e <memcpy>
 80134ae:	4621      	mov	r1, r4
 80134b0:	9801      	ldr	r0, [sp, #4]
 80134b2:	f7fd fcd7 	bl	8010e64 <_Bfree>
 80134b6:	464c      	mov	r4, r9
 80134b8:	6923      	ldr	r3, [r4, #16]
 80134ba:	1c5a      	adds	r2, r3, #1
 80134bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80134c0:	6122      	str	r2, [r4, #16]
 80134c2:	2201      	movs	r2, #1
 80134c4:	615a      	str	r2, [r3, #20]
 80134c6:	e7be      	b.n	8013446 <__gethex+0x362>
 80134c8:	6922      	ldr	r2, [r4, #16]
 80134ca:	455a      	cmp	r2, fp
 80134cc:	dd0b      	ble.n	80134e6 <__gethex+0x402>
 80134ce:	2101      	movs	r1, #1
 80134d0:	4620      	mov	r0, r4
 80134d2:	f7ff fda0 	bl	8013016 <rshift>
 80134d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80134da:	3701      	adds	r7, #1
 80134dc:	42bb      	cmp	r3, r7
 80134de:	f6ff aee0 	blt.w	80132a2 <__gethex+0x1be>
 80134e2:	2501      	movs	r5, #1
 80134e4:	e7c2      	b.n	801346c <__gethex+0x388>
 80134e6:	f016 061f 	ands.w	r6, r6, #31
 80134ea:	d0fa      	beq.n	80134e2 <__gethex+0x3fe>
 80134ec:	4453      	add	r3, sl
 80134ee:	f1c6 0620 	rsb	r6, r6, #32
 80134f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80134f6:	f7fd fd67 	bl	8010fc8 <__hi0bits>
 80134fa:	42b0      	cmp	r0, r6
 80134fc:	dbe7      	blt.n	80134ce <__gethex+0x3ea>
 80134fe:	e7f0      	b.n	80134e2 <__gethex+0x3fe>
 8013500:	080151f2 	.word	0x080151f2

08013504 <L_shift>:
 8013504:	f1c2 0208 	rsb	r2, r2, #8
 8013508:	0092      	lsls	r2, r2, #2
 801350a:	b570      	push	{r4, r5, r6, lr}
 801350c:	f1c2 0620 	rsb	r6, r2, #32
 8013510:	6843      	ldr	r3, [r0, #4]
 8013512:	6804      	ldr	r4, [r0, #0]
 8013514:	fa03 f506 	lsl.w	r5, r3, r6
 8013518:	432c      	orrs	r4, r5
 801351a:	40d3      	lsrs	r3, r2
 801351c:	6004      	str	r4, [r0, #0]
 801351e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013522:	4288      	cmp	r0, r1
 8013524:	d3f4      	bcc.n	8013510 <L_shift+0xc>
 8013526:	bd70      	pop	{r4, r5, r6, pc}

08013528 <__match>:
 8013528:	b530      	push	{r4, r5, lr}
 801352a:	6803      	ldr	r3, [r0, #0]
 801352c:	3301      	adds	r3, #1
 801352e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013532:	b914      	cbnz	r4, 801353a <__match+0x12>
 8013534:	6003      	str	r3, [r0, #0]
 8013536:	2001      	movs	r0, #1
 8013538:	bd30      	pop	{r4, r5, pc}
 801353a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801353e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013542:	2d19      	cmp	r5, #25
 8013544:	bf98      	it	ls
 8013546:	3220      	addls	r2, #32
 8013548:	42a2      	cmp	r2, r4
 801354a:	d0f0      	beq.n	801352e <__match+0x6>
 801354c:	2000      	movs	r0, #0
 801354e:	e7f3      	b.n	8013538 <__match+0x10>

08013550 <__hexnan>:
 8013550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013554:	680b      	ldr	r3, [r1, #0]
 8013556:	6801      	ldr	r1, [r0, #0]
 8013558:	115e      	asrs	r6, r3, #5
 801355a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801355e:	f013 031f 	ands.w	r3, r3, #31
 8013562:	b087      	sub	sp, #28
 8013564:	bf18      	it	ne
 8013566:	3604      	addne	r6, #4
 8013568:	2500      	movs	r5, #0
 801356a:	1f37      	subs	r7, r6, #4
 801356c:	4682      	mov	sl, r0
 801356e:	4690      	mov	r8, r2
 8013570:	9301      	str	r3, [sp, #4]
 8013572:	f846 5c04 	str.w	r5, [r6, #-4]
 8013576:	46b9      	mov	r9, r7
 8013578:	463c      	mov	r4, r7
 801357a:	9502      	str	r5, [sp, #8]
 801357c:	46ab      	mov	fp, r5
 801357e:	784a      	ldrb	r2, [r1, #1]
 8013580:	1c4b      	adds	r3, r1, #1
 8013582:	9303      	str	r3, [sp, #12]
 8013584:	b342      	cbz	r2, 80135d8 <__hexnan+0x88>
 8013586:	4610      	mov	r0, r2
 8013588:	9105      	str	r1, [sp, #20]
 801358a:	9204      	str	r2, [sp, #16]
 801358c:	f7ff fd95 	bl	80130ba <__hexdig_fun>
 8013590:	2800      	cmp	r0, #0
 8013592:	d151      	bne.n	8013638 <__hexnan+0xe8>
 8013594:	9a04      	ldr	r2, [sp, #16]
 8013596:	9905      	ldr	r1, [sp, #20]
 8013598:	2a20      	cmp	r2, #32
 801359a:	d818      	bhi.n	80135ce <__hexnan+0x7e>
 801359c:	9b02      	ldr	r3, [sp, #8]
 801359e:	459b      	cmp	fp, r3
 80135a0:	dd13      	ble.n	80135ca <__hexnan+0x7a>
 80135a2:	454c      	cmp	r4, r9
 80135a4:	d206      	bcs.n	80135b4 <__hexnan+0x64>
 80135a6:	2d07      	cmp	r5, #7
 80135a8:	dc04      	bgt.n	80135b4 <__hexnan+0x64>
 80135aa:	462a      	mov	r2, r5
 80135ac:	4649      	mov	r1, r9
 80135ae:	4620      	mov	r0, r4
 80135b0:	f7ff ffa8 	bl	8013504 <L_shift>
 80135b4:	4544      	cmp	r4, r8
 80135b6:	d952      	bls.n	801365e <__hexnan+0x10e>
 80135b8:	2300      	movs	r3, #0
 80135ba:	f1a4 0904 	sub.w	r9, r4, #4
 80135be:	f844 3c04 	str.w	r3, [r4, #-4]
 80135c2:	f8cd b008 	str.w	fp, [sp, #8]
 80135c6:	464c      	mov	r4, r9
 80135c8:	461d      	mov	r5, r3
 80135ca:	9903      	ldr	r1, [sp, #12]
 80135cc:	e7d7      	b.n	801357e <__hexnan+0x2e>
 80135ce:	2a29      	cmp	r2, #41	@ 0x29
 80135d0:	d157      	bne.n	8013682 <__hexnan+0x132>
 80135d2:	3102      	adds	r1, #2
 80135d4:	f8ca 1000 	str.w	r1, [sl]
 80135d8:	f1bb 0f00 	cmp.w	fp, #0
 80135dc:	d051      	beq.n	8013682 <__hexnan+0x132>
 80135de:	454c      	cmp	r4, r9
 80135e0:	d206      	bcs.n	80135f0 <__hexnan+0xa0>
 80135e2:	2d07      	cmp	r5, #7
 80135e4:	dc04      	bgt.n	80135f0 <__hexnan+0xa0>
 80135e6:	462a      	mov	r2, r5
 80135e8:	4649      	mov	r1, r9
 80135ea:	4620      	mov	r0, r4
 80135ec:	f7ff ff8a 	bl	8013504 <L_shift>
 80135f0:	4544      	cmp	r4, r8
 80135f2:	d936      	bls.n	8013662 <__hexnan+0x112>
 80135f4:	f1a8 0204 	sub.w	r2, r8, #4
 80135f8:	4623      	mov	r3, r4
 80135fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80135fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8013602:	429f      	cmp	r7, r3
 8013604:	d2f9      	bcs.n	80135fa <__hexnan+0xaa>
 8013606:	1b3b      	subs	r3, r7, r4
 8013608:	f023 0303 	bic.w	r3, r3, #3
 801360c:	3304      	adds	r3, #4
 801360e:	3401      	adds	r4, #1
 8013610:	3e03      	subs	r6, #3
 8013612:	42b4      	cmp	r4, r6
 8013614:	bf88      	it	hi
 8013616:	2304      	movhi	r3, #4
 8013618:	4443      	add	r3, r8
 801361a:	2200      	movs	r2, #0
 801361c:	f843 2b04 	str.w	r2, [r3], #4
 8013620:	429f      	cmp	r7, r3
 8013622:	d2fb      	bcs.n	801361c <__hexnan+0xcc>
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	b91b      	cbnz	r3, 8013630 <__hexnan+0xe0>
 8013628:	4547      	cmp	r7, r8
 801362a:	d128      	bne.n	801367e <__hexnan+0x12e>
 801362c:	2301      	movs	r3, #1
 801362e:	603b      	str	r3, [r7, #0]
 8013630:	2005      	movs	r0, #5
 8013632:	b007      	add	sp, #28
 8013634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013638:	3501      	adds	r5, #1
 801363a:	2d08      	cmp	r5, #8
 801363c:	f10b 0b01 	add.w	fp, fp, #1
 8013640:	dd06      	ble.n	8013650 <__hexnan+0x100>
 8013642:	4544      	cmp	r4, r8
 8013644:	d9c1      	bls.n	80135ca <__hexnan+0x7a>
 8013646:	2300      	movs	r3, #0
 8013648:	f844 3c04 	str.w	r3, [r4, #-4]
 801364c:	2501      	movs	r5, #1
 801364e:	3c04      	subs	r4, #4
 8013650:	6822      	ldr	r2, [r4, #0]
 8013652:	f000 000f 	and.w	r0, r0, #15
 8013656:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801365a:	6020      	str	r0, [r4, #0]
 801365c:	e7b5      	b.n	80135ca <__hexnan+0x7a>
 801365e:	2508      	movs	r5, #8
 8013660:	e7b3      	b.n	80135ca <__hexnan+0x7a>
 8013662:	9b01      	ldr	r3, [sp, #4]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d0dd      	beq.n	8013624 <__hexnan+0xd4>
 8013668:	f1c3 0320 	rsb	r3, r3, #32
 801366c:	f04f 32ff 	mov.w	r2, #4294967295
 8013670:	40da      	lsrs	r2, r3
 8013672:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013676:	4013      	ands	r3, r2
 8013678:	f846 3c04 	str.w	r3, [r6, #-4]
 801367c:	e7d2      	b.n	8013624 <__hexnan+0xd4>
 801367e:	3f04      	subs	r7, #4
 8013680:	e7d0      	b.n	8013624 <__hexnan+0xd4>
 8013682:	2004      	movs	r0, #4
 8013684:	e7d5      	b.n	8013632 <__hexnan+0xe2>

08013686 <__ascii_mbtowc>:
 8013686:	b082      	sub	sp, #8
 8013688:	b901      	cbnz	r1, 801368c <__ascii_mbtowc+0x6>
 801368a:	a901      	add	r1, sp, #4
 801368c:	b142      	cbz	r2, 80136a0 <__ascii_mbtowc+0x1a>
 801368e:	b14b      	cbz	r3, 80136a4 <__ascii_mbtowc+0x1e>
 8013690:	7813      	ldrb	r3, [r2, #0]
 8013692:	600b      	str	r3, [r1, #0]
 8013694:	7812      	ldrb	r2, [r2, #0]
 8013696:	1e10      	subs	r0, r2, #0
 8013698:	bf18      	it	ne
 801369a:	2001      	movne	r0, #1
 801369c:	b002      	add	sp, #8
 801369e:	4770      	bx	lr
 80136a0:	4610      	mov	r0, r2
 80136a2:	e7fb      	b.n	801369c <__ascii_mbtowc+0x16>
 80136a4:	f06f 0001 	mvn.w	r0, #1
 80136a8:	e7f8      	b.n	801369c <__ascii_mbtowc+0x16>

080136aa <_realloc_r>:
 80136aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136ae:	4680      	mov	r8, r0
 80136b0:	4615      	mov	r5, r2
 80136b2:	460c      	mov	r4, r1
 80136b4:	b921      	cbnz	r1, 80136c0 <_realloc_r+0x16>
 80136b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136ba:	4611      	mov	r1, r2
 80136bc:	f7fb bae8 	b.w	800ec90 <_malloc_r>
 80136c0:	b92a      	cbnz	r2, 80136ce <_realloc_r+0x24>
 80136c2:	f7fd fb45 	bl	8010d50 <_free_r>
 80136c6:	2400      	movs	r4, #0
 80136c8:	4620      	mov	r0, r4
 80136ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136ce:	f000 fab1 	bl	8013c34 <_malloc_usable_size_r>
 80136d2:	4285      	cmp	r5, r0
 80136d4:	4606      	mov	r6, r0
 80136d6:	d802      	bhi.n	80136de <_realloc_r+0x34>
 80136d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80136dc:	d8f4      	bhi.n	80136c8 <_realloc_r+0x1e>
 80136de:	4629      	mov	r1, r5
 80136e0:	4640      	mov	r0, r8
 80136e2:	f7fb fad5 	bl	800ec90 <_malloc_r>
 80136e6:	4607      	mov	r7, r0
 80136e8:	2800      	cmp	r0, #0
 80136ea:	d0ec      	beq.n	80136c6 <_realloc_r+0x1c>
 80136ec:	42b5      	cmp	r5, r6
 80136ee:	462a      	mov	r2, r5
 80136f0:	4621      	mov	r1, r4
 80136f2:	bf28      	it	cs
 80136f4:	4632      	movcs	r2, r6
 80136f6:	f7fc fcaa 	bl	801004e <memcpy>
 80136fa:	4621      	mov	r1, r4
 80136fc:	4640      	mov	r0, r8
 80136fe:	f7fd fb27 	bl	8010d50 <_free_r>
 8013702:	463c      	mov	r4, r7
 8013704:	e7e0      	b.n	80136c8 <_realloc_r+0x1e>
	...

08013708 <_strtoul_l.constprop.0>:
 8013708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801370c:	4e34      	ldr	r6, [pc, #208]	@ (80137e0 <_strtoul_l.constprop.0+0xd8>)
 801370e:	4686      	mov	lr, r0
 8013710:	460d      	mov	r5, r1
 8013712:	4628      	mov	r0, r5
 8013714:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013718:	5d37      	ldrb	r7, [r6, r4]
 801371a:	f017 0708 	ands.w	r7, r7, #8
 801371e:	d1f8      	bne.n	8013712 <_strtoul_l.constprop.0+0xa>
 8013720:	2c2d      	cmp	r4, #45	@ 0x2d
 8013722:	d12f      	bne.n	8013784 <_strtoul_l.constprop.0+0x7c>
 8013724:	782c      	ldrb	r4, [r5, #0]
 8013726:	2701      	movs	r7, #1
 8013728:	1c85      	adds	r5, r0, #2
 801372a:	f033 0010 	bics.w	r0, r3, #16
 801372e:	d109      	bne.n	8013744 <_strtoul_l.constprop.0+0x3c>
 8013730:	2c30      	cmp	r4, #48	@ 0x30
 8013732:	d12c      	bne.n	801378e <_strtoul_l.constprop.0+0x86>
 8013734:	7828      	ldrb	r0, [r5, #0]
 8013736:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801373a:	2858      	cmp	r0, #88	@ 0x58
 801373c:	d127      	bne.n	801378e <_strtoul_l.constprop.0+0x86>
 801373e:	786c      	ldrb	r4, [r5, #1]
 8013740:	2310      	movs	r3, #16
 8013742:	3502      	adds	r5, #2
 8013744:	f04f 38ff 	mov.w	r8, #4294967295
 8013748:	2600      	movs	r6, #0
 801374a:	fbb8 f8f3 	udiv	r8, r8, r3
 801374e:	fb03 f908 	mul.w	r9, r3, r8
 8013752:	ea6f 0909 	mvn.w	r9, r9
 8013756:	4630      	mov	r0, r6
 8013758:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801375c:	f1bc 0f09 	cmp.w	ip, #9
 8013760:	d81c      	bhi.n	801379c <_strtoul_l.constprop.0+0x94>
 8013762:	4664      	mov	r4, ip
 8013764:	42a3      	cmp	r3, r4
 8013766:	dd2a      	ble.n	80137be <_strtoul_l.constprop.0+0xb6>
 8013768:	f1b6 3fff 	cmp.w	r6, #4294967295
 801376c:	d007      	beq.n	801377e <_strtoul_l.constprop.0+0x76>
 801376e:	4580      	cmp	r8, r0
 8013770:	d322      	bcc.n	80137b8 <_strtoul_l.constprop.0+0xb0>
 8013772:	d101      	bne.n	8013778 <_strtoul_l.constprop.0+0x70>
 8013774:	45a1      	cmp	r9, r4
 8013776:	db1f      	blt.n	80137b8 <_strtoul_l.constprop.0+0xb0>
 8013778:	fb00 4003 	mla	r0, r0, r3, r4
 801377c:	2601      	movs	r6, #1
 801377e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013782:	e7e9      	b.n	8013758 <_strtoul_l.constprop.0+0x50>
 8013784:	2c2b      	cmp	r4, #43	@ 0x2b
 8013786:	bf04      	itt	eq
 8013788:	782c      	ldrbeq	r4, [r5, #0]
 801378a:	1c85      	addeq	r5, r0, #2
 801378c:	e7cd      	b.n	801372a <_strtoul_l.constprop.0+0x22>
 801378e:	2b00      	cmp	r3, #0
 8013790:	d1d8      	bne.n	8013744 <_strtoul_l.constprop.0+0x3c>
 8013792:	2c30      	cmp	r4, #48	@ 0x30
 8013794:	bf0c      	ite	eq
 8013796:	2308      	moveq	r3, #8
 8013798:	230a      	movne	r3, #10
 801379a:	e7d3      	b.n	8013744 <_strtoul_l.constprop.0+0x3c>
 801379c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80137a0:	f1bc 0f19 	cmp.w	ip, #25
 80137a4:	d801      	bhi.n	80137aa <_strtoul_l.constprop.0+0xa2>
 80137a6:	3c37      	subs	r4, #55	@ 0x37
 80137a8:	e7dc      	b.n	8013764 <_strtoul_l.constprop.0+0x5c>
 80137aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80137ae:	f1bc 0f19 	cmp.w	ip, #25
 80137b2:	d804      	bhi.n	80137be <_strtoul_l.constprop.0+0xb6>
 80137b4:	3c57      	subs	r4, #87	@ 0x57
 80137b6:	e7d5      	b.n	8013764 <_strtoul_l.constprop.0+0x5c>
 80137b8:	f04f 36ff 	mov.w	r6, #4294967295
 80137bc:	e7df      	b.n	801377e <_strtoul_l.constprop.0+0x76>
 80137be:	1c73      	adds	r3, r6, #1
 80137c0:	d106      	bne.n	80137d0 <_strtoul_l.constprop.0+0xc8>
 80137c2:	2322      	movs	r3, #34	@ 0x22
 80137c4:	f8ce 3000 	str.w	r3, [lr]
 80137c8:	4630      	mov	r0, r6
 80137ca:	b932      	cbnz	r2, 80137da <_strtoul_l.constprop.0+0xd2>
 80137cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137d0:	b107      	cbz	r7, 80137d4 <_strtoul_l.constprop.0+0xcc>
 80137d2:	4240      	negs	r0, r0
 80137d4:	2a00      	cmp	r2, #0
 80137d6:	d0f9      	beq.n	80137cc <_strtoul_l.constprop.0+0xc4>
 80137d8:	b106      	cbz	r6, 80137dc <_strtoul_l.constprop.0+0xd4>
 80137da:	1e69      	subs	r1, r5, #1
 80137dc:	6011      	str	r1, [r2, #0]
 80137de:	e7f5      	b.n	80137cc <_strtoul_l.constprop.0+0xc4>
 80137e0:	080153b1 	.word	0x080153b1

080137e4 <_strtoul_r>:
 80137e4:	f7ff bf90 	b.w	8013708 <_strtoul_l.constprop.0>

080137e8 <__ascii_wctomb>:
 80137e8:	4603      	mov	r3, r0
 80137ea:	4608      	mov	r0, r1
 80137ec:	b141      	cbz	r1, 8013800 <__ascii_wctomb+0x18>
 80137ee:	2aff      	cmp	r2, #255	@ 0xff
 80137f0:	d904      	bls.n	80137fc <__ascii_wctomb+0x14>
 80137f2:	228a      	movs	r2, #138	@ 0x8a
 80137f4:	601a      	str	r2, [r3, #0]
 80137f6:	f04f 30ff 	mov.w	r0, #4294967295
 80137fa:	4770      	bx	lr
 80137fc:	700a      	strb	r2, [r1, #0]
 80137fe:	2001      	movs	r0, #1
 8013800:	4770      	bx	lr

08013802 <__sfputc_r>:
 8013802:	6893      	ldr	r3, [r2, #8]
 8013804:	3b01      	subs	r3, #1
 8013806:	2b00      	cmp	r3, #0
 8013808:	b410      	push	{r4}
 801380a:	6093      	str	r3, [r2, #8]
 801380c:	da08      	bge.n	8013820 <__sfputc_r+0x1e>
 801380e:	6994      	ldr	r4, [r2, #24]
 8013810:	42a3      	cmp	r3, r4
 8013812:	db01      	blt.n	8013818 <__sfputc_r+0x16>
 8013814:	290a      	cmp	r1, #10
 8013816:	d103      	bne.n	8013820 <__sfputc_r+0x1e>
 8013818:	f85d 4b04 	ldr.w	r4, [sp], #4
 801381c:	f000 b932 	b.w	8013a84 <__swbuf_r>
 8013820:	6813      	ldr	r3, [r2, #0]
 8013822:	1c58      	adds	r0, r3, #1
 8013824:	6010      	str	r0, [r2, #0]
 8013826:	7019      	strb	r1, [r3, #0]
 8013828:	4608      	mov	r0, r1
 801382a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801382e:	4770      	bx	lr

08013830 <__sfputs_r>:
 8013830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013832:	4606      	mov	r6, r0
 8013834:	460f      	mov	r7, r1
 8013836:	4614      	mov	r4, r2
 8013838:	18d5      	adds	r5, r2, r3
 801383a:	42ac      	cmp	r4, r5
 801383c:	d101      	bne.n	8013842 <__sfputs_r+0x12>
 801383e:	2000      	movs	r0, #0
 8013840:	e007      	b.n	8013852 <__sfputs_r+0x22>
 8013842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013846:	463a      	mov	r2, r7
 8013848:	4630      	mov	r0, r6
 801384a:	f7ff ffda 	bl	8013802 <__sfputc_r>
 801384e:	1c43      	adds	r3, r0, #1
 8013850:	d1f3      	bne.n	801383a <__sfputs_r+0xa>
 8013852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013854 <_vfiprintf_r>:
 8013854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013858:	460d      	mov	r5, r1
 801385a:	b09d      	sub	sp, #116	@ 0x74
 801385c:	4614      	mov	r4, r2
 801385e:	4698      	mov	r8, r3
 8013860:	4606      	mov	r6, r0
 8013862:	b118      	cbz	r0, 801386c <_vfiprintf_r+0x18>
 8013864:	6a03      	ldr	r3, [r0, #32]
 8013866:	b90b      	cbnz	r3, 801386c <_vfiprintf_r+0x18>
 8013868:	f7fc f9d8 	bl	800fc1c <__sinit>
 801386c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801386e:	07d9      	lsls	r1, r3, #31
 8013870:	d405      	bmi.n	801387e <_vfiprintf_r+0x2a>
 8013872:	89ab      	ldrh	r3, [r5, #12]
 8013874:	059a      	lsls	r2, r3, #22
 8013876:	d402      	bmi.n	801387e <_vfiprintf_r+0x2a>
 8013878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801387a:	f7fc fbe6 	bl	801004a <__retarget_lock_acquire_recursive>
 801387e:	89ab      	ldrh	r3, [r5, #12]
 8013880:	071b      	lsls	r3, r3, #28
 8013882:	d501      	bpl.n	8013888 <_vfiprintf_r+0x34>
 8013884:	692b      	ldr	r3, [r5, #16]
 8013886:	b99b      	cbnz	r3, 80138b0 <_vfiprintf_r+0x5c>
 8013888:	4629      	mov	r1, r5
 801388a:	4630      	mov	r0, r6
 801388c:	f000 f938 	bl	8013b00 <__swsetup_r>
 8013890:	b170      	cbz	r0, 80138b0 <_vfiprintf_r+0x5c>
 8013892:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013894:	07dc      	lsls	r4, r3, #31
 8013896:	d504      	bpl.n	80138a2 <_vfiprintf_r+0x4e>
 8013898:	f04f 30ff 	mov.w	r0, #4294967295
 801389c:	b01d      	add	sp, #116	@ 0x74
 801389e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138a2:	89ab      	ldrh	r3, [r5, #12]
 80138a4:	0598      	lsls	r0, r3, #22
 80138a6:	d4f7      	bmi.n	8013898 <_vfiprintf_r+0x44>
 80138a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80138aa:	f7fc fbcf 	bl	801004c <__retarget_lock_release_recursive>
 80138ae:	e7f3      	b.n	8013898 <_vfiprintf_r+0x44>
 80138b0:	2300      	movs	r3, #0
 80138b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80138b4:	2320      	movs	r3, #32
 80138b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80138ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80138be:	2330      	movs	r3, #48	@ 0x30
 80138c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013a70 <_vfiprintf_r+0x21c>
 80138c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80138c8:	f04f 0901 	mov.w	r9, #1
 80138cc:	4623      	mov	r3, r4
 80138ce:	469a      	mov	sl, r3
 80138d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138d4:	b10a      	cbz	r2, 80138da <_vfiprintf_r+0x86>
 80138d6:	2a25      	cmp	r2, #37	@ 0x25
 80138d8:	d1f9      	bne.n	80138ce <_vfiprintf_r+0x7a>
 80138da:	ebba 0b04 	subs.w	fp, sl, r4
 80138de:	d00b      	beq.n	80138f8 <_vfiprintf_r+0xa4>
 80138e0:	465b      	mov	r3, fp
 80138e2:	4622      	mov	r2, r4
 80138e4:	4629      	mov	r1, r5
 80138e6:	4630      	mov	r0, r6
 80138e8:	f7ff ffa2 	bl	8013830 <__sfputs_r>
 80138ec:	3001      	adds	r0, #1
 80138ee:	f000 80a7 	beq.w	8013a40 <_vfiprintf_r+0x1ec>
 80138f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80138f4:	445a      	add	r2, fp
 80138f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80138f8:	f89a 3000 	ldrb.w	r3, [sl]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	f000 809f 	beq.w	8013a40 <_vfiprintf_r+0x1ec>
 8013902:	2300      	movs	r3, #0
 8013904:	f04f 32ff 	mov.w	r2, #4294967295
 8013908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801390c:	f10a 0a01 	add.w	sl, sl, #1
 8013910:	9304      	str	r3, [sp, #16]
 8013912:	9307      	str	r3, [sp, #28]
 8013914:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013918:	931a      	str	r3, [sp, #104]	@ 0x68
 801391a:	4654      	mov	r4, sl
 801391c:	2205      	movs	r2, #5
 801391e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013922:	4853      	ldr	r0, [pc, #332]	@ (8013a70 <_vfiprintf_r+0x21c>)
 8013924:	f7ec fc64 	bl	80001f0 <memchr>
 8013928:	9a04      	ldr	r2, [sp, #16]
 801392a:	b9d8      	cbnz	r0, 8013964 <_vfiprintf_r+0x110>
 801392c:	06d1      	lsls	r1, r2, #27
 801392e:	bf44      	itt	mi
 8013930:	2320      	movmi	r3, #32
 8013932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013936:	0713      	lsls	r3, r2, #28
 8013938:	bf44      	itt	mi
 801393a:	232b      	movmi	r3, #43	@ 0x2b
 801393c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013940:	f89a 3000 	ldrb.w	r3, [sl]
 8013944:	2b2a      	cmp	r3, #42	@ 0x2a
 8013946:	d015      	beq.n	8013974 <_vfiprintf_r+0x120>
 8013948:	9a07      	ldr	r2, [sp, #28]
 801394a:	4654      	mov	r4, sl
 801394c:	2000      	movs	r0, #0
 801394e:	f04f 0c0a 	mov.w	ip, #10
 8013952:	4621      	mov	r1, r4
 8013954:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013958:	3b30      	subs	r3, #48	@ 0x30
 801395a:	2b09      	cmp	r3, #9
 801395c:	d94b      	bls.n	80139f6 <_vfiprintf_r+0x1a2>
 801395e:	b1b0      	cbz	r0, 801398e <_vfiprintf_r+0x13a>
 8013960:	9207      	str	r2, [sp, #28]
 8013962:	e014      	b.n	801398e <_vfiprintf_r+0x13a>
 8013964:	eba0 0308 	sub.w	r3, r0, r8
 8013968:	fa09 f303 	lsl.w	r3, r9, r3
 801396c:	4313      	orrs	r3, r2
 801396e:	9304      	str	r3, [sp, #16]
 8013970:	46a2      	mov	sl, r4
 8013972:	e7d2      	b.n	801391a <_vfiprintf_r+0xc6>
 8013974:	9b03      	ldr	r3, [sp, #12]
 8013976:	1d19      	adds	r1, r3, #4
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	9103      	str	r1, [sp, #12]
 801397c:	2b00      	cmp	r3, #0
 801397e:	bfbb      	ittet	lt
 8013980:	425b      	neglt	r3, r3
 8013982:	f042 0202 	orrlt.w	r2, r2, #2
 8013986:	9307      	strge	r3, [sp, #28]
 8013988:	9307      	strlt	r3, [sp, #28]
 801398a:	bfb8      	it	lt
 801398c:	9204      	strlt	r2, [sp, #16]
 801398e:	7823      	ldrb	r3, [r4, #0]
 8013990:	2b2e      	cmp	r3, #46	@ 0x2e
 8013992:	d10a      	bne.n	80139aa <_vfiprintf_r+0x156>
 8013994:	7863      	ldrb	r3, [r4, #1]
 8013996:	2b2a      	cmp	r3, #42	@ 0x2a
 8013998:	d132      	bne.n	8013a00 <_vfiprintf_r+0x1ac>
 801399a:	9b03      	ldr	r3, [sp, #12]
 801399c:	1d1a      	adds	r2, r3, #4
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	9203      	str	r2, [sp, #12]
 80139a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80139a6:	3402      	adds	r4, #2
 80139a8:	9305      	str	r3, [sp, #20]
 80139aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013a80 <_vfiprintf_r+0x22c>
 80139ae:	7821      	ldrb	r1, [r4, #0]
 80139b0:	2203      	movs	r2, #3
 80139b2:	4650      	mov	r0, sl
 80139b4:	f7ec fc1c 	bl	80001f0 <memchr>
 80139b8:	b138      	cbz	r0, 80139ca <_vfiprintf_r+0x176>
 80139ba:	9b04      	ldr	r3, [sp, #16]
 80139bc:	eba0 000a 	sub.w	r0, r0, sl
 80139c0:	2240      	movs	r2, #64	@ 0x40
 80139c2:	4082      	lsls	r2, r0
 80139c4:	4313      	orrs	r3, r2
 80139c6:	3401      	adds	r4, #1
 80139c8:	9304      	str	r3, [sp, #16]
 80139ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139ce:	4829      	ldr	r0, [pc, #164]	@ (8013a74 <_vfiprintf_r+0x220>)
 80139d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80139d4:	2206      	movs	r2, #6
 80139d6:	f7ec fc0b 	bl	80001f0 <memchr>
 80139da:	2800      	cmp	r0, #0
 80139dc:	d03f      	beq.n	8013a5e <_vfiprintf_r+0x20a>
 80139de:	4b26      	ldr	r3, [pc, #152]	@ (8013a78 <_vfiprintf_r+0x224>)
 80139e0:	bb1b      	cbnz	r3, 8013a2a <_vfiprintf_r+0x1d6>
 80139e2:	9b03      	ldr	r3, [sp, #12]
 80139e4:	3307      	adds	r3, #7
 80139e6:	f023 0307 	bic.w	r3, r3, #7
 80139ea:	3308      	adds	r3, #8
 80139ec:	9303      	str	r3, [sp, #12]
 80139ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139f0:	443b      	add	r3, r7
 80139f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80139f4:	e76a      	b.n	80138cc <_vfiprintf_r+0x78>
 80139f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80139fa:	460c      	mov	r4, r1
 80139fc:	2001      	movs	r0, #1
 80139fe:	e7a8      	b.n	8013952 <_vfiprintf_r+0xfe>
 8013a00:	2300      	movs	r3, #0
 8013a02:	3401      	adds	r4, #1
 8013a04:	9305      	str	r3, [sp, #20]
 8013a06:	4619      	mov	r1, r3
 8013a08:	f04f 0c0a 	mov.w	ip, #10
 8013a0c:	4620      	mov	r0, r4
 8013a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a12:	3a30      	subs	r2, #48	@ 0x30
 8013a14:	2a09      	cmp	r2, #9
 8013a16:	d903      	bls.n	8013a20 <_vfiprintf_r+0x1cc>
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d0c6      	beq.n	80139aa <_vfiprintf_r+0x156>
 8013a1c:	9105      	str	r1, [sp, #20]
 8013a1e:	e7c4      	b.n	80139aa <_vfiprintf_r+0x156>
 8013a20:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a24:	4604      	mov	r4, r0
 8013a26:	2301      	movs	r3, #1
 8013a28:	e7f0      	b.n	8013a0c <_vfiprintf_r+0x1b8>
 8013a2a:	ab03      	add	r3, sp, #12
 8013a2c:	9300      	str	r3, [sp, #0]
 8013a2e:	462a      	mov	r2, r5
 8013a30:	4b12      	ldr	r3, [pc, #72]	@ (8013a7c <_vfiprintf_r+0x228>)
 8013a32:	a904      	add	r1, sp, #16
 8013a34:	4630      	mov	r0, r6
 8013a36:	f7fb fa99 	bl	800ef6c <_printf_float>
 8013a3a:	4607      	mov	r7, r0
 8013a3c:	1c78      	adds	r0, r7, #1
 8013a3e:	d1d6      	bne.n	80139ee <_vfiprintf_r+0x19a>
 8013a40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013a42:	07d9      	lsls	r1, r3, #31
 8013a44:	d405      	bmi.n	8013a52 <_vfiprintf_r+0x1fe>
 8013a46:	89ab      	ldrh	r3, [r5, #12]
 8013a48:	059a      	lsls	r2, r3, #22
 8013a4a:	d402      	bmi.n	8013a52 <_vfiprintf_r+0x1fe>
 8013a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013a4e:	f7fc fafd 	bl	801004c <__retarget_lock_release_recursive>
 8013a52:	89ab      	ldrh	r3, [r5, #12]
 8013a54:	065b      	lsls	r3, r3, #25
 8013a56:	f53f af1f 	bmi.w	8013898 <_vfiprintf_r+0x44>
 8013a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a5c:	e71e      	b.n	801389c <_vfiprintf_r+0x48>
 8013a5e:	ab03      	add	r3, sp, #12
 8013a60:	9300      	str	r3, [sp, #0]
 8013a62:	462a      	mov	r2, r5
 8013a64:	4b05      	ldr	r3, [pc, #20]	@ (8013a7c <_vfiprintf_r+0x228>)
 8013a66:	a904      	add	r1, sp, #16
 8013a68:	4630      	mov	r0, r6
 8013a6a:	f7fb fd17 	bl	800f49c <_printf_i>
 8013a6e:	e7e4      	b.n	8013a3a <_vfiprintf_r+0x1e6>
 8013a70:	080154b1 	.word	0x080154b1
 8013a74:	080154bb 	.word	0x080154bb
 8013a78:	0800ef6d 	.word	0x0800ef6d
 8013a7c:	08013831 	.word	0x08013831
 8013a80:	080154b7 	.word	0x080154b7

08013a84 <__swbuf_r>:
 8013a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a86:	460e      	mov	r6, r1
 8013a88:	4614      	mov	r4, r2
 8013a8a:	4605      	mov	r5, r0
 8013a8c:	b118      	cbz	r0, 8013a96 <__swbuf_r+0x12>
 8013a8e:	6a03      	ldr	r3, [r0, #32]
 8013a90:	b90b      	cbnz	r3, 8013a96 <__swbuf_r+0x12>
 8013a92:	f7fc f8c3 	bl	800fc1c <__sinit>
 8013a96:	69a3      	ldr	r3, [r4, #24]
 8013a98:	60a3      	str	r3, [r4, #8]
 8013a9a:	89a3      	ldrh	r3, [r4, #12]
 8013a9c:	071a      	lsls	r2, r3, #28
 8013a9e:	d501      	bpl.n	8013aa4 <__swbuf_r+0x20>
 8013aa0:	6923      	ldr	r3, [r4, #16]
 8013aa2:	b943      	cbnz	r3, 8013ab6 <__swbuf_r+0x32>
 8013aa4:	4621      	mov	r1, r4
 8013aa6:	4628      	mov	r0, r5
 8013aa8:	f000 f82a 	bl	8013b00 <__swsetup_r>
 8013aac:	b118      	cbz	r0, 8013ab6 <__swbuf_r+0x32>
 8013aae:	f04f 37ff 	mov.w	r7, #4294967295
 8013ab2:	4638      	mov	r0, r7
 8013ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ab6:	6823      	ldr	r3, [r4, #0]
 8013ab8:	6922      	ldr	r2, [r4, #16]
 8013aba:	1a98      	subs	r0, r3, r2
 8013abc:	6963      	ldr	r3, [r4, #20]
 8013abe:	b2f6      	uxtb	r6, r6
 8013ac0:	4283      	cmp	r3, r0
 8013ac2:	4637      	mov	r7, r6
 8013ac4:	dc05      	bgt.n	8013ad2 <__swbuf_r+0x4e>
 8013ac6:	4621      	mov	r1, r4
 8013ac8:	4628      	mov	r0, r5
 8013aca:	f7ff f9b9 	bl	8012e40 <_fflush_r>
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	d1ed      	bne.n	8013aae <__swbuf_r+0x2a>
 8013ad2:	68a3      	ldr	r3, [r4, #8]
 8013ad4:	3b01      	subs	r3, #1
 8013ad6:	60a3      	str	r3, [r4, #8]
 8013ad8:	6823      	ldr	r3, [r4, #0]
 8013ada:	1c5a      	adds	r2, r3, #1
 8013adc:	6022      	str	r2, [r4, #0]
 8013ade:	701e      	strb	r6, [r3, #0]
 8013ae0:	6962      	ldr	r2, [r4, #20]
 8013ae2:	1c43      	adds	r3, r0, #1
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	d004      	beq.n	8013af2 <__swbuf_r+0x6e>
 8013ae8:	89a3      	ldrh	r3, [r4, #12]
 8013aea:	07db      	lsls	r3, r3, #31
 8013aec:	d5e1      	bpl.n	8013ab2 <__swbuf_r+0x2e>
 8013aee:	2e0a      	cmp	r6, #10
 8013af0:	d1df      	bne.n	8013ab2 <__swbuf_r+0x2e>
 8013af2:	4621      	mov	r1, r4
 8013af4:	4628      	mov	r0, r5
 8013af6:	f7ff f9a3 	bl	8012e40 <_fflush_r>
 8013afa:	2800      	cmp	r0, #0
 8013afc:	d0d9      	beq.n	8013ab2 <__swbuf_r+0x2e>
 8013afe:	e7d6      	b.n	8013aae <__swbuf_r+0x2a>

08013b00 <__swsetup_r>:
 8013b00:	b538      	push	{r3, r4, r5, lr}
 8013b02:	4b29      	ldr	r3, [pc, #164]	@ (8013ba8 <__swsetup_r+0xa8>)
 8013b04:	4605      	mov	r5, r0
 8013b06:	6818      	ldr	r0, [r3, #0]
 8013b08:	460c      	mov	r4, r1
 8013b0a:	b118      	cbz	r0, 8013b14 <__swsetup_r+0x14>
 8013b0c:	6a03      	ldr	r3, [r0, #32]
 8013b0e:	b90b      	cbnz	r3, 8013b14 <__swsetup_r+0x14>
 8013b10:	f7fc f884 	bl	800fc1c <__sinit>
 8013b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b18:	0719      	lsls	r1, r3, #28
 8013b1a:	d422      	bmi.n	8013b62 <__swsetup_r+0x62>
 8013b1c:	06da      	lsls	r2, r3, #27
 8013b1e:	d407      	bmi.n	8013b30 <__swsetup_r+0x30>
 8013b20:	2209      	movs	r2, #9
 8013b22:	602a      	str	r2, [r5, #0]
 8013b24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b28:	81a3      	strh	r3, [r4, #12]
 8013b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b2e:	e033      	b.n	8013b98 <__swsetup_r+0x98>
 8013b30:	0758      	lsls	r0, r3, #29
 8013b32:	d512      	bpl.n	8013b5a <__swsetup_r+0x5a>
 8013b34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013b36:	b141      	cbz	r1, 8013b4a <__swsetup_r+0x4a>
 8013b38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013b3c:	4299      	cmp	r1, r3
 8013b3e:	d002      	beq.n	8013b46 <__swsetup_r+0x46>
 8013b40:	4628      	mov	r0, r5
 8013b42:	f7fd f905 	bl	8010d50 <_free_r>
 8013b46:	2300      	movs	r3, #0
 8013b48:	6363      	str	r3, [r4, #52]	@ 0x34
 8013b4a:	89a3      	ldrh	r3, [r4, #12]
 8013b4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013b50:	81a3      	strh	r3, [r4, #12]
 8013b52:	2300      	movs	r3, #0
 8013b54:	6063      	str	r3, [r4, #4]
 8013b56:	6923      	ldr	r3, [r4, #16]
 8013b58:	6023      	str	r3, [r4, #0]
 8013b5a:	89a3      	ldrh	r3, [r4, #12]
 8013b5c:	f043 0308 	orr.w	r3, r3, #8
 8013b60:	81a3      	strh	r3, [r4, #12]
 8013b62:	6923      	ldr	r3, [r4, #16]
 8013b64:	b94b      	cbnz	r3, 8013b7a <__swsetup_r+0x7a>
 8013b66:	89a3      	ldrh	r3, [r4, #12]
 8013b68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013b70:	d003      	beq.n	8013b7a <__swsetup_r+0x7a>
 8013b72:	4621      	mov	r1, r4
 8013b74:	4628      	mov	r0, r5
 8013b76:	f000 f88b 	bl	8013c90 <__smakebuf_r>
 8013b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b7e:	f013 0201 	ands.w	r2, r3, #1
 8013b82:	d00a      	beq.n	8013b9a <__swsetup_r+0x9a>
 8013b84:	2200      	movs	r2, #0
 8013b86:	60a2      	str	r2, [r4, #8]
 8013b88:	6962      	ldr	r2, [r4, #20]
 8013b8a:	4252      	negs	r2, r2
 8013b8c:	61a2      	str	r2, [r4, #24]
 8013b8e:	6922      	ldr	r2, [r4, #16]
 8013b90:	b942      	cbnz	r2, 8013ba4 <__swsetup_r+0xa4>
 8013b92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013b96:	d1c5      	bne.n	8013b24 <__swsetup_r+0x24>
 8013b98:	bd38      	pop	{r3, r4, r5, pc}
 8013b9a:	0799      	lsls	r1, r3, #30
 8013b9c:	bf58      	it	pl
 8013b9e:	6962      	ldrpl	r2, [r4, #20]
 8013ba0:	60a2      	str	r2, [r4, #8]
 8013ba2:	e7f4      	b.n	8013b8e <__swsetup_r+0x8e>
 8013ba4:	2000      	movs	r0, #0
 8013ba6:	e7f7      	b.n	8013b98 <__swsetup_r+0x98>
 8013ba8:	200000c4 	.word	0x200000c4

08013bac <_raise_r>:
 8013bac:	291f      	cmp	r1, #31
 8013bae:	b538      	push	{r3, r4, r5, lr}
 8013bb0:	4605      	mov	r5, r0
 8013bb2:	460c      	mov	r4, r1
 8013bb4:	d904      	bls.n	8013bc0 <_raise_r+0x14>
 8013bb6:	2316      	movs	r3, #22
 8013bb8:	6003      	str	r3, [r0, #0]
 8013bba:	f04f 30ff 	mov.w	r0, #4294967295
 8013bbe:	bd38      	pop	{r3, r4, r5, pc}
 8013bc0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013bc2:	b112      	cbz	r2, 8013bca <_raise_r+0x1e>
 8013bc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013bc8:	b94b      	cbnz	r3, 8013bde <_raise_r+0x32>
 8013bca:	4628      	mov	r0, r5
 8013bcc:	f000 f830 	bl	8013c30 <_getpid_r>
 8013bd0:	4622      	mov	r2, r4
 8013bd2:	4601      	mov	r1, r0
 8013bd4:	4628      	mov	r0, r5
 8013bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bda:	f000 b817 	b.w	8013c0c <_kill_r>
 8013bde:	2b01      	cmp	r3, #1
 8013be0:	d00a      	beq.n	8013bf8 <_raise_r+0x4c>
 8013be2:	1c59      	adds	r1, r3, #1
 8013be4:	d103      	bne.n	8013bee <_raise_r+0x42>
 8013be6:	2316      	movs	r3, #22
 8013be8:	6003      	str	r3, [r0, #0]
 8013bea:	2001      	movs	r0, #1
 8013bec:	e7e7      	b.n	8013bbe <_raise_r+0x12>
 8013bee:	2100      	movs	r1, #0
 8013bf0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013bf4:	4620      	mov	r0, r4
 8013bf6:	4798      	blx	r3
 8013bf8:	2000      	movs	r0, #0
 8013bfa:	e7e0      	b.n	8013bbe <_raise_r+0x12>

08013bfc <raise>:
 8013bfc:	4b02      	ldr	r3, [pc, #8]	@ (8013c08 <raise+0xc>)
 8013bfe:	4601      	mov	r1, r0
 8013c00:	6818      	ldr	r0, [r3, #0]
 8013c02:	f7ff bfd3 	b.w	8013bac <_raise_r>
 8013c06:	bf00      	nop
 8013c08:	200000c4 	.word	0x200000c4

08013c0c <_kill_r>:
 8013c0c:	b538      	push	{r3, r4, r5, lr}
 8013c0e:	4d07      	ldr	r5, [pc, #28]	@ (8013c2c <_kill_r+0x20>)
 8013c10:	2300      	movs	r3, #0
 8013c12:	4604      	mov	r4, r0
 8013c14:	4608      	mov	r0, r1
 8013c16:	4611      	mov	r1, r2
 8013c18:	602b      	str	r3, [r5, #0]
 8013c1a:	f7f1 fa53 	bl	80050c4 <_kill>
 8013c1e:	1c43      	adds	r3, r0, #1
 8013c20:	d102      	bne.n	8013c28 <_kill_r+0x1c>
 8013c22:	682b      	ldr	r3, [r5, #0]
 8013c24:	b103      	cbz	r3, 8013c28 <_kill_r+0x1c>
 8013c26:	6023      	str	r3, [r4, #0]
 8013c28:	bd38      	pop	{r3, r4, r5, pc}
 8013c2a:	bf00      	nop
 8013c2c:	20005668 	.word	0x20005668

08013c30 <_getpid_r>:
 8013c30:	f7f1 ba40 	b.w	80050b4 <_getpid>

08013c34 <_malloc_usable_size_r>:
 8013c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c38:	1f18      	subs	r0, r3, #4
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	bfbc      	itt	lt
 8013c3e:	580b      	ldrlt	r3, [r1, r0]
 8013c40:	18c0      	addlt	r0, r0, r3
 8013c42:	4770      	bx	lr

08013c44 <__swhatbuf_r>:
 8013c44:	b570      	push	{r4, r5, r6, lr}
 8013c46:	460c      	mov	r4, r1
 8013c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c4c:	2900      	cmp	r1, #0
 8013c4e:	b096      	sub	sp, #88	@ 0x58
 8013c50:	4615      	mov	r5, r2
 8013c52:	461e      	mov	r6, r3
 8013c54:	da0d      	bge.n	8013c72 <__swhatbuf_r+0x2e>
 8013c56:	89a3      	ldrh	r3, [r4, #12]
 8013c58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013c5c:	f04f 0100 	mov.w	r1, #0
 8013c60:	bf14      	ite	ne
 8013c62:	2340      	movne	r3, #64	@ 0x40
 8013c64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013c68:	2000      	movs	r0, #0
 8013c6a:	6031      	str	r1, [r6, #0]
 8013c6c:	602b      	str	r3, [r5, #0]
 8013c6e:	b016      	add	sp, #88	@ 0x58
 8013c70:	bd70      	pop	{r4, r5, r6, pc}
 8013c72:	466a      	mov	r2, sp
 8013c74:	f000 f848 	bl	8013d08 <_fstat_r>
 8013c78:	2800      	cmp	r0, #0
 8013c7a:	dbec      	blt.n	8013c56 <__swhatbuf_r+0x12>
 8013c7c:	9901      	ldr	r1, [sp, #4]
 8013c7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013c82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013c86:	4259      	negs	r1, r3
 8013c88:	4159      	adcs	r1, r3
 8013c8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013c8e:	e7eb      	b.n	8013c68 <__swhatbuf_r+0x24>

08013c90 <__smakebuf_r>:
 8013c90:	898b      	ldrh	r3, [r1, #12]
 8013c92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c94:	079d      	lsls	r5, r3, #30
 8013c96:	4606      	mov	r6, r0
 8013c98:	460c      	mov	r4, r1
 8013c9a:	d507      	bpl.n	8013cac <__smakebuf_r+0x1c>
 8013c9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013ca0:	6023      	str	r3, [r4, #0]
 8013ca2:	6123      	str	r3, [r4, #16]
 8013ca4:	2301      	movs	r3, #1
 8013ca6:	6163      	str	r3, [r4, #20]
 8013ca8:	b003      	add	sp, #12
 8013caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cac:	ab01      	add	r3, sp, #4
 8013cae:	466a      	mov	r2, sp
 8013cb0:	f7ff ffc8 	bl	8013c44 <__swhatbuf_r>
 8013cb4:	9f00      	ldr	r7, [sp, #0]
 8013cb6:	4605      	mov	r5, r0
 8013cb8:	4639      	mov	r1, r7
 8013cba:	4630      	mov	r0, r6
 8013cbc:	f7fa ffe8 	bl	800ec90 <_malloc_r>
 8013cc0:	b948      	cbnz	r0, 8013cd6 <__smakebuf_r+0x46>
 8013cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013cc6:	059a      	lsls	r2, r3, #22
 8013cc8:	d4ee      	bmi.n	8013ca8 <__smakebuf_r+0x18>
 8013cca:	f023 0303 	bic.w	r3, r3, #3
 8013cce:	f043 0302 	orr.w	r3, r3, #2
 8013cd2:	81a3      	strh	r3, [r4, #12]
 8013cd4:	e7e2      	b.n	8013c9c <__smakebuf_r+0xc>
 8013cd6:	89a3      	ldrh	r3, [r4, #12]
 8013cd8:	6020      	str	r0, [r4, #0]
 8013cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013cde:	81a3      	strh	r3, [r4, #12]
 8013ce0:	9b01      	ldr	r3, [sp, #4]
 8013ce2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013ce6:	b15b      	cbz	r3, 8013d00 <__smakebuf_r+0x70>
 8013ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013cec:	4630      	mov	r0, r6
 8013cee:	f000 f81d 	bl	8013d2c <_isatty_r>
 8013cf2:	b128      	cbz	r0, 8013d00 <__smakebuf_r+0x70>
 8013cf4:	89a3      	ldrh	r3, [r4, #12]
 8013cf6:	f023 0303 	bic.w	r3, r3, #3
 8013cfa:	f043 0301 	orr.w	r3, r3, #1
 8013cfe:	81a3      	strh	r3, [r4, #12]
 8013d00:	89a3      	ldrh	r3, [r4, #12]
 8013d02:	431d      	orrs	r5, r3
 8013d04:	81a5      	strh	r5, [r4, #12]
 8013d06:	e7cf      	b.n	8013ca8 <__smakebuf_r+0x18>

08013d08 <_fstat_r>:
 8013d08:	b538      	push	{r3, r4, r5, lr}
 8013d0a:	4d07      	ldr	r5, [pc, #28]	@ (8013d28 <_fstat_r+0x20>)
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	4604      	mov	r4, r0
 8013d10:	4608      	mov	r0, r1
 8013d12:	4611      	mov	r1, r2
 8013d14:	602b      	str	r3, [r5, #0]
 8013d16:	f7f1 fa19 	bl	800514c <_fstat>
 8013d1a:	1c43      	adds	r3, r0, #1
 8013d1c:	d102      	bne.n	8013d24 <_fstat_r+0x1c>
 8013d1e:	682b      	ldr	r3, [r5, #0]
 8013d20:	b103      	cbz	r3, 8013d24 <_fstat_r+0x1c>
 8013d22:	6023      	str	r3, [r4, #0]
 8013d24:	bd38      	pop	{r3, r4, r5, pc}
 8013d26:	bf00      	nop
 8013d28:	20005668 	.word	0x20005668

08013d2c <_isatty_r>:
 8013d2c:	b538      	push	{r3, r4, r5, lr}
 8013d2e:	4d06      	ldr	r5, [pc, #24]	@ (8013d48 <_isatty_r+0x1c>)
 8013d30:	2300      	movs	r3, #0
 8013d32:	4604      	mov	r4, r0
 8013d34:	4608      	mov	r0, r1
 8013d36:	602b      	str	r3, [r5, #0]
 8013d38:	f7f1 fa18 	bl	800516c <_isatty>
 8013d3c:	1c43      	adds	r3, r0, #1
 8013d3e:	d102      	bne.n	8013d46 <_isatty_r+0x1a>
 8013d40:	682b      	ldr	r3, [r5, #0]
 8013d42:	b103      	cbz	r3, 8013d46 <_isatty_r+0x1a>
 8013d44:	6023      	str	r3, [r4, #0]
 8013d46:	bd38      	pop	{r3, r4, r5, pc}
 8013d48:	20005668 	.word	0x20005668

08013d4c <pow>:
 8013d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d4e:	ed2d 8b02 	vpush	{d8}
 8013d52:	eeb0 8a40 	vmov.f32	s16, s0
 8013d56:	eef0 8a60 	vmov.f32	s17, s1
 8013d5a:	ec55 4b11 	vmov	r4, r5, d1
 8013d5e:	f000 f977 	bl	8014050 <__ieee754_pow>
 8013d62:	4622      	mov	r2, r4
 8013d64:	462b      	mov	r3, r5
 8013d66:	4620      	mov	r0, r4
 8013d68:	4629      	mov	r1, r5
 8013d6a:	ec57 6b10 	vmov	r6, r7, d0
 8013d6e:	f7ec feed 	bl	8000b4c <__aeabi_dcmpun>
 8013d72:	2800      	cmp	r0, #0
 8013d74:	d13b      	bne.n	8013dee <pow+0xa2>
 8013d76:	ec51 0b18 	vmov	r0, r1, d8
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	f7ec feb3 	bl	8000ae8 <__aeabi_dcmpeq>
 8013d82:	b1b8      	cbz	r0, 8013db4 <pow+0x68>
 8013d84:	2200      	movs	r2, #0
 8013d86:	2300      	movs	r3, #0
 8013d88:	4620      	mov	r0, r4
 8013d8a:	4629      	mov	r1, r5
 8013d8c:	f7ec feac 	bl	8000ae8 <__aeabi_dcmpeq>
 8013d90:	2800      	cmp	r0, #0
 8013d92:	d146      	bne.n	8013e22 <pow+0xd6>
 8013d94:	ec45 4b10 	vmov	d0, r4, r5
 8013d98:	f000 f874 	bl	8013e84 <finite>
 8013d9c:	b338      	cbz	r0, 8013dee <pow+0xa2>
 8013d9e:	2200      	movs	r2, #0
 8013da0:	2300      	movs	r3, #0
 8013da2:	4620      	mov	r0, r4
 8013da4:	4629      	mov	r1, r5
 8013da6:	f7ec fea9 	bl	8000afc <__aeabi_dcmplt>
 8013daa:	b300      	cbz	r0, 8013dee <pow+0xa2>
 8013dac:	f7fc f922 	bl	800fff4 <__errno>
 8013db0:	2322      	movs	r3, #34	@ 0x22
 8013db2:	e01b      	b.n	8013dec <pow+0xa0>
 8013db4:	ec47 6b10 	vmov	d0, r6, r7
 8013db8:	f000 f864 	bl	8013e84 <finite>
 8013dbc:	b9e0      	cbnz	r0, 8013df8 <pow+0xac>
 8013dbe:	eeb0 0a48 	vmov.f32	s0, s16
 8013dc2:	eef0 0a68 	vmov.f32	s1, s17
 8013dc6:	f000 f85d 	bl	8013e84 <finite>
 8013dca:	b1a8      	cbz	r0, 8013df8 <pow+0xac>
 8013dcc:	ec45 4b10 	vmov	d0, r4, r5
 8013dd0:	f000 f858 	bl	8013e84 <finite>
 8013dd4:	b180      	cbz	r0, 8013df8 <pow+0xac>
 8013dd6:	4632      	mov	r2, r6
 8013dd8:	463b      	mov	r3, r7
 8013dda:	4630      	mov	r0, r6
 8013ddc:	4639      	mov	r1, r7
 8013dde:	f7ec feb5 	bl	8000b4c <__aeabi_dcmpun>
 8013de2:	2800      	cmp	r0, #0
 8013de4:	d0e2      	beq.n	8013dac <pow+0x60>
 8013de6:	f7fc f905 	bl	800fff4 <__errno>
 8013dea:	2321      	movs	r3, #33	@ 0x21
 8013dec:	6003      	str	r3, [r0, #0]
 8013dee:	ecbd 8b02 	vpop	{d8}
 8013df2:	ec47 6b10 	vmov	d0, r6, r7
 8013df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013df8:	2200      	movs	r2, #0
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	4630      	mov	r0, r6
 8013dfe:	4639      	mov	r1, r7
 8013e00:	f7ec fe72 	bl	8000ae8 <__aeabi_dcmpeq>
 8013e04:	2800      	cmp	r0, #0
 8013e06:	d0f2      	beq.n	8013dee <pow+0xa2>
 8013e08:	eeb0 0a48 	vmov.f32	s0, s16
 8013e0c:	eef0 0a68 	vmov.f32	s1, s17
 8013e10:	f000 f838 	bl	8013e84 <finite>
 8013e14:	2800      	cmp	r0, #0
 8013e16:	d0ea      	beq.n	8013dee <pow+0xa2>
 8013e18:	ec45 4b10 	vmov	d0, r4, r5
 8013e1c:	f000 f832 	bl	8013e84 <finite>
 8013e20:	e7c3      	b.n	8013daa <pow+0x5e>
 8013e22:	4f01      	ldr	r7, [pc, #4]	@ (8013e28 <pow+0xdc>)
 8013e24:	2600      	movs	r6, #0
 8013e26:	e7e2      	b.n	8013dee <pow+0xa2>
 8013e28:	3ff00000 	.word	0x3ff00000

08013e2c <sqrt>:
 8013e2c:	b538      	push	{r3, r4, r5, lr}
 8013e2e:	ed2d 8b02 	vpush	{d8}
 8013e32:	ec55 4b10 	vmov	r4, r5, d0
 8013e36:	f000 f831 	bl	8013e9c <__ieee754_sqrt>
 8013e3a:	4622      	mov	r2, r4
 8013e3c:	462b      	mov	r3, r5
 8013e3e:	4620      	mov	r0, r4
 8013e40:	4629      	mov	r1, r5
 8013e42:	eeb0 8a40 	vmov.f32	s16, s0
 8013e46:	eef0 8a60 	vmov.f32	s17, s1
 8013e4a:	f7ec fe7f 	bl	8000b4c <__aeabi_dcmpun>
 8013e4e:	b990      	cbnz	r0, 8013e76 <sqrt+0x4a>
 8013e50:	2200      	movs	r2, #0
 8013e52:	2300      	movs	r3, #0
 8013e54:	4620      	mov	r0, r4
 8013e56:	4629      	mov	r1, r5
 8013e58:	f7ec fe50 	bl	8000afc <__aeabi_dcmplt>
 8013e5c:	b158      	cbz	r0, 8013e76 <sqrt+0x4a>
 8013e5e:	f7fc f8c9 	bl	800fff4 <__errno>
 8013e62:	2321      	movs	r3, #33	@ 0x21
 8013e64:	6003      	str	r3, [r0, #0]
 8013e66:	2200      	movs	r2, #0
 8013e68:	2300      	movs	r3, #0
 8013e6a:	4610      	mov	r0, r2
 8013e6c:	4619      	mov	r1, r3
 8013e6e:	f7ec fcfd 	bl	800086c <__aeabi_ddiv>
 8013e72:	ec41 0b18 	vmov	d8, r0, r1
 8013e76:	eeb0 0a48 	vmov.f32	s0, s16
 8013e7a:	eef0 0a68 	vmov.f32	s1, s17
 8013e7e:	ecbd 8b02 	vpop	{d8}
 8013e82:	bd38      	pop	{r3, r4, r5, pc}

08013e84 <finite>:
 8013e84:	b082      	sub	sp, #8
 8013e86:	ed8d 0b00 	vstr	d0, [sp]
 8013e8a:	9801      	ldr	r0, [sp, #4]
 8013e8c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8013e90:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8013e94:	0fc0      	lsrs	r0, r0, #31
 8013e96:	b002      	add	sp, #8
 8013e98:	4770      	bx	lr
	...

08013e9c <__ieee754_sqrt>:
 8013e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ea0:	4a68      	ldr	r2, [pc, #416]	@ (8014044 <__ieee754_sqrt+0x1a8>)
 8013ea2:	ec55 4b10 	vmov	r4, r5, d0
 8013ea6:	43aa      	bics	r2, r5
 8013ea8:	462b      	mov	r3, r5
 8013eaa:	4621      	mov	r1, r4
 8013eac:	d110      	bne.n	8013ed0 <__ieee754_sqrt+0x34>
 8013eae:	4622      	mov	r2, r4
 8013eb0:	4620      	mov	r0, r4
 8013eb2:	4629      	mov	r1, r5
 8013eb4:	f7ec fbb0 	bl	8000618 <__aeabi_dmul>
 8013eb8:	4602      	mov	r2, r0
 8013eba:	460b      	mov	r3, r1
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	4629      	mov	r1, r5
 8013ec0:	f7ec f9f4 	bl	80002ac <__adddf3>
 8013ec4:	4604      	mov	r4, r0
 8013ec6:	460d      	mov	r5, r1
 8013ec8:	ec45 4b10 	vmov	d0, r4, r5
 8013ecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ed0:	2d00      	cmp	r5, #0
 8013ed2:	dc0e      	bgt.n	8013ef2 <__ieee754_sqrt+0x56>
 8013ed4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8013ed8:	4322      	orrs	r2, r4
 8013eda:	d0f5      	beq.n	8013ec8 <__ieee754_sqrt+0x2c>
 8013edc:	b19d      	cbz	r5, 8013f06 <__ieee754_sqrt+0x6a>
 8013ede:	4622      	mov	r2, r4
 8013ee0:	4620      	mov	r0, r4
 8013ee2:	4629      	mov	r1, r5
 8013ee4:	f7ec f9e0 	bl	80002a8 <__aeabi_dsub>
 8013ee8:	4602      	mov	r2, r0
 8013eea:	460b      	mov	r3, r1
 8013eec:	f7ec fcbe 	bl	800086c <__aeabi_ddiv>
 8013ef0:	e7e8      	b.n	8013ec4 <__ieee754_sqrt+0x28>
 8013ef2:	152a      	asrs	r2, r5, #20
 8013ef4:	d115      	bne.n	8013f22 <__ieee754_sqrt+0x86>
 8013ef6:	2000      	movs	r0, #0
 8013ef8:	e009      	b.n	8013f0e <__ieee754_sqrt+0x72>
 8013efa:	0acb      	lsrs	r3, r1, #11
 8013efc:	3a15      	subs	r2, #21
 8013efe:	0549      	lsls	r1, r1, #21
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d0fa      	beq.n	8013efa <__ieee754_sqrt+0x5e>
 8013f04:	e7f7      	b.n	8013ef6 <__ieee754_sqrt+0x5a>
 8013f06:	462a      	mov	r2, r5
 8013f08:	e7fa      	b.n	8013f00 <__ieee754_sqrt+0x64>
 8013f0a:	005b      	lsls	r3, r3, #1
 8013f0c:	3001      	adds	r0, #1
 8013f0e:	02dc      	lsls	r4, r3, #11
 8013f10:	d5fb      	bpl.n	8013f0a <__ieee754_sqrt+0x6e>
 8013f12:	1e44      	subs	r4, r0, #1
 8013f14:	1b12      	subs	r2, r2, r4
 8013f16:	f1c0 0420 	rsb	r4, r0, #32
 8013f1a:	fa21 f404 	lsr.w	r4, r1, r4
 8013f1e:	4323      	orrs	r3, r4
 8013f20:	4081      	lsls	r1, r0
 8013f22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f26:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8013f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013f2e:	07d2      	lsls	r2, r2, #31
 8013f30:	bf5c      	itt	pl
 8013f32:	005b      	lslpl	r3, r3, #1
 8013f34:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8013f38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013f3c:	bf58      	it	pl
 8013f3e:	0049      	lslpl	r1, r1, #1
 8013f40:	2600      	movs	r6, #0
 8013f42:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8013f46:	106d      	asrs	r5, r5, #1
 8013f48:	0049      	lsls	r1, r1, #1
 8013f4a:	2016      	movs	r0, #22
 8013f4c:	4632      	mov	r2, r6
 8013f4e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8013f52:	1917      	adds	r7, r2, r4
 8013f54:	429f      	cmp	r7, r3
 8013f56:	bfde      	ittt	le
 8013f58:	193a      	addle	r2, r7, r4
 8013f5a:	1bdb      	suble	r3, r3, r7
 8013f5c:	1936      	addle	r6, r6, r4
 8013f5e:	0fcf      	lsrs	r7, r1, #31
 8013f60:	3801      	subs	r0, #1
 8013f62:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8013f66:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013f6a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8013f6e:	d1f0      	bne.n	8013f52 <__ieee754_sqrt+0xb6>
 8013f70:	4604      	mov	r4, r0
 8013f72:	2720      	movs	r7, #32
 8013f74:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8013f78:	429a      	cmp	r2, r3
 8013f7a:	eb00 0e0c 	add.w	lr, r0, ip
 8013f7e:	db02      	blt.n	8013f86 <__ieee754_sqrt+0xea>
 8013f80:	d113      	bne.n	8013faa <__ieee754_sqrt+0x10e>
 8013f82:	458e      	cmp	lr, r1
 8013f84:	d811      	bhi.n	8013faa <__ieee754_sqrt+0x10e>
 8013f86:	f1be 0f00 	cmp.w	lr, #0
 8013f8a:	eb0e 000c 	add.w	r0, lr, ip
 8013f8e:	da42      	bge.n	8014016 <__ieee754_sqrt+0x17a>
 8013f90:	2800      	cmp	r0, #0
 8013f92:	db40      	blt.n	8014016 <__ieee754_sqrt+0x17a>
 8013f94:	f102 0801 	add.w	r8, r2, #1
 8013f98:	1a9b      	subs	r3, r3, r2
 8013f9a:	458e      	cmp	lr, r1
 8013f9c:	bf88      	it	hi
 8013f9e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013fa2:	eba1 010e 	sub.w	r1, r1, lr
 8013fa6:	4464      	add	r4, ip
 8013fa8:	4642      	mov	r2, r8
 8013faa:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013fae:	3f01      	subs	r7, #1
 8013fb0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013fb4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013fb8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013fbc:	d1dc      	bne.n	8013f78 <__ieee754_sqrt+0xdc>
 8013fbe:	4319      	orrs	r1, r3
 8013fc0:	d01b      	beq.n	8013ffa <__ieee754_sqrt+0x15e>
 8013fc2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8014048 <__ieee754_sqrt+0x1ac>
 8013fc6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801404c <__ieee754_sqrt+0x1b0>
 8013fca:	e9da 0100 	ldrd	r0, r1, [sl]
 8013fce:	e9db 2300 	ldrd	r2, r3, [fp]
 8013fd2:	f7ec f969 	bl	80002a8 <__aeabi_dsub>
 8013fd6:	e9da 8900 	ldrd	r8, r9, [sl]
 8013fda:	4602      	mov	r2, r0
 8013fdc:	460b      	mov	r3, r1
 8013fde:	4640      	mov	r0, r8
 8013fe0:	4649      	mov	r1, r9
 8013fe2:	f7ec fd95 	bl	8000b10 <__aeabi_dcmple>
 8013fe6:	b140      	cbz	r0, 8013ffa <__ieee754_sqrt+0x15e>
 8013fe8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8013fec:	e9da 0100 	ldrd	r0, r1, [sl]
 8013ff0:	e9db 2300 	ldrd	r2, r3, [fp]
 8013ff4:	d111      	bne.n	801401a <__ieee754_sqrt+0x17e>
 8013ff6:	3601      	adds	r6, #1
 8013ff8:	463c      	mov	r4, r7
 8013ffa:	1072      	asrs	r2, r6, #1
 8013ffc:	0863      	lsrs	r3, r4, #1
 8013ffe:	07f1      	lsls	r1, r6, #31
 8014000:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8014004:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8014008:	bf48      	it	mi
 801400a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801400e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8014012:	4618      	mov	r0, r3
 8014014:	e756      	b.n	8013ec4 <__ieee754_sqrt+0x28>
 8014016:	4690      	mov	r8, r2
 8014018:	e7be      	b.n	8013f98 <__ieee754_sqrt+0xfc>
 801401a:	f7ec f947 	bl	80002ac <__adddf3>
 801401e:	e9da 8900 	ldrd	r8, r9, [sl]
 8014022:	4602      	mov	r2, r0
 8014024:	460b      	mov	r3, r1
 8014026:	4640      	mov	r0, r8
 8014028:	4649      	mov	r1, r9
 801402a:	f7ec fd67 	bl	8000afc <__aeabi_dcmplt>
 801402e:	b120      	cbz	r0, 801403a <__ieee754_sqrt+0x19e>
 8014030:	1ca0      	adds	r0, r4, #2
 8014032:	bf08      	it	eq
 8014034:	3601      	addeq	r6, #1
 8014036:	3402      	adds	r4, #2
 8014038:	e7df      	b.n	8013ffa <__ieee754_sqrt+0x15e>
 801403a:	1c63      	adds	r3, r4, #1
 801403c:	f023 0401 	bic.w	r4, r3, #1
 8014040:	e7db      	b.n	8013ffa <__ieee754_sqrt+0x15e>
 8014042:	bf00      	nop
 8014044:	7ff00000 	.word	0x7ff00000
 8014048:	20000288 	.word	0x20000288
 801404c:	20000280 	.word	0x20000280

08014050 <__ieee754_pow>:
 8014050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014054:	b091      	sub	sp, #68	@ 0x44
 8014056:	ed8d 1b00 	vstr	d1, [sp]
 801405a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801405e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8014062:	ea5a 0001 	orrs.w	r0, sl, r1
 8014066:	ec57 6b10 	vmov	r6, r7, d0
 801406a:	d113      	bne.n	8014094 <__ieee754_pow+0x44>
 801406c:	19b3      	adds	r3, r6, r6
 801406e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8014072:	4152      	adcs	r2, r2
 8014074:	4298      	cmp	r0, r3
 8014076:	4b98      	ldr	r3, [pc, #608]	@ (80142d8 <__ieee754_pow+0x288>)
 8014078:	4193      	sbcs	r3, r2
 801407a:	f080 84ea 	bcs.w	8014a52 <__ieee754_pow+0xa02>
 801407e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014082:	4630      	mov	r0, r6
 8014084:	4639      	mov	r1, r7
 8014086:	f7ec f911 	bl	80002ac <__adddf3>
 801408a:	ec41 0b10 	vmov	d0, r0, r1
 801408e:	b011      	add	sp, #68	@ 0x44
 8014090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014094:	4a91      	ldr	r2, [pc, #580]	@ (80142dc <__ieee754_pow+0x28c>)
 8014096:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801409a:	4590      	cmp	r8, r2
 801409c:	463d      	mov	r5, r7
 801409e:	4633      	mov	r3, r6
 80140a0:	d806      	bhi.n	80140b0 <__ieee754_pow+0x60>
 80140a2:	d101      	bne.n	80140a8 <__ieee754_pow+0x58>
 80140a4:	2e00      	cmp	r6, #0
 80140a6:	d1ea      	bne.n	801407e <__ieee754_pow+0x2e>
 80140a8:	4592      	cmp	sl, r2
 80140aa:	d801      	bhi.n	80140b0 <__ieee754_pow+0x60>
 80140ac:	d10e      	bne.n	80140cc <__ieee754_pow+0x7c>
 80140ae:	b169      	cbz	r1, 80140cc <__ieee754_pow+0x7c>
 80140b0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80140b4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80140b8:	431d      	orrs	r5, r3
 80140ba:	d1e0      	bne.n	801407e <__ieee754_pow+0x2e>
 80140bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80140c0:	18db      	adds	r3, r3, r3
 80140c2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80140c6:	4152      	adcs	r2, r2
 80140c8:	429d      	cmp	r5, r3
 80140ca:	e7d4      	b.n	8014076 <__ieee754_pow+0x26>
 80140cc:	2d00      	cmp	r5, #0
 80140ce:	46c3      	mov	fp, r8
 80140d0:	da3a      	bge.n	8014148 <__ieee754_pow+0xf8>
 80140d2:	4a83      	ldr	r2, [pc, #524]	@ (80142e0 <__ieee754_pow+0x290>)
 80140d4:	4592      	cmp	sl, r2
 80140d6:	d84d      	bhi.n	8014174 <__ieee754_pow+0x124>
 80140d8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80140dc:	4592      	cmp	sl, r2
 80140de:	f240 84c7 	bls.w	8014a70 <__ieee754_pow+0xa20>
 80140e2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80140e6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80140ea:	2a14      	cmp	r2, #20
 80140ec:	dd0f      	ble.n	801410e <__ieee754_pow+0xbe>
 80140ee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80140f2:	fa21 f402 	lsr.w	r4, r1, r2
 80140f6:	fa04 f202 	lsl.w	r2, r4, r2
 80140fa:	428a      	cmp	r2, r1
 80140fc:	f040 84b8 	bne.w	8014a70 <__ieee754_pow+0xa20>
 8014100:	f004 0401 	and.w	r4, r4, #1
 8014104:	f1c4 0402 	rsb	r4, r4, #2
 8014108:	2900      	cmp	r1, #0
 801410a:	d158      	bne.n	80141be <__ieee754_pow+0x16e>
 801410c:	e00e      	b.n	801412c <__ieee754_pow+0xdc>
 801410e:	2900      	cmp	r1, #0
 8014110:	d154      	bne.n	80141bc <__ieee754_pow+0x16c>
 8014112:	f1c2 0214 	rsb	r2, r2, #20
 8014116:	fa4a f402 	asr.w	r4, sl, r2
 801411a:	fa04 f202 	lsl.w	r2, r4, r2
 801411e:	4552      	cmp	r2, sl
 8014120:	f040 84a3 	bne.w	8014a6a <__ieee754_pow+0xa1a>
 8014124:	f004 0401 	and.w	r4, r4, #1
 8014128:	f1c4 0402 	rsb	r4, r4, #2
 801412c:	4a6d      	ldr	r2, [pc, #436]	@ (80142e4 <__ieee754_pow+0x294>)
 801412e:	4592      	cmp	sl, r2
 8014130:	d12e      	bne.n	8014190 <__ieee754_pow+0x140>
 8014132:	f1b9 0f00 	cmp.w	r9, #0
 8014136:	f280 8494 	bge.w	8014a62 <__ieee754_pow+0xa12>
 801413a:	496a      	ldr	r1, [pc, #424]	@ (80142e4 <__ieee754_pow+0x294>)
 801413c:	4632      	mov	r2, r6
 801413e:	463b      	mov	r3, r7
 8014140:	2000      	movs	r0, #0
 8014142:	f7ec fb93 	bl	800086c <__aeabi_ddiv>
 8014146:	e7a0      	b.n	801408a <__ieee754_pow+0x3a>
 8014148:	2400      	movs	r4, #0
 801414a:	bbc1      	cbnz	r1, 80141be <__ieee754_pow+0x16e>
 801414c:	4a63      	ldr	r2, [pc, #396]	@ (80142dc <__ieee754_pow+0x28c>)
 801414e:	4592      	cmp	sl, r2
 8014150:	d1ec      	bne.n	801412c <__ieee754_pow+0xdc>
 8014152:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8014156:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801415a:	431a      	orrs	r2, r3
 801415c:	f000 8479 	beq.w	8014a52 <__ieee754_pow+0xa02>
 8014160:	4b61      	ldr	r3, [pc, #388]	@ (80142e8 <__ieee754_pow+0x298>)
 8014162:	4598      	cmp	r8, r3
 8014164:	d908      	bls.n	8014178 <__ieee754_pow+0x128>
 8014166:	f1b9 0f00 	cmp.w	r9, #0
 801416a:	f2c0 8476 	blt.w	8014a5a <__ieee754_pow+0xa0a>
 801416e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014172:	e78a      	b.n	801408a <__ieee754_pow+0x3a>
 8014174:	2402      	movs	r4, #2
 8014176:	e7e8      	b.n	801414a <__ieee754_pow+0xfa>
 8014178:	f1b9 0f00 	cmp.w	r9, #0
 801417c:	f04f 0000 	mov.w	r0, #0
 8014180:	f04f 0100 	mov.w	r1, #0
 8014184:	da81      	bge.n	801408a <__ieee754_pow+0x3a>
 8014186:	e9dd 0300 	ldrd	r0, r3, [sp]
 801418a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801418e:	e77c      	b.n	801408a <__ieee754_pow+0x3a>
 8014190:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8014194:	d106      	bne.n	80141a4 <__ieee754_pow+0x154>
 8014196:	4632      	mov	r2, r6
 8014198:	463b      	mov	r3, r7
 801419a:	4630      	mov	r0, r6
 801419c:	4639      	mov	r1, r7
 801419e:	f7ec fa3b 	bl	8000618 <__aeabi_dmul>
 80141a2:	e772      	b.n	801408a <__ieee754_pow+0x3a>
 80141a4:	4a51      	ldr	r2, [pc, #324]	@ (80142ec <__ieee754_pow+0x29c>)
 80141a6:	4591      	cmp	r9, r2
 80141a8:	d109      	bne.n	80141be <__ieee754_pow+0x16e>
 80141aa:	2d00      	cmp	r5, #0
 80141ac:	db07      	blt.n	80141be <__ieee754_pow+0x16e>
 80141ae:	ec47 6b10 	vmov	d0, r6, r7
 80141b2:	b011      	add	sp, #68	@ 0x44
 80141b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b8:	f7ff be70 	b.w	8013e9c <__ieee754_sqrt>
 80141bc:	2400      	movs	r4, #0
 80141be:	ec47 6b10 	vmov	d0, r6, r7
 80141c2:	9302      	str	r3, [sp, #8]
 80141c4:	f000 fc88 	bl	8014ad8 <fabs>
 80141c8:	9b02      	ldr	r3, [sp, #8]
 80141ca:	ec51 0b10 	vmov	r0, r1, d0
 80141ce:	bb53      	cbnz	r3, 8014226 <__ieee754_pow+0x1d6>
 80141d0:	4b44      	ldr	r3, [pc, #272]	@ (80142e4 <__ieee754_pow+0x294>)
 80141d2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d002      	beq.n	80141e0 <__ieee754_pow+0x190>
 80141da:	f1b8 0f00 	cmp.w	r8, #0
 80141de:	d122      	bne.n	8014226 <__ieee754_pow+0x1d6>
 80141e0:	f1b9 0f00 	cmp.w	r9, #0
 80141e4:	da05      	bge.n	80141f2 <__ieee754_pow+0x1a2>
 80141e6:	4602      	mov	r2, r0
 80141e8:	460b      	mov	r3, r1
 80141ea:	2000      	movs	r0, #0
 80141ec:	493d      	ldr	r1, [pc, #244]	@ (80142e4 <__ieee754_pow+0x294>)
 80141ee:	f7ec fb3d 	bl	800086c <__aeabi_ddiv>
 80141f2:	2d00      	cmp	r5, #0
 80141f4:	f6bf af49 	bge.w	801408a <__ieee754_pow+0x3a>
 80141f8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80141fc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8014200:	ea58 0804 	orrs.w	r8, r8, r4
 8014204:	d108      	bne.n	8014218 <__ieee754_pow+0x1c8>
 8014206:	4602      	mov	r2, r0
 8014208:	460b      	mov	r3, r1
 801420a:	4610      	mov	r0, r2
 801420c:	4619      	mov	r1, r3
 801420e:	f7ec f84b 	bl	80002a8 <__aeabi_dsub>
 8014212:	4602      	mov	r2, r0
 8014214:	460b      	mov	r3, r1
 8014216:	e794      	b.n	8014142 <__ieee754_pow+0xf2>
 8014218:	2c01      	cmp	r4, #1
 801421a:	f47f af36 	bne.w	801408a <__ieee754_pow+0x3a>
 801421e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014222:	4619      	mov	r1, r3
 8014224:	e731      	b.n	801408a <__ieee754_pow+0x3a>
 8014226:	0feb      	lsrs	r3, r5, #31
 8014228:	3b01      	subs	r3, #1
 801422a:	ea53 0204 	orrs.w	r2, r3, r4
 801422e:	d102      	bne.n	8014236 <__ieee754_pow+0x1e6>
 8014230:	4632      	mov	r2, r6
 8014232:	463b      	mov	r3, r7
 8014234:	e7e9      	b.n	801420a <__ieee754_pow+0x1ba>
 8014236:	3c01      	subs	r4, #1
 8014238:	431c      	orrs	r4, r3
 801423a:	d016      	beq.n	801426a <__ieee754_pow+0x21a>
 801423c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80142c8 <__ieee754_pow+0x278>
 8014240:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8014244:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014248:	f240 8112 	bls.w	8014470 <__ieee754_pow+0x420>
 801424c:	4b28      	ldr	r3, [pc, #160]	@ (80142f0 <__ieee754_pow+0x2a0>)
 801424e:	459a      	cmp	sl, r3
 8014250:	4b25      	ldr	r3, [pc, #148]	@ (80142e8 <__ieee754_pow+0x298>)
 8014252:	d916      	bls.n	8014282 <__ieee754_pow+0x232>
 8014254:	4598      	cmp	r8, r3
 8014256:	d80b      	bhi.n	8014270 <__ieee754_pow+0x220>
 8014258:	f1b9 0f00 	cmp.w	r9, #0
 801425c:	da0b      	bge.n	8014276 <__ieee754_pow+0x226>
 801425e:	2000      	movs	r0, #0
 8014260:	b011      	add	sp, #68	@ 0x44
 8014262:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014266:	f000 bcf3 	b.w	8014c50 <__math_oflow>
 801426a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80142d0 <__ieee754_pow+0x280>
 801426e:	e7e7      	b.n	8014240 <__ieee754_pow+0x1f0>
 8014270:	f1b9 0f00 	cmp.w	r9, #0
 8014274:	dcf3      	bgt.n	801425e <__ieee754_pow+0x20e>
 8014276:	2000      	movs	r0, #0
 8014278:	b011      	add	sp, #68	@ 0x44
 801427a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801427e:	f000 bcdf 	b.w	8014c40 <__math_uflow>
 8014282:	4598      	cmp	r8, r3
 8014284:	d20c      	bcs.n	80142a0 <__ieee754_pow+0x250>
 8014286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801428a:	2200      	movs	r2, #0
 801428c:	2300      	movs	r3, #0
 801428e:	f7ec fc35 	bl	8000afc <__aeabi_dcmplt>
 8014292:	3800      	subs	r0, #0
 8014294:	bf18      	it	ne
 8014296:	2001      	movne	r0, #1
 8014298:	f1b9 0f00 	cmp.w	r9, #0
 801429c:	daec      	bge.n	8014278 <__ieee754_pow+0x228>
 801429e:	e7df      	b.n	8014260 <__ieee754_pow+0x210>
 80142a0:	4b10      	ldr	r3, [pc, #64]	@ (80142e4 <__ieee754_pow+0x294>)
 80142a2:	4598      	cmp	r8, r3
 80142a4:	f04f 0200 	mov.w	r2, #0
 80142a8:	d924      	bls.n	80142f4 <__ieee754_pow+0x2a4>
 80142aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80142ae:	2300      	movs	r3, #0
 80142b0:	f7ec fc24 	bl	8000afc <__aeabi_dcmplt>
 80142b4:	3800      	subs	r0, #0
 80142b6:	bf18      	it	ne
 80142b8:	2001      	movne	r0, #1
 80142ba:	f1b9 0f00 	cmp.w	r9, #0
 80142be:	dccf      	bgt.n	8014260 <__ieee754_pow+0x210>
 80142c0:	e7da      	b.n	8014278 <__ieee754_pow+0x228>
 80142c2:	bf00      	nop
 80142c4:	f3af 8000 	nop.w
 80142c8:	00000000 	.word	0x00000000
 80142cc:	3ff00000 	.word	0x3ff00000
 80142d0:	00000000 	.word	0x00000000
 80142d4:	bff00000 	.word	0xbff00000
 80142d8:	fff00000 	.word	0xfff00000
 80142dc:	7ff00000 	.word	0x7ff00000
 80142e0:	433fffff 	.word	0x433fffff
 80142e4:	3ff00000 	.word	0x3ff00000
 80142e8:	3fefffff 	.word	0x3fefffff
 80142ec:	3fe00000 	.word	0x3fe00000
 80142f0:	43f00000 	.word	0x43f00000
 80142f4:	4b5a      	ldr	r3, [pc, #360]	@ (8014460 <__ieee754_pow+0x410>)
 80142f6:	f7eb ffd7 	bl	80002a8 <__aeabi_dsub>
 80142fa:	a351      	add	r3, pc, #324	@ (adr r3, 8014440 <__ieee754_pow+0x3f0>)
 80142fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014300:	4604      	mov	r4, r0
 8014302:	460d      	mov	r5, r1
 8014304:	f7ec f988 	bl	8000618 <__aeabi_dmul>
 8014308:	a34f      	add	r3, pc, #316	@ (adr r3, 8014448 <__ieee754_pow+0x3f8>)
 801430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430e:	4606      	mov	r6, r0
 8014310:	460f      	mov	r7, r1
 8014312:	4620      	mov	r0, r4
 8014314:	4629      	mov	r1, r5
 8014316:	f7ec f97f 	bl	8000618 <__aeabi_dmul>
 801431a:	4b52      	ldr	r3, [pc, #328]	@ (8014464 <__ieee754_pow+0x414>)
 801431c:	4682      	mov	sl, r0
 801431e:	468b      	mov	fp, r1
 8014320:	2200      	movs	r2, #0
 8014322:	4620      	mov	r0, r4
 8014324:	4629      	mov	r1, r5
 8014326:	f7ec f977 	bl	8000618 <__aeabi_dmul>
 801432a:	4602      	mov	r2, r0
 801432c:	460b      	mov	r3, r1
 801432e:	a148      	add	r1, pc, #288	@ (adr r1, 8014450 <__ieee754_pow+0x400>)
 8014330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014334:	f7eb ffb8 	bl	80002a8 <__aeabi_dsub>
 8014338:	4622      	mov	r2, r4
 801433a:	462b      	mov	r3, r5
 801433c:	f7ec f96c 	bl	8000618 <__aeabi_dmul>
 8014340:	4602      	mov	r2, r0
 8014342:	460b      	mov	r3, r1
 8014344:	2000      	movs	r0, #0
 8014346:	4948      	ldr	r1, [pc, #288]	@ (8014468 <__ieee754_pow+0x418>)
 8014348:	f7eb ffae 	bl	80002a8 <__aeabi_dsub>
 801434c:	4622      	mov	r2, r4
 801434e:	4680      	mov	r8, r0
 8014350:	4689      	mov	r9, r1
 8014352:	462b      	mov	r3, r5
 8014354:	4620      	mov	r0, r4
 8014356:	4629      	mov	r1, r5
 8014358:	f7ec f95e 	bl	8000618 <__aeabi_dmul>
 801435c:	4602      	mov	r2, r0
 801435e:	460b      	mov	r3, r1
 8014360:	4640      	mov	r0, r8
 8014362:	4649      	mov	r1, r9
 8014364:	f7ec f958 	bl	8000618 <__aeabi_dmul>
 8014368:	a33b      	add	r3, pc, #236	@ (adr r3, 8014458 <__ieee754_pow+0x408>)
 801436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801436e:	f7ec f953 	bl	8000618 <__aeabi_dmul>
 8014372:	4602      	mov	r2, r0
 8014374:	460b      	mov	r3, r1
 8014376:	4650      	mov	r0, sl
 8014378:	4659      	mov	r1, fp
 801437a:	f7eb ff95 	bl	80002a8 <__aeabi_dsub>
 801437e:	4602      	mov	r2, r0
 8014380:	460b      	mov	r3, r1
 8014382:	4680      	mov	r8, r0
 8014384:	4689      	mov	r9, r1
 8014386:	4630      	mov	r0, r6
 8014388:	4639      	mov	r1, r7
 801438a:	f7eb ff8f 	bl	80002ac <__adddf3>
 801438e:	2400      	movs	r4, #0
 8014390:	4632      	mov	r2, r6
 8014392:	463b      	mov	r3, r7
 8014394:	4620      	mov	r0, r4
 8014396:	460d      	mov	r5, r1
 8014398:	f7eb ff86 	bl	80002a8 <__aeabi_dsub>
 801439c:	4602      	mov	r2, r0
 801439e:	460b      	mov	r3, r1
 80143a0:	4640      	mov	r0, r8
 80143a2:	4649      	mov	r1, r9
 80143a4:	f7eb ff80 	bl	80002a8 <__aeabi_dsub>
 80143a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80143ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80143b0:	2300      	movs	r3, #0
 80143b2:	9304      	str	r3, [sp, #16]
 80143b4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80143b8:	4606      	mov	r6, r0
 80143ba:	460f      	mov	r7, r1
 80143bc:	4652      	mov	r2, sl
 80143be:	465b      	mov	r3, fp
 80143c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143c4:	f7eb ff70 	bl	80002a8 <__aeabi_dsub>
 80143c8:	4622      	mov	r2, r4
 80143ca:	462b      	mov	r3, r5
 80143cc:	f7ec f924 	bl	8000618 <__aeabi_dmul>
 80143d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80143d4:	4680      	mov	r8, r0
 80143d6:	4689      	mov	r9, r1
 80143d8:	4630      	mov	r0, r6
 80143da:	4639      	mov	r1, r7
 80143dc:	f7ec f91c 	bl	8000618 <__aeabi_dmul>
 80143e0:	4602      	mov	r2, r0
 80143e2:	460b      	mov	r3, r1
 80143e4:	4640      	mov	r0, r8
 80143e6:	4649      	mov	r1, r9
 80143e8:	f7eb ff60 	bl	80002ac <__adddf3>
 80143ec:	4652      	mov	r2, sl
 80143ee:	465b      	mov	r3, fp
 80143f0:	4606      	mov	r6, r0
 80143f2:	460f      	mov	r7, r1
 80143f4:	4620      	mov	r0, r4
 80143f6:	4629      	mov	r1, r5
 80143f8:	f7ec f90e 	bl	8000618 <__aeabi_dmul>
 80143fc:	460b      	mov	r3, r1
 80143fe:	4602      	mov	r2, r0
 8014400:	4680      	mov	r8, r0
 8014402:	4689      	mov	r9, r1
 8014404:	4630      	mov	r0, r6
 8014406:	4639      	mov	r1, r7
 8014408:	f7eb ff50 	bl	80002ac <__adddf3>
 801440c:	4b17      	ldr	r3, [pc, #92]	@ (801446c <__ieee754_pow+0x41c>)
 801440e:	4299      	cmp	r1, r3
 8014410:	4604      	mov	r4, r0
 8014412:	460d      	mov	r5, r1
 8014414:	468a      	mov	sl, r1
 8014416:	468b      	mov	fp, r1
 8014418:	f340 82ef 	ble.w	80149fa <__ieee754_pow+0x9aa>
 801441c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8014420:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8014424:	4303      	orrs	r3, r0
 8014426:	f000 81e8 	beq.w	80147fa <__ieee754_pow+0x7aa>
 801442a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801442e:	2200      	movs	r2, #0
 8014430:	2300      	movs	r3, #0
 8014432:	f7ec fb63 	bl	8000afc <__aeabi_dcmplt>
 8014436:	3800      	subs	r0, #0
 8014438:	bf18      	it	ne
 801443a:	2001      	movne	r0, #1
 801443c:	e710      	b.n	8014260 <__ieee754_pow+0x210>
 801443e:	bf00      	nop
 8014440:	60000000 	.word	0x60000000
 8014444:	3ff71547 	.word	0x3ff71547
 8014448:	f85ddf44 	.word	0xf85ddf44
 801444c:	3e54ae0b 	.word	0x3e54ae0b
 8014450:	55555555 	.word	0x55555555
 8014454:	3fd55555 	.word	0x3fd55555
 8014458:	652b82fe 	.word	0x652b82fe
 801445c:	3ff71547 	.word	0x3ff71547
 8014460:	3ff00000 	.word	0x3ff00000
 8014464:	3fd00000 	.word	0x3fd00000
 8014468:	3fe00000 	.word	0x3fe00000
 801446c:	408fffff 	.word	0x408fffff
 8014470:	4bd5      	ldr	r3, [pc, #852]	@ (80147c8 <__ieee754_pow+0x778>)
 8014472:	402b      	ands	r3, r5
 8014474:	2200      	movs	r2, #0
 8014476:	b92b      	cbnz	r3, 8014484 <__ieee754_pow+0x434>
 8014478:	4bd4      	ldr	r3, [pc, #848]	@ (80147cc <__ieee754_pow+0x77c>)
 801447a:	f7ec f8cd 	bl	8000618 <__aeabi_dmul>
 801447e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8014482:	468b      	mov	fp, r1
 8014484:	ea4f 532b 	mov.w	r3, fp, asr #20
 8014488:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801448c:	4413      	add	r3, r2
 801448e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014490:	4bcf      	ldr	r3, [pc, #828]	@ (80147d0 <__ieee754_pow+0x780>)
 8014492:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8014496:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801449a:	459b      	cmp	fp, r3
 801449c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80144a0:	dd08      	ble.n	80144b4 <__ieee754_pow+0x464>
 80144a2:	4bcc      	ldr	r3, [pc, #816]	@ (80147d4 <__ieee754_pow+0x784>)
 80144a4:	459b      	cmp	fp, r3
 80144a6:	f340 81a5 	ble.w	80147f4 <__ieee754_pow+0x7a4>
 80144aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80144ac:	3301      	adds	r3, #1
 80144ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80144b0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80144b4:	f04f 0a00 	mov.w	sl, #0
 80144b8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80144bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80144be:	4bc6      	ldr	r3, [pc, #792]	@ (80147d8 <__ieee754_pow+0x788>)
 80144c0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80144c4:	ed93 7b00 	vldr	d7, [r3]
 80144c8:	4629      	mov	r1, r5
 80144ca:	ec53 2b17 	vmov	r2, r3, d7
 80144ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80144d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80144d6:	f7eb fee7 	bl	80002a8 <__aeabi_dsub>
 80144da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80144de:	4606      	mov	r6, r0
 80144e0:	460f      	mov	r7, r1
 80144e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80144e6:	f7eb fee1 	bl	80002ac <__adddf3>
 80144ea:	4602      	mov	r2, r0
 80144ec:	460b      	mov	r3, r1
 80144ee:	2000      	movs	r0, #0
 80144f0:	49ba      	ldr	r1, [pc, #744]	@ (80147dc <__ieee754_pow+0x78c>)
 80144f2:	f7ec f9bb 	bl	800086c <__aeabi_ddiv>
 80144f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80144fa:	4602      	mov	r2, r0
 80144fc:	460b      	mov	r3, r1
 80144fe:	4630      	mov	r0, r6
 8014500:	4639      	mov	r1, r7
 8014502:	f7ec f889 	bl	8000618 <__aeabi_dmul>
 8014506:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801450a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801450e:	106d      	asrs	r5, r5, #1
 8014510:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8014514:	f04f 0b00 	mov.w	fp, #0
 8014518:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801451c:	4661      	mov	r1, ip
 801451e:	2200      	movs	r2, #0
 8014520:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014524:	4658      	mov	r0, fp
 8014526:	46e1      	mov	r9, ip
 8014528:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801452c:	4614      	mov	r4, r2
 801452e:	461d      	mov	r5, r3
 8014530:	f7ec f872 	bl	8000618 <__aeabi_dmul>
 8014534:	4602      	mov	r2, r0
 8014536:	460b      	mov	r3, r1
 8014538:	4630      	mov	r0, r6
 801453a:	4639      	mov	r1, r7
 801453c:	f7eb feb4 	bl	80002a8 <__aeabi_dsub>
 8014540:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014544:	4606      	mov	r6, r0
 8014546:	460f      	mov	r7, r1
 8014548:	4620      	mov	r0, r4
 801454a:	4629      	mov	r1, r5
 801454c:	f7eb feac 	bl	80002a8 <__aeabi_dsub>
 8014550:	4602      	mov	r2, r0
 8014552:	460b      	mov	r3, r1
 8014554:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014558:	f7eb fea6 	bl	80002a8 <__aeabi_dsub>
 801455c:	465a      	mov	r2, fp
 801455e:	464b      	mov	r3, r9
 8014560:	f7ec f85a 	bl	8000618 <__aeabi_dmul>
 8014564:	4602      	mov	r2, r0
 8014566:	460b      	mov	r3, r1
 8014568:	4630      	mov	r0, r6
 801456a:	4639      	mov	r1, r7
 801456c:	f7eb fe9c 	bl	80002a8 <__aeabi_dsub>
 8014570:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8014574:	f7ec f850 	bl	8000618 <__aeabi_dmul>
 8014578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801457c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014580:	4610      	mov	r0, r2
 8014582:	4619      	mov	r1, r3
 8014584:	f7ec f848 	bl	8000618 <__aeabi_dmul>
 8014588:	a37d      	add	r3, pc, #500	@ (adr r3, 8014780 <__ieee754_pow+0x730>)
 801458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801458e:	4604      	mov	r4, r0
 8014590:	460d      	mov	r5, r1
 8014592:	f7ec f841 	bl	8000618 <__aeabi_dmul>
 8014596:	a37c      	add	r3, pc, #496	@ (adr r3, 8014788 <__ieee754_pow+0x738>)
 8014598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801459c:	f7eb fe86 	bl	80002ac <__adddf3>
 80145a0:	4622      	mov	r2, r4
 80145a2:	462b      	mov	r3, r5
 80145a4:	f7ec f838 	bl	8000618 <__aeabi_dmul>
 80145a8:	a379      	add	r3, pc, #484	@ (adr r3, 8014790 <__ieee754_pow+0x740>)
 80145aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ae:	f7eb fe7d 	bl	80002ac <__adddf3>
 80145b2:	4622      	mov	r2, r4
 80145b4:	462b      	mov	r3, r5
 80145b6:	f7ec f82f 	bl	8000618 <__aeabi_dmul>
 80145ba:	a377      	add	r3, pc, #476	@ (adr r3, 8014798 <__ieee754_pow+0x748>)
 80145bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c0:	f7eb fe74 	bl	80002ac <__adddf3>
 80145c4:	4622      	mov	r2, r4
 80145c6:	462b      	mov	r3, r5
 80145c8:	f7ec f826 	bl	8000618 <__aeabi_dmul>
 80145cc:	a374      	add	r3, pc, #464	@ (adr r3, 80147a0 <__ieee754_pow+0x750>)
 80145ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d2:	f7eb fe6b 	bl	80002ac <__adddf3>
 80145d6:	4622      	mov	r2, r4
 80145d8:	462b      	mov	r3, r5
 80145da:	f7ec f81d 	bl	8000618 <__aeabi_dmul>
 80145de:	a372      	add	r3, pc, #456	@ (adr r3, 80147a8 <__ieee754_pow+0x758>)
 80145e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e4:	f7eb fe62 	bl	80002ac <__adddf3>
 80145e8:	4622      	mov	r2, r4
 80145ea:	4606      	mov	r6, r0
 80145ec:	460f      	mov	r7, r1
 80145ee:	462b      	mov	r3, r5
 80145f0:	4620      	mov	r0, r4
 80145f2:	4629      	mov	r1, r5
 80145f4:	f7ec f810 	bl	8000618 <__aeabi_dmul>
 80145f8:	4602      	mov	r2, r0
 80145fa:	460b      	mov	r3, r1
 80145fc:	4630      	mov	r0, r6
 80145fe:	4639      	mov	r1, r7
 8014600:	f7ec f80a 	bl	8000618 <__aeabi_dmul>
 8014604:	465a      	mov	r2, fp
 8014606:	4604      	mov	r4, r0
 8014608:	460d      	mov	r5, r1
 801460a:	464b      	mov	r3, r9
 801460c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014610:	f7eb fe4c 	bl	80002ac <__adddf3>
 8014614:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014618:	f7eb fffe 	bl	8000618 <__aeabi_dmul>
 801461c:	4622      	mov	r2, r4
 801461e:	462b      	mov	r3, r5
 8014620:	f7eb fe44 	bl	80002ac <__adddf3>
 8014624:	465a      	mov	r2, fp
 8014626:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801462a:	464b      	mov	r3, r9
 801462c:	4658      	mov	r0, fp
 801462e:	4649      	mov	r1, r9
 8014630:	f7eb fff2 	bl	8000618 <__aeabi_dmul>
 8014634:	4b6a      	ldr	r3, [pc, #424]	@ (80147e0 <__ieee754_pow+0x790>)
 8014636:	2200      	movs	r2, #0
 8014638:	4606      	mov	r6, r0
 801463a:	460f      	mov	r7, r1
 801463c:	f7eb fe36 	bl	80002ac <__adddf3>
 8014640:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014644:	f7eb fe32 	bl	80002ac <__adddf3>
 8014648:	46d8      	mov	r8, fp
 801464a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801464e:	460d      	mov	r5, r1
 8014650:	465a      	mov	r2, fp
 8014652:	460b      	mov	r3, r1
 8014654:	4640      	mov	r0, r8
 8014656:	4649      	mov	r1, r9
 8014658:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801465c:	f7eb ffdc 	bl	8000618 <__aeabi_dmul>
 8014660:	465c      	mov	r4, fp
 8014662:	4680      	mov	r8, r0
 8014664:	4689      	mov	r9, r1
 8014666:	4b5e      	ldr	r3, [pc, #376]	@ (80147e0 <__ieee754_pow+0x790>)
 8014668:	2200      	movs	r2, #0
 801466a:	4620      	mov	r0, r4
 801466c:	4629      	mov	r1, r5
 801466e:	f7eb fe1b 	bl	80002a8 <__aeabi_dsub>
 8014672:	4632      	mov	r2, r6
 8014674:	463b      	mov	r3, r7
 8014676:	f7eb fe17 	bl	80002a8 <__aeabi_dsub>
 801467a:	4602      	mov	r2, r0
 801467c:	460b      	mov	r3, r1
 801467e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014682:	f7eb fe11 	bl	80002a8 <__aeabi_dsub>
 8014686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801468a:	f7eb ffc5 	bl	8000618 <__aeabi_dmul>
 801468e:	4622      	mov	r2, r4
 8014690:	4606      	mov	r6, r0
 8014692:	460f      	mov	r7, r1
 8014694:	462b      	mov	r3, r5
 8014696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801469a:	f7eb ffbd 	bl	8000618 <__aeabi_dmul>
 801469e:	4602      	mov	r2, r0
 80146a0:	460b      	mov	r3, r1
 80146a2:	4630      	mov	r0, r6
 80146a4:	4639      	mov	r1, r7
 80146a6:	f7eb fe01 	bl	80002ac <__adddf3>
 80146aa:	4606      	mov	r6, r0
 80146ac:	460f      	mov	r7, r1
 80146ae:	4602      	mov	r2, r0
 80146b0:	460b      	mov	r3, r1
 80146b2:	4640      	mov	r0, r8
 80146b4:	4649      	mov	r1, r9
 80146b6:	f7eb fdf9 	bl	80002ac <__adddf3>
 80146ba:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80146be:	a33c      	add	r3, pc, #240	@ (adr r3, 80147b0 <__ieee754_pow+0x760>)
 80146c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c4:	4658      	mov	r0, fp
 80146c6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80146ca:	460d      	mov	r5, r1
 80146cc:	f7eb ffa4 	bl	8000618 <__aeabi_dmul>
 80146d0:	465c      	mov	r4, fp
 80146d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80146d6:	4642      	mov	r2, r8
 80146d8:	464b      	mov	r3, r9
 80146da:	4620      	mov	r0, r4
 80146dc:	4629      	mov	r1, r5
 80146de:	f7eb fde3 	bl	80002a8 <__aeabi_dsub>
 80146e2:	4602      	mov	r2, r0
 80146e4:	460b      	mov	r3, r1
 80146e6:	4630      	mov	r0, r6
 80146e8:	4639      	mov	r1, r7
 80146ea:	f7eb fddd 	bl	80002a8 <__aeabi_dsub>
 80146ee:	a332      	add	r3, pc, #200	@ (adr r3, 80147b8 <__ieee754_pow+0x768>)
 80146f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f4:	f7eb ff90 	bl	8000618 <__aeabi_dmul>
 80146f8:	a331      	add	r3, pc, #196	@ (adr r3, 80147c0 <__ieee754_pow+0x770>)
 80146fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146fe:	4606      	mov	r6, r0
 8014700:	460f      	mov	r7, r1
 8014702:	4620      	mov	r0, r4
 8014704:	4629      	mov	r1, r5
 8014706:	f7eb ff87 	bl	8000618 <__aeabi_dmul>
 801470a:	4602      	mov	r2, r0
 801470c:	460b      	mov	r3, r1
 801470e:	4630      	mov	r0, r6
 8014710:	4639      	mov	r1, r7
 8014712:	f7eb fdcb 	bl	80002ac <__adddf3>
 8014716:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014718:	4b32      	ldr	r3, [pc, #200]	@ (80147e4 <__ieee754_pow+0x794>)
 801471a:	4413      	add	r3, r2
 801471c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014720:	f7eb fdc4 	bl	80002ac <__adddf3>
 8014724:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014728:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801472a:	f7eb ff0b 	bl	8000544 <__aeabi_i2d>
 801472e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014730:	4b2d      	ldr	r3, [pc, #180]	@ (80147e8 <__ieee754_pow+0x798>)
 8014732:	4413      	add	r3, r2
 8014734:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014738:	4606      	mov	r6, r0
 801473a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801473e:	460f      	mov	r7, r1
 8014740:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014744:	f7eb fdb2 	bl	80002ac <__adddf3>
 8014748:	4642      	mov	r2, r8
 801474a:	464b      	mov	r3, r9
 801474c:	f7eb fdae 	bl	80002ac <__adddf3>
 8014750:	4632      	mov	r2, r6
 8014752:	463b      	mov	r3, r7
 8014754:	f7eb fdaa 	bl	80002ac <__adddf3>
 8014758:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801475c:	4632      	mov	r2, r6
 801475e:	463b      	mov	r3, r7
 8014760:	4658      	mov	r0, fp
 8014762:	460d      	mov	r5, r1
 8014764:	f7eb fda0 	bl	80002a8 <__aeabi_dsub>
 8014768:	4642      	mov	r2, r8
 801476a:	464b      	mov	r3, r9
 801476c:	f7eb fd9c 	bl	80002a8 <__aeabi_dsub>
 8014770:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014774:	f7eb fd98 	bl	80002a8 <__aeabi_dsub>
 8014778:	465c      	mov	r4, fp
 801477a:	4602      	mov	r2, r0
 801477c:	e036      	b.n	80147ec <__ieee754_pow+0x79c>
 801477e:	bf00      	nop
 8014780:	4a454eef 	.word	0x4a454eef
 8014784:	3fca7e28 	.word	0x3fca7e28
 8014788:	93c9db65 	.word	0x93c9db65
 801478c:	3fcd864a 	.word	0x3fcd864a
 8014790:	a91d4101 	.word	0xa91d4101
 8014794:	3fd17460 	.word	0x3fd17460
 8014798:	518f264d 	.word	0x518f264d
 801479c:	3fd55555 	.word	0x3fd55555
 80147a0:	db6fabff 	.word	0xdb6fabff
 80147a4:	3fdb6db6 	.word	0x3fdb6db6
 80147a8:	33333303 	.word	0x33333303
 80147ac:	3fe33333 	.word	0x3fe33333
 80147b0:	e0000000 	.word	0xe0000000
 80147b4:	3feec709 	.word	0x3feec709
 80147b8:	dc3a03fd 	.word	0xdc3a03fd
 80147bc:	3feec709 	.word	0x3feec709
 80147c0:	145b01f5 	.word	0x145b01f5
 80147c4:	be3e2fe0 	.word	0xbe3e2fe0
 80147c8:	7ff00000 	.word	0x7ff00000
 80147cc:	43400000 	.word	0x43400000
 80147d0:	0003988e 	.word	0x0003988e
 80147d4:	000bb679 	.word	0x000bb679
 80147d8:	08015568 	.word	0x08015568
 80147dc:	3ff00000 	.word	0x3ff00000
 80147e0:	40080000 	.word	0x40080000
 80147e4:	08015548 	.word	0x08015548
 80147e8:	08015558 	.word	0x08015558
 80147ec:	460b      	mov	r3, r1
 80147ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80147f2:	e5d7      	b.n	80143a4 <__ieee754_pow+0x354>
 80147f4:	f04f 0a01 	mov.w	sl, #1
 80147f8:	e65e      	b.n	80144b8 <__ieee754_pow+0x468>
 80147fa:	a3b4      	add	r3, pc, #720	@ (adr r3, 8014acc <__ieee754_pow+0xa7c>)
 80147fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014800:	4630      	mov	r0, r6
 8014802:	4639      	mov	r1, r7
 8014804:	f7eb fd52 	bl	80002ac <__adddf3>
 8014808:	4642      	mov	r2, r8
 801480a:	e9cd 0100 	strd	r0, r1, [sp]
 801480e:	464b      	mov	r3, r9
 8014810:	4620      	mov	r0, r4
 8014812:	4629      	mov	r1, r5
 8014814:	f7eb fd48 	bl	80002a8 <__aeabi_dsub>
 8014818:	4602      	mov	r2, r0
 801481a:	460b      	mov	r3, r1
 801481c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014820:	f7ec f98a 	bl	8000b38 <__aeabi_dcmpgt>
 8014824:	2800      	cmp	r0, #0
 8014826:	f47f ae00 	bne.w	801442a <__ieee754_pow+0x3da>
 801482a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801482e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8014832:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8014836:	fa43 fa0a 	asr.w	sl, r3, sl
 801483a:	44da      	add	sl, fp
 801483c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8014840:	489d      	ldr	r0, [pc, #628]	@ (8014ab8 <__ieee754_pow+0xa68>)
 8014842:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8014846:	4108      	asrs	r0, r1
 8014848:	ea00 030a 	and.w	r3, r0, sl
 801484c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8014850:	f1c1 0114 	rsb	r1, r1, #20
 8014854:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8014858:	fa4a fa01 	asr.w	sl, sl, r1
 801485c:	f1bb 0f00 	cmp.w	fp, #0
 8014860:	4640      	mov	r0, r8
 8014862:	4649      	mov	r1, r9
 8014864:	f04f 0200 	mov.w	r2, #0
 8014868:	bfb8      	it	lt
 801486a:	f1ca 0a00 	rsblt	sl, sl, #0
 801486e:	f7eb fd1b 	bl	80002a8 <__aeabi_dsub>
 8014872:	4680      	mov	r8, r0
 8014874:	4689      	mov	r9, r1
 8014876:	4632      	mov	r2, r6
 8014878:	463b      	mov	r3, r7
 801487a:	4640      	mov	r0, r8
 801487c:	4649      	mov	r1, r9
 801487e:	f7eb fd15 	bl	80002ac <__adddf3>
 8014882:	2400      	movs	r4, #0
 8014884:	a37c      	add	r3, pc, #496	@ (adr r3, 8014a78 <__ieee754_pow+0xa28>)
 8014886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801488a:	4620      	mov	r0, r4
 801488c:	460d      	mov	r5, r1
 801488e:	f7eb fec3 	bl	8000618 <__aeabi_dmul>
 8014892:	4642      	mov	r2, r8
 8014894:	e9cd 0100 	strd	r0, r1, [sp]
 8014898:	464b      	mov	r3, r9
 801489a:	4620      	mov	r0, r4
 801489c:	4629      	mov	r1, r5
 801489e:	f7eb fd03 	bl	80002a8 <__aeabi_dsub>
 80148a2:	4602      	mov	r2, r0
 80148a4:	460b      	mov	r3, r1
 80148a6:	4630      	mov	r0, r6
 80148a8:	4639      	mov	r1, r7
 80148aa:	f7eb fcfd 	bl	80002a8 <__aeabi_dsub>
 80148ae:	a374      	add	r3, pc, #464	@ (adr r3, 8014a80 <__ieee754_pow+0xa30>)
 80148b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b4:	f7eb feb0 	bl	8000618 <__aeabi_dmul>
 80148b8:	a373      	add	r3, pc, #460	@ (adr r3, 8014a88 <__ieee754_pow+0xa38>)
 80148ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148be:	4680      	mov	r8, r0
 80148c0:	4689      	mov	r9, r1
 80148c2:	4620      	mov	r0, r4
 80148c4:	4629      	mov	r1, r5
 80148c6:	f7eb fea7 	bl	8000618 <__aeabi_dmul>
 80148ca:	4602      	mov	r2, r0
 80148cc:	460b      	mov	r3, r1
 80148ce:	4640      	mov	r0, r8
 80148d0:	4649      	mov	r1, r9
 80148d2:	f7eb fceb 	bl	80002ac <__adddf3>
 80148d6:	4604      	mov	r4, r0
 80148d8:	460d      	mov	r5, r1
 80148da:	4602      	mov	r2, r0
 80148dc:	460b      	mov	r3, r1
 80148de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148e2:	f7eb fce3 	bl	80002ac <__adddf3>
 80148e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80148ea:	4680      	mov	r8, r0
 80148ec:	4689      	mov	r9, r1
 80148ee:	f7eb fcdb 	bl	80002a8 <__aeabi_dsub>
 80148f2:	4602      	mov	r2, r0
 80148f4:	460b      	mov	r3, r1
 80148f6:	4620      	mov	r0, r4
 80148f8:	4629      	mov	r1, r5
 80148fa:	f7eb fcd5 	bl	80002a8 <__aeabi_dsub>
 80148fe:	4642      	mov	r2, r8
 8014900:	4606      	mov	r6, r0
 8014902:	460f      	mov	r7, r1
 8014904:	464b      	mov	r3, r9
 8014906:	4640      	mov	r0, r8
 8014908:	4649      	mov	r1, r9
 801490a:	f7eb fe85 	bl	8000618 <__aeabi_dmul>
 801490e:	a360      	add	r3, pc, #384	@ (adr r3, 8014a90 <__ieee754_pow+0xa40>)
 8014910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014914:	4604      	mov	r4, r0
 8014916:	460d      	mov	r5, r1
 8014918:	f7eb fe7e 	bl	8000618 <__aeabi_dmul>
 801491c:	a35e      	add	r3, pc, #376	@ (adr r3, 8014a98 <__ieee754_pow+0xa48>)
 801491e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014922:	f7eb fcc1 	bl	80002a8 <__aeabi_dsub>
 8014926:	4622      	mov	r2, r4
 8014928:	462b      	mov	r3, r5
 801492a:	f7eb fe75 	bl	8000618 <__aeabi_dmul>
 801492e:	a35c      	add	r3, pc, #368	@ (adr r3, 8014aa0 <__ieee754_pow+0xa50>)
 8014930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014934:	f7eb fcba 	bl	80002ac <__adddf3>
 8014938:	4622      	mov	r2, r4
 801493a:	462b      	mov	r3, r5
 801493c:	f7eb fe6c 	bl	8000618 <__aeabi_dmul>
 8014940:	a359      	add	r3, pc, #356	@ (adr r3, 8014aa8 <__ieee754_pow+0xa58>)
 8014942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014946:	f7eb fcaf 	bl	80002a8 <__aeabi_dsub>
 801494a:	4622      	mov	r2, r4
 801494c:	462b      	mov	r3, r5
 801494e:	f7eb fe63 	bl	8000618 <__aeabi_dmul>
 8014952:	a357      	add	r3, pc, #348	@ (adr r3, 8014ab0 <__ieee754_pow+0xa60>)
 8014954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014958:	f7eb fca8 	bl	80002ac <__adddf3>
 801495c:	4622      	mov	r2, r4
 801495e:	462b      	mov	r3, r5
 8014960:	f7eb fe5a 	bl	8000618 <__aeabi_dmul>
 8014964:	4602      	mov	r2, r0
 8014966:	460b      	mov	r3, r1
 8014968:	4640      	mov	r0, r8
 801496a:	4649      	mov	r1, r9
 801496c:	f7eb fc9c 	bl	80002a8 <__aeabi_dsub>
 8014970:	4604      	mov	r4, r0
 8014972:	460d      	mov	r5, r1
 8014974:	4602      	mov	r2, r0
 8014976:	460b      	mov	r3, r1
 8014978:	4640      	mov	r0, r8
 801497a:	4649      	mov	r1, r9
 801497c:	f7eb fe4c 	bl	8000618 <__aeabi_dmul>
 8014980:	2200      	movs	r2, #0
 8014982:	e9cd 0100 	strd	r0, r1, [sp]
 8014986:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801498a:	4620      	mov	r0, r4
 801498c:	4629      	mov	r1, r5
 801498e:	f7eb fc8b 	bl	80002a8 <__aeabi_dsub>
 8014992:	4602      	mov	r2, r0
 8014994:	460b      	mov	r3, r1
 8014996:	e9dd 0100 	ldrd	r0, r1, [sp]
 801499a:	f7eb ff67 	bl	800086c <__aeabi_ddiv>
 801499e:	4632      	mov	r2, r6
 80149a0:	4604      	mov	r4, r0
 80149a2:	460d      	mov	r5, r1
 80149a4:	463b      	mov	r3, r7
 80149a6:	4640      	mov	r0, r8
 80149a8:	4649      	mov	r1, r9
 80149aa:	f7eb fe35 	bl	8000618 <__aeabi_dmul>
 80149ae:	4632      	mov	r2, r6
 80149b0:	463b      	mov	r3, r7
 80149b2:	f7eb fc7b 	bl	80002ac <__adddf3>
 80149b6:	4602      	mov	r2, r0
 80149b8:	460b      	mov	r3, r1
 80149ba:	4620      	mov	r0, r4
 80149bc:	4629      	mov	r1, r5
 80149be:	f7eb fc73 	bl	80002a8 <__aeabi_dsub>
 80149c2:	4642      	mov	r2, r8
 80149c4:	464b      	mov	r3, r9
 80149c6:	f7eb fc6f 	bl	80002a8 <__aeabi_dsub>
 80149ca:	460b      	mov	r3, r1
 80149cc:	4602      	mov	r2, r0
 80149ce:	493b      	ldr	r1, [pc, #236]	@ (8014abc <__ieee754_pow+0xa6c>)
 80149d0:	2000      	movs	r0, #0
 80149d2:	f7eb fc69 	bl	80002a8 <__aeabi_dsub>
 80149d6:	ec41 0b10 	vmov	d0, r0, r1
 80149da:	ee10 3a90 	vmov	r3, s1
 80149de:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80149e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80149e6:	da30      	bge.n	8014a4a <__ieee754_pow+0x9fa>
 80149e8:	4650      	mov	r0, sl
 80149ea:	f000 f87d 	bl	8014ae8 <scalbn>
 80149ee:	ec51 0b10 	vmov	r0, r1, d0
 80149f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80149f6:	f7ff bbd2 	b.w	801419e <__ieee754_pow+0x14e>
 80149fa:	4c31      	ldr	r4, [pc, #196]	@ (8014ac0 <__ieee754_pow+0xa70>)
 80149fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014a00:	42a3      	cmp	r3, r4
 8014a02:	d91a      	bls.n	8014a3a <__ieee754_pow+0x9ea>
 8014a04:	4b2f      	ldr	r3, [pc, #188]	@ (8014ac4 <__ieee754_pow+0xa74>)
 8014a06:	440b      	add	r3, r1
 8014a08:	4303      	orrs	r3, r0
 8014a0a:	d009      	beq.n	8014a20 <__ieee754_pow+0x9d0>
 8014a0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a10:	2200      	movs	r2, #0
 8014a12:	2300      	movs	r3, #0
 8014a14:	f7ec f872 	bl	8000afc <__aeabi_dcmplt>
 8014a18:	3800      	subs	r0, #0
 8014a1a:	bf18      	it	ne
 8014a1c:	2001      	movne	r0, #1
 8014a1e:	e42b      	b.n	8014278 <__ieee754_pow+0x228>
 8014a20:	4642      	mov	r2, r8
 8014a22:	464b      	mov	r3, r9
 8014a24:	f7eb fc40 	bl	80002a8 <__aeabi_dsub>
 8014a28:	4632      	mov	r2, r6
 8014a2a:	463b      	mov	r3, r7
 8014a2c:	f7ec f87a 	bl	8000b24 <__aeabi_dcmpge>
 8014a30:	2800      	cmp	r0, #0
 8014a32:	d1eb      	bne.n	8014a0c <__ieee754_pow+0x9bc>
 8014a34:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8014ad4 <__ieee754_pow+0xa84>
 8014a38:	e6f7      	b.n	801482a <__ieee754_pow+0x7da>
 8014a3a:	469a      	mov	sl, r3
 8014a3c:	4b22      	ldr	r3, [pc, #136]	@ (8014ac8 <__ieee754_pow+0xa78>)
 8014a3e:	459a      	cmp	sl, r3
 8014a40:	f63f aef3 	bhi.w	801482a <__ieee754_pow+0x7da>
 8014a44:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014a48:	e715      	b.n	8014876 <__ieee754_pow+0x826>
 8014a4a:	ec51 0b10 	vmov	r0, r1, d0
 8014a4e:	4619      	mov	r1, r3
 8014a50:	e7cf      	b.n	80149f2 <__ieee754_pow+0x9a2>
 8014a52:	491a      	ldr	r1, [pc, #104]	@ (8014abc <__ieee754_pow+0xa6c>)
 8014a54:	2000      	movs	r0, #0
 8014a56:	f7ff bb18 	b.w	801408a <__ieee754_pow+0x3a>
 8014a5a:	2000      	movs	r0, #0
 8014a5c:	2100      	movs	r1, #0
 8014a5e:	f7ff bb14 	b.w	801408a <__ieee754_pow+0x3a>
 8014a62:	4630      	mov	r0, r6
 8014a64:	4639      	mov	r1, r7
 8014a66:	f7ff bb10 	b.w	801408a <__ieee754_pow+0x3a>
 8014a6a:	460c      	mov	r4, r1
 8014a6c:	f7ff bb5e 	b.w	801412c <__ieee754_pow+0xdc>
 8014a70:	2400      	movs	r4, #0
 8014a72:	f7ff bb49 	b.w	8014108 <__ieee754_pow+0xb8>
 8014a76:	bf00      	nop
 8014a78:	00000000 	.word	0x00000000
 8014a7c:	3fe62e43 	.word	0x3fe62e43
 8014a80:	fefa39ef 	.word	0xfefa39ef
 8014a84:	3fe62e42 	.word	0x3fe62e42
 8014a88:	0ca86c39 	.word	0x0ca86c39
 8014a8c:	be205c61 	.word	0xbe205c61
 8014a90:	72bea4d0 	.word	0x72bea4d0
 8014a94:	3e663769 	.word	0x3e663769
 8014a98:	c5d26bf1 	.word	0xc5d26bf1
 8014a9c:	3ebbbd41 	.word	0x3ebbbd41
 8014aa0:	af25de2c 	.word	0xaf25de2c
 8014aa4:	3f11566a 	.word	0x3f11566a
 8014aa8:	16bebd93 	.word	0x16bebd93
 8014aac:	3f66c16c 	.word	0x3f66c16c
 8014ab0:	5555553e 	.word	0x5555553e
 8014ab4:	3fc55555 	.word	0x3fc55555
 8014ab8:	fff00000 	.word	0xfff00000
 8014abc:	3ff00000 	.word	0x3ff00000
 8014ac0:	4090cbff 	.word	0x4090cbff
 8014ac4:	3f6f3400 	.word	0x3f6f3400
 8014ac8:	3fe00000 	.word	0x3fe00000
 8014acc:	652b82fe 	.word	0x652b82fe
 8014ad0:	3c971547 	.word	0x3c971547
 8014ad4:	4090cc00 	.word	0x4090cc00

08014ad8 <fabs>:
 8014ad8:	ec51 0b10 	vmov	r0, r1, d0
 8014adc:	4602      	mov	r2, r0
 8014ade:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014ae2:	ec43 2b10 	vmov	d0, r2, r3
 8014ae6:	4770      	bx	lr

08014ae8 <scalbn>:
 8014ae8:	b570      	push	{r4, r5, r6, lr}
 8014aea:	ec55 4b10 	vmov	r4, r5, d0
 8014aee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8014af2:	4606      	mov	r6, r0
 8014af4:	462b      	mov	r3, r5
 8014af6:	b991      	cbnz	r1, 8014b1e <scalbn+0x36>
 8014af8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8014afc:	4323      	orrs	r3, r4
 8014afe:	d03d      	beq.n	8014b7c <scalbn+0x94>
 8014b00:	4b35      	ldr	r3, [pc, #212]	@ (8014bd8 <scalbn+0xf0>)
 8014b02:	4620      	mov	r0, r4
 8014b04:	4629      	mov	r1, r5
 8014b06:	2200      	movs	r2, #0
 8014b08:	f7eb fd86 	bl	8000618 <__aeabi_dmul>
 8014b0c:	4b33      	ldr	r3, [pc, #204]	@ (8014bdc <scalbn+0xf4>)
 8014b0e:	429e      	cmp	r6, r3
 8014b10:	4604      	mov	r4, r0
 8014b12:	460d      	mov	r5, r1
 8014b14:	da0f      	bge.n	8014b36 <scalbn+0x4e>
 8014b16:	a328      	add	r3, pc, #160	@ (adr r3, 8014bb8 <scalbn+0xd0>)
 8014b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b1c:	e01e      	b.n	8014b5c <scalbn+0x74>
 8014b1e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8014b22:	4291      	cmp	r1, r2
 8014b24:	d10b      	bne.n	8014b3e <scalbn+0x56>
 8014b26:	4622      	mov	r2, r4
 8014b28:	4620      	mov	r0, r4
 8014b2a:	4629      	mov	r1, r5
 8014b2c:	f7eb fbbe 	bl	80002ac <__adddf3>
 8014b30:	4604      	mov	r4, r0
 8014b32:	460d      	mov	r5, r1
 8014b34:	e022      	b.n	8014b7c <scalbn+0x94>
 8014b36:	460b      	mov	r3, r1
 8014b38:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014b3c:	3936      	subs	r1, #54	@ 0x36
 8014b3e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8014b42:	4296      	cmp	r6, r2
 8014b44:	dd0d      	ble.n	8014b62 <scalbn+0x7a>
 8014b46:	2d00      	cmp	r5, #0
 8014b48:	a11d      	add	r1, pc, #116	@ (adr r1, 8014bc0 <scalbn+0xd8>)
 8014b4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b4e:	da02      	bge.n	8014b56 <scalbn+0x6e>
 8014b50:	a11d      	add	r1, pc, #116	@ (adr r1, 8014bc8 <scalbn+0xe0>)
 8014b52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b56:	a31a      	add	r3, pc, #104	@ (adr r3, 8014bc0 <scalbn+0xd8>)
 8014b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b5c:	f7eb fd5c 	bl	8000618 <__aeabi_dmul>
 8014b60:	e7e6      	b.n	8014b30 <scalbn+0x48>
 8014b62:	1872      	adds	r2, r6, r1
 8014b64:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8014b68:	428a      	cmp	r2, r1
 8014b6a:	dcec      	bgt.n	8014b46 <scalbn+0x5e>
 8014b6c:	2a00      	cmp	r2, #0
 8014b6e:	dd08      	ble.n	8014b82 <scalbn+0x9a>
 8014b70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014b74:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8014b78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014b7c:	ec45 4b10 	vmov	d0, r4, r5
 8014b80:	bd70      	pop	{r4, r5, r6, pc}
 8014b82:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8014b86:	da08      	bge.n	8014b9a <scalbn+0xb2>
 8014b88:	2d00      	cmp	r5, #0
 8014b8a:	a10b      	add	r1, pc, #44	@ (adr r1, 8014bb8 <scalbn+0xd0>)
 8014b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b90:	dac1      	bge.n	8014b16 <scalbn+0x2e>
 8014b92:	a10f      	add	r1, pc, #60	@ (adr r1, 8014bd0 <scalbn+0xe8>)
 8014b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b98:	e7bd      	b.n	8014b16 <scalbn+0x2e>
 8014b9a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014b9e:	3236      	adds	r2, #54	@ 0x36
 8014ba0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8014ba4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014ba8:	4620      	mov	r0, r4
 8014baa:	4b0d      	ldr	r3, [pc, #52]	@ (8014be0 <scalbn+0xf8>)
 8014bac:	4629      	mov	r1, r5
 8014bae:	2200      	movs	r2, #0
 8014bb0:	e7d4      	b.n	8014b5c <scalbn+0x74>
 8014bb2:	bf00      	nop
 8014bb4:	f3af 8000 	nop.w
 8014bb8:	c2f8f359 	.word	0xc2f8f359
 8014bbc:	01a56e1f 	.word	0x01a56e1f
 8014bc0:	8800759c 	.word	0x8800759c
 8014bc4:	7e37e43c 	.word	0x7e37e43c
 8014bc8:	8800759c 	.word	0x8800759c
 8014bcc:	fe37e43c 	.word	0xfe37e43c
 8014bd0:	c2f8f359 	.word	0xc2f8f359
 8014bd4:	81a56e1f 	.word	0x81a56e1f
 8014bd8:	43500000 	.word	0x43500000
 8014bdc:	ffff3cb0 	.word	0xffff3cb0
 8014be0:	3c900000 	.word	0x3c900000

08014be4 <with_errno>:
 8014be4:	b510      	push	{r4, lr}
 8014be6:	ed2d 8b02 	vpush	{d8}
 8014bea:	eeb0 8a40 	vmov.f32	s16, s0
 8014bee:	eef0 8a60 	vmov.f32	s17, s1
 8014bf2:	4604      	mov	r4, r0
 8014bf4:	f7fb f9fe 	bl	800fff4 <__errno>
 8014bf8:	eeb0 0a48 	vmov.f32	s0, s16
 8014bfc:	eef0 0a68 	vmov.f32	s1, s17
 8014c00:	ecbd 8b02 	vpop	{d8}
 8014c04:	6004      	str	r4, [r0, #0]
 8014c06:	bd10      	pop	{r4, pc}

08014c08 <xflow>:
 8014c08:	4603      	mov	r3, r0
 8014c0a:	b507      	push	{r0, r1, r2, lr}
 8014c0c:	ec51 0b10 	vmov	r0, r1, d0
 8014c10:	b183      	cbz	r3, 8014c34 <xflow+0x2c>
 8014c12:	4602      	mov	r2, r0
 8014c14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014c18:	e9cd 2300 	strd	r2, r3, [sp]
 8014c1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c20:	f7eb fcfa 	bl	8000618 <__aeabi_dmul>
 8014c24:	ec41 0b10 	vmov	d0, r0, r1
 8014c28:	2022      	movs	r0, #34	@ 0x22
 8014c2a:	b003      	add	sp, #12
 8014c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c30:	f7ff bfd8 	b.w	8014be4 <with_errno>
 8014c34:	4602      	mov	r2, r0
 8014c36:	460b      	mov	r3, r1
 8014c38:	e7ee      	b.n	8014c18 <xflow+0x10>
 8014c3a:	0000      	movs	r0, r0
 8014c3c:	0000      	movs	r0, r0
	...

08014c40 <__math_uflow>:
 8014c40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014c48 <__math_uflow+0x8>
 8014c44:	f7ff bfe0 	b.w	8014c08 <xflow>
 8014c48:	00000000 	.word	0x00000000
 8014c4c:	10000000 	.word	0x10000000

08014c50 <__math_oflow>:
 8014c50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014c58 <__math_oflow+0x8>
 8014c54:	f7ff bfd8 	b.w	8014c08 <xflow>
 8014c58:	00000000 	.word	0x00000000
 8014c5c:	70000000 	.word	0x70000000

08014c60 <_init>:
 8014c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c62:	bf00      	nop
 8014c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c66:	bc08      	pop	{r3}
 8014c68:	469e      	mov	lr, r3
 8014c6a:	4770      	bx	lr

08014c6c <_fini>:
 8014c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c6e:	bf00      	nop
 8014c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c72:	bc08      	pop	{r3}
 8014c74:	469e      	mov	lr, r3
 8014c76:	4770      	bx	lr
