
RTOS CNC 3AXIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015578  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000928  08015708  08015708  00016708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016030  08016030  00018290  2**0
                  CONTENTS
  4 .ARM          00000008  08016030  08016030  00017030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016038  08016038  00018290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016038  08016038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801603c  0801603c  0001703c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08016040  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00018290  2**0
                  CONTENTS
 10 .bss          0000549c  20000290  20000290  00018290  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000572c  2000572c  00018290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00018290  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023cd2  00000000  00000000  000182c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005408  00000000  00000000  0003bf92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e50  00000000  00000000  000413a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001786  00000000  00000000  000431f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028591  00000000  00000000  00044976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026086  00000000  00000000  0006cf07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e86fe  00000000  00000000  00092f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017b68b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009990  00000000  00000000  0017b6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  00185060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000290 	.word	0x20000290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080156f0 	.word	0x080156f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000294 	.word	0x20000294
 80001cc:	080156f0 	.word	0x080156f0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <Accel_Stepper_SetPin>:
 * dir_port : GPIO port of direction pin
 * dir_pin : gpio pin number of direction pin
 */
void Accel_Stepper_SetPin(Acceleration_t* Accel_stepper, GPIO_TypeDef* step_port,
		uint16_t step_pin, GPIO_TypeDef* dir_port, uint16_t dir_pin)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	80fb      	strh	r3, [r7, #6]
	Accel_stepper->Step_Port = step_port;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	651a      	str	r2, [r3, #80]	@ 0x50
	Accel_stepper->Step_Pin = step_pin;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	88fa      	ldrh	r2, [r7, #6]
 800101e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	Accel_stepper->Dir_Pin = dir_pin;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8b3a      	ldrh	r2, [r7, #24]
 8001026:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	Accel_stepper->Dir_Port = dir_port;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <Accel_Stepper_SetTimer>:
/*
 * Set Timer for each motor
 * timer : pointer to timer typedef(Which timer is use for control speed)
 */
void Accel_Stepper_SetTimer(Acceleration_t *Accel_stepper, TIM_HandleTypeDef* timer){
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	Accel_stepper->htim = timer;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <Accel_Stepper_TIMIT_Handler>:
/*
 * Accel_Stepper_TIMIT_Handler
 * stepper : Num of which stepper use found @ Stepper_t
 */
void Accel_Stepper_TIMIT_Handler(Acceleration_t *Accel_stepper){
 8001058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800105c:	b0a2      	sub	sp, #136	@ 0x88
 800105e:	af00      	add	r7, sp, #0
 8001060:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (state.stop_press) {
 8001064:	4bb4      	ldr	r3, [pc, #720]	@ (8001338 <Accel_Stepper_TIMIT_Handler+0x2e0>)
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <Accel_Stepper_TIMIT_Handler+0x1e>
        Accel_stepper->run_state = STOP;
 800106e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001072:	2300      	movs	r3, #0
 8001074:	7053      	strb	r3, [r2, #1]
    }

	__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, Accel_stepper->step_delay);
 8001076:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800107a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800107e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4603      	mov	r3, r0
 8001088:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800108a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800108e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001092:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001096:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001098:	4603      	mov	r3, r0
 800109a:	60d3      	str	r3, [r2, #12]

	switch(Accel_stepper->run_state) {
 800109c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010a0:	785b      	ldrb	r3, [r3, #1]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	f200 81eb 	bhi.w	800147e <Accel_Stepper_TIMIT_Handler+0x426>
 80010a8:	a201      	add	r2, pc, #4	@ (adr r2, 80010b0 <Accel_Stepper_TIMIT_Handler+0x58>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010c1 	.word	0x080010c1
 80010b4:	080010f7 	.word	0x080010f7
 80010b8:	0800133d 	.word	0x0800133d
 80010bc:	080012af 	.word	0x080012af
		case STOP:
			Accel_stepper->step_count = 0;
 80010c0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
			Accel_stepper->rest = 0;
 80010d0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		     // Stop Timer/Counter 1.
		   	HAL_TIM_Base_Stop_IT(Accel_stepper->htim);
 80010e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010e6:	4618      	mov	r0, r3
 80010e8:	f009 f806 	bl	800a0f8 <HAL_TIM_Base_Stop_IT>
		   	Accel_stepper->run_status = 0;
 80010ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
		   	break;
 80010f4:	e1c3      	b.n	800147e <Accel_Stepper_TIMIT_Handler+0x426>
	    case ACCEL:
	    	Accel_stepper->run_status = 1;
 80010f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80010fa:	2301      	movs	r3, #1
 80010fc:	7013      	strb	r3, [r2, #0]
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 80010fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001102:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001104:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001108:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800110c:	4619      	mov	r1, r3
 800110e:	4610      	mov	r0, r2
 8001110:	f006 f8c7 	bl	80072a2 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 8001114:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001118:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800111c:	f112 0a01 	adds.w	sl, r2, #1
 8001120:	f143 0b00 	adc.w	fp, r3, #0
 8001124:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001128:	e9c3 ab0c 	strd	sl, fp, [r3, #48]	@ 0x30
			Accel_stepper->accel_count++;
 800112c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001130:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001134:	1c51      	adds	r1, r2, #1
 8001136:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001138:	f143 0300 	adc.w	r3, r3, #0
 800113c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800113e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001142:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8001146:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
			Accel_stepper->new_step_delay = Accel_stepper->step_delay - (((2 * (long)Accel_stepper->step_delay) + Accel_stepper->rest)/(4 * Accel_stepper->accel_count + 1));
 800114a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800114e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001152:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001156:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	17da      	asrs	r2, r3, #31
 8001160:	673b      	str	r3, [r7, #112]	@ 0x70
 8001162:	677a      	str	r2, [r7, #116]	@ 0x74
 8001164:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001168:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800116c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001170:	4641      	mov	r1, r8
 8001172:	1889      	adds	r1, r1, r2
 8001174:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001176:	4649      	mov	r1, r9
 8001178:	eb43 0101 	adc.w	r1, r3, r1
 800117c:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800117e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001182:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	f04f 0100 	mov.w	r1, #0
 800118e:	0099      	lsls	r1, r3, #2
 8001190:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001194:	0090      	lsls	r0, r2, #2
 8001196:	1c43      	adds	r3, r0, #1
 8001198:	663b      	str	r3, [r7, #96]	@ 0x60
 800119a:	f141 0300 	adc.w	r3, r1, #0
 800119e:	667b      	str	r3, [r7, #100]	@ 0x64
 80011a0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80011a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80011a8:	f7ff fd7e 	bl	8000ca8 <__aeabi_uldivmod>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	1aa1      	subs	r1, r4, r2
 80011b2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80011b4:	eb65 0303 	sbc.w	r3, r5, r3
 80011b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80011c2:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
			Accel_stepper->rest = ((2 * (long)Accel_stepper->step_delay)+Accel_stepper->rest)%(4 * Accel_stepper->accel_count + 1);
 80011c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	17da      	asrs	r2, r3, #31
 80011d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80011d6:	657a      	str	r2, [r7, #84]	@ 0x54
 80011d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80011e0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80011e4:	4621      	mov	r1, r4
 80011e6:	1889      	adds	r1, r1, r2
 80011e8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80011ea:	4629      	mov	r1, r5
 80011ec:	eb43 0101 	adc.w	r1, r3, r1
 80011f0:	64f9      	str	r1, [r7, #76]	@ 0x4c
 80011f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011f6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	008b      	lsls	r3, r1, #2
 8001204:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001208:	0082      	lsls	r2, r0, #2
 800120a:	1c51      	adds	r1, r2, #1
 800120c:	6439      	str	r1, [r7, #64]	@ 0x40
 800120e:	f143 0300 	adc.w	r3, r3, #0
 8001212:	647b      	str	r3, [r7, #68]	@ 0x44
 8001214:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001218:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800121c:	f7ff fd44 	bl	8000ca8 <__aeabi_uldivmod>
 8001220:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001224:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	      // Chech if we should start decelration.
			if(Accel_stepper->step_count >= Accel_stepper->decel_start) {
 8001228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800122c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001234:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001238:	4290      	cmp	r0, r2
 800123a:	eb71 0303 	sbcs.w	r3, r1, r3
 800123e:	d30c      	bcc.n	800125a <Accel_Stepper_TIMIT_Handler+0x202>
				Accel_stepper->accel_count = Accel_stepper->decel_val;
 8001240:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001244:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001248:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800124c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
				Accel_stepper->run_state = DECEL;
 8001250:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001254:	2202      	movs	r2, #2
 8001256:	705a      	strb	r2, [r3, #1]
				Accel_stepper->last_accel_delay = Accel_stepper->new_step_delay;
				Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
				Accel_stepper->rest = 0;
				Accel_stepper->run_state = RUN;
			}
			break;
 8001258:	e10c      	b.n	8001474 <Accel_Stepper_TIMIT_Handler+0x41c>
			else if(Accel_stepper->new_step_delay <= Accel_stepper->min_step_delay) {
 800125a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800125e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001262:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001266:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800126a:	4290      	cmp	r0, r2
 800126c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001270:	f0c0 8100 	bcc.w	8001474 <Accel_Stepper_TIMIT_Handler+0x41c>
				Accel_stepper->last_accel_delay = Accel_stepper->new_step_delay;
 8001274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001278:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800127c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001280:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
				Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
 8001284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001288:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800128c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001290:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
				Accel_stepper->rest = 0;
 8001294:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				Accel_stepper->run_state = RUN;
 80012a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012a8:	2203      	movs	r2, #3
 80012aa:	705a      	strb	r2, [r3, #1]
			break;
 80012ac:	e0e2      	b.n	8001474 <Accel_Stepper_TIMIT_Handler+0x41c>

	    case RUN:
	    	Accel_stepper->run_status = 1;
 80012ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 80012b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80012c4:	4619      	mov	r1, r3
 80012c6:	4610      	mov	r0, r2
 80012c8:	f005 ffeb 	bl	80072a2 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 80012cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80012d4:	1c54      	adds	r4, r2, #1
 80012d6:	f143 0500 	adc.w	r5, r3, #0
 80012da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012de:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
	    	Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
 80012e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012ea:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80012ee:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
//	         Check if we should start deceleration.
			 if(Accel_stepper->step_count >= Accel_stepper->decel_start) {
 80012f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012f6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80012fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001302:	4290      	cmp	r0, r2
 8001304:	eb71 0303 	sbcs.w	r3, r1, r3
 8001308:	f0c0 80b6 	bcc.w	8001478 <Accel_Stepper_TIMIT_Handler+0x420>
				 Accel_stepper->accel_count = Accel_stepper->decel_val;
 800130c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001310:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001314:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001318:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//	         Start deceleration with same delay as accel ended with.
				 Accel_stepper->new_step_delay = Accel_stepper->last_accel_delay;
 800131c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001320:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001324:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001328:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
				 Accel_stepper->run_state = DECEL;
 800132c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001330:	2202      	movs	r2, #2
 8001332:	705a      	strb	r2, [r3, #1]
			 }
			 break;
 8001334:	e0a0      	b.n	8001478 <Accel_Stepper_TIMIT_Handler+0x420>
 8001336:	bf00      	nop
 8001338:	20000a28 	.word	0x20000a28

	    case DECEL:
	    	Accel_stepper->run_status = 1;
 800133c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001340:	2301      	movs	r3, #1
 8001342:	7013      	strb	r3, [r2, #0]
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 8001344:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800134a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800134e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8001352:	4619      	mov	r1, r3
 8001354:	4610      	mov	r0, r2
 8001356:	f005 ffa4 	bl	80072a2 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 800135a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800135e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001362:	f112 0801 	adds.w	r8, r2, #1
 8001366:	f143 0900 	adc.w	r9, r3, #0
 800136a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800136e:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
			 Accel_stepper->accel_count++;
 8001372:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001376:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800137a:	1c51      	adds	r1, r2, #1
 800137c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800137e:	f143 0300 	adc.w	r3, r3, #0
 8001382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001384:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001388:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800138c:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
			 Accel_stepper->new_step_delay = Accel_stepper->step_delay + (((2 * (long)Accel_stepper->step_delay) + Accel_stepper->rest)/(4 * abs(Accel_stepper->accel_count) + 1));
 8001390:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001394:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001398:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800139c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	17da      	asrs	r2, r3, #31
 80013a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80013a8:	637a      	str	r2, [r7, #52]	@ 0x34
 80013aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80013b2:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 80013b6:	4641      	mov	r1, r8
 80013b8:	1889      	adds	r1, r1, r2
 80013ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80013bc:	4649      	mov	r1, r9
 80013be:	eb43 0101 	adc.w	r1, r3, r1
 80013c2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80013c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80013cc:	4613      	mov	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bfb8      	it	lt
 80013d2:	425b      	neglt	r3, r3
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	3301      	adds	r3, #1
 80013d8:	17da      	asrs	r2, r3, #31
 80013da:	623b      	str	r3, [r7, #32]
 80013dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80013de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80013e6:	f7ff fc5f 	bl	8000ca8 <__aeabi_uldivmod>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	18a1      	adds	r1, r4, r2
 80013f0:	61b9      	str	r1, [r7, #24]
 80013f2:	eb45 0303 	adc.w	r3, r5, r3
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001400:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
			 Accel_stepper->rest = ((2 * (long)Accel_stepper->step_delay)+Accel_stepper->rest)%(4 * (long) abs(Accel_stepper->accel_count) + 1);
 8001404:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001408:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	17da      	asrs	r2, r3, #31
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	617a      	str	r2, [r7, #20]
 8001416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800141a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800141e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001422:	4621      	mov	r1, r4
 8001424:	1889      	adds	r1, r1, r2
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	4629      	mov	r1, r5
 800142a:	eb43 0101 	adc.w	r1, r3, r1
 800142e:	60f9      	str	r1, [r7, #12]
 8001430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001434:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001438:	4613      	mov	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	bfb8      	it	lt
 800143e:	425b      	neglt	r3, r3
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	3301      	adds	r3, #1
 8001444:	17da      	asrs	r2, r3, #31
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800144e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001452:	f7ff fc29 	bl	8000ca8 <__aeabi_uldivmod>
 8001456:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800145a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
//	         Check if we at last step
			 if(Accel_stepper->accel_count >= 0){
 800145e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001462:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001466:	2b00      	cmp	r3, #0
 8001468:	db08      	blt.n	800147c <Accel_Stepper_TIMIT_Handler+0x424>
				 Accel_stepper->run_state = STOP;
 800146a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800146e:	2200      	movs	r2, #0
 8001470:	705a      	strb	r2, [r3, #1]
			 }
			 break;
 8001472:	e003      	b.n	800147c <Accel_Stepper_TIMIT_Handler+0x424>
			break;
 8001474:	bf00      	nop
 8001476:	e002      	b.n	800147e <Accel_Stepper_TIMIT_Handler+0x426>
			 break;
 8001478:	bf00      	nop
 800147a:	e000      	b.n	800147e <Accel_Stepper_TIMIT_Handler+0x426>
			 break;
 800147c:	bf00      	nop
	  }
	 Accel_stepper->step_delay = Accel_stepper->new_step_delay;
 800147e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001482:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001486:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800148a:	e9c1 2302 	strd	r2, r3, [r1, #8]
//		  return rc;
}
 800148e:	bf00      	nop
 8001490:	3788      	adds	r7, #136	@ 0x88
 8001492:	46bd      	mov	sp, r7
 8001494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001498 <Accel_Stepper_Move>:
 * accel : acceleration
 * decel : deceleration
 * rpm : speed at run state
 */
void Accel_Stepper_Move(Acceleration_t *Accel_stepper, signed long long int step, unsigned long long int accel, unsigned long long int decel, unsigned long long int rpm)//acc*100
{
 8001498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800149c:	b0ab      	sub	sp, #172	@ 0xac
 800149e:	af00      	add	r7, sp, #0
 80014a0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80014a4:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	unsigned long long int max_step_lim; //! Number of steps before we hit max speed.
	unsigned long long int accel_lim;//! Number of steps before we must start deceleration (if accel does not hit max speed).
	unsigned long long int speed = 2 * 3.14159 * rpm/60;
 80014a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80014ac:	f7ff f87e 	bl	80005ac <__aeabi_ul2d>
 80014b0:	a3e8      	add	r3, pc, #928	@ (adr r3, 8001854 <Accel_Stepper_Move+0x3bc>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f8af 	bl	8000618 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4be2      	ldr	r3, [pc, #904]	@ (8001850 <Accel_Stepper_Move+0x3b8>)
 80014c8:	f7ff f9d0 	bl	800086c <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fc18 	bl	8000d08 <__aeabi_d2ulz>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	Accel_stepper->step_count = 0;
 80014e0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	if(step>0){
 80014f0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80014f4:	2a01      	cmp	r2, #1
 80014f6:	f173 0300 	sbcs.w	r3, r3, #0
 80014fa:	db14      	blt.n	8001526 <Accel_Stepper_Move+0x8e>
		HAL_GPIO_WritePin(Accel_stepper->Dir_Port, Accel_stepper->Dir_Pin, 1);
 80014fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001500:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001506:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800150a:	2201      	movs	r2, #1
 800150c:	4619      	mov	r1, r3
 800150e:	f005 feaf 	bl	8007270 <HAL_GPIO_WritePin>
		step = 2*step;
 8001512:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001516:	1891      	adds	r1, r2, r2
 8001518:	62b9      	str	r1, [r7, #40]	@ 0x28
 800151a:	415b      	adcs	r3, r3
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800151e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001522:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
//    srd.dir = CW;
	}
//   Set direction from sign on step value.
	if(step < 0){
 8001526:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800152a:	2b00      	cmp	r3, #0
 800152c:	da1c      	bge.n	8001568 <Accel_Stepper_Move+0xd0>
//    srd.dir = CCW;
		HAL_GPIO_WritePin(Accel_stepper->Dir_Port, Accel_stepper->Dir_Pin, 0);
 800152e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001532:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001538:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800153c:	2200      	movs	r2, #0
 800153e:	4619      	mov	r1, r3
 8001540:	f005 fe96 	bl	8007270 <HAL_GPIO_WritePin>
		step = -2*step;
 8001544:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	1a14      	subs	r4, r2, r0
 8001552:	eb63 0501 	sbc.w	r5, r3, r1
 8001556:	1923      	adds	r3, r4, r4
 8001558:	623b      	str	r3, [r7, #32]
 800155a:	eb45 0305 	adc.w	r3, r5, r5
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001560:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001564:	e9c7 4520 	strd	r4, r5, [r7, #128]	@ 0x80
	}


//  If moving only 1 step.
	if(step == 1){
 8001568:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800156c:	1e51      	subs	r1, r2, #1
 800156e:	430b      	orrs	r3, r1
 8001570:	d11a      	bne.n	80015a8 <Accel_Stepper_Move+0x110>

//      Move one step...
		Accel_stepper->accel_count = -1;
 8001572:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001576:	f04f 32ff 	mov.w	r2, #4294967295
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//      ...in DECEL state.
		Accel_stepper->run_state = DECEL;
 8001582:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001586:	2202      	movs	r2, #2
 8001588:	705a      	strb	r2, [r3, #1]
//      Just a short delay so main() can act on 'running'.
		Accel_stepper->step_delay = 1000;
 800158a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800158e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	e9c1 2302 	strd	r2, r3, [r1, #8]
//      status.running = TRUE;
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
 800159a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800159e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a0:	4618      	mov	r0, r3
 80015a2:	f008 fd39 	bl	800a018 <HAL_TIM_Base_Start_IT>
		Accel_stepper->accel_count = 0;
//    status.running = TRUE;
		__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, 1000);
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
	}
}
 80015a6:	e1cd      	b.n	8001944 <Accel_Stepper_Move+0x4ac>
	else if(step != 0){
 80015a8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80015ac:	4313      	orrs	r3, r2
 80015ae:	f000 81c9 	beq.w	8001944 <Accel_Stepper_Move+0x4ac>
		Accel_stepper->min_step_delay = ALPHA*TIM_FREQ/speed;
 80015b2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80015b6:	f7fe fff9 	bl	80005ac <__aeabi_ul2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	a19c      	add	r1, pc, #624	@ (adr r1, 8001830 <Accel_Stepper_Move+0x398>)
 80015c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015c4:	f7ff f952 	bl	800086c <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fb82 	bl	8000cd8 <__aeabi_d2lz>
 80015d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015d8:	e9c3 0108 	strd	r0, r1, [r3, #32]
		Accel_stepper->step_delay = (TIM_FREQ_SCALE * sqrt(A_SQ / accel))/10000;;
 80015dc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80015e0:	a195      	add	r1, pc, #596	@ (adr r1, 8001838 <Accel_Stepper_Move+0x3a0>)
 80015e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015e6:	f7ff fb5f 	bl	8000ca8 <__aeabi_uldivmod>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7fe ffdb 	bl	80005ac <__aeabi_ul2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	ec43 2b10 	vmov	d0, r2, r3
 80015fe:	f013 f95d 	bl	80148bc <sqrt>
 8001602:	ec51 0b10 	vmov	r0, r1, d0
 8001606:	a38e      	add	r3, pc, #568	@ (adr r3, 8001840 <Accel_Stepper_Move+0x3a8>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7ff f804 	bl	8000618 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	a38b      	add	r3, pc, #556	@ (adr r3, 8001848 <Accel_Stepper_Move+0x3b0>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7ff f925 	bl	800086c <__aeabi_ddiv>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fb6d 	bl	8000d08 <__aeabi_d2ulz>
 800162e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001632:	e9c3 0102 	strd	r0, r1, [r3, #8]
		max_step_lim = (long)speed*speed*10000/(long)(((long)A_x20000*accel)/100);
 8001636:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800163a:	17da      	asrs	r2, r3, #31
 800163c:	673b      	str	r3, [r7, #112]	@ 0x70
 800163e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001640:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001644:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001648:	462a      	mov	r2, r5
 800164a:	fb02 f203 	mul.w	r2, r2, r3
 800164e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001652:	4621      	mov	r1, r4
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	441a      	add	r2, r3
 800165a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800165e:	4621      	mov	r1, r4
 8001660:	fba3 ab01 	umull	sl, fp, r3, r1
 8001664:	eb02 030b 	add.w	r3, r2, fp
 8001668:	469b      	mov	fp, r3
 800166a:	4652      	mov	r2, sl
 800166c:	465b      	mov	r3, fp
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	0099      	lsls	r1, r3, #2
 8001678:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800167c:	0090      	lsls	r0, r2, #2
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	eb12 080a 	adds.w	r8, r2, sl
 8001686:	eb43 090b 	adc.w	r9, r3, fp
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800169a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800169e:	4690      	mov	r8, r2
 80016a0:	4699      	mov	r9, r3
 80016a2:	ebb8 030a 	subs.w	r3, r8, sl
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	eb69 030b 	sbc.w	r3, r9, fp
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80016ba:	4629      	mov	r1, r5
 80016bc:	010b      	lsls	r3, r1, #4
 80016be:	4621      	mov	r1, r4
 80016c0:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80016c4:	4621      	mov	r1, r4
 80016c6:	010a      	lsls	r2, r1, #4
 80016c8:	4611      	mov	r1, r2
 80016ca:	461a      	mov	r2, r3
 80016cc:	460b      	mov	r3, r1
 80016ce:	eb13 030a 	adds.w	r3, r3, sl
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	4613      	mov	r3, r2
 80016d6:	eb43 030b 	adc.w	r3, r3, fp
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016e8:	4629      	mov	r1, r5
 80016ea:	010b      	lsls	r3, r1, #4
 80016ec:	4621      	mov	r1, r4
 80016ee:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80016f2:	4621      	mov	r1, r4
 80016f4:	010a      	lsls	r2, r1, #4
 80016f6:	4614      	mov	r4, r2
 80016f8:	461d      	mov	r5, r3
 80016fa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	1896      	adds	r6, r2, r2
 8001704:	60be      	str	r6, [r7, #8]
 8001706:	415b      	adcs	r3, r3
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800170e:	1816      	adds	r6, r2, r0
 8001710:	603e      	str	r6, [r7, #0]
 8001712:	414b      	adcs	r3, r1
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001722:	464e      	mov	r6, r9
 8001724:	00f3      	lsls	r3, r6, #3
 8001726:	4646      	mov	r6, r8
 8001728:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 800172c:	4646      	mov	r6, r8
 800172e:	00f2      	lsls	r2, r6, #3
 8001730:	4690      	mov	r8, r2
 8001732:	4699      	mov	r9, r3
 8001734:	4643      	mov	r3, r8
 8001736:	181b      	adds	r3, r3, r0
 8001738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800173a:	464b      	mov	r3, r9
 800173c:	eb41 0303 	adc.w	r3, r1, r3
 8001740:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001742:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800174e:	f7ff faab 	bl	8000ca8 <__aeabi_uldivmod>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4613      	mov	r3, r2
 8001758:	17da      	asrs	r2, r3, #31
 800175a:	663b      	str	r3, [r7, #96]	@ 0x60
 800175c:	667a      	str	r2, [r7, #100]	@ 0x64
 800175e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7ff fa9f 	bl	8000ca8 <__aeabi_uldivmod>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		if(max_step_lim == 0){
 8001772:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001776:	4313      	orrs	r3, r2
 8001778:	d105      	bne.n	8001786 <Accel_Stepper_Move+0x2ee>
			max_step_lim = 1;
 800177a:	f04f 0201 	mov.w	r2, #1
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		accel_lim = ((long)step*decel) / (accel+decel);
 8001786:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800178a:	17da      	asrs	r2, r3, #31
 800178c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800178e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001794:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001798:	462a      	mov	r2, r5
 800179a:	fb02 f203 	mul.w	r2, r2, r3
 800179e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017a2:	4621      	mov	r1, r4
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	441a      	add	r2, r3
 80017aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80017ae:	4621      	mov	r1, r4
 80017b0:	fba3 1301 	umull	r1, r3, r3, r1
 80017b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017b6:	460b      	mov	r3, r1
 80017b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80017ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017bc:	18d3      	adds	r3, r2, r3
 80017be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017c0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80017c4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80017c8:	1884      	adds	r4, r0, r2
 80017ca:	653c      	str	r4, [r7, #80]	@ 0x50
 80017cc:	eb41 0303 	adc.w	r3, r1, r3
 80017d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80017d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80017d6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80017da:	f7ff fa65 	bl	8000ca8 <__aeabi_uldivmod>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		if(accel_lim == 0){
 80017e6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80017ea:	4313      	orrs	r3, r2
 80017ec:	d105      	bne.n	80017fa <Accel_Stepper_Move+0x362>
			accel_lim = 1;
 80017ee:	f04f 0201 	mov.w	r2, #1
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		if(accel_lim <= max_step_lim){
 80017fa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80017fe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001802:	4290      	cmp	r0, r2
 8001804:	eb71 0303 	sbcs.w	r3, r1, r3
 8001808:	d328      	bcc.n	800185c <Accel_Stepper_Move+0x3c4>
			Accel_stepper->decel_val = accel_lim - step;//decel_val: step for decel)
 800180a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800180e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001812:	1a84      	subs	r4, r0, r2
 8001814:	64bc      	str	r4, [r7, #72]	@ 0x48
 8001816:	eb61 0303 	sbc.w	r3, r1, r3
 800181a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800181c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001820:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001824:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001828:	e035      	b.n	8001896 <Accel_Stepper_Move+0x3fe>
 800182a:	bf00      	nop
 800182c:	f3af 8000 	nop.w
 8001830:	43958106 	.word	0x43958106
 8001834:	4093a28b 	.word	0x4093a28b
 8001838:	017f7eb0 	.word	0x017f7eb0
	...
 8001844:	4124a140 	.word	0x4124a140
 8001848:	00000000 	.word	0x00000000
 800184c:	40c38800 	.word	0x40c38800
 8001850:	404e0000 	.word	0x404e0000
 8001854:	f01b866e 	.word	0xf01b866e
 8001858:	401921f9 	.word	0x401921f9
			Accel_stepper->decel_val = -(((long)(max_step_lim*accel))/decel);
 800185c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001860:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	17da      	asrs	r2, r3, #31
 800186a:	643b      	str	r3, [r7, #64]	@ 0x40
 800186c:	647a      	str	r2, [r7, #68]	@ 0x44
 800186e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8001872:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001876:	f7ff fa17 	bl	8000ca8 <__aeabi_uldivmod>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	2100      	movs	r1, #0
 8001880:	4250      	negs	r0, r2
 8001882:	63b8      	str	r0, [r7, #56]	@ 0x38
 8001884:	eb61 0303 	sbc.w	r3, r1, r3
 8001888:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800188a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800188e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001892:	e9c1 2306 	strd	r2, r3, [r1, #24]
		if(Accel_stepper->decel_val == 0){
 8001896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800189a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	d107      	bne.n	80018b2 <Accel_Stepper_Move+0x41a>
			Accel_stepper->decel_val = -1;
 80018a2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018a6:	f04f 32ff 	mov.w	r2, #4294967295
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e9c1 2306 	strd	r2, r3, [r1, #24]
		Accel_stepper->decel_start = step + Accel_stepper->decel_val;
 80018b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018b6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80018ba:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80018be:	1884      	adds	r4, r0, r2
 80018c0:	633c      	str	r4, [r7, #48]	@ 0x30
 80018c2:	eb41 0303 	adc.w	r3, r1, r3
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80018c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80018cc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if(Accel_stepper->step_delay <= Accel_stepper->min_step_delay){
 80018d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018dc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018e0:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 80018e4:	4290      	cmp	r0, r2
 80018e6:	eb71 0303 	sbcs.w	r3, r1, r3
 80018ea:	d30c      	bcc.n	8001906 <Accel_Stepper_Move+0x46e>
			Accel_stepper->step_delay = Accel_stepper->min_step_delay;
 80018ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80018f4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Accel_stepper->run_state = RUN;
 80018fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001900:	2203      	movs	r2, #3
 8001902:	705a      	strb	r2, [r3, #1]
 8001904:	e003      	b.n	800190e <Accel_Stepper_Move+0x476>
			Accel_stepper->run_state = ACCEL;
 8001906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800190a:	2201      	movs	r2, #1
 800190c:	705a      	strb	r2, [r3, #1]
		Accel_stepper->accel_count = 0;
 800190e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, 1000);
 800191e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800192c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001932:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001936:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
 8001938:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800193c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193e:	4618      	mov	r0, r3
 8001940:	f008 fb6a 	bl	800a018 <HAL_TIM_Base_Start_IT>
}
 8001944:	bf00      	nop
 8001946:	37ac      	adds	r7, #172	@ 0xac
 8001948:	46bd      	mov	sp, r7
 800194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800194e:	bf00      	nop

08001950 <initializeCNC_pos>:
#include "Inverse_cnc.h"

extern Inv_CNC_t CNC;
extern CNC_pos_t CNC_pos;

void initializeCNC_pos(CNC_pos_t *cnc) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	cnc->Lsw1 = 0;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
	cnc->Lsw2 = 0;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	705a      	strb	r2, [r3, #1]
	cnc->Lsw3 = 0;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	709a      	strb	r2, [r3, #2]
	cnc->Lsw4 = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	70da      	strb	r2, [r3, #3]
	cnc->Lsw5 = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	711a      	strb	r2, [r3, #4]
	cnc->Lsw6 = 0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	715a      	strb	r2, [r3, #5]
    cnc->accel1 = 0;
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    cnc->accel2 = 0;
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    cnc->accel3 = 0;
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    cnc->jerk1 = 0;
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    cnc->jerk2 = 0;
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    cnc->jerk3 = 0;
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
    cnc->max_speedXY = 150000;
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	a31f      	add	r3, pc, #124	@ (adr r3, 8001a50 <initializeCNC_pos+0x100>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    cnc->max_speedZ = 150000;
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	a31c      	add	r3, pc, #112	@ (adr r3, 8001a50 <initializeCNC_pos+0x100>)
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    cnc->a_maxX = 10000;
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	a31b      	add	r3, pc, #108	@ (adr r3, 8001a58 <initializeCNC_pos+0x108>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    cnc->j_maxX = 10000;
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	a318      	add	r3, pc, #96	@ (adr r3, 8001a58 <initializeCNC_pos+0x108>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    cnc->a_maxY = 10000;
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	a315      	add	r3, pc, #84	@ (adr r3, 8001a58 <initializeCNC_pos+0x108>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    cnc->j_maxY = 10000;
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	a312      	add	r3, pc, #72	@ (adr r3, 8001a58 <initializeCNC_pos+0x108>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    cnc->a_maxZ = 10000;
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001a58 <initializeCNC_pos+0x108>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    cnc->j_maxZ = 6000;
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	a30e      	add	r3, pc, #56	@ (adr r3, 8001a60 <initializeCNC_pos+0x110>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
    cnc->t = 0.25;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8001a36:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    cnc->t1 = 0.5;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001a40:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	00000000 	.word	0x00000000
 8001a54:	41024f80 	.word	0x41024f80
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	40c38800 	.word	0x40c38800
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40b77000 	.word	0x40b77000

08001a68 <trans_to_posXY>:

void trans_to_posXY(float x,float y)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a72:	edc7 0a00 	vstr	s1, [r7]
	CNC.set_posX = x - CNC.pos_x;
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7fe fd76 	bl	8000568 <__aeabi_f2d>
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <trans_to_posXY+0x4c>)
 8001a7e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a82:	f7fe fc11 	bl	80002a8 <__aeabi_dsub>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	490a      	ldr	r1, [pc, #40]	@ (8001ab4 <trans_to_posXY+0x4c>)
 8001a8c:	e9c1 2300 	strd	r2, r3, [r1]
	CNC.set_posY = y - CNC.pos_y;
 8001a90:	6838      	ldr	r0, [r7, #0]
 8001a92:	f7fe fd69 	bl	8000568 <__aeabi_f2d>
 8001a96:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <trans_to_posXY+0x4c>)
 8001a98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001a9c:	f7fe fc04 	bl	80002a8 <__aeabi_dsub>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4903      	ldr	r1, [pc, #12]	@ (8001ab4 <trans_to_posXY+0x4c>)
 8001aa6:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000838 	.word	0x20000838

08001ab8 <trans_to_posZ>:
void trans_to_posZ(float z)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	ed87 0a01 	vstr	s0, [r7, #4]
	CNC.set_posZ = z - CNC.pos_z;
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7fe fd50 	bl	8000568 <__aeabi_f2d>
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <trans_to_posZ+0x2c>)
 8001aca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ace:	f7fe fbeb 	bl	80002a8 <__aeabi_dsub>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4903      	ldr	r1, [pc, #12]	@ (8001ae4 <trans_to_posZ+0x2c>)
 8001ad8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000838 	.word	0x20000838

08001ae8 <caculate_pos>:

signed long long int caculate_pos(double pos, double pwm)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	ed87 0b02 	vstr	d0, [r7, #8]
 8001af2:	ed87 1b00 	vstr	d1, [r7]
	return pos*pwm;
 8001af6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001afa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001afe:	f7fe fd8b 	bl	8000618 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7ff f8e5 	bl	8000cd8 <__aeabi_d2lz>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
}
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b22:	463b      	mov	r3, r7
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b2e:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <MX_ADC1_Init+0x78>)
 8001b30:	4a19      	ldr	r2, [pc, #100]	@ (8001b98 <MX_ADC1_Init+0x7c>)
 8001b32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b34:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <MX_ADC1_Init+0x78>)
 8001b36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <MX_ADC1_Init+0x78>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b42:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <MX_ADC1_Init+0x78>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b48:	4b12      	ldr	r3, [pc, #72]	@ (8001b94 <MX_ADC1_Init+0x78>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <MX_ADC1_Init+0x78>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b56:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <MX_ADC1_Init+0x78>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <MX_ADC1_Init+0x78>)
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b9c <MX_ADC1_Init+0x80>)
 8001b60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b62:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <MX_ADC1_Init+0x78>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <MX_ADC1_Init+0x78>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b6e:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <MX_ADC1_Init+0x78>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <MX_ADC1_Init+0x78>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b7c:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <MX_ADC1_Init+0x78>)
 8001b7e:	f003 ff69 	bl	8005a54 <HAL_ADC_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b88:	f001 fc22 	bl	80033d0 <Error_Handler>
//  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
//  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//  {
//    Error_Handler();
//  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200003d0 	.word	0x200003d0
 8001b98:	40012000 	.word	0x40012000
 8001b9c:	0f000001 	.word	0x0f000001

08001ba0 <ADC_Select_CH10>:

void ADC_Select_CH10(void){
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
	ADC_ChannelConfTypeDef sConfig = {0};
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_10;
 8001bb2:	230a      	movs	r3, #10
 8001bb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001bba:	2307      	movs	r3, #7
 8001bbc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4806      	ldr	r0, [pc, #24]	@ (8001bdc <ADC_Select_CH10+0x3c>)
 8001bc4:	f004 fa56 	bl	8006074 <HAL_ADC_ConfigChannel>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <ADC_Select_CH10+0x32>
  {
    Error_Handler();
 8001bce:	f001 fbff 	bl	80033d0 <Error_Handler>
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200003d0 	.word	0x200003d0

08001be0 <ADC_Select_CH11>:

void ADC_Select_CH11(void){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
	ADC_ChannelConfTypeDef sConfig = {0};
 8001be6:	463b      	mov	r3, r7
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_11;
 8001bf2:	230b      	movs	r3, #11
 8001bf4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bfe:	463b      	mov	r3, r7
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <ADC_Select_CH11+0x3c>)
 8001c04:	f004 fa36 	bl	8006074 <HAL_ADC_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <ADC_Select_CH11+0x32>
  {
    Error_Handler();
 8001c0e:	f001 fbdf 	bl	80033d0 <Error_Handler>
  }
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200003d0 	.word	0x200003d0

08001c20 <MX_DMA_ADC_Init>:
/**
  * Enable DMA controller clock
  */
void MX_DMA_ADC_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <MX_DMA_ADC_Init+0x3c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c5c <MX_DMA_ADC_Init+0x3c>)
 8001c30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <MX_DMA_ADC_Init+0x3c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2105      	movs	r1, #5
 8001c46:	2038      	movs	r0, #56	@ 0x38
 8001c48:	f004 fd17 	bl	800667a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c4c:	2038      	movs	r0, #56	@ 0x38
 8001c4e:	f004 fd30 	bl	80066b2 <HAL_NVIC_EnableIRQ>

}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800

08001c60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	@ 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a33      	ldr	r2, [pc, #204]	@ (8001d4c <HAL_ADC_MspInit+0xec>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d15f      	bne.n	8001d42 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	4b32      	ldr	r3, [pc, #200]	@ (8001d50 <HAL_ADC_MspInit+0xf0>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	4a31      	ldr	r2, [pc, #196]	@ (8001d50 <HAL_ADC_MspInit+0xf0>)
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c92:	4b2f      	ldr	r3, [pc, #188]	@ (8001d50 <HAL_ADC_MspInit+0xf0>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d50 <HAL_ADC_MspInit+0xf0>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8001d50 <HAL_ADC_MspInit+0xf0>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b28      	ldr	r3, [pc, #160]	@ (8001d50 <HAL_ADC_MspInit+0xf0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4821      	ldr	r0, [pc, #132]	@ (8001d54 <HAL_ADC_MspInit+0xf4>)
 8001cce:	f005 f91b 	bl	8006f08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cd2:	4b21      	ldr	r3, [pc, #132]	@ (8001d58 <HAL_ADC_MspInit+0xf8>)
 8001cd4:	4a21      	ldr	r2, [pc, #132]	@ (8001d5c <HAL_ADC_MspInit+0xfc>)
 8001cd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d58 <HAL_ADC_MspInit+0xf8>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <HAL_ADC_MspInit+0xf8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d58 <HAL_ADC_MspInit+0xf8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <HAL_ADC_MspInit+0xf8>)
 8001cec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cf0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <HAL_ADC_MspInit+0xf8>)
 8001cf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cf8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cfa:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_ADC_MspInit+0xf8>)
 8001cfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <HAL_ADC_MspInit+0xf8>)
 8001d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d0a:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <HAL_ADC_MspInit+0xf8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <HAL_ADC_MspInit+0xf8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d16:	4810      	ldr	r0, [pc, #64]	@ (8001d58 <HAL_ADC_MspInit+0xf8>)
 8001d18:	f004 fce6 	bl	80066e8 <HAL_DMA_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d22:	f001 fb55 	bl	80033d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a0b      	ldr	r2, [pc, #44]	@ (8001d58 <HAL_ADC_MspInit+0xf8>)
 8001d2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <HAL_ADC_MspInit+0xf8>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2105      	movs	r1, #5
 8001d36:	2012      	movs	r0, #18
 8001d38:	f004 fc9f 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d3c:	2012      	movs	r0, #18
 8001d3e:	f004 fcb8 	bl	80066b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	@ 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40012000 	.word	0x40012000
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020800 	.word	0x40020800
 8001d58:	20000418 	.word	0x20000418
 8001d5c:	40026410 	.word	0x40026410

08001d60 <prepare_data>:
float uart_X, uart_Y, uart_Z;
char ip_config[20];

/* UART TX BEGIN */
/* UART TX BEGIN */
void prepare_data(void) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af02      	add	r7, sp, #8
    snprintf(transmitData.voltage_data, sizeof(transmitData.voltage_data), "%.2f", LCD_adc.voltage);
 8001d66:	4b1d      	ldr	r3, [pc, #116]	@ (8001ddc <prepare_data+0x7c>)
 8001d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fbfc 	bl	8000568 <__aeabi_f2d>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	e9cd 2300 	strd	r2, r3, [sp]
 8001d78:	4a19      	ldr	r2, [pc, #100]	@ (8001de0 <prepare_data+0x80>)
 8001d7a:	2114      	movs	r1, #20
 8001d7c:	4819      	ldr	r0, [pc, #100]	@ (8001de4 <prepare_data+0x84>)
 8001d7e:	f00e fccb 	bl	8010718 <sniprintf>
    snprintf(transmitData.current_data, sizeof(transmitData.current_data), "%.2f", LCD_adc.current);
 8001d82:	4b16      	ldr	r3, [pc, #88]	@ (8001ddc <prepare_data+0x7c>)
 8001d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbee 	bl	8000568 <__aeabi_f2d>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	e9cd 2300 	strd	r2, r3, [sp]
 8001d94:	4a12      	ldr	r2, [pc, #72]	@ (8001de0 <prepare_data+0x80>)
 8001d96:	2114      	movs	r1, #20
 8001d98:	4813      	ldr	r0, [pc, #76]	@ (8001de8 <prepare_data+0x88>)
 8001d9a:	f00e fcbd 	bl	8010718 <sniprintf>
    snprintf(transmitData.temperature_data, sizeof(transmitData.temperature_data), "%.2f", LCD_adc.temp);
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <prepare_data+0x7c>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fbe0 	bl	8000568 <__aeabi_f2d>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	e9cd 2300 	strd	r2, r3, [sp]
 8001db0:	4a0b      	ldr	r2, [pc, #44]	@ (8001de0 <prepare_data+0x80>)
 8001db2:	2114      	movs	r1, #20
 8001db4:	480d      	ldr	r0, [pc, #52]	@ (8001dec <prepare_data+0x8c>)
 8001db6:	f00e fcaf 	bl	8010718 <sniprintf>
    snprintf(transmitData.power_data, sizeof(transmitData.power_data), "%.2f", LCD_adc.power);
 8001dba:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <prepare_data+0x7c>)
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fbd2 	bl	8000568 <__aeabi_f2d>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	e9cd 2300 	strd	r2, r3, [sp]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <prepare_data+0x80>)
 8001dce:	2114      	movs	r1, #20
 8001dd0:	4807      	ldr	r0, [pc, #28]	@ (8001df0 <prepare_data+0x90>)
 8001dd2:	f00e fca1 	bl	8010718 <sniprintf>
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	200008bc 	.word	0x200008bc
 8001de0:	08015708 	.word	0x08015708
 8001de4:	2000047c 	.word	0x2000047c
 8001de8:	20000490 	.word	0x20000490
 8001dec:	200004a4 	.word	0x200004a4
 8001df0:	200004b8 	.word	0x200004b8

08001df4 <send_uart_data>:

void send_uart_data(void) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af04      	add	r7, sp, #16
    prepare_data();
 8001dfa:	f7ff ffb1 	bl	8001d60 <prepare_data>
    int len = snprintf((char *)buffer, sizeof(buffer),
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <send_uart_data+0x3c>)
 8001e00:	9302      	str	r3, [sp, #8]
 8001e02:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <send_uart_data+0x40>)
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <send_uart_data+0x44>)
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <send_uart_data+0x48>)
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e40 <send_uart_data+0x4c>)
 8001e0e:	2164      	movs	r1, #100	@ 0x64
 8001e10:	480c      	ldr	r0, [pc, #48]	@ (8001e44 <send_uart_data+0x50>)
 8001e12:	f00e fc81 	bl	8010718 <sniprintf>
 8001e16:	6078      	str	r0, [r7, #4]
                       "{\"voltage\":%s,\"current\":%s,\"temperature\":%s,\"power\":%s}\n",
                       transmitData.voltage_data,
                       transmitData.current_data,
                       transmitData.temperature_data,
                       transmitData.power_data);
    HAL_UART_Transmit_IT(&huart2, (uint8_t *)buffer, len);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4909      	ldr	r1, [pc, #36]	@ (8001e44 <send_uart_data+0x50>)
 8001e20:	4809      	ldr	r0, [pc, #36]	@ (8001e48 <send_uart_data+0x54>)
 8001e22:	f008 fd9d 	bl	800a960 <HAL_UART_Transmit_IT>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200004b8 	.word	0x200004b8
 8001e34:	200004a4 	.word	0x200004a4
 8001e38:	20000490 	.word	0x20000490
 8001e3c:	2000047c 	.word	0x2000047c
 8001e40:	08015710 	.word	0x08015710
 8001e44:	200004cc 	.word	0x200004cc
 8001e48:	20000be4 	.word	0x20000be4

08001e4c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
        // Do nothing, the timer will call send_uart_data to send data
    }
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <UART_transmit_init>:

void UART_transmit_init(void) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
    send_uart_data();
 8001e64:	f7ff ffc6 	bl	8001df4 <send_uart_data>
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <UART_RECEIVE_Init>:

/* UART TX END */

/* UART RX BEGIN */
void UART_RECEIVE_Init(void) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
    HAL_UART_Receive_DMA(&huart2, rxBuffer, 1);  // Nhận từng byte một
 8001e70:	2201      	movs	r2, #1
 8001e72:	4903      	ldr	r1, [pc, #12]	@ (8001e80 <UART_RECEIVE_Init+0x14>)
 8001e74:	4803      	ldr	r0, [pc, #12]	@ (8001e84 <UART_RECEIVE_Init+0x18>)
 8001e76:	f008 fe19 	bl	800aaac <HAL_UART_Receive_DMA>
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000530 	.word	0x20000530
 8001e84:	20000be4 	.word	0x20000be4

08001e88 <start_command>:

void start_command(void) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	handle_start_button_press();
 8001e8c:	f002 fea6 	bl	8004bdc <handle_start_button_press>
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <stop_command>:

void stop_command(void) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	handle_stop_button_press();
 8001e98:	f002 febc 	bl	8004c14 <handle_stop_button_press>
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <reset_command>:

void reset_command(void) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	handle_reset_button_press();
 8001ea4:	f002 fe8a 	bl	8004bbc <handle_reset_button_press>
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <drill_on_command>:

void drill_on_command(void) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(drill_port, drill_pin, GPIO_PIN_SET);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eb6:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <drill_on_command+0x14>)
 8001eb8:	f005 f9da 	bl	8007270 <HAL_GPIO_WritePin>
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40020400 	.word	0x40020400

08001ec4 <drill_off_command>:

void drill_off_command(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(drill_port, drill_pin, GPIO_PIN_RESET);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ece:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <drill_off_command+0x14>)
 8001ed0:	f005 f9ce 	bl	8007270 <HAL_GPIO_WritePin>
}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40020400 	.word	0x40020400
 8001edc:	00000000 	.word	0x00000000

08001ee0 <low_command>:

void low_command(void) {
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 50000;
 8001ee4:	491e      	ldr	r1, [pc, #120]	@ (8001f60 <low_command+0x80>)
 8001ee6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001f50 <low_command+0x70>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    CNC_pos.max_speedZ = 50000;
 8001ef0:	491b      	ldr	r1, [pc, #108]	@ (8001f60 <low_command+0x80>)
 8001ef2:	a317      	add	r3, pc, #92	@ (adr r3, 8001f50 <low_command+0x70>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    CNC_pos.a_maxX = 5000;
 8001efc:	4918      	ldr	r1, [pc, #96]	@ (8001f60 <low_command+0x80>)
 8001efe:	a316      	add	r3, pc, #88	@ (adr r3, 8001f58 <low_command+0x78>)
 8001f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f04:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    CNC_pos.j_maxX = 5000;
 8001f08:	4915      	ldr	r1, [pc, #84]	@ (8001f60 <low_command+0x80>)
 8001f0a:	a313      	add	r3, pc, #76	@ (adr r3, 8001f58 <low_command+0x78>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    CNC_pos.a_maxY = 5000;
 8001f14:	4912      	ldr	r1, [pc, #72]	@ (8001f60 <low_command+0x80>)
 8001f16:	a310      	add	r3, pc, #64	@ (adr r3, 8001f58 <low_command+0x78>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    CNC_pos.j_maxY = 5000;
 8001f20:	490f      	ldr	r1, [pc, #60]	@ (8001f60 <low_command+0x80>)
 8001f22:	a30d      	add	r3, pc, #52	@ (adr r3, 8001f58 <low_command+0x78>)
 8001f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f28:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    CNC_pos.a_maxZ = 2000;
 8001f2c:	490c      	ldr	r1, [pc, #48]	@ (8001f60 <low_command+0x80>)
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <low_command+0x84>)
 8001f34:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    CNC_pos.j_maxZ = 1000;
 8001f38:	4909      	ldr	r1, [pc, #36]	@ (8001f60 <low_command+0x80>)
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <low_command+0x88>)
 8001f40:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	00000000 	.word	0x00000000
 8001f54:	40e86a00 	.word	0x40e86a00
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	40b38800 	.word	0x40b38800
 8001f60:	20000778 	.word	0x20000778
 8001f64:	409f4000 	.word	0x409f4000
 8001f68:	408f4000 	.word	0x408f4000
 8001f6c:	00000000 	.word	0x00000000

08001f70 <medium_command>:

void medium_command(void) {
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 100000;
 8001f74:	4922      	ldr	r1, [pc, #136]	@ (8002000 <medium_command+0x90>)
 8001f76:	a31a      	add	r3, pc, #104	@ (adr r3, 8001fe0 <medium_command+0x70>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    CNC_pos.max_speedZ = 100000;
 8001f80:	491f      	ldr	r1, [pc, #124]	@ (8002000 <medium_command+0x90>)
 8001f82:	a317      	add	r3, pc, #92	@ (adr r3, 8001fe0 <medium_command+0x70>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    CNC_pos.a_maxX = 10000;
 8001f8c:	491c      	ldr	r1, [pc, #112]	@ (8002000 <medium_command+0x90>)
 8001f8e:	a316      	add	r3, pc, #88	@ (adr r3, 8001fe8 <medium_command+0x78>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    CNC_pos.j_maxX = 7000;
 8001f98:	4919      	ldr	r1, [pc, #100]	@ (8002000 <medium_command+0x90>)
 8001f9a:	a315      	add	r3, pc, #84	@ (adr r3, 8001ff0 <medium_command+0x80>)
 8001f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa0:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    CNC_pos.a_maxY = 10000;
 8001fa4:	4916      	ldr	r1, [pc, #88]	@ (8002000 <medium_command+0x90>)
 8001fa6:	a310      	add	r3, pc, #64	@ (adr r3, 8001fe8 <medium_command+0x78>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    CNC_pos.j_maxY = 7000;
 8001fb0:	4913      	ldr	r1, [pc, #76]	@ (8002000 <medium_command+0x90>)
 8001fb2:	a30f      	add	r3, pc, #60	@ (adr r3, 8001ff0 <medium_command+0x80>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    CNC_pos.a_maxZ = 5000;
 8001fbc:	4910      	ldr	r1, [pc, #64]	@ (8002000 <medium_command+0x90>)
 8001fbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8001ff8 <medium_command+0x88>)
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    CNC_pos.j_maxZ = 2000;
 8001fc8:	490d      	ldr	r1, [pc, #52]	@ (8002000 <medium_command+0x90>)
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <medium_command+0x94>)
 8001fd0:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	00000000 	.word	0x00000000
 8001fe4:	40f86a00 	.word	0x40f86a00
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	40c38800 	.word	0x40c38800
 8001ff0:	00000000 	.word	0x00000000
 8001ff4:	40bb5800 	.word	0x40bb5800
 8001ff8:	00000000 	.word	0x00000000
 8001ffc:	40b38800 	.word	0x40b38800
 8002000:	20000778 	.word	0x20000778
 8002004:	409f4000 	.word	0x409f4000

08002008 <high_command>:

void high_command(void) {
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 150000;
 800200c:	4922      	ldr	r1, [pc, #136]	@ (8002098 <high_command+0x90>)
 800200e:	a31a      	add	r3, pc, #104	@ (adr r3, 8002078 <high_command+0x70>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    CNC_pos.max_speedZ = 150000;
 8002018:	491f      	ldr	r1, [pc, #124]	@ (8002098 <high_command+0x90>)
 800201a:	a317      	add	r3, pc, #92	@ (adr r3, 8002078 <high_command+0x70>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    CNC_pos.a_maxX = 100000;
 8002024:	491c      	ldr	r1, [pc, #112]	@ (8002098 <high_command+0x90>)
 8002026:	a316      	add	r3, pc, #88	@ (adr r3, 8002080 <high_command+0x78>)
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    CNC_pos.j_maxX = 10000;
 8002030:	4919      	ldr	r1, [pc, #100]	@ (8002098 <high_command+0x90>)
 8002032:	a315      	add	r3, pc, #84	@ (adr r3, 8002088 <high_command+0x80>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    CNC_pos.a_maxY = 100000;
 800203c:	4916      	ldr	r1, [pc, #88]	@ (8002098 <high_command+0x90>)
 800203e:	a310      	add	r3, pc, #64	@ (adr r3, 8002080 <high_command+0x78>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    CNC_pos.j_maxY = 10000;
 8002048:	4913      	ldr	r1, [pc, #76]	@ (8002098 <high_command+0x90>)
 800204a:	a30f      	add	r3, pc, #60	@ (adr r3, 8002088 <high_command+0x80>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    CNC_pos.a_maxZ = 10000;
 8002054:	4910      	ldr	r1, [pc, #64]	@ (8002098 <high_command+0x90>)
 8002056:	a30c      	add	r3, pc, #48	@ (adr r3, 8002088 <high_command+0x80>)
 8002058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205c:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    CNC_pos.j_maxZ = 6000;
 8002060:	490d      	ldr	r1, [pc, #52]	@ (8002098 <high_command+0x90>)
 8002062:	a30b      	add	r3, pc, #44	@ (adr r3, 8002090 <high_command+0x88>)
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	00000000 	.word	0x00000000
 800207c:	41024f80 	.word	0x41024f80
 8002080:	00000000 	.word	0x00000000
 8002084:	40f86a00 	.word	0x40f86a00
 8002088:	00000000 	.word	0x00000000
 800208c:	40c38800 	.word	0x40c38800
 8002090:	00000000 	.word	0x00000000
 8002094:	40b77000 	.word	0x40b77000
 8002098:	20000778 	.word	0x20000778

0800209c <add_coordinate>:

void add_coordinate(float x, float y, float z) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80020a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80020aa:	ed87 1a01 	vstr	s2, [r7, #4]
    CoordinateNode *newNode = (CoordinateNode*)malloc(sizeof(CoordinateNode));
 80020ae:	2010      	movs	r0, #16
 80020b0:	f00d fb04 	bl	800f6bc <malloc>
 80020b4:	4603      	mov	r3, r0
 80020b6:	613b      	str	r3, [r7, #16]
    newNode->x = x;
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	601a      	str	r2, [r3, #0]
    newNode->y = y;
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	605a      	str	r2, [r3, #4]
    newNode->z = z;
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	609a      	str	r2, [r3, #8]
    newNode->next = NULL;
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]

    if (head == NULL) {
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <add_coordinate+0x68>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d103      	bne.n	80020e0 <add_coordinate+0x44>
        head = newNode;
 80020d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <add_coordinate+0x68>)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	6013      	str	r3, [r2, #0]
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}
 80020de:	e00d      	b.n	80020fc <add_coordinate+0x60>
        CoordinateNode *current = head;
 80020e0:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <add_coordinate+0x68>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	617b      	str	r3, [r7, #20]
        while (current->next != NULL) {
 80020e6:	e002      	b.n	80020ee <add_coordinate+0x52>
            current = current->next;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	617b      	str	r3, [r7, #20]
        while (current->next != NULL) {
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f8      	bne.n	80020e8 <add_coordinate+0x4c>
        current->next = newNode;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	60da      	str	r2, [r3, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000478 	.word	0x20000478

08002108 <clear_coordinates>:

void clear_coordinates(void) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
    CoordinateNode *current = head;
 800210e:	4b0b      	ldr	r3, [pc, #44]	@ (800213c <clear_coordinates+0x34>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	607b      	str	r3, [r7, #4]
    CoordinateNode *next;

    while (current != NULL) {
 8002114:	e007      	b.n	8002126 <clear_coordinates+0x1e>
        next = current->next;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	603b      	str	r3, [r7, #0]
        free(current);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f00d fad5 	bl	800f6cc <free>
        current = next;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	607b      	str	r3, [r7, #4]
    while (current != NULL) {
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f4      	bne.n	8002116 <clear_coordinates+0xe>
    }

    head = NULL;
 800212c:	4b03      	ldr	r3, [pc, #12]	@ (800213c <clear_coordinates+0x34>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000478 	.word	0x20000478

08002140 <move_to_coordinates>:

void move_to_coordinates(void) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
    CoordinateNode *current = head;
 8002146:	4b17      	ldr	r3, [pc, #92]	@ (80021a4 <move_to_coordinates+0x64>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	607b      	str	r3, [r7, #4]

    while (current != NULL) {
 800214c:	e021      	b.n	8002192 <move_to_coordinates+0x52>
        uart_X = current->x;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a15      	ldr	r2, [pc, #84]	@ (80021a8 <move_to_coordinates+0x68>)
 8002154:	6013      	str	r3, [r2, #0]
        uart_Y = current->y;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4a14      	ldr	r2, [pc, #80]	@ (80021ac <move_to_coordinates+0x6c>)
 800215c:	6013      	str	r3, [r2, #0]
        uart_Z = current->z;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4a13      	ldr	r2, [pc, #76]	@ (80021b0 <move_to_coordinates+0x70>)
 8002164:	6013      	str	r3, [r2, #0]
        MoveToPosXY(uart_X, uart_Y);
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <move_to_coordinates+0x68>)
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	4b0f      	ldr	r3, [pc, #60]	@ (80021ac <move_to_coordinates+0x6c>)
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	eef0 0a47 	vmov.f32	s1, s14
 8002176:	eeb0 0a67 	vmov.f32	s0, s15
 800217a:	f000 fa05 	bl	8002588 <MoveToPosXY>
        MoveToPosZ(uart_Z);
 800217e:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <move_to_coordinates+0x70>)
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	eeb0 0a67 	vmov.f32	s0, s15
 8002188:	f000 fbc2 	bl	8002910 <MoveToPosZ>
        current = current->next;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	607b      	str	r3, [r7, #4]
    while (current != NULL) {
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1da      	bne.n	800214e <move_to_coordinates+0xe>
    }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000478 	.word	0x20000478
 80021a8:	20000734 	.word	0x20000734
 80021ac:	20000738 	.word	0x20000738
 80021b0:	2000073c 	.word	0x2000073c

080021b4 <process_goto_command>:

void process_goto_command(char *cmd) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	6078      	str	r0, [r7, #4]
    char *line = strtok(cmd, "GOTO");
 80021bc:	491c      	ldr	r1, [pc, #112]	@ (8002230 <process_goto_command+0x7c>)
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f00e fbaa 	bl	8010918 <strtok>
 80021c4:	6178      	str	r0, [r7, #20]
    clear_coordinates(); // Xóa danh sách tọa độ hiện tại
 80021c6:	f7ff ff9f 	bl	8002108 <clear_coordinates>

    while (line != NULL) {
 80021ca:	e021      	b.n	8002210 <process_goto_command+0x5c>
        float x, y, z;
        if (sscanf(line, "%f,%f,%f", &x, &y, &z) == 3) {
 80021cc:	f107 010c 	add.w	r1, r7, #12
 80021d0:	f107 0210 	add.w	r2, r7, #16
 80021d4:	f107 0308 	add.w	r3, r7, #8
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	460b      	mov	r3, r1
 80021dc:	4915      	ldr	r1, [pc, #84]	@ (8002234 <process_goto_command+0x80>)
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f00e faee 	bl	80107c0 <siscanf>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d10d      	bne.n	8002206 <process_goto_command+0x52>
            add_coordinate(x, y, z);
 80021ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80021ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80021f2:	edd7 6a02 	vldr	s13, [r7, #8]
 80021f6:	eeb0 1a66 	vmov.f32	s2, s13
 80021fa:	eef0 0a47 	vmov.f32	s1, s14
 80021fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002202:	f7ff ff4b 	bl	800209c <add_coordinate>
        }
        line = strtok(NULL, "GOTO");
 8002206:	490a      	ldr	r1, [pc, #40]	@ (8002230 <process_goto_command+0x7c>)
 8002208:	2000      	movs	r0, #0
 800220a:	f00e fb85 	bl	8010918 <strtok>
 800220e:	6178      	str	r0, [r7, #20]
    while (line != NULL) {
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1da      	bne.n	80021cc <process_goto_command+0x18>
    }

    state.start_press = 1; // Đặt cờ để bắt đầu di chuyển đến tọa độ
 8002216:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <process_goto_command+0x84>)
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
    state.stop_press = 0;
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <process_goto_command+0x84>)
 800221e:	2200      	movs	r2, #0
 8002220:	705a      	strb	r2, [r3, #1]
    state.reset_press = 0;
 8002222:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <process_goto_command+0x84>)
 8002224:	2200      	movs	r2, #0
 8002226:	709a      	strb	r2, [r3, #2]
}
 8002228:	bf00      	nop
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	0801574c 	.word	0x0801574c
 8002234:	08015754 	.word	0x08015754
 8002238:	20000a28 	.word	0x20000a28

0800223c <UART_rx_process>:

void UART_rx_process(void) {
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
    if (cmdstate) {
 8002240:	4b33      	ldr	r3, [pc, #204]	@ (8002310 <UART_rx_process+0xd4>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d061      	beq.n	800230c <UART_rx_process+0xd0>
        cmdstate = 0;
 8002248:	4b31      	ldr	r3, [pc, #196]	@ (8002310 <UART_rx_process+0xd4>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]

        if (strcmp(cmd, "START") == 0) {
 800224e:	4931      	ldr	r1, [pc, #196]	@ (8002314 <UART_rx_process+0xd8>)
 8002250:	4831      	ldr	r0, [pc, #196]	@ (8002318 <UART_rx_process+0xdc>)
 8002252:	f7fd ffbd 	bl	80001d0 <strcmp>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <UART_rx_process+0x26>
            start_command();
 800225c:	f7ff fe14 	bl	8001e88 <start_command>
            process_goto_command(cmd);
        } else {
        	process_ip_address(cmd);
        }
    }
}
 8002260:	e054      	b.n	800230c <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "STOP") == 0) {
 8002262:	492e      	ldr	r1, [pc, #184]	@ (800231c <UART_rx_process+0xe0>)
 8002264:	482c      	ldr	r0, [pc, #176]	@ (8002318 <UART_rx_process+0xdc>)
 8002266:	f7fd ffb3 	bl	80001d0 <strcmp>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <UART_rx_process+0x3a>
            stop_command();
 8002270:	f7ff fe10 	bl	8001e94 <stop_command>
}
 8002274:	e04a      	b.n	800230c <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "RESET") == 0) {
 8002276:	492a      	ldr	r1, [pc, #168]	@ (8002320 <UART_rx_process+0xe4>)
 8002278:	4827      	ldr	r0, [pc, #156]	@ (8002318 <UART_rx_process+0xdc>)
 800227a:	f7fd ffa9 	bl	80001d0 <strcmp>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <UART_rx_process+0x4e>
            reset_command();
 8002284:	f7ff fe0c 	bl	8001ea0 <reset_command>
}
 8002288:	e040      	b.n	800230c <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "ON") == 0) {
 800228a:	4926      	ldr	r1, [pc, #152]	@ (8002324 <UART_rx_process+0xe8>)
 800228c:	4822      	ldr	r0, [pc, #136]	@ (8002318 <UART_rx_process+0xdc>)
 800228e:	f7fd ff9f 	bl	80001d0 <strcmp>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <UART_rx_process+0x62>
            drill_on_command();
 8002298:	f7ff fe08 	bl	8001eac <drill_on_command>
}
 800229c:	e036      	b.n	800230c <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "OFF") == 0) {
 800229e:	4922      	ldr	r1, [pc, #136]	@ (8002328 <UART_rx_process+0xec>)
 80022a0:	481d      	ldr	r0, [pc, #116]	@ (8002318 <UART_rx_process+0xdc>)
 80022a2:	f7fd ff95 	bl	80001d0 <strcmp>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d102      	bne.n	80022b2 <UART_rx_process+0x76>
            drill_off_command();
 80022ac:	f7ff fe0a 	bl	8001ec4 <drill_off_command>
}
 80022b0:	e02c      	b.n	800230c <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "LOW") == 0) {
 80022b2:	491e      	ldr	r1, [pc, #120]	@ (800232c <UART_rx_process+0xf0>)
 80022b4:	4818      	ldr	r0, [pc, #96]	@ (8002318 <UART_rx_process+0xdc>)
 80022b6:	f7fd ff8b 	bl	80001d0 <strcmp>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <UART_rx_process+0x8a>
            low_command();
 80022c0:	f7ff fe0e 	bl	8001ee0 <low_command>
}
 80022c4:	e022      	b.n	800230c <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "MEDIUM") == 0) {
 80022c6:	491a      	ldr	r1, [pc, #104]	@ (8002330 <UART_rx_process+0xf4>)
 80022c8:	4813      	ldr	r0, [pc, #76]	@ (8002318 <UART_rx_process+0xdc>)
 80022ca:	f7fd ff81 	bl	80001d0 <strcmp>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <UART_rx_process+0x9e>
            medium_command();
 80022d4:	f7ff fe4c 	bl	8001f70 <medium_command>
}
 80022d8:	e018      	b.n	800230c <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "HIGH") == 0) {
 80022da:	4916      	ldr	r1, [pc, #88]	@ (8002334 <UART_rx_process+0xf8>)
 80022dc:	480e      	ldr	r0, [pc, #56]	@ (8002318 <UART_rx_process+0xdc>)
 80022de:	f7fd ff77 	bl	80001d0 <strcmp>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d102      	bne.n	80022ee <UART_rx_process+0xb2>
            high_command();
 80022e8:	f7ff fe8e 	bl	8002008 <high_command>
}
 80022ec:	e00e      	b.n	800230c <UART_rx_process+0xd0>
        } else if (strncmp(cmd, "GOTO", 4) == 0) {
 80022ee:	2204      	movs	r2, #4
 80022f0:	4911      	ldr	r1, [pc, #68]	@ (8002338 <UART_rx_process+0xfc>)
 80022f2:	4809      	ldr	r0, [pc, #36]	@ (8002318 <UART_rx_process+0xdc>)
 80022f4:	f00e faea 	bl	80108cc <strncmp>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <UART_rx_process+0xca>
            process_goto_command(cmd);
 80022fe:	4806      	ldr	r0, [pc, #24]	@ (8002318 <UART_rx_process+0xdc>)
 8002300:	f7ff ff58 	bl	80021b4 <process_goto_command>
}
 8002304:	e002      	b.n	800230c <UART_rx_process+0xd0>
        	process_ip_address(cmd);
 8002306:	4804      	ldr	r0, [pc, #16]	@ (8002318 <UART_rx_process+0xdc>)
 8002308:	f000 f818 	bl	800233c <process_ip_address>
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000730 	.word	0x20000730
 8002314:	08015760 	.word	0x08015760
 8002318:	20000630 	.word	0x20000630
 800231c:	08015768 	.word	0x08015768
 8002320:	08015770 	.word	0x08015770
 8002324:	08015778 	.word	0x08015778
 8002328:	0801577c 	.word	0x0801577c
 800232c:	08015780 	.word	0x08015780
 8002330:	08015784 	.word	0x08015784
 8002334:	0801578c 	.word	0x0801578c
 8002338:	0801574c 	.word	0x0801574c

0800233c <process_ip_address>:

void process_ip_address(char *ip_address) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
    // Store the received IP address
    strncpy(ip_config, ip_address, sizeof(ip_config) - 1);
 8002344:	2213      	movs	r2, #19
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4804      	ldr	r0, [pc, #16]	@ (800235c <process_ip_address+0x20>)
 800234a:	f00e fad1 	bl	80108f0 <strncpy>
    ip_config[sizeof(ip_config) - 1] = '\0';  // Ensure null termination
 800234e:	4b03      	ldr	r3, [pc, #12]	@ (800235c <process_ip_address+0x20>)
 8002350:	2200      	movs	r2, #0
 8002352:	74da      	strb	r2, [r3, #19]
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000740 	.word	0x20000740

08002360 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
    static uint8_t index = 0;

    if (huart->Instance == USART2) {
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1e      	ldr	r2, [pc, #120]	@ (80023e8 <HAL_UART_RxCpltCallback+0x88>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d135      	bne.n	80023de <HAL_UART_RxCpltCallback+0x7e>
        if (rxBuffer[0] != '\r' && rxBuffer[0] != '\n') {
 8002372:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <HAL_UART_RxCpltCallback+0x8c>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b0d      	cmp	r3, #13
 8002378:	d013      	beq.n	80023a2 <HAL_UART_RxCpltCallback+0x42>
 800237a:	4b1c      	ldr	r3, [pc, #112]	@ (80023ec <HAL_UART_RxCpltCallback+0x8c>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b0a      	cmp	r3, #10
 8002380:	d00f      	beq.n	80023a2 <HAL_UART_RxCpltCallback+0x42>
            if (index < sizeof(cmd) - 1) {
 8002382:	4b1b      	ldr	r3, [pc, #108]	@ (80023f0 <HAL_UART_RxCpltCallback+0x90>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2bff      	cmp	r3, #255	@ 0xff
 8002388:	d024      	beq.n	80023d4 <HAL_UART_RxCpltCallback+0x74>
                cmd[index++] = rxBuffer[0];
 800238a:	4b19      	ldr	r3, [pc, #100]	@ (80023f0 <HAL_UART_RxCpltCallback+0x90>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	b2d1      	uxtb	r1, r2
 8002392:	4a17      	ldr	r2, [pc, #92]	@ (80023f0 <HAL_UART_RxCpltCallback+0x90>)
 8002394:	7011      	strb	r1, [r2, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	4b14      	ldr	r3, [pc, #80]	@ (80023ec <HAL_UART_RxCpltCallback+0x8c>)
 800239a:	7819      	ldrb	r1, [r3, #0]
 800239c:	4b15      	ldr	r3, [pc, #84]	@ (80023f4 <HAL_UART_RxCpltCallback+0x94>)
 800239e:	5499      	strb	r1, [r3, r2]
            if (index < sizeof(cmd) - 1) {
 80023a0:	e018      	b.n	80023d4 <HAL_UART_RxCpltCallback+0x74>
            }
        } else if (rxBuffer[0] == '\r') {
 80023a2:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <HAL_UART_RxCpltCallback+0x8c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b0d      	cmp	r3, #13
 80023a8:	d114      	bne.n	80023d4 <HAL_UART_RxCpltCallback+0x74>
            if (index > 0) {
 80023aa:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <HAL_UART_RxCpltCallback+0x90>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d010      	beq.n	80023d4 <HAL_UART_RxCpltCallback+0x74>
                cmd[index] = '\0';
 80023b2:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <HAL_UART_RxCpltCallback+0x90>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	4b0e      	ldr	r3, [pc, #56]	@ (80023f4 <HAL_UART_RxCpltCallback+0x94>)
 80023ba:	2100      	movs	r1, #0
 80023bc:	5499      	strb	r1, [r3, r2]
                index = 0;
 80023be:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <HAL_UART_RxCpltCallback+0x90>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
                cmdstate = 1;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <HAL_UART_RxCpltCallback+0x98>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
                osSemaphoreRelease(uartRxSemaphoreHandle);
 80023ca:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <HAL_UART_RxCpltCallback+0x9c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f009 ff90 	bl	800c2f4 <osSemaphoreRelease>
            }
        }
        HAL_UART_Receive_DMA(&huart2, rxBuffer, 1);
 80023d4:	2201      	movs	r2, #1
 80023d6:	4905      	ldr	r1, [pc, #20]	@ (80023ec <HAL_UART_RxCpltCallback+0x8c>)
 80023d8:	4809      	ldr	r0, [pc, #36]	@ (8002400 <HAL_UART_RxCpltCallback+0xa0>)
 80023da:	f008 fb67 	bl	800aaac <HAL_UART_Receive_DMA>
    }
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40004400 	.word	0x40004400
 80023ec:	20000530 	.word	0x20000530
 80023f0:	20000754 	.word	0x20000754
 80023f4:	20000630 	.word	0x20000630
 80023f8:	20000730 	.word	0x20000730
 80023fc:	2000075c 	.word	0x2000075c
 8002400:	20000be4 	.word	0x20000be4

08002404 <max3>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
/*----------------------------------*/
/* Config speed for stepper */
double_t max3(double_t a, double_t b, double_t c) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	ed87 0b04 	vstr	d0, [r7, #16]
 800240e:	ed87 1b02 	vstr	d1, [r7, #8]
 8002412:	ed87 2b00 	vstr	d2, [r7]
	double_t n1 = max(a, b);
 8002416:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800241a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800241e:	f7fe fb8b 	bl	8000b38 <__aeabi_dcmpgt>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <max3+0x2a>
 8002428:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800242c:	e001      	b.n	8002432 <max3+0x2e>
 800242e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002432:	e9c7 2306 	strd	r2, r3, [r7, #24]
    return max(n1, c);
 8002436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800243a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800243e:	f7fe fb7b 	bl	8000b38 <__aeabi_dcmpgt>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <max3+0x4a>
 8002448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800244c:	e001      	b.n	8002452 <max3+0x4e>
 800244e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002452:	ec43 2b17 	vmov	d7, r2, r3
}
 8002456:	eeb0 0a47 	vmov.f32	s0, s14
 800245a:	eef0 0a67 	vmov.f32	s1, s15
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <DelayUs_step>:
/* Function set home */
void DelayUs_step(uint32_t us)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim1);
 800246c:	480a      	ldr	r0, [pc, #40]	@ (8002498 <DelayUs_step+0x34>)
 800246e:	f007 fdd3 	bl	800a018 <HAL_TIM_Base_Start_IT>
	//(&htim7)->Instance->CNT = (0);
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002472:	4b09      	ldr	r3, [pc, #36]	@ (8002498 <DelayUs_step+0x34>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2200      	movs	r2, #0
 8002478:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 800247a:	bf00      	nop
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <DelayUs_step+0x34>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	d8f9      	bhi.n	800247c <DelayUs_step+0x18>
	HAL_TIM_Base_Stop_IT(&htim1);
 8002488:	4803      	ldr	r0, [pc, #12]	@ (8002498 <DelayUs_step+0x34>)
 800248a:	f007 fe35 	bl	800a0f8 <HAL_TIM_Base_Stop_IT>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000a34 	.word	0x20000a34

0800249c <HOME>:

void HOME(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
    // Home Z axis
    HAL_GPIO_WritePin(dir_3_GPIO_Port, dir_3_pin, GPIO_PIN_RESET); // Set direction to move towards home
 80024a2:	2200      	movs	r2, #0
 80024a4:	2120      	movs	r1, #32
 80024a6:	4833      	ldr	r0, [pc, #204]	@ (8002574 <HOME+0xd8>)
 80024a8:	f004 fee2 	bl	8007270 <HAL_GPIO_WritePin>
    while (HAL_GPIO_ReadPin(moveZsub_port, moveZsub_pin) != CNC_pos.Lsw6) {
 80024ac:	e006      	b.n	80024bc <HOME+0x20>
        HAL_GPIO_TogglePin(step_3_GPIO_Port, step_3_pin); // Toggle step pin to move towards home
 80024ae:	2110      	movs	r1, #16
 80024b0:	4830      	ldr	r0, [pc, #192]	@ (8002574 <HOME+0xd8>)
 80024b2:	f004 fef6 	bl	80072a2 <HAL_GPIO_TogglePin>
        DelayUs_step(30); // Adjust delay as needed
 80024b6:	201e      	movs	r0, #30
 80024b8:	f7ff ffd4 	bl	8002464 <DelayUs_step>
    while (HAL_GPIO_ReadPin(moveZsub_port, moveZsub_pin) != CNC_pos.Lsw6) {
 80024bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024c0:	482d      	ldr	r0, [pc, #180]	@ (8002578 <HOME+0xdc>)
 80024c2:	f004 febd 	bl	8007240 <HAL_GPIO_ReadPin>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b2c      	ldr	r3, [pc, #176]	@ (800257c <HOME+0xe0>)
 80024cc:	795b      	ldrb	r3, [r3, #5]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d1ed      	bne.n	80024ae <HOME+0x12>
    }
    // Home X axis
    HAL_GPIO_WritePin(dir_1_GPIO_Port, dir_1_pin, GPIO_PIN_RESET); // Set direction to move towards home
 80024d2:	2200      	movs	r2, #0
 80024d4:	2102      	movs	r1, #2
 80024d6:	4827      	ldr	r0, [pc, #156]	@ (8002574 <HOME+0xd8>)
 80024d8:	f004 feca 	bl	8007270 <HAL_GPIO_WritePin>
    bool isXHome = false;
 80024dc:	2300      	movs	r3, #0
 80024de:	71fb      	strb	r3, [r7, #7]

    // Home Y axis
    HAL_GPIO_WritePin(dir_2_GPIO_Port, dir_2_pin, GPIO_PIN_RESET); // Set direction to move towards home
 80024e0:	2200      	movs	r2, #0
 80024e2:	2108      	movs	r1, #8
 80024e4:	4823      	ldr	r0, [pc, #140]	@ (8002574 <HOME+0xd8>)
 80024e6:	f004 fec3 	bl	8007270 <HAL_GPIO_WritePin>
    bool isYHome = false;
 80024ea:	2300      	movs	r3, #0
 80024ec:	71bb      	strb	r3, [r7, #6]

    while (!(isXHome && isYHome)) {
 80024ee:	e030      	b.n	8002552 <HOME+0xb6>
        if (!isXHome && (HAL_GPIO_ReadPin(moveXsub_port, moveXsub_pin) != CNC_pos.Lsw2)) {
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	f083 0301 	eor.w	r3, r3, #1
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00e      	beq.n	800251a <HOME+0x7e>
 80024fc:	2101      	movs	r1, #1
 80024fe:	4820      	ldr	r0, [pc, #128]	@ (8002580 <HOME+0xe4>)
 8002500:	f004 fe9e 	bl	8007240 <HAL_GPIO_ReadPin>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <HOME+0xe0>)
 800250a:	785b      	ldrb	r3, [r3, #1]
 800250c:	429a      	cmp	r2, r3
 800250e:	d004      	beq.n	800251a <HOME+0x7e>
            HAL_GPIO_TogglePin(step_1_GPIO_Port, step_1_pin); // Toggle step pin to move towards home
 8002510:	2101      	movs	r1, #1
 8002512:	4818      	ldr	r0, [pc, #96]	@ (8002574 <HOME+0xd8>)
 8002514:	f004 fec5 	bl	80072a2 <HAL_GPIO_TogglePin>
 8002518:	e001      	b.n	800251e <HOME+0x82>
        } else {
            isXHome = true;
 800251a:	2301      	movs	r3, #1
 800251c:	71fb      	strb	r3, [r7, #7]
        }

        if (!isYHome && (HAL_GPIO_ReadPin(moveYsub_port, moveYsub_pin) != CNC_pos.Lsw4)) {
 800251e:	79bb      	ldrb	r3, [r7, #6]
 8002520:	f083 0301 	eor.w	r3, r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00e      	beq.n	8002548 <HOME+0xac>
 800252a:	2102      	movs	r1, #2
 800252c:	4814      	ldr	r0, [pc, #80]	@ (8002580 <HOME+0xe4>)
 800252e:	f004 fe87 	bl	8007240 <HAL_GPIO_ReadPin>
 8002532:	4603      	mov	r3, r0
 8002534:	461a      	mov	r2, r3
 8002536:	4b11      	ldr	r3, [pc, #68]	@ (800257c <HOME+0xe0>)
 8002538:	78db      	ldrb	r3, [r3, #3]
 800253a:	429a      	cmp	r2, r3
 800253c:	d004      	beq.n	8002548 <HOME+0xac>
            HAL_GPIO_TogglePin(step_2_GPIO_Port, step_2_pin); // Toggle step pin to move towards home
 800253e:	2104      	movs	r1, #4
 8002540:	480c      	ldr	r0, [pc, #48]	@ (8002574 <HOME+0xd8>)
 8002542:	f004 feae 	bl	80072a2 <HAL_GPIO_TogglePin>
 8002546:	e001      	b.n	800254c <HOME+0xb0>
        } else {
            isYHome = true;
 8002548:	2301      	movs	r3, #1
 800254a:	71bb      	strb	r3, [r7, #6]
        }
        DelayUs_step(30); // Adjust delay as needed
 800254c:	201e      	movs	r0, #30
 800254e:	f7ff ff89 	bl	8002464 <DelayUs_step>
    while (!(isXHome && isYHome)) {
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	f083 0301 	eor.w	r3, r3, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1c8      	bne.n	80024f0 <HOME+0x54>
 800255e:	79bb      	ldrb	r3, [r7, #6]
 8002560:	f083 0301 	eor.w	r3, r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1c2      	bne.n	80024f0 <HOME+0x54>
    }
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40020000 	.word	0x40020000
 8002578:	40021000 	.word	0x40021000
 800257c:	20000778 	.word	0x20000778
 8002580:	40020400 	.word	0x40020400
 8002584:	00000000 	.word	0x00000000

08002588 <MoveToPosXY>:
/* Function control 3 axis */
//Move X-Y
void MoveToPosXY(float x, float y) {
 8002588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800258c:	ed2d 8b02 	vpush	{d8}
 8002590:	b092      	sub	sp, #72	@ 0x48
 8002592:	af06      	add	r7, sp, #24
 8002594:	ed87 0a05 	vstr	s0, [r7, #20]
 8002598:	edc7 0a04 	vstr	s1, [r7, #16]
    trans_to_posXY(x,y);
 800259c:	edd7 0a04 	vldr	s1, [r7, #16]
 80025a0:	ed97 0a05 	vldr	s0, [r7, #20]
 80025a4:	f7ff fa60 	bl	8001a68 <trans_to_posXY>
    CNC_pos.MoveX = caculate_pos(CNC.set_posX, 161);
 80025a8:	4bb3      	ldr	r3, [pc, #716]	@ (8002878 <MoveToPosXY+0x2f0>)
 80025aa:	ed93 7b00 	vldr	d7, [r3]
 80025ae:	ed9f 1bb0 	vldr	d1, [pc, #704]	@ 8002870 <MoveToPosXY+0x2e8>
 80025b2:	eeb0 0a47 	vmov.f32	s0, s14
 80025b6:	eef0 0a67 	vmov.f32	s1, s15
 80025ba:	f7ff fa95 	bl	8001ae8 <caculate_pos>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	f7fd fff9 	bl	80005bc <__aeabi_l2d>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	49ab      	ldr	r1, [pc, #684]	@ (800287c <MoveToPosXY+0x2f4>)
 80025d0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    CNC_pos.MoveY = caculate_pos(CNC.set_posY, 161);
 80025d4:	4ba8      	ldr	r3, [pc, #672]	@ (8002878 <MoveToPosXY+0x2f0>)
 80025d6:	ed93 7b02 	vldr	d7, [r3, #8]
 80025da:	ed9f 1ba5 	vldr	d1, [pc, #660]	@ 8002870 <MoveToPosXY+0x2e8>
 80025de:	eeb0 0a47 	vmov.f32	s0, s14
 80025e2:	eef0 0a67 	vmov.f32	s1, s15
 80025e6:	f7ff fa7f 	bl	8001ae8 <caculate_pos>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fd ffe3 	bl	80005bc <__aeabi_l2d>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	49a0      	ldr	r1, [pc, #640]	@ (800287c <MoveToPosXY+0x2f4>)
 80025fc:	e9c1 2308 	strd	r2, r3, [r1, #32]
    long long int step_max = max3(llabs(CNC_pos.MoveX), llabs(CNC_pos.MoveY), llabs(CNC_pos.MoveZ));
 8002600:	4b9e      	ldr	r3, [pc, #632]	@ (800287c <MoveToPosXY+0x2f4>)
 8002602:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f7fe fb65 	bl	8000cd8 <__aeabi_d2lz>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	2b00      	cmp	r3, #0
 8002614:	da05      	bge.n	8002622 <MoveToPosXY+0x9a>
 8002616:	2100      	movs	r1, #0
 8002618:	4254      	negs	r4, r2
 800261a:	eb61 0503 	sbc.w	r5, r1, r3
 800261e:	4622      	mov	r2, r4
 8002620:	462b      	mov	r3, r5
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	f7fd ffc9 	bl	80005bc <__aeabi_l2d>
 800262a:	ec41 0b18 	vmov	d8, r0, r1
 800262e:	4b93      	ldr	r3, [pc, #588]	@ (800287c <MoveToPosXY+0x2f4>)
 8002630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	f7fe fb4e 	bl	8000cd8 <__aeabi_d2lz>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	2b00      	cmp	r3, #0
 8002642:	da06      	bge.n	8002652 <MoveToPosXY+0xca>
 8002644:	2100      	movs	r1, #0
 8002646:	f1d2 0800 	rsbs	r8, r2, #0
 800264a:	eb61 0903 	sbc.w	r9, r1, r3
 800264e:	4642      	mov	r2, r8
 8002650:	464b      	mov	r3, r9
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7fd ffb1 	bl	80005bc <__aeabi_l2d>
 800265a:	4604      	mov	r4, r0
 800265c:	460d      	mov	r5, r1
 800265e:	4b87      	ldr	r3, [pc, #540]	@ (800287c <MoveToPosXY+0x2f4>)
 8002660:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	f7fe fb36 	bl	8000cd8 <__aeabi_d2lz>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	2b00      	cmp	r3, #0
 8002672:	da06      	bge.n	8002682 <MoveToPosXY+0xfa>
 8002674:	2100      	movs	r1, #0
 8002676:	f1d2 0a00 	rsbs	sl, r2, #0
 800267a:	eb61 0b03 	sbc.w	fp, r1, r3
 800267e:	4652      	mov	r2, sl
 8002680:	465b      	mov	r3, fp
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
 8002686:	f7fd ff99 	bl	80005bc <__aeabi_l2d>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	ec43 2b12 	vmov	d2, r2, r3
 8002692:	ec45 4b11 	vmov	d1, r4, r5
 8002696:	eeb0 0a48 	vmov.f32	s0, s16
 800269a:	eef0 0a68 	vmov.f32	s1, s17
 800269e:	f7ff feb1 	bl	8002404 <max3>
 80026a2:	ec53 2b10 	vmov	r2, r3, d0
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f7fe fb15 	bl	8000cd8 <__aeabi_d2lz>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double_t coef1 = fabs(CNC_pos.MoveX) / step_max;
 80026b6:	4b71      	ldr	r3, [pc, #452]	@ (800287c <MoveToPosXY+0x2f4>)
 80026b8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80026bc:	60ba      	str	r2, [r7, #8]
 80026be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026c8:	f7fd ff78 	bl	80005bc <__aeabi_l2d>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026d4:	f7fe f8ca 	bl	800086c <__aeabi_ddiv>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double_t coef2 = fabs(CNC_pos.MoveY) / step_max;
 80026e0:	4b66      	ldr	r3, [pc, #408]	@ (800287c <MoveToPosXY+0x2f4>)
 80026e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80026e6:	603a      	str	r2, [r7, #0]
 80026e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026f2:	f7fd ff63 	bl	80005bc <__aeabi_l2d>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026fe:	f7fe f8b5 	bl	800086c <__aeabi_ddiv>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	e9c7 2306 	strd	r2, r3, [r7, #24]
    CNC_pos.pos1dot = CNC_pos.max_speedXY * coef1;
 800270a:	4b5c      	ldr	r3, [pc, #368]	@ (800287c <MoveToPosXY+0x2f4>)
 800270c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002710:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002714:	f7fd ff80 	bl	8000618 <__aeabi_dmul>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4957      	ldr	r1, [pc, #348]	@ (800287c <MoveToPosXY+0x2f4>)
 800271e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    CNC_pos.pos2dot = CNC_pos.max_speedXY * coef2;
 8002722:	4b56      	ldr	r3, [pc, #344]	@ (800287c <MoveToPosXY+0x2f4>)
 8002724:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800272c:	f7fd ff74 	bl	8000618 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4951      	ldr	r1, [pc, #324]	@ (800287c <MoveToPosXY+0x2f4>)
 8002736:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    CNC_pos.accel1 = CNC_pos.a_maxX * coef1;
 800273a:	4b50      	ldr	r3, [pc, #320]	@ (800287c <MoveToPosXY+0x2f4>)
 800273c:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 8002740:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002744:	f7fd ff68 	bl	8000618 <__aeabi_dmul>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	494b      	ldr	r1, [pc, #300]	@ (800287c <MoveToPosXY+0x2f4>)
 800274e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    CNC_pos.accel2 = CNC_pos.a_maxY * coef2;
 8002752:	4b4a      	ldr	r3, [pc, #296]	@ (800287c <MoveToPosXY+0x2f4>)
 8002754:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	@ 0x98
 8002758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800275c:	f7fd ff5c 	bl	8000618 <__aeabi_dmul>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4945      	ldr	r1, [pc, #276]	@ (800287c <MoveToPosXY+0x2f4>)
 8002766:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    CNC_pos.jerk1 = CNC_pos.j_maxX * coef1;
 800276a:	4b44      	ldr	r3, [pc, #272]	@ (800287c <MoveToPosXY+0x2f4>)
 800276c:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 8002770:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002774:	f7fd ff50 	bl	8000618 <__aeabi_dmul>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	493f      	ldr	r1, [pc, #252]	@ (800287c <MoveToPosXY+0x2f4>)
 800277e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    CNC_pos.jerk2 = CNC_pos.j_maxY * coef2;
 8002782:	4b3e      	ldr	r3, [pc, #248]	@ (800287c <MoveToPosXY+0x2f4>)
 8002784:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	@ 0xa0
 8002788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800278c:	f7fd ff44 	bl	8000618 <__aeabi_dmul>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4939      	ldr	r1, [pc, #228]	@ (800287c <MoveToPosXY+0x2f4>)
 8002796:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    if (Stepper1.run_state != 1 && Stepper2.run_state != 1) {
 800279a:	4b39      	ldr	r3, [pc, #228]	@ (8002880 <MoveToPosXY+0x2f8>)
 800279c:	785b      	ldrb	r3, [r3, #1]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	f000 80a3 	beq.w	80028ea <MoveToPosXY+0x362>
 80027a4:	4b37      	ldr	r3, [pc, #220]	@ (8002884 <MoveToPosXY+0x2fc>)
 80027a6:	785b      	ldrb	r3, [r3, #1]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	f000 809e 	beq.w	80028ea <MoveToPosXY+0x362>
        Accel_Stepper_Move(&Stepper1, CNC_pos.MoveX, CNC_pos.accel1, CNC_pos.jerk1, CNC_pos.pos1dot);
 80027ae:	4b33      	ldr	r3, [pc, #204]	@ (800287c <MoveToPosXY+0x2f4>)
 80027b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7fe fa8e 	bl	8000cd8 <__aeabi_d2lz>
 80027bc:	4682      	mov	sl, r0
 80027be:	468b      	mov	fp, r1
 80027c0:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <MoveToPosXY+0x2f4>)
 80027c2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80027c6:	4610      	mov	r0, r2
 80027c8:	4619      	mov	r1, r3
 80027ca:	f7fe fa9d 	bl	8000d08 <__aeabi_d2ulz>
 80027ce:	4604      	mov	r4, r0
 80027d0:	460d      	mov	r5, r1
 80027d2:	4b2a      	ldr	r3, [pc, #168]	@ (800287c <MoveToPosXY+0x2f4>)
 80027d4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	f7fe fa94 	bl	8000d08 <__aeabi_d2ulz>
 80027e0:	4680      	mov	r8, r0
 80027e2:	4689      	mov	r9, r1
 80027e4:	4b25      	ldr	r3, [pc, #148]	@ (800287c <MoveToPosXY+0x2f4>)
 80027e6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f7fe fa8b 	bl	8000d08 <__aeabi_d2ulz>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80027fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80027fe:	e9cd 4500 	strd	r4, r5, [sp]
 8002802:	4652      	mov	r2, sl
 8002804:	465b      	mov	r3, fp
 8002806:	481e      	ldr	r0, [pc, #120]	@ (8002880 <MoveToPosXY+0x2f8>)
 8002808:	f7fe fe46 	bl	8001498 <Accel_Stepper_Move>
        Accel_Stepper_Move(&Stepper2, CNC_pos.MoveY, CNC_pos.accel2, CNC_pos.jerk2, CNC_pos.pos2dot);
 800280c:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <MoveToPosXY+0x2f4>)
 800280e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f7fe fa5f 	bl	8000cd8 <__aeabi_d2lz>
 800281a:	4682      	mov	sl, r0
 800281c:	468b      	mov	fp, r1
 800281e:	4b17      	ldr	r3, [pc, #92]	@ (800287c <MoveToPosXY+0x2f4>)
 8002820:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f7fe fa6e 	bl	8000d08 <__aeabi_d2ulz>
 800282c:	4604      	mov	r4, r0
 800282e:	460d      	mov	r5, r1
 8002830:	4b12      	ldr	r3, [pc, #72]	@ (800287c <MoveToPosXY+0x2f4>)
 8002832:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	f7fe fa65 	bl	8000d08 <__aeabi_d2ulz>
 800283e:	4680      	mov	r8, r0
 8002840:	4689      	mov	r9, r1
 8002842:	4b0e      	ldr	r3, [pc, #56]	@ (800287c <MoveToPosXY+0x2f4>)
 8002844:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	f7fe fa5c 	bl	8000d08 <__aeabi_d2ulz>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002858:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800285c:	e9cd 4500 	strd	r4, r5, [sp]
 8002860:	4652      	mov	r2, sl
 8002862:	465b      	mov	r3, fp
 8002864:	4807      	ldr	r0, [pc, #28]	@ (8002884 <MoveToPosXY+0x2fc>)
 8002866:	f7fe fe17 	bl	8001498 <Accel_Stepper_Move>
        while (Stepper1.run_state != STOP || Stepper2.run_state != STOP) {
 800286a:	e026      	b.n	80028ba <MoveToPosXY+0x332>
 800286c:	f3af 8000 	nop.w
 8002870:	00000000 	.word	0x00000000
 8002874:	40642000 	.word	0x40642000
 8002878:	20000838 	.word	0x20000838
 800287c:	20000778 	.word	0x20000778
 8002880:	200002b0 	.word	0x200002b0
 8002884:	20000310 	.word	0x20000310
        	if(HAL_GPIO_ReadPin(moveXplus_port, moveXplus_pin) == CNC_pos.Lsw1 ||
 8002888:	2120      	movs	r1, #32
 800288a:	481b      	ldr	r0, [pc, #108]	@ (80028f8 <MoveToPosXY+0x370>)
 800288c:	f004 fcd8 	bl	8007240 <HAL_GPIO_ReadPin>
 8002890:	4603      	mov	r3, r0
 8002892:	461a      	mov	r2, r3
 8002894:	4b19      	ldr	r3, [pc, #100]	@ (80028fc <MoveToPosXY+0x374>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d009      	beq.n	80028b0 <MoveToPosXY+0x328>
        		HAL_GPIO_ReadPin(moveYplus_port, moveYplus_pin) == CNC_pos.Lsw3){
 800289c:	2104      	movs	r1, #4
 800289e:	4818      	ldr	r0, [pc, #96]	@ (8002900 <MoveToPosXY+0x378>)
 80028a0:	f004 fcce 	bl	8007240 <HAL_GPIO_ReadPin>
 80028a4:	4603      	mov	r3, r0
 80028a6:	461a      	mov	r2, r3
 80028a8:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <MoveToPosXY+0x374>)
 80028aa:	789b      	ldrb	r3, [r3, #2]
        	if(HAL_GPIO_ReadPin(moveXplus_port, moveXplus_pin) == CNC_pos.Lsw1 ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d101      	bne.n	80028b4 <MoveToPosXY+0x32c>
        		handle_stop_button_press();
 80028b0:	f002 f9b0 	bl	8004c14 <handle_stop_button_press>
        	}
        	osDelay(1);
 80028b4:	2001      	movs	r0, #1
 80028b6:	f009 fb19 	bl	800beec <osDelay>
        while (Stepper1.run_state != STOP || Stepper2.run_state != STOP) {
 80028ba:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <MoveToPosXY+0x37c>)
 80028bc:	785b      	ldrb	r3, [r3, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1e2      	bne.n	8002888 <MoveToPosXY+0x300>
 80028c2:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <MoveToPosXY+0x380>)
 80028c4:	785b      	ldrb	r3, [r3, #1]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1de      	bne.n	8002888 <MoveToPosXY+0x300>
        }
        CNC.pos_x = x;
 80028ca:	6978      	ldr	r0, [r7, #20]
 80028cc:	f7fd fe4c 	bl	8000568 <__aeabi_f2d>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	490d      	ldr	r1, [pc, #52]	@ (800290c <MoveToPosXY+0x384>)
 80028d6:	e9c1 2306 	strd	r2, r3, [r1, #24]
        CNC.pos_y = y;
 80028da:	6938      	ldr	r0, [r7, #16]
 80028dc:	f7fd fe44 	bl	8000568 <__aeabi_f2d>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4909      	ldr	r1, [pc, #36]	@ (800290c <MoveToPosXY+0x384>)
 80028e6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    }
}
 80028ea:	bf00      	nop
 80028ec:	3730      	adds	r7, #48	@ 0x30
 80028ee:	46bd      	mov	sp, r7
 80028f0:	ecbd 8b02 	vpop	{d8}
 80028f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028f8:	40020800 	.word	0x40020800
 80028fc:	20000778 	.word	0x20000778
 8002900:	40020400 	.word	0x40020400
 8002904:	200002b0 	.word	0x200002b0
 8002908:	20000310 	.word	0x20000310
 800290c:	20000838 	.word	0x20000838

08002910 <MoveToPosZ>:
// Move Z
void MoveToPosZ(float z) {
 8002910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002914:	b08e      	sub	sp, #56	@ 0x38
 8002916:	af06      	add	r7, sp, #24
 8002918:	ed87 0a03 	vstr	s0, [r7, #12]
    trans_to_posZ(z);
 800291c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002920:	f7ff f8ca 	bl	8001ab8 <trans_to_posZ>
    CNC_pos.MoveZ = caculate_pos(CNC.set_posZ, 161);
 8002924:	4b80      	ldr	r3, [pc, #512]	@ (8002b28 <MoveToPosZ+0x218>)
 8002926:	ed93 7b04 	vldr	d7, [r3, #16]
 800292a:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 8002b20 <MoveToPosZ+0x210>
 800292e:	eeb0 0a47 	vmov.f32	s0, s14
 8002932:	eef0 0a67 	vmov.f32	s1, s15
 8002936:	f7ff f8d7 	bl	8001ae8 <caculate_pos>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	f7fd fe3b 	bl	80005bc <__aeabi_l2d>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4978      	ldr	r1, [pc, #480]	@ (8002b2c <MoveToPosZ+0x21c>)
 800294c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    long long int step_max = max3(llabs(CNC_pos.MoveX), llabs(CNC_pos.MoveY), llabs(CNC_pos.MoveZ));
 8002950:	4b76      	ldr	r3, [pc, #472]	@ (8002b2c <MoveToPosZ+0x21c>)
 8002952:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f7fe f9bd 	bl	8000cd8 <__aeabi_d2lz>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	2b00      	cmp	r3, #0
 8002964:	da06      	bge.n	8002974 <MoveToPosZ+0x64>
 8002966:	2100      	movs	r1, #0
 8002968:	f1d2 0a00 	rsbs	sl, r2, #0
 800296c:	eb61 0b03 	sbc.w	fp, r1, r3
 8002970:	4652      	mov	r2, sl
 8002972:	465b      	mov	r3, fp
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	f7fd fe20 	bl	80005bc <__aeabi_l2d>
 800297c:	4682      	mov	sl, r0
 800297e:	468b      	mov	fp, r1
 8002980:	4b6a      	ldr	r3, [pc, #424]	@ (8002b2c <MoveToPosZ+0x21c>)
 8002982:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	f7fe f9a5 	bl	8000cd8 <__aeabi_d2lz>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	2b00      	cmp	r3, #0
 8002994:	da06      	bge.n	80029a4 <MoveToPosZ+0x94>
 8002996:	2100      	movs	r1, #0
 8002998:	f1d2 0800 	rsbs	r8, r2, #0
 800299c:	eb61 0903 	sbc.w	r9, r1, r3
 80029a0:	4642      	mov	r2, r8
 80029a2:	464b      	mov	r3, r9
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f7fd fe08 	bl	80005bc <__aeabi_l2d>
 80029ac:	4680      	mov	r8, r0
 80029ae:	4689      	mov	r9, r1
 80029b0:	4b5e      	ldr	r3, [pc, #376]	@ (8002b2c <MoveToPosZ+0x21c>)
 80029b2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f7fe f98d 	bl	8000cd8 <__aeabi_d2lz>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	da05      	bge.n	80029d2 <MoveToPosZ+0xc2>
 80029c6:	2100      	movs	r1, #0
 80029c8:	4254      	negs	r4, r2
 80029ca:	eb61 0503 	sbc.w	r5, r1, r3
 80029ce:	4622      	mov	r2, r4
 80029d0:	462b      	mov	r3, r5
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	f7fd fdf1 	bl	80005bc <__aeabi_l2d>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	ec43 2b12 	vmov	d2, r2, r3
 80029e2:	ec49 8b11 	vmov	d1, r8, r9
 80029e6:	ec4b ab10 	vmov	d0, sl, fp
 80029ea:	f7ff fd0b 	bl	8002404 <max3>
 80029ee:	ec53 2b10 	vmov	r2, r3, d0
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	f7fe f96f 	bl	8000cd8 <__aeabi_d2lz>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double_t coef3 = fabs(CNC_pos.MoveZ) / step_max;
 8002a02:	4b4a      	ldr	r3, [pc, #296]	@ (8002b2c <MoveToPosZ+0x21c>)
 8002a04:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002a08:	603a      	str	r2, [r7, #0]
 8002a0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a14:	f7fd fdd2 	bl	80005bc <__aeabi_l2d>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a20:	f7fd ff24 	bl	800086c <__aeabi_ddiv>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    CNC_pos.pos3dot = CNC_pos.max_speedZ * coef3;
 8002a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b2c <MoveToPosZ+0x21c>)
 8002a2e:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8002a32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a36:	f7fd fdef 	bl	8000618 <__aeabi_dmul>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	493b      	ldr	r1, [pc, #236]	@ (8002b2c <MoveToPosZ+0x21c>)
 8002a40:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    CNC_pos.accel3 = CNC_pos.a_maxZ * coef3;
 8002a44:	4b39      	ldr	r3, [pc, #228]	@ (8002b2c <MoveToPosZ+0x21c>)
 8002a46:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 8002a4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a4e:	f7fd fde3 	bl	8000618 <__aeabi_dmul>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4935      	ldr	r1, [pc, #212]	@ (8002b2c <MoveToPosZ+0x21c>)
 8002a58:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    CNC_pos.jerk3 = CNC_pos.j_maxZ * coef3;
 8002a5c:	4b33      	ldr	r3, [pc, #204]	@ (8002b2c <MoveToPosZ+0x21c>)
 8002a5e:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 8002a62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a66:	f7fd fdd7 	bl	8000618 <__aeabi_dmul>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	492f      	ldr	r1, [pc, #188]	@ (8002b2c <MoveToPosZ+0x21c>)
 8002a70:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
    if (Stepper3.run_state != 1) {
 8002a74:	4b2e      	ldr	r3, [pc, #184]	@ (8002b30 <MoveToPosZ+0x220>)
 8002a76:	785b      	ldrb	r3, [r3, #1]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d04a      	beq.n	8002b12 <MoveToPosZ+0x202>
        Accel_Stepper_Move(&Stepper3, CNC_pos.MoveZ, CNC_pos.accel3, CNC_pos.jerk3, CNC_pos.pos3dot);
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b2c <MoveToPosZ+0x21c>)
 8002a7e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	f7fe f927 	bl	8000cd8 <__aeabi_d2lz>
 8002a8a:	4682      	mov	sl, r0
 8002a8c:	468b      	mov	fp, r1
 8002a8e:	4b27      	ldr	r3, [pc, #156]	@ (8002b2c <MoveToPosZ+0x21c>)
 8002a90:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7fe f936 	bl	8000d08 <__aeabi_d2ulz>
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	460d      	mov	r5, r1
 8002aa0:	4b22      	ldr	r3, [pc, #136]	@ (8002b2c <MoveToPosZ+0x21c>)
 8002aa2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f7fe f92d 	bl	8000d08 <__aeabi_d2ulz>
 8002aae:	4680      	mov	r8, r0
 8002ab0:	4689      	mov	r9, r1
 8002ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b2c <MoveToPosZ+0x21c>)
 8002ab4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7fe f924 	bl	8000d08 <__aeabi_d2ulz>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ac8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002acc:	e9cd 4500 	strd	r4, r5, [sp]
 8002ad0:	4652      	mov	r2, sl
 8002ad2:	465b      	mov	r3, fp
 8002ad4:	4816      	ldr	r0, [pc, #88]	@ (8002b30 <MoveToPosZ+0x220>)
 8002ad6:	f7fe fcdf 	bl	8001498 <Accel_Stepper_Move>
        while(Stepper3.run_state != STOP){
 8002ada:	e00e      	b.n	8002afa <MoveToPosZ+0x1ea>
        	if(HAL_GPIO_ReadPin(moveZplus_port, moveZplus_pin) == CNC_pos.Lsw5){
 8002adc:	2180      	movs	r1, #128	@ 0x80
 8002ade:	4815      	ldr	r0, [pc, #84]	@ (8002b34 <MoveToPosZ+0x224>)
 8002ae0:	f004 fbae 	bl	8007240 <HAL_GPIO_ReadPin>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <MoveToPosZ+0x21c>)
 8002aea:	791b      	ldrb	r3, [r3, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d101      	bne.n	8002af4 <MoveToPosZ+0x1e4>
        		handle_stop_button_press();
 8002af0:	f002 f890 	bl	8004c14 <handle_stop_button_press>
        	}
			osDelay(1);
 8002af4:	2001      	movs	r0, #1
 8002af6:	f009 f9f9 	bl	800beec <osDelay>
        while(Stepper3.run_state != STOP){
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <MoveToPosZ+0x220>)
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ec      	bne.n	8002adc <MoveToPosZ+0x1cc>
		}
        CNC.pos_z = z;
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7fd fd30 	bl	8000568 <__aeabi_f2d>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4906      	ldr	r1, [pc, #24]	@ (8002b28 <MoveToPosZ+0x218>)
 8002b0e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    }
}
 8002b12:	bf00      	nop
 8002b14:	3720      	adds	r7, #32
 8002b16:	46bd      	mov	sp, r7
 8002b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b1c:	f3af 8000 	nop.w
 8002b20:	00000000 	.word	0x00000000
 8002b24:	40642000 	.word	0x40642000
 8002b28:	20000838 	.word	0x20000838
 8002b2c:	20000778 	.word	0x20000778
 8002b30:	20000370 	.word	0x20000370
 8002b34:	40021000 	.word	0x40021000

08002b38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HOME();
 8002b40:	f7ff fcac 	bl	800249c <HOME>
  initializeCNC_pos(&CNC_pos);
 8002b44:	4823      	ldr	r0, [pc, #140]	@ (8002bd4 <StartDefaultTask+0x9c>)
 8002b46:	f7fe ff03 	bl	8001950 <initializeCNC_pos>
  Accel_Stepper_SetPin(&Stepper1, step_1_GPIO_Port, step_1_pin, dir_1_GPIO_Port, dir_1_pin);
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	4b22      	ldr	r3, [pc, #136]	@ (8002bd8 <StartDefaultTask+0xa0>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	4921      	ldr	r1, [pc, #132]	@ (8002bd8 <StartDefaultTask+0xa0>)
 8002b54:	4821      	ldr	r0, [pc, #132]	@ (8002bdc <StartDefaultTask+0xa4>)
 8002b56:	f7fe fa55 	bl	8001004 <Accel_Stepper_SetPin>
  Accel_Stepper_SetPin(&Stepper2, step_2_GPIO_Port, step_2_pin, dir_2_GPIO_Port, dir_2_pin);
 8002b5a:	2308      	movs	r3, #8
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd8 <StartDefaultTask+0xa0>)
 8002b60:	2204      	movs	r2, #4
 8002b62:	491d      	ldr	r1, [pc, #116]	@ (8002bd8 <StartDefaultTask+0xa0>)
 8002b64:	481e      	ldr	r0, [pc, #120]	@ (8002be0 <StartDefaultTask+0xa8>)
 8002b66:	f7fe fa4d 	bl	8001004 <Accel_Stepper_SetPin>
  Accel_Stepper_SetPin(&Stepper3, step_3_GPIO_Port, step_3_pin, dir_3_GPIO_Port, dir_3_pin);
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd8 <StartDefaultTask+0xa0>)
 8002b70:	2210      	movs	r2, #16
 8002b72:	4919      	ldr	r1, [pc, #100]	@ (8002bd8 <StartDefaultTask+0xa0>)
 8002b74:	481b      	ldr	r0, [pc, #108]	@ (8002be4 <StartDefaultTask+0xac>)
 8002b76:	f7fe fa45 	bl	8001004 <Accel_Stepper_SetPin>

  Accel_Stepper_SetTimer(&Stepper1, &htim2);
 8002b7a:	491b      	ldr	r1, [pc, #108]	@ (8002be8 <StartDefaultTask+0xb0>)
 8002b7c:	4817      	ldr	r0, [pc, #92]	@ (8002bdc <StartDefaultTask+0xa4>)
 8002b7e:	f7fe fa5d 	bl	800103c <Accel_Stepper_SetTimer>
  Accel_Stepper_SetTimer(&Stepper2, &htim3);
 8002b82:	491a      	ldr	r1, [pc, #104]	@ (8002bec <StartDefaultTask+0xb4>)
 8002b84:	4816      	ldr	r0, [pc, #88]	@ (8002be0 <StartDefaultTask+0xa8>)
 8002b86:	f7fe fa59 	bl	800103c <Accel_Stepper_SetTimer>
  Accel_Stepper_SetTimer(&Stepper3, &htim4);
 8002b8a:	4919      	ldr	r1, [pc, #100]	@ (8002bf0 <StartDefaultTask+0xb8>)
 8002b8c:	4815      	ldr	r0, [pc, #84]	@ (8002be4 <StartDefaultTask+0xac>)
 8002b8e:	f7fe fa55 	bl	800103c <Accel_Stepper_SetTimer>

  CNC.pos_x = 0;
 8002b92:	4918      	ldr	r1, [pc, #96]	@ (8002bf4 <StartDefaultTask+0xbc>)
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9c1 2306 	strd	r2, r3, [r1, #24]
  CNC.pos_y = 0;
 8002ba0:	4914      	ldr	r1, [pc, #80]	@ (8002bf4 <StartDefaultTask+0xbc>)
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	e9c1 2308 	strd	r2, r3, [r1, #32]
  CNC.pos_z = 0;
 8002bae:	4911      	ldr	r1, [pc, #68]	@ (8002bf4 <StartDefaultTask+0xbc>)
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	f04f 0300 	mov.w	r3, #0
 8002bb8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

  //vTaskDelay(pdMS_TO_TICKS(2000));
  /* Infinite loop */
  for(;;)
  {
      if (state.start_press) {
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf8 <StartDefaultTask+0xc0>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <StartDefaultTask+0x92>
          move_to_coordinates();
 8002bc6:	f7ff fabb 	bl	8002140 <move_to_coordinates>

      }

    osDelay(1);
 8002bca:	2001      	movs	r0, #1
 8002bcc:	f009 f98e 	bl	800beec <osDelay>
      if (state.start_press) {
 8002bd0:	e7f4      	b.n	8002bbc <StartDefaultTask+0x84>
 8002bd2:	bf00      	nop
 8002bd4:	20000778 	.word	0x20000778
 8002bd8:	40020000 	.word	0x40020000
 8002bdc:	200002b0 	.word	0x200002b0
 8002be0:	20000310 	.word	0x20000310
 8002be4:	20000370 	.word	0x20000370
 8002be8:	20000a7c 	.word	0x20000a7c
 8002bec:	20000ac4 	.word	0x20000ac4
 8002bf0:	20000b0c 	.word	0x20000b0c
 8002bf4:	20000838 	.word	0x20000838
 8002bf8:	20000a28 	.word	0x20000a28

08002bfc <StartADC>:
* @retval None
*/

/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
  /* Infinite loop */
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)LCD_adc.readValue, 2);
  for(;;)
  {
	startADC();
 8002c04:	f000 ffc6 	bl	8003b94 <startADC>
    osDelay(1);
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f009 f96f 	bl	800beec <osDelay>
	startADC();
 8002c0e:	bf00      	nop
 8002c10:	e7f8      	b.n	8002c04 <StartADC+0x8>
	...

08002c14 <StartLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD */
void StartLCD(void *argument)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD */
  /* Infinite loop */
  initialize_LCD(&LCD_adc);
 8002c1c:	4808      	ldr	r0, [pc, #32]	@ (8002c40 <StartLCD+0x2c>)
 8002c1e:	f000 fbdd 	bl	80033dc <initialize_LCD>
  initialize_Kalman(&kalman_fil_curr);
 8002c22:	4808      	ldr	r0, [pc, #32]	@ (8002c44 <StartLCD+0x30>)
 8002c24:	f000 fc06 	bl	8003434 <initialize_Kalman>
  initialize_Kalman(&kalman_fil_volt);
 8002c28:	4807      	ldr	r0, [pc, #28]	@ (8002c48 <StartLCD+0x34>)
 8002c2a:	f000 fc03 	bl	8003434 <initialize_Kalman>
  display_menu();
 8002c2e:	f001 f871 	bl	8003d14 <display_menu>
  for(;;)
  {
	ButtonTask();
 8002c32:	f001 fd0f 	bl	8004654 <ButtonTask>
    osDelay(1);
 8002c36:	2001      	movs	r0, #1
 8002c38:	f009 f958 	bl	800beec <osDelay>
	ButtonTask();
 8002c3c:	bf00      	nop
 8002c3e:	e7f8      	b.n	8002c32 <StartLCD+0x1e>
 8002c40:	200008bc 	.word	0x200008bc
 8002c44:	20000988 	.word	0x20000988
 8002c48:	200009d8 	.word	0x200009d8

08002c4c <StartUART_TX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_TX */
void StartUART_TX(void *argument)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART_TX */
  /* Infinite loop */
  UART_transmit_init();
 8002c54:	f7ff f904 	bl	8001e60 <UART_transmit_init>
  for(;;)
  {
    osDelay(1000);  // Delay 1000 milliseconds (1 second)
 8002c58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c5c:	f009 f946 	bl	800beec <osDelay>
    send_uart_data();  // Send data every second
 8002c60:	f7ff f8c8 	bl	8001df4 <send_uart_data>
    osDelay(1000);  // Delay 1000 milliseconds (1 second)
 8002c64:	bf00      	nop
 8002c66:	e7f7      	b.n	8002c58 <StartUART_TX+0xc>

08002c68 <StartUART_RX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_RX */

void StartUART_RX(void *argument) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartUART_RX */
    /* Initialize UART receive in DMA mode */
    UART_RECEIVE_Init();
 8002c70:	f7ff f8fc 	bl	8001e6c <UART_RECEIVE_Init>
    /* Infinite loop */
    for(;;)
    {
        if (osSemaphoreAcquire(uartRxSemaphoreHandle, osWaitForever) == osOK) {
 8002c74:	4b07      	ldr	r3, [pc, #28]	@ (8002c94 <StartUART_RX+0x2c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f04f 31ff 	mov.w	r1, #4294967295
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f009 fae7 	bl	800c250 <osSemaphoreAcquire>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <StartUART_RX+0x24>
            UART_rx_process();
 8002c88:	f7ff fad8 	bl	800223c <UART_rx_process>
        }
        osDelay(1);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f009 f92d 	bl	800beec <osDelay>
        if (osSemaphoreAcquire(uartRxSemaphoreHandle, osWaitForever) == osOK) {
 8002c92:	e7ef      	b.n	8002c74 <StartUART_RX+0xc>
 8002c94:	2000075c 	.word	0x2000075c

08002c98 <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  lcdMutexHandle = osMutexNew(&lcdMutex_attributes);
 8002c9c:	481b      	ldr	r0, [pc, #108]	@ (8002d0c <MX_FREERTOS_Init+0x74>)
 8002c9e:	f009 f940 	bl	800bf22 <osMutexNew>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d10 <MX_FREERTOS_Init+0x78>)
 8002ca6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  uartRxSemaphoreHandle = osSemaphoreNew(1, 1, &uartRxSemaphore_attributes);
 8002ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d14 <MX_FREERTOS_Init+0x7c>)
 8002caa:	2101      	movs	r1, #1
 8002cac:	2001      	movs	r0, #1
 8002cae:	f009 fa46 	bl	800c13e <osSemaphoreNew>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4a18      	ldr	r2, [pc, #96]	@ (8002d18 <MX_FREERTOS_Init+0x80>)
 8002cb6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002cb8:	4a18      	ldr	r2, [pc, #96]	@ (8002d1c <MX_FREERTOS_Init+0x84>)
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4818      	ldr	r0, [pc, #96]	@ (8002d20 <MX_FREERTOS_Init+0x88>)
 8002cbe:	f009 f883 	bl	800bdc8 <osThreadNew>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4a17      	ldr	r2, [pc, #92]	@ (8002d24 <MX_FREERTOS_Init+0x8c>)
 8002cc6:	6013      	str	r3, [r2, #0]

  /* creation of startADC */
  startADCHandle = osThreadNew(StartADC, NULL, &startADC_attributes);
 8002cc8:	4a17      	ldr	r2, [pc, #92]	@ (8002d28 <MX_FREERTOS_Init+0x90>)
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4817      	ldr	r0, [pc, #92]	@ (8002d2c <MX_FREERTOS_Init+0x94>)
 8002cce:	f009 f87b 	bl	800bdc8 <osThreadNew>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4a16      	ldr	r2, [pc, #88]	@ (8002d30 <MX_FREERTOS_Init+0x98>)
 8002cd6:	6013      	str	r3, [r2, #0]

  /* creation of startLCD */
  startLCDHandle = osThreadNew(StartLCD, NULL, &startLCD_attributes);
 8002cd8:	4a16      	ldr	r2, [pc, #88]	@ (8002d34 <MX_FREERTOS_Init+0x9c>)
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4816      	ldr	r0, [pc, #88]	@ (8002d38 <MX_FREERTOS_Init+0xa0>)
 8002cde:	f009 f873 	bl	800bdc8 <osThreadNew>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a15      	ldr	r2, [pc, #84]	@ (8002d3c <MX_FREERTOS_Init+0xa4>)
 8002ce6:	6013      	str	r3, [r2, #0]

  /* creation of startUART_TX */
  startUART_TXHandle = osThreadNew(StartUART_TX, NULL, &startUART_TX_attributes);
 8002ce8:	4a15      	ldr	r2, [pc, #84]	@ (8002d40 <MX_FREERTOS_Init+0xa8>)
 8002cea:	2100      	movs	r1, #0
 8002cec:	4815      	ldr	r0, [pc, #84]	@ (8002d44 <MX_FREERTOS_Init+0xac>)
 8002cee:	f009 f86b 	bl	800bdc8 <osThreadNew>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4a14      	ldr	r2, [pc, #80]	@ (8002d48 <MX_FREERTOS_Init+0xb0>)
 8002cf6:	6013      	str	r3, [r2, #0]

  /* creation of startUART_RX */
  startUART_RXHandle = osThreadNew(StartUART_RX, NULL, &startUART_RX_attributes);
 8002cf8:	4a14      	ldr	r2, [pc, #80]	@ (8002d4c <MX_FREERTOS_Init+0xb4>)
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4814      	ldr	r0, [pc, #80]	@ (8002d50 <MX_FREERTOS_Init+0xb8>)
 8002cfe:	f009 f863 	bl	800bdc8 <osThreadNew>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4a13      	ldr	r2, [pc, #76]	@ (8002d54 <MX_FREERTOS_Init+0xbc>)
 8002d06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	08015a48 	.word	0x08015a48
 8002d10:	20000758 	.word	0x20000758
 8002d14:	08015a58 	.word	0x08015a58
 8002d18:	2000075c 	.word	0x2000075c
 8002d1c:	08015a68 	.word	0x08015a68
 8002d20:	08002b39 	.word	0x08002b39
 8002d24:	20000760 	.word	0x20000760
 8002d28:	08015a8c 	.word	0x08015a8c
 8002d2c:	08002bfd 	.word	0x08002bfd
 8002d30:	20000764 	.word	0x20000764
 8002d34:	08015ab0 	.word	0x08015ab0
 8002d38:	08002c15 	.word	0x08002c15
 8002d3c:	20000768 	.word	0x20000768
 8002d40:	08015ad4 	.word	0x08015ad4
 8002d44:	08002c4d 	.word	0x08002c4d
 8002d48:	2000076c 	.word	0x2000076c
 8002d4c:	08015af8 	.word	0x08015af8
 8002d50:	08002c69 	.word	0x08002c69
 8002d54:	20000770 	.word	0x20000770

08002d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08c      	sub	sp, #48	@ 0x30
 8002d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5e:	f107 031c 	add.w	r3, r7, #28
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
 8002d6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	4b7c      	ldr	r3, [pc, #496]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	4a7b      	ldr	r2, [pc, #492]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7e:	4b79      	ldr	r3, [pc, #484]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	4b75      	ldr	r3, [pc, #468]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	4a74      	ldr	r2, [pc, #464]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9a:	4b72      	ldr	r3, [pc, #456]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	4b6e      	ldr	r3, [pc, #440]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	4a6d      	ldr	r2, [pc, #436]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db6:	4b6b      	ldr	r3, [pc, #428]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b67      	ldr	r3, [pc, #412]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	4a66      	ldr	r2, [pc, #408]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002dcc:	f043 0302 	orr.w	r3, r3, #2
 8002dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd2:	4b64      	ldr	r3, [pc, #400]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	4b60      	ldr	r3, [pc, #384]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	4a5f      	ldr	r2, [pc, #380]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002de8:	f043 0310 	orr.w	r3, r3, #16
 8002dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dee:	4b5d      	ldr	r3, [pc, #372]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	4b59      	ldr	r3, [pc, #356]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	4a58      	ldr	r2, [pc, #352]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002e04:	f043 0308 	orr.w	r3, r3, #8
 8002e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e0a:	4b56      	ldr	r3, [pc, #344]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	607b      	str	r3, [r7, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, step_1_pin|dir_1_pin|step_2_pin|dir_2_pin
 8002e16:	2200      	movs	r2, #0
 8002e18:	213f      	movs	r1, #63	@ 0x3f
 8002e1a:	4853      	ldr	r0, [pc, #332]	@ (8002f68 <MX_GPIO_Init+0x210>)
 8002e1c:	f004 fa28 	bl	8007270 <HAL_GPIO_WritePin>
                          |step_3_pin|dir_3_pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, led1_pin|led2_pin, GPIO_PIN_RESET);
 8002e20:	2200      	movs	r2, #0
 8002e22:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8002e26:	4851      	ldr	r0, [pc, #324]	@ (8002f6c <MX_GPIO_Init+0x214>)
 8002e28:	f004 fa22 	bl	8007270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led3_pin|drill_pin, GPIO_PIN_RESET);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8002e32:	484f      	ldr	r0, [pc, #316]	@ (8002f70 <MX_GPIO_Init+0x218>)
 8002e34:	f004 fa1c 	bl	8007270 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 */
  GPIO_InitStruct.Pin = step_1_pin|dir_1_pin|step_2_pin|dir_2_pin
 8002e38:	233f      	movs	r3, #63	@ 0x3f
 8002e3a:	61fb      	str	r3, [r7, #28]
                          |step_3_pin|dir_3_pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e48:	f107 031c 	add.w	r3, r7, #28
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4846      	ldr	r0, [pc, #280]	@ (8002f68 <MX_GPIO_Init+0x210>)
 8002e50:	f004 f85a 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = backKey|start_pin;
 8002e54:	23c0      	movs	r3, #192	@ 0xc0
 8002e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e58:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	f107 031c 	add.w	r3, r7, #28
 8002e66:	4619      	mov	r1, r3
 8002e68:	483f      	ldr	r0, [pc, #252]	@ (8002f68 <MX_GPIO_Init+0x210>)
 8002e6a:	f004 f84d 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = downKey;
 8002e6e:	2310      	movs	r3, #16
 8002e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e72:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e7c:	f107 031c 	add.w	r3, r7, #28
 8002e80:	4619      	mov	r1, r3
 8002e82:	483c      	ldr	r0, [pc, #240]	@ (8002f74 <MX_GPIO_Init+0x21c>)
 8002e84:	f004 f840 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = moveXplus_pin;
 8002e88:	2320      	movs	r3, #32
 8002e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e90:	2301      	movs	r3, #1
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e94:	f107 031c 	add.w	r3, r7, #28
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4836      	ldr	r0, [pc, #216]	@ (8002f74 <MX_GPIO_Init+0x21c>)
 8002e9c:	f004 f834 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = moveXsub_pin|moveYplus_pin|moveYsub_pin|GPIO_PIN_12;
 8002ea0:	f241 0307 	movw	r3, #4103	@ 0x1007
 8002ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eae:	f107 031c 	add.w	r3, r7, #28
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	482e      	ldr	r0, [pc, #184]	@ (8002f70 <MX_GPIO_Init+0x218>)
 8002eb6:	f004 f827 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = moveZplus_pin|moveZsub_pin;
 8002eba:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ec8:	f107 031c 	add.w	r3, r7, #28
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4827      	ldr	r0, [pc, #156]	@ (8002f6c <MX_GPIO_Init+0x214>)
 8002ed0:	f004 f81a 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE11 PE12 */
  GPIO_InitStruct.Pin = stop_pin|upKey|resetKey|selectKey;
 8002ed4:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8002ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002eda:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002ede:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ee4:	f107 031c 	add.w	r3, r7, #28
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4820      	ldr	r0, [pc, #128]	@ (8002f6c <MX_GPIO_Init+0x214>)
 8002eec:	f004 f80c 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE15 */
  GPIO_InitStruct.Pin = led1_pin|led2_pin;
 8002ef0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efe:	2300      	movs	r3, #0
 8002f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	4619      	mov	r1, r3
 8002f08:	4818      	ldr	r0, [pc, #96]	@ (8002f6c <MX_GPIO_Init+0x214>)
 8002f0a:	f003 fffd 	bl	8006f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 */
  GPIO_InitStruct.Pin = led3_pin|drill_pin;
 8002f0e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f14:	2301      	movs	r3, #1
 8002f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f20:	f107 031c 	add.w	r3, r7, #28
 8002f24:	4619      	mov	r1, r3
 8002f26:	4812      	ldr	r0, [pc, #72]	@ (8002f70 <MX_GPIO_Init+0x218>)
 8002f28:	f003 ffee 	bl	8006f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2105      	movs	r1, #5
 8002f30:	200a      	movs	r0, #10
 8002f32:	f003 fba2 	bl	800667a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002f36:	200a      	movs	r0, #10
 8002f38:	f003 fbbb 	bl	80066b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2105      	movs	r1, #5
 8002f40:	2017      	movs	r0, #23
 8002f42:	f003 fb9a 	bl	800667a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f46:	2017      	movs	r0, #23
 8002f48:	f003 fbb3 	bl	80066b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2105      	movs	r1, #5
 8002f50:	2028      	movs	r0, #40	@ 0x28
 8002f52:	f003 fb92 	bl	800667a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f56:	2028      	movs	r0, #40	@ 0x28
 8002f58:	f003 fbab 	bl	80066b2 <HAL_NVIC_EnableIRQ>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f5c:	bf00      	nop
 8002f5e:	3730      	adds	r7, #48	@ 0x30
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40020400 	.word	0x40020400
 8002f74:	40020800 	.word	0x40020800

08002f78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f7c:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002f7e:	4a13      	ldr	r2, [pc, #76]	@ (8002fcc <MX_I2C1_Init+0x54>)
 8002f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f82:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002f84:	4a12      	ldr	r2, [pc, #72]	@ (8002fd0 <MX_I2C1_Init+0x58>)
 8002f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f88:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f94:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002f96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fa2:	4b09      	ldr	r3, [pc, #36]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fa8:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fb4:	4804      	ldr	r0, [pc, #16]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002fb6:	f004 f9a7 	bl	8007308 <HAL_I2C_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fc0:	f000 fa06 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000868 	.word	0x20000868
 8002fcc:	40005400 	.word	0x40005400
 8002fd0:	000186a0 	.word	0x000186a0

08002fd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	@ 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a21      	ldr	r2, [pc, #132]	@ (8003078 <HAL_I2C_MspInit+0xa4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d13b      	bne.n	800306e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	4b20      	ldr	r3, [pc, #128]	@ (800307c <HAL_I2C_MspInit+0xa8>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800307c <HAL_I2C_MspInit+0xa8>)
 8003000:	f043 0302 	orr.w	r3, r3, #2
 8003004:	6313      	str	r3, [r2, #48]	@ 0x30
 8003006:	4b1d      	ldr	r3, [pc, #116]	@ (800307c <HAL_I2C_MspInit+0xa8>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003012:	23c0      	movs	r3, #192	@ 0xc0
 8003014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003016:	2312      	movs	r3, #18
 8003018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301e:	2303      	movs	r3, #3
 8003020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003022:	2304      	movs	r3, #4
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003026:	f107 0314 	add.w	r3, r7, #20
 800302a:	4619      	mov	r1, r3
 800302c:	4814      	ldr	r0, [pc, #80]	@ (8003080 <HAL_I2C_MspInit+0xac>)
 800302e:	f003 ff6b 	bl	8006f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	4b11      	ldr	r3, [pc, #68]	@ (800307c <HAL_I2C_MspInit+0xa8>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	4a10      	ldr	r2, [pc, #64]	@ (800307c <HAL_I2C_MspInit+0xa8>)
 800303c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003040:	6413      	str	r3, [r2, #64]	@ 0x40
 8003042:	4b0e      	ldr	r3, [pc, #56]	@ (800307c <HAL_I2C_MspInit+0xa8>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	2105      	movs	r1, #5
 8003052:	201f      	movs	r0, #31
 8003054:	f003 fb11 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003058:	201f      	movs	r0, #31
 800305a:	f003 fb2a 	bl	80066b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800305e:	2200      	movs	r2, #0
 8003060:	2105      	movs	r1, #5
 8003062:	2020      	movs	r0, #32
 8003064:	f003 fb09 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003068:	2020      	movs	r0, #32
 800306a:	f003 fb22 	bl	80066b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800306e:	bf00      	nop
 8003070:	3728      	adds	r7, #40	@ 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40005400 	.word	0x40005400
 800307c:	40023800 	.word	0x40023800
 8003080:	40020400 	.word	0x40020400

08003084 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // Change your handler here accordingly
#define SLAVE_ADDRESS_LCD 0x4E    // Change this according to your setup
extern osMutexId_t lcdMutexHandle;
extern osSemaphoreId_t uartRxSemaphoreHandle;

void lcd_send_cmd(char cmd) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af02      	add	r7, sp, #8
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xF0);
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	f023 030f 	bic.w	r3, r3, #15
 8003094:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xF0);
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C;  // EN=1, RS=0
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	f043 030c 	orr.w	r3, r3, #12
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;  // EN=0, RS=0
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	f043 0308 	orr.w	r3, r3, #8
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C;  // EN=1, RS=0
 80030b0:	7bbb      	ldrb	r3, [r7, #14]
 80030b2:	f043 030c 	orr.w	r3, r3, #12
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;  // EN=0, RS=0
 80030ba:	7bbb      	ldrb	r3, [r7, #14]
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80030c4:	f107 0208 	add.w	r2, r7, #8
 80030c8:	2364      	movs	r3, #100	@ 0x64
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2304      	movs	r3, #4
 80030ce:	214e      	movs	r1, #78	@ 0x4e
 80030d0:	4803      	ldr	r0, [pc, #12]	@ (80030e0 <lcd_send_cmd+0x5c>)
 80030d2:	f004 fa73 	bl	80075bc <HAL_I2C_Master_Transmit>
}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000868 	.word	0x20000868

080030e4 <lcd_send_data>:

void lcd_send_data(char data) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xF0);
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	f023 030f 	bic.w	r3, r3, #15
 80030f4:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xF0);
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D;  // EN=1, RS=1
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	f043 030d 	orr.w	r3, r3, #13
 8003102:	b2db      	uxtb	r3, r3
 8003104:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  // EN=0, RS=1
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	f043 0309 	orr.w	r3, r3, #9
 800310c:	b2db      	uxtb	r3, r3
 800310e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  // EN=1, RS=1
 8003110:	7bbb      	ldrb	r3, [r7, #14]
 8003112:	f043 030d 	orr.w	r3, r3, #13
 8003116:	b2db      	uxtb	r3, r3
 8003118:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  // EN=0, RS=1
 800311a:	7bbb      	ldrb	r3, [r7, #14]
 800311c:	f043 0309 	orr.w	r3, r3, #9
 8003120:	b2db      	uxtb	r3, r3
 8003122:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8003124:	f107 0208 	add.w	r2, r7, #8
 8003128:	2364      	movs	r3, #100	@ 0x64
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2304      	movs	r3, #4
 800312e:	214e      	movs	r1, #78	@ 0x4e
 8003130:	4803      	ldr	r0, [pc, #12]	@ (8003140 <lcd_send_data+0x5c>)
 8003132:	f004 fa43 	bl	80075bc <HAL_I2C_Master_Transmit>
}
 8003136:	bf00      	nop
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000868 	.word	0x20000868

08003144 <lcd_clear>:

void lcd_clear(void) {
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
    osMutexAcquire(lcdMutexHandle, osWaitForever);
 8003148:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <lcd_clear+0x2c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f04f 31ff 	mov.w	r1, #4294967295
 8003150:	4618      	mov	r0, r3
 8003152:	f008 ff6c 	bl	800c02e <osMutexAcquire>
    lcd_send_cmd(0x01);  // Clear display
 8003156:	2001      	movs	r0, #1
 8003158:	f7ff ff94 	bl	8003084 <lcd_send_cmd>
    HAL_Delay(2);        // Delay for clearing
 800315c:	2002      	movs	r0, #2
 800315e:	f002 fc55 	bl	8005a0c <HAL_Delay>
    osMutexRelease(lcdMutexHandle);
 8003162:	4b03      	ldr	r3, [pc, #12]	@ (8003170 <lcd_clear+0x2c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f008 ffac 	bl	800c0c4 <osMutexRelease>
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000758 	.word	0x20000758

08003174 <lcd_put_cur>:

void lcd_put_cur(int row, int col) {
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
    int row_offsets[] = {0x00, 0x40, 0x14, 0x54}; // Line offsets for 20x04 LCD
 800317e:	4b0e      	ldr	r3, [pc, #56]	@ (80031b8 <lcd_put_cur+0x44>)
 8003180:	f107 0408 	add.w	r4, r7, #8
 8003184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lcd_send_cmd(0x80 | (col + row_offsets[row])); // Set DDRAM address
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	3318      	adds	r3, #24
 8003190:	443b      	add	r3, r7
 8003192:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	4413      	add	r3, r2
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	b25b      	sxtb	r3, r3
 80031a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031a6:	b25b      	sxtb	r3, r3
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ff6a 	bl	8003084 <lcd_send_cmd>
}
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd90      	pop	{r4, r7, pc}
 80031b8:	080157f4 	.word	0x080157f4

080031bc <lcd_init>:

void lcd_init(void) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
    HAL_Delay(50);        // Wait for >40ms
 80031c0:	2032      	movs	r0, #50	@ 0x32
 80031c2:	f002 fc23 	bl	8005a0c <HAL_Delay>
    lcd_send_cmd(0x33);   // Initialization sequence for 4-bit mode
 80031c6:	2033      	movs	r0, #51	@ 0x33
 80031c8:	f7ff ff5c 	bl	8003084 <lcd_send_cmd>
    HAL_Delay(5);         // Wait for >4.1ms
 80031cc:	2005      	movs	r0, #5
 80031ce:	f002 fc1d 	bl	8005a0c <HAL_Delay>
    lcd_send_cmd(0x32);   // Initialization sequence for 4-bit mode
 80031d2:	2032      	movs	r0, #50	@ 0x32
 80031d4:	f7ff ff56 	bl	8003084 <lcd_send_cmd>
    HAL_Delay(1);         // Wait for >100us
 80031d8:	2001      	movs	r0, #1
 80031da:	f002 fc17 	bl	8005a0c <HAL_Delay>

    // Display initialization
    lcd_send_cmd(0x28);   // Function set: DL=0 (4-bit mode), N=2 (2 lines), F=0 (5x8 dots)
 80031de:	2028      	movs	r0, #40	@ 0x28
 80031e0:	f7ff ff50 	bl	8003084 <lcd_send_cmd>
    HAL_Delay(1);
 80031e4:	2001      	movs	r0, #1
 80031e6:	f002 fc11 	bl	8005a0c <HAL_Delay>
    lcd_send_cmd(0x08);   // Display on/off control: D=0, C=0, B=0 (Display off)
 80031ea:	2008      	movs	r0, #8
 80031ec:	f7ff ff4a 	bl	8003084 <lcd_send_cmd>
    HAL_Delay(1);
 80031f0:	2001      	movs	r0, #1
 80031f2:	f002 fc0b 	bl	8005a0c <HAL_Delay>
    lcd_send_cmd(0x01);   // Clear display
 80031f6:	2001      	movs	r0, #1
 80031f8:	f7ff ff44 	bl	8003084 <lcd_send_cmd>
    HAL_Delay(2);
 80031fc:	2002      	movs	r0, #2
 80031fe:	f002 fc05 	bl	8005a0c <HAL_Delay>
    lcd_send_cmd(0x06);   // Entry mode set: I/D=1 (Increment), S=0 (No shift)
 8003202:	2006      	movs	r0, #6
 8003204:	f7ff ff3e 	bl	8003084 <lcd_send_cmd>
    HAL_Delay(1);
 8003208:	2001      	movs	r0, #1
 800320a:	f002 fbff 	bl	8005a0c <HAL_Delay>
    lcd_send_cmd(0x0C);   // Display on/off control: D=1, C=0, B=0 (Display on, cursor off, blink off)
 800320e:	200c      	movs	r0, #12
 8003210:	f7ff ff38 	bl	8003084 <lcd_send_cmd>
}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}

08003218 <lcd_send_string>:

void lcd_send_string(char *str) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
    osMutexAcquire(lcdMutexHandle, osWaitForever);
 8003220:	4b0d      	ldr	r3, [pc, #52]	@ (8003258 <lcd_send_string+0x40>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f04f 31ff 	mov.w	r1, #4294967295
 8003228:	4618      	mov	r0, r3
 800322a:	f008 ff00 	bl	800c02e <osMutexAcquire>
    while (*str) {
 800322e:	e006      	b.n	800323e <lcd_send_string+0x26>
        lcd_send_data(*str++);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff53 	bl	80030e4 <lcd_send_data>
    while (*str) {
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f4      	bne.n	8003230 <lcd_send_string+0x18>
    }
    osMutexRelease(lcdMutexHandle);
 8003246:	4b04      	ldr	r3, [pc, #16]	@ (8003258 <lcd_send_string+0x40>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f008 ff3a 	bl	800c0c4 <osMutexRelease>
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000758 	.word	0x20000758

0800325c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003260:	f002 fb62 	bl	8005928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003264:	f000 f820 	bl	80032a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003268:	f7ff fd76 	bl	8002d58 <MX_GPIO_Init>
  MX_DMA_ADC_Init();
 800326c:	f7fe fcd8 	bl	8001c20 <MX_DMA_ADC_Init>
  MX_DMA_UART_Init();
 8003270:	f002 fa7a 	bl	8005768 <MX_DMA_UART_Init>
  MX_ADC1_Init();
 8003274:	f7fe fc52 	bl	8001b1c <MX_ADC1_Init>
  MX_I2C1_Init();
 8003278:	f7ff fe7e 	bl	8002f78 <MX_I2C1_Init>
  MX_TIM1_Init();
 800327c:	f001 ffd2 	bl	8005224 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003280:	f002 f820 	bl	80052c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003284:	f002 f86a 	bl	800535c <MX_TIM3_Init>
  MX_TIM4_Init();
 8003288:	f002 f8b6 	bl	80053f8 <MX_TIM4_Init>
  MX_TIM5_Init();
 800328c:	f002 f902 	bl	8005494 <MX_TIM5_Init>
  MX_TIM6_Init();
 8003290:	f002 f94e 	bl	8005530 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8003294:	f002 fa3e 	bl	8005714 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003298:	f008 fd4c 	bl	800bd34 <osKernelInitialize>

  MX_FREERTOS_Init();
 800329c:	f7ff fcfc 	bl	8002c98 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80032a0:	f008 fd6c 	bl	800bd7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80032a4:	bf00      	nop
 80032a6:	e7fd      	b.n	80032a4 <main+0x48>

080032a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b094      	sub	sp, #80	@ 0x50
 80032ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ae:	f107 0320 	add.w	r3, r7, #32
 80032b2:	2230      	movs	r2, #48	@ 0x30
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f00d faf1 	bl	801089e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032bc:	f107 030c 	add.w	r3, r7, #12
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032cc:	2300      	movs	r3, #0
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	4b28      	ldr	r3, [pc, #160]	@ (8003374 <SystemClock_Config+0xcc>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	4a27      	ldr	r2, [pc, #156]	@ (8003374 <SystemClock_Config+0xcc>)
 80032d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032da:	6413      	str	r3, [r2, #64]	@ 0x40
 80032dc:	4b25      	ldr	r3, [pc, #148]	@ (8003374 <SystemClock_Config+0xcc>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032e8:	2300      	movs	r3, #0
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	4b22      	ldr	r3, [pc, #136]	@ (8003378 <SystemClock_Config+0xd0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a21      	ldr	r2, [pc, #132]	@ (8003378 <SystemClock_Config+0xd0>)
 80032f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003378 <SystemClock_Config+0xd0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003304:	2301      	movs	r3, #1
 8003306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003308:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800330e:	2302      	movs	r3, #2
 8003310:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003312:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003318:	2304      	movs	r3, #4
 800331a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800331c:	23a8      	movs	r3, #168	@ 0xa8
 800331e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003320:	2302      	movs	r3, #2
 8003322:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003324:	2304      	movs	r3, #4
 8003326:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003328:	f107 0320 	add.w	r3, r7, #32
 800332c:	4618      	mov	r0, r3
 800332e:	f006 f98b 	bl	8009648 <HAL_RCC_OscConfig>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003338:	f000 f84a 	bl	80033d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800333c:	230f      	movs	r3, #15
 800333e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003340:	2302      	movs	r3, #2
 8003342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003348:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800334c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800334e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003352:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003354:	f107 030c 	add.w	r3, r7, #12
 8003358:	2105      	movs	r1, #5
 800335a:	4618      	mov	r0, r3
 800335c:	f006 fbec 	bl	8009b38 <HAL_RCC_ClockConfig>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003366:	f000 f833 	bl	80033d0 <Error_Handler>
  }
}
 800336a:	bf00      	nop
 800336c:	3750      	adds	r7, #80	@ 0x50
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800
 8003378:	40007000 	.word	0x40007000

0800337c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

	  if(htim->Instance == TIM2){
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338c:	d102      	bne.n	8003394 <HAL_TIM_PeriodElapsedCallback+0x18>
		  Accel_Stepper_TIMIT_Handler(&Stepper1);
 800338e:	480b      	ldr	r0, [pc, #44]	@ (80033bc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003390:	f7fd fe62 	bl	8001058 <Accel_Stepper_TIMIT_Handler>
	  }
	  if(htim->Instance == TIM3){
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a09      	ldr	r2, [pc, #36]	@ (80033c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d102      	bne.n	80033a4 <HAL_TIM_PeriodElapsedCallback+0x28>
		  Accel_Stepper_TIMIT_Handler(&Stepper2);
 800339e:	4809      	ldr	r0, [pc, #36]	@ (80033c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80033a0:	f7fd fe5a 	bl	8001058 <Accel_Stepper_TIMIT_Handler>
	  }
	  if(htim->Instance == TIM4){
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a07      	ldr	r2, [pc, #28]	@ (80033c8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d102      	bne.n	80033b4 <HAL_TIM_PeriodElapsedCallback+0x38>
		  Accel_Stepper_TIMIT_Handler(&Stepper3);
 80033ae:	4807      	ldr	r0, [pc, #28]	@ (80033cc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80033b0:	f7fd fe52 	bl	8001058 <Accel_Stepper_TIMIT_Handler>
	  }
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	200002b0 	.word	0x200002b0
 80033c0:	40000400 	.word	0x40000400
 80033c4:	20000310 	.word	0x20000310
 80033c8:	40000800 	.word	0x40000800
 80033cc:	20000370 	.word	0x20000370

080033d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033d4:	b672      	cpsid	i
}
 80033d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033d8:	bf00      	nop
 80033da:	e7fd      	b.n	80033d8 <Error_Handler+0x8>

080033dc <initialize_LCD>:
const int numButtons = sizeof(buttons) / sizeof(Button*);

float l,m,k;

void initialize_LCD(LCD_adc_t *lcd)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	lcd->sensitivity = 0.066;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003420 <initialize_LCD+0x44>)
 80033e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	lcd->ACSoffset=2.5;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003424 <initialize_LCD+0x48>)
 80033f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	lcd->m = 0.4;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003428 <initialize_LCD+0x4c>)
 80033f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	lcd->C = 2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	lcd->V25 = 0.0025;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a08      	ldr	r2, [pc, #32]	@ (800342c <initialize_LCD+0x50>)
 800340a:	675a      	str	r2, [r3, #116]	@ 0x74
	lcd->Avg_Slope = 0.76;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a08      	ldr	r2, [pc, #32]	@ (8003430 <initialize_LCD+0x54>)
 8003410:	679a      	str	r2, [r3, #120]	@ 0x78
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	3d872b02 	.word	0x3d872b02
 8003424:	40200000 	.word	0x40200000
 8003428:	3ecccccd 	.word	0x3ecccccd
 800342c:	3b23d70a 	.word	0x3b23d70a
 8003430:	3f428f5c 	.word	0x3f428f5c

08003434 <initialize_Kalman>:

void initialize_Kalman(Kalman_filter *kf)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
    kf->N = 10;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	220a      	movs	r2, #10
 8003440:	601a      	str	r2, [r3, #0]
    kf->ema_filtered_value = 0.0f;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
    kf->Q = KALMAN_Q;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a17      	ldr	r2, [pc, #92]	@ (80034ac <initialize_Kalman+0x78>)
 800344e:	61da      	str	r2, [r3, #28]
    kf->R = KALMAN_R;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a17      	ldr	r2, [pc, #92]	@ (80034b0 <initialize_Kalman+0x7c>)
 8003454:	621a      	str	r2, [r3, #32]
    kf->Kg = 0.0f;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	625a      	str	r2, [r3, #36]	@ 0x24
    kf->P_k_k1 = 1.0f;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003464:	629a      	str	r2, [r3, #40]	@ 0x28
    kf->kalman_adc_old = 0.0f;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->index = 0;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	649a      	str	r2, [r3, #72]	@ 0x48
    kf->sum = 0;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	64da      	str	r2, [r3, #76]	@ 0x4c
    for (int i = 0; i < kf->N; ++i) {
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e009      	b.n	8003494 <initialize_Kalman+0x60>
        kf->buffer[i] = 0;
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	3318      	adds	r3, #24
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	2200      	movs	r2, #0
 800348c:	809a      	strh	r2, [r3, #4]
    for (int i = 0; i < kf->N; ++i) {
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3301      	adds	r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	429a      	cmp	r2, r3
 800349c:	dbf0      	blt.n	8003480 <initialize_Kalman+0x4c>
    }
}
 800349e:	bf00      	nop
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	38d1b717 	.word	0x38d1b717
 80034b0:	3dcccccd 	.word	0x3dcccccd

080034b4 <delay_lcd>:


void delay_lcd(uint16_t delay)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim6);
 80034be:	480a      	ldr	r0, [pc, #40]	@ (80034e8 <delay_lcd+0x34>)
 80034c0:	f006 fdaa 	bl	800a018 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80034c4:	4b08      	ldr	r3, [pc, #32]	@ (80034e8 <delay_lcd+0x34>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2200      	movs	r2, #0
 80034ca:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < delay);
 80034cc:	bf00      	nop
 80034ce:	4b06      	ldr	r3, [pc, #24]	@ (80034e8 <delay_lcd+0x34>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d3f9      	bcc.n	80034ce <delay_lcd+0x1a>
	HAL_TIM_Base_Stop_IT(&htim6);
 80034da:	4803      	ldr	r0, [pc, #12]	@ (80034e8 <delay_lcd+0x34>)
 80034dc:	f006 fe0c 	bl	800a0f8 <HAL_TIM_Base_Stop_IT>
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20000b9c 	.word	0x20000b9c

080034ec <stepX>:

void stepX(int steps, uint8_t direction, uint16_t delay)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
 80034f8:	4613      	mov	r3, r2
 80034fa:	803b      	strh	r3, [r7, #0]
    int a;
    HAL_GPIO_WritePin(dir_1_GPIO_Port, dir_1_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bf0c      	ite	eq
 8003502:	2301      	moveq	r3, #1
 8003504:	2300      	movne	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	461a      	mov	r2, r3
 800350a:	2102      	movs	r1, #2
 800350c:	480c      	ldr	r0, [pc, #48]	@ (8003540 <stepX+0x54>)
 800350e:	f003 feaf 	bl	8007270 <HAL_GPIO_WritePin>
    for (a = 0; a < steps; ++a)
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	e00a      	b.n	800352e <stepX+0x42>
    {
        HAL_GPIO_TogglePin(step_1_GPIO_Port, step_1_pin);
 8003518:	2101      	movs	r1, #1
 800351a:	4809      	ldr	r0, [pc, #36]	@ (8003540 <stepX+0x54>)
 800351c:	f003 fec1 	bl	80072a2 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 8003520:	883b      	ldrh	r3, [r7, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ffc6 	bl	80034b4 <delay_lcd>
    for (a = 0; a < steps; ++a)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3301      	adds	r3, #1
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	dbf0      	blt.n	8003518 <stepX+0x2c>
    }
}
 8003536:	bf00      	nop
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40020000 	.word	0x40020000

08003544 <stepY>:

void stepY(int steps, uint8_t direction, uint16_t delay)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
 8003550:	4613      	mov	r3, r2
 8003552:	803b      	strh	r3, [r7, #0]
    int b;
    HAL_GPIO_WritePin(dir_2_GPIO_Port, dir_2_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	2b00      	cmp	r3, #0
 8003558:	bf0c      	ite	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	2300      	movne	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	461a      	mov	r2, r3
 8003562:	2108      	movs	r1, #8
 8003564:	480c      	ldr	r0, [pc, #48]	@ (8003598 <stepY+0x54>)
 8003566:	f003 fe83 	bl	8007270 <HAL_GPIO_WritePin>
    for (b = 0; b < steps; ++b)
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e00a      	b.n	8003586 <stepY+0x42>
    {
        HAL_GPIO_TogglePin(step_2_GPIO_Port, step_2_pin);
 8003570:	2104      	movs	r1, #4
 8003572:	4809      	ldr	r0, [pc, #36]	@ (8003598 <stepY+0x54>)
 8003574:	f003 fe95 	bl	80072a2 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 8003578:	883b      	ldrh	r3, [r7, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff ff9a 	bl	80034b4 <delay_lcd>
    for (b = 0; b < steps; ++b)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3301      	adds	r3, #1
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	429a      	cmp	r2, r3
 800358c:	dbf0      	blt.n	8003570 <stepY+0x2c>
    }
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40020000 	.word	0x40020000

0800359c <stepZ>:

void stepZ(int steps, uint8_t direction, uint16_t delay)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	70fb      	strb	r3, [r7, #3]
 80035a8:	4613      	mov	r3, r2
 80035aa:	803b      	strh	r3, [r7, #0]
    int c;
    HAL_GPIO_WritePin(dir_3_GPIO_Port, dir_3_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	2120      	movs	r1, #32
 80035bc:	480c      	ldr	r0, [pc, #48]	@ (80035f0 <stepZ+0x54>)
 80035be:	f003 fe57 	bl	8007270 <HAL_GPIO_WritePin>
    for (c = 0; c < steps; ++c)
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	e00a      	b.n	80035de <stepZ+0x42>
    {
        HAL_GPIO_TogglePin(step_3_GPIO_Port, step_3_pin);
 80035c8:	2110      	movs	r1, #16
 80035ca:	4809      	ldr	r0, [pc, #36]	@ (80035f0 <stepZ+0x54>)
 80035cc:	f003 fe69 	bl	80072a2 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 80035d0:	883b      	ldrh	r3, [r7, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff6e 	bl	80034b4 <delay_lcd>
    for (c = 0; c < steps; ++c)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	dbf0      	blt.n	80035c8 <stepZ+0x2c>
    }
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40020000 	.word	0x40020000

080035f4 <moving_average_filter>:

uint16_t moving_average_filter(Kalman_filter *kf, uint16_t ADC_Value)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
    kf->sum -= kf->buffer[kf->index];
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	3318      	adds	r3, #24
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	440b      	add	r3, r1
 8003610:	889b      	ldrh	r3, [r3, #4]
 8003612:	1ad2      	subs	r2, r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	64da      	str	r2, [r3, #76]	@ 0x4c
    kf->buffer[kf->index] = ADC_Value;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	3318      	adds	r3, #24
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	887a      	ldrh	r2, [r7, #2]
 8003626:	809a      	strh	r2, [r3, #4]
    kf->sum += kf->buffer[kf->index];
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	3318      	adds	r3, #24
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	440b      	add	r3, r1
 8003638:	889b      	ldrh	r3, [r3, #4]
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	64da      	str	r2, [r3, #76]	@ 0x4c

    kf->index = (kf->index + 1) % kf->N;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003644:	3301      	adds	r3, #1
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	fb93 f1f2 	sdiv	r1, r3, r2
 800364e:	fb01 f202 	mul.w	r2, r1, r2
 8003652:	1a9a      	subs	r2, r3, r2
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	649a      	str	r2, [r3, #72]	@ 0x48

    return (uint16_t)(kf->sum / kf->N);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	fbb3 f3f2 	udiv	r3, r3, r2
 8003664:	b29b      	uxth	r3, r3
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <exponential_moving_average_filter>:

uint16_t exponential_moving_average_filter(Kalman_filter *kf, uint16_t ADC_Value, float alpha)
{
 8003672:	b480      	push	{r7}
 8003674:	b085      	sub	sp, #20
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	460b      	mov	r3, r1
 800367c:	ed87 0a01 	vstr	s0, [r7, #4]
 8003680:	817b      	strh	r3, [r7, #10]
    kf->ema_filtered_value = (alpha * ADC_Value) + ((1 - alpha) * kf->ema_filtered_value);
 8003682:	897b      	ldrh	r3, [r7, #10]
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800368c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003694:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003698:	edd7 7a01 	vldr	s15, [r7, #4]
 800369c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80036a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	edc3 7a02 	vstr	s15, [r3, #8]
    return (uint16_t)kf->ema_filtered_value;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80036ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036be:	ee17 3a90 	vmov	r3, s15
 80036c2:	b29b      	uxth	r3, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <kalman_filter>:

uint16_t kalman_filter(Kalman_filter *kf, uint16_t ADC_Value)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	807b      	strh	r3, [r7, #2]
    kf->Z_k = (float)ADC_Value;
 80036dc:	887b      	ldrh	r3, [r7, #2]
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->x_k1_k1 = kf->kalman_adc_old;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	60da      	str	r2, [r3, #12]

    kf->x_k_k1 = kf->x_k1_k1;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	611a      	str	r2, [r3, #16]
    kf->P_k_k1 = kf->P_k1_k1 + kf->Q;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	ed93 7a06 	vldr	s14, [r3, #24]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	edd3 7a07 	vldr	s15, [r3, #28]
 8003708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    kf->Kg = kf->P_k_k1 / (kf->P_k_k1 + kf->R);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	edd3 7a08 	vldr	s15, [r3, #32]
 8003724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    kf->kalman_adc = kf->x_k_k1 + kf->Kg * (kf->Z_k - kf->kalman_adc_old);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	ed93 7a04 	vldr	s14, [r3, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	ed93 6a05 	vldr	s12, [r3, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800374a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800374e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    kf->P_k1_k1 = (1 - kf->Kg) * kf->P_k_k1;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003762:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003766:	ee37 7a67 	vsub.f32	s14, s14, s15
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	edc3 7a06 	vstr	s15, [r3, #24]

    kf->kalman_adc_old = kf->kalman_adc;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	631a      	str	r2, [r3, #48]	@ 0x30

    return (uint16_t)kf->kalman_adc;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800378c:	ee17 3a90 	vmov	r3, s15
 8003790:	b29b      	uxth	r3, r3
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <vol_messure>:

void vol_messure(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
    ADC_Select_CH10();  
 80037a6:	f7fe f9fb 	bl	8001ba0 <ADC_Select_CH10>
    HAL_ADC_Start(&hadc1);
 80037aa:	483f      	ldr	r0, [pc, #252]	@ (80038a8 <vol_messure+0x108>)
 80037ac:	f002 f996 	bl	8005adc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 80037b0:	2101      	movs	r1, #1
 80037b2:	483d      	ldr	r0, [pc, #244]	@ (80038a8 <vol_messure+0x108>)
 80037b4:	f002 fa97 	bl	8005ce6 <HAL_ADC_PollForConversion>
    LCD_adc.readValue[0] = HAL_ADC_GetValue(&hadc1);
 80037b8:	483b      	ldr	r0, [pc, #236]	@ (80038a8 <vol_messure+0x108>)
 80037ba:	f002 fc2f 	bl	800601c <HAL_ADC_GetValue>
 80037be:	4603      	mov	r3, r0
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	4b3a      	ldr	r3, [pc, #232]	@ (80038ac <vol_messure+0x10c>)
 80037c4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    uint16_t moving_avg_filtered = moving_average_filter(&kalman_fil_volt, LCD_adc.readValue[0]); // Apply moving average filter
 80037c8:	4b38      	ldr	r3, [pc, #224]	@ (80038ac <vol_messure+0x10c>)
 80037ca:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80037ce:	4619      	mov	r1, r3
 80037d0:	4837      	ldr	r0, [pc, #220]	@ (80038b0 <vol_messure+0x110>)
 80037d2:	f7ff ff0f 	bl	80035f4 <moving_average_filter>
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
    uint16_t ema_filtered = exponential_moving_average_filter(&kalman_fil_volt, moving_avg_filtered, EMA_ALPHA_VOLT); // Apply EMA filter
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80038b4 <vol_messure+0x114>
 80037e0:	4619      	mov	r1, r3
 80037e2:	4833      	ldr	r0, [pc, #204]	@ (80038b0 <vol_messure+0x110>)
 80037e4:	f7ff ff45 	bl	8003672 <exponential_moving_average_filter>
 80037e8:	4603      	mov	r3, r0
 80037ea:	80bb      	strh	r3, [r7, #4]
    kalman_fil_volt.filter_kal = kalman_filter(&kalman_fil_volt, ema_filtered); // Apply Kalman filter
 80037ec:	88bb      	ldrh	r3, [r7, #4]
 80037ee:	4619      	mov	r1, r3
 80037f0:	482f      	ldr	r0, [pc, #188]	@ (80038b0 <vol_messure+0x110>)
 80037f2:	f7ff ff6d 	bl	80036d0 <kalman_filter>
 80037f6:	4603      	mov	r3, r0
 80037f8:	461a      	mov	r2, r3
 80037fa:	4b2d      	ldr	r3, [pc, #180]	@ (80038b0 <vol_messure+0x110>)
 80037fc:	809a      	strh	r2, [r3, #4]

    LCD_adc.volt = ((float)kalman_fil_volt.filter_kal / 4095) * 3.6f;
 80037fe:	4b2c      	ldr	r3, [pc, #176]	@ (80038b0 <vol_messure+0x110>)
 8003800:	889b      	ldrh	r3, [r3, #4]
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800380a:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80038b8 <vol_messure+0x118>
 800380e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003812:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80038bc <vol_messure+0x11c>
 8003816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800381a:	4b24      	ldr	r3, [pc, #144]	@ (80038ac <vol_messure+0x10c>)
 800381c:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
    LCD_adc.sum = (LCD_adc.volt * 6.5f) + 0.2f;
 8003820:	4b22      	ldr	r3, [pc, #136]	@ (80038ac <vol_messure+0x10c>)
 8003822:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8003826:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 800382a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800382e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80038c0 <vol_messure+0x120>
 8003832:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003836:	4b1d      	ldr	r3, [pc, #116]	@ (80038ac <vol_messure+0x10c>)
 8003838:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (LCD_adc.sum > 16.3 && LCD_adc.sum < 21)
 800383c:	4b1b      	ldr	r3, [pc, #108]	@ (80038ac <vol_messure+0x10c>)
 800383e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003840:	4618      	mov	r0, r3
 8003842:	f7fc fe91 	bl	8000568 <__aeabi_f2d>
 8003846:	a316      	add	r3, pc, #88	@ (adr r3, 80038a0 <vol_messure+0x100>)
 8003848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384c:	f7fd f974 	bl	8000b38 <__aeabi_dcmpgt>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00d      	beq.n	8003872 <vol_messure+0xd2>
 8003856:	4b15      	ldr	r3, [pc, #84]	@ (80038ac <vol_messure+0x10c>)
 8003858:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800385c:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 8003860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003868:	d503      	bpl.n	8003872 <vol_messure+0xd2>
        LCD_adc.voltage = LCD_adc.sum; // Default value when no voltage exceeds the threshold
 800386a:	4b10      	ldr	r3, [pc, #64]	@ (80038ac <vol_messure+0x10c>)
 800386c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386e:	4a0f      	ldr	r2, [pc, #60]	@ (80038ac <vol_messure+0x10c>)
 8003870:	6553      	str	r3, [r2, #84]	@ 0x54
    if (LCD_adc.sum < 14)
 8003872:	4b0e      	ldr	r3, [pc, #56]	@ (80038ac <vol_messure+0x10c>)
 8003874:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003878:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 800387c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003884:	d503      	bpl.n	800388e <vol_messure+0xee>
        LCD_adc.voltage = 0;
 8003886:	4b09      	ldr	r3, [pc, #36]	@ (80038ac <vol_messure+0x10c>)
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_Stop(&hadc1);
 800388e:	4806      	ldr	r0, [pc, #24]	@ (80038a8 <vol_messure+0x108>)
 8003890:	f002 f9f6 	bl	8005c80 <HAL_ADC_Stop>
}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	f3af 8000 	nop.w
 80038a0:	cccccccd 	.word	0xcccccccd
 80038a4:	40304ccc 	.word	0x40304ccc
 80038a8:	200003d0 	.word	0x200003d0
 80038ac:	200008bc 	.word	0x200008bc
 80038b0:	200009d8 	.word	0x200009d8
 80038b4:	3c23d70a 	.word	0x3c23d70a
 80038b8:	457ff000 	.word	0x457ff000
 80038bc:	40666666 	.word	0x40666666
 80038c0:	3e4ccccd 	.word	0x3e4ccccd
 80038c4:	00000000 	.word	0x00000000

080038c8 <cur_messure>:

void cur_messure(void)
{
 80038c8:	b5b0      	push	{r4, r5, r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
    ADC_Select_CH11();
 80038ce:	f7fe f987 	bl	8001be0 <ADC_Select_CH11>
    HAL_ADC_Start(&hadc1);
 80038d2:	4859      	ldr	r0, [pc, #356]	@ (8003a38 <cur_messure+0x170>)
 80038d4:	f002 f902 	bl	8005adc <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 80038d8:	2101      	movs	r1, #1
 80038da:	4857      	ldr	r0, [pc, #348]	@ (8003a38 <cur_messure+0x170>)
 80038dc:	f002 fa03 	bl	8005ce6 <HAL_ADC_PollForConversion>
    LCD_adc.readValue[1] = HAL_ADC_GetValue(&hadc1);
 80038e0:	4855      	ldr	r0, [pc, #340]	@ (8003a38 <cur_messure+0x170>)
 80038e2:	f002 fb9b 	bl	800601c <HAL_ADC_GetValue>
 80038e6:	4603      	mov	r3, r0
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	4b54      	ldr	r3, [pc, #336]	@ (8003a3c <cur_messure+0x174>)
 80038ec:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    uint16_t moving_avg_filtered = moving_average_filter(&kalman_fil_curr, LCD_adc.readValue[1]); // Apply moving average filter
 80038f0:	4b52      	ldr	r3, [pc, #328]	@ (8003a3c <cur_messure+0x174>)
 80038f2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80038f6:	4619      	mov	r1, r3
 80038f8:	4851      	ldr	r0, [pc, #324]	@ (8003a40 <cur_messure+0x178>)
 80038fa:	f7ff fe7b 	bl	80035f4 <moving_average_filter>
 80038fe:	4603      	mov	r3, r0
 8003900:	80fb      	strh	r3, [r7, #6]
    uint16_t ema_filtered = exponential_moving_average_filter(&kalman_fil_curr, moving_avg_filtered, EMA_ALPHA_CURR); // Apply EMA filter
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8003a44 <cur_messure+0x17c>
 8003908:	4619      	mov	r1, r3
 800390a:	484d      	ldr	r0, [pc, #308]	@ (8003a40 <cur_messure+0x178>)
 800390c:	f7ff feb1 	bl	8003672 <exponential_moving_average_filter>
 8003910:	4603      	mov	r3, r0
 8003912:	80bb      	strh	r3, [r7, #4]
    kalman_fil_curr.filter_kal = kalman_filter(&kalman_fil_curr, ema_filtered); // Apply Kalman filter
 8003914:	88bb      	ldrh	r3, [r7, #4]
 8003916:	4619      	mov	r1, r3
 8003918:	4849      	ldr	r0, [pc, #292]	@ (8003a40 <cur_messure+0x178>)
 800391a:	f7ff fed9 	bl	80036d0 <kalman_filter>
 800391e:	4603      	mov	r3, r0
 8003920:	461a      	mov	r2, r3
 8003922:	4b47      	ldr	r3, [pc, #284]	@ (8003a40 <cur_messure+0x178>)
 8003924:	809a      	strh	r2, [r3, #4]
    //    LCD_adc.sum1 = 0.0000002f * kalman_fil_curr.filter_kal_cur * kalman_fil_curr.filter_kal_cur - 0.0114f * kalman_fil_curr.filter_kal_cur + 35.5522898f -0.43 -  0.277999997; //- 0.897746623 + 0.105 + 0.085 - 0.02
    //    if (LCD_adc.sum1 > 0.43 && LCD_adc.sum1 < 15) LCD_adc.current = LCD_adc.sum1;
    //    if (LCD_adc.sum1 < 0.43) LCD_adc.current = 0;
    //    LCD_adc.Temp = ((3.3 * kalman_fil_curr.filter_kal_cur / 4095 - LCD_adc.V25) / LCD_adc.Avg_Slope) + 25;
    	// Calculate CURRENT using the cubic polynomial equation
    LCD_adc.sum1 = 0.00000009 * kalman_fil_curr.filter_kal * kalman_fil_curr.filter_kal + 0.0102 * kalman_fil_curr.filter_kal - 34.52249168 + l ;
 8003926:	4b46      	ldr	r3, [pc, #280]	@ (8003a40 <cur_messure+0x178>)
 8003928:	889b      	ldrh	r3, [r3, #4]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fc fe0a 	bl	8000544 <__aeabi_i2d>
 8003930:	a33b      	add	r3, pc, #236	@ (adr r3, 8003a20 <cur_messure+0x158>)
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f7fc fe6f 	bl	8000618 <__aeabi_dmul>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4614      	mov	r4, r2
 8003940:	461d      	mov	r5, r3
 8003942:	4b3f      	ldr	r3, [pc, #252]	@ (8003a40 <cur_messure+0x178>)
 8003944:	889b      	ldrh	r3, [r3, #4]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fc fdfc 	bl	8000544 <__aeabi_i2d>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4620      	mov	r0, r4
 8003952:	4629      	mov	r1, r5
 8003954:	f7fc fe60 	bl	8000618 <__aeabi_dmul>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4614      	mov	r4, r2
 800395e:	461d      	mov	r5, r3
 8003960:	4b37      	ldr	r3, [pc, #220]	@ (8003a40 <cur_messure+0x178>)
 8003962:	889b      	ldrh	r3, [r3, #4]
 8003964:	4618      	mov	r0, r3
 8003966:	f7fc fded 	bl	8000544 <__aeabi_i2d>
 800396a:	a32f      	add	r3, pc, #188	@ (adr r3, 8003a28 <cur_messure+0x160>)
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f7fc fe52 	bl	8000618 <__aeabi_dmul>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4620      	mov	r0, r4
 800397a:	4629      	mov	r1, r5
 800397c:	f7fc fc96 	bl	80002ac <__adddf3>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	a329      	add	r3, pc, #164	@ (adr r3, 8003a30 <cur_messure+0x168>)
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	f7fc fc8b 	bl	80002a8 <__aeabi_dsub>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4614      	mov	r4, r2
 8003998:	461d      	mov	r5, r3
 800399a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a48 <cur_messure+0x180>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fc fde2 	bl	8000568 <__aeabi_f2d>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4620      	mov	r0, r4
 80039aa:	4629      	mov	r1, r5
 80039ac:	f7fc fc7e 	bl	80002ac <__adddf3>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	f7fd f926 	bl	8000c08 <__aeabi_d2f>
 80039bc:	4603      	mov	r3, r0
 80039be:	4a1f      	ldr	r2, [pc, #124]	@ (8003a3c <cur_messure+0x174>)
 80039c0:	6453      	str	r3, [r2, #68]	@ 0x44
    if (LCD_adc.sum1 > 0.5 && LCD_adc.sum1 < 15)
 80039c2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a3c <cur_messure+0x174>)
 80039c4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80039c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80039cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d4:	dd0d      	ble.n	80039f2 <cur_messure+0x12a>
 80039d6:	4b19      	ldr	r3, [pc, #100]	@ (8003a3c <cur_messure+0x174>)
 80039d8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80039dc:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80039e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e8:	d503      	bpl.n	80039f2 <cur_messure+0x12a>
        LCD_adc.current = LCD_adc.sum1;
 80039ea:	4b14      	ldr	r3, [pc, #80]	@ (8003a3c <cur_messure+0x174>)
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	4a13      	ldr	r2, [pc, #76]	@ (8003a3c <cur_messure+0x174>)
 80039f0:	6513      	str	r3, [r2, #80]	@ 0x50
    if (LCD_adc.sum1 < 0.5)
 80039f2:	4b12      	ldr	r3, [pc, #72]	@ (8003a3c <cur_messure+0x174>)
 80039f4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80039f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80039fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a04:	d503      	bpl.n	8003a0e <cur_messure+0x146>
        LCD_adc.current = 0;
 8003a06:	4b0d      	ldr	r3, [pc, #52]	@ (8003a3c <cur_messure+0x174>)
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_ADC_Stop(&hadc1);
 8003a0e:	480a      	ldr	r0, [pc, #40]	@ (8003a38 <cur_messure+0x170>)
 8003a10:	f002 f936 	bl	8005c80 <HAL_ADC_Stop>
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a1c:	f3af 8000 	nop.w
 8003a20:	be769dc1 	.word	0xbe769dc1
 8003a24:	3e7828c0 	.word	0x3e7828c0
 8003a28:	d35a8588 	.word	0xd35a8588
 8003a2c:	3f84e3bc 	.word	0x3f84e3bc
 8003a30:	01e3041c 	.word	0x01e3041c
 8003a34:	404142e1 	.word	0x404142e1
 8003a38:	200003d0 	.word	0x200003d0
 8003a3c:	200008bc 	.word	0x200008bc
 8003a40:	20000988 	.word	0x20000988
 8003a44:	3a83126f 	.word	0x3a83126f
 8003a48:	20000a2c 	.word	0x20000a2c

08003a4c <power_messure>:

void power_messure(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
    LCD_adc.power = LCD_adc.current * LCD_adc.voltage;
 8003a50:	4b07      	ldr	r3, [pc, #28]	@ (8003a70 <power_messure+0x24>)
 8003a52:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8003a56:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <power_messure+0x24>)
 8003a58:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a60:	4b03      	ldr	r3, [pc, #12]	@ (8003a70 <power_messure+0x24>)
 8003a62:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
}
 8003a66:	bf00      	nop
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	200008bc 	.word	0x200008bc
 8003a74:	00000000 	.word	0x00000000

08003a78 <temperature_messure>:

void temperature_messure(void)
{
 8003a78:	b5b0      	push	{r4, r5, r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
    if (LCD_adc.power == 0)
 8003a7c:	4b42      	ldr	r3, [pc, #264]	@ (8003b88 <temperature_messure+0x110>)
 8003a7e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8003a82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8a:	d104      	bne.n	8003a96 <temperature_messure+0x1e>
    {
        LCD_adc.temp = 0;
 8003a8c:	4b3e      	ldr	r3, [pc, #248]	@ (8003b88 <temperature_messure+0x110>)
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	659a      	str	r2, [r3, #88]	@ 0x58
        LCD_adc.T = (LCD_adc.voltage * LCD_adc.C) / LCD_adc.power;
        LCD_adc.joule = LCD_adc.power * LCD_adc.T;
        LCD_adc.temp = LCD_adc.joule / (LCD_adc.m * 20);
        LCD_adc.Temp = ((3.3 * kalman_fil_curr.filter_kal / 4095 - LCD_adc.V25) / LCD_adc.Avg_Slope) + 25;
    }
}
 8003a94:	e06c      	b.n	8003b70 <temperature_messure+0xf8>
        LCD_adc.T = (LCD_adc.voltage * LCD_adc.C) / LCD_adc.power;
 8003a96:	4b3c      	ldr	r3, [pc, #240]	@ (8003b88 <temperature_messure+0x110>)
 8003a98:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8003a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b88 <temperature_messure+0x110>)
 8003a9e:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8003aa2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003aa6:	4b38      	ldr	r3, [pc, #224]	@ (8003b88 <temperature_messure+0x110>)
 8003aa8:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8003aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ab0:	4b35      	ldr	r3, [pc, #212]	@ (8003b88 <temperature_messure+0x110>)
 8003ab2:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
        LCD_adc.joule = LCD_adc.power * LCD_adc.T;
 8003ab6:	4b34      	ldr	r3, [pc, #208]	@ (8003b88 <temperature_messure+0x110>)
 8003ab8:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8003abc:	4b32      	ldr	r3, [pc, #200]	@ (8003b88 <temperature_messure+0x110>)
 8003abe:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8003ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac6:	4b30      	ldr	r3, [pc, #192]	@ (8003b88 <temperature_messure+0x110>)
 8003ac8:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
        LCD_adc.temp = LCD_adc.joule / (LCD_adc.m * 20);
 8003acc:	4b2e      	ldr	r3, [pc, #184]	@ (8003b88 <temperature_messure+0x110>)
 8003ace:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8003ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b88 <temperature_messure+0x110>)
 8003ad4:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8003ad8:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003adc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae4:	4b28      	ldr	r3, [pc, #160]	@ (8003b88 <temperature_messure+0x110>)
 8003ae6:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
        LCD_adc.Temp = ((3.3 * kalman_fil_curr.filter_kal / 4095 - LCD_adc.V25) / LCD_adc.Avg_Slope) + 25;
 8003aea:	4b28      	ldr	r3, [pc, #160]	@ (8003b8c <temperature_messure+0x114>)
 8003aec:	889b      	ldrh	r3, [r3, #4]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fc fd28 	bl	8000544 <__aeabi_i2d>
 8003af4:	a320      	add	r3, pc, #128	@ (adr r3, 8003b78 <temperature_messure+0x100>)
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f7fc fd8d 	bl	8000618 <__aeabi_dmul>
 8003afe:	4602      	mov	r2, r0
 8003b00:	460b      	mov	r3, r1
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	a31e      	add	r3, pc, #120	@ (adr r3, 8003b80 <temperature_messure+0x108>)
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f7fc feae 	bl	800086c <__aeabi_ddiv>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4614      	mov	r4, r2
 8003b16:	461d      	mov	r5, r3
 8003b18:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <temperature_messure+0x110>)
 8003b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fc fd23 	bl	8000568 <__aeabi_f2d>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4620      	mov	r0, r4
 8003b28:	4629      	mov	r1, r5
 8003b2a:	f7fc fbbd 	bl	80002a8 <__aeabi_dsub>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4614      	mov	r4, r2
 8003b34:	461d      	mov	r5, r3
 8003b36:	4b14      	ldr	r3, [pc, #80]	@ (8003b88 <temperature_messure+0x110>)
 8003b38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fc fd14 	bl	8000568 <__aeabi_f2d>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4620      	mov	r0, r4
 8003b46:	4629      	mov	r1, r5
 8003b48:	f7fc fe90 	bl	800086c <__aeabi_ddiv>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	4b0d      	ldr	r3, [pc, #52]	@ (8003b90 <temperature_messure+0x118>)
 8003b5a:	f7fc fba7 	bl	80002ac <__adddf3>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
 8003b66:	f7fd f84f 	bl	8000c08 <__aeabi_d2f>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4a06      	ldr	r2, [pc, #24]	@ (8003b88 <temperature_messure+0x110>)
 8003b6e:	67d3      	str	r3, [r2, #124]	@ 0x7c
}
 8003b70:	bf00      	nop
 8003b72:	bdb0      	pop	{r4, r5, r7, pc}
 8003b74:	f3af 8000 	nop.w
 8003b78:	66666666 	.word	0x66666666
 8003b7c:	400a6666 	.word	0x400a6666
 8003b80:	00000000 	.word	0x00000000
 8003b84:	40affe00 	.word	0x40affe00
 8003b88:	200008bc 	.word	0x200008bc
 8003b8c:	20000988 	.word	0x20000988
 8003b90:	40390000 	.word	0x40390000

08003b94 <startADC>:

void startADC(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
    vol_messure();
 8003b98:	f7ff fe02 	bl	80037a0 <vol_messure>
    cur_messure();
 8003b9c:	f7ff fe94 	bl	80038c8 <cur_messure>
    power_messure();
 8003ba0:	f7ff ff54 	bl	8003a4c <power_messure>
    temperature_messure();
 8003ba4:	f7ff ff68 	bl	8003a78 <temperature_messure>
}
 8003ba8:	bf00      	nop
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	0000      	movs	r0, r0
	...

08003bb0 <float_to_string>:

void float_to_string(float num, char *str, int decimalPlaces) {
 8003bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb4:	b08d      	sub	sp, #52	@ 0x34
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	ed87 0a03 	vstr	s0, [r7, #12]
 8003bbc:	60b8      	str	r0, [r7, #8]
 8003bbe:	6079      	str	r1, [r7, #4]
 8003bc0:	466b      	mov	r3, sp
 8003bc2:	461e      	mov	r6, r3
    int intPart = (int)num;
 8003bc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bcc:	ee17 3a90 	vmov	r3, s15
 8003bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    int decPart = (int)((num - intPart) * pow(10, decimalPlaces));
 8003bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd4:	ee07 3a90 	vmov	s15, r3
 8003bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bdc:	ed97 7a03 	vldr	s14, [r7, #12]
 8003be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be4:	ee17 0a90 	vmov	r0, s15
 8003be8:	f7fc fcbe 	bl	8000568 <__aeabi_f2d>
 8003bec:	4682      	mov	sl, r0
 8003bee:	468b      	mov	fp, r1
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fc fca7 	bl	8000544 <__aeabi_i2d>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	ec43 2b11 	vmov	d1, r2, r3
 8003bfe:	ed9f 0b42 	vldr	d0, [pc, #264]	@ 8003d08 <float_to_string+0x158>
 8003c02:	f010 fdeb 	bl	80147dc <pow>
 8003c06:	ec53 2b10 	vmov	r2, r3, d0
 8003c0a:	4650      	mov	r0, sl
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	f7fc fd03 	bl	8000618 <__aeabi_dmul>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4610      	mov	r0, r2
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f7fc ffad 	bl	8000b78 <__aeabi_d2iz>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24

    // Convert integer part to string
    itoa(intPart, str, 10);
 8003c22:	220a      	movs	r2, #10
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c28:	f00b fd46 	bl	800f6b8 <itoa>

    // Find length of integer part
    int len = strlen(str);
 8003c2c:	68b8      	ldr	r0, [r7, #8]
 8003c2e:	f7fc fb2f 	bl	8000290 <strlen>
 8003c32:	4603      	mov	r3, r0
 8003c34:	623b      	str	r3, [r7, #32]

    // Append decimal point
    str[len] = '.';
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	222e      	movs	r2, #46	@ 0x2e
 8003c3e:	701a      	strb	r2, [r3, #0]
    str[len + 1] = '\0';
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	3301      	adds	r3, #1
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	4413      	add	r3, r2
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]

    // Convert decimal part to string
    char decStr[decimalPlaces + 1];
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	1c59      	adds	r1, r3, #1
 8003c50:	1e4b      	subs	r3, r1, #1
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	460a      	mov	r2, r1
 8003c56:	2300      	movs	r3, #0
 8003c58:	4690      	mov	r8, r2
 8003c5a:	4699      	mov	r9, r3
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c70:	460a      	mov	r2, r1
 8003c72:	2300      	movs	r3, #0
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	00eb      	lsls	r3, r5, #3
 8003c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c86:	00e2      	lsls	r2, r4, #3
 8003c88:	460b      	mov	r3, r1
 8003c8a:	3307      	adds	r3, #7
 8003c8c:	08db      	lsrs	r3, r3, #3
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	ebad 0d03 	sub.w	sp, sp, r3
 8003c94:	466b      	mov	r3, sp
 8003c96:	3300      	adds	r3, #0
 8003c98:	61bb      	str	r3, [r7, #24]
    itoa(decPart, decStr, 10);
 8003c9a:	220a      	movs	r2, #10
 8003c9c:	69b9      	ldr	r1, [r7, #24]
 8003c9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ca0:	f00b fd0a 	bl	800f6b8 <itoa>

    // Pad with zeros if needed
    int decLen = strlen(decStr);
 8003ca4:	69b8      	ldr	r0, [r7, #24]
 8003ca6:	f7fc faf3 	bl	8000290 <strlen>
 8003caa:	4603      	mov	r3, r0
 8003cac:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < decimalPlaces - decLen; ++i) {
 8003cae:	2300      	movs	r3, #0
 8003cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cb2:	e00e      	b.n	8003cd2 <float_to_string+0x122>
        strcat(str, "0");
 8003cb4:	68b8      	ldr	r0, [r7, #8]
 8003cb6:	f7fc faeb 	bl	8000290 <strlen>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	4913      	ldr	r1, [pc, #76]	@ (8003d10 <float_to_string+0x160>)
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	8013      	strh	r3, [r2, #0]
    for (int i = 0; i < decimalPlaces - decLen; ++i) {
 8003ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cce:	3301      	adds	r3, #1
 8003cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	dbea      	blt.n	8003cb4 <float_to_string+0x104>
    }

    // Append decimal part to the string
    strcat(str, decStr);
 8003cde:	69b9      	ldr	r1, [r7, #24]
 8003ce0:	68b8      	ldr	r0, [r7, #8]
 8003ce2:	f00c fde4 	bl	80108ae <strcat>

    // Null-terminate the string
    str[len + 1 + decimalPlaces] = '\0';
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]
 8003cf8:	46b5      	mov	sp, r6
}
 8003cfa:	bf00      	nop
 8003cfc:	3734      	adds	r7, #52	@ 0x34
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d04:	f3af 8000 	nop.w
 8003d08:	00000000 	.word	0x00000000
 8003d0c:	40240000 	.word	0x40240000
 8003d10:	08015804 	.word	0x08015804

08003d14 <display_menu>:


void display_menu(void) {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
    lcd_init();
 8003d18:	f7ff fa50 	bl	80031bc <lcd_init>
    lcd_clear();
 8003d1c:	f7ff fa12 	bl	8003144 <lcd_clear>
    lcd_put_cur(0, 2);
 8003d20:	2102      	movs	r1, #2
 8003d22:	2000      	movs	r0, #0
 8003d24:	f7ff fa26 	bl	8003174 <lcd_put_cur>
    lcd_send_string("CNC DRILL 3 AXIS");
 8003d28:	480c      	ldr	r0, [pc, #48]	@ (8003d5c <display_menu+0x48>)
 8003d2a:	f7ff fa75 	bl	8003218 <lcd_send_string>
    lcd_put_cur(1, 2);
 8003d2e:	2102      	movs	r1, #2
 8003d30:	2001      	movs	r0, #1
 8003d32:	f7ff fa1f 	bl	8003174 <lcd_put_cur>
    lcd_send_string("HCMUTE CDT K20");
 8003d36:	480a      	ldr	r0, [pc, #40]	@ (8003d60 <display_menu+0x4c>)
 8003d38:	f7ff fa6e 	bl	8003218 <lcd_send_string>
    lcd_put_cur(2, 2);
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	2002      	movs	r0, #2
 8003d40:	f7ff fa18 	bl	8003174 <lcd_put_cur>
    lcd_send_string("KHOA CO KHI CTM");
 8003d44:	4807      	ldr	r0, [pc, #28]	@ (8003d64 <display_menu+0x50>)
 8003d46:	f7ff fa67 	bl	8003218 <lcd_send_string>
    lcd_put_cur(3, 0);
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	2003      	movs	r0, #3
 8003d4e:	f7ff fa11 	bl	8003174 <lcd_put_cur>
    lcd_send_string("GVHD: ThS N.M. TRIET");
 8003d52:	4805      	ldr	r0, [pc, #20]	@ (8003d68 <display_menu+0x54>)
 8003d54:	f7ff fa60 	bl	8003218 <lcd_send_string>
}
 8003d58:	bf00      	nop
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	08015808 	.word	0x08015808
 8003d60:	0801581c 	.word	0x0801581c
 8003d64:	0801582c 	.word	0x0801582c
 8003d68:	0801583c 	.word	0x0801583c

08003d6c <display_main>:

void display_main(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
	if (LCD_adc.menu_main == 0)
 8003d70:	4b46      	ldr	r3, [pc, #280]	@ (8003e8c <display_main+0x120>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d11e      	bne.n	8003db6 <display_main+0x4a>
	{
		lcd_clear();
 8003d78:	f7ff f9e4 	bl	8003144 <lcd_clear>
		lcd_put_cur(0, 0);
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f7ff f9f8 	bl	8003174 <lcd_put_cur>
		lcd_send_string(">VOLT/CURRENT");
 8003d84:	4842      	ldr	r0, [pc, #264]	@ (8003e90 <display_main+0x124>)
 8003d86:	f7ff fa47 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	f7ff f9f1 	bl	8003174 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 8003d92:	4840      	ldr	r0, [pc, #256]	@ (8003e94 <display_main+0x128>)
 8003d94:	f7ff fa40 	bl	8003218 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003d98:	2100      	movs	r1, #0
 8003d9a:	2002      	movs	r0, #2
 8003d9c:	f7ff f9ea 	bl	8003174 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 8003da0:	483d      	ldr	r0, [pc, #244]	@ (8003e98 <display_main+0x12c>)
 8003da2:	f7ff fa39 	bl	8003218 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003da6:	2100      	movs	r1, #0
 8003da8:	2003      	movs	r0, #3
 8003daa:	f7ff f9e3 	bl	8003174 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 8003dae:	483b      	ldr	r0, [pc, #236]	@ (8003e9c <display_main+0x130>)
 8003db0:	f7ff fa32 	bl	8003218 <lcd_send_string>
		lcd_put_cur(2, 0);
		lcd_send_string("CONTROLL CNC");
		lcd_put_cur(3, 0);
		lcd_send_string(">SPEED-XY/SPEED-Z");
	}
}
 8003db4:	e067      	b.n	8003e86 <display_main+0x11a>
	else if (LCD_adc.menu_main == 1)
 8003db6:	4b35      	ldr	r3, [pc, #212]	@ (8003e8c <display_main+0x120>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d11e      	bne.n	8003dfc <display_main+0x90>
		lcd_clear();
 8003dbe:	f7ff f9c1 	bl	8003144 <lcd_clear>
		lcd_put_cur(0, 0);
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	f7ff f9d5 	bl	8003174 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 8003dca:	4835      	ldr	r0, [pc, #212]	@ (8003ea0 <display_main+0x134>)
 8003dcc:	f7ff fa24 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	f7ff f9ce 	bl	8003174 <lcd_put_cur>
		lcd_send_string(">POWER/TEMPER");
 8003dd8:	4832      	ldr	r0, [pc, #200]	@ (8003ea4 <display_main+0x138>)
 8003dda:	f7ff fa1d 	bl	8003218 <lcd_send_string>
        lcd_put_cur(2, 0);
 8003dde:	2100      	movs	r1, #0
 8003de0:	2002      	movs	r0, #2
 8003de2:	f7ff f9c7 	bl	8003174 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 8003de6:	482c      	ldr	r0, [pc, #176]	@ (8003e98 <display_main+0x12c>)
 8003de8:	f7ff fa16 	bl	8003218 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003dec:	2100      	movs	r1, #0
 8003dee:	2003      	movs	r0, #3
 8003df0:	f7ff f9c0 	bl	8003174 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 8003df4:	4829      	ldr	r0, [pc, #164]	@ (8003e9c <display_main+0x130>)
 8003df6:	f7ff fa0f 	bl	8003218 <lcd_send_string>
}
 8003dfa:	e044      	b.n	8003e86 <display_main+0x11a>
	else if (LCD_adc.menu_main == 2)
 8003dfc:	4b23      	ldr	r3, [pc, #140]	@ (8003e8c <display_main+0x120>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d11e      	bne.n	8003e42 <display_main+0xd6>
		lcd_clear();
 8003e04:	f7ff f99e 	bl	8003144 <lcd_clear>
        lcd_put_cur(0, 0);
 8003e08:	2100      	movs	r1, #0
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	f7ff f9b2 	bl	8003174 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 8003e10:	4823      	ldr	r0, [pc, #140]	@ (8003ea0 <display_main+0x134>)
 8003e12:	f7ff fa01 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003e16:	2100      	movs	r1, #0
 8003e18:	2001      	movs	r0, #1
 8003e1a:	f7ff f9ab 	bl	8003174 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 8003e1e:	481d      	ldr	r0, [pc, #116]	@ (8003e94 <display_main+0x128>)
 8003e20:	f7ff f9fa 	bl	8003218 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003e24:	2100      	movs	r1, #0
 8003e26:	2002      	movs	r0, #2
 8003e28:	f7ff f9a4 	bl	8003174 <lcd_put_cur>
		lcd_send_string(">CONTROLL CNC");
 8003e2c:	481e      	ldr	r0, [pc, #120]	@ (8003ea8 <display_main+0x13c>)
 8003e2e:	f7ff f9f3 	bl	8003218 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003e32:	2100      	movs	r1, #0
 8003e34:	2003      	movs	r0, #3
 8003e36:	f7ff f99d 	bl	8003174 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 8003e3a:	4818      	ldr	r0, [pc, #96]	@ (8003e9c <display_main+0x130>)
 8003e3c:	f7ff f9ec 	bl	8003218 <lcd_send_string>
}
 8003e40:	e021      	b.n	8003e86 <display_main+0x11a>
	else if (LCD_adc.menu_main == 3)
 8003e42:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <display_main+0x120>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d11d      	bne.n	8003e86 <display_main+0x11a>
		lcd_clear();
 8003e4a:	f7ff f97b 	bl	8003144 <lcd_clear>
        lcd_put_cur(0, 0);
 8003e4e:	2100      	movs	r1, #0
 8003e50:	2000      	movs	r0, #0
 8003e52:	f7ff f98f 	bl	8003174 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 8003e56:	4812      	ldr	r0, [pc, #72]	@ (8003ea0 <display_main+0x134>)
 8003e58:	f7ff f9de 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	2001      	movs	r0, #1
 8003e60:	f7ff f988 	bl	8003174 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 8003e64:	480b      	ldr	r0, [pc, #44]	@ (8003e94 <display_main+0x128>)
 8003e66:	f7ff f9d7 	bl	8003218 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	2002      	movs	r0, #2
 8003e6e:	f7ff f981 	bl	8003174 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 8003e72:	4809      	ldr	r0, [pc, #36]	@ (8003e98 <display_main+0x12c>)
 8003e74:	f7ff f9d0 	bl	8003218 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003e78:	2100      	movs	r1, #0
 8003e7a:	2003      	movs	r0, #3
 8003e7c:	f7ff f97a 	bl	8003174 <lcd_put_cur>
		lcd_send_string(">SPEED-XY/SPEED-Z");
 8003e80:	480a      	ldr	r0, [pc, #40]	@ (8003eac <display_main+0x140>)
 8003e82:	f7ff f9c9 	bl	8003218 <lcd_send_string>
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	200008bc 	.word	0x200008bc
 8003e90:	08015854 	.word	0x08015854
 8003e94:	08015864 	.word	0x08015864
 8003e98:	08015874 	.word	0x08015874
 8003e9c:	08015884 	.word	0x08015884
 8003ea0:	08015898 	.word	0x08015898
 8003ea4:	080158a8 	.word	0x080158a8
 8003ea8:	080158b8 	.word	0x080158b8
 8003eac:	080158c8 	.word	0x080158c8

08003eb0 <menu_1>:
      break;
  }
}

void menu_1(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
    lcd_clear();
 8003eb6:	f7ff f945 	bl	8003144 <lcd_clear>
    lcd_put_cur(0,0);
 8003eba:	2100      	movs	r1, #0
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f7ff f959 	bl	8003174 <lcd_put_cur>
    lcd_send_string("VOLTAGE= ");
 8003ec2:	4861      	ldr	r0, [pc, #388]	@ (8004048 <menu_1+0x198>)
 8003ec4:	f7ff f9a8 	bl	8003218 <lcd_send_string>
    lcd_put_cur(1,0);
 8003ec8:	2100      	movs	r1, #0
 8003eca:	2001      	movs	r0, #1
 8003ecc:	f7ff f952 	bl	8003174 <lcd_put_cur>
    lcd_send_string("CURRENT= ");
 8003ed0:	485e      	ldr	r0, [pc, #376]	@ (800404c <menu_1+0x19c>)
 8003ed2:	f7ff f9a1 	bl	8003218 <lcd_send_string>
    lcd_put_cur(2,0);
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	2002      	movs	r0, #2
 8003eda:	f7ff f94b 	bl	8003174 <lcd_put_cur>
    lcd_send_string("ADC VOL= ");
 8003ede:	485c      	ldr	r0, [pc, #368]	@ (8004050 <menu_1+0x1a0>)
 8003ee0:	f7ff f99a 	bl	8003218 <lcd_send_string>
    lcd_put_cur(3,0);
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	2003      	movs	r0, #3
 8003ee8:	f7ff f944 	bl	8003174 <lcd_put_cur>
    lcd_send_string("ADC CUR= ");
 8003eec:	4859      	ldr	r0, [pc, #356]	@ (8004054 <menu_1+0x1a4>)
 8003eee:	f7ff f993 	bl	8003218 <lcd_send_string>

    float last_voltage = -1;
 8003ef2:	4b59      	ldr	r3, [pc, #356]	@ (8004058 <menu_1+0x1a8>)
 8003ef4:	60fb      	str	r3, [r7, #12]
    float last_current = -1;
 8003ef6:	4b58      	ldr	r3, [pc, #352]	@ (8004058 <menu_1+0x1a8>)
 8003ef8:	60bb      	str	r3, [r7, #8]
    int last_adc_vol = -1;
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295
 8003efe:	607b      	str	r3, [r7, #4]
    int last_adc_cur = -1;
 8003f00:	f04f 33ff 	mov.w	r3, #4294967295
 8003f04:	603b      	str	r3, [r7, #0]
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8003f06:	e07c      	b.n	8004002 <menu_1+0x152>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
        {
        // Đo điện áp và dòng điện
        vol_messure();
 8003f08:	f7ff fc4a 	bl	80037a0 <vol_messure>
        cur_messure();
 8003f0c:	f7ff fcdc 	bl	80038c8 <cur_messure>

        // Cập nhật điện áp nếu có thay đổi
        if (LCD_adc.voltage != last_voltage)
 8003f10:	4b52      	ldr	r3, [pc, #328]	@ (800405c <menu_1+0x1ac>)
 8003f12:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003f16:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f1a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f22:	d019      	beq.n	8003f58 <menu_1+0xa8>
        {
            last_voltage = LCD_adc.voltage;
 8003f24:	4b4d      	ldr	r3, [pc, #308]	@ (800405c <menu_1+0x1ac>)
 8003f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f28:	60fb      	str	r3, [r7, #12]
            float_to_string(LCD_adc.voltage, LCD_adc.volVal, 2);
 8003f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800405c <menu_1+0x1ac>)
 8003f2c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003f30:	2102      	movs	r1, #2
 8003f32:	484b      	ldr	r0, [pc, #300]	@ (8004060 <menu_1+0x1b0>)
 8003f34:	eeb0 0a67 	vmov.f32	s0, s15
 8003f38:	f7ff fe3a 	bl	8003bb0 <float_to_string>
            lcd_put_cur(0, 9);
 8003f3c:	2109      	movs	r1, #9
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f7ff f918 	bl	8003174 <lcd_put_cur>
            lcd_send_string(LCD_adc.volVal);
 8003f44:	4846      	ldr	r0, [pc, #280]	@ (8004060 <menu_1+0x1b0>)
 8003f46:	f7ff f967 	bl	8003218 <lcd_send_string>
            lcd_put_cur(0, 15);
 8003f4a:	210f      	movs	r1, #15
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f7ff f911 	bl	8003174 <lcd_put_cur>
            lcd_send_string("V");
 8003f52:	4844      	ldr	r0, [pc, #272]	@ (8004064 <menu_1+0x1b4>)
 8003f54:	f7ff f960 	bl	8003218 <lcd_send_string>
        }

        // Cập nhật dòng điện nếu có thay đổi
        if (LCD_adc.current != last_current)
 8003f58:	4b40      	ldr	r3, [pc, #256]	@ (800405c <menu_1+0x1ac>)
 8003f5a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003f5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f62:	eeb4 7a67 	vcmp.f32	s14, s15
 8003f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6a:	d019      	beq.n	8003fa0 <menu_1+0xf0>
        {
            last_current = LCD_adc.current;
 8003f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800405c <menu_1+0x1ac>)
 8003f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f70:	60bb      	str	r3, [r7, #8]
            float_to_string(LCD_adc.current, LCD_adc.curVal, 3);
 8003f72:	4b3a      	ldr	r3, [pc, #232]	@ (800405c <menu_1+0x1ac>)
 8003f74:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003f78:	2103      	movs	r1, #3
 8003f7a:	483b      	ldr	r0, [pc, #236]	@ (8004068 <menu_1+0x1b8>)
 8003f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f80:	f7ff fe16 	bl	8003bb0 <float_to_string>
            lcd_put_cur(1, 9);
 8003f84:	2109      	movs	r1, #9
 8003f86:	2001      	movs	r0, #1
 8003f88:	f7ff f8f4 	bl	8003174 <lcd_put_cur>
            lcd_send_string(LCD_adc.curVal);
 8003f8c:	4836      	ldr	r0, [pc, #216]	@ (8004068 <menu_1+0x1b8>)
 8003f8e:	f7ff f943 	bl	8003218 <lcd_send_string>
            lcd_put_cur(1, 15);
 8003f92:	210f      	movs	r1, #15
 8003f94:	2001      	movs	r0, #1
 8003f96:	f7ff f8ed 	bl	8003174 <lcd_put_cur>
            lcd_send_string("A");
 8003f9a:	4834      	ldr	r0, [pc, #208]	@ (800406c <menu_1+0x1bc>)
 8003f9c:	f7ff f93c 	bl	8003218 <lcd_send_string>
        }

        // Cập nhật adc volt nếu có thay đổi
        if (kalman_fil_volt.filter_kal != last_adc_vol)
 8003fa0:	4b33      	ldr	r3, [pc, #204]	@ (8004070 <menu_1+0x1c0>)
 8003fa2:	889b      	ldrh	r3, [r3, #4]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d010      	beq.n	8003fce <menu_1+0x11e>
        {
            last_adc_vol = kalman_fil_curr.filter_kal; // Fixed: updating last_adc instead of last_current
 8003fac:	4b31      	ldr	r3, [pc, #196]	@ (8004074 <menu_1+0x1c4>)
 8003fae:	889b      	ldrh	r3, [r3, #4]
 8003fb0:	607b      	str	r3, [r7, #4]
            snprintf(LCD_adc.adc_volVal, 6, "%d", kalman_fil_volt.filter_kal);
 8003fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8004070 <menu_1+0x1c0>)
 8003fb4:	889b      	ldrh	r3, [r3, #4]
 8003fb6:	4a30      	ldr	r2, [pc, #192]	@ (8004078 <menu_1+0x1c8>)
 8003fb8:	2106      	movs	r1, #6
 8003fba:	4830      	ldr	r0, [pc, #192]	@ (800407c <menu_1+0x1cc>)
 8003fbc:	f00c fbac 	bl	8010718 <sniprintf>
            lcd_put_cur(2, 9);
 8003fc0:	2109      	movs	r1, #9
 8003fc2:	2002      	movs	r0, #2
 8003fc4:	f7ff f8d6 	bl	8003174 <lcd_put_cur>
            lcd_send_string(LCD_adc.adc_volVal);
 8003fc8:	482c      	ldr	r0, [pc, #176]	@ (800407c <menu_1+0x1cc>)
 8003fca:	f7ff f925 	bl	8003218 <lcd_send_string>
        }

        // Cập nhật adc curr nếu có thay đổi
        if (kalman_fil_curr.filter_kal != last_adc_cur)
 8003fce:	4b29      	ldr	r3, [pc, #164]	@ (8004074 <menu_1+0x1c4>)
 8003fd0:	889b      	ldrh	r3, [r3, #4]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d010      	beq.n	8003ffc <menu_1+0x14c>
        {
            last_adc_cur = kalman_fil_curr.filter_kal; // Fixed: updating last_adc instead of last_current
 8003fda:	4b26      	ldr	r3, [pc, #152]	@ (8004074 <menu_1+0x1c4>)
 8003fdc:	889b      	ldrh	r3, [r3, #4]
 8003fde:	603b      	str	r3, [r7, #0]
            snprintf(LCD_adc.adc_curVal, 6, "%d", kalman_fil_curr.filter_kal);
 8003fe0:	4b24      	ldr	r3, [pc, #144]	@ (8004074 <menu_1+0x1c4>)
 8003fe2:	889b      	ldrh	r3, [r3, #4]
 8003fe4:	4a24      	ldr	r2, [pc, #144]	@ (8004078 <menu_1+0x1c8>)
 8003fe6:	2106      	movs	r1, #6
 8003fe8:	4825      	ldr	r0, [pc, #148]	@ (8004080 <menu_1+0x1d0>)
 8003fea:	f00c fb95 	bl	8010718 <sniprintf>
            lcd_put_cur(3, 9);
 8003fee:	2109      	movs	r1, #9
 8003ff0:	2003      	movs	r0, #3
 8003ff2:	f7ff f8bf 	bl	8003174 <lcd_put_cur>
            lcd_send_string(LCD_adc.adc_curVal);
 8003ff6:	4822      	ldr	r0, [pc, #136]	@ (8004080 <menu_1+0x1d0>)
 8003ff8:	f7ff f90e 	bl	8003218 <lcd_send_string>
        }

        // Thêm một khoảng trễ nhỏ để ngăn việc sử dụng CPU quá mức
        osDelay(150);
 8003ffc:	2096      	movs	r0, #150	@ 0x96
 8003ffe:	f007 ff75 	bl	800beec <osDelay>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8004002:	2140      	movs	r1, #64	@ 0x40
 8004004:	481f      	ldr	r0, [pc, #124]	@ (8004084 <menu_1+0x1d4>)
 8004006:	f003 f91b 	bl	8007240 <HAL_GPIO_ReadPin>
 800400a:	4603      	mov	r3, r0
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 800400c:	2b00      	cmp	r3, #0
 800400e:	d017      	beq.n	8004040 <menu_1+0x190>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8004010:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004014:	481c      	ldr	r0, [pc, #112]	@ (8004088 <menu_1+0x1d8>)
 8004016:	f003 f913 	bl	8007240 <HAL_GPIO_ReadPin>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00f      	beq.n	8004040 <menu_1+0x190>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 8004020:	2180      	movs	r1, #128	@ 0x80
 8004022:	4818      	ldr	r0, [pc, #96]	@ (8004084 <menu_1+0x1d4>)
 8004024:	f003 f90c 	bl	8007240 <HAL_GPIO_ReadPin>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <menu_1+0x190>
 800402e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004032:	4815      	ldr	r0, [pc, #84]	@ (8004088 <menu_1+0x1d8>)
 8004034:	f003 f904 	bl	8007240 <HAL_GPIO_ReadPin>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	f47f af64 	bne.w	8003f08 <menu_1+0x58>
    }
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	080158fc 	.word	0x080158fc
 800404c:	08015908 	.word	0x08015908
 8004050:	08015914 	.word	0x08015914
 8004054:	08015920 	.word	0x08015920
 8004058:	bf800000 	.word	0xbf800000
 800405c:	200008bc 	.word	0x200008bc
 8004060:	20000950 	.word	0x20000950
 8004064:	0801592c 	.word	0x0801592c
 8004068:	20000955 	.word	0x20000955
 800406c:	08015930 	.word	0x08015930
 8004070:	200009d8 	.word	0x200009d8
 8004074:	20000988 	.word	0x20000988
 8004078:	08015934 	.word	0x08015934
 800407c:	2000095a 	.word	0x2000095a
 8004080:	2000095f 	.word	0x2000095f
 8004084:	40020000 	.word	0x40020000
 8004088:	40021000 	.word	0x40021000

0800408c <menu_2>:



void menu_2(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
    lcd_clear();
 8004092:	f7ff f857 	bl	8003144 <lcd_clear>
    lcd_put_cur(0,0);
 8004096:	2100      	movs	r1, #0
 8004098:	2000      	movs	r0, #0
 800409a:	f7ff f86b 	bl	8003174 <lcd_put_cur>
    lcd_send_string("POWER= ");
 800409e:	4843      	ldr	r0, [pc, #268]	@ (80041ac <menu_2+0x120>)
 80040a0:	f7ff f8ba 	bl	8003218 <lcd_send_string>
    lcd_put_cur(1,0);
 80040a4:	2100      	movs	r1, #0
 80040a6:	2001      	movs	r0, #1
 80040a8:	f7ff f864 	bl	8003174 <lcd_put_cur>
    lcd_send_string("TEMPER= ");
 80040ac:	4840      	ldr	r0, [pc, #256]	@ (80041b0 <menu_2+0x124>)
 80040ae:	f7ff f8b3 	bl	8003218 <lcd_send_string>

    float last_power = -1;
 80040b2:	4b40      	ldr	r3, [pc, #256]	@ (80041b4 <menu_2+0x128>)
 80040b4:	60fb      	str	r3, [r7, #12]
    float last_temp = -1;
 80040b6:	4b3f      	ldr	r3, [pc, #252]	@ (80041b4 <menu_2+0x128>)
 80040b8:	60bb      	str	r3, [r7, #8]

    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 80040ba:	e054      	b.n	8004166 <menu_2+0xda>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
        {
        // Đo điện áp và dòng điện (để tính công suất và nhiệt độ)
        vol_messure();
 80040bc:	f7ff fb70 	bl	80037a0 <vol_messure>
        cur_messure();
 80040c0:	f7ff fc02 	bl	80038c8 <cur_messure>

        // Cập nhật công suất nếu có thay đổi
        if (LCD_adc.power != last_power)
 80040c4:	4b3c      	ldr	r3, [pc, #240]	@ (80041b8 <menu_2+0x12c>)
 80040c6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80040ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80040ce:	eeb4 7a67 	vcmp.f32	s14, s15
 80040d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d6:	d019      	beq.n	800410c <menu_2+0x80>
        {
            last_power = LCD_adc.power;
 80040d8:	4b37      	ldr	r3, [pc, #220]	@ (80041b8 <menu_2+0x12c>)
 80040da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040dc:	60fb      	str	r3, [r7, #12]
            float_to_string(LCD_adc.power, LCD_adc.powVal, 2);
 80040de:	4b36      	ldr	r3, [pc, #216]	@ (80041b8 <menu_2+0x12c>)
 80040e0:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80040e4:	2102      	movs	r1, #2
 80040e6:	4835      	ldr	r0, [pc, #212]	@ (80041bc <menu_2+0x130>)
 80040e8:	eeb0 0a67 	vmov.f32	s0, s15
 80040ec:	f7ff fd60 	bl	8003bb0 <float_to_string>
            lcd_put_cur(0, 9);
 80040f0:	2109      	movs	r1, #9
 80040f2:	2000      	movs	r0, #0
 80040f4:	f7ff f83e 	bl	8003174 <lcd_put_cur>
            lcd_send_string(LCD_adc.powVal);
 80040f8:	4830      	ldr	r0, [pc, #192]	@ (80041bc <menu_2+0x130>)
 80040fa:	f7ff f88d 	bl	8003218 <lcd_send_string>
            lcd_put_cur(0, 15);
 80040fe:	210f      	movs	r1, #15
 8004100:	2000      	movs	r0, #0
 8004102:	f7ff f837 	bl	8003174 <lcd_put_cur>
            lcd_send_string("W");
 8004106:	482e      	ldr	r0, [pc, #184]	@ (80041c0 <menu_2+0x134>)
 8004108:	f7ff f886 	bl	8003218 <lcd_send_string>
        }

        // Cập nhật nhiệt độ nếu có thay đổi
        if (LCD_adc.temp != last_temp)
 800410c:	4b2a      	ldr	r3, [pc, #168]	@ (80041b8 <menu_2+0x12c>)
 800410e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8004112:	ed97 7a02 	vldr	s14, [r7, #8]
 8004116:	eeb4 7a67 	vcmp.f32	s14, s15
 800411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411e:	d01f      	beq.n	8004160 <menu_2+0xd4>
        {
            last_temp = LCD_adc.Temp;
 8004120:	4b25      	ldr	r3, [pc, #148]	@ (80041b8 <menu_2+0x12c>)
 8004122:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004124:	60bb      	str	r3, [r7, #8]
            float_to_string(LCD_adc.Temp, LCD_adc.tempVal, 3);
 8004126:	4b24      	ldr	r3, [pc, #144]	@ (80041b8 <menu_2+0x12c>)
 8004128:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 800412c:	2103      	movs	r1, #3
 800412e:	4825      	ldr	r0, [pc, #148]	@ (80041c4 <menu_2+0x138>)
 8004130:	eeb0 0a67 	vmov.f32	s0, s15
 8004134:	f7ff fd3c 	bl	8003bb0 <float_to_string>
            char celsiusSymbol[] = {0xDF, 'C', '\0'};
 8004138:	4a23      	ldr	r2, [pc, #140]	@ (80041c8 <menu_2+0x13c>)
 800413a:	1d3b      	adds	r3, r7, #4
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	4611      	mov	r1, r2
 8004140:	8019      	strh	r1, [r3, #0]
 8004142:	3302      	adds	r3, #2
 8004144:	0c12      	lsrs	r2, r2, #16
 8004146:	701a      	strb	r2, [r3, #0]
            strcat(LCD_adc.tempVal, celsiusSymbol);
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	4619      	mov	r1, r3
 800414c:	481d      	ldr	r0, [pc, #116]	@ (80041c4 <menu_2+0x138>)
 800414e:	f00c fbae 	bl	80108ae <strcat>
            lcd_put_cur(1, 9);
 8004152:	2109      	movs	r1, #9
 8004154:	2001      	movs	r0, #1
 8004156:	f7ff f80d 	bl	8003174 <lcd_put_cur>
            lcd_send_string(LCD_adc.tempVal);
 800415a:	481a      	ldr	r0, [pc, #104]	@ (80041c4 <menu_2+0x138>)
 800415c:	f7ff f85c 	bl	8003218 <lcd_send_string>
        }

        // Thêm một khoảng trễ nhỏ để ngăn việc sử dụng CPU quá mức
        osDelay(100);
 8004160:	2064      	movs	r0, #100	@ 0x64
 8004162:	f007 fec3 	bl	800beec <osDelay>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8004166:	2140      	movs	r1, #64	@ 0x40
 8004168:	4818      	ldr	r0, [pc, #96]	@ (80041cc <menu_2+0x140>)
 800416a:	f003 f869 	bl	8007240 <HAL_GPIO_ReadPin>
 800416e:	4603      	mov	r3, r0
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 8004170:	2b00      	cmp	r3, #0
 8004172:	d016      	beq.n	80041a2 <menu_2+0x116>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8004174:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004178:	4815      	ldr	r0, [pc, #84]	@ (80041d0 <menu_2+0x144>)
 800417a:	f003 f861 	bl	8007240 <HAL_GPIO_ReadPin>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <menu_2+0x116>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 8004184:	2180      	movs	r1, #128	@ 0x80
 8004186:	4811      	ldr	r0, [pc, #68]	@ (80041cc <menu_2+0x140>)
 8004188:	f003 f85a 	bl	8007240 <HAL_GPIO_ReadPin>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d007      	beq.n	80041a2 <menu_2+0x116>
 8004192:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004196:	480e      	ldr	r0, [pc, #56]	@ (80041d0 <menu_2+0x144>)
 8004198:	f003 f852 	bl	8007240 <HAL_GPIO_ReadPin>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d18c      	bne.n	80040bc <menu_2+0x30>
    }
}
 80041a2:	bf00      	nop
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	08015938 	.word	0x08015938
 80041b0:	08015940 	.word	0x08015940
 80041b4:	bf800000 	.word	0xbf800000
 80041b8:	200008bc 	.word	0x200008bc
 80041bc:	20000969 	.word	0x20000969
 80041c0:	0801594c 	.word	0x0801594c
 80041c4:	20000964 	.word	0x20000964
 80041c8:	08015950 	.word	0x08015950
 80041cc:	40020000 	.word	0x40020000
 80041d0:	40021000 	.word	0x40021000

080041d4 <menu_3>:


void menu_3(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
	if (LCD_adc.selected_menu3_item == 0)
 80041d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004284 <menu_3+0xb0>)
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d117      	bne.n	8004210 <menu_3+0x3c>
	{
		lcd_clear();
 80041e0:	f7fe ffb0 	bl	8003144 <lcd_clear>
		lcd_put_cur(0, 0);
 80041e4:	2100      	movs	r1, #0
 80041e6:	2000      	movs	r0, #0
 80041e8:	f7fe ffc4 	bl	8003174 <lcd_put_cur>
		lcd_send_string(">TYPE X= ");
 80041ec:	4826      	ldr	r0, [pc, #152]	@ (8004288 <menu_3+0xb4>)
 80041ee:	f7ff f813 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
 80041f2:	2100      	movs	r1, #0
 80041f4:	2001      	movs	r0, #1
 80041f6:	f7fe ffbd 	bl	8003174 <lcd_put_cur>
		lcd_send_string("TYPE Y= ");
 80041fa:	4824      	ldr	r0, [pc, #144]	@ (800428c <menu_3+0xb8>)
 80041fc:	f7ff f80c 	bl	8003218 <lcd_send_string>
		lcd_put_cur(2, 0);
 8004200:	2100      	movs	r1, #0
 8004202:	2002      	movs	r0, #2
 8004204:	f7fe ffb6 	bl	8003174 <lcd_put_cur>
		lcd_send_string("TYPE Z= ");
 8004208:	4821      	ldr	r0, [pc, #132]	@ (8004290 <menu_3+0xbc>)
 800420a:	f7ff f805 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
		lcd_send_string("TYPE Y= ");
		lcd_put_cur(2, 0);
		lcd_send_string(">TYPE Z= ");
	}
}
 800420e:	e036      	b.n	800427e <menu_3+0xaa>
	else if (LCD_adc.selected_menu3_item == 1)
 8004210:	4b1c      	ldr	r3, [pc, #112]	@ (8004284 <menu_3+0xb0>)
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d117      	bne.n	8004248 <menu_3+0x74>
		lcd_clear();
 8004218:	f7fe ff94 	bl	8003144 <lcd_clear>
		lcd_put_cur(0, 0);
 800421c:	2100      	movs	r1, #0
 800421e:	2000      	movs	r0, #0
 8004220:	f7fe ffa8 	bl	8003174 <lcd_put_cur>
		lcd_send_string("TYPE X= ");
 8004224:	481b      	ldr	r0, [pc, #108]	@ (8004294 <menu_3+0xc0>)
 8004226:	f7fe fff7 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
 800422a:	2100      	movs	r1, #0
 800422c:	2001      	movs	r0, #1
 800422e:	f7fe ffa1 	bl	8003174 <lcd_put_cur>
		lcd_send_string(">TYPE Y= ");
 8004232:	4819      	ldr	r0, [pc, #100]	@ (8004298 <menu_3+0xc4>)
 8004234:	f7fe fff0 	bl	8003218 <lcd_send_string>
		lcd_put_cur(2, 0);
 8004238:	2100      	movs	r1, #0
 800423a:	2002      	movs	r0, #2
 800423c:	f7fe ff9a 	bl	8003174 <lcd_put_cur>
		lcd_send_string("TYPE Z= ");
 8004240:	4813      	ldr	r0, [pc, #76]	@ (8004290 <menu_3+0xbc>)
 8004242:	f7fe ffe9 	bl	8003218 <lcd_send_string>
}
 8004246:	e01a      	b.n	800427e <menu_3+0xaa>
	else if (LCD_adc.selected_menu3_item == 2)
 8004248:	4b0e      	ldr	r3, [pc, #56]	@ (8004284 <menu_3+0xb0>)
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d116      	bne.n	800427e <menu_3+0xaa>
		lcd_clear();
 8004250:	f7fe ff78 	bl	8003144 <lcd_clear>
		lcd_put_cur(0, 0);
 8004254:	2100      	movs	r1, #0
 8004256:	2000      	movs	r0, #0
 8004258:	f7fe ff8c 	bl	8003174 <lcd_put_cur>
		lcd_send_string("TYPE X= ");
 800425c:	480d      	ldr	r0, [pc, #52]	@ (8004294 <menu_3+0xc0>)
 800425e:	f7fe ffdb 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
 8004262:	2100      	movs	r1, #0
 8004264:	2001      	movs	r0, #1
 8004266:	f7fe ff85 	bl	8003174 <lcd_put_cur>
		lcd_send_string("TYPE Y= ");
 800426a:	4808      	ldr	r0, [pc, #32]	@ (800428c <menu_3+0xb8>)
 800426c:	f7fe ffd4 	bl	8003218 <lcd_send_string>
		lcd_put_cur(2, 0);
 8004270:	2100      	movs	r1, #0
 8004272:	2002      	movs	r0, #2
 8004274:	f7fe ff7e 	bl	8003174 <lcd_put_cur>
		lcd_send_string(">TYPE Z= ");
 8004278:	4808      	ldr	r0, [pc, #32]	@ (800429c <menu_3+0xc8>)
 800427a:	f7fe ffcd 	bl	8003218 <lcd_send_string>
}
 800427e:	bf00      	nop
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	200008bc 	.word	0x200008bc
 8004288:	08015954 	.word	0x08015954
 800428c:	08015960 	.word	0x08015960
 8004290:	0801596c 	.word	0x0801596c
 8004294:	08015978 	.word	0x08015978
 8004298:	08015984 	.word	0x08015984
 800429c:	08015990 	.word	0x08015990

080042a0 <select_menu3>:

void select_menu3(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
    switch (LCD_adc.selected_menu3_item)
 80042a4:	4b0a      	ldr	r3, [pc, #40]	@ (80042d0 <select_menu3+0x30>)
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d00c      	beq.n	80042c6 <select_menu3+0x26>
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	dc0d      	bgt.n	80042cc <select_menu3+0x2c>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <select_menu3+0x1a>
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d003      	beq.n	80042c0 <select_menu3+0x20>
            break;
        case 2:
            lcd_clear();
            break;
    }
}
 80042b8:	e008      	b.n	80042cc <select_menu3+0x2c>
            lcd_clear();
 80042ba:	f7fe ff43 	bl	8003144 <lcd_clear>
            break;
 80042be:	e005      	b.n	80042cc <select_menu3+0x2c>
            lcd_clear();
 80042c0:	f7fe ff40 	bl	8003144 <lcd_clear>
            break;
 80042c4:	e002      	b.n	80042cc <select_menu3+0x2c>
            lcd_clear();
 80042c6:	f7fe ff3d 	bl	8003144 <lcd_clear>
            break;
 80042ca:	bf00      	nop
}
 80042cc:	bf00      	nop
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	200008bc 	.word	0x200008bc

080042d4 <X_count>:

void X_count(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 80042d8:	e00e      	b.n	80042f8 <X_count+0x24>
    {
        LCD_adc.typeX_value++;
 80042da:	4b18      	ldr	r3, [pc, #96]	@ (800433c <X_count+0x68>)
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	3301      	adds	r3, #1
 80042e0:	4a16      	ldr	r2, [pc, #88]	@ (800433c <X_count+0x68>)
 80042e2:	6253      	str	r3, [r2, #36]	@ 0x24
        stepX(abs(LCD_adc.typeX_value), 0, 15);
 80042e4:	4b15      	ldr	r3, [pc, #84]	@ (800433c <X_count+0x68>)
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	bfb8      	it	lt
 80042ec:	425b      	neglt	r3, r3
 80042ee:	220f      	movs	r2, #15
 80042f0:	2100      	movs	r1, #0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff f8fa 	bl	80034ec <stepX>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 80042f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80042fc:	4810      	ldr	r0, [pc, #64]	@ (8004340 <X_count+0x6c>)
 80042fe:	f002 ff9f 	bl	8007240 <HAL_GPIO_ReadPin>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0e8      	beq.n	80042da <X_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004308:	e00e      	b.n	8004328 <X_count+0x54>
    {
        LCD_adc.typeX_value--;
 800430a:	4b0c      	ldr	r3, [pc, #48]	@ (800433c <X_count+0x68>)
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	3b01      	subs	r3, #1
 8004310:	4a0a      	ldr	r2, [pc, #40]	@ (800433c <X_count+0x68>)
 8004312:	6253      	str	r3, [r2, #36]	@ 0x24
        stepX(abs(LCD_adc.typeX_value), 1, 15);
 8004314:	4b09      	ldr	r3, [pc, #36]	@ (800433c <X_count+0x68>)
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	2b00      	cmp	r3, #0
 800431a:	bfb8      	it	lt
 800431c:	425b      	neglt	r3, r3
 800431e:	220f      	movs	r2, #15
 8004320:	2101      	movs	r1, #1
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff f8e2 	bl	80034ec <stepX>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004328:	2110      	movs	r1, #16
 800432a:	4806      	ldr	r0, [pc, #24]	@ (8004344 <X_count+0x70>)
 800432c:	f002 ff88 	bl	8007240 <HAL_GPIO_ReadPin>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0e9      	beq.n	800430a <X_count+0x36>
    }
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	bd80      	pop	{r7, pc}
 800433c:	200008bc 	.word	0x200008bc
 8004340:	40021000 	.word	0x40021000
 8004344:	40020800 	.word	0x40020800

08004348 <Y_count>:

void Y_count(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 800434c:	e00e      	b.n	800436c <Y_count+0x24>
    {
        LCD_adc.typeY_value++;
 800434e:	4b18      	ldr	r3, [pc, #96]	@ (80043b0 <Y_count+0x68>)
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	3301      	adds	r3, #1
 8004354:	4a16      	ldr	r2, [pc, #88]	@ (80043b0 <Y_count+0x68>)
 8004356:	6293      	str	r3, [r2, #40]	@ 0x28
        stepY(abs(LCD_adc.typeY_value), 0, 15);
 8004358:	4b15      	ldr	r3, [pc, #84]	@ (80043b0 <Y_count+0x68>)
 800435a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435c:	2b00      	cmp	r3, #0
 800435e:	bfb8      	it	lt
 8004360:	425b      	neglt	r3, r3
 8004362:	220f      	movs	r2, #15
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff f8ec 	bl	8003544 <stepY>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 800436c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004370:	4810      	ldr	r0, [pc, #64]	@ (80043b4 <Y_count+0x6c>)
 8004372:	f002 ff65 	bl	8007240 <HAL_GPIO_ReadPin>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0e8      	beq.n	800434e <Y_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 800437c:	e00e      	b.n	800439c <Y_count+0x54>
    {
        LCD_adc.typeY_value--;
 800437e:	4b0c      	ldr	r3, [pc, #48]	@ (80043b0 <Y_count+0x68>)
 8004380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004382:	3b01      	subs	r3, #1
 8004384:	4a0a      	ldr	r2, [pc, #40]	@ (80043b0 <Y_count+0x68>)
 8004386:	6293      	str	r3, [r2, #40]	@ 0x28
        stepY(abs(LCD_adc.typeY_value), 1, 15);
 8004388:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <Y_count+0x68>)
 800438a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438c:	2b00      	cmp	r3, #0
 800438e:	bfb8      	it	lt
 8004390:	425b      	neglt	r3, r3
 8004392:	220f      	movs	r2, #15
 8004394:	2101      	movs	r1, #1
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff f8d4 	bl	8003544 <stepY>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 800439c:	2110      	movs	r1, #16
 800439e:	4806      	ldr	r0, [pc, #24]	@ (80043b8 <Y_count+0x70>)
 80043a0:	f002 ff4e 	bl	8007240 <HAL_GPIO_ReadPin>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0e9      	beq.n	800437e <Y_count+0x36>
    }
}
 80043aa:	bf00      	nop
 80043ac:	bf00      	nop
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	200008bc 	.word	0x200008bc
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40020800 	.word	0x40020800

080043bc <Z_count>:

void Z_count(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 80043c0:	e00e      	b.n	80043e0 <Z_count+0x24>
    {
        LCD_adc.typeZ_value++;
 80043c2:	4b18      	ldr	r3, [pc, #96]	@ (8004424 <Z_count+0x68>)
 80043c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c6:	3301      	adds	r3, #1
 80043c8:	4a16      	ldr	r2, [pc, #88]	@ (8004424 <Z_count+0x68>)
 80043ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
        stepZ(abs(LCD_adc.typeZ_value), 1, 15);
 80043cc:	4b15      	ldr	r3, [pc, #84]	@ (8004424 <Z_count+0x68>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bfb8      	it	lt
 80043d4:	425b      	neglt	r3, r3
 80043d6:	220f      	movs	r2, #15
 80043d8:	2101      	movs	r1, #1
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff f8de 	bl	800359c <stepZ>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 80043e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80043e4:	4810      	ldr	r0, [pc, #64]	@ (8004428 <Z_count+0x6c>)
 80043e6:	f002 ff2b 	bl	8007240 <HAL_GPIO_ReadPin>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0e8      	beq.n	80043c2 <Z_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 80043f0:	e00e      	b.n	8004410 <Z_count+0x54>
    {
        LCD_adc.typeZ_value--;
 80043f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004424 <Z_count+0x68>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f6:	3b01      	subs	r3, #1
 80043f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004424 <Z_count+0x68>)
 80043fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        stepZ(abs(LCD_adc.typeZ_value), 0, 15);
 80043fc:	4b09      	ldr	r3, [pc, #36]	@ (8004424 <Z_count+0x68>)
 80043fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004400:	2b00      	cmp	r3, #0
 8004402:	bfb8      	it	lt
 8004404:	425b      	neglt	r3, r3
 8004406:	220f      	movs	r2, #15
 8004408:	2100      	movs	r1, #0
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff f8c6 	bl	800359c <stepZ>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004410:	2110      	movs	r1, #16
 8004412:	4806      	ldr	r0, [pc, #24]	@ (800442c <Z_count+0x70>)
 8004414:	f002 ff14 	bl	8007240 <HAL_GPIO_ReadPin>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0e9      	beq.n	80043f2 <Z_count+0x36>
    }
}
 800441e:	bf00      	nop
 8004420:	bf00      	nop
 8004422:	bd80      	pop	{r7, pc}
 8004424:	200008bc 	.word	0x200008bc
 8004428:	40021000 	.word	0x40021000
 800442c:	40020800 	.word	0x40020800

08004430 <menu_4>:

void menu_4(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
    if (LCD_adc.selected_menu4_item == 0)
 8004434:	4b17      	ldr	r3, [pc, #92]	@ (8004494 <menu_4+0x64>)
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d112      	bne.n	8004462 <menu_4+0x32>
    {
        lcd_clear();
 800443c:	f7fe fe82 	bl	8003144 <lcd_clear>
        lcd_put_cur(0, 0);
 8004440:	2100      	movs	r1, #0
 8004442:	2000      	movs	r0, #0
 8004444:	f7fe fe96 	bl	8003174 <lcd_put_cur>
        lcd_send_string(">SPEED X-Y= ");
 8004448:	4813      	ldr	r0, [pc, #76]	@ (8004498 <menu_4+0x68>)
 800444a:	f7fe fee5 	bl	8003218 <lcd_send_string>
        lcd_put_cur(1, 0);
 800444e:	2100      	movs	r1, #0
 8004450:	2001      	movs	r0, #1
 8004452:	f7fe fe8f 	bl	8003174 <lcd_put_cur>
        lcd_send_string("SPEED Z= ");
 8004456:	4811      	ldr	r0, [pc, #68]	@ (800449c <menu_4+0x6c>)
 8004458:	f7fe fede 	bl	8003218 <lcd_send_string>
        speedXY_count();
 800445c:	f000 f838 	bl	80044d0 <speedXY_count>
        lcd_send_string("SPEED X-Y= ");
        lcd_put_cur(1, 0);
        lcd_send_string(">SPEED Z= ");
        speedZ_count();
    }
}
 8004460:	e015      	b.n	800448e <menu_4+0x5e>
    else if (LCD_adc.selected_menu4_item == 1)
 8004462:	4b0c      	ldr	r3, [pc, #48]	@ (8004494 <menu_4+0x64>)
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d111      	bne.n	800448e <menu_4+0x5e>
        lcd_clear();
 800446a:	f7fe fe6b 	bl	8003144 <lcd_clear>
        lcd_put_cur(0, 0);
 800446e:	2100      	movs	r1, #0
 8004470:	2000      	movs	r0, #0
 8004472:	f7fe fe7f 	bl	8003174 <lcd_put_cur>
        lcd_send_string("SPEED X-Y= ");
 8004476:	480a      	ldr	r0, [pc, #40]	@ (80044a0 <menu_4+0x70>)
 8004478:	f7fe fece 	bl	8003218 <lcd_send_string>
        lcd_put_cur(1, 0);
 800447c:	2100      	movs	r1, #0
 800447e:	2001      	movs	r0, #1
 8004480:	f7fe fe78 	bl	8003174 <lcd_put_cur>
        lcd_send_string(">SPEED Z= ");
 8004484:	4807      	ldr	r0, [pc, #28]	@ (80044a4 <menu_4+0x74>)
 8004486:	f7fe fec7 	bl	8003218 <lcd_send_string>
        speedZ_count();
 800448a:	f000 f861 	bl	8004550 <speedZ_count>
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	200008bc 	.word	0x200008bc
 8004498:	0801599c 	.word	0x0801599c
 800449c:	080159ac 	.word	0x080159ac
 80044a0:	080159b8 	.word	0x080159b8
 80044a4:	080159c4 	.word	0x080159c4

080044a8 <select_menu4>:

void select_menu4(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
    switch (LCD_adc.selected_menu4_item)
 80044ac:	4b07      	ldr	r3, [pc, #28]	@ (80044cc <select_menu4+0x24>)
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <select_menu4+0x12>
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d003      	beq.n	80044c0 <select_menu4+0x18>
            break;
        case 1:
            lcd_clear();
            break;
    }
}
 80044b8:	e005      	b.n	80044c6 <select_menu4+0x1e>
            lcd_clear();
 80044ba:	f7fe fe43 	bl	8003144 <lcd_clear>
            break;
 80044be:	e002      	b.n	80044c6 <select_menu4+0x1e>
            lcd_clear();
 80044c0:	f7fe fe40 	bl	8003144 <lcd_clear>
            break;
 80044c4:	bf00      	nop
}
 80044c6:	bf00      	nop
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	200008bc 	.word	0x200008bc

080044d0 <speedXY_count>:

void speedXY_count(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 80044d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80044d8:	4819      	ldr	r0, [pc, #100]	@ (8004540 <speedXY_count+0x70>)
 80044da:	f002 feb1 	bl	8007240 <HAL_GPIO_ReadPin>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d111      	bne.n	8004508 <speedXY_count+0x38>
    {
        LCD_adc.speed_valueXY += 100;
 80044e4:	4b17      	ldr	r3, [pc, #92]	@ (8004544 <speedXY_count+0x74>)
 80044e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e8:	3364      	adds	r3, #100	@ 0x64
 80044ea:	4a16      	ldr	r2, [pc, #88]	@ (8004544 <speedXY_count+0x74>)
 80044ec:	6313      	str	r3, [r2, #48]	@ 0x30
        CNC_pos.max_speedXY = LCD_adc.speed_valueXY;
 80044ee:	4b15      	ldr	r3, [pc, #84]	@ (8004544 <speedXY_count+0x74>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fc f826 	bl	8000544 <__aeabi_i2d>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4912      	ldr	r1, [pc, #72]	@ (8004548 <speedXY_count+0x78>)
 80044fe:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
        osDelay(10);
 8004502:	200a      	movs	r0, #10
 8004504:	f007 fcf2 	bl	800beec <osDelay>
    }
    if (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004508:	2110      	movs	r1, #16
 800450a:	4810      	ldr	r0, [pc, #64]	@ (800454c <speedXY_count+0x7c>)
 800450c:	f002 fe98 	bl	8007240 <HAL_GPIO_ReadPin>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d111      	bne.n	800453a <speedXY_count+0x6a>
    {
        LCD_adc.speed_valueXY -= 100;
 8004516:	4b0b      	ldr	r3, [pc, #44]	@ (8004544 <speedXY_count+0x74>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	3b64      	subs	r3, #100	@ 0x64
 800451c:	4a09      	ldr	r2, [pc, #36]	@ (8004544 <speedXY_count+0x74>)
 800451e:	6313      	str	r3, [r2, #48]	@ 0x30
        CNC_pos.max_speedXY = LCD_adc.speed_valueXY;
 8004520:	4b08      	ldr	r3, [pc, #32]	@ (8004544 <speedXY_count+0x74>)
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	4618      	mov	r0, r3
 8004526:	f7fc f80d 	bl	8000544 <__aeabi_i2d>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4906      	ldr	r1, [pc, #24]	@ (8004548 <speedXY_count+0x78>)
 8004530:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
        osDelay(10);
 8004534:	200a      	movs	r0, #10
 8004536:	f007 fcd9 	bl	800beec <osDelay>
    }
}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
 8004544:	200008bc 	.word	0x200008bc
 8004548:	20000778 	.word	0x20000778
 800454c:	40020800 	.word	0x40020800

08004550 <speedZ_count>:

void speedZ_count(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8004554:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004558:	4819      	ldr	r0, [pc, #100]	@ (80045c0 <speedZ_count+0x70>)
 800455a:	f002 fe71 	bl	8007240 <HAL_GPIO_ReadPin>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d111      	bne.n	8004588 <speedZ_count+0x38>
    {
        LCD_adc.speed_valueZ += 100;
 8004564:	4b17      	ldr	r3, [pc, #92]	@ (80045c4 <speedZ_count+0x74>)
 8004566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004568:	3364      	adds	r3, #100	@ 0x64
 800456a:	4a16      	ldr	r2, [pc, #88]	@ (80045c4 <speedZ_count+0x74>)
 800456c:	6353      	str	r3, [r2, #52]	@ 0x34
        CNC_pos.max_speedZ = LCD_adc.speed_valueZ;
 800456e:	4b15      	ldr	r3, [pc, #84]	@ (80045c4 <speedZ_count+0x74>)
 8004570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004572:	4618      	mov	r0, r3
 8004574:	f7fb ffe6 	bl	8000544 <__aeabi_i2d>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4912      	ldr	r1, [pc, #72]	@ (80045c8 <speedZ_count+0x78>)
 800457e:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
        osDelay(10);
 8004582:	200a      	movs	r0, #10
 8004584:	f007 fcb2 	bl	800beec <osDelay>
    }
    if (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004588:	2110      	movs	r1, #16
 800458a:	4810      	ldr	r0, [pc, #64]	@ (80045cc <speedZ_count+0x7c>)
 800458c:	f002 fe58 	bl	8007240 <HAL_GPIO_ReadPin>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d111      	bne.n	80045ba <speedZ_count+0x6a>
    {
        LCD_adc.speed_valueZ -= 100;
 8004596:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <speedZ_count+0x74>)
 8004598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459a:	3b64      	subs	r3, #100	@ 0x64
 800459c:	4a09      	ldr	r2, [pc, #36]	@ (80045c4 <speedZ_count+0x74>)
 800459e:	6353      	str	r3, [r2, #52]	@ 0x34
        CNC_pos.max_speedZ = LCD_adc.speed_valueZ;
 80045a0:	4b08      	ldr	r3, [pc, #32]	@ (80045c4 <speedZ_count+0x74>)
 80045a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fb ffcd 	bl	8000544 <__aeabi_i2d>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4906      	ldr	r1, [pc, #24]	@ (80045c8 <speedZ_count+0x78>)
 80045b0:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
        osDelay(10);
 80045b4:	200a      	movs	r0, #10
 80045b6:	f007 fc99 	bl	800beec <osDelay>
    }
}
 80045ba:	bf00      	nop
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	200008bc 	.word	0x200008bc
 80045c8:	20000778 	.word	0x20000778
 80045cc:	40020800 	.word	0x40020800

080045d0 <updateButtonState>:

// Function to update button state and debounce time
void updateButtonState(Button* button, uint32_t currentTime) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
    button->last_stable_state = HAL_GPIO_ReadPin(button->port, button->pin);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	4619      	mov	r1, r3
 80045e4:	4610      	mov	r0, r2
 80045e6:	f002 fe2b 	bl	8007240 <HAL_GPIO_ReadPin>
 80045ea:	4603      	mov	r3, r0
 80045ec:	461a      	mov	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	609a      	str	r2, [r3, #8]
    button->last_debounce_time = currentTime;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	60da      	str	r2, [r3, #12]
}
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_GPIO_EXTI_Callback>:

// HAL GPIO EXTI Callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	80fb      	strh	r3, [r7, #6]
    uint32_t currentTime = HAL_GetTick();
 800460a:	f001 f9f3 	bl	80059f4 <HAL_GetTick>
 800460e:	60b8      	str	r0, [r7, #8]

    for (int i = 0; i < numButtons; ++i) {
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	e013      	b.n	800463e <HAL_GPIO_EXTI_Callback+0x3e>
        if (buttons[i]->pin == GPIO_Pin) {
 8004616:	4a0e      	ldr	r2, [pc, #56]	@ (8004650 <HAL_GPIO_EXTI_Callback+0x50>)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	88fa      	ldrh	r2, [r7, #6]
 8004622:	429a      	cmp	r2, r3
 8004624:	d108      	bne.n	8004638 <HAL_GPIO_EXTI_Callback+0x38>
            updateButtonState(buttons[i], currentTime);
 8004626:	4a0a      	ldr	r2, [pc, #40]	@ (8004650 <HAL_GPIO_EXTI_Callback+0x50>)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff ffcd 	bl	80045d0 <updateButtonState>
            break;
 8004636:	e007      	b.n	8004648 <HAL_GPIO_EXTI_Callback+0x48>
    for (int i = 0; i < numButtons; ++i) {
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3301      	adds	r3, #1
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	2207      	movs	r2, #7
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4293      	cmp	r3, r2
 8004644:	dbe7      	blt.n	8004616 <HAL_GPIO_EXTI_Callback+0x16>
        }
    }
}
 8004646:	bf00      	nop
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	2000008c 	.word	0x2000008c

08004654 <ButtonTask>:

// Function to handle button tasks
void ButtonTask(void) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 800465a:	f001 f9cb 	bl	80059f4 <HAL_GetTick>
 800465e:	60b8      	str	r0, [r7, #8]

    for (int i = 0; i < numButtons; ++i) {
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	e017      	b.n	8004696 <ButtonTask+0x42>
        Button* button = buttons[i];
 8004666:	4a69      	ldr	r2, [pc, #420]	@ (800480c <ButtonTask+0x1b8>)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466e:	607b      	str	r3, [r7, #4]

        if ((current_time - button->last_debounce_time > DEBOUNCE_DELAY) && (button->last_stable_state == GPIO_PIN_RESET)) {
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b50      	cmp	r3, #80	@ 0x50
 800467a:	d909      	bls.n	8004690 <ButtonTask+0x3c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d105      	bne.n	8004690 <ButtonTask+0x3c>
            button->handler();
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	4798      	blx	r3
            button->last_debounce_time = current_time;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < numButtons; ++i) {
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3301      	adds	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	2207      	movs	r2, #7
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4293      	cmp	r3, r2
 800469c:	dbe3      	blt.n	8004666 <ButtonTask+0x12>
        }
    }

    // Check button states for menu 3 and menu 4
    if (LCD_adc.demtong == 3 && LCD_adc.demmenu_3 == 1) {
 800469e:	4b5c      	ldr	r3, [pc, #368]	@ (8004810 <ButtonTask+0x1bc>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d165      	bne.n	8004772 <ButtonTask+0x11e>
 80046a6:	4b5a      	ldr	r3, [pc, #360]	@ (8004810 <ButtonTask+0x1bc>)
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d161      	bne.n	8004772 <ButtonTask+0x11e>
        switch (LCD_adc.selected_menu3_item) {
 80046ae:	4b58      	ldr	r3, [pc, #352]	@ (8004810 <ButtonTask+0x1bc>)
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d040      	beq.n	8004738 <ButtonTask+0xe4>
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	dc5b      	bgt.n	8004772 <ButtonTask+0x11e>
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <ButtonTask+0x70>
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d01d      	beq.n	80046fe <ButtonTask+0xaa>
 80046c2:	e056      	b.n	8004772 <ButtonTask+0x11e>
            case 0:
                lcd_put_cur(0, 0);
 80046c4:	2100      	movs	r1, #0
 80046c6:	2000      	movs	r0, #0
 80046c8:	f7fe fd54 	bl	8003174 <lcd_put_cur>
                lcd_send_string(">TYPE X= ");
 80046cc:	4851      	ldr	r0, [pc, #324]	@ (8004814 <ButtonTask+0x1c0>)
 80046ce:	f7fe fda3 	bl	8003218 <lcd_send_string>
                float_to_string(LCD_adc.typeX_value, LCD_adc.X_Val, 2);
 80046d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004810 <ButtonTask+0x1bc>)
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046de:	2102      	movs	r1, #2
 80046e0:	484d      	ldr	r0, [pc, #308]	@ (8004818 <ButtonTask+0x1c4>)
 80046e2:	eeb0 0a67 	vmov.f32	s0, s15
 80046e6:	f7ff fa63 	bl	8003bb0 <float_to_string>
                lcd_put_cur(0, 9);
 80046ea:	2109      	movs	r1, #9
 80046ec:	2000      	movs	r0, #0
 80046ee:	f7fe fd41 	bl	8003174 <lcd_put_cur>
                lcd_send_string(LCD_adc.X_Val);
 80046f2:	4849      	ldr	r0, [pc, #292]	@ (8004818 <ButtonTask+0x1c4>)
 80046f4:	f7fe fd90 	bl	8003218 <lcd_send_string>
                X_count();
 80046f8:	f7ff fdec 	bl	80042d4 <X_count>
                break;
 80046fc:	e039      	b.n	8004772 <ButtonTask+0x11e>
            case 1:
                lcd_put_cur(1, 0);
 80046fe:	2100      	movs	r1, #0
 8004700:	2001      	movs	r0, #1
 8004702:	f7fe fd37 	bl	8003174 <lcd_put_cur>
                lcd_send_string(">TYPE Y= ");
 8004706:	4845      	ldr	r0, [pc, #276]	@ (800481c <ButtonTask+0x1c8>)
 8004708:	f7fe fd86 	bl	8003218 <lcd_send_string>
                float_to_string(LCD_adc.typeY_value, LCD_adc.Y_Val, 2);
 800470c:	4b40      	ldr	r3, [pc, #256]	@ (8004810 <ButtonTask+0x1bc>)
 800470e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004710:	ee07 3a90 	vmov	s15, r3
 8004714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004718:	2102      	movs	r1, #2
 800471a:	4841      	ldr	r0, [pc, #260]	@ (8004820 <ButtonTask+0x1cc>)
 800471c:	eeb0 0a67 	vmov.f32	s0, s15
 8004720:	f7ff fa46 	bl	8003bb0 <float_to_string>
                lcd_put_cur(1, 9);
 8004724:	2109      	movs	r1, #9
 8004726:	2001      	movs	r0, #1
 8004728:	f7fe fd24 	bl	8003174 <lcd_put_cur>
                lcd_send_string(LCD_adc.Y_Val);
 800472c:	483c      	ldr	r0, [pc, #240]	@ (8004820 <ButtonTask+0x1cc>)
 800472e:	f7fe fd73 	bl	8003218 <lcd_send_string>
                Y_count();
 8004732:	f7ff fe09 	bl	8004348 <Y_count>
                break;
 8004736:	e01c      	b.n	8004772 <ButtonTask+0x11e>
            case 2:
                lcd_put_cur(2, 0);
 8004738:	2100      	movs	r1, #0
 800473a:	2002      	movs	r0, #2
 800473c:	f7fe fd1a 	bl	8003174 <lcd_put_cur>
                lcd_send_string(">TYPE Z= ");
 8004740:	4838      	ldr	r0, [pc, #224]	@ (8004824 <ButtonTask+0x1d0>)
 8004742:	f7fe fd69 	bl	8003218 <lcd_send_string>
                float_to_string(LCD_adc.typeZ_value, LCD_adc.Z_Val, 2);
 8004746:	4b32      	ldr	r3, [pc, #200]	@ (8004810 <ButtonTask+0x1bc>)
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004752:	2102      	movs	r1, #2
 8004754:	4834      	ldr	r0, [pc, #208]	@ (8004828 <ButtonTask+0x1d4>)
 8004756:	eeb0 0a67 	vmov.f32	s0, s15
 800475a:	f7ff fa29 	bl	8003bb0 <float_to_string>
                lcd_put_cur(2, 9);
 800475e:	2109      	movs	r1, #9
 8004760:	2002      	movs	r0, #2
 8004762:	f7fe fd07 	bl	8003174 <lcd_put_cur>
                lcd_send_string(LCD_adc.Z_Val);
 8004766:	4830      	ldr	r0, [pc, #192]	@ (8004828 <ButtonTask+0x1d4>)
 8004768:	f7fe fd56 	bl	8003218 <lcd_send_string>
                Z_count();
 800476c:	f7ff fe26 	bl	80043bc <Z_count>
                break;
 8004770:	bf00      	nop
        }
    }

    if (LCD_adc.demtong == 3 && LCD_adc.demmenu_4 == 1) {
 8004772:	4b27      	ldr	r3, [pc, #156]	@ (8004810 <ButtonTask+0x1bc>)
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b03      	cmp	r3, #3
 8004778:	d144      	bne.n	8004804 <ButtonTask+0x1b0>
 800477a:	4b25      	ldr	r3, [pc, #148]	@ (8004810 <ButtonTask+0x1bc>)
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d140      	bne.n	8004804 <ButtonTask+0x1b0>
        switch (LCD_adc.selected_menu4_item) {
 8004782:	4b23      	ldr	r3, [pc, #140]	@ (8004810 <ButtonTask+0x1bc>)
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <ButtonTask+0x13c>
 800478a:	2b01      	cmp	r3, #1
 800478c:	d01d      	beq.n	80047ca <ButtonTask+0x176>
                lcd_send_string(LCD_adc.speed_ValZ);
                speedZ_count();
                break;
        }
    }
}
 800478e:	e039      	b.n	8004804 <ButtonTask+0x1b0>
                lcd_put_cur(0, 0);
 8004790:	2100      	movs	r1, #0
 8004792:	2000      	movs	r0, #0
 8004794:	f7fe fcee 	bl	8003174 <lcd_put_cur>
                lcd_send_string(">SPEED X-Y= ");
 8004798:	4824      	ldr	r0, [pc, #144]	@ (800482c <ButtonTask+0x1d8>)
 800479a:	f7fe fd3d 	bl	8003218 <lcd_send_string>
                float_to_string(LCD_adc.speed_valueXY, LCD_adc.speed_ValXY, 2);
 800479e:	4b1c      	ldr	r3, [pc, #112]	@ (8004810 <ButtonTask+0x1bc>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047aa:	2102      	movs	r1, #2
 80047ac:	4820      	ldr	r0, [pc, #128]	@ (8004830 <ButtonTask+0x1dc>)
 80047ae:	eeb0 0a67 	vmov.f32	s0, s15
 80047b2:	f7ff f9fd 	bl	8003bb0 <float_to_string>
                lcd_put_cur(0, 12);
 80047b6:	210c      	movs	r1, #12
 80047b8:	2000      	movs	r0, #0
 80047ba:	f7fe fcdb 	bl	8003174 <lcd_put_cur>
                lcd_send_string(LCD_adc.speed_ValXY);
 80047be:	481c      	ldr	r0, [pc, #112]	@ (8004830 <ButtonTask+0x1dc>)
 80047c0:	f7fe fd2a 	bl	8003218 <lcd_send_string>
                speedXY_count();
 80047c4:	f7ff fe84 	bl	80044d0 <speedXY_count>
                break;
 80047c8:	e01c      	b.n	8004804 <ButtonTask+0x1b0>
                lcd_put_cur(1, 0);
 80047ca:	2100      	movs	r1, #0
 80047cc:	2001      	movs	r0, #1
 80047ce:	f7fe fcd1 	bl	8003174 <lcd_put_cur>
                lcd_send_string(">SPEED Z= ");
 80047d2:	4818      	ldr	r0, [pc, #96]	@ (8004834 <ButtonTask+0x1e0>)
 80047d4:	f7fe fd20 	bl	8003218 <lcd_send_string>
                float_to_string(LCD_adc.speed_valueZ, LCD_adc.speed_ValZ, 2);
 80047d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004810 <ButtonTask+0x1bc>)
 80047da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047dc:	ee07 3a90 	vmov	s15, r3
 80047e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047e4:	2102      	movs	r1, #2
 80047e6:	4814      	ldr	r0, [pc, #80]	@ (8004838 <ButtonTask+0x1e4>)
 80047e8:	eeb0 0a67 	vmov.f32	s0, s15
 80047ec:	f7ff f9e0 	bl	8003bb0 <float_to_string>
                lcd_put_cur(1, 12);
 80047f0:	210c      	movs	r1, #12
 80047f2:	2001      	movs	r0, #1
 80047f4:	f7fe fcbe 	bl	8003174 <lcd_put_cur>
                lcd_send_string(LCD_adc.speed_ValZ);
 80047f8:	480f      	ldr	r0, [pc, #60]	@ (8004838 <ButtonTask+0x1e4>)
 80047fa:	f7fe fd0d 	bl	8003218 <lcd_send_string>
                speedZ_count();
 80047fe:	f7ff fea7 	bl	8004550 <speedZ_count>
                break;
 8004802:	bf00      	nop
}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	2000008c 	.word	0x2000008c
 8004810:	200008bc 	.word	0x200008bc
 8004814:	08015954 	.word	0x08015954
 8004818:	2000096e 	.word	0x2000096e
 800481c:	08015984 	.word	0x08015984
 8004820:	20000973 	.word	0x20000973
 8004824:	08015990 	.word	0x08015990
 8004828:	20000978 	.word	0x20000978
 800482c:	0801599c 	.word	0x0801599c
 8004830:	2000097d 	.word	0x2000097d
 8004834:	080159c4 	.word	0x080159c4
 8004838:	20000982 	.word	0x20000982

0800483c <handle_up_button_press>:

void handle_up_button_press(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
    if (LCD_adc.demtong == 1) // move down in menu_main
 8004840:	4b22      	ldr	r3, [pc, #136]	@ (80048cc <handle_up_button_press+0x90>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d10f      	bne.n	8004868 <handle_up_button_press+0x2c>
    {
        if (LCD_adc.menu_main <= 0)
 8004848:	4b20      	ldr	r3, [pc, #128]	@ (80048cc <handle_up_button_press+0x90>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	dc03      	bgt.n	8004858 <handle_up_button_press+0x1c>
        {
            LCD_adc.menu_main = 3;
 8004850:	4b1e      	ldr	r3, [pc, #120]	@ (80048cc <handle_up_button_press+0x90>)
 8004852:	2203      	movs	r2, #3
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e004      	b.n	8004862 <handle_up_button_press+0x26>
        }
        else
        {
            LCD_adc.menu_main -= 1;
 8004858:	4b1c      	ldr	r3, [pc, #112]	@ (80048cc <handle_up_button_press+0x90>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3b01      	subs	r3, #1
 800485e:	4a1b      	ldr	r2, [pc, #108]	@ (80048cc <handle_up_button_press+0x90>)
 8004860:	6013      	str	r3, [r2, #0]
        }
        display_main();
 8004862:	f7ff fa83 	bl	8003d6c <display_main>
        {
            LCD_adc.selected_menu4_item -= 1;
        }
        menu_4();
    }
}
 8004866:	e02e      	b.n	80048c6 <handle_up_button_press+0x8a>
    else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 2)
 8004868:	4b18      	ldr	r3, [pc, #96]	@ (80048cc <handle_up_button_press+0x90>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	2b02      	cmp	r3, #2
 800486e:	d113      	bne.n	8004898 <handle_up_button_press+0x5c>
 8004870:	4b16      	ldr	r3, [pc, #88]	@ (80048cc <handle_up_button_press+0x90>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d10f      	bne.n	8004898 <handle_up_button_press+0x5c>
        if(LCD_adc.selected_menu3_item <= 0)
 8004878:	4b14      	ldr	r3, [pc, #80]	@ (80048cc <handle_up_button_press+0x90>)
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	dc03      	bgt.n	8004888 <handle_up_button_press+0x4c>
            LCD_adc.selected_menu3_item = 2;
 8004880:	4b12      	ldr	r3, [pc, #72]	@ (80048cc <handle_up_button_press+0x90>)
 8004882:	2202      	movs	r2, #2
 8004884:	615a      	str	r2, [r3, #20]
 8004886:	e004      	b.n	8004892 <handle_up_button_press+0x56>
            LCD_adc.selected_menu3_item -= 1;
 8004888:	4b10      	ldr	r3, [pc, #64]	@ (80048cc <handle_up_button_press+0x90>)
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	3b01      	subs	r3, #1
 800488e:	4a0f      	ldr	r2, [pc, #60]	@ (80048cc <handle_up_button_press+0x90>)
 8004890:	6153      	str	r3, [r2, #20]
        menu_3();
 8004892:	f7ff fc9f 	bl	80041d4 <menu_3>
}
 8004896:	e016      	b.n	80048c6 <handle_up_button_press+0x8a>
    else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 3)
 8004898:	4b0c      	ldr	r3, [pc, #48]	@ (80048cc <handle_up_button_press+0x90>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d112      	bne.n	80048c6 <handle_up_button_press+0x8a>
 80048a0:	4b0a      	ldr	r3, [pc, #40]	@ (80048cc <handle_up_button_press+0x90>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d10e      	bne.n	80048c6 <handle_up_button_press+0x8a>
        if(LCD_adc.selected_menu4_item <= 0)
 80048a8:	4b08      	ldr	r3, [pc, #32]	@ (80048cc <handle_up_button_press+0x90>)
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	dc03      	bgt.n	80048b8 <handle_up_button_press+0x7c>
            LCD_adc.selected_menu4_item = 1;
 80048b0:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <handle_up_button_press+0x90>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	619a      	str	r2, [r3, #24]
 80048b6:	e004      	b.n	80048c2 <handle_up_button_press+0x86>
            LCD_adc.selected_menu4_item -= 1;
 80048b8:	4b04      	ldr	r3, [pc, #16]	@ (80048cc <handle_up_button_press+0x90>)
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	3b01      	subs	r3, #1
 80048be:	4a03      	ldr	r2, [pc, #12]	@ (80048cc <handle_up_button_press+0x90>)
 80048c0:	6193      	str	r3, [r2, #24]
        menu_4();
 80048c2:	f7ff fdb5 	bl	8004430 <menu_4>
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	200008bc 	.word	0x200008bc

080048d0 <handle_down_button_press>:

void handle_down_button_press(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
	if (LCD_adc.demtong == 1) // move up in menu_main
 80048d4:	4b22      	ldr	r3, [pc, #136]	@ (8004960 <handle_down_button_press+0x90>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d10f      	bne.n	80048fc <handle_down_button_press+0x2c>
	{
		if (LCD_adc.menu_main >= 3)
 80048dc:	4b20      	ldr	r3, [pc, #128]	@ (8004960 <handle_down_button_press+0x90>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	dd03      	ble.n	80048ec <handle_down_button_press+0x1c>
		{
		   LCD_adc.menu_main = 0;
 80048e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004960 <handle_down_button_press+0x90>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e004      	b.n	80048f6 <handle_down_button_press+0x26>
		}
		else
		{
		   LCD_adc.menu_main += 1;
 80048ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004960 <handle_down_button_press+0x90>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3301      	adds	r3, #1
 80048f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004960 <handle_down_button_press+0x90>)
 80048f4:	6013      	str	r3, [r2, #0]
		}
		display_main();
 80048f6:	f7ff fa39 	bl	8003d6c <display_main>
		{
			LCD_adc.selected_menu4_item += 1;
		}
		menu_4();
	}
}
 80048fa:	e02e      	b.n	800495a <handle_down_button_press+0x8a>
	else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 2)
 80048fc:	4b18      	ldr	r3, [pc, #96]	@ (8004960 <handle_down_button_press+0x90>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d113      	bne.n	800492c <handle_down_button_press+0x5c>
 8004904:	4b16      	ldr	r3, [pc, #88]	@ (8004960 <handle_down_button_press+0x90>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d10f      	bne.n	800492c <handle_down_button_press+0x5c>
		if(LCD_adc.selected_menu3_item >= 2)
 800490c:	4b14      	ldr	r3, [pc, #80]	@ (8004960 <handle_down_button_press+0x90>)
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	2b01      	cmp	r3, #1
 8004912:	dd03      	ble.n	800491c <handle_down_button_press+0x4c>
			LCD_adc.selected_menu3_item = 0;
 8004914:	4b12      	ldr	r3, [pc, #72]	@ (8004960 <handle_down_button_press+0x90>)
 8004916:	2200      	movs	r2, #0
 8004918:	615a      	str	r2, [r3, #20]
 800491a:	e004      	b.n	8004926 <handle_down_button_press+0x56>
			LCD_adc.selected_menu3_item += 1;
 800491c:	4b10      	ldr	r3, [pc, #64]	@ (8004960 <handle_down_button_press+0x90>)
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	3301      	adds	r3, #1
 8004922:	4a0f      	ldr	r2, [pc, #60]	@ (8004960 <handle_down_button_press+0x90>)
 8004924:	6153      	str	r3, [r2, #20]
		menu_3();
 8004926:	f7ff fc55 	bl	80041d4 <menu_3>
}
 800492a:	e016      	b.n	800495a <handle_down_button_press+0x8a>
	else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 3)
 800492c:	4b0c      	ldr	r3, [pc, #48]	@ (8004960 <handle_down_button_press+0x90>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d112      	bne.n	800495a <handle_down_button_press+0x8a>
 8004934:	4b0a      	ldr	r3, [pc, #40]	@ (8004960 <handle_down_button_press+0x90>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b03      	cmp	r3, #3
 800493a:	d10e      	bne.n	800495a <handle_down_button_press+0x8a>
		if(LCD_adc.selected_menu4_item >= 1)
 800493c:	4b08      	ldr	r3, [pc, #32]	@ (8004960 <handle_down_button_press+0x90>)
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	2b00      	cmp	r3, #0
 8004942:	dd03      	ble.n	800494c <handle_down_button_press+0x7c>
			LCD_adc.selected_menu4_item = 0;
 8004944:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <handle_down_button_press+0x90>)
 8004946:	2200      	movs	r2, #0
 8004948:	619a      	str	r2, [r3, #24]
 800494a:	e004      	b.n	8004956 <handle_down_button_press+0x86>
			LCD_adc.selected_menu4_item += 1;
 800494c:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <handle_down_button_press+0x90>)
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	3301      	adds	r3, #1
 8004952:	4a03      	ldr	r2, [pc, #12]	@ (8004960 <handle_down_button_press+0x90>)
 8004954:	6193      	str	r3, [r2, #24]
		menu_4();
 8004956:	f7ff fd6b 	bl	8004430 <menu_4>
}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	200008bc 	.word	0x200008bc

08004964 <handle_back_button_press>:

void handle_back_button_press(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
    LCD_adc.demback += 1;
 8004968:	4b54      	ldr	r3, [pc, #336]	@ (8004abc <handle_back_button_press+0x158>)
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	3301      	adds	r3, #1
 800496e:	4a53      	ldr	r2, [pc, #332]	@ (8004abc <handle_back_button_press+0x158>)
 8004970:	6113      	str	r3, [r2, #16]
    if (LCD_adc.demback == 1)
 8004972:	4b52      	ldr	r3, [pc, #328]	@ (8004abc <handle_back_button_press+0x158>)
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b01      	cmp	r3, #1
 8004978:	f040 8099 	bne.w	8004aae <handle_back_button_press+0x14a>
    {
       if (LCD_adc.demtong == 1 && (LCD_adc.menu_main == 0 || LCD_adc.menu_main == 1 || LCD_adc.menu_main == 2 || LCD_adc.menu_main == 3))
 800497c:	4b4f      	ldr	r3, [pc, #316]	@ (8004abc <handle_back_button_press+0x158>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d11a      	bne.n	80049ba <handle_back_button_press+0x56>
 8004984:	4b4d      	ldr	r3, [pc, #308]	@ (8004abc <handle_back_button_press+0x158>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00b      	beq.n	80049a4 <handle_back_button_press+0x40>
 800498c:	4b4b      	ldr	r3, [pc, #300]	@ (8004abc <handle_back_button_press+0x158>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d007      	beq.n	80049a4 <handle_back_button_press+0x40>
 8004994:	4b49      	ldr	r3, [pc, #292]	@ (8004abc <handle_back_button_press+0x158>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b02      	cmp	r3, #2
 800499a:	d003      	beq.n	80049a4 <handle_back_button_press+0x40>
 800499c:	4b47      	ldr	r3, [pc, #284]	@ (8004abc <handle_back_button_press+0x158>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b03      	cmp	r3, #3
 80049a2:	d10a      	bne.n	80049ba <handle_back_button_press+0x56>
       {
           LCD_adc.demtong -= 1;
 80049a4:	4b45      	ldr	r3, [pc, #276]	@ (8004abc <handle_back_button_press+0x158>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	4a44      	ldr	r2, [pc, #272]	@ (8004abc <handle_back_button_press+0x158>)
 80049ac:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 80049ae:	4b43      	ldr	r3, [pc, #268]	@ (8004abc <handle_back_button_press+0x158>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	611a      	str	r2, [r3, #16]
           display_menu();
 80049b4:	f7ff f9ae 	bl	8003d14 <display_menu>
 80049b8:	e07d      	b.n	8004ab6 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 0) // From menu_1 back to display main_menu
 80049ba:	4b40      	ldr	r3, [pc, #256]	@ (8004abc <handle_back_button_press+0x158>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d10e      	bne.n	80049e0 <handle_back_button_press+0x7c>
 80049c2:	4b3e      	ldr	r3, [pc, #248]	@ (8004abc <handle_back_button_press+0x158>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <handle_back_button_press+0x7c>
       {
           LCD_adc.demtong -= 1;
 80049ca:	4b3c      	ldr	r3, [pc, #240]	@ (8004abc <handle_back_button_press+0x158>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	4a3a      	ldr	r2, [pc, #232]	@ (8004abc <handle_back_button_press+0x158>)
 80049d2:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 80049d4:	4b39      	ldr	r3, [pc, #228]	@ (8004abc <handle_back_button_press+0x158>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	611a      	str	r2, [r3, #16]
           display_main();
 80049da:	f7ff f9c7 	bl	8003d6c <display_main>
 80049de:	e06a      	b.n	8004ab6 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 1) // From menu_2 back to display main_menu
 80049e0:	4b36      	ldr	r3, [pc, #216]	@ (8004abc <handle_back_button_press+0x158>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d10e      	bne.n	8004a06 <handle_back_button_press+0xa2>
 80049e8:	4b34      	ldr	r3, [pc, #208]	@ (8004abc <handle_back_button_press+0x158>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d10a      	bne.n	8004a06 <handle_back_button_press+0xa2>
       {
           LCD_adc.demtong -= 1;
 80049f0:	4b32      	ldr	r3, [pc, #200]	@ (8004abc <handle_back_button_press+0x158>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	4a31      	ldr	r2, [pc, #196]	@ (8004abc <handle_back_button_press+0x158>)
 80049f8:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 80049fa:	4b30      	ldr	r3, [pc, #192]	@ (8004abc <handle_back_button_press+0x158>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	611a      	str	r2, [r3, #16]
           display_main();
 8004a00:	f7ff f9b4 	bl	8003d6c <display_main>
 8004a04:	e057      	b.n	8004ab6 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 2) // From menu_3 back to display main_menu
 8004a06:	4b2d      	ldr	r3, [pc, #180]	@ (8004abc <handle_back_button_press+0x158>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d111      	bne.n	8004a32 <handle_back_button_press+0xce>
 8004a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8004abc <handle_back_button_press+0x158>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d10d      	bne.n	8004a32 <handle_back_button_press+0xce>
       {
           LCD_adc.demtong -= 1;
 8004a16:	4b29      	ldr	r3, [pc, #164]	@ (8004abc <handle_back_button_press+0x158>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	4a27      	ldr	r2, [pc, #156]	@ (8004abc <handle_back_button_press+0x158>)
 8004a1e:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 8004a20:	4b26      	ldr	r3, [pc, #152]	@ (8004abc <handle_back_button_press+0x158>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	611a      	str	r2, [r3, #16]
           LCD_adc.demmenu_3 = 0;
 8004a26:	4b25      	ldr	r3, [pc, #148]	@ (8004abc <handle_back_button_press+0x158>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	61da      	str	r2, [r3, #28]
           display_main();
 8004a2c:	f7ff f99e 	bl	8003d6c <display_main>
 8004a30:	e041      	b.n	8004ab6 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 3 && LCD_adc.demmenu_3 >= 1) // From select_menu3 back to menu_3
 8004a32:	4b22      	ldr	r3, [pc, #136]	@ (8004abc <handle_back_button_press+0x158>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d10f      	bne.n	8004a5a <handle_back_button_press+0xf6>
 8004a3a:	4b20      	ldr	r3, [pc, #128]	@ (8004abc <handle_back_button_press+0x158>)
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	dd0b      	ble.n	8004a5a <handle_back_button_press+0xf6>
       {
           LCD_adc.demback = 0;
 8004a42:	4b1e      	ldr	r3, [pc, #120]	@ (8004abc <handle_back_button_press+0x158>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	611a      	str	r2, [r3, #16]
           LCD_adc.demtong = 2;
 8004a48:	4b1c      	ldr	r3, [pc, #112]	@ (8004abc <handle_back_button_press+0x158>)
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	60da      	str	r2, [r3, #12]
           LCD_adc.selected_menu3_item = 0;
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004abc <handle_back_button_press+0x158>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	615a      	str	r2, [r3, #20]
           menu_3();
 8004a54:	f7ff fbbe 	bl	80041d4 <menu_3>
 8004a58:	e02d      	b.n	8004ab6 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 3) // From menu_4 back to display main_menu
 8004a5a:	4b18      	ldr	r3, [pc, #96]	@ (8004abc <handle_back_button_press+0x158>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d111      	bne.n	8004a86 <handle_back_button_press+0x122>
 8004a62:	4b16      	ldr	r3, [pc, #88]	@ (8004abc <handle_back_button_press+0x158>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d10d      	bne.n	8004a86 <handle_back_button_press+0x122>
       {
           LCD_adc.demtong -= 1;
 8004a6a:	4b14      	ldr	r3, [pc, #80]	@ (8004abc <handle_back_button_press+0x158>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	4a12      	ldr	r2, [pc, #72]	@ (8004abc <handle_back_button_press+0x158>)
 8004a72:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 8004a74:	4b11      	ldr	r3, [pc, #68]	@ (8004abc <handle_back_button_press+0x158>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	611a      	str	r2, [r3, #16]
           LCD_adc.demmenu_4 = 0;
 8004a7a:	4b10      	ldr	r3, [pc, #64]	@ (8004abc <handle_back_button_press+0x158>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	621a      	str	r2, [r3, #32]
           display_main();
 8004a80:	f7ff f974 	bl	8003d6c <display_main>
 8004a84:	e017      	b.n	8004ab6 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 3 && LCD_adc.demmenu_4 >= 1) // From select_menu4 back to menu_4
 8004a86:	4b0d      	ldr	r3, [pc, #52]	@ (8004abc <handle_back_button_press+0x158>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	d113      	bne.n	8004ab6 <handle_back_button_press+0x152>
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004abc <handle_back_button_press+0x158>)
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	dd0f      	ble.n	8004ab6 <handle_back_button_press+0x152>
       {
           LCD_adc.demback = 0;
 8004a96:	4b09      	ldr	r3, [pc, #36]	@ (8004abc <handle_back_button_press+0x158>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	611a      	str	r2, [r3, #16]
           LCD_adc.demtong = 2;
 8004a9c:	4b07      	ldr	r3, [pc, #28]	@ (8004abc <handle_back_button_press+0x158>)
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	60da      	str	r2, [r3, #12]
           LCD_adc.selected_menu4_item = 0;
 8004aa2:	4b06      	ldr	r3, [pc, #24]	@ (8004abc <handle_back_button_press+0x158>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	619a      	str	r2, [r3, #24]
           menu_4();
 8004aa8:	f7ff fcc2 	bl	8004430 <menu_4>
    }
    else
    {
       LCD_adc.demback = 0;
    }
}
 8004aac:	e003      	b.n	8004ab6 <handle_back_button_press+0x152>
       LCD_adc.demback = 0;
 8004aae:	4b03      	ldr	r3, [pc, #12]	@ (8004abc <handle_back_button_press+0x158>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	611a      	str	r2, [r3, #16]
}
 8004ab4:	e7ff      	b.n	8004ab6 <handle_back_button_press+0x152>
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200008bc 	.word	0x200008bc

08004ac0 <handle_select_button_press>:

void handle_select_button_press(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
    LCD_adc.demtong += 1;
 8004ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	4a3b      	ldr	r2, [pc, #236]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004acc:	60d3      	str	r3, [r2, #12]
    if (LCD_adc.demtong == 1) // in menu_main
 8004ace:	4b3a      	ldr	r3, [pc, #232]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d105      	bne.n	8004ae2 <handle_select_button_press+0x22>
    {
       LCD_adc.demback = 0;
 8004ad6:	4b38      	ldr	r3, [pc, #224]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	611a      	str	r2, [r3, #16]
       display_main();
 8004adc:	f7ff f946 	bl	8003d6c <display_main>
    else if (LCD_adc.demtong > 3)
    {
       LCD_adc.demtong = 3;
       LCD_adc.demback = 0;
    }
}
 8004ae0:	e068      	b.n	8004bb4 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 0) // choose menu 1
 8004ae2:	4b35      	ldr	r3, [pc, #212]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d109      	bne.n	8004afe <handle_select_button_press+0x3e>
 8004aea:	4b33      	ldr	r3, [pc, #204]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d105      	bne.n	8004afe <handle_select_button_press+0x3e>
       LCD_adc.demback = 0;
 8004af2:	4b31      	ldr	r3, [pc, #196]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	611a      	str	r2, [r3, #16]
       menu_1();
 8004af8:	f7ff f9da 	bl	8003eb0 <menu_1>
 8004afc:	e05a      	b.n	8004bb4 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 1) // choose menu 2
 8004afe:	4b2e      	ldr	r3, [pc, #184]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d109      	bne.n	8004b1a <handle_select_button_press+0x5a>
 8004b06:	4b2c      	ldr	r3, [pc, #176]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d105      	bne.n	8004b1a <handle_select_button_press+0x5a>
       LCD_adc.demback = 0;
 8004b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	611a      	str	r2, [r3, #16]
       menu_2();
 8004b14:	f7ff faba 	bl	800408c <menu_2>
 8004b18:	e04c      	b.n	8004bb4 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 2) // In menu 3
 8004b1a:	4b27      	ldr	r3, [pc, #156]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d10e      	bne.n	8004b40 <handle_select_button_press+0x80>
 8004b22:	4b25      	ldr	r3, [pc, #148]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d10a      	bne.n	8004b40 <handle_select_button_press+0x80>
       LCD_adc.demback = 0;
 8004b2a:	4b23      	ldr	r3, [pc, #140]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	611a      	str	r2, [r3, #16]
       menu_3();
 8004b30:	f7ff fb50 	bl	80041d4 <menu_3>
       LCD_adc.demmenu_3 += 1;
 8004b34:	4b20      	ldr	r3, [pc, #128]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b3c:	61d3      	str	r3, [r2, #28]
 8004b3e:	e039      	b.n	8004bb4 <handle_select_button_press+0xf4>
    else if(LCD_adc.demtong == 3 && LCD_adc.demmenu_3 == 1)//choose menu 3
 8004b40:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d109      	bne.n	8004b5c <handle_select_button_press+0x9c>
 8004b48:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d105      	bne.n	8004b5c <handle_select_button_press+0x9c>
        LCD_adc.demback = 0;
 8004b50:	4b19      	ldr	r3, [pc, #100]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	611a      	str	r2, [r3, #16]
       select_menu3();
 8004b56:	f7ff fba3 	bl	80042a0 <select_menu3>
 8004b5a:	e02b      	b.n	8004bb4 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 3) // In menu 4
 8004b5c:	4b16      	ldr	r3, [pc, #88]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d10e      	bne.n	8004b82 <handle_select_button_press+0xc2>
 8004b64:	4b14      	ldr	r3, [pc, #80]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d10a      	bne.n	8004b82 <handle_select_button_press+0xc2>
       LCD_adc.demback = 0;
 8004b6c:	4b12      	ldr	r3, [pc, #72]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]
       menu_4();
 8004b72:	f7ff fc5d 	bl	8004430 <menu_4>
       LCD_adc.demmenu_4 += 1;
 8004b76:	4b10      	ldr	r3, [pc, #64]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b7e:	6213      	str	r3, [r2, #32]
 8004b80:	e018      	b.n	8004bb4 <handle_select_button_press+0xf4>
    else if(LCD_adc.demtong == 3 && LCD_adc.demmenu_4 == 1)//choose menu 4
 8004b82:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d109      	bne.n	8004b9e <handle_select_button_press+0xde>
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d105      	bne.n	8004b9e <handle_select_button_press+0xde>
       LCD_adc.demback = 0;
 8004b92:	4b09      	ldr	r3, [pc, #36]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	611a      	str	r2, [r3, #16]
       select_menu4();
 8004b98:	f7ff fc86 	bl	80044a8 <select_menu4>
 8004b9c:	e00a      	b.n	8004bb4 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong > 3)
 8004b9e:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	dd06      	ble.n	8004bb4 <handle_select_button_press+0xf4>
       LCD_adc.demtong = 3;
 8004ba6:	4b04      	ldr	r3, [pc, #16]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004ba8:	2203      	movs	r2, #3
 8004baa:	60da      	str	r2, [r3, #12]
       LCD_adc.demback = 0;
 8004bac:	4b02      	ldr	r3, [pc, #8]	@ (8004bb8 <handle_select_button_press+0xf8>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	611a      	str	r2, [r3, #16]
}
 8004bb2:	e7ff      	b.n	8004bb4 <handle_select_button_press+0xf4>
 8004bb4:	bf00      	nop
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	200008bc 	.word	0x200008bc

08004bbc <handle_reset_button_press>:

void handle_reset_button_press(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
    if (state.reset_press == 1)
 8004bc0:	4b05      	ldr	r3, [pc, #20]	@ (8004bd8 <handle_reset_button_press+0x1c>)
 8004bc2:	789b      	ldrb	r3, [r3, #2]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d104      	bne.n	8004bd4 <handle_reset_button_press+0x18>
    {
        resetProgram();
 8004bca:	f000 f83f 	bl	8004c4c <resetProgram>
        // when reseted, restarted again
        state.reset_press = 0;
 8004bce:	4b02      	ldr	r3, [pc, #8]	@ (8004bd8 <handle_reset_button_press+0x1c>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	709a      	strb	r2, [r3, #2]
    }
}
 8004bd4:	bf00      	nop
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	20000a28 	.word	0x20000a28

08004bdc <handle_start_button_press>:

void handle_start_button_press(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
    if (state.reset_press == 0)
 8004be0:	4b0a      	ldr	r3, [pc, #40]	@ (8004c0c <handle_start_button_press+0x30>)
 8004be2:	789b      	ldrb	r3, [r3, #2]
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10d      	bne.n	8004c06 <handle_start_button_press+0x2a>
    {
    	state.start_press = 1;
 8004bea:	4b08      	ldr	r3, [pc, #32]	@ (8004c0c <handle_start_button_press+0x30>)
 8004bec:	2201      	movs	r2, #1
 8004bee:	701a      	strb	r2, [r3, #0]
    	state.stop_press = 0;
 8004bf0:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <handle_start_button_press+0x30>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	705a      	strb	r2, [r3, #1]
        HAL_GPIO_WritePin(drill_port, drill_pin, 1);
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004bfc:	4804      	ldr	r0, [pc, #16]	@ (8004c10 <handle_start_button_press+0x34>)
 8004bfe:	f002 fb37 	bl	8007270 <HAL_GPIO_WritePin>
    	StartProgram();
 8004c02:	f000 f931 	bl	8004e68 <StartProgram>
    }
}
 8004c06:	bf00      	nop
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000a28 	.word	0x20000a28
 8004c10:	40020400 	.word	0x40020400

08004c14 <handle_stop_button_press>:

void handle_stop_button_press(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
    if (state.reset_press == 0)
 8004c18:	4b0a      	ldr	r3, [pc, #40]	@ (8004c44 <handle_stop_button_press+0x30>)
 8004c1a:	789b      	ldrb	r3, [r3, #2]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10d      	bne.n	8004c3e <handle_stop_button_press+0x2a>
    {
    	state.stop_press = 1;
 8004c22:	4b08      	ldr	r3, [pc, #32]	@ (8004c44 <handle_stop_button_press+0x30>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	705a      	strb	r2, [r3, #1]
        HAL_GPIO_WritePin(drill_port, drill_pin, 0);
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c2e:	4806      	ldr	r0, [pc, #24]	@ (8004c48 <handle_stop_button_press+0x34>)
 8004c30:	f002 fb1e 	bl	8007270 <HAL_GPIO_WritePin>
        StopProgram();
 8004c34:	f000 f900 	bl	8004e38 <StopProgram>
        // Sau khi dừng, chỉ cho phép nhấn nút reset
        state.reset_press = 1;
 8004c38:	4b02      	ldr	r3, [pc, #8]	@ (8004c44 <handle_stop_button_press+0x30>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	709a      	strb	r2, [r3, #2]
    }
}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000a28 	.word	0x20000a28
 8004c48:	40020400 	.word	0x40020400

08004c4c <resetProgram>:

void resetProgram(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
	state.start_press = 0;
 8004c50:	4b6e      	ldr	r3, [pc, #440]	@ (8004e0c <resetProgram+0x1c0>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
	state.stop_press = 1;
 8004c56:	4b6d      	ldr	r3, [pc, #436]	@ (8004e0c <resetProgram+0x1c0>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	705a      	strb	r2, [r3, #1]
    // reset var
    lcd_clear();
 8004c5c:	f7fe fa72 	bl	8003144 <lcd_clear>
    lcd_put_cur(1, 2);
 8004c60:	2102      	movs	r1, #2
 8004c62:	2001      	movs	r0, #1
 8004c64:	f7fe fa86 	bl	8003174 <lcd_put_cur>
    lcd_send_string("PROGRAM RESETING");
 8004c68:	4869      	ldr	r0, [pc, #420]	@ (8004e10 <resetProgram+0x1c4>)
 8004c6a:	f7fe fad5 	bl	8003218 <lcd_send_string>
    LCD_adc.demtong = 0;
 8004c6e:	4b69      	ldr	r3, [pc, #420]	@ (8004e14 <resetProgram+0x1c8>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	60da      	str	r2, [r3, #12]
    LCD_adc.demback = 0;
 8004c74:	4b67      	ldr	r3, [pc, #412]	@ (8004e14 <resetProgram+0x1c8>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	611a      	str	r2, [r3, #16]
    LCD_adc.menu_main = 0;
 8004c7a:	4b66      	ldr	r3, [pc, #408]	@ (8004e14 <resetProgram+0x1c8>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
    LCD_adc.selected_menu3_item = 0;
 8004c80:	4b64      	ldr	r3, [pc, #400]	@ (8004e14 <resetProgram+0x1c8>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	615a      	str	r2, [r3, #20]
    LCD_adc.selected_menu4_item = 0;
 8004c86:	4b63      	ldr	r3, [pc, #396]	@ (8004e14 <resetProgram+0x1c8>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	619a      	str	r2, [r3, #24]
    LCD_adc.demmenu_3 = 0;
 8004c8c:	4b61      	ldr	r3, [pc, #388]	@ (8004e14 <resetProgram+0x1c8>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	61da      	str	r2, [r3, #28]
    LCD_adc.demmenu_4 = 0;
 8004c92:	4b60      	ldr	r3, [pc, #384]	@ (8004e14 <resetProgram+0x1c8>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	621a      	str	r2, [r3, #32]
    LCD_adc.typeX_value = 0;
 8004c98:	4b5e      	ldr	r3, [pc, #376]	@ (8004e14 <resetProgram+0x1c8>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	625a      	str	r2, [r3, #36]	@ 0x24
    LCD_adc.typeY_value = 0;
 8004c9e:	4b5d      	ldr	r3, [pc, #372]	@ (8004e14 <resetProgram+0x1c8>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	629a      	str	r2, [r3, #40]	@ 0x28
    LCD_adc.typeZ_value = 0;
 8004ca4:	4b5b      	ldr	r3, [pc, #364]	@ (8004e14 <resetProgram+0x1c8>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
    LCD_adc.speed_valueXY = 0;
 8004caa:	4b5a      	ldr	r3, [pc, #360]	@ (8004e14 <resetProgram+0x1c8>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	631a      	str	r2, [r3, #48]	@ 0x30
    LCD_adc.speed_valueZ = 0;
 8004cb0:	4b58      	ldr	r3, [pc, #352]	@ (8004e14 <resetProgram+0x1c8>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	635a      	str	r2, [r3, #52]	@ 0x34
    LCD_adc.voltage = 0;
 8004cb6:	4b57      	ldr	r3, [pc, #348]	@ (8004e14 <resetProgram+0x1c8>)
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	655a      	str	r2, [r3, #84]	@ 0x54
    LCD_adc.current = 0;
 8004cbe:	4b55      	ldr	r3, [pc, #340]	@ (8004e14 <resetProgram+0x1c8>)
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	651a      	str	r2, [r3, #80]	@ 0x50
    LCD_adc.power = 0;
 8004cc6:	4b53      	ldr	r3, [pc, #332]	@ (8004e14 <resetProgram+0x1c8>)
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	65da      	str	r2, [r3, #92]	@ 0x5c
    LCD_adc.temp = 0;
 8004cce:	4b51      	ldr	r3, [pc, #324]	@ (8004e14 <resetProgram+0x1c8>)
 8004cd0:	f04f 0200 	mov.w	r2, #0
 8004cd4:	659a      	str	r2, [r3, #88]	@ 0x58
    Stepper1.accel_count = 0;
 8004cd6:	4950      	ldr	r1, [pc, #320]	@ (8004e18 <resetProgram+0x1cc>)
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Stepper2.accel_count = 0;
 8004ce4:	494d      	ldr	r1, [pc, #308]	@ (8004e1c <resetProgram+0x1d0>)
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Stepper3.accel_count = 0;
 8004cf2:	494b      	ldr	r1, [pc, #300]	@ (8004e20 <resetProgram+0x1d4>)
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    CNC_pos.x = 0;
 8004d00:	4b48      	ldr	r3, [pc, #288]	@ (8004e24 <resetProgram+0x1d8>)
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	609a      	str	r2, [r3, #8]
    CNC_pos.y = 0;
 8004d08:	4b46      	ldr	r3, [pc, #280]	@ (8004e24 <resetProgram+0x1d8>)
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	60da      	str	r2, [r3, #12]
    CNC_pos.z = 0;
 8004d10:	4b44      	ldr	r3, [pc, #272]	@ (8004e24 <resetProgram+0x1d8>)
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	611a      	str	r2, [r3, #16]
    CNC_pos.MoveX = 0;
 8004d18:	4942      	ldr	r1, [pc, #264]	@ (8004e24 <resetProgram+0x1d8>)
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	e9c1 2306 	strd	r2, r3, [r1, #24]
    CNC_pos.MoveY = 0;
 8004d26:	493f      	ldr	r1, [pc, #252]	@ (8004e24 <resetProgram+0x1d8>)
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	e9c1 2308 	strd	r2, r3, [r1, #32]
    CNC_pos.MoveZ = 0;
 8004d34:	493b      	ldr	r1, [pc, #236]	@ (8004e24 <resetProgram+0x1d8>)
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    CNC.pos_x = 0;
 8004d42:	4939      	ldr	r1, [pc, #228]	@ (8004e28 <resetProgram+0x1dc>)
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    CNC.pos_y = 0;
 8004d50:	4935      	ldr	r1, [pc, #212]	@ (8004e28 <resetProgram+0x1dc>)
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    CNC.pos_z = 0;
 8004d5e:	4932      	ldr	r1, [pc, #200]	@ (8004e28 <resetProgram+0x1dc>)
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    CNC.set_posX = 0;
 8004d6c:	492e      	ldr	r1, [pc, #184]	@ (8004e28 <resetProgram+0x1dc>)
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	e9c1 2300 	strd	r2, r3, [r1]
    CNC.set_posY = 0;
 8004d7a:	492b      	ldr	r1, [pc, #172]	@ (8004e28 <resetProgram+0x1dc>)
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	e9c1 2302 	strd	r2, r3, [r1, #8]
    CNC.set_posZ = 0;
 8004d88:	4927      	ldr	r1, [pc, #156]	@ (8004e28 <resetProgram+0x1dc>)
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	e9c1 2304 	strd	r2, r3, [r1, #16]

    __HAL_TIM_SET_AUTORELOAD(Stepper1.htim, 1000);
 8004d96:	4b20      	ldr	r3, [pc, #128]	@ (8004e18 <resetProgram+0x1cc>)
 8004d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004da0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004da2:	4b1d      	ldr	r3, [pc, #116]	@ (8004e18 <resetProgram+0x1cc>)
 8004da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004daa:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_AUTORELOAD(Stepper2.htim, 1000);
 8004dac:	4b1b      	ldr	r3, [pc, #108]	@ (8004e1c <resetProgram+0x1d0>)
 8004dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004db6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004db8:	4b18      	ldr	r3, [pc, #96]	@ (8004e1c <resetProgram+0x1d0>)
 8004dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dbc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004dc0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_AUTORELOAD(Stepper3.htim, 1000);
 8004dc2:	4b17      	ldr	r3, [pc, #92]	@ (8004e20 <resetProgram+0x1d4>)
 8004dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004dce:	4b14      	ldr	r3, [pc, #80]	@ (8004e20 <resetProgram+0x1d4>)
 8004dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004dd6:	60da      	str	r2, [r3, #12]
    // Reset hardware
    initialize_LCD(&LCD_adc);
 8004dd8:	480e      	ldr	r0, [pc, #56]	@ (8004e14 <resetProgram+0x1c8>)
 8004dda:	f7fe faff 	bl	80033dc <initialize_LCD>
    initialize_Kalman(&kalman_fil_curr);
 8004dde:	4813      	ldr	r0, [pc, #76]	@ (8004e2c <resetProgram+0x1e0>)
 8004de0:	f7fe fb28 	bl	8003434 <initialize_Kalman>
    initialize_Kalman(&kalman_fil_volt);
 8004de4:	4812      	ldr	r0, [pc, #72]	@ (8004e30 <resetProgram+0x1e4>)
 8004de6:	f7fe fb25 	bl	8003434 <initialize_Kalman>
    initializeCNC_pos(&CNC_pos);
 8004dea:	480e      	ldr	r0, [pc, #56]	@ (8004e24 <resetProgram+0x1d8>)
 8004dec:	f7fc fdb0 	bl	8001950 <initializeCNC_pos>
    // add code here
    /*
     * code here
     *
     * */
    HOME();
 8004df0:	f7fd fb54 	bl	800249c <HOME>
    // Start display lcd
    lcd_clear();
 8004df4:	f7fe f9a6 	bl	8003144 <lcd_clear>
    lcd_put_cur(1, 2);
 8004df8:	2102      	movs	r1, #2
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	f7fe f9ba 	bl	8003174 <lcd_put_cur>
    lcd_send_string("PROGRAM  RESETED");
 8004e00:	480c      	ldr	r0, [pc, #48]	@ (8004e34 <resetProgram+0x1e8>)
 8004e02:	f7fe fa09 	bl	8003218 <lcd_send_string>
}
 8004e06:	bf00      	nop
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20000a28 	.word	0x20000a28
 8004e10:	080159d0 	.word	0x080159d0
 8004e14:	200008bc 	.word	0x200008bc
 8004e18:	200002b0 	.word	0x200002b0
 8004e1c:	20000310 	.word	0x20000310
 8004e20:	20000370 	.word	0x20000370
 8004e24:	20000778 	.word	0x20000778
 8004e28:	20000838 	.word	0x20000838
 8004e2c:	20000988 	.word	0x20000988
 8004e30:	200009d8 	.word	0x200009d8
 8004e34:	080159e4 	.word	0x080159e4

08004e38 <StopProgram>:

void StopProgram(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
	state.start_press = 0;
 8004e3c:	4b08      	ldr	r3, [pc, #32]	@ (8004e60 <StopProgram+0x28>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	701a      	strb	r2, [r3, #0]
    lcd_clear();
 8004e42:	f7fe f97f 	bl	8003144 <lcd_clear>
    lcd_put_cur(1, 2);
 8004e46:	2102      	movs	r1, #2
 8004e48:	2001      	movs	r0, #1
 8004e4a:	f7fe f993 	bl	8003174 <lcd_put_cur>
    lcd_send_string("PROGRAM  STOPPED");
 8004e4e:	4805      	ldr	r0, [pc, #20]	@ (8004e64 <StopProgram+0x2c>)
 8004e50:	f7fe f9e2 	bl	8003218 <lcd_send_string>
    lcd_put_cur(3, 0);
 8004e54:	2100      	movs	r1, #0
 8004e56:	2003      	movs	r0, #3
 8004e58:	f7fe f98c 	bl	8003174 <lcd_put_cur>
}
 8004e5c:	bf00      	nop
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20000a28 	.word	0x20000a28
 8004e64:	080159f8 	.word	0x080159f8

08004e68 <StartProgram>:

void StartProgram(void){
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
    lcd_clear();
 8004e6c:	f7fe f96a 	bl	8003144 <lcd_clear>
    lcd_put_cur(1, 3);
 8004e70:	2103      	movs	r1, #3
 8004e72:	2001      	movs	r0, #1
 8004e74:	f7fe f97e 	bl	8003174 <lcd_put_cur>
    lcd_send_string("PROGRAM  START");
 8004e78:	4809      	ldr	r0, [pc, #36]	@ (8004ea0 <StartProgram+0x38>)
 8004e7a:	f7fe f9cd 	bl	8003218 <lcd_send_string>
    lcd_put_cur(2, 0);
 8004e7e:	2100      	movs	r1, #0
 8004e80:	2002      	movs	r0, #2
 8004e82:	f7fe f977 	bl	8003174 <lcd_put_cur>
    lcd_send_string("IP ADD:");
 8004e86:	4807      	ldr	r0, [pc, #28]	@ (8004ea4 <StartProgram+0x3c>)
 8004e88:	f7fe f9c6 	bl	8003218 <lcd_send_string>
    lcd_put_cur(2, 8);
 8004e8c:	2108      	movs	r1, #8
 8004e8e:	2002      	movs	r0, #2
 8004e90:	f7fe f970 	bl	8003174 <lcd_put_cur>
    lcd_send_string(ip_config);
 8004e94:	4804      	ldr	r0, [pc, #16]	@ (8004ea8 <StartProgram+0x40>)
 8004e96:	f7fe f9bf 	bl	8003218 <lcd_send_string>
}
 8004e9a:	bf00      	nop
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	08015a0c 	.word	0x08015a0c
 8004ea4:	08015a1c 	.word	0x08015a1c
 8004ea8:	20000740 	.word	0x20000740

08004eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	607b      	str	r3, [r7, #4]
 8004eb6:	4b16      	ldr	r3, [pc, #88]	@ (8004f10 <HAL_MspInit+0x64>)
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	4a15      	ldr	r2, [pc, #84]	@ (8004f10 <HAL_MspInit+0x64>)
 8004ebc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ec2:	4b13      	ldr	r3, [pc, #76]	@ (8004f10 <HAL_MspInit+0x64>)
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eca:	607b      	str	r3, [r7, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ece:	2300      	movs	r3, #0
 8004ed0:	603b      	str	r3, [r7, #0]
 8004ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8004f10 <HAL_MspInit+0x64>)
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8004f10 <HAL_MspInit+0x64>)
 8004ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ede:	4b0c      	ldr	r3, [pc, #48]	@ (8004f10 <HAL_MspInit+0x64>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004eea:	2200      	movs	r2, #0
 8004eec:	210f      	movs	r1, #15
 8004eee:	f06f 0001 	mvn.w	r0, #1
 8004ef2:	f001 fbc2 	bl	800667a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2105      	movs	r1, #5
 8004efa:	2001      	movs	r0, #1
 8004efc:	f001 fbbd 	bl	800667a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8004f00:	2001      	movs	r0, #1
 8004f02:	f001 fbd6 	bl	80066b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40023800 	.word	0x40023800

08004f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <NMI_Handler+0x4>

08004f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f20:	bf00      	nop
 8004f22:	e7fd      	b.n	8004f20 <HardFault_Handler+0x4>

08004f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f28:	bf00      	nop
 8004f2a:	e7fd      	b.n	8004f28 <MemManage_Handler+0x4>

08004f2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f30:	bf00      	nop
 8004f32:	e7fd      	b.n	8004f30 <BusFault_Handler+0x4>

08004f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f38:	bf00      	nop
 8004f3a:	e7fd      	b.n	8004f38 <UsageFault_Handler+0x4>

08004f3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f40:	bf00      	nop
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f4e:	f000 fd3d 	bl	80059cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004f52:	f009 fa19 	bl	800e388 <xTaskGetSchedulerState>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d001      	beq.n	8004f60 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004f5c:	f00a f914 	bl	800f188 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f60:	bf00      	nop
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8004f68:	f004 fb54 	bl	8009614 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8004f6c:	bf00      	nop
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004f74:	2010      	movs	r0, #16
 8004f76:	f002 f9af 	bl	80072d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004f7a:	bf00      	nop
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004f84:	4802      	ldr	r0, [pc, #8]	@ (8004f90 <DMA1_Stream5_IRQHandler+0x10>)
 8004f86:	f001 fd47 	bl	8006a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004f8a:	bf00      	nop
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000c2c 	.word	0x20000c2c

08004f94 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004f98:	4802      	ldr	r0, [pc, #8]	@ (8004fa4 <ADC_IRQHandler+0x10>)
 8004f9a:	f000 ff2f 	bl	8005dfc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004f9e:	bf00      	nop
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	200003d0 	.word	0x200003d0

08004fa8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004fac:	2040      	movs	r0, #64	@ 0x40
 8004fae:	f002 f993 	bl	80072d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004fb2:	2080      	movs	r0, #128	@ 0x80
 8004fb4:	f002 f990 	bl	80072d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004fb8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004fbc:	f002 f98c 	bl	80072d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004fc0:	bf00      	nop
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004fc8:	4802      	ldr	r0, [pc, #8]	@ (8004fd4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004fca:	f005 f8c4 	bl	800a156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004fce:	bf00      	nop
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000a34 	.word	0x20000a34

08004fd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004fdc:	4802      	ldr	r0, [pc, #8]	@ (8004fe8 <TIM2_IRQHandler+0x10>)
 8004fde:	f005 f8ba 	bl	800a156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004fe2:	bf00      	nop
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000a7c 	.word	0x20000a7c

08004fec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004ff0:	4802      	ldr	r0, [pc, #8]	@ (8004ffc <TIM3_IRQHandler+0x10>)
 8004ff2:	f005 f8b0 	bl	800a156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004ff6:	bf00      	nop
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000ac4 	.word	0x20000ac4

08005000 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005004:	4802      	ldr	r0, [pc, #8]	@ (8005010 <TIM4_IRQHandler+0x10>)
 8005006:	f005 f8a6 	bl	800a156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800500a:	bf00      	nop
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000b0c 	.word	0x20000b0c

08005014 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005018:	4802      	ldr	r0, [pc, #8]	@ (8005024 <I2C1_EV_IRQHandler+0x10>)
 800501a:	f002 fbcd 	bl	80077b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800501e:	bf00      	nop
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000868 	.word	0x20000868

08005028 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800502c:	4802      	ldr	r0, [pc, #8]	@ (8005038 <I2C1_ER_IRQHandler+0x10>)
 800502e:	f002 fd16 	bl	8007a5e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000868 	.word	0x20000868

0800503c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005040:	4802      	ldr	r0, [pc, #8]	@ (800504c <USART2_IRQHandler+0x10>)
 8005042:	f005 fd59 	bl	800aaf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005046:	bf00      	nop
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000be4 	.word	0x20000be4

08005050 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005054:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005058:	f002 f93e 	bl	80072d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800505c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005060:	f002 f93a 	bl	80072d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005064:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005068:	f002 f936 	bl	80072d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800506c:	bf00      	nop
 800506e:	bd80      	pop	{r7, pc}

08005070 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005074:	4802      	ldr	r0, [pc, #8]	@ (8005080 <TIM5_IRQHandler+0x10>)
 8005076:	f005 f86e 	bl	800a156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800507a:	bf00      	nop
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000b54 	.word	0x20000b54

08005084 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005088:	4802      	ldr	r0, [pc, #8]	@ (8005094 <TIM6_DAC_IRQHandler+0x10>)
 800508a:	f005 f864 	bl	800a156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800508e:	bf00      	nop
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000b9c 	.word	0x20000b9c

08005098 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800509c:	4802      	ldr	r0, [pc, #8]	@ (80050a8 <DMA2_Stream0_IRQHandler+0x10>)
 800509e:	f001 fcbb 	bl	8006a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000418 	.word	0x20000418

080050ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  return 1;
 80050b0:	2301      	movs	r3, #1
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <_kill>:

int _kill(int pid, int sig)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050c6:	f00b fcdd 	bl	8010a84 <__errno>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2216      	movs	r2, #22
 80050ce:	601a      	str	r2, [r3, #0]
  return -1;
 80050d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <_exit>:

void _exit (int status)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80050e4:	f04f 31ff 	mov.w	r1, #4294967295
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ffe7 	bl	80050bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80050ee:	bf00      	nop
 80050f0:	e7fd      	b.n	80050ee <_exit+0x12>

080050f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b086      	sub	sp, #24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	e00a      	b.n	800511a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005104:	f3af 8000 	nop.w
 8005108:	4601      	mov	r1, r0
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	60ba      	str	r2, [r7, #8]
 8005110:	b2ca      	uxtb	r2, r1
 8005112:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	3301      	adds	r3, #1
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	dbf0      	blt.n	8005104 <_read+0x12>
  }

  return len;
 8005122:	687b      	ldr	r3, [r7, #4]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <_close>:
  }
  return len;
}

int _close(int file)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005154:	605a      	str	r2, [r3, #4]
  return 0;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <_isatty>:

int _isatty(int file)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800516c:	2301      	movs	r3, #1
}
 800516e:	4618      	mov	r0, r3
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	60f8      	str	r0, [r7, #12]
 8005182:	60b9      	str	r1, [r7, #8]
 8005184:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800519c:	4a14      	ldr	r2, [pc, #80]	@ (80051f0 <_sbrk+0x5c>)
 800519e:	4b15      	ldr	r3, [pc, #84]	@ (80051f4 <_sbrk+0x60>)
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051a8:	4b13      	ldr	r3, [pc, #76]	@ (80051f8 <_sbrk+0x64>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d102      	bne.n	80051b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051b0:	4b11      	ldr	r3, [pc, #68]	@ (80051f8 <_sbrk+0x64>)
 80051b2:	4a12      	ldr	r2, [pc, #72]	@ (80051fc <_sbrk+0x68>)
 80051b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051b6:	4b10      	ldr	r3, [pc, #64]	@ (80051f8 <_sbrk+0x64>)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d207      	bcs.n	80051d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051c4:	f00b fc5e 	bl	8010a84 <__errno>
 80051c8:	4603      	mov	r3, r0
 80051ca:	220c      	movs	r2, #12
 80051cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051ce:	f04f 33ff 	mov.w	r3, #4294967295
 80051d2:	e009      	b.n	80051e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051d4:	4b08      	ldr	r3, [pc, #32]	@ (80051f8 <_sbrk+0x64>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051da:	4b07      	ldr	r3, [pc, #28]	@ (80051f8 <_sbrk+0x64>)
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4413      	add	r3, r2
 80051e2:	4a05      	ldr	r2, [pc, #20]	@ (80051f8 <_sbrk+0x64>)
 80051e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051e6:	68fb      	ldr	r3, [r7, #12]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20020000 	.word	0x20020000
 80051f4:	00000400 	.word	0x00000400
 80051f8:	20000a30 	.word	0x20000a30
 80051fc:	20005730 	.word	0x20005730

08005200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005204:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <SystemInit+0x20>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520a:	4a05      	ldr	r2, [pc, #20]	@ (8005220 <SystemInit+0x20>)
 800520c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005210:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005214:	bf00      	nop
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	e000ed00 	.word	0xe000ed00

08005224 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800522a:	f107 0308 	add.w	r3, r7, #8
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	605a      	str	r2, [r3, #4]
 8005234:	609a      	str	r2, [r3, #8]
 8005236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005238:	463b      	mov	r3, r7
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005240:	4b1e      	ldr	r3, [pc, #120]	@ (80052bc <MX_TIM1_Init+0x98>)
 8005242:	4a1f      	ldr	r2, [pc, #124]	@ (80052c0 <MX_TIM1_Init+0x9c>)
 8005244:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8005246:	4b1d      	ldr	r3, [pc, #116]	@ (80052bc <MX_TIM1_Init+0x98>)
 8005248:	2253      	movs	r2, #83	@ 0x53
 800524a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800524c:	4b1b      	ldr	r3, [pc, #108]	@ (80052bc <MX_TIM1_Init+0x98>)
 800524e:	2200      	movs	r2, #0
 8005250:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8005252:	4b1a      	ldr	r3, [pc, #104]	@ (80052bc <MX_TIM1_Init+0x98>)
 8005254:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005258:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800525a:	4b18      	ldr	r3, [pc, #96]	@ (80052bc <MX_TIM1_Init+0x98>)
 800525c:	2200      	movs	r2, #0
 800525e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005260:	4b16      	ldr	r3, [pc, #88]	@ (80052bc <MX_TIM1_Init+0x98>)
 8005262:	2200      	movs	r2, #0
 8005264:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005266:	4b15      	ldr	r3, [pc, #84]	@ (80052bc <MX_TIM1_Init+0x98>)
 8005268:	2280      	movs	r2, #128	@ 0x80
 800526a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800526c:	4813      	ldr	r0, [pc, #76]	@ (80052bc <MX_TIM1_Init+0x98>)
 800526e:	f004 fe83 	bl	8009f78 <HAL_TIM_Base_Init>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8005278:	f7fe f8aa 	bl	80033d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800527c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005280:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005282:	f107 0308 	add.w	r3, r7, #8
 8005286:	4619      	mov	r1, r3
 8005288:	480c      	ldr	r0, [pc, #48]	@ (80052bc <MX_TIM1_Init+0x98>)
 800528a:	f005 f854 	bl	800a336 <HAL_TIM_ConfigClockSource>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8005294:	f7fe f89c 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005298:	2300      	movs	r3, #0
 800529a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800529c:	2300      	movs	r3, #0
 800529e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80052a0:	463b      	mov	r3, r7
 80052a2:	4619      	mov	r1, r3
 80052a4:	4805      	ldr	r0, [pc, #20]	@ (80052bc <MX_TIM1_Init+0x98>)
 80052a6:	f005 fa7b 	bl	800a7a0 <HAL_TIMEx_MasterConfigSynchronization>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80052b0:	f7fe f88e 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80052b4:	bf00      	nop
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20000a34 	.word	0x20000a34
 80052c0:	40010000 	.word	0x40010000

080052c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052ca:	f107 0308 	add.w	r3, r7, #8
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	605a      	str	r2, [r3, #4]
 80052d4:	609a      	str	r2, [r3, #8]
 80052d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052d8:	463b      	mov	r3, r7
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80052e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005358 <MX_TIM2_Init+0x94>)
 80052e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80052e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80052e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005358 <MX_TIM2_Init+0x94>)
 80052ea:	22a7      	movs	r2, #167	@ 0xa7
 80052ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005358 <MX_TIM2_Init+0x94>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80052f4:	4b18      	ldr	r3, [pc, #96]	@ (8005358 <MX_TIM2_Init+0x94>)
 80052f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80052fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052fc:	4b16      	ldr	r3, [pc, #88]	@ (8005358 <MX_TIM2_Init+0x94>)
 80052fe:	2200      	movs	r2, #0
 8005300:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005302:	4b15      	ldr	r3, [pc, #84]	@ (8005358 <MX_TIM2_Init+0x94>)
 8005304:	2280      	movs	r2, #128	@ 0x80
 8005306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005308:	4813      	ldr	r0, [pc, #76]	@ (8005358 <MX_TIM2_Init+0x94>)
 800530a:	f004 fe35 	bl	8009f78 <HAL_TIM_Base_Init>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005314:	f7fe f85c 	bl	80033d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800531c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800531e:	f107 0308 	add.w	r3, r7, #8
 8005322:	4619      	mov	r1, r3
 8005324:	480c      	ldr	r0, [pc, #48]	@ (8005358 <MX_TIM2_Init+0x94>)
 8005326:	f005 f806 	bl	800a336 <HAL_TIM_ConfigClockSource>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005330:	f7fe f84e 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005334:	2300      	movs	r3, #0
 8005336:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005338:	2300      	movs	r3, #0
 800533a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800533c:	463b      	mov	r3, r7
 800533e:	4619      	mov	r1, r3
 8005340:	4805      	ldr	r0, [pc, #20]	@ (8005358 <MX_TIM2_Init+0x94>)
 8005342:	f005 fa2d 	bl	800a7a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800534c:	f7fe f840 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005350:	bf00      	nop
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	20000a7c 	.word	0x20000a7c

0800535c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005362:	f107 0308 	add.w	r3, r7, #8
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	605a      	str	r2, [r3, #4]
 800536c:	609a      	str	r2, [r3, #8]
 800536e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005370:	463b      	mov	r3, r7
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005378:	4b1d      	ldr	r3, [pc, #116]	@ (80053f0 <MX_TIM3_Init+0x94>)
 800537a:	4a1e      	ldr	r2, [pc, #120]	@ (80053f4 <MX_TIM3_Init+0x98>)
 800537c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 800537e:	4b1c      	ldr	r3, [pc, #112]	@ (80053f0 <MX_TIM3_Init+0x94>)
 8005380:	22a7      	movs	r2, #167	@ 0xa7
 8005382:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005384:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <MX_TIM3_Init+0x94>)
 8005386:	2200      	movs	r2, #0
 8005388:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800538a:	4b19      	ldr	r3, [pc, #100]	@ (80053f0 <MX_TIM3_Init+0x94>)
 800538c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005390:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005392:	4b17      	ldr	r3, [pc, #92]	@ (80053f0 <MX_TIM3_Init+0x94>)
 8005394:	2200      	movs	r2, #0
 8005396:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005398:	4b15      	ldr	r3, [pc, #84]	@ (80053f0 <MX_TIM3_Init+0x94>)
 800539a:	2280      	movs	r2, #128	@ 0x80
 800539c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800539e:	4814      	ldr	r0, [pc, #80]	@ (80053f0 <MX_TIM3_Init+0x94>)
 80053a0:	f004 fdea 	bl	8009f78 <HAL_TIM_Base_Init>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80053aa:	f7fe f811 	bl	80033d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80053b4:	f107 0308 	add.w	r3, r7, #8
 80053b8:	4619      	mov	r1, r3
 80053ba:	480d      	ldr	r0, [pc, #52]	@ (80053f0 <MX_TIM3_Init+0x94>)
 80053bc:	f004 ffbb 	bl	800a336 <HAL_TIM_ConfigClockSource>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80053c6:	f7fe f803 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053ca:	2300      	movs	r3, #0
 80053cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80053d2:	463b      	mov	r3, r7
 80053d4:	4619      	mov	r1, r3
 80053d6:	4806      	ldr	r0, [pc, #24]	@ (80053f0 <MX_TIM3_Init+0x94>)
 80053d8:	f005 f9e2 	bl	800a7a0 <HAL_TIMEx_MasterConfigSynchronization>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80053e2:	f7fd fff5 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80053e6:	bf00      	nop
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20000ac4 	.word	0x20000ac4
 80053f4:	40000400 	.word	0x40000400

080053f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053fe:	f107 0308 	add.w	r3, r7, #8
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	605a      	str	r2, [r3, #4]
 8005408:	609a      	str	r2, [r3, #8]
 800540a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800540c:	463b      	mov	r3, r7
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005414:	4b1d      	ldr	r3, [pc, #116]	@ (800548c <MX_TIM4_Init+0x94>)
 8005416:	4a1e      	ldr	r2, [pc, #120]	@ (8005490 <MX_TIM4_Init+0x98>)
 8005418:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800541a:	4b1c      	ldr	r3, [pc, #112]	@ (800548c <MX_TIM4_Init+0x94>)
 800541c:	2253      	movs	r2, #83	@ 0x53
 800541e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005420:	4b1a      	ldr	r3, [pc, #104]	@ (800548c <MX_TIM4_Init+0x94>)
 8005422:	2200      	movs	r2, #0
 8005424:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8005426:	4b19      	ldr	r3, [pc, #100]	@ (800548c <MX_TIM4_Init+0x94>)
 8005428:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800542c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800542e:	4b17      	ldr	r3, [pc, #92]	@ (800548c <MX_TIM4_Init+0x94>)
 8005430:	2200      	movs	r2, #0
 8005432:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005434:	4b15      	ldr	r3, [pc, #84]	@ (800548c <MX_TIM4_Init+0x94>)
 8005436:	2280      	movs	r2, #128	@ 0x80
 8005438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800543a:	4814      	ldr	r0, [pc, #80]	@ (800548c <MX_TIM4_Init+0x94>)
 800543c:	f004 fd9c 	bl	8009f78 <HAL_TIM_Base_Init>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8005446:	f7fd ffc3 	bl	80033d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800544a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800544e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005450:	f107 0308 	add.w	r3, r7, #8
 8005454:	4619      	mov	r1, r3
 8005456:	480d      	ldr	r0, [pc, #52]	@ (800548c <MX_TIM4_Init+0x94>)
 8005458:	f004 ff6d 	bl	800a336 <HAL_TIM_ConfigClockSource>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8005462:	f7fd ffb5 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005466:	2300      	movs	r3, #0
 8005468:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800546a:	2300      	movs	r3, #0
 800546c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800546e:	463b      	mov	r3, r7
 8005470:	4619      	mov	r1, r3
 8005472:	4806      	ldr	r0, [pc, #24]	@ (800548c <MX_TIM4_Init+0x94>)
 8005474:	f005 f994 	bl	800a7a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800547e:	f7fd ffa7 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005482:	bf00      	nop
 8005484:	3718      	adds	r7, #24
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000b0c 	.word	0x20000b0c
 8005490:	40000800 	.word	0x40000800

08005494 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800549a:	f107 0308 	add.w	r3, r7, #8
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	605a      	str	r2, [r3, #4]
 80054a4:	609a      	str	r2, [r3, #8]
 80054a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054a8:	463b      	mov	r3, r7
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80054b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005528 <MX_TIM5_Init+0x94>)
 80054b2:	4a1e      	ldr	r2, [pc, #120]	@ (800552c <MX_TIM5_Init+0x98>)
 80054b4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80054b6:	4b1c      	ldr	r3, [pc, #112]	@ (8005528 <MX_TIM5_Init+0x94>)
 80054b8:	2253      	movs	r2, #83	@ 0x53
 80054ba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005528 <MX_TIM5_Init+0x94>)
 80054be:	2200      	movs	r2, #0
 80054c0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 80054c2:	4b19      	ldr	r3, [pc, #100]	@ (8005528 <MX_TIM5_Init+0x94>)
 80054c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054c8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054ca:	4b17      	ldr	r3, [pc, #92]	@ (8005528 <MX_TIM5_Init+0x94>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80054d0:	4b15      	ldr	r3, [pc, #84]	@ (8005528 <MX_TIM5_Init+0x94>)
 80054d2:	2280      	movs	r2, #128	@ 0x80
 80054d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80054d6:	4814      	ldr	r0, [pc, #80]	@ (8005528 <MX_TIM5_Init+0x94>)
 80054d8:	f004 fd4e 	bl	8009f78 <HAL_TIM_Base_Init>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80054e2:	f7fd ff75 	bl	80033d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80054ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80054ec:	f107 0308 	add.w	r3, r7, #8
 80054f0:	4619      	mov	r1, r3
 80054f2:	480d      	ldr	r0, [pc, #52]	@ (8005528 <MX_TIM5_Init+0x94>)
 80054f4:	f004 ff1f 	bl	800a336 <HAL_TIM_ConfigClockSource>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80054fe:	f7fd ff67 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005502:	2300      	movs	r3, #0
 8005504:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005506:	2300      	movs	r3, #0
 8005508:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800550a:	463b      	mov	r3, r7
 800550c:	4619      	mov	r1, r3
 800550e:	4806      	ldr	r0, [pc, #24]	@ (8005528 <MX_TIM5_Init+0x94>)
 8005510:	f005 f946 	bl	800a7a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800551a:	f7fd ff59 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800551e:	bf00      	nop
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000b54 	.word	0x20000b54
 800552c:	40000c00 	.word	0x40000c00

08005530 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM6_Init(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005536:	463b      	mov	r3, r7
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800553e:	4b15      	ldr	r3, [pc, #84]	@ (8005594 <MX_TIM6_Init+0x64>)
 8005540:	4a15      	ldr	r2, [pc, #84]	@ (8005598 <MX_TIM6_Init+0x68>)
 8005542:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8005544:	4b13      	ldr	r3, [pc, #76]	@ (8005594 <MX_TIM6_Init+0x64>)
 8005546:	2253      	movs	r2, #83	@ 0x53
 8005548:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800554a:	4b12      	ldr	r3, [pc, #72]	@ (8005594 <MX_TIM6_Init+0x64>)
 800554c:	2200      	movs	r2, #0
 800554e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8005550:	4b10      	ldr	r3, [pc, #64]	@ (8005594 <MX_TIM6_Init+0x64>)
 8005552:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005556:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005558:	4b0e      	ldr	r3, [pc, #56]	@ (8005594 <MX_TIM6_Init+0x64>)
 800555a:	2280      	movs	r2, #128	@ 0x80
 800555c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800555e:	480d      	ldr	r0, [pc, #52]	@ (8005594 <MX_TIM6_Init+0x64>)
 8005560:	f004 fd0a 	bl	8009f78 <HAL_TIM_Base_Init>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800556a:	f7fd ff31 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800556e:	2300      	movs	r3, #0
 8005570:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005572:	2300      	movs	r3, #0
 8005574:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005576:	463b      	mov	r3, r7
 8005578:	4619      	mov	r1, r3
 800557a:	4806      	ldr	r0, [pc, #24]	@ (8005594 <MX_TIM6_Init+0x64>)
 800557c:	f005 f910 	bl	800a7a0 <HAL_TIMEx_MasterConfigSynchronization>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005586:	f7fd ff23 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000b9c 	.word	0x20000b9c
 8005598:	40001000 	.word	0x40001000

0800559c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a54      	ldr	r2, [pc, #336]	@ (80056fc <HAL_TIM_Base_MspInit+0x160>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d116      	bne.n	80055dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
 80055b2:	4b53      	ldr	r3, [pc, #332]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 80055b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b6:	4a52      	ldr	r2, [pc, #328]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80055be:	4b50      	ldr	r3, [pc, #320]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 80055c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80055ca:	2200      	movs	r2, #0
 80055cc:	2105      	movs	r1, #5
 80055ce:	2018      	movs	r0, #24
 80055d0:	f001 f853 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80055d4:	2018      	movs	r0, #24
 80055d6:	f001 f86c 	bl	80066b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80055da:	e08a      	b.n	80056f2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e4:	d116      	bne.n	8005614 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	4b45      	ldr	r3, [pc, #276]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	4a44      	ldr	r2, [pc, #272]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 80055f0:	f043 0301 	orr.w	r3, r3, #1
 80055f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80055f6:	4b42      	ldr	r3, [pc, #264]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8005602:	2200      	movs	r2, #0
 8005604:	2105      	movs	r1, #5
 8005606:	201c      	movs	r0, #28
 8005608:	f001 f837 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800560c:	201c      	movs	r0, #28
 800560e:	f001 f850 	bl	80066b2 <HAL_NVIC_EnableIRQ>
}
 8005612:	e06e      	b.n	80056f2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a3a      	ldr	r2, [pc, #232]	@ (8005704 <HAL_TIM_Base_MspInit+0x168>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d116      	bne.n	800564c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	4b37      	ldr	r3, [pc, #220]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	4a36      	ldr	r2, [pc, #216]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 8005628:	f043 0302 	orr.w	r3, r3, #2
 800562c:	6413      	str	r3, [r2, #64]	@ 0x40
 800562e:	4b34      	ldr	r3, [pc, #208]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800563a:	2200      	movs	r2, #0
 800563c:	2105      	movs	r1, #5
 800563e:	201d      	movs	r0, #29
 8005640:	f001 f81b 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005644:	201d      	movs	r0, #29
 8005646:	f001 f834 	bl	80066b2 <HAL_NVIC_EnableIRQ>
}
 800564a:	e052      	b.n	80056f2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a2d      	ldr	r2, [pc, #180]	@ (8005708 <HAL_TIM_Base_MspInit+0x16c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d116      	bne.n	8005684 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	4b29      	ldr	r3, [pc, #164]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	4a28      	ldr	r2, [pc, #160]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 8005660:	f043 0304 	orr.w	r3, r3, #4
 8005664:	6413      	str	r3, [r2, #64]	@ 0x40
 8005666:	4b26      	ldr	r3, [pc, #152]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 8005668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8005672:	2200      	movs	r2, #0
 8005674:	2105      	movs	r1, #5
 8005676:	201e      	movs	r0, #30
 8005678:	f000 ffff 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800567c:	201e      	movs	r0, #30
 800567e:	f001 f818 	bl	80066b2 <HAL_NVIC_EnableIRQ>
}
 8005682:	e036      	b.n	80056f2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM5)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a20      	ldr	r2, [pc, #128]	@ (800570c <HAL_TIM_Base_MspInit+0x170>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d116      	bne.n	80056bc <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	4b1b      	ldr	r3, [pc, #108]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	4a1a      	ldr	r2, [pc, #104]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 8005698:	f043 0308 	orr.w	r3, r3, #8
 800569c:	6413      	str	r3, [r2, #64]	@ 0x40
 800569e:	4b18      	ldr	r3, [pc, #96]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80056aa:	2200      	movs	r2, #0
 80056ac:	2105      	movs	r1, #5
 80056ae:	2032      	movs	r0, #50	@ 0x32
 80056b0:	f000 ffe3 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80056b4:	2032      	movs	r0, #50	@ 0x32
 80056b6:	f000 fffc 	bl	80066b2 <HAL_NVIC_EnableIRQ>
}
 80056ba:	e01a      	b.n	80056f2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM6)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a13      	ldr	r2, [pc, #76]	@ (8005710 <HAL_TIM_Base_MspInit+0x174>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d115      	bne.n	80056f2 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80056c6:	2300      	movs	r3, #0
 80056c8:	60bb      	str	r3, [r7, #8]
 80056ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 80056d0:	f043 0310 	orr.w	r3, r3, #16
 80056d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80056d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005700 <HAL_TIM_Base_MspInit+0x164>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056da:	f003 0310 	and.w	r3, r3, #16
 80056de:	60bb      	str	r3, [r7, #8]
 80056e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80056e2:	2200      	movs	r2, #0
 80056e4:	2105      	movs	r1, #5
 80056e6:	2036      	movs	r0, #54	@ 0x36
 80056e8:	f000 ffc7 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80056ec:	2036      	movs	r0, #54	@ 0x36
 80056ee:	f000 ffe0 	bl	80066b2 <HAL_NVIC_EnableIRQ>
}
 80056f2:	bf00      	nop
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40010000 	.word	0x40010000
 8005700:	40023800 	.word	0x40023800
 8005704:	40000400 	.word	0x40000400
 8005708:	40000800 	.word	0x40000800
 800570c:	40000c00 	.word	0x40000c00
 8005710:	40001000 	.word	0x40001000

08005714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005718:	4b11      	ldr	r3, [pc, #68]	@ (8005760 <MX_USART2_UART_Init+0x4c>)
 800571a:	4a12      	ldr	r2, [pc, #72]	@ (8005764 <MX_USART2_UART_Init+0x50>)
 800571c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800571e:	4b10      	ldr	r3, [pc, #64]	@ (8005760 <MX_USART2_UART_Init+0x4c>)
 8005720:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005726:	4b0e      	ldr	r3, [pc, #56]	@ (8005760 <MX_USART2_UART_Init+0x4c>)
 8005728:	2200      	movs	r2, #0
 800572a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800572c:	4b0c      	ldr	r3, [pc, #48]	@ (8005760 <MX_USART2_UART_Init+0x4c>)
 800572e:	2200      	movs	r2, #0
 8005730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005732:	4b0b      	ldr	r3, [pc, #44]	@ (8005760 <MX_USART2_UART_Init+0x4c>)
 8005734:	2200      	movs	r2, #0
 8005736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005738:	4b09      	ldr	r3, [pc, #36]	@ (8005760 <MX_USART2_UART_Init+0x4c>)
 800573a:	220c      	movs	r2, #12
 800573c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800573e:	4b08      	ldr	r3, [pc, #32]	@ (8005760 <MX_USART2_UART_Init+0x4c>)
 8005740:	2200      	movs	r2, #0
 8005742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005744:	4b06      	ldr	r3, [pc, #24]	@ (8005760 <MX_USART2_UART_Init+0x4c>)
 8005746:	2200      	movs	r2, #0
 8005748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800574a:	4805      	ldr	r0, [pc, #20]	@ (8005760 <MX_USART2_UART_Init+0x4c>)
 800574c:	f005 f8b8 	bl	800a8c0 <HAL_UART_Init>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005756:	f7fd fe3b 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000be4 	.word	0x20000be4
 8005764:	40004400 	.word	0x40004400

08005768 <MX_DMA_UART_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_UART_Init(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800576e:	2300      	movs	r3, #0
 8005770:	607b      	str	r3, [r7, #4]
 8005772:	4b0c      	ldr	r3, [pc, #48]	@ (80057a4 <MX_DMA_UART_Init+0x3c>)
 8005774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005776:	4a0b      	ldr	r2, [pc, #44]	@ (80057a4 <MX_DMA_UART_Init+0x3c>)
 8005778:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800577c:	6313      	str	r3, [r2, #48]	@ 0x30
 800577e:	4b09      	ldr	r3, [pc, #36]	@ (80057a4 <MX_DMA_UART_Init+0x3c>)
 8005780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005782:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005786:	607b      	str	r3, [r7, #4]
 8005788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800578a:	2200      	movs	r2, #0
 800578c:	2105      	movs	r1, #5
 800578e:	2010      	movs	r0, #16
 8005790:	f000 ff73 	bl	800667a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005794:	2010      	movs	r0, #16
 8005796:	f000 ff8c 	bl	80066b2 <HAL_NVIC_EnableIRQ>

}
 800579a:	bf00      	nop
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40023800 	.word	0x40023800

080057a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	@ 0x28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057b0:	f107 0314 	add.w	r3, r7, #20
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	605a      	str	r2, [r3, #4]
 80057ba:	609a      	str	r2, [r3, #8]
 80057bc:	60da      	str	r2, [r3, #12]
 80057be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a34      	ldr	r2, [pc, #208]	@ (8005898 <HAL_UART_MspInit+0xf0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d162      	bne.n	8005890 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80057ca:	2300      	movs	r3, #0
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	4b33      	ldr	r3, [pc, #204]	@ (800589c <HAL_UART_MspInit+0xf4>)
 80057d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d2:	4a32      	ldr	r2, [pc, #200]	@ (800589c <HAL_UART_MspInit+0xf4>)
 80057d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80057da:	4b30      	ldr	r3, [pc, #192]	@ (800589c <HAL_UART_MspInit+0xf4>)
 80057dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	4b2c      	ldr	r3, [pc, #176]	@ (800589c <HAL_UART_MspInit+0xf4>)
 80057ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ee:	4a2b      	ldr	r2, [pc, #172]	@ (800589c <HAL_UART_MspInit+0xf4>)
 80057f0:	f043 0308 	orr.w	r3, r3, #8
 80057f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80057f6:	4b29      	ldr	r3, [pc, #164]	@ (800589c <HAL_UART_MspInit+0xf4>)
 80057f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005802:	2360      	movs	r3, #96	@ 0x60
 8005804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005806:	2302      	movs	r3, #2
 8005808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800580a:	2300      	movs	r3, #0
 800580c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800580e:	2303      	movs	r3, #3
 8005810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005812:	2307      	movs	r3, #7
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005816:	f107 0314 	add.w	r3, r7, #20
 800581a:	4619      	mov	r1, r3
 800581c:	4820      	ldr	r0, [pc, #128]	@ (80058a0 <HAL_UART_MspInit+0xf8>)
 800581e:	f001 fb73 	bl	8006f08 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005822:	4b20      	ldr	r3, [pc, #128]	@ (80058a4 <HAL_UART_MspInit+0xfc>)
 8005824:	4a20      	ldr	r2, [pc, #128]	@ (80058a8 <HAL_UART_MspInit+0x100>)
 8005826:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005828:	4b1e      	ldr	r3, [pc, #120]	@ (80058a4 <HAL_UART_MspInit+0xfc>)
 800582a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800582e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005830:	4b1c      	ldr	r3, [pc, #112]	@ (80058a4 <HAL_UART_MspInit+0xfc>)
 8005832:	2200      	movs	r2, #0
 8005834:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005836:	4b1b      	ldr	r3, [pc, #108]	@ (80058a4 <HAL_UART_MspInit+0xfc>)
 8005838:	2200      	movs	r2, #0
 800583a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800583c:	4b19      	ldr	r3, [pc, #100]	@ (80058a4 <HAL_UART_MspInit+0xfc>)
 800583e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005842:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005844:	4b17      	ldr	r3, [pc, #92]	@ (80058a4 <HAL_UART_MspInit+0xfc>)
 8005846:	2200      	movs	r2, #0
 8005848:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800584a:	4b16      	ldr	r3, [pc, #88]	@ (80058a4 <HAL_UART_MspInit+0xfc>)
 800584c:	2200      	movs	r2, #0
 800584e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005850:	4b14      	ldr	r3, [pc, #80]	@ (80058a4 <HAL_UART_MspInit+0xfc>)
 8005852:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005856:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005858:	4b12      	ldr	r3, [pc, #72]	@ (80058a4 <HAL_UART_MspInit+0xfc>)
 800585a:	2200      	movs	r2, #0
 800585c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800585e:	4b11      	ldr	r3, [pc, #68]	@ (80058a4 <HAL_UART_MspInit+0xfc>)
 8005860:	2200      	movs	r2, #0
 8005862:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005864:	480f      	ldr	r0, [pc, #60]	@ (80058a4 <HAL_UART_MspInit+0xfc>)
 8005866:	f000 ff3f 	bl	80066e8 <HAL_DMA_Init>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005870:	f7fd fdae 	bl	80033d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a0b      	ldr	r2, [pc, #44]	@ (80058a4 <HAL_UART_MspInit+0xfc>)
 8005878:	63da      	str	r2, [r3, #60]	@ 0x3c
 800587a:	4a0a      	ldr	r2, [pc, #40]	@ (80058a4 <HAL_UART_MspInit+0xfc>)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005880:	2200      	movs	r2, #0
 8005882:	2105      	movs	r1, #5
 8005884:	2026      	movs	r0, #38	@ 0x26
 8005886:	f000 fef8 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800588a:	2026      	movs	r0, #38	@ 0x26
 800588c:	f000 ff11 	bl	80066b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

	}
 8005890:	bf00      	nop
 8005892:	3728      	adds	r7, #40	@ 0x28
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40004400 	.word	0x40004400
 800589c:	40023800 	.word	0x40023800
 80058a0:	40020c00 	.word	0x40020c00
 80058a4:	20000c2c 	.word	0x20000c2c
 80058a8:	40026088 	.word	0x40026088

080058ac <_write>:
  /* USER CODE END USART2_MspDeInit 1 */
  }

}

int _write(int file, char *ptr, int len){
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]


	//while(!UART_SendFlag);

	//UART_SendFlag=0;
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ptr, len);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	68b9      	ldr	r1, [r7, #8]
 80058c0:	4803      	ldr	r0, [pc, #12]	@ (80058d0 <_write+0x24>)
 80058c2:	f005 f883 	bl	800a9cc <HAL_UART_Transmit_DMA>

	return len;
 80058c6:	687b      	ldr	r3, [r7, #4]

}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20000be4 	.word	0x20000be4

080058d4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 80058d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800590c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80058d8:	f7ff fc92 	bl	8005200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80058dc:	480c      	ldr	r0, [pc, #48]	@ (8005910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80058de:	490d      	ldr	r1, [pc, #52]	@ (8005914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80058e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80058e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058e4:	e002      	b.n	80058ec <LoopCopyDataInit>

080058e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058ea:	3304      	adds	r3, #4

080058ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058f0:	d3f9      	bcc.n	80058e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058f2:	4a0a      	ldr	r2, [pc, #40]	@ (800591c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80058f4:	4c0a      	ldr	r4, [pc, #40]	@ (8005920 <LoopFillZerobss+0x22>)
  movs r3, #0
 80058f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058f8:	e001      	b.n	80058fe <LoopFillZerobss>

080058fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058fc:	3204      	adds	r2, #4

080058fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005900:	d3fb      	bcc.n	80058fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005902:	f00b f8c5 	bl	8010a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005906:	f7fd fca9 	bl	800325c <main>
  bx  lr    
 800590a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800590c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005914:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8005918:	08016040 	.word	0x08016040
  ldr r2, =_sbss
 800591c:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8005920:	2000572c 	.word	0x2000572c

08005924 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005924:	e7fe      	b.n	8005924 <CAN1_RX0_IRQHandler>
	...

08005928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800592c:	4b0e      	ldr	r3, [pc, #56]	@ (8005968 <HAL_Init+0x40>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0d      	ldr	r2, [pc, #52]	@ (8005968 <HAL_Init+0x40>)
 8005932:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005938:	4b0b      	ldr	r3, [pc, #44]	@ (8005968 <HAL_Init+0x40>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a0a      	ldr	r2, [pc, #40]	@ (8005968 <HAL_Init+0x40>)
 800593e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005944:	4b08      	ldr	r3, [pc, #32]	@ (8005968 <HAL_Init+0x40>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a07      	ldr	r2, [pc, #28]	@ (8005968 <HAL_Init+0x40>)
 800594a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800594e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005950:	2003      	movs	r0, #3
 8005952:	f000 fe87 	bl	8006664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005956:	200f      	movs	r0, #15
 8005958:	f000 f808 	bl	800596c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800595c:	f7ff faa6 	bl	8004eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40023c00 	.word	0x40023c00

0800596c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005974:	4b12      	ldr	r3, [pc, #72]	@ (80059c0 <HAL_InitTick+0x54>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	4b12      	ldr	r3, [pc, #72]	@ (80059c4 <HAL_InitTick+0x58>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	4619      	mov	r1, r3
 800597e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005982:	fbb3 f3f1 	udiv	r3, r3, r1
 8005986:	fbb2 f3f3 	udiv	r3, r2, r3
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fe9f 	bl	80066ce <HAL_SYSTICK_Config>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e00e      	b.n	80059b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b0f      	cmp	r3, #15
 800599e:	d80a      	bhi.n	80059b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059a0:	2200      	movs	r2, #0
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295
 80059a8:	f000 fe67 	bl	800667a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059ac:	4a06      	ldr	r2, [pc, #24]	@ (80059c8 <HAL_InitTick+0x5c>)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e000      	b.n	80059b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	200000a8 	.word	0x200000a8
 80059c4:	200000b0 	.word	0x200000b0
 80059c8:	200000ac 	.word	0x200000ac

080059cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059d0:	4b06      	ldr	r3, [pc, #24]	@ (80059ec <HAL_IncTick+0x20>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	4b06      	ldr	r3, [pc, #24]	@ (80059f0 <HAL_IncTick+0x24>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4413      	add	r3, r2
 80059dc:	4a04      	ldr	r2, [pc, #16]	@ (80059f0 <HAL_IncTick+0x24>)
 80059de:	6013      	str	r3, [r2, #0]
}
 80059e0:	bf00      	nop
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	200000b0 	.word	0x200000b0
 80059f0:	20000c8c 	.word	0x20000c8c

080059f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return uwTick;
 80059f8:	4b03      	ldr	r3, [pc, #12]	@ (8005a08 <HAL_GetTick+0x14>)
 80059fa:	681b      	ldr	r3, [r3, #0]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	20000c8c 	.word	0x20000c8c

08005a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a14:	f7ff ffee 	bl	80059f4 <HAL_GetTick>
 8005a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d005      	beq.n	8005a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a26:	4b0a      	ldr	r3, [pc, #40]	@ (8005a50 <HAL_Delay+0x44>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005a32:	bf00      	nop
 8005a34:	f7ff ffde 	bl	80059f4 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d8f7      	bhi.n	8005a34 <HAL_Delay+0x28>
  {
  }
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	200000b0 	.word	0x200000b0

08005a54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e033      	b.n	8005ad2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fc f8f4 	bl	8001c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d118      	bne.n	8005ac4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a9a:	f023 0302 	bic.w	r3, r3, #2
 8005a9e:	f043 0202 	orr.w	r2, r3, #2
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fc06 	bl	80062b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	f043 0201 	orr.w	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ac2:	e001      	b.n	8005ac8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_ADC_Start+0x1a>
 8005af2:	2302      	movs	r3, #2
 8005af4:	e0b2      	b.n	8005c5c <HAL_ADC_Start+0x180>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d018      	beq.n	8005b3e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005b1c:	4b52      	ldr	r3, [pc, #328]	@ (8005c68 <HAL_ADC_Start+0x18c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a52      	ldr	r2, [pc, #328]	@ (8005c6c <HAL_ADC_Start+0x190>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	0c9a      	lsrs	r2, r3, #18
 8005b28:	4613      	mov	r3, r2
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	4413      	add	r3, r2
 8005b2e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005b30:	e002      	b.n	8005b38 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f9      	bne.n	8005b32 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d17a      	bne.n	8005c42 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b50:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b72:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005b76:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b8a:	d106      	bne.n	8005b9a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b90:	f023 0206 	bic.w	r2, r3, #6
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	645a      	str	r2, [r3, #68]	@ 0x44
 8005b98:	e002      	b.n	8005ba0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ba8:	4b31      	ldr	r3, [pc, #196]	@ (8005c70 <HAL_ADC_Start+0x194>)
 8005baa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005bb4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f003 031f 	and.w	r3, r3, #31
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d12a      	bne.n	8005c18 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8005c74 <HAL_ADC_Start+0x198>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d015      	beq.n	8005bf8 <HAL_ADC_Start+0x11c>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a29      	ldr	r2, [pc, #164]	@ (8005c78 <HAL_ADC_Start+0x19c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d105      	bne.n	8005be2 <HAL_ADC_Start+0x106>
 8005bd6:	4b26      	ldr	r3, [pc, #152]	@ (8005c70 <HAL_ADC_Start+0x194>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f003 031f 	and.w	r3, r3, #31
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a25      	ldr	r2, [pc, #148]	@ (8005c7c <HAL_ADC_Start+0x1a0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d136      	bne.n	8005c5a <HAL_ADC_Start+0x17e>
 8005bec:	4b20      	ldr	r3, [pc, #128]	@ (8005c70 <HAL_ADC_Start+0x194>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f003 0310 	and.w	r3, r3, #16
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d130      	bne.n	8005c5a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d129      	bne.n	8005c5a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005c14:	609a      	str	r2, [r3, #8]
 8005c16:	e020      	b.n	8005c5a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a15      	ldr	r2, [pc, #84]	@ (8005c74 <HAL_ADC_Start+0x198>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d11b      	bne.n	8005c5a <HAL_ADC_Start+0x17e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d114      	bne.n	8005c5a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005c3e:	609a      	str	r2, [r3, #8]
 8005c40:	e00b      	b.n	8005c5a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c46:	f043 0210 	orr.w	r2, r3, #16
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c52:	f043 0201 	orr.w	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	200000a8 	.word	0x200000a8
 8005c6c:	431bde83 	.word	0x431bde83
 8005c70:	40012300 	.word	0x40012300
 8005c74:	40012000 	.word	0x40012000
 8005c78:	40012100 	.word	0x40012100
 8005c7c:	40012200 	.word	0x40012200

08005c80 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d101      	bne.n	8005c96 <HAL_ADC_Stop+0x16>
 8005c92:	2302      	movs	r3, #2
 8005c94:	e021      	b.n	8005cda <HAL_ADC_Stop+0x5a>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0201 	bic.w	r2, r2, #1
 8005cac:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005cc4:	f023 0301 	bic.w	r3, r3, #1
 8005cc8:	f043 0201 	orr.w	r2, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d02:	d113      	bne.n	8005d2c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d12:	d10b      	bne.n	8005d2c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d18:	f043 0220 	orr.w	r2, r3, #32
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e063      	b.n	8005df4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d2c:	f7ff fe62 	bl	80059f4 <HAL_GetTick>
 8005d30:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d32:	e021      	b.n	8005d78 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3a:	d01d      	beq.n	8005d78 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d007      	beq.n	8005d52 <HAL_ADC_PollForConversion+0x6c>
 8005d42:	f7ff fe57 	bl	80059f4 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d212      	bcs.n	8005d78 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d00b      	beq.n	8005d78 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	f043 0204 	orr.w	r2, r3, #4
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e03d      	b.n	8005df4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d1d6      	bne.n	8005d34 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f06f 0212 	mvn.w	r2, #18
 8005d8e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d94:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d123      	bne.n	8005df2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d11f      	bne.n	8005df2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d006      	beq.n	8005dce <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d111      	bne.n	8005df2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d105      	bne.n	8005df2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dea:	f043 0201 	orr.w	r2, r3, #1
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d049      	beq.n	8005ec6 <HAL_ADC_IRQHandler+0xca>
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d046      	beq.n	8005ec6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3c:	f003 0310 	and.w	r3, r3, #16
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d105      	bne.n	8005e50 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d12b      	bne.n	8005eb6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d127      	bne.n	8005eb6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d006      	beq.n	8005e82 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d119      	bne.n	8005eb6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0220 	bic.w	r2, r2, #32
 8005e90:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d105      	bne.n	8005eb6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eae:	f043 0201 	orr.w	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f8bd 	bl	8006036 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0212 	mvn.w	r2, #18
 8005ec4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ed4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d057      	beq.n	8005f8c <HAL_ADC_IRQHandler+0x190>
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d054      	beq.n	8005f8c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	f003 0310 	and.w	r3, r3, #16
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d105      	bne.n	8005efa <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d139      	bne.n	8005f7c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d006      	beq.n	8005f24 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d12b      	bne.n	8005f7c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d124      	bne.n	8005f7c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d11d      	bne.n	8005f7c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d119      	bne.n	8005f7c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f56:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d105      	bne.n	8005f7c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f74:	f043 0201 	orr.w	r2, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fa97 	bl	80064b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f06f 020c 	mvn.w	r2, #12
 8005f8a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d017      	beq.n	8005fd2 <HAL_ADC_IRQHandler+0x1d6>
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d014      	beq.n	8005fd2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d10d      	bne.n	8005fd2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f841 	bl	800604a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0201 	mvn.w	r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f003 0320 	and.w	r3, r3, #32
 8005fd8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005fe0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d015      	beq.n	8006014 <HAL_ADC_IRQHandler+0x218>
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d012      	beq.n	8006014 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff2:	f043 0202 	orr.w	r2, r3, #2
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f06f 0220 	mvn.w	r2, #32
 8006002:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f82a 	bl	800605e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f06f 0220 	mvn.w	r2, #32
 8006012:	601a      	str	r2, [r3, #0]
  }
}
 8006014:	bf00      	nop
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800602a:	4618      	mov	r0, r3
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006066:	bf00      	nop
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_ADC_ConfigChannel+0x1c>
 800608c:	2302      	movs	r3, #2
 800608e:	e105      	b.n	800629c <HAL_ADC_ConfigChannel+0x228>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b09      	cmp	r3, #9
 800609e:	d925      	bls.n	80060ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68d9      	ldr	r1, [r3, #12]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	4613      	mov	r3, r2
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	4413      	add	r3, r2
 80060b4:	3b1e      	subs	r3, #30
 80060b6:	2207      	movs	r2, #7
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	43da      	mvns	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	400a      	ands	r2, r1
 80060c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68d9      	ldr	r1, [r3, #12]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	4618      	mov	r0, r3
 80060d8:	4603      	mov	r3, r0
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	4403      	add	r3, r0
 80060de:	3b1e      	subs	r3, #30
 80060e0:	409a      	lsls	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	e022      	b.n	8006132 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6919      	ldr	r1, [r3, #16]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	461a      	mov	r2, r3
 80060fa:	4613      	mov	r3, r2
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	4413      	add	r3, r2
 8006100:	2207      	movs	r2, #7
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	43da      	mvns	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	400a      	ands	r2, r1
 800610e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6919      	ldr	r1, [r3, #16]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	4618      	mov	r0, r3
 8006122:	4603      	mov	r3, r0
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	4403      	add	r3, r0
 8006128:	409a      	lsls	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b06      	cmp	r3, #6
 8006138:	d824      	bhi.n	8006184 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	3b05      	subs	r3, #5
 800614c:	221f      	movs	r2, #31
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	43da      	mvns	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	400a      	ands	r2, r1
 800615a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	4618      	mov	r0, r3
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	3b05      	subs	r3, #5
 8006176:	fa00 f203 	lsl.w	r2, r0, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	635a      	str	r2, [r3, #52]	@ 0x34
 8006182:	e04c      	b.n	800621e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b0c      	cmp	r3, #12
 800618a:	d824      	bhi.n	80061d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	3b23      	subs	r3, #35	@ 0x23
 800619e:	221f      	movs	r2, #31
 80061a0:	fa02 f303 	lsl.w	r3, r2, r3
 80061a4:	43da      	mvns	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	400a      	ands	r2, r1
 80061ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	4618      	mov	r0, r3
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	4613      	mov	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	3b23      	subs	r3, #35	@ 0x23
 80061c8:	fa00 f203 	lsl.w	r2, r0, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80061d4:	e023      	b.n	800621e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	4613      	mov	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	3b41      	subs	r3, #65	@ 0x41
 80061e8:	221f      	movs	r2, #31
 80061ea:	fa02 f303 	lsl.w	r3, r2, r3
 80061ee:	43da      	mvns	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	400a      	ands	r2, r1
 80061f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	4618      	mov	r0, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	3b41      	subs	r3, #65	@ 0x41
 8006212:	fa00 f203 	lsl.w	r2, r0, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800621e:	4b22      	ldr	r3, [pc, #136]	@ (80062a8 <HAL_ADC_ConfigChannel+0x234>)
 8006220:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a21      	ldr	r2, [pc, #132]	@ (80062ac <HAL_ADC_ConfigChannel+0x238>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d109      	bne.n	8006240 <HAL_ADC_ConfigChannel+0x1cc>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b12      	cmp	r3, #18
 8006232:	d105      	bne.n	8006240 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a19      	ldr	r2, [pc, #100]	@ (80062ac <HAL_ADC_ConfigChannel+0x238>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d123      	bne.n	8006292 <HAL_ADC_ConfigChannel+0x21e>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b10      	cmp	r3, #16
 8006250:	d003      	beq.n	800625a <HAL_ADC_ConfigChannel+0x1e6>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b11      	cmp	r3, #17
 8006258:	d11b      	bne.n	8006292 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b10      	cmp	r3, #16
 800626c:	d111      	bne.n	8006292 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800626e:	4b10      	ldr	r3, [pc, #64]	@ (80062b0 <HAL_ADC_ConfigChannel+0x23c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a10      	ldr	r2, [pc, #64]	@ (80062b4 <HAL_ADC_ConfigChannel+0x240>)
 8006274:	fba2 2303 	umull	r2, r3, r2, r3
 8006278:	0c9a      	lsrs	r2, r3, #18
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006284:	e002      	b.n	800628c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	3b01      	subs	r3, #1
 800628a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f9      	bne.n	8006286 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	40012300 	.word	0x40012300
 80062ac:	40012000 	.word	0x40012000
 80062b0:	200000a8 	.word	0x200000a8
 80062b4:	431bde83 	.word	0x431bde83

080062b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062c0:	4b79      	ldr	r3, [pc, #484]	@ (80064a8 <ADC_Init+0x1f0>)
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	431a      	orrs	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6859      	ldr	r1, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	021a      	lsls	r2, r3, #8
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006310:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6859      	ldr	r1, [r3, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006332:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6899      	ldr	r1, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634a:	4a58      	ldr	r2, [pc, #352]	@ (80064ac <ADC_Init+0x1f4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d022      	beq.n	8006396 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800635e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6899      	ldr	r1, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006380:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6899      	ldr	r1, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	609a      	str	r2, [r3, #8]
 8006394:	e00f      	b.n	80063b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80063a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80063b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0202 	bic.w	r2, r2, #2
 80063c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6899      	ldr	r1, [r3, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	7e1b      	ldrb	r3, [r3, #24]
 80063d0:	005a      	lsls	r2, r3, #1
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d01b      	beq.n	800641c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006402:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6859      	ldr	r1, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640e:	3b01      	subs	r3, #1
 8006410:	035a      	lsls	r2, r3, #13
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	e007      	b.n	800642c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800642a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800643a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	3b01      	subs	r3, #1
 8006448:	051a      	lsls	r2, r3, #20
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6899      	ldr	r1, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800646e:	025a      	lsls	r2, r3, #9
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006486:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6899      	ldr	r1, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	029a      	lsls	r2, r3, #10
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	609a      	str	r2, [r3, #8]
}
 800649c:	bf00      	nop
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	40012300 	.word	0x40012300
 80064ac:	0f000001 	.word	0x0f000001

080064b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006508 <__NVIC_SetPriorityGrouping+0x44>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80064e0:	4013      	ands	r3, r2
 80064e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80064f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064f6:	4a04      	ldr	r2, [pc, #16]	@ (8006508 <__NVIC_SetPriorityGrouping+0x44>)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	60d3      	str	r3, [r2, #12]
}
 80064fc:	bf00      	nop
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	e000ed00 	.word	0xe000ed00

0800650c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006510:	4b04      	ldr	r3, [pc, #16]	@ (8006524 <__NVIC_GetPriorityGrouping+0x18>)
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	0a1b      	lsrs	r3, r3, #8
 8006516:	f003 0307 	and.w	r3, r3, #7
}
 800651a:	4618      	mov	r0, r3
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	e000ed00 	.word	0xe000ed00

08006528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006536:	2b00      	cmp	r3, #0
 8006538:	db0b      	blt.n	8006552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	f003 021f 	and.w	r2, r3, #31
 8006540:	4907      	ldr	r1, [pc, #28]	@ (8006560 <__NVIC_EnableIRQ+0x38>)
 8006542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	2001      	movs	r0, #1
 800654a:	fa00 f202 	lsl.w	r2, r0, r2
 800654e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006552:	bf00      	nop
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	e000e100 	.word	0xe000e100

08006564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	6039      	str	r1, [r7, #0]
 800656e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006574:	2b00      	cmp	r3, #0
 8006576:	db0a      	blt.n	800658e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	b2da      	uxtb	r2, r3
 800657c:	490c      	ldr	r1, [pc, #48]	@ (80065b0 <__NVIC_SetPriority+0x4c>)
 800657e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006582:	0112      	lsls	r2, r2, #4
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	440b      	add	r3, r1
 8006588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800658c:	e00a      	b.n	80065a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	b2da      	uxtb	r2, r3
 8006592:	4908      	ldr	r1, [pc, #32]	@ (80065b4 <__NVIC_SetPriority+0x50>)
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	3b04      	subs	r3, #4
 800659c:	0112      	lsls	r2, r2, #4
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	440b      	add	r3, r1
 80065a2:	761a      	strb	r2, [r3, #24]
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	e000e100 	.word	0xe000e100
 80065b4:	e000ed00 	.word	0xe000ed00

080065b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b089      	sub	sp, #36	@ 0x24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	f1c3 0307 	rsb	r3, r3, #7
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	bf28      	it	cs
 80065d6:	2304      	movcs	r3, #4
 80065d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	3304      	adds	r3, #4
 80065de:	2b06      	cmp	r3, #6
 80065e0:	d902      	bls.n	80065e8 <NVIC_EncodePriority+0x30>
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	3b03      	subs	r3, #3
 80065e6:	e000      	b.n	80065ea <NVIC_EncodePriority+0x32>
 80065e8:	2300      	movs	r3, #0
 80065ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065ec:	f04f 32ff 	mov.w	r2, #4294967295
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	43da      	mvns	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	401a      	ands	r2, r3
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006600:	f04f 31ff 	mov.w	r1, #4294967295
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	fa01 f303 	lsl.w	r3, r1, r3
 800660a:	43d9      	mvns	r1, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006610:	4313      	orrs	r3, r2
         );
}
 8006612:	4618      	mov	r0, r3
 8006614:	3724      	adds	r7, #36	@ 0x24
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3b01      	subs	r3, #1
 800662c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006630:	d301      	bcc.n	8006636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006632:	2301      	movs	r3, #1
 8006634:	e00f      	b.n	8006656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006636:	4a0a      	ldr	r2, [pc, #40]	@ (8006660 <SysTick_Config+0x40>)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3b01      	subs	r3, #1
 800663c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800663e:	210f      	movs	r1, #15
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	f7ff ff8e 	bl	8006564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006648:	4b05      	ldr	r3, [pc, #20]	@ (8006660 <SysTick_Config+0x40>)
 800664a:	2200      	movs	r2, #0
 800664c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800664e:	4b04      	ldr	r3, [pc, #16]	@ (8006660 <SysTick_Config+0x40>)
 8006650:	2207      	movs	r2, #7
 8006652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	e000e010 	.word	0xe000e010

08006664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff ff29 	bl	80064c4 <__NVIC_SetPriorityGrouping>
}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af00      	add	r7, sp, #0
 8006680:	4603      	mov	r3, r0
 8006682:	60b9      	str	r1, [r7, #8]
 8006684:	607a      	str	r2, [r7, #4]
 8006686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006688:	2300      	movs	r3, #0
 800668a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800668c:	f7ff ff3e 	bl	800650c <__NVIC_GetPriorityGrouping>
 8006690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	6978      	ldr	r0, [r7, #20]
 8006698:	f7ff ff8e 	bl	80065b8 <NVIC_EncodePriority>
 800669c:	4602      	mov	r2, r0
 800669e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066a2:	4611      	mov	r1, r2
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff ff5d 	bl	8006564 <__NVIC_SetPriority>
}
 80066aa:	bf00      	nop
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	4603      	mov	r3, r0
 80066ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff ff31 	bl	8006528 <__NVIC_EnableIRQ>
}
 80066c6:	bf00      	nop
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff ffa2 	bl	8006620 <SysTick_Config>
 80066dc:	4603      	mov	r3, r0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80066f4:	f7ff f97e 	bl	80059f4 <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e099      	b.n	8006838 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0201 	bic.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006724:	e00f      	b.n	8006746 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006726:	f7ff f965 	bl	80059f4 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b05      	cmp	r3, #5
 8006732:	d908      	bls.n	8006746 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2220      	movs	r2, #32
 8006738:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2203      	movs	r2, #3
 800673e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e078      	b.n	8006838 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e8      	bne.n	8006726 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4b38      	ldr	r3, [pc, #224]	@ (8006840 <HAL_DMA_Init+0x158>)
 8006760:	4013      	ands	r3, r2
 8006762:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006772:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800677e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800678a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679c:	2b04      	cmp	r3, #4
 800679e:	d107      	bne.n	80067b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a8:	4313      	orrs	r3, r2
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f023 0307 	bic.w	r3, r3, #7
 80067c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d117      	bne.n	800680a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00e      	beq.n	800680a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fb0f 	bl	8006e10 <DMA_CheckFifoParam>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2240      	movs	r2, #64	@ 0x40
 80067fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006806:	2301      	movs	r3, #1
 8006808:	e016      	b.n	8006838 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fac6 	bl	8006da4 <DMA_CalcBaseAndBitshift>
 8006818:	4603      	mov	r3, r0
 800681a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006820:	223f      	movs	r2, #63	@ 0x3f
 8006822:	409a      	lsls	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	f010803f 	.word	0xf010803f

08006844 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800685a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006862:	2b01      	cmp	r3, #1
 8006864:	d101      	bne.n	800686a <HAL_DMA_Start_IT+0x26>
 8006866:	2302      	movs	r3, #2
 8006868:	e040      	b.n	80068ec <HAL_DMA_Start_IT+0xa8>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b01      	cmp	r3, #1
 800687c:	d12f      	bne.n	80068de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2202      	movs	r2, #2
 8006882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 fa58 	bl	8006d48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800689c:	223f      	movs	r2, #63	@ 0x3f
 800689e:	409a      	lsls	r2, r3
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0216 	orr.w	r2, r2, #22
 80068b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d007      	beq.n	80068cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0208 	orr.w	r2, r2, #8
 80068ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	e005      	b.n	80068ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80068e6:	2302      	movs	r3, #2
 80068e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006900:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006902:	f7ff f877 	bl	80059f4 <HAL_GetTick>
 8006906:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d008      	beq.n	8006926 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2280      	movs	r2, #128	@ 0x80
 8006918:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e052      	b.n	80069cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0216 	bic.w	r2, r2, #22
 8006934:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	695a      	ldr	r2, [r3, #20]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006944:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694a:	2b00      	cmp	r3, #0
 800694c:	d103      	bne.n	8006956 <HAL_DMA_Abort+0x62>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006952:	2b00      	cmp	r3, #0
 8006954:	d007      	beq.n	8006966 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0208 	bic.w	r2, r2, #8
 8006964:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0201 	bic.w	r2, r2, #1
 8006974:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006976:	e013      	b.n	80069a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006978:	f7ff f83c 	bl	80059f4 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b05      	cmp	r3, #5
 8006984:	d90c      	bls.n	80069a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2220      	movs	r2, #32
 800698a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2203      	movs	r2, #3
 8006990:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e015      	b.n	80069cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e4      	bne.n	8006978 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069b2:	223f      	movs	r2, #63	@ 0x3f
 80069b4:	409a      	lsls	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d004      	beq.n	80069f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2280      	movs	r2, #128	@ 0x80
 80069ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e00c      	b.n	8006a0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2205      	movs	r2, #5
 80069f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 0201 	bic.w	r2, r2, #1
 8006a08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006a24:	4b8e      	ldr	r3, [pc, #568]	@ (8006c60 <HAL_DMA_IRQHandler+0x248>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a8e      	ldr	r2, [pc, #568]	@ (8006c64 <HAL_DMA_IRQHandler+0x24c>)
 8006a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2e:	0a9b      	lsrs	r3, r3, #10
 8006a30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a42:	2208      	movs	r2, #8
 8006a44:	409a      	lsls	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01a      	beq.n	8006a84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d013      	beq.n	8006a84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0204 	bic.w	r2, r2, #4
 8006a6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a70:	2208      	movs	r2, #8
 8006a72:	409a      	lsls	r2, r3
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a7c:	f043 0201 	orr.w	r2, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a88:	2201      	movs	r2, #1
 8006a8a:	409a      	lsls	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d012      	beq.n	8006aba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00b      	beq.n	8006aba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	409a      	lsls	r2, r3
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab2:	f043 0202 	orr.w	r2, r3, #2
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006abe:	2204      	movs	r2, #4
 8006ac0:	409a      	lsls	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d012      	beq.n	8006af0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00b      	beq.n	8006af0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006adc:	2204      	movs	r2, #4
 8006ade:	409a      	lsls	r2, r3
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae8:	f043 0204 	orr.w	r2, r3, #4
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006af4:	2210      	movs	r2, #16
 8006af6:	409a      	lsls	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4013      	ands	r3, r2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d043      	beq.n	8006b88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0308 	and.w	r3, r3, #8
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d03c      	beq.n	8006b88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b12:	2210      	movs	r2, #16
 8006b14:	409a      	lsls	r2, r3
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d018      	beq.n	8006b5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d108      	bne.n	8006b48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d024      	beq.n	8006b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	4798      	blx	r3
 8006b46:	e01f      	b.n	8006b88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01b      	beq.n	8006b88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	4798      	blx	r3
 8006b58:	e016      	b.n	8006b88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d107      	bne.n	8006b78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0208 	bic.w	r2, r2, #8
 8006b76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	409a      	lsls	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 808f 	beq.w	8006cb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0310 	and.w	r3, r3, #16
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 8087 	beq.w	8006cb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bae:	2220      	movs	r2, #32
 8006bb0:	409a      	lsls	r2, r3
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b05      	cmp	r3, #5
 8006bc0:	d136      	bne.n	8006c30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0216 	bic.w	r2, r2, #22
 8006bd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	695a      	ldr	r2, [r3, #20]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006be0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d103      	bne.n	8006bf2 <HAL_DMA_IRQHandler+0x1da>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d007      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0208 	bic.w	r2, r2, #8
 8006c00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c06:	223f      	movs	r2, #63	@ 0x3f
 8006c08:	409a      	lsls	r2, r3
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d07e      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	4798      	blx	r3
        }
        return;
 8006c2e:	e079      	b.n	8006d24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d01d      	beq.n	8006c7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10d      	bne.n	8006c68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d031      	beq.n	8006cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	4798      	blx	r3
 8006c5c:	e02c      	b.n	8006cb8 <HAL_DMA_IRQHandler+0x2a0>
 8006c5e:	bf00      	nop
 8006c60:	200000a8 	.word	0x200000a8
 8006c64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d023      	beq.n	8006cb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	4798      	blx	r3
 8006c78:	e01e      	b.n	8006cb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10f      	bne.n	8006ca8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0210 	bic.w	r2, r2, #16
 8006c96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d032      	beq.n	8006d26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d022      	beq.n	8006d12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2205      	movs	r2, #5
 8006cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0201 	bic.w	r2, r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	60bb      	str	r3, [r7, #8]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d307      	bcc.n	8006d00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1f2      	bne.n	8006ce4 <HAL_DMA_IRQHandler+0x2cc>
 8006cfe:	e000      	b.n	8006d02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006d00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
 8006d22:	e000      	b.n	8006d26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006d24:	bf00      	nop
    }
  }
}
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d3a:	b2db      	uxtb	r3, r3
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006d64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b40      	cmp	r3, #64	@ 0x40
 8006d74:	d108      	bne.n	8006d88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d86:	e007      	b.n	8006d98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	60da      	str	r2, [r3, #12]
}
 8006d98:	bf00      	nop
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	3b10      	subs	r3, #16
 8006db4:	4a14      	ldr	r2, [pc, #80]	@ (8006e08 <DMA_CalcBaseAndBitshift+0x64>)
 8006db6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dba:	091b      	lsrs	r3, r3, #4
 8006dbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006dbe:	4a13      	ldr	r2, [pc, #76]	@ (8006e0c <DMA_CalcBaseAndBitshift+0x68>)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d909      	bls.n	8006de6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006dda:	f023 0303 	bic.w	r3, r3, #3
 8006dde:	1d1a      	adds	r2, r3, #4
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	659a      	str	r2, [r3, #88]	@ 0x58
 8006de4:	e007      	b.n	8006df6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006dee:	f023 0303 	bic.w	r3, r3, #3
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	aaaaaaab 	.word	0xaaaaaaab
 8006e0c:	08015b34 	.word	0x08015b34

08006e10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d11f      	bne.n	8006e6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d856      	bhi.n	8006ede <DMA_CheckFifoParam+0xce>
 8006e30:	a201      	add	r2, pc, #4	@ (adr r2, 8006e38 <DMA_CheckFifoParam+0x28>)
 8006e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e36:	bf00      	nop
 8006e38:	08006e49 	.word	0x08006e49
 8006e3c:	08006e5b 	.word	0x08006e5b
 8006e40:	08006e49 	.word	0x08006e49
 8006e44:	08006edf 	.word	0x08006edf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d046      	beq.n	8006ee2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e58:	e043      	b.n	8006ee2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006e62:	d140      	bne.n	8006ee6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e68:	e03d      	b.n	8006ee6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e72:	d121      	bne.n	8006eb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d837      	bhi.n	8006eea <DMA_CheckFifoParam+0xda>
 8006e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e80 <DMA_CheckFifoParam+0x70>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006e91 	.word	0x08006e91
 8006e84:	08006e97 	.word	0x08006e97
 8006e88:	08006e91 	.word	0x08006e91
 8006e8c:	08006ea9 	.word	0x08006ea9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	73fb      	strb	r3, [r7, #15]
      break;
 8006e94:	e030      	b.n	8006ef8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d025      	beq.n	8006eee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ea6:	e022      	b.n	8006eee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006eb0:	d11f      	bne.n	8006ef2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006eb6:	e01c      	b.n	8006ef2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d903      	bls.n	8006ec6 <DMA_CheckFifoParam+0xb6>
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d003      	beq.n	8006ecc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006ec4:	e018      	b.n	8006ef8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8006eca:	e015      	b.n	8006ef8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00e      	beq.n	8006ef6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	73fb      	strb	r3, [r7, #15]
      break;
 8006edc:	e00b      	b.n	8006ef6 <DMA_CheckFifoParam+0xe6>
      break;
 8006ede:	bf00      	nop
 8006ee0:	e00a      	b.n	8006ef8 <DMA_CheckFifoParam+0xe8>
      break;
 8006ee2:	bf00      	nop
 8006ee4:	e008      	b.n	8006ef8 <DMA_CheckFifoParam+0xe8>
      break;
 8006ee6:	bf00      	nop
 8006ee8:	e006      	b.n	8006ef8 <DMA_CheckFifoParam+0xe8>
      break;
 8006eea:	bf00      	nop
 8006eec:	e004      	b.n	8006ef8 <DMA_CheckFifoParam+0xe8>
      break;
 8006eee:	bf00      	nop
 8006ef0:	e002      	b.n	8006ef8 <DMA_CheckFifoParam+0xe8>
      break;   
 8006ef2:	bf00      	nop
 8006ef4:	e000      	b.n	8006ef8 <DMA_CheckFifoParam+0xe8>
      break;
 8006ef6:	bf00      	nop
    }
  } 
  
  return status; 
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop

08006f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b089      	sub	sp, #36	@ 0x24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61fb      	str	r3, [r7, #28]
 8006f22:	e16b      	b.n	80071fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006f24:	2201      	movs	r2, #1
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4013      	ands	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	f040 815a 	bne.w	80071f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f003 0303 	and.w	r3, r3, #3
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d005      	beq.n	8006f5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d130      	bne.n	8006fbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	2203      	movs	r2, #3
 8006f66:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6a:	43db      	mvns	r3, r3
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	4013      	ands	r3, r2
 8006f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f90:	2201      	movs	r2, #1
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	fa02 f303 	lsl.w	r3, r2, r3
 8006f98:	43db      	mvns	r3, r3
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	091b      	lsrs	r3, r3, #4
 8006fa6:	f003 0201 	and.w	r2, r3, #1
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb0:	69ba      	ldr	r2, [r7, #24]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f003 0303 	and.w	r3, r3, #3
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d017      	beq.n	8006ff8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	2203      	movs	r2, #3
 8006fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fec:	69ba      	ldr	r2, [r7, #24]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f003 0303 	and.w	r3, r3, #3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d123      	bne.n	800704c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	08da      	lsrs	r2, r3, #3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3208      	adds	r2, #8
 800700c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	f003 0307 	and.w	r3, r3, #7
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	220f      	movs	r2, #15
 800701c:	fa02 f303 	lsl.w	r3, r2, r3
 8007020:	43db      	mvns	r3, r3
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	4013      	ands	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	691a      	ldr	r2, [r3, #16]
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	f003 0307 	and.w	r3, r3, #7
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	fa02 f303 	lsl.w	r3, r2, r3
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	4313      	orrs	r3, r2
 800703c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	08da      	lsrs	r2, r3, #3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3208      	adds	r2, #8
 8007046:	69b9      	ldr	r1, [r7, #24]
 8007048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	2203      	movs	r2, #3
 8007058:	fa02 f303 	lsl.w	r3, r2, r3
 800705c:	43db      	mvns	r3, r3
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	4013      	ands	r3, r2
 8007062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f003 0203 	and.w	r2, r3, #3
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	fa02 f303 	lsl.w	r3, r2, r3
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	4313      	orrs	r3, r2
 8007078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 80b4 	beq.w	80071f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	4b60      	ldr	r3, [pc, #384]	@ (8007214 <HAL_GPIO_Init+0x30c>)
 8007094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007096:	4a5f      	ldr	r2, [pc, #380]	@ (8007214 <HAL_GPIO_Init+0x30c>)
 8007098:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800709c:	6453      	str	r3, [r2, #68]	@ 0x44
 800709e:	4b5d      	ldr	r3, [pc, #372]	@ (8007214 <HAL_GPIO_Init+0x30c>)
 80070a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80070aa:	4a5b      	ldr	r2, [pc, #364]	@ (8007218 <HAL_GPIO_Init+0x310>)
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	089b      	lsrs	r3, r3, #2
 80070b0:	3302      	adds	r3, #2
 80070b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	220f      	movs	r2, #15
 80070c2:	fa02 f303 	lsl.w	r3, r2, r3
 80070c6:	43db      	mvns	r3, r3
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	4013      	ands	r3, r2
 80070cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a52      	ldr	r2, [pc, #328]	@ (800721c <HAL_GPIO_Init+0x314>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d02b      	beq.n	800712e <HAL_GPIO_Init+0x226>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a51      	ldr	r2, [pc, #324]	@ (8007220 <HAL_GPIO_Init+0x318>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d025      	beq.n	800712a <HAL_GPIO_Init+0x222>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a50      	ldr	r2, [pc, #320]	@ (8007224 <HAL_GPIO_Init+0x31c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d01f      	beq.n	8007126 <HAL_GPIO_Init+0x21e>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a4f      	ldr	r2, [pc, #316]	@ (8007228 <HAL_GPIO_Init+0x320>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d019      	beq.n	8007122 <HAL_GPIO_Init+0x21a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a4e      	ldr	r2, [pc, #312]	@ (800722c <HAL_GPIO_Init+0x324>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d013      	beq.n	800711e <HAL_GPIO_Init+0x216>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a4d      	ldr	r2, [pc, #308]	@ (8007230 <HAL_GPIO_Init+0x328>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00d      	beq.n	800711a <HAL_GPIO_Init+0x212>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a4c      	ldr	r2, [pc, #304]	@ (8007234 <HAL_GPIO_Init+0x32c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d007      	beq.n	8007116 <HAL_GPIO_Init+0x20e>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a4b      	ldr	r2, [pc, #300]	@ (8007238 <HAL_GPIO_Init+0x330>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d101      	bne.n	8007112 <HAL_GPIO_Init+0x20a>
 800710e:	2307      	movs	r3, #7
 8007110:	e00e      	b.n	8007130 <HAL_GPIO_Init+0x228>
 8007112:	2308      	movs	r3, #8
 8007114:	e00c      	b.n	8007130 <HAL_GPIO_Init+0x228>
 8007116:	2306      	movs	r3, #6
 8007118:	e00a      	b.n	8007130 <HAL_GPIO_Init+0x228>
 800711a:	2305      	movs	r3, #5
 800711c:	e008      	b.n	8007130 <HAL_GPIO_Init+0x228>
 800711e:	2304      	movs	r3, #4
 8007120:	e006      	b.n	8007130 <HAL_GPIO_Init+0x228>
 8007122:	2303      	movs	r3, #3
 8007124:	e004      	b.n	8007130 <HAL_GPIO_Init+0x228>
 8007126:	2302      	movs	r3, #2
 8007128:	e002      	b.n	8007130 <HAL_GPIO_Init+0x228>
 800712a:	2301      	movs	r3, #1
 800712c:	e000      	b.n	8007130 <HAL_GPIO_Init+0x228>
 800712e:	2300      	movs	r3, #0
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	f002 0203 	and.w	r2, r2, #3
 8007136:	0092      	lsls	r2, r2, #2
 8007138:	4093      	lsls	r3, r2
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	4313      	orrs	r3, r2
 800713e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007140:	4935      	ldr	r1, [pc, #212]	@ (8007218 <HAL_GPIO_Init+0x310>)
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	089b      	lsrs	r3, r3, #2
 8007146:	3302      	adds	r3, #2
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800714e:	4b3b      	ldr	r3, [pc, #236]	@ (800723c <HAL_GPIO_Init+0x334>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	43db      	mvns	r3, r3
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	4013      	ands	r3, r2
 800715c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	4313      	orrs	r3, r2
 8007170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007172:	4a32      	ldr	r2, [pc, #200]	@ (800723c <HAL_GPIO_Init+0x334>)
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007178:	4b30      	ldr	r3, [pc, #192]	@ (800723c <HAL_GPIO_Init+0x334>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	43db      	mvns	r3, r3
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	4013      	ands	r3, r2
 8007186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007194:	69ba      	ldr	r2, [r7, #24]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	4313      	orrs	r3, r2
 800719a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800719c:	4a27      	ldr	r2, [pc, #156]	@ (800723c <HAL_GPIO_Init+0x334>)
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80071a2:	4b26      	ldr	r3, [pc, #152]	@ (800723c <HAL_GPIO_Init+0x334>)
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	43db      	mvns	r3, r3
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	4013      	ands	r3, r2
 80071b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80071c6:	4a1d      	ldr	r2, [pc, #116]	@ (800723c <HAL_GPIO_Init+0x334>)
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071cc:	4b1b      	ldr	r3, [pc, #108]	@ (800723c <HAL_GPIO_Init+0x334>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	43db      	mvns	r3, r3
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	4013      	ands	r3, r2
 80071da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80071f0:	4a12      	ldr	r2, [pc, #72]	@ (800723c <HAL_GPIO_Init+0x334>)
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	3301      	adds	r3, #1
 80071fa:	61fb      	str	r3, [r7, #28]
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b0f      	cmp	r3, #15
 8007200:	f67f ae90 	bls.w	8006f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	3724      	adds	r7, #36	@ 0x24
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	40023800 	.word	0x40023800
 8007218:	40013800 	.word	0x40013800
 800721c:	40020000 	.word	0x40020000
 8007220:	40020400 	.word	0x40020400
 8007224:	40020800 	.word	0x40020800
 8007228:	40020c00 	.word	0x40020c00
 800722c:	40021000 	.word	0x40021000
 8007230:	40021400 	.word	0x40021400
 8007234:	40021800 	.word	0x40021800
 8007238:	40021c00 	.word	0x40021c00
 800723c:	40013c00 	.word	0x40013c00

08007240 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691a      	ldr	r2, [r3, #16]
 8007250:	887b      	ldrh	r3, [r7, #2]
 8007252:	4013      	ands	r3, r2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007258:	2301      	movs	r3, #1
 800725a:	73fb      	strb	r3, [r7, #15]
 800725c:	e001      	b.n	8007262 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007262:	7bfb      	ldrb	r3, [r7, #15]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	807b      	strh	r3, [r7, #2]
 800727c:	4613      	mov	r3, r2
 800727e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007280:	787b      	ldrb	r3, [r7, #1]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007286:	887a      	ldrh	r2, [r7, #2]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800728c:	e003      	b.n	8007296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800728e:	887b      	ldrh	r3, [r7, #2]
 8007290:	041a      	lsls	r2, r3, #16
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	619a      	str	r2, [r3, #24]
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b085      	sub	sp, #20
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	460b      	mov	r3, r1
 80072ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80072b4:	887a      	ldrh	r2, [r7, #2]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4013      	ands	r3, r2
 80072ba:	041a      	lsls	r2, r3, #16
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	43d9      	mvns	r1, r3
 80072c0:	887b      	ldrh	r3, [r7, #2]
 80072c2:	400b      	ands	r3, r1
 80072c4:	431a      	orrs	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	619a      	str	r2, [r3, #24]
}
 80072ca:	bf00      	nop
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
	...

080072d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80072e2:	4b08      	ldr	r3, [pc, #32]	@ (8007304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80072e4:	695a      	ldr	r2, [r3, #20]
 80072e6:	88fb      	ldrh	r3, [r7, #6]
 80072e8:	4013      	ands	r3, r2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d006      	beq.n	80072fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80072ee:	4a05      	ldr	r2, [pc, #20]	@ (8007304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80072f4:	88fb      	ldrh	r3, [r7, #6]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fd f982 	bl	8004600 <HAL_GPIO_EXTI_Callback>
  }
}
 80072fc:	bf00      	nop
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	40013c00 	.word	0x40013c00

08007308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e12b      	b.n	8007572 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d106      	bne.n	8007334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fb fe50 	bl	8002fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2224      	movs	r2, #36	@ 0x24
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0201 	bic.w	r2, r2, #1
 800734a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800735a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800736a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800736c:	f002 fddc 	bl	8009f28 <HAL_RCC_GetPCLK1Freq>
 8007370:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	4a81      	ldr	r2, [pc, #516]	@ (800757c <HAL_I2C_Init+0x274>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d807      	bhi.n	800738c <HAL_I2C_Init+0x84>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4a80      	ldr	r2, [pc, #512]	@ (8007580 <HAL_I2C_Init+0x278>)
 8007380:	4293      	cmp	r3, r2
 8007382:	bf94      	ite	ls
 8007384:	2301      	movls	r3, #1
 8007386:	2300      	movhi	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	e006      	b.n	800739a <HAL_I2C_Init+0x92>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4a7d      	ldr	r2, [pc, #500]	@ (8007584 <HAL_I2C_Init+0x27c>)
 8007390:	4293      	cmp	r3, r2
 8007392:	bf94      	ite	ls
 8007394:	2301      	movls	r3, #1
 8007396:	2300      	movhi	r3, #0
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e0e7      	b.n	8007572 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4a78      	ldr	r2, [pc, #480]	@ (8007588 <HAL_I2C_Init+0x280>)
 80073a6:	fba2 2303 	umull	r2, r3, r2, r3
 80073aa:	0c9b      	lsrs	r3, r3, #18
 80073ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	4a6a      	ldr	r2, [pc, #424]	@ (800757c <HAL_I2C_Init+0x274>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d802      	bhi.n	80073dc <HAL_I2C_Init+0xd4>
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	3301      	adds	r3, #1
 80073da:	e009      	b.n	80073f0 <HAL_I2C_Init+0xe8>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80073e2:	fb02 f303 	mul.w	r3, r2, r3
 80073e6:	4a69      	ldr	r2, [pc, #420]	@ (800758c <HAL_I2C_Init+0x284>)
 80073e8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ec:	099b      	lsrs	r3, r3, #6
 80073ee:	3301      	adds	r3, #1
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6812      	ldr	r2, [r2, #0]
 80073f4:	430b      	orrs	r3, r1
 80073f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007402:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	495c      	ldr	r1, [pc, #368]	@ (800757c <HAL_I2C_Init+0x274>)
 800740c:	428b      	cmp	r3, r1
 800740e:	d819      	bhi.n	8007444 <HAL_I2C_Init+0x13c>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	1e59      	subs	r1, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	fbb1 f3f3 	udiv	r3, r1, r3
 800741e:	1c59      	adds	r1, r3, #1
 8007420:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007424:	400b      	ands	r3, r1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <HAL_I2C_Init+0x138>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	1e59      	subs	r1, r3, #1
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	fbb1 f3f3 	udiv	r3, r1, r3
 8007438:	3301      	adds	r3, #1
 800743a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800743e:	e051      	b.n	80074e4 <HAL_I2C_Init+0x1dc>
 8007440:	2304      	movs	r3, #4
 8007442:	e04f      	b.n	80074e4 <HAL_I2C_Init+0x1dc>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d111      	bne.n	8007470 <HAL_I2C_Init+0x168>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	1e58      	subs	r0, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6859      	ldr	r1, [r3, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	440b      	add	r3, r1
 800745a:	fbb0 f3f3 	udiv	r3, r0, r3
 800745e:	3301      	adds	r3, #1
 8007460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007464:	2b00      	cmp	r3, #0
 8007466:	bf0c      	ite	eq
 8007468:	2301      	moveq	r3, #1
 800746a:	2300      	movne	r3, #0
 800746c:	b2db      	uxtb	r3, r3
 800746e:	e012      	b.n	8007496 <HAL_I2C_Init+0x18e>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	1e58      	subs	r0, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6859      	ldr	r1, [r3, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	440b      	add	r3, r1
 800747e:	0099      	lsls	r1, r3, #2
 8007480:	440b      	add	r3, r1
 8007482:	fbb0 f3f3 	udiv	r3, r0, r3
 8007486:	3301      	adds	r3, #1
 8007488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800748c:	2b00      	cmp	r3, #0
 800748e:	bf0c      	ite	eq
 8007490:	2301      	moveq	r3, #1
 8007492:	2300      	movne	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <HAL_I2C_Init+0x196>
 800749a:	2301      	movs	r3, #1
 800749c:	e022      	b.n	80074e4 <HAL_I2C_Init+0x1dc>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10e      	bne.n	80074c4 <HAL_I2C_Init+0x1bc>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	1e58      	subs	r0, r3, #1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6859      	ldr	r1, [r3, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	440b      	add	r3, r1
 80074b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80074b8:	3301      	adds	r3, #1
 80074ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074c2:	e00f      	b.n	80074e4 <HAL_I2C_Init+0x1dc>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	1e58      	subs	r0, r3, #1
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6859      	ldr	r1, [r3, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	440b      	add	r3, r1
 80074d2:	0099      	lsls	r1, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80074da:	3301      	adds	r3, #1
 80074dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	6809      	ldr	r1, [r1, #0]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	69da      	ldr	r2, [r3, #28]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007512:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6911      	ldr	r1, [r2, #16]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	68d2      	ldr	r2, [r2, #12]
 800751e:	4311      	orrs	r1, r2
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6812      	ldr	r2, [r2, #0]
 8007524:	430b      	orrs	r3, r1
 8007526:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695a      	ldr	r2, [r3, #20]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	000186a0 	.word	0x000186a0
 8007580:	001e847f 	.word	0x001e847f
 8007584:	003d08ff 	.word	0x003d08ff
 8007588:	431bde83 	.word	0x431bde83
 800758c:	10624dd3 	.word	0x10624dd3

08007590 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075a2:	2b80      	cmp	r3, #128	@ 0x80
 80075a4:	d103      	bne.n	80075ae <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2200      	movs	r2, #0
 80075ac:	611a      	str	r2, [r3, #16]
  }
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
	...

080075bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af02      	add	r7, sp, #8
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	607a      	str	r2, [r7, #4]
 80075c6:	461a      	mov	r2, r3
 80075c8:	460b      	mov	r3, r1
 80075ca:	817b      	strh	r3, [r7, #10]
 80075cc:	4613      	mov	r3, r2
 80075ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075d0:	f7fe fa10 	bl	80059f4 <HAL_GetTick>
 80075d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b20      	cmp	r3, #32
 80075e0:	f040 80e0 	bne.w	80077a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	2319      	movs	r3, #25
 80075ea:	2201      	movs	r2, #1
 80075ec:	4970      	ldr	r1, [pc, #448]	@ (80077b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f001 fdea 	bl	80091c8 <I2C_WaitOnFlagUntilTimeout>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80075fa:	2302      	movs	r3, #2
 80075fc:	e0d3      	b.n	80077a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_I2C_Master_Transmit+0x50>
 8007608:	2302      	movs	r3, #2
 800760a:	e0cc      	b.n	80077a6 <HAL_I2C_Master_Transmit+0x1ea>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b01      	cmp	r3, #1
 8007620:	d007      	beq.n	8007632 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 0201 	orr.w	r2, r2, #1
 8007630:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007640:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2221      	movs	r2, #33	@ 0x21
 8007646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2210      	movs	r2, #16
 800764e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	893a      	ldrh	r2, [r7, #8]
 8007662:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007668:	b29a      	uxth	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4a50      	ldr	r2, [pc, #320]	@ (80077b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8007672:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007674:	8979      	ldrh	r1, [r7, #10]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	6a3a      	ldr	r2, [r7, #32]
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f001 fc7a 	bl	8008f74 <I2C_MasterRequestWrite>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e08d      	b.n	80077a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800768a:	2300      	movs	r3, #0
 800768c:	613b      	str	r3, [r7, #16]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	613b      	str	r3, [r7, #16]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	613b      	str	r3, [r7, #16]
 800769e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80076a0:	e066      	b.n	8007770 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	6a39      	ldr	r1, [r7, #32]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f001 fea8 	bl	80093fc <I2C_WaitOnTXEFlagUntilTimeout>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00d      	beq.n	80076ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	d107      	bne.n	80076ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e06b      	b.n	80077a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d2:	781a      	ldrb	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	2b04      	cmp	r3, #4
 800770a:	d11b      	bne.n	8007744 <HAL_I2C_Master_Transmit+0x188>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007710:	2b00      	cmp	r3, #0
 8007712:	d017      	beq.n	8007744 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007718:	781a      	ldrb	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800773c:	3b01      	subs	r3, #1
 800773e:	b29a      	uxth	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	6a39      	ldr	r1, [r7, #32]
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f001 fe9f 	bl	800948c <I2C_WaitOnBTFFlagUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00d      	beq.n	8007770 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007758:	2b04      	cmp	r3, #4
 800775a:	d107      	bne.n	800776c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800776a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e01a      	b.n	80077a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007774:	2b00      	cmp	r3, #0
 8007776:	d194      	bne.n	80076a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2220      	movs	r2, #32
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	e000      	b.n	80077a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80077a4:	2302      	movs	r3, #2
  }
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	00100002 	.word	0x00100002
 80077b4:	ffff0000 	.word	0xffff0000

080077b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b088      	sub	sp, #32
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077e0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	2b10      	cmp	r3, #16
 80077e6:	d003      	beq.n	80077f0 <HAL_I2C_EV_IRQHandler+0x38>
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	2b40      	cmp	r3, #64	@ 0x40
 80077ec:	f040 80b1 	bne.w	8007952 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10d      	bne.n	8007826 <HAL_I2C_EV_IRQHandler+0x6e>
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007810:	d003      	beq.n	800781a <HAL_I2C_EV_IRQHandler+0x62>
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007818:	d101      	bne.n	800781e <HAL_I2C_EV_IRQHandler+0x66>
 800781a:	2301      	movs	r3, #1
 800781c:	e000      	b.n	8007820 <HAL_I2C_EV_IRQHandler+0x68>
 800781e:	2300      	movs	r3, #0
 8007820:	2b01      	cmp	r3, #1
 8007822:	f000 8114 	beq.w	8007a4e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00b      	beq.n	8007848 <HAL_I2C_EV_IRQHandler+0x90>
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007836:	2b00      	cmp	r3, #0
 8007838:	d006      	beq.n	8007848 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f001 fecf 	bl	80095de <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fd7a 	bl	800833a <I2C_Master_SB>
 8007846:	e083      	b.n	8007950 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	f003 0308 	and.w	r3, r3, #8
 800784e:	2b00      	cmp	r3, #0
 8007850:	d008      	beq.n	8007864 <HAL_I2C_EV_IRQHandler+0xac>
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fdf2 	bl	8008446 <I2C_Master_ADD10>
 8007862:	e075      	b.n	8007950 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d008      	beq.n	8007880 <HAL_I2C_EV_IRQHandler+0xc8>
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fe0e 	bl	800849a <I2C_Master_ADDR>
 800787e:	e067      	b.n	8007950 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	f003 0304 	and.w	r3, r3, #4
 8007886:	2b00      	cmp	r3, #0
 8007888:	d036      	beq.n	80078f8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007898:	f000 80db 	beq.w	8007a52 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00d      	beq.n	80078c2 <HAL_I2C_EV_IRQHandler+0x10a>
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d008      	beq.n	80078c2 <HAL_I2C_EV_IRQHandler+0x10a>
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d103      	bne.n	80078c2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f9d6 	bl	8007c6c <I2C_MasterTransmit_TXE>
 80078c0:	e046      	b.n	8007950 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 80c2 	beq.w	8007a52 <HAL_I2C_EV_IRQHandler+0x29a>
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 80bc 	beq.w	8007a52 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b21      	cmp	r3, #33	@ 0x21
 80078de:	d103      	bne.n	80078e8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fa5f 	bl	8007da4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078e6:	e0b4      	b.n	8007a52 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	2b40      	cmp	r3, #64	@ 0x40
 80078ec:	f040 80b1 	bne.w	8007a52 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 facd 	bl	8007e90 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078f6:	e0ac      	b.n	8007a52 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007902:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007906:	f000 80a4 	beq.w	8007a52 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00d      	beq.n	8007930 <HAL_I2C_EV_IRQHandler+0x178>
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800791a:	2b00      	cmp	r3, #0
 800791c:	d008      	beq.n	8007930 <HAL_I2C_EV_IRQHandler+0x178>
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d103      	bne.n	8007930 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fb49 	bl	8007fc0 <I2C_MasterReceive_RXNE>
 800792e:	e00f      	b.n	8007950 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	f003 0304 	and.w	r3, r3, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 808b 	beq.w	8007a52 <HAL_I2C_EV_IRQHandler+0x29a>
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 8085 	beq.w	8007a52 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fc01 	bl	8008150 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800794e:	e080      	b.n	8007a52 <HAL_I2C_EV_IRQHandler+0x29a>
 8007950:	e07f      	b.n	8007a52 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	d004      	beq.n	8007964 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	61fb      	str	r3, [r7, #28]
 8007962:	e007      	b.n	8007974 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	2b00      	cmp	r3, #0
 800797c:	d011      	beq.n	80079a2 <HAL_I2C_EV_IRQHandler+0x1ea>
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00c      	beq.n	80079a2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007998:	69b9      	ldr	r1, [r7, #24]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 ffcc 	bl	8008938 <I2C_Slave_ADDR>
 80079a0:	e05a      	b.n	8007a58 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	f003 0310 	and.w	r3, r3, #16
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d008      	beq.n	80079be <HAL_I2C_EV_IRQHandler+0x206>
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d003      	beq.n	80079be <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 f806 	bl	80089c8 <I2C_Slave_STOPF>
 80079bc:	e04c      	b.n	8007a58 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079be:	7bbb      	ldrb	r3, [r7, #14]
 80079c0:	2b21      	cmp	r3, #33	@ 0x21
 80079c2:	d002      	beq.n	80079ca <HAL_I2C_EV_IRQHandler+0x212>
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	2b29      	cmp	r3, #41	@ 0x29
 80079c8:	d120      	bne.n	8007a0c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00d      	beq.n	80079f0 <HAL_I2C_EV_IRQHandler+0x238>
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d008      	beq.n	80079f0 <HAL_I2C_EV_IRQHandler+0x238>
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d103      	bne.n	80079f0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fee7 	bl	80087bc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80079ee:	e032      	b.n	8007a56 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d02d      	beq.n	8007a56 <HAL_I2C_EV_IRQHandler+0x29e>
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d028      	beq.n	8007a56 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 ff16 	bl	8008836 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a0a:	e024      	b.n	8007a56 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00d      	beq.n	8007a32 <HAL_I2C_EV_IRQHandler+0x27a>
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d008      	beq.n	8007a32 <HAL_I2C_EV_IRQHandler+0x27a>
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	f003 0304 	and.w	r3, r3, #4
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d103      	bne.n	8007a32 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 ff24 	bl	8008878 <I2C_SlaveReceive_RXNE>
 8007a30:	e012      	b.n	8007a58 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00d      	beq.n	8007a58 <HAL_I2C_EV_IRQHandler+0x2a0>
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d008      	beq.n	8007a58 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 ff54 	bl	80088f4 <I2C_SlaveReceive_BTF>
 8007a4c:	e004      	b.n	8007a58 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8007a4e:	bf00      	nop
 8007a50:	e002      	b.n	8007a58 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a52:	bf00      	nop
 8007a54:	e000      	b.n	8007a58 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a56:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b08a      	sub	sp, #40	@ 0x28
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007a76:	2300      	movs	r3, #0
 8007a78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a80:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00d      	beq.n	8007aa8 <HAL_I2C_ER_IRQHandler+0x4a>
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d008      	beq.n	8007aa8 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a98:	f043 0301 	orr.w	r3, r3, #1
 8007a9c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007aa6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00d      	beq.n	8007ace <HAL_I2C_ER_IRQHandler+0x70>
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d008      	beq.n	8007ace <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abe:	f043 0302 	orr.w	r3, r3, #2
 8007ac2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8007acc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d03e      	beq.n	8007b56 <HAL_I2C_ER_IRQHandler+0xf8>
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d039      	beq.n	8007b56 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8007ae2:	7efb      	ldrb	r3, [r7, #27]
 8007ae4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007af4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007afa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007afc:	7ebb      	ldrb	r3, [r7, #26]
 8007afe:	2b20      	cmp	r3, #32
 8007b00:	d112      	bne.n	8007b28 <HAL_I2C_ER_IRQHandler+0xca>
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10f      	bne.n	8007b28 <HAL_I2C_ER_IRQHandler+0xca>
 8007b08:	7cfb      	ldrb	r3, [r7, #19]
 8007b0a:	2b21      	cmp	r3, #33	@ 0x21
 8007b0c:	d008      	beq.n	8007b20 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007b0e:	7cfb      	ldrb	r3, [r7, #19]
 8007b10:	2b29      	cmp	r3, #41	@ 0x29
 8007b12:	d005      	beq.n	8007b20 <HAL_I2C_ER_IRQHandler+0xc2>
 8007b14:	7cfb      	ldrb	r3, [r7, #19]
 8007b16:	2b28      	cmp	r3, #40	@ 0x28
 8007b18:	d106      	bne.n	8007b28 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b21      	cmp	r3, #33	@ 0x21
 8007b1e:	d103      	bne.n	8007b28 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f001 f881 	bl	8008c28 <I2C_Slave_AF>
 8007b26:	e016      	b.n	8007b56 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007b30:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b34:	f043 0304 	orr.w	r3, r3, #4
 8007b38:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007b3a:	7efb      	ldrb	r3, [r7, #27]
 8007b3c:	2b10      	cmp	r3, #16
 8007b3e:	d002      	beq.n	8007b46 <HAL_I2C_ER_IRQHandler+0xe8>
 8007b40:	7efb      	ldrb	r3, [r7, #27]
 8007b42:	2b40      	cmp	r3, #64	@ 0x40
 8007b44:	d107      	bne.n	8007b56 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b54:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00d      	beq.n	8007b7c <HAL_I2C_ER_IRQHandler+0x11e>
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d008      	beq.n	8007b7c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	f043 0308 	orr.w	r3, r3, #8
 8007b70:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8007b7a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d008      	beq.n	8007b94 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 f8be 	bl	8008d10 <I2C_ITError>
  }
}
 8007b94:	bf00      	nop
 8007b96:	3728      	adds	r7, #40	@ 0x28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	70fb      	strb	r3, [r7, #3]
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c7a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c82:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d150      	bne.n	8007d34 <I2C_MasterTransmit_TXE+0xc8>
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	2b21      	cmp	r3, #33	@ 0x21
 8007c96:	d14d      	bne.n	8007d34 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b08      	cmp	r3, #8
 8007c9c:	d01d      	beq.n	8007cda <I2C_MasterTransmit_TXE+0x6e>
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	d01a      	beq.n	8007cda <I2C_MasterTransmit_TXE+0x6e>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007caa:	d016      	beq.n	8007cda <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007cba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2211      	movs	r2, #17
 8007cc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff ff62 	bl	8007b9c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007cd8:	e060      	b.n	8007d9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007ce8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cf8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2220      	movs	r2, #32
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b40      	cmp	r3, #64	@ 0x40
 8007d12:	d107      	bne.n	8007d24 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff ff7d 	bl	8007c1c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d22:	e03b      	b.n	8007d9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7ff ff35 	bl	8007b9c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d32:	e033      	b.n	8007d9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	2b21      	cmp	r3, #33	@ 0x21
 8007d38:	d005      	beq.n	8007d46 <I2C_MasterTransmit_TXE+0xda>
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	2b40      	cmp	r3, #64	@ 0x40
 8007d3e:	d12d      	bne.n	8007d9c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	2b22      	cmp	r3, #34	@ 0x22
 8007d44:	d12a      	bne.n	8007d9c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d108      	bne.n	8007d62 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d5e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007d60:	e01c      	b.n	8007d9c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b40      	cmp	r3, #64	@ 0x40
 8007d6c:	d103      	bne.n	8007d76 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f88e 	bl	8007e90 <I2C_MemoryTransmit_TXE_BTF>
}
 8007d74:	e012      	b.n	8007d9c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7a:	781a      	ldrb	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	3b01      	subs	r3, #1
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007d9a:	e7ff      	b.n	8007d9c <I2C_MasterTransmit_TXE+0x130>
 8007d9c:	bf00      	nop
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b21      	cmp	r3, #33	@ 0x21
 8007dbc:	d164      	bne.n	8007e88 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d012      	beq.n	8007dee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	3b01      	subs	r3, #1
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007dec:	e04c      	b.n	8007e88 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	d01d      	beq.n	8007e30 <I2C_MasterTransmit_BTF+0x8c>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b20      	cmp	r3, #32
 8007df8:	d01a      	beq.n	8007e30 <I2C_MasterTransmit_BTF+0x8c>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e00:	d016      	beq.n	8007e30 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007e10:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2211      	movs	r2, #17
 8007e16:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff feb7 	bl	8007b9c <HAL_I2C_MasterTxCpltCallback>
}
 8007e2e:	e02b      	b.n	8007e88 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007e3e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e4e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b40      	cmp	r3, #64	@ 0x40
 8007e68:	d107      	bne.n	8007e7a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7ff fed2 	bl	8007c1c <HAL_I2C_MemTxCpltCallback>
}
 8007e78:	e006      	b.n	8007e88 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff fe8a 	bl	8007b9c <HAL_I2C_MasterTxCpltCallback>
}
 8007e88:	bf00      	nop
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d11d      	bne.n	8007ee4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d10b      	bne.n	8007ec8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ec0:	1c9a      	adds	r2, r3, #2
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8007ec6:	e077      	b.n	8007fb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	121b      	asrs	r3, r3, #8
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007ee2:	e069      	b.n	8007fb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d10b      	bne.n	8007f04 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007f02:	e059      	b.n	8007fb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d152      	bne.n	8007fb2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	2b22      	cmp	r3, #34	@ 0x22
 8007f10:	d10d      	bne.n	8007f2e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f20:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007f2c:	e044      	b.n	8007fb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d015      	beq.n	8007f64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	2b21      	cmp	r3, #33	@ 0x21
 8007f3c:	d112      	bne.n	8007f64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f42:	781a      	ldrb	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007f62:	e029      	b.n	8007fb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d124      	bne.n	8007fb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	2b21      	cmp	r3, #33	@ 0x21
 8007f72:	d121      	bne.n	8007fb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007f82:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f92:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7ff fe36 	bl	8007c1c <HAL_I2C_MemTxCpltCallback>
}
 8007fb0:	e002      	b.n	8007fb8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7ff faec 	bl	8007590 <I2C_Flush_DR>
}
 8007fb8:	bf00      	nop
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b22      	cmp	r3, #34	@ 0x22
 8007fd2:	f040 80b9 	bne.w	8008148 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fda:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d921      	bls.n	800802e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	691a      	ldr	r2, [r3, #16]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff4:	b2d2      	uxtb	r2, r2
 8007ff6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008006:	b29b      	uxth	r3, r3
 8008008:	3b01      	subs	r3, #1
 800800a:	b29a      	uxth	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008014:	b29b      	uxth	r3, r3
 8008016:	2b03      	cmp	r3, #3
 8008018:	f040 8096 	bne.w	8008148 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800802a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800802c:	e08c      	b.n	8008148 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008032:	2b02      	cmp	r3, #2
 8008034:	d07f      	beq.n	8008136 <I2C_MasterReceive_RXNE+0x176>
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d002      	beq.n	8008042 <I2C_MasterReceive_RXNE+0x82>
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d179      	bne.n	8008136 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f001 fa6a 	bl	800951c <I2C_WaitOnSTOPRequestThroughIT>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d14c      	bne.n	80080e8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800805c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800806c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	691a      	ldr	r2, [r3, #16]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800808a:	b29b      	uxth	r3, r3
 800808c:	3b01      	subs	r3, #1
 800808e:	b29a      	uxth	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2220      	movs	r2, #32
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b40      	cmp	r3, #64	@ 0x40
 80080a6:	d10a      	bne.n	80080be <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7ff fdba 	bl	8007c30 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80080bc:	e044      	b.n	8008148 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2b08      	cmp	r3, #8
 80080ca:	d002      	beq.n	80080d2 <I2C_MasterReceive_RXNE+0x112>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b20      	cmp	r3, #32
 80080d0:	d103      	bne.n	80080da <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80080d8:	e002      	b.n	80080e0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2212      	movs	r2, #18
 80080de:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff fd65 	bl	8007bb0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80080e6:	e02f      	b.n	8008148 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80080f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691a      	ldr	r2, [r3, #16]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008114:	b29b      	uxth	r3, r3
 8008116:	3b01      	subs	r3, #1
 8008118:	b29a      	uxth	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2220      	movs	r2, #32
 8008122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff fd88 	bl	8007c44 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008134:	e008      	b.n	8008148 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008144:	605a      	str	r2, [r3, #4]
}
 8008146:	e7ff      	b.n	8008148 <I2C_MasterReceive_RXNE+0x188>
 8008148:	bf00      	nop
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008162:	b29b      	uxth	r3, r3
 8008164:	2b04      	cmp	r3, #4
 8008166:	d11b      	bne.n	80081a0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008176:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691a      	ldr	r2, [r3, #16]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008182:	b2d2      	uxtb	r2, r2
 8008184:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800818a:	1c5a      	adds	r2, r3, #1
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008194:	b29b      	uxth	r3, r3
 8008196:	3b01      	subs	r3, #1
 8008198:	b29a      	uxth	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800819e:	e0c8      	b.n	8008332 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2b03      	cmp	r3, #3
 80081a8:	d129      	bne.n	80081fe <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081b8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d00a      	beq.n	80081d6 <I2C_MasterReceive_BTF+0x86>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d007      	beq.n	80081d6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081d4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	691a      	ldr	r2, [r3, #16]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e0:	b2d2      	uxtb	r2, r2
 80081e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e8:	1c5a      	adds	r2, r3, #1
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	3b01      	subs	r3, #1
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80081fc:	e099      	b.n	8008332 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008202:	b29b      	uxth	r3, r3
 8008204:	2b02      	cmp	r3, #2
 8008206:	f040 8081 	bne.w	800830c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d002      	beq.n	8008216 <I2C_MasterReceive_BTF+0xc6>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2b10      	cmp	r3, #16
 8008214:	d108      	bne.n	8008228 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008224:	601a      	str	r2, [r3, #0]
 8008226:	e019      	b.n	800825c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2b04      	cmp	r3, #4
 800822c:	d002      	beq.n	8008234 <I2C_MasterReceive_BTF+0xe4>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d108      	bne.n	8008246 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	e00a      	b.n	800825c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b10      	cmp	r3, #16
 800824a:	d007      	beq.n	800825c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800825a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	691a      	ldr	r2, [r3, #16]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008266:	b2d2      	uxtb	r2, r2
 8008268:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008278:	b29b      	uxth	r3, r3
 800827a:	3b01      	subs	r3, #1
 800827c:	b29a      	uxth	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691a      	ldr	r2, [r3, #16]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828c:	b2d2      	uxtb	r2, r2
 800828e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800829e:	b29b      	uxth	r3, r3
 80082a0:	3b01      	subs	r3, #1
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80082b6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b40      	cmp	r3, #64	@ 0x40
 80082ca:	d10a      	bne.n	80082e2 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7ff fca8 	bl	8007c30 <HAL_I2C_MemRxCpltCallback>
}
 80082e0:	e027      	b.n	8008332 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	d002      	beq.n	80082f6 <I2C_MasterReceive_BTF+0x1a6>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b20      	cmp	r3, #32
 80082f4:	d103      	bne.n	80082fe <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80082fc:	e002      	b.n	8008304 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2212      	movs	r2, #18
 8008302:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7ff fc53 	bl	8007bb0 <HAL_I2C_MasterRxCpltCallback>
}
 800830a:	e012      	b.n	8008332 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	691a      	ldr	r2, [r3, #16]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008316:	b2d2      	uxtb	r2, r2
 8008318:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008328:	b29b      	uxth	r3, r3
 800832a:	3b01      	subs	r3, #1
 800832c:	b29a      	uxth	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008332:	bf00      	nop
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b40      	cmp	r3, #64	@ 0x40
 800834c:	d117      	bne.n	800837e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008352:	2b00      	cmp	r3, #0
 8008354:	d109      	bne.n	800836a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800835a:	b2db      	uxtb	r3, r3
 800835c:	461a      	mov	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008366:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008368:	e067      	b.n	800843a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800836e:	b2db      	uxtb	r3, r3
 8008370:	f043 0301 	orr.w	r3, r3, #1
 8008374:	b2da      	uxtb	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	611a      	str	r2, [r3, #16]
}
 800837c:	e05d      	b.n	800843a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008386:	d133      	bne.n	80083f0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b21      	cmp	r3, #33	@ 0x21
 8008392:	d109      	bne.n	80083a8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008398:	b2db      	uxtb	r3, r3
 800839a:	461a      	mov	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80083a4:	611a      	str	r2, [r3, #16]
 80083a6:	e008      	b.n	80083ba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	f043 0301 	orr.w	r3, r3, #1
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d004      	beq.n	80083cc <I2C_Master_SB+0x92>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d108      	bne.n	80083de <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d032      	beq.n	800843a <I2C_Master_SB+0x100>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d02d      	beq.n	800843a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083ec:	605a      	str	r2, [r3, #4]
}
 80083ee:	e024      	b.n	800843a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10e      	bne.n	8008416 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	11db      	asrs	r3, r3, #7
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f003 0306 	and.w	r3, r3, #6
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f063 030f 	orn	r3, r3, #15
 800840c:	b2da      	uxtb	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	611a      	str	r2, [r3, #16]
}
 8008414:	e011      	b.n	800843a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800841a:	2b01      	cmp	r3, #1
 800841c:	d10d      	bne.n	800843a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008422:	b29b      	uxth	r3, r3
 8008424:	11db      	asrs	r3, r3, #7
 8008426:	b2db      	uxtb	r3, r3
 8008428:	f003 0306 	and.w	r3, r3, #6
 800842c:	b2db      	uxtb	r3, r3
 800842e:	f063 030e 	orn	r3, r3, #14
 8008432:	b2da      	uxtb	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	611a      	str	r2, [r3, #16]
}
 800843a:	bf00      	nop
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008452:	b2da      	uxtb	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800845e:	2b00      	cmp	r3, #0
 8008460:	d004      	beq.n	800846c <I2C_Master_ADD10+0x26>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008468:	2b00      	cmp	r3, #0
 800846a:	d108      	bne.n	800847e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00c      	beq.n	800848e <I2C_Master_ADD10+0x48>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847a:	2b00      	cmp	r3, #0
 800847c:	d007      	beq.n	800848e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800848c:	605a      	str	r2, [r3, #4]
  }
}
 800848e:	bf00      	nop
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800849a:	b480      	push	{r7}
 800849c:	b091      	sub	sp, #68	@ 0x44
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b22      	cmp	r3, #34	@ 0x22
 80084c2:	f040 8169 	bne.w	8008798 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10f      	bne.n	80084ee <I2C_Master_ADDR+0x54>
 80084ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80084d2:	2b40      	cmp	r3, #64	@ 0x40
 80084d4:	d10b      	bne.n	80084ee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084d6:	2300      	movs	r3, #0
 80084d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	e160      	b.n	80087b0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d11d      	bne.n	8008532 <I2C_Master_ADDR+0x98>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80084fe:	d118      	bne.n	8008532 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008500:	2300      	movs	r3, #0
 8008502:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008524:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	651a      	str	r2, [r3, #80]	@ 0x50
 8008530:	e13e      	b.n	80087b0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008536:	b29b      	uxth	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	d113      	bne.n	8008564 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800853c:	2300      	movs	r3, #0
 800853e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008550:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	e115      	b.n	8008790 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008568:	b29b      	uxth	r3, r3
 800856a:	2b01      	cmp	r3, #1
 800856c:	f040 808a 	bne.w	8008684 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008572:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008576:	d137      	bne.n	80085e8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008586:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008592:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008596:	d113      	bne.n	80085c0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085a6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085a8:	2300      	movs	r3, #0
 80085aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80085bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085be:	e0e7      	b.n	8008790 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085c0:	2300      	movs	r3, #0
 80085c2:	623b      	str	r3, [r7, #32]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	623b      	str	r3, [r7, #32]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	623b      	str	r3, [r7, #32]
 80085d4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	e0d3      	b.n	8008790 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80085e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ea:	2b08      	cmp	r3, #8
 80085ec:	d02e      	beq.n	800864c <I2C_Master_ADDR+0x1b2>
 80085ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	d02b      	beq.n	800864c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80085f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f6:	2b12      	cmp	r3, #18
 80085f8:	d102      	bne.n	8008600 <I2C_Master_ADDR+0x166>
 80085fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d125      	bne.n	800864c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008602:	2b04      	cmp	r3, #4
 8008604:	d00e      	beq.n	8008624 <I2C_Master_ADDR+0x18a>
 8008606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008608:	2b02      	cmp	r3, #2
 800860a:	d00b      	beq.n	8008624 <I2C_Master_ADDR+0x18a>
 800860c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860e:	2b10      	cmp	r3, #16
 8008610:	d008      	beq.n	8008624 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	e007      	b.n	8008634 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008632:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008634:	2300      	movs	r3, #0
 8008636:	61fb      	str	r3, [r7, #28]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	61fb      	str	r3, [r7, #28]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	e0a1      	b.n	8008790 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800865a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800865c:	2300      	movs	r3, #0
 800865e:	61bb      	str	r3, [r7, #24]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	61bb      	str	r3, [r7, #24]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	61bb      	str	r3, [r7, #24]
 8008670:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	e085      	b.n	8008790 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008688:	b29b      	uxth	r3, r3
 800868a:	2b02      	cmp	r3, #2
 800868c:	d14d      	bne.n	800872a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800868e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008690:	2b04      	cmp	r3, #4
 8008692:	d016      	beq.n	80086c2 <I2C_Master_ADDR+0x228>
 8008694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008696:	2b02      	cmp	r3, #2
 8008698:	d013      	beq.n	80086c2 <I2C_Master_ADDR+0x228>
 800869a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869c:	2b10      	cmp	r3, #16
 800869e:	d010      	beq.n	80086c2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086ae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	e007      	b.n	80086d2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80086d0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086e0:	d117      	bne.n	8008712 <I2C_Master_ADDR+0x278>
 80086e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80086e8:	d00b      	beq.n	8008702 <I2C_Master_ADDR+0x268>
 80086ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d008      	beq.n	8008702 <I2C_Master_ADDR+0x268>
 80086f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f2:	2b08      	cmp	r3, #8
 80086f4:	d005      	beq.n	8008702 <I2C_Master_ADDR+0x268>
 80086f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d002      	beq.n	8008702 <I2C_Master_ADDR+0x268>
 80086fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fe:	2b20      	cmp	r3, #32
 8008700:	d107      	bne.n	8008712 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008710:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008712:	2300      	movs	r3, #0
 8008714:	617b      	str	r3, [r7, #20]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	617b      	str	r3, [r7, #20]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	e032      	b.n	8008790 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008738:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008748:	d117      	bne.n	800877a <I2C_Master_ADDR+0x2e0>
 800874a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800874c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008750:	d00b      	beq.n	800876a <I2C_Master_ADDR+0x2d0>
 8008752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008754:	2b01      	cmp	r3, #1
 8008756:	d008      	beq.n	800876a <I2C_Master_ADDR+0x2d0>
 8008758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875a:	2b08      	cmp	r3, #8
 800875c:	d005      	beq.n	800876a <I2C_Master_ADDR+0x2d0>
 800875e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008760:	2b10      	cmp	r3, #16
 8008762:	d002      	beq.n	800876a <I2C_Master_ADDR+0x2d0>
 8008764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008766:	2b20      	cmp	r3, #32
 8008768:	d107      	bne.n	800877a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008778:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800877a:	2300      	movs	r3, #0
 800877c:	613b      	str	r3, [r7, #16]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	613b      	str	r3, [r7, #16]
 800878e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008796:	e00b      	b.n	80087b0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008798:	2300      	movs	r3, #0
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]
}
 80087ae:	e7ff      	b.n	80087b0 <I2C_Master_ADDR+0x316>
 80087b0:	bf00      	nop
 80087b2:	3744      	adds	r7, #68	@ 0x44
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d02b      	beq.n	800882e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087da:	781a      	ldrb	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3b01      	subs	r3, #1
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087fe:	b29b      	uxth	r3, r3
 8008800:	2b00      	cmp	r3, #0
 8008802:	d114      	bne.n	800882e <I2C_SlaveTransmit_TXE+0x72>
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	2b29      	cmp	r3, #41	@ 0x29
 8008808:	d111      	bne.n	800882e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008818:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2221      	movs	r2, #33	@ 0x21
 800881e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2228      	movs	r2, #40	@ 0x28
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff f9cb 	bl	8007bc4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008842:	b29b      	uxth	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d011      	beq.n	800886c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884c:	781a      	ldrb	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008862:	b29b      	uxth	r3, r3
 8008864:	3b01      	subs	r3, #1
 8008866:	b29a      	uxth	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008886:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800888c:	b29b      	uxth	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d02c      	beq.n	80088ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	691a      	ldr	r2, [r3, #16]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800889c:	b2d2      	uxtb	r2, r2
 800889e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	3b01      	subs	r3, #1
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d114      	bne.n	80088ec <I2C_SlaveReceive_RXNE+0x74>
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
 80088c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c6:	d111      	bne.n	80088ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2222      	movs	r2, #34	@ 0x22
 80088dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2228      	movs	r2, #40	@ 0x28
 80088e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff f976 	bl	8007bd8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80088ec:	bf00      	nop
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008900:	b29b      	uxth	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d012      	beq.n	800892c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	691a      	ldr	r2, [r3, #16]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008910:	b2d2      	uxtb	r2, r2
 8008912:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008922:	b29b      	uxth	r3, r3
 8008924:	3b01      	subs	r3, #1
 8008926:	b29a      	uxth	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800894c:	b2db      	uxtb	r3, r3
 800894e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008952:	2b28      	cmp	r3, #40	@ 0x28
 8008954:	d125      	bne.n	80089a2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008964:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	f003 0304 	and.w	r3, r3, #4
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008970:	2301      	movs	r3, #1
 8008972:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800897a:	2b00      	cmp	r3, #0
 800897c:	d103      	bne.n	8008986 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	81bb      	strh	r3, [r7, #12]
 8008984:	e002      	b.n	800898c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008994:	89ba      	ldrh	r2, [r7, #12]
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f7ff f926 	bl	8007bec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80089a0:	e00e      	b.n	80089c0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089a2:	2300      	movs	r3, #0
 80089a4:	60bb      	str	r3, [r7, #8]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	60bb      	str	r3, [r7, #8]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	60bb      	str	r3, [r7, #8]
 80089b6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80089c0:	bf00      	nop
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80089e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80089e8:	2300      	movs	r3, #0
 80089ea:	60bb      	str	r3, [r7, #8]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	60bb      	str	r3, [r7, #8]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0201 	orr.w	r2, r2, #1
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a14:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a24:	d172      	bne.n	8008b0c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	2b22      	cmp	r3, #34	@ 0x22
 8008a2a:	d002      	beq.n	8008a32 <I2C_Slave_STOPF+0x6a>
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a30:	d135      	bne.n	8008a9e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d005      	beq.n	8008a56 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4e:	f043 0204 	orr.w	r2, r3, #4
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fe f95e 	bl	8006d2c <HAL_DMA_GetState>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d049      	beq.n	8008b0a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a7a:	4a69      	ldr	r2, [pc, #420]	@ (8008c20 <I2C_Slave_STOPF+0x258>)
 8008a7c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fd ffa6 	bl	80069d4 <HAL_DMA_Abort_IT>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d03d      	beq.n	8008b0a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a9c:	e035      	b.n	8008b0a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aba:	f043 0204 	orr.w	r2, r3, #4
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ad0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe f928 	bl	8006d2c <HAL_DMA_GetState>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d014      	beq.n	8008b0c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ae6:	4a4e      	ldr	r2, [pc, #312]	@ (8008c20 <I2C_Slave_STOPF+0x258>)
 8008ae8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fd ff70 	bl	80069d4 <HAL_DMA_Abort_IT>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d008      	beq.n	8008b0c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
 8008b08:	e000      	b.n	8008b0c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b0a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d03e      	beq.n	8008b94 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	f003 0304 	and.w	r3, r3, #4
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	d112      	bne.n	8008b4a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	691a      	ldr	r2, [r3, #16]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2e:	b2d2      	uxtb	r2, r2
 8008b30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	3b01      	subs	r3, #1
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b54:	2b40      	cmp	r3, #64	@ 0x40
 8008b56:	d112      	bne.n	8008b7e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	691a      	ldr	r2, [r3, #16]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	3b01      	subs	r3, #1
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d005      	beq.n	8008b94 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8c:	f043 0204 	orr.w	r2, r3, #4
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f8b7 	bl	8008d10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008ba2:	e039      	b.n	8008c18 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ba8:	d109      	bne.n	8008bbe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2228      	movs	r2, #40	@ 0x28
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff f80d 	bl	8007bd8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b28      	cmp	r3, #40	@ 0x28
 8008bc8:	d111      	bne.n	8008bee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a15      	ldr	r2, [pc, #84]	@ (8008c24 <I2C_Slave_STOPF+0x25c>)
 8008bce:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff f80e 	bl	8007c08 <HAL_I2C_ListenCpltCallback>
}
 8008bec:	e014      	b.n	8008c18 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf2:	2b22      	cmp	r3, #34	@ 0x22
 8008bf4:	d002      	beq.n	8008bfc <I2C_Slave_STOPF+0x234>
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	2b22      	cmp	r3, #34	@ 0x22
 8008bfa:	d10d      	bne.n	8008c18 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2220      	movs	r2, #32
 8008c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7fe ffe0 	bl	8007bd8 <HAL_I2C_SlaveRxCpltCallback>
}
 8008c18:	bf00      	nop
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	08009079 	.word	0x08009079
 8008c24:	ffff0000 	.word	0xffff0000

08008c28 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c36:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c3c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d002      	beq.n	8008c4a <I2C_Slave_AF+0x22>
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	d129      	bne.n	8008c9e <I2C_Slave_AF+0x76>
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
 8008c4c:	2b28      	cmp	r3, #40	@ 0x28
 8008c4e:	d126      	bne.n	8008c9e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a2e      	ldr	r2, [pc, #184]	@ (8008d0c <I2C_Slave_AF+0xe4>)
 8008c54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008c64:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008c6e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c7e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7fe ffb6 	bl	8007c08 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008c9c:	e031      	b.n	8008d02 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	2b21      	cmp	r3, #33	@ 0x21
 8008ca2:	d129      	bne.n	8008cf8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a19      	ldr	r2, [pc, #100]	@ (8008d0c <I2C_Slave_AF+0xe4>)
 8008ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2221      	movs	r2, #33	@ 0x21
 8008cae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008cce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008cd8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ce8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7fe fc50 	bl	8007590 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7fe ff67 	bl	8007bc4 <HAL_I2C_SlaveTxCpltCallback>
}
 8008cf6:	e004      	b.n	8008d02 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008d00:	615a      	str	r2, [r3, #20]
}
 8008d02:	bf00      	nop
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	ffff0000 	.word	0xffff0000

08008d10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
 8008d2a:	2b10      	cmp	r3, #16
 8008d2c:	d002      	beq.n	8008d34 <I2C_ITError+0x24>
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
 8008d30:	2b40      	cmp	r3, #64	@ 0x40
 8008d32:	d10a      	bne.n	8008d4a <I2C_ITError+0x3a>
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	2b22      	cmp	r3, #34	@ 0x22
 8008d38:	d107      	bne.n	8008d4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008d50:	2b28      	cmp	r3, #40	@ 0x28
 8008d52:	d107      	bne.n	8008d64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2228      	movs	r2, #40	@ 0x28
 8008d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008d62:	e015      	b.n	8008d90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d72:	d00a      	beq.n	8008d8a <I2C_ITError+0x7a>
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	2b60      	cmp	r3, #96	@ 0x60
 8008d78:	d007      	beq.n	8008d8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d9e:	d162      	bne.n	8008e66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008dae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008db4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d020      	beq.n	8008e00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dc2:	4a6a      	ldr	r2, [pc, #424]	@ (8008f6c <I2C_ITError+0x25c>)
 8008dc4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fd fe02 	bl	80069d4 <HAL_DMA_Abort_IT>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 8089 	beq.w	8008eea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0201 	bic.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	4798      	blx	r3
 8008dfe:	e074      	b.n	8008eea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e04:	4a59      	ldr	r2, [pc, #356]	@ (8008f6c <I2C_ITError+0x25c>)
 8008e06:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fd fde1 	bl	80069d4 <HAL_DMA_Abort_IT>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d068      	beq.n	8008eea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e22:	2b40      	cmp	r3, #64	@ 0x40
 8008e24:	d10b      	bne.n	8008e3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	691a      	ldr	r2, [r3, #16]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e30:	b2d2      	uxtb	r2, r2
 8008e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e38:	1c5a      	adds	r2, r3, #1
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f022 0201 	bic.w	r2, r2, #1
 8008e4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2220      	movs	r2, #32
 8008e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008e60:	4610      	mov	r0, r2
 8008e62:	4798      	blx	r3
 8008e64:	e041      	b.n	8008eea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b60      	cmp	r3, #96	@ 0x60
 8008e70:	d125      	bne.n	8008ebe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2220      	movs	r2, #32
 8008e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e8a:	2b40      	cmp	r3, #64	@ 0x40
 8008e8c:	d10b      	bne.n	8008ea6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	691a      	ldr	r2, [r3, #16]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e98:	b2d2      	uxtb	r2, r2
 8008e9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f022 0201 	bic.w	r2, r2, #1
 8008eb4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7fe fece 	bl	8007c58 <HAL_I2C_AbortCpltCallback>
 8008ebc:	e015      	b.n	8008eea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec8:	2b40      	cmp	r3, #64	@ 0x40
 8008eca:	d10b      	bne.n	8008ee4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	691a      	ldr	r2, [r3, #16]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7fe fead 	bl	8007c44 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10e      	bne.n	8008f18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d109      	bne.n	8008f18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d104      	bne.n	8008f18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d007      	beq.n	8008f28 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008f26:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f2e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f34:	f003 0304 	and.w	r3, r3, #4
 8008f38:	2b04      	cmp	r3, #4
 8008f3a:	d113      	bne.n	8008f64 <I2C_ITError+0x254>
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	2b28      	cmp	r3, #40	@ 0x28
 8008f40:	d110      	bne.n	8008f64 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a0a      	ldr	r2, [pc, #40]	@ (8008f70 <I2C_ITError+0x260>)
 8008f46:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2220      	movs	r2, #32
 8008f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7fe fe52 	bl	8007c08 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008f64:	bf00      	nop
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	08009079 	.word	0x08009079
 8008f70:	ffff0000 	.word	0xffff0000

08008f74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af02      	add	r7, sp, #8
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	607a      	str	r2, [r7, #4]
 8008f7e:	603b      	str	r3, [r7, #0]
 8008f80:	460b      	mov	r3, r1
 8008f82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d006      	beq.n	8008f9e <I2C_MasterRequestWrite+0x2a>
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d003      	beq.n	8008f9e <I2C_MasterRequestWrite+0x2a>
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008f9c:	d108      	bne.n	8008fb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	e00b      	b.n	8008fc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb4:	2b12      	cmp	r3, #18
 8008fb6:	d107      	bne.n	8008fc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008fc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 f8f7 	bl	80091c8 <I2C_WaitOnFlagUntilTimeout>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00d      	beq.n	8008ffc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fee:	d103      	bne.n	8008ff8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ff6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e035      	b.n	8009068 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009004:	d108      	bne.n	8009018 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009006:	897b      	ldrh	r3, [r7, #10]
 8009008:	b2db      	uxtb	r3, r3
 800900a:	461a      	mov	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009014:	611a      	str	r2, [r3, #16]
 8009016:	e01b      	b.n	8009050 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009018:	897b      	ldrh	r3, [r7, #10]
 800901a:	11db      	asrs	r3, r3, #7
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f003 0306 	and.w	r3, r3, #6
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f063 030f 	orn	r3, r3, #15
 8009028:	b2da      	uxtb	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	490e      	ldr	r1, [pc, #56]	@ (8009070 <I2C_MasterRequestWrite+0xfc>)
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 f940 	bl	80092bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e010      	b.n	8009068 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009046:	897b      	ldrh	r3, [r7, #10]
 8009048:	b2da      	uxtb	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	4907      	ldr	r1, [pc, #28]	@ (8009074 <I2C_MasterRequestWrite+0x100>)
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 f930 	bl	80092bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e000      	b.n	8009068 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3718      	adds	r7, #24
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	00010008 	.word	0x00010008
 8009074:	00010002 	.word	0x00010002

08009078 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009088:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009090:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009092:	4b4b      	ldr	r3, [pc, #300]	@ (80091c0 <I2C_DMAAbort+0x148>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	08db      	lsrs	r3, r3, #3
 8009098:	4a4a      	ldr	r2, [pc, #296]	@ (80091c4 <I2C_DMAAbort+0x14c>)
 800909a:	fba2 2303 	umull	r2, r3, r2, r3
 800909e:	0a1a      	lsrs	r2, r3, #8
 80090a0:	4613      	mov	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4413      	add	r3, r2
 80090a6:	00da      	lsls	r2, r3, #3
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d106      	bne.n	80090c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b6:	f043 0220 	orr.w	r2, r3, #32
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80090be:	e00a      	b.n	80090d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090d4:	d0ea      	beq.n	80090ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090e2:	2200      	movs	r2, #0
 80090e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090f2:	2200      	movs	r2, #0
 80090f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009104:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	2200      	movs	r2, #0
 800910a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009110:	2b00      	cmp	r3, #0
 8009112:	d003      	beq.n	800911c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009118:	2200      	movs	r2, #0
 800911a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009120:	2b00      	cmp	r3, #0
 8009122:	d003      	beq.n	800912c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009128:	2200      	movs	r2, #0
 800912a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 0201 	bic.w	r2, r2, #1
 800913a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b60      	cmp	r3, #96	@ 0x60
 8009146:	d10e      	bne.n	8009166 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	2220      	movs	r2, #32
 800914c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2200      	movs	r2, #0
 8009154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2200      	movs	r2, #0
 800915c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800915e:	6978      	ldr	r0, [r7, #20]
 8009160:	f7fe fd7a 	bl	8007c58 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009164:	e027      	b.n	80091b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009166:	7cfb      	ldrb	r3, [r7, #19]
 8009168:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800916c:	2b28      	cmp	r3, #40	@ 0x28
 800916e:	d117      	bne.n	80091a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f042 0201 	orr.w	r2, r2, #1
 800917e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800918e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	2200      	movs	r2, #0
 8009194:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	2228      	movs	r2, #40	@ 0x28
 800919a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800919e:	e007      	b.n	80091b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	2220      	movs	r2, #32
 80091a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80091b0:	6978      	ldr	r0, [r7, #20]
 80091b2:	f7fe fd47 	bl	8007c44 <HAL_I2C_ErrorCallback>
}
 80091b6:	bf00      	nop
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	200000a8 	.word	0x200000a8
 80091c4:	14f8b589 	.word	0x14f8b589

080091c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	4613      	mov	r3, r2
 80091d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091d8:	e048      	b.n	800926c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e0:	d044      	beq.n	800926c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091e2:	f7fc fc07 	bl	80059f4 <HAL_GetTick>
 80091e6:	4602      	mov	r2, r0
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d302      	bcc.n	80091f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d139      	bne.n	800926c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	0c1b      	lsrs	r3, r3, #16
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d10d      	bne.n	800921e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	43da      	mvns	r2, r3
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	4013      	ands	r3, r2
 800920e:	b29b      	uxth	r3, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	bf0c      	ite	eq
 8009214:	2301      	moveq	r3, #1
 8009216:	2300      	movne	r3, #0
 8009218:	b2db      	uxtb	r3, r3
 800921a:	461a      	mov	r2, r3
 800921c:	e00c      	b.n	8009238 <I2C_WaitOnFlagUntilTimeout+0x70>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	43da      	mvns	r2, r3
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	4013      	ands	r3, r2
 800922a:	b29b      	uxth	r3, r3
 800922c:	2b00      	cmp	r3, #0
 800922e:	bf0c      	ite	eq
 8009230:	2301      	moveq	r3, #1
 8009232:	2300      	movne	r3, #0
 8009234:	b2db      	uxtb	r3, r3
 8009236:	461a      	mov	r2, r3
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	429a      	cmp	r2, r3
 800923c:	d116      	bne.n	800926c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2220      	movs	r2, #32
 8009248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009258:	f043 0220 	orr.w	r2, r3, #32
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e023      	b.n	80092b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	0c1b      	lsrs	r3, r3, #16
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b01      	cmp	r3, #1
 8009274:	d10d      	bne.n	8009292 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	43da      	mvns	r2, r3
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	4013      	ands	r3, r2
 8009282:	b29b      	uxth	r3, r3
 8009284:	2b00      	cmp	r3, #0
 8009286:	bf0c      	ite	eq
 8009288:	2301      	moveq	r3, #1
 800928a:	2300      	movne	r3, #0
 800928c:	b2db      	uxtb	r3, r3
 800928e:	461a      	mov	r2, r3
 8009290:	e00c      	b.n	80092ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	43da      	mvns	r2, r3
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	4013      	ands	r3, r2
 800929e:	b29b      	uxth	r3, r3
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	bf0c      	ite	eq
 80092a4:	2301      	moveq	r3, #1
 80092a6:	2300      	movne	r3, #0
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	461a      	mov	r2, r3
 80092ac:	79fb      	ldrb	r3, [r7, #7]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d093      	beq.n	80091da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
 80092c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80092ca:	e071      	b.n	80093b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092da:	d123      	bne.n	8009324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80092f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2220      	movs	r2, #32
 8009300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009310:	f043 0204 	orr.w	r2, r3, #4
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e067      	b.n	80093f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932a:	d041      	beq.n	80093b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800932c:	f7fc fb62 	bl	80059f4 <HAL_GetTick>
 8009330:	4602      	mov	r2, r0
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	429a      	cmp	r2, r3
 800933a:	d302      	bcc.n	8009342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d136      	bne.n	80093b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	0c1b      	lsrs	r3, r3, #16
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b01      	cmp	r3, #1
 800934a:	d10c      	bne.n	8009366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	43da      	mvns	r2, r3
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	4013      	ands	r3, r2
 8009358:	b29b      	uxth	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	bf14      	ite	ne
 800935e:	2301      	movne	r3, #1
 8009360:	2300      	moveq	r3, #0
 8009362:	b2db      	uxtb	r3, r3
 8009364:	e00b      	b.n	800937e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	43da      	mvns	r2, r3
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	4013      	ands	r3, r2
 8009372:	b29b      	uxth	r3, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	bf14      	ite	ne
 8009378:	2301      	movne	r3, #1
 800937a:	2300      	moveq	r3, #0
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d016      	beq.n	80093b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2220      	movs	r2, #32
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800939c:	f043 0220 	orr.w	r2, r3, #32
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e021      	b.n	80093f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	0c1b      	lsrs	r3, r3, #16
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d10c      	bne.n	80093d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	695b      	ldr	r3, [r3, #20]
 80093c0:	43da      	mvns	r2, r3
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	4013      	ands	r3, r2
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	bf14      	ite	ne
 80093cc:	2301      	movne	r3, #1
 80093ce:	2300      	moveq	r3, #0
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	e00b      	b.n	80093ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	43da      	mvns	r2, r3
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4013      	ands	r3, r2
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	bf14      	ite	ne
 80093e6:	2301      	movne	r3, #1
 80093e8:	2300      	moveq	r3, #0
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f47f af6d 	bne.w	80092cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009408:	e034      	b.n	8009474 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f000 f8b8 	bl	8009580 <I2C_IsAcknowledgeFailed>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e034      	b.n	8009484 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009420:	d028      	beq.n	8009474 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009422:	f7fc fae7 	bl	80059f4 <HAL_GetTick>
 8009426:	4602      	mov	r2, r0
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	429a      	cmp	r2, r3
 8009430:	d302      	bcc.n	8009438 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d11d      	bne.n	8009474 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009442:	2b80      	cmp	r3, #128	@ 0x80
 8009444:	d016      	beq.n	8009474 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2220      	movs	r2, #32
 8009450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009460:	f043 0220 	orr.w	r2, r3, #32
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	e007      	b.n	8009484 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800947e:	2b80      	cmp	r3, #128	@ 0x80
 8009480:	d1c3      	bne.n	800940a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009498:	e034      	b.n	8009504 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 f870 	bl	8009580 <I2C_IsAcknowledgeFailed>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e034      	b.n	8009514 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b0:	d028      	beq.n	8009504 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094b2:	f7fc fa9f 	bl	80059f4 <HAL_GetTick>
 80094b6:	4602      	mov	r2, r0
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d302      	bcc.n	80094c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d11d      	bne.n	8009504 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	f003 0304 	and.w	r3, r3, #4
 80094d2:	2b04      	cmp	r3, #4
 80094d4:	d016      	beq.n	8009504 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2220      	movs	r2, #32
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f0:	f043 0220 	orr.w	r2, r3, #32
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e007      	b.n	8009514 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	f003 0304 	and.w	r3, r3, #4
 800950e:	2b04      	cmp	r3, #4
 8009510:	d1c3      	bne.n	800949a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009528:	4b13      	ldr	r3, [pc, #76]	@ (8009578 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	08db      	lsrs	r3, r3, #3
 800952e:	4a13      	ldr	r2, [pc, #76]	@ (800957c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009530:	fba2 2303 	umull	r2, r3, r2, r3
 8009534:	0a1a      	lsrs	r2, r3, #8
 8009536:	4613      	mov	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3b01      	subs	r3, #1
 8009542:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d107      	bne.n	800955a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800954e:	f043 0220 	orr.w	r2, r3, #32
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e008      	b.n	800956c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009568:	d0e9      	beq.n	800953e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	200000a8 	.word	0x200000a8
 800957c:	14f8b589 	.word	0x14f8b589

08009580 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009596:	d11b      	bne.n	80095d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80095a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2220      	movs	r2, #32
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095bc:	f043 0204 	orr.w	r2, r3, #4
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e000      	b.n	80095d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ea:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80095ee:	d103      	bne.n	80095f8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80095f6:	e007      	b.n	8009608 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009600:	d102      	bne.n	8009608 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2208      	movs	r2, #8
 8009606:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8009618:	4b06      	ldr	r3, [pc, #24]	@ (8009634 <HAL_PWR_PVD_IRQHandler+0x20>)
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d005      	beq.n	8009630 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8009624:	f000 f808 	bl	8009638 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8009628:	4b02      	ldr	r3, [pc, #8]	@ (8009634 <HAL_PWR_PVD_IRQHandler+0x20>)
 800962a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800962e:	615a      	str	r2, [r3, #20]
  }
}
 8009630:	bf00      	nop
 8009632:	bd80      	pop	{r7, pc}
 8009634:	40013c00 	.word	0x40013c00

08009638 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8009638:	b480      	push	{r7}
 800963a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800963c:	bf00      	nop
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
	...

08009648 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e267      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	d075      	beq.n	8009752 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009666:	4b88      	ldr	r3, [pc, #544]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f003 030c 	and.w	r3, r3, #12
 800966e:	2b04      	cmp	r3, #4
 8009670:	d00c      	beq.n	800968c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009672:	4b85      	ldr	r3, [pc, #532]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800967a:	2b08      	cmp	r3, #8
 800967c:	d112      	bne.n	80096a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800967e:	4b82      	ldr	r3, [pc, #520]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009686:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800968a:	d10b      	bne.n	80096a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800968c:	4b7e      	ldr	r3, [pc, #504]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d05b      	beq.n	8009750 <HAL_RCC_OscConfig+0x108>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d157      	bne.n	8009750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	e242      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096ac:	d106      	bne.n	80096bc <HAL_RCC_OscConfig+0x74>
 80096ae:	4b76      	ldr	r3, [pc, #472]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a75      	ldr	r2, [pc, #468]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 80096b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096b8:	6013      	str	r3, [r2, #0]
 80096ba:	e01d      	b.n	80096f8 <HAL_RCC_OscConfig+0xb0>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80096c4:	d10c      	bne.n	80096e0 <HAL_RCC_OscConfig+0x98>
 80096c6:	4b70      	ldr	r3, [pc, #448]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a6f      	ldr	r2, [pc, #444]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 80096cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80096d0:	6013      	str	r3, [r2, #0]
 80096d2:	4b6d      	ldr	r3, [pc, #436]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a6c      	ldr	r2, [pc, #432]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 80096d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	e00b      	b.n	80096f8 <HAL_RCC_OscConfig+0xb0>
 80096e0:	4b69      	ldr	r3, [pc, #420]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a68      	ldr	r2, [pc, #416]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 80096e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096ea:	6013      	str	r3, [r2, #0]
 80096ec:	4b66      	ldr	r3, [pc, #408]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a65      	ldr	r2, [pc, #404]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 80096f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80096f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d013      	beq.n	8009728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009700:	f7fc f978 	bl	80059f4 <HAL_GetTick>
 8009704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009706:	e008      	b.n	800971a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009708:	f7fc f974 	bl	80059f4 <HAL_GetTick>
 800970c:	4602      	mov	r2, r0
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	2b64      	cmp	r3, #100	@ 0x64
 8009714:	d901      	bls.n	800971a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e207      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800971a:	4b5b      	ldr	r3, [pc, #364]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009722:	2b00      	cmp	r3, #0
 8009724:	d0f0      	beq.n	8009708 <HAL_RCC_OscConfig+0xc0>
 8009726:	e014      	b.n	8009752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009728:	f7fc f964 	bl	80059f4 <HAL_GetTick>
 800972c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800972e:	e008      	b.n	8009742 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009730:	f7fc f960 	bl	80059f4 <HAL_GetTick>
 8009734:	4602      	mov	r2, r0
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	2b64      	cmp	r3, #100	@ 0x64
 800973c:	d901      	bls.n	8009742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800973e:	2303      	movs	r3, #3
 8009740:	e1f3      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009742:	4b51      	ldr	r3, [pc, #324]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1f0      	bne.n	8009730 <HAL_RCC_OscConfig+0xe8>
 800974e:	e000      	b.n	8009752 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0302 	and.w	r3, r3, #2
 800975a:	2b00      	cmp	r3, #0
 800975c:	d063      	beq.n	8009826 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800975e:	4b4a      	ldr	r3, [pc, #296]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	f003 030c 	and.w	r3, r3, #12
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00b      	beq.n	8009782 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800976a:	4b47      	ldr	r3, [pc, #284]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009772:	2b08      	cmp	r3, #8
 8009774:	d11c      	bne.n	80097b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009776:	4b44      	ldr	r3, [pc, #272]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d116      	bne.n	80097b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009782:	4b41      	ldr	r3, [pc, #260]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d005      	beq.n	800979a <HAL_RCC_OscConfig+0x152>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d001      	beq.n	800979a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e1c7      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800979a:	4b3b      	ldr	r3, [pc, #236]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	4937      	ldr	r1, [pc, #220]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80097ae:	e03a      	b.n	8009826 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d020      	beq.n	80097fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80097b8:	4b34      	ldr	r3, [pc, #208]	@ (800988c <HAL_RCC_OscConfig+0x244>)
 80097ba:	2201      	movs	r2, #1
 80097bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097be:	f7fc f919 	bl	80059f4 <HAL_GetTick>
 80097c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097c4:	e008      	b.n	80097d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80097c6:	f7fc f915 	bl	80059f4 <HAL_GetTick>
 80097ca:	4602      	mov	r2, r0
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d901      	bls.n	80097d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e1a8      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097d8:	4b2b      	ldr	r3, [pc, #172]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0302 	and.w	r3, r3, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0f0      	beq.n	80097c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097e4:	4b28      	ldr	r3, [pc, #160]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	4925      	ldr	r1, [pc, #148]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 80097f4:	4313      	orrs	r3, r2
 80097f6:	600b      	str	r3, [r1, #0]
 80097f8:	e015      	b.n	8009826 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097fa:	4b24      	ldr	r3, [pc, #144]	@ (800988c <HAL_RCC_OscConfig+0x244>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009800:	f7fc f8f8 	bl	80059f4 <HAL_GetTick>
 8009804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009806:	e008      	b.n	800981a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009808:	f7fc f8f4 	bl	80059f4 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	2b02      	cmp	r3, #2
 8009814:	d901      	bls.n	800981a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e187      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800981a:	4b1b      	ldr	r3, [pc, #108]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0302 	and.w	r3, r3, #2
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1f0      	bne.n	8009808 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0308 	and.w	r3, r3, #8
 800982e:	2b00      	cmp	r3, #0
 8009830:	d036      	beq.n	80098a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	695b      	ldr	r3, [r3, #20]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d016      	beq.n	8009868 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800983a:	4b15      	ldr	r3, [pc, #84]	@ (8009890 <HAL_RCC_OscConfig+0x248>)
 800983c:	2201      	movs	r2, #1
 800983e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009840:	f7fc f8d8 	bl	80059f4 <HAL_GetTick>
 8009844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009846:	e008      	b.n	800985a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009848:	f7fc f8d4 	bl	80059f4 <HAL_GetTick>
 800984c:	4602      	mov	r2, r0
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	2b02      	cmp	r3, #2
 8009854:	d901      	bls.n	800985a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e167      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800985a:	4b0b      	ldr	r3, [pc, #44]	@ (8009888 <HAL_RCC_OscConfig+0x240>)
 800985c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800985e:	f003 0302 	and.w	r3, r3, #2
 8009862:	2b00      	cmp	r3, #0
 8009864:	d0f0      	beq.n	8009848 <HAL_RCC_OscConfig+0x200>
 8009866:	e01b      	b.n	80098a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009868:	4b09      	ldr	r3, [pc, #36]	@ (8009890 <HAL_RCC_OscConfig+0x248>)
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800986e:	f7fc f8c1 	bl	80059f4 <HAL_GetTick>
 8009872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009874:	e00e      	b.n	8009894 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009876:	f7fc f8bd 	bl	80059f4 <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	2b02      	cmp	r3, #2
 8009882:	d907      	bls.n	8009894 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e150      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
 8009888:	40023800 	.word	0x40023800
 800988c:	42470000 	.word	0x42470000
 8009890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009894:	4b88      	ldr	r3, [pc, #544]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 8009896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009898:	f003 0302 	and.w	r3, r3, #2
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1ea      	bne.n	8009876 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0304 	and.w	r3, r3, #4
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 8097 	beq.w	80099dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098ae:	2300      	movs	r3, #0
 80098b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098b2:	4b81      	ldr	r3, [pc, #516]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 80098b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10f      	bne.n	80098de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098be:	2300      	movs	r3, #0
 80098c0:	60bb      	str	r3, [r7, #8]
 80098c2:	4b7d      	ldr	r3, [pc, #500]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 80098c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c6:	4a7c      	ldr	r2, [pc, #496]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 80098c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80098ce:	4b7a      	ldr	r3, [pc, #488]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 80098d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80098d6:	60bb      	str	r3, [r7, #8]
 80098d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098da:	2301      	movs	r3, #1
 80098dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098de:	4b77      	ldr	r3, [pc, #476]	@ (8009abc <HAL_RCC_OscConfig+0x474>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d118      	bne.n	800991c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80098ea:	4b74      	ldr	r3, [pc, #464]	@ (8009abc <HAL_RCC_OscConfig+0x474>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a73      	ldr	r2, [pc, #460]	@ (8009abc <HAL_RCC_OscConfig+0x474>)
 80098f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098f6:	f7fc f87d 	bl	80059f4 <HAL_GetTick>
 80098fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098fc:	e008      	b.n	8009910 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098fe:	f7fc f879 	bl	80059f4 <HAL_GetTick>
 8009902:	4602      	mov	r2, r0
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	1ad3      	subs	r3, r2, r3
 8009908:	2b02      	cmp	r3, #2
 800990a:	d901      	bls.n	8009910 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800990c:	2303      	movs	r3, #3
 800990e:	e10c      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009910:	4b6a      	ldr	r3, [pc, #424]	@ (8009abc <HAL_RCC_OscConfig+0x474>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009918:	2b00      	cmp	r3, #0
 800991a:	d0f0      	beq.n	80098fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d106      	bne.n	8009932 <HAL_RCC_OscConfig+0x2ea>
 8009924:	4b64      	ldr	r3, [pc, #400]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 8009926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009928:	4a63      	ldr	r2, [pc, #396]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 800992a:	f043 0301 	orr.w	r3, r3, #1
 800992e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009930:	e01c      	b.n	800996c <HAL_RCC_OscConfig+0x324>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	2b05      	cmp	r3, #5
 8009938:	d10c      	bne.n	8009954 <HAL_RCC_OscConfig+0x30c>
 800993a:	4b5f      	ldr	r3, [pc, #380]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 800993c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800993e:	4a5e      	ldr	r2, [pc, #376]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 8009940:	f043 0304 	orr.w	r3, r3, #4
 8009944:	6713      	str	r3, [r2, #112]	@ 0x70
 8009946:	4b5c      	ldr	r3, [pc, #368]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 8009948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800994a:	4a5b      	ldr	r2, [pc, #364]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 800994c:	f043 0301 	orr.w	r3, r3, #1
 8009950:	6713      	str	r3, [r2, #112]	@ 0x70
 8009952:	e00b      	b.n	800996c <HAL_RCC_OscConfig+0x324>
 8009954:	4b58      	ldr	r3, [pc, #352]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 8009956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009958:	4a57      	ldr	r2, [pc, #348]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 800995a:	f023 0301 	bic.w	r3, r3, #1
 800995e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009960:	4b55      	ldr	r3, [pc, #340]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 8009962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009964:	4a54      	ldr	r2, [pc, #336]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 8009966:	f023 0304 	bic.w	r3, r3, #4
 800996a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d015      	beq.n	80099a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009974:	f7fc f83e 	bl	80059f4 <HAL_GetTick>
 8009978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800997a:	e00a      	b.n	8009992 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800997c:	f7fc f83a 	bl	80059f4 <HAL_GetTick>
 8009980:	4602      	mov	r2, r0
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800998a:	4293      	cmp	r3, r2
 800998c:	d901      	bls.n	8009992 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e0cb      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009992:	4b49      	ldr	r3, [pc, #292]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 8009994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0ee      	beq.n	800997c <HAL_RCC_OscConfig+0x334>
 800999e:	e014      	b.n	80099ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099a0:	f7fc f828 	bl	80059f4 <HAL_GetTick>
 80099a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099a6:	e00a      	b.n	80099be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099a8:	f7fc f824 	bl	80059f4 <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d901      	bls.n	80099be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e0b5      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099be:	4b3e      	ldr	r3, [pc, #248]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 80099c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099c2:	f003 0302 	and.w	r3, r3, #2
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1ee      	bne.n	80099a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d105      	bne.n	80099dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099d0:	4b39      	ldr	r3, [pc, #228]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 80099d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d4:	4a38      	ldr	r2, [pc, #224]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 80099d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 80a1 	beq.w	8009b28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80099e6:	4b34      	ldr	r3, [pc, #208]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	f003 030c 	and.w	r3, r3, #12
 80099ee:	2b08      	cmp	r3, #8
 80099f0:	d05c      	beq.n	8009aac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d141      	bne.n	8009a7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099fa:	4b31      	ldr	r3, [pc, #196]	@ (8009ac0 <HAL_RCC_OscConfig+0x478>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a00:	f7fb fff8 	bl	80059f4 <HAL_GetTick>
 8009a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a06:	e008      	b.n	8009a1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a08:	f7fb fff4 	bl	80059f4 <HAL_GetTick>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d901      	bls.n	8009a1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e087      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a1a:	4b27      	ldr	r3, [pc, #156]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1f0      	bne.n	8009a08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	69da      	ldr	r2, [r3, #28]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	431a      	orrs	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a34:	019b      	lsls	r3, r3, #6
 8009a36:	431a      	orrs	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a3c:	085b      	lsrs	r3, r3, #1
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	041b      	lsls	r3, r3, #16
 8009a42:	431a      	orrs	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a48:	061b      	lsls	r3, r3, #24
 8009a4a:	491b      	ldr	r1, [pc, #108]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a50:	4b1b      	ldr	r3, [pc, #108]	@ (8009ac0 <HAL_RCC_OscConfig+0x478>)
 8009a52:	2201      	movs	r2, #1
 8009a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a56:	f7fb ffcd 	bl	80059f4 <HAL_GetTick>
 8009a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a5c:	e008      	b.n	8009a70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a5e:	f7fb ffc9 	bl	80059f4 <HAL_GetTick>
 8009a62:	4602      	mov	r2, r0
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d901      	bls.n	8009a70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e05c      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a70:	4b11      	ldr	r3, [pc, #68]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d0f0      	beq.n	8009a5e <HAL_RCC_OscConfig+0x416>
 8009a7c:	e054      	b.n	8009b28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a7e:	4b10      	ldr	r3, [pc, #64]	@ (8009ac0 <HAL_RCC_OscConfig+0x478>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a84:	f7fb ffb6 	bl	80059f4 <HAL_GetTick>
 8009a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a8a:	e008      	b.n	8009a9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a8c:	f7fb ffb2 	bl	80059f4 <HAL_GetTick>
 8009a90:	4602      	mov	r2, r0
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d901      	bls.n	8009a9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e045      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a9e:	4b06      	ldr	r3, [pc, #24]	@ (8009ab8 <HAL_RCC_OscConfig+0x470>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1f0      	bne.n	8009a8c <HAL_RCC_OscConfig+0x444>
 8009aaa:	e03d      	b.n	8009b28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d107      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e038      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
 8009ab8:	40023800 	.word	0x40023800
 8009abc:	40007000 	.word	0x40007000
 8009ac0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8009b34 <HAL_RCC_OscConfig+0x4ec>)
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d028      	beq.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d121      	bne.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d11a      	bne.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009af4:	4013      	ands	r3, r2
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009afa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d111      	bne.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0a:	085b      	lsrs	r3, r3, #1
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d107      	bne.n	8009b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d001      	beq.n	8009b28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e000      	b.n	8009b2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	40023800 	.word	0x40023800

08009b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e0cc      	b.n	8009ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b4c:	4b68      	ldr	r3, [pc, #416]	@ (8009cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0307 	and.w	r3, r3, #7
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d90c      	bls.n	8009b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b5a:	4b65      	ldr	r3, [pc, #404]	@ (8009cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	b2d2      	uxtb	r2, r2
 8009b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b62:	4b63      	ldr	r3, [pc, #396]	@ (8009cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 0307 	and.w	r3, r3, #7
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d001      	beq.n	8009b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	e0b8      	b.n	8009ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d020      	beq.n	8009bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 0304 	and.w	r3, r3, #4
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d005      	beq.n	8009b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b8c:	4b59      	ldr	r3, [pc, #356]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	4a58      	ldr	r2, [pc, #352]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009b92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0308 	and.w	r3, r3, #8
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d005      	beq.n	8009bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009ba4:	4b53      	ldr	r3, [pc, #332]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	4a52      	ldr	r2, [pc, #328]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009baa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bb0:	4b50      	ldr	r3, [pc, #320]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	494d      	ldr	r1, [pc, #308]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d044      	beq.n	8009c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d107      	bne.n	8009be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bd6:	4b47      	ldr	r3, [pc, #284]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d119      	bne.n	8009c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e07f      	b.n	8009ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d003      	beq.n	8009bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d107      	bne.n	8009c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d109      	bne.n	8009c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e06f      	b.n	8009ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c06:	4b3b      	ldr	r3, [pc, #236]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 0302 	and.w	r3, r3, #2
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e067      	b.n	8009ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c16:	4b37      	ldr	r3, [pc, #220]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	f023 0203 	bic.w	r2, r3, #3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	4934      	ldr	r1, [pc, #208]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c28:	f7fb fee4 	bl	80059f4 <HAL_GetTick>
 8009c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c2e:	e00a      	b.n	8009c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c30:	f7fb fee0 	bl	80059f4 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d901      	bls.n	8009c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e04f      	b.n	8009ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c46:	4b2b      	ldr	r3, [pc, #172]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	f003 020c 	and.w	r2, r3, #12
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d1eb      	bne.n	8009c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c58:	4b25      	ldr	r3, [pc, #148]	@ (8009cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 0307 	and.w	r3, r3, #7
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d20c      	bcs.n	8009c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c66:	4b22      	ldr	r3, [pc, #136]	@ (8009cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c68:	683a      	ldr	r2, [r7, #0]
 8009c6a:	b2d2      	uxtb	r2, r2
 8009c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c6e:	4b20      	ldr	r3, [pc, #128]	@ (8009cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0307 	and.w	r3, r3, #7
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d001      	beq.n	8009c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e032      	b.n	8009ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0304 	and.w	r3, r3, #4
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d008      	beq.n	8009c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c8c:	4b19      	ldr	r3, [pc, #100]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	4916      	ldr	r1, [pc, #88]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0308 	and.w	r3, r3, #8
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d009      	beq.n	8009cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009caa:	4b12      	ldr	r3, [pc, #72]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	490e      	ldr	r1, [pc, #56]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009cbe:	f000 f821 	bl	8009d04 <HAL_RCC_GetSysClockFreq>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	091b      	lsrs	r3, r3, #4
 8009cca:	f003 030f 	and.w	r3, r3, #15
 8009cce:	490a      	ldr	r1, [pc, #40]	@ (8009cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8009cd0:	5ccb      	ldrb	r3, [r1, r3]
 8009cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd6:	4a09      	ldr	r2, [pc, #36]	@ (8009cfc <HAL_RCC_ClockConfig+0x1c4>)
 8009cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009cda:	4b09      	ldr	r3, [pc, #36]	@ (8009d00 <HAL_RCC_ClockConfig+0x1c8>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fb fe44 	bl	800596c <HAL_InitTick>

  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	40023c00 	.word	0x40023c00
 8009cf4:	40023800 	.word	0x40023800
 8009cf8:	08015b1c 	.word	0x08015b1c
 8009cfc:	200000a8 	.word	0x200000a8
 8009d00:	200000ac 	.word	0x200000ac

08009d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d08:	b094      	sub	sp, #80	@ 0x50
 8009d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d10:	2300      	movs	r3, #0
 8009d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d14:	2300      	movs	r3, #0
 8009d16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d1c:	4b79      	ldr	r3, [pc, #484]	@ (8009f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	f003 030c 	and.w	r3, r3, #12
 8009d24:	2b08      	cmp	r3, #8
 8009d26:	d00d      	beq.n	8009d44 <HAL_RCC_GetSysClockFreq+0x40>
 8009d28:	2b08      	cmp	r3, #8
 8009d2a:	f200 80e1 	bhi.w	8009ef0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d002      	beq.n	8009d38 <HAL_RCC_GetSysClockFreq+0x34>
 8009d32:	2b04      	cmp	r3, #4
 8009d34:	d003      	beq.n	8009d3e <HAL_RCC_GetSysClockFreq+0x3a>
 8009d36:	e0db      	b.n	8009ef0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d38:	4b73      	ldr	r3, [pc, #460]	@ (8009f08 <HAL_RCC_GetSysClockFreq+0x204>)
 8009d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009d3c:	e0db      	b.n	8009ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d3e:	4b73      	ldr	r3, [pc, #460]	@ (8009f0c <HAL_RCC_GetSysClockFreq+0x208>)
 8009d40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009d42:	e0d8      	b.n	8009ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d44:	4b6f      	ldr	r3, [pc, #444]	@ (8009f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8009f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d063      	beq.n	8009e22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d5a:	4b6a      	ldr	r3, [pc, #424]	@ (8009f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	099b      	lsrs	r3, r3, #6
 8009d60:	2200      	movs	r2, #0
 8009d62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d6e:	2300      	movs	r3, #0
 8009d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009d76:	4622      	mov	r2, r4
 8009d78:	462b      	mov	r3, r5
 8009d7a:	f04f 0000 	mov.w	r0, #0
 8009d7e:	f04f 0100 	mov.w	r1, #0
 8009d82:	0159      	lsls	r1, r3, #5
 8009d84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d88:	0150      	lsls	r0, r2, #5
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4621      	mov	r1, r4
 8009d90:	1a51      	subs	r1, r2, r1
 8009d92:	6139      	str	r1, [r7, #16]
 8009d94:	4629      	mov	r1, r5
 8009d96:	eb63 0301 	sbc.w	r3, r3, r1
 8009d9a:	617b      	str	r3, [r7, #20]
 8009d9c:	f04f 0200 	mov.w	r2, #0
 8009da0:	f04f 0300 	mov.w	r3, #0
 8009da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009da8:	4659      	mov	r1, fp
 8009daa:	018b      	lsls	r3, r1, #6
 8009dac:	4651      	mov	r1, sl
 8009dae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009db2:	4651      	mov	r1, sl
 8009db4:	018a      	lsls	r2, r1, #6
 8009db6:	4651      	mov	r1, sl
 8009db8:	ebb2 0801 	subs.w	r8, r2, r1
 8009dbc:	4659      	mov	r1, fp
 8009dbe:	eb63 0901 	sbc.w	r9, r3, r1
 8009dc2:	f04f 0200 	mov.w	r2, #0
 8009dc6:	f04f 0300 	mov.w	r3, #0
 8009dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009dd6:	4690      	mov	r8, r2
 8009dd8:	4699      	mov	r9, r3
 8009dda:	4623      	mov	r3, r4
 8009ddc:	eb18 0303 	adds.w	r3, r8, r3
 8009de0:	60bb      	str	r3, [r7, #8]
 8009de2:	462b      	mov	r3, r5
 8009de4:	eb49 0303 	adc.w	r3, r9, r3
 8009de8:	60fb      	str	r3, [r7, #12]
 8009dea:	f04f 0200 	mov.w	r2, #0
 8009dee:	f04f 0300 	mov.w	r3, #0
 8009df2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009df6:	4629      	mov	r1, r5
 8009df8:	024b      	lsls	r3, r1, #9
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009e00:	4621      	mov	r1, r4
 8009e02:	024a      	lsls	r2, r1, #9
 8009e04:	4610      	mov	r0, r2
 8009e06:	4619      	mov	r1, r3
 8009e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009e10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009e14:	f7f6 ff48 	bl	8000ca8 <__aeabi_uldivmod>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e20:	e058      	b.n	8009ed4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e22:	4b38      	ldr	r3, [pc, #224]	@ (8009f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	099b      	lsrs	r3, r3, #6
 8009e28:	2200      	movs	r2, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009e32:	623b      	str	r3, [r7, #32]
 8009e34:	2300      	movs	r3, #0
 8009e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009e3c:	4642      	mov	r2, r8
 8009e3e:	464b      	mov	r3, r9
 8009e40:	f04f 0000 	mov.w	r0, #0
 8009e44:	f04f 0100 	mov.w	r1, #0
 8009e48:	0159      	lsls	r1, r3, #5
 8009e4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e4e:	0150      	lsls	r0, r2, #5
 8009e50:	4602      	mov	r2, r0
 8009e52:	460b      	mov	r3, r1
 8009e54:	4641      	mov	r1, r8
 8009e56:	ebb2 0a01 	subs.w	sl, r2, r1
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009e60:	f04f 0200 	mov.w	r2, #0
 8009e64:	f04f 0300 	mov.w	r3, #0
 8009e68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009e6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009e70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009e74:	ebb2 040a 	subs.w	r4, r2, sl
 8009e78:	eb63 050b 	sbc.w	r5, r3, fp
 8009e7c:	f04f 0200 	mov.w	r2, #0
 8009e80:	f04f 0300 	mov.w	r3, #0
 8009e84:	00eb      	lsls	r3, r5, #3
 8009e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e8a:	00e2      	lsls	r2, r4, #3
 8009e8c:	4614      	mov	r4, r2
 8009e8e:	461d      	mov	r5, r3
 8009e90:	4643      	mov	r3, r8
 8009e92:	18e3      	adds	r3, r4, r3
 8009e94:	603b      	str	r3, [r7, #0]
 8009e96:	464b      	mov	r3, r9
 8009e98:	eb45 0303 	adc.w	r3, r5, r3
 8009e9c:	607b      	str	r3, [r7, #4]
 8009e9e:	f04f 0200 	mov.w	r2, #0
 8009ea2:	f04f 0300 	mov.w	r3, #0
 8009ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009eaa:	4629      	mov	r1, r5
 8009eac:	028b      	lsls	r3, r1, #10
 8009eae:	4621      	mov	r1, r4
 8009eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009eb4:	4621      	mov	r1, r4
 8009eb6:	028a      	lsls	r2, r1, #10
 8009eb8:	4610      	mov	r0, r2
 8009eba:	4619      	mov	r1, r3
 8009ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	61bb      	str	r3, [r7, #24]
 8009ec2:	61fa      	str	r2, [r7, #28]
 8009ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ec8:	f7f6 feee 	bl	8000ca8 <__aeabi_uldivmod>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8009f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	0c1b      	lsrs	r3, r3, #16
 8009eda:	f003 0303 	and.w	r3, r3, #3
 8009ede:	3301      	adds	r3, #1
 8009ee0:	005b      	lsls	r3, r3, #1
 8009ee2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8009ee4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009eee:	e002      	b.n	8009ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009ef0:	4b05      	ldr	r3, [pc, #20]	@ (8009f08 <HAL_RCC_GetSysClockFreq+0x204>)
 8009ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3750      	adds	r7, #80	@ 0x50
 8009efc:	46bd      	mov	sp, r7
 8009efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f02:	bf00      	nop
 8009f04:	40023800 	.word	0x40023800
 8009f08:	00f42400 	.word	0x00f42400
 8009f0c:	007a1200 	.word	0x007a1200

08009f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f10:	b480      	push	{r7}
 8009f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f14:	4b03      	ldr	r3, [pc, #12]	@ (8009f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f16:	681b      	ldr	r3, [r3, #0]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	200000a8 	.word	0x200000a8

08009f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009f2c:	f7ff fff0 	bl	8009f10 <HAL_RCC_GetHCLKFreq>
 8009f30:	4602      	mov	r2, r0
 8009f32:	4b05      	ldr	r3, [pc, #20]	@ (8009f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	0a9b      	lsrs	r3, r3, #10
 8009f38:	f003 0307 	and.w	r3, r3, #7
 8009f3c:	4903      	ldr	r1, [pc, #12]	@ (8009f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f3e:	5ccb      	ldrb	r3, [r1, r3]
 8009f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	40023800 	.word	0x40023800
 8009f4c:	08015b2c 	.word	0x08015b2c

08009f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009f54:	f7ff ffdc 	bl	8009f10 <HAL_RCC_GetHCLKFreq>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	4b05      	ldr	r3, [pc, #20]	@ (8009f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	0b5b      	lsrs	r3, r3, #13
 8009f60:	f003 0307 	and.w	r3, r3, #7
 8009f64:	4903      	ldr	r1, [pc, #12]	@ (8009f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f66:	5ccb      	ldrb	r3, [r1, r3]
 8009f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	40023800 	.word	0x40023800
 8009f74:	08015b2c 	.word	0x08015b2c

08009f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e041      	b.n	800a00e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d106      	bne.n	8009fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7fb fafc 	bl	800559c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	f000 faac 	bl	800a514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
	...

0800a018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a026:	b2db      	uxtb	r3, r3
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d001      	beq.n	800a030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e04e      	b.n	800a0ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2202      	movs	r2, #2
 800a034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68da      	ldr	r2, [r3, #12]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f042 0201 	orr.w	r2, r2, #1
 800a046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a23      	ldr	r2, [pc, #140]	@ (800a0dc <HAL_TIM_Base_Start_IT+0xc4>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d022      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a05a:	d01d      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a1f      	ldr	r2, [pc, #124]	@ (800a0e0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d018      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a1e      	ldr	r2, [pc, #120]	@ (800a0e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d013      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a1c      	ldr	r2, [pc, #112]	@ (800a0e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d00e      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a1b      	ldr	r2, [pc, #108]	@ (800a0ec <HAL_TIM_Base_Start_IT+0xd4>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d009      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a19      	ldr	r2, [pc, #100]	@ (800a0f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d004      	beq.n	800a098 <HAL_TIM_Base_Start_IT+0x80>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a18      	ldr	r2, [pc, #96]	@ (800a0f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d111      	bne.n	800a0bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f003 0307 	and.w	r3, r3, #7
 800a0a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b06      	cmp	r3, #6
 800a0a8:	d010      	beq.n	800a0cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f042 0201 	orr.w	r2, r2, #1
 800a0b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ba:	e007      	b.n	800a0cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 0201 	orr.w	r2, r2, #1
 800a0ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	40010000 	.word	0x40010000
 800a0e0:	40000400 	.word	0x40000400
 800a0e4:	40000800 	.word	0x40000800
 800a0e8:	40000c00 	.word	0x40000c00
 800a0ec:	40010400 	.word	0x40010400
 800a0f0:	40014000 	.word	0x40014000
 800a0f4:	40001800 	.word	0x40001800

0800a0f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68da      	ldr	r2, [r3, #12]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f022 0201 	bic.w	r2, r2, #1
 800a10e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	6a1a      	ldr	r2, [r3, #32]
 800a116:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a11a:	4013      	ands	r3, r2
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10f      	bne.n	800a140 <HAL_TIM_Base_Stop_IT+0x48>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	6a1a      	ldr	r2, [r3, #32]
 800a126:	f240 4344 	movw	r3, #1092	@ 0x444
 800a12a:	4013      	ands	r3, r2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d107      	bne.n	800a140 <HAL_TIM_Base_Stop_IT+0x48>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f022 0201 	bic.w	r2, r2, #1
 800a13e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b00      	cmp	r3, #0
 800a176:	d020      	beq.n	800a1ba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f003 0302 	and.w	r3, r3, #2
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d01b      	beq.n	800a1ba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f06f 0202 	mvn.w	r2, #2
 800a18a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	f003 0303 	and.w	r3, r3, #3
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f999 	bl	800a4d8 <HAL_TIM_IC_CaptureCallback>
 800a1a6:	e005      	b.n	800a1b4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f98b 	bl	800a4c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f99c 	bl	800a4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d020      	beq.n	800a206 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f003 0304 	and.w	r3, r3, #4
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d01b      	beq.n	800a206 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f06f 0204 	mvn.w	r2, #4
 800a1d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f973 	bl	800a4d8 <HAL_TIM_IC_CaptureCallback>
 800a1f2:	e005      	b.n	800a200 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f965 	bl	800a4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f976 	bl	800a4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	f003 0308 	and.w	r3, r3, #8
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d020      	beq.n	800a252 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f003 0308 	and.w	r3, r3, #8
 800a216:	2b00      	cmp	r3, #0
 800a218:	d01b      	beq.n	800a252 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f06f 0208 	mvn.w	r2, #8
 800a222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2204      	movs	r2, #4
 800a228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	69db      	ldr	r3, [r3, #28]
 800a230:	f003 0303 	and.w	r3, r3, #3
 800a234:	2b00      	cmp	r3, #0
 800a236:	d003      	beq.n	800a240 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f94d 	bl	800a4d8 <HAL_TIM_IC_CaptureCallback>
 800a23e:	e005      	b.n	800a24c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f93f 	bl	800a4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f950 	bl	800a4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	f003 0310 	and.w	r3, r3, #16
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d020      	beq.n	800a29e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f003 0310 	and.w	r3, r3, #16
 800a262:	2b00      	cmp	r3, #0
 800a264:	d01b      	beq.n	800a29e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f06f 0210 	mvn.w	r2, #16
 800a26e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2208      	movs	r2, #8
 800a274:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	69db      	ldr	r3, [r3, #28]
 800a27c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a280:	2b00      	cmp	r3, #0
 800a282:	d003      	beq.n	800a28c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f927 	bl	800a4d8 <HAL_TIM_IC_CaptureCallback>
 800a28a:	e005      	b.n	800a298 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f919 	bl	800a4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f92a 	bl	800a4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	f003 0301 	and.w	r3, r3, #1
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00c      	beq.n	800a2c2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d007      	beq.n	800a2c2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f06f 0201 	mvn.w	r2, #1
 800a2ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7f9 f85d 	bl	800337c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00c      	beq.n	800a2e6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d007      	beq.n	800a2e6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a2de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fae3 	bl	800a8ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00c      	beq.n	800a30a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d007      	beq.n	800a30a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f8fb 	bl	800a500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	f003 0320 	and.w	r3, r3, #32
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00c      	beq.n	800a32e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f003 0320 	and.w	r3, r3, #32
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d007      	beq.n	800a32e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f06f 0220 	mvn.w	r2, #32
 800a326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fab5 	bl	800a898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a32e:	bf00      	nop
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d101      	bne.n	800a352 <HAL_TIM_ConfigClockSource+0x1c>
 800a34e:	2302      	movs	r3, #2
 800a350:	e0b4      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x186>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2202      	movs	r2, #2
 800a35e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a370:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a378:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a38a:	d03e      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0xd4>
 800a38c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a390:	f200 8087 	bhi.w	800a4a2 <HAL_TIM_ConfigClockSource+0x16c>
 800a394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a398:	f000 8086 	beq.w	800a4a8 <HAL_TIM_ConfigClockSource+0x172>
 800a39c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3a0:	d87f      	bhi.n	800a4a2 <HAL_TIM_ConfigClockSource+0x16c>
 800a3a2:	2b70      	cmp	r3, #112	@ 0x70
 800a3a4:	d01a      	beq.n	800a3dc <HAL_TIM_ConfigClockSource+0xa6>
 800a3a6:	2b70      	cmp	r3, #112	@ 0x70
 800a3a8:	d87b      	bhi.n	800a4a2 <HAL_TIM_ConfigClockSource+0x16c>
 800a3aa:	2b60      	cmp	r3, #96	@ 0x60
 800a3ac:	d050      	beq.n	800a450 <HAL_TIM_ConfigClockSource+0x11a>
 800a3ae:	2b60      	cmp	r3, #96	@ 0x60
 800a3b0:	d877      	bhi.n	800a4a2 <HAL_TIM_ConfigClockSource+0x16c>
 800a3b2:	2b50      	cmp	r3, #80	@ 0x50
 800a3b4:	d03c      	beq.n	800a430 <HAL_TIM_ConfigClockSource+0xfa>
 800a3b6:	2b50      	cmp	r3, #80	@ 0x50
 800a3b8:	d873      	bhi.n	800a4a2 <HAL_TIM_ConfigClockSource+0x16c>
 800a3ba:	2b40      	cmp	r3, #64	@ 0x40
 800a3bc:	d058      	beq.n	800a470 <HAL_TIM_ConfigClockSource+0x13a>
 800a3be:	2b40      	cmp	r3, #64	@ 0x40
 800a3c0:	d86f      	bhi.n	800a4a2 <HAL_TIM_ConfigClockSource+0x16c>
 800a3c2:	2b30      	cmp	r3, #48	@ 0x30
 800a3c4:	d064      	beq.n	800a490 <HAL_TIM_ConfigClockSource+0x15a>
 800a3c6:	2b30      	cmp	r3, #48	@ 0x30
 800a3c8:	d86b      	bhi.n	800a4a2 <HAL_TIM_ConfigClockSource+0x16c>
 800a3ca:	2b20      	cmp	r3, #32
 800a3cc:	d060      	beq.n	800a490 <HAL_TIM_ConfigClockSource+0x15a>
 800a3ce:	2b20      	cmp	r3, #32
 800a3d0:	d867      	bhi.n	800a4a2 <HAL_TIM_ConfigClockSource+0x16c>
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d05c      	beq.n	800a490 <HAL_TIM_ConfigClockSource+0x15a>
 800a3d6:	2b10      	cmp	r3, #16
 800a3d8:	d05a      	beq.n	800a490 <HAL_TIM_ConfigClockSource+0x15a>
 800a3da:	e062      	b.n	800a4a2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a3ec:	f000 f9b8 	bl	800a760 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a3fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	609a      	str	r2, [r3, #8]
      break;
 800a408:	e04f      	b.n	800a4aa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a41a:	f000 f9a1 	bl	800a760 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	689a      	ldr	r2, [r3, #8]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a42c:	609a      	str	r2, [r3, #8]
      break;
 800a42e:	e03c      	b.n	800a4aa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a43c:	461a      	mov	r2, r3
 800a43e:	f000 f915 	bl	800a66c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2150      	movs	r1, #80	@ 0x50
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 f96e 	bl	800a72a <TIM_ITRx_SetConfig>
      break;
 800a44e:	e02c      	b.n	800a4aa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a45c:	461a      	mov	r2, r3
 800a45e:	f000 f934 	bl	800a6ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2160      	movs	r1, #96	@ 0x60
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 f95e 	bl	800a72a <TIM_ITRx_SetConfig>
      break;
 800a46e:	e01c      	b.n	800a4aa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a47c:	461a      	mov	r2, r3
 800a47e:	f000 f8f5 	bl	800a66c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2140      	movs	r1, #64	@ 0x40
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 f94e 	bl	800a72a <TIM_ITRx_SetConfig>
      break;
 800a48e:	e00c      	b.n	800a4aa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4619      	mov	r1, r3
 800a49a:	4610      	mov	r0, r2
 800a49c:	f000 f945 	bl	800a72a <TIM_ITRx_SetConfig>
      break;
 800a4a0:	e003      	b.n	800a4aa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a4a6:	e000      	b.n	800a4aa <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a4a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a508:	bf00      	nop
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a46      	ldr	r2, [pc, #280]	@ (800a640 <TIM_Base_SetConfig+0x12c>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d013      	beq.n	800a554 <TIM_Base_SetConfig+0x40>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a532:	d00f      	beq.n	800a554 <TIM_Base_SetConfig+0x40>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a43      	ldr	r2, [pc, #268]	@ (800a644 <TIM_Base_SetConfig+0x130>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d00b      	beq.n	800a554 <TIM_Base_SetConfig+0x40>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a42      	ldr	r2, [pc, #264]	@ (800a648 <TIM_Base_SetConfig+0x134>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d007      	beq.n	800a554 <TIM_Base_SetConfig+0x40>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a41      	ldr	r2, [pc, #260]	@ (800a64c <TIM_Base_SetConfig+0x138>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d003      	beq.n	800a554 <TIM_Base_SetConfig+0x40>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a40      	ldr	r2, [pc, #256]	@ (800a650 <TIM_Base_SetConfig+0x13c>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d108      	bne.n	800a566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a55a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	4313      	orrs	r3, r2
 800a564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a35      	ldr	r2, [pc, #212]	@ (800a640 <TIM_Base_SetConfig+0x12c>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d02b      	beq.n	800a5c6 <TIM_Base_SetConfig+0xb2>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a574:	d027      	beq.n	800a5c6 <TIM_Base_SetConfig+0xb2>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a32      	ldr	r2, [pc, #200]	@ (800a644 <TIM_Base_SetConfig+0x130>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d023      	beq.n	800a5c6 <TIM_Base_SetConfig+0xb2>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a31      	ldr	r2, [pc, #196]	@ (800a648 <TIM_Base_SetConfig+0x134>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d01f      	beq.n	800a5c6 <TIM_Base_SetConfig+0xb2>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a30      	ldr	r2, [pc, #192]	@ (800a64c <TIM_Base_SetConfig+0x138>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d01b      	beq.n	800a5c6 <TIM_Base_SetConfig+0xb2>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a2f      	ldr	r2, [pc, #188]	@ (800a650 <TIM_Base_SetConfig+0x13c>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d017      	beq.n	800a5c6 <TIM_Base_SetConfig+0xb2>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a2e      	ldr	r2, [pc, #184]	@ (800a654 <TIM_Base_SetConfig+0x140>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d013      	beq.n	800a5c6 <TIM_Base_SetConfig+0xb2>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a2d      	ldr	r2, [pc, #180]	@ (800a658 <TIM_Base_SetConfig+0x144>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d00f      	beq.n	800a5c6 <TIM_Base_SetConfig+0xb2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a2c      	ldr	r2, [pc, #176]	@ (800a65c <TIM_Base_SetConfig+0x148>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d00b      	beq.n	800a5c6 <TIM_Base_SetConfig+0xb2>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a2b      	ldr	r2, [pc, #172]	@ (800a660 <TIM_Base_SetConfig+0x14c>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d007      	beq.n	800a5c6 <TIM_Base_SetConfig+0xb2>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a2a      	ldr	r2, [pc, #168]	@ (800a664 <TIM_Base_SetConfig+0x150>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d003      	beq.n	800a5c6 <TIM_Base_SetConfig+0xb2>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a29      	ldr	r2, [pc, #164]	@ (800a668 <TIM_Base_SetConfig+0x154>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d108      	bne.n	800a5d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	689a      	ldr	r2, [r3, #8]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a10      	ldr	r2, [pc, #64]	@ (800a640 <TIM_Base_SetConfig+0x12c>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d003      	beq.n	800a60c <TIM_Base_SetConfig+0xf8>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a12      	ldr	r2, [pc, #72]	@ (800a650 <TIM_Base_SetConfig+0x13c>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d103      	bne.n	800a614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	691a      	ldr	r2, [r3, #16]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	f003 0301 	and.w	r3, r3, #1
 800a622:	2b01      	cmp	r3, #1
 800a624:	d105      	bne.n	800a632 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	f023 0201 	bic.w	r2, r3, #1
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	611a      	str	r2, [r3, #16]
  }
}
 800a632:	bf00      	nop
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	40010000 	.word	0x40010000
 800a644:	40000400 	.word	0x40000400
 800a648:	40000800 	.word	0x40000800
 800a64c:	40000c00 	.word	0x40000c00
 800a650:	40010400 	.word	0x40010400
 800a654:	40014000 	.word	0x40014000
 800a658:	40014400 	.word	0x40014400
 800a65c:	40014800 	.word	0x40014800
 800a660:	40001800 	.word	0x40001800
 800a664:	40001c00 	.word	0x40001c00
 800a668:	40002000 	.word	0x40002000

0800a66c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b087      	sub	sp, #28
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6a1b      	ldr	r3, [r3, #32]
 800a67c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6a1b      	ldr	r3, [r3, #32]
 800a682:	f023 0201 	bic.w	r2, r3, #1
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	011b      	lsls	r3, r3, #4
 800a69c:	693a      	ldr	r2, [r7, #16]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f023 030a 	bic.w	r3, r3, #10
 800a6a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	621a      	str	r2, [r3, #32]
}
 800a6be:	bf00      	nop
 800a6c0:	371c      	adds	r7, #28
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b087      	sub	sp, #28
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6a1b      	ldr	r3, [r3, #32]
 800a6da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6a1b      	ldr	r3, [r3, #32]
 800a6e0:	f023 0210 	bic.w	r2, r3, #16
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a6f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	031b      	lsls	r3, r3, #12
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a706:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	011b      	lsls	r3, r3, #4
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	4313      	orrs	r3, r2
 800a710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	621a      	str	r2, [r3, #32]
}
 800a71e:	bf00      	nop
 800a720:	371c      	adds	r7, #28
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b085      	sub	sp, #20
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	4313      	orrs	r3, r2
 800a748:	f043 0307 	orr.w	r3, r3, #7
 800a74c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	609a      	str	r2, [r3, #8]
}
 800a754:	bf00      	nop
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
 800a76c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a77a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	021a      	lsls	r2, r3, #8
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	431a      	orrs	r2, r3
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	4313      	orrs	r3, r2
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	609a      	str	r2, [r3, #8]
}
 800a794:	bf00      	nop
 800a796:	371c      	adds	r7, #28
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d101      	bne.n	800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	e05a      	b.n	800a86e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a21      	ldr	r2, [pc, #132]	@ (800a87c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d022      	beq.n	800a842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a804:	d01d      	beq.n	800a842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a1d      	ldr	r2, [pc, #116]	@ (800a880 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d018      	beq.n	800a842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a1b      	ldr	r2, [pc, #108]	@ (800a884 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d013      	beq.n	800a842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a1a      	ldr	r2, [pc, #104]	@ (800a888 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d00e      	beq.n	800a842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a18      	ldr	r2, [pc, #96]	@ (800a88c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d009      	beq.n	800a842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a17      	ldr	r2, [pc, #92]	@ (800a890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d004      	beq.n	800a842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a15      	ldr	r2, [pc, #84]	@ (800a894 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d10c      	bne.n	800a85c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	4313      	orrs	r3, r2
 800a852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	40010000 	.word	0x40010000
 800a880:	40000400 	.word	0x40000400
 800a884:	40000800 	.word	0x40000800
 800a888:	40000c00 	.word	0x40000c00
 800a88c:	40010400 	.word	0x40010400
 800a890:	40014000 	.word	0x40014000
 800a894:	40001800 	.word	0x40001800

0800a898 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e042      	b.n	800a958 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d106      	bne.n	800a8ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7fa ff5e 	bl	80057a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2224      	movs	r2, #36	@ 0x24
 800a8f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68da      	ldr	r2, [r3, #12]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 ff6d 	bl	800b7e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	691a      	ldr	r2, [r3, #16]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	695a      	ldr	r2, [r3, #20]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	68da      	ldr	r2, [r3, #12]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2220      	movs	r2, #32
 800a944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2220      	movs	r2, #32
 800a94c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	4613      	mov	r3, r2
 800a96c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b20      	cmp	r3, #32
 800a978:	d121      	bne.n	800a9be <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <HAL_UART_Transmit_IT+0x26>
 800a980:	88fb      	ldrh	r3, [r7, #6]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d101      	bne.n	800a98a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e01a      	b.n	800a9c0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	88fa      	ldrh	r2, [r7, #6]
 800a994:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	88fa      	ldrh	r2, [r7, #6]
 800a99a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2221      	movs	r2, #33	@ 0x21
 800a9a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68da      	ldr	r2, [r3, #12]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a9b8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	e000      	b.n	800a9c0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a9be:	2302      	movs	r3, #2
  }
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3714      	adds	r7, #20
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b08c      	sub	sp, #48	@ 0x30
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b20      	cmp	r3, #32
 800a9e4:	d156      	bne.n	800aa94 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d002      	beq.n	800a9f2 <HAL_UART_Transmit_DMA+0x26>
 800a9ec:	88fb      	ldrh	r3, [r7, #6]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d101      	bne.n	800a9f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e04f      	b.n	800aa96 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800a9f6:	68ba      	ldr	r2, [r7, #8]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	88fa      	ldrh	r2, [r7, #6]
 800aa00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	88fa      	ldrh	r2, [r7, #6]
 800aa06:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2221      	movs	r2, #33	@ 0x21
 800aa12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa1a:	4a21      	ldr	r2, [pc, #132]	@ (800aaa0 <HAL_UART_Transmit_DMA+0xd4>)
 800aa1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa22:	4a20      	ldr	r2, [pc, #128]	@ (800aaa4 <HAL_UART_Transmit_DMA+0xd8>)
 800aa24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa2a:	4a1f      	ldr	r2, [pc, #124]	@ (800aaa8 <HAL_UART_Transmit_DMA+0xdc>)
 800aa2c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa32:	2200      	movs	r2, #0
 800aa34:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800aa36:	f107 0308 	add.w	r3, r7, #8
 800aa3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800aa40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa42:	6819      	ldr	r1, [r3, #0]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3304      	adds	r3, #4
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	88fb      	ldrh	r3, [r7, #6]
 800aa4e:	f7fb fef9 	bl	8006844 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aa5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	3314      	adds	r3, #20
 800aa62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	e853 3f00 	ldrex	r3, [r3]
 800aa6a:	617b      	str	r3, [r7, #20]
   return(result);
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3314      	adds	r3, #20
 800aa7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa7c:	627a      	str	r2, [r7, #36]	@ 0x24
 800aa7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa80:	6a39      	ldr	r1, [r7, #32]
 800aa82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa84:	e841 2300 	strex	r3, r2, [r1]
 800aa88:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1e5      	bne.n	800aa5c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	e000      	b.n	800aa96 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800aa94:	2302      	movs	r3, #2
  }
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3730      	adds	r7, #48	@ 0x30
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0800b071 	.word	0x0800b071
 800aaa4:	0800b10b 	.word	0x0800b10b
 800aaa8:	0800b28f 	.word	0x0800b28f

0800aaac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	4613      	mov	r3, r2
 800aab8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b20      	cmp	r3, #32
 800aac4:	d112      	bne.n	800aaec <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <HAL_UART_Receive_DMA+0x26>
 800aacc:	88fb      	ldrh	r3, [r7, #6]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e00b      	b.n	800aaee <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aadc:	88fb      	ldrh	r3, [r7, #6]
 800aade:	461a      	mov	r2, r3
 800aae0:	68b9      	ldr	r1, [r7, #8]
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f000 fc1e 	bl	800b324 <UART_Start_Receive_DMA>
 800aae8:	4603      	mov	r3, r0
 800aaea:	e000      	b.n	800aaee <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800aaec:	2302      	movs	r3, #2
  }
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
	...

0800aaf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b0ba      	sub	sp, #232	@ 0xe8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	695b      	ldr	r3, [r3, #20]
 800ab1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ab24:	2300      	movs	r3, #0
 800ab26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ab2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab2e:	f003 030f 	and.w	r3, r3, #15
 800ab32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ab36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10f      	bne.n	800ab5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab42:	f003 0320 	and.w	r3, r3, #32
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d009      	beq.n	800ab5e <HAL_UART_IRQHandler+0x66>
 800ab4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab4e:	f003 0320 	and.w	r3, r3, #32
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 fd85 	bl	800b666 <UART_Receive_IT>
      return;
 800ab5c:	e25b      	b.n	800b016 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ab5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f000 80de 	beq.w	800ad24 <HAL_UART_IRQHandler+0x22c>
 800ab68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab6c:	f003 0301 	and.w	r3, r3, #1
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d106      	bne.n	800ab82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ab74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f000 80d1 	beq.w	800ad24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ab82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00b      	beq.n	800aba6 <HAL_UART_IRQHandler+0xae>
 800ab8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d005      	beq.n	800aba6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab9e:	f043 0201 	orr.w	r2, r3, #1
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abaa:	f003 0304 	and.w	r3, r3, #4
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00b      	beq.n	800abca <HAL_UART_IRQHandler+0xd2>
 800abb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abb6:	f003 0301 	and.w	r3, r3, #1
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d005      	beq.n	800abca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abc2:	f043 0202 	orr.w	r2, r3, #2
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800abca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abce:	f003 0302 	and.w	r3, r3, #2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00b      	beq.n	800abee <HAL_UART_IRQHandler+0xf6>
 800abd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d005      	beq.n	800abee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abe6:	f043 0204 	orr.w	r2, r3, #4
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800abee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abf2:	f003 0308 	and.w	r3, r3, #8
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d011      	beq.n	800ac1e <HAL_UART_IRQHandler+0x126>
 800abfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abfe:	f003 0320 	and.w	r3, r3, #32
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d105      	bne.n	800ac12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ac06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac0a:	f003 0301 	and.w	r3, r3, #1
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d005      	beq.n	800ac1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac16:	f043 0208 	orr.w	r2, r3, #8
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f000 81f2 	beq.w	800b00c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac2c:	f003 0320 	and.w	r3, r3, #32
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d008      	beq.n	800ac46 <HAL_UART_IRQHandler+0x14e>
 800ac34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac38:	f003 0320 	and.w	r3, r3, #32
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fd10 	bl	800b666 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	695b      	ldr	r3, [r3, #20]
 800ac4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac50:	2b40      	cmp	r3, #64	@ 0x40
 800ac52:	bf0c      	ite	eq
 800ac54:	2301      	moveq	r3, #1
 800ac56:	2300      	movne	r3, #0
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac62:	f003 0308 	and.w	r3, r3, #8
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d103      	bne.n	800ac72 <HAL_UART_IRQHandler+0x17a>
 800ac6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d04f      	beq.n	800ad12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 fc18 	bl	800b4a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac82:	2b40      	cmp	r3, #64	@ 0x40
 800ac84:	d141      	bne.n	800ad0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	3314      	adds	r3, #20
 800ac8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac94:	e853 3f00 	ldrex	r3, [r3]
 800ac98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ac9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aca0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aca4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	3314      	adds	r3, #20
 800acae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800acb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800acb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800acbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800acc2:	e841 2300 	strex	r3, r2, [r1]
 800acc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800acca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1d9      	bne.n	800ac86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d013      	beq.n	800ad02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acde:	4a7e      	ldr	r2, [pc, #504]	@ (800aed8 <HAL_UART_IRQHandler+0x3e0>)
 800ace0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fb fe74 	bl	80069d4 <HAL_DMA_Abort_IT>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d016      	beq.n	800ad20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800acfc:	4610      	mov	r0, r2
 800acfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad00:	e00e      	b.n	800ad20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f99e 	bl	800b044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad08:	e00a      	b.n	800ad20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 f99a 	bl	800b044 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad10:	e006      	b.n	800ad20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 f996 	bl	800b044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ad1e:	e175      	b.n	800b00c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad20:	bf00      	nop
    return;
 800ad22:	e173      	b.n	800b00c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	f040 814f 	bne.w	800afcc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ad2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad32:	f003 0310 	and.w	r3, r3, #16
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 8148 	beq.w	800afcc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ad3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad40:	f003 0310 	and.w	r3, r3, #16
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f000 8141 	beq.w	800afcc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	60bb      	str	r3, [r7, #8]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	60bb      	str	r3, [r7, #8]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	60bb      	str	r3, [r7, #8]
 800ad5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	695b      	ldr	r3, [r3, #20]
 800ad66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad6a:	2b40      	cmp	r3, #64	@ 0x40
 800ad6c:	f040 80b6 	bne.w	800aedc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ad7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f000 8145 	beq.w	800b010 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ad8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	f080 813e 	bcs.w	800b010 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ada0:	69db      	ldr	r3, [r3, #28]
 800ada2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ada6:	f000 8088 	beq.w	800aeba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	330c      	adds	r3, #12
 800adb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800adb8:	e853 3f00 	ldrex	r3, [r3]
 800adbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800adc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800adc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	330c      	adds	r3, #12
 800add2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800add6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800adda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ade2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ade6:	e841 2300 	strex	r3, r2, [r1]
 800adea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800adee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1d9      	bne.n	800adaa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3314      	adds	r3, #20
 800adfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae00:	e853 3f00 	ldrex	r3, [r3]
 800ae04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ae06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae08:	f023 0301 	bic.w	r3, r3, #1
 800ae0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	3314      	adds	r3, #20
 800ae16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ae1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ae1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ae22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ae26:	e841 2300 	strex	r3, r2, [r1]
 800ae2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ae2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1e1      	bne.n	800adf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	3314      	adds	r3, #20
 800ae38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae3c:	e853 3f00 	ldrex	r3, [r3]
 800ae40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ae42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	3314      	adds	r3, #20
 800ae52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ae56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ae58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ae5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ae5e:	e841 2300 	strex	r3, r2, [r1]
 800ae62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ae64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1e3      	bne.n	800ae32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2220      	movs	r2, #32
 800ae6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	330c      	adds	r3, #12
 800ae7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae82:	e853 3f00 	ldrex	r3, [r3]
 800ae86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae8a:	f023 0310 	bic.w	r3, r3, #16
 800ae8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	330c      	adds	r3, #12
 800ae98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ae9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ae9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aea2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aea4:	e841 2300 	strex	r3, r2, [r1]
 800aea8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aeaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1e3      	bne.n	800ae78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fb fd1d 	bl	80068f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2202      	movs	r2, #2
 800aebe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	b29b      	uxth	r3, r3
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 f8c1 	bl	800b058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aed6:	e09b      	b.n	800b010 <HAL_UART_IRQHandler+0x518>
 800aed8:	0800b56f 	.word	0x0800b56f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 808e 	beq.w	800b014 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800aef8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f000 8089 	beq.w	800b014 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	330c      	adds	r3, #12
 800af08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af0c:	e853 3f00 	ldrex	r3, [r3]
 800af10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	330c      	adds	r3, #12
 800af22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800af26:	647a      	str	r2, [r7, #68]	@ 0x44
 800af28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af2e:	e841 2300 	strex	r3, r2, [r1]
 800af32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1e3      	bne.n	800af02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	3314      	adds	r3, #20
 800af40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af44:	e853 3f00 	ldrex	r3, [r3]
 800af48:	623b      	str	r3, [r7, #32]
   return(result);
 800af4a:	6a3b      	ldr	r3, [r7, #32]
 800af4c:	f023 0301 	bic.w	r3, r3, #1
 800af50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	3314      	adds	r3, #20
 800af5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800af5e:	633a      	str	r2, [r7, #48]	@ 0x30
 800af60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af66:	e841 2300 	strex	r3, r2, [r1]
 800af6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1e3      	bne.n	800af3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2220      	movs	r2, #32
 800af76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	330c      	adds	r3, #12
 800af86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	e853 3f00 	ldrex	r3, [r3]
 800af8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f023 0310 	bic.w	r3, r3, #16
 800af96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	330c      	adds	r3, #12
 800afa0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800afa4:	61fa      	str	r2, [r7, #28]
 800afa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa8:	69b9      	ldr	r1, [r7, #24]
 800afaa:	69fa      	ldr	r2, [r7, #28]
 800afac:	e841 2300 	strex	r3, r2, [r1]
 800afb0:	617b      	str	r3, [r7, #20]
   return(result);
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1e3      	bne.n	800af80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2202      	movs	r2, #2
 800afbc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800afbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 f847 	bl	800b058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800afca:	e023      	b.n	800b014 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800afcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d009      	beq.n	800afec <HAL_UART_IRQHandler+0x4f4>
 800afd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d003      	beq.n	800afec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fad6 	bl	800b596 <UART_Transmit_IT>
    return;
 800afea:	e014      	b.n	800b016 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800afec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00e      	beq.n	800b016 <HAL_UART_IRQHandler+0x51e>
 800aff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800affc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b000:	2b00      	cmp	r3, #0
 800b002:	d008      	beq.n	800b016 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 fb16 	bl	800b636 <UART_EndTransmit_IT>
    return;
 800b00a:	e004      	b.n	800b016 <HAL_UART_IRQHandler+0x51e>
    return;
 800b00c:	bf00      	nop
 800b00e:	e002      	b.n	800b016 <HAL_UART_IRQHandler+0x51e>
      return;
 800b010:	bf00      	nop
 800b012:	e000      	b.n	800b016 <HAL_UART_IRQHandler+0x51e>
      return;
 800b014:	bf00      	nop
  }
}
 800b016:	37e8      	adds	r7, #232	@ 0xe8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b024:	bf00      	nop
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b038:	bf00      	nop
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b04c:	bf00      	nop
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	460b      	mov	r3, r1
 800b062:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b064:	bf00      	nop
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b090      	sub	sp, #64	@ 0x40
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d137      	bne.n	800b0fc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b08c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b08e:	2200      	movs	r2, #0
 800b090:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	3314      	adds	r3, #20
 800b098:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b09c:	e853 3f00 	ldrex	r3, [r3]
 800b0a0:	623b      	str	r3, [r7, #32]
   return(result);
 800b0a2:	6a3b      	ldr	r3, [r7, #32]
 800b0a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b0aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	3314      	adds	r3, #20
 800b0b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0b2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b0b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0ba:	e841 2300 	strex	r3, r2, [r1]
 800b0be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d1e5      	bne.n	800b092 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	330c      	adds	r3, #12
 800b0cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	e853 3f00 	ldrex	r3, [r3]
 800b0d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	330c      	adds	r3, #12
 800b0e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0e6:	61fa      	str	r2, [r7, #28]
 800b0e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ea:	69b9      	ldr	r1, [r7, #24]
 800b0ec:	69fa      	ldr	r2, [r7, #28]
 800b0ee:	e841 2300 	strex	r3, r2, [r1]
 800b0f2:	617b      	str	r3, [r7, #20]
   return(result);
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1e5      	bne.n	800b0c6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0fa:	e002      	b.n	800b102 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b0fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b0fe:	f7f6 fea5 	bl	8001e4c <HAL_UART_TxCpltCallback>
}
 800b102:	bf00      	nop
 800b104:	3740      	adds	r7, #64	@ 0x40
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b116:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f7ff ff7f 	bl	800b01c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b11e:	bf00      	nop
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b09c      	sub	sp, #112	@ 0x70
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b132:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d172      	bne.n	800b228 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b144:	2200      	movs	r2, #0
 800b146:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	330c      	adds	r3, #12
 800b14e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b152:	e853 3f00 	ldrex	r3, [r3]
 800b156:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b15a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b15e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	330c      	adds	r3, #12
 800b166:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b168:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b16a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b16e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b170:	e841 2300 	strex	r3, r2, [r1]
 800b174:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1e5      	bne.n	800b148 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b17c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3314      	adds	r3, #20
 800b182:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b186:	e853 3f00 	ldrex	r3, [r3]
 800b18a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b18c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b18e:	f023 0301 	bic.w	r3, r3, #1
 800b192:	667b      	str	r3, [r7, #100]	@ 0x64
 800b194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	3314      	adds	r3, #20
 800b19a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b19c:	647a      	str	r2, [r7, #68]	@ 0x44
 800b19e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b1a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b1a4:	e841 2300 	strex	r3, r2, [r1]
 800b1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b1aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d1e5      	bne.n	800b17c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	3314      	adds	r3, #20
 800b1b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ba:	e853 3f00 	ldrex	r3, [r3]
 800b1be:	623b      	str	r3, [r7, #32]
   return(result);
 800b1c0:	6a3b      	ldr	r3, [r7, #32]
 800b1c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1c6:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	3314      	adds	r3, #20
 800b1ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b1d0:	633a      	str	r2, [r7, #48]	@ 0x30
 800b1d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1d8:	e841 2300 	strex	r3, r2, [r1]
 800b1dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1e5      	bne.n	800b1b0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b1e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1e6:	2220      	movs	r2, #32
 800b1e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d119      	bne.n	800b228 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	330c      	adds	r3, #12
 800b1fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	e853 3f00 	ldrex	r3, [r3]
 800b202:	60fb      	str	r3, [r7, #12]
   return(result);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f023 0310 	bic.w	r3, r3, #16
 800b20a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b20c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	330c      	adds	r3, #12
 800b212:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b214:	61fa      	str	r2, [r7, #28]
 800b216:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b218:	69b9      	ldr	r1, [r7, #24]
 800b21a:	69fa      	ldr	r2, [r7, #28]
 800b21c:	e841 2300 	strex	r3, r2, [r1]
 800b220:	617b      	str	r3, [r7, #20]
   return(result);
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1e5      	bne.n	800b1f4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b22a:	2200      	movs	r2, #0
 800b22c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b22e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b232:	2b01      	cmp	r3, #1
 800b234:	d106      	bne.n	800b244 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b238:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b23a:	4619      	mov	r1, r3
 800b23c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b23e:	f7ff ff0b 	bl	800b058 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b242:	e002      	b.n	800b24a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b244:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b246:	f7f7 f88b 	bl	8002360 <HAL_UART_RxCpltCallback>
}
 800b24a:	bf00      	nop
 800b24c:	3770      	adds	r7, #112	@ 0x70
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b084      	sub	sp, #16
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b25e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2201      	movs	r2, #1
 800b264:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d108      	bne.n	800b280 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b272:	085b      	lsrs	r3, r3, #1
 800b274:	b29b      	uxth	r3, r3
 800b276:	4619      	mov	r1, r3
 800b278:	68f8      	ldr	r0, [r7, #12]
 800b27a:	f7ff feed 	bl	800b058 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b27e:	e002      	b.n	800b286 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f7ff fed5 	bl	800b030 <HAL_UART_RxHalfCpltCallback>
}
 800b286:	bf00      	nop
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b084      	sub	sp, #16
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b296:	2300      	movs	r3, #0
 800b298:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b29e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	695b      	ldr	r3, [r3, #20]
 800b2a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2aa:	2b80      	cmp	r3, #128	@ 0x80
 800b2ac:	bf0c      	ite	eq
 800b2ae:	2301      	moveq	r3, #1
 800b2b0:	2300      	movne	r3, #0
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	2b21      	cmp	r3, #33	@ 0x21
 800b2c0:	d108      	bne.n	800b2d4 <UART_DMAError+0x46>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d005      	beq.n	800b2d4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800b2ce:	68b8      	ldr	r0, [r7, #8]
 800b2d0:	f000 f8c2 	bl	800b458 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	695b      	ldr	r3, [r3, #20]
 800b2da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2de:	2b40      	cmp	r3, #64	@ 0x40
 800b2e0:	bf0c      	ite	eq
 800b2e2:	2301      	moveq	r3, #1
 800b2e4:	2300      	movne	r3, #0
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b22      	cmp	r3, #34	@ 0x22
 800b2f4:	d108      	bne.n	800b308 <UART_DMAError+0x7a>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d005      	beq.n	800b308 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2200      	movs	r2, #0
 800b300:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800b302:	68b8      	ldr	r0, [r7, #8]
 800b304:	f000 f8d0 	bl	800b4a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b30c:	f043 0210 	orr.w	r2, r3, #16
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b314:	68b8      	ldr	r0, [r7, #8]
 800b316:	f7ff fe95 	bl	800b044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b31a:	bf00      	nop
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
	...

0800b324 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b098      	sub	sp, #96	@ 0x60
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	4613      	mov	r3, r2
 800b330:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	88fa      	ldrh	r2, [r7, #6]
 800b33c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2222      	movs	r2, #34	@ 0x22
 800b348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b350:	4a3e      	ldr	r2, [pc, #248]	@ (800b44c <UART_Start_Receive_DMA+0x128>)
 800b352:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b358:	4a3d      	ldr	r2, [pc, #244]	@ (800b450 <UART_Start_Receive_DMA+0x12c>)
 800b35a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b360:	4a3c      	ldr	r2, [pc, #240]	@ (800b454 <UART_Start_Receive_DMA+0x130>)
 800b362:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b368:	2200      	movs	r2, #0
 800b36a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b36c:	f107 0308 	add.w	r3, r7, #8
 800b370:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	3304      	adds	r3, #4
 800b37c:	4619      	mov	r1, r3
 800b37e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	88fb      	ldrh	r3, [r7, #6]
 800b384:	f7fb fa5e 	bl	8006844 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b388:	2300      	movs	r3, #0
 800b38a:	613b      	str	r3, [r7, #16]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	613b      	str	r3, [r7, #16]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	613b      	str	r3, [r7, #16]
 800b39c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d019      	beq.n	800b3da <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	330c      	adds	r3, #12
 800b3ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3b0:	e853 3f00 	ldrex	r3, [r3]
 800b3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	330c      	adds	r3, #12
 800b3c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b3c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b3cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3ce:	e841 2300 	strex	r3, r2, [r1]
 800b3d2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b3d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1e5      	bne.n	800b3a6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	3314      	adds	r3, #20
 800b3e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3e4:	e853 3f00 	ldrex	r3, [r3]
 800b3e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3ec:	f043 0301 	orr.w	r3, r3, #1
 800b3f0:	657b      	str	r3, [r7, #84]	@ 0x54
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	3314      	adds	r3, #20
 800b3f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b3fa:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b3fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b400:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b402:	e841 2300 	strex	r3, r2, [r1]
 800b406:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1e5      	bne.n	800b3da <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	3314      	adds	r3, #20
 800b414:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	e853 3f00 	ldrex	r3, [r3]
 800b41c:	617b      	str	r3, [r7, #20]
   return(result);
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b424:	653b      	str	r3, [r7, #80]	@ 0x50
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	3314      	adds	r3, #20
 800b42c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b42e:	627a      	str	r2, [r7, #36]	@ 0x24
 800b430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b432:	6a39      	ldr	r1, [r7, #32]
 800b434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b436:	e841 2300 	strex	r3, r2, [r1]
 800b43a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1e5      	bne.n	800b40e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3760      	adds	r7, #96	@ 0x60
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	0800b127 	.word	0x0800b127
 800b450:	0800b253 	.word	0x0800b253
 800b454:	0800b28f 	.word	0x0800b28f

0800b458 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b458:	b480      	push	{r7}
 800b45a:	b089      	sub	sp, #36	@ 0x24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	330c      	adds	r3, #12
 800b466:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	e853 3f00 	ldrex	r3, [r3]
 800b46e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b476:	61fb      	str	r3, [r7, #28]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	330c      	adds	r3, #12
 800b47e:	69fa      	ldr	r2, [r7, #28]
 800b480:	61ba      	str	r2, [r7, #24]
 800b482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b484:	6979      	ldr	r1, [r7, #20]
 800b486:	69ba      	ldr	r2, [r7, #24]
 800b488:	e841 2300 	strex	r3, r2, [r1]
 800b48c:	613b      	str	r3, [r7, #16]
   return(result);
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1e5      	bne.n	800b460 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2220      	movs	r2, #32
 800b498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800b49c:	bf00      	nop
 800b49e:	3724      	adds	r7, #36	@ 0x24
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b095      	sub	sp, #84	@ 0x54
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	330c      	adds	r3, #12
 800b4b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ba:	e853 3f00 	ldrex	r3, [r3]
 800b4be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	330c      	adds	r3, #12
 800b4ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b4d0:	643a      	str	r2, [r7, #64]	@ 0x40
 800b4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b4d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4d8:	e841 2300 	strex	r3, r2, [r1]
 800b4dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1e5      	bne.n	800b4b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	3314      	adds	r3, #20
 800b4ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ec:	6a3b      	ldr	r3, [r7, #32]
 800b4ee:	e853 3f00 	ldrex	r3, [r3]
 800b4f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	f023 0301 	bic.w	r3, r3, #1
 800b4fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	3314      	adds	r3, #20
 800b502:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b504:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b506:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b508:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b50a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b50c:	e841 2300 	strex	r3, r2, [r1]
 800b510:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1e5      	bne.n	800b4e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d119      	bne.n	800b554 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	330c      	adds	r3, #12
 800b526:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	e853 3f00 	ldrex	r3, [r3]
 800b52e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	f023 0310 	bic.w	r3, r3, #16
 800b536:	647b      	str	r3, [r7, #68]	@ 0x44
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	330c      	adds	r3, #12
 800b53e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b540:	61ba      	str	r2, [r7, #24]
 800b542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b544:	6979      	ldr	r1, [r7, #20]
 800b546:	69ba      	ldr	r2, [r7, #24]
 800b548:	e841 2300 	strex	r3, r2, [r1]
 800b54c:	613b      	str	r3, [r7, #16]
   return(result);
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1e5      	bne.n	800b520 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2220      	movs	r2, #32
 800b558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b562:	bf00      	nop
 800b564:	3754      	adds	r7, #84	@ 0x54
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b084      	sub	sp, #16
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b57a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2200      	movs	r2, #0
 800b580:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f7ff fd5b 	bl	800b044 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b58e:	bf00      	nop
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b596:	b480      	push	{r7}
 800b598:	b085      	sub	sp, #20
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b21      	cmp	r3, #33	@ 0x21
 800b5a8:	d13e      	bne.n	800b628 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5b2:	d114      	bne.n	800b5de <UART_Transmit_IT+0x48>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d110      	bne.n	800b5de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a1b      	ldr	r3, [r3, #32]
 800b5c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	1c9a      	adds	r2, r3, #2
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	621a      	str	r2, [r3, #32]
 800b5dc:	e008      	b.n	800b5f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a1b      	ldr	r3, [r3, #32]
 800b5e2:	1c59      	adds	r1, r3, #1
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	6211      	str	r1, [r2, #32]
 800b5e8:	781a      	ldrb	r2, [r3, #0]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10f      	bne.n	800b624 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68da      	ldr	r2, [r3, #12]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b612:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68da      	ldr	r2, [r3, #12]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b622:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b624:	2300      	movs	r3, #0
 800b626:	e000      	b.n	800b62a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b628:	2302      	movs	r3, #2
  }
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3714      	adds	r7, #20
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr

0800b636 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b082      	sub	sp, #8
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	68da      	ldr	r2, [r3, #12]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b64c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2220      	movs	r2, #32
 800b652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f7f6 fbf8 	bl	8001e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b08c      	sub	sp, #48	@ 0x30
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b674:	b2db      	uxtb	r3, r3
 800b676:	2b22      	cmp	r3, #34	@ 0x22
 800b678:	f040 80ae 	bne.w	800b7d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b684:	d117      	bne.n	800b6b6 <UART_Receive_IT+0x50>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d113      	bne.n	800b6b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b68e:	2300      	movs	r3, #0
 800b690:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b696:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ae:	1c9a      	adds	r2, r3, #2
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	629a      	str	r2, [r3, #40]	@ 0x28
 800b6b4:	e026      	b.n	800b704 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6c8:	d007      	beq.n	800b6da <UART_Receive_IT+0x74>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	689b      	ldr	r3, [r3, #8]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10a      	bne.n	800b6e8 <UART_Receive_IT+0x82>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d106      	bne.n	800b6e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	b2da      	uxtb	r2, r3
 800b6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e4:	701a      	strb	r2, [r3, #0]
 800b6e6:	e008      	b.n	800b6fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b708:	b29b      	uxth	r3, r3
 800b70a:	3b01      	subs	r3, #1
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	4619      	mov	r1, r3
 800b712:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b714:	2b00      	cmp	r3, #0
 800b716:	d15d      	bne.n	800b7d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68da      	ldr	r2, [r3, #12]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f022 0220 	bic.w	r2, r2, #32
 800b726:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	68da      	ldr	r2, [r3, #12]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b736:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	695a      	ldr	r2, [r3, #20]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f022 0201 	bic.w	r2, r2, #1
 800b746:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2220      	movs	r2, #32
 800b74c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d135      	bne.n	800b7ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	330c      	adds	r3, #12
 800b76a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	e853 3f00 	ldrex	r3, [r3]
 800b772:	613b      	str	r3, [r7, #16]
   return(result);
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	f023 0310 	bic.w	r3, r3, #16
 800b77a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	330c      	adds	r3, #12
 800b782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b784:	623a      	str	r2, [r7, #32]
 800b786:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b788:	69f9      	ldr	r1, [r7, #28]
 800b78a:	6a3a      	ldr	r2, [r7, #32]
 800b78c:	e841 2300 	strex	r3, r2, [r1]
 800b790:	61bb      	str	r3, [r7, #24]
   return(result);
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1e5      	bne.n	800b764 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 0310 	and.w	r3, r3, #16
 800b7a2:	2b10      	cmp	r3, #16
 800b7a4:	d10a      	bne.n	800b7bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	60fb      	str	r3, [r7, #12]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	60fb      	str	r3, [r7, #12]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	60fb      	str	r3, [r7, #12]
 800b7ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f7ff fc48 	bl	800b058 <HAL_UARTEx_RxEventCallback>
 800b7c8:	e002      	b.n	800b7d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7f6 fdc8 	bl	8002360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	e002      	b.n	800b7da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	e000      	b.n	800b7da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b7d8:	2302      	movs	r3, #2
  }
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3730      	adds	r7, #48	@ 0x30
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
	...

0800b7e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7e8:	b0c0      	sub	sp, #256	@ 0x100
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b7fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b800:	68d9      	ldr	r1, [r3, #12]
 800b802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	ea40 0301 	orr.w	r3, r0, r1
 800b80c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b80e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b812:	689a      	ldr	r2, [r3, #8]
 800b814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	431a      	orrs	r2, r3
 800b81c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	431a      	orrs	r2, r3
 800b824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b828:	69db      	ldr	r3, [r3, #28]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b83c:	f021 010c 	bic.w	r1, r1, #12
 800b840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b84a:	430b      	orrs	r3, r1
 800b84c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b84e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b85a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b85e:	6999      	ldr	r1, [r3, #24]
 800b860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	ea40 0301 	orr.w	r3, r0, r1
 800b86a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b86c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	4b8f      	ldr	r3, [pc, #572]	@ (800bab0 <UART_SetConfig+0x2cc>)
 800b874:	429a      	cmp	r2, r3
 800b876:	d005      	beq.n	800b884 <UART_SetConfig+0xa0>
 800b878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	4b8d      	ldr	r3, [pc, #564]	@ (800bab4 <UART_SetConfig+0x2d0>)
 800b880:	429a      	cmp	r2, r3
 800b882:	d104      	bne.n	800b88e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b884:	f7fe fb64 	bl	8009f50 <HAL_RCC_GetPCLK2Freq>
 800b888:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b88c:	e003      	b.n	800b896 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b88e:	f7fe fb4b 	bl	8009f28 <HAL_RCC_GetPCLK1Freq>
 800b892:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b89a:	69db      	ldr	r3, [r3, #28]
 800b89c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8a0:	f040 810c 	bne.w	800babc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b8ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b8b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b8b6:	4622      	mov	r2, r4
 800b8b8:	462b      	mov	r3, r5
 800b8ba:	1891      	adds	r1, r2, r2
 800b8bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b8be:	415b      	adcs	r3, r3
 800b8c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b8c6:	4621      	mov	r1, r4
 800b8c8:	eb12 0801 	adds.w	r8, r2, r1
 800b8cc:	4629      	mov	r1, r5
 800b8ce:	eb43 0901 	adc.w	r9, r3, r1
 800b8d2:	f04f 0200 	mov.w	r2, #0
 800b8d6:	f04f 0300 	mov.w	r3, #0
 800b8da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b8de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b8e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b8e6:	4690      	mov	r8, r2
 800b8e8:	4699      	mov	r9, r3
 800b8ea:	4623      	mov	r3, r4
 800b8ec:	eb18 0303 	adds.w	r3, r8, r3
 800b8f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b8f4:	462b      	mov	r3, r5
 800b8f6:	eb49 0303 	adc.w	r3, r9, r3
 800b8fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b8fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b90a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b90e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b912:	460b      	mov	r3, r1
 800b914:	18db      	adds	r3, r3, r3
 800b916:	653b      	str	r3, [r7, #80]	@ 0x50
 800b918:	4613      	mov	r3, r2
 800b91a:	eb42 0303 	adc.w	r3, r2, r3
 800b91e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b920:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b924:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b928:	f7f5 f9be 	bl	8000ca8 <__aeabi_uldivmod>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4b61      	ldr	r3, [pc, #388]	@ (800bab8 <UART_SetConfig+0x2d4>)
 800b932:	fba3 2302 	umull	r2, r3, r3, r2
 800b936:	095b      	lsrs	r3, r3, #5
 800b938:	011c      	lsls	r4, r3, #4
 800b93a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b93e:	2200      	movs	r2, #0
 800b940:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b944:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b948:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b94c:	4642      	mov	r2, r8
 800b94e:	464b      	mov	r3, r9
 800b950:	1891      	adds	r1, r2, r2
 800b952:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b954:	415b      	adcs	r3, r3
 800b956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b958:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b95c:	4641      	mov	r1, r8
 800b95e:	eb12 0a01 	adds.w	sl, r2, r1
 800b962:	4649      	mov	r1, r9
 800b964:	eb43 0b01 	adc.w	fp, r3, r1
 800b968:	f04f 0200 	mov.w	r2, #0
 800b96c:	f04f 0300 	mov.w	r3, #0
 800b970:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b974:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b978:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b97c:	4692      	mov	sl, r2
 800b97e:	469b      	mov	fp, r3
 800b980:	4643      	mov	r3, r8
 800b982:	eb1a 0303 	adds.w	r3, sl, r3
 800b986:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b98a:	464b      	mov	r3, r9
 800b98c:	eb4b 0303 	adc.w	r3, fp, r3
 800b990:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b9a0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b9a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	18db      	adds	r3, r3, r3
 800b9ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	eb42 0303 	adc.w	r3, r2, r3
 800b9b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b9ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b9be:	f7f5 f973 	bl	8000ca8 <__aeabi_uldivmod>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	4b3b      	ldr	r3, [pc, #236]	@ (800bab8 <UART_SetConfig+0x2d4>)
 800b9ca:	fba3 2301 	umull	r2, r3, r3, r1
 800b9ce:	095b      	lsrs	r3, r3, #5
 800b9d0:	2264      	movs	r2, #100	@ 0x64
 800b9d2:	fb02 f303 	mul.w	r3, r2, r3
 800b9d6:	1acb      	subs	r3, r1, r3
 800b9d8:	00db      	lsls	r3, r3, #3
 800b9da:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b9de:	4b36      	ldr	r3, [pc, #216]	@ (800bab8 <UART_SetConfig+0x2d4>)
 800b9e0:	fba3 2302 	umull	r2, r3, r3, r2
 800b9e4:	095b      	lsrs	r3, r3, #5
 800b9e6:	005b      	lsls	r3, r3, #1
 800b9e8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b9ec:	441c      	add	r4, r3
 800b9ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b9f8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b9fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ba00:	4642      	mov	r2, r8
 800ba02:	464b      	mov	r3, r9
 800ba04:	1891      	adds	r1, r2, r2
 800ba06:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ba08:	415b      	adcs	r3, r3
 800ba0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ba10:	4641      	mov	r1, r8
 800ba12:	1851      	adds	r1, r2, r1
 800ba14:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba16:	4649      	mov	r1, r9
 800ba18:	414b      	adcs	r3, r1
 800ba1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba1c:	f04f 0200 	mov.w	r2, #0
 800ba20:	f04f 0300 	mov.w	r3, #0
 800ba24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ba28:	4659      	mov	r1, fp
 800ba2a:	00cb      	lsls	r3, r1, #3
 800ba2c:	4651      	mov	r1, sl
 800ba2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba32:	4651      	mov	r1, sl
 800ba34:	00ca      	lsls	r2, r1, #3
 800ba36:	4610      	mov	r0, r2
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	4642      	mov	r2, r8
 800ba3e:	189b      	adds	r3, r3, r2
 800ba40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ba44:	464b      	mov	r3, r9
 800ba46:	460a      	mov	r2, r1
 800ba48:	eb42 0303 	adc.w	r3, r2, r3
 800ba4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ba50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ba5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ba60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ba64:	460b      	mov	r3, r1
 800ba66:	18db      	adds	r3, r3, r3
 800ba68:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	eb42 0303 	adc.w	r3, r2, r3
 800ba70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ba76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ba7a:	f7f5 f915 	bl	8000ca8 <__aeabi_uldivmod>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	4b0d      	ldr	r3, [pc, #52]	@ (800bab8 <UART_SetConfig+0x2d4>)
 800ba84:	fba3 1302 	umull	r1, r3, r3, r2
 800ba88:	095b      	lsrs	r3, r3, #5
 800ba8a:	2164      	movs	r1, #100	@ 0x64
 800ba8c:	fb01 f303 	mul.w	r3, r1, r3
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	00db      	lsls	r3, r3, #3
 800ba94:	3332      	adds	r3, #50	@ 0x32
 800ba96:	4a08      	ldr	r2, [pc, #32]	@ (800bab8 <UART_SetConfig+0x2d4>)
 800ba98:	fba2 2303 	umull	r2, r3, r2, r3
 800ba9c:	095b      	lsrs	r3, r3, #5
 800ba9e:	f003 0207 	and.w	r2, r3, #7
 800baa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4422      	add	r2, r4
 800baaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800baac:	e106      	b.n	800bcbc <UART_SetConfig+0x4d8>
 800baae:	bf00      	nop
 800bab0:	40011000 	.word	0x40011000
 800bab4:	40011400 	.word	0x40011400
 800bab8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800babc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bac0:	2200      	movs	r2, #0
 800bac2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bac6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800baca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bace:	4642      	mov	r2, r8
 800bad0:	464b      	mov	r3, r9
 800bad2:	1891      	adds	r1, r2, r2
 800bad4:	6239      	str	r1, [r7, #32]
 800bad6:	415b      	adcs	r3, r3
 800bad8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bada:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bade:	4641      	mov	r1, r8
 800bae0:	1854      	adds	r4, r2, r1
 800bae2:	4649      	mov	r1, r9
 800bae4:	eb43 0501 	adc.w	r5, r3, r1
 800bae8:	f04f 0200 	mov.w	r2, #0
 800baec:	f04f 0300 	mov.w	r3, #0
 800baf0:	00eb      	lsls	r3, r5, #3
 800baf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800baf6:	00e2      	lsls	r2, r4, #3
 800baf8:	4614      	mov	r4, r2
 800bafa:	461d      	mov	r5, r3
 800bafc:	4643      	mov	r3, r8
 800bafe:	18e3      	adds	r3, r4, r3
 800bb00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bb04:	464b      	mov	r3, r9
 800bb06:	eb45 0303 	adc.w	r3, r5, r3
 800bb0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bb0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bb1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bb1e:	f04f 0200 	mov.w	r2, #0
 800bb22:	f04f 0300 	mov.w	r3, #0
 800bb26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	008b      	lsls	r3, r1, #2
 800bb2e:	4621      	mov	r1, r4
 800bb30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb34:	4621      	mov	r1, r4
 800bb36:	008a      	lsls	r2, r1, #2
 800bb38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bb3c:	f7f5 f8b4 	bl	8000ca8 <__aeabi_uldivmod>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	4b60      	ldr	r3, [pc, #384]	@ (800bcc8 <UART_SetConfig+0x4e4>)
 800bb46:	fba3 2302 	umull	r2, r3, r3, r2
 800bb4a:	095b      	lsrs	r3, r3, #5
 800bb4c:	011c      	lsls	r4, r3, #4
 800bb4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb52:	2200      	movs	r2, #0
 800bb54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bb58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bb5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bb60:	4642      	mov	r2, r8
 800bb62:	464b      	mov	r3, r9
 800bb64:	1891      	adds	r1, r2, r2
 800bb66:	61b9      	str	r1, [r7, #24]
 800bb68:	415b      	adcs	r3, r3
 800bb6a:	61fb      	str	r3, [r7, #28]
 800bb6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb70:	4641      	mov	r1, r8
 800bb72:	1851      	adds	r1, r2, r1
 800bb74:	6139      	str	r1, [r7, #16]
 800bb76:	4649      	mov	r1, r9
 800bb78:	414b      	adcs	r3, r1
 800bb7a:	617b      	str	r3, [r7, #20]
 800bb7c:	f04f 0200 	mov.w	r2, #0
 800bb80:	f04f 0300 	mov.w	r3, #0
 800bb84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb88:	4659      	mov	r1, fp
 800bb8a:	00cb      	lsls	r3, r1, #3
 800bb8c:	4651      	mov	r1, sl
 800bb8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb92:	4651      	mov	r1, sl
 800bb94:	00ca      	lsls	r2, r1, #3
 800bb96:	4610      	mov	r0, r2
 800bb98:	4619      	mov	r1, r3
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	4642      	mov	r2, r8
 800bb9e:	189b      	adds	r3, r3, r2
 800bba0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bba4:	464b      	mov	r3, r9
 800bba6:	460a      	mov	r2, r1
 800bba8:	eb42 0303 	adc.w	r3, r2, r3
 800bbac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bbb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bbba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bbbc:	f04f 0200 	mov.w	r2, #0
 800bbc0:	f04f 0300 	mov.w	r3, #0
 800bbc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bbc8:	4649      	mov	r1, r9
 800bbca:	008b      	lsls	r3, r1, #2
 800bbcc:	4641      	mov	r1, r8
 800bbce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbd2:	4641      	mov	r1, r8
 800bbd4:	008a      	lsls	r2, r1, #2
 800bbd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bbda:	f7f5 f865 	bl	8000ca8 <__aeabi_uldivmod>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	4611      	mov	r1, r2
 800bbe4:	4b38      	ldr	r3, [pc, #224]	@ (800bcc8 <UART_SetConfig+0x4e4>)
 800bbe6:	fba3 2301 	umull	r2, r3, r3, r1
 800bbea:	095b      	lsrs	r3, r3, #5
 800bbec:	2264      	movs	r2, #100	@ 0x64
 800bbee:	fb02 f303 	mul.w	r3, r2, r3
 800bbf2:	1acb      	subs	r3, r1, r3
 800bbf4:	011b      	lsls	r3, r3, #4
 800bbf6:	3332      	adds	r3, #50	@ 0x32
 800bbf8:	4a33      	ldr	r2, [pc, #204]	@ (800bcc8 <UART_SetConfig+0x4e4>)
 800bbfa:	fba2 2303 	umull	r2, r3, r2, r3
 800bbfe:	095b      	lsrs	r3, r3, #5
 800bc00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc04:	441c      	add	r4, r3
 800bc06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	673b      	str	r3, [r7, #112]	@ 0x70
 800bc0e:	677a      	str	r2, [r7, #116]	@ 0x74
 800bc10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bc14:	4642      	mov	r2, r8
 800bc16:	464b      	mov	r3, r9
 800bc18:	1891      	adds	r1, r2, r2
 800bc1a:	60b9      	str	r1, [r7, #8]
 800bc1c:	415b      	adcs	r3, r3
 800bc1e:	60fb      	str	r3, [r7, #12]
 800bc20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc24:	4641      	mov	r1, r8
 800bc26:	1851      	adds	r1, r2, r1
 800bc28:	6039      	str	r1, [r7, #0]
 800bc2a:	4649      	mov	r1, r9
 800bc2c:	414b      	adcs	r3, r1
 800bc2e:	607b      	str	r3, [r7, #4]
 800bc30:	f04f 0200 	mov.w	r2, #0
 800bc34:	f04f 0300 	mov.w	r3, #0
 800bc38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc3c:	4659      	mov	r1, fp
 800bc3e:	00cb      	lsls	r3, r1, #3
 800bc40:	4651      	mov	r1, sl
 800bc42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc46:	4651      	mov	r1, sl
 800bc48:	00ca      	lsls	r2, r1, #3
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	4603      	mov	r3, r0
 800bc50:	4642      	mov	r2, r8
 800bc52:	189b      	adds	r3, r3, r2
 800bc54:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc56:	464b      	mov	r3, r9
 800bc58:	460a      	mov	r2, r1
 800bc5a:	eb42 0303 	adc.w	r3, r2, r3
 800bc5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bc60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	663b      	str	r3, [r7, #96]	@ 0x60
 800bc6a:	667a      	str	r2, [r7, #100]	@ 0x64
 800bc6c:	f04f 0200 	mov.w	r2, #0
 800bc70:	f04f 0300 	mov.w	r3, #0
 800bc74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bc78:	4649      	mov	r1, r9
 800bc7a:	008b      	lsls	r3, r1, #2
 800bc7c:	4641      	mov	r1, r8
 800bc7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc82:	4641      	mov	r1, r8
 800bc84:	008a      	lsls	r2, r1, #2
 800bc86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bc8a:	f7f5 f80d 	bl	8000ca8 <__aeabi_uldivmod>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	460b      	mov	r3, r1
 800bc92:	4b0d      	ldr	r3, [pc, #52]	@ (800bcc8 <UART_SetConfig+0x4e4>)
 800bc94:	fba3 1302 	umull	r1, r3, r3, r2
 800bc98:	095b      	lsrs	r3, r3, #5
 800bc9a:	2164      	movs	r1, #100	@ 0x64
 800bc9c:	fb01 f303 	mul.w	r3, r1, r3
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	011b      	lsls	r3, r3, #4
 800bca4:	3332      	adds	r3, #50	@ 0x32
 800bca6:	4a08      	ldr	r2, [pc, #32]	@ (800bcc8 <UART_SetConfig+0x4e4>)
 800bca8:	fba2 2303 	umull	r2, r3, r2, r3
 800bcac:	095b      	lsrs	r3, r3, #5
 800bcae:	f003 020f 	and.w	r2, r3, #15
 800bcb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4422      	add	r2, r4
 800bcba:	609a      	str	r2, [r3, #8]
}
 800bcbc:	bf00      	nop
 800bcbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcc8:	51eb851f 	.word	0x51eb851f

0800bccc <__NVIC_SetPriority>:
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	6039      	str	r1, [r7, #0]
 800bcd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	db0a      	blt.n	800bcf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	b2da      	uxtb	r2, r3
 800bce4:	490c      	ldr	r1, [pc, #48]	@ (800bd18 <__NVIC_SetPriority+0x4c>)
 800bce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcea:	0112      	lsls	r2, r2, #4
 800bcec:	b2d2      	uxtb	r2, r2
 800bcee:	440b      	add	r3, r1
 800bcf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bcf4:	e00a      	b.n	800bd0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	4908      	ldr	r1, [pc, #32]	@ (800bd1c <__NVIC_SetPriority+0x50>)
 800bcfc:	79fb      	ldrb	r3, [r7, #7]
 800bcfe:	f003 030f 	and.w	r3, r3, #15
 800bd02:	3b04      	subs	r3, #4
 800bd04:	0112      	lsls	r2, r2, #4
 800bd06:	b2d2      	uxtb	r2, r2
 800bd08:	440b      	add	r3, r1
 800bd0a:	761a      	strb	r2, [r3, #24]
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr
 800bd18:	e000e100 	.word	0xe000e100
 800bd1c:	e000ed00 	.word	0xe000ed00

0800bd20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bd20:	b580      	push	{r7, lr}
 800bd22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bd24:	2100      	movs	r1, #0
 800bd26:	f06f 0004 	mvn.w	r0, #4
 800bd2a:	f7ff ffcf 	bl	800bccc <__NVIC_SetPriority>
#endif
}
 800bd2e:	bf00      	nop
 800bd30:	bd80      	pop	{r7, pc}
	...

0800bd34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd3a:	f3ef 8305 	mrs	r3, IPSR
 800bd3e:	603b      	str	r3, [r7, #0]
  return(result);
 800bd40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d003      	beq.n	800bd4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bd46:	f06f 0305 	mvn.w	r3, #5
 800bd4a:	607b      	str	r3, [r7, #4]
 800bd4c:	e00c      	b.n	800bd68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bd4e:	4b0a      	ldr	r3, [pc, #40]	@ (800bd78 <osKernelInitialize+0x44>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d105      	bne.n	800bd62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bd56:	4b08      	ldr	r3, [pc, #32]	@ (800bd78 <osKernelInitialize+0x44>)
 800bd58:	2201      	movs	r2, #1
 800bd5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	607b      	str	r3, [r7, #4]
 800bd60:	e002      	b.n	800bd68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bd62:	f04f 33ff 	mov.w	r3, #4294967295
 800bd66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bd68:	687b      	ldr	r3, [r7, #4]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	370c      	adds	r7, #12
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	20000c90 	.word	0x20000c90

0800bd7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd82:	f3ef 8305 	mrs	r3, IPSR
 800bd86:	603b      	str	r3, [r7, #0]
  return(result);
 800bd88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d003      	beq.n	800bd96 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bd8e:	f06f 0305 	mvn.w	r3, #5
 800bd92:	607b      	str	r3, [r7, #4]
 800bd94:	e010      	b.n	800bdb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bd96:	4b0b      	ldr	r3, [pc, #44]	@ (800bdc4 <osKernelStart+0x48>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d109      	bne.n	800bdb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bd9e:	f7ff ffbf 	bl	800bd20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bda2:	4b08      	ldr	r3, [pc, #32]	@ (800bdc4 <osKernelStart+0x48>)
 800bda4:	2202      	movs	r2, #2
 800bda6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bda8:	f001 fe90 	bl	800dacc <vTaskStartScheduler>
      stat = osOK;
 800bdac:	2300      	movs	r3, #0
 800bdae:	607b      	str	r3, [r7, #4]
 800bdb0:	e002      	b.n	800bdb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bdb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bdb8:	687b      	ldr	r3, [r7, #4]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	20000c90 	.word	0x20000c90

0800bdc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b08e      	sub	sp, #56	@ 0x38
 800bdcc:	af04      	add	r7, sp, #16
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdd8:	f3ef 8305 	mrs	r3, IPSR
 800bddc:	617b      	str	r3, [r7, #20]
  return(result);
 800bdde:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d17e      	bne.n	800bee2 <osThreadNew+0x11a>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d07b      	beq.n	800bee2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bdea:	2380      	movs	r3, #128	@ 0x80
 800bdec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bdee:	2318      	movs	r3, #24
 800bdf0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bdf6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdfa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d045      	beq.n	800be8e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d002      	beq.n	800be10 <osThreadNew+0x48>
        name = attr->name;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	699b      	ldr	r3, [r3, #24]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	699b      	ldr	r3, [r3, #24]
 800be1c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d008      	beq.n	800be36 <osThreadNew+0x6e>
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	2b38      	cmp	r3, #56	@ 0x38
 800be28:	d805      	bhi.n	800be36 <osThreadNew+0x6e>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	f003 0301 	and.w	r3, r3, #1
 800be32:	2b00      	cmp	r3, #0
 800be34:	d001      	beq.n	800be3a <osThreadNew+0x72>
        return (NULL);
 800be36:	2300      	movs	r3, #0
 800be38:	e054      	b.n	800bee4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	695b      	ldr	r3, [r3, #20]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d003      	beq.n	800be4a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	695b      	ldr	r3, [r3, #20]
 800be46:	089b      	lsrs	r3, r3, #2
 800be48:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	689b      	ldr	r3, [r3, #8]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00e      	beq.n	800be70 <osThreadNew+0xa8>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	2b5b      	cmp	r3, #91	@ 0x5b
 800be58:	d90a      	bls.n	800be70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d006      	beq.n	800be70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d002      	beq.n	800be70 <osThreadNew+0xa8>
        mem = 1;
 800be6a:	2301      	movs	r3, #1
 800be6c:	61bb      	str	r3, [r7, #24]
 800be6e:	e010      	b.n	800be92 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	689b      	ldr	r3, [r3, #8]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10c      	bne.n	800be92 <osThreadNew+0xca>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d108      	bne.n	800be92 <osThreadNew+0xca>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	691b      	ldr	r3, [r3, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d104      	bne.n	800be92 <osThreadNew+0xca>
          mem = 0;
 800be88:	2300      	movs	r3, #0
 800be8a:	61bb      	str	r3, [r7, #24]
 800be8c:	e001      	b.n	800be92 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800be8e:	2300      	movs	r3, #0
 800be90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	2b01      	cmp	r3, #1
 800be96:	d110      	bne.n	800beba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bea0:	9202      	str	r2, [sp, #8]
 800bea2:	9301      	str	r3, [sp, #4]
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	6a3a      	ldr	r2, [r7, #32]
 800beac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f001 fc30 	bl	800d714 <xTaskCreateStatic>
 800beb4:	4603      	mov	r3, r0
 800beb6:	613b      	str	r3, [r7, #16]
 800beb8:	e013      	b.n	800bee2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d110      	bne.n	800bee2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bec0:	6a3b      	ldr	r3, [r7, #32]
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	f107 0310 	add.w	r3, r7, #16
 800bec8:	9301      	str	r3, [sp, #4]
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f001 fc7e 	bl	800d7d4 <xTaskCreate>
 800bed8:	4603      	mov	r3, r0
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d001      	beq.n	800bee2 <osThreadNew+0x11a>
            hTask = NULL;
 800bede:	2300      	movs	r3, #0
 800bee0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bee2:	693b      	ldr	r3, [r7, #16]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3728      	adds	r7, #40	@ 0x28
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bef4:	f3ef 8305 	mrs	r3, IPSR
 800bef8:	60bb      	str	r3, [r7, #8]
  return(result);
 800befa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800befc:	2b00      	cmp	r3, #0
 800befe:	d003      	beq.n	800bf08 <osDelay+0x1c>
    stat = osErrorISR;
 800bf00:	f06f 0305 	mvn.w	r3, #5
 800bf04:	60fb      	str	r3, [r7, #12]
 800bf06:	e007      	b.n	800bf18 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d002      	beq.n	800bf18 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f001 fda4 	bl	800da60 <vTaskDelay>
    }
  }

  return (stat);
 800bf18:	68fb      	ldr	r3, [r7, #12]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b088      	sub	sp, #32
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf2e:	f3ef 8305 	mrs	r3, IPSR
 800bf32:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf34:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d174      	bne.n	800c024 <osMutexNew+0x102>
    if (attr != NULL) {
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d003      	beq.n	800bf48 <osMutexNew+0x26>
      type = attr->attr_bits;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	61bb      	str	r3, [r7, #24]
 800bf46:	e001      	b.n	800bf4c <osMutexNew+0x2a>
    } else {
      type = 0U;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d002      	beq.n	800bf5c <osMutexNew+0x3a>
      rmtx = 1U;
 800bf56:	2301      	movs	r3, #1
 800bf58:	617b      	str	r3, [r7, #20]
 800bf5a:	e001      	b.n	800bf60 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	f003 0308 	and.w	r3, r3, #8
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d15c      	bne.n	800c024 <osMutexNew+0x102>
      mem = -1;
 800bf6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf6e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d015      	beq.n	800bfa2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d006      	beq.n	800bf8c <osMutexNew+0x6a>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	2b4f      	cmp	r3, #79	@ 0x4f
 800bf84:	d902      	bls.n	800bf8c <osMutexNew+0x6a>
          mem = 1;
 800bf86:	2301      	movs	r3, #1
 800bf88:	613b      	str	r3, [r7, #16]
 800bf8a:	e00c      	b.n	800bfa6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d108      	bne.n	800bfa6 <osMutexNew+0x84>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d104      	bne.n	800bfa6 <osMutexNew+0x84>
            mem = 0;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	613b      	str	r3, [r7, #16]
 800bfa0:	e001      	b.n	800bfa6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d112      	bne.n	800bfd2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d007      	beq.n	800bfc2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	2004      	movs	r0, #4
 800bfba:	f000 fc3e 	bl	800c83a <xQueueCreateMutexStatic>
 800bfbe:	61f8      	str	r0, [r7, #28]
 800bfc0:	e016      	b.n	800bff0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	2001      	movs	r0, #1
 800bfca:	f000 fc36 	bl	800c83a <xQueueCreateMutexStatic>
 800bfce:	61f8      	str	r0, [r7, #28]
 800bfd0:	e00e      	b.n	800bff0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d10b      	bne.n	800bff0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d004      	beq.n	800bfe8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800bfde:	2004      	movs	r0, #4
 800bfe0:	f000 fc13 	bl	800c80a <xQueueCreateMutex>
 800bfe4:	61f8      	str	r0, [r7, #28]
 800bfe6:	e003      	b.n	800bff0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800bfe8:	2001      	movs	r0, #1
 800bfea:	f000 fc0e 	bl	800c80a <xQueueCreateMutex>
 800bfee:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00c      	beq.n	800c010 <osMutexNew+0xee>
        if (attr != NULL) {
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d003      	beq.n	800c004 <osMutexNew+0xe2>
          name = attr->name;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	60fb      	str	r3, [r7, #12]
 800c002:	e001      	b.n	800c008 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c004:	2300      	movs	r3, #0
 800c006:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c008:	68f9      	ldr	r1, [r7, #12]
 800c00a:	69f8      	ldr	r0, [r7, #28]
 800c00c:	f001 fafa 	bl	800d604 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d006      	beq.n	800c024 <osMutexNew+0x102>
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d003      	beq.n	800c024 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	f043 0301 	orr.w	r3, r3, #1
 800c022:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c024:	69fb      	ldr	r3, [r7, #28]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3720      	adds	r7, #32
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c02e:	b580      	push	{r7, lr}
 800c030:	b086      	sub	sp, #24
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
 800c036:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f023 0301 	bic.w	r3, r3, #1
 800c03e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f003 0301 	and.w	r3, r3, #1
 800c046:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c048:	2300      	movs	r3, #0
 800c04a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c04c:	f3ef 8305 	mrs	r3, IPSR
 800c050:	60bb      	str	r3, [r7, #8]
  return(result);
 800c052:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c054:	2b00      	cmp	r3, #0
 800c056:	d003      	beq.n	800c060 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c058:	f06f 0305 	mvn.w	r3, #5
 800c05c:	617b      	str	r3, [r7, #20]
 800c05e:	e02c      	b.n	800c0ba <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d103      	bne.n	800c06e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c066:	f06f 0303 	mvn.w	r3, #3
 800c06a:	617b      	str	r3, [r7, #20]
 800c06c:	e025      	b.n	800c0ba <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d011      	beq.n	800c098 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	6938      	ldr	r0, [r7, #16]
 800c078:	f000 fc2f 	bl	800c8da <xQueueTakeMutexRecursive>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d01b      	beq.n	800c0ba <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d003      	beq.n	800c090 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c088:	f06f 0301 	mvn.w	r3, #1
 800c08c:	617b      	str	r3, [r7, #20]
 800c08e:	e014      	b.n	800c0ba <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c090:	f06f 0302 	mvn.w	r3, #2
 800c094:	617b      	str	r3, [r7, #20]
 800c096:	e010      	b.n	800c0ba <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c098:	6839      	ldr	r1, [r7, #0]
 800c09a:	6938      	ldr	r0, [r7, #16]
 800c09c:	f000 ffd4 	bl	800d048 <xQueueSemaphoreTake>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d009      	beq.n	800c0ba <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d003      	beq.n	800c0b4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c0ac:	f06f 0301 	mvn.w	r3, #1
 800c0b0:	617b      	str	r3, [r7, #20]
 800c0b2:	e002      	b.n	800c0ba <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c0b4:	f06f 0302 	mvn.w	r3, #2
 800c0b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c0ba:	697b      	ldr	r3, [r7, #20]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3718      	adds	r7, #24
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f023 0301 	bic.w	r3, r3, #1
 800c0d2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f003 0301 	and.w	r3, r3, #1
 800c0da:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0e0:	f3ef 8305 	mrs	r3, IPSR
 800c0e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0e6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d003      	beq.n	800c0f4 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c0ec:	f06f 0305 	mvn.w	r3, #5
 800c0f0:	617b      	str	r3, [r7, #20]
 800c0f2:	e01f      	b.n	800c134 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d103      	bne.n	800c102 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c0fa:	f06f 0303 	mvn.w	r3, #3
 800c0fe:	617b      	str	r3, [r7, #20]
 800c100:	e018      	b.n	800c134 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d009      	beq.n	800c11c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c108:	6938      	ldr	r0, [r7, #16]
 800c10a:	f000 fbb1 	bl	800c870 <xQueueGiveMutexRecursive>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b01      	cmp	r3, #1
 800c112:	d00f      	beq.n	800c134 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c114:	f06f 0302 	mvn.w	r3, #2
 800c118:	617b      	str	r3, [r7, #20]
 800c11a:	e00b      	b.n	800c134 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c11c:	2300      	movs	r3, #0
 800c11e:	2200      	movs	r2, #0
 800c120:	2100      	movs	r1, #0
 800c122:	6938      	ldr	r0, [r7, #16]
 800c124:	f000 fc7e 	bl	800ca24 <xQueueGenericSend>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d002      	beq.n	800c134 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c12e:	f06f 0302 	mvn.w	r3, #2
 800c132:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c134:	697b      	ldr	r3, [r7, #20]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3718      	adds	r7, #24
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c13e:	b580      	push	{r7, lr}
 800c140:	b08a      	sub	sp, #40	@ 0x28
 800c142:	af02      	add	r7, sp, #8
 800c144:	60f8      	str	r0, [r7, #12]
 800c146:	60b9      	str	r1, [r7, #8]
 800c148:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c14a:	2300      	movs	r3, #0
 800c14c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c14e:	f3ef 8305 	mrs	r3, IPSR
 800c152:	613b      	str	r3, [r7, #16]
  return(result);
 800c154:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c156:	2b00      	cmp	r3, #0
 800c158:	d175      	bne.n	800c246 <osSemaphoreNew+0x108>
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d072      	beq.n	800c246 <osSemaphoreNew+0x108>
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	429a      	cmp	r2, r3
 800c166:	d86e      	bhi.n	800c246 <osSemaphoreNew+0x108>
    mem = -1;
 800c168:	f04f 33ff 	mov.w	r3, #4294967295
 800c16c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d015      	beq.n	800c1a0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d006      	beq.n	800c18a <osSemaphoreNew+0x4c>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	2b4f      	cmp	r3, #79	@ 0x4f
 800c182:	d902      	bls.n	800c18a <osSemaphoreNew+0x4c>
        mem = 1;
 800c184:	2301      	movs	r3, #1
 800c186:	61bb      	str	r3, [r7, #24]
 800c188:	e00c      	b.n	800c1a4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d108      	bne.n	800c1a4 <osSemaphoreNew+0x66>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d104      	bne.n	800c1a4 <osSemaphoreNew+0x66>
          mem = 0;
 800c19a:	2300      	movs	r3, #0
 800c19c:	61bb      	str	r3, [r7, #24]
 800c19e:	e001      	b.n	800c1a4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1aa:	d04c      	beq.n	800c246 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d128      	bne.n	800c204 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d10a      	bne.n	800c1ce <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	2203      	movs	r2, #3
 800c1be:	9200      	str	r2, [sp, #0]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	2001      	movs	r0, #1
 800c1c6:	f000 fa2b 	bl	800c620 <xQueueGenericCreateStatic>
 800c1ca:	61f8      	str	r0, [r7, #28]
 800c1cc:	e005      	b.n	800c1da <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c1ce:	2203      	movs	r2, #3
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	2001      	movs	r0, #1
 800c1d4:	f000 faa1 	bl	800c71a <xQueueGenericCreate>
 800c1d8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d022      	beq.n	800c226 <osSemaphoreNew+0xe8>
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d01f      	beq.n	800c226 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	69f8      	ldr	r0, [r7, #28]
 800c1ee:	f000 fc19 	bl	800ca24 <xQueueGenericSend>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d016      	beq.n	800c226 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c1f8:	69f8      	ldr	r0, [r7, #28]
 800c1fa:	f001 f8b7 	bl	800d36c <vQueueDelete>
            hSemaphore = NULL;
 800c1fe:	2300      	movs	r3, #0
 800c200:	61fb      	str	r3, [r7, #28]
 800c202:	e010      	b.n	800c226 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	2b01      	cmp	r3, #1
 800c208:	d108      	bne.n	800c21c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	461a      	mov	r2, r3
 800c210:	68b9      	ldr	r1, [r7, #8]
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f000 fb98 	bl	800c948 <xQueueCreateCountingSemaphoreStatic>
 800c218:	61f8      	str	r0, [r7, #28]
 800c21a:	e004      	b.n	800c226 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c21c:	68b9      	ldr	r1, [r7, #8]
 800c21e:	68f8      	ldr	r0, [r7, #12]
 800c220:	f000 fbcb 	bl	800c9ba <xQueueCreateCountingSemaphore>
 800c224:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00c      	beq.n	800c246 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <osSemaphoreNew+0xfc>
          name = attr->name;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	617b      	str	r3, [r7, #20]
 800c238:	e001      	b.n	800c23e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c23a:	2300      	movs	r3, #0
 800c23c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c23e:	6979      	ldr	r1, [r7, #20]
 800c240:	69f8      	ldr	r0, [r7, #28]
 800c242:	f001 f9df 	bl	800d604 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c246:	69fb      	ldr	r3, [r7, #28]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3720      	adds	r7, #32
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c25e:	2300      	movs	r3, #0
 800c260:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d103      	bne.n	800c270 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c268:	f06f 0303 	mvn.w	r3, #3
 800c26c:	617b      	str	r3, [r7, #20]
 800c26e:	e039      	b.n	800c2e4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c270:	f3ef 8305 	mrs	r3, IPSR
 800c274:	60fb      	str	r3, [r7, #12]
  return(result);
 800c276:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d022      	beq.n	800c2c2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c282:	f06f 0303 	mvn.w	r3, #3
 800c286:	617b      	str	r3, [r7, #20]
 800c288:	e02c      	b.n	800c2e4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c28a:	2300      	movs	r3, #0
 800c28c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c28e:	f107 0308 	add.w	r3, r7, #8
 800c292:	461a      	mov	r2, r3
 800c294:	2100      	movs	r1, #0
 800c296:	6938      	ldr	r0, [r7, #16]
 800c298:	f000 ffe6 	bl	800d268 <xQueueReceiveFromISR>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d003      	beq.n	800c2aa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c2a2:	f06f 0302 	mvn.w	r3, #2
 800c2a6:	617b      	str	r3, [r7, #20]
 800c2a8:	e01c      	b.n	800c2e4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d019      	beq.n	800c2e4 <osSemaphoreAcquire+0x94>
 800c2b0:	4b0f      	ldr	r3, [pc, #60]	@ (800c2f0 <osSemaphoreAcquire+0xa0>)
 800c2b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2b6:	601a      	str	r2, [r3, #0]
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	e010      	b.n	800c2e4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	6938      	ldr	r0, [r7, #16]
 800c2c6:	f000 febf 	bl	800d048 <xQueueSemaphoreTake>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d009      	beq.n	800c2e4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d003      	beq.n	800c2de <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c2d6:	f06f 0301 	mvn.w	r3, #1
 800c2da:	617b      	str	r3, [r7, #20]
 800c2dc:	e002      	b.n	800c2e4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c2de:	f06f 0302 	mvn.w	r3, #2
 800c2e2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c2e4:	697b      	ldr	r3, [r7, #20]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3718      	adds	r7, #24
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	e000ed04 	.word	0xe000ed04

0800c2f4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c300:	2300      	movs	r3, #0
 800c302:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d103      	bne.n	800c312 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c30a:	f06f 0303 	mvn.w	r3, #3
 800c30e:	617b      	str	r3, [r7, #20]
 800c310:	e02c      	b.n	800c36c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c312:	f3ef 8305 	mrs	r3, IPSR
 800c316:	60fb      	str	r3, [r7, #12]
  return(result);
 800c318:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d01a      	beq.n	800c354 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c31e:	2300      	movs	r3, #0
 800c320:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c322:	f107 0308 	add.w	r3, r7, #8
 800c326:	4619      	mov	r1, r3
 800c328:	6938      	ldr	r0, [r7, #16]
 800c32a:	f000 fd1b 	bl	800cd64 <xQueueGiveFromISR>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b01      	cmp	r3, #1
 800c332:	d003      	beq.n	800c33c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c334:	f06f 0302 	mvn.w	r3, #2
 800c338:	617b      	str	r3, [r7, #20]
 800c33a:	e017      	b.n	800c36c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d014      	beq.n	800c36c <osSemaphoreRelease+0x78>
 800c342:	4b0d      	ldr	r3, [pc, #52]	@ (800c378 <osSemaphoreRelease+0x84>)
 800c344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c348:	601a      	str	r2, [r3, #0]
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	e00b      	b.n	800c36c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c354:	2300      	movs	r3, #0
 800c356:	2200      	movs	r2, #0
 800c358:	2100      	movs	r1, #0
 800c35a:	6938      	ldr	r0, [r7, #16]
 800c35c:	f000 fb62 	bl	800ca24 <xQueueGenericSend>
 800c360:	4603      	mov	r3, r0
 800c362:	2b01      	cmp	r3, #1
 800c364:	d002      	beq.n	800c36c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c366:	f06f 0302 	mvn.w	r3, #2
 800c36a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c36c:	697b      	ldr	r3, [r7, #20]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3718      	adds	r7, #24
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	e000ed04 	.word	0xe000ed04

0800c37c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c37c:	b480      	push	{r7}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	4a07      	ldr	r2, [pc, #28]	@ (800c3a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800c38c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	4a06      	ldr	r2, [pc, #24]	@ (800c3ac <vApplicationGetIdleTaskMemory+0x30>)
 800c392:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2280      	movs	r2, #128	@ 0x80
 800c398:	601a      	str	r2, [r3, #0]
}
 800c39a:	bf00      	nop
 800c39c:	3714      	adds	r7, #20
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop
 800c3a8:	20000c94 	.word	0x20000c94
 800c3ac:	20000cf0 	.word	0x20000cf0

0800c3b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c3b0:	b480      	push	{r7}
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	4a07      	ldr	r2, [pc, #28]	@ (800c3dc <vApplicationGetTimerTaskMemory+0x2c>)
 800c3c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	4a06      	ldr	r2, [pc, #24]	@ (800c3e0 <vApplicationGetTimerTaskMemory+0x30>)
 800c3c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c3ce:	601a      	str	r2, [r3, #0]
}
 800c3d0:	bf00      	nop
 800c3d2:	3714      	adds	r7, #20
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr
 800c3dc:	20000ef0 	.word	0x20000ef0
 800c3e0:	20000f4c 	.word	0x20000f4c

0800c3e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f103 0208 	add.w	r2, r3, #8
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f103 0208 	add.w	r2, r3, #8
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f103 0208 	add.w	r2, r3, #8
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2200      	movs	r2, #0
 800c416:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c418:	bf00      	nop
 800c41a:	370c      	adds	r7, #12
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr

0800c424 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c432:	bf00      	nop
 800c434:	370c      	adds	r7, #12
 800c436:	46bd      	mov	sp, r7
 800c438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43c:	4770      	bx	lr

0800c43e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c43e:	b480      	push	{r7}
 800c440:	b085      	sub	sp, #20
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
 800c446:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	689a      	ldr	r2, [r3, #8]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	689b      	ldr	r3, [r3, #8]
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	683a      	ldr	r2, [r7, #0]
 800c468:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	1c5a      	adds	r2, r3, #1
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	601a      	str	r2, [r3, #0]
}
 800c47a:	bf00      	nop
 800c47c:	3714      	adds	r7, #20
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr

0800c486 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c486:	b480      	push	{r7}
 800c488:	b085      	sub	sp, #20
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
 800c48e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49c:	d103      	bne.n	800c4a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	691b      	ldr	r3, [r3, #16]
 800c4a2:	60fb      	str	r3, [r7, #12]
 800c4a4:	e00c      	b.n	800c4c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	3308      	adds	r3, #8
 800c4aa:	60fb      	str	r3, [r7, #12]
 800c4ac:	e002      	b.n	800c4b4 <vListInsert+0x2e>
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	60fb      	str	r3, [r7, #12]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d2f6      	bcs.n	800c4ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	685a      	ldr	r2, [r3, #4]
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	683a      	ldr	r2, [r7, #0]
 800c4ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	683a      	ldr	r2, [r7, #0]
 800c4da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	1c5a      	adds	r2, r3, #1
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	601a      	str	r2, [r3, #0]
}
 800c4ec:	bf00      	nop
 800c4ee:	3714      	adds	r7, #20
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	691b      	ldr	r3, [r3, #16]
 800c504:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	6892      	ldr	r2, [r2, #8]
 800c50e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	6852      	ldr	r2, [r2, #4]
 800c518:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	429a      	cmp	r2, r3
 800c522:	d103      	bne.n	800c52c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	689a      	ldr	r2, [r3, #8]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	1e5a      	subs	r2, r3, #1
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
}
 800c540:	4618      	mov	r0, r3
 800c542:	3714      	adds	r7, #20
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10b      	bne.n	800c578 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c572:	bf00      	nop
 800c574:	bf00      	nop
 800c576:	e7fd      	b.n	800c574 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c578:	f002 fd76 	bl	800f068 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c584:	68f9      	ldr	r1, [r7, #12]
 800c586:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c588:	fb01 f303 	mul.w	r3, r1, r3
 800c58c:	441a      	add	r2, r3
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2200      	movs	r2, #0
 800c596:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5a8:	3b01      	subs	r3, #1
 800c5aa:	68f9      	ldr	r1, [r7, #12]
 800c5ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c5ae:	fb01 f303 	mul.w	r3, r1, r3
 800c5b2:	441a      	add	r2, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	22ff      	movs	r2, #255	@ 0xff
 800c5bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	22ff      	movs	r2, #255	@ 0xff
 800c5c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d114      	bne.n	800c5f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d01a      	beq.n	800c60c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	3310      	adds	r3, #16
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f001 fd04 	bl	800dfe8 <xTaskRemoveFromEventList>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d012      	beq.n	800c60c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c61c <xQueueGenericReset+0xd0>)
 800c5e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5ec:	601a      	str	r2, [r3, #0]
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	e009      	b.n	800c60c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	3310      	adds	r3, #16
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7ff fef1 	bl	800c3e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	3324      	adds	r3, #36	@ 0x24
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff feec 	bl	800c3e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c60c:	f002 fd5e 	bl	800f0cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c610:	2301      	movs	r3, #1
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	e000ed04 	.word	0xe000ed04

0800c620 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c620:	b580      	push	{r7, lr}
 800c622:	b08e      	sub	sp, #56	@ 0x38
 800c624:	af02      	add	r7, sp, #8
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
 800c62c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10b      	bne.n	800c64c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c646:	bf00      	nop
 800c648:	bf00      	nop
 800c64a:	e7fd      	b.n	800c648 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10b      	bne.n	800c66a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop
 800c668:	e7fd      	b.n	800c666 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d002      	beq.n	800c676 <xQueueGenericCreateStatic+0x56>
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d001      	beq.n	800c67a <xQueueGenericCreateStatic+0x5a>
 800c676:	2301      	movs	r3, #1
 800c678:	e000      	b.n	800c67c <xQueueGenericCreateStatic+0x5c>
 800c67a:	2300      	movs	r3, #0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10b      	bne.n	800c698 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	623b      	str	r3, [r7, #32]
}
 800c692:	bf00      	nop
 800c694:	bf00      	nop
 800c696:	e7fd      	b.n	800c694 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d102      	bne.n	800c6a4 <xQueueGenericCreateStatic+0x84>
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d101      	bne.n	800c6a8 <xQueueGenericCreateStatic+0x88>
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e000      	b.n	800c6aa <xQueueGenericCreateStatic+0x8a>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d10b      	bne.n	800c6c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	61fb      	str	r3, [r7, #28]
}
 800c6c0:	bf00      	nop
 800c6c2:	bf00      	nop
 800c6c4:	e7fd      	b.n	800c6c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c6c6:	2350      	movs	r3, #80	@ 0x50
 800c6c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	2b50      	cmp	r3, #80	@ 0x50
 800c6ce:	d00b      	beq.n	800c6e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	61bb      	str	r3, [r7, #24]
}
 800c6e2:	bf00      	nop
 800c6e4:	bf00      	nop
 800c6e6:	e7fd      	b.n	800c6e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c6e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00d      	beq.n	800c710 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c6fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c702:	9300      	str	r3, [sp, #0]
 800c704:	4613      	mov	r3, r2
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	68b9      	ldr	r1, [r7, #8]
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f000 f840 	bl	800c790 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c712:	4618      	mov	r0, r3
 800c714:	3730      	adds	r7, #48	@ 0x30
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b08a      	sub	sp, #40	@ 0x28
 800c71e:	af02      	add	r7, sp, #8
 800c720:	60f8      	str	r0, [r7, #12]
 800c722:	60b9      	str	r1, [r7, #8]
 800c724:	4613      	mov	r3, r2
 800c726:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d10b      	bne.n	800c746 <xQueueGenericCreate+0x2c>
	__asm volatile
 800c72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	613b      	str	r3, [r7, #16]
}
 800c740:	bf00      	nop
 800c742:	bf00      	nop
 800c744:	e7fd      	b.n	800c742 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	68ba      	ldr	r2, [r7, #8]
 800c74a:	fb02 f303 	mul.w	r3, r2, r3
 800c74e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	3350      	adds	r3, #80	@ 0x50
 800c754:	4618      	mov	r0, r3
 800c756:	f002 fda9 	bl	800f2ac <pvPortMalloc>
 800c75a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d011      	beq.n	800c786 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	3350      	adds	r3, #80	@ 0x50
 800c76a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c76c:	69bb      	ldr	r3, [r7, #24]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c774:	79fa      	ldrb	r2, [r7, #7]
 800c776:	69bb      	ldr	r3, [r7, #24]
 800c778:	9300      	str	r3, [sp, #0]
 800c77a:	4613      	mov	r3, r2
 800c77c:	697a      	ldr	r2, [r7, #20]
 800c77e:	68b9      	ldr	r1, [r7, #8]
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f000 f805 	bl	800c790 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c786:	69bb      	ldr	r3, [r7, #24]
	}
 800c788:	4618      	mov	r0, r3
 800c78a:	3720      	adds	r7, #32
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
 800c79c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d103      	bne.n	800c7ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	69ba      	ldr	r2, [r7, #24]
 800c7a8:	601a      	str	r2, [r3, #0]
 800c7aa:	e002      	b.n	800c7b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c7ac:	69bb      	ldr	r3, [r7, #24]
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	68fa      	ldr	r2, [r7, #12]
 800c7b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c7b8:	69bb      	ldr	r3, [r7, #24]
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c7be:	2101      	movs	r1, #1
 800c7c0:	69b8      	ldr	r0, [r7, #24]
 800c7c2:	f7ff fec3 	bl	800c54c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	78fa      	ldrb	r2, [r7, #3]
 800c7ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c7ce:	bf00      	nop
 800c7d0:	3710      	adds	r7, #16
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b082      	sub	sp, #8
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00e      	beq.n	800c802 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f911 	bl	800ca24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c802:	bf00      	nop
 800c804:	3708      	adds	r7, #8
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}

0800c80a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c80a:	b580      	push	{r7, lr}
 800c80c:	b086      	sub	sp, #24
 800c80e:	af00      	add	r7, sp, #0
 800c810:	4603      	mov	r3, r0
 800c812:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c814:	2301      	movs	r3, #1
 800c816:	617b      	str	r3, [r7, #20]
 800c818:	2300      	movs	r3, #0
 800c81a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c81c:	79fb      	ldrb	r3, [r7, #7]
 800c81e:	461a      	mov	r2, r3
 800c820:	6939      	ldr	r1, [r7, #16]
 800c822:	6978      	ldr	r0, [r7, #20]
 800c824:	f7ff ff79 	bl	800c71a <xQueueGenericCreate>
 800c828:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f7ff ffd3 	bl	800c7d6 <prvInitialiseMutex>

		return xNewQueue;
 800c830:	68fb      	ldr	r3, [r7, #12]
	}
 800c832:	4618      	mov	r0, r3
 800c834:	3718      	adds	r7, #24
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b088      	sub	sp, #32
 800c83e:	af02      	add	r7, sp, #8
 800c840:	4603      	mov	r3, r0
 800c842:	6039      	str	r1, [r7, #0]
 800c844:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c846:	2301      	movs	r3, #1
 800c848:	617b      	str	r3, [r7, #20]
 800c84a:	2300      	movs	r3, #0
 800c84c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c84e:	79fb      	ldrb	r3, [r7, #7]
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	2200      	movs	r2, #0
 800c856:	6939      	ldr	r1, [r7, #16]
 800c858:	6978      	ldr	r0, [r7, #20]
 800c85a:	f7ff fee1 	bl	800c620 <xQueueGenericCreateStatic>
 800c85e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f7ff ffb8 	bl	800c7d6 <prvInitialiseMutex>

		return xNewQueue;
 800c866:	68fb      	ldr	r3, [r7, #12]
	}
 800c868:	4618      	mov	r0, r3
 800c86a:	3718      	adds	r7, #24
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c870:	b590      	push	{r4, r7, lr}
 800c872:	b087      	sub	sp, #28
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d10b      	bne.n	800c89a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800c882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c886:	f383 8811 	msr	BASEPRI, r3
 800c88a:	f3bf 8f6f 	isb	sy
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	60fb      	str	r3, [r7, #12]
}
 800c894:	bf00      	nop
 800c896:	bf00      	nop
 800c898:	e7fd      	b.n	800c896 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	689c      	ldr	r4, [r3, #8]
 800c89e:	f001 fd63 	bl	800e368 <xTaskGetCurrentTaskHandle>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	429c      	cmp	r4, r3
 800c8a6:	d111      	bne.n	800c8cc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	1e5a      	subs	r2, r3, #1
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	68db      	ldr	r3, [r3, #12]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d105      	bne.n	800c8c6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	2200      	movs	r2, #0
 800c8be:	2100      	movs	r1, #0
 800c8c0:	6938      	ldr	r0, [r7, #16]
 800c8c2:	f000 f8af 	bl	800ca24 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	617b      	str	r3, [r7, #20]
 800c8ca:	e001      	b.n	800c8d0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c8d0:	697b      	ldr	r3, [r7, #20]
	}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	371c      	adds	r7, #28
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd90      	pop	{r4, r7, pc}

0800c8da <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c8da:	b590      	push	{r4, r7, lr}
 800c8dc:	b087      	sub	sp, #28
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d10b      	bne.n	800c906 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	60fb      	str	r3, [r7, #12]
}
 800c900:	bf00      	nop
 800c902:	bf00      	nop
 800c904:	e7fd      	b.n	800c902 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	689c      	ldr	r4, [r3, #8]
 800c90a:	f001 fd2d 	bl	800e368 <xTaskGetCurrentTaskHandle>
 800c90e:	4603      	mov	r3, r0
 800c910:	429c      	cmp	r4, r3
 800c912:	d107      	bne.n	800c924 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	1c5a      	adds	r2, r3, #1
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c91e:	2301      	movs	r3, #1
 800c920:	617b      	str	r3, [r7, #20]
 800c922:	e00c      	b.n	800c93e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c924:	6839      	ldr	r1, [r7, #0]
 800c926:	6938      	ldr	r0, [r7, #16]
 800c928:	f000 fb8e 	bl	800d048 <xQueueSemaphoreTake>
 800c92c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d004      	beq.n	800c93e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	1c5a      	adds	r2, r3, #1
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c93e:	697b      	ldr	r3, [r7, #20]
	}
 800c940:	4618      	mov	r0, r3
 800c942:	371c      	adds	r7, #28
 800c944:	46bd      	mov	sp, r7
 800c946:	bd90      	pop	{r4, r7, pc}

0800c948 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b08a      	sub	sp, #40	@ 0x28
 800c94c:	af02      	add	r7, sp, #8
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d10b      	bne.n	800c972 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800c95a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	61bb      	str	r3, [r7, #24]
}
 800c96c:	bf00      	nop
 800c96e:	bf00      	nop
 800c970:	e7fd      	b.n	800c96e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c972:	68ba      	ldr	r2, [r7, #8]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	429a      	cmp	r2, r3
 800c978:	d90b      	bls.n	800c992 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800c97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	617b      	str	r3, [r7, #20]
}
 800c98c:	bf00      	nop
 800c98e:	bf00      	nop
 800c990:	e7fd      	b.n	800c98e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c992:	2302      	movs	r3, #2
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	2100      	movs	r1, #0
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	f7ff fe3f 	bl	800c620 <xQueueGenericCreateStatic>
 800c9a2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d002      	beq.n	800c9b0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c9b0:	69fb      	ldr	r3, [r7, #28]
	}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3720      	adds	r7, #32
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b086      	sub	sp, #24
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10b      	bne.n	800c9e2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c9ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ce:	f383 8811 	msr	BASEPRI, r3
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	f3bf 8f4f 	dsb	sy
 800c9da:	613b      	str	r3, [r7, #16]
}
 800c9dc:	bf00      	nop
 800c9de:	bf00      	nop
 800c9e0:	e7fd      	b.n	800c9de <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c9e2:	683a      	ldr	r2, [r7, #0]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d90b      	bls.n	800ca02 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c9ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ee:	f383 8811 	msr	BASEPRI, r3
 800c9f2:	f3bf 8f6f 	isb	sy
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	60fb      	str	r3, [r7, #12]
}
 800c9fc:	bf00      	nop
 800c9fe:	bf00      	nop
 800ca00:	e7fd      	b.n	800c9fe <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ca02:	2202      	movs	r2, #2
 800ca04:	2100      	movs	r1, #0
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f7ff fe87 	bl	800c71a <xQueueGenericCreate>
 800ca0c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	683a      	ldr	r2, [r7, #0]
 800ca18:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ca1a:	697b      	ldr	r3, [r7, #20]
	}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3718      	adds	r7, #24
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08e      	sub	sp, #56	@ 0x38
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
 800ca30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ca32:	2300      	movs	r3, #0
 800ca34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10b      	bne.n	800ca58 <xQueueGenericSend+0x34>
	__asm volatile
 800ca40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ca52:	bf00      	nop
 800ca54:	bf00      	nop
 800ca56:	e7fd      	b.n	800ca54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d103      	bne.n	800ca66 <xQueueGenericSend+0x42>
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d101      	bne.n	800ca6a <xQueueGenericSend+0x46>
 800ca66:	2301      	movs	r3, #1
 800ca68:	e000      	b.n	800ca6c <xQueueGenericSend+0x48>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d10b      	bne.n	800ca88 <xQueueGenericSend+0x64>
	__asm volatile
 800ca70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ca82:	bf00      	nop
 800ca84:	bf00      	nop
 800ca86:	e7fd      	b.n	800ca84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	2b02      	cmp	r3, #2
 800ca8c:	d103      	bne.n	800ca96 <xQueueGenericSend+0x72>
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	d101      	bne.n	800ca9a <xQueueGenericSend+0x76>
 800ca96:	2301      	movs	r3, #1
 800ca98:	e000      	b.n	800ca9c <xQueueGenericSend+0x78>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d10b      	bne.n	800cab8 <xQueueGenericSend+0x94>
	__asm volatile
 800caa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa4:	f383 8811 	msr	BASEPRI, r3
 800caa8:	f3bf 8f6f 	isb	sy
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	623b      	str	r3, [r7, #32]
}
 800cab2:	bf00      	nop
 800cab4:	bf00      	nop
 800cab6:	e7fd      	b.n	800cab4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cab8:	f001 fc66 	bl	800e388 <xTaskGetSchedulerState>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d102      	bne.n	800cac8 <xQueueGenericSend+0xa4>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d101      	bne.n	800cacc <xQueueGenericSend+0xa8>
 800cac8:	2301      	movs	r3, #1
 800caca:	e000      	b.n	800cace <xQueueGenericSend+0xaa>
 800cacc:	2300      	movs	r3, #0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d10b      	bne.n	800caea <xQueueGenericSend+0xc6>
	__asm volatile
 800cad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	61fb      	str	r3, [r7, #28]
}
 800cae4:	bf00      	nop
 800cae6:	bf00      	nop
 800cae8:	e7fd      	b.n	800cae6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800caea:	f002 fabd 	bl	800f068 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800caee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800caf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d302      	bcc.n	800cb00 <xQueueGenericSend+0xdc>
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	2b02      	cmp	r3, #2
 800cafe:	d129      	bne.n	800cb54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb00:	683a      	ldr	r2, [r7, #0]
 800cb02:	68b9      	ldr	r1, [r7, #8]
 800cb04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cb06:	f000 fc6d 	bl	800d3e4 <prvCopyDataToQueue>
 800cb0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d010      	beq.n	800cb36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb16:	3324      	adds	r3, #36	@ 0x24
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f001 fa65 	bl	800dfe8 <xTaskRemoveFromEventList>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d013      	beq.n	800cb4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cb24:	4b3f      	ldr	r3, [pc, #252]	@ (800cc24 <xQueueGenericSend+0x200>)
 800cb26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb2a:	601a      	str	r2, [r3, #0]
 800cb2c:	f3bf 8f4f 	dsb	sy
 800cb30:	f3bf 8f6f 	isb	sy
 800cb34:	e00a      	b.n	800cb4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cb36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d007      	beq.n	800cb4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cb3c:	4b39      	ldr	r3, [pc, #228]	@ (800cc24 <xQueueGenericSend+0x200>)
 800cb3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb42:	601a      	str	r2, [r3, #0]
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cb4c:	f002 fabe 	bl	800f0cc <vPortExitCritical>
				return pdPASS;
 800cb50:	2301      	movs	r3, #1
 800cb52:	e063      	b.n	800cc1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d103      	bne.n	800cb62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb5a:	f002 fab7 	bl	800f0cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	e05c      	b.n	800cc1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d106      	bne.n	800cb76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb68:	f107 0314 	add.w	r3, r7, #20
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f001 fa9f 	bl	800e0b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb72:	2301      	movs	r3, #1
 800cb74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb76:	f002 faa9 	bl	800f0cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb7a:	f001 f80f 	bl	800db9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb7e:	f002 fa73 	bl	800f068 <vPortEnterCritical>
 800cb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb88:	b25b      	sxtb	r3, r3
 800cb8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb8e:	d103      	bne.n	800cb98 <xQueueGenericSend+0x174>
 800cb90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb92:	2200      	movs	r2, #0
 800cb94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cb98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb9e:	b25b      	sxtb	r3, r3
 800cba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba4:	d103      	bne.n	800cbae <xQueueGenericSend+0x18a>
 800cba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cbae:	f002 fa8d 	bl	800f0cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbb2:	1d3a      	adds	r2, r7, #4
 800cbb4:	f107 0314 	add.w	r3, r7, #20
 800cbb8:	4611      	mov	r1, r2
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f001 fa8e 	bl	800e0dc <xTaskCheckForTimeOut>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d124      	bne.n	800cc10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cbc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbc8:	f000 fd04 	bl	800d5d4 <prvIsQueueFull>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d018      	beq.n	800cc04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd4:	3310      	adds	r3, #16
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	4611      	mov	r1, r2
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f001 f9b2 	bl	800df44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cbe0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbe2:	f000 fc8f 	bl	800d504 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cbe6:	f000 ffe7 	bl	800dbb8 <xTaskResumeAll>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f47f af7c 	bne.w	800caea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cbf2:	4b0c      	ldr	r3, [pc, #48]	@ (800cc24 <xQueueGenericSend+0x200>)
 800cbf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbf8:	601a      	str	r2, [r3, #0]
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	e772      	b.n	800caea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cc04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc06:	f000 fc7d 	bl	800d504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc0a:	f000 ffd5 	bl	800dbb8 <xTaskResumeAll>
 800cc0e:	e76c      	b.n	800caea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cc10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc12:	f000 fc77 	bl	800d504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc16:	f000 ffcf 	bl	800dbb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cc1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3738      	adds	r7, #56	@ 0x38
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	e000ed04 	.word	0xe000ed04

0800cc28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b090      	sub	sp, #64	@ 0x40
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
 800cc34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10b      	bne.n	800cc58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cc40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc44:	f383 8811 	msr	BASEPRI, r3
 800cc48:	f3bf 8f6f 	isb	sy
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cc52:	bf00      	nop
 800cc54:	bf00      	nop
 800cc56:	e7fd      	b.n	800cc54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d103      	bne.n	800cc66 <xQueueGenericSendFromISR+0x3e>
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d101      	bne.n	800cc6a <xQueueGenericSendFromISR+0x42>
 800cc66:	2301      	movs	r3, #1
 800cc68:	e000      	b.n	800cc6c <xQueueGenericSendFromISR+0x44>
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d10b      	bne.n	800cc88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc74:	f383 8811 	msr	BASEPRI, r3
 800cc78:	f3bf 8f6f 	isb	sy
 800cc7c:	f3bf 8f4f 	dsb	sy
 800cc80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cc82:	bf00      	nop
 800cc84:	bf00      	nop
 800cc86:	e7fd      	b.n	800cc84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d103      	bne.n	800cc96 <xQueueGenericSendFromISR+0x6e>
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d101      	bne.n	800cc9a <xQueueGenericSendFromISR+0x72>
 800cc96:	2301      	movs	r3, #1
 800cc98:	e000      	b.n	800cc9c <xQueueGenericSendFromISR+0x74>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d10b      	bne.n	800ccb8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	623b      	str	r3, [r7, #32]
}
 800ccb2:	bf00      	nop
 800ccb4:	bf00      	nop
 800ccb6:	e7fd      	b.n	800ccb4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccb8:	f002 fab6 	bl	800f228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ccbc:	f3ef 8211 	mrs	r2, BASEPRI
 800ccc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	61fa      	str	r2, [r7, #28]
 800ccd2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ccd4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ccd6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ccd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d302      	bcc.n	800ccea <xQueueGenericSendFromISR+0xc2>
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	d12f      	bne.n	800cd4a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ccea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ccf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ccfa:	683a      	ldr	r2, [r7, #0]
 800ccfc:	68b9      	ldr	r1, [r7, #8]
 800ccfe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cd00:	f000 fb70 	bl	800d3e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cd04:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cd08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd0c:	d112      	bne.n	800cd34 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d016      	beq.n	800cd44 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd18:	3324      	adds	r3, #36	@ 0x24
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f001 f964 	bl	800dfe8 <xTaskRemoveFromEventList>
 800cd20:	4603      	mov	r3, r0
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00e      	beq.n	800cd44 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d00b      	beq.n	800cd44 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	601a      	str	r2, [r3, #0]
 800cd32:	e007      	b.n	800cd44 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cd34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cd38:	3301      	adds	r3, #1
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	b25a      	sxtb	r2, r3
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cd44:	2301      	movs	r3, #1
 800cd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cd48:	e001      	b.n	800cd4e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd50:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cd58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cd5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3740      	adds	r7, #64	@ 0x40
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b08e      	sub	sp, #56	@ 0x38
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d10b      	bne.n	800cd90 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd7c:	f383 8811 	msr	BASEPRI, r3
 800cd80:	f3bf 8f6f 	isb	sy
 800cd84:	f3bf 8f4f 	dsb	sy
 800cd88:	623b      	str	r3, [r7, #32]
}
 800cd8a:	bf00      	nop
 800cd8c:	bf00      	nop
 800cd8e:	e7fd      	b.n	800cd8c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00b      	beq.n	800cdb0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800cd98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd9c:	f383 8811 	msr	BASEPRI, r3
 800cda0:	f3bf 8f6f 	isb	sy
 800cda4:	f3bf 8f4f 	dsb	sy
 800cda8:	61fb      	str	r3, [r7, #28]
}
 800cdaa:	bf00      	nop
 800cdac:	bf00      	nop
 800cdae:	e7fd      	b.n	800cdac <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cdb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d103      	bne.n	800cdc0 <xQueueGiveFromISR+0x5c>
 800cdb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d101      	bne.n	800cdc4 <xQueueGiveFromISR+0x60>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e000      	b.n	800cdc6 <xQueueGiveFromISR+0x62>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d10b      	bne.n	800cde2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800cdca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdce:	f383 8811 	msr	BASEPRI, r3
 800cdd2:	f3bf 8f6f 	isb	sy
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	61bb      	str	r3, [r7, #24]
}
 800cddc:	bf00      	nop
 800cdde:	bf00      	nop
 800cde0:	e7fd      	b.n	800cdde <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cde2:	f002 fa21 	bl	800f228 <vPortValidateInterruptPriority>
	__asm volatile
 800cde6:	f3ef 8211 	mrs	r2, BASEPRI
 800cdea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdee:	f383 8811 	msr	BASEPRI, r3
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	617a      	str	r2, [r7, #20]
 800cdfc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cdfe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce06:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ce08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d22b      	bcs.n	800ce6a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce1e:	1c5a      	adds	r2, r3, #1
 800ce20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce22:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ce28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2c:	d112      	bne.n	800ce54 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d016      	beq.n	800ce64 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce38:	3324      	adds	r3, #36	@ 0x24
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f001 f8d4 	bl	800dfe8 <xTaskRemoveFromEventList>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00e      	beq.n	800ce64 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00b      	beq.n	800ce64 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	e007      	b.n	800ce64 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce58:	3301      	adds	r3, #1
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	b25a      	sxtb	r2, r3
 800ce5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ce64:	2301      	movs	r3, #1
 800ce66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce68:	e001      	b.n	800ce6e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce70:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f383 8811 	msr	BASEPRI, r3
}
 800ce78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3738      	adds	r7, #56	@ 0x38
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b08c      	sub	sp, #48	@ 0x30
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce90:	2300      	movs	r3, #0
 800ce92:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d10b      	bne.n	800ceb6 <xQueueReceive+0x32>
	__asm volatile
 800ce9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea2:	f383 8811 	msr	BASEPRI, r3
 800cea6:	f3bf 8f6f 	isb	sy
 800ceaa:	f3bf 8f4f 	dsb	sy
 800ceae:	623b      	str	r3, [r7, #32]
}
 800ceb0:	bf00      	nop
 800ceb2:	bf00      	nop
 800ceb4:	e7fd      	b.n	800ceb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d103      	bne.n	800cec4 <xQueueReceive+0x40>
 800cebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d101      	bne.n	800cec8 <xQueueReceive+0x44>
 800cec4:	2301      	movs	r3, #1
 800cec6:	e000      	b.n	800ceca <xQueueReceive+0x46>
 800cec8:	2300      	movs	r3, #0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d10b      	bne.n	800cee6 <xQueueReceive+0x62>
	__asm volatile
 800cece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	61fb      	str	r3, [r7, #28]
}
 800cee0:	bf00      	nop
 800cee2:	bf00      	nop
 800cee4:	e7fd      	b.n	800cee2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cee6:	f001 fa4f 	bl	800e388 <xTaskGetSchedulerState>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d102      	bne.n	800cef6 <xQueueReceive+0x72>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d101      	bne.n	800cefa <xQueueReceive+0x76>
 800cef6:	2301      	movs	r3, #1
 800cef8:	e000      	b.n	800cefc <xQueueReceive+0x78>
 800cefa:	2300      	movs	r3, #0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d10b      	bne.n	800cf18 <xQueueReceive+0x94>
	__asm volatile
 800cf00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf04:	f383 8811 	msr	BASEPRI, r3
 800cf08:	f3bf 8f6f 	isb	sy
 800cf0c:	f3bf 8f4f 	dsb	sy
 800cf10:	61bb      	str	r3, [r7, #24]
}
 800cf12:	bf00      	nop
 800cf14:	bf00      	nop
 800cf16:	e7fd      	b.n	800cf14 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf18:	f002 f8a6 	bl	800f068 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf20:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d01f      	beq.n	800cf68 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf28:	68b9      	ldr	r1, [r7, #8]
 800cf2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf2c:	f000 fac4 	bl	800d4b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf32:	1e5a      	subs	r2, r3, #1
 800cf34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf36:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf3a:	691b      	ldr	r3, [r3, #16]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00f      	beq.n	800cf60 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf42:	3310      	adds	r3, #16
 800cf44:	4618      	mov	r0, r3
 800cf46:	f001 f84f 	bl	800dfe8 <xTaskRemoveFromEventList>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d007      	beq.n	800cf60 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf50:	4b3c      	ldr	r3, [pc, #240]	@ (800d044 <xQueueReceive+0x1c0>)
 800cf52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf56:	601a      	str	r2, [r3, #0]
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf60:	f002 f8b4 	bl	800f0cc <vPortExitCritical>
				return pdPASS;
 800cf64:	2301      	movs	r3, #1
 800cf66:	e069      	b.n	800d03c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d103      	bne.n	800cf76 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf6e:	f002 f8ad 	bl	800f0cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf72:	2300      	movs	r3, #0
 800cf74:	e062      	b.n	800d03c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d106      	bne.n	800cf8a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf7c:	f107 0310 	add.w	r3, r7, #16
 800cf80:	4618      	mov	r0, r3
 800cf82:	f001 f895 	bl	800e0b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf86:	2301      	movs	r3, #1
 800cf88:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf8a:	f002 f89f 	bl	800f0cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf8e:	f000 fe05 	bl	800db9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf92:	f002 f869 	bl	800f068 <vPortEnterCritical>
 800cf96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf9c:	b25b      	sxtb	r3, r3
 800cf9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa2:	d103      	bne.n	800cfac <xQueueReceive+0x128>
 800cfa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cfb2:	b25b      	sxtb	r3, r3
 800cfb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb8:	d103      	bne.n	800cfc2 <xQueueReceive+0x13e>
 800cfba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfc2:	f002 f883 	bl	800f0cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfc6:	1d3a      	adds	r2, r7, #4
 800cfc8:	f107 0310 	add.w	r3, r7, #16
 800cfcc:	4611      	mov	r1, r2
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f001 f884 	bl	800e0dc <xTaskCheckForTimeOut>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d123      	bne.n	800d022 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfdc:	f000 fae4 	bl	800d5a8 <prvIsQueueEmpty>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d017      	beq.n	800d016 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe8:	3324      	adds	r3, #36	@ 0x24
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	4611      	mov	r1, r2
 800cfee:	4618      	mov	r0, r3
 800cff0:	f000 ffa8 	bl	800df44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cff6:	f000 fa85 	bl	800d504 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cffa:	f000 fddd 	bl	800dbb8 <xTaskResumeAll>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d189      	bne.n	800cf18 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d004:	4b0f      	ldr	r3, [pc, #60]	@ (800d044 <xQueueReceive+0x1c0>)
 800d006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d00a:	601a      	str	r2, [r3, #0]
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	e780      	b.n	800cf18 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d018:	f000 fa74 	bl	800d504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d01c:	f000 fdcc 	bl	800dbb8 <xTaskResumeAll>
 800d020:	e77a      	b.n	800cf18 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d024:	f000 fa6e 	bl	800d504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d028:	f000 fdc6 	bl	800dbb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d02c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d02e:	f000 fabb 	bl	800d5a8 <prvIsQueueEmpty>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	f43f af6f 	beq.w	800cf18 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d03a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3730      	adds	r7, #48	@ 0x30
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	e000ed04 	.word	0xe000ed04

0800d048 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b08e      	sub	sp, #56	@ 0x38
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d052:	2300      	movs	r3, #0
 800d054:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d05a:	2300      	movs	r3, #0
 800d05c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d060:	2b00      	cmp	r3, #0
 800d062:	d10b      	bne.n	800d07c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d068:	f383 8811 	msr	BASEPRI, r3
 800d06c:	f3bf 8f6f 	isb	sy
 800d070:	f3bf 8f4f 	dsb	sy
 800d074:	623b      	str	r3, [r7, #32]
}
 800d076:	bf00      	nop
 800d078:	bf00      	nop
 800d07a:	e7fd      	b.n	800d078 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d07e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d080:	2b00      	cmp	r3, #0
 800d082:	d00b      	beq.n	800d09c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	61fb      	str	r3, [r7, #28]
}
 800d096:	bf00      	nop
 800d098:	bf00      	nop
 800d09a:	e7fd      	b.n	800d098 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d09c:	f001 f974 	bl	800e388 <xTaskGetSchedulerState>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d102      	bne.n	800d0ac <xQueueSemaphoreTake+0x64>
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d101      	bne.n	800d0b0 <xQueueSemaphoreTake+0x68>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e000      	b.n	800d0b2 <xQueueSemaphoreTake+0x6a>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10b      	bne.n	800d0ce <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	61bb      	str	r3, [r7, #24]
}
 800d0c8:	bf00      	nop
 800d0ca:	bf00      	nop
 800d0cc:	e7fd      	b.n	800d0ca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0ce:	f001 ffcb 	bl	800f068 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0d6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d024      	beq.n	800d128 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0e0:	1e5a      	subs	r2, r3, #1
 800d0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d104      	bne.n	800d0f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d0ee:	f001 fac5 	bl	800e67c <pvTaskIncrementMutexHeldCount>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d00f      	beq.n	800d120 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d102:	3310      	adds	r3, #16
 800d104:	4618      	mov	r0, r3
 800d106:	f000 ff6f 	bl	800dfe8 <xTaskRemoveFromEventList>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d007      	beq.n	800d120 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d110:	4b54      	ldr	r3, [pc, #336]	@ (800d264 <xQueueSemaphoreTake+0x21c>)
 800d112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d116:	601a      	str	r2, [r3, #0]
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d120:	f001 ffd4 	bl	800f0cc <vPortExitCritical>
				return pdPASS;
 800d124:	2301      	movs	r3, #1
 800d126:	e098      	b.n	800d25a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d112      	bne.n	800d154 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d130:	2b00      	cmp	r3, #0
 800d132:	d00b      	beq.n	800d14c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d138:	f383 8811 	msr	BASEPRI, r3
 800d13c:	f3bf 8f6f 	isb	sy
 800d140:	f3bf 8f4f 	dsb	sy
 800d144:	617b      	str	r3, [r7, #20]
}
 800d146:	bf00      	nop
 800d148:	bf00      	nop
 800d14a:	e7fd      	b.n	800d148 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d14c:	f001 ffbe 	bl	800f0cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d150:	2300      	movs	r3, #0
 800d152:	e082      	b.n	800d25a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d156:	2b00      	cmp	r3, #0
 800d158:	d106      	bne.n	800d168 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d15a:	f107 030c 	add.w	r3, r7, #12
 800d15e:	4618      	mov	r0, r3
 800d160:	f000 ffa6 	bl	800e0b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d164:	2301      	movs	r3, #1
 800d166:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d168:	f001 ffb0 	bl	800f0cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d16c:	f000 fd16 	bl	800db9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d170:	f001 ff7a 	bl	800f068 <vPortEnterCritical>
 800d174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d176:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d17a:	b25b      	sxtb	r3, r3
 800d17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d180:	d103      	bne.n	800d18a <xQueueSemaphoreTake+0x142>
 800d182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d184:	2200      	movs	r2, #0
 800d186:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d190:	b25b      	sxtb	r3, r3
 800d192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d196:	d103      	bne.n	800d1a0 <xQueueSemaphoreTake+0x158>
 800d198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19a:	2200      	movs	r2, #0
 800d19c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1a0:	f001 ff94 	bl	800f0cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1a4:	463a      	mov	r2, r7
 800d1a6:	f107 030c 	add.w	r3, r7, #12
 800d1aa:	4611      	mov	r1, r2
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f000 ff95 	bl	800e0dc <xTaskCheckForTimeOut>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d132      	bne.n	800d21e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1ba:	f000 f9f5 	bl	800d5a8 <prvIsQueueEmpty>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d026      	beq.n	800d212 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d109      	bne.n	800d1e0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d1cc:	f001 ff4c 	bl	800f068 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f001 f8f5 	bl	800e3c4 <xTaskPriorityInherit>
 800d1da:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d1dc:	f001 ff76 	bl	800f0cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e2:	3324      	adds	r3, #36	@ 0x24
 800d1e4:	683a      	ldr	r2, [r7, #0]
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f000 feab 	bl	800df44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1f0:	f000 f988 	bl	800d504 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1f4:	f000 fce0 	bl	800dbb8 <xTaskResumeAll>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f47f af67 	bne.w	800d0ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d200:	4b18      	ldr	r3, [pc, #96]	@ (800d264 <xQueueSemaphoreTake+0x21c>)
 800d202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d206:	601a      	str	r2, [r3, #0]
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	f3bf 8f6f 	isb	sy
 800d210:	e75d      	b.n	800d0ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d212:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d214:	f000 f976 	bl	800d504 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d218:	f000 fcce 	bl	800dbb8 <xTaskResumeAll>
 800d21c:	e757      	b.n	800d0ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d21e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d220:	f000 f970 	bl	800d504 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d224:	f000 fcc8 	bl	800dbb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d228:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d22a:	f000 f9bd 	bl	800d5a8 <prvIsQueueEmpty>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	f43f af4c 	beq.w	800d0ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d00d      	beq.n	800d258 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d23c:	f001 ff14 	bl	800f068 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d240:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d242:	f000 f8b7 	bl	800d3b4 <prvGetDisinheritPriorityAfterTimeout>
 800d246:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d24e:	4618      	mov	r0, r3
 800d250:	f001 f990 	bl	800e574 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d254:	f001 ff3a 	bl	800f0cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d258:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3738      	adds	r7, #56	@ 0x38
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	e000ed04 	.word	0xe000ed04

0800d268 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08e      	sub	sp, #56	@ 0x38
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d10b      	bne.n	800d296 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d282:	f383 8811 	msr	BASEPRI, r3
 800d286:	f3bf 8f6f 	isb	sy
 800d28a:	f3bf 8f4f 	dsb	sy
 800d28e:	623b      	str	r3, [r7, #32]
}
 800d290:	bf00      	nop
 800d292:	bf00      	nop
 800d294:	e7fd      	b.n	800d292 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d103      	bne.n	800d2a4 <xQueueReceiveFromISR+0x3c>
 800d29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d101      	bne.n	800d2a8 <xQueueReceiveFromISR+0x40>
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	e000      	b.n	800d2aa <xQueueReceiveFromISR+0x42>
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d10b      	bne.n	800d2c6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b2:	f383 8811 	msr	BASEPRI, r3
 800d2b6:	f3bf 8f6f 	isb	sy
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	61fb      	str	r3, [r7, #28]
}
 800d2c0:	bf00      	nop
 800d2c2:	bf00      	nop
 800d2c4:	e7fd      	b.n	800d2c2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d2c6:	f001 ffaf 	bl	800f228 <vPortValidateInterruptPriority>
	__asm volatile
 800d2ca:	f3ef 8211 	mrs	r2, BASEPRI
 800d2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	61ba      	str	r2, [r7, #24]
 800d2e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d2e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d2e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d02f      	beq.n	800d352 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d2f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2fc:	68b9      	ldr	r1, [r7, #8]
 800d2fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d300:	f000 f8da 	bl	800d4b8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d306:	1e5a      	subs	r2, r3, #1
 800d308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d30c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d314:	d112      	bne.n	800d33c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d318:	691b      	ldr	r3, [r3, #16]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d016      	beq.n	800d34c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d320:	3310      	adds	r3, #16
 800d322:	4618      	mov	r0, r3
 800d324:	f000 fe60 	bl	800dfe8 <xTaskRemoveFromEventList>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00e      	beq.n	800d34c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00b      	beq.n	800d34c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2201      	movs	r2, #1
 800d338:	601a      	str	r2, [r3, #0]
 800d33a:	e007      	b.n	800d34c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d33c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d340:	3301      	adds	r3, #1
 800d342:	b2db      	uxtb	r3, r3
 800d344:	b25a      	sxtb	r2, r3
 800d346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d34c:	2301      	movs	r3, #1
 800d34e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d350:	e001      	b.n	800d356 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d352:	2300      	movs	r3, #0
 800d354:	637b      	str	r3, [r7, #52]	@ 0x34
 800d356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d358:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	f383 8811 	msr	BASEPRI, r3
}
 800d360:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d364:	4618      	mov	r0, r3
 800d366:	3738      	adds	r7, #56	@ 0x38
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10b      	bne.n	800d396 <vQueueDelete+0x2a>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	60bb      	str	r3, [r7, #8]
}
 800d390:	bf00      	nop
 800d392:	bf00      	nop
 800d394:	e7fd      	b.n	800d392 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	f000 f95e 	bl	800d658 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d102      	bne.n	800d3ac <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f002 f84e 	bl	800f448 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d3ac:	bf00      	nop
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b085      	sub	sp, #20
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d006      	beq.n	800d3d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d3ce:	60fb      	str	r3, [r7, #12]
 800d3d0:	e001      	b.n	800d3d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
	}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3714      	adds	r7, #20
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d10d      	bne.n	800d41e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d14d      	bne.n	800d4a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	4618      	mov	r0, r3
 800d410:	f001 f840 	bl	800e494 <xTaskPriorityDisinherit>
 800d414:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2200      	movs	r2, #0
 800d41a:	609a      	str	r2, [r3, #8]
 800d41c:	e043      	b.n	800d4a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d119      	bne.n	800d458 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6858      	ldr	r0, [r3, #4]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d42c:	461a      	mov	r2, r3
 800d42e:	68b9      	ldr	r1, [r7, #8]
 800d430:	f003 fb55 	bl	8010ade <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	685a      	ldr	r2, [r3, #4]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d43c:	441a      	add	r2, r3
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	685a      	ldr	r2, [r3, #4]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d32b      	bcc.n	800d4a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	605a      	str	r2, [r3, #4]
 800d456:	e026      	b.n	800d4a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	68d8      	ldr	r0, [r3, #12]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d460:	461a      	mov	r2, r3
 800d462:	68b9      	ldr	r1, [r7, #8]
 800d464:	f003 fb3b 	bl	8010ade <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	68da      	ldr	r2, [r3, #12]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d470:	425b      	negs	r3, r3
 800d472:	441a      	add	r2, r3
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	68da      	ldr	r2, [r3, #12]
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	429a      	cmp	r2, r3
 800d482:	d207      	bcs.n	800d494 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	689a      	ldr	r2, [r3, #8]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d48c:	425b      	negs	r3, r3
 800d48e:	441a      	add	r2, r3
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b02      	cmp	r3, #2
 800d498:	d105      	bne.n	800d4a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d002      	beq.n	800d4a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	1c5a      	adds	r2, r3, #1
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d4ae:	697b      	ldr	r3, [r7, #20]
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3718      	adds	r7, #24
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d018      	beq.n	800d4fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	68da      	ldr	r2, [r3, #12]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4d2:	441a      	add	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	68da      	ldr	r2, [r3, #12]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	689b      	ldr	r3, [r3, #8]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d303      	bcc.n	800d4ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	68d9      	ldr	r1, [r3, #12]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	6838      	ldr	r0, [r7, #0]
 800d4f8:	f003 faf1 	bl	8010ade <memcpy>
	}
}
 800d4fc:	bf00      	nop
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d50c:	f001 fdac 	bl	800f068 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d516:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d518:	e011      	b.n	800d53e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d012      	beq.n	800d548 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	3324      	adds	r3, #36	@ 0x24
 800d526:	4618      	mov	r0, r3
 800d528:	f000 fd5e 	bl	800dfe8 <xTaskRemoveFromEventList>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d532:	f000 fe37 	bl	800e1a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d536:	7bfb      	ldrb	r3, [r7, #15]
 800d538:	3b01      	subs	r3, #1
 800d53a:	b2db      	uxtb	r3, r3
 800d53c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d53e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d542:	2b00      	cmp	r3, #0
 800d544:	dce9      	bgt.n	800d51a <prvUnlockQueue+0x16>
 800d546:	e000      	b.n	800d54a <prvUnlockQueue+0x46>
					break;
 800d548:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	22ff      	movs	r2, #255	@ 0xff
 800d54e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d552:	f001 fdbb 	bl	800f0cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d556:	f001 fd87 	bl	800f068 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d560:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d562:	e011      	b.n	800d588 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	691b      	ldr	r3, [r3, #16]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d012      	beq.n	800d592 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	3310      	adds	r3, #16
 800d570:	4618      	mov	r0, r3
 800d572:	f000 fd39 	bl	800dfe8 <xTaskRemoveFromEventList>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d001      	beq.n	800d580 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d57c:	f000 fe12 	bl	800e1a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d580:	7bbb      	ldrb	r3, [r7, #14]
 800d582:	3b01      	subs	r3, #1
 800d584:	b2db      	uxtb	r3, r3
 800d586:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	dce9      	bgt.n	800d564 <prvUnlockQueue+0x60>
 800d590:	e000      	b.n	800d594 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d592:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	22ff      	movs	r2, #255	@ 0xff
 800d598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d59c:	f001 fd96 	bl	800f0cc <vPortExitCritical>
}
 800d5a0:	bf00      	nop
 800d5a2:	3710      	adds	r7, #16
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5b0:	f001 fd5a 	bl	800f068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d102      	bne.n	800d5c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	60fb      	str	r3, [r7, #12]
 800d5c0:	e001      	b.n	800d5c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5c6:	f001 fd81 	bl	800f0cc <vPortExitCritical>

	return xReturn;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5dc:	f001 fd44 	bl	800f068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d102      	bne.n	800d5f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	60fb      	str	r3, [r7, #12]
 800d5f0:	e001      	b.n	800d5f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5f6:	f001 fd69 	bl	800f0cc <vPortExitCritical>

	return xReturn;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3710      	adds	r7, #16
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d60e:	2300      	movs	r3, #0
 800d610:	60fb      	str	r3, [r7, #12]
 800d612:	e014      	b.n	800d63e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d614:	4a0f      	ldr	r2, [pc, #60]	@ (800d654 <vQueueAddToRegistry+0x50>)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d10b      	bne.n	800d638 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d620:	490c      	ldr	r1, [pc, #48]	@ (800d654 <vQueueAddToRegistry+0x50>)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	683a      	ldr	r2, [r7, #0]
 800d626:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d62a:	4a0a      	ldr	r2, [pc, #40]	@ (800d654 <vQueueAddToRegistry+0x50>)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	00db      	lsls	r3, r3, #3
 800d630:	4413      	add	r3, r2
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d636:	e006      	b.n	800d646 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	3301      	adds	r3, #1
 800d63c:	60fb      	str	r3, [r7, #12]
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2b07      	cmp	r3, #7
 800d642:	d9e7      	bls.n	800d614 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d644:	bf00      	nop
 800d646:	bf00      	nop
 800d648:	3714      	adds	r7, #20
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	2000134c 	.word	0x2000134c

0800d658 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d660:	2300      	movs	r3, #0
 800d662:	60fb      	str	r3, [r7, #12]
 800d664:	e016      	b.n	800d694 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d666:	4a10      	ldr	r2, [pc, #64]	@ (800d6a8 <vQueueUnregisterQueue+0x50>)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	4413      	add	r3, r2
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	429a      	cmp	r2, r3
 800d674:	d10b      	bne.n	800d68e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d676:	4a0c      	ldr	r2, [pc, #48]	@ (800d6a8 <vQueueUnregisterQueue+0x50>)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2100      	movs	r1, #0
 800d67c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d680:	4a09      	ldr	r2, [pc, #36]	@ (800d6a8 <vQueueUnregisterQueue+0x50>)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	00db      	lsls	r3, r3, #3
 800d686:	4413      	add	r3, r2
 800d688:	2200      	movs	r2, #0
 800d68a:	605a      	str	r2, [r3, #4]
				break;
 800d68c:	e006      	b.n	800d69c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	3301      	adds	r3, #1
 800d692:	60fb      	str	r3, [r7, #12]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2b07      	cmp	r3, #7
 800d698:	d9e5      	bls.n	800d666 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d69a:	bf00      	nop
 800d69c:	bf00      	nop
 800d69e:	3714      	adds	r7, #20
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr
 800d6a8:	2000134c 	.word	0x2000134c

0800d6ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d6bc:	f001 fcd4 	bl	800f068 <vPortEnterCritical>
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d6c6:	b25b      	sxtb	r3, r3
 800d6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6cc:	d103      	bne.n	800d6d6 <vQueueWaitForMessageRestricted+0x2a>
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d6dc:	b25b      	sxtb	r3, r3
 800d6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6e2:	d103      	bne.n	800d6ec <vQueueWaitForMessageRestricted+0x40>
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d6ec:	f001 fcee 	bl	800f0cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d106      	bne.n	800d706 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	3324      	adds	r3, #36	@ 0x24
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	68b9      	ldr	r1, [r7, #8]
 800d700:	4618      	mov	r0, r3
 800d702:	f000 fc45 	bl	800df90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d706:	6978      	ldr	r0, [r7, #20]
 800d708:	f7ff fefc 	bl	800d504 <prvUnlockQueue>
	}
 800d70c:	bf00      	nop
 800d70e:	3718      	adds	r7, #24
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d714:	b580      	push	{r7, lr}
 800d716:	b08e      	sub	sp, #56	@ 0x38
 800d718:	af04      	add	r7, sp, #16
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
 800d720:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d724:	2b00      	cmp	r3, #0
 800d726:	d10b      	bne.n	800d740 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d72c:	f383 8811 	msr	BASEPRI, r3
 800d730:	f3bf 8f6f 	isb	sy
 800d734:	f3bf 8f4f 	dsb	sy
 800d738:	623b      	str	r3, [r7, #32]
}
 800d73a:	bf00      	nop
 800d73c:	bf00      	nop
 800d73e:	e7fd      	b.n	800d73c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d742:	2b00      	cmp	r3, #0
 800d744:	d10b      	bne.n	800d75e <xTaskCreateStatic+0x4a>
	__asm volatile
 800d746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	61fb      	str	r3, [r7, #28]
}
 800d758:	bf00      	nop
 800d75a:	bf00      	nop
 800d75c:	e7fd      	b.n	800d75a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d75e:	235c      	movs	r3, #92	@ 0x5c
 800d760:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	2b5c      	cmp	r3, #92	@ 0x5c
 800d766:	d00b      	beq.n	800d780 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d76c:	f383 8811 	msr	BASEPRI, r3
 800d770:	f3bf 8f6f 	isb	sy
 800d774:	f3bf 8f4f 	dsb	sy
 800d778:	61bb      	str	r3, [r7, #24]
}
 800d77a:	bf00      	nop
 800d77c:	bf00      	nop
 800d77e:	e7fd      	b.n	800d77c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d780:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d784:	2b00      	cmp	r3, #0
 800d786:	d01e      	beq.n	800d7c6 <xTaskCreateStatic+0xb2>
 800d788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d01b      	beq.n	800d7c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d790:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d794:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d796:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79a:	2202      	movs	r2, #2
 800d79c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	9303      	str	r3, [sp, #12]
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a6:	9302      	str	r3, [sp, #8]
 800d7a8:	f107 0314 	add.w	r3, r7, #20
 800d7ac:	9301      	str	r3, [sp, #4]
 800d7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b0:	9300      	str	r3, [sp, #0]
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	68b9      	ldr	r1, [r7, #8]
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f000 f850 	bl	800d85e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d7be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d7c0:	f000 f8de 	bl	800d980 <prvAddNewTaskToReadyList>
 800d7c4:	e001      	b.n	800d7ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d7ca:	697b      	ldr	r3, [r7, #20]
	}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3728      	adds	r7, #40	@ 0x28
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b08c      	sub	sp, #48	@ 0x30
 800d7d8:	af04      	add	r7, sp, #16
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	603b      	str	r3, [r7, #0]
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d7e4:	88fb      	ldrh	r3, [r7, #6]
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f001 fd5f 	bl	800f2ac <pvPortMalloc>
 800d7ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d00e      	beq.n	800d814 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d7f6:	205c      	movs	r0, #92	@ 0x5c
 800d7f8:	f001 fd58 	bl	800f2ac <pvPortMalloc>
 800d7fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d003      	beq.n	800d80c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	697a      	ldr	r2, [r7, #20]
 800d808:	631a      	str	r2, [r3, #48]	@ 0x30
 800d80a:	e005      	b.n	800d818 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d80c:	6978      	ldr	r0, [r7, #20]
 800d80e:	f001 fe1b 	bl	800f448 <vPortFree>
 800d812:	e001      	b.n	800d818 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d814:	2300      	movs	r3, #0
 800d816:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d017      	beq.n	800d84e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	2200      	movs	r2, #0
 800d822:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d826:	88fa      	ldrh	r2, [r7, #6]
 800d828:	2300      	movs	r3, #0
 800d82a:	9303      	str	r3, [sp, #12]
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	9302      	str	r3, [sp, #8]
 800d830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d832:	9301      	str	r3, [sp, #4]
 800d834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d836:	9300      	str	r3, [sp, #0]
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	68b9      	ldr	r1, [r7, #8]
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	f000 f80e 	bl	800d85e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d842:	69f8      	ldr	r0, [r7, #28]
 800d844:	f000 f89c 	bl	800d980 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d848:	2301      	movs	r3, #1
 800d84a:	61bb      	str	r3, [r7, #24]
 800d84c:	e002      	b.n	800d854 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d84e:	f04f 33ff 	mov.w	r3, #4294967295
 800d852:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d854:	69bb      	ldr	r3, [r7, #24]
	}
 800d856:	4618      	mov	r0, r3
 800d858:	3720      	adds	r7, #32
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b088      	sub	sp, #32
 800d862:	af00      	add	r7, sp, #0
 800d864:	60f8      	str	r0, [r7, #12]
 800d866:	60b9      	str	r1, [r7, #8]
 800d868:	607a      	str	r2, [r7, #4]
 800d86a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	009b      	lsls	r3, r3, #2
 800d874:	461a      	mov	r2, r3
 800d876:	21a5      	movs	r1, #165	@ 0xa5
 800d878:	f003 f811 	bl	801089e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d886:	3b01      	subs	r3, #1
 800d888:	009b      	lsls	r3, r3, #2
 800d88a:	4413      	add	r3, r2
 800d88c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	f023 0307 	bic.w	r3, r3, #7
 800d894:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	f003 0307 	and.w	r3, r3, #7
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00b      	beq.n	800d8b8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	617b      	str	r3, [r7, #20]
}
 800d8b2:	bf00      	nop
 800d8b4:	bf00      	nop
 800d8b6:	e7fd      	b.n	800d8b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d01f      	beq.n	800d8fe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8be:	2300      	movs	r3, #0
 800d8c0:	61fb      	str	r3, [r7, #28]
 800d8c2:	e012      	b.n	800d8ea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d8c4:	68ba      	ldr	r2, [r7, #8]
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	7819      	ldrb	r1, [r3, #0]
 800d8cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	3334      	adds	r3, #52	@ 0x34
 800d8d4:	460a      	mov	r2, r1
 800d8d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	4413      	add	r3, r2
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d006      	beq.n	800d8f2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	61fb      	str	r3, [r7, #28]
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	2b0f      	cmp	r3, #15
 800d8ee:	d9e9      	bls.n	800d8c4 <prvInitialiseNewTask+0x66>
 800d8f0:	e000      	b.n	800d8f4 <prvInitialiseNewTask+0x96>
			{
				break;
 800d8f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d8fc:	e003      	b.n	800d906 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d900:	2200      	movs	r2, #0
 800d902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d908:	2b37      	cmp	r3, #55	@ 0x37
 800d90a:	d901      	bls.n	800d910 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d90c:	2337      	movs	r3, #55	@ 0x37
 800d90e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d914:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d91a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d91e:	2200      	movs	r2, #0
 800d920:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d924:	3304      	adds	r3, #4
 800d926:	4618      	mov	r0, r3
 800d928:	f7fe fd7c 	bl	800c424 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d92e:	3318      	adds	r3, #24
 800d930:	4618      	mov	r0, r3
 800d932:	f7fe fd77 	bl	800c424 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d93a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d93e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d944:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d948:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d94a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d94e:	2200      	movs	r2, #0
 800d950:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d954:	2200      	movs	r2, #0
 800d956:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d95a:	683a      	ldr	r2, [r7, #0]
 800d95c:	68f9      	ldr	r1, [r7, #12]
 800d95e:	69b8      	ldr	r0, [r7, #24]
 800d960:	f001 fa4e 	bl	800ee00 <pxPortInitialiseStack>
 800d964:	4602      	mov	r2, r0
 800d966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d968:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d002      	beq.n	800d976 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d976:	bf00      	nop
 800d978:	3720      	adds	r7, #32
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
	...

0800d980 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d988:	f001 fb6e 	bl	800f068 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d98c:	4b2d      	ldr	r3, [pc, #180]	@ (800da44 <prvAddNewTaskToReadyList+0xc4>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	3301      	adds	r3, #1
 800d992:	4a2c      	ldr	r2, [pc, #176]	@ (800da44 <prvAddNewTaskToReadyList+0xc4>)
 800d994:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d996:	4b2c      	ldr	r3, [pc, #176]	@ (800da48 <prvAddNewTaskToReadyList+0xc8>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d109      	bne.n	800d9b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d99e:	4a2a      	ldr	r2, [pc, #168]	@ (800da48 <prvAddNewTaskToReadyList+0xc8>)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9a4:	4b27      	ldr	r3, [pc, #156]	@ (800da44 <prvAddNewTaskToReadyList+0xc4>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d110      	bne.n	800d9ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d9ac:	f000 fc1e 	bl	800e1ec <prvInitialiseTaskLists>
 800d9b0:	e00d      	b.n	800d9ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d9b2:	4b26      	ldr	r3, [pc, #152]	@ (800da4c <prvAddNewTaskToReadyList+0xcc>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d109      	bne.n	800d9ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d9ba:	4b23      	ldr	r3, [pc, #140]	@ (800da48 <prvAddNewTaskToReadyList+0xc8>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d802      	bhi.n	800d9ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d9c8:	4a1f      	ldr	r2, [pc, #124]	@ (800da48 <prvAddNewTaskToReadyList+0xc8>)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d9ce:	4b20      	ldr	r3, [pc, #128]	@ (800da50 <prvAddNewTaskToReadyList+0xd0>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	4a1e      	ldr	r2, [pc, #120]	@ (800da50 <prvAddNewTaskToReadyList+0xd0>)
 800d9d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d9d8:	4b1d      	ldr	r3, [pc, #116]	@ (800da50 <prvAddNewTaskToReadyList+0xd0>)
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9e4:	4b1b      	ldr	r3, [pc, #108]	@ (800da54 <prvAddNewTaskToReadyList+0xd4>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d903      	bls.n	800d9f4 <prvAddNewTaskToReadyList+0x74>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9f0:	4a18      	ldr	r2, [pc, #96]	@ (800da54 <prvAddNewTaskToReadyList+0xd4>)
 800d9f2:	6013      	str	r3, [r2, #0]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4413      	add	r3, r2
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	4a15      	ldr	r2, [pc, #84]	@ (800da58 <prvAddNewTaskToReadyList+0xd8>)
 800da02:	441a      	add	r2, r3
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	3304      	adds	r3, #4
 800da08:	4619      	mov	r1, r3
 800da0a:	4610      	mov	r0, r2
 800da0c:	f7fe fd17 	bl	800c43e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da10:	f001 fb5c 	bl	800f0cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da14:	4b0d      	ldr	r3, [pc, #52]	@ (800da4c <prvAddNewTaskToReadyList+0xcc>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d00e      	beq.n	800da3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da1c:	4b0a      	ldr	r3, [pc, #40]	@ (800da48 <prvAddNewTaskToReadyList+0xc8>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da26:	429a      	cmp	r2, r3
 800da28:	d207      	bcs.n	800da3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da2a:	4b0c      	ldr	r3, [pc, #48]	@ (800da5c <prvAddNewTaskToReadyList+0xdc>)
 800da2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da30:	601a      	str	r2, [r3, #0]
 800da32:	f3bf 8f4f 	dsb	sy
 800da36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da3a:	bf00      	nop
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	20001860 	.word	0x20001860
 800da48:	2000138c 	.word	0x2000138c
 800da4c:	2000186c 	.word	0x2000186c
 800da50:	2000187c 	.word	0x2000187c
 800da54:	20001868 	.word	0x20001868
 800da58:	20001390 	.word	0x20001390
 800da5c:	e000ed04 	.word	0xe000ed04

0800da60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da60:	b580      	push	{r7, lr}
 800da62:	b084      	sub	sp, #16
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800da68:	2300      	movs	r3, #0
 800da6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d018      	beq.n	800daa4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800da72:	4b14      	ldr	r3, [pc, #80]	@ (800dac4 <vTaskDelay+0x64>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00b      	beq.n	800da92 <vTaskDelay+0x32>
	__asm volatile
 800da7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da7e:	f383 8811 	msr	BASEPRI, r3
 800da82:	f3bf 8f6f 	isb	sy
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	60bb      	str	r3, [r7, #8]
}
 800da8c:	bf00      	nop
 800da8e:	bf00      	nop
 800da90:	e7fd      	b.n	800da8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800da92:	f000 f883 	bl	800db9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da96:	2100      	movs	r1, #0
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 fe03 	bl	800e6a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da9e:	f000 f88b 	bl	800dbb8 <xTaskResumeAll>
 800daa2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d107      	bne.n	800daba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800daaa:	4b07      	ldr	r3, [pc, #28]	@ (800dac8 <vTaskDelay+0x68>)
 800daac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dab0:	601a      	str	r2, [r3, #0]
 800dab2:	f3bf 8f4f 	dsb	sy
 800dab6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800daba:	bf00      	nop
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
 800dac2:	bf00      	nop
 800dac4:	20001888 	.word	0x20001888
 800dac8:	e000ed04 	.word	0xe000ed04

0800dacc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b08a      	sub	sp, #40	@ 0x28
 800dad0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dad2:	2300      	movs	r3, #0
 800dad4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dad6:	2300      	movs	r3, #0
 800dad8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dada:	463a      	mov	r2, r7
 800dadc:	1d39      	adds	r1, r7, #4
 800dade:	f107 0308 	add.w	r3, r7, #8
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fe fc4a 	bl	800c37c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dae8:	6839      	ldr	r1, [r7, #0]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	68ba      	ldr	r2, [r7, #8]
 800daee:	9202      	str	r2, [sp, #8]
 800daf0:	9301      	str	r3, [sp, #4]
 800daf2:	2300      	movs	r3, #0
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	2300      	movs	r3, #0
 800daf8:	460a      	mov	r2, r1
 800dafa:	4922      	ldr	r1, [pc, #136]	@ (800db84 <vTaskStartScheduler+0xb8>)
 800dafc:	4822      	ldr	r0, [pc, #136]	@ (800db88 <vTaskStartScheduler+0xbc>)
 800dafe:	f7ff fe09 	bl	800d714 <xTaskCreateStatic>
 800db02:	4603      	mov	r3, r0
 800db04:	4a21      	ldr	r2, [pc, #132]	@ (800db8c <vTaskStartScheduler+0xc0>)
 800db06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800db08:	4b20      	ldr	r3, [pc, #128]	@ (800db8c <vTaskStartScheduler+0xc0>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d002      	beq.n	800db16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800db10:	2301      	movs	r3, #1
 800db12:	617b      	str	r3, [r7, #20]
 800db14:	e001      	b.n	800db1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800db16:	2300      	movs	r3, #0
 800db18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d102      	bne.n	800db26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800db20:	f000 fe14 	bl	800e74c <xTimerCreateTimerTask>
 800db24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d116      	bne.n	800db5a <vTaskStartScheduler+0x8e>
	__asm volatile
 800db2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db30:	f383 8811 	msr	BASEPRI, r3
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	613b      	str	r3, [r7, #16]
}
 800db3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db40:	4b13      	ldr	r3, [pc, #76]	@ (800db90 <vTaskStartScheduler+0xc4>)
 800db42:	f04f 32ff 	mov.w	r2, #4294967295
 800db46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800db48:	4b12      	ldr	r3, [pc, #72]	@ (800db94 <vTaskStartScheduler+0xc8>)
 800db4a:	2201      	movs	r2, #1
 800db4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800db4e:	4b12      	ldr	r3, [pc, #72]	@ (800db98 <vTaskStartScheduler+0xcc>)
 800db50:	2200      	movs	r2, #0
 800db52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800db54:	f001 f9e4 	bl	800ef20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800db58:	e00f      	b.n	800db7a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db60:	d10b      	bne.n	800db7a <vTaskStartScheduler+0xae>
	__asm volatile
 800db62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db66:	f383 8811 	msr	BASEPRI, r3
 800db6a:	f3bf 8f6f 	isb	sy
 800db6e:	f3bf 8f4f 	dsb	sy
 800db72:	60fb      	str	r3, [r7, #12]
}
 800db74:	bf00      	nop
 800db76:	bf00      	nop
 800db78:	e7fd      	b.n	800db76 <vTaskStartScheduler+0xaa>
}
 800db7a:	bf00      	nop
 800db7c:	3718      	adds	r7, #24
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	08015a24 	.word	0x08015a24
 800db88:	0800e1bd 	.word	0x0800e1bd
 800db8c:	20001884 	.word	0x20001884
 800db90:	20001880 	.word	0x20001880
 800db94:	2000186c 	.word	0x2000186c
 800db98:	20001864 	.word	0x20001864

0800db9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800db9c:	b480      	push	{r7}
 800db9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dba0:	4b04      	ldr	r3, [pc, #16]	@ (800dbb4 <vTaskSuspendAll+0x18>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	3301      	adds	r3, #1
 800dba6:	4a03      	ldr	r2, [pc, #12]	@ (800dbb4 <vTaskSuspendAll+0x18>)
 800dba8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dbaa:	bf00      	nop
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr
 800dbb4:	20001888 	.word	0x20001888

0800dbb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dbc6:	4b42      	ldr	r3, [pc, #264]	@ (800dcd0 <xTaskResumeAll+0x118>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d10b      	bne.n	800dbe6 <xTaskResumeAll+0x2e>
	__asm volatile
 800dbce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd2:	f383 8811 	msr	BASEPRI, r3
 800dbd6:	f3bf 8f6f 	isb	sy
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	603b      	str	r3, [r7, #0]
}
 800dbe0:	bf00      	nop
 800dbe2:	bf00      	nop
 800dbe4:	e7fd      	b.n	800dbe2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dbe6:	f001 fa3f 	bl	800f068 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dbea:	4b39      	ldr	r3, [pc, #228]	@ (800dcd0 <xTaskResumeAll+0x118>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	3b01      	subs	r3, #1
 800dbf0:	4a37      	ldr	r2, [pc, #220]	@ (800dcd0 <xTaskResumeAll+0x118>)
 800dbf2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbf4:	4b36      	ldr	r3, [pc, #216]	@ (800dcd0 <xTaskResumeAll+0x118>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d162      	bne.n	800dcc2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dbfc:	4b35      	ldr	r3, [pc, #212]	@ (800dcd4 <xTaskResumeAll+0x11c>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d05e      	beq.n	800dcc2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc04:	e02f      	b.n	800dc66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc06:	4b34      	ldr	r3, [pc, #208]	@ (800dcd8 <xTaskResumeAll+0x120>)
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	68db      	ldr	r3, [r3, #12]
 800dc0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	3318      	adds	r3, #24
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7fe fc70 	bl	800c4f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	3304      	adds	r3, #4
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7fe fc6b 	bl	800c4f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc26:	4b2d      	ldr	r3, [pc, #180]	@ (800dcdc <xTaskResumeAll+0x124>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d903      	bls.n	800dc36 <xTaskResumeAll+0x7e>
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc32:	4a2a      	ldr	r2, [pc, #168]	@ (800dcdc <xTaskResumeAll+0x124>)
 800dc34:	6013      	str	r3, [r2, #0]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc3a:	4613      	mov	r3, r2
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	4413      	add	r3, r2
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	4a27      	ldr	r2, [pc, #156]	@ (800dce0 <xTaskResumeAll+0x128>)
 800dc44:	441a      	add	r2, r3
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3304      	adds	r3, #4
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	4610      	mov	r0, r2
 800dc4e:	f7fe fbf6 	bl	800c43e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc56:	4b23      	ldr	r3, [pc, #140]	@ (800dce4 <xTaskResumeAll+0x12c>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d302      	bcc.n	800dc66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dc60:	4b21      	ldr	r3, [pc, #132]	@ (800dce8 <xTaskResumeAll+0x130>)
 800dc62:	2201      	movs	r2, #1
 800dc64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc66:	4b1c      	ldr	r3, [pc, #112]	@ (800dcd8 <xTaskResumeAll+0x120>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d1cb      	bne.n	800dc06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dc74:	f000 fb58 	bl	800e328 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dc78:	4b1c      	ldr	r3, [pc, #112]	@ (800dcec <xTaskResumeAll+0x134>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d010      	beq.n	800dca6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc84:	f000 f846 	bl	800dd14 <xTaskIncrementTick>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d002      	beq.n	800dc94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dc8e:	4b16      	ldr	r3, [pc, #88]	@ (800dce8 <xTaskResumeAll+0x130>)
 800dc90:	2201      	movs	r2, #1
 800dc92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	3b01      	subs	r3, #1
 800dc98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d1f1      	bne.n	800dc84 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800dca0:	4b12      	ldr	r3, [pc, #72]	@ (800dcec <xTaskResumeAll+0x134>)
 800dca2:	2200      	movs	r2, #0
 800dca4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dca6:	4b10      	ldr	r3, [pc, #64]	@ (800dce8 <xTaskResumeAll+0x130>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d009      	beq.n	800dcc2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dcb2:	4b0f      	ldr	r3, [pc, #60]	@ (800dcf0 <xTaskResumeAll+0x138>)
 800dcb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcb8:	601a      	str	r2, [r3, #0]
 800dcba:	f3bf 8f4f 	dsb	sy
 800dcbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dcc2:	f001 fa03 	bl	800f0cc <vPortExitCritical>

	return xAlreadyYielded;
 800dcc6:	68bb      	ldr	r3, [r7, #8]
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	20001888 	.word	0x20001888
 800dcd4:	20001860 	.word	0x20001860
 800dcd8:	20001820 	.word	0x20001820
 800dcdc:	20001868 	.word	0x20001868
 800dce0:	20001390 	.word	0x20001390
 800dce4:	2000138c 	.word	0x2000138c
 800dce8:	20001874 	.word	0x20001874
 800dcec:	20001870 	.word	0x20001870
 800dcf0:	e000ed04 	.word	0xe000ed04

0800dcf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dcfa:	4b05      	ldr	r3, [pc, #20]	@ (800dd10 <xTaskGetTickCount+0x1c>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dd00:	687b      	ldr	r3, [r7, #4]
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	370c      	adds	r7, #12
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr
 800dd0e:	bf00      	nop
 800dd10:	20001864 	.word	0x20001864

0800dd14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b086      	sub	sp, #24
 800dd18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd1e:	4b4f      	ldr	r3, [pc, #316]	@ (800de5c <xTaskIncrementTick+0x148>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f040 8090 	bne.w	800de48 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd28:	4b4d      	ldr	r3, [pc, #308]	@ (800de60 <xTaskIncrementTick+0x14c>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd30:	4a4b      	ldr	r2, [pc, #300]	@ (800de60 <xTaskIncrementTick+0x14c>)
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d121      	bne.n	800dd80 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd3c:	4b49      	ldr	r3, [pc, #292]	@ (800de64 <xTaskIncrementTick+0x150>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d00b      	beq.n	800dd5e <xTaskIncrementTick+0x4a>
	__asm volatile
 800dd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd4a:	f383 8811 	msr	BASEPRI, r3
 800dd4e:	f3bf 8f6f 	isb	sy
 800dd52:	f3bf 8f4f 	dsb	sy
 800dd56:	603b      	str	r3, [r7, #0]
}
 800dd58:	bf00      	nop
 800dd5a:	bf00      	nop
 800dd5c:	e7fd      	b.n	800dd5a <xTaskIncrementTick+0x46>
 800dd5e:	4b41      	ldr	r3, [pc, #260]	@ (800de64 <xTaskIncrementTick+0x150>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	60fb      	str	r3, [r7, #12]
 800dd64:	4b40      	ldr	r3, [pc, #256]	@ (800de68 <xTaskIncrementTick+0x154>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4a3e      	ldr	r2, [pc, #248]	@ (800de64 <xTaskIncrementTick+0x150>)
 800dd6a:	6013      	str	r3, [r2, #0]
 800dd6c:	4a3e      	ldr	r2, [pc, #248]	@ (800de68 <xTaskIncrementTick+0x154>)
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	6013      	str	r3, [r2, #0]
 800dd72:	4b3e      	ldr	r3, [pc, #248]	@ (800de6c <xTaskIncrementTick+0x158>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	3301      	adds	r3, #1
 800dd78:	4a3c      	ldr	r2, [pc, #240]	@ (800de6c <xTaskIncrementTick+0x158>)
 800dd7a:	6013      	str	r3, [r2, #0]
 800dd7c:	f000 fad4 	bl	800e328 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd80:	4b3b      	ldr	r3, [pc, #236]	@ (800de70 <xTaskIncrementTick+0x15c>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	693a      	ldr	r2, [r7, #16]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d349      	bcc.n	800de1e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd8a:	4b36      	ldr	r3, [pc, #216]	@ (800de64 <xTaskIncrementTick+0x150>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d104      	bne.n	800dd9e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd94:	4b36      	ldr	r3, [pc, #216]	@ (800de70 <xTaskIncrementTick+0x15c>)
 800dd96:	f04f 32ff 	mov.w	r2, #4294967295
 800dd9a:	601a      	str	r2, [r3, #0]
					break;
 800dd9c:	e03f      	b.n	800de1e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd9e:	4b31      	ldr	r3, [pc, #196]	@ (800de64 <xTaskIncrementTick+0x150>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ddae:	693a      	ldr	r2, [r7, #16]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d203      	bcs.n	800ddbe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ddb6:	4a2e      	ldr	r2, [pc, #184]	@ (800de70 <xTaskIncrementTick+0x15c>)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ddbc:	e02f      	b.n	800de1e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fe fb98 	bl	800c4f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d004      	beq.n	800ddda <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	3318      	adds	r3, #24
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7fe fb8f 	bl	800c4f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddde:	4b25      	ldr	r3, [pc, #148]	@ (800de74 <xTaskIncrementTick+0x160>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d903      	bls.n	800ddee <xTaskIncrementTick+0xda>
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddea:	4a22      	ldr	r2, [pc, #136]	@ (800de74 <xTaskIncrementTick+0x160>)
 800ddec:	6013      	str	r3, [r2, #0]
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	009b      	lsls	r3, r3, #2
 800ddf6:	4413      	add	r3, r2
 800ddf8:	009b      	lsls	r3, r3, #2
 800ddfa:	4a1f      	ldr	r2, [pc, #124]	@ (800de78 <xTaskIncrementTick+0x164>)
 800ddfc:	441a      	add	r2, r3
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	3304      	adds	r3, #4
 800de02:	4619      	mov	r1, r3
 800de04:	4610      	mov	r0, r2
 800de06:	f7fe fb1a 	bl	800c43e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de0e:	4b1b      	ldr	r3, [pc, #108]	@ (800de7c <xTaskIncrementTick+0x168>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de14:	429a      	cmp	r2, r3
 800de16:	d3b8      	bcc.n	800dd8a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800de18:	2301      	movs	r3, #1
 800de1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de1c:	e7b5      	b.n	800dd8a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800de1e:	4b17      	ldr	r3, [pc, #92]	@ (800de7c <xTaskIncrementTick+0x168>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de24:	4914      	ldr	r1, [pc, #80]	@ (800de78 <xTaskIncrementTick+0x164>)
 800de26:	4613      	mov	r3, r2
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	4413      	add	r3, r2
 800de2c:	009b      	lsls	r3, r3, #2
 800de2e:	440b      	add	r3, r1
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2b01      	cmp	r3, #1
 800de34:	d901      	bls.n	800de3a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800de36:	2301      	movs	r3, #1
 800de38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800de3a:	4b11      	ldr	r3, [pc, #68]	@ (800de80 <xTaskIncrementTick+0x16c>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d007      	beq.n	800de52 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800de42:	2301      	movs	r3, #1
 800de44:	617b      	str	r3, [r7, #20]
 800de46:	e004      	b.n	800de52 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800de48:	4b0e      	ldr	r3, [pc, #56]	@ (800de84 <xTaskIncrementTick+0x170>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	3301      	adds	r3, #1
 800de4e:	4a0d      	ldr	r2, [pc, #52]	@ (800de84 <xTaskIncrementTick+0x170>)
 800de50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800de52:	697b      	ldr	r3, [r7, #20]
}
 800de54:	4618      	mov	r0, r3
 800de56:	3718      	adds	r7, #24
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	20001888 	.word	0x20001888
 800de60:	20001864 	.word	0x20001864
 800de64:	20001818 	.word	0x20001818
 800de68:	2000181c 	.word	0x2000181c
 800de6c:	20001878 	.word	0x20001878
 800de70:	20001880 	.word	0x20001880
 800de74:	20001868 	.word	0x20001868
 800de78:	20001390 	.word	0x20001390
 800de7c:	2000138c 	.word	0x2000138c
 800de80:	20001874 	.word	0x20001874
 800de84:	20001870 	.word	0x20001870

0800de88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800de88:	b480      	push	{r7}
 800de8a:	b085      	sub	sp, #20
 800de8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800de8e:	4b28      	ldr	r3, [pc, #160]	@ (800df30 <vTaskSwitchContext+0xa8>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d003      	beq.n	800de9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de96:	4b27      	ldr	r3, [pc, #156]	@ (800df34 <vTaskSwitchContext+0xac>)
 800de98:	2201      	movs	r2, #1
 800de9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800de9c:	e042      	b.n	800df24 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800de9e:	4b25      	ldr	r3, [pc, #148]	@ (800df34 <vTaskSwitchContext+0xac>)
 800dea0:	2200      	movs	r2, #0
 800dea2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dea4:	4b24      	ldr	r3, [pc, #144]	@ (800df38 <vTaskSwitchContext+0xb0>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	60fb      	str	r3, [r7, #12]
 800deaa:	e011      	b.n	800ded0 <vTaskSwitchContext+0x48>
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d10b      	bne.n	800deca <vTaskSwitchContext+0x42>
	__asm volatile
 800deb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb6:	f383 8811 	msr	BASEPRI, r3
 800deba:	f3bf 8f6f 	isb	sy
 800debe:	f3bf 8f4f 	dsb	sy
 800dec2:	607b      	str	r3, [r7, #4]
}
 800dec4:	bf00      	nop
 800dec6:	bf00      	nop
 800dec8:	e7fd      	b.n	800dec6 <vTaskSwitchContext+0x3e>
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	3b01      	subs	r3, #1
 800dece:	60fb      	str	r3, [r7, #12]
 800ded0:	491a      	ldr	r1, [pc, #104]	@ (800df3c <vTaskSwitchContext+0xb4>)
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	4613      	mov	r3, r2
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	4413      	add	r3, r2
 800deda:	009b      	lsls	r3, r3, #2
 800dedc:	440b      	add	r3, r1
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d0e3      	beq.n	800deac <vTaskSwitchContext+0x24>
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	4613      	mov	r3, r2
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	4413      	add	r3, r2
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	4a13      	ldr	r2, [pc, #76]	@ (800df3c <vTaskSwitchContext+0xb4>)
 800def0:	4413      	add	r3, r2
 800def2:	60bb      	str	r3, [r7, #8]
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	685a      	ldr	r2, [r3, #4]
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	605a      	str	r2, [r3, #4]
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	685a      	ldr	r2, [r3, #4]
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	3308      	adds	r3, #8
 800df06:	429a      	cmp	r2, r3
 800df08:	d104      	bne.n	800df14 <vTaskSwitchContext+0x8c>
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	685a      	ldr	r2, [r3, #4]
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	605a      	str	r2, [r3, #4]
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	4a09      	ldr	r2, [pc, #36]	@ (800df40 <vTaskSwitchContext+0xb8>)
 800df1c:	6013      	str	r3, [r2, #0]
 800df1e:	4a06      	ldr	r2, [pc, #24]	@ (800df38 <vTaskSwitchContext+0xb0>)
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	6013      	str	r3, [r2, #0]
}
 800df24:	bf00      	nop
 800df26:	3714      	adds	r7, #20
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr
 800df30:	20001888 	.word	0x20001888
 800df34:	20001874 	.word	0x20001874
 800df38:	20001868 	.word	0x20001868
 800df3c:	20001390 	.word	0x20001390
 800df40:	2000138c 	.word	0x2000138c

0800df44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d10b      	bne.n	800df6c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800df54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df58:	f383 8811 	msr	BASEPRI, r3
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	60fb      	str	r3, [r7, #12]
}
 800df66:	bf00      	nop
 800df68:	bf00      	nop
 800df6a:	e7fd      	b.n	800df68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df6c:	4b07      	ldr	r3, [pc, #28]	@ (800df8c <vTaskPlaceOnEventList+0x48>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	3318      	adds	r3, #24
 800df72:	4619      	mov	r1, r3
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f7fe fa86 	bl	800c486 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df7a:	2101      	movs	r1, #1
 800df7c:	6838      	ldr	r0, [r7, #0]
 800df7e:	f000 fb91 	bl	800e6a4 <prvAddCurrentTaskToDelayedList>
}
 800df82:	bf00      	nop
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	2000138c 	.word	0x2000138c

0800df90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df90:	b580      	push	{r7, lr}
 800df92:	b086      	sub	sp, #24
 800df94:	af00      	add	r7, sp, #0
 800df96:	60f8      	str	r0, [r7, #12]
 800df98:	60b9      	str	r1, [r7, #8]
 800df9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d10b      	bne.n	800dfba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800dfa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfa6:	f383 8811 	msr	BASEPRI, r3
 800dfaa:	f3bf 8f6f 	isb	sy
 800dfae:	f3bf 8f4f 	dsb	sy
 800dfb2:	617b      	str	r3, [r7, #20]
}
 800dfb4:	bf00      	nop
 800dfb6:	bf00      	nop
 800dfb8:	e7fd      	b.n	800dfb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfba:	4b0a      	ldr	r3, [pc, #40]	@ (800dfe4 <vTaskPlaceOnEventListRestricted+0x54>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	3318      	adds	r3, #24
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f7fe fa3b 	bl	800c43e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d002      	beq.n	800dfd4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800dfce:	f04f 33ff 	mov.w	r3, #4294967295
 800dfd2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dfd4:	6879      	ldr	r1, [r7, #4]
 800dfd6:	68b8      	ldr	r0, [r7, #8]
 800dfd8:	f000 fb64 	bl	800e6a4 <prvAddCurrentTaskToDelayedList>
	}
 800dfdc:	bf00      	nop
 800dfde:	3718      	adds	r7, #24
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	2000138c 	.word	0x2000138c

0800dfe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b086      	sub	sp, #24
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d10b      	bne.n	800e016 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800dffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e002:	f383 8811 	msr	BASEPRI, r3
 800e006:	f3bf 8f6f 	isb	sy
 800e00a:	f3bf 8f4f 	dsb	sy
 800e00e:	60fb      	str	r3, [r7, #12]
}
 800e010:	bf00      	nop
 800e012:	bf00      	nop
 800e014:	e7fd      	b.n	800e012 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	3318      	adds	r3, #24
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7fe fa6c 	bl	800c4f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e020:	4b1d      	ldr	r3, [pc, #116]	@ (800e098 <xTaskRemoveFromEventList+0xb0>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d11d      	bne.n	800e064 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	3304      	adds	r3, #4
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7fe fa63 	bl	800c4f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e036:	4b19      	ldr	r3, [pc, #100]	@ (800e09c <xTaskRemoveFromEventList+0xb4>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d903      	bls.n	800e046 <xTaskRemoveFromEventList+0x5e>
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e042:	4a16      	ldr	r2, [pc, #88]	@ (800e09c <xTaskRemoveFromEventList+0xb4>)
 800e044:	6013      	str	r3, [r2, #0]
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e04a:	4613      	mov	r3, r2
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	4413      	add	r3, r2
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	4a13      	ldr	r2, [pc, #76]	@ (800e0a0 <xTaskRemoveFromEventList+0xb8>)
 800e054:	441a      	add	r2, r3
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	3304      	adds	r3, #4
 800e05a:	4619      	mov	r1, r3
 800e05c:	4610      	mov	r0, r2
 800e05e:	f7fe f9ee 	bl	800c43e <vListInsertEnd>
 800e062:	e005      	b.n	800e070 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	3318      	adds	r3, #24
 800e068:	4619      	mov	r1, r3
 800e06a:	480e      	ldr	r0, [pc, #56]	@ (800e0a4 <xTaskRemoveFromEventList+0xbc>)
 800e06c:	f7fe f9e7 	bl	800c43e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e074:	4b0c      	ldr	r3, [pc, #48]	@ (800e0a8 <xTaskRemoveFromEventList+0xc0>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d905      	bls.n	800e08a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e07e:	2301      	movs	r3, #1
 800e080:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e082:	4b0a      	ldr	r3, [pc, #40]	@ (800e0ac <xTaskRemoveFromEventList+0xc4>)
 800e084:	2201      	movs	r2, #1
 800e086:	601a      	str	r2, [r3, #0]
 800e088:	e001      	b.n	800e08e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e08a:	2300      	movs	r3, #0
 800e08c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e08e:	697b      	ldr	r3, [r7, #20]
}
 800e090:	4618      	mov	r0, r3
 800e092:	3718      	adds	r7, #24
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	20001888 	.word	0x20001888
 800e09c:	20001868 	.word	0x20001868
 800e0a0:	20001390 	.word	0x20001390
 800e0a4:	20001820 	.word	0x20001820
 800e0a8:	2000138c 	.word	0x2000138c
 800e0ac:	20001874 	.word	0x20001874

0800e0b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b083      	sub	sp, #12
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e0b8:	4b06      	ldr	r3, [pc, #24]	@ (800e0d4 <vTaskInternalSetTimeOutState+0x24>)
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e0c0:	4b05      	ldr	r3, [pc, #20]	@ (800e0d8 <vTaskInternalSetTimeOutState+0x28>)
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	605a      	str	r2, [r3, #4]
}
 800e0c8:	bf00      	nop
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr
 800e0d4:	20001878 	.word	0x20001878
 800e0d8:	20001864 	.word	0x20001864

0800e0dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b088      	sub	sp, #32
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d10b      	bne.n	800e104 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0f0:	f383 8811 	msr	BASEPRI, r3
 800e0f4:	f3bf 8f6f 	isb	sy
 800e0f8:	f3bf 8f4f 	dsb	sy
 800e0fc:	613b      	str	r3, [r7, #16]
}
 800e0fe:	bf00      	nop
 800e100:	bf00      	nop
 800e102:	e7fd      	b.n	800e100 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d10b      	bne.n	800e122 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e10e:	f383 8811 	msr	BASEPRI, r3
 800e112:	f3bf 8f6f 	isb	sy
 800e116:	f3bf 8f4f 	dsb	sy
 800e11a:	60fb      	str	r3, [r7, #12]
}
 800e11c:	bf00      	nop
 800e11e:	bf00      	nop
 800e120:	e7fd      	b.n	800e11e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e122:	f000 ffa1 	bl	800f068 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e126:	4b1d      	ldr	r3, [pc, #116]	@ (800e19c <xTaskCheckForTimeOut+0xc0>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	69ba      	ldr	r2, [r7, #24]
 800e132:	1ad3      	subs	r3, r2, r3
 800e134:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e13e:	d102      	bne.n	800e146 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e140:	2300      	movs	r3, #0
 800e142:	61fb      	str	r3, [r7, #28]
 800e144:	e023      	b.n	800e18e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681a      	ldr	r2, [r3, #0]
 800e14a:	4b15      	ldr	r3, [pc, #84]	@ (800e1a0 <xTaskCheckForTimeOut+0xc4>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d007      	beq.n	800e162 <xTaskCheckForTimeOut+0x86>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	69ba      	ldr	r2, [r7, #24]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d302      	bcc.n	800e162 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e15c:	2301      	movs	r3, #1
 800e15e:	61fb      	str	r3, [r7, #28]
 800e160:	e015      	b.n	800e18e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	697a      	ldr	r2, [r7, #20]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d20b      	bcs.n	800e184 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	1ad2      	subs	r2, r2, r3
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f7ff ff99 	bl	800e0b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e17e:	2300      	movs	r3, #0
 800e180:	61fb      	str	r3, [r7, #28]
 800e182:	e004      	b.n	800e18e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	2200      	movs	r2, #0
 800e188:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e18a:	2301      	movs	r3, #1
 800e18c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e18e:	f000 ff9d 	bl	800f0cc <vPortExitCritical>

	return xReturn;
 800e192:	69fb      	ldr	r3, [r7, #28]
}
 800e194:	4618      	mov	r0, r3
 800e196:	3720      	adds	r7, #32
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	20001864 	.word	0x20001864
 800e1a0:	20001878 	.word	0x20001878

0800e1a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e1a8:	4b03      	ldr	r3, [pc, #12]	@ (800e1b8 <vTaskMissedYield+0x14>)
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	601a      	str	r2, [r3, #0]
}
 800e1ae:	bf00      	nop
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr
 800e1b8:	20001874 	.word	0x20001874

0800e1bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e1c4:	f000 f852 	bl	800e26c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e1c8:	4b06      	ldr	r3, [pc, #24]	@ (800e1e4 <prvIdleTask+0x28>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d9f9      	bls.n	800e1c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e1d0:	4b05      	ldr	r3, [pc, #20]	@ (800e1e8 <prvIdleTask+0x2c>)
 800e1d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1d6:	601a      	str	r2, [r3, #0]
 800e1d8:	f3bf 8f4f 	dsb	sy
 800e1dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e1e0:	e7f0      	b.n	800e1c4 <prvIdleTask+0x8>
 800e1e2:	bf00      	nop
 800e1e4:	20001390 	.word	0x20001390
 800e1e8:	e000ed04 	.word	0xe000ed04

0800e1ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	607b      	str	r3, [r7, #4]
 800e1f6:	e00c      	b.n	800e212 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	4613      	mov	r3, r2
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	4413      	add	r3, r2
 800e200:	009b      	lsls	r3, r3, #2
 800e202:	4a12      	ldr	r2, [pc, #72]	@ (800e24c <prvInitialiseTaskLists+0x60>)
 800e204:	4413      	add	r3, r2
 800e206:	4618      	mov	r0, r3
 800e208:	f7fe f8ec 	bl	800c3e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	3301      	adds	r3, #1
 800e210:	607b      	str	r3, [r7, #4]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2b37      	cmp	r3, #55	@ 0x37
 800e216:	d9ef      	bls.n	800e1f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e218:	480d      	ldr	r0, [pc, #52]	@ (800e250 <prvInitialiseTaskLists+0x64>)
 800e21a:	f7fe f8e3 	bl	800c3e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e21e:	480d      	ldr	r0, [pc, #52]	@ (800e254 <prvInitialiseTaskLists+0x68>)
 800e220:	f7fe f8e0 	bl	800c3e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e224:	480c      	ldr	r0, [pc, #48]	@ (800e258 <prvInitialiseTaskLists+0x6c>)
 800e226:	f7fe f8dd 	bl	800c3e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e22a:	480c      	ldr	r0, [pc, #48]	@ (800e25c <prvInitialiseTaskLists+0x70>)
 800e22c:	f7fe f8da 	bl	800c3e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e230:	480b      	ldr	r0, [pc, #44]	@ (800e260 <prvInitialiseTaskLists+0x74>)
 800e232:	f7fe f8d7 	bl	800c3e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e236:	4b0b      	ldr	r3, [pc, #44]	@ (800e264 <prvInitialiseTaskLists+0x78>)
 800e238:	4a05      	ldr	r2, [pc, #20]	@ (800e250 <prvInitialiseTaskLists+0x64>)
 800e23a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e23c:	4b0a      	ldr	r3, [pc, #40]	@ (800e268 <prvInitialiseTaskLists+0x7c>)
 800e23e:	4a05      	ldr	r2, [pc, #20]	@ (800e254 <prvInitialiseTaskLists+0x68>)
 800e240:	601a      	str	r2, [r3, #0]
}
 800e242:	bf00      	nop
 800e244:	3708      	adds	r7, #8
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	20001390 	.word	0x20001390
 800e250:	200017f0 	.word	0x200017f0
 800e254:	20001804 	.word	0x20001804
 800e258:	20001820 	.word	0x20001820
 800e25c:	20001834 	.word	0x20001834
 800e260:	2000184c 	.word	0x2000184c
 800e264:	20001818 	.word	0x20001818
 800e268:	2000181c 	.word	0x2000181c

0800e26c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e272:	e019      	b.n	800e2a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e274:	f000 fef8 	bl	800f068 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e278:	4b10      	ldr	r3, [pc, #64]	@ (800e2bc <prvCheckTasksWaitingTermination+0x50>)
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	68db      	ldr	r3, [r3, #12]
 800e27e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	3304      	adds	r3, #4
 800e284:	4618      	mov	r0, r3
 800e286:	f7fe f937 	bl	800c4f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e28a:	4b0d      	ldr	r3, [pc, #52]	@ (800e2c0 <prvCheckTasksWaitingTermination+0x54>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	3b01      	subs	r3, #1
 800e290:	4a0b      	ldr	r2, [pc, #44]	@ (800e2c0 <prvCheckTasksWaitingTermination+0x54>)
 800e292:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e294:	4b0b      	ldr	r3, [pc, #44]	@ (800e2c4 <prvCheckTasksWaitingTermination+0x58>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	3b01      	subs	r3, #1
 800e29a:	4a0a      	ldr	r2, [pc, #40]	@ (800e2c4 <prvCheckTasksWaitingTermination+0x58>)
 800e29c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e29e:	f000 ff15 	bl	800f0cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 f810 	bl	800e2c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2a8:	4b06      	ldr	r3, [pc, #24]	@ (800e2c4 <prvCheckTasksWaitingTermination+0x58>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d1e1      	bne.n	800e274 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e2b0:	bf00      	nop
 800e2b2:	bf00      	nop
 800e2b4:	3708      	adds	r7, #8
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	20001834 	.word	0x20001834
 800e2c0:	20001860 	.word	0x20001860
 800e2c4:	20001848 	.word	0x20001848

0800e2c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d108      	bne.n	800e2ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f001 f8b2 	bl	800f448 <vPortFree>
				vPortFree( pxTCB );
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f001 f8af 	bl	800f448 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e2ea:	e019      	b.n	800e320 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d103      	bne.n	800e2fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f001 f8a6 	bl	800f448 <vPortFree>
	}
 800e2fc:	e010      	b.n	800e320 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e304:	2b02      	cmp	r3, #2
 800e306:	d00b      	beq.n	800e320 <prvDeleteTCB+0x58>
	__asm volatile
 800e308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e30c:	f383 8811 	msr	BASEPRI, r3
 800e310:	f3bf 8f6f 	isb	sy
 800e314:	f3bf 8f4f 	dsb	sy
 800e318:	60fb      	str	r3, [r7, #12]
}
 800e31a:	bf00      	nop
 800e31c:	bf00      	nop
 800e31e:	e7fd      	b.n	800e31c <prvDeleteTCB+0x54>
	}
 800e320:	bf00      	nop
 800e322:	3710      	adds	r7, #16
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e328:	b480      	push	{r7}
 800e32a:	b083      	sub	sp, #12
 800e32c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e32e:	4b0c      	ldr	r3, [pc, #48]	@ (800e360 <prvResetNextTaskUnblockTime+0x38>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d104      	bne.n	800e342 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e338:	4b0a      	ldr	r3, [pc, #40]	@ (800e364 <prvResetNextTaskUnblockTime+0x3c>)
 800e33a:	f04f 32ff 	mov.w	r2, #4294967295
 800e33e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e340:	e008      	b.n	800e354 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e342:	4b07      	ldr	r3, [pc, #28]	@ (800e360 <prvResetNextTaskUnblockTime+0x38>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	68db      	ldr	r3, [r3, #12]
 800e34a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	4a04      	ldr	r2, [pc, #16]	@ (800e364 <prvResetNextTaskUnblockTime+0x3c>)
 800e352:	6013      	str	r3, [r2, #0]
}
 800e354:	bf00      	nop
 800e356:	370c      	adds	r7, #12
 800e358:	46bd      	mov	sp, r7
 800e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35e:	4770      	bx	lr
 800e360:	20001818 	.word	0x20001818
 800e364:	20001880 	.word	0x20001880

0800e368 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e368:	b480      	push	{r7}
 800e36a:	b083      	sub	sp, #12
 800e36c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e36e:	4b05      	ldr	r3, [pc, #20]	@ (800e384 <xTaskGetCurrentTaskHandle+0x1c>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e374:	687b      	ldr	r3, [r7, #4]
	}
 800e376:	4618      	mov	r0, r3
 800e378:	370c      	adds	r7, #12
 800e37a:	46bd      	mov	sp, r7
 800e37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e380:	4770      	bx	lr
 800e382:	bf00      	nop
 800e384:	2000138c 	.word	0x2000138c

0800e388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e38e:	4b0b      	ldr	r3, [pc, #44]	@ (800e3bc <xTaskGetSchedulerState+0x34>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d102      	bne.n	800e39c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e396:	2301      	movs	r3, #1
 800e398:	607b      	str	r3, [r7, #4]
 800e39a:	e008      	b.n	800e3ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e39c:	4b08      	ldr	r3, [pc, #32]	@ (800e3c0 <xTaskGetSchedulerState+0x38>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d102      	bne.n	800e3aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e3a4:	2302      	movs	r3, #2
 800e3a6:	607b      	str	r3, [r7, #4]
 800e3a8:	e001      	b.n	800e3ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e3ae:	687b      	ldr	r3, [r7, #4]
	}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr
 800e3bc:	2000186c 	.word	0x2000186c
 800e3c0:	20001888 	.word	0x20001888

0800e3c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d051      	beq.n	800e47e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3de:	4b2a      	ldr	r3, [pc, #168]	@ (800e488 <xTaskPriorityInherit+0xc4>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d241      	bcs.n	800e46c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	699b      	ldr	r3, [r3, #24]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	db06      	blt.n	800e3fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3f0:	4b25      	ldr	r3, [pc, #148]	@ (800e488 <xTaskPriorityInherit+0xc4>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	6959      	ldr	r1, [r3, #20]
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e406:	4613      	mov	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	009b      	lsls	r3, r3, #2
 800e40e:	4a1f      	ldr	r2, [pc, #124]	@ (800e48c <xTaskPriorityInherit+0xc8>)
 800e410:	4413      	add	r3, r2
 800e412:	4299      	cmp	r1, r3
 800e414:	d122      	bne.n	800e45c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	3304      	adds	r3, #4
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7fe f86c 	bl	800c4f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e420:	4b19      	ldr	r3, [pc, #100]	@ (800e488 <xTaskPriorityInherit+0xc4>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e42e:	4b18      	ldr	r3, [pc, #96]	@ (800e490 <xTaskPriorityInherit+0xcc>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	429a      	cmp	r2, r3
 800e434:	d903      	bls.n	800e43e <xTaskPriorityInherit+0x7a>
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e43a:	4a15      	ldr	r2, [pc, #84]	@ (800e490 <xTaskPriorityInherit+0xcc>)
 800e43c:	6013      	str	r3, [r2, #0]
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e442:	4613      	mov	r3, r2
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	4413      	add	r3, r2
 800e448:	009b      	lsls	r3, r3, #2
 800e44a:	4a10      	ldr	r2, [pc, #64]	@ (800e48c <xTaskPriorityInherit+0xc8>)
 800e44c:	441a      	add	r2, r3
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	3304      	adds	r3, #4
 800e452:	4619      	mov	r1, r3
 800e454:	4610      	mov	r0, r2
 800e456:	f7fd fff2 	bl	800c43e <vListInsertEnd>
 800e45a:	e004      	b.n	800e466 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e45c:	4b0a      	ldr	r3, [pc, #40]	@ (800e488 <xTaskPriorityInherit+0xc4>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e466:	2301      	movs	r3, #1
 800e468:	60fb      	str	r3, [r7, #12]
 800e46a:	e008      	b.n	800e47e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e470:	4b05      	ldr	r3, [pc, #20]	@ (800e488 <xTaskPriorityInherit+0xc4>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e476:	429a      	cmp	r2, r3
 800e478:	d201      	bcs.n	800e47e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e47a:	2301      	movs	r3, #1
 800e47c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e47e:	68fb      	ldr	r3, [r7, #12]
	}
 800e480:	4618      	mov	r0, r3
 800e482:	3710      	adds	r7, #16
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	2000138c 	.word	0x2000138c
 800e48c:	20001390 	.word	0x20001390
 800e490:	20001868 	.word	0x20001868

0800e494 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e494:	b580      	push	{r7, lr}
 800e496:	b086      	sub	sp, #24
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d058      	beq.n	800e55c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e4aa:	4b2f      	ldr	r3, [pc, #188]	@ (800e568 <xTaskPriorityDisinherit+0xd4>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	693a      	ldr	r2, [r7, #16]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d00b      	beq.n	800e4cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	60fb      	str	r3, [r7, #12]
}
 800e4c6:	bf00      	nop
 800e4c8:	bf00      	nop
 800e4ca:	e7fd      	b.n	800e4c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d10b      	bne.n	800e4ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d8:	f383 8811 	msr	BASEPRI, r3
 800e4dc:	f3bf 8f6f 	isb	sy
 800e4e0:	f3bf 8f4f 	dsb	sy
 800e4e4:	60bb      	str	r3, [r7, #8]
}
 800e4e6:	bf00      	nop
 800e4e8:	bf00      	nop
 800e4ea:	e7fd      	b.n	800e4e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4f0:	1e5a      	subs	r2, r3, #1
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d02c      	beq.n	800e55c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e506:	2b00      	cmp	r3, #0
 800e508:	d128      	bne.n	800e55c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	3304      	adds	r3, #4
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fd fff2 	bl	800c4f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e520:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e52c:	4b0f      	ldr	r3, [pc, #60]	@ (800e56c <xTaskPriorityDisinherit+0xd8>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	429a      	cmp	r2, r3
 800e532:	d903      	bls.n	800e53c <xTaskPriorityDisinherit+0xa8>
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e538:	4a0c      	ldr	r2, [pc, #48]	@ (800e56c <xTaskPriorityDisinherit+0xd8>)
 800e53a:	6013      	str	r3, [r2, #0]
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e540:	4613      	mov	r3, r2
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	4413      	add	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	4a09      	ldr	r2, [pc, #36]	@ (800e570 <xTaskPriorityDisinherit+0xdc>)
 800e54a:	441a      	add	r2, r3
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	3304      	adds	r3, #4
 800e550:	4619      	mov	r1, r3
 800e552:	4610      	mov	r0, r2
 800e554:	f7fd ff73 	bl	800c43e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e558:	2301      	movs	r3, #1
 800e55a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e55c:	697b      	ldr	r3, [r7, #20]
	}
 800e55e:	4618      	mov	r0, r3
 800e560:	3718      	adds	r7, #24
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	2000138c 	.word	0x2000138c
 800e56c:	20001868 	.word	0x20001868
 800e570:	20001390 	.word	0x20001390

0800e574 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e574:	b580      	push	{r7, lr}
 800e576:	b088      	sub	sp, #32
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e582:	2301      	movs	r3, #1
 800e584:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d06c      	beq.n	800e666 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e590:	2b00      	cmp	r3, #0
 800e592:	d10b      	bne.n	800e5ac <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e598:	f383 8811 	msr	BASEPRI, r3
 800e59c:	f3bf 8f6f 	isb	sy
 800e5a0:	f3bf 8f4f 	dsb	sy
 800e5a4:	60fb      	str	r3, [r7, #12]
}
 800e5a6:	bf00      	nop
 800e5a8:	bf00      	nop
 800e5aa:	e7fd      	b.n	800e5a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5b0:	683a      	ldr	r2, [r7, #0]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d902      	bls.n	800e5bc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	61fb      	str	r3, [r7, #28]
 800e5ba:	e002      	b.n	800e5c2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e5bc:	69bb      	ldr	r3, [r7, #24]
 800e5be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5c0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5c6:	69fa      	ldr	r2, [r7, #28]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d04c      	beq.n	800e666 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5d0:	697a      	ldr	r2, [r7, #20]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d147      	bne.n	800e666 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e5d6:	4b26      	ldr	r3, [pc, #152]	@ (800e670 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	69ba      	ldr	r2, [r7, #24]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d10b      	bne.n	800e5f8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e4:	f383 8811 	msr	BASEPRI, r3
 800e5e8:	f3bf 8f6f 	isb	sy
 800e5ec:	f3bf 8f4f 	dsb	sy
 800e5f0:	60bb      	str	r3, [r7, #8]
}
 800e5f2:	bf00      	nop
 800e5f4:	bf00      	nop
 800e5f6:	e7fd      	b.n	800e5f4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e5f8:	69bb      	ldr	r3, [r7, #24]
 800e5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	69fa      	ldr	r2, [r7, #28]
 800e602:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	699b      	ldr	r3, [r3, #24]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	db04      	blt.n	800e616 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e612:	69bb      	ldr	r3, [r7, #24]
 800e614:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	6959      	ldr	r1, [r3, #20]
 800e61a:	693a      	ldr	r2, [r7, #16]
 800e61c:	4613      	mov	r3, r2
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	4413      	add	r3, r2
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	4a13      	ldr	r2, [pc, #76]	@ (800e674 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e626:	4413      	add	r3, r2
 800e628:	4299      	cmp	r1, r3
 800e62a:	d11c      	bne.n	800e666 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	3304      	adds	r3, #4
 800e630:	4618      	mov	r0, r3
 800e632:	f7fd ff61 	bl	800c4f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e63a:	4b0f      	ldr	r3, [pc, #60]	@ (800e678 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	429a      	cmp	r2, r3
 800e640:	d903      	bls.n	800e64a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e646:	4a0c      	ldr	r2, [pc, #48]	@ (800e678 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e648:	6013      	str	r3, [r2, #0]
 800e64a:	69bb      	ldr	r3, [r7, #24]
 800e64c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e64e:	4613      	mov	r3, r2
 800e650:	009b      	lsls	r3, r3, #2
 800e652:	4413      	add	r3, r2
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	4a07      	ldr	r2, [pc, #28]	@ (800e674 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e658:	441a      	add	r2, r3
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	3304      	adds	r3, #4
 800e65e:	4619      	mov	r1, r3
 800e660:	4610      	mov	r0, r2
 800e662:	f7fd feec 	bl	800c43e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e666:	bf00      	nop
 800e668:	3720      	adds	r7, #32
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	2000138c 	.word	0x2000138c
 800e674:	20001390 	.word	0x20001390
 800e678:	20001868 	.word	0x20001868

0800e67c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e67c:	b480      	push	{r7}
 800e67e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e680:	4b07      	ldr	r3, [pc, #28]	@ (800e6a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d004      	beq.n	800e692 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e688:	4b05      	ldr	r3, [pc, #20]	@ (800e6a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e68e:	3201      	adds	r2, #1
 800e690:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e692:	4b03      	ldr	r3, [pc, #12]	@ (800e6a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e694:	681b      	ldr	r3, [r3, #0]
	}
 800e696:	4618      	mov	r0, r3
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr
 800e6a0:	2000138c 	.word	0x2000138c

0800e6a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e6ae:	4b21      	ldr	r3, [pc, #132]	@ (800e734 <prvAddCurrentTaskToDelayedList+0x90>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6b4:	4b20      	ldr	r3, [pc, #128]	@ (800e738 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	3304      	adds	r3, #4
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7fd ff1c 	bl	800c4f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6c6:	d10a      	bne.n	800e6de <prvAddCurrentTaskToDelayedList+0x3a>
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d007      	beq.n	800e6de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6ce:	4b1a      	ldr	r3, [pc, #104]	@ (800e738 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	3304      	adds	r3, #4
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	4819      	ldr	r0, [pc, #100]	@ (800e73c <prvAddCurrentTaskToDelayedList+0x98>)
 800e6d8:	f7fd feb1 	bl	800c43e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e6dc:	e026      	b.n	800e72c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e6de:	68fa      	ldr	r2, [r7, #12]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e6e6:	4b14      	ldr	r3, [pc, #80]	@ (800e738 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	68ba      	ldr	r2, [r7, #8]
 800e6ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e6ee:	68ba      	ldr	r2, [r7, #8]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d209      	bcs.n	800e70a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e6f6:	4b12      	ldr	r3, [pc, #72]	@ (800e740 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	4b0f      	ldr	r3, [pc, #60]	@ (800e738 <prvAddCurrentTaskToDelayedList+0x94>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	3304      	adds	r3, #4
 800e700:	4619      	mov	r1, r3
 800e702:	4610      	mov	r0, r2
 800e704:	f7fd febf 	bl	800c486 <vListInsert>
}
 800e708:	e010      	b.n	800e72c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e70a:	4b0e      	ldr	r3, [pc, #56]	@ (800e744 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	4b0a      	ldr	r3, [pc, #40]	@ (800e738 <prvAddCurrentTaskToDelayedList+0x94>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	3304      	adds	r3, #4
 800e714:	4619      	mov	r1, r3
 800e716:	4610      	mov	r0, r2
 800e718:	f7fd feb5 	bl	800c486 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e71c:	4b0a      	ldr	r3, [pc, #40]	@ (800e748 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	429a      	cmp	r2, r3
 800e724:	d202      	bcs.n	800e72c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e726:	4a08      	ldr	r2, [pc, #32]	@ (800e748 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	6013      	str	r3, [r2, #0]
}
 800e72c:	bf00      	nop
 800e72e:	3710      	adds	r7, #16
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	20001864 	.word	0x20001864
 800e738:	2000138c 	.word	0x2000138c
 800e73c:	2000184c 	.word	0x2000184c
 800e740:	2000181c 	.word	0x2000181c
 800e744:	20001818 	.word	0x20001818
 800e748:	20001880 	.word	0x20001880

0800e74c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b08a      	sub	sp, #40	@ 0x28
 800e750:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e752:	2300      	movs	r3, #0
 800e754:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e756:	f000 fb13 	bl	800ed80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e75a:	4b1d      	ldr	r3, [pc, #116]	@ (800e7d0 <xTimerCreateTimerTask+0x84>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d021      	beq.n	800e7a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e762:	2300      	movs	r3, #0
 800e764:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e766:	2300      	movs	r3, #0
 800e768:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e76a:	1d3a      	adds	r2, r7, #4
 800e76c:	f107 0108 	add.w	r1, r7, #8
 800e770:	f107 030c 	add.w	r3, r7, #12
 800e774:	4618      	mov	r0, r3
 800e776:	f7fd fe1b 	bl	800c3b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e77a:	6879      	ldr	r1, [r7, #4]
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	9202      	str	r2, [sp, #8]
 800e782:	9301      	str	r3, [sp, #4]
 800e784:	2302      	movs	r3, #2
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	2300      	movs	r3, #0
 800e78a:	460a      	mov	r2, r1
 800e78c:	4911      	ldr	r1, [pc, #68]	@ (800e7d4 <xTimerCreateTimerTask+0x88>)
 800e78e:	4812      	ldr	r0, [pc, #72]	@ (800e7d8 <xTimerCreateTimerTask+0x8c>)
 800e790:	f7fe ffc0 	bl	800d714 <xTaskCreateStatic>
 800e794:	4603      	mov	r3, r0
 800e796:	4a11      	ldr	r2, [pc, #68]	@ (800e7dc <xTimerCreateTimerTask+0x90>)
 800e798:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e79a:	4b10      	ldr	r3, [pc, #64]	@ (800e7dc <xTimerCreateTimerTask+0x90>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d001      	beq.n	800e7a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d10b      	bne.n	800e7c4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b0:	f383 8811 	msr	BASEPRI, r3
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	f3bf 8f4f 	dsb	sy
 800e7bc:	613b      	str	r3, [r7, #16]
}
 800e7be:	bf00      	nop
 800e7c0:	bf00      	nop
 800e7c2:	e7fd      	b.n	800e7c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e7c4:	697b      	ldr	r3, [r7, #20]
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3718      	adds	r7, #24
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	200018bc 	.word	0x200018bc
 800e7d4:	08015a2c 	.word	0x08015a2c
 800e7d8:	0800e919 	.word	0x0800e919
 800e7dc:	200018c0 	.word	0x200018c0

0800e7e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b08a      	sub	sp, #40	@ 0x28
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	607a      	str	r2, [r7, #4]
 800e7ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d10b      	bne.n	800e810 <xTimerGenericCommand+0x30>
	__asm volatile
 800e7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7fc:	f383 8811 	msr	BASEPRI, r3
 800e800:	f3bf 8f6f 	isb	sy
 800e804:	f3bf 8f4f 	dsb	sy
 800e808:	623b      	str	r3, [r7, #32]
}
 800e80a:	bf00      	nop
 800e80c:	bf00      	nop
 800e80e:	e7fd      	b.n	800e80c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e810:	4b19      	ldr	r3, [pc, #100]	@ (800e878 <xTimerGenericCommand+0x98>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d02a      	beq.n	800e86e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	2b05      	cmp	r3, #5
 800e828:	dc18      	bgt.n	800e85c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e82a:	f7ff fdad 	bl	800e388 <xTaskGetSchedulerState>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b02      	cmp	r3, #2
 800e832:	d109      	bne.n	800e848 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e834:	4b10      	ldr	r3, [pc, #64]	@ (800e878 <xTimerGenericCommand+0x98>)
 800e836:	6818      	ldr	r0, [r3, #0]
 800e838:	f107 0110 	add.w	r1, r7, #16
 800e83c:	2300      	movs	r3, #0
 800e83e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e840:	f7fe f8f0 	bl	800ca24 <xQueueGenericSend>
 800e844:	6278      	str	r0, [r7, #36]	@ 0x24
 800e846:	e012      	b.n	800e86e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e848:	4b0b      	ldr	r3, [pc, #44]	@ (800e878 <xTimerGenericCommand+0x98>)
 800e84a:	6818      	ldr	r0, [r3, #0]
 800e84c:	f107 0110 	add.w	r1, r7, #16
 800e850:	2300      	movs	r3, #0
 800e852:	2200      	movs	r2, #0
 800e854:	f7fe f8e6 	bl	800ca24 <xQueueGenericSend>
 800e858:	6278      	str	r0, [r7, #36]	@ 0x24
 800e85a:	e008      	b.n	800e86e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e85c:	4b06      	ldr	r3, [pc, #24]	@ (800e878 <xTimerGenericCommand+0x98>)
 800e85e:	6818      	ldr	r0, [r3, #0]
 800e860:	f107 0110 	add.w	r1, r7, #16
 800e864:	2300      	movs	r3, #0
 800e866:	683a      	ldr	r2, [r7, #0]
 800e868:	f7fe f9de 	bl	800cc28 <xQueueGenericSendFromISR>
 800e86c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e870:	4618      	mov	r0, r3
 800e872:	3728      	adds	r7, #40	@ 0x28
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}
 800e878:	200018bc 	.word	0x200018bc

0800e87c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b088      	sub	sp, #32
 800e880:	af02      	add	r7, sp, #8
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e886:	4b23      	ldr	r3, [pc, #140]	@ (800e914 <prvProcessExpiredTimer+0x98>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	3304      	adds	r3, #4
 800e894:	4618      	mov	r0, r3
 800e896:	f7fd fe2f 	bl	800c4f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e8a0:	f003 0304 	and.w	r3, r3, #4
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d023      	beq.n	800e8f0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	699a      	ldr	r2, [r3, #24]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	18d1      	adds	r1, r2, r3
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	683a      	ldr	r2, [r7, #0]
 800e8b4:	6978      	ldr	r0, [r7, #20]
 800e8b6:	f000 f8d5 	bl	800ea64 <prvInsertTimerInActiveList>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d020      	beq.n	800e902 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	9300      	str	r3, [sp, #0]
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	687a      	ldr	r2, [r7, #4]
 800e8c8:	2100      	movs	r1, #0
 800e8ca:	6978      	ldr	r0, [r7, #20]
 800e8cc:	f7ff ff88 	bl	800e7e0 <xTimerGenericCommand>
 800e8d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d114      	bne.n	800e902 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8dc:	f383 8811 	msr	BASEPRI, r3
 800e8e0:	f3bf 8f6f 	isb	sy
 800e8e4:	f3bf 8f4f 	dsb	sy
 800e8e8:	60fb      	str	r3, [r7, #12]
}
 800e8ea:	bf00      	nop
 800e8ec:	bf00      	nop
 800e8ee:	e7fd      	b.n	800e8ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e8f6:	f023 0301 	bic.w	r3, r3, #1
 800e8fa:	b2da      	uxtb	r2, r3
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	6a1b      	ldr	r3, [r3, #32]
 800e906:	6978      	ldr	r0, [r7, #20]
 800e908:	4798      	blx	r3
}
 800e90a:	bf00      	nop
 800e90c:	3718      	adds	r7, #24
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	200018b4 	.word	0x200018b4

0800e918 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e920:	f107 0308 	add.w	r3, r7, #8
 800e924:	4618      	mov	r0, r3
 800e926:	f000 f859 	bl	800e9dc <prvGetNextExpireTime>
 800e92a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	4619      	mov	r1, r3
 800e930:	68f8      	ldr	r0, [r7, #12]
 800e932:	f000 f805 	bl	800e940 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e936:	f000 f8d7 	bl	800eae8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e93a:	bf00      	nop
 800e93c:	e7f0      	b.n	800e920 <prvTimerTask+0x8>
	...

0800e940 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e94a:	f7ff f927 	bl	800db9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e94e:	f107 0308 	add.w	r3, r7, #8
 800e952:	4618      	mov	r0, r3
 800e954:	f000 f866 	bl	800ea24 <prvSampleTimeNow>
 800e958:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d130      	bne.n	800e9c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d10a      	bne.n	800e97c <prvProcessTimerOrBlockTask+0x3c>
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d806      	bhi.n	800e97c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e96e:	f7ff f923 	bl	800dbb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e972:	68f9      	ldr	r1, [r7, #12]
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f7ff ff81 	bl	800e87c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e97a:	e024      	b.n	800e9c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d008      	beq.n	800e994 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e982:	4b13      	ldr	r3, [pc, #76]	@ (800e9d0 <prvProcessTimerOrBlockTask+0x90>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d101      	bne.n	800e990 <prvProcessTimerOrBlockTask+0x50>
 800e98c:	2301      	movs	r3, #1
 800e98e:	e000      	b.n	800e992 <prvProcessTimerOrBlockTask+0x52>
 800e990:	2300      	movs	r3, #0
 800e992:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e994:	4b0f      	ldr	r3, [pc, #60]	@ (800e9d4 <prvProcessTimerOrBlockTask+0x94>)
 800e996:	6818      	ldr	r0, [r3, #0]
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	683a      	ldr	r2, [r7, #0]
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	f7fe fe83 	bl	800d6ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e9a6:	f7ff f907 	bl	800dbb8 <xTaskResumeAll>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d10a      	bne.n	800e9c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e9b0:	4b09      	ldr	r3, [pc, #36]	@ (800e9d8 <prvProcessTimerOrBlockTask+0x98>)
 800e9b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9b6:	601a      	str	r2, [r3, #0]
 800e9b8:	f3bf 8f4f 	dsb	sy
 800e9bc:	f3bf 8f6f 	isb	sy
}
 800e9c0:	e001      	b.n	800e9c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e9c2:	f7ff f8f9 	bl	800dbb8 <xTaskResumeAll>
}
 800e9c6:	bf00      	nop
 800e9c8:	3710      	adds	r7, #16
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	200018b8 	.word	0x200018b8
 800e9d4:	200018bc 	.word	0x200018bc
 800e9d8:	e000ed04 	.word	0xe000ed04

0800e9dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e9e4:	4b0e      	ldr	r3, [pc, #56]	@ (800ea20 <prvGetNextExpireTime+0x44>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d101      	bne.n	800e9f2 <prvGetNextExpireTime+0x16>
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	e000      	b.n	800e9f4 <prvGetNextExpireTime+0x18>
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d105      	bne.n	800ea0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea00:	4b07      	ldr	r3, [pc, #28]	@ (800ea20 <prvGetNextExpireTime+0x44>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	60fb      	str	r3, [r7, #12]
 800ea0a:	e001      	b.n	800ea10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ea10:	68fb      	ldr	r3, [r7, #12]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3714      	adds	r7, #20
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr
 800ea1e:	bf00      	nop
 800ea20:	200018b4 	.word	0x200018b4

0800ea24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ea2c:	f7ff f962 	bl	800dcf4 <xTaskGetTickCount>
 800ea30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ea32:	4b0b      	ldr	r3, [pc, #44]	@ (800ea60 <prvSampleTimeNow+0x3c>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	68fa      	ldr	r2, [r7, #12]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d205      	bcs.n	800ea48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ea3c:	f000 f93a 	bl	800ecb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2201      	movs	r2, #1
 800ea44:	601a      	str	r2, [r3, #0]
 800ea46:	e002      	b.n	800ea4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ea4e:	4a04      	ldr	r2, [pc, #16]	@ (800ea60 <prvSampleTimeNow+0x3c>)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ea54:	68fb      	ldr	r3, [r7, #12]
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3710      	adds	r7, #16
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	200018c4 	.word	0x200018c4

0800ea64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b086      	sub	sp, #24
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
 800ea70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ea72:	2300      	movs	r3, #0
 800ea74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	68ba      	ldr	r2, [r7, #8]
 800ea7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	68fa      	ldr	r2, [r7, #12]
 800ea80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ea82:	68ba      	ldr	r2, [r7, #8]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d812      	bhi.n	800eab0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	1ad2      	subs	r2, r2, r3
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	699b      	ldr	r3, [r3, #24]
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d302      	bcc.n	800ea9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	617b      	str	r3, [r7, #20]
 800ea9c:	e01b      	b.n	800ead6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ea9e:	4b10      	ldr	r3, [pc, #64]	@ (800eae0 <prvInsertTimerInActiveList+0x7c>)
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	3304      	adds	r3, #4
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	4610      	mov	r0, r2
 800eaaa:	f7fd fcec 	bl	800c486 <vListInsert>
 800eaae:	e012      	b.n	800ead6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d206      	bcs.n	800eac6 <prvInsertTimerInActiveList+0x62>
 800eab8:	68ba      	ldr	r2, [r7, #8]
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d302      	bcc.n	800eac6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eac0:	2301      	movs	r3, #1
 800eac2:	617b      	str	r3, [r7, #20]
 800eac4:	e007      	b.n	800ead6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eac6:	4b07      	ldr	r3, [pc, #28]	@ (800eae4 <prvInsertTimerInActiveList+0x80>)
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	3304      	adds	r3, #4
 800eace:	4619      	mov	r1, r3
 800ead0:	4610      	mov	r0, r2
 800ead2:	f7fd fcd8 	bl	800c486 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ead6:	697b      	ldr	r3, [r7, #20]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3718      	adds	r7, #24
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	200018b8 	.word	0x200018b8
 800eae4:	200018b4 	.word	0x200018b4

0800eae8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b08e      	sub	sp, #56	@ 0x38
 800eaec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eaee:	e0ce      	b.n	800ec8e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	da19      	bge.n	800eb2a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eaf6:	1d3b      	adds	r3, r7, #4
 800eaf8:	3304      	adds	r3, #4
 800eafa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10b      	bne.n	800eb1a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800eb02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb06:	f383 8811 	msr	BASEPRI, r3
 800eb0a:	f3bf 8f6f 	isb	sy
 800eb0e:	f3bf 8f4f 	dsb	sy
 800eb12:	61fb      	str	r3, [r7, #28]
}
 800eb14:	bf00      	nop
 800eb16:	bf00      	nop
 800eb18:	e7fd      	b.n	800eb16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eb1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb20:	6850      	ldr	r0, [r2, #4]
 800eb22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb24:	6892      	ldr	r2, [r2, #8]
 800eb26:	4611      	mov	r1, r2
 800eb28:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f2c0 80ae 	blt.w	800ec8e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eb36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb38:	695b      	ldr	r3, [r3, #20]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d004      	beq.n	800eb48 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb40:	3304      	adds	r3, #4
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fd fcd8 	bl	800c4f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb48:	463b      	mov	r3, r7
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f7ff ff6a 	bl	800ea24 <prvSampleTimeNow>
 800eb50:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2b09      	cmp	r3, #9
 800eb56:	f200 8097 	bhi.w	800ec88 <prvProcessReceivedCommands+0x1a0>
 800eb5a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb60 <prvProcessReceivedCommands+0x78>)
 800eb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb60:	0800eb89 	.word	0x0800eb89
 800eb64:	0800eb89 	.word	0x0800eb89
 800eb68:	0800eb89 	.word	0x0800eb89
 800eb6c:	0800ebff 	.word	0x0800ebff
 800eb70:	0800ec13 	.word	0x0800ec13
 800eb74:	0800ec5f 	.word	0x0800ec5f
 800eb78:	0800eb89 	.word	0x0800eb89
 800eb7c:	0800eb89 	.word	0x0800eb89
 800eb80:	0800ebff 	.word	0x0800ebff
 800eb84:	0800ec13 	.word	0x0800ec13
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800eb8e:	f043 0301 	orr.w	r3, r3, #1
 800eb92:	b2da      	uxtb	r2, r3
 800eb94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eb9a:	68ba      	ldr	r2, [r7, #8]
 800eb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb9e:	699b      	ldr	r3, [r3, #24]
 800eba0:	18d1      	adds	r1, r2, r3
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eba8:	f7ff ff5c 	bl	800ea64 <prvInsertTimerInActiveList>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d06c      	beq.n	800ec8c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebb4:	6a1b      	ldr	r3, [r3, #32]
 800ebb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ebba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebc0:	f003 0304 	and.w	r3, r3, #4
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d061      	beq.n	800ec8c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ebc8:	68ba      	ldr	r2, [r7, #8]
 800ebca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebcc:	699b      	ldr	r3, [r3, #24]
 800ebce:	441a      	add	r2, r3
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	9300      	str	r3, [sp, #0]
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	2100      	movs	r1, #0
 800ebd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebda:	f7ff fe01 	bl	800e7e0 <xTimerGenericCommand>
 800ebde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ebe0:	6a3b      	ldr	r3, [r7, #32]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d152      	bne.n	800ec8c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ebe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebea:	f383 8811 	msr	BASEPRI, r3
 800ebee:	f3bf 8f6f 	isb	sy
 800ebf2:	f3bf 8f4f 	dsb	sy
 800ebf6:	61bb      	str	r3, [r7, #24]
}
 800ebf8:	bf00      	nop
 800ebfa:	bf00      	nop
 800ebfc:	e7fd      	b.n	800ebfa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec04:	f023 0301 	bic.w	r3, r3, #1
 800ec08:	b2da      	uxtb	r2, r3
 800ec0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ec10:	e03d      	b.n	800ec8e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec18:	f043 0301 	orr.w	r3, r3, #1
 800ec1c:	b2da      	uxtb	r2, r3
 800ec1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ec24:	68ba      	ldr	r2, [r7, #8]
 800ec26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec28:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ec2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec2c:	699b      	ldr	r3, [r3, #24]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10b      	bne.n	800ec4a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ec32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec36:	f383 8811 	msr	BASEPRI, r3
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	f3bf 8f4f 	dsb	sy
 800ec42:	617b      	str	r3, [r7, #20]
}
 800ec44:	bf00      	nop
 800ec46:	bf00      	nop
 800ec48:	e7fd      	b.n	800ec46 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ec4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec4c:	699a      	ldr	r2, [r3, #24]
 800ec4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec50:	18d1      	adds	r1, r2, r3
 800ec52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec58:	f7ff ff04 	bl	800ea64 <prvInsertTimerInActiveList>
					break;
 800ec5c:	e017      	b.n	800ec8e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ec5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec64:	f003 0302 	and.w	r3, r3, #2
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d103      	bne.n	800ec74 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ec6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec6e:	f000 fbeb 	bl	800f448 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ec72:	e00c      	b.n	800ec8e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec7a:	f023 0301 	bic.w	r3, r3, #1
 800ec7e:	b2da      	uxtb	r2, r3
 800ec80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ec86:	e002      	b.n	800ec8e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ec88:	bf00      	nop
 800ec8a:	e000      	b.n	800ec8e <prvProcessReceivedCommands+0x1a6>
					break;
 800ec8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec8e:	4b08      	ldr	r3, [pc, #32]	@ (800ecb0 <prvProcessReceivedCommands+0x1c8>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	1d39      	adds	r1, r7, #4
 800ec94:	2200      	movs	r2, #0
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fe f8f4 	bl	800ce84 <xQueueReceive>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f47f af26 	bne.w	800eaf0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800eca4:	bf00      	nop
 800eca6:	bf00      	nop
 800eca8:	3730      	adds	r7, #48	@ 0x30
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	200018bc 	.word	0x200018bc

0800ecb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b088      	sub	sp, #32
 800ecb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ecba:	e049      	b.n	800ed50 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ecbc:	4b2e      	ldr	r3, [pc, #184]	@ (800ed78 <prvSwitchTimerLists+0xc4>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	68db      	ldr	r3, [r3, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecc6:	4b2c      	ldr	r3, [pc, #176]	@ (800ed78 <prvSwitchTimerLists+0xc4>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	68db      	ldr	r3, [r3, #12]
 800eccc:	68db      	ldr	r3, [r3, #12]
 800ecce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	3304      	adds	r3, #4
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7fd fc0f 	bl	800c4f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	6a1b      	ldr	r3, [r3, #32]
 800ecde:	68f8      	ldr	r0, [r7, #12]
 800ece0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ece8:	f003 0304 	and.w	r3, r3, #4
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d02f      	beq.n	800ed50 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	699b      	ldr	r3, [r3, #24]
 800ecf4:	693a      	ldr	r2, [r7, #16]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ecfa:	68ba      	ldr	r2, [r7, #8]
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d90e      	bls.n	800ed20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	68ba      	ldr	r2, [r7, #8]
 800ed06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	68fa      	ldr	r2, [r7, #12]
 800ed0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed0e:	4b1a      	ldr	r3, [pc, #104]	@ (800ed78 <prvSwitchTimerLists+0xc4>)
 800ed10:	681a      	ldr	r2, [r3, #0]
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	3304      	adds	r3, #4
 800ed16:	4619      	mov	r1, r3
 800ed18:	4610      	mov	r0, r2
 800ed1a:	f7fd fbb4 	bl	800c486 <vListInsert>
 800ed1e:	e017      	b.n	800ed50 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ed20:	2300      	movs	r3, #0
 800ed22:	9300      	str	r3, [sp, #0]
 800ed24:	2300      	movs	r3, #0
 800ed26:	693a      	ldr	r2, [r7, #16]
 800ed28:	2100      	movs	r1, #0
 800ed2a:	68f8      	ldr	r0, [r7, #12]
 800ed2c:	f7ff fd58 	bl	800e7e0 <xTimerGenericCommand>
 800ed30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d10b      	bne.n	800ed50 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ed38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed3c:	f383 8811 	msr	BASEPRI, r3
 800ed40:	f3bf 8f6f 	isb	sy
 800ed44:	f3bf 8f4f 	dsb	sy
 800ed48:	603b      	str	r3, [r7, #0]
}
 800ed4a:	bf00      	nop
 800ed4c:	bf00      	nop
 800ed4e:	e7fd      	b.n	800ed4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed50:	4b09      	ldr	r3, [pc, #36]	@ (800ed78 <prvSwitchTimerLists+0xc4>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d1b0      	bne.n	800ecbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ed5a:	4b07      	ldr	r3, [pc, #28]	@ (800ed78 <prvSwitchTimerLists+0xc4>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ed60:	4b06      	ldr	r3, [pc, #24]	@ (800ed7c <prvSwitchTimerLists+0xc8>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	4a04      	ldr	r2, [pc, #16]	@ (800ed78 <prvSwitchTimerLists+0xc4>)
 800ed66:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ed68:	4a04      	ldr	r2, [pc, #16]	@ (800ed7c <prvSwitchTimerLists+0xc8>)
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	6013      	str	r3, [r2, #0]
}
 800ed6e:	bf00      	nop
 800ed70:	3718      	adds	r7, #24
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	200018b4 	.word	0x200018b4
 800ed7c:	200018b8 	.word	0x200018b8

0800ed80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ed86:	f000 f96f 	bl	800f068 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ed8a:	4b15      	ldr	r3, [pc, #84]	@ (800ede0 <prvCheckForValidListAndQueue+0x60>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d120      	bne.n	800edd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ed92:	4814      	ldr	r0, [pc, #80]	@ (800ede4 <prvCheckForValidListAndQueue+0x64>)
 800ed94:	f7fd fb26 	bl	800c3e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ed98:	4813      	ldr	r0, [pc, #76]	@ (800ede8 <prvCheckForValidListAndQueue+0x68>)
 800ed9a:	f7fd fb23 	bl	800c3e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ed9e:	4b13      	ldr	r3, [pc, #76]	@ (800edec <prvCheckForValidListAndQueue+0x6c>)
 800eda0:	4a10      	ldr	r2, [pc, #64]	@ (800ede4 <prvCheckForValidListAndQueue+0x64>)
 800eda2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800eda4:	4b12      	ldr	r3, [pc, #72]	@ (800edf0 <prvCheckForValidListAndQueue+0x70>)
 800eda6:	4a10      	ldr	r2, [pc, #64]	@ (800ede8 <prvCheckForValidListAndQueue+0x68>)
 800eda8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800edaa:	2300      	movs	r3, #0
 800edac:	9300      	str	r3, [sp, #0]
 800edae:	4b11      	ldr	r3, [pc, #68]	@ (800edf4 <prvCheckForValidListAndQueue+0x74>)
 800edb0:	4a11      	ldr	r2, [pc, #68]	@ (800edf8 <prvCheckForValidListAndQueue+0x78>)
 800edb2:	2110      	movs	r1, #16
 800edb4:	200a      	movs	r0, #10
 800edb6:	f7fd fc33 	bl	800c620 <xQueueGenericCreateStatic>
 800edba:	4603      	mov	r3, r0
 800edbc:	4a08      	ldr	r2, [pc, #32]	@ (800ede0 <prvCheckForValidListAndQueue+0x60>)
 800edbe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800edc0:	4b07      	ldr	r3, [pc, #28]	@ (800ede0 <prvCheckForValidListAndQueue+0x60>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d005      	beq.n	800edd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800edc8:	4b05      	ldr	r3, [pc, #20]	@ (800ede0 <prvCheckForValidListAndQueue+0x60>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	490b      	ldr	r1, [pc, #44]	@ (800edfc <prvCheckForValidListAndQueue+0x7c>)
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fe fc18 	bl	800d604 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800edd4:	f000 f97a 	bl	800f0cc <vPortExitCritical>
}
 800edd8:	bf00      	nop
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	200018bc 	.word	0x200018bc
 800ede4:	2000188c 	.word	0x2000188c
 800ede8:	200018a0 	.word	0x200018a0
 800edec:	200018b4 	.word	0x200018b4
 800edf0:	200018b8 	.word	0x200018b8
 800edf4:	20001968 	.word	0x20001968
 800edf8:	200018c8 	.word	0x200018c8
 800edfc:	08015a34 	.word	0x08015a34

0800ee00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ee00:	b480      	push	{r7}
 800ee02:	b085      	sub	sp, #20
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	60b9      	str	r1, [r7, #8]
 800ee0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	3b04      	subs	r3, #4
 800ee10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ee18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	3b04      	subs	r3, #4
 800ee1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	f023 0201 	bic.w	r2, r3, #1
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	3b04      	subs	r3, #4
 800ee2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ee30:	4a0c      	ldr	r2, [pc, #48]	@ (800ee64 <pxPortInitialiseStack+0x64>)
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	3b14      	subs	r3, #20
 800ee3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	3b04      	subs	r3, #4
 800ee46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f06f 0202 	mvn.w	r2, #2
 800ee4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	3b20      	subs	r3, #32
 800ee54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ee56:	68fb      	ldr	r3, [r7, #12]
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3714      	adds	r7, #20
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr
 800ee64:	0800ee69 	.word	0x0800ee69

0800ee68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b085      	sub	sp, #20
 800ee6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ee72:	4b13      	ldr	r3, [pc, #76]	@ (800eec0 <prvTaskExitError+0x58>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee7a:	d00b      	beq.n	800ee94 <prvTaskExitError+0x2c>
	__asm volatile
 800ee7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee80:	f383 8811 	msr	BASEPRI, r3
 800ee84:	f3bf 8f6f 	isb	sy
 800ee88:	f3bf 8f4f 	dsb	sy
 800ee8c:	60fb      	str	r3, [r7, #12]
}
 800ee8e:	bf00      	nop
 800ee90:	bf00      	nop
 800ee92:	e7fd      	b.n	800ee90 <prvTaskExitError+0x28>
	__asm volatile
 800ee94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	60bb      	str	r3, [r7, #8]
}
 800eea6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eea8:	bf00      	nop
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d0fc      	beq.n	800eeaa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eeb0:	bf00      	nop
 800eeb2:	bf00      	nop
 800eeb4:	3714      	adds	r7, #20
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop
 800eec0:	200000b4 	.word	0x200000b4
	...

0800eed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eed0:	4b07      	ldr	r3, [pc, #28]	@ (800eef0 <pxCurrentTCBConst2>)
 800eed2:	6819      	ldr	r1, [r3, #0]
 800eed4:	6808      	ldr	r0, [r1, #0]
 800eed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeda:	f380 8809 	msr	PSP, r0
 800eede:	f3bf 8f6f 	isb	sy
 800eee2:	f04f 0000 	mov.w	r0, #0
 800eee6:	f380 8811 	msr	BASEPRI, r0
 800eeea:	4770      	bx	lr
 800eeec:	f3af 8000 	nop.w

0800eef0 <pxCurrentTCBConst2>:
 800eef0:	2000138c 	.word	0x2000138c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eef4:	bf00      	nop
 800eef6:	bf00      	nop

0800eef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eef8:	4808      	ldr	r0, [pc, #32]	@ (800ef1c <prvPortStartFirstTask+0x24>)
 800eefa:	6800      	ldr	r0, [r0, #0]
 800eefc:	6800      	ldr	r0, [r0, #0]
 800eefe:	f380 8808 	msr	MSP, r0
 800ef02:	f04f 0000 	mov.w	r0, #0
 800ef06:	f380 8814 	msr	CONTROL, r0
 800ef0a:	b662      	cpsie	i
 800ef0c:	b661      	cpsie	f
 800ef0e:	f3bf 8f4f 	dsb	sy
 800ef12:	f3bf 8f6f 	isb	sy
 800ef16:	df00      	svc	0
 800ef18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ef1a:	bf00      	nop
 800ef1c:	e000ed08 	.word	0xe000ed08

0800ef20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b086      	sub	sp, #24
 800ef24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ef26:	4b47      	ldr	r3, [pc, #284]	@ (800f044 <xPortStartScheduler+0x124>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	4a47      	ldr	r2, [pc, #284]	@ (800f048 <xPortStartScheduler+0x128>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d10b      	bne.n	800ef48 <xPortStartScheduler+0x28>
	__asm volatile
 800ef30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef34:	f383 8811 	msr	BASEPRI, r3
 800ef38:	f3bf 8f6f 	isb	sy
 800ef3c:	f3bf 8f4f 	dsb	sy
 800ef40:	613b      	str	r3, [r7, #16]
}
 800ef42:	bf00      	nop
 800ef44:	bf00      	nop
 800ef46:	e7fd      	b.n	800ef44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ef48:	4b3e      	ldr	r3, [pc, #248]	@ (800f044 <xPortStartScheduler+0x124>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	4a3f      	ldr	r2, [pc, #252]	@ (800f04c <xPortStartScheduler+0x12c>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d10b      	bne.n	800ef6a <xPortStartScheduler+0x4a>
	__asm volatile
 800ef52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef56:	f383 8811 	msr	BASEPRI, r3
 800ef5a:	f3bf 8f6f 	isb	sy
 800ef5e:	f3bf 8f4f 	dsb	sy
 800ef62:	60fb      	str	r3, [r7, #12]
}
 800ef64:	bf00      	nop
 800ef66:	bf00      	nop
 800ef68:	e7fd      	b.n	800ef66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ef6a:	4b39      	ldr	r3, [pc, #228]	@ (800f050 <xPortStartScheduler+0x130>)
 800ef6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	22ff      	movs	r2, #255	@ 0xff
 800ef7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	b2db      	uxtb	r3, r3
 800ef82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ef84:	78fb      	ldrb	r3, [r7, #3]
 800ef86:	b2db      	uxtb	r3, r3
 800ef88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ef8c:	b2da      	uxtb	r2, r3
 800ef8e:	4b31      	ldr	r3, [pc, #196]	@ (800f054 <xPortStartScheduler+0x134>)
 800ef90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ef92:	4b31      	ldr	r3, [pc, #196]	@ (800f058 <xPortStartScheduler+0x138>)
 800ef94:	2207      	movs	r2, #7
 800ef96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ef98:	e009      	b.n	800efae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ef9a:	4b2f      	ldr	r3, [pc, #188]	@ (800f058 <xPortStartScheduler+0x138>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	4a2d      	ldr	r2, [pc, #180]	@ (800f058 <xPortStartScheduler+0x138>)
 800efa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800efa4:	78fb      	ldrb	r3, [r7, #3]
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	005b      	lsls	r3, r3, #1
 800efaa:	b2db      	uxtb	r3, r3
 800efac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800efae:	78fb      	ldrb	r3, [r7, #3]
 800efb0:	b2db      	uxtb	r3, r3
 800efb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800efb6:	2b80      	cmp	r3, #128	@ 0x80
 800efb8:	d0ef      	beq.n	800ef9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800efba:	4b27      	ldr	r3, [pc, #156]	@ (800f058 <xPortStartScheduler+0x138>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f1c3 0307 	rsb	r3, r3, #7
 800efc2:	2b04      	cmp	r3, #4
 800efc4:	d00b      	beq.n	800efde <xPortStartScheduler+0xbe>
	__asm volatile
 800efc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efca:	f383 8811 	msr	BASEPRI, r3
 800efce:	f3bf 8f6f 	isb	sy
 800efd2:	f3bf 8f4f 	dsb	sy
 800efd6:	60bb      	str	r3, [r7, #8]
}
 800efd8:	bf00      	nop
 800efda:	bf00      	nop
 800efdc:	e7fd      	b.n	800efda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800efde:	4b1e      	ldr	r3, [pc, #120]	@ (800f058 <xPortStartScheduler+0x138>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	021b      	lsls	r3, r3, #8
 800efe4:	4a1c      	ldr	r2, [pc, #112]	@ (800f058 <xPortStartScheduler+0x138>)
 800efe6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800efe8:	4b1b      	ldr	r3, [pc, #108]	@ (800f058 <xPortStartScheduler+0x138>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800eff0:	4a19      	ldr	r2, [pc, #100]	@ (800f058 <xPortStartScheduler+0x138>)
 800eff2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	b2da      	uxtb	r2, r3
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800effc:	4b17      	ldr	r3, [pc, #92]	@ (800f05c <xPortStartScheduler+0x13c>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a16      	ldr	r2, [pc, #88]	@ (800f05c <xPortStartScheduler+0x13c>)
 800f002:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f006:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f008:	4b14      	ldr	r3, [pc, #80]	@ (800f05c <xPortStartScheduler+0x13c>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4a13      	ldr	r2, [pc, #76]	@ (800f05c <xPortStartScheduler+0x13c>)
 800f00e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f012:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f014:	f000 f8da 	bl	800f1cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f018:	4b11      	ldr	r3, [pc, #68]	@ (800f060 <xPortStartScheduler+0x140>)
 800f01a:	2200      	movs	r2, #0
 800f01c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f01e:	f000 f8f9 	bl	800f214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f022:	4b10      	ldr	r3, [pc, #64]	@ (800f064 <xPortStartScheduler+0x144>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	4a0f      	ldr	r2, [pc, #60]	@ (800f064 <xPortStartScheduler+0x144>)
 800f028:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f02c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f02e:	f7ff ff63 	bl	800eef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f032:	f7fe ff29 	bl	800de88 <vTaskSwitchContext>
	prvTaskExitError();
 800f036:	f7ff ff17 	bl	800ee68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3718      	adds	r7, #24
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	e000ed00 	.word	0xe000ed00
 800f048:	410fc271 	.word	0x410fc271
 800f04c:	410fc270 	.word	0x410fc270
 800f050:	e000e400 	.word	0xe000e400
 800f054:	200019b8 	.word	0x200019b8
 800f058:	200019bc 	.word	0x200019bc
 800f05c:	e000ed20 	.word	0xe000ed20
 800f060:	200000b4 	.word	0x200000b4
 800f064:	e000ef34 	.word	0xe000ef34

0800f068 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f068:	b480      	push	{r7}
 800f06a:	b083      	sub	sp, #12
 800f06c:	af00      	add	r7, sp, #0
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f072:	f383 8811 	msr	BASEPRI, r3
 800f076:	f3bf 8f6f 	isb	sy
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	607b      	str	r3, [r7, #4]
}
 800f080:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f082:	4b10      	ldr	r3, [pc, #64]	@ (800f0c4 <vPortEnterCritical+0x5c>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	3301      	adds	r3, #1
 800f088:	4a0e      	ldr	r2, [pc, #56]	@ (800f0c4 <vPortEnterCritical+0x5c>)
 800f08a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f08c:	4b0d      	ldr	r3, [pc, #52]	@ (800f0c4 <vPortEnterCritical+0x5c>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	2b01      	cmp	r3, #1
 800f092:	d110      	bne.n	800f0b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f094:	4b0c      	ldr	r3, [pc, #48]	@ (800f0c8 <vPortEnterCritical+0x60>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	b2db      	uxtb	r3, r3
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d00b      	beq.n	800f0b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0a2:	f383 8811 	msr	BASEPRI, r3
 800f0a6:	f3bf 8f6f 	isb	sy
 800f0aa:	f3bf 8f4f 	dsb	sy
 800f0ae:	603b      	str	r3, [r7, #0]
}
 800f0b0:	bf00      	nop
 800f0b2:	bf00      	nop
 800f0b4:	e7fd      	b.n	800f0b2 <vPortEnterCritical+0x4a>
	}
}
 800f0b6:	bf00      	nop
 800f0b8:	370c      	adds	r7, #12
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop
 800f0c4:	200000b4 	.word	0x200000b4
 800f0c8:	e000ed04 	.word	0xe000ed04

0800f0cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b083      	sub	sp, #12
 800f0d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f0d2:	4b12      	ldr	r3, [pc, #72]	@ (800f11c <vPortExitCritical+0x50>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d10b      	bne.n	800f0f2 <vPortExitCritical+0x26>
	__asm volatile
 800f0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0de:	f383 8811 	msr	BASEPRI, r3
 800f0e2:	f3bf 8f6f 	isb	sy
 800f0e6:	f3bf 8f4f 	dsb	sy
 800f0ea:	607b      	str	r3, [r7, #4]
}
 800f0ec:	bf00      	nop
 800f0ee:	bf00      	nop
 800f0f0:	e7fd      	b.n	800f0ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800f11c <vPortExitCritical+0x50>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	3b01      	subs	r3, #1
 800f0f8:	4a08      	ldr	r2, [pc, #32]	@ (800f11c <vPortExitCritical+0x50>)
 800f0fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f0fc:	4b07      	ldr	r3, [pc, #28]	@ (800f11c <vPortExitCritical+0x50>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d105      	bne.n	800f110 <vPortExitCritical+0x44>
 800f104:	2300      	movs	r3, #0
 800f106:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	f383 8811 	msr	BASEPRI, r3
}
 800f10e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f110:	bf00      	nop
 800f112:	370c      	adds	r7, #12
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr
 800f11c:	200000b4 	.word	0x200000b4

0800f120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f120:	f3ef 8009 	mrs	r0, PSP
 800f124:	f3bf 8f6f 	isb	sy
 800f128:	4b15      	ldr	r3, [pc, #84]	@ (800f180 <pxCurrentTCBConst>)
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	f01e 0f10 	tst.w	lr, #16
 800f130:	bf08      	it	eq
 800f132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f13a:	6010      	str	r0, [r2, #0]
 800f13c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f140:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f144:	f380 8811 	msr	BASEPRI, r0
 800f148:	f3bf 8f4f 	dsb	sy
 800f14c:	f3bf 8f6f 	isb	sy
 800f150:	f7fe fe9a 	bl	800de88 <vTaskSwitchContext>
 800f154:	f04f 0000 	mov.w	r0, #0
 800f158:	f380 8811 	msr	BASEPRI, r0
 800f15c:	bc09      	pop	{r0, r3}
 800f15e:	6819      	ldr	r1, [r3, #0]
 800f160:	6808      	ldr	r0, [r1, #0]
 800f162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f166:	f01e 0f10 	tst.w	lr, #16
 800f16a:	bf08      	it	eq
 800f16c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f170:	f380 8809 	msr	PSP, r0
 800f174:	f3bf 8f6f 	isb	sy
 800f178:	4770      	bx	lr
 800f17a:	bf00      	nop
 800f17c:	f3af 8000 	nop.w

0800f180 <pxCurrentTCBConst>:
 800f180:	2000138c 	.word	0x2000138c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f184:	bf00      	nop
 800f186:	bf00      	nop

0800f188 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
	__asm volatile
 800f18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f192:	f383 8811 	msr	BASEPRI, r3
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	f3bf 8f4f 	dsb	sy
 800f19e:	607b      	str	r3, [r7, #4]
}
 800f1a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f1a2:	f7fe fdb7 	bl	800dd14 <xTaskIncrementTick>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d003      	beq.n	800f1b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f1ac:	4b06      	ldr	r3, [pc, #24]	@ (800f1c8 <xPortSysTickHandler+0x40>)
 800f1ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1b2:	601a      	str	r2, [r3, #0]
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	f383 8811 	msr	BASEPRI, r3
}
 800f1be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f1c0:	bf00      	nop
 800f1c2:	3708      	adds	r7, #8
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}
 800f1c8:	e000ed04 	.word	0xe000ed04

0800f1cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f1d0:	4b0b      	ldr	r3, [pc, #44]	@ (800f200 <vPortSetupTimerInterrupt+0x34>)
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f1d6:	4b0b      	ldr	r3, [pc, #44]	@ (800f204 <vPortSetupTimerInterrupt+0x38>)
 800f1d8:	2200      	movs	r2, #0
 800f1da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f1dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f208 <vPortSetupTimerInterrupt+0x3c>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4a0a      	ldr	r2, [pc, #40]	@ (800f20c <vPortSetupTimerInterrupt+0x40>)
 800f1e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f1e6:	099b      	lsrs	r3, r3, #6
 800f1e8:	4a09      	ldr	r2, [pc, #36]	@ (800f210 <vPortSetupTimerInterrupt+0x44>)
 800f1ea:	3b01      	subs	r3, #1
 800f1ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f1ee:	4b04      	ldr	r3, [pc, #16]	@ (800f200 <vPortSetupTimerInterrupt+0x34>)
 800f1f0:	2207      	movs	r2, #7
 800f1f2:	601a      	str	r2, [r3, #0]
}
 800f1f4:	bf00      	nop
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr
 800f1fe:	bf00      	nop
 800f200:	e000e010 	.word	0xe000e010
 800f204:	e000e018 	.word	0xe000e018
 800f208:	200000a8 	.word	0x200000a8
 800f20c:	10624dd3 	.word	0x10624dd3
 800f210:	e000e014 	.word	0xe000e014

0800f214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f214:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f224 <vPortEnableVFP+0x10>
 800f218:	6801      	ldr	r1, [r0, #0]
 800f21a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f21e:	6001      	str	r1, [r0, #0]
 800f220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f222:	bf00      	nop
 800f224:	e000ed88 	.word	0xe000ed88

0800f228 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f228:	b480      	push	{r7}
 800f22a:	b085      	sub	sp, #20
 800f22c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f22e:	f3ef 8305 	mrs	r3, IPSR
 800f232:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	2b0f      	cmp	r3, #15
 800f238:	d915      	bls.n	800f266 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f23a:	4a18      	ldr	r2, [pc, #96]	@ (800f29c <vPortValidateInterruptPriority+0x74>)
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	4413      	add	r3, r2
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f244:	4b16      	ldr	r3, [pc, #88]	@ (800f2a0 <vPortValidateInterruptPriority+0x78>)
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	7afa      	ldrb	r2, [r7, #11]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d20b      	bcs.n	800f266 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f252:	f383 8811 	msr	BASEPRI, r3
 800f256:	f3bf 8f6f 	isb	sy
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	607b      	str	r3, [r7, #4]
}
 800f260:	bf00      	nop
 800f262:	bf00      	nop
 800f264:	e7fd      	b.n	800f262 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f266:	4b0f      	ldr	r3, [pc, #60]	@ (800f2a4 <vPortValidateInterruptPriority+0x7c>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f26e:	4b0e      	ldr	r3, [pc, #56]	@ (800f2a8 <vPortValidateInterruptPriority+0x80>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	429a      	cmp	r2, r3
 800f274:	d90b      	bls.n	800f28e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f27a:	f383 8811 	msr	BASEPRI, r3
 800f27e:	f3bf 8f6f 	isb	sy
 800f282:	f3bf 8f4f 	dsb	sy
 800f286:	603b      	str	r3, [r7, #0]
}
 800f288:	bf00      	nop
 800f28a:	bf00      	nop
 800f28c:	e7fd      	b.n	800f28a <vPortValidateInterruptPriority+0x62>
	}
 800f28e:	bf00      	nop
 800f290:	3714      	adds	r7, #20
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr
 800f29a:	bf00      	nop
 800f29c:	e000e3f0 	.word	0xe000e3f0
 800f2a0:	200019b8 	.word	0x200019b8
 800f2a4:	e000ed0c 	.word	0xe000ed0c
 800f2a8:	200019bc 	.word	0x200019bc

0800f2ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b08a      	sub	sp, #40	@ 0x28
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f2b8:	f7fe fc70 	bl	800db9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f2bc:	4b5c      	ldr	r3, [pc, #368]	@ (800f430 <pvPortMalloc+0x184>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d101      	bne.n	800f2c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f2c4:	f000 f924 	bl	800f510 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f2c8:	4b5a      	ldr	r3, [pc, #360]	@ (800f434 <pvPortMalloc+0x188>)
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	4013      	ands	r3, r2
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f040 8095 	bne.w	800f400 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d01e      	beq.n	800f31a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f2dc:	2208      	movs	r2, #8
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4413      	add	r3, r2
 800f2e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f003 0307 	and.w	r3, r3, #7
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d015      	beq.n	800f31a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f023 0307 	bic.w	r3, r3, #7
 800f2f4:	3308      	adds	r3, #8
 800f2f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f003 0307 	and.w	r3, r3, #7
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d00b      	beq.n	800f31a <pvPortMalloc+0x6e>
	__asm volatile
 800f302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f306:	f383 8811 	msr	BASEPRI, r3
 800f30a:	f3bf 8f6f 	isb	sy
 800f30e:	f3bf 8f4f 	dsb	sy
 800f312:	617b      	str	r3, [r7, #20]
}
 800f314:	bf00      	nop
 800f316:	bf00      	nop
 800f318:	e7fd      	b.n	800f316 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d06f      	beq.n	800f400 <pvPortMalloc+0x154>
 800f320:	4b45      	ldr	r3, [pc, #276]	@ (800f438 <pvPortMalloc+0x18c>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	687a      	ldr	r2, [r7, #4]
 800f326:	429a      	cmp	r2, r3
 800f328:	d86a      	bhi.n	800f400 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f32a:	4b44      	ldr	r3, [pc, #272]	@ (800f43c <pvPortMalloc+0x190>)
 800f32c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f32e:	4b43      	ldr	r3, [pc, #268]	@ (800f43c <pvPortMalloc+0x190>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f334:	e004      	b.n	800f340 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f338:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	429a      	cmp	r2, r3
 800f348:	d903      	bls.n	800f352 <pvPortMalloc+0xa6>
 800f34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d1f1      	bne.n	800f336 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f352:	4b37      	ldr	r3, [pc, #220]	@ (800f430 <pvPortMalloc+0x184>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f358:	429a      	cmp	r2, r3
 800f35a:	d051      	beq.n	800f400 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f35c:	6a3b      	ldr	r3, [r7, #32]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	2208      	movs	r2, #8
 800f362:	4413      	add	r3, r2
 800f364:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	6a3b      	ldr	r3, [r7, #32]
 800f36c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f370:	685a      	ldr	r2, [r3, #4]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	1ad2      	subs	r2, r2, r3
 800f376:	2308      	movs	r3, #8
 800f378:	005b      	lsls	r3, r3, #1
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d920      	bls.n	800f3c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f37e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4413      	add	r3, r2
 800f384:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	f003 0307 	and.w	r3, r3, #7
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d00b      	beq.n	800f3a8 <pvPortMalloc+0xfc>
	__asm volatile
 800f390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f394:	f383 8811 	msr	BASEPRI, r3
 800f398:	f3bf 8f6f 	isb	sy
 800f39c:	f3bf 8f4f 	dsb	sy
 800f3a0:	613b      	str	r3, [r7, #16]
}
 800f3a2:	bf00      	nop
 800f3a4:	bf00      	nop
 800f3a6:	e7fd      	b.n	800f3a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3aa:	685a      	ldr	r2, [r3, #4]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	1ad2      	subs	r2, r2, r3
 800f3b0:	69bb      	ldr	r3, [r7, #24]
 800f3b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f3ba:	69b8      	ldr	r0, [r7, #24]
 800f3bc:	f000 f90a 	bl	800f5d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f3c0:	4b1d      	ldr	r3, [pc, #116]	@ (800f438 <pvPortMalloc+0x18c>)
 800f3c2:	681a      	ldr	r2, [r3, #0]
 800f3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	1ad3      	subs	r3, r2, r3
 800f3ca:	4a1b      	ldr	r2, [pc, #108]	@ (800f438 <pvPortMalloc+0x18c>)
 800f3cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f3ce:	4b1a      	ldr	r3, [pc, #104]	@ (800f438 <pvPortMalloc+0x18c>)
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	4b1b      	ldr	r3, [pc, #108]	@ (800f440 <pvPortMalloc+0x194>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d203      	bcs.n	800f3e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f3da:	4b17      	ldr	r3, [pc, #92]	@ (800f438 <pvPortMalloc+0x18c>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	4a18      	ldr	r2, [pc, #96]	@ (800f440 <pvPortMalloc+0x194>)
 800f3e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e4:	685a      	ldr	r2, [r3, #4]
 800f3e6:	4b13      	ldr	r3, [pc, #76]	@ (800f434 <pvPortMalloc+0x188>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	431a      	orrs	r2, r3
 800f3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f3f6:	4b13      	ldr	r3, [pc, #76]	@ (800f444 <pvPortMalloc+0x198>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	4a11      	ldr	r2, [pc, #68]	@ (800f444 <pvPortMalloc+0x198>)
 800f3fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f400:	f7fe fbda 	bl	800dbb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	f003 0307 	and.w	r3, r3, #7
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d00b      	beq.n	800f426 <pvPortMalloc+0x17a>
	__asm volatile
 800f40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f412:	f383 8811 	msr	BASEPRI, r3
 800f416:	f3bf 8f6f 	isb	sy
 800f41a:	f3bf 8f4f 	dsb	sy
 800f41e:	60fb      	str	r3, [r7, #12]
}
 800f420:	bf00      	nop
 800f422:	bf00      	nop
 800f424:	e7fd      	b.n	800f422 <pvPortMalloc+0x176>
	return pvReturn;
 800f426:	69fb      	ldr	r3, [r7, #28]
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3728      	adds	r7, #40	@ 0x28
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	200055c8 	.word	0x200055c8
 800f434:	200055dc 	.word	0x200055dc
 800f438:	200055cc 	.word	0x200055cc
 800f43c:	200055c0 	.word	0x200055c0
 800f440:	200055d0 	.word	0x200055d0
 800f444:	200055d4 	.word	0x200055d4

0800f448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b086      	sub	sp, #24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d04f      	beq.n	800f4fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f45a:	2308      	movs	r3, #8
 800f45c:	425b      	negs	r3, r3
 800f45e:	697a      	ldr	r2, [r7, #20]
 800f460:	4413      	add	r3, r2
 800f462:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	685a      	ldr	r2, [r3, #4]
 800f46c:	4b25      	ldr	r3, [pc, #148]	@ (800f504 <vPortFree+0xbc>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	4013      	ands	r3, r2
 800f472:	2b00      	cmp	r3, #0
 800f474:	d10b      	bne.n	800f48e <vPortFree+0x46>
	__asm volatile
 800f476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f47a:	f383 8811 	msr	BASEPRI, r3
 800f47e:	f3bf 8f6f 	isb	sy
 800f482:	f3bf 8f4f 	dsb	sy
 800f486:	60fb      	str	r3, [r7, #12]
}
 800f488:	bf00      	nop
 800f48a:	bf00      	nop
 800f48c:	e7fd      	b.n	800f48a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d00b      	beq.n	800f4ae <vPortFree+0x66>
	__asm volatile
 800f496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f49a:	f383 8811 	msr	BASEPRI, r3
 800f49e:	f3bf 8f6f 	isb	sy
 800f4a2:	f3bf 8f4f 	dsb	sy
 800f4a6:	60bb      	str	r3, [r7, #8]
}
 800f4a8:	bf00      	nop
 800f4aa:	bf00      	nop
 800f4ac:	e7fd      	b.n	800f4aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	685a      	ldr	r2, [r3, #4]
 800f4b2:	4b14      	ldr	r3, [pc, #80]	@ (800f504 <vPortFree+0xbc>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4013      	ands	r3, r2
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d01e      	beq.n	800f4fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d11a      	bne.n	800f4fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	685a      	ldr	r2, [r3, #4]
 800f4c8:	4b0e      	ldr	r3, [pc, #56]	@ (800f504 <vPortFree+0xbc>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	43db      	mvns	r3, r3
 800f4ce:	401a      	ands	r2, r3
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f4d4:	f7fe fb62 	bl	800db9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	685a      	ldr	r2, [r3, #4]
 800f4dc:	4b0a      	ldr	r3, [pc, #40]	@ (800f508 <vPortFree+0xc0>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	4a09      	ldr	r2, [pc, #36]	@ (800f508 <vPortFree+0xc0>)
 800f4e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f4e6:	6938      	ldr	r0, [r7, #16]
 800f4e8:	f000 f874 	bl	800f5d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f4ec:	4b07      	ldr	r3, [pc, #28]	@ (800f50c <vPortFree+0xc4>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	4a06      	ldr	r2, [pc, #24]	@ (800f50c <vPortFree+0xc4>)
 800f4f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f4f6:	f7fe fb5f 	bl	800dbb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f4fa:	bf00      	nop
 800f4fc:	3718      	adds	r7, #24
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	200055dc 	.word	0x200055dc
 800f508:	200055cc 	.word	0x200055cc
 800f50c:	200055d8 	.word	0x200055d8

0800f510 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f510:	b480      	push	{r7}
 800f512:	b085      	sub	sp, #20
 800f514:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f516:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f51a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f51c:	4b27      	ldr	r3, [pc, #156]	@ (800f5bc <prvHeapInit+0xac>)
 800f51e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f003 0307 	and.w	r3, r3, #7
 800f526:	2b00      	cmp	r3, #0
 800f528:	d00c      	beq.n	800f544 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	3307      	adds	r3, #7
 800f52e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	f023 0307 	bic.w	r3, r3, #7
 800f536:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f538:	68ba      	ldr	r2, [r7, #8]
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	1ad3      	subs	r3, r2, r3
 800f53e:	4a1f      	ldr	r2, [pc, #124]	@ (800f5bc <prvHeapInit+0xac>)
 800f540:	4413      	add	r3, r2
 800f542:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f548:	4a1d      	ldr	r2, [pc, #116]	@ (800f5c0 <prvHeapInit+0xb0>)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f54e:	4b1c      	ldr	r3, [pc, #112]	@ (800f5c0 <prvHeapInit+0xb0>)
 800f550:	2200      	movs	r2, #0
 800f552:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	68ba      	ldr	r2, [r7, #8]
 800f558:	4413      	add	r3, r2
 800f55a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f55c:	2208      	movs	r2, #8
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	1a9b      	subs	r3, r3, r2
 800f562:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f023 0307 	bic.w	r3, r3, #7
 800f56a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	4a15      	ldr	r2, [pc, #84]	@ (800f5c4 <prvHeapInit+0xb4>)
 800f570:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f572:	4b14      	ldr	r3, [pc, #80]	@ (800f5c4 <prvHeapInit+0xb4>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	2200      	movs	r2, #0
 800f578:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f57a:	4b12      	ldr	r3, [pc, #72]	@ (800f5c4 <prvHeapInit+0xb4>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	2200      	movs	r2, #0
 800f580:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	68fa      	ldr	r2, [r7, #12]
 800f58a:	1ad2      	subs	r2, r2, r3
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f590:	4b0c      	ldr	r3, [pc, #48]	@ (800f5c4 <prvHeapInit+0xb4>)
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	4a0a      	ldr	r2, [pc, #40]	@ (800f5c8 <prvHeapInit+0xb8>)
 800f59e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	4a09      	ldr	r2, [pc, #36]	@ (800f5cc <prvHeapInit+0xbc>)
 800f5a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f5a8:	4b09      	ldr	r3, [pc, #36]	@ (800f5d0 <prvHeapInit+0xc0>)
 800f5aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f5ae:	601a      	str	r2, [r3, #0]
}
 800f5b0:	bf00      	nop
 800f5b2:	3714      	adds	r7, #20
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr
 800f5bc:	200019c0 	.word	0x200019c0
 800f5c0:	200055c0 	.word	0x200055c0
 800f5c4:	200055c8 	.word	0x200055c8
 800f5c8:	200055d0 	.word	0x200055d0
 800f5cc:	200055cc 	.word	0x200055cc
 800f5d0:	200055dc 	.word	0x200055dc

0800f5d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b085      	sub	sp, #20
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f5dc:	4b28      	ldr	r3, [pc, #160]	@ (800f680 <prvInsertBlockIntoFreeList+0xac>)
 800f5de:	60fb      	str	r3, [r7, #12]
 800f5e0:	e002      	b.n	800f5e8 <prvInsertBlockIntoFreeList+0x14>
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	60fb      	str	r3, [r7, #12]
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	687a      	ldr	r2, [r7, #4]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d8f7      	bhi.n	800f5e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	68ba      	ldr	r2, [r7, #8]
 800f5fc:	4413      	add	r3, r2
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	429a      	cmp	r2, r3
 800f602:	d108      	bne.n	800f616 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	685a      	ldr	r2, [r3, #4]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	441a      	add	r2, r3
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	68ba      	ldr	r2, [r7, #8]
 800f620:	441a      	add	r2, r3
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	429a      	cmp	r2, r3
 800f628:	d118      	bne.n	800f65c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681a      	ldr	r2, [r3, #0]
 800f62e:	4b15      	ldr	r3, [pc, #84]	@ (800f684 <prvInsertBlockIntoFreeList+0xb0>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	429a      	cmp	r2, r3
 800f634:	d00d      	beq.n	800f652 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	685a      	ldr	r2, [r3, #4]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	441a      	add	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	681a      	ldr	r2, [r3, #0]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	601a      	str	r2, [r3, #0]
 800f650:	e008      	b.n	800f664 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f652:	4b0c      	ldr	r3, [pc, #48]	@ (800f684 <prvInsertBlockIntoFreeList+0xb0>)
 800f654:	681a      	ldr	r2, [r3, #0]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	601a      	str	r2, [r3, #0]
 800f65a:	e003      	b.n	800f664 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681a      	ldr	r2, [r3, #0]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f664:	68fa      	ldr	r2, [r7, #12]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d002      	beq.n	800f672 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	687a      	ldr	r2, [r7, #4]
 800f670:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f672:	bf00      	nop
 800f674:	3714      	adds	r7, #20
 800f676:	46bd      	mov	sp, r7
 800f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop
 800f680:	200055c0 	.word	0x200055c0
 800f684:	200055c8 	.word	0x200055c8

0800f688 <__itoa>:
 800f688:	1e93      	subs	r3, r2, #2
 800f68a:	2b22      	cmp	r3, #34	@ 0x22
 800f68c:	b510      	push	{r4, lr}
 800f68e:	460c      	mov	r4, r1
 800f690:	d904      	bls.n	800f69c <__itoa+0x14>
 800f692:	2300      	movs	r3, #0
 800f694:	700b      	strb	r3, [r1, #0]
 800f696:	461c      	mov	r4, r3
 800f698:	4620      	mov	r0, r4
 800f69a:	bd10      	pop	{r4, pc}
 800f69c:	2a0a      	cmp	r2, #10
 800f69e:	d109      	bne.n	800f6b4 <__itoa+0x2c>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	da07      	bge.n	800f6b4 <__itoa+0x2c>
 800f6a4:	232d      	movs	r3, #45	@ 0x2d
 800f6a6:	700b      	strb	r3, [r1, #0]
 800f6a8:	4240      	negs	r0, r0
 800f6aa:	2101      	movs	r1, #1
 800f6ac:	4421      	add	r1, r4
 800f6ae:	f000 f8c3 	bl	800f838 <__utoa>
 800f6b2:	e7f1      	b.n	800f698 <__itoa+0x10>
 800f6b4:	2100      	movs	r1, #0
 800f6b6:	e7f9      	b.n	800f6ac <__itoa+0x24>

0800f6b8 <itoa>:
 800f6b8:	f7ff bfe6 	b.w	800f688 <__itoa>

0800f6bc <malloc>:
 800f6bc:	4b02      	ldr	r3, [pc, #8]	@ (800f6c8 <malloc+0xc>)
 800f6be:	4601      	mov	r1, r0
 800f6c0:	6818      	ldr	r0, [r3, #0]
 800f6c2:	f000 b82d 	b.w	800f720 <_malloc_r>
 800f6c6:	bf00      	nop
 800f6c8:	200000c4 	.word	0x200000c4

0800f6cc <free>:
 800f6cc:	4b02      	ldr	r3, [pc, #8]	@ (800f6d8 <free+0xc>)
 800f6ce:	4601      	mov	r1, r0
 800f6d0:	6818      	ldr	r0, [r3, #0]
 800f6d2:	f002 b885 	b.w	80117e0 <_free_r>
 800f6d6:	bf00      	nop
 800f6d8:	200000c4 	.word	0x200000c4

0800f6dc <sbrk_aligned>:
 800f6dc:	b570      	push	{r4, r5, r6, lr}
 800f6de:	4e0f      	ldr	r6, [pc, #60]	@ (800f71c <sbrk_aligned+0x40>)
 800f6e0:	460c      	mov	r4, r1
 800f6e2:	6831      	ldr	r1, [r6, #0]
 800f6e4:	4605      	mov	r5, r0
 800f6e6:	b911      	cbnz	r1, 800f6ee <sbrk_aligned+0x12>
 800f6e8:	f001 f9aa 	bl	8010a40 <_sbrk_r>
 800f6ec:	6030      	str	r0, [r6, #0]
 800f6ee:	4621      	mov	r1, r4
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	f001 f9a5 	bl	8010a40 <_sbrk_r>
 800f6f6:	1c43      	adds	r3, r0, #1
 800f6f8:	d103      	bne.n	800f702 <sbrk_aligned+0x26>
 800f6fa:	f04f 34ff 	mov.w	r4, #4294967295
 800f6fe:	4620      	mov	r0, r4
 800f700:	bd70      	pop	{r4, r5, r6, pc}
 800f702:	1cc4      	adds	r4, r0, #3
 800f704:	f024 0403 	bic.w	r4, r4, #3
 800f708:	42a0      	cmp	r0, r4
 800f70a:	d0f8      	beq.n	800f6fe <sbrk_aligned+0x22>
 800f70c:	1a21      	subs	r1, r4, r0
 800f70e:	4628      	mov	r0, r5
 800f710:	f001 f996 	bl	8010a40 <_sbrk_r>
 800f714:	3001      	adds	r0, #1
 800f716:	d1f2      	bne.n	800f6fe <sbrk_aligned+0x22>
 800f718:	e7ef      	b.n	800f6fa <sbrk_aligned+0x1e>
 800f71a:	bf00      	nop
 800f71c:	200055e0 	.word	0x200055e0

0800f720 <_malloc_r>:
 800f720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f724:	1ccd      	adds	r5, r1, #3
 800f726:	f025 0503 	bic.w	r5, r5, #3
 800f72a:	3508      	adds	r5, #8
 800f72c:	2d0c      	cmp	r5, #12
 800f72e:	bf38      	it	cc
 800f730:	250c      	movcc	r5, #12
 800f732:	2d00      	cmp	r5, #0
 800f734:	4606      	mov	r6, r0
 800f736:	db01      	blt.n	800f73c <_malloc_r+0x1c>
 800f738:	42a9      	cmp	r1, r5
 800f73a:	d904      	bls.n	800f746 <_malloc_r+0x26>
 800f73c:	230c      	movs	r3, #12
 800f73e:	6033      	str	r3, [r6, #0]
 800f740:	2000      	movs	r0, #0
 800f742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f81c <_malloc_r+0xfc>
 800f74a:	f000 f869 	bl	800f820 <__malloc_lock>
 800f74e:	f8d8 3000 	ldr.w	r3, [r8]
 800f752:	461c      	mov	r4, r3
 800f754:	bb44      	cbnz	r4, 800f7a8 <_malloc_r+0x88>
 800f756:	4629      	mov	r1, r5
 800f758:	4630      	mov	r0, r6
 800f75a:	f7ff ffbf 	bl	800f6dc <sbrk_aligned>
 800f75e:	1c43      	adds	r3, r0, #1
 800f760:	4604      	mov	r4, r0
 800f762:	d158      	bne.n	800f816 <_malloc_r+0xf6>
 800f764:	f8d8 4000 	ldr.w	r4, [r8]
 800f768:	4627      	mov	r7, r4
 800f76a:	2f00      	cmp	r7, #0
 800f76c:	d143      	bne.n	800f7f6 <_malloc_r+0xd6>
 800f76e:	2c00      	cmp	r4, #0
 800f770:	d04b      	beq.n	800f80a <_malloc_r+0xea>
 800f772:	6823      	ldr	r3, [r4, #0]
 800f774:	4639      	mov	r1, r7
 800f776:	4630      	mov	r0, r6
 800f778:	eb04 0903 	add.w	r9, r4, r3
 800f77c:	f001 f960 	bl	8010a40 <_sbrk_r>
 800f780:	4581      	cmp	r9, r0
 800f782:	d142      	bne.n	800f80a <_malloc_r+0xea>
 800f784:	6821      	ldr	r1, [r4, #0]
 800f786:	1a6d      	subs	r5, r5, r1
 800f788:	4629      	mov	r1, r5
 800f78a:	4630      	mov	r0, r6
 800f78c:	f7ff ffa6 	bl	800f6dc <sbrk_aligned>
 800f790:	3001      	adds	r0, #1
 800f792:	d03a      	beq.n	800f80a <_malloc_r+0xea>
 800f794:	6823      	ldr	r3, [r4, #0]
 800f796:	442b      	add	r3, r5
 800f798:	6023      	str	r3, [r4, #0]
 800f79a:	f8d8 3000 	ldr.w	r3, [r8]
 800f79e:	685a      	ldr	r2, [r3, #4]
 800f7a0:	bb62      	cbnz	r2, 800f7fc <_malloc_r+0xdc>
 800f7a2:	f8c8 7000 	str.w	r7, [r8]
 800f7a6:	e00f      	b.n	800f7c8 <_malloc_r+0xa8>
 800f7a8:	6822      	ldr	r2, [r4, #0]
 800f7aa:	1b52      	subs	r2, r2, r5
 800f7ac:	d420      	bmi.n	800f7f0 <_malloc_r+0xd0>
 800f7ae:	2a0b      	cmp	r2, #11
 800f7b0:	d917      	bls.n	800f7e2 <_malloc_r+0xc2>
 800f7b2:	1961      	adds	r1, r4, r5
 800f7b4:	42a3      	cmp	r3, r4
 800f7b6:	6025      	str	r5, [r4, #0]
 800f7b8:	bf18      	it	ne
 800f7ba:	6059      	strne	r1, [r3, #4]
 800f7bc:	6863      	ldr	r3, [r4, #4]
 800f7be:	bf08      	it	eq
 800f7c0:	f8c8 1000 	streq.w	r1, [r8]
 800f7c4:	5162      	str	r2, [r4, r5]
 800f7c6:	604b      	str	r3, [r1, #4]
 800f7c8:	4630      	mov	r0, r6
 800f7ca:	f000 f82f 	bl	800f82c <__malloc_unlock>
 800f7ce:	f104 000b 	add.w	r0, r4, #11
 800f7d2:	1d23      	adds	r3, r4, #4
 800f7d4:	f020 0007 	bic.w	r0, r0, #7
 800f7d8:	1ac2      	subs	r2, r0, r3
 800f7da:	bf1c      	itt	ne
 800f7dc:	1a1b      	subne	r3, r3, r0
 800f7de:	50a3      	strne	r3, [r4, r2]
 800f7e0:	e7af      	b.n	800f742 <_malloc_r+0x22>
 800f7e2:	6862      	ldr	r2, [r4, #4]
 800f7e4:	42a3      	cmp	r3, r4
 800f7e6:	bf0c      	ite	eq
 800f7e8:	f8c8 2000 	streq.w	r2, [r8]
 800f7ec:	605a      	strne	r2, [r3, #4]
 800f7ee:	e7eb      	b.n	800f7c8 <_malloc_r+0xa8>
 800f7f0:	4623      	mov	r3, r4
 800f7f2:	6864      	ldr	r4, [r4, #4]
 800f7f4:	e7ae      	b.n	800f754 <_malloc_r+0x34>
 800f7f6:	463c      	mov	r4, r7
 800f7f8:	687f      	ldr	r7, [r7, #4]
 800f7fa:	e7b6      	b.n	800f76a <_malloc_r+0x4a>
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	42a3      	cmp	r3, r4
 800f802:	d1fb      	bne.n	800f7fc <_malloc_r+0xdc>
 800f804:	2300      	movs	r3, #0
 800f806:	6053      	str	r3, [r2, #4]
 800f808:	e7de      	b.n	800f7c8 <_malloc_r+0xa8>
 800f80a:	230c      	movs	r3, #12
 800f80c:	6033      	str	r3, [r6, #0]
 800f80e:	4630      	mov	r0, r6
 800f810:	f000 f80c 	bl	800f82c <__malloc_unlock>
 800f814:	e794      	b.n	800f740 <_malloc_r+0x20>
 800f816:	6005      	str	r5, [r0, #0]
 800f818:	e7d6      	b.n	800f7c8 <_malloc_r+0xa8>
 800f81a:	bf00      	nop
 800f81c:	200055e4 	.word	0x200055e4

0800f820 <__malloc_lock>:
 800f820:	4801      	ldr	r0, [pc, #4]	@ (800f828 <__malloc_lock+0x8>)
 800f822:	f001 b95a 	b.w	8010ada <__retarget_lock_acquire_recursive>
 800f826:	bf00      	nop
 800f828:	20005728 	.word	0x20005728

0800f82c <__malloc_unlock>:
 800f82c:	4801      	ldr	r0, [pc, #4]	@ (800f834 <__malloc_unlock+0x8>)
 800f82e:	f001 b955 	b.w	8010adc <__retarget_lock_release_recursive>
 800f832:	bf00      	nop
 800f834:	20005728 	.word	0x20005728

0800f838 <__utoa>:
 800f838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f83a:	4c1f      	ldr	r4, [pc, #124]	@ (800f8b8 <__utoa+0x80>)
 800f83c:	b08b      	sub	sp, #44	@ 0x2c
 800f83e:	4605      	mov	r5, r0
 800f840:	460b      	mov	r3, r1
 800f842:	466e      	mov	r6, sp
 800f844:	f104 0c20 	add.w	ip, r4, #32
 800f848:	6820      	ldr	r0, [r4, #0]
 800f84a:	6861      	ldr	r1, [r4, #4]
 800f84c:	4637      	mov	r7, r6
 800f84e:	c703      	stmia	r7!, {r0, r1}
 800f850:	3408      	adds	r4, #8
 800f852:	4564      	cmp	r4, ip
 800f854:	463e      	mov	r6, r7
 800f856:	d1f7      	bne.n	800f848 <__utoa+0x10>
 800f858:	7921      	ldrb	r1, [r4, #4]
 800f85a:	7139      	strb	r1, [r7, #4]
 800f85c:	1e91      	subs	r1, r2, #2
 800f85e:	6820      	ldr	r0, [r4, #0]
 800f860:	6038      	str	r0, [r7, #0]
 800f862:	2922      	cmp	r1, #34	@ 0x22
 800f864:	f04f 0100 	mov.w	r1, #0
 800f868:	d904      	bls.n	800f874 <__utoa+0x3c>
 800f86a:	7019      	strb	r1, [r3, #0]
 800f86c:	460b      	mov	r3, r1
 800f86e:	4618      	mov	r0, r3
 800f870:	b00b      	add	sp, #44	@ 0x2c
 800f872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f874:	1e58      	subs	r0, r3, #1
 800f876:	4684      	mov	ip, r0
 800f878:	fbb5 f7f2 	udiv	r7, r5, r2
 800f87c:	fb02 5617 	mls	r6, r2, r7, r5
 800f880:	3628      	adds	r6, #40	@ 0x28
 800f882:	446e      	add	r6, sp
 800f884:	460c      	mov	r4, r1
 800f886:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f88a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f88e:	462e      	mov	r6, r5
 800f890:	42b2      	cmp	r2, r6
 800f892:	f101 0101 	add.w	r1, r1, #1
 800f896:	463d      	mov	r5, r7
 800f898:	d9ee      	bls.n	800f878 <__utoa+0x40>
 800f89a:	2200      	movs	r2, #0
 800f89c:	545a      	strb	r2, [r3, r1]
 800f89e:	1919      	adds	r1, r3, r4
 800f8a0:	1aa5      	subs	r5, r4, r2
 800f8a2:	42aa      	cmp	r2, r5
 800f8a4:	dae3      	bge.n	800f86e <__utoa+0x36>
 800f8a6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f8aa:	780e      	ldrb	r6, [r1, #0]
 800f8ac:	7006      	strb	r6, [r0, #0]
 800f8ae:	3201      	adds	r2, #1
 800f8b0:	f801 5901 	strb.w	r5, [r1], #-1
 800f8b4:	e7f4      	b.n	800f8a0 <__utoa+0x68>
 800f8b6:	bf00      	nop
 800f8b8:	08015b3c 	.word	0x08015b3c

0800f8bc <__cvt>:
 800f8bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c0:	ec57 6b10 	vmov	r6, r7, d0
 800f8c4:	2f00      	cmp	r7, #0
 800f8c6:	460c      	mov	r4, r1
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	463b      	mov	r3, r7
 800f8cc:	bfbb      	ittet	lt
 800f8ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f8d2:	461f      	movlt	r7, r3
 800f8d4:	2300      	movge	r3, #0
 800f8d6:	232d      	movlt	r3, #45	@ 0x2d
 800f8d8:	700b      	strb	r3, [r1, #0]
 800f8da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f8dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f8e0:	4691      	mov	r9, r2
 800f8e2:	f023 0820 	bic.w	r8, r3, #32
 800f8e6:	bfbc      	itt	lt
 800f8e8:	4632      	movlt	r2, r6
 800f8ea:	4616      	movlt	r6, r2
 800f8ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f8f0:	d005      	beq.n	800f8fe <__cvt+0x42>
 800f8f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f8f6:	d100      	bne.n	800f8fa <__cvt+0x3e>
 800f8f8:	3401      	adds	r4, #1
 800f8fa:	2102      	movs	r1, #2
 800f8fc:	e000      	b.n	800f900 <__cvt+0x44>
 800f8fe:	2103      	movs	r1, #3
 800f900:	ab03      	add	r3, sp, #12
 800f902:	9301      	str	r3, [sp, #4]
 800f904:	ab02      	add	r3, sp, #8
 800f906:	9300      	str	r3, [sp, #0]
 800f908:	ec47 6b10 	vmov	d0, r6, r7
 800f90c:	4653      	mov	r3, sl
 800f90e:	4622      	mov	r2, r4
 800f910:	f001 f9a2 	bl	8010c58 <_dtoa_r>
 800f914:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f918:	4605      	mov	r5, r0
 800f91a:	d119      	bne.n	800f950 <__cvt+0x94>
 800f91c:	f019 0f01 	tst.w	r9, #1
 800f920:	d00e      	beq.n	800f940 <__cvt+0x84>
 800f922:	eb00 0904 	add.w	r9, r0, r4
 800f926:	2200      	movs	r2, #0
 800f928:	2300      	movs	r3, #0
 800f92a:	4630      	mov	r0, r6
 800f92c:	4639      	mov	r1, r7
 800f92e:	f7f1 f8db 	bl	8000ae8 <__aeabi_dcmpeq>
 800f932:	b108      	cbz	r0, 800f938 <__cvt+0x7c>
 800f934:	f8cd 900c 	str.w	r9, [sp, #12]
 800f938:	2230      	movs	r2, #48	@ 0x30
 800f93a:	9b03      	ldr	r3, [sp, #12]
 800f93c:	454b      	cmp	r3, r9
 800f93e:	d31e      	bcc.n	800f97e <__cvt+0xc2>
 800f940:	9b03      	ldr	r3, [sp, #12]
 800f942:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f944:	1b5b      	subs	r3, r3, r5
 800f946:	4628      	mov	r0, r5
 800f948:	6013      	str	r3, [r2, #0]
 800f94a:	b004      	add	sp, #16
 800f94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f950:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f954:	eb00 0904 	add.w	r9, r0, r4
 800f958:	d1e5      	bne.n	800f926 <__cvt+0x6a>
 800f95a:	7803      	ldrb	r3, [r0, #0]
 800f95c:	2b30      	cmp	r3, #48	@ 0x30
 800f95e:	d10a      	bne.n	800f976 <__cvt+0xba>
 800f960:	2200      	movs	r2, #0
 800f962:	2300      	movs	r3, #0
 800f964:	4630      	mov	r0, r6
 800f966:	4639      	mov	r1, r7
 800f968:	f7f1 f8be 	bl	8000ae8 <__aeabi_dcmpeq>
 800f96c:	b918      	cbnz	r0, 800f976 <__cvt+0xba>
 800f96e:	f1c4 0401 	rsb	r4, r4, #1
 800f972:	f8ca 4000 	str.w	r4, [sl]
 800f976:	f8da 3000 	ldr.w	r3, [sl]
 800f97a:	4499      	add	r9, r3
 800f97c:	e7d3      	b.n	800f926 <__cvt+0x6a>
 800f97e:	1c59      	adds	r1, r3, #1
 800f980:	9103      	str	r1, [sp, #12]
 800f982:	701a      	strb	r2, [r3, #0]
 800f984:	e7d9      	b.n	800f93a <__cvt+0x7e>

0800f986 <__exponent>:
 800f986:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f988:	2900      	cmp	r1, #0
 800f98a:	bfba      	itte	lt
 800f98c:	4249      	neglt	r1, r1
 800f98e:	232d      	movlt	r3, #45	@ 0x2d
 800f990:	232b      	movge	r3, #43	@ 0x2b
 800f992:	2909      	cmp	r1, #9
 800f994:	7002      	strb	r2, [r0, #0]
 800f996:	7043      	strb	r3, [r0, #1]
 800f998:	dd29      	ble.n	800f9ee <__exponent+0x68>
 800f99a:	f10d 0307 	add.w	r3, sp, #7
 800f99e:	461d      	mov	r5, r3
 800f9a0:	270a      	movs	r7, #10
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	fbb1 f6f7 	udiv	r6, r1, r7
 800f9a8:	fb07 1416 	mls	r4, r7, r6, r1
 800f9ac:	3430      	adds	r4, #48	@ 0x30
 800f9ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f9b2:	460c      	mov	r4, r1
 800f9b4:	2c63      	cmp	r4, #99	@ 0x63
 800f9b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800f9ba:	4631      	mov	r1, r6
 800f9bc:	dcf1      	bgt.n	800f9a2 <__exponent+0x1c>
 800f9be:	3130      	adds	r1, #48	@ 0x30
 800f9c0:	1e94      	subs	r4, r2, #2
 800f9c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f9c6:	1c41      	adds	r1, r0, #1
 800f9c8:	4623      	mov	r3, r4
 800f9ca:	42ab      	cmp	r3, r5
 800f9cc:	d30a      	bcc.n	800f9e4 <__exponent+0x5e>
 800f9ce:	f10d 0309 	add.w	r3, sp, #9
 800f9d2:	1a9b      	subs	r3, r3, r2
 800f9d4:	42ac      	cmp	r4, r5
 800f9d6:	bf88      	it	hi
 800f9d8:	2300      	movhi	r3, #0
 800f9da:	3302      	adds	r3, #2
 800f9dc:	4403      	add	r3, r0
 800f9de:	1a18      	subs	r0, r3, r0
 800f9e0:	b003      	add	sp, #12
 800f9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f9e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f9ec:	e7ed      	b.n	800f9ca <__exponent+0x44>
 800f9ee:	2330      	movs	r3, #48	@ 0x30
 800f9f0:	3130      	adds	r1, #48	@ 0x30
 800f9f2:	7083      	strb	r3, [r0, #2]
 800f9f4:	70c1      	strb	r1, [r0, #3]
 800f9f6:	1d03      	adds	r3, r0, #4
 800f9f8:	e7f1      	b.n	800f9de <__exponent+0x58>
	...

0800f9fc <_printf_float>:
 800f9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa00:	b08d      	sub	sp, #52	@ 0x34
 800fa02:	460c      	mov	r4, r1
 800fa04:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fa08:	4616      	mov	r6, r2
 800fa0a:	461f      	mov	r7, r3
 800fa0c:	4605      	mov	r5, r0
 800fa0e:	f000 ffdf 	bl	80109d0 <_localeconv_r>
 800fa12:	6803      	ldr	r3, [r0, #0]
 800fa14:	9304      	str	r3, [sp, #16]
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7f0 fc3a 	bl	8000290 <strlen>
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa20:	f8d8 3000 	ldr.w	r3, [r8]
 800fa24:	9005      	str	r0, [sp, #20]
 800fa26:	3307      	adds	r3, #7
 800fa28:	f023 0307 	bic.w	r3, r3, #7
 800fa2c:	f103 0208 	add.w	r2, r3, #8
 800fa30:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fa34:	f8d4 b000 	ldr.w	fp, [r4]
 800fa38:	f8c8 2000 	str.w	r2, [r8]
 800fa3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fa44:	9307      	str	r3, [sp, #28]
 800fa46:	f8cd 8018 	str.w	r8, [sp, #24]
 800fa4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fa4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa52:	4b9c      	ldr	r3, [pc, #624]	@ (800fcc4 <_printf_float+0x2c8>)
 800fa54:	f04f 32ff 	mov.w	r2, #4294967295
 800fa58:	f7f1 f878 	bl	8000b4c <__aeabi_dcmpun>
 800fa5c:	bb70      	cbnz	r0, 800fabc <_printf_float+0xc0>
 800fa5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa62:	4b98      	ldr	r3, [pc, #608]	@ (800fcc4 <_printf_float+0x2c8>)
 800fa64:	f04f 32ff 	mov.w	r2, #4294967295
 800fa68:	f7f1 f852 	bl	8000b10 <__aeabi_dcmple>
 800fa6c:	bb30      	cbnz	r0, 800fabc <_printf_float+0xc0>
 800fa6e:	2200      	movs	r2, #0
 800fa70:	2300      	movs	r3, #0
 800fa72:	4640      	mov	r0, r8
 800fa74:	4649      	mov	r1, r9
 800fa76:	f7f1 f841 	bl	8000afc <__aeabi_dcmplt>
 800fa7a:	b110      	cbz	r0, 800fa82 <_printf_float+0x86>
 800fa7c:	232d      	movs	r3, #45	@ 0x2d
 800fa7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa82:	4a91      	ldr	r2, [pc, #580]	@ (800fcc8 <_printf_float+0x2cc>)
 800fa84:	4b91      	ldr	r3, [pc, #580]	@ (800fccc <_printf_float+0x2d0>)
 800fa86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fa8a:	bf94      	ite	ls
 800fa8c:	4690      	movls	r8, r2
 800fa8e:	4698      	movhi	r8, r3
 800fa90:	2303      	movs	r3, #3
 800fa92:	6123      	str	r3, [r4, #16]
 800fa94:	f02b 0304 	bic.w	r3, fp, #4
 800fa98:	6023      	str	r3, [r4, #0]
 800fa9a:	f04f 0900 	mov.w	r9, #0
 800fa9e:	9700      	str	r7, [sp, #0]
 800faa0:	4633      	mov	r3, r6
 800faa2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800faa4:	4621      	mov	r1, r4
 800faa6:	4628      	mov	r0, r5
 800faa8:	f000 f9d2 	bl	800fe50 <_printf_common>
 800faac:	3001      	adds	r0, #1
 800faae:	f040 808d 	bne.w	800fbcc <_printf_float+0x1d0>
 800fab2:	f04f 30ff 	mov.w	r0, #4294967295
 800fab6:	b00d      	add	sp, #52	@ 0x34
 800fab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fabc:	4642      	mov	r2, r8
 800fabe:	464b      	mov	r3, r9
 800fac0:	4640      	mov	r0, r8
 800fac2:	4649      	mov	r1, r9
 800fac4:	f7f1 f842 	bl	8000b4c <__aeabi_dcmpun>
 800fac8:	b140      	cbz	r0, 800fadc <_printf_float+0xe0>
 800faca:	464b      	mov	r3, r9
 800facc:	2b00      	cmp	r3, #0
 800face:	bfbc      	itt	lt
 800fad0:	232d      	movlt	r3, #45	@ 0x2d
 800fad2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fad6:	4a7e      	ldr	r2, [pc, #504]	@ (800fcd0 <_printf_float+0x2d4>)
 800fad8:	4b7e      	ldr	r3, [pc, #504]	@ (800fcd4 <_printf_float+0x2d8>)
 800fada:	e7d4      	b.n	800fa86 <_printf_float+0x8a>
 800fadc:	6863      	ldr	r3, [r4, #4]
 800fade:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fae2:	9206      	str	r2, [sp, #24]
 800fae4:	1c5a      	adds	r2, r3, #1
 800fae6:	d13b      	bne.n	800fb60 <_printf_float+0x164>
 800fae8:	2306      	movs	r3, #6
 800faea:	6063      	str	r3, [r4, #4]
 800faec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800faf0:	2300      	movs	r3, #0
 800faf2:	6022      	str	r2, [r4, #0]
 800faf4:	9303      	str	r3, [sp, #12]
 800faf6:	ab0a      	add	r3, sp, #40	@ 0x28
 800faf8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fafc:	ab09      	add	r3, sp, #36	@ 0x24
 800fafe:	9300      	str	r3, [sp, #0]
 800fb00:	6861      	ldr	r1, [r4, #4]
 800fb02:	ec49 8b10 	vmov	d0, r8, r9
 800fb06:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	f7ff fed6 	bl	800f8bc <__cvt>
 800fb10:	9b06      	ldr	r3, [sp, #24]
 800fb12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fb14:	2b47      	cmp	r3, #71	@ 0x47
 800fb16:	4680      	mov	r8, r0
 800fb18:	d129      	bne.n	800fb6e <_printf_float+0x172>
 800fb1a:	1cc8      	adds	r0, r1, #3
 800fb1c:	db02      	blt.n	800fb24 <_printf_float+0x128>
 800fb1e:	6863      	ldr	r3, [r4, #4]
 800fb20:	4299      	cmp	r1, r3
 800fb22:	dd41      	ble.n	800fba8 <_printf_float+0x1ac>
 800fb24:	f1aa 0a02 	sub.w	sl, sl, #2
 800fb28:	fa5f fa8a 	uxtb.w	sl, sl
 800fb2c:	3901      	subs	r1, #1
 800fb2e:	4652      	mov	r2, sl
 800fb30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fb34:	9109      	str	r1, [sp, #36]	@ 0x24
 800fb36:	f7ff ff26 	bl	800f986 <__exponent>
 800fb3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb3c:	1813      	adds	r3, r2, r0
 800fb3e:	2a01      	cmp	r2, #1
 800fb40:	4681      	mov	r9, r0
 800fb42:	6123      	str	r3, [r4, #16]
 800fb44:	dc02      	bgt.n	800fb4c <_printf_float+0x150>
 800fb46:	6822      	ldr	r2, [r4, #0]
 800fb48:	07d2      	lsls	r2, r2, #31
 800fb4a:	d501      	bpl.n	800fb50 <_printf_float+0x154>
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	6123      	str	r3, [r4, #16]
 800fb50:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d0a2      	beq.n	800fa9e <_printf_float+0xa2>
 800fb58:	232d      	movs	r3, #45	@ 0x2d
 800fb5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb5e:	e79e      	b.n	800fa9e <_printf_float+0xa2>
 800fb60:	9a06      	ldr	r2, [sp, #24]
 800fb62:	2a47      	cmp	r2, #71	@ 0x47
 800fb64:	d1c2      	bne.n	800faec <_printf_float+0xf0>
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d1c0      	bne.n	800faec <_printf_float+0xf0>
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	e7bd      	b.n	800faea <_printf_float+0xee>
 800fb6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fb72:	d9db      	bls.n	800fb2c <_printf_float+0x130>
 800fb74:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fb78:	d118      	bne.n	800fbac <_printf_float+0x1b0>
 800fb7a:	2900      	cmp	r1, #0
 800fb7c:	6863      	ldr	r3, [r4, #4]
 800fb7e:	dd0b      	ble.n	800fb98 <_printf_float+0x19c>
 800fb80:	6121      	str	r1, [r4, #16]
 800fb82:	b913      	cbnz	r3, 800fb8a <_printf_float+0x18e>
 800fb84:	6822      	ldr	r2, [r4, #0]
 800fb86:	07d0      	lsls	r0, r2, #31
 800fb88:	d502      	bpl.n	800fb90 <_printf_float+0x194>
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	440b      	add	r3, r1
 800fb8e:	6123      	str	r3, [r4, #16]
 800fb90:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fb92:	f04f 0900 	mov.w	r9, #0
 800fb96:	e7db      	b.n	800fb50 <_printf_float+0x154>
 800fb98:	b913      	cbnz	r3, 800fba0 <_printf_float+0x1a4>
 800fb9a:	6822      	ldr	r2, [r4, #0]
 800fb9c:	07d2      	lsls	r2, r2, #31
 800fb9e:	d501      	bpl.n	800fba4 <_printf_float+0x1a8>
 800fba0:	3302      	adds	r3, #2
 800fba2:	e7f4      	b.n	800fb8e <_printf_float+0x192>
 800fba4:	2301      	movs	r3, #1
 800fba6:	e7f2      	b.n	800fb8e <_printf_float+0x192>
 800fba8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fbac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbae:	4299      	cmp	r1, r3
 800fbb0:	db05      	blt.n	800fbbe <_printf_float+0x1c2>
 800fbb2:	6823      	ldr	r3, [r4, #0]
 800fbb4:	6121      	str	r1, [r4, #16]
 800fbb6:	07d8      	lsls	r0, r3, #31
 800fbb8:	d5ea      	bpl.n	800fb90 <_printf_float+0x194>
 800fbba:	1c4b      	adds	r3, r1, #1
 800fbbc:	e7e7      	b.n	800fb8e <_printf_float+0x192>
 800fbbe:	2900      	cmp	r1, #0
 800fbc0:	bfd4      	ite	le
 800fbc2:	f1c1 0202 	rsble	r2, r1, #2
 800fbc6:	2201      	movgt	r2, #1
 800fbc8:	4413      	add	r3, r2
 800fbca:	e7e0      	b.n	800fb8e <_printf_float+0x192>
 800fbcc:	6823      	ldr	r3, [r4, #0]
 800fbce:	055a      	lsls	r2, r3, #21
 800fbd0:	d407      	bmi.n	800fbe2 <_printf_float+0x1e6>
 800fbd2:	6923      	ldr	r3, [r4, #16]
 800fbd4:	4642      	mov	r2, r8
 800fbd6:	4631      	mov	r1, r6
 800fbd8:	4628      	mov	r0, r5
 800fbda:	47b8      	blx	r7
 800fbdc:	3001      	adds	r0, #1
 800fbde:	d12b      	bne.n	800fc38 <_printf_float+0x23c>
 800fbe0:	e767      	b.n	800fab2 <_printf_float+0xb6>
 800fbe2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fbe6:	f240 80dd 	bls.w	800fda4 <_printf_float+0x3a8>
 800fbea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fbee:	2200      	movs	r2, #0
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	f7f0 ff79 	bl	8000ae8 <__aeabi_dcmpeq>
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	d033      	beq.n	800fc62 <_printf_float+0x266>
 800fbfa:	4a37      	ldr	r2, [pc, #220]	@ (800fcd8 <_printf_float+0x2dc>)
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	4631      	mov	r1, r6
 800fc00:	4628      	mov	r0, r5
 800fc02:	47b8      	blx	r7
 800fc04:	3001      	adds	r0, #1
 800fc06:	f43f af54 	beq.w	800fab2 <_printf_float+0xb6>
 800fc0a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fc0e:	4543      	cmp	r3, r8
 800fc10:	db02      	blt.n	800fc18 <_printf_float+0x21c>
 800fc12:	6823      	ldr	r3, [r4, #0]
 800fc14:	07d8      	lsls	r0, r3, #31
 800fc16:	d50f      	bpl.n	800fc38 <_printf_float+0x23c>
 800fc18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc1c:	4631      	mov	r1, r6
 800fc1e:	4628      	mov	r0, r5
 800fc20:	47b8      	blx	r7
 800fc22:	3001      	adds	r0, #1
 800fc24:	f43f af45 	beq.w	800fab2 <_printf_float+0xb6>
 800fc28:	f04f 0900 	mov.w	r9, #0
 800fc2c:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc30:	f104 0a1a 	add.w	sl, r4, #26
 800fc34:	45c8      	cmp	r8, r9
 800fc36:	dc09      	bgt.n	800fc4c <_printf_float+0x250>
 800fc38:	6823      	ldr	r3, [r4, #0]
 800fc3a:	079b      	lsls	r3, r3, #30
 800fc3c:	f100 8103 	bmi.w	800fe46 <_printf_float+0x44a>
 800fc40:	68e0      	ldr	r0, [r4, #12]
 800fc42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc44:	4298      	cmp	r0, r3
 800fc46:	bfb8      	it	lt
 800fc48:	4618      	movlt	r0, r3
 800fc4a:	e734      	b.n	800fab6 <_printf_float+0xba>
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	4652      	mov	r2, sl
 800fc50:	4631      	mov	r1, r6
 800fc52:	4628      	mov	r0, r5
 800fc54:	47b8      	blx	r7
 800fc56:	3001      	adds	r0, #1
 800fc58:	f43f af2b 	beq.w	800fab2 <_printf_float+0xb6>
 800fc5c:	f109 0901 	add.w	r9, r9, #1
 800fc60:	e7e8      	b.n	800fc34 <_printf_float+0x238>
 800fc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	dc39      	bgt.n	800fcdc <_printf_float+0x2e0>
 800fc68:	4a1b      	ldr	r2, [pc, #108]	@ (800fcd8 <_printf_float+0x2dc>)
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	4631      	mov	r1, r6
 800fc6e:	4628      	mov	r0, r5
 800fc70:	47b8      	blx	r7
 800fc72:	3001      	adds	r0, #1
 800fc74:	f43f af1d 	beq.w	800fab2 <_printf_float+0xb6>
 800fc78:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fc7c:	ea59 0303 	orrs.w	r3, r9, r3
 800fc80:	d102      	bne.n	800fc88 <_printf_float+0x28c>
 800fc82:	6823      	ldr	r3, [r4, #0]
 800fc84:	07d9      	lsls	r1, r3, #31
 800fc86:	d5d7      	bpl.n	800fc38 <_printf_float+0x23c>
 800fc88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc8c:	4631      	mov	r1, r6
 800fc8e:	4628      	mov	r0, r5
 800fc90:	47b8      	blx	r7
 800fc92:	3001      	adds	r0, #1
 800fc94:	f43f af0d 	beq.w	800fab2 <_printf_float+0xb6>
 800fc98:	f04f 0a00 	mov.w	sl, #0
 800fc9c:	f104 0b1a 	add.w	fp, r4, #26
 800fca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fca2:	425b      	negs	r3, r3
 800fca4:	4553      	cmp	r3, sl
 800fca6:	dc01      	bgt.n	800fcac <_printf_float+0x2b0>
 800fca8:	464b      	mov	r3, r9
 800fcaa:	e793      	b.n	800fbd4 <_printf_float+0x1d8>
 800fcac:	2301      	movs	r3, #1
 800fcae:	465a      	mov	r2, fp
 800fcb0:	4631      	mov	r1, r6
 800fcb2:	4628      	mov	r0, r5
 800fcb4:	47b8      	blx	r7
 800fcb6:	3001      	adds	r0, #1
 800fcb8:	f43f aefb 	beq.w	800fab2 <_printf_float+0xb6>
 800fcbc:	f10a 0a01 	add.w	sl, sl, #1
 800fcc0:	e7ee      	b.n	800fca0 <_printf_float+0x2a4>
 800fcc2:	bf00      	nop
 800fcc4:	7fefffff 	.word	0x7fefffff
 800fcc8:	08015b61 	.word	0x08015b61
 800fccc:	08015b65 	.word	0x08015b65
 800fcd0:	08015b69 	.word	0x08015b69
 800fcd4:	08015b6d 	.word	0x08015b6d
 800fcd8:	08015f90 	.word	0x08015f90
 800fcdc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fcde:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fce2:	4553      	cmp	r3, sl
 800fce4:	bfa8      	it	ge
 800fce6:	4653      	movge	r3, sl
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	4699      	mov	r9, r3
 800fcec:	dc36      	bgt.n	800fd5c <_printf_float+0x360>
 800fcee:	f04f 0b00 	mov.w	fp, #0
 800fcf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fcf6:	f104 021a 	add.w	r2, r4, #26
 800fcfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fcfc:	9306      	str	r3, [sp, #24]
 800fcfe:	eba3 0309 	sub.w	r3, r3, r9
 800fd02:	455b      	cmp	r3, fp
 800fd04:	dc31      	bgt.n	800fd6a <_printf_float+0x36e>
 800fd06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd08:	459a      	cmp	sl, r3
 800fd0a:	dc3a      	bgt.n	800fd82 <_printf_float+0x386>
 800fd0c:	6823      	ldr	r3, [r4, #0]
 800fd0e:	07da      	lsls	r2, r3, #31
 800fd10:	d437      	bmi.n	800fd82 <_printf_float+0x386>
 800fd12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd14:	ebaa 0903 	sub.w	r9, sl, r3
 800fd18:	9b06      	ldr	r3, [sp, #24]
 800fd1a:	ebaa 0303 	sub.w	r3, sl, r3
 800fd1e:	4599      	cmp	r9, r3
 800fd20:	bfa8      	it	ge
 800fd22:	4699      	movge	r9, r3
 800fd24:	f1b9 0f00 	cmp.w	r9, #0
 800fd28:	dc33      	bgt.n	800fd92 <_printf_float+0x396>
 800fd2a:	f04f 0800 	mov.w	r8, #0
 800fd2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd32:	f104 0b1a 	add.w	fp, r4, #26
 800fd36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd38:	ebaa 0303 	sub.w	r3, sl, r3
 800fd3c:	eba3 0309 	sub.w	r3, r3, r9
 800fd40:	4543      	cmp	r3, r8
 800fd42:	f77f af79 	ble.w	800fc38 <_printf_float+0x23c>
 800fd46:	2301      	movs	r3, #1
 800fd48:	465a      	mov	r2, fp
 800fd4a:	4631      	mov	r1, r6
 800fd4c:	4628      	mov	r0, r5
 800fd4e:	47b8      	blx	r7
 800fd50:	3001      	adds	r0, #1
 800fd52:	f43f aeae 	beq.w	800fab2 <_printf_float+0xb6>
 800fd56:	f108 0801 	add.w	r8, r8, #1
 800fd5a:	e7ec      	b.n	800fd36 <_printf_float+0x33a>
 800fd5c:	4642      	mov	r2, r8
 800fd5e:	4631      	mov	r1, r6
 800fd60:	4628      	mov	r0, r5
 800fd62:	47b8      	blx	r7
 800fd64:	3001      	adds	r0, #1
 800fd66:	d1c2      	bne.n	800fcee <_printf_float+0x2f2>
 800fd68:	e6a3      	b.n	800fab2 <_printf_float+0xb6>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	4631      	mov	r1, r6
 800fd6e:	4628      	mov	r0, r5
 800fd70:	9206      	str	r2, [sp, #24]
 800fd72:	47b8      	blx	r7
 800fd74:	3001      	adds	r0, #1
 800fd76:	f43f ae9c 	beq.w	800fab2 <_printf_float+0xb6>
 800fd7a:	9a06      	ldr	r2, [sp, #24]
 800fd7c:	f10b 0b01 	add.w	fp, fp, #1
 800fd80:	e7bb      	b.n	800fcfa <_printf_float+0x2fe>
 800fd82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd86:	4631      	mov	r1, r6
 800fd88:	4628      	mov	r0, r5
 800fd8a:	47b8      	blx	r7
 800fd8c:	3001      	adds	r0, #1
 800fd8e:	d1c0      	bne.n	800fd12 <_printf_float+0x316>
 800fd90:	e68f      	b.n	800fab2 <_printf_float+0xb6>
 800fd92:	9a06      	ldr	r2, [sp, #24]
 800fd94:	464b      	mov	r3, r9
 800fd96:	4442      	add	r2, r8
 800fd98:	4631      	mov	r1, r6
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	47b8      	blx	r7
 800fd9e:	3001      	adds	r0, #1
 800fda0:	d1c3      	bne.n	800fd2a <_printf_float+0x32e>
 800fda2:	e686      	b.n	800fab2 <_printf_float+0xb6>
 800fda4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fda8:	f1ba 0f01 	cmp.w	sl, #1
 800fdac:	dc01      	bgt.n	800fdb2 <_printf_float+0x3b6>
 800fdae:	07db      	lsls	r3, r3, #31
 800fdb0:	d536      	bpl.n	800fe20 <_printf_float+0x424>
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	4642      	mov	r2, r8
 800fdb6:	4631      	mov	r1, r6
 800fdb8:	4628      	mov	r0, r5
 800fdba:	47b8      	blx	r7
 800fdbc:	3001      	adds	r0, #1
 800fdbe:	f43f ae78 	beq.w	800fab2 <_printf_float+0xb6>
 800fdc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdc6:	4631      	mov	r1, r6
 800fdc8:	4628      	mov	r0, r5
 800fdca:	47b8      	blx	r7
 800fdcc:	3001      	adds	r0, #1
 800fdce:	f43f ae70 	beq.w	800fab2 <_printf_float+0xb6>
 800fdd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	2300      	movs	r3, #0
 800fdda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fdde:	f7f0 fe83 	bl	8000ae8 <__aeabi_dcmpeq>
 800fde2:	b9c0      	cbnz	r0, 800fe16 <_printf_float+0x41a>
 800fde4:	4653      	mov	r3, sl
 800fde6:	f108 0201 	add.w	r2, r8, #1
 800fdea:	4631      	mov	r1, r6
 800fdec:	4628      	mov	r0, r5
 800fdee:	47b8      	blx	r7
 800fdf0:	3001      	adds	r0, #1
 800fdf2:	d10c      	bne.n	800fe0e <_printf_float+0x412>
 800fdf4:	e65d      	b.n	800fab2 <_printf_float+0xb6>
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	465a      	mov	r2, fp
 800fdfa:	4631      	mov	r1, r6
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	47b8      	blx	r7
 800fe00:	3001      	adds	r0, #1
 800fe02:	f43f ae56 	beq.w	800fab2 <_printf_float+0xb6>
 800fe06:	f108 0801 	add.w	r8, r8, #1
 800fe0a:	45d0      	cmp	r8, sl
 800fe0c:	dbf3      	blt.n	800fdf6 <_printf_float+0x3fa>
 800fe0e:	464b      	mov	r3, r9
 800fe10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fe14:	e6df      	b.n	800fbd6 <_printf_float+0x1da>
 800fe16:	f04f 0800 	mov.w	r8, #0
 800fe1a:	f104 0b1a 	add.w	fp, r4, #26
 800fe1e:	e7f4      	b.n	800fe0a <_printf_float+0x40e>
 800fe20:	2301      	movs	r3, #1
 800fe22:	4642      	mov	r2, r8
 800fe24:	e7e1      	b.n	800fdea <_printf_float+0x3ee>
 800fe26:	2301      	movs	r3, #1
 800fe28:	464a      	mov	r2, r9
 800fe2a:	4631      	mov	r1, r6
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	47b8      	blx	r7
 800fe30:	3001      	adds	r0, #1
 800fe32:	f43f ae3e 	beq.w	800fab2 <_printf_float+0xb6>
 800fe36:	f108 0801 	add.w	r8, r8, #1
 800fe3a:	68e3      	ldr	r3, [r4, #12]
 800fe3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fe3e:	1a5b      	subs	r3, r3, r1
 800fe40:	4543      	cmp	r3, r8
 800fe42:	dcf0      	bgt.n	800fe26 <_printf_float+0x42a>
 800fe44:	e6fc      	b.n	800fc40 <_printf_float+0x244>
 800fe46:	f04f 0800 	mov.w	r8, #0
 800fe4a:	f104 0919 	add.w	r9, r4, #25
 800fe4e:	e7f4      	b.n	800fe3a <_printf_float+0x43e>

0800fe50 <_printf_common>:
 800fe50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe54:	4616      	mov	r6, r2
 800fe56:	4698      	mov	r8, r3
 800fe58:	688a      	ldr	r2, [r1, #8]
 800fe5a:	690b      	ldr	r3, [r1, #16]
 800fe5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fe60:	4293      	cmp	r3, r2
 800fe62:	bfb8      	it	lt
 800fe64:	4613      	movlt	r3, r2
 800fe66:	6033      	str	r3, [r6, #0]
 800fe68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fe6c:	4607      	mov	r7, r0
 800fe6e:	460c      	mov	r4, r1
 800fe70:	b10a      	cbz	r2, 800fe76 <_printf_common+0x26>
 800fe72:	3301      	adds	r3, #1
 800fe74:	6033      	str	r3, [r6, #0]
 800fe76:	6823      	ldr	r3, [r4, #0]
 800fe78:	0699      	lsls	r1, r3, #26
 800fe7a:	bf42      	ittt	mi
 800fe7c:	6833      	ldrmi	r3, [r6, #0]
 800fe7e:	3302      	addmi	r3, #2
 800fe80:	6033      	strmi	r3, [r6, #0]
 800fe82:	6825      	ldr	r5, [r4, #0]
 800fe84:	f015 0506 	ands.w	r5, r5, #6
 800fe88:	d106      	bne.n	800fe98 <_printf_common+0x48>
 800fe8a:	f104 0a19 	add.w	sl, r4, #25
 800fe8e:	68e3      	ldr	r3, [r4, #12]
 800fe90:	6832      	ldr	r2, [r6, #0]
 800fe92:	1a9b      	subs	r3, r3, r2
 800fe94:	42ab      	cmp	r3, r5
 800fe96:	dc26      	bgt.n	800fee6 <_printf_common+0x96>
 800fe98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fe9c:	6822      	ldr	r2, [r4, #0]
 800fe9e:	3b00      	subs	r3, #0
 800fea0:	bf18      	it	ne
 800fea2:	2301      	movne	r3, #1
 800fea4:	0692      	lsls	r2, r2, #26
 800fea6:	d42b      	bmi.n	800ff00 <_printf_common+0xb0>
 800fea8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800feac:	4641      	mov	r1, r8
 800feae:	4638      	mov	r0, r7
 800feb0:	47c8      	blx	r9
 800feb2:	3001      	adds	r0, #1
 800feb4:	d01e      	beq.n	800fef4 <_printf_common+0xa4>
 800feb6:	6823      	ldr	r3, [r4, #0]
 800feb8:	6922      	ldr	r2, [r4, #16]
 800feba:	f003 0306 	and.w	r3, r3, #6
 800febe:	2b04      	cmp	r3, #4
 800fec0:	bf02      	ittt	eq
 800fec2:	68e5      	ldreq	r5, [r4, #12]
 800fec4:	6833      	ldreq	r3, [r6, #0]
 800fec6:	1aed      	subeq	r5, r5, r3
 800fec8:	68a3      	ldr	r3, [r4, #8]
 800feca:	bf0c      	ite	eq
 800fecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fed0:	2500      	movne	r5, #0
 800fed2:	4293      	cmp	r3, r2
 800fed4:	bfc4      	itt	gt
 800fed6:	1a9b      	subgt	r3, r3, r2
 800fed8:	18ed      	addgt	r5, r5, r3
 800feda:	2600      	movs	r6, #0
 800fedc:	341a      	adds	r4, #26
 800fede:	42b5      	cmp	r5, r6
 800fee0:	d11a      	bne.n	800ff18 <_printf_common+0xc8>
 800fee2:	2000      	movs	r0, #0
 800fee4:	e008      	b.n	800fef8 <_printf_common+0xa8>
 800fee6:	2301      	movs	r3, #1
 800fee8:	4652      	mov	r2, sl
 800feea:	4641      	mov	r1, r8
 800feec:	4638      	mov	r0, r7
 800feee:	47c8      	blx	r9
 800fef0:	3001      	adds	r0, #1
 800fef2:	d103      	bne.n	800fefc <_printf_common+0xac>
 800fef4:	f04f 30ff 	mov.w	r0, #4294967295
 800fef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fefc:	3501      	adds	r5, #1
 800fefe:	e7c6      	b.n	800fe8e <_printf_common+0x3e>
 800ff00:	18e1      	adds	r1, r4, r3
 800ff02:	1c5a      	adds	r2, r3, #1
 800ff04:	2030      	movs	r0, #48	@ 0x30
 800ff06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ff0a:	4422      	add	r2, r4
 800ff0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ff10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ff14:	3302      	adds	r3, #2
 800ff16:	e7c7      	b.n	800fea8 <_printf_common+0x58>
 800ff18:	2301      	movs	r3, #1
 800ff1a:	4622      	mov	r2, r4
 800ff1c:	4641      	mov	r1, r8
 800ff1e:	4638      	mov	r0, r7
 800ff20:	47c8      	blx	r9
 800ff22:	3001      	adds	r0, #1
 800ff24:	d0e6      	beq.n	800fef4 <_printf_common+0xa4>
 800ff26:	3601      	adds	r6, #1
 800ff28:	e7d9      	b.n	800fede <_printf_common+0x8e>
	...

0800ff2c <_printf_i>:
 800ff2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff30:	7e0f      	ldrb	r7, [r1, #24]
 800ff32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ff34:	2f78      	cmp	r7, #120	@ 0x78
 800ff36:	4691      	mov	r9, r2
 800ff38:	4680      	mov	r8, r0
 800ff3a:	460c      	mov	r4, r1
 800ff3c:	469a      	mov	sl, r3
 800ff3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ff42:	d807      	bhi.n	800ff54 <_printf_i+0x28>
 800ff44:	2f62      	cmp	r7, #98	@ 0x62
 800ff46:	d80a      	bhi.n	800ff5e <_printf_i+0x32>
 800ff48:	2f00      	cmp	r7, #0
 800ff4a:	f000 80d2 	beq.w	80100f2 <_printf_i+0x1c6>
 800ff4e:	2f58      	cmp	r7, #88	@ 0x58
 800ff50:	f000 80b9 	beq.w	80100c6 <_printf_i+0x19a>
 800ff54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ff58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ff5c:	e03a      	b.n	800ffd4 <_printf_i+0xa8>
 800ff5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ff62:	2b15      	cmp	r3, #21
 800ff64:	d8f6      	bhi.n	800ff54 <_printf_i+0x28>
 800ff66:	a101      	add	r1, pc, #4	@ (adr r1, 800ff6c <_printf_i+0x40>)
 800ff68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff6c:	0800ffc5 	.word	0x0800ffc5
 800ff70:	0800ffd9 	.word	0x0800ffd9
 800ff74:	0800ff55 	.word	0x0800ff55
 800ff78:	0800ff55 	.word	0x0800ff55
 800ff7c:	0800ff55 	.word	0x0800ff55
 800ff80:	0800ff55 	.word	0x0800ff55
 800ff84:	0800ffd9 	.word	0x0800ffd9
 800ff88:	0800ff55 	.word	0x0800ff55
 800ff8c:	0800ff55 	.word	0x0800ff55
 800ff90:	0800ff55 	.word	0x0800ff55
 800ff94:	0800ff55 	.word	0x0800ff55
 800ff98:	080100d9 	.word	0x080100d9
 800ff9c:	08010003 	.word	0x08010003
 800ffa0:	08010093 	.word	0x08010093
 800ffa4:	0800ff55 	.word	0x0800ff55
 800ffa8:	0800ff55 	.word	0x0800ff55
 800ffac:	080100fb 	.word	0x080100fb
 800ffb0:	0800ff55 	.word	0x0800ff55
 800ffb4:	08010003 	.word	0x08010003
 800ffb8:	0800ff55 	.word	0x0800ff55
 800ffbc:	0800ff55 	.word	0x0800ff55
 800ffc0:	0801009b 	.word	0x0801009b
 800ffc4:	6833      	ldr	r3, [r6, #0]
 800ffc6:	1d1a      	adds	r2, r3, #4
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	6032      	str	r2, [r6, #0]
 800ffcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ffd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	e09d      	b.n	8010114 <_printf_i+0x1e8>
 800ffd8:	6833      	ldr	r3, [r6, #0]
 800ffda:	6820      	ldr	r0, [r4, #0]
 800ffdc:	1d19      	adds	r1, r3, #4
 800ffde:	6031      	str	r1, [r6, #0]
 800ffe0:	0606      	lsls	r6, r0, #24
 800ffe2:	d501      	bpl.n	800ffe8 <_printf_i+0xbc>
 800ffe4:	681d      	ldr	r5, [r3, #0]
 800ffe6:	e003      	b.n	800fff0 <_printf_i+0xc4>
 800ffe8:	0645      	lsls	r5, r0, #25
 800ffea:	d5fb      	bpl.n	800ffe4 <_printf_i+0xb8>
 800ffec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fff0:	2d00      	cmp	r5, #0
 800fff2:	da03      	bge.n	800fffc <_printf_i+0xd0>
 800fff4:	232d      	movs	r3, #45	@ 0x2d
 800fff6:	426d      	negs	r5, r5
 800fff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fffc:	4859      	ldr	r0, [pc, #356]	@ (8010164 <_printf_i+0x238>)
 800fffe:	230a      	movs	r3, #10
 8010000:	e011      	b.n	8010026 <_printf_i+0xfa>
 8010002:	6821      	ldr	r1, [r4, #0]
 8010004:	6833      	ldr	r3, [r6, #0]
 8010006:	0608      	lsls	r0, r1, #24
 8010008:	f853 5b04 	ldr.w	r5, [r3], #4
 801000c:	d402      	bmi.n	8010014 <_printf_i+0xe8>
 801000e:	0649      	lsls	r1, r1, #25
 8010010:	bf48      	it	mi
 8010012:	b2ad      	uxthmi	r5, r5
 8010014:	2f6f      	cmp	r7, #111	@ 0x6f
 8010016:	4853      	ldr	r0, [pc, #332]	@ (8010164 <_printf_i+0x238>)
 8010018:	6033      	str	r3, [r6, #0]
 801001a:	bf14      	ite	ne
 801001c:	230a      	movne	r3, #10
 801001e:	2308      	moveq	r3, #8
 8010020:	2100      	movs	r1, #0
 8010022:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010026:	6866      	ldr	r6, [r4, #4]
 8010028:	60a6      	str	r6, [r4, #8]
 801002a:	2e00      	cmp	r6, #0
 801002c:	bfa2      	ittt	ge
 801002e:	6821      	ldrge	r1, [r4, #0]
 8010030:	f021 0104 	bicge.w	r1, r1, #4
 8010034:	6021      	strge	r1, [r4, #0]
 8010036:	b90d      	cbnz	r5, 801003c <_printf_i+0x110>
 8010038:	2e00      	cmp	r6, #0
 801003a:	d04b      	beq.n	80100d4 <_printf_i+0x1a8>
 801003c:	4616      	mov	r6, r2
 801003e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010042:	fb03 5711 	mls	r7, r3, r1, r5
 8010046:	5dc7      	ldrb	r7, [r0, r7]
 8010048:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801004c:	462f      	mov	r7, r5
 801004e:	42bb      	cmp	r3, r7
 8010050:	460d      	mov	r5, r1
 8010052:	d9f4      	bls.n	801003e <_printf_i+0x112>
 8010054:	2b08      	cmp	r3, #8
 8010056:	d10b      	bne.n	8010070 <_printf_i+0x144>
 8010058:	6823      	ldr	r3, [r4, #0]
 801005a:	07df      	lsls	r7, r3, #31
 801005c:	d508      	bpl.n	8010070 <_printf_i+0x144>
 801005e:	6923      	ldr	r3, [r4, #16]
 8010060:	6861      	ldr	r1, [r4, #4]
 8010062:	4299      	cmp	r1, r3
 8010064:	bfde      	ittt	le
 8010066:	2330      	movle	r3, #48	@ 0x30
 8010068:	f806 3c01 	strble.w	r3, [r6, #-1]
 801006c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010070:	1b92      	subs	r2, r2, r6
 8010072:	6122      	str	r2, [r4, #16]
 8010074:	f8cd a000 	str.w	sl, [sp]
 8010078:	464b      	mov	r3, r9
 801007a:	aa03      	add	r2, sp, #12
 801007c:	4621      	mov	r1, r4
 801007e:	4640      	mov	r0, r8
 8010080:	f7ff fee6 	bl	800fe50 <_printf_common>
 8010084:	3001      	adds	r0, #1
 8010086:	d14a      	bne.n	801011e <_printf_i+0x1f2>
 8010088:	f04f 30ff 	mov.w	r0, #4294967295
 801008c:	b004      	add	sp, #16
 801008e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010092:	6823      	ldr	r3, [r4, #0]
 8010094:	f043 0320 	orr.w	r3, r3, #32
 8010098:	6023      	str	r3, [r4, #0]
 801009a:	4833      	ldr	r0, [pc, #204]	@ (8010168 <_printf_i+0x23c>)
 801009c:	2778      	movs	r7, #120	@ 0x78
 801009e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80100a2:	6823      	ldr	r3, [r4, #0]
 80100a4:	6831      	ldr	r1, [r6, #0]
 80100a6:	061f      	lsls	r7, r3, #24
 80100a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80100ac:	d402      	bmi.n	80100b4 <_printf_i+0x188>
 80100ae:	065f      	lsls	r7, r3, #25
 80100b0:	bf48      	it	mi
 80100b2:	b2ad      	uxthmi	r5, r5
 80100b4:	6031      	str	r1, [r6, #0]
 80100b6:	07d9      	lsls	r1, r3, #31
 80100b8:	bf44      	itt	mi
 80100ba:	f043 0320 	orrmi.w	r3, r3, #32
 80100be:	6023      	strmi	r3, [r4, #0]
 80100c0:	b11d      	cbz	r5, 80100ca <_printf_i+0x19e>
 80100c2:	2310      	movs	r3, #16
 80100c4:	e7ac      	b.n	8010020 <_printf_i+0xf4>
 80100c6:	4827      	ldr	r0, [pc, #156]	@ (8010164 <_printf_i+0x238>)
 80100c8:	e7e9      	b.n	801009e <_printf_i+0x172>
 80100ca:	6823      	ldr	r3, [r4, #0]
 80100cc:	f023 0320 	bic.w	r3, r3, #32
 80100d0:	6023      	str	r3, [r4, #0]
 80100d2:	e7f6      	b.n	80100c2 <_printf_i+0x196>
 80100d4:	4616      	mov	r6, r2
 80100d6:	e7bd      	b.n	8010054 <_printf_i+0x128>
 80100d8:	6833      	ldr	r3, [r6, #0]
 80100da:	6825      	ldr	r5, [r4, #0]
 80100dc:	6961      	ldr	r1, [r4, #20]
 80100de:	1d18      	adds	r0, r3, #4
 80100e0:	6030      	str	r0, [r6, #0]
 80100e2:	062e      	lsls	r6, r5, #24
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	d501      	bpl.n	80100ec <_printf_i+0x1c0>
 80100e8:	6019      	str	r1, [r3, #0]
 80100ea:	e002      	b.n	80100f2 <_printf_i+0x1c6>
 80100ec:	0668      	lsls	r0, r5, #25
 80100ee:	d5fb      	bpl.n	80100e8 <_printf_i+0x1bc>
 80100f0:	8019      	strh	r1, [r3, #0]
 80100f2:	2300      	movs	r3, #0
 80100f4:	6123      	str	r3, [r4, #16]
 80100f6:	4616      	mov	r6, r2
 80100f8:	e7bc      	b.n	8010074 <_printf_i+0x148>
 80100fa:	6833      	ldr	r3, [r6, #0]
 80100fc:	1d1a      	adds	r2, r3, #4
 80100fe:	6032      	str	r2, [r6, #0]
 8010100:	681e      	ldr	r6, [r3, #0]
 8010102:	6862      	ldr	r2, [r4, #4]
 8010104:	2100      	movs	r1, #0
 8010106:	4630      	mov	r0, r6
 8010108:	f7f0 f872 	bl	80001f0 <memchr>
 801010c:	b108      	cbz	r0, 8010112 <_printf_i+0x1e6>
 801010e:	1b80      	subs	r0, r0, r6
 8010110:	6060      	str	r0, [r4, #4]
 8010112:	6863      	ldr	r3, [r4, #4]
 8010114:	6123      	str	r3, [r4, #16]
 8010116:	2300      	movs	r3, #0
 8010118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801011c:	e7aa      	b.n	8010074 <_printf_i+0x148>
 801011e:	6923      	ldr	r3, [r4, #16]
 8010120:	4632      	mov	r2, r6
 8010122:	4649      	mov	r1, r9
 8010124:	4640      	mov	r0, r8
 8010126:	47d0      	blx	sl
 8010128:	3001      	adds	r0, #1
 801012a:	d0ad      	beq.n	8010088 <_printf_i+0x15c>
 801012c:	6823      	ldr	r3, [r4, #0]
 801012e:	079b      	lsls	r3, r3, #30
 8010130:	d413      	bmi.n	801015a <_printf_i+0x22e>
 8010132:	68e0      	ldr	r0, [r4, #12]
 8010134:	9b03      	ldr	r3, [sp, #12]
 8010136:	4298      	cmp	r0, r3
 8010138:	bfb8      	it	lt
 801013a:	4618      	movlt	r0, r3
 801013c:	e7a6      	b.n	801008c <_printf_i+0x160>
 801013e:	2301      	movs	r3, #1
 8010140:	4632      	mov	r2, r6
 8010142:	4649      	mov	r1, r9
 8010144:	4640      	mov	r0, r8
 8010146:	47d0      	blx	sl
 8010148:	3001      	adds	r0, #1
 801014a:	d09d      	beq.n	8010088 <_printf_i+0x15c>
 801014c:	3501      	adds	r5, #1
 801014e:	68e3      	ldr	r3, [r4, #12]
 8010150:	9903      	ldr	r1, [sp, #12]
 8010152:	1a5b      	subs	r3, r3, r1
 8010154:	42ab      	cmp	r3, r5
 8010156:	dcf2      	bgt.n	801013e <_printf_i+0x212>
 8010158:	e7eb      	b.n	8010132 <_printf_i+0x206>
 801015a:	2500      	movs	r5, #0
 801015c:	f104 0619 	add.w	r6, r4, #25
 8010160:	e7f5      	b.n	801014e <_printf_i+0x222>
 8010162:	bf00      	nop
 8010164:	08015b71 	.word	0x08015b71
 8010168:	08015b82 	.word	0x08015b82

0801016c <_scanf_float>:
 801016c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010170:	b087      	sub	sp, #28
 8010172:	4617      	mov	r7, r2
 8010174:	9303      	str	r3, [sp, #12]
 8010176:	688b      	ldr	r3, [r1, #8]
 8010178:	1e5a      	subs	r2, r3, #1
 801017a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801017e:	bf81      	itttt	hi
 8010180:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010184:	eb03 0b05 	addhi.w	fp, r3, r5
 8010188:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801018c:	608b      	strhi	r3, [r1, #8]
 801018e:	680b      	ldr	r3, [r1, #0]
 8010190:	460a      	mov	r2, r1
 8010192:	f04f 0500 	mov.w	r5, #0
 8010196:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801019a:	f842 3b1c 	str.w	r3, [r2], #28
 801019e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80101a2:	4680      	mov	r8, r0
 80101a4:	460c      	mov	r4, r1
 80101a6:	bf98      	it	ls
 80101a8:	f04f 0b00 	movls.w	fp, #0
 80101ac:	9201      	str	r2, [sp, #4]
 80101ae:	4616      	mov	r6, r2
 80101b0:	46aa      	mov	sl, r5
 80101b2:	46a9      	mov	r9, r5
 80101b4:	9502      	str	r5, [sp, #8]
 80101b6:	68a2      	ldr	r2, [r4, #8]
 80101b8:	b152      	cbz	r2, 80101d0 <_scanf_float+0x64>
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	2b4e      	cmp	r3, #78	@ 0x4e
 80101c0:	d864      	bhi.n	801028c <_scanf_float+0x120>
 80101c2:	2b40      	cmp	r3, #64	@ 0x40
 80101c4:	d83c      	bhi.n	8010240 <_scanf_float+0xd4>
 80101c6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80101ca:	b2c8      	uxtb	r0, r1
 80101cc:	280e      	cmp	r0, #14
 80101ce:	d93a      	bls.n	8010246 <_scanf_float+0xda>
 80101d0:	f1b9 0f00 	cmp.w	r9, #0
 80101d4:	d003      	beq.n	80101de <_scanf_float+0x72>
 80101d6:	6823      	ldr	r3, [r4, #0]
 80101d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80101dc:	6023      	str	r3, [r4, #0]
 80101de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80101e2:	f1ba 0f01 	cmp.w	sl, #1
 80101e6:	f200 8117 	bhi.w	8010418 <_scanf_float+0x2ac>
 80101ea:	9b01      	ldr	r3, [sp, #4]
 80101ec:	429e      	cmp	r6, r3
 80101ee:	f200 8108 	bhi.w	8010402 <_scanf_float+0x296>
 80101f2:	2001      	movs	r0, #1
 80101f4:	b007      	add	sp, #28
 80101f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101fa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80101fe:	2a0d      	cmp	r2, #13
 8010200:	d8e6      	bhi.n	80101d0 <_scanf_float+0x64>
 8010202:	a101      	add	r1, pc, #4	@ (adr r1, 8010208 <_scanf_float+0x9c>)
 8010204:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010208:	0801034f 	.word	0x0801034f
 801020c:	080101d1 	.word	0x080101d1
 8010210:	080101d1 	.word	0x080101d1
 8010214:	080101d1 	.word	0x080101d1
 8010218:	080103af 	.word	0x080103af
 801021c:	08010387 	.word	0x08010387
 8010220:	080101d1 	.word	0x080101d1
 8010224:	080101d1 	.word	0x080101d1
 8010228:	0801035d 	.word	0x0801035d
 801022c:	080101d1 	.word	0x080101d1
 8010230:	080101d1 	.word	0x080101d1
 8010234:	080101d1 	.word	0x080101d1
 8010238:	080101d1 	.word	0x080101d1
 801023c:	08010315 	.word	0x08010315
 8010240:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010244:	e7db      	b.n	80101fe <_scanf_float+0x92>
 8010246:	290e      	cmp	r1, #14
 8010248:	d8c2      	bhi.n	80101d0 <_scanf_float+0x64>
 801024a:	a001      	add	r0, pc, #4	@ (adr r0, 8010250 <_scanf_float+0xe4>)
 801024c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010250:	08010305 	.word	0x08010305
 8010254:	080101d1 	.word	0x080101d1
 8010258:	08010305 	.word	0x08010305
 801025c:	0801039b 	.word	0x0801039b
 8010260:	080101d1 	.word	0x080101d1
 8010264:	080102ad 	.word	0x080102ad
 8010268:	080102eb 	.word	0x080102eb
 801026c:	080102eb 	.word	0x080102eb
 8010270:	080102eb 	.word	0x080102eb
 8010274:	080102eb 	.word	0x080102eb
 8010278:	080102eb 	.word	0x080102eb
 801027c:	080102eb 	.word	0x080102eb
 8010280:	080102eb 	.word	0x080102eb
 8010284:	080102eb 	.word	0x080102eb
 8010288:	080102eb 	.word	0x080102eb
 801028c:	2b6e      	cmp	r3, #110	@ 0x6e
 801028e:	d809      	bhi.n	80102a4 <_scanf_float+0x138>
 8010290:	2b60      	cmp	r3, #96	@ 0x60
 8010292:	d8b2      	bhi.n	80101fa <_scanf_float+0x8e>
 8010294:	2b54      	cmp	r3, #84	@ 0x54
 8010296:	d07b      	beq.n	8010390 <_scanf_float+0x224>
 8010298:	2b59      	cmp	r3, #89	@ 0x59
 801029a:	d199      	bne.n	80101d0 <_scanf_float+0x64>
 801029c:	2d07      	cmp	r5, #7
 801029e:	d197      	bne.n	80101d0 <_scanf_float+0x64>
 80102a0:	2508      	movs	r5, #8
 80102a2:	e02c      	b.n	80102fe <_scanf_float+0x192>
 80102a4:	2b74      	cmp	r3, #116	@ 0x74
 80102a6:	d073      	beq.n	8010390 <_scanf_float+0x224>
 80102a8:	2b79      	cmp	r3, #121	@ 0x79
 80102aa:	e7f6      	b.n	801029a <_scanf_float+0x12e>
 80102ac:	6821      	ldr	r1, [r4, #0]
 80102ae:	05c8      	lsls	r0, r1, #23
 80102b0:	d51b      	bpl.n	80102ea <_scanf_float+0x17e>
 80102b2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80102b6:	6021      	str	r1, [r4, #0]
 80102b8:	f109 0901 	add.w	r9, r9, #1
 80102bc:	f1bb 0f00 	cmp.w	fp, #0
 80102c0:	d003      	beq.n	80102ca <_scanf_float+0x15e>
 80102c2:	3201      	adds	r2, #1
 80102c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80102c8:	60a2      	str	r2, [r4, #8]
 80102ca:	68a3      	ldr	r3, [r4, #8]
 80102cc:	3b01      	subs	r3, #1
 80102ce:	60a3      	str	r3, [r4, #8]
 80102d0:	6923      	ldr	r3, [r4, #16]
 80102d2:	3301      	adds	r3, #1
 80102d4:	6123      	str	r3, [r4, #16]
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	3b01      	subs	r3, #1
 80102da:	2b00      	cmp	r3, #0
 80102dc:	607b      	str	r3, [r7, #4]
 80102de:	f340 8087 	ble.w	80103f0 <_scanf_float+0x284>
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	3301      	adds	r3, #1
 80102e6:	603b      	str	r3, [r7, #0]
 80102e8:	e765      	b.n	80101b6 <_scanf_float+0x4a>
 80102ea:	eb1a 0105 	adds.w	r1, sl, r5
 80102ee:	f47f af6f 	bne.w	80101d0 <_scanf_float+0x64>
 80102f2:	6822      	ldr	r2, [r4, #0]
 80102f4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80102f8:	6022      	str	r2, [r4, #0]
 80102fa:	460d      	mov	r5, r1
 80102fc:	468a      	mov	sl, r1
 80102fe:	f806 3b01 	strb.w	r3, [r6], #1
 8010302:	e7e2      	b.n	80102ca <_scanf_float+0x15e>
 8010304:	6822      	ldr	r2, [r4, #0]
 8010306:	0610      	lsls	r0, r2, #24
 8010308:	f57f af62 	bpl.w	80101d0 <_scanf_float+0x64>
 801030c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010310:	6022      	str	r2, [r4, #0]
 8010312:	e7f4      	b.n	80102fe <_scanf_float+0x192>
 8010314:	f1ba 0f00 	cmp.w	sl, #0
 8010318:	d10e      	bne.n	8010338 <_scanf_float+0x1cc>
 801031a:	f1b9 0f00 	cmp.w	r9, #0
 801031e:	d10e      	bne.n	801033e <_scanf_float+0x1d2>
 8010320:	6822      	ldr	r2, [r4, #0]
 8010322:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010326:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801032a:	d108      	bne.n	801033e <_scanf_float+0x1d2>
 801032c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010330:	6022      	str	r2, [r4, #0]
 8010332:	f04f 0a01 	mov.w	sl, #1
 8010336:	e7e2      	b.n	80102fe <_scanf_float+0x192>
 8010338:	f1ba 0f02 	cmp.w	sl, #2
 801033c:	d055      	beq.n	80103ea <_scanf_float+0x27e>
 801033e:	2d01      	cmp	r5, #1
 8010340:	d002      	beq.n	8010348 <_scanf_float+0x1dc>
 8010342:	2d04      	cmp	r5, #4
 8010344:	f47f af44 	bne.w	80101d0 <_scanf_float+0x64>
 8010348:	3501      	adds	r5, #1
 801034a:	b2ed      	uxtb	r5, r5
 801034c:	e7d7      	b.n	80102fe <_scanf_float+0x192>
 801034e:	f1ba 0f01 	cmp.w	sl, #1
 8010352:	f47f af3d 	bne.w	80101d0 <_scanf_float+0x64>
 8010356:	f04f 0a02 	mov.w	sl, #2
 801035a:	e7d0      	b.n	80102fe <_scanf_float+0x192>
 801035c:	b97d      	cbnz	r5, 801037e <_scanf_float+0x212>
 801035e:	f1b9 0f00 	cmp.w	r9, #0
 8010362:	f47f af38 	bne.w	80101d6 <_scanf_float+0x6a>
 8010366:	6822      	ldr	r2, [r4, #0]
 8010368:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801036c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8010370:	f040 8108 	bne.w	8010584 <_scanf_float+0x418>
 8010374:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010378:	6022      	str	r2, [r4, #0]
 801037a:	2501      	movs	r5, #1
 801037c:	e7bf      	b.n	80102fe <_scanf_float+0x192>
 801037e:	2d03      	cmp	r5, #3
 8010380:	d0e2      	beq.n	8010348 <_scanf_float+0x1dc>
 8010382:	2d05      	cmp	r5, #5
 8010384:	e7de      	b.n	8010344 <_scanf_float+0x1d8>
 8010386:	2d02      	cmp	r5, #2
 8010388:	f47f af22 	bne.w	80101d0 <_scanf_float+0x64>
 801038c:	2503      	movs	r5, #3
 801038e:	e7b6      	b.n	80102fe <_scanf_float+0x192>
 8010390:	2d06      	cmp	r5, #6
 8010392:	f47f af1d 	bne.w	80101d0 <_scanf_float+0x64>
 8010396:	2507      	movs	r5, #7
 8010398:	e7b1      	b.n	80102fe <_scanf_float+0x192>
 801039a:	6822      	ldr	r2, [r4, #0]
 801039c:	0591      	lsls	r1, r2, #22
 801039e:	f57f af17 	bpl.w	80101d0 <_scanf_float+0x64>
 80103a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80103a6:	6022      	str	r2, [r4, #0]
 80103a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80103ac:	e7a7      	b.n	80102fe <_scanf_float+0x192>
 80103ae:	6822      	ldr	r2, [r4, #0]
 80103b0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80103b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80103b8:	d006      	beq.n	80103c8 <_scanf_float+0x25c>
 80103ba:	0550      	lsls	r0, r2, #21
 80103bc:	f57f af08 	bpl.w	80101d0 <_scanf_float+0x64>
 80103c0:	f1b9 0f00 	cmp.w	r9, #0
 80103c4:	f000 80de 	beq.w	8010584 <_scanf_float+0x418>
 80103c8:	0591      	lsls	r1, r2, #22
 80103ca:	bf58      	it	pl
 80103cc:	9902      	ldrpl	r1, [sp, #8]
 80103ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80103d2:	bf58      	it	pl
 80103d4:	eba9 0101 	subpl.w	r1, r9, r1
 80103d8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80103dc:	bf58      	it	pl
 80103de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80103e2:	6022      	str	r2, [r4, #0]
 80103e4:	f04f 0900 	mov.w	r9, #0
 80103e8:	e789      	b.n	80102fe <_scanf_float+0x192>
 80103ea:	f04f 0a03 	mov.w	sl, #3
 80103ee:	e786      	b.n	80102fe <_scanf_float+0x192>
 80103f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80103f4:	4639      	mov	r1, r7
 80103f6:	4640      	mov	r0, r8
 80103f8:	4798      	blx	r3
 80103fa:	2800      	cmp	r0, #0
 80103fc:	f43f aedb 	beq.w	80101b6 <_scanf_float+0x4a>
 8010400:	e6e6      	b.n	80101d0 <_scanf_float+0x64>
 8010402:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010406:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801040a:	463a      	mov	r2, r7
 801040c:	4640      	mov	r0, r8
 801040e:	4798      	blx	r3
 8010410:	6923      	ldr	r3, [r4, #16]
 8010412:	3b01      	subs	r3, #1
 8010414:	6123      	str	r3, [r4, #16]
 8010416:	e6e8      	b.n	80101ea <_scanf_float+0x7e>
 8010418:	1e6b      	subs	r3, r5, #1
 801041a:	2b06      	cmp	r3, #6
 801041c:	d824      	bhi.n	8010468 <_scanf_float+0x2fc>
 801041e:	2d02      	cmp	r5, #2
 8010420:	d836      	bhi.n	8010490 <_scanf_float+0x324>
 8010422:	9b01      	ldr	r3, [sp, #4]
 8010424:	429e      	cmp	r6, r3
 8010426:	f67f aee4 	bls.w	80101f2 <_scanf_float+0x86>
 801042a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801042e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010432:	463a      	mov	r2, r7
 8010434:	4640      	mov	r0, r8
 8010436:	4798      	blx	r3
 8010438:	6923      	ldr	r3, [r4, #16]
 801043a:	3b01      	subs	r3, #1
 801043c:	6123      	str	r3, [r4, #16]
 801043e:	e7f0      	b.n	8010422 <_scanf_float+0x2b6>
 8010440:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010444:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010448:	463a      	mov	r2, r7
 801044a:	4640      	mov	r0, r8
 801044c:	4798      	blx	r3
 801044e:	6923      	ldr	r3, [r4, #16]
 8010450:	3b01      	subs	r3, #1
 8010452:	6123      	str	r3, [r4, #16]
 8010454:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010458:	fa5f fa8a 	uxtb.w	sl, sl
 801045c:	f1ba 0f02 	cmp.w	sl, #2
 8010460:	d1ee      	bne.n	8010440 <_scanf_float+0x2d4>
 8010462:	3d03      	subs	r5, #3
 8010464:	b2ed      	uxtb	r5, r5
 8010466:	1b76      	subs	r6, r6, r5
 8010468:	6823      	ldr	r3, [r4, #0]
 801046a:	05da      	lsls	r2, r3, #23
 801046c:	d530      	bpl.n	80104d0 <_scanf_float+0x364>
 801046e:	055b      	lsls	r3, r3, #21
 8010470:	d511      	bpl.n	8010496 <_scanf_float+0x32a>
 8010472:	9b01      	ldr	r3, [sp, #4]
 8010474:	429e      	cmp	r6, r3
 8010476:	f67f aebc 	bls.w	80101f2 <_scanf_float+0x86>
 801047a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801047e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010482:	463a      	mov	r2, r7
 8010484:	4640      	mov	r0, r8
 8010486:	4798      	blx	r3
 8010488:	6923      	ldr	r3, [r4, #16]
 801048a:	3b01      	subs	r3, #1
 801048c:	6123      	str	r3, [r4, #16]
 801048e:	e7f0      	b.n	8010472 <_scanf_float+0x306>
 8010490:	46aa      	mov	sl, r5
 8010492:	46b3      	mov	fp, r6
 8010494:	e7de      	b.n	8010454 <_scanf_float+0x2e8>
 8010496:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801049a:	6923      	ldr	r3, [r4, #16]
 801049c:	2965      	cmp	r1, #101	@ 0x65
 801049e:	f103 33ff 	add.w	r3, r3, #4294967295
 80104a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80104a6:	6123      	str	r3, [r4, #16]
 80104a8:	d00c      	beq.n	80104c4 <_scanf_float+0x358>
 80104aa:	2945      	cmp	r1, #69	@ 0x45
 80104ac:	d00a      	beq.n	80104c4 <_scanf_float+0x358>
 80104ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80104b2:	463a      	mov	r2, r7
 80104b4:	4640      	mov	r0, r8
 80104b6:	4798      	blx	r3
 80104b8:	6923      	ldr	r3, [r4, #16]
 80104ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80104be:	3b01      	subs	r3, #1
 80104c0:	1eb5      	subs	r5, r6, #2
 80104c2:	6123      	str	r3, [r4, #16]
 80104c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80104c8:	463a      	mov	r2, r7
 80104ca:	4640      	mov	r0, r8
 80104cc:	4798      	blx	r3
 80104ce:	462e      	mov	r6, r5
 80104d0:	6822      	ldr	r2, [r4, #0]
 80104d2:	f012 0210 	ands.w	r2, r2, #16
 80104d6:	d001      	beq.n	80104dc <_scanf_float+0x370>
 80104d8:	2000      	movs	r0, #0
 80104da:	e68b      	b.n	80101f4 <_scanf_float+0x88>
 80104dc:	7032      	strb	r2, [r6, #0]
 80104de:	6823      	ldr	r3, [r4, #0]
 80104e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80104e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80104e8:	d11c      	bne.n	8010524 <_scanf_float+0x3b8>
 80104ea:	9b02      	ldr	r3, [sp, #8]
 80104ec:	454b      	cmp	r3, r9
 80104ee:	eba3 0209 	sub.w	r2, r3, r9
 80104f2:	d123      	bne.n	801053c <_scanf_float+0x3d0>
 80104f4:	9901      	ldr	r1, [sp, #4]
 80104f6:	2200      	movs	r2, #0
 80104f8:	4640      	mov	r0, r8
 80104fa:	f002 fc71 	bl	8012de0 <_strtod_r>
 80104fe:	9b03      	ldr	r3, [sp, #12]
 8010500:	6821      	ldr	r1, [r4, #0]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f011 0f02 	tst.w	r1, #2
 8010508:	ec57 6b10 	vmov	r6, r7, d0
 801050c:	f103 0204 	add.w	r2, r3, #4
 8010510:	d01f      	beq.n	8010552 <_scanf_float+0x3e6>
 8010512:	9903      	ldr	r1, [sp, #12]
 8010514:	600a      	str	r2, [r1, #0]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	e9c3 6700 	strd	r6, r7, [r3]
 801051c:	68e3      	ldr	r3, [r4, #12]
 801051e:	3301      	adds	r3, #1
 8010520:	60e3      	str	r3, [r4, #12]
 8010522:	e7d9      	b.n	80104d8 <_scanf_float+0x36c>
 8010524:	9b04      	ldr	r3, [sp, #16]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d0e4      	beq.n	80104f4 <_scanf_float+0x388>
 801052a:	9905      	ldr	r1, [sp, #20]
 801052c:	230a      	movs	r3, #10
 801052e:	3101      	adds	r1, #1
 8010530:	4640      	mov	r0, r8
 8010532:	f002 fcd5 	bl	8012ee0 <_strtol_r>
 8010536:	9b04      	ldr	r3, [sp, #16]
 8010538:	9e05      	ldr	r6, [sp, #20]
 801053a:	1ac2      	subs	r2, r0, r3
 801053c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010540:	429e      	cmp	r6, r3
 8010542:	bf28      	it	cs
 8010544:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010548:	4910      	ldr	r1, [pc, #64]	@ (801058c <_scanf_float+0x420>)
 801054a:	4630      	mov	r0, r6
 801054c:	f000 f918 	bl	8010780 <siprintf>
 8010550:	e7d0      	b.n	80104f4 <_scanf_float+0x388>
 8010552:	f011 0f04 	tst.w	r1, #4
 8010556:	9903      	ldr	r1, [sp, #12]
 8010558:	600a      	str	r2, [r1, #0]
 801055a:	d1dc      	bne.n	8010516 <_scanf_float+0x3aa>
 801055c:	681d      	ldr	r5, [r3, #0]
 801055e:	4632      	mov	r2, r6
 8010560:	463b      	mov	r3, r7
 8010562:	4630      	mov	r0, r6
 8010564:	4639      	mov	r1, r7
 8010566:	f7f0 faf1 	bl	8000b4c <__aeabi_dcmpun>
 801056a:	b128      	cbz	r0, 8010578 <_scanf_float+0x40c>
 801056c:	4808      	ldr	r0, [pc, #32]	@ (8010590 <_scanf_float+0x424>)
 801056e:	f000 fac5 	bl	8010afc <nanf>
 8010572:	ed85 0a00 	vstr	s0, [r5]
 8010576:	e7d1      	b.n	801051c <_scanf_float+0x3b0>
 8010578:	4630      	mov	r0, r6
 801057a:	4639      	mov	r1, r7
 801057c:	f7f0 fb44 	bl	8000c08 <__aeabi_d2f>
 8010580:	6028      	str	r0, [r5, #0]
 8010582:	e7cb      	b.n	801051c <_scanf_float+0x3b0>
 8010584:	f04f 0900 	mov.w	r9, #0
 8010588:	e629      	b.n	80101de <_scanf_float+0x72>
 801058a:	bf00      	nop
 801058c:	08015b93 	.word	0x08015b93
 8010590:	08015c44 	.word	0x08015c44

08010594 <std>:
 8010594:	2300      	movs	r3, #0
 8010596:	b510      	push	{r4, lr}
 8010598:	4604      	mov	r4, r0
 801059a:	e9c0 3300 	strd	r3, r3, [r0]
 801059e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105a2:	6083      	str	r3, [r0, #8]
 80105a4:	8181      	strh	r1, [r0, #12]
 80105a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80105a8:	81c2      	strh	r2, [r0, #14]
 80105aa:	6183      	str	r3, [r0, #24]
 80105ac:	4619      	mov	r1, r3
 80105ae:	2208      	movs	r2, #8
 80105b0:	305c      	adds	r0, #92	@ 0x5c
 80105b2:	f000 f974 	bl	801089e <memset>
 80105b6:	4b0d      	ldr	r3, [pc, #52]	@ (80105ec <std+0x58>)
 80105b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80105ba:	4b0d      	ldr	r3, [pc, #52]	@ (80105f0 <std+0x5c>)
 80105bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80105be:	4b0d      	ldr	r3, [pc, #52]	@ (80105f4 <std+0x60>)
 80105c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80105c2:	4b0d      	ldr	r3, [pc, #52]	@ (80105f8 <std+0x64>)
 80105c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80105c6:	4b0d      	ldr	r3, [pc, #52]	@ (80105fc <std+0x68>)
 80105c8:	6224      	str	r4, [r4, #32]
 80105ca:	429c      	cmp	r4, r3
 80105cc:	d006      	beq.n	80105dc <std+0x48>
 80105ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80105d2:	4294      	cmp	r4, r2
 80105d4:	d002      	beq.n	80105dc <std+0x48>
 80105d6:	33d0      	adds	r3, #208	@ 0xd0
 80105d8:	429c      	cmp	r4, r3
 80105da:	d105      	bne.n	80105e8 <std+0x54>
 80105dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80105e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105e4:	f000 ba78 	b.w	8010ad8 <__retarget_lock_init_recursive>
 80105e8:	bd10      	pop	{r4, pc}
 80105ea:	bf00      	nop
 80105ec:	08010815 	.word	0x08010815
 80105f0:	0801083b 	.word	0x0801083b
 80105f4:	08010873 	.word	0x08010873
 80105f8:	08010897 	.word	0x08010897
 80105fc:	200055e8 	.word	0x200055e8

08010600 <stdio_exit_handler>:
 8010600:	4a02      	ldr	r2, [pc, #8]	@ (801060c <stdio_exit_handler+0xc>)
 8010602:	4903      	ldr	r1, [pc, #12]	@ (8010610 <stdio_exit_handler+0x10>)
 8010604:	4803      	ldr	r0, [pc, #12]	@ (8010614 <stdio_exit_handler+0x14>)
 8010606:	f000 b869 	b.w	80106dc <_fwalk_sglue>
 801060a:	bf00      	nop
 801060c:	200000b8 	.word	0x200000b8
 8010610:	080138d1 	.word	0x080138d1
 8010614:	200000c8 	.word	0x200000c8

08010618 <cleanup_stdio>:
 8010618:	6841      	ldr	r1, [r0, #4]
 801061a:	4b0c      	ldr	r3, [pc, #48]	@ (801064c <cleanup_stdio+0x34>)
 801061c:	4299      	cmp	r1, r3
 801061e:	b510      	push	{r4, lr}
 8010620:	4604      	mov	r4, r0
 8010622:	d001      	beq.n	8010628 <cleanup_stdio+0x10>
 8010624:	f003 f954 	bl	80138d0 <_fflush_r>
 8010628:	68a1      	ldr	r1, [r4, #8]
 801062a:	4b09      	ldr	r3, [pc, #36]	@ (8010650 <cleanup_stdio+0x38>)
 801062c:	4299      	cmp	r1, r3
 801062e:	d002      	beq.n	8010636 <cleanup_stdio+0x1e>
 8010630:	4620      	mov	r0, r4
 8010632:	f003 f94d 	bl	80138d0 <_fflush_r>
 8010636:	68e1      	ldr	r1, [r4, #12]
 8010638:	4b06      	ldr	r3, [pc, #24]	@ (8010654 <cleanup_stdio+0x3c>)
 801063a:	4299      	cmp	r1, r3
 801063c:	d004      	beq.n	8010648 <cleanup_stdio+0x30>
 801063e:	4620      	mov	r0, r4
 8010640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010644:	f003 b944 	b.w	80138d0 <_fflush_r>
 8010648:	bd10      	pop	{r4, pc}
 801064a:	bf00      	nop
 801064c:	200055e8 	.word	0x200055e8
 8010650:	20005650 	.word	0x20005650
 8010654:	200056b8 	.word	0x200056b8

08010658 <global_stdio_init.part.0>:
 8010658:	b510      	push	{r4, lr}
 801065a:	4b0b      	ldr	r3, [pc, #44]	@ (8010688 <global_stdio_init.part.0+0x30>)
 801065c:	4c0b      	ldr	r4, [pc, #44]	@ (801068c <global_stdio_init.part.0+0x34>)
 801065e:	4a0c      	ldr	r2, [pc, #48]	@ (8010690 <global_stdio_init.part.0+0x38>)
 8010660:	601a      	str	r2, [r3, #0]
 8010662:	4620      	mov	r0, r4
 8010664:	2200      	movs	r2, #0
 8010666:	2104      	movs	r1, #4
 8010668:	f7ff ff94 	bl	8010594 <std>
 801066c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010670:	2201      	movs	r2, #1
 8010672:	2109      	movs	r1, #9
 8010674:	f7ff ff8e 	bl	8010594 <std>
 8010678:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801067c:	2202      	movs	r2, #2
 801067e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010682:	2112      	movs	r1, #18
 8010684:	f7ff bf86 	b.w	8010594 <std>
 8010688:	20005720 	.word	0x20005720
 801068c:	200055e8 	.word	0x200055e8
 8010690:	08010601 	.word	0x08010601

08010694 <__sfp_lock_acquire>:
 8010694:	4801      	ldr	r0, [pc, #4]	@ (801069c <__sfp_lock_acquire+0x8>)
 8010696:	f000 ba20 	b.w	8010ada <__retarget_lock_acquire_recursive>
 801069a:	bf00      	nop
 801069c:	20005729 	.word	0x20005729

080106a0 <__sfp_lock_release>:
 80106a0:	4801      	ldr	r0, [pc, #4]	@ (80106a8 <__sfp_lock_release+0x8>)
 80106a2:	f000 ba1b 	b.w	8010adc <__retarget_lock_release_recursive>
 80106a6:	bf00      	nop
 80106a8:	20005729 	.word	0x20005729

080106ac <__sinit>:
 80106ac:	b510      	push	{r4, lr}
 80106ae:	4604      	mov	r4, r0
 80106b0:	f7ff fff0 	bl	8010694 <__sfp_lock_acquire>
 80106b4:	6a23      	ldr	r3, [r4, #32]
 80106b6:	b11b      	cbz	r3, 80106c0 <__sinit+0x14>
 80106b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106bc:	f7ff bff0 	b.w	80106a0 <__sfp_lock_release>
 80106c0:	4b04      	ldr	r3, [pc, #16]	@ (80106d4 <__sinit+0x28>)
 80106c2:	6223      	str	r3, [r4, #32]
 80106c4:	4b04      	ldr	r3, [pc, #16]	@ (80106d8 <__sinit+0x2c>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1f5      	bne.n	80106b8 <__sinit+0xc>
 80106cc:	f7ff ffc4 	bl	8010658 <global_stdio_init.part.0>
 80106d0:	e7f2      	b.n	80106b8 <__sinit+0xc>
 80106d2:	bf00      	nop
 80106d4:	08010619 	.word	0x08010619
 80106d8:	20005720 	.word	0x20005720

080106dc <_fwalk_sglue>:
 80106dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106e0:	4607      	mov	r7, r0
 80106e2:	4688      	mov	r8, r1
 80106e4:	4614      	mov	r4, r2
 80106e6:	2600      	movs	r6, #0
 80106e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80106ec:	f1b9 0901 	subs.w	r9, r9, #1
 80106f0:	d505      	bpl.n	80106fe <_fwalk_sglue+0x22>
 80106f2:	6824      	ldr	r4, [r4, #0]
 80106f4:	2c00      	cmp	r4, #0
 80106f6:	d1f7      	bne.n	80106e8 <_fwalk_sglue+0xc>
 80106f8:	4630      	mov	r0, r6
 80106fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106fe:	89ab      	ldrh	r3, [r5, #12]
 8010700:	2b01      	cmp	r3, #1
 8010702:	d907      	bls.n	8010714 <_fwalk_sglue+0x38>
 8010704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010708:	3301      	adds	r3, #1
 801070a:	d003      	beq.n	8010714 <_fwalk_sglue+0x38>
 801070c:	4629      	mov	r1, r5
 801070e:	4638      	mov	r0, r7
 8010710:	47c0      	blx	r8
 8010712:	4306      	orrs	r6, r0
 8010714:	3568      	adds	r5, #104	@ 0x68
 8010716:	e7e9      	b.n	80106ec <_fwalk_sglue+0x10>

08010718 <sniprintf>:
 8010718:	b40c      	push	{r2, r3}
 801071a:	b530      	push	{r4, r5, lr}
 801071c:	4b17      	ldr	r3, [pc, #92]	@ (801077c <sniprintf+0x64>)
 801071e:	1e0c      	subs	r4, r1, #0
 8010720:	681d      	ldr	r5, [r3, #0]
 8010722:	b09d      	sub	sp, #116	@ 0x74
 8010724:	da08      	bge.n	8010738 <sniprintf+0x20>
 8010726:	238b      	movs	r3, #139	@ 0x8b
 8010728:	602b      	str	r3, [r5, #0]
 801072a:	f04f 30ff 	mov.w	r0, #4294967295
 801072e:	b01d      	add	sp, #116	@ 0x74
 8010730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010734:	b002      	add	sp, #8
 8010736:	4770      	bx	lr
 8010738:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801073c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010740:	bf14      	ite	ne
 8010742:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010746:	4623      	moveq	r3, r4
 8010748:	9304      	str	r3, [sp, #16]
 801074a:	9307      	str	r3, [sp, #28]
 801074c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010750:	9002      	str	r0, [sp, #8]
 8010752:	9006      	str	r0, [sp, #24]
 8010754:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010758:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801075a:	ab21      	add	r3, sp, #132	@ 0x84
 801075c:	a902      	add	r1, sp, #8
 801075e:	4628      	mov	r0, r5
 8010760:	9301      	str	r3, [sp, #4]
 8010762:	f002 fc1b 	bl	8012f9c <_svfiprintf_r>
 8010766:	1c43      	adds	r3, r0, #1
 8010768:	bfbc      	itt	lt
 801076a:	238b      	movlt	r3, #139	@ 0x8b
 801076c:	602b      	strlt	r3, [r5, #0]
 801076e:	2c00      	cmp	r4, #0
 8010770:	d0dd      	beq.n	801072e <sniprintf+0x16>
 8010772:	9b02      	ldr	r3, [sp, #8]
 8010774:	2200      	movs	r2, #0
 8010776:	701a      	strb	r2, [r3, #0]
 8010778:	e7d9      	b.n	801072e <sniprintf+0x16>
 801077a:	bf00      	nop
 801077c:	200000c4 	.word	0x200000c4

08010780 <siprintf>:
 8010780:	b40e      	push	{r1, r2, r3}
 8010782:	b500      	push	{lr}
 8010784:	b09c      	sub	sp, #112	@ 0x70
 8010786:	ab1d      	add	r3, sp, #116	@ 0x74
 8010788:	9002      	str	r0, [sp, #8]
 801078a:	9006      	str	r0, [sp, #24]
 801078c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010790:	4809      	ldr	r0, [pc, #36]	@ (80107b8 <siprintf+0x38>)
 8010792:	9107      	str	r1, [sp, #28]
 8010794:	9104      	str	r1, [sp, #16]
 8010796:	4909      	ldr	r1, [pc, #36]	@ (80107bc <siprintf+0x3c>)
 8010798:	f853 2b04 	ldr.w	r2, [r3], #4
 801079c:	9105      	str	r1, [sp, #20]
 801079e:	6800      	ldr	r0, [r0, #0]
 80107a0:	9301      	str	r3, [sp, #4]
 80107a2:	a902      	add	r1, sp, #8
 80107a4:	f002 fbfa 	bl	8012f9c <_svfiprintf_r>
 80107a8:	9b02      	ldr	r3, [sp, #8]
 80107aa:	2200      	movs	r2, #0
 80107ac:	701a      	strb	r2, [r3, #0]
 80107ae:	b01c      	add	sp, #112	@ 0x70
 80107b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80107b4:	b003      	add	sp, #12
 80107b6:	4770      	bx	lr
 80107b8:	200000c4 	.word	0x200000c4
 80107bc:	ffff0208 	.word	0xffff0208

080107c0 <siscanf>:
 80107c0:	b40e      	push	{r1, r2, r3}
 80107c2:	b530      	push	{r4, r5, lr}
 80107c4:	b09c      	sub	sp, #112	@ 0x70
 80107c6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80107c8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80107cc:	f854 5b04 	ldr.w	r5, [r4], #4
 80107d0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80107d4:	9002      	str	r0, [sp, #8]
 80107d6:	9006      	str	r0, [sp, #24]
 80107d8:	f7ef fd5a 	bl	8000290 <strlen>
 80107dc:	4b0b      	ldr	r3, [pc, #44]	@ (801080c <siscanf+0x4c>)
 80107de:	9003      	str	r0, [sp, #12]
 80107e0:	9007      	str	r0, [sp, #28]
 80107e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80107e4:	480a      	ldr	r0, [pc, #40]	@ (8010810 <siscanf+0x50>)
 80107e6:	9401      	str	r4, [sp, #4]
 80107e8:	2300      	movs	r3, #0
 80107ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80107ec:	9314      	str	r3, [sp, #80]	@ 0x50
 80107ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80107f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80107f6:	462a      	mov	r2, r5
 80107f8:	4623      	mov	r3, r4
 80107fa:	a902      	add	r1, sp, #8
 80107fc:	6800      	ldr	r0, [r0, #0]
 80107fe:	f002 fd21 	bl	8013244 <__ssvfiscanf_r>
 8010802:	b01c      	add	sp, #112	@ 0x70
 8010804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010808:	b003      	add	sp, #12
 801080a:	4770      	bx	lr
 801080c:	08010837 	.word	0x08010837
 8010810:	200000c4 	.word	0x200000c4

08010814 <__sread>:
 8010814:	b510      	push	{r4, lr}
 8010816:	460c      	mov	r4, r1
 8010818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801081c:	f000 f8fe 	bl	8010a1c <_read_r>
 8010820:	2800      	cmp	r0, #0
 8010822:	bfab      	itete	ge
 8010824:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010826:	89a3      	ldrhlt	r3, [r4, #12]
 8010828:	181b      	addge	r3, r3, r0
 801082a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801082e:	bfac      	ite	ge
 8010830:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010832:	81a3      	strhlt	r3, [r4, #12]
 8010834:	bd10      	pop	{r4, pc}

08010836 <__seofread>:
 8010836:	2000      	movs	r0, #0
 8010838:	4770      	bx	lr

0801083a <__swrite>:
 801083a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801083e:	461f      	mov	r7, r3
 8010840:	898b      	ldrh	r3, [r1, #12]
 8010842:	05db      	lsls	r3, r3, #23
 8010844:	4605      	mov	r5, r0
 8010846:	460c      	mov	r4, r1
 8010848:	4616      	mov	r6, r2
 801084a:	d505      	bpl.n	8010858 <__swrite+0x1e>
 801084c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010850:	2302      	movs	r3, #2
 8010852:	2200      	movs	r2, #0
 8010854:	f000 f8d0 	bl	80109f8 <_lseek_r>
 8010858:	89a3      	ldrh	r3, [r4, #12]
 801085a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801085e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010862:	81a3      	strh	r3, [r4, #12]
 8010864:	4632      	mov	r2, r6
 8010866:	463b      	mov	r3, r7
 8010868:	4628      	mov	r0, r5
 801086a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801086e:	f000 b8f7 	b.w	8010a60 <_write_r>

08010872 <__sseek>:
 8010872:	b510      	push	{r4, lr}
 8010874:	460c      	mov	r4, r1
 8010876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801087a:	f000 f8bd 	bl	80109f8 <_lseek_r>
 801087e:	1c43      	adds	r3, r0, #1
 8010880:	89a3      	ldrh	r3, [r4, #12]
 8010882:	bf15      	itete	ne
 8010884:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010886:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801088a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801088e:	81a3      	strheq	r3, [r4, #12]
 8010890:	bf18      	it	ne
 8010892:	81a3      	strhne	r3, [r4, #12]
 8010894:	bd10      	pop	{r4, pc}

08010896 <__sclose>:
 8010896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801089a:	f000 b89d 	b.w	80109d8 <_close_r>

0801089e <memset>:
 801089e:	4402      	add	r2, r0
 80108a0:	4603      	mov	r3, r0
 80108a2:	4293      	cmp	r3, r2
 80108a4:	d100      	bne.n	80108a8 <memset+0xa>
 80108a6:	4770      	bx	lr
 80108a8:	f803 1b01 	strb.w	r1, [r3], #1
 80108ac:	e7f9      	b.n	80108a2 <memset+0x4>

080108ae <strcat>:
 80108ae:	b510      	push	{r4, lr}
 80108b0:	4602      	mov	r2, r0
 80108b2:	7814      	ldrb	r4, [r2, #0]
 80108b4:	4613      	mov	r3, r2
 80108b6:	3201      	adds	r2, #1
 80108b8:	2c00      	cmp	r4, #0
 80108ba:	d1fa      	bne.n	80108b2 <strcat+0x4>
 80108bc:	3b01      	subs	r3, #1
 80108be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80108c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80108c6:	2a00      	cmp	r2, #0
 80108c8:	d1f9      	bne.n	80108be <strcat+0x10>
 80108ca:	bd10      	pop	{r4, pc}

080108cc <strncmp>:
 80108cc:	b510      	push	{r4, lr}
 80108ce:	b16a      	cbz	r2, 80108ec <strncmp+0x20>
 80108d0:	3901      	subs	r1, #1
 80108d2:	1884      	adds	r4, r0, r2
 80108d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80108dc:	429a      	cmp	r2, r3
 80108de:	d103      	bne.n	80108e8 <strncmp+0x1c>
 80108e0:	42a0      	cmp	r0, r4
 80108e2:	d001      	beq.n	80108e8 <strncmp+0x1c>
 80108e4:	2a00      	cmp	r2, #0
 80108e6:	d1f5      	bne.n	80108d4 <strncmp+0x8>
 80108e8:	1ad0      	subs	r0, r2, r3
 80108ea:	bd10      	pop	{r4, pc}
 80108ec:	4610      	mov	r0, r2
 80108ee:	e7fc      	b.n	80108ea <strncmp+0x1e>

080108f0 <strncpy>:
 80108f0:	b510      	push	{r4, lr}
 80108f2:	3901      	subs	r1, #1
 80108f4:	4603      	mov	r3, r0
 80108f6:	b132      	cbz	r2, 8010906 <strncpy+0x16>
 80108f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80108fc:	f803 4b01 	strb.w	r4, [r3], #1
 8010900:	3a01      	subs	r2, #1
 8010902:	2c00      	cmp	r4, #0
 8010904:	d1f7      	bne.n	80108f6 <strncpy+0x6>
 8010906:	441a      	add	r2, r3
 8010908:	2100      	movs	r1, #0
 801090a:	4293      	cmp	r3, r2
 801090c:	d100      	bne.n	8010910 <strncpy+0x20>
 801090e:	bd10      	pop	{r4, pc}
 8010910:	f803 1b01 	strb.w	r1, [r3], #1
 8010914:	e7f9      	b.n	801090a <strncpy+0x1a>
	...

08010918 <strtok>:
 8010918:	4b16      	ldr	r3, [pc, #88]	@ (8010974 <strtok+0x5c>)
 801091a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801091e:	681f      	ldr	r7, [r3, #0]
 8010920:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8010922:	4605      	mov	r5, r0
 8010924:	460e      	mov	r6, r1
 8010926:	b9ec      	cbnz	r4, 8010964 <strtok+0x4c>
 8010928:	2050      	movs	r0, #80	@ 0x50
 801092a:	f7fe fec7 	bl	800f6bc <malloc>
 801092e:	4602      	mov	r2, r0
 8010930:	6478      	str	r0, [r7, #68]	@ 0x44
 8010932:	b920      	cbnz	r0, 801093e <strtok+0x26>
 8010934:	4b10      	ldr	r3, [pc, #64]	@ (8010978 <strtok+0x60>)
 8010936:	4811      	ldr	r0, [pc, #68]	@ (801097c <strtok+0x64>)
 8010938:	215b      	movs	r1, #91	@ 0x5b
 801093a:	f000 f8e5 	bl	8010b08 <__assert_func>
 801093e:	e9c0 4400 	strd	r4, r4, [r0]
 8010942:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010946:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801094a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801094e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8010952:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8010956:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801095a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801095e:	6184      	str	r4, [r0, #24]
 8010960:	7704      	strb	r4, [r0, #28]
 8010962:	6244      	str	r4, [r0, #36]	@ 0x24
 8010964:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010966:	4631      	mov	r1, r6
 8010968:	4628      	mov	r0, r5
 801096a:	2301      	movs	r3, #1
 801096c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010970:	f000 b806 	b.w	8010980 <__strtok_r>
 8010974:	200000c4 	.word	0x200000c4
 8010978:	08015b98 	.word	0x08015b98
 801097c:	08015baf 	.word	0x08015baf

08010980 <__strtok_r>:
 8010980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010982:	4604      	mov	r4, r0
 8010984:	b908      	cbnz	r0, 801098a <__strtok_r+0xa>
 8010986:	6814      	ldr	r4, [r2, #0]
 8010988:	b144      	cbz	r4, 801099c <__strtok_r+0x1c>
 801098a:	4620      	mov	r0, r4
 801098c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010990:	460f      	mov	r7, r1
 8010992:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010996:	b91e      	cbnz	r6, 80109a0 <__strtok_r+0x20>
 8010998:	b965      	cbnz	r5, 80109b4 <__strtok_r+0x34>
 801099a:	6015      	str	r5, [r2, #0]
 801099c:	2000      	movs	r0, #0
 801099e:	e005      	b.n	80109ac <__strtok_r+0x2c>
 80109a0:	42b5      	cmp	r5, r6
 80109a2:	d1f6      	bne.n	8010992 <__strtok_r+0x12>
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d1f0      	bne.n	801098a <__strtok_r+0xa>
 80109a8:	6014      	str	r4, [r2, #0]
 80109aa:	7003      	strb	r3, [r0, #0]
 80109ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109ae:	461c      	mov	r4, r3
 80109b0:	e00c      	b.n	80109cc <__strtok_r+0x4c>
 80109b2:	b915      	cbnz	r5, 80109ba <__strtok_r+0x3a>
 80109b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80109b8:	460e      	mov	r6, r1
 80109ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 80109be:	42ab      	cmp	r3, r5
 80109c0:	d1f7      	bne.n	80109b2 <__strtok_r+0x32>
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d0f3      	beq.n	80109ae <__strtok_r+0x2e>
 80109c6:	2300      	movs	r3, #0
 80109c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80109cc:	6014      	str	r4, [r2, #0]
 80109ce:	e7ed      	b.n	80109ac <__strtok_r+0x2c>

080109d0 <_localeconv_r>:
 80109d0:	4800      	ldr	r0, [pc, #0]	@ (80109d4 <_localeconv_r+0x4>)
 80109d2:	4770      	bx	lr
 80109d4:	20000204 	.word	0x20000204

080109d8 <_close_r>:
 80109d8:	b538      	push	{r3, r4, r5, lr}
 80109da:	4d06      	ldr	r5, [pc, #24]	@ (80109f4 <_close_r+0x1c>)
 80109dc:	2300      	movs	r3, #0
 80109de:	4604      	mov	r4, r0
 80109e0:	4608      	mov	r0, r1
 80109e2:	602b      	str	r3, [r5, #0]
 80109e4:	f7f4 fba2 	bl	800512c <_close>
 80109e8:	1c43      	adds	r3, r0, #1
 80109ea:	d102      	bne.n	80109f2 <_close_r+0x1a>
 80109ec:	682b      	ldr	r3, [r5, #0]
 80109ee:	b103      	cbz	r3, 80109f2 <_close_r+0x1a>
 80109f0:	6023      	str	r3, [r4, #0]
 80109f2:	bd38      	pop	{r3, r4, r5, pc}
 80109f4:	20005724 	.word	0x20005724

080109f8 <_lseek_r>:
 80109f8:	b538      	push	{r3, r4, r5, lr}
 80109fa:	4d07      	ldr	r5, [pc, #28]	@ (8010a18 <_lseek_r+0x20>)
 80109fc:	4604      	mov	r4, r0
 80109fe:	4608      	mov	r0, r1
 8010a00:	4611      	mov	r1, r2
 8010a02:	2200      	movs	r2, #0
 8010a04:	602a      	str	r2, [r5, #0]
 8010a06:	461a      	mov	r2, r3
 8010a08:	f7f4 fbb7 	bl	800517a <_lseek>
 8010a0c:	1c43      	adds	r3, r0, #1
 8010a0e:	d102      	bne.n	8010a16 <_lseek_r+0x1e>
 8010a10:	682b      	ldr	r3, [r5, #0]
 8010a12:	b103      	cbz	r3, 8010a16 <_lseek_r+0x1e>
 8010a14:	6023      	str	r3, [r4, #0]
 8010a16:	bd38      	pop	{r3, r4, r5, pc}
 8010a18:	20005724 	.word	0x20005724

08010a1c <_read_r>:
 8010a1c:	b538      	push	{r3, r4, r5, lr}
 8010a1e:	4d07      	ldr	r5, [pc, #28]	@ (8010a3c <_read_r+0x20>)
 8010a20:	4604      	mov	r4, r0
 8010a22:	4608      	mov	r0, r1
 8010a24:	4611      	mov	r1, r2
 8010a26:	2200      	movs	r2, #0
 8010a28:	602a      	str	r2, [r5, #0]
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	f7f4 fb61 	bl	80050f2 <_read>
 8010a30:	1c43      	adds	r3, r0, #1
 8010a32:	d102      	bne.n	8010a3a <_read_r+0x1e>
 8010a34:	682b      	ldr	r3, [r5, #0]
 8010a36:	b103      	cbz	r3, 8010a3a <_read_r+0x1e>
 8010a38:	6023      	str	r3, [r4, #0]
 8010a3a:	bd38      	pop	{r3, r4, r5, pc}
 8010a3c:	20005724 	.word	0x20005724

08010a40 <_sbrk_r>:
 8010a40:	b538      	push	{r3, r4, r5, lr}
 8010a42:	4d06      	ldr	r5, [pc, #24]	@ (8010a5c <_sbrk_r+0x1c>)
 8010a44:	2300      	movs	r3, #0
 8010a46:	4604      	mov	r4, r0
 8010a48:	4608      	mov	r0, r1
 8010a4a:	602b      	str	r3, [r5, #0]
 8010a4c:	f7f4 fba2 	bl	8005194 <_sbrk>
 8010a50:	1c43      	adds	r3, r0, #1
 8010a52:	d102      	bne.n	8010a5a <_sbrk_r+0x1a>
 8010a54:	682b      	ldr	r3, [r5, #0]
 8010a56:	b103      	cbz	r3, 8010a5a <_sbrk_r+0x1a>
 8010a58:	6023      	str	r3, [r4, #0]
 8010a5a:	bd38      	pop	{r3, r4, r5, pc}
 8010a5c:	20005724 	.word	0x20005724

08010a60 <_write_r>:
 8010a60:	b538      	push	{r3, r4, r5, lr}
 8010a62:	4d07      	ldr	r5, [pc, #28]	@ (8010a80 <_write_r+0x20>)
 8010a64:	4604      	mov	r4, r0
 8010a66:	4608      	mov	r0, r1
 8010a68:	4611      	mov	r1, r2
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	602a      	str	r2, [r5, #0]
 8010a6e:	461a      	mov	r2, r3
 8010a70:	f7f4 ff1c 	bl	80058ac <_write>
 8010a74:	1c43      	adds	r3, r0, #1
 8010a76:	d102      	bne.n	8010a7e <_write_r+0x1e>
 8010a78:	682b      	ldr	r3, [r5, #0]
 8010a7a:	b103      	cbz	r3, 8010a7e <_write_r+0x1e>
 8010a7c:	6023      	str	r3, [r4, #0]
 8010a7e:	bd38      	pop	{r3, r4, r5, pc}
 8010a80:	20005724 	.word	0x20005724

08010a84 <__errno>:
 8010a84:	4b01      	ldr	r3, [pc, #4]	@ (8010a8c <__errno+0x8>)
 8010a86:	6818      	ldr	r0, [r3, #0]
 8010a88:	4770      	bx	lr
 8010a8a:	bf00      	nop
 8010a8c:	200000c4 	.word	0x200000c4

08010a90 <__libc_init_array>:
 8010a90:	b570      	push	{r4, r5, r6, lr}
 8010a92:	4d0d      	ldr	r5, [pc, #52]	@ (8010ac8 <__libc_init_array+0x38>)
 8010a94:	4c0d      	ldr	r4, [pc, #52]	@ (8010acc <__libc_init_array+0x3c>)
 8010a96:	1b64      	subs	r4, r4, r5
 8010a98:	10a4      	asrs	r4, r4, #2
 8010a9a:	2600      	movs	r6, #0
 8010a9c:	42a6      	cmp	r6, r4
 8010a9e:	d109      	bne.n	8010ab4 <__libc_init_array+0x24>
 8010aa0:	4d0b      	ldr	r5, [pc, #44]	@ (8010ad0 <__libc_init_array+0x40>)
 8010aa2:	4c0c      	ldr	r4, [pc, #48]	@ (8010ad4 <__libc_init_array+0x44>)
 8010aa4:	f004 fe24 	bl	80156f0 <_init>
 8010aa8:	1b64      	subs	r4, r4, r5
 8010aaa:	10a4      	asrs	r4, r4, #2
 8010aac:	2600      	movs	r6, #0
 8010aae:	42a6      	cmp	r6, r4
 8010ab0:	d105      	bne.n	8010abe <__libc_init_array+0x2e>
 8010ab2:	bd70      	pop	{r4, r5, r6, pc}
 8010ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ab8:	4798      	blx	r3
 8010aba:	3601      	adds	r6, #1
 8010abc:	e7ee      	b.n	8010a9c <__libc_init_array+0xc>
 8010abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ac2:	4798      	blx	r3
 8010ac4:	3601      	adds	r6, #1
 8010ac6:	e7f2      	b.n	8010aae <__libc_init_array+0x1e>
 8010ac8:	08016038 	.word	0x08016038
 8010acc:	08016038 	.word	0x08016038
 8010ad0:	08016038 	.word	0x08016038
 8010ad4:	0801603c 	.word	0x0801603c

08010ad8 <__retarget_lock_init_recursive>:
 8010ad8:	4770      	bx	lr

08010ada <__retarget_lock_acquire_recursive>:
 8010ada:	4770      	bx	lr

08010adc <__retarget_lock_release_recursive>:
 8010adc:	4770      	bx	lr

08010ade <memcpy>:
 8010ade:	440a      	add	r2, r1
 8010ae0:	4291      	cmp	r1, r2
 8010ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ae6:	d100      	bne.n	8010aea <memcpy+0xc>
 8010ae8:	4770      	bx	lr
 8010aea:	b510      	push	{r4, lr}
 8010aec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010af0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010af4:	4291      	cmp	r1, r2
 8010af6:	d1f9      	bne.n	8010aec <memcpy+0xe>
 8010af8:	bd10      	pop	{r4, pc}
	...

08010afc <nanf>:
 8010afc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010b04 <nanf+0x8>
 8010b00:	4770      	bx	lr
 8010b02:	bf00      	nop
 8010b04:	7fc00000 	.word	0x7fc00000

08010b08 <__assert_func>:
 8010b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b0a:	4614      	mov	r4, r2
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	4b09      	ldr	r3, [pc, #36]	@ (8010b34 <__assert_func+0x2c>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	4605      	mov	r5, r0
 8010b14:	68d8      	ldr	r0, [r3, #12]
 8010b16:	b954      	cbnz	r4, 8010b2e <__assert_func+0x26>
 8010b18:	4b07      	ldr	r3, [pc, #28]	@ (8010b38 <__assert_func+0x30>)
 8010b1a:	461c      	mov	r4, r3
 8010b1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b20:	9100      	str	r1, [sp, #0]
 8010b22:	462b      	mov	r3, r5
 8010b24:	4905      	ldr	r1, [pc, #20]	@ (8010b3c <__assert_func+0x34>)
 8010b26:	f002 fefb 	bl	8013920 <fiprintf>
 8010b2a:	f002 ffa1 	bl	8013a70 <abort>
 8010b2e:	4b04      	ldr	r3, [pc, #16]	@ (8010b40 <__assert_func+0x38>)
 8010b30:	e7f4      	b.n	8010b1c <__assert_func+0x14>
 8010b32:	bf00      	nop
 8010b34:	200000c4 	.word	0x200000c4
 8010b38:	08015c44 	.word	0x08015c44
 8010b3c:	08015c16 	.word	0x08015c16
 8010b40:	08015c09 	.word	0x08015c09

08010b44 <quorem>:
 8010b44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b48:	6903      	ldr	r3, [r0, #16]
 8010b4a:	690c      	ldr	r4, [r1, #16]
 8010b4c:	42a3      	cmp	r3, r4
 8010b4e:	4607      	mov	r7, r0
 8010b50:	db7e      	blt.n	8010c50 <quorem+0x10c>
 8010b52:	3c01      	subs	r4, #1
 8010b54:	f101 0814 	add.w	r8, r1, #20
 8010b58:	00a3      	lsls	r3, r4, #2
 8010b5a:	f100 0514 	add.w	r5, r0, #20
 8010b5e:	9300      	str	r3, [sp, #0]
 8010b60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010b64:	9301      	str	r3, [sp, #4]
 8010b66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010b6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010b6e:	3301      	adds	r3, #1
 8010b70:	429a      	cmp	r2, r3
 8010b72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010b76:	fbb2 f6f3 	udiv	r6, r2, r3
 8010b7a:	d32e      	bcc.n	8010bda <quorem+0x96>
 8010b7c:	f04f 0a00 	mov.w	sl, #0
 8010b80:	46c4      	mov	ip, r8
 8010b82:	46ae      	mov	lr, r5
 8010b84:	46d3      	mov	fp, sl
 8010b86:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010b8a:	b298      	uxth	r0, r3
 8010b8c:	fb06 a000 	mla	r0, r6, r0, sl
 8010b90:	0c02      	lsrs	r2, r0, #16
 8010b92:	0c1b      	lsrs	r3, r3, #16
 8010b94:	fb06 2303 	mla	r3, r6, r3, r2
 8010b98:	f8de 2000 	ldr.w	r2, [lr]
 8010b9c:	b280      	uxth	r0, r0
 8010b9e:	b292      	uxth	r2, r2
 8010ba0:	1a12      	subs	r2, r2, r0
 8010ba2:	445a      	add	r2, fp
 8010ba4:	f8de 0000 	ldr.w	r0, [lr]
 8010ba8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010bb2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010bb6:	b292      	uxth	r2, r2
 8010bb8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010bbc:	45e1      	cmp	r9, ip
 8010bbe:	f84e 2b04 	str.w	r2, [lr], #4
 8010bc2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010bc6:	d2de      	bcs.n	8010b86 <quorem+0x42>
 8010bc8:	9b00      	ldr	r3, [sp, #0]
 8010bca:	58eb      	ldr	r3, [r5, r3]
 8010bcc:	b92b      	cbnz	r3, 8010bda <quorem+0x96>
 8010bce:	9b01      	ldr	r3, [sp, #4]
 8010bd0:	3b04      	subs	r3, #4
 8010bd2:	429d      	cmp	r5, r3
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	d32f      	bcc.n	8010c38 <quorem+0xf4>
 8010bd8:	613c      	str	r4, [r7, #16]
 8010bda:	4638      	mov	r0, r7
 8010bdc:	f001 f90e 	bl	8011dfc <__mcmp>
 8010be0:	2800      	cmp	r0, #0
 8010be2:	db25      	blt.n	8010c30 <quorem+0xec>
 8010be4:	4629      	mov	r1, r5
 8010be6:	2000      	movs	r0, #0
 8010be8:	f858 2b04 	ldr.w	r2, [r8], #4
 8010bec:	f8d1 c000 	ldr.w	ip, [r1]
 8010bf0:	fa1f fe82 	uxth.w	lr, r2
 8010bf4:	fa1f f38c 	uxth.w	r3, ip
 8010bf8:	eba3 030e 	sub.w	r3, r3, lr
 8010bfc:	4403      	add	r3, r0
 8010bfe:	0c12      	lsrs	r2, r2, #16
 8010c00:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010c04:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c0e:	45c1      	cmp	r9, r8
 8010c10:	f841 3b04 	str.w	r3, [r1], #4
 8010c14:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010c18:	d2e6      	bcs.n	8010be8 <quorem+0xa4>
 8010c1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c22:	b922      	cbnz	r2, 8010c2e <quorem+0xea>
 8010c24:	3b04      	subs	r3, #4
 8010c26:	429d      	cmp	r5, r3
 8010c28:	461a      	mov	r2, r3
 8010c2a:	d30b      	bcc.n	8010c44 <quorem+0x100>
 8010c2c:	613c      	str	r4, [r7, #16]
 8010c2e:	3601      	adds	r6, #1
 8010c30:	4630      	mov	r0, r6
 8010c32:	b003      	add	sp, #12
 8010c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c38:	6812      	ldr	r2, [r2, #0]
 8010c3a:	3b04      	subs	r3, #4
 8010c3c:	2a00      	cmp	r2, #0
 8010c3e:	d1cb      	bne.n	8010bd8 <quorem+0x94>
 8010c40:	3c01      	subs	r4, #1
 8010c42:	e7c6      	b.n	8010bd2 <quorem+0x8e>
 8010c44:	6812      	ldr	r2, [r2, #0]
 8010c46:	3b04      	subs	r3, #4
 8010c48:	2a00      	cmp	r2, #0
 8010c4a:	d1ef      	bne.n	8010c2c <quorem+0xe8>
 8010c4c:	3c01      	subs	r4, #1
 8010c4e:	e7ea      	b.n	8010c26 <quorem+0xe2>
 8010c50:	2000      	movs	r0, #0
 8010c52:	e7ee      	b.n	8010c32 <quorem+0xee>
 8010c54:	0000      	movs	r0, r0
	...

08010c58 <_dtoa_r>:
 8010c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c5c:	69c7      	ldr	r7, [r0, #28]
 8010c5e:	b099      	sub	sp, #100	@ 0x64
 8010c60:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010c64:	ec55 4b10 	vmov	r4, r5, d0
 8010c68:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010c6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8010c6c:	4683      	mov	fp, r0
 8010c6e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010c70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010c72:	b97f      	cbnz	r7, 8010c94 <_dtoa_r+0x3c>
 8010c74:	2010      	movs	r0, #16
 8010c76:	f7fe fd21 	bl	800f6bc <malloc>
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010c80:	b920      	cbnz	r0, 8010c8c <_dtoa_r+0x34>
 8010c82:	4ba7      	ldr	r3, [pc, #668]	@ (8010f20 <_dtoa_r+0x2c8>)
 8010c84:	21ef      	movs	r1, #239	@ 0xef
 8010c86:	48a7      	ldr	r0, [pc, #668]	@ (8010f24 <_dtoa_r+0x2cc>)
 8010c88:	f7ff ff3e 	bl	8010b08 <__assert_func>
 8010c8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010c90:	6007      	str	r7, [r0, #0]
 8010c92:	60c7      	str	r7, [r0, #12]
 8010c94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010c98:	6819      	ldr	r1, [r3, #0]
 8010c9a:	b159      	cbz	r1, 8010cb4 <_dtoa_r+0x5c>
 8010c9c:	685a      	ldr	r2, [r3, #4]
 8010c9e:	604a      	str	r2, [r1, #4]
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	4093      	lsls	r3, r2
 8010ca4:	608b      	str	r3, [r1, #8]
 8010ca6:	4658      	mov	r0, fp
 8010ca8:	f000 fe24 	bl	80118f4 <_Bfree>
 8010cac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	601a      	str	r2, [r3, #0]
 8010cb4:	1e2b      	subs	r3, r5, #0
 8010cb6:	bfb9      	ittee	lt
 8010cb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010cbc:	9303      	strlt	r3, [sp, #12]
 8010cbe:	2300      	movge	r3, #0
 8010cc0:	6033      	strge	r3, [r6, #0]
 8010cc2:	9f03      	ldr	r7, [sp, #12]
 8010cc4:	4b98      	ldr	r3, [pc, #608]	@ (8010f28 <_dtoa_r+0x2d0>)
 8010cc6:	bfbc      	itt	lt
 8010cc8:	2201      	movlt	r2, #1
 8010cca:	6032      	strlt	r2, [r6, #0]
 8010ccc:	43bb      	bics	r3, r7
 8010cce:	d112      	bne.n	8010cf6 <_dtoa_r+0x9e>
 8010cd0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010cd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010cd6:	6013      	str	r3, [r2, #0]
 8010cd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010cdc:	4323      	orrs	r3, r4
 8010cde:	f000 854d 	beq.w	801177c <_dtoa_r+0xb24>
 8010ce2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010ce4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010f3c <_dtoa_r+0x2e4>
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	f000 854f 	beq.w	801178c <_dtoa_r+0xb34>
 8010cee:	f10a 0303 	add.w	r3, sl, #3
 8010cf2:	f000 bd49 	b.w	8011788 <_dtoa_r+0xb30>
 8010cf6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	ec51 0b17 	vmov	r0, r1, d7
 8010d00:	2300      	movs	r3, #0
 8010d02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010d06:	f7ef feef 	bl	8000ae8 <__aeabi_dcmpeq>
 8010d0a:	4680      	mov	r8, r0
 8010d0c:	b158      	cbz	r0, 8010d26 <_dtoa_r+0xce>
 8010d0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010d10:	2301      	movs	r3, #1
 8010d12:	6013      	str	r3, [r2, #0]
 8010d14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d16:	b113      	cbz	r3, 8010d1e <_dtoa_r+0xc6>
 8010d18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010d1a:	4b84      	ldr	r3, [pc, #528]	@ (8010f2c <_dtoa_r+0x2d4>)
 8010d1c:	6013      	str	r3, [r2, #0]
 8010d1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010f40 <_dtoa_r+0x2e8>
 8010d22:	f000 bd33 	b.w	801178c <_dtoa_r+0xb34>
 8010d26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010d2a:	aa16      	add	r2, sp, #88	@ 0x58
 8010d2c:	a917      	add	r1, sp, #92	@ 0x5c
 8010d2e:	4658      	mov	r0, fp
 8010d30:	f001 f984 	bl	801203c <__d2b>
 8010d34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010d38:	4681      	mov	r9, r0
 8010d3a:	2e00      	cmp	r6, #0
 8010d3c:	d077      	beq.n	8010e2e <_dtoa_r+0x1d6>
 8010d3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010d4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010d50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010d54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010d58:	4619      	mov	r1, r3
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	4b74      	ldr	r3, [pc, #464]	@ (8010f30 <_dtoa_r+0x2d8>)
 8010d5e:	f7ef faa3 	bl	80002a8 <__aeabi_dsub>
 8010d62:	a369      	add	r3, pc, #420	@ (adr r3, 8010f08 <_dtoa_r+0x2b0>)
 8010d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d68:	f7ef fc56 	bl	8000618 <__aeabi_dmul>
 8010d6c:	a368      	add	r3, pc, #416	@ (adr r3, 8010f10 <_dtoa_r+0x2b8>)
 8010d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d72:	f7ef fa9b 	bl	80002ac <__adddf3>
 8010d76:	4604      	mov	r4, r0
 8010d78:	4630      	mov	r0, r6
 8010d7a:	460d      	mov	r5, r1
 8010d7c:	f7ef fbe2 	bl	8000544 <__aeabi_i2d>
 8010d80:	a365      	add	r3, pc, #404	@ (adr r3, 8010f18 <_dtoa_r+0x2c0>)
 8010d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d86:	f7ef fc47 	bl	8000618 <__aeabi_dmul>
 8010d8a:	4602      	mov	r2, r0
 8010d8c:	460b      	mov	r3, r1
 8010d8e:	4620      	mov	r0, r4
 8010d90:	4629      	mov	r1, r5
 8010d92:	f7ef fa8b 	bl	80002ac <__adddf3>
 8010d96:	4604      	mov	r4, r0
 8010d98:	460d      	mov	r5, r1
 8010d9a:	f7ef feed 	bl	8000b78 <__aeabi_d2iz>
 8010d9e:	2200      	movs	r2, #0
 8010da0:	4607      	mov	r7, r0
 8010da2:	2300      	movs	r3, #0
 8010da4:	4620      	mov	r0, r4
 8010da6:	4629      	mov	r1, r5
 8010da8:	f7ef fea8 	bl	8000afc <__aeabi_dcmplt>
 8010dac:	b140      	cbz	r0, 8010dc0 <_dtoa_r+0x168>
 8010dae:	4638      	mov	r0, r7
 8010db0:	f7ef fbc8 	bl	8000544 <__aeabi_i2d>
 8010db4:	4622      	mov	r2, r4
 8010db6:	462b      	mov	r3, r5
 8010db8:	f7ef fe96 	bl	8000ae8 <__aeabi_dcmpeq>
 8010dbc:	b900      	cbnz	r0, 8010dc0 <_dtoa_r+0x168>
 8010dbe:	3f01      	subs	r7, #1
 8010dc0:	2f16      	cmp	r7, #22
 8010dc2:	d851      	bhi.n	8010e68 <_dtoa_r+0x210>
 8010dc4:	4b5b      	ldr	r3, [pc, #364]	@ (8010f34 <_dtoa_r+0x2dc>)
 8010dc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010dd2:	f7ef fe93 	bl	8000afc <__aeabi_dcmplt>
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	d048      	beq.n	8010e6c <_dtoa_r+0x214>
 8010dda:	3f01      	subs	r7, #1
 8010ddc:	2300      	movs	r3, #0
 8010dde:	9312      	str	r3, [sp, #72]	@ 0x48
 8010de0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010de2:	1b9b      	subs	r3, r3, r6
 8010de4:	1e5a      	subs	r2, r3, #1
 8010de6:	bf44      	itt	mi
 8010de8:	f1c3 0801 	rsbmi	r8, r3, #1
 8010dec:	2300      	movmi	r3, #0
 8010dee:	9208      	str	r2, [sp, #32]
 8010df0:	bf54      	ite	pl
 8010df2:	f04f 0800 	movpl.w	r8, #0
 8010df6:	9308      	strmi	r3, [sp, #32]
 8010df8:	2f00      	cmp	r7, #0
 8010dfa:	db39      	blt.n	8010e70 <_dtoa_r+0x218>
 8010dfc:	9b08      	ldr	r3, [sp, #32]
 8010dfe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010e00:	443b      	add	r3, r7
 8010e02:	9308      	str	r3, [sp, #32]
 8010e04:	2300      	movs	r3, #0
 8010e06:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e0a:	2b09      	cmp	r3, #9
 8010e0c:	d864      	bhi.n	8010ed8 <_dtoa_r+0x280>
 8010e0e:	2b05      	cmp	r3, #5
 8010e10:	bfc4      	itt	gt
 8010e12:	3b04      	subgt	r3, #4
 8010e14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e18:	f1a3 0302 	sub.w	r3, r3, #2
 8010e1c:	bfcc      	ite	gt
 8010e1e:	2400      	movgt	r4, #0
 8010e20:	2401      	movle	r4, #1
 8010e22:	2b03      	cmp	r3, #3
 8010e24:	d863      	bhi.n	8010eee <_dtoa_r+0x296>
 8010e26:	e8df f003 	tbb	[pc, r3]
 8010e2a:	372a      	.short	0x372a
 8010e2c:	5535      	.short	0x5535
 8010e2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010e32:	441e      	add	r6, r3
 8010e34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010e38:	2b20      	cmp	r3, #32
 8010e3a:	bfc1      	itttt	gt
 8010e3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010e40:	409f      	lslgt	r7, r3
 8010e42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010e46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010e4a:	bfd6      	itet	le
 8010e4c:	f1c3 0320 	rsble	r3, r3, #32
 8010e50:	ea47 0003 	orrgt.w	r0, r7, r3
 8010e54:	fa04 f003 	lslle.w	r0, r4, r3
 8010e58:	f7ef fb64 	bl	8000524 <__aeabi_ui2d>
 8010e5c:	2201      	movs	r2, #1
 8010e5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010e62:	3e01      	subs	r6, #1
 8010e64:	9214      	str	r2, [sp, #80]	@ 0x50
 8010e66:	e777      	b.n	8010d58 <_dtoa_r+0x100>
 8010e68:	2301      	movs	r3, #1
 8010e6a:	e7b8      	b.n	8010dde <_dtoa_r+0x186>
 8010e6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8010e6e:	e7b7      	b.n	8010de0 <_dtoa_r+0x188>
 8010e70:	427b      	negs	r3, r7
 8010e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e74:	2300      	movs	r3, #0
 8010e76:	eba8 0807 	sub.w	r8, r8, r7
 8010e7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010e7c:	e7c4      	b.n	8010e08 <_dtoa_r+0x1b0>
 8010e7e:	2300      	movs	r3, #0
 8010e80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	dc35      	bgt.n	8010ef4 <_dtoa_r+0x29c>
 8010e88:	2301      	movs	r3, #1
 8010e8a:	9300      	str	r3, [sp, #0]
 8010e8c:	9307      	str	r3, [sp, #28]
 8010e8e:	461a      	mov	r2, r3
 8010e90:	920e      	str	r2, [sp, #56]	@ 0x38
 8010e92:	e00b      	b.n	8010eac <_dtoa_r+0x254>
 8010e94:	2301      	movs	r3, #1
 8010e96:	e7f3      	b.n	8010e80 <_dtoa_r+0x228>
 8010e98:	2300      	movs	r3, #0
 8010e9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e9e:	18fb      	adds	r3, r7, r3
 8010ea0:	9300      	str	r3, [sp, #0]
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	9307      	str	r3, [sp, #28]
 8010ea8:	bfb8      	it	lt
 8010eaa:	2301      	movlt	r3, #1
 8010eac:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010eb0:	2100      	movs	r1, #0
 8010eb2:	2204      	movs	r2, #4
 8010eb4:	f102 0514 	add.w	r5, r2, #20
 8010eb8:	429d      	cmp	r5, r3
 8010eba:	d91f      	bls.n	8010efc <_dtoa_r+0x2a4>
 8010ebc:	6041      	str	r1, [r0, #4]
 8010ebe:	4658      	mov	r0, fp
 8010ec0:	f000 fcd8 	bl	8011874 <_Balloc>
 8010ec4:	4682      	mov	sl, r0
 8010ec6:	2800      	cmp	r0, #0
 8010ec8:	d13c      	bne.n	8010f44 <_dtoa_r+0x2ec>
 8010eca:	4b1b      	ldr	r3, [pc, #108]	@ (8010f38 <_dtoa_r+0x2e0>)
 8010ecc:	4602      	mov	r2, r0
 8010ece:	f240 11af 	movw	r1, #431	@ 0x1af
 8010ed2:	e6d8      	b.n	8010c86 <_dtoa_r+0x2e>
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	e7e0      	b.n	8010e9a <_dtoa_r+0x242>
 8010ed8:	2401      	movs	r4, #1
 8010eda:	2300      	movs	r3, #0
 8010edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ede:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ee4:	9300      	str	r3, [sp, #0]
 8010ee6:	9307      	str	r3, [sp, #28]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	2312      	movs	r3, #18
 8010eec:	e7d0      	b.n	8010e90 <_dtoa_r+0x238>
 8010eee:	2301      	movs	r3, #1
 8010ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ef2:	e7f5      	b.n	8010ee0 <_dtoa_r+0x288>
 8010ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ef6:	9300      	str	r3, [sp, #0]
 8010ef8:	9307      	str	r3, [sp, #28]
 8010efa:	e7d7      	b.n	8010eac <_dtoa_r+0x254>
 8010efc:	3101      	adds	r1, #1
 8010efe:	0052      	lsls	r2, r2, #1
 8010f00:	e7d8      	b.n	8010eb4 <_dtoa_r+0x25c>
 8010f02:	bf00      	nop
 8010f04:	f3af 8000 	nop.w
 8010f08:	636f4361 	.word	0x636f4361
 8010f0c:	3fd287a7 	.word	0x3fd287a7
 8010f10:	8b60c8b3 	.word	0x8b60c8b3
 8010f14:	3fc68a28 	.word	0x3fc68a28
 8010f18:	509f79fb 	.word	0x509f79fb
 8010f1c:	3fd34413 	.word	0x3fd34413
 8010f20:	08015b98 	.word	0x08015b98
 8010f24:	08015c52 	.word	0x08015c52
 8010f28:	7ff00000 	.word	0x7ff00000
 8010f2c:	08015f91 	.word	0x08015f91
 8010f30:	3ff80000 	.word	0x3ff80000
 8010f34:	08015d48 	.word	0x08015d48
 8010f38:	08015caa 	.word	0x08015caa
 8010f3c:	08015c4e 	.word	0x08015c4e
 8010f40:	08015f90 	.word	0x08015f90
 8010f44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010f48:	6018      	str	r0, [r3, #0]
 8010f4a:	9b07      	ldr	r3, [sp, #28]
 8010f4c:	2b0e      	cmp	r3, #14
 8010f4e:	f200 80a4 	bhi.w	801109a <_dtoa_r+0x442>
 8010f52:	2c00      	cmp	r4, #0
 8010f54:	f000 80a1 	beq.w	801109a <_dtoa_r+0x442>
 8010f58:	2f00      	cmp	r7, #0
 8010f5a:	dd33      	ble.n	8010fc4 <_dtoa_r+0x36c>
 8010f5c:	4bad      	ldr	r3, [pc, #692]	@ (8011214 <_dtoa_r+0x5bc>)
 8010f5e:	f007 020f 	and.w	r2, r7, #15
 8010f62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010f66:	ed93 7b00 	vldr	d7, [r3]
 8010f6a:	05f8      	lsls	r0, r7, #23
 8010f6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010f70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010f74:	d516      	bpl.n	8010fa4 <_dtoa_r+0x34c>
 8010f76:	4ba8      	ldr	r3, [pc, #672]	@ (8011218 <_dtoa_r+0x5c0>)
 8010f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010f80:	f7ef fc74 	bl	800086c <__aeabi_ddiv>
 8010f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f88:	f004 040f 	and.w	r4, r4, #15
 8010f8c:	2603      	movs	r6, #3
 8010f8e:	4da2      	ldr	r5, [pc, #648]	@ (8011218 <_dtoa_r+0x5c0>)
 8010f90:	b954      	cbnz	r4, 8010fa8 <_dtoa_r+0x350>
 8010f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f9a:	f7ef fc67 	bl	800086c <__aeabi_ddiv>
 8010f9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fa2:	e028      	b.n	8010ff6 <_dtoa_r+0x39e>
 8010fa4:	2602      	movs	r6, #2
 8010fa6:	e7f2      	b.n	8010f8e <_dtoa_r+0x336>
 8010fa8:	07e1      	lsls	r1, r4, #31
 8010faa:	d508      	bpl.n	8010fbe <_dtoa_r+0x366>
 8010fac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010fb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010fb4:	f7ef fb30 	bl	8000618 <__aeabi_dmul>
 8010fb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010fbc:	3601      	adds	r6, #1
 8010fbe:	1064      	asrs	r4, r4, #1
 8010fc0:	3508      	adds	r5, #8
 8010fc2:	e7e5      	b.n	8010f90 <_dtoa_r+0x338>
 8010fc4:	f000 80d2 	beq.w	801116c <_dtoa_r+0x514>
 8010fc8:	427c      	negs	r4, r7
 8010fca:	4b92      	ldr	r3, [pc, #584]	@ (8011214 <_dtoa_r+0x5bc>)
 8010fcc:	4d92      	ldr	r5, [pc, #584]	@ (8011218 <_dtoa_r+0x5c0>)
 8010fce:	f004 020f 	and.w	r2, r4, #15
 8010fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010fde:	f7ef fb1b 	bl	8000618 <__aeabi_dmul>
 8010fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fe6:	1124      	asrs	r4, r4, #4
 8010fe8:	2300      	movs	r3, #0
 8010fea:	2602      	movs	r6, #2
 8010fec:	2c00      	cmp	r4, #0
 8010fee:	f040 80b2 	bne.w	8011156 <_dtoa_r+0x4fe>
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d1d3      	bne.n	8010f9e <_dtoa_r+0x346>
 8010ff6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010ff8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	f000 80b7 	beq.w	8011170 <_dtoa_r+0x518>
 8011002:	4b86      	ldr	r3, [pc, #536]	@ (801121c <_dtoa_r+0x5c4>)
 8011004:	2200      	movs	r2, #0
 8011006:	4620      	mov	r0, r4
 8011008:	4629      	mov	r1, r5
 801100a:	f7ef fd77 	bl	8000afc <__aeabi_dcmplt>
 801100e:	2800      	cmp	r0, #0
 8011010:	f000 80ae 	beq.w	8011170 <_dtoa_r+0x518>
 8011014:	9b07      	ldr	r3, [sp, #28]
 8011016:	2b00      	cmp	r3, #0
 8011018:	f000 80aa 	beq.w	8011170 <_dtoa_r+0x518>
 801101c:	9b00      	ldr	r3, [sp, #0]
 801101e:	2b00      	cmp	r3, #0
 8011020:	dd37      	ble.n	8011092 <_dtoa_r+0x43a>
 8011022:	1e7b      	subs	r3, r7, #1
 8011024:	9304      	str	r3, [sp, #16]
 8011026:	4620      	mov	r0, r4
 8011028:	4b7d      	ldr	r3, [pc, #500]	@ (8011220 <_dtoa_r+0x5c8>)
 801102a:	2200      	movs	r2, #0
 801102c:	4629      	mov	r1, r5
 801102e:	f7ef faf3 	bl	8000618 <__aeabi_dmul>
 8011032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011036:	9c00      	ldr	r4, [sp, #0]
 8011038:	3601      	adds	r6, #1
 801103a:	4630      	mov	r0, r6
 801103c:	f7ef fa82 	bl	8000544 <__aeabi_i2d>
 8011040:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011044:	f7ef fae8 	bl	8000618 <__aeabi_dmul>
 8011048:	4b76      	ldr	r3, [pc, #472]	@ (8011224 <_dtoa_r+0x5cc>)
 801104a:	2200      	movs	r2, #0
 801104c:	f7ef f92e 	bl	80002ac <__adddf3>
 8011050:	4605      	mov	r5, r0
 8011052:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011056:	2c00      	cmp	r4, #0
 8011058:	f040 808d 	bne.w	8011176 <_dtoa_r+0x51e>
 801105c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011060:	4b71      	ldr	r3, [pc, #452]	@ (8011228 <_dtoa_r+0x5d0>)
 8011062:	2200      	movs	r2, #0
 8011064:	f7ef f920 	bl	80002a8 <__aeabi_dsub>
 8011068:	4602      	mov	r2, r0
 801106a:	460b      	mov	r3, r1
 801106c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011070:	462a      	mov	r2, r5
 8011072:	4633      	mov	r3, r6
 8011074:	f7ef fd60 	bl	8000b38 <__aeabi_dcmpgt>
 8011078:	2800      	cmp	r0, #0
 801107a:	f040 828b 	bne.w	8011594 <_dtoa_r+0x93c>
 801107e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011082:	462a      	mov	r2, r5
 8011084:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011088:	f7ef fd38 	bl	8000afc <__aeabi_dcmplt>
 801108c:	2800      	cmp	r0, #0
 801108e:	f040 8128 	bne.w	80112e2 <_dtoa_r+0x68a>
 8011092:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011096:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801109a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801109c:	2b00      	cmp	r3, #0
 801109e:	f2c0 815a 	blt.w	8011356 <_dtoa_r+0x6fe>
 80110a2:	2f0e      	cmp	r7, #14
 80110a4:	f300 8157 	bgt.w	8011356 <_dtoa_r+0x6fe>
 80110a8:	4b5a      	ldr	r3, [pc, #360]	@ (8011214 <_dtoa_r+0x5bc>)
 80110aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80110ae:	ed93 7b00 	vldr	d7, [r3]
 80110b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	ed8d 7b00 	vstr	d7, [sp]
 80110ba:	da03      	bge.n	80110c4 <_dtoa_r+0x46c>
 80110bc:	9b07      	ldr	r3, [sp, #28]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	f340 8101 	ble.w	80112c6 <_dtoa_r+0x66e>
 80110c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80110c8:	4656      	mov	r6, sl
 80110ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110ce:	4620      	mov	r0, r4
 80110d0:	4629      	mov	r1, r5
 80110d2:	f7ef fbcb 	bl	800086c <__aeabi_ddiv>
 80110d6:	f7ef fd4f 	bl	8000b78 <__aeabi_d2iz>
 80110da:	4680      	mov	r8, r0
 80110dc:	f7ef fa32 	bl	8000544 <__aeabi_i2d>
 80110e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110e4:	f7ef fa98 	bl	8000618 <__aeabi_dmul>
 80110e8:	4602      	mov	r2, r0
 80110ea:	460b      	mov	r3, r1
 80110ec:	4620      	mov	r0, r4
 80110ee:	4629      	mov	r1, r5
 80110f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80110f4:	f7ef f8d8 	bl	80002a8 <__aeabi_dsub>
 80110f8:	f806 4b01 	strb.w	r4, [r6], #1
 80110fc:	9d07      	ldr	r5, [sp, #28]
 80110fe:	eba6 040a 	sub.w	r4, r6, sl
 8011102:	42a5      	cmp	r5, r4
 8011104:	4602      	mov	r2, r0
 8011106:	460b      	mov	r3, r1
 8011108:	f040 8117 	bne.w	801133a <_dtoa_r+0x6e2>
 801110c:	f7ef f8ce 	bl	80002ac <__adddf3>
 8011110:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011114:	4604      	mov	r4, r0
 8011116:	460d      	mov	r5, r1
 8011118:	f7ef fd0e 	bl	8000b38 <__aeabi_dcmpgt>
 801111c:	2800      	cmp	r0, #0
 801111e:	f040 80f9 	bne.w	8011314 <_dtoa_r+0x6bc>
 8011122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011126:	4620      	mov	r0, r4
 8011128:	4629      	mov	r1, r5
 801112a:	f7ef fcdd 	bl	8000ae8 <__aeabi_dcmpeq>
 801112e:	b118      	cbz	r0, 8011138 <_dtoa_r+0x4e0>
 8011130:	f018 0f01 	tst.w	r8, #1
 8011134:	f040 80ee 	bne.w	8011314 <_dtoa_r+0x6bc>
 8011138:	4649      	mov	r1, r9
 801113a:	4658      	mov	r0, fp
 801113c:	f000 fbda 	bl	80118f4 <_Bfree>
 8011140:	2300      	movs	r3, #0
 8011142:	7033      	strb	r3, [r6, #0]
 8011144:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011146:	3701      	adds	r7, #1
 8011148:	601f      	str	r7, [r3, #0]
 801114a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801114c:	2b00      	cmp	r3, #0
 801114e:	f000 831d 	beq.w	801178c <_dtoa_r+0xb34>
 8011152:	601e      	str	r6, [r3, #0]
 8011154:	e31a      	b.n	801178c <_dtoa_r+0xb34>
 8011156:	07e2      	lsls	r2, r4, #31
 8011158:	d505      	bpl.n	8011166 <_dtoa_r+0x50e>
 801115a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801115e:	f7ef fa5b 	bl	8000618 <__aeabi_dmul>
 8011162:	3601      	adds	r6, #1
 8011164:	2301      	movs	r3, #1
 8011166:	1064      	asrs	r4, r4, #1
 8011168:	3508      	adds	r5, #8
 801116a:	e73f      	b.n	8010fec <_dtoa_r+0x394>
 801116c:	2602      	movs	r6, #2
 801116e:	e742      	b.n	8010ff6 <_dtoa_r+0x39e>
 8011170:	9c07      	ldr	r4, [sp, #28]
 8011172:	9704      	str	r7, [sp, #16]
 8011174:	e761      	b.n	801103a <_dtoa_r+0x3e2>
 8011176:	4b27      	ldr	r3, [pc, #156]	@ (8011214 <_dtoa_r+0x5bc>)
 8011178:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801117a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801117e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011182:	4454      	add	r4, sl
 8011184:	2900      	cmp	r1, #0
 8011186:	d053      	beq.n	8011230 <_dtoa_r+0x5d8>
 8011188:	4928      	ldr	r1, [pc, #160]	@ (801122c <_dtoa_r+0x5d4>)
 801118a:	2000      	movs	r0, #0
 801118c:	f7ef fb6e 	bl	800086c <__aeabi_ddiv>
 8011190:	4633      	mov	r3, r6
 8011192:	462a      	mov	r2, r5
 8011194:	f7ef f888 	bl	80002a8 <__aeabi_dsub>
 8011198:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801119c:	4656      	mov	r6, sl
 801119e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111a2:	f7ef fce9 	bl	8000b78 <__aeabi_d2iz>
 80111a6:	4605      	mov	r5, r0
 80111a8:	f7ef f9cc 	bl	8000544 <__aeabi_i2d>
 80111ac:	4602      	mov	r2, r0
 80111ae:	460b      	mov	r3, r1
 80111b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111b4:	f7ef f878 	bl	80002a8 <__aeabi_dsub>
 80111b8:	3530      	adds	r5, #48	@ 0x30
 80111ba:	4602      	mov	r2, r0
 80111bc:	460b      	mov	r3, r1
 80111be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80111c2:	f806 5b01 	strb.w	r5, [r6], #1
 80111c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80111ca:	f7ef fc97 	bl	8000afc <__aeabi_dcmplt>
 80111ce:	2800      	cmp	r0, #0
 80111d0:	d171      	bne.n	80112b6 <_dtoa_r+0x65e>
 80111d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80111d6:	4911      	ldr	r1, [pc, #68]	@ (801121c <_dtoa_r+0x5c4>)
 80111d8:	2000      	movs	r0, #0
 80111da:	f7ef f865 	bl	80002a8 <__aeabi_dsub>
 80111de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80111e2:	f7ef fc8b 	bl	8000afc <__aeabi_dcmplt>
 80111e6:	2800      	cmp	r0, #0
 80111e8:	f040 8095 	bne.w	8011316 <_dtoa_r+0x6be>
 80111ec:	42a6      	cmp	r6, r4
 80111ee:	f43f af50 	beq.w	8011092 <_dtoa_r+0x43a>
 80111f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80111f6:	4b0a      	ldr	r3, [pc, #40]	@ (8011220 <_dtoa_r+0x5c8>)
 80111f8:	2200      	movs	r2, #0
 80111fa:	f7ef fa0d 	bl	8000618 <__aeabi_dmul>
 80111fe:	4b08      	ldr	r3, [pc, #32]	@ (8011220 <_dtoa_r+0x5c8>)
 8011200:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011204:	2200      	movs	r2, #0
 8011206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801120a:	f7ef fa05 	bl	8000618 <__aeabi_dmul>
 801120e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011212:	e7c4      	b.n	801119e <_dtoa_r+0x546>
 8011214:	08015d48 	.word	0x08015d48
 8011218:	08015d20 	.word	0x08015d20
 801121c:	3ff00000 	.word	0x3ff00000
 8011220:	40240000 	.word	0x40240000
 8011224:	401c0000 	.word	0x401c0000
 8011228:	40140000 	.word	0x40140000
 801122c:	3fe00000 	.word	0x3fe00000
 8011230:	4631      	mov	r1, r6
 8011232:	4628      	mov	r0, r5
 8011234:	f7ef f9f0 	bl	8000618 <__aeabi_dmul>
 8011238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801123c:	9415      	str	r4, [sp, #84]	@ 0x54
 801123e:	4656      	mov	r6, sl
 8011240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011244:	f7ef fc98 	bl	8000b78 <__aeabi_d2iz>
 8011248:	4605      	mov	r5, r0
 801124a:	f7ef f97b 	bl	8000544 <__aeabi_i2d>
 801124e:	4602      	mov	r2, r0
 8011250:	460b      	mov	r3, r1
 8011252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011256:	f7ef f827 	bl	80002a8 <__aeabi_dsub>
 801125a:	3530      	adds	r5, #48	@ 0x30
 801125c:	f806 5b01 	strb.w	r5, [r6], #1
 8011260:	4602      	mov	r2, r0
 8011262:	460b      	mov	r3, r1
 8011264:	42a6      	cmp	r6, r4
 8011266:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801126a:	f04f 0200 	mov.w	r2, #0
 801126e:	d124      	bne.n	80112ba <_dtoa_r+0x662>
 8011270:	4bac      	ldr	r3, [pc, #688]	@ (8011524 <_dtoa_r+0x8cc>)
 8011272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011276:	f7ef f819 	bl	80002ac <__adddf3>
 801127a:	4602      	mov	r2, r0
 801127c:	460b      	mov	r3, r1
 801127e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011282:	f7ef fc59 	bl	8000b38 <__aeabi_dcmpgt>
 8011286:	2800      	cmp	r0, #0
 8011288:	d145      	bne.n	8011316 <_dtoa_r+0x6be>
 801128a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801128e:	49a5      	ldr	r1, [pc, #660]	@ (8011524 <_dtoa_r+0x8cc>)
 8011290:	2000      	movs	r0, #0
 8011292:	f7ef f809 	bl	80002a8 <__aeabi_dsub>
 8011296:	4602      	mov	r2, r0
 8011298:	460b      	mov	r3, r1
 801129a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801129e:	f7ef fc2d 	bl	8000afc <__aeabi_dcmplt>
 80112a2:	2800      	cmp	r0, #0
 80112a4:	f43f aef5 	beq.w	8011092 <_dtoa_r+0x43a>
 80112a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80112aa:	1e73      	subs	r3, r6, #1
 80112ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80112ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80112b2:	2b30      	cmp	r3, #48	@ 0x30
 80112b4:	d0f8      	beq.n	80112a8 <_dtoa_r+0x650>
 80112b6:	9f04      	ldr	r7, [sp, #16]
 80112b8:	e73e      	b.n	8011138 <_dtoa_r+0x4e0>
 80112ba:	4b9b      	ldr	r3, [pc, #620]	@ (8011528 <_dtoa_r+0x8d0>)
 80112bc:	f7ef f9ac 	bl	8000618 <__aeabi_dmul>
 80112c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112c4:	e7bc      	b.n	8011240 <_dtoa_r+0x5e8>
 80112c6:	d10c      	bne.n	80112e2 <_dtoa_r+0x68a>
 80112c8:	4b98      	ldr	r3, [pc, #608]	@ (801152c <_dtoa_r+0x8d4>)
 80112ca:	2200      	movs	r2, #0
 80112cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112d0:	f7ef f9a2 	bl	8000618 <__aeabi_dmul>
 80112d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80112d8:	f7ef fc24 	bl	8000b24 <__aeabi_dcmpge>
 80112dc:	2800      	cmp	r0, #0
 80112de:	f000 8157 	beq.w	8011590 <_dtoa_r+0x938>
 80112e2:	2400      	movs	r4, #0
 80112e4:	4625      	mov	r5, r4
 80112e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80112e8:	43db      	mvns	r3, r3
 80112ea:	9304      	str	r3, [sp, #16]
 80112ec:	4656      	mov	r6, sl
 80112ee:	2700      	movs	r7, #0
 80112f0:	4621      	mov	r1, r4
 80112f2:	4658      	mov	r0, fp
 80112f4:	f000 fafe 	bl	80118f4 <_Bfree>
 80112f8:	2d00      	cmp	r5, #0
 80112fa:	d0dc      	beq.n	80112b6 <_dtoa_r+0x65e>
 80112fc:	b12f      	cbz	r7, 801130a <_dtoa_r+0x6b2>
 80112fe:	42af      	cmp	r7, r5
 8011300:	d003      	beq.n	801130a <_dtoa_r+0x6b2>
 8011302:	4639      	mov	r1, r7
 8011304:	4658      	mov	r0, fp
 8011306:	f000 faf5 	bl	80118f4 <_Bfree>
 801130a:	4629      	mov	r1, r5
 801130c:	4658      	mov	r0, fp
 801130e:	f000 faf1 	bl	80118f4 <_Bfree>
 8011312:	e7d0      	b.n	80112b6 <_dtoa_r+0x65e>
 8011314:	9704      	str	r7, [sp, #16]
 8011316:	4633      	mov	r3, r6
 8011318:	461e      	mov	r6, r3
 801131a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801131e:	2a39      	cmp	r2, #57	@ 0x39
 8011320:	d107      	bne.n	8011332 <_dtoa_r+0x6da>
 8011322:	459a      	cmp	sl, r3
 8011324:	d1f8      	bne.n	8011318 <_dtoa_r+0x6c0>
 8011326:	9a04      	ldr	r2, [sp, #16]
 8011328:	3201      	adds	r2, #1
 801132a:	9204      	str	r2, [sp, #16]
 801132c:	2230      	movs	r2, #48	@ 0x30
 801132e:	f88a 2000 	strb.w	r2, [sl]
 8011332:	781a      	ldrb	r2, [r3, #0]
 8011334:	3201      	adds	r2, #1
 8011336:	701a      	strb	r2, [r3, #0]
 8011338:	e7bd      	b.n	80112b6 <_dtoa_r+0x65e>
 801133a:	4b7b      	ldr	r3, [pc, #492]	@ (8011528 <_dtoa_r+0x8d0>)
 801133c:	2200      	movs	r2, #0
 801133e:	f7ef f96b 	bl	8000618 <__aeabi_dmul>
 8011342:	2200      	movs	r2, #0
 8011344:	2300      	movs	r3, #0
 8011346:	4604      	mov	r4, r0
 8011348:	460d      	mov	r5, r1
 801134a:	f7ef fbcd 	bl	8000ae8 <__aeabi_dcmpeq>
 801134e:	2800      	cmp	r0, #0
 8011350:	f43f aebb 	beq.w	80110ca <_dtoa_r+0x472>
 8011354:	e6f0      	b.n	8011138 <_dtoa_r+0x4e0>
 8011356:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011358:	2a00      	cmp	r2, #0
 801135a:	f000 80db 	beq.w	8011514 <_dtoa_r+0x8bc>
 801135e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011360:	2a01      	cmp	r2, #1
 8011362:	f300 80bf 	bgt.w	80114e4 <_dtoa_r+0x88c>
 8011366:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011368:	2a00      	cmp	r2, #0
 801136a:	f000 80b7 	beq.w	80114dc <_dtoa_r+0x884>
 801136e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011372:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011374:	4646      	mov	r6, r8
 8011376:	9a08      	ldr	r2, [sp, #32]
 8011378:	2101      	movs	r1, #1
 801137a:	441a      	add	r2, r3
 801137c:	4658      	mov	r0, fp
 801137e:	4498      	add	r8, r3
 8011380:	9208      	str	r2, [sp, #32]
 8011382:	f000 fbb5 	bl	8011af0 <__i2b>
 8011386:	4605      	mov	r5, r0
 8011388:	b15e      	cbz	r6, 80113a2 <_dtoa_r+0x74a>
 801138a:	9b08      	ldr	r3, [sp, #32]
 801138c:	2b00      	cmp	r3, #0
 801138e:	dd08      	ble.n	80113a2 <_dtoa_r+0x74a>
 8011390:	42b3      	cmp	r3, r6
 8011392:	9a08      	ldr	r2, [sp, #32]
 8011394:	bfa8      	it	ge
 8011396:	4633      	movge	r3, r6
 8011398:	eba8 0803 	sub.w	r8, r8, r3
 801139c:	1af6      	subs	r6, r6, r3
 801139e:	1ad3      	subs	r3, r2, r3
 80113a0:	9308      	str	r3, [sp, #32]
 80113a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80113a4:	b1f3      	cbz	r3, 80113e4 <_dtoa_r+0x78c>
 80113a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f000 80b7 	beq.w	801151c <_dtoa_r+0x8c4>
 80113ae:	b18c      	cbz	r4, 80113d4 <_dtoa_r+0x77c>
 80113b0:	4629      	mov	r1, r5
 80113b2:	4622      	mov	r2, r4
 80113b4:	4658      	mov	r0, fp
 80113b6:	f000 fc5b 	bl	8011c70 <__pow5mult>
 80113ba:	464a      	mov	r2, r9
 80113bc:	4601      	mov	r1, r0
 80113be:	4605      	mov	r5, r0
 80113c0:	4658      	mov	r0, fp
 80113c2:	f000 fbab 	bl	8011b1c <__multiply>
 80113c6:	4649      	mov	r1, r9
 80113c8:	9004      	str	r0, [sp, #16]
 80113ca:	4658      	mov	r0, fp
 80113cc:	f000 fa92 	bl	80118f4 <_Bfree>
 80113d0:	9b04      	ldr	r3, [sp, #16]
 80113d2:	4699      	mov	r9, r3
 80113d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80113d6:	1b1a      	subs	r2, r3, r4
 80113d8:	d004      	beq.n	80113e4 <_dtoa_r+0x78c>
 80113da:	4649      	mov	r1, r9
 80113dc:	4658      	mov	r0, fp
 80113de:	f000 fc47 	bl	8011c70 <__pow5mult>
 80113e2:	4681      	mov	r9, r0
 80113e4:	2101      	movs	r1, #1
 80113e6:	4658      	mov	r0, fp
 80113e8:	f000 fb82 	bl	8011af0 <__i2b>
 80113ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80113ee:	4604      	mov	r4, r0
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	f000 81cf 	beq.w	8011794 <_dtoa_r+0xb3c>
 80113f6:	461a      	mov	r2, r3
 80113f8:	4601      	mov	r1, r0
 80113fa:	4658      	mov	r0, fp
 80113fc:	f000 fc38 	bl	8011c70 <__pow5mult>
 8011400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011402:	2b01      	cmp	r3, #1
 8011404:	4604      	mov	r4, r0
 8011406:	f300 8095 	bgt.w	8011534 <_dtoa_r+0x8dc>
 801140a:	9b02      	ldr	r3, [sp, #8]
 801140c:	2b00      	cmp	r3, #0
 801140e:	f040 8087 	bne.w	8011520 <_dtoa_r+0x8c8>
 8011412:	9b03      	ldr	r3, [sp, #12]
 8011414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011418:	2b00      	cmp	r3, #0
 801141a:	f040 8089 	bne.w	8011530 <_dtoa_r+0x8d8>
 801141e:	9b03      	ldr	r3, [sp, #12]
 8011420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011424:	0d1b      	lsrs	r3, r3, #20
 8011426:	051b      	lsls	r3, r3, #20
 8011428:	b12b      	cbz	r3, 8011436 <_dtoa_r+0x7de>
 801142a:	9b08      	ldr	r3, [sp, #32]
 801142c:	3301      	adds	r3, #1
 801142e:	9308      	str	r3, [sp, #32]
 8011430:	f108 0801 	add.w	r8, r8, #1
 8011434:	2301      	movs	r3, #1
 8011436:	930a      	str	r3, [sp, #40]	@ 0x28
 8011438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801143a:	2b00      	cmp	r3, #0
 801143c:	f000 81b0 	beq.w	80117a0 <_dtoa_r+0xb48>
 8011440:	6923      	ldr	r3, [r4, #16]
 8011442:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011446:	6918      	ldr	r0, [r3, #16]
 8011448:	f000 fb06 	bl	8011a58 <__hi0bits>
 801144c:	f1c0 0020 	rsb	r0, r0, #32
 8011450:	9b08      	ldr	r3, [sp, #32]
 8011452:	4418      	add	r0, r3
 8011454:	f010 001f 	ands.w	r0, r0, #31
 8011458:	d077      	beq.n	801154a <_dtoa_r+0x8f2>
 801145a:	f1c0 0320 	rsb	r3, r0, #32
 801145e:	2b04      	cmp	r3, #4
 8011460:	dd6b      	ble.n	801153a <_dtoa_r+0x8e2>
 8011462:	9b08      	ldr	r3, [sp, #32]
 8011464:	f1c0 001c 	rsb	r0, r0, #28
 8011468:	4403      	add	r3, r0
 801146a:	4480      	add	r8, r0
 801146c:	4406      	add	r6, r0
 801146e:	9308      	str	r3, [sp, #32]
 8011470:	f1b8 0f00 	cmp.w	r8, #0
 8011474:	dd05      	ble.n	8011482 <_dtoa_r+0x82a>
 8011476:	4649      	mov	r1, r9
 8011478:	4642      	mov	r2, r8
 801147a:	4658      	mov	r0, fp
 801147c:	f000 fc52 	bl	8011d24 <__lshift>
 8011480:	4681      	mov	r9, r0
 8011482:	9b08      	ldr	r3, [sp, #32]
 8011484:	2b00      	cmp	r3, #0
 8011486:	dd05      	ble.n	8011494 <_dtoa_r+0x83c>
 8011488:	4621      	mov	r1, r4
 801148a:	461a      	mov	r2, r3
 801148c:	4658      	mov	r0, fp
 801148e:	f000 fc49 	bl	8011d24 <__lshift>
 8011492:	4604      	mov	r4, r0
 8011494:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011496:	2b00      	cmp	r3, #0
 8011498:	d059      	beq.n	801154e <_dtoa_r+0x8f6>
 801149a:	4621      	mov	r1, r4
 801149c:	4648      	mov	r0, r9
 801149e:	f000 fcad 	bl	8011dfc <__mcmp>
 80114a2:	2800      	cmp	r0, #0
 80114a4:	da53      	bge.n	801154e <_dtoa_r+0x8f6>
 80114a6:	1e7b      	subs	r3, r7, #1
 80114a8:	9304      	str	r3, [sp, #16]
 80114aa:	4649      	mov	r1, r9
 80114ac:	2300      	movs	r3, #0
 80114ae:	220a      	movs	r2, #10
 80114b0:	4658      	mov	r0, fp
 80114b2:	f000 fa41 	bl	8011938 <__multadd>
 80114b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80114b8:	4681      	mov	r9, r0
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	f000 8172 	beq.w	80117a4 <_dtoa_r+0xb4c>
 80114c0:	2300      	movs	r3, #0
 80114c2:	4629      	mov	r1, r5
 80114c4:	220a      	movs	r2, #10
 80114c6:	4658      	mov	r0, fp
 80114c8:	f000 fa36 	bl	8011938 <__multadd>
 80114cc:	9b00      	ldr	r3, [sp, #0]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	4605      	mov	r5, r0
 80114d2:	dc67      	bgt.n	80115a4 <_dtoa_r+0x94c>
 80114d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114d6:	2b02      	cmp	r3, #2
 80114d8:	dc41      	bgt.n	801155e <_dtoa_r+0x906>
 80114da:	e063      	b.n	80115a4 <_dtoa_r+0x94c>
 80114dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80114de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80114e2:	e746      	b.n	8011372 <_dtoa_r+0x71a>
 80114e4:	9b07      	ldr	r3, [sp, #28]
 80114e6:	1e5c      	subs	r4, r3, #1
 80114e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80114ea:	42a3      	cmp	r3, r4
 80114ec:	bfbf      	itttt	lt
 80114ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80114f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80114f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80114f4:	1ae3      	sublt	r3, r4, r3
 80114f6:	bfb4      	ite	lt
 80114f8:	18d2      	addlt	r2, r2, r3
 80114fa:	1b1c      	subge	r4, r3, r4
 80114fc:	9b07      	ldr	r3, [sp, #28]
 80114fe:	bfbc      	itt	lt
 8011500:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011502:	2400      	movlt	r4, #0
 8011504:	2b00      	cmp	r3, #0
 8011506:	bfb5      	itete	lt
 8011508:	eba8 0603 	sublt.w	r6, r8, r3
 801150c:	9b07      	ldrge	r3, [sp, #28]
 801150e:	2300      	movlt	r3, #0
 8011510:	4646      	movge	r6, r8
 8011512:	e730      	b.n	8011376 <_dtoa_r+0x71e>
 8011514:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011516:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011518:	4646      	mov	r6, r8
 801151a:	e735      	b.n	8011388 <_dtoa_r+0x730>
 801151c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801151e:	e75c      	b.n	80113da <_dtoa_r+0x782>
 8011520:	2300      	movs	r3, #0
 8011522:	e788      	b.n	8011436 <_dtoa_r+0x7de>
 8011524:	3fe00000 	.word	0x3fe00000
 8011528:	40240000 	.word	0x40240000
 801152c:	40140000 	.word	0x40140000
 8011530:	9b02      	ldr	r3, [sp, #8]
 8011532:	e780      	b.n	8011436 <_dtoa_r+0x7de>
 8011534:	2300      	movs	r3, #0
 8011536:	930a      	str	r3, [sp, #40]	@ 0x28
 8011538:	e782      	b.n	8011440 <_dtoa_r+0x7e8>
 801153a:	d099      	beq.n	8011470 <_dtoa_r+0x818>
 801153c:	9a08      	ldr	r2, [sp, #32]
 801153e:	331c      	adds	r3, #28
 8011540:	441a      	add	r2, r3
 8011542:	4498      	add	r8, r3
 8011544:	441e      	add	r6, r3
 8011546:	9208      	str	r2, [sp, #32]
 8011548:	e792      	b.n	8011470 <_dtoa_r+0x818>
 801154a:	4603      	mov	r3, r0
 801154c:	e7f6      	b.n	801153c <_dtoa_r+0x8e4>
 801154e:	9b07      	ldr	r3, [sp, #28]
 8011550:	9704      	str	r7, [sp, #16]
 8011552:	2b00      	cmp	r3, #0
 8011554:	dc20      	bgt.n	8011598 <_dtoa_r+0x940>
 8011556:	9300      	str	r3, [sp, #0]
 8011558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801155a:	2b02      	cmp	r3, #2
 801155c:	dd1e      	ble.n	801159c <_dtoa_r+0x944>
 801155e:	9b00      	ldr	r3, [sp, #0]
 8011560:	2b00      	cmp	r3, #0
 8011562:	f47f aec0 	bne.w	80112e6 <_dtoa_r+0x68e>
 8011566:	4621      	mov	r1, r4
 8011568:	2205      	movs	r2, #5
 801156a:	4658      	mov	r0, fp
 801156c:	f000 f9e4 	bl	8011938 <__multadd>
 8011570:	4601      	mov	r1, r0
 8011572:	4604      	mov	r4, r0
 8011574:	4648      	mov	r0, r9
 8011576:	f000 fc41 	bl	8011dfc <__mcmp>
 801157a:	2800      	cmp	r0, #0
 801157c:	f77f aeb3 	ble.w	80112e6 <_dtoa_r+0x68e>
 8011580:	4656      	mov	r6, sl
 8011582:	2331      	movs	r3, #49	@ 0x31
 8011584:	f806 3b01 	strb.w	r3, [r6], #1
 8011588:	9b04      	ldr	r3, [sp, #16]
 801158a:	3301      	adds	r3, #1
 801158c:	9304      	str	r3, [sp, #16]
 801158e:	e6ae      	b.n	80112ee <_dtoa_r+0x696>
 8011590:	9c07      	ldr	r4, [sp, #28]
 8011592:	9704      	str	r7, [sp, #16]
 8011594:	4625      	mov	r5, r4
 8011596:	e7f3      	b.n	8011580 <_dtoa_r+0x928>
 8011598:	9b07      	ldr	r3, [sp, #28]
 801159a:	9300      	str	r3, [sp, #0]
 801159c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801159e:	2b00      	cmp	r3, #0
 80115a0:	f000 8104 	beq.w	80117ac <_dtoa_r+0xb54>
 80115a4:	2e00      	cmp	r6, #0
 80115a6:	dd05      	ble.n	80115b4 <_dtoa_r+0x95c>
 80115a8:	4629      	mov	r1, r5
 80115aa:	4632      	mov	r2, r6
 80115ac:	4658      	mov	r0, fp
 80115ae:	f000 fbb9 	bl	8011d24 <__lshift>
 80115b2:	4605      	mov	r5, r0
 80115b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d05a      	beq.n	8011670 <_dtoa_r+0xa18>
 80115ba:	6869      	ldr	r1, [r5, #4]
 80115bc:	4658      	mov	r0, fp
 80115be:	f000 f959 	bl	8011874 <_Balloc>
 80115c2:	4606      	mov	r6, r0
 80115c4:	b928      	cbnz	r0, 80115d2 <_dtoa_r+0x97a>
 80115c6:	4b84      	ldr	r3, [pc, #528]	@ (80117d8 <_dtoa_r+0xb80>)
 80115c8:	4602      	mov	r2, r0
 80115ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80115ce:	f7ff bb5a 	b.w	8010c86 <_dtoa_r+0x2e>
 80115d2:	692a      	ldr	r2, [r5, #16]
 80115d4:	3202      	adds	r2, #2
 80115d6:	0092      	lsls	r2, r2, #2
 80115d8:	f105 010c 	add.w	r1, r5, #12
 80115dc:	300c      	adds	r0, #12
 80115de:	f7ff fa7e 	bl	8010ade <memcpy>
 80115e2:	2201      	movs	r2, #1
 80115e4:	4631      	mov	r1, r6
 80115e6:	4658      	mov	r0, fp
 80115e8:	f000 fb9c 	bl	8011d24 <__lshift>
 80115ec:	f10a 0301 	add.w	r3, sl, #1
 80115f0:	9307      	str	r3, [sp, #28]
 80115f2:	9b00      	ldr	r3, [sp, #0]
 80115f4:	4453      	add	r3, sl
 80115f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80115f8:	9b02      	ldr	r3, [sp, #8]
 80115fa:	f003 0301 	and.w	r3, r3, #1
 80115fe:	462f      	mov	r7, r5
 8011600:	930a      	str	r3, [sp, #40]	@ 0x28
 8011602:	4605      	mov	r5, r0
 8011604:	9b07      	ldr	r3, [sp, #28]
 8011606:	4621      	mov	r1, r4
 8011608:	3b01      	subs	r3, #1
 801160a:	4648      	mov	r0, r9
 801160c:	9300      	str	r3, [sp, #0]
 801160e:	f7ff fa99 	bl	8010b44 <quorem>
 8011612:	4639      	mov	r1, r7
 8011614:	9002      	str	r0, [sp, #8]
 8011616:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801161a:	4648      	mov	r0, r9
 801161c:	f000 fbee 	bl	8011dfc <__mcmp>
 8011620:	462a      	mov	r2, r5
 8011622:	9008      	str	r0, [sp, #32]
 8011624:	4621      	mov	r1, r4
 8011626:	4658      	mov	r0, fp
 8011628:	f000 fc04 	bl	8011e34 <__mdiff>
 801162c:	68c2      	ldr	r2, [r0, #12]
 801162e:	4606      	mov	r6, r0
 8011630:	bb02      	cbnz	r2, 8011674 <_dtoa_r+0xa1c>
 8011632:	4601      	mov	r1, r0
 8011634:	4648      	mov	r0, r9
 8011636:	f000 fbe1 	bl	8011dfc <__mcmp>
 801163a:	4602      	mov	r2, r0
 801163c:	4631      	mov	r1, r6
 801163e:	4658      	mov	r0, fp
 8011640:	920e      	str	r2, [sp, #56]	@ 0x38
 8011642:	f000 f957 	bl	80118f4 <_Bfree>
 8011646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011648:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801164a:	9e07      	ldr	r6, [sp, #28]
 801164c:	ea43 0102 	orr.w	r1, r3, r2
 8011650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011652:	4319      	orrs	r1, r3
 8011654:	d110      	bne.n	8011678 <_dtoa_r+0xa20>
 8011656:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801165a:	d029      	beq.n	80116b0 <_dtoa_r+0xa58>
 801165c:	9b08      	ldr	r3, [sp, #32]
 801165e:	2b00      	cmp	r3, #0
 8011660:	dd02      	ble.n	8011668 <_dtoa_r+0xa10>
 8011662:	9b02      	ldr	r3, [sp, #8]
 8011664:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011668:	9b00      	ldr	r3, [sp, #0]
 801166a:	f883 8000 	strb.w	r8, [r3]
 801166e:	e63f      	b.n	80112f0 <_dtoa_r+0x698>
 8011670:	4628      	mov	r0, r5
 8011672:	e7bb      	b.n	80115ec <_dtoa_r+0x994>
 8011674:	2201      	movs	r2, #1
 8011676:	e7e1      	b.n	801163c <_dtoa_r+0x9e4>
 8011678:	9b08      	ldr	r3, [sp, #32]
 801167a:	2b00      	cmp	r3, #0
 801167c:	db04      	blt.n	8011688 <_dtoa_r+0xa30>
 801167e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011680:	430b      	orrs	r3, r1
 8011682:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011684:	430b      	orrs	r3, r1
 8011686:	d120      	bne.n	80116ca <_dtoa_r+0xa72>
 8011688:	2a00      	cmp	r2, #0
 801168a:	dded      	ble.n	8011668 <_dtoa_r+0xa10>
 801168c:	4649      	mov	r1, r9
 801168e:	2201      	movs	r2, #1
 8011690:	4658      	mov	r0, fp
 8011692:	f000 fb47 	bl	8011d24 <__lshift>
 8011696:	4621      	mov	r1, r4
 8011698:	4681      	mov	r9, r0
 801169a:	f000 fbaf 	bl	8011dfc <__mcmp>
 801169e:	2800      	cmp	r0, #0
 80116a0:	dc03      	bgt.n	80116aa <_dtoa_r+0xa52>
 80116a2:	d1e1      	bne.n	8011668 <_dtoa_r+0xa10>
 80116a4:	f018 0f01 	tst.w	r8, #1
 80116a8:	d0de      	beq.n	8011668 <_dtoa_r+0xa10>
 80116aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80116ae:	d1d8      	bne.n	8011662 <_dtoa_r+0xa0a>
 80116b0:	9a00      	ldr	r2, [sp, #0]
 80116b2:	2339      	movs	r3, #57	@ 0x39
 80116b4:	7013      	strb	r3, [r2, #0]
 80116b6:	4633      	mov	r3, r6
 80116b8:	461e      	mov	r6, r3
 80116ba:	3b01      	subs	r3, #1
 80116bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80116c0:	2a39      	cmp	r2, #57	@ 0x39
 80116c2:	d052      	beq.n	801176a <_dtoa_r+0xb12>
 80116c4:	3201      	adds	r2, #1
 80116c6:	701a      	strb	r2, [r3, #0]
 80116c8:	e612      	b.n	80112f0 <_dtoa_r+0x698>
 80116ca:	2a00      	cmp	r2, #0
 80116cc:	dd07      	ble.n	80116de <_dtoa_r+0xa86>
 80116ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80116d2:	d0ed      	beq.n	80116b0 <_dtoa_r+0xa58>
 80116d4:	9a00      	ldr	r2, [sp, #0]
 80116d6:	f108 0301 	add.w	r3, r8, #1
 80116da:	7013      	strb	r3, [r2, #0]
 80116dc:	e608      	b.n	80112f0 <_dtoa_r+0x698>
 80116de:	9b07      	ldr	r3, [sp, #28]
 80116e0:	9a07      	ldr	r2, [sp, #28]
 80116e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80116e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80116e8:	4293      	cmp	r3, r2
 80116ea:	d028      	beq.n	801173e <_dtoa_r+0xae6>
 80116ec:	4649      	mov	r1, r9
 80116ee:	2300      	movs	r3, #0
 80116f0:	220a      	movs	r2, #10
 80116f2:	4658      	mov	r0, fp
 80116f4:	f000 f920 	bl	8011938 <__multadd>
 80116f8:	42af      	cmp	r7, r5
 80116fa:	4681      	mov	r9, r0
 80116fc:	f04f 0300 	mov.w	r3, #0
 8011700:	f04f 020a 	mov.w	r2, #10
 8011704:	4639      	mov	r1, r7
 8011706:	4658      	mov	r0, fp
 8011708:	d107      	bne.n	801171a <_dtoa_r+0xac2>
 801170a:	f000 f915 	bl	8011938 <__multadd>
 801170e:	4607      	mov	r7, r0
 8011710:	4605      	mov	r5, r0
 8011712:	9b07      	ldr	r3, [sp, #28]
 8011714:	3301      	adds	r3, #1
 8011716:	9307      	str	r3, [sp, #28]
 8011718:	e774      	b.n	8011604 <_dtoa_r+0x9ac>
 801171a:	f000 f90d 	bl	8011938 <__multadd>
 801171e:	4629      	mov	r1, r5
 8011720:	4607      	mov	r7, r0
 8011722:	2300      	movs	r3, #0
 8011724:	220a      	movs	r2, #10
 8011726:	4658      	mov	r0, fp
 8011728:	f000 f906 	bl	8011938 <__multadd>
 801172c:	4605      	mov	r5, r0
 801172e:	e7f0      	b.n	8011712 <_dtoa_r+0xaba>
 8011730:	9b00      	ldr	r3, [sp, #0]
 8011732:	2b00      	cmp	r3, #0
 8011734:	bfcc      	ite	gt
 8011736:	461e      	movgt	r6, r3
 8011738:	2601      	movle	r6, #1
 801173a:	4456      	add	r6, sl
 801173c:	2700      	movs	r7, #0
 801173e:	4649      	mov	r1, r9
 8011740:	2201      	movs	r2, #1
 8011742:	4658      	mov	r0, fp
 8011744:	f000 faee 	bl	8011d24 <__lshift>
 8011748:	4621      	mov	r1, r4
 801174a:	4681      	mov	r9, r0
 801174c:	f000 fb56 	bl	8011dfc <__mcmp>
 8011750:	2800      	cmp	r0, #0
 8011752:	dcb0      	bgt.n	80116b6 <_dtoa_r+0xa5e>
 8011754:	d102      	bne.n	801175c <_dtoa_r+0xb04>
 8011756:	f018 0f01 	tst.w	r8, #1
 801175a:	d1ac      	bne.n	80116b6 <_dtoa_r+0xa5e>
 801175c:	4633      	mov	r3, r6
 801175e:	461e      	mov	r6, r3
 8011760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011764:	2a30      	cmp	r2, #48	@ 0x30
 8011766:	d0fa      	beq.n	801175e <_dtoa_r+0xb06>
 8011768:	e5c2      	b.n	80112f0 <_dtoa_r+0x698>
 801176a:	459a      	cmp	sl, r3
 801176c:	d1a4      	bne.n	80116b8 <_dtoa_r+0xa60>
 801176e:	9b04      	ldr	r3, [sp, #16]
 8011770:	3301      	adds	r3, #1
 8011772:	9304      	str	r3, [sp, #16]
 8011774:	2331      	movs	r3, #49	@ 0x31
 8011776:	f88a 3000 	strb.w	r3, [sl]
 801177a:	e5b9      	b.n	80112f0 <_dtoa_r+0x698>
 801177c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801177e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80117dc <_dtoa_r+0xb84>
 8011782:	b11b      	cbz	r3, 801178c <_dtoa_r+0xb34>
 8011784:	f10a 0308 	add.w	r3, sl, #8
 8011788:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801178a:	6013      	str	r3, [r2, #0]
 801178c:	4650      	mov	r0, sl
 801178e:	b019      	add	sp, #100	@ 0x64
 8011790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011796:	2b01      	cmp	r3, #1
 8011798:	f77f ae37 	ble.w	801140a <_dtoa_r+0x7b2>
 801179c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801179e:	930a      	str	r3, [sp, #40]	@ 0x28
 80117a0:	2001      	movs	r0, #1
 80117a2:	e655      	b.n	8011450 <_dtoa_r+0x7f8>
 80117a4:	9b00      	ldr	r3, [sp, #0]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	f77f aed6 	ble.w	8011558 <_dtoa_r+0x900>
 80117ac:	4656      	mov	r6, sl
 80117ae:	4621      	mov	r1, r4
 80117b0:	4648      	mov	r0, r9
 80117b2:	f7ff f9c7 	bl	8010b44 <quorem>
 80117b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80117ba:	f806 8b01 	strb.w	r8, [r6], #1
 80117be:	9b00      	ldr	r3, [sp, #0]
 80117c0:	eba6 020a 	sub.w	r2, r6, sl
 80117c4:	4293      	cmp	r3, r2
 80117c6:	ddb3      	ble.n	8011730 <_dtoa_r+0xad8>
 80117c8:	4649      	mov	r1, r9
 80117ca:	2300      	movs	r3, #0
 80117cc:	220a      	movs	r2, #10
 80117ce:	4658      	mov	r0, fp
 80117d0:	f000 f8b2 	bl	8011938 <__multadd>
 80117d4:	4681      	mov	r9, r0
 80117d6:	e7ea      	b.n	80117ae <_dtoa_r+0xb56>
 80117d8:	08015caa 	.word	0x08015caa
 80117dc:	08015c45 	.word	0x08015c45

080117e0 <_free_r>:
 80117e0:	b538      	push	{r3, r4, r5, lr}
 80117e2:	4605      	mov	r5, r0
 80117e4:	2900      	cmp	r1, #0
 80117e6:	d041      	beq.n	801186c <_free_r+0x8c>
 80117e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80117ec:	1f0c      	subs	r4, r1, #4
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	bfb8      	it	lt
 80117f2:	18e4      	addlt	r4, r4, r3
 80117f4:	f7fe f814 	bl	800f820 <__malloc_lock>
 80117f8:	4a1d      	ldr	r2, [pc, #116]	@ (8011870 <_free_r+0x90>)
 80117fa:	6813      	ldr	r3, [r2, #0]
 80117fc:	b933      	cbnz	r3, 801180c <_free_r+0x2c>
 80117fe:	6063      	str	r3, [r4, #4]
 8011800:	6014      	str	r4, [r2, #0]
 8011802:	4628      	mov	r0, r5
 8011804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011808:	f7fe b810 	b.w	800f82c <__malloc_unlock>
 801180c:	42a3      	cmp	r3, r4
 801180e:	d908      	bls.n	8011822 <_free_r+0x42>
 8011810:	6820      	ldr	r0, [r4, #0]
 8011812:	1821      	adds	r1, r4, r0
 8011814:	428b      	cmp	r3, r1
 8011816:	bf01      	itttt	eq
 8011818:	6819      	ldreq	r1, [r3, #0]
 801181a:	685b      	ldreq	r3, [r3, #4]
 801181c:	1809      	addeq	r1, r1, r0
 801181e:	6021      	streq	r1, [r4, #0]
 8011820:	e7ed      	b.n	80117fe <_free_r+0x1e>
 8011822:	461a      	mov	r2, r3
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	b10b      	cbz	r3, 801182c <_free_r+0x4c>
 8011828:	42a3      	cmp	r3, r4
 801182a:	d9fa      	bls.n	8011822 <_free_r+0x42>
 801182c:	6811      	ldr	r1, [r2, #0]
 801182e:	1850      	adds	r0, r2, r1
 8011830:	42a0      	cmp	r0, r4
 8011832:	d10b      	bne.n	801184c <_free_r+0x6c>
 8011834:	6820      	ldr	r0, [r4, #0]
 8011836:	4401      	add	r1, r0
 8011838:	1850      	adds	r0, r2, r1
 801183a:	4283      	cmp	r3, r0
 801183c:	6011      	str	r1, [r2, #0]
 801183e:	d1e0      	bne.n	8011802 <_free_r+0x22>
 8011840:	6818      	ldr	r0, [r3, #0]
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	6053      	str	r3, [r2, #4]
 8011846:	4408      	add	r0, r1
 8011848:	6010      	str	r0, [r2, #0]
 801184a:	e7da      	b.n	8011802 <_free_r+0x22>
 801184c:	d902      	bls.n	8011854 <_free_r+0x74>
 801184e:	230c      	movs	r3, #12
 8011850:	602b      	str	r3, [r5, #0]
 8011852:	e7d6      	b.n	8011802 <_free_r+0x22>
 8011854:	6820      	ldr	r0, [r4, #0]
 8011856:	1821      	adds	r1, r4, r0
 8011858:	428b      	cmp	r3, r1
 801185a:	bf04      	itt	eq
 801185c:	6819      	ldreq	r1, [r3, #0]
 801185e:	685b      	ldreq	r3, [r3, #4]
 8011860:	6063      	str	r3, [r4, #4]
 8011862:	bf04      	itt	eq
 8011864:	1809      	addeq	r1, r1, r0
 8011866:	6021      	streq	r1, [r4, #0]
 8011868:	6054      	str	r4, [r2, #4]
 801186a:	e7ca      	b.n	8011802 <_free_r+0x22>
 801186c:	bd38      	pop	{r3, r4, r5, pc}
 801186e:	bf00      	nop
 8011870:	200055e4 	.word	0x200055e4

08011874 <_Balloc>:
 8011874:	b570      	push	{r4, r5, r6, lr}
 8011876:	69c6      	ldr	r6, [r0, #28]
 8011878:	4604      	mov	r4, r0
 801187a:	460d      	mov	r5, r1
 801187c:	b976      	cbnz	r6, 801189c <_Balloc+0x28>
 801187e:	2010      	movs	r0, #16
 8011880:	f7fd ff1c 	bl	800f6bc <malloc>
 8011884:	4602      	mov	r2, r0
 8011886:	61e0      	str	r0, [r4, #28]
 8011888:	b920      	cbnz	r0, 8011894 <_Balloc+0x20>
 801188a:	4b18      	ldr	r3, [pc, #96]	@ (80118ec <_Balloc+0x78>)
 801188c:	4818      	ldr	r0, [pc, #96]	@ (80118f0 <_Balloc+0x7c>)
 801188e:	216b      	movs	r1, #107	@ 0x6b
 8011890:	f7ff f93a 	bl	8010b08 <__assert_func>
 8011894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011898:	6006      	str	r6, [r0, #0]
 801189a:	60c6      	str	r6, [r0, #12]
 801189c:	69e6      	ldr	r6, [r4, #28]
 801189e:	68f3      	ldr	r3, [r6, #12]
 80118a0:	b183      	cbz	r3, 80118c4 <_Balloc+0x50>
 80118a2:	69e3      	ldr	r3, [r4, #28]
 80118a4:	68db      	ldr	r3, [r3, #12]
 80118a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80118aa:	b9b8      	cbnz	r0, 80118dc <_Balloc+0x68>
 80118ac:	2101      	movs	r1, #1
 80118ae:	fa01 f605 	lsl.w	r6, r1, r5
 80118b2:	1d72      	adds	r2, r6, #5
 80118b4:	0092      	lsls	r2, r2, #2
 80118b6:	4620      	mov	r0, r4
 80118b8:	f002 f8e1 	bl	8013a7e <_calloc_r>
 80118bc:	b160      	cbz	r0, 80118d8 <_Balloc+0x64>
 80118be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80118c2:	e00e      	b.n	80118e2 <_Balloc+0x6e>
 80118c4:	2221      	movs	r2, #33	@ 0x21
 80118c6:	2104      	movs	r1, #4
 80118c8:	4620      	mov	r0, r4
 80118ca:	f002 f8d8 	bl	8013a7e <_calloc_r>
 80118ce:	69e3      	ldr	r3, [r4, #28]
 80118d0:	60f0      	str	r0, [r6, #12]
 80118d2:	68db      	ldr	r3, [r3, #12]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d1e4      	bne.n	80118a2 <_Balloc+0x2e>
 80118d8:	2000      	movs	r0, #0
 80118da:	bd70      	pop	{r4, r5, r6, pc}
 80118dc:	6802      	ldr	r2, [r0, #0]
 80118de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80118e2:	2300      	movs	r3, #0
 80118e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80118e8:	e7f7      	b.n	80118da <_Balloc+0x66>
 80118ea:	bf00      	nop
 80118ec:	08015b98 	.word	0x08015b98
 80118f0:	08015cbb 	.word	0x08015cbb

080118f4 <_Bfree>:
 80118f4:	b570      	push	{r4, r5, r6, lr}
 80118f6:	69c6      	ldr	r6, [r0, #28]
 80118f8:	4605      	mov	r5, r0
 80118fa:	460c      	mov	r4, r1
 80118fc:	b976      	cbnz	r6, 801191c <_Bfree+0x28>
 80118fe:	2010      	movs	r0, #16
 8011900:	f7fd fedc 	bl	800f6bc <malloc>
 8011904:	4602      	mov	r2, r0
 8011906:	61e8      	str	r0, [r5, #28]
 8011908:	b920      	cbnz	r0, 8011914 <_Bfree+0x20>
 801190a:	4b09      	ldr	r3, [pc, #36]	@ (8011930 <_Bfree+0x3c>)
 801190c:	4809      	ldr	r0, [pc, #36]	@ (8011934 <_Bfree+0x40>)
 801190e:	218f      	movs	r1, #143	@ 0x8f
 8011910:	f7ff f8fa 	bl	8010b08 <__assert_func>
 8011914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011918:	6006      	str	r6, [r0, #0]
 801191a:	60c6      	str	r6, [r0, #12]
 801191c:	b13c      	cbz	r4, 801192e <_Bfree+0x3a>
 801191e:	69eb      	ldr	r3, [r5, #28]
 8011920:	6862      	ldr	r2, [r4, #4]
 8011922:	68db      	ldr	r3, [r3, #12]
 8011924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011928:	6021      	str	r1, [r4, #0]
 801192a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801192e:	bd70      	pop	{r4, r5, r6, pc}
 8011930:	08015b98 	.word	0x08015b98
 8011934:	08015cbb 	.word	0x08015cbb

08011938 <__multadd>:
 8011938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801193c:	690d      	ldr	r5, [r1, #16]
 801193e:	4607      	mov	r7, r0
 8011940:	460c      	mov	r4, r1
 8011942:	461e      	mov	r6, r3
 8011944:	f101 0c14 	add.w	ip, r1, #20
 8011948:	2000      	movs	r0, #0
 801194a:	f8dc 3000 	ldr.w	r3, [ip]
 801194e:	b299      	uxth	r1, r3
 8011950:	fb02 6101 	mla	r1, r2, r1, r6
 8011954:	0c1e      	lsrs	r6, r3, #16
 8011956:	0c0b      	lsrs	r3, r1, #16
 8011958:	fb02 3306 	mla	r3, r2, r6, r3
 801195c:	b289      	uxth	r1, r1
 801195e:	3001      	adds	r0, #1
 8011960:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011964:	4285      	cmp	r5, r0
 8011966:	f84c 1b04 	str.w	r1, [ip], #4
 801196a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801196e:	dcec      	bgt.n	801194a <__multadd+0x12>
 8011970:	b30e      	cbz	r6, 80119b6 <__multadd+0x7e>
 8011972:	68a3      	ldr	r3, [r4, #8]
 8011974:	42ab      	cmp	r3, r5
 8011976:	dc19      	bgt.n	80119ac <__multadd+0x74>
 8011978:	6861      	ldr	r1, [r4, #4]
 801197a:	4638      	mov	r0, r7
 801197c:	3101      	adds	r1, #1
 801197e:	f7ff ff79 	bl	8011874 <_Balloc>
 8011982:	4680      	mov	r8, r0
 8011984:	b928      	cbnz	r0, 8011992 <__multadd+0x5a>
 8011986:	4602      	mov	r2, r0
 8011988:	4b0c      	ldr	r3, [pc, #48]	@ (80119bc <__multadd+0x84>)
 801198a:	480d      	ldr	r0, [pc, #52]	@ (80119c0 <__multadd+0x88>)
 801198c:	21ba      	movs	r1, #186	@ 0xba
 801198e:	f7ff f8bb 	bl	8010b08 <__assert_func>
 8011992:	6922      	ldr	r2, [r4, #16]
 8011994:	3202      	adds	r2, #2
 8011996:	f104 010c 	add.w	r1, r4, #12
 801199a:	0092      	lsls	r2, r2, #2
 801199c:	300c      	adds	r0, #12
 801199e:	f7ff f89e 	bl	8010ade <memcpy>
 80119a2:	4621      	mov	r1, r4
 80119a4:	4638      	mov	r0, r7
 80119a6:	f7ff ffa5 	bl	80118f4 <_Bfree>
 80119aa:	4644      	mov	r4, r8
 80119ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80119b0:	3501      	adds	r5, #1
 80119b2:	615e      	str	r6, [r3, #20]
 80119b4:	6125      	str	r5, [r4, #16]
 80119b6:	4620      	mov	r0, r4
 80119b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119bc:	08015caa 	.word	0x08015caa
 80119c0:	08015cbb 	.word	0x08015cbb

080119c4 <__s2b>:
 80119c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119c8:	460c      	mov	r4, r1
 80119ca:	4615      	mov	r5, r2
 80119cc:	461f      	mov	r7, r3
 80119ce:	2209      	movs	r2, #9
 80119d0:	3308      	adds	r3, #8
 80119d2:	4606      	mov	r6, r0
 80119d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80119d8:	2100      	movs	r1, #0
 80119da:	2201      	movs	r2, #1
 80119dc:	429a      	cmp	r2, r3
 80119de:	db09      	blt.n	80119f4 <__s2b+0x30>
 80119e0:	4630      	mov	r0, r6
 80119e2:	f7ff ff47 	bl	8011874 <_Balloc>
 80119e6:	b940      	cbnz	r0, 80119fa <__s2b+0x36>
 80119e8:	4602      	mov	r2, r0
 80119ea:	4b19      	ldr	r3, [pc, #100]	@ (8011a50 <__s2b+0x8c>)
 80119ec:	4819      	ldr	r0, [pc, #100]	@ (8011a54 <__s2b+0x90>)
 80119ee:	21d3      	movs	r1, #211	@ 0xd3
 80119f0:	f7ff f88a 	bl	8010b08 <__assert_func>
 80119f4:	0052      	lsls	r2, r2, #1
 80119f6:	3101      	adds	r1, #1
 80119f8:	e7f0      	b.n	80119dc <__s2b+0x18>
 80119fa:	9b08      	ldr	r3, [sp, #32]
 80119fc:	6143      	str	r3, [r0, #20]
 80119fe:	2d09      	cmp	r5, #9
 8011a00:	f04f 0301 	mov.w	r3, #1
 8011a04:	6103      	str	r3, [r0, #16]
 8011a06:	dd16      	ble.n	8011a36 <__s2b+0x72>
 8011a08:	f104 0909 	add.w	r9, r4, #9
 8011a0c:	46c8      	mov	r8, r9
 8011a0e:	442c      	add	r4, r5
 8011a10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011a14:	4601      	mov	r1, r0
 8011a16:	3b30      	subs	r3, #48	@ 0x30
 8011a18:	220a      	movs	r2, #10
 8011a1a:	4630      	mov	r0, r6
 8011a1c:	f7ff ff8c 	bl	8011938 <__multadd>
 8011a20:	45a0      	cmp	r8, r4
 8011a22:	d1f5      	bne.n	8011a10 <__s2b+0x4c>
 8011a24:	f1a5 0408 	sub.w	r4, r5, #8
 8011a28:	444c      	add	r4, r9
 8011a2a:	1b2d      	subs	r5, r5, r4
 8011a2c:	1963      	adds	r3, r4, r5
 8011a2e:	42bb      	cmp	r3, r7
 8011a30:	db04      	blt.n	8011a3c <__s2b+0x78>
 8011a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a36:	340a      	adds	r4, #10
 8011a38:	2509      	movs	r5, #9
 8011a3a:	e7f6      	b.n	8011a2a <__s2b+0x66>
 8011a3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011a40:	4601      	mov	r1, r0
 8011a42:	3b30      	subs	r3, #48	@ 0x30
 8011a44:	220a      	movs	r2, #10
 8011a46:	4630      	mov	r0, r6
 8011a48:	f7ff ff76 	bl	8011938 <__multadd>
 8011a4c:	e7ee      	b.n	8011a2c <__s2b+0x68>
 8011a4e:	bf00      	nop
 8011a50:	08015caa 	.word	0x08015caa
 8011a54:	08015cbb 	.word	0x08015cbb

08011a58 <__hi0bits>:
 8011a58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	bf36      	itet	cc
 8011a60:	0403      	lslcc	r3, r0, #16
 8011a62:	2000      	movcs	r0, #0
 8011a64:	2010      	movcc	r0, #16
 8011a66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011a6a:	bf3c      	itt	cc
 8011a6c:	021b      	lslcc	r3, r3, #8
 8011a6e:	3008      	addcc	r0, #8
 8011a70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011a74:	bf3c      	itt	cc
 8011a76:	011b      	lslcc	r3, r3, #4
 8011a78:	3004      	addcc	r0, #4
 8011a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011a7e:	bf3c      	itt	cc
 8011a80:	009b      	lslcc	r3, r3, #2
 8011a82:	3002      	addcc	r0, #2
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	db05      	blt.n	8011a94 <__hi0bits+0x3c>
 8011a88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011a8c:	f100 0001 	add.w	r0, r0, #1
 8011a90:	bf08      	it	eq
 8011a92:	2020      	moveq	r0, #32
 8011a94:	4770      	bx	lr

08011a96 <__lo0bits>:
 8011a96:	6803      	ldr	r3, [r0, #0]
 8011a98:	4602      	mov	r2, r0
 8011a9a:	f013 0007 	ands.w	r0, r3, #7
 8011a9e:	d00b      	beq.n	8011ab8 <__lo0bits+0x22>
 8011aa0:	07d9      	lsls	r1, r3, #31
 8011aa2:	d421      	bmi.n	8011ae8 <__lo0bits+0x52>
 8011aa4:	0798      	lsls	r0, r3, #30
 8011aa6:	bf49      	itett	mi
 8011aa8:	085b      	lsrmi	r3, r3, #1
 8011aaa:	089b      	lsrpl	r3, r3, #2
 8011aac:	2001      	movmi	r0, #1
 8011aae:	6013      	strmi	r3, [r2, #0]
 8011ab0:	bf5c      	itt	pl
 8011ab2:	6013      	strpl	r3, [r2, #0]
 8011ab4:	2002      	movpl	r0, #2
 8011ab6:	4770      	bx	lr
 8011ab8:	b299      	uxth	r1, r3
 8011aba:	b909      	cbnz	r1, 8011ac0 <__lo0bits+0x2a>
 8011abc:	0c1b      	lsrs	r3, r3, #16
 8011abe:	2010      	movs	r0, #16
 8011ac0:	b2d9      	uxtb	r1, r3
 8011ac2:	b909      	cbnz	r1, 8011ac8 <__lo0bits+0x32>
 8011ac4:	3008      	adds	r0, #8
 8011ac6:	0a1b      	lsrs	r3, r3, #8
 8011ac8:	0719      	lsls	r1, r3, #28
 8011aca:	bf04      	itt	eq
 8011acc:	091b      	lsreq	r3, r3, #4
 8011ace:	3004      	addeq	r0, #4
 8011ad0:	0799      	lsls	r1, r3, #30
 8011ad2:	bf04      	itt	eq
 8011ad4:	089b      	lsreq	r3, r3, #2
 8011ad6:	3002      	addeq	r0, #2
 8011ad8:	07d9      	lsls	r1, r3, #31
 8011ada:	d403      	bmi.n	8011ae4 <__lo0bits+0x4e>
 8011adc:	085b      	lsrs	r3, r3, #1
 8011ade:	f100 0001 	add.w	r0, r0, #1
 8011ae2:	d003      	beq.n	8011aec <__lo0bits+0x56>
 8011ae4:	6013      	str	r3, [r2, #0]
 8011ae6:	4770      	bx	lr
 8011ae8:	2000      	movs	r0, #0
 8011aea:	4770      	bx	lr
 8011aec:	2020      	movs	r0, #32
 8011aee:	4770      	bx	lr

08011af0 <__i2b>:
 8011af0:	b510      	push	{r4, lr}
 8011af2:	460c      	mov	r4, r1
 8011af4:	2101      	movs	r1, #1
 8011af6:	f7ff febd 	bl	8011874 <_Balloc>
 8011afa:	4602      	mov	r2, r0
 8011afc:	b928      	cbnz	r0, 8011b0a <__i2b+0x1a>
 8011afe:	4b05      	ldr	r3, [pc, #20]	@ (8011b14 <__i2b+0x24>)
 8011b00:	4805      	ldr	r0, [pc, #20]	@ (8011b18 <__i2b+0x28>)
 8011b02:	f240 1145 	movw	r1, #325	@ 0x145
 8011b06:	f7fe ffff 	bl	8010b08 <__assert_func>
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	6144      	str	r4, [r0, #20]
 8011b0e:	6103      	str	r3, [r0, #16]
 8011b10:	bd10      	pop	{r4, pc}
 8011b12:	bf00      	nop
 8011b14:	08015caa 	.word	0x08015caa
 8011b18:	08015cbb 	.word	0x08015cbb

08011b1c <__multiply>:
 8011b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b20:	4614      	mov	r4, r2
 8011b22:	690a      	ldr	r2, [r1, #16]
 8011b24:	6923      	ldr	r3, [r4, #16]
 8011b26:	429a      	cmp	r2, r3
 8011b28:	bfa8      	it	ge
 8011b2a:	4623      	movge	r3, r4
 8011b2c:	460f      	mov	r7, r1
 8011b2e:	bfa4      	itt	ge
 8011b30:	460c      	movge	r4, r1
 8011b32:	461f      	movge	r7, r3
 8011b34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011b38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011b3c:	68a3      	ldr	r3, [r4, #8]
 8011b3e:	6861      	ldr	r1, [r4, #4]
 8011b40:	eb0a 0609 	add.w	r6, sl, r9
 8011b44:	42b3      	cmp	r3, r6
 8011b46:	b085      	sub	sp, #20
 8011b48:	bfb8      	it	lt
 8011b4a:	3101      	addlt	r1, #1
 8011b4c:	f7ff fe92 	bl	8011874 <_Balloc>
 8011b50:	b930      	cbnz	r0, 8011b60 <__multiply+0x44>
 8011b52:	4602      	mov	r2, r0
 8011b54:	4b44      	ldr	r3, [pc, #272]	@ (8011c68 <__multiply+0x14c>)
 8011b56:	4845      	ldr	r0, [pc, #276]	@ (8011c6c <__multiply+0x150>)
 8011b58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011b5c:	f7fe ffd4 	bl	8010b08 <__assert_func>
 8011b60:	f100 0514 	add.w	r5, r0, #20
 8011b64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011b68:	462b      	mov	r3, r5
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	4543      	cmp	r3, r8
 8011b6e:	d321      	bcc.n	8011bb4 <__multiply+0x98>
 8011b70:	f107 0114 	add.w	r1, r7, #20
 8011b74:	f104 0214 	add.w	r2, r4, #20
 8011b78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011b7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011b80:	9302      	str	r3, [sp, #8]
 8011b82:	1b13      	subs	r3, r2, r4
 8011b84:	3b15      	subs	r3, #21
 8011b86:	f023 0303 	bic.w	r3, r3, #3
 8011b8a:	3304      	adds	r3, #4
 8011b8c:	f104 0715 	add.w	r7, r4, #21
 8011b90:	42ba      	cmp	r2, r7
 8011b92:	bf38      	it	cc
 8011b94:	2304      	movcc	r3, #4
 8011b96:	9301      	str	r3, [sp, #4]
 8011b98:	9b02      	ldr	r3, [sp, #8]
 8011b9a:	9103      	str	r1, [sp, #12]
 8011b9c:	428b      	cmp	r3, r1
 8011b9e:	d80c      	bhi.n	8011bba <__multiply+0x9e>
 8011ba0:	2e00      	cmp	r6, #0
 8011ba2:	dd03      	ble.n	8011bac <__multiply+0x90>
 8011ba4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d05b      	beq.n	8011c64 <__multiply+0x148>
 8011bac:	6106      	str	r6, [r0, #16]
 8011bae:	b005      	add	sp, #20
 8011bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bb4:	f843 2b04 	str.w	r2, [r3], #4
 8011bb8:	e7d8      	b.n	8011b6c <__multiply+0x50>
 8011bba:	f8b1 a000 	ldrh.w	sl, [r1]
 8011bbe:	f1ba 0f00 	cmp.w	sl, #0
 8011bc2:	d024      	beq.n	8011c0e <__multiply+0xf2>
 8011bc4:	f104 0e14 	add.w	lr, r4, #20
 8011bc8:	46a9      	mov	r9, r5
 8011bca:	f04f 0c00 	mov.w	ip, #0
 8011bce:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011bd2:	f8d9 3000 	ldr.w	r3, [r9]
 8011bd6:	fa1f fb87 	uxth.w	fp, r7
 8011bda:	b29b      	uxth	r3, r3
 8011bdc:	fb0a 330b 	mla	r3, sl, fp, r3
 8011be0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011be4:	f8d9 7000 	ldr.w	r7, [r9]
 8011be8:	4463      	add	r3, ip
 8011bea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011bee:	fb0a c70b 	mla	r7, sl, fp, ip
 8011bf2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011bf6:	b29b      	uxth	r3, r3
 8011bf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011bfc:	4572      	cmp	r2, lr
 8011bfe:	f849 3b04 	str.w	r3, [r9], #4
 8011c02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011c06:	d8e2      	bhi.n	8011bce <__multiply+0xb2>
 8011c08:	9b01      	ldr	r3, [sp, #4]
 8011c0a:	f845 c003 	str.w	ip, [r5, r3]
 8011c0e:	9b03      	ldr	r3, [sp, #12]
 8011c10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011c14:	3104      	adds	r1, #4
 8011c16:	f1b9 0f00 	cmp.w	r9, #0
 8011c1a:	d021      	beq.n	8011c60 <__multiply+0x144>
 8011c1c:	682b      	ldr	r3, [r5, #0]
 8011c1e:	f104 0c14 	add.w	ip, r4, #20
 8011c22:	46ae      	mov	lr, r5
 8011c24:	f04f 0a00 	mov.w	sl, #0
 8011c28:	f8bc b000 	ldrh.w	fp, [ip]
 8011c2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011c30:	fb09 770b 	mla	r7, r9, fp, r7
 8011c34:	4457      	add	r7, sl
 8011c36:	b29b      	uxth	r3, r3
 8011c38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011c3c:	f84e 3b04 	str.w	r3, [lr], #4
 8011c40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011c44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011c48:	f8be 3000 	ldrh.w	r3, [lr]
 8011c4c:	fb09 330a 	mla	r3, r9, sl, r3
 8011c50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011c54:	4562      	cmp	r2, ip
 8011c56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011c5a:	d8e5      	bhi.n	8011c28 <__multiply+0x10c>
 8011c5c:	9f01      	ldr	r7, [sp, #4]
 8011c5e:	51eb      	str	r3, [r5, r7]
 8011c60:	3504      	adds	r5, #4
 8011c62:	e799      	b.n	8011b98 <__multiply+0x7c>
 8011c64:	3e01      	subs	r6, #1
 8011c66:	e79b      	b.n	8011ba0 <__multiply+0x84>
 8011c68:	08015caa 	.word	0x08015caa
 8011c6c:	08015cbb 	.word	0x08015cbb

08011c70 <__pow5mult>:
 8011c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c74:	4615      	mov	r5, r2
 8011c76:	f012 0203 	ands.w	r2, r2, #3
 8011c7a:	4607      	mov	r7, r0
 8011c7c:	460e      	mov	r6, r1
 8011c7e:	d007      	beq.n	8011c90 <__pow5mult+0x20>
 8011c80:	4c25      	ldr	r4, [pc, #148]	@ (8011d18 <__pow5mult+0xa8>)
 8011c82:	3a01      	subs	r2, #1
 8011c84:	2300      	movs	r3, #0
 8011c86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011c8a:	f7ff fe55 	bl	8011938 <__multadd>
 8011c8e:	4606      	mov	r6, r0
 8011c90:	10ad      	asrs	r5, r5, #2
 8011c92:	d03d      	beq.n	8011d10 <__pow5mult+0xa0>
 8011c94:	69fc      	ldr	r4, [r7, #28]
 8011c96:	b97c      	cbnz	r4, 8011cb8 <__pow5mult+0x48>
 8011c98:	2010      	movs	r0, #16
 8011c9a:	f7fd fd0f 	bl	800f6bc <malloc>
 8011c9e:	4602      	mov	r2, r0
 8011ca0:	61f8      	str	r0, [r7, #28]
 8011ca2:	b928      	cbnz	r0, 8011cb0 <__pow5mult+0x40>
 8011ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8011d1c <__pow5mult+0xac>)
 8011ca6:	481e      	ldr	r0, [pc, #120]	@ (8011d20 <__pow5mult+0xb0>)
 8011ca8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011cac:	f7fe ff2c 	bl	8010b08 <__assert_func>
 8011cb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011cb4:	6004      	str	r4, [r0, #0]
 8011cb6:	60c4      	str	r4, [r0, #12]
 8011cb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011cbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011cc0:	b94c      	cbnz	r4, 8011cd6 <__pow5mult+0x66>
 8011cc2:	f240 2171 	movw	r1, #625	@ 0x271
 8011cc6:	4638      	mov	r0, r7
 8011cc8:	f7ff ff12 	bl	8011af0 <__i2b>
 8011ccc:	2300      	movs	r3, #0
 8011cce:	f8c8 0008 	str.w	r0, [r8, #8]
 8011cd2:	4604      	mov	r4, r0
 8011cd4:	6003      	str	r3, [r0, #0]
 8011cd6:	f04f 0900 	mov.w	r9, #0
 8011cda:	07eb      	lsls	r3, r5, #31
 8011cdc:	d50a      	bpl.n	8011cf4 <__pow5mult+0x84>
 8011cde:	4631      	mov	r1, r6
 8011ce0:	4622      	mov	r2, r4
 8011ce2:	4638      	mov	r0, r7
 8011ce4:	f7ff ff1a 	bl	8011b1c <__multiply>
 8011ce8:	4631      	mov	r1, r6
 8011cea:	4680      	mov	r8, r0
 8011cec:	4638      	mov	r0, r7
 8011cee:	f7ff fe01 	bl	80118f4 <_Bfree>
 8011cf2:	4646      	mov	r6, r8
 8011cf4:	106d      	asrs	r5, r5, #1
 8011cf6:	d00b      	beq.n	8011d10 <__pow5mult+0xa0>
 8011cf8:	6820      	ldr	r0, [r4, #0]
 8011cfa:	b938      	cbnz	r0, 8011d0c <__pow5mult+0x9c>
 8011cfc:	4622      	mov	r2, r4
 8011cfe:	4621      	mov	r1, r4
 8011d00:	4638      	mov	r0, r7
 8011d02:	f7ff ff0b 	bl	8011b1c <__multiply>
 8011d06:	6020      	str	r0, [r4, #0]
 8011d08:	f8c0 9000 	str.w	r9, [r0]
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	e7e4      	b.n	8011cda <__pow5mult+0x6a>
 8011d10:	4630      	mov	r0, r6
 8011d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d16:	bf00      	nop
 8011d18:	08015d14 	.word	0x08015d14
 8011d1c:	08015b98 	.word	0x08015b98
 8011d20:	08015cbb 	.word	0x08015cbb

08011d24 <__lshift>:
 8011d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d28:	460c      	mov	r4, r1
 8011d2a:	6849      	ldr	r1, [r1, #4]
 8011d2c:	6923      	ldr	r3, [r4, #16]
 8011d2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011d32:	68a3      	ldr	r3, [r4, #8]
 8011d34:	4607      	mov	r7, r0
 8011d36:	4691      	mov	r9, r2
 8011d38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011d3c:	f108 0601 	add.w	r6, r8, #1
 8011d40:	42b3      	cmp	r3, r6
 8011d42:	db0b      	blt.n	8011d5c <__lshift+0x38>
 8011d44:	4638      	mov	r0, r7
 8011d46:	f7ff fd95 	bl	8011874 <_Balloc>
 8011d4a:	4605      	mov	r5, r0
 8011d4c:	b948      	cbnz	r0, 8011d62 <__lshift+0x3e>
 8011d4e:	4602      	mov	r2, r0
 8011d50:	4b28      	ldr	r3, [pc, #160]	@ (8011df4 <__lshift+0xd0>)
 8011d52:	4829      	ldr	r0, [pc, #164]	@ (8011df8 <__lshift+0xd4>)
 8011d54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011d58:	f7fe fed6 	bl	8010b08 <__assert_func>
 8011d5c:	3101      	adds	r1, #1
 8011d5e:	005b      	lsls	r3, r3, #1
 8011d60:	e7ee      	b.n	8011d40 <__lshift+0x1c>
 8011d62:	2300      	movs	r3, #0
 8011d64:	f100 0114 	add.w	r1, r0, #20
 8011d68:	f100 0210 	add.w	r2, r0, #16
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	4553      	cmp	r3, sl
 8011d70:	db33      	blt.n	8011dda <__lshift+0xb6>
 8011d72:	6920      	ldr	r0, [r4, #16]
 8011d74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d78:	f104 0314 	add.w	r3, r4, #20
 8011d7c:	f019 091f 	ands.w	r9, r9, #31
 8011d80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011d84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011d88:	d02b      	beq.n	8011de2 <__lshift+0xbe>
 8011d8a:	f1c9 0e20 	rsb	lr, r9, #32
 8011d8e:	468a      	mov	sl, r1
 8011d90:	2200      	movs	r2, #0
 8011d92:	6818      	ldr	r0, [r3, #0]
 8011d94:	fa00 f009 	lsl.w	r0, r0, r9
 8011d98:	4310      	orrs	r0, r2
 8011d9a:	f84a 0b04 	str.w	r0, [sl], #4
 8011d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011da2:	459c      	cmp	ip, r3
 8011da4:	fa22 f20e 	lsr.w	r2, r2, lr
 8011da8:	d8f3      	bhi.n	8011d92 <__lshift+0x6e>
 8011daa:	ebac 0304 	sub.w	r3, ip, r4
 8011dae:	3b15      	subs	r3, #21
 8011db0:	f023 0303 	bic.w	r3, r3, #3
 8011db4:	3304      	adds	r3, #4
 8011db6:	f104 0015 	add.w	r0, r4, #21
 8011dba:	4584      	cmp	ip, r0
 8011dbc:	bf38      	it	cc
 8011dbe:	2304      	movcc	r3, #4
 8011dc0:	50ca      	str	r2, [r1, r3]
 8011dc2:	b10a      	cbz	r2, 8011dc8 <__lshift+0xa4>
 8011dc4:	f108 0602 	add.w	r6, r8, #2
 8011dc8:	3e01      	subs	r6, #1
 8011dca:	4638      	mov	r0, r7
 8011dcc:	612e      	str	r6, [r5, #16]
 8011dce:	4621      	mov	r1, r4
 8011dd0:	f7ff fd90 	bl	80118f4 <_Bfree>
 8011dd4:	4628      	mov	r0, r5
 8011dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dda:	f842 0f04 	str.w	r0, [r2, #4]!
 8011dde:	3301      	adds	r3, #1
 8011de0:	e7c5      	b.n	8011d6e <__lshift+0x4a>
 8011de2:	3904      	subs	r1, #4
 8011de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011de8:	f841 2f04 	str.w	r2, [r1, #4]!
 8011dec:	459c      	cmp	ip, r3
 8011dee:	d8f9      	bhi.n	8011de4 <__lshift+0xc0>
 8011df0:	e7ea      	b.n	8011dc8 <__lshift+0xa4>
 8011df2:	bf00      	nop
 8011df4:	08015caa 	.word	0x08015caa
 8011df8:	08015cbb 	.word	0x08015cbb

08011dfc <__mcmp>:
 8011dfc:	690a      	ldr	r2, [r1, #16]
 8011dfe:	4603      	mov	r3, r0
 8011e00:	6900      	ldr	r0, [r0, #16]
 8011e02:	1a80      	subs	r0, r0, r2
 8011e04:	b530      	push	{r4, r5, lr}
 8011e06:	d10e      	bne.n	8011e26 <__mcmp+0x2a>
 8011e08:	3314      	adds	r3, #20
 8011e0a:	3114      	adds	r1, #20
 8011e0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011e10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011e14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011e18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011e1c:	4295      	cmp	r5, r2
 8011e1e:	d003      	beq.n	8011e28 <__mcmp+0x2c>
 8011e20:	d205      	bcs.n	8011e2e <__mcmp+0x32>
 8011e22:	f04f 30ff 	mov.w	r0, #4294967295
 8011e26:	bd30      	pop	{r4, r5, pc}
 8011e28:	42a3      	cmp	r3, r4
 8011e2a:	d3f3      	bcc.n	8011e14 <__mcmp+0x18>
 8011e2c:	e7fb      	b.n	8011e26 <__mcmp+0x2a>
 8011e2e:	2001      	movs	r0, #1
 8011e30:	e7f9      	b.n	8011e26 <__mcmp+0x2a>
	...

08011e34 <__mdiff>:
 8011e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e38:	4689      	mov	r9, r1
 8011e3a:	4606      	mov	r6, r0
 8011e3c:	4611      	mov	r1, r2
 8011e3e:	4648      	mov	r0, r9
 8011e40:	4614      	mov	r4, r2
 8011e42:	f7ff ffdb 	bl	8011dfc <__mcmp>
 8011e46:	1e05      	subs	r5, r0, #0
 8011e48:	d112      	bne.n	8011e70 <__mdiff+0x3c>
 8011e4a:	4629      	mov	r1, r5
 8011e4c:	4630      	mov	r0, r6
 8011e4e:	f7ff fd11 	bl	8011874 <_Balloc>
 8011e52:	4602      	mov	r2, r0
 8011e54:	b928      	cbnz	r0, 8011e62 <__mdiff+0x2e>
 8011e56:	4b3f      	ldr	r3, [pc, #252]	@ (8011f54 <__mdiff+0x120>)
 8011e58:	f240 2137 	movw	r1, #567	@ 0x237
 8011e5c:	483e      	ldr	r0, [pc, #248]	@ (8011f58 <__mdiff+0x124>)
 8011e5e:	f7fe fe53 	bl	8010b08 <__assert_func>
 8011e62:	2301      	movs	r3, #1
 8011e64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011e68:	4610      	mov	r0, r2
 8011e6a:	b003      	add	sp, #12
 8011e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e70:	bfbc      	itt	lt
 8011e72:	464b      	movlt	r3, r9
 8011e74:	46a1      	movlt	r9, r4
 8011e76:	4630      	mov	r0, r6
 8011e78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011e7c:	bfba      	itte	lt
 8011e7e:	461c      	movlt	r4, r3
 8011e80:	2501      	movlt	r5, #1
 8011e82:	2500      	movge	r5, #0
 8011e84:	f7ff fcf6 	bl	8011874 <_Balloc>
 8011e88:	4602      	mov	r2, r0
 8011e8a:	b918      	cbnz	r0, 8011e94 <__mdiff+0x60>
 8011e8c:	4b31      	ldr	r3, [pc, #196]	@ (8011f54 <__mdiff+0x120>)
 8011e8e:	f240 2145 	movw	r1, #581	@ 0x245
 8011e92:	e7e3      	b.n	8011e5c <__mdiff+0x28>
 8011e94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011e98:	6926      	ldr	r6, [r4, #16]
 8011e9a:	60c5      	str	r5, [r0, #12]
 8011e9c:	f109 0310 	add.w	r3, r9, #16
 8011ea0:	f109 0514 	add.w	r5, r9, #20
 8011ea4:	f104 0e14 	add.w	lr, r4, #20
 8011ea8:	f100 0b14 	add.w	fp, r0, #20
 8011eac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011eb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011eb4:	9301      	str	r3, [sp, #4]
 8011eb6:	46d9      	mov	r9, fp
 8011eb8:	f04f 0c00 	mov.w	ip, #0
 8011ebc:	9b01      	ldr	r3, [sp, #4]
 8011ebe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011ec2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011ec6:	9301      	str	r3, [sp, #4]
 8011ec8:	fa1f f38a 	uxth.w	r3, sl
 8011ecc:	4619      	mov	r1, r3
 8011ece:	b283      	uxth	r3, r0
 8011ed0:	1acb      	subs	r3, r1, r3
 8011ed2:	0c00      	lsrs	r0, r0, #16
 8011ed4:	4463      	add	r3, ip
 8011ed6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011eda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011ede:	b29b      	uxth	r3, r3
 8011ee0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011ee4:	4576      	cmp	r6, lr
 8011ee6:	f849 3b04 	str.w	r3, [r9], #4
 8011eea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011eee:	d8e5      	bhi.n	8011ebc <__mdiff+0x88>
 8011ef0:	1b33      	subs	r3, r6, r4
 8011ef2:	3b15      	subs	r3, #21
 8011ef4:	f023 0303 	bic.w	r3, r3, #3
 8011ef8:	3415      	adds	r4, #21
 8011efa:	3304      	adds	r3, #4
 8011efc:	42a6      	cmp	r6, r4
 8011efe:	bf38      	it	cc
 8011f00:	2304      	movcc	r3, #4
 8011f02:	441d      	add	r5, r3
 8011f04:	445b      	add	r3, fp
 8011f06:	461e      	mov	r6, r3
 8011f08:	462c      	mov	r4, r5
 8011f0a:	4544      	cmp	r4, r8
 8011f0c:	d30e      	bcc.n	8011f2c <__mdiff+0xf8>
 8011f0e:	f108 0103 	add.w	r1, r8, #3
 8011f12:	1b49      	subs	r1, r1, r5
 8011f14:	f021 0103 	bic.w	r1, r1, #3
 8011f18:	3d03      	subs	r5, #3
 8011f1a:	45a8      	cmp	r8, r5
 8011f1c:	bf38      	it	cc
 8011f1e:	2100      	movcc	r1, #0
 8011f20:	440b      	add	r3, r1
 8011f22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011f26:	b191      	cbz	r1, 8011f4e <__mdiff+0x11a>
 8011f28:	6117      	str	r7, [r2, #16]
 8011f2a:	e79d      	b.n	8011e68 <__mdiff+0x34>
 8011f2c:	f854 1b04 	ldr.w	r1, [r4], #4
 8011f30:	46e6      	mov	lr, ip
 8011f32:	0c08      	lsrs	r0, r1, #16
 8011f34:	fa1c fc81 	uxtah	ip, ip, r1
 8011f38:	4471      	add	r1, lr
 8011f3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011f3e:	b289      	uxth	r1, r1
 8011f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011f44:	f846 1b04 	str.w	r1, [r6], #4
 8011f48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011f4c:	e7dd      	b.n	8011f0a <__mdiff+0xd6>
 8011f4e:	3f01      	subs	r7, #1
 8011f50:	e7e7      	b.n	8011f22 <__mdiff+0xee>
 8011f52:	bf00      	nop
 8011f54:	08015caa 	.word	0x08015caa
 8011f58:	08015cbb 	.word	0x08015cbb

08011f5c <__ulp>:
 8011f5c:	b082      	sub	sp, #8
 8011f5e:	ed8d 0b00 	vstr	d0, [sp]
 8011f62:	9a01      	ldr	r2, [sp, #4]
 8011f64:	4b0f      	ldr	r3, [pc, #60]	@ (8011fa4 <__ulp+0x48>)
 8011f66:	4013      	ands	r3, r2
 8011f68:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	dc08      	bgt.n	8011f82 <__ulp+0x26>
 8011f70:	425b      	negs	r3, r3
 8011f72:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011f76:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011f7a:	da04      	bge.n	8011f86 <__ulp+0x2a>
 8011f7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011f80:	4113      	asrs	r3, r2
 8011f82:	2200      	movs	r2, #0
 8011f84:	e008      	b.n	8011f98 <__ulp+0x3c>
 8011f86:	f1a2 0314 	sub.w	r3, r2, #20
 8011f8a:	2b1e      	cmp	r3, #30
 8011f8c:	bfda      	itte	le
 8011f8e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011f92:	40da      	lsrle	r2, r3
 8011f94:	2201      	movgt	r2, #1
 8011f96:	2300      	movs	r3, #0
 8011f98:	4619      	mov	r1, r3
 8011f9a:	4610      	mov	r0, r2
 8011f9c:	ec41 0b10 	vmov	d0, r0, r1
 8011fa0:	b002      	add	sp, #8
 8011fa2:	4770      	bx	lr
 8011fa4:	7ff00000 	.word	0x7ff00000

08011fa8 <__b2d>:
 8011fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fac:	6906      	ldr	r6, [r0, #16]
 8011fae:	f100 0814 	add.w	r8, r0, #20
 8011fb2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011fb6:	1f37      	subs	r7, r6, #4
 8011fb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011fbc:	4610      	mov	r0, r2
 8011fbe:	f7ff fd4b 	bl	8011a58 <__hi0bits>
 8011fc2:	f1c0 0320 	rsb	r3, r0, #32
 8011fc6:	280a      	cmp	r0, #10
 8011fc8:	600b      	str	r3, [r1, #0]
 8011fca:	491b      	ldr	r1, [pc, #108]	@ (8012038 <__b2d+0x90>)
 8011fcc:	dc15      	bgt.n	8011ffa <__b2d+0x52>
 8011fce:	f1c0 0c0b 	rsb	ip, r0, #11
 8011fd2:	fa22 f30c 	lsr.w	r3, r2, ip
 8011fd6:	45b8      	cmp	r8, r7
 8011fd8:	ea43 0501 	orr.w	r5, r3, r1
 8011fdc:	bf34      	ite	cc
 8011fde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011fe2:	2300      	movcs	r3, #0
 8011fe4:	3015      	adds	r0, #21
 8011fe6:	fa02 f000 	lsl.w	r0, r2, r0
 8011fea:	fa23 f30c 	lsr.w	r3, r3, ip
 8011fee:	4303      	orrs	r3, r0
 8011ff0:	461c      	mov	r4, r3
 8011ff2:	ec45 4b10 	vmov	d0, r4, r5
 8011ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ffa:	45b8      	cmp	r8, r7
 8011ffc:	bf3a      	itte	cc
 8011ffe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012002:	f1a6 0708 	subcc.w	r7, r6, #8
 8012006:	2300      	movcs	r3, #0
 8012008:	380b      	subs	r0, #11
 801200a:	d012      	beq.n	8012032 <__b2d+0x8a>
 801200c:	f1c0 0120 	rsb	r1, r0, #32
 8012010:	fa23 f401 	lsr.w	r4, r3, r1
 8012014:	4082      	lsls	r2, r0
 8012016:	4322      	orrs	r2, r4
 8012018:	4547      	cmp	r7, r8
 801201a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801201e:	bf8c      	ite	hi
 8012020:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012024:	2200      	movls	r2, #0
 8012026:	4083      	lsls	r3, r0
 8012028:	40ca      	lsrs	r2, r1
 801202a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801202e:	4313      	orrs	r3, r2
 8012030:	e7de      	b.n	8011ff0 <__b2d+0x48>
 8012032:	ea42 0501 	orr.w	r5, r2, r1
 8012036:	e7db      	b.n	8011ff0 <__b2d+0x48>
 8012038:	3ff00000 	.word	0x3ff00000

0801203c <__d2b>:
 801203c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012040:	460f      	mov	r7, r1
 8012042:	2101      	movs	r1, #1
 8012044:	ec59 8b10 	vmov	r8, r9, d0
 8012048:	4616      	mov	r6, r2
 801204a:	f7ff fc13 	bl	8011874 <_Balloc>
 801204e:	4604      	mov	r4, r0
 8012050:	b930      	cbnz	r0, 8012060 <__d2b+0x24>
 8012052:	4602      	mov	r2, r0
 8012054:	4b23      	ldr	r3, [pc, #140]	@ (80120e4 <__d2b+0xa8>)
 8012056:	4824      	ldr	r0, [pc, #144]	@ (80120e8 <__d2b+0xac>)
 8012058:	f240 310f 	movw	r1, #783	@ 0x30f
 801205c:	f7fe fd54 	bl	8010b08 <__assert_func>
 8012060:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012064:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012068:	b10d      	cbz	r5, 801206e <__d2b+0x32>
 801206a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801206e:	9301      	str	r3, [sp, #4]
 8012070:	f1b8 0300 	subs.w	r3, r8, #0
 8012074:	d023      	beq.n	80120be <__d2b+0x82>
 8012076:	4668      	mov	r0, sp
 8012078:	9300      	str	r3, [sp, #0]
 801207a:	f7ff fd0c 	bl	8011a96 <__lo0bits>
 801207e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012082:	b1d0      	cbz	r0, 80120ba <__d2b+0x7e>
 8012084:	f1c0 0320 	rsb	r3, r0, #32
 8012088:	fa02 f303 	lsl.w	r3, r2, r3
 801208c:	430b      	orrs	r3, r1
 801208e:	40c2      	lsrs	r2, r0
 8012090:	6163      	str	r3, [r4, #20]
 8012092:	9201      	str	r2, [sp, #4]
 8012094:	9b01      	ldr	r3, [sp, #4]
 8012096:	61a3      	str	r3, [r4, #24]
 8012098:	2b00      	cmp	r3, #0
 801209a:	bf0c      	ite	eq
 801209c:	2201      	moveq	r2, #1
 801209e:	2202      	movne	r2, #2
 80120a0:	6122      	str	r2, [r4, #16]
 80120a2:	b1a5      	cbz	r5, 80120ce <__d2b+0x92>
 80120a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80120a8:	4405      	add	r5, r0
 80120aa:	603d      	str	r5, [r7, #0]
 80120ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80120b0:	6030      	str	r0, [r6, #0]
 80120b2:	4620      	mov	r0, r4
 80120b4:	b003      	add	sp, #12
 80120b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120ba:	6161      	str	r1, [r4, #20]
 80120bc:	e7ea      	b.n	8012094 <__d2b+0x58>
 80120be:	a801      	add	r0, sp, #4
 80120c0:	f7ff fce9 	bl	8011a96 <__lo0bits>
 80120c4:	9b01      	ldr	r3, [sp, #4]
 80120c6:	6163      	str	r3, [r4, #20]
 80120c8:	3020      	adds	r0, #32
 80120ca:	2201      	movs	r2, #1
 80120cc:	e7e8      	b.n	80120a0 <__d2b+0x64>
 80120ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80120d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80120d6:	6038      	str	r0, [r7, #0]
 80120d8:	6918      	ldr	r0, [r3, #16]
 80120da:	f7ff fcbd 	bl	8011a58 <__hi0bits>
 80120de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80120e2:	e7e5      	b.n	80120b0 <__d2b+0x74>
 80120e4:	08015caa 	.word	0x08015caa
 80120e8:	08015cbb 	.word	0x08015cbb

080120ec <__ratio>:
 80120ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f0:	b085      	sub	sp, #20
 80120f2:	e9cd 1000 	strd	r1, r0, [sp]
 80120f6:	a902      	add	r1, sp, #8
 80120f8:	f7ff ff56 	bl	8011fa8 <__b2d>
 80120fc:	9800      	ldr	r0, [sp, #0]
 80120fe:	a903      	add	r1, sp, #12
 8012100:	ec55 4b10 	vmov	r4, r5, d0
 8012104:	f7ff ff50 	bl	8011fa8 <__b2d>
 8012108:	9b01      	ldr	r3, [sp, #4]
 801210a:	6919      	ldr	r1, [r3, #16]
 801210c:	9b00      	ldr	r3, [sp, #0]
 801210e:	691b      	ldr	r3, [r3, #16]
 8012110:	1ac9      	subs	r1, r1, r3
 8012112:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012116:	1a9b      	subs	r3, r3, r2
 8012118:	ec5b ab10 	vmov	sl, fp, d0
 801211c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012120:	2b00      	cmp	r3, #0
 8012122:	bfce      	itee	gt
 8012124:	462a      	movgt	r2, r5
 8012126:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801212a:	465a      	movle	r2, fp
 801212c:	462f      	mov	r7, r5
 801212e:	46d9      	mov	r9, fp
 8012130:	bfcc      	ite	gt
 8012132:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012136:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801213a:	464b      	mov	r3, r9
 801213c:	4652      	mov	r2, sl
 801213e:	4620      	mov	r0, r4
 8012140:	4639      	mov	r1, r7
 8012142:	f7ee fb93 	bl	800086c <__aeabi_ddiv>
 8012146:	ec41 0b10 	vmov	d0, r0, r1
 801214a:	b005      	add	sp, #20
 801214c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012150 <__copybits>:
 8012150:	3901      	subs	r1, #1
 8012152:	b570      	push	{r4, r5, r6, lr}
 8012154:	1149      	asrs	r1, r1, #5
 8012156:	6914      	ldr	r4, [r2, #16]
 8012158:	3101      	adds	r1, #1
 801215a:	f102 0314 	add.w	r3, r2, #20
 801215e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012162:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012166:	1f05      	subs	r5, r0, #4
 8012168:	42a3      	cmp	r3, r4
 801216a:	d30c      	bcc.n	8012186 <__copybits+0x36>
 801216c:	1aa3      	subs	r3, r4, r2
 801216e:	3b11      	subs	r3, #17
 8012170:	f023 0303 	bic.w	r3, r3, #3
 8012174:	3211      	adds	r2, #17
 8012176:	42a2      	cmp	r2, r4
 8012178:	bf88      	it	hi
 801217a:	2300      	movhi	r3, #0
 801217c:	4418      	add	r0, r3
 801217e:	2300      	movs	r3, #0
 8012180:	4288      	cmp	r0, r1
 8012182:	d305      	bcc.n	8012190 <__copybits+0x40>
 8012184:	bd70      	pop	{r4, r5, r6, pc}
 8012186:	f853 6b04 	ldr.w	r6, [r3], #4
 801218a:	f845 6f04 	str.w	r6, [r5, #4]!
 801218e:	e7eb      	b.n	8012168 <__copybits+0x18>
 8012190:	f840 3b04 	str.w	r3, [r0], #4
 8012194:	e7f4      	b.n	8012180 <__copybits+0x30>

08012196 <__any_on>:
 8012196:	f100 0214 	add.w	r2, r0, #20
 801219a:	6900      	ldr	r0, [r0, #16]
 801219c:	114b      	asrs	r3, r1, #5
 801219e:	4298      	cmp	r0, r3
 80121a0:	b510      	push	{r4, lr}
 80121a2:	db11      	blt.n	80121c8 <__any_on+0x32>
 80121a4:	dd0a      	ble.n	80121bc <__any_on+0x26>
 80121a6:	f011 011f 	ands.w	r1, r1, #31
 80121aa:	d007      	beq.n	80121bc <__any_on+0x26>
 80121ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80121b0:	fa24 f001 	lsr.w	r0, r4, r1
 80121b4:	fa00 f101 	lsl.w	r1, r0, r1
 80121b8:	428c      	cmp	r4, r1
 80121ba:	d10b      	bne.n	80121d4 <__any_on+0x3e>
 80121bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80121c0:	4293      	cmp	r3, r2
 80121c2:	d803      	bhi.n	80121cc <__any_on+0x36>
 80121c4:	2000      	movs	r0, #0
 80121c6:	bd10      	pop	{r4, pc}
 80121c8:	4603      	mov	r3, r0
 80121ca:	e7f7      	b.n	80121bc <__any_on+0x26>
 80121cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80121d0:	2900      	cmp	r1, #0
 80121d2:	d0f5      	beq.n	80121c0 <__any_on+0x2a>
 80121d4:	2001      	movs	r0, #1
 80121d6:	e7f6      	b.n	80121c6 <__any_on+0x30>

080121d8 <sulp>:
 80121d8:	b570      	push	{r4, r5, r6, lr}
 80121da:	4604      	mov	r4, r0
 80121dc:	460d      	mov	r5, r1
 80121de:	ec45 4b10 	vmov	d0, r4, r5
 80121e2:	4616      	mov	r6, r2
 80121e4:	f7ff feba 	bl	8011f5c <__ulp>
 80121e8:	ec51 0b10 	vmov	r0, r1, d0
 80121ec:	b17e      	cbz	r6, 801220e <sulp+0x36>
 80121ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80121f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	dd09      	ble.n	801220e <sulp+0x36>
 80121fa:	051b      	lsls	r3, r3, #20
 80121fc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012200:	2400      	movs	r4, #0
 8012202:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8012206:	4622      	mov	r2, r4
 8012208:	462b      	mov	r3, r5
 801220a:	f7ee fa05 	bl	8000618 <__aeabi_dmul>
 801220e:	ec41 0b10 	vmov	d0, r0, r1
 8012212:	bd70      	pop	{r4, r5, r6, pc}
 8012214:	0000      	movs	r0, r0
	...

08012218 <_strtod_l>:
 8012218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801221c:	b09f      	sub	sp, #124	@ 0x7c
 801221e:	460c      	mov	r4, r1
 8012220:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012222:	2200      	movs	r2, #0
 8012224:	921a      	str	r2, [sp, #104]	@ 0x68
 8012226:	9005      	str	r0, [sp, #20]
 8012228:	f04f 0a00 	mov.w	sl, #0
 801222c:	f04f 0b00 	mov.w	fp, #0
 8012230:	460a      	mov	r2, r1
 8012232:	9219      	str	r2, [sp, #100]	@ 0x64
 8012234:	7811      	ldrb	r1, [r2, #0]
 8012236:	292b      	cmp	r1, #43	@ 0x2b
 8012238:	d04a      	beq.n	80122d0 <_strtod_l+0xb8>
 801223a:	d838      	bhi.n	80122ae <_strtod_l+0x96>
 801223c:	290d      	cmp	r1, #13
 801223e:	d832      	bhi.n	80122a6 <_strtod_l+0x8e>
 8012240:	2908      	cmp	r1, #8
 8012242:	d832      	bhi.n	80122aa <_strtod_l+0x92>
 8012244:	2900      	cmp	r1, #0
 8012246:	d03b      	beq.n	80122c0 <_strtod_l+0xa8>
 8012248:	2200      	movs	r2, #0
 801224a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801224c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801224e:	782a      	ldrb	r2, [r5, #0]
 8012250:	2a30      	cmp	r2, #48	@ 0x30
 8012252:	f040 80b3 	bne.w	80123bc <_strtod_l+0x1a4>
 8012256:	786a      	ldrb	r2, [r5, #1]
 8012258:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801225c:	2a58      	cmp	r2, #88	@ 0x58
 801225e:	d16e      	bne.n	801233e <_strtod_l+0x126>
 8012260:	9302      	str	r3, [sp, #8]
 8012262:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012264:	9301      	str	r3, [sp, #4]
 8012266:	ab1a      	add	r3, sp, #104	@ 0x68
 8012268:	9300      	str	r3, [sp, #0]
 801226a:	4a8e      	ldr	r2, [pc, #568]	@ (80124a4 <_strtod_l+0x28c>)
 801226c:	9805      	ldr	r0, [sp, #20]
 801226e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012270:	a919      	add	r1, sp, #100	@ 0x64
 8012272:	f001 fc7f 	bl	8013b74 <__gethex>
 8012276:	f010 060f 	ands.w	r6, r0, #15
 801227a:	4604      	mov	r4, r0
 801227c:	d005      	beq.n	801228a <_strtod_l+0x72>
 801227e:	2e06      	cmp	r6, #6
 8012280:	d128      	bne.n	80122d4 <_strtod_l+0xbc>
 8012282:	3501      	adds	r5, #1
 8012284:	2300      	movs	r3, #0
 8012286:	9519      	str	r5, [sp, #100]	@ 0x64
 8012288:	930b      	str	r3, [sp, #44]	@ 0x2c
 801228a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801228c:	2b00      	cmp	r3, #0
 801228e:	f040 858e 	bne.w	8012dae <_strtod_l+0xb96>
 8012292:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012294:	b1cb      	cbz	r3, 80122ca <_strtod_l+0xb2>
 8012296:	4652      	mov	r2, sl
 8012298:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801229c:	ec43 2b10 	vmov	d0, r2, r3
 80122a0:	b01f      	add	sp, #124	@ 0x7c
 80122a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122a6:	2920      	cmp	r1, #32
 80122a8:	d1ce      	bne.n	8012248 <_strtod_l+0x30>
 80122aa:	3201      	adds	r2, #1
 80122ac:	e7c1      	b.n	8012232 <_strtod_l+0x1a>
 80122ae:	292d      	cmp	r1, #45	@ 0x2d
 80122b0:	d1ca      	bne.n	8012248 <_strtod_l+0x30>
 80122b2:	2101      	movs	r1, #1
 80122b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80122b6:	1c51      	adds	r1, r2, #1
 80122b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80122ba:	7852      	ldrb	r2, [r2, #1]
 80122bc:	2a00      	cmp	r2, #0
 80122be:	d1c5      	bne.n	801224c <_strtod_l+0x34>
 80122c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80122c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	f040 8570 	bne.w	8012daa <_strtod_l+0xb92>
 80122ca:	4652      	mov	r2, sl
 80122cc:	465b      	mov	r3, fp
 80122ce:	e7e5      	b.n	801229c <_strtod_l+0x84>
 80122d0:	2100      	movs	r1, #0
 80122d2:	e7ef      	b.n	80122b4 <_strtod_l+0x9c>
 80122d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80122d6:	b13a      	cbz	r2, 80122e8 <_strtod_l+0xd0>
 80122d8:	2135      	movs	r1, #53	@ 0x35
 80122da:	a81c      	add	r0, sp, #112	@ 0x70
 80122dc:	f7ff ff38 	bl	8012150 <__copybits>
 80122e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80122e2:	9805      	ldr	r0, [sp, #20]
 80122e4:	f7ff fb06 	bl	80118f4 <_Bfree>
 80122e8:	3e01      	subs	r6, #1
 80122ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80122ec:	2e04      	cmp	r6, #4
 80122ee:	d806      	bhi.n	80122fe <_strtod_l+0xe6>
 80122f0:	e8df f006 	tbb	[pc, r6]
 80122f4:	201d0314 	.word	0x201d0314
 80122f8:	14          	.byte	0x14
 80122f9:	00          	.byte	0x00
 80122fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80122fe:	05e1      	lsls	r1, r4, #23
 8012300:	bf48      	it	mi
 8012302:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012306:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801230a:	0d1b      	lsrs	r3, r3, #20
 801230c:	051b      	lsls	r3, r3, #20
 801230e:	2b00      	cmp	r3, #0
 8012310:	d1bb      	bne.n	801228a <_strtod_l+0x72>
 8012312:	f7fe fbb7 	bl	8010a84 <__errno>
 8012316:	2322      	movs	r3, #34	@ 0x22
 8012318:	6003      	str	r3, [r0, #0]
 801231a:	e7b6      	b.n	801228a <_strtod_l+0x72>
 801231c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8012320:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012324:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012328:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801232c:	e7e7      	b.n	80122fe <_strtod_l+0xe6>
 801232e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80124ac <_strtod_l+0x294>
 8012332:	e7e4      	b.n	80122fe <_strtod_l+0xe6>
 8012334:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012338:	f04f 3aff 	mov.w	sl, #4294967295
 801233c:	e7df      	b.n	80122fe <_strtod_l+0xe6>
 801233e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012340:	1c5a      	adds	r2, r3, #1
 8012342:	9219      	str	r2, [sp, #100]	@ 0x64
 8012344:	785b      	ldrb	r3, [r3, #1]
 8012346:	2b30      	cmp	r3, #48	@ 0x30
 8012348:	d0f9      	beq.n	801233e <_strtod_l+0x126>
 801234a:	2b00      	cmp	r3, #0
 801234c:	d09d      	beq.n	801228a <_strtod_l+0x72>
 801234e:	2301      	movs	r3, #1
 8012350:	9309      	str	r3, [sp, #36]	@ 0x24
 8012352:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012354:	930c      	str	r3, [sp, #48]	@ 0x30
 8012356:	2300      	movs	r3, #0
 8012358:	9308      	str	r3, [sp, #32]
 801235a:	930a      	str	r3, [sp, #40]	@ 0x28
 801235c:	461f      	mov	r7, r3
 801235e:	220a      	movs	r2, #10
 8012360:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8012362:	7805      	ldrb	r5, [r0, #0]
 8012364:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8012368:	b2d9      	uxtb	r1, r3
 801236a:	2909      	cmp	r1, #9
 801236c:	d928      	bls.n	80123c0 <_strtod_l+0x1a8>
 801236e:	494e      	ldr	r1, [pc, #312]	@ (80124a8 <_strtod_l+0x290>)
 8012370:	2201      	movs	r2, #1
 8012372:	f7fe faab 	bl	80108cc <strncmp>
 8012376:	2800      	cmp	r0, #0
 8012378:	d032      	beq.n	80123e0 <_strtod_l+0x1c8>
 801237a:	2000      	movs	r0, #0
 801237c:	462a      	mov	r2, r5
 801237e:	4681      	mov	r9, r0
 8012380:	463d      	mov	r5, r7
 8012382:	4603      	mov	r3, r0
 8012384:	2a65      	cmp	r2, #101	@ 0x65
 8012386:	d001      	beq.n	801238c <_strtod_l+0x174>
 8012388:	2a45      	cmp	r2, #69	@ 0x45
 801238a:	d114      	bne.n	80123b6 <_strtod_l+0x19e>
 801238c:	b91d      	cbnz	r5, 8012396 <_strtod_l+0x17e>
 801238e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012390:	4302      	orrs	r2, r0
 8012392:	d095      	beq.n	80122c0 <_strtod_l+0xa8>
 8012394:	2500      	movs	r5, #0
 8012396:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8012398:	1c62      	adds	r2, r4, #1
 801239a:	9219      	str	r2, [sp, #100]	@ 0x64
 801239c:	7862      	ldrb	r2, [r4, #1]
 801239e:	2a2b      	cmp	r2, #43	@ 0x2b
 80123a0:	d077      	beq.n	8012492 <_strtod_l+0x27a>
 80123a2:	2a2d      	cmp	r2, #45	@ 0x2d
 80123a4:	d07b      	beq.n	801249e <_strtod_l+0x286>
 80123a6:	f04f 0c00 	mov.w	ip, #0
 80123aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80123ae:	2909      	cmp	r1, #9
 80123b0:	f240 8082 	bls.w	80124b8 <_strtod_l+0x2a0>
 80123b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80123b6:	f04f 0800 	mov.w	r8, #0
 80123ba:	e0a2      	b.n	8012502 <_strtod_l+0x2ea>
 80123bc:	2300      	movs	r3, #0
 80123be:	e7c7      	b.n	8012350 <_strtod_l+0x138>
 80123c0:	2f08      	cmp	r7, #8
 80123c2:	bfd5      	itete	le
 80123c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80123c6:	9908      	ldrgt	r1, [sp, #32]
 80123c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80123cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80123d0:	f100 0001 	add.w	r0, r0, #1
 80123d4:	bfd4      	ite	le
 80123d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80123d8:	9308      	strgt	r3, [sp, #32]
 80123da:	3701      	adds	r7, #1
 80123dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80123de:	e7bf      	b.n	8012360 <_strtod_l+0x148>
 80123e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80123e2:	1c5a      	adds	r2, r3, #1
 80123e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80123e6:	785a      	ldrb	r2, [r3, #1]
 80123e8:	b37f      	cbz	r7, 801244a <_strtod_l+0x232>
 80123ea:	4681      	mov	r9, r0
 80123ec:	463d      	mov	r5, r7
 80123ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80123f2:	2b09      	cmp	r3, #9
 80123f4:	d912      	bls.n	801241c <_strtod_l+0x204>
 80123f6:	2301      	movs	r3, #1
 80123f8:	e7c4      	b.n	8012384 <_strtod_l+0x16c>
 80123fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80123fc:	1c5a      	adds	r2, r3, #1
 80123fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8012400:	785a      	ldrb	r2, [r3, #1]
 8012402:	3001      	adds	r0, #1
 8012404:	2a30      	cmp	r2, #48	@ 0x30
 8012406:	d0f8      	beq.n	80123fa <_strtod_l+0x1e2>
 8012408:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801240c:	2b08      	cmp	r3, #8
 801240e:	f200 84d3 	bhi.w	8012db8 <_strtod_l+0xba0>
 8012412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012414:	930c      	str	r3, [sp, #48]	@ 0x30
 8012416:	4681      	mov	r9, r0
 8012418:	2000      	movs	r0, #0
 801241a:	4605      	mov	r5, r0
 801241c:	3a30      	subs	r2, #48	@ 0x30
 801241e:	f100 0301 	add.w	r3, r0, #1
 8012422:	d02a      	beq.n	801247a <_strtod_l+0x262>
 8012424:	4499      	add	r9, r3
 8012426:	eb00 0c05 	add.w	ip, r0, r5
 801242a:	462b      	mov	r3, r5
 801242c:	210a      	movs	r1, #10
 801242e:	4563      	cmp	r3, ip
 8012430:	d10d      	bne.n	801244e <_strtod_l+0x236>
 8012432:	1c69      	adds	r1, r5, #1
 8012434:	4401      	add	r1, r0
 8012436:	4428      	add	r0, r5
 8012438:	2808      	cmp	r0, #8
 801243a:	dc16      	bgt.n	801246a <_strtod_l+0x252>
 801243c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801243e:	230a      	movs	r3, #10
 8012440:	fb03 2300 	mla	r3, r3, r0, r2
 8012444:	930a      	str	r3, [sp, #40]	@ 0x28
 8012446:	2300      	movs	r3, #0
 8012448:	e018      	b.n	801247c <_strtod_l+0x264>
 801244a:	4638      	mov	r0, r7
 801244c:	e7da      	b.n	8012404 <_strtod_l+0x1ec>
 801244e:	2b08      	cmp	r3, #8
 8012450:	f103 0301 	add.w	r3, r3, #1
 8012454:	dc03      	bgt.n	801245e <_strtod_l+0x246>
 8012456:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8012458:	434e      	muls	r6, r1
 801245a:	960a      	str	r6, [sp, #40]	@ 0x28
 801245c:	e7e7      	b.n	801242e <_strtod_l+0x216>
 801245e:	2b10      	cmp	r3, #16
 8012460:	bfde      	ittt	le
 8012462:	9e08      	ldrle	r6, [sp, #32]
 8012464:	434e      	mulle	r6, r1
 8012466:	9608      	strle	r6, [sp, #32]
 8012468:	e7e1      	b.n	801242e <_strtod_l+0x216>
 801246a:	280f      	cmp	r0, #15
 801246c:	dceb      	bgt.n	8012446 <_strtod_l+0x22e>
 801246e:	9808      	ldr	r0, [sp, #32]
 8012470:	230a      	movs	r3, #10
 8012472:	fb03 2300 	mla	r3, r3, r0, r2
 8012476:	9308      	str	r3, [sp, #32]
 8012478:	e7e5      	b.n	8012446 <_strtod_l+0x22e>
 801247a:	4629      	mov	r1, r5
 801247c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801247e:	1c50      	adds	r0, r2, #1
 8012480:	9019      	str	r0, [sp, #100]	@ 0x64
 8012482:	7852      	ldrb	r2, [r2, #1]
 8012484:	4618      	mov	r0, r3
 8012486:	460d      	mov	r5, r1
 8012488:	e7b1      	b.n	80123ee <_strtod_l+0x1d6>
 801248a:	f04f 0900 	mov.w	r9, #0
 801248e:	2301      	movs	r3, #1
 8012490:	e77d      	b.n	801238e <_strtod_l+0x176>
 8012492:	f04f 0c00 	mov.w	ip, #0
 8012496:	1ca2      	adds	r2, r4, #2
 8012498:	9219      	str	r2, [sp, #100]	@ 0x64
 801249a:	78a2      	ldrb	r2, [r4, #2]
 801249c:	e785      	b.n	80123aa <_strtod_l+0x192>
 801249e:	f04f 0c01 	mov.w	ip, #1
 80124a2:	e7f8      	b.n	8012496 <_strtod_l+0x27e>
 80124a4:	08015e28 	.word	0x08015e28
 80124a8:	08015e10 	.word	0x08015e10
 80124ac:	7ff00000 	.word	0x7ff00000
 80124b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80124b2:	1c51      	adds	r1, r2, #1
 80124b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80124b6:	7852      	ldrb	r2, [r2, #1]
 80124b8:	2a30      	cmp	r2, #48	@ 0x30
 80124ba:	d0f9      	beq.n	80124b0 <_strtod_l+0x298>
 80124bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80124c0:	2908      	cmp	r1, #8
 80124c2:	f63f af78 	bhi.w	80123b6 <_strtod_l+0x19e>
 80124c6:	3a30      	subs	r2, #48	@ 0x30
 80124c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80124ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80124cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80124ce:	f04f 080a 	mov.w	r8, #10
 80124d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80124d4:	1c56      	adds	r6, r2, #1
 80124d6:	9619      	str	r6, [sp, #100]	@ 0x64
 80124d8:	7852      	ldrb	r2, [r2, #1]
 80124da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80124de:	f1be 0f09 	cmp.w	lr, #9
 80124e2:	d939      	bls.n	8012558 <_strtod_l+0x340>
 80124e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80124e6:	1a76      	subs	r6, r6, r1
 80124e8:	2e08      	cmp	r6, #8
 80124ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80124ee:	dc03      	bgt.n	80124f8 <_strtod_l+0x2e0>
 80124f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80124f2:	4588      	cmp	r8, r1
 80124f4:	bfa8      	it	ge
 80124f6:	4688      	movge	r8, r1
 80124f8:	f1bc 0f00 	cmp.w	ip, #0
 80124fc:	d001      	beq.n	8012502 <_strtod_l+0x2ea>
 80124fe:	f1c8 0800 	rsb	r8, r8, #0
 8012502:	2d00      	cmp	r5, #0
 8012504:	d14e      	bne.n	80125a4 <_strtod_l+0x38c>
 8012506:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012508:	4308      	orrs	r0, r1
 801250a:	f47f aebe 	bne.w	801228a <_strtod_l+0x72>
 801250e:	2b00      	cmp	r3, #0
 8012510:	f47f aed6 	bne.w	80122c0 <_strtod_l+0xa8>
 8012514:	2a69      	cmp	r2, #105	@ 0x69
 8012516:	d028      	beq.n	801256a <_strtod_l+0x352>
 8012518:	dc25      	bgt.n	8012566 <_strtod_l+0x34e>
 801251a:	2a49      	cmp	r2, #73	@ 0x49
 801251c:	d025      	beq.n	801256a <_strtod_l+0x352>
 801251e:	2a4e      	cmp	r2, #78	@ 0x4e
 8012520:	f47f aece 	bne.w	80122c0 <_strtod_l+0xa8>
 8012524:	499b      	ldr	r1, [pc, #620]	@ (8012794 <_strtod_l+0x57c>)
 8012526:	a819      	add	r0, sp, #100	@ 0x64
 8012528:	f001 fd46 	bl	8013fb8 <__match>
 801252c:	2800      	cmp	r0, #0
 801252e:	f43f aec7 	beq.w	80122c0 <_strtod_l+0xa8>
 8012532:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	2b28      	cmp	r3, #40	@ 0x28
 8012538:	d12e      	bne.n	8012598 <_strtod_l+0x380>
 801253a:	4997      	ldr	r1, [pc, #604]	@ (8012798 <_strtod_l+0x580>)
 801253c:	aa1c      	add	r2, sp, #112	@ 0x70
 801253e:	a819      	add	r0, sp, #100	@ 0x64
 8012540:	f001 fd4e 	bl	8013fe0 <__hexnan>
 8012544:	2805      	cmp	r0, #5
 8012546:	d127      	bne.n	8012598 <_strtod_l+0x380>
 8012548:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801254a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801254e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8012552:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8012556:	e698      	b.n	801228a <_strtod_l+0x72>
 8012558:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801255a:	fb08 2101 	mla	r1, r8, r1, r2
 801255e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8012562:	920e      	str	r2, [sp, #56]	@ 0x38
 8012564:	e7b5      	b.n	80124d2 <_strtod_l+0x2ba>
 8012566:	2a6e      	cmp	r2, #110	@ 0x6e
 8012568:	e7da      	b.n	8012520 <_strtod_l+0x308>
 801256a:	498c      	ldr	r1, [pc, #560]	@ (801279c <_strtod_l+0x584>)
 801256c:	a819      	add	r0, sp, #100	@ 0x64
 801256e:	f001 fd23 	bl	8013fb8 <__match>
 8012572:	2800      	cmp	r0, #0
 8012574:	f43f aea4 	beq.w	80122c0 <_strtod_l+0xa8>
 8012578:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801257a:	4989      	ldr	r1, [pc, #548]	@ (80127a0 <_strtod_l+0x588>)
 801257c:	3b01      	subs	r3, #1
 801257e:	a819      	add	r0, sp, #100	@ 0x64
 8012580:	9319      	str	r3, [sp, #100]	@ 0x64
 8012582:	f001 fd19 	bl	8013fb8 <__match>
 8012586:	b910      	cbnz	r0, 801258e <_strtod_l+0x376>
 8012588:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801258a:	3301      	adds	r3, #1
 801258c:	9319      	str	r3, [sp, #100]	@ 0x64
 801258e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80127b0 <_strtod_l+0x598>
 8012592:	f04f 0a00 	mov.w	sl, #0
 8012596:	e678      	b.n	801228a <_strtod_l+0x72>
 8012598:	4882      	ldr	r0, [pc, #520]	@ (80127a4 <_strtod_l+0x58c>)
 801259a:	f001 fa61 	bl	8013a60 <nan>
 801259e:	ec5b ab10 	vmov	sl, fp, d0
 80125a2:	e672      	b.n	801228a <_strtod_l+0x72>
 80125a4:	eba8 0309 	sub.w	r3, r8, r9
 80125a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80125aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80125ac:	2f00      	cmp	r7, #0
 80125ae:	bf08      	it	eq
 80125b0:	462f      	moveq	r7, r5
 80125b2:	2d10      	cmp	r5, #16
 80125b4:	462c      	mov	r4, r5
 80125b6:	bfa8      	it	ge
 80125b8:	2410      	movge	r4, #16
 80125ba:	f7ed ffb3 	bl	8000524 <__aeabi_ui2d>
 80125be:	2d09      	cmp	r5, #9
 80125c0:	4682      	mov	sl, r0
 80125c2:	468b      	mov	fp, r1
 80125c4:	dc13      	bgt.n	80125ee <_strtod_l+0x3d6>
 80125c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	f43f ae5e 	beq.w	801228a <_strtod_l+0x72>
 80125ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125d0:	dd78      	ble.n	80126c4 <_strtod_l+0x4ac>
 80125d2:	2b16      	cmp	r3, #22
 80125d4:	dc5f      	bgt.n	8012696 <_strtod_l+0x47e>
 80125d6:	4974      	ldr	r1, [pc, #464]	@ (80127a8 <_strtod_l+0x590>)
 80125d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80125dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125e0:	4652      	mov	r2, sl
 80125e2:	465b      	mov	r3, fp
 80125e4:	f7ee f818 	bl	8000618 <__aeabi_dmul>
 80125e8:	4682      	mov	sl, r0
 80125ea:	468b      	mov	fp, r1
 80125ec:	e64d      	b.n	801228a <_strtod_l+0x72>
 80125ee:	4b6e      	ldr	r3, [pc, #440]	@ (80127a8 <_strtod_l+0x590>)
 80125f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80125f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80125f8:	f7ee f80e 	bl	8000618 <__aeabi_dmul>
 80125fc:	4682      	mov	sl, r0
 80125fe:	9808      	ldr	r0, [sp, #32]
 8012600:	468b      	mov	fp, r1
 8012602:	f7ed ff8f 	bl	8000524 <__aeabi_ui2d>
 8012606:	4602      	mov	r2, r0
 8012608:	460b      	mov	r3, r1
 801260a:	4650      	mov	r0, sl
 801260c:	4659      	mov	r1, fp
 801260e:	f7ed fe4d 	bl	80002ac <__adddf3>
 8012612:	2d0f      	cmp	r5, #15
 8012614:	4682      	mov	sl, r0
 8012616:	468b      	mov	fp, r1
 8012618:	ddd5      	ble.n	80125c6 <_strtod_l+0x3ae>
 801261a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801261c:	1b2c      	subs	r4, r5, r4
 801261e:	441c      	add	r4, r3
 8012620:	2c00      	cmp	r4, #0
 8012622:	f340 8096 	ble.w	8012752 <_strtod_l+0x53a>
 8012626:	f014 030f 	ands.w	r3, r4, #15
 801262a:	d00a      	beq.n	8012642 <_strtod_l+0x42a>
 801262c:	495e      	ldr	r1, [pc, #376]	@ (80127a8 <_strtod_l+0x590>)
 801262e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012632:	4652      	mov	r2, sl
 8012634:	465b      	mov	r3, fp
 8012636:	e9d1 0100 	ldrd	r0, r1, [r1]
 801263a:	f7ed ffed 	bl	8000618 <__aeabi_dmul>
 801263e:	4682      	mov	sl, r0
 8012640:	468b      	mov	fp, r1
 8012642:	f034 040f 	bics.w	r4, r4, #15
 8012646:	d073      	beq.n	8012730 <_strtod_l+0x518>
 8012648:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801264c:	dd48      	ble.n	80126e0 <_strtod_l+0x4c8>
 801264e:	2400      	movs	r4, #0
 8012650:	46a0      	mov	r8, r4
 8012652:	940a      	str	r4, [sp, #40]	@ 0x28
 8012654:	46a1      	mov	r9, r4
 8012656:	9a05      	ldr	r2, [sp, #20]
 8012658:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80127b0 <_strtod_l+0x598>
 801265c:	2322      	movs	r3, #34	@ 0x22
 801265e:	6013      	str	r3, [r2, #0]
 8012660:	f04f 0a00 	mov.w	sl, #0
 8012664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012666:	2b00      	cmp	r3, #0
 8012668:	f43f ae0f 	beq.w	801228a <_strtod_l+0x72>
 801266c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801266e:	9805      	ldr	r0, [sp, #20]
 8012670:	f7ff f940 	bl	80118f4 <_Bfree>
 8012674:	9805      	ldr	r0, [sp, #20]
 8012676:	4649      	mov	r1, r9
 8012678:	f7ff f93c 	bl	80118f4 <_Bfree>
 801267c:	9805      	ldr	r0, [sp, #20]
 801267e:	4641      	mov	r1, r8
 8012680:	f7ff f938 	bl	80118f4 <_Bfree>
 8012684:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012686:	9805      	ldr	r0, [sp, #20]
 8012688:	f7ff f934 	bl	80118f4 <_Bfree>
 801268c:	9805      	ldr	r0, [sp, #20]
 801268e:	4621      	mov	r1, r4
 8012690:	f7ff f930 	bl	80118f4 <_Bfree>
 8012694:	e5f9      	b.n	801228a <_strtod_l+0x72>
 8012696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012698:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801269c:	4293      	cmp	r3, r2
 801269e:	dbbc      	blt.n	801261a <_strtod_l+0x402>
 80126a0:	4c41      	ldr	r4, [pc, #260]	@ (80127a8 <_strtod_l+0x590>)
 80126a2:	f1c5 050f 	rsb	r5, r5, #15
 80126a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80126aa:	4652      	mov	r2, sl
 80126ac:	465b      	mov	r3, fp
 80126ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80126b2:	f7ed ffb1 	bl	8000618 <__aeabi_dmul>
 80126b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126b8:	1b5d      	subs	r5, r3, r5
 80126ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80126be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80126c2:	e78f      	b.n	80125e4 <_strtod_l+0x3cc>
 80126c4:	3316      	adds	r3, #22
 80126c6:	dba8      	blt.n	801261a <_strtod_l+0x402>
 80126c8:	4b37      	ldr	r3, [pc, #220]	@ (80127a8 <_strtod_l+0x590>)
 80126ca:	eba9 0808 	sub.w	r8, r9, r8
 80126ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80126d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80126d6:	4650      	mov	r0, sl
 80126d8:	4659      	mov	r1, fp
 80126da:	f7ee f8c7 	bl	800086c <__aeabi_ddiv>
 80126de:	e783      	b.n	80125e8 <_strtod_l+0x3d0>
 80126e0:	4b32      	ldr	r3, [pc, #200]	@ (80127ac <_strtod_l+0x594>)
 80126e2:	9308      	str	r3, [sp, #32]
 80126e4:	2300      	movs	r3, #0
 80126e6:	1124      	asrs	r4, r4, #4
 80126e8:	4650      	mov	r0, sl
 80126ea:	4659      	mov	r1, fp
 80126ec:	461e      	mov	r6, r3
 80126ee:	2c01      	cmp	r4, #1
 80126f0:	dc21      	bgt.n	8012736 <_strtod_l+0x51e>
 80126f2:	b10b      	cbz	r3, 80126f8 <_strtod_l+0x4e0>
 80126f4:	4682      	mov	sl, r0
 80126f6:	468b      	mov	fp, r1
 80126f8:	492c      	ldr	r1, [pc, #176]	@ (80127ac <_strtod_l+0x594>)
 80126fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80126fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8012702:	4652      	mov	r2, sl
 8012704:	465b      	mov	r3, fp
 8012706:	e9d1 0100 	ldrd	r0, r1, [r1]
 801270a:	f7ed ff85 	bl	8000618 <__aeabi_dmul>
 801270e:	4b28      	ldr	r3, [pc, #160]	@ (80127b0 <_strtod_l+0x598>)
 8012710:	460a      	mov	r2, r1
 8012712:	400b      	ands	r3, r1
 8012714:	4927      	ldr	r1, [pc, #156]	@ (80127b4 <_strtod_l+0x59c>)
 8012716:	428b      	cmp	r3, r1
 8012718:	4682      	mov	sl, r0
 801271a:	d898      	bhi.n	801264e <_strtod_l+0x436>
 801271c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012720:	428b      	cmp	r3, r1
 8012722:	bf86      	itte	hi
 8012724:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80127b8 <_strtod_l+0x5a0>
 8012728:	f04f 3aff 	movhi.w	sl, #4294967295
 801272c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012730:	2300      	movs	r3, #0
 8012732:	9308      	str	r3, [sp, #32]
 8012734:	e07a      	b.n	801282c <_strtod_l+0x614>
 8012736:	07e2      	lsls	r2, r4, #31
 8012738:	d505      	bpl.n	8012746 <_strtod_l+0x52e>
 801273a:	9b08      	ldr	r3, [sp, #32]
 801273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012740:	f7ed ff6a 	bl	8000618 <__aeabi_dmul>
 8012744:	2301      	movs	r3, #1
 8012746:	9a08      	ldr	r2, [sp, #32]
 8012748:	3208      	adds	r2, #8
 801274a:	3601      	adds	r6, #1
 801274c:	1064      	asrs	r4, r4, #1
 801274e:	9208      	str	r2, [sp, #32]
 8012750:	e7cd      	b.n	80126ee <_strtod_l+0x4d6>
 8012752:	d0ed      	beq.n	8012730 <_strtod_l+0x518>
 8012754:	4264      	negs	r4, r4
 8012756:	f014 020f 	ands.w	r2, r4, #15
 801275a:	d00a      	beq.n	8012772 <_strtod_l+0x55a>
 801275c:	4b12      	ldr	r3, [pc, #72]	@ (80127a8 <_strtod_l+0x590>)
 801275e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012762:	4650      	mov	r0, sl
 8012764:	4659      	mov	r1, fp
 8012766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801276a:	f7ee f87f 	bl	800086c <__aeabi_ddiv>
 801276e:	4682      	mov	sl, r0
 8012770:	468b      	mov	fp, r1
 8012772:	1124      	asrs	r4, r4, #4
 8012774:	d0dc      	beq.n	8012730 <_strtod_l+0x518>
 8012776:	2c1f      	cmp	r4, #31
 8012778:	dd20      	ble.n	80127bc <_strtod_l+0x5a4>
 801277a:	2400      	movs	r4, #0
 801277c:	46a0      	mov	r8, r4
 801277e:	940a      	str	r4, [sp, #40]	@ 0x28
 8012780:	46a1      	mov	r9, r4
 8012782:	9a05      	ldr	r2, [sp, #20]
 8012784:	2322      	movs	r3, #34	@ 0x22
 8012786:	f04f 0a00 	mov.w	sl, #0
 801278a:	f04f 0b00 	mov.w	fp, #0
 801278e:	6013      	str	r3, [r2, #0]
 8012790:	e768      	b.n	8012664 <_strtod_l+0x44c>
 8012792:	bf00      	nop
 8012794:	08015b6e 	.word	0x08015b6e
 8012798:	08015e14 	.word	0x08015e14
 801279c:	08015b66 	.word	0x08015b66
 80127a0:	08015c48 	.word	0x08015c48
 80127a4:	08015c44 	.word	0x08015c44
 80127a8:	08015d48 	.word	0x08015d48
 80127ac:	08015d20 	.word	0x08015d20
 80127b0:	7ff00000 	.word	0x7ff00000
 80127b4:	7ca00000 	.word	0x7ca00000
 80127b8:	7fefffff 	.word	0x7fefffff
 80127bc:	f014 0310 	ands.w	r3, r4, #16
 80127c0:	bf18      	it	ne
 80127c2:	236a      	movne	r3, #106	@ 0x6a
 80127c4:	4ea9      	ldr	r6, [pc, #676]	@ (8012a6c <_strtod_l+0x854>)
 80127c6:	9308      	str	r3, [sp, #32]
 80127c8:	4650      	mov	r0, sl
 80127ca:	4659      	mov	r1, fp
 80127cc:	2300      	movs	r3, #0
 80127ce:	07e2      	lsls	r2, r4, #31
 80127d0:	d504      	bpl.n	80127dc <_strtod_l+0x5c4>
 80127d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80127d6:	f7ed ff1f 	bl	8000618 <__aeabi_dmul>
 80127da:	2301      	movs	r3, #1
 80127dc:	1064      	asrs	r4, r4, #1
 80127de:	f106 0608 	add.w	r6, r6, #8
 80127e2:	d1f4      	bne.n	80127ce <_strtod_l+0x5b6>
 80127e4:	b10b      	cbz	r3, 80127ea <_strtod_l+0x5d2>
 80127e6:	4682      	mov	sl, r0
 80127e8:	468b      	mov	fp, r1
 80127ea:	9b08      	ldr	r3, [sp, #32]
 80127ec:	b1b3      	cbz	r3, 801281c <_strtod_l+0x604>
 80127ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80127f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	4659      	mov	r1, fp
 80127fa:	dd0f      	ble.n	801281c <_strtod_l+0x604>
 80127fc:	2b1f      	cmp	r3, #31
 80127fe:	dd55      	ble.n	80128ac <_strtod_l+0x694>
 8012800:	2b34      	cmp	r3, #52	@ 0x34
 8012802:	bfde      	ittt	le
 8012804:	f04f 33ff 	movle.w	r3, #4294967295
 8012808:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801280c:	4093      	lslle	r3, r2
 801280e:	f04f 0a00 	mov.w	sl, #0
 8012812:	bfcc      	ite	gt
 8012814:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012818:	ea03 0b01 	andle.w	fp, r3, r1
 801281c:	2200      	movs	r2, #0
 801281e:	2300      	movs	r3, #0
 8012820:	4650      	mov	r0, sl
 8012822:	4659      	mov	r1, fp
 8012824:	f7ee f960 	bl	8000ae8 <__aeabi_dcmpeq>
 8012828:	2800      	cmp	r0, #0
 801282a:	d1a6      	bne.n	801277a <_strtod_l+0x562>
 801282c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801282e:	9300      	str	r3, [sp, #0]
 8012830:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012832:	9805      	ldr	r0, [sp, #20]
 8012834:	462b      	mov	r3, r5
 8012836:	463a      	mov	r2, r7
 8012838:	f7ff f8c4 	bl	80119c4 <__s2b>
 801283c:	900a      	str	r0, [sp, #40]	@ 0x28
 801283e:	2800      	cmp	r0, #0
 8012840:	f43f af05 	beq.w	801264e <_strtod_l+0x436>
 8012844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012846:	2a00      	cmp	r2, #0
 8012848:	eba9 0308 	sub.w	r3, r9, r8
 801284c:	bfa8      	it	ge
 801284e:	2300      	movge	r3, #0
 8012850:	9312      	str	r3, [sp, #72]	@ 0x48
 8012852:	2400      	movs	r4, #0
 8012854:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012858:	9316      	str	r3, [sp, #88]	@ 0x58
 801285a:	46a0      	mov	r8, r4
 801285c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801285e:	9805      	ldr	r0, [sp, #20]
 8012860:	6859      	ldr	r1, [r3, #4]
 8012862:	f7ff f807 	bl	8011874 <_Balloc>
 8012866:	4681      	mov	r9, r0
 8012868:	2800      	cmp	r0, #0
 801286a:	f43f aef4 	beq.w	8012656 <_strtod_l+0x43e>
 801286e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012870:	691a      	ldr	r2, [r3, #16]
 8012872:	3202      	adds	r2, #2
 8012874:	f103 010c 	add.w	r1, r3, #12
 8012878:	0092      	lsls	r2, r2, #2
 801287a:	300c      	adds	r0, #12
 801287c:	f7fe f92f 	bl	8010ade <memcpy>
 8012880:	ec4b ab10 	vmov	d0, sl, fp
 8012884:	9805      	ldr	r0, [sp, #20]
 8012886:	aa1c      	add	r2, sp, #112	@ 0x70
 8012888:	a91b      	add	r1, sp, #108	@ 0x6c
 801288a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801288e:	f7ff fbd5 	bl	801203c <__d2b>
 8012892:	901a      	str	r0, [sp, #104]	@ 0x68
 8012894:	2800      	cmp	r0, #0
 8012896:	f43f aede 	beq.w	8012656 <_strtod_l+0x43e>
 801289a:	9805      	ldr	r0, [sp, #20]
 801289c:	2101      	movs	r1, #1
 801289e:	f7ff f927 	bl	8011af0 <__i2b>
 80128a2:	4680      	mov	r8, r0
 80128a4:	b948      	cbnz	r0, 80128ba <_strtod_l+0x6a2>
 80128a6:	f04f 0800 	mov.w	r8, #0
 80128aa:	e6d4      	b.n	8012656 <_strtod_l+0x43e>
 80128ac:	f04f 32ff 	mov.w	r2, #4294967295
 80128b0:	fa02 f303 	lsl.w	r3, r2, r3
 80128b4:	ea03 0a0a 	and.w	sl, r3, sl
 80128b8:	e7b0      	b.n	801281c <_strtod_l+0x604>
 80128ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80128bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80128be:	2d00      	cmp	r5, #0
 80128c0:	bfab      	itete	ge
 80128c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80128c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80128c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80128c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80128ca:	bfac      	ite	ge
 80128cc:	18ef      	addge	r7, r5, r3
 80128ce:	1b5e      	sublt	r6, r3, r5
 80128d0:	9b08      	ldr	r3, [sp, #32]
 80128d2:	1aed      	subs	r5, r5, r3
 80128d4:	4415      	add	r5, r2
 80128d6:	4b66      	ldr	r3, [pc, #408]	@ (8012a70 <_strtod_l+0x858>)
 80128d8:	3d01      	subs	r5, #1
 80128da:	429d      	cmp	r5, r3
 80128dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80128e0:	da50      	bge.n	8012984 <_strtod_l+0x76c>
 80128e2:	1b5b      	subs	r3, r3, r5
 80128e4:	2b1f      	cmp	r3, #31
 80128e6:	eba2 0203 	sub.w	r2, r2, r3
 80128ea:	f04f 0101 	mov.w	r1, #1
 80128ee:	dc3d      	bgt.n	801296c <_strtod_l+0x754>
 80128f0:	fa01 f303 	lsl.w	r3, r1, r3
 80128f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80128f6:	2300      	movs	r3, #0
 80128f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80128fa:	18bd      	adds	r5, r7, r2
 80128fc:	9b08      	ldr	r3, [sp, #32]
 80128fe:	42af      	cmp	r7, r5
 8012900:	4416      	add	r6, r2
 8012902:	441e      	add	r6, r3
 8012904:	463b      	mov	r3, r7
 8012906:	bfa8      	it	ge
 8012908:	462b      	movge	r3, r5
 801290a:	42b3      	cmp	r3, r6
 801290c:	bfa8      	it	ge
 801290e:	4633      	movge	r3, r6
 8012910:	2b00      	cmp	r3, #0
 8012912:	bfc2      	ittt	gt
 8012914:	1aed      	subgt	r5, r5, r3
 8012916:	1af6      	subgt	r6, r6, r3
 8012918:	1aff      	subgt	r7, r7, r3
 801291a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801291c:	2b00      	cmp	r3, #0
 801291e:	dd16      	ble.n	801294e <_strtod_l+0x736>
 8012920:	4641      	mov	r1, r8
 8012922:	9805      	ldr	r0, [sp, #20]
 8012924:	461a      	mov	r2, r3
 8012926:	f7ff f9a3 	bl	8011c70 <__pow5mult>
 801292a:	4680      	mov	r8, r0
 801292c:	2800      	cmp	r0, #0
 801292e:	d0ba      	beq.n	80128a6 <_strtod_l+0x68e>
 8012930:	4601      	mov	r1, r0
 8012932:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012934:	9805      	ldr	r0, [sp, #20]
 8012936:	f7ff f8f1 	bl	8011b1c <__multiply>
 801293a:	900e      	str	r0, [sp, #56]	@ 0x38
 801293c:	2800      	cmp	r0, #0
 801293e:	f43f ae8a 	beq.w	8012656 <_strtod_l+0x43e>
 8012942:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012944:	9805      	ldr	r0, [sp, #20]
 8012946:	f7fe ffd5 	bl	80118f4 <_Bfree>
 801294a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801294c:	931a      	str	r3, [sp, #104]	@ 0x68
 801294e:	2d00      	cmp	r5, #0
 8012950:	dc1d      	bgt.n	801298e <_strtod_l+0x776>
 8012952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012954:	2b00      	cmp	r3, #0
 8012956:	dd23      	ble.n	80129a0 <_strtod_l+0x788>
 8012958:	4649      	mov	r1, r9
 801295a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801295c:	9805      	ldr	r0, [sp, #20]
 801295e:	f7ff f987 	bl	8011c70 <__pow5mult>
 8012962:	4681      	mov	r9, r0
 8012964:	b9e0      	cbnz	r0, 80129a0 <_strtod_l+0x788>
 8012966:	f04f 0900 	mov.w	r9, #0
 801296a:	e674      	b.n	8012656 <_strtod_l+0x43e>
 801296c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012970:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012974:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012978:	35e2      	adds	r5, #226	@ 0xe2
 801297a:	fa01 f305 	lsl.w	r3, r1, r5
 801297e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012980:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012982:	e7ba      	b.n	80128fa <_strtod_l+0x6e2>
 8012984:	2300      	movs	r3, #0
 8012986:	9310      	str	r3, [sp, #64]	@ 0x40
 8012988:	2301      	movs	r3, #1
 801298a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801298c:	e7b5      	b.n	80128fa <_strtod_l+0x6e2>
 801298e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012990:	9805      	ldr	r0, [sp, #20]
 8012992:	462a      	mov	r2, r5
 8012994:	f7ff f9c6 	bl	8011d24 <__lshift>
 8012998:	901a      	str	r0, [sp, #104]	@ 0x68
 801299a:	2800      	cmp	r0, #0
 801299c:	d1d9      	bne.n	8012952 <_strtod_l+0x73a>
 801299e:	e65a      	b.n	8012656 <_strtod_l+0x43e>
 80129a0:	2e00      	cmp	r6, #0
 80129a2:	dd07      	ble.n	80129b4 <_strtod_l+0x79c>
 80129a4:	4649      	mov	r1, r9
 80129a6:	9805      	ldr	r0, [sp, #20]
 80129a8:	4632      	mov	r2, r6
 80129aa:	f7ff f9bb 	bl	8011d24 <__lshift>
 80129ae:	4681      	mov	r9, r0
 80129b0:	2800      	cmp	r0, #0
 80129b2:	d0d8      	beq.n	8012966 <_strtod_l+0x74e>
 80129b4:	2f00      	cmp	r7, #0
 80129b6:	dd08      	ble.n	80129ca <_strtod_l+0x7b2>
 80129b8:	4641      	mov	r1, r8
 80129ba:	9805      	ldr	r0, [sp, #20]
 80129bc:	463a      	mov	r2, r7
 80129be:	f7ff f9b1 	bl	8011d24 <__lshift>
 80129c2:	4680      	mov	r8, r0
 80129c4:	2800      	cmp	r0, #0
 80129c6:	f43f ae46 	beq.w	8012656 <_strtod_l+0x43e>
 80129ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80129cc:	9805      	ldr	r0, [sp, #20]
 80129ce:	464a      	mov	r2, r9
 80129d0:	f7ff fa30 	bl	8011e34 <__mdiff>
 80129d4:	4604      	mov	r4, r0
 80129d6:	2800      	cmp	r0, #0
 80129d8:	f43f ae3d 	beq.w	8012656 <_strtod_l+0x43e>
 80129dc:	68c3      	ldr	r3, [r0, #12]
 80129de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80129e0:	2300      	movs	r3, #0
 80129e2:	60c3      	str	r3, [r0, #12]
 80129e4:	4641      	mov	r1, r8
 80129e6:	f7ff fa09 	bl	8011dfc <__mcmp>
 80129ea:	2800      	cmp	r0, #0
 80129ec:	da46      	bge.n	8012a7c <_strtod_l+0x864>
 80129ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80129f0:	ea53 030a 	orrs.w	r3, r3, sl
 80129f4:	d16c      	bne.n	8012ad0 <_strtod_l+0x8b8>
 80129f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d168      	bne.n	8012ad0 <_strtod_l+0x8b8>
 80129fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012a02:	0d1b      	lsrs	r3, r3, #20
 8012a04:	051b      	lsls	r3, r3, #20
 8012a06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012a0a:	d961      	bls.n	8012ad0 <_strtod_l+0x8b8>
 8012a0c:	6963      	ldr	r3, [r4, #20]
 8012a0e:	b913      	cbnz	r3, 8012a16 <_strtod_l+0x7fe>
 8012a10:	6923      	ldr	r3, [r4, #16]
 8012a12:	2b01      	cmp	r3, #1
 8012a14:	dd5c      	ble.n	8012ad0 <_strtod_l+0x8b8>
 8012a16:	4621      	mov	r1, r4
 8012a18:	2201      	movs	r2, #1
 8012a1a:	9805      	ldr	r0, [sp, #20]
 8012a1c:	f7ff f982 	bl	8011d24 <__lshift>
 8012a20:	4641      	mov	r1, r8
 8012a22:	4604      	mov	r4, r0
 8012a24:	f7ff f9ea 	bl	8011dfc <__mcmp>
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	dd51      	ble.n	8012ad0 <_strtod_l+0x8b8>
 8012a2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012a30:	9a08      	ldr	r2, [sp, #32]
 8012a32:	0d1b      	lsrs	r3, r3, #20
 8012a34:	051b      	lsls	r3, r3, #20
 8012a36:	2a00      	cmp	r2, #0
 8012a38:	d06b      	beq.n	8012b12 <_strtod_l+0x8fa>
 8012a3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012a3e:	d868      	bhi.n	8012b12 <_strtod_l+0x8fa>
 8012a40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012a44:	f67f ae9d 	bls.w	8012782 <_strtod_l+0x56a>
 8012a48:	4b0a      	ldr	r3, [pc, #40]	@ (8012a74 <_strtod_l+0x85c>)
 8012a4a:	4650      	mov	r0, sl
 8012a4c:	4659      	mov	r1, fp
 8012a4e:	2200      	movs	r2, #0
 8012a50:	f7ed fde2 	bl	8000618 <__aeabi_dmul>
 8012a54:	4b08      	ldr	r3, [pc, #32]	@ (8012a78 <_strtod_l+0x860>)
 8012a56:	400b      	ands	r3, r1
 8012a58:	4682      	mov	sl, r0
 8012a5a:	468b      	mov	fp, r1
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	f47f ae05 	bne.w	801266c <_strtod_l+0x454>
 8012a62:	9a05      	ldr	r2, [sp, #20]
 8012a64:	2322      	movs	r3, #34	@ 0x22
 8012a66:	6013      	str	r3, [r2, #0]
 8012a68:	e600      	b.n	801266c <_strtod_l+0x454>
 8012a6a:	bf00      	nop
 8012a6c:	08015e40 	.word	0x08015e40
 8012a70:	fffffc02 	.word	0xfffffc02
 8012a74:	39500000 	.word	0x39500000
 8012a78:	7ff00000 	.word	0x7ff00000
 8012a7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012a80:	d165      	bne.n	8012b4e <_strtod_l+0x936>
 8012a82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012a84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012a88:	b35a      	cbz	r2, 8012ae2 <_strtod_l+0x8ca>
 8012a8a:	4a9f      	ldr	r2, [pc, #636]	@ (8012d08 <_strtod_l+0xaf0>)
 8012a8c:	4293      	cmp	r3, r2
 8012a8e:	d12b      	bne.n	8012ae8 <_strtod_l+0x8d0>
 8012a90:	9b08      	ldr	r3, [sp, #32]
 8012a92:	4651      	mov	r1, sl
 8012a94:	b303      	cbz	r3, 8012ad8 <_strtod_l+0x8c0>
 8012a96:	4b9d      	ldr	r3, [pc, #628]	@ (8012d0c <_strtod_l+0xaf4>)
 8012a98:	465a      	mov	r2, fp
 8012a9a:	4013      	ands	r3, r2
 8012a9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8012aa4:	d81b      	bhi.n	8012ade <_strtod_l+0x8c6>
 8012aa6:	0d1b      	lsrs	r3, r3, #20
 8012aa8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012aac:	fa02 f303 	lsl.w	r3, r2, r3
 8012ab0:	4299      	cmp	r1, r3
 8012ab2:	d119      	bne.n	8012ae8 <_strtod_l+0x8d0>
 8012ab4:	4b96      	ldr	r3, [pc, #600]	@ (8012d10 <_strtod_l+0xaf8>)
 8012ab6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	d102      	bne.n	8012ac2 <_strtod_l+0x8aa>
 8012abc:	3101      	adds	r1, #1
 8012abe:	f43f adca 	beq.w	8012656 <_strtod_l+0x43e>
 8012ac2:	4b92      	ldr	r3, [pc, #584]	@ (8012d0c <_strtod_l+0xaf4>)
 8012ac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012ac6:	401a      	ands	r2, r3
 8012ac8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012acc:	f04f 0a00 	mov.w	sl, #0
 8012ad0:	9b08      	ldr	r3, [sp, #32]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d1b8      	bne.n	8012a48 <_strtod_l+0x830>
 8012ad6:	e5c9      	b.n	801266c <_strtod_l+0x454>
 8012ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8012adc:	e7e8      	b.n	8012ab0 <_strtod_l+0x898>
 8012ade:	4613      	mov	r3, r2
 8012ae0:	e7e6      	b.n	8012ab0 <_strtod_l+0x898>
 8012ae2:	ea53 030a 	orrs.w	r3, r3, sl
 8012ae6:	d0a1      	beq.n	8012a2c <_strtod_l+0x814>
 8012ae8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012aea:	b1db      	cbz	r3, 8012b24 <_strtod_l+0x90c>
 8012aec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012aee:	4213      	tst	r3, r2
 8012af0:	d0ee      	beq.n	8012ad0 <_strtod_l+0x8b8>
 8012af2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012af4:	9a08      	ldr	r2, [sp, #32]
 8012af6:	4650      	mov	r0, sl
 8012af8:	4659      	mov	r1, fp
 8012afa:	b1bb      	cbz	r3, 8012b2c <_strtod_l+0x914>
 8012afc:	f7ff fb6c 	bl	80121d8 <sulp>
 8012b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012b04:	ec53 2b10 	vmov	r2, r3, d0
 8012b08:	f7ed fbd0 	bl	80002ac <__adddf3>
 8012b0c:	4682      	mov	sl, r0
 8012b0e:	468b      	mov	fp, r1
 8012b10:	e7de      	b.n	8012ad0 <_strtod_l+0x8b8>
 8012b12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012b16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012b1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012b1e:	f04f 3aff 	mov.w	sl, #4294967295
 8012b22:	e7d5      	b.n	8012ad0 <_strtod_l+0x8b8>
 8012b24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012b26:	ea13 0f0a 	tst.w	r3, sl
 8012b2a:	e7e1      	b.n	8012af0 <_strtod_l+0x8d8>
 8012b2c:	f7ff fb54 	bl	80121d8 <sulp>
 8012b30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012b34:	ec53 2b10 	vmov	r2, r3, d0
 8012b38:	f7ed fbb6 	bl	80002a8 <__aeabi_dsub>
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	2300      	movs	r3, #0
 8012b40:	4682      	mov	sl, r0
 8012b42:	468b      	mov	fp, r1
 8012b44:	f7ed ffd0 	bl	8000ae8 <__aeabi_dcmpeq>
 8012b48:	2800      	cmp	r0, #0
 8012b4a:	d0c1      	beq.n	8012ad0 <_strtod_l+0x8b8>
 8012b4c:	e619      	b.n	8012782 <_strtod_l+0x56a>
 8012b4e:	4641      	mov	r1, r8
 8012b50:	4620      	mov	r0, r4
 8012b52:	f7ff facb 	bl	80120ec <__ratio>
 8012b56:	ec57 6b10 	vmov	r6, r7, d0
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012b60:	4630      	mov	r0, r6
 8012b62:	4639      	mov	r1, r7
 8012b64:	f7ed ffd4 	bl	8000b10 <__aeabi_dcmple>
 8012b68:	2800      	cmp	r0, #0
 8012b6a:	d06f      	beq.n	8012c4c <_strtod_l+0xa34>
 8012b6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d17a      	bne.n	8012c68 <_strtod_l+0xa50>
 8012b72:	f1ba 0f00 	cmp.w	sl, #0
 8012b76:	d158      	bne.n	8012c2a <_strtod_l+0xa12>
 8012b78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d15a      	bne.n	8012c38 <_strtod_l+0xa20>
 8012b82:	4b64      	ldr	r3, [pc, #400]	@ (8012d14 <_strtod_l+0xafc>)
 8012b84:	2200      	movs	r2, #0
 8012b86:	4630      	mov	r0, r6
 8012b88:	4639      	mov	r1, r7
 8012b8a:	f7ed ffb7 	bl	8000afc <__aeabi_dcmplt>
 8012b8e:	2800      	cmp	r0, #0
 8012b90:	d159      	bne.n	8012c46 <_strtod_l+0xa2e>
 8012b92:	4630      	mov	r0, r6
 8012b94:	4639      	mov	r1, r7
 8012b96:	4b60      	ldr	r3, [pc, #384]	@ (8012d18 <_strtod_l+0xb00>)
 8012b98:	2200      	movs	r2, #0
 8012b9a:	f7ed fd3d 	bl	8000618 <__aeabi_dmul>
 8012b9e:	4606      	mov	r6, r0
 8012ba0:	460f      	mov	r7, r1
 8012ba2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012ba6:	9606      	str	r6, [sp, #24]
 8012ba8:	9307      	str	r3, [sp, #28]
 8012baa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012bae:	4d57      	ldr	r5, [pc, #348]	@ (8012d0c <_strtod_l+0xaf4>)
 8012bb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012bb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012bb6:	401d      	ands	r5, r3
 8012bb8:	4b58      	ldr	r3, [pc, #352]	@ (8012d1c <_strtod_l+0xb04>)
 8012bba:	429d      	cmp	r5, r3
 8012bbc:	f040 80b2 	bne.w	8012d24 <_strtod_l+0xb0c>
 8012bc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012bc2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012bc6:	ec4b ab10 	vmov	d0, sl, fp
 8012bca:	f7ff f9c7 	bl	8011f5c <__ulp>
 8012bce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012bd2:	ec51 0b10 	vmov	r0, r1, d0
 8012bd6:	f7ed fd1f 	bl	8000618 <__aeabi_dmul>
 8012bda:	4652      	mov	r2, sl
 8012bdc:	465b      	mov	r3, fp
 8012bde:	f7ed fb65 	bl	80002ac <__adddf3>
 8012be2:	460b      	mov	r3, r1
 8012be4:	4949      	ldr	r1, [pc, #292]	@ (8012d0c <_strtod_l+0xaf4>)
 8012be6:	4a4e      	ldr	r2, [pc, #312]	@ (8012d20 <_strtod_l+0xb08>)
 8012be8:	4019      	ands	r1, r3
 8012bea:	4291      	cmp	r1, r2
 8012bec:	4682      	mov	sl, r0
 8012bee:	d942      	bls.n	8012c76 <_strtod_l+0xa5e>
 8012bf0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012bf2:	4b47      	ldr	r3, [pc, #284]	@ (8012d10 <_strtod_l+0xaf8>)
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d103      	bne.n	8012c00 <_strtod_l+0x9e8>
 8012bf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012bfa:	3301      	adds	r3, #1
 8012bfc:	f43f ad2b 	beq.w	8012656 <_strtod_l+0x43e>
 8012c00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012d10 <_strtod_l+0xaf8>
 8012c04:	f04f 3aff 	mov.w	sl, #4294967295
 8012c08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012c0a:	9805      	ldr	r0, [sp, #20]
 8012c0c:	f7fe fe72 	bl	80118f4 <_Bfree>
 8012c10:	9805      	ldr	r0, [sp, #20]
 8012c12:	4649      	mov	r1, r9
 8012c14:	f7fe fe6e 	bl	80118f4 <_Bfree>
 8012c18:	9805      	ldr	r0, [sp, #20]
 8012c1a:	4641      	mov	r1, r8
 8012c1c:	f7fe fe6a 	bl	80118f4 <_Bfree>
 8012c20:	9805      	ldr	r0, [sp, #20]
 8012c22:	4621      	mov	r1, r4
 8012c24:	f7fe fe66 	bl	80118f4 <_Bfree>
 8012c28:	e618      	b.n	801285c <_strtod_l+0x644>
 8012c2a:	f1ba 0f01 	cmp.w	sl, #1
 8012c2e:	d103      	bne.n	8012c38 <_strtod_l+0xa20>
 8012c30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	f43f ada5 	beq.w	8012782 <_strtod_l+0x56a>
 8012c38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012ce8 <_strtod_l+0xad0>
 8012c3c:	4f35      	ldr	r7, [pc, #212]	@ (8012d14 <_strtod_l+0xafc>)
 8012c3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012c42:	2600      	movs	r6, #0
 8012c44:	e7b1      	b.n	8012baa <_strtod_l+0x992>
 8012c46:	4f34      	ldr	r7, [pc, #208]	@ (8012d18 <_strtod_l+0xb00>)
 8012c48:	2600      	movs	r6, #0
 8012c4a:	e7aa      	b.n	8012ba2 <_strtod_l+0x98a>
 8012c4c:	4b32      	ldr	r3, [pc, #200]	@ (8012d18 <_strtod_l+0xb00>)
 8012c4e:	4630      	mov	r0, r6
 8012c50:	4639      	mov	r1, r7
 8012c52:	2200      	movs	r2, #0
 8012c54:	f7ed fce0 	bl	8000618 <__aeabi_dmul>
 8012c58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c5a:	4606      	mov	r6, r0
 8012c5c:	460f      	mov	r7, r1
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d09f      	beq.n	8012ba2 <_strtod_l+0x98a>
 8012c62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012c66:	e7a0      	b.n	8012baa <_strtod_l+0x992>
 8012c68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012cf0 <_strtod_l+0xad8>
 8012c6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012c70:	ec57 6b17 	vmov	r6, r7, d7
 8012c74:	e799      	b.n	8012baa <_strtod_l+0x992>
 8012c76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012c7a:	9b08      	ldr	r3, [sp, #32]
 8012c7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d1c1      	bne.n	8012c08 <_strtod_l+0x9f0>
 8012c84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012c88:	0d1b      	lsrs	r3, r3, #20
 8012c8a:	051b      	lsls	r3, r3, #20
 8012c8c:	429d      	cmp	r5, r3
 8012c8e:	d1bb      	bne.n	8012c08 <_strtod_l+0x9f0>
 8012c90:	4630      	mov	r0, r6
 8012c92:	4639      	mov	r1, r7
 8012c94:	f7ee f820 	bl	8000cd8 <__aeabi_d2lz>
 8012c98:	f7ed fc90 	bl	80005bc <__aeabi_l2d>
 8012c9c:	4602      	mov	r2, r0
 8012c9e:	460b      	mov	r3, r1
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	4639      	mov	r1, r7
 8012ca4:	f7ed fb00 	bl	80002a8 <__aeabi_dsub>
 8012ca8:	460b      	mov	r3, r1
 8012caa:	4602      	mov	r2, r0
 8012cac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012cb0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012cb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cb6:	ea46 060a 	orr.w	r6, r6, sl
 8012cba:	431e      	orrs	r6, r3
 8012cbc:	d06f      	beq.n	8012d9e <_strtod_l+0xb86>
 8012cbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8012cf8 <_strtod_l+0xae0>)
 8012cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc4:	f7ed ff1a 	bl	8000afc <__aeabi_dcmplt>
 8012cc8:	2800      	cmp	r0, #0
 8012cca:	f47f accf 	bne.w	801266c <_strtod_l+0x454>
 8012cce:	a30c      	add	r3, pc, #48	@ (adr r3, 8012d00 <_strtod_l+0xae8>)
 8012cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012cd8:	f7ed ff2e 	bl	8000b38 <__aeabi_dcmpgt>
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d093      	beq.n	8012c08 <_strtod_l+0x9f0>
 8012ce0:	e4c4      	b.n	801266c <_strtod_l+0x454>
 8012ce2:	bf00      	nop
 8012ce4:	f3af 8000 	nop.w
 8012ce8:	00000000 	.word	0x00000000
 8012cec:	bff00000 	.word	0xbff00000
 8012cf0:	00000000 	.word	0x00000000
 8012cf4:	3ff00000 	.word	0x3ff00000
 8012cf8:	94a03595 	.word	0x94a03595
 8012cfc:	3fdfffff 	.word	0x3fdfffff
 8012d00:	35afe535 	.word	0x35afe535
 8012d04:	3fe00000 	.word	0x3fe00000
 8012d08:	000fffff 	.word	0x000fffff
 8012d0c:	7ff00000 	.word	0x7ff00000
 8012d10:	7fefffff 	.word	0x7fefffff
 8012d14:	3ff00000 	.word	0x3ff00000
 8012d18:	3fe00000 	.word	0x3fe00000
 8012d1c:	7fe00000 	.word	0x7fe00000
 8012d20:	7c9fffff 	.word	0x7c9fffff
 8012d24:	9b08      	ldr	r3, [sp, #32]
 8012d26:	b323      	cbz	r3, 8012d72 <_strtod_l+0xb5a>
 8012d28:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012d2c:	d821      	bhi.n	8012d72 <_strtod_l+0xb5a>
 8012d2e:	a328      	add	r3, pc, #160	@ (adr r3, 8012dd0 <_strtod_l+0xbb8>)
 8012d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d34:	4630      	mov	r0, r6
 8012d36:	4639      	mov	r1, r7
 8012d38:	f7ed feea 	bl	8000b10 <__aeabi_dcmple>
 8012d3c:	b1a0      	cbz	r0, 8012d68 <_strtod_l+0xb50>
 8012d3e:	4639      	mov	r1, r7
 8012d40:	4630      	mov	r0, r6
 8012d42:	f7ed ff41 	bl	8000bc8 <__aeabi_d2uiz>
 8012d46:	2801      	cmp	r0, #1
 8012d48:	bf38      	it	cc
 8012d4a:	2001      	movcc	r0, #1
 8012d4c:	f7ed fbea 	bl	8000524 <__aeabi_ui2d>
 8012d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d52:	4606      	mov	r6, r0
 8012d54:	460f      	mov	r7, r1
 8012d56:	b9fb      	cbnz	r3, 8012d98 <_strtod_l+0xb80>
 8012d58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012d5c:	9014      	str	r0, [sp, #80]	@ 0x50
 8012d5e:	9315      	str	r3, [sp, #84]	@ 0x54
 8012d60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012d64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012d68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012d6a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012d6e:	1b5b      	subs	r3, r3, r5
 8012d70:	9311      	str	r3, [sp, #68]	@ 0x44
 8012d72:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012d76:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8012d7a:	f7ff f8ef 	bl	8011f5c <__ulp>
 8012d7e:	4650      	mov	r0, sl
 8012d80:	ec53 2b10 	vmov	r2, r3, d0
 8012d84:	4659      	mov	r1, fp
 8012d86:	f7ed fc47 	bl	8000618 <__aeabi_dmul>
 8012d8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012d8e:	f7ed fa8d 	bl	80002ac <__adddf3>
 8012d92:	4682      	mov	sl, r0
 8012d94:	468b      	mov	fp, r1
 8012d96:	e770      	b.n	8012c7a <_strtod_l+0xa62>
 8012d98:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8012d9c:	e7e0      	b.n	8012d60 <_strtod_l+0xb48>
 8012d9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012dd8 <_strtod_l+0xbc0>)
 8012da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da4:	f7ed feaa 	bl	8000afc <__aeabi_dcmplt>
 8012da8:	e798      	b.n	8012cdc <_strtod_l+0xac4>
 8012daa:	2300      	movs	r3, #0
 8012dac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012dae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012db0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012db2:	6013      	str	r3, [r2, #0]
 8012db4:	f7ff ba6d 	b.w	8012292 <_strtod_l+0x7a>
 8012db8:	2a65      	cmp	r2, #101	@ 0x65
 8012dba:	f43f ab66 	beq.w	801248a <_strtod_l+0x272>
 8012dbe:	2a45      	cmp	r2, #69	@ 0x45
 8012dc0:	f43f ab63 	beq.w	801248a <_strtod_l+0x272>
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	f7ff bb9e 	b.w	8012506 <_strtod_l+0x2ee>
 8012dca:	bf00      	nop
 8012dcc:	f3af 8000 	nop.w
 8012dd0:	ffc00000 	.word	0xffc00000
 8012dd4:	41dfffff 	.word	0x41dfffff
 8012dd8:	94a03595 	.word	0x94a03595
 8012ddc:	3fcfffff 	.word	0x3fcfffff

08012de0 <_strtod_r>:
 8012de0:	4b01      	ldr	r3, [pc, #4]	@ (8012de8 <_strtod_r+0x8>)
 8012de2:	f7ff ba19 	b.w	8012218 <_strtod_l>
 8012de6:	bf00      	nop
 8012de8:	20000114 	.word	0x20000114

08012dec <_strtol_l.constprop.0>:
 8012dec:	2b24      	cmp	r3, #36	@ 0x24
 8012dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012df2:	4686      	mov	lr, r0
 8012df4:	4690      	mov	r8, r2
 8012df6:	d801      	bhi.n	8012dfc <_strtol_l.constprop.0+0x10>
 8012df8:	2b01      	cmp	r3, #1
 8012dfa:	d106      	bne.n	8012e0a <_strtol_l.constprop.0+0x1e>
 8012dfc:	f7fd fe42 	bl	8010a84 <__errno>
 8012e00:	2316      	movs	r3, #22
 8012e02:	6003      	str	r3, [r0, #0]
 8012e04:	2000      	movs	r0, #0
 8012e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e0a:	4834      	ldr	r0, [pc, #208]	@ (8012edc <_strtol_l.constprop.0+0xf0>)
 8012e0c:	460d      	mov	r5, r1
 8012e0e:	462a      	mov	r2, r5
 8012e10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e14:	5d06      	ldrb	r6, [r0, r4]
 8012e16:	f016 0608 	ands.w	r6, r6, #8
 8012e1a:	d1f8      	bne.n	8012e0e <_strtol_l.constprop.0+0x22>
 8012e1c:	2c2d      	cmp	r4, #45	@ 0x2d
 8012e1e:	d12d      	bne.n	8012e7c <_strtol_l.constprop.0+0x90>
 8012e20:	782c      	ldrb	r4, [r5, #0]
 8012e22:	2601      	movs	r6, #1
 8012e24:	1c95      	adds	r5, r2, #2
 8012e26:	f033 0210 	bics.w	r2, r3, #16
 8012e2a:	d109      	bne.n	8012e40 <_strtol_l.constprop.0+0x54>
 8012e2c:	2c30      	cmp	r4, #48	@ 0x30
 8012e2e:	d12a      	bne.n	8012e86 <_strtol_l.constprop.0+0x9a>
 8012e30:	782a      	ldrb	r2, [r5, #0]
 8012e32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012e36:	2a58      	cmp	r2, #88	@ 0x58
 8012e38:	d125      	bne.n	8012e86 <_strtol_l.constprop.0+0x9a>
 8012e3a:	786c      	ldrb	r4, [r5, #1]
 8012e3c:	2310      	movs	r3, #16
 8012e3e:	3502      	adds	r5, #2
 8012e40:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012e44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012e48:	2200      	movs	r2, #0
 8012e4a:	fbbc f9f3 	udiv	r9, ip, r3
 8012e4e:	4610      	mov	r0, r2
 8012e50:	fb03 ca19 	mls	sl, r3, r9, ip
 8012e54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012e58:	2f09      	cmp	r7, #9
 8012e5a:	d81b      	bhi.n	8012e94 <_strtol_l.constprop.0+0xa8>
 8012e5c:	463c      	mov	r4, r7
 8012e5e:	42a3      	cmp	r3, r4
 8012e60:	dd27      	ble.n	8012eb2 <_strtol_l.constprop.0+0xc6>
 8012e62:	1c57      	adds	r7, r2, #1
 8012e64:	d007      	beq.n	8012e76 <_strtol_l.constprop.0+0x8a>
 8012e66:	4581      	cmp	r9, r0
 8012e68:	d320      	bcc.n	8012eac <_strtol_l.constprop.0+0xc0>
 8012e6a:	d101      	bne.n	8012e70 <_strtol_l.constprop.0+0x84>
 8012e6c:	45a2      	cmp	sl, r4
 8012e6e:	db1d      	blt.n	8012eac <_strtol_l.constprop.0+0xc0>
 8012e70:	fb00 4003 	mla	r0, r0, r3, r4
 8012e74:	2201      	movs	r2, #1
 8012e76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e7a:	e7eb      	b.n	8012e54 <_strtol_l.constprop.0+0x68>
 8012e7c:	2c2b      	cmp	r4, #43	@ 0x2b
 8012e7e:	bf04      	itt	eq
 8012e80:	782c      	ldrbeq	r4, [r5, #0]
 8012e82:	1c95      	addeq	r5, r2, #2
 8012e84:	e7cf      	b.n	8012e26 <_strtol_l.constprop.0+0x3a>
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d1da      	bne.n	8012e40 <_strtol_l.constprop.0+0x54>
 8012e8a:	2c30      	cmp	r4, #48	@ 0x30
 8012e8c:	bf0c      	ite	eq
 8012e8e:	2308      	moveq	r3, #8
 8012e90:	230a      	movne	r3, #10
 8012e92:	e7d5      	b.n	8012e40 <_strtol_l.constprop.0+0x54>
 8012e94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012e98:	2f19      	cmp	r7, #25
 8012e9a:	d801      	bhi.n	8012ea0 <_strtol_l.constprop.0+0xb4>
 8012e9c:	3c37      	subs	r4, #55	@ 0x37
 8012e9e:	e7de      	b.n	8012e5e <_strtol_l.constprop.0+0x72>
 8012ea0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012ea4:	2f19      	cmp	r7, #25
 8012ea6:	d804      	bhi.n	8012eb2 <_strtol_l.constprop.0+0xc6>
 8012ea8:	3c57      	subs	r4, #87	@ 0x57
 8012eaa:	e7d8      	b.n	8012e5e <_strtol_l.constprop.0+0x72>
 8012eac:	f04f 32ff 	mov.w	r2, #4294967295
 8012eb0:	e7e1      	b.n	8012e76 <_strtol_l.constprop.0+0x8a>
 8012eb2:	1c53      	adds	r3, r2, #1
 8012eb4:	d108      	bne.n	8012ec8 <_strtol_l.constprop.0+0xdc>
 8012eb6:	2322      	movs	r3, #34	@ 0x22
 8012eb8:	f8ce 3000 	str.w	r3, [lr]
 8012ebc:	4660      	mov	r0, ip
 8012ebe:	f1b8 0f00 	cmp.w	r8, #0
 8012ec2:	d0a0      	beq.n	8012e06 <_strtol_l.constprop.0+0x1a>
 8012ec4:	1e69      	subs	r1, r5, #1
 8012ec6:	e006      	b.n	8012ed6 <_strtol_l.constprop.0+0xea>
 8012ec8:	b106      	cbz	r6, 8012ecc <_strtol_l.constprop.0+0xe0>
 8012eca:	4240      	negs	r0, r0
 8012ecc:	f1b8 0f00 	cmp.w	r8, #0
 8012ed0:	d099      	beq.n	8012e06 <_strtol_l.constprop.0+0x1a>
 8012ed2:	2a00      	cmp	r2, #0
 8012ed4:	d1f6      	bne.n	8012ec4 <_strtol_l.constprop.0+0xd8>
 8012ed6:	f8c8 1000 	str.w	r1, [r8]
 8012eda:	e794      	b.n	8012e06 <_strtol_l.constprop.0+0x1a>
 8012edc:	08015e69 	.word	0x08015e69

08012ee0 <_strtol_r>:
 8012ee0:	f7ff bf84 	b.w	8012dec <_strtol_l.constprop.0>

08012ee4 <__ssputs_r>:
 8012ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ee8:	688e      	ldr	r6, [r1, #8]
 8012eea:	461f      	mov	r7, r3
 8012eec:	42be      	cmp	r6, r7
 8012eee:	680b      	ldr	r3, [r1, #0]
 8012ef0:	4682      	mov	sl, r0
 8012ef2:	460c      	mov	r4, r1
 8012ef4:	4690      	mov	r8, r2
 8012ef6:	d82d      	bhi.n	8012f54 <__ssputs_r+0x70>
 8012ef8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012efc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012f00:	d026      	beq.n	8012f50 <__ssputs_r+0x6c>
 8012f02:	6965      	ldr	r5, [r4, #20]
 8012f04:	6909      	ldr	r1, [r1, #16]
 8012f06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012f0a:	eba3 0901 	sub.w	r9, r3, r1
 8012f0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012f12:	1c7b      	adds	r3, r7, #1
 8012f14:	444b      	add	r3, r9
 8012f16:	106d      	asrs	r5, r5, #1
 8012f18:	429d      	cmp	r5, r3
 8012f1a:	bf38      	it	cc
 8012f1c:	461d      	movcc	r5, r3
 8012f1e:	0553      	lsls	r3, r2, #21
 8012f20:	d527      	bpl.n	8012f72 <__ssputs_r+0x8e>
 8012f22:	4629      	mov	r1, r5
 8012f24:	f7fc fbfc 	bl	800f720 <_malloc_r>
 8012f28:	4606      	mov	r6, r0
 8012f2a:	b360      	cbz	r0, 8012f86 <__ssputs_r+0xa2>
 8012f2c:	6921      	ldr	r1, [r4, #16]
 8012f2e:	464a      	mov	r2, r9
 8012f30:	f7fd fdd5 	bl	8010ade <memcpy>
 8012f34:	89a3      	ldrh	r3, [r4, #12]
 8012f36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012f3e:	81a3      	strh	r3, [r4, #12]
 8012f40:	6126      	str	r6, [r4, #16]
 8012f42:	6165      	str	r5, [r4, #20]
 8012f44:	444e      	add	r6, r9
 8012f46:	eba5 0509 	sub.w	r5, r5, r9
 8012f4a:	6026      	str	r6, [r4, #0]
 8012f4c:	60a5      	str	r5, [r4, #8]
 8012f4e:	463e      	mov	r6, r7
 8012f50:	42be      	cmp	r6, r7
 8012f52:	d900      	bls.n	8012f56 <__ssputs_r+0x72>
 8012f54:	463e      	mov	r6, r7
 8012f56:	6820      	ldr	r0, [r4, #0]
 8012f58:	4632      	mov	r2, r6
 8012f5a:	4641      	mov	r1, r8
 8012f5c:	f000 fd65 	bl	8013a2a <memmove>
 8012f60:	68a3      	ldr	r3, [r4, #8]
 8012f62:	1b9b      	subs	r3, r3, r6
 8012f64:	60a3      	str	r3, [r4, #8]
 8012f66:	6823      	ldr	r3, [r4, #0]
 8012f68:	4433      	add	r3, r6
 8012f6a:	6023      	str	r3, [r4, #0]
 8012f6c:	2000      	movs	r0, #0
 8012f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f72:	462a      	mov	r2, r5
 8012f74:	f001 f8e1 	bl	801413a <_realloc_r>
 8012f78:	4606      	mov	r6, r0
 8012f7a:	2800      	cmp	r0, #0
 8012f7c:	d1e0      	bne.n	8012f40 <__ssputs_r+0x5c>
 8012f7e:	6921      	ldr	r1, [r4, #16]
 8012f80:	4650      	mov	r0, sl
 8012f82:	f7fe fc2d 	bl	80117e0 <_free_r>
 8012f86:	230c      	movs	r3, #12
 8012f88:	f8ca 3000 	str.w	r3, [sl]
 8012f8c:	89a3      	ldrh	r3, [r4, #12]
 8012f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f92:	81a3      	strh	r3, [r4, #12]
 8012f94:	f04f 30ff 	mov.w	r0, #4294967295
 8012f98:	e7e9      	b.n	8012f6e <__ssputs_r+0x8a>
	...

08012f9c <_svfiprintf_r>:
 8012f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa0:	4698      	mov	r8, r3
 8012fa2:	898b      	ldrh	r3, [r1, #12]
 8012fa4:	061b      	lsls	r3, r3, #24
 8012fa6:	b09d      	sub	sp, #116	@ 0x74
 8012fa8:	4607      	mov	r7, r0
 8012faa:	460d      	mov	r5, r1
 8012fac:	4614      	mov	r4, r2
 8012fae:	d510      	bpl.n	8012fd2 <_svfiprintf_r+0x36>
 8012fb0:	690b      	ldr	r3, [r1, #16]
 8012fb2:	b973      	cbnz	r3, 8012fd2 <_svfiprintf_r+0x36>
 8012fb4:	2140      	movs	r1, #64	@ 0x40
 8012fb6:	f7fc fbb3 	bl	800f720 <_malloc_r>
 8012fba:	6028      	str	r0, [r5, #0]
 8012fbc:	6128      	str	r0, [r5, #16]
 8012fbe:	b930      	cbnz	r0, 8012fce <_svfiprintf_r+0x32>
 8012fc0:	230c      	movs	r3, #12
 8012fc2:	603b      	str	r3, [r7, #0]
 8012fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8012fc8:	b01d      	add	sp, #116	@ 0x74
 8012fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fce:	2340      	movs	r3, #64	@ 0x40
 8012fd0:	616b      	str	r3, [r5, #20]
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fd6:	2320      	movs	r3, #32
 8012fd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012fdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8012fe0:	2330      	movs	r3, #48	@ 0x30
 8012fe2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013180 <_svfiprintf_r+0x1e4>
 8012fe6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012fea:	f04f 0901 	mov.w	r9, #1
 8012fee:	4623      	mov	r3, r4
 8012ff0:	469a      	mov	sl, r3
 8012ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ff6:	b10a      	cbz	r2, 8012ffc <_svfiprintf_r+0x60>
 8012ff8:	2a25      	cmp	r2, #37	@ 0x25
 8012ffa:	d1f9      	bne.n	8012ff0 <_svfiprintf_r+0x54>
 8012ffc:	ebba 0b04 	subs.w	fp, sl, r4
 8013000:	d00b      	beq.n	801301a <_svfiprintf_r+0x7e>
 8013002:	465b      	mov	r3, fp
 8013004:	4622      	mov	r2, r4
 8013006:	4629      	mov	r1, r5
 8013008:	4638      	mov	r0, r7
 801300a:	f7ff ff6b 	bl	8012ee4 <__ssputs_r>
 801300e:	3001      	adds	r0, #1
 8013010:	f000 80a7 	beq.w	8013162 <_svfiprintf_r+0x1c6>
 8013014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013016:	445a      	add	r2, fp
 8013018:	9209      	str	r2, [sp, #36]	@ 0x24
 801301a:	f89a 3000 	ldrb.w	r3, [sl]
 801301e:	2b00      	cmp	r3, #0
 8013020:	f000 809f 	beq.w	8013162 <_svfiprintf_r+0x1c6>
 8013024:	2300      	movs	r3, #0
 8013026:	f04f 32ff 	mov.w	r2, #4294967295
 801302a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801302e:	f10a 0a01 	add.w	sl, sl, #1
 8013032:	9304      	str	r3, [sp, #16]
 8013034:	9307      	str	r3, [sp, #28]
 8013036:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801303a:	931a      	str	r3, [sp, #104]	@ 0x68
 801303c:	4654      	mov	r4, sl
 801303e:	2205      	movs	r2, #5
 8013040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013044:	484e      	ldr	r0, [pc, #312]	@ (8013180 <_svfiprintf_r+0x1e4>)
 8013046:	f7ed f8d3 	bl	80001f0 <memchr>
 801304a:	9a04      	ldr	r2, [sp, #16]
 801304c:	b9d8      	cbnz	r0, 8013086 <_svfiprintf_r+0xea>
 801304e:	06d0      	lsls	r0, r2, #27
 8013050:	bf44      	itt	mi
 8013052:	2320      	movmi	r3, #32
 8013054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013058:	0711      	lsls	r1, r2, #28
 801305a:	bf44      	itt	mi
 801305c:	232b      	movmi	r3, #43	@ 0x2b
 801305e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013062:	f89a 3000 	ldrb.w	r3, [sl]
 8013066:	2b2a      	cmp	r3, #42	@ 0x2a
 8013068:	d015      	beq.n	8013096 <_svfiprintf_r+0xfa>
 801306a:	9a07      	ldr	r2, [sp, #28]
 801306c:	4654      	mov	r4, sl
 801306e:	2000      	movs	r0, #0
 8013070:	f04f 0c0a 	mov.w	ip, #10
 8013074:	4621      	mov	r1, r4
 8013076:	f811 3b01 	ldrb.w	r3, [r1], #1
 801307a:	3b30      	subs	r3, #48	@ 0x30
 801307c:	2b09      	cmp	r3, #9
 801307e:	d94b      	bls.n	8013118 <_svfiprintf_r+0x17c>
 8013080:	b1b0      	cbz	r0, 80130b0 <_svfiprintf_r+0x114>
 8013082:	9207      	str	r2, [sp, #28]
 8013084:	e014      	b.n	80130b0 <_svfiprintf_r+0x114>
 8013086:	eba0 0308 	sub.w	r3, r0, r8
 801308a:	fa09 f303 	lsl.w	r3, r9, r3
 801308e:	4313      	orrs	r3, r2
 8013090:	9304      	str	r3, [sp, #16]
 8013092:	46a2      	mov	sl, r4
 8013094:	e7d2      	b.n	801303c <_svfiprintf_r+0xa0>
 8013096:	9b03      	ldr	r3, [sp, #12]
 8013098:	1d19      	adds	r1, r3, #4
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	9103      	str	r1, [sp, #12]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	bfbb      	ittet	lt
 80130a2:	425b      	neglt	r3, r3
 80130a4:	f042 0202 	orrlt.w	r2, r2, #2
 80130a8:	9307      	strge	r3, [sp, #28]
 80130aa:	9307      	strlt	r3, [sp, #28]
 80130ac:	bfb8      	it	lt
 80130ae:	9204      	strlt	r2, [sp, #16]
 80130b0:	7823      	ldrb	r3, [r4, #0]
 80130b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80130b4:	d10a      	bne.n	80130cc <_svfiprintf_r+0x130>
 80130b6:	7863      	ldrb	r3, [r4, #1]
 80130b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80130ba:	d132      	bne.n	8013122 <_svfiprintf_r+0x186>
 80130bc:	9b03      	ldr	r3, [sp, #12]
 80130be:	1d1a      	adds	r2, r3, #4
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	9203      	str	r2, [sp, #12]
 80130c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80130c8:	3402      	adds	r4, #2
 80130ca:	9305      	str	r3, [sp, #20]
 80130cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013190 <_svfiprintf_r+0x1f4>
 80130d0:	7821      	ldrb	r1, [r4, #0]
 80130d2:	2203      	movs	r2, #3
 80130d4:	4650      	mov	r0, sl
 80130d6:	f7ed f88b 	bl	80001f0 <memchr>
 80130da:	b138      	cbz	r0, 80130ec <_svfiprintf_r+0x150>
 80130dc:	9b04      	ldr	r3, [sp, #16]
 80130de:	eba0 000a 	sub.w	r0, r0, sl
 80130e2:	2240      	movs	r2, #64	@ 0x40
 80130e4:	4082      	lsls	r2, r0
 80130e6:	4313      	orrs	r3, r2
 80130e8:	3401      	adds	r4, #1
 80130ea:	9304      	str	r3, [sp, #16]
 80130ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130f0:	4824      	ldr	r0, [pc, #144]	@ (8013184 <_svfiprintf_r+0x1e8>)
 80130f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80130f6:	2206      	movs	r2, #6
 80130f8:	f7ed f87a 	bl	80001f0 <memchr>
 80130fc:	2800      	cmp	r0, #0
 80130fe:	d036      	beq.n	801316e <_svfiprintf_r+0x1d2>
 8013100:	4b21      	ldr	r3, [pc, #132]	@ (8013188 <_svfiprintf_r+0x1ec>)
 8013102:	bb1b      	cbnz	r3, 801314c <_svfiprintf_r+0x1b0>
 8013104:	9b03      	ldr	r3, [sp, #12]
 8013106:	3307      	adds	r3, #7
 8013108:	f023 0307 	bic.w	r3, r3, #7
 801310c:	3308      	adds	r3, #8
 801310e:	9303      	str	r3, [sp, #12]
 8013110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013112:	4433      	add	r3, r6
 8013114:	9309      	str	r3, [sp, #36]	@ 0x24
 8013116:	e76a      	b.n	8012fee <_svfiprintf_r+0x52>
 8013118:	fb0c 3202 	mla	r2, ip, r2, r3
 801311c:	460c      	mov	r4, r1
 801311e:	2001      	movs	r0, #1
 8013120:	e7a8      	b.n	8013074 <_svfiprintf_r+0xd8>
 8013122:	2300      	movs	r3, #0
 8013124:	3401      	adds	r4, #1
 8013126:	9305      	str	r3, [sp, #20]
 8013128:	4619      	mov	r1, r3
 801312a:	f04f 0c0a 	mov.w	ip, #10
 801312e:	4620      	mov	r0, r4
 8013130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013134:	3a30      	subs	r2, #48	@ 0x30
 8013136:	2a09      	cmp	r2, #9
 8013138:	d903      	bls.n	8013142 <_svfiprintf_r+0x1a6>
 801313a:	2b00      	cmp	r3, #0
 801313c:	d0c6      	beq.n	80130cc <_svfiprintf_r+0x130>
 801313e:	9105      	str	r1, [sp, #20]
 8013140:	e7c4      	b.n	80130cc <_svfiprintf_r+0x130>
 8013142:	fb0c 2101 	mla	r1, ip, r1, r2
 8013146:	4604      	mov	r4, r0
 8013148:	2301      	movs	r3, #1
 801314a:	e7f0      	b.n	801312e <_svfiprintf_r+0x192>
 801314c:	ab03      	add	r3, sp, #12
 801314e:	9300      	str	r3, [sp, #0]
 8013150:	462a      	mov	r2, r5
 8013152:	4b0e      	ldr	r3, [pc, #56]	@ (801318c <_svfiprintf_r+0x1f0>)
 8013154:	a904      	add	r1, sp, #16
 8013156:	4638      	mov	r0, r7
 8013158:	f7fc fc50 	bl	800f9fc <_printf_float>
 801315c:	1c42      	adds	r2, r0, #1
 801315e:	4606      	mov	r6, r0
 8013160:	d1d6      	bne.n	8013110 <_svfiprintf_r+0x174>
 8013162:	89ab      	ldrh	r3, [r5, #12]
 8013164:	065b      	lsls	r3, r3, #25
 8013166:	f53f af2d 	bmi.w	8012fc4 <_svfiprintf_r+0x28>
 801316a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801316c:	e72c      	b.n	8012fc8 <_svfiprintf_r+0x2c>
 801316e:	ab03      	add	r3, sp, #12
 8013170:	9300      	str	r3, [sp, #0]
 8013172:	462a      	mov	r2, r5
 8013174:	4b05      	ldr	r3, [pc, #20]	@ (801318c <_svfiprintf_r+0x1f0>)
 8013176:	a904      	add	r1, sp, #16
 8013178:	4638      	mov	r0, r7
 801317a:	f7fc fed7 	bl	800ff2c <_printf_i>
 801317e:	e7ed      	b.n	801315c <_svfiprintf_r+0x1c0>
 8013180:	08015f69 	.word	0x08015f69
 8013184:	08015f73 	.word	0x08015f73
 8013188:	0800f9fd 	.word	0x0800f9fd
 801318c:	08012ee5 	.word	0x08012ee5
 8013190:	08015f6f 	.word	0x08015f6f

08013194 <_sungetc_r>:
 8013194:	b538      	push	{r3, r4, r5, lr}
 8013196:	1c4b      	adds	r3, r1, #1
 8013198:	4614      	mov	r4, r2
 801319a:	d103      	bne.n	80131a4 <_sungetc_r+0x10>
 801319c:	f04f 35ff 	mov.w	r5, #4294967295
 80131a0:	4628      	mov	r0, r5
 80131a2:	bd38      	pop	{r3, r4, r5, pc}
 80131a4:	8993      	ldrh	r3, [r2, #12]
 80131a6:	f023 0320 	bic.w	r3, r3, #32
 80131aa:	8193      	strh	r3, [r2, #12]
 80131ac:	6853      	ldr	r3, [r2, #4]
 80131ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80131b0:	b2cd      	uxtb	r5, r1
 80131b2:	b18a      	cbz	r2, 80131d8 <_sungetc_r+0x44>
 80131b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80131b6:	429a      	cmp	r2, r3
 80131b8:	dd08      	ble.n	80131cc <_sungetc_r+0x38>
 80131ba:	6823      	ldr	r3, [r4, #0]
 80131bc:	1e5a      	subs	r2, r3, #1
 80131be:	6022      	str	r2, [r4, #0]
 80131c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80131c4:	6863      	ldr	r3, [r4, #4]
 80131c6:	3301      	adds	r3, #1
 80131c8:	6063      	str	r3, [r4, #4]
 80131ca:	e7e9      	b.n	80131a0 <_sungetc_r+0xc>
 80131cc:	4621      	mov	r1, r4
 80131ce:	f000 fbf2 	bl	80139b6 <__submore>
 80131d2:	2800      	cmp	r0, #0
 80131d4:	d0f1      	beq.n	80131ba <_sungetc_r+0x26>
 80131d6:	e7e1      	b.n	801319c <_sungetc_r+0x8>
 80131d8:	6921      	ldr	r1, [r4, #16]
 80131da:	6822      	ldr	r2, [r4, #0]
 80131dc:	b141      	cbz	r1, 80131f0 <_sungetc_r+0x5c>
 80131de:	4291      	cmp	r1, r2
 80131e0:	d206      	bcs.n	80131f0 <_sungetc_r+0x5c>
 80131e2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80131e6:	42a9      	cmp	r1, r5
 80131e8:	d102      	bne.n	80131f0 <_sungetc_r+0x5c>
 80131ea:	3a01      	subs	r2, #1
 80131ec:	6022      	str	r2, [r4, #0]
 80131ee:	e7ea      	b.n	80131c6 <_sungetc_r+0x32>
 80131f0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80131f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80131f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80131fa:	2303      	movs	r3, #3
 80131fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80131fe:	4623      	mov	r3, r4
 8013200:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013204:	6023      	str	r3, [r4, #0]
 8013206:	2301      	movs	r3, #1
 8013208:	e7de      	b.n	80131c8 <_sungetc_r+0x34>

0801320a <__ssrefill_r>:
 801320a:	b510      	push	{r4, lr}
 801320c:	460c      	mov	r4, r1
 801320e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013210:	b169      	cbz	r1, 801322e <__ssrefill_r+0x24>
 8013212:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013216:	4299      	cmp	r1, r3
 8013218:	d001      	beq.n	801321e <__ssrefill_r+0x14>
 801321a:	f7fe fae1 	bl	80117e0 <_free_r>
 801321e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013220:	6063      	str	r3, [r4, #4]
 8013222:	2000      	movs	r0, #0
 8013224:	6360      	str	r0, [r4, #52]	@ 0x34
 8013226:	b113      	cbz	r3, 801322e <__ssrefill_r+0x24>
 8013228:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801322a:	6023      	str	r3, [r4, #0]
 801322c:	bd10      	pop	{r4, pc}
 801322e:	6923      	ldr	r3, [r4, #16]
 8013230:	6023      	str	r3, [r4, #0]
 8013232:	2300      	movs	r3, #0
 8013234:	6063      	str	r3, [r4, #4]
 8013236:	89a3      	ldrh	r3, [r4, #12]
 8013238:	f043 0320 	orr.w	r3, r3, #32
 801323c:	81a3      	strh	r3, [r4, #12]
 801323e:	f04f 30ff 	mov.w	r0, #4294967295
 8013242:	e7f3      	b.n	801322c <__ssrefill_r+0x22>

08013244 <__ssvfiscanf_r>:
 8013244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013248:	460c      	mov	r4, r1
 801324a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801324e:	2100      	movs	r1, #0
 8013250:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8013254:	49a5      	ldr	r1, [pc, #660]	@ (80134ec <__ssvfiscanf_r+0x2a8>)
 8013256:	91a0      	str	r1, [sp, #640]	@ 0x280
 8013258:	f10d 0804 	add.w	r8, sp, #4
 801325c:	49a4      	ldr	r1, [pc, #656]	@ (80134f0 <__ssvfiscanf_r+0x2ac>)
 801325e:	4fa5      	ldr	r7, [pc, #660]	@ (80134f4 <__ssvfiscanf_r+0x2b0>)
 8013260:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8013264:	4606      	mov	r6, r0
 8013266:	91a1      	str	r1, [sp, #644]	@ 0x284
 8013268:	9300      	str	r3, [sp, #0]
 801326a:	7813      	ldrb	r3, [r2, #0]
 801326c:	2b00      	cmp	r3, #0
 801326e:	f000 8158 	beq.w	8013522 <__ssvfiscanf_r+0x2de>
 8013272:	5cf9      	ldrb	r1, [r7, r3]
 8013274:	f011 0108 	ands.w	r1, r1, #8
 8013278:	f102 0501 	add.w	r5, r2, #1
 801327c:	d019      	beq.n	80132b2 <__ssvfiscanf_r+0x6e>
 801327e:	6863      	ldr	r3, [r4, #4]
 8013280:	2b00      	cmp	r3, #0
 8013282:	dd0f      	ble.n	80132a4 <__ssvfiscanf_r+0x60>
 8013284:	6823      	ldr	r3, [r4, #0]
 8013286:	781a      	ldrb	r2, [r3, #0]
 8013288:	5cba      	ldrb	r2, [r7, r2]
 801328a:	0712      	lsls	r2, r2, #28
 801328c:	d401      	bmi.n	8013292 <__ssvfiscanf_r+0x4e>
 801328e:	462a      	mov	r2, r5
 8013290:	e7eb      	b.n	801326a <__ssvfiscanf_r+0x26>
 8013292:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013294:	3201      	adds	r2, #1
 8013296:	9245      	str	r2, [sp, #276]	@ 0x114
 8013298:	6862      	ldr	r2, [r4, #4]
 801329a:	3301      	adds	r3, #1
 801329c:	3a01      	subs	r2, #1
 801329e:	6062      	str	r2, [r4, #4]
 80132a0:	6023      	str	r3, [r4, #0]
 80132a2:	e7ec      	b.n	801327e <__ssvfiscanf_r+0x3a>
 80132a4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80132a6:	4621      	mov	r1, r4
 80132a8:	4630      	mov	r0, r6
 80132aa:	4798      	blx	r3
 80132ac:	2800      	cmp	r0, #0
 80132ae:	d0e9      	beq.n	8013284 <__ssvfiscanf_r+0x40>
 80132b0:	e7ed      	b.n	801328e <__ssvfiscanf_r+0x4a>
 80132b2:	2b25      	cmp	r3, #37	@ 0x25
 80132b4:	d012      	beq.n	80132dc <__ssvfiscanf_r+0x98>
 80132b6:	4699      	mov	r9, r3
 80132b8:	6863      	ldr	r3, [r4, #4]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	f340 8093 	ble.w	80133e6 <__ssvfiscanf_r+0x1a2>
 80132c0:	6822      	ldr	r2, [r4, #0]
 80132c2:	7813      	ldrb	r3, [r2, #0]
 80132c4:	454b      	cmp	r3, r9
 80132c6:	f040 812c 	bne.w	8013522 <__ssvfiscanf_r+0x2de>
 80132ca:	6863      	ldr	r3, [r4, #4]
 80132cc:	3b01      	subs	r3, #1
 80132ce:	6063      	str	r3, [r4, #4]
 80132d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80132d2:	3201      	adds	r2, #1
 80132d4:	3301      	adds	r3, #1
 80132d6:	6022      	str	r2, [r4, #0]
 80132d8:	9345      	str	r3, [sp, #276]	@ 0x114
 80132da:	e7d8      	b.n	801328e <__ssvfiscanf_r+0x4a>
 80132dc:	9141      	str	r1, [sp, #260]	@ 0x104
 80132de:	9143      	str	r1, [sp, #268]	@ 0x10c
 80132e0:	7853      	ldrb	r3, [r2, #1]
 80132e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80132e4:	bf02      	ittt	eq
 80132e6:	2310      	moveq	r3, #16
 80132e8:	1c95      	addeq	r5, r2, #2
 80132ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 80132ec:	220a      	movs	r2, #10
 80132ee:	46a9      	mov	r9, r5
 80132f0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80132f4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80132f8:	2b09      	cmp	r3, #9
 80132fa:	d91e      	bls.n	801333a <__ssvfiscanf_r+0xf6>
 80132fc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80134f8 <__ssvfiscanf_r+0x2b4>
 8013300:	2203      	movs	r2, #3
 8013302:	4650      	mov	r0, sl
 8013304:	f7ec ff74 	bl	80001f0 <memchr>
 8013308:	b138      	cbz	r0, 801331a <__ssvfiscanf_r+0xd6>
 801330a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801330c:	eba0 000a 	sub.w	r0, r0, sl
 8013310:	2301      	movs	r3, #1
 8013312:	4083      	lsls	r3, r0
 8013314:	4313      	orrs	r3, r2
 8013316:	9341      	str	r3, [sp, #260]	@ 0x104
 8013318:	464d      	mov	r5, r9
 801331a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801331e:	2b78      	cmp	r3, #120	@ 0x78
 8013320:	d806      	bhi.n	8013330 <__ssvfiscanf_r+0xec>
 8013322:	2b57      	cmp	r3, #87	@ 0x57
 8013324:	d810      	bhi.n	8013348 <__ssvfiscanf_r+0x104>
 8013326:	2b25      	cmp	r3, #37	@ 0x25
 8013328:	d0c5      	beq.n	80132b6 <__ssvfiscanf_r+0x72>
 801332a:	d857      	bhi.n	80133dc <__ssvfiscanf_r+0x198>
 801332c:	2b00      	cmp	r3, #0
 801332e:	d065      	beq.n	80133fc <__ssvfiscanf_r+0x1b8>
 8013330:	2303      	movs	r3, #3
 8013332:	9347      	str	r3, [sp, #284]	@ 0x11c
 8013334:	230a      	movs	r3, #10
 8013336:	9342      	str	r3, [sp, #264]	@ 0x108
 8013338:	e078      	b.n	801342c <__ssvfiscanf_r+0x1e8>
 801333a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801333c:	fb02 1103 	mla	r1, r2, r3, r1
 8013340:	3930      	subs	r1, #48	@ 0x30
 8013342:	9143      	str	r1, [sp, #268]	@ 0x10c
 8013344:	464d      	mov	r5, r9
 8013346:	e7d2      	b.n	80132ee <__ssvfiscanf_r+0xaa>
 8013348:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801334c:	2a20      	cmp	r2, #32
 801334e:	d8ef      	bhi.n	8013330 <__ssvfiscanf_r+0xec>
 8013350:	a101      	add	r1, pc, #4	@ (adr r1, 8013358 <__ssvfiscanf_r+0x114>)
 8013352:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013356:	bf00      	nop
 8013358:	0801340b 	.word	0x0801340b
 801335c:	08013331 	.word	0x08013331
 8013360:	08013331 	.word	0x08013331
 8013364:	08013465 	.word	0x08013465
 8013368:	08013331 	.word	0x08013331
 801336c:	08013331 	.word	0x08013331
 8013370:	08013331 	.word	0x08013331
 8013374:	08013331 	.word	0x08013331
 8013378:	08013331 	.word	0x08013331
 801337c:	08013331 	.word	0x08013331
 8013380:	08013331 	.word	0x08013331
 8013384:	0801347b 	.word	0x0801347b
 8013388:	08013461 	.word	0x08013461
 801338c:	080133e3 	.word	0x080133e3
 8013390:	080133e3 	.word	0x080133e3
 8013394:	080133e3 	.word	0x080133e3
 8013398:	08013331 	.word	0x08013331
 801339c:	0801341d 	.word	0x0801341d
 80133a0:	08013331 	.word	0x08013331
 80133a4:	08013331 	.word	0x08013331
 80133a8:	08013331 	.word	0x08013331
 80133ac:	08013331 	.word	0x08013331
 80133b0:	0801348b 	.word	0x0801348b
 80133b4:	08013425 	.word	0x08013425
 80133b8:	08013403 	.word	0x08013403
 80133bc:	08013331 	.word	0x08013331
 80133c0:	08013331 	.word	0x08013331
 80133c4:	08013487 	.word	0x08013487
 80133c8:	08013331 	.word	0x08013331
 80133cc:	08013461 	.word	0x08013461
 80133d0:	08013331 	.word	0x08013331
 80133d4:	08013331 	.word	0x08013331
 80133d8:	0801340b 	.word	0x0801340b
 80133dc:	3b45      	subs	r3, #69	@ 0x45
 80133de:	2b02      	cmp	r3, #2
 80133e0:	d8a6      	bhi.n	8013330 <__ssvfiscanf_r+0xec>
 80133e2:	2305      	movs	r3, #5
 80133e4:	e021      	b.n	801342a <__ssvfiscanf_r+0x1e6>
 80133e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80133e8:	4621      	mov	r1, r4
 80133ea:	4630      	mov	r0, r6
 80133ec:	4798      	blx	r3
 80133ee:	2800      	cmp	r0, #0
 80133f0:	f43f af66 	beq.w	80132c0 <__ssvfiscanf_r+0x7c>
 80133f4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80133f6:	2800      	cmp	r0, #0
 80133f8:	f040 808b 	bne.w	8013512 <__ssvfiscanf_r+0x2ce>
 80133fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013400:	e08b      	b.n	801351a <__ssvfiscanf_r+0x2d6>
 8013402:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013404:	f042 0220 	orr.w	r2, r2, #32
 8013408:	9241      	str	r2, [sp, #260]	@ 0x104
 801340a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801340c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013410:	9241      	str	r2, [sp, #260]	@ 0x104
 8013412:	2210      	movs	r2, #16
 8013414:	2b6e      	cmp	r3, #110	@ 0x6e
 8013416:	9242      	str	r2, [sp, #264]	@ 0x108
 8013418:	d902      	bls.n	8013420 <__ssvfiscanf_r+0x1dc>
 801341a:	e005      	b.n	8013428 <__ssvfiscanf_r+0x1e4>
 801341c:	2300      	movs	r3, #0
 801341e:	9342      	str	r3, [sp, #264]	@ 0x108
 8013420:	2303      	movs	r3, #3
 8013422:	e002      	b.n	801342a <__ssvfiscanf_r+0x1e6>
 8013424:	2308      	movs	r3, #8
 8013426:	9342      	str	r3, [sp, #264]	@ 0x108
 8013428:	2304      	movs	r3, #4
 801342a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801342c:	6863      	ldr	r3, [r4, #4]
 801342e:	2b00      	cmp	r3, #0
 8013430:	dd39      	ble.n	80134a6 <__ssvfiscanf_r+0x262>
 8013432:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8013434:	0659      	lsls	r1, r3, #25
 8013436:	d404      	bmi.n	8013442 <__ssvfiscanf_r+0x1fe>
 8013438:	6823      	ldr	r3, [r4, #0]
 801343a:	781a      	ldrb	r2, [r3, #0]
 801343c:	5cba      	ldrb	r2, [r7, r2]
 801343e:	0712      	lsls	r2, r2, #28
 8013440:	d438      	bmi.n	80134b4 <__ssvfiscanf_r+0x270>
 8013442:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8013444:	2b02      	cmp	r3, #2
 8013446:	dc47      	bgt.n	80134d8 <__ssvfiscanf_r+0x294>
 8013448:	466b      	mov	r3, sp
 801344a:	4622      	mov	r2, r4
 801344c:	a941      	add	r1, sp, #260	@ 0x104
 801344e:	4630      	mov	r0, r6
 8013450:	f000 f86c 	bl	801352c <_scanf_chars>
 8013454:	2801      	cmp	r0, #1
 8013456:	d064      	beq.n	8013522 <__ssvfiscanf_r+0x2de>
 8013458:	2802      	cmp	r0, #2
 801345a:	f47f af18 	bne.w	801328e <__ssvfiscanf_r+0x4a>
 801345e:	e7c9      	b.n	80133f4 <__ssvfiscanf_r+0x1b0>
 8013460:	220a      	movs	r2, #10
 8013462:	e7d7      	b.n	8013414 <__ssvfiscanf_r+0x1d0>
 8013464:	4629      	mov	r1, r5
 8013466:	4640      	mov	r0, r8
 8013468:	f000 fa6c 	bl	8013944 <__sccl>
 801346c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801346e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013472:	9341      	str	r3, [sp, #260]	@ 0x104
 8013474:	4605      	mov	r5, r0
 8013476:	2301      	movs	r3, #1
 8013478:	e7d7      	b.n	801342a <__ssvfiscanf_r+0x1e6>
 801347a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801347c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013480:	9341      	str	r3, [sp, #260]	@ 0x104
 8013482:	2300      	movs	r3, #0
 8013484:	e7d1      	b.n	801342a <__ssvfiscanf_r+0x1e6>
 8013486:	2302      	movs	r3, #2
 8013488:	e7cf      	b.n	801342a <__ssvfiscanf_r+0x1e6>
 801348a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801348c:	06c3      	lsls	r3, r0, #27
 801348e:	f53f aefe 	bmi.w	801328e <__ssvfiscanf_r+0x4a>
 8013492:	9b00      	ldr	r3, [sp, #0]
 8013494:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013496:	1d19      	adds	r1, r3, #4
 8013498:	9100      	str	r1, [sp, #0]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	07c0      	lsls	r0, r0, #31
 801349e:	bf4c      	ite	mi
 80134a0:	801a      	strhmi	r2, [r3, #0]
 80134a2:	601a      	strpl	r2, [r3, #0]
 80134a4:	e6f3      	b.n	801328e <__ssvfiscanf_r+0x4a>
 80134a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80134a8:	4621      	mov	r1, r4
 80134aa:	4630      	mov	r0, r6
 80134ac:	4798      	blx	r3
 80134ae:	2800      	cmp	r0, #0
 80134b0:	d0bf      	beq.n	8013432 <__ssvfiscanf_r+0x1ee>
 80134b2:	e79f      	b.n	80133f4 <__ssvfiscanf_r+0x1b0>
 80134b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80134b6:	3201      	adds	r2, #1
 80134b8:	9245      	str	r2, [sp, #276]	@ 0x114
 80134ba:	6862      	ldr	r2, [r4, #4]
 80134bc:	3a01      	subs	r2, #1
 80134be:	2a00      	cmp	r2, #0
 80134c0:	6062      	str	r2, [r4, #4]
 80134c2:	dd02      	ble.n	80134ca <__ssvfiscanf_r+0x286>
 80134c4:	3301      	adds	r3, #1
 80134c6:	6023      	str	r3, [r4, #0]
 80134c8:	e7b6      	b.n	8013438 <__ssvfiscanf_r+0x1f4>
 80134ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80134cc:	4621      	mov	r1, r4
 80134ce:	4630      	mov	r0, r6
 80134d0:	4798      	blx	r3
 80134d2:	2800      	cmp	r0, #0
 80134d4:	d0b0      	beq.n	8013438 <__ssvfiscanf_r+0x1f4>
 80134d6:	e78d      	b.n	80133f4 <__ssvfiscanf_r+0x1b0>
 80134d8:	2b04      	cmp	r3, #4
 80134da:	dc0f      	bgt.n	80134fc <__ssvfiscanf_r+0x2b8>
 80134dc:	466b      	mov	r3, sp
 80134de:	4622      	mov	r2, r4
 80134e0:	a941      	add	r1, sp, #260	@ 0x104
 80134e2:	4630      	mov	r0, r6
 80134e4:	f000 f87c 	bl	80135e0 <_scanf_i>
 80134e8:	e7b4      	b.n	8013454 <__ssvfiscanf_r+0x210>
 80134ea:	bf00      	nop
 80134ec:	08013195 	.word	0x08013195
 80134f0:	0801320b 	.word	0x0801320b
 80134f4:	08015e69 	.word	0x08015e69
 80134f8:	08015f6f 	.word	0x08015f6f
 80134fc:	4b0a      	ldr	r3, [pc, #40]	@ (8013528 <__ssvfiscanf_r+0x2e4>)
 80134fe:	2b00      	cmp	r3, #0
 8013500:	f43f aec5 	beq.w	801328e <__ssvfiscanf_r+0x4a>
 8013504:	466b      	mov	r3, sp
 8013506:	4622      	mov	r2, r4
 8013508:	a941      	add	r1, sp, #260	@ 0x104
 801350a:	4630      	mov	r0, r6
 801350c:	f7fc fe2e 	bl	801016c <_scanf_float>
 8013510:	e7a0      	b.n	8013454 <__ssvfiscanf_r+0x210>
 8013512:	89a3      	ldrh	r3, [r4, #12]
 8013514:	065b      	lsls	r3, r3, #25
 8013516:	f53f af71 	bmi.w	80133fc <__ssvfiscanf_r+0x1b8>
 801351a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801351e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013522:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8013524:	e7f9      	b.n	801351a <__ssvfiscanf_r+0x2d6>
 8013526:	bf00      	nop
 8013528:	0801016d 	.word	0x0801016d

0801352c <_scanf_chars>:
 801352c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013530:	4615      	mov	r5, r2
 8013532:	688a      	ldr	r2, [r1, #8]
 8013534:	4680      	mov	r8, r0
 8013536:	460c      	mov	r4, r1
 8013538:	b932      	cbnz	r2, 8013548 <_scanf_chars+0x1c>
 801353a:	698a      	ldr	r2, [r1, #24]
 801353c:	2a00      	cmp	r2, #0
 801353e:	bf14      	ite	ne
 8013540:	f04f 32ff 	movne.w	r2, #4294967295
 8013544:	2201      	moveq	r2, #1
 8013546:	608a      	str	r2, [r1, #8]
 8013548:	6822      	ldr	r2, [r4, #0]
 801354a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80135dc <_scanf_chars+0xb0>
 801354e:	06d1      	lsls	r1, r2, #27
 8013550:	bf5f      	itttt	pl
 8013552:	681a      	ldrpl	r2, [r3, #0]
 8013554:	1d11      	addpl	r1, r2, #4
 8013556:	6019      	strpl	r1, [r3, #0]
 8013558:	6816      	ldrpl	r6, [r2, #0]
 801355a:	2700      	movs	r7, #0
 801355c:	69a0      	ldr	r0, [r4, #24]
 801355e:	b188      	cbz	r0, 8013584 <_scanf_chars+0x58>
 8013560:	2801      	cmp	r0, #1
 8013562:	d107      	bne.n	8013574 <_scanf_chars+0x48>
 8013564:	682b      	ldr	r3, [r5, #0]
 8013566:	781a      	ldrb	r2, [r3, #0]
 8013568:	6963      	ldr	r3, [r4, #20]
 801356a:	5c9b      	ldrb	r3, [r3, r2]
 801356c:	b953      	cbnz	r3, 8013584 <_scanf_chars+0x58>
 801356e:	2f00      	cmp	r7, #0
 8013570:	d031      	beq.n	80135d6 <_scanf_chars+0xaa>
 8013572:	e022      	b.n	80135ba <_scanf_chars+0x8e>
 8013574:	2802      	cmp	r0, #2
 8013576:	d120      	bne.n	80135ba <_scanf_chars+0x8e>
 8013578:	682b      	ldr	r3, [r5, #0]
 801357a:	781b      	ldrb	r3, [r3, #0]
 801357c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013580:	071b      	lsls	r3, r3, #28
 8013582:	d41a      	bmi.n	80135ba <_scanf_chars+0x8e>
 8013584:	6823      	ldr	r3, [r4, #0]
 8013586:	06da      	lsls	r2, r3, #27
 8013588:	bf5e      	ittt	pl
 801358a:	682b      	ldrpl	r3, [r5, #0]
 801358c:	781b      	ldrbpl	r3, [r3, #0]
 801358e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013592:	682a      	ldr	r2, [r5, #0]
 8013594:	686b      	ldr	r3, [r5, #4]
 8013596:	3201      	adds	r2, #1
 8013598:	602a      	str	r2, [r5, #0]
 801359a:	68a2      	ldr	r2, [r4, #8]
 801359c:	3b01      	subs	r3, #1
 801359e:	3a01      	subs	r2, #1
 80135a0:	606b      	str	r3, [r5, #4]
 80135a2:	3701      	adds	r7, #1
 80135a4:	60a2      	str	r2, [r4, #8]
 80135a6:	b142      	cbz	r2, 80135ba <_scanf_chars+0x8e>
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	dcd7      	bgt.n	801355c <_scanf_chars+0x30>
 80135ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80135b0:	4629      	mov	r1, r5
 80135b2:	4640      	mov	r0, r8
 80135b4:	4798      	blx	r3
 80135b6:	2800      	cmp	r0, #0
 80135b8:	d0d0      	beq.n	801355c <_scanf_chars+0x30>
 80135ba:	6823      	ldr	r3, [r4, #0]
 80135bc:	f013 0310 	ands.w	r3, r3, #16
 80135c0:	d105      	bne.n	80135ce <_scanf_chars+0xa2>
 80135c2:	68e2      	ldr	r2, [r4, #12]
 80135c4:	3201      	adds	r2, #1
 80135c6:	60e2      	str	r2, [r4, #12]
 80135c8:	69a2      	ldr	r2, [r4, #24]
 80135ca:	b102      	cbz	r2, 80135ce <_scanf_chars+0xa2>
 80135cc:	7033      	strb	r3, [r6, #0]
 80135ce:	6923      	ldr	r3, [r4, #16]
 80135d0:	443b      	add	r3, r7
 80135d2:	6123      	str	r3, [r4, #16]
 80135d4:	2000      	movs	r0, #0
 80135d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135da:	bf00      	nop
 80135dc:	08015e69 	.word	0x08015e69

080135e0 <_scanf_i>:
 80135e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e4:	4698      	mov	r8, r3
 80135e6:	4b74      	ldr	r3, [pc, #464]	@ (80137b8 <_scanf_i+0x1d8>)
 80135e8:	460c      	mov	r4, r1
 80135ea:	4682      	mov	sl, r0
 80135ec:	4616      	mov	r6, r2
 80135ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80135f2:	b087      	sub	sp, #28
 80135f4:	ab03      	add	r3, sp, #12
 80135f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80135fa:	4b70      	ldr	r3, [pc, #448]	@ (80137bc <_scanf_i+0x1dc>)
 80135fc:	69a1      	ldr	r1, [r4, #24]
 80135fe:	4a70      	ldr	r2, [pc, #448]	@ (80137c0 <_scanf_i+0x1e0>)
 8013600:	2903      	cmp	r1, #3
 8013602:	bf08      	it	eq
 8013604:	461a      	moveq	r2, r3
 8013606:	68a3      	ldr	r3, [r4, #8]
 8013608:	9201      	str	r2, [sp, #4]
 801360a:	1e5a      	subs	r2, r3, #1
 801360c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013610:	bf88      	it	hi
 8013612:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013616:	4627      	mov	r7, r4
 8013618:	bf82      	ittt	hi
 801361a:	eb03 0905 	addhi.w	r9, r3, r5
 801361e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013622:	60a3      	strhi	r3, [r4, #8]
 8013624:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013628:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801362c:	bf98      	it	ls
 801362e:	f04f 0900 	movls.w	r9, #0
 8013632:	6023      	str	r3, [r4, #0]
 8013634:	463d      	mov	r5, r7
 8013636:	f04f 0b00 	mov.w	fp, #0
 801363a:	6831      	ldr	r1, [r6, #0]
 801363c:	ab03      	add	r3, sp, #12
 801363e:	7809      	ldrb	r1, [r1, #0]
 8013640:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013644:	2202      	movs	r2, #2
 8013646:	f7ec fdd3 	bl	80001f0 <memchr>
 801364a:	b328      	cbz	r0, 8013698 <_scanf_i+0xb8>
 801364c:	f1bb 0f01 	cmp.w	fp, #1
 8013650:	d159      	bne.n	8013706 <_scanf_i+0x126>
 8013652:	6862      	ldr	r2, [r4, #4]
 8013654:	b92a      	cbnz	r2, 8013662 <_scanf_i+0x82>
 8013656:	6822      	ldr	r2, [r4, #0]
 8013658:	2108      	movs	r1, #8
 801365a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801365e:	6061      	str	r1, [r4, #4]
 8013660:	6022      	str	r2, [r4, #0]
 8013662:	6822      	ldr	r2, [r4, #0]
 8013664:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8013668:	6022      	str	r2, [r4, #0]
 801366a:	68a2      	ldr	r2, [r4, #8]
 801366c:	1e51      	subs	r1, r2, #1
 801366e:	60a1      	str	r1, [r4, #8]
 8013670:	b192      	cbz	r2, 8013698 <_scanf_i+0xb8>
 8013672:	6832      	ldr	r2, [r6, #0]
 8013674:	1c51      	adds	r1, r2, #1
 8013676:	6031      	str	r1, [r6, #0]
 8013678:	7812      	ldrb	r2, [r2, #0]
 801367a:	f805 2b01 	strb.w	r2, [r5], #1
 801367e:	6872      	ldr	r2, [r6, #4]
 8013680:	3a01      	subs	r2, #1
 8013682:	2a00      	cmp	r2, #0
 8013684:	6072      	str	r2, [r6, #4]
 8013686:	dc07      	bgt.n	8013698 <_scanf_i+0xb8>
 8013688:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801368c:	4631      	mov	r1, r6
 801368e:	4650      	mov	r0, sl
 8013690:	4790      	blx	r2
 8013692:	2800      	cmp	r0, #0
 8013694:	f040 8085 	bne.w	80137a2 <_scanf_i+0x1c2>
 8013698:	f10b 0b01 	add.w	fp, fp, #1
 801369c:	f1bb 0f03 	cmp.w	fp, #3
 80136a0:	d1cb      	bne.n	801363a <_scanf_i+0x5a>
 80136a2:	6863      	ldr	r3, [r4, #4]
 80136a4:	b90b      	cbnz	r3, 80136aa <_scanf_i+0xca>
 80136a6:	230a      	movs	r3, #10
 80136a8:	6063      	str	r3, [r4, #4]
 80136aa:	6863      	ldr	r3, [r4, #4]
 80136ac:	4945      	ldr	r1, [pc, #276]	@ (80137c4 <_scanf_i+0x1e4>)
 80136ae:	6960      	ldr	r0, [r4, #20]
 80136b0:	1ac9      	subs	r1, r1, r3
 80136b2:	f000 f947 	bl	8013944 <__sccl>
 80136b6:	f04f 0b00 	mov.w	fp, #0
 80136ba:	68a3      	ldr	r3, [r4, #8]
 80136bc:	6822      	ldr	r2, [r4, #0]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d03d      	beq.n	801373e <_scanf_i+0x15e>
 80136c2:	6831      	ldr	r1, [r6, #0]
 80136c4:	6960      	ldr	r0, [r4, #20]
 80136c6:	f891 c000 	ldrb.w	ip, [r1]
 80136ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 80136ce:	2800      	cmp	r0, #0
 80136d0:	d035      	beq.n	801373e <_scanf_i+0x15e>
 80136d2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80136d6:	d124      	bne.n	8013722 <_scanf_i+0x142>
 80136d8:	0510      	lsls	r0, r2, #20
 80136da:	d522      	bpl.n	8013722 <_scanf_i+0x142>
 80136dc:	f10b 0b01 	add.w	fp, fp, #1
 80136e0:	f1b9 0f00 	cmp.w	r9, #0
 80136e4:	d003      	beq.n	80136ee <_scanf_i+0x10e>
 80136e6:	3301      	adds	r3, #1
 80136e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80136ec:	60a3      	str	r3, [r4, #8]
 80136ee:	6873      	ldr	r3, [r6, #4]
 80136f0:	3b01      	subs	r3, #1
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	6073      	str	r3, [r6, #4]
 80136f6:	dd1b      	ble.n	8013730 <_scanf_i+0x150>
 80136f8:	6833      	ldr	r3, [r6, #0]
 80136fa:	3301      	adds	r3, #1
 80136fc:	6033      	str	r3, [r6, #0]
 80136fe:	68a3      	ldr	r3, [r4, #8]
 8013700:	3b01      	subs	r3, #1
 8013702:	60a3      	str	r3, [r4, #8]
 8013704:	e7d9      	b.n	80136ba <_scanf_i+0xda>
 8013706:	f1bb 0f02 	cmp.w	fp, #2
 801370a:	d1ae      	bne.n	801366a <_scanf_i+0x8a>
 801370c:	6822      	ldr	r2, [r4, #0]
 801370e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8013712:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8013716:	d1bf      	bne.n	8013698 <_scanf_i+0xb8>
 8013718:	2110      	movs	r1, #16
 801371a:	6061      	str	r1, [r4, #4]
 801371c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013720:	e7a2      	b.n	8013668 <_scanf_i+0x88>
 8013722:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8013726:	6022      	str	r2, [r4, #0]
 8013728:	780b      	ldrb	r3, [r1, #0]
 801372a:	f805 3b01 	strb.w	r3, [r5], #1
 801372e:	e7de      	b.n	80136ee <_scanf_i+0x10e>
 8013730:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013734:	4631      	mov	r1, r6
 8013736:	4650      	mov	r0, sl
 8013738:	4798      	blx	r3
 801373a:	2800      	cmp	r0, #0
 801373c:	d0df      	beq.n	80136fe <_scanf_i+0x11e>
 801373e:	6823      	ldr	r3, [r4, #0]
 8013740:	05d9      	lsls	r1, r3, #23
 8013742:	d50d      	bpl.n	8013760 <_scanf_i+0x180>
 8013744:	42bd      	cmp	r5, r7
 8013746:	d909      	bls.n	801375c <_scanf_i+0x17c>
 8013748:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801374c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013750:	4632      	mov	r2, r6
 8013752:	4650      	mov	r0, sl
 8013754:	4798      	blx	r3
 8013756:	f105 39ff 	add.w	r9, r5, #4294967295
 801375a:	464d      	mov	r5, r9
 801375c:	42bd      	cmp	r5, r7
 801375e:	d028      	beq.n	80137b2 <_scanf_i+0x1d2>
 8013760:	6822      	ldr	r2, [r4, #0]
 8013762:	f012 0210 	ands.w	r2, r2, #16
 8013766:	d113      	bne.n	8013790 <_scanf_i+0x1b0>
 8013768:	702a      	strb	r2, [r5, #0]
 801376a:	6863      	ldr	r3, [r4, #4]
 801376c:	9e01      	ldr	r6, [sp, #4]
 801376e:	4639      	mov	r1, r7
 8013770:	4650      	mov	r0, sl
 8013772:	47b0      	blx	r6
 8013774:	f8d8 3000 	ldr.w	r3, [r8]
 8013778:	6821      	ldr	r1, [r4, #0]
 801377a:	1d1a      	adds	r2, r3, #4
 801377c:	f8c8 2000 	str.w	r2, [r8]
 8013780:	f011 0f20 	tst.w	r1, #32
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	d00f      	beq.n	80137a8 <_scanf_i+0x1c8>
 8013788:	6018      	str	r0, [r3, #0]
 801378a:	68e3      	ldr	r3, [r4, #12]
 801378c:	3301      	adds	r3, #1
 801378e:	60e3      	str	r3, [r4, #12]
 8013790:	6923      	ldr	r3, [r4, #16]
 8013792:	1bed      	subs	r5, r5, r7
 8013794:	445d      	add	r5, fp
 8013796:	442b      	add	r3, r5
 8013798:	6123      	str	r3, [r4, #16]
 801379a:	2000      	movs	r0, #0
 801379c:	b007      	add	sp, #28
 801379e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a2:	f04f 0b00 	mov.w	fp, #0
 80137a6:	e7ca      	b.n	801373e <_scanf_i+0x15e>
 80137a8:	07ca      	lsls	r2, r1, #31
 80137aa:	bf4c      	ite	mi
 80137ac:	8018      	strhmi	r0, [r3, #0]
 80137ae:	6018      	strpl	r0, [r3, #0]
 80137b0:	e7eb      	b.n	801378a <_scanf_i+0x1aa>
 80137b2:	2001      	movs	r0, #1
 80137b4:	e7f2      	b.n	801379c <_scanf_i+0x1bc>
 80137b6:	bf00      	nop
 80137b8:	08015a3c 	.word	0x08015a3c
 80137bc:	08012ee1 	.word	0x08012ee1
 80137c0:	08014275 	.word	0x08014275
 80137c4:	08015f8a 	.word	0x08015f8a

080137c8 <__sflush_r>:
 80137c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80137cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137d0:	0716      	lsls	r6, r2, #28
 80137d2:	4605      	mov	r5, r0
 80137d4:	460c      	mov	r4, r1
 80137d6:	d454      	bmi.n	8013882 <__sflush_r+0xba>
 80137d8:	684b      	ldr	r3, [r1, #4]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	dc02      	bgt.n	80137e4 <__sflush_r+0x1c>
 80137de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	dd48      	ble.n	8013876 <__sflush_r+0xae>
 80137e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80137e6:	2e00      	cmp	r6, #0
 80137e8:	d045      	beq.n	8013876 <__sflush_r+0xae>
 80137ea:	2300      	movs	r3, #0
 80137ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80137f0:	682f      	ldr	r7, [r5, #0]
 80137f2:	6a21      	ldr	r1, [r4, #32]
 80137f4:	602b      	str	r3, [r5, #0]
 80137f6:	d030      	beq.n	801385a <__sflush_r+0x92>
 80137f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80137fa:	89a3      	ldrh	r3, [r4, #12]
 80137fc:	0759      	lsls	r1, r3, #29
 80137fe:	d505      	bpl.n	801380c <__sflush_r+0x44>
 8013800:	6863      	ldr	r3, [r4, #4]
 8013802:	1ad2      	subs	r2, r2, r3
 8013804:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013806:	b10b      	cbz	r3, 801380c <__sflush_r+0x44>
 8013808:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801380a:	1ad2      	subs	r2, r2, r3
 801380c:	2300      	movs	r3, #0
 801380e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013810:	6a21      	ldr	r1, [r4, #32]
 8013812:	4628      	mov	r0, r5
 8013814:	47b0      	blx	r6
 8013816:	1c43      	adds	r3, r0, #1
 8013818:	89a3      	ldrh	r3, [r4, #12]
 801381a:	d106      	bne.n	801382a <__sflush_r+0x62>
 801381c:	6829      	ldr	r1, [r5, #0]
 801381e:	291d      	cmp	r1, #29
 8013820:	d82b      	bhi.n	801387a <__sflush_r+0xb2>
 8013822:	4a2a      	ldr	r2, [pc, #168]	@ (80138cc <__sflush_r+0x104>)
 8013824:	410a      	asrs	r2, r1
 8013826:	07d6      	lsls	r6, r2, #31
 8013828:	d427      	bmi.n	801387a <__sflush_r+0xb2>
 801382a:	2200      	movs	r2, #0
 801382c:	6062      	str	r2, [r4, #4]
 801382e:	04d9      	lsls	r1, r3, #19
 8013830:	6922      	ldr	r2, [r4, #16]
 8013832:	6022      	str	r2, [r4, #0]
 8013834:	d504      	bpl.n	8013840 <__sflush_r+0x78>
 8013836:	1c42      	adds	r2, r0, #1
 8013838:	d101      	bne.n	801383e <__sflush_r+0x76>
 801383a:	682b      	ldr	r3, [r5, #0]
 801383c:	b903      	cbnz	r3, 8013840 <__sflush_r+0x78>
 801383e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013840:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013842:	602f      	str	r7, [r5, #0]
 8013844:	b1b9      	cbz	r1, 8013876 <__sflush_r+0xae>
 8013846:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801384a:	4299      	cmp	r1, r3
 801384c:	d002      	beq.n	8013854 <__sflush_r+0x8c>
 801384e:	4628      	mov	r0, r5
 8013850:	f7fd ffc6 	bl	80117e0 <_free_r>
 8013854:	2300      	movs	r3, #0
 8013856:	6363      	str	r3, [r4, #52]	@ 0x34
 8013858:	e00d      	b.n	8013876 <__sflush_r+0xae>
 801385a:	2301      	movs	r3, #1
 801385c:	4628      	mov	r0, r5
 801385e:	47b0      	blx	r6
 8013860:	4602      	mov	r2, r0
 8013862:	1c50      	adds	r0, r2, #1
 8013864:	d1c9      	bne.n	80137fa <__sflush_r+0x32>
 8013866:	682b      	ldr	r3, [r5, #0]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d0c6      	beq.n	80137fa <__sflush_r+0x32>
 801386c:	2b1d      	cmp	r3, #29
 801386e:	d001      	beq.n	8013874 <__sflush_r+0xac>
 8013870:	2b16      	cmp	r3, #22
 8013872:	d11e      	bne.n	80138b2 <__sflush_r+0xea>
 8013874:	602f      	str	r7, [r5, #0]
 8013876:	2000      	movs	r0, #0
 8013878:	e022      	b.n	80138c0 <__sflush_r+0xf8>
 801387a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801387e:	b21b      	sxth	r3, r3
 8013880:	e01b      	b.n	80138ba <__sflush_r+0xf2>
 8013882:	690f      	ldr	r7, [r1, #16]
 8013884:	2f00      	cmp	r7, #0
 8013886:	d0f6      	beq.n	8013876 <__sflush_r+0xae>
 8013888:	0793      	lsls	r3, r2, #30
 801388a:	680e      	ldr	r6, [r1, #0]
 801388c:	bf08      	it	eq
 801388e:	694b      	ldreq	r3, [r1, #20]
 8013890:	600f      	str	r7, [r1, #0]
 8013892:	bf18      	it	ne
 8013894:	2300      	movne	r3, #0
 8013896:	eba6 0807 	sub.w	r8, r6, r7
 801389a:	608b      	str	r3, [r1, #8]
 801389c:	f1b8 0f00 	cmp.w	r8, #0
 80138a0:	dde9      	ble.n	8013876 <__sflush_r+0xae>
 80138a2:	6a21      	ldr	r1, [r4, #32]
 80138a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80138a6:	4643      	mov	r3, r8
 80138a8:	463a      	mov	r2, r7
 80138aa:	4628      	mov	r0, r5
 80138ac:	47b0      	blx	r6
 80138ae:	2800      	cmp	r0, #0
 80138b0:	dc08      	bgt.n	80138c4 <__sflush_r+0xfc>
 80138b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138ba:	81a3      	strh	r3, [r4, #12]
 80138bc:	f04f 30ff 	mov.w	r0, #4294967295
 80138c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138c4:	4407      	add	r7, r0
 80138c6:	eba8 0800 	sub.w	r8, r8, r0
 80138ca:	e7e7      	b.n	801389c <__sflush_r+0xd4>
 80138cc:	dfbffffe 	.word	0xdfbffffe

080138d0 <_fflush_r>:
 80138d0:	b538      	push	{r3, r4, r5, lr}
 80138d2:	690b      	ldr	r3, [r1, #16]
 80138d4:	4605      	mov	r5, r0
 80138d6:	460c      	mov	r4, r1
 80138d8:	b913      	cbnz	r3, 80138e0 <_fflush_r+0x10>
 80138da:	2500      	movs	r5, #0
 80138dc:	4628      	mov	r0, r5
 80138de:	bd38      	pop	{r3, r4, r5, pc}
 80138e0:	b118      	cbz	r0, 80138ea <_fflush_r+0x1a>
 80138e2:	6a03      	ldr	r3, [r0, #32]
 80138e4:	b90b      	cbnz	r3, 80138ea <_fflush_r+0x1a>
 80138e6:	f7fc fee1 	bl	80106ac <__sinit>
 80138ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d0f3      	beq.n	80138da <_fflush_r+0xa>
 80138f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80138f4:	07d0      	lsls	r0, r2, #31
 80138f6:	d404      	bmi.n	8013902 <_fflush_r+0x32>
 80138f8:	0599      	lsls	r1, r3, #22
 80138fa:	d402      	bmi.n	8013902 <_fflush_r+0x32>
 80138fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80138fe:	f7fd f8ec 	bl	8010ada <__retarget_lock_acquire_recursive>
 8013902:	4628      	mov	r0, r5
 8013904:	4621      	mov	r1, r4
 8013906:	f7ff ff5f 	bl	80137c8 <__sflush_r>
 801390a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801390c:	07da      	lsls	r2, r3, #31
 801390e:	4605      	mov	r5, r0
 8013910:	d4e4      	bmi.n	80138dc <_fflush_r+0xc>
 8013912:	89a3      	ldrh	r3, [r4, #12]
 8013914:	059b      	lsls	r3, r3, #22
 8013916:	d4e1      	bmi.n	80138dc <_fflush_r+0xc>
 8013918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801391a:	f7fd f8df 	bl	8010adc <__retarget_lock_release_recursive>
 801391e:	e7dd      	b.n	80138dc <_fflush_r+0xc>

08013920 <fiprintf>:
 8013920:	b40e      	push	{r1, r2, r3}
 8013922:	b503      	push	{r0, r1, lr}
 8013924:	4601      	mov	r1, r0
 8013926:	ab03      	add	r3, sp, #12
 8013928:	4805      	ldr	r0, [pc, #20]	@ (8013940 <fiprintf+0x20>)
 801392a:	f853 2b04 	ldr.w	r2, [r3], #4
 801392e:	6800      	ldr	r0, [r0, #0]
 8013930:	9301      	str	r3, [sp, #4]
 8013932:	f000 fcd7 	bl	80142e4 <_vfiprintf_r>
 8013936:	b002      	add	sp, #8
 8013938:	f85d eb04 	ldr.w	lr, [sp], #4
 801393c:	b003      	add	sp, #12
 801393e:	4770      	bx	lr
 8013940:	200000c4 	.word	0x200000c4

08013944 <__sccl>:
 8013944:	b570      	push	{r4, r5, r6, lr}
 8013946:	780b      	ldrb	r3, [r1, #0]
 8013948:	4604      	mov	r4, r0
 801394a:	2b5e      	cmp	r3, #94	@ 0x5e
 801394c:	bf0b      	itete	eq
 801394e:	784b      	ldrbeq	r3, [r1, #1]
 8013950:	1c4a      	addne	r2, r1, #1
 8013952:	1c8a      	addeq	r2, r1, #2
 8013954:	2100      	movne	r1, #0
 8013956:	bf08      	it	eq
 8013958:	2101      	moveq	r1, #1
 801395a:	3801      	subs	r0, #1
 801395c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8013960:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013964:	42a8      	cmp	r0, r5
 8013966:	d1fb      	bne.n	8013960 <__sccl+0x1c>
 8013968:	b90b      	cbnz	r3, 801396e <__sccl+0x2a>
 801396a:	1e50      	subs	r0, r2, #1
 801396c:	bd70      	pop	{r4, r5, r6, pc}
 801396e:	f081 0101 	eor.w	r1, r1, #1
 8013972:	54e1      	strb	r1, [r4, r3]
 8013974:	4610      	mov	r0, r2
 8013976:	4602      	mov	r2, r0
 8013978:	f812 5b01 	ldrb.w	r5, [r2], #1
 801397c:	2d2d      	cmp	r5, #45	@ 0x2d
 801397e:	d005      	beq.n	801398c <__sccl+0x48>
 8013980:	2d5d      	cmp	r5, #93	@ 0x5d
 8013982:	d016      	beq.n	80139b2 <__sccl+0x6e>
 8013984:	2d00      	cmp	r5, #0
 8013986:	d0f1      	beq.n	801396c <__sccl+0x28>
 8013988:	462b      	mov	r3, r5
 801398a:	e7f2      	b.n	8013972 <__sccl+0x2e>
 801398c:	7846      	ldrb	r6, [r0, #1]
 801398e:	2e5d      	cmp	r6, #93	@ 0x5d
 8013990:	d0fa      	beq.n	8013988 <__sccl+0x44>
 8013992:	42b3      	cmp	r3, r6
 8013994:	dcf8      	bgt.n	8013988 <__sccl+0x44>
 8013996:	3002      	adds	r0, #2
 8013998:	461a      	mov	r2, r3
 801399a:	3201      	adds	r2, #1
 801399c:	4296      	cmp	r6, r2
 801399e:	54a1      	strb	r1, [r4, r2]
 80139a0:	dcfb      	bgt.n	801399a <__sccl+0x56>
 80139a2:	1af2      	subs	r2, r6, r3
 80139a4:	3a01      	subs	r2, #1
 80139a6:	1c5d      	adds	r5, r3, #1
 80139a8:	42b3      	cmp	r3, r6
 80139aa:	bfa8      	it	ge
 80139ac:	2200      	movge	r2, #0
 80139ae:	18ab      	adds	r3, r5, r2
 80139b0:	e7e1      	b.n	8013976 <__sccl+0x32>
 80139b2:	4610      	mov	r0, r2
 80139b4:	e7da      	b.n	801396c <__sccl+0x28>

080139b6 <__submore>:
 80139b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139ba:	460c      	mov	r4, r1
 80139bc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80139be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80139c2:	4299      	cmp	r1, r3
 80139c4:	d11d      	bne.n	8013a02 <__submore+0x4c>
 80139c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80139ca:	f7fb fea9 	bl	800f720 <_malloc_r>
 80139ce:	b918      	cbnz	r0, 80139d8 <__submore+0x22>
 80139d0:	f04f 30ff 	mov.w	r0, #4294967295
 80139d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80139dc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80139de:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80139e2:	6360      	str	r0, [r4, #52]	@ 0x34
 80139e4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80139e8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80139ec:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80139f0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80139f4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80139f8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80139fc:	6020      	str	r0, [r4, #0]
 80139fe:	2000      	movs	r0, #0
 8013a00:	e7e8      	b.n	80139d4 <__submore+0x1e>
 8013a02:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8013a04:	0077      	lsls	r7, r6, #1
 8013a06:	463a      	mov	r2, r7
 8013a08:	f000 fb97 	bl	801413a <_realloc_r>
 8013a0c:	4605      	mov	r5, r0
 8013a0e:	2800      	cmp	r0, #0
 8013a10:	d0de      	beq.n	80139d0 <__submore+0x1a>
 8013a12:	eb00 0806 	add.w	r8, r0, r6
 8013a16:	4601      	mov	r1, r0
 8013a18:	4632      	mov	r2, r6
 8013a1a:	4640      	mov	r0, r8
 8013a1c:	f7fd f85f 	bl	8010ade <memcpy>
 8013a20:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8013a24:	f8c4 8000 	str.w	r8, [r4]
 8013a28:	e7e9      	b.n	80139fe <__submore+0x48>

08013a2a <memmove>:
 8013a2a:	4288      	cmp	r0, r1
 8013a2c:	b510      	push	{r4, lr}
 8013a2e:	eb01 0402 	add.w	r4, r1, r2
 8013a32:	d902      	bls.n	8013a3a <memmove+0x10>
 8013a34:	4284      	cmp	r4, r0
 8013a36:	4623      	mov	r3, r4
 8013a38:	d807      	bhi.n	8013a4a <memmove+0x20>
 8013a3a:	1e43      	subs	r3, r0, #1
 8013a3c:	42a1      	cmp	r1, r4
 8013a3e:	d008      	beq.n	8013a52 <memmove+0x28>
 8013a40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013a48:	e7f8      	b.n	8013a3c <memmove+0x12>
 8013a4a:	4402      	add	r2, r0
 8013a4c:	4601      	mov	r1, r0
 8013a4e:	428a      	cmp	r2, r1
 8013a50:	d100      	bne.n	8013a54 <memmove+0x2a>
 8013a52:	bd10      	pop	{r4, pc}
 8013a54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013a58:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013a5c:	e7f7      	b.n	8013a4e <memmove+0x24>
	...

08013a60 <nan>:
 8013a60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013a68 <nan+0x8>
 8013a64:	4770      	bx	lr
 8013a66:	bf00      	nop
 8013a68:	00000000 	.word	0x00000000
 8013a6c:	7ff80000 	.word	0x7ff80000

08013a70 <abort>:
 8013a70:	b508      	push	{r3, lr}
 8013a72:	2006      	movs	r0, #6
 8013a74:	f000 fe0a 	bl	801468c <raise>
 8013a78:	2001      	movs	r0, #1
 8013a7a:	f7f1 fb2f 	bl	80050dc <_exit>

08013a7e <_calloc_r>:
 8013a7e:	b570      	push	{r4, r5, r6, lr}
 8013a80:	fba1 5402 	umull	r5, r4, r1, r2
 8013a84:	b93c      	cbnz	r4, 8013a96 <_calloc_r+0x18>
 8013a86:	4629      	mov	r1, r5
 8013a88:	f7fb fe4a 	bl	800f720 <_malloc_r>
 8013a8c:	4606      	mov	r6, r0
 8013a8e:	b928      	cbnz	r0, 8013a9c <_calloc_r+0x1e>
 8013a90:	2600      	movs	r6, #0
 8013a92:	4630      	mov	r0, r6
 8013a94:	bd70      	pop	{r4, r5, r6, pc}
 8013a96:	220c      	movs	r2, #12
 8013a98:	6002      	str	r2, [r0, #0]
 8013a9a:	e7f9      	b.n	8013a90 <_calloc_r+0x12>
 8013a9c:	462a      	mov	r2, r5
 8013a9e:	4621      	mov	r1, r4
 8013aa0:	f7fc fefd 	bl	801089e <memset>
 8013aa4:	e7f5      	b.n	8013a92 <_calloc_r+0x14>

08013aa6 <rshift>:
 8013aa6:	6903      	ldr	r3, [r0, #16]
 8013aa8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ab0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013ab4:	f100 0414 	add.w	r4, r0, #20
 8013ab8:	dd45      	ble.n	8013b46 <rshift+0xa0>
 8013aba:	f011 011f 	ands.w	r1, r1, #31
 8013abe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013ac2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013ac6:	d10c      	bne.n	8013ae2 <rshift+0x3c>
 8013ac8:	f100 0710 	add.w	r7, r0, #16
 8013acc:	4629      	mov	r1, r5
 8013ace:	42b1      	cmp	r1, r6
 8013ad0:	d334      	bcc.n	8013b3c <rshift+0x96>
 8013ad2:	1a9b      	subs	r3, r3, r2
 8013ad4:	009b      	lsls	r3, r3, #2
 8013ad6:	1eea      	subs	r2, r5, #3
 8013ad8:	4296      	cmp	r6, r2
 8013ada:	bf38      	it	cc
 8013adc:	2300      	movcc	r3, #0
 8013ade:	4423      	add	r3, r4
 8013ae0:	e015      	b.n	8013b0e <rshift+0x68>
 8013ae2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013ae6:	f1c1 0820 	rsb	r8, r1, #32
 8013aea:	40cf      	lsrs	r7, r1
 8013aec:	f105 0e04 	add.w	lr, r5, #4
 8013af0:	46a1      	mov	r9, r4
 8013af2:	4576      	cmp	r6, lr
 8013af4:	46f4      	mov	ip, lr
 8013af6:	d815      	bhi.n	8013b24 <rshift+0x7e>
 8013af8:	1a9a      	subs	r2, r3, r2
 8013afa:	0092      	lsls	r2, r2, #2
 8013afc:	3a04      	subs	r2, #4
 8013afe:	3501      	adds	r5, #1
 8013b00:	42ae      	cmp	r6, r5
 8013b02:	bf38      	it	cc
 8013b04:	2200      	movcc	r2, #0
 8013b06:	18a3      	adds	r3, r4, r2
 8013b08:	50a7      	str	r7, [r4, r2]
 8013b0a:	b107      	cbz	r7, 8013b0e <rshift+0x68>
 8013b0c:	3304      	adds	r3, #4
 8013b0e:	1b1a      	subs	r2, r3, r4
 8013b10:	42a3      	cmp	r3, r4
 8013b12:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013b16:	bf08      	it	eq
 8013b18:	2300      	moveq	r3, #0
 8013b1a:	6102      	str	r2, [r0, #16]
 8013b1c:	bf08      	it	eq
 8013b1e:	6143      	streq	r3, [r0, #20]
 8013b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b24:	f8dc c000 	ldr.w	ip, [ip]
 8013b28:	fa0c fc08 	lsl.w	ip, ip, r8
 8013b2c:	ea4c 0707 	orr.w	r7, ip, r7
 8013b30:	f849 7b04 	str.w	r7, [r9], #4
 8013b34:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013b38:	40cf      	lsrs	r7, r1
 8013b3a:	e7da      	b.n	8013af2 <rshift+0x4c>
 8013b3c:	f851 cb04 	ldr.w	ip, [r1], #4
 8013b40:	f847 cf04 	str.w	ip, [r7, #4]!
 8013b44:	e7c3      	b.n	8013ace <rshift+0x28>
 8013b46:	4623      	mov	r3, r4
 8013b48:	e7e1      	b.n	8013b0e <rshift+0x68>

08013b4a <__hexdig_fun>:
 8013b4a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8013b4e:	2b09      	cmp	r3, #9
 8013b50:	d802      	bhi.n	8013b58 <__hexdig_fun+0xe>
 8013b52:	3820      	subs	r0, #32
 8013b54:	b2c0      	uxtb	r0, r0
 8013b56:	4770      	bx	lr
 8013b58:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8013b5c:	2b05      	cmp	r3, #5
 8013b5e:	d801      	bhi.n	8013b64 <__hexdig_fun+0x1a>
 8013b60:	3847      	subs	r0, #71	@ 0x47
 8013b62:	e7f7      	b.n	8013b54 <__hexdig_fun+0xa>
 8013b64:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013b68:	2b05      	cmp	r3, #5
 8013b6a:	d801      	bhi.n	8013b70 <__hexdig_fun+0x26>
 8013b6c:	3827      	subs	r0, #39	@ 0x27
 8013b6e:	e7f1      	b.n	8013b54 <__hexdig_fun+0xa>
 8013b70:	2000      	movs	r0, #0
 8013b72:	4770      	bx	lr

08013b74 <__gethex>:
 8013b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b78:	b085      	sub	sp, #20
 8013b7a:	468a      	mov	sl, r1
 8013b7c:	9302      	str	r3, [sp, #8]
 8013b7e:	680b      	ldr	r3, [r1, #0]
 8013b80:	9001      	str	r0, [sp, #4]
 8013b82:	4690      	mov	r8, r2
 8013b84:	1c9c      	adds	r4, r3, #2
 8013b86:	46a1      	mov	r9, r4
 8013b88:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013b8c:	2830      	cmp	r0, #48	@ 0x30
 8013b8e:	d0fa      	beq.n	8013b86 <__gethex+0x12>
 8013b90:	eba9 0303 	sub.w	r3, r9, r3
 8013b94:	f1a3 0b02 	sub.w	fp, r3, #2
 8013b98:	f7ff ffd7 	bl	8013b4a <__hexdig_fun>
 8013b9c:	4605      	mov	r5, r0
 8013b9e:	2800      	cmp	r0, #0
 8013ba0:	d168      	bne.n	8013c74 <__gethex+0x100>
 8013ba2:	49a0      	ldr	r1, [pc, #640]	@ (8013e24 <__gethex+0x2b0>)
 8013ba4:	2201      	movs	r2, #1
 8013ba6:	4648      	mov	r0, r9
 8013ba8:	f7fc fe90 	bl	80108cc <strncmp>
 8013bac:	4607      	mov	r7, r0
 8013bae:	2800      	cmp	r0, #0
 8013bb0:	d167      	bne.n	8013c82 <__gethex+0x10e>
 8013bb2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013bb6:	4626      	mov	r6, r4
 8013bb8:	f7ff ffc7 	bl	8013b4a <__hexdig_fun>
 8013bbc:	2800      	cmp	r0, #0
 8013bbe:	d062      	beq.n	8013c86 <__gethex+0x112>
 8013bc0:	4623      	mov	r3, r4
 8013bc2:	7818      	ldrb	r0, [r3, #0]
 8013bc4:	2830      	cmp	r0, #48	@ 0x30
 8013bc6:	4699      	mov	r9, r3
 8013bc8:	f103 0301 	add.w	r3, r3, #1
 8013bcc:	d0f9      	beq.n	8013bc2 <__gethex+0x4e>
 8013bce:	f7ff ffbc 	bl	8013b4a <__hexdig_fun>
 8013bd2:	fab0 f580 	clz	r5, r0
 8013bd6:	096d      	lsrs	r5, r5, #5
 8013bd8:	f04f 0b01 	mov.w	fp, #1
 8013bdc:	464a      	mov	r2, r9
 8013bde:	4616      	mov	r6, r2
 8013be0:	3201      	adds	r2, #1
 8013be2:	7830      	ldrb	r0, [r6, #0]
 8013be4:	f7ff ffb1 	bl	8013b4a <__hexdig_fun>
 8013be8:	2800      	cmp	r0, #0
 8013bea:	d1f8      	bne.n	8013bde <__gethex+0x6a>
 8013bec:	498d      	ldr	r1, [pc, #564]	@ (8013e24 <__gethex+0x2b0>)
 8013bee:	2201      	movs	r2, #1
 8013bf0:	4630      	mov	r0, r6
 8013bf2:	f7fc fe6b 	bl	80108cc <strncmp>
 8013bf6:	2800      	cmp	r0, #0
 8013bf8:	d13f      	bne.n	8013c7a <__gethex+0x106>
 8013bfa:	b944      	cbnz	r4, 8013c0e <__gethex+0x9a>
 8013bfc:	1c74      	adds	r4, r6, #1
 8013bfe:	4622      	mov	r2, r4
 8013c00:	4616      	mov	r6, r2
 8013c02:	3201      	adds	r2, #1
 8013c04:	7830      	ldrb	r0, [r6, #0]
 8013c06:	f7ff ffa0 	bl	8013b4a <__hexdig_fun>
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	d1f8      	bne.n	8013c00 <__gethex+0x8c>
 8013c0e:	1ba4      	subs	r4, r4, r6
 8013c10:	00a7      	lsls	r7, r4, #2
 8013c12:	7833      	ldrb	r3, [r6, #0]
 8013c14:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013c18:	2b50      	cmp	r3, #80	@ 0x50
 8013c1a:	d13e      	bne.n	8013c9a <__gethex+0x126>
 8013c1c:	7873      	ldrb	r3, [r6, #1]
 8013c1e:	2b2b      	cmp	r3, #43	@ 0x2b
 8013c20:	d033      	beq.n	8013c8a <__gethex+0x116>
 8013c22:	2b2d      	cmp	r3, #45	@ 0x2d
 8013c24:	d034      	beq.n	8013c90 <__gethex+0x11c>
 8013c26:	1c71      	adds	r1, r6, #1
 8013c28:	2400      	movs	r4, #0
 8013c2a:	7808      	ldrb	r0, [r1, #0]
 8013c2c:	f7ff ff8d 	bl	8013b4a <__hexdig_fun>
 8013c30:	1e43      	subs	r3, r0, #1
 8013c32:	b2db      	uxtb	r3, r3
 8013c34:	2b18      	cmp	r3, #24
 8013c36:	d830      	bhi.n	8013c9a <__gethex+0x126>
 8013c38:	f1a0 0210 	sub.w	r2, r0, #16
 8013c3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013c40:	f7ff ff83 	bl	8013b4a <__hexdig_fun>
 8013c44:	f100 3cff 	add.w	ip, r0, #4294967295
 8013c48:	fa5f fc8c 	uxtb.w	ip, ip
 8013c4c:	f1bc 0f18 	cmp.w	ip, #24
 8013c50:	f04f 030a 	mov.w	r3, #10
 8013c54:	d91e      	bls.n	8013c94 <__gethex+0x120>
 8013c56:	b104      	cbz	r4, 8013c5a <__gethex+0xe6>
 8013c58:	4252      	negs	r2, r2
 8013c5a:	4417      	add	r7, r2
 8013c5c:	f8ca 1000 	str.w	r1, [sl]
 8013c60:	b1ed      	cbz	r5, 8013c9e <__gethex+0x12a>
 8013c62:	f1bb 0f00 	cmp.w	fp, #0
 8013c66:	bf0c      	ite	eq
 8013c68:	2506      	moveq	r5, #6
 8013c6a:	2500      	movne	r5, #0
 8013c6c:	4628      	mov	r0, r5
 8013c6e:	b005      	add	sp, #20
 8013c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c74:	2500      	movs	r5, #0
 8013c76:	462c      	mov	r4, r5
 8013c78:	e7b0      	b.n	8013bdc <__gethex+0x68>
 8013c7a:	2c00      	cmp	r4, #0
 8013c7c:	d1c7      	bne.n	8013c0e <__gethex+0x9a>
 8013c7e:	4627      	mov	r7, r4
 8013c80:	e7c7      	b.n	8013c12 <__gethex+0x9e>
 8013c82:	464e      	mov	r6, r9
 8013c84:	462f      	mov	r7, r5
 8013c86:	2501      	movs	r5, #1
 8013c88:	e7c3      	b.n	8013c12 <__gethex+0x9e>
 8013c8a:	2400      	movs	r4, #0
 8013c8c:	1cb1      	adds	r1, r6, #2
 8013c8e:	e7cc      	b.n	8013c2a <__gethex+0xb6>
 8013c90:	2401      	movs	r4, #1
 8013c92:	e7fb      	b.n	8013c8c <__gethex+0x118>
 8013c94:	fb03 0002 	mla	r0, r3, r2, r0
 8013c98:	e7ce      	b.n	8013c38 <__gethex+0xc4>
 8013c9a:	4631      	mov	r1, r6
 8013c9c:	e7de      	b.n	8013c5c <__gethex+0xe8>
 8013c9e:	eba6 0309 	sub.w	r3, r6, r9
 8013ca2:	3b01      	subs	r3, #1
 8013ca4:	4629      	mov	r1, r5
 8013ca6:	2b07      	cmp	r3, #7
 8013ca8:	dc0a      	bgt.n	8013cc0 <__gethex+0x14c>
 8013caa:	9801      	ldr	r0, [sp, #4]
 8013cac:	f7fd fde2 	bl	8011874 <_Balloc>
 8013cb0:	4604      	mov	r4, r0
 8013cb2:	b940      	cbnz	r0, 8013cc6 <__gethex+0x152>
 8013cb4:	4b5c      	ldr	r3, [pc, #368]	@ (8013e28 <__gethex+0x2b4>)
 8013cb6:	4602      	mov	r2, r0
 8013cb8:	21e4      	movs	r1, #228	@ 0xe4
 8013cba:	485c      	ldr	r0, [pc, #368]	@ (8013e2c <__gethex+0x2b8>)
 8013cbc:	f7fc ff24 	bl	8010b08 <__assert_func>
 8013cc0:	3101      	adds	r1, #1
 8013cc2:	105b      	asrs	r3, r3, #1
 8013cc4:	e7ef      	b.n	8013ca6 <__gethex+0x132>
 8013cc6:	f100 0a14 	add.w	sl, r0, #20
 8013cca:	2300      	movs	r3, #0
 8013ccc:	4655      	mov	r5, sl
 8013cce:	469b      	mov	fp, r3
 8013cd0:	45b1      	cmp	r9, r6
 8013cd2:	d337      	bcc.n	8013d44 <__gethex+0x1d0>
 8013cd4:	f845 bb04 	str.w	fp, [r5], #4
 8013cd8:	eba5 050a 	sub.w	r5, r5, sl
 8013cdc:	10ad      	asrs	r5, r5, #2
 8013cde:	6125      	str	r5, [r4, #16]
 8013ce0:	4658      	mov	r0, fp
 8013ce2:	f7fd feb9 	bl	8011a58 <__hi0bits>
 8013ce6:	016d      	lsls	r5, r5, #5
 8013ce8:	f8d8 6000 	ldr.w	r6, [r8]
 8013cec:	1a2d      	subs	r5, r5, r0
 8013cee:	42b5      	cmp	r5, r6
 8013cf0:	dd54      	ble.n	8013d9c <__gethex+0x228>
 8013cf2:	1bad      	subs	r5, r5, r6
 8013cf4:	4629      	mov	r1, r5
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	f7fe fa4d 	bl	8012196 <__any_on>
 8013cfc:	4681      	mov	r9, r0
 8013cfe:	b178      	cbz	r0, 8013d20 <__gethex+0x1ac>
 8013d00:	1e6b      	subs	r3, r5, #1
 8013d02:	1159      	asrs	r1, r3, #5
 8013d04:	f003 021f 	and.w	r2, r3, #31
 8013d08:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013d0c:	f04f 0901 	mov.w	r9, #1
 8013d10:	fa09 f202 	lsl.w	r2, r9, r2
 8013d14:	420a      	tst	r2, r1
 8013d16:	d003      	beq.n	8013d20 <__gethex+0x1ac>
 8013d18:	454b      	cmp	r3, r9
 8013d1a:	dc36      	bgt.n	8013d8a <__gethex+0x216>
 8013d1c:	f04f 0902 	mov.w	r9, #2
 8013d20:	4629      	mov	r1, r5
 8013d22:	4620      	mov	r0, r4
 8013d24:	f7ff febf 	bl	8013aa6 <rshift>
 8013d28:	442f      	add	r7, r5
 8013d2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013d2e:	42bb      	cmp	r3, r7
 8013d30:	da42      	bge.n	8013db8 <__gethex+0x244>
 8013d32:	9801      	ldr	r0, [sp, #4]
 8013d34:	4621      	mov	r1, r4
 8013d36:	f7fd fddd 	bl	80118f4 <_Bfree>
 8013d3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	6013      	str	r3, [r2, #0]
 8013d40:	25a3      	movs	r5, #163	@ 0xa3
 8013d42:	e793      	b.n	8013c6c <__gethex+0xf8>
 8013d44:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013d48:	2a2e      	cmp	r2, #46	@ 0x2e
 8013d4a:	d012      	beq.n	8013d72 <__gethex+0x1fe>
 8013d4c:	2b20      	cmp	r3, #32
 8013d4e:	d104      	bne.n	8013d5a <__gethex+0x1e6>
 8013d50:	f845 bb04 	str.w	fp, [r5], #4
 8013d54:	f04f 0b00 	mov.w	fp, #0
 8013d58:	465b      	mov	r3, fp
 8013d5a:	7830      	ldrb	r0, [r6, #0]
 8013d5c:	9303      	str	r3, [sp, #12]
 8013d5e:	f7ff fef4 	bl	8013b4a <__hexdig_fun>
 8013d62:	9b03      	ldr	r3, [sp, #12]
 8013d64:	f000 000f 	and.w	r0, r0, #15
 8013d68:	4098      	lsls	r0, r3
 8013d6a:	ea4b 0b00 	orr.w	fp, fp, r0
 8013d6e:	3304      	adds	r3, #4
 8013d70:	e7ae      	b.n	8013cd0 <__gethex+0x15c>
 8013d72:	45b1      	cmp	r9, r6
 8013d74:	d8ea      	bhi.n	8013d4c <__gethex+0x1d8>
 8013d76:	492b      	ldr	r1, [pc, #172]	@ (8013e24 <__gethex+0x2b0>)
 8013d78:	9303      	str	r3, [sp, #12]
 8013d7a:	2201      	movs	r2, #1
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	f7fc fda5 	bl	80108cc <strncmp>
 8013d82:	9b03      	ldr	r3, [sp, #12]
 8013d84:	2800      	cmp	r0, #0
 8013d86:	d1e1      	bne.n	8013d4c <__gethex+0x1d8>
 8013d88:	e7a2      	b.n	8013cd0 <__gethex+0x15c>
 8013d8a:	1ea9      	subs	r1, r5, #2
 8013d8c:	4620      	mov	r0, r4
 8013d8e:	f7fe fa02 	bl	8012196 <__any_on>
 8013d92:	2800      	cmp	r0, #0
 8013d94:	d0c2      	beq.n	8013d1c <__gethex+0x1a8>
 8013d96:	f04f 0903 	mov.w	r9, #3
 8013d9a:	e7c1      	b.n	8013d20 <__gethex+0x1ac>
 8013d9c:	da09      	bge.n	8013db2 <__gethex+0x23e>
 8013d9e:	1b75      	subs	r5, r6, r5
 8013da0:	4621      	mov	r1, r4
 8013da2:	9801      	ldr	r0, [sp, #4]
 8013da4:	462a      	mov	r2, r5
 8013da6:	f7fd ffbd 	bl	8011d24 <__lshift>
 8013daa:	1b7f      	subs	r7, r7, r5
 8013dac:	4604      	mov	r4, r0
 8013dae:	f100 0a14 	add.w	sl, r0, #20
 8013db2:	f04f 0900 	mov.w	r9, #0
 8013db6:	e7b8      	b.n	8013d2a <__gethex+0x1b6>
 8013db8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013dbc:	42bd      	cmp	r5, r7
 8013dbe:	dd6f      	ble.n	8013ea0 <__gethex+0x32c>
 8013dc0:	1bed      	subs	r5, r5, r7
 8013dc2:	42ae      	cmp	r6, r5
 8013dc4:	dc34      	bgt.n	8013e30 <__gethex+0x2bc>
 8013dc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013dca:	2b02      	cmp	r3, #2
 8013dcc:	d022      	beq.n	8013e14 <__gethex+0x2a0>
 8013dce:	2b03      	cmp	r3, #3
 8013dd0:	d024      	beq.n	8013e1c <__gethex+0x2a8>
 8013dd2:	2b01      	cmp	r3, #1
 8013dd4:	d115      	bne.n	8013e02 <__gethex+0x28e>
 8013dd6:	42ae      	cmp	r6, r5
 8013dd8:	d113      	bne.n	8013e02 <__gethex+0x28e>
 8013dda:	2e01      	cmp	r6, #1
 8013ddc:	d10b      	bne.n	8013df6 <__gethex+0x282>
 8013dde:	9a02      	ldr	r2, [sp, #8]
 8013de0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013de4:	6013      	str	r3, [r2, #0]
 8013de6:	2301      	movs	r3, #1
 8013de8:	6123      	str	r3, [r4, #16]
 8013dea:	f8ca 3000 	str.w	r3, [sl]
 8013dee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013df0:	2562      	movs	r5, #98	@ 0x62
 8013df2:	601c      	str	r4, [r3, #0]
 8013df4:	e73a      	b.n	8013c6c <__gethex+0xf8>
 8013df6:	1e71      	subs	r1, r6, #1
 8013df8:	4620      	mov	r0, r4
 8013dfa:	f7fe f9cc 	bl	8012196 <__any_on>
 8013dfe:	2800      	cmp	r0, #0
 8013e00:	d1ed      	bne.n	8013dde <__gethex+0x26a>
 8013e02:	9801      	ldr	r0, [sp, #4]
 8013e04:	4621      	mov	r1, r4
 8013e06:	f7fd fd75 	bl	80118f4 <_Bfree>
 8013e0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	6013      	str	r3, [r2, #0]
 8013e10:	2550      	movs	r5, #80	@ 0x50
 8013e12:	e72b      	b.n	8013c6c <__gethex+0xf8>
 8013e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d1f3      	bne.n	8013e02 <__gethex+0x28e>
 8013e1a:	e7e0      	b.n	8013dde <__gethex+0x26a>
 8013e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d1dd      	bne.n	8013dde <__gethex+0x26a>
 8013e22:	e7ee      	b.n	8013e02 <__gethex+0x28e>
 8013e24:	08015e10 	.word	0x08015e10
 8013e28:	08015caa 	.word	0x08015caa
 8013e2c:	08015f9d 	.word	0x08015f9d
 8013e30:	1e6f      	subs	r7, r5, #1
 8013e32:	f1b9 0f00 	cmp.w	r9, #0
 8013e36:	d130      	bne.n	8013e9a <__gethex+0x326>
 8013e38:	b127      	cbz	r7, 8013e44 <__gethex+0x2d0>
 8013e3a:	4639      	mov	r1, r7
 8013e3c:	4620      	mov	r0, r4
 8013e3e:	f7fe f9aa 	bl	8012196 <__any_on>
 8013e42:	4681      	mov	r9, r0
 8013e44:	117a      	asrs	r2, r7, #5
 8013e46:	2301      	movs	r3, #1
 8013e48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013e4c:	f007 071f 	and.w	r7, r7, #31
 8013e50:	40bb      	lsls	r3, r7
 8013e52:	4213      	tst	r3, r2
 8013e54:	4629      	mov	r1, r5
 8013e56:	4620      	mov	r0, r4
 8013e58:	bf18      	it	ne
 8013e5a:	f049 0902 	orrne.w	r9, r9, #2
 8013e5e:	f7ff fe22 	bl	8013aa6 <rshift>
 8013e62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013e66:	1b76      	subs	r6, r6, r5
 8013e68:	2502      	movs	r5, #2
 8013e6a:	f1b9 0f00 	cmp.w	r9, #0
 8013e6e:	d047      	beq.n	8013f00 <__gethex+0x38c>
 8013e70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013e74:	2b02      	cmp	r3, #2
 8013e76:	d015      	beq.n	8013ea4 <__gethex+0x330>
 8013e78:	2b03      	cmp	r3, #3
 8013e7a:	d017      	beq.n	8013eac <__gethex+0x338>
 8013e7c:	2b01      	cmp	r3, #1
 8013e7e:	d109      	bne.n	8013e94 <__gethex+0x320>
 8013e80:	f019 0f02 	tst.w	r9, #2
 8013e84:	d006      	beq.n	8013e94 <__gethex+0x320>
 8013e86:	f8da 3000 	ldr.w	r3, [sl]
 8013e8a:	ea49 0903 	orr.w	r9, r9, r3
 8013e8e:	f019 0f01 	tst.w	r9, #1
 8013e92:	d10e      	bne.n	8013eb2 <__gethex+0x33e>
 8013e94:	f045 0510 	orr.w	r5, r5, #16
 8013e98:	e032      	b.n	8013f00 <__gethex+0x38c>
 8013e9a:	f04f 0901 	mov.w	r9, #1
 8013e9e:	e7d1      	b.n	8013e44 <__gethex+0x2d0>
 8013ea0:	2501      	movs	r5, #1
 8013ea2:	e7e2      	b.n	8013e6a <__gethex+0x2f6>
 8013ea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ea6:	f1c3 0301 	rsb	r3, r3, #1
 8013eaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d0f0      	beq.n	8013e94 <__gethex+0x320>
 8013eb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013eb6:	f104 0314 	add.w	r3, r4, #20
 8013eba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013ebe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013ec2:	f04f 0c00 	mov.w	ip, #0
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ecc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013ed0:	d01b      	beq.n	8013f0a <__gethex+0x396>
 8013ed2:	3201      	adds	r2, #1
 8013ed4:	6002      	str	r2, [r0, #0]
 8013ed6:	2d02      	cmp	r5, #2
 8013ed8:	f104 0314 	add.w	r3, r4, #20
 8013edc:	d13c      	bne.n	8013f58 <__gethex+0x3e4>
 8013ede:	f8d8 2000 	ldr.w	r2, [r8]
 8013ee2:	3a01      	subs	r2, #1
 8013ee4:	42b2      	cmp	r2, r6
 8013ee6:	d109      	bne.n	8013efc <__gethex+0x388>
 8013ee8:	1171      	asrs	r1, r6, #5
 8013eea:	2201      	movs	r2, #1
 8013eec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013ef0:	f006 061f 	and.w	r6, r6, #31
 8013ef4:	fa02 f606 	lsl.w	r6, r2, r6
 8013ef8:	421e      	tst	r6, r3
 8013efa:	d13a      	bne.n	8013f72 <__gethex+0x3fe>
 8013efc:	f045 0520 	orr.w	r5, r5, #32
 8013f00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f02:	601c      	str	r4, [r3, #0]
 8013f04:	9b02      	ldr	r3, [sp, #8]
 8013f06:	601f      	str	r7, [r3, #0]
 8013f08:	e6b0      	b.n	8013c6c <__gethex+0xf8>
 8013f0a:	4299      	cmp	r1, r3
 8013f0c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013f10:	d8d9      	bhi.n	8013ec6 <__gethex+0x352>
 8013f12:	68a3      	ldr	r3, [r4, #8]
 8013f14:	459b      	cmp	fp, r3
 8013f16:	db17      	blt.n	8013f48 <__gethex+0x3d4>
 8013f18:	6861      	ldr	r1, [r4, #4]
 8013f1a:	9801      	ldr	r0, [sp, #4]
 8013f1c:	3101      	adds	r1, #1
 8013f1e:	f7fd fca9 	bl	8011874 <_Balloc>
 8013f22:	4681      	mov	r9, r0
 8013f24:	b918      	cbnz	r0, 8013f2e <__gethex+0x3ba>
 8013f26:	4b1a      	ldr	r3, [pc, #104]	@ (8013f90 <__gethex+0x41c>)
 8013f28:	4602      	mov	r2, r0
 8013f2a:	2184      	movs	r1, #132	@ 0x84
 8013f2c:	e6c5      	b.n	8013cba <__gethex+0x146>
 8013f2e:	6922      	ldr	r2, [r4, #16]
 8013f30:	3202      	adds	r2, #2
 8013f32:	f104 010c 	add.w	r1, r4, #12
 8013f36:	0092      	lsls	r2, r2, #2
 8013f38:	300c      	adds	r0, #12
 8013f3a:	f7fc fdd0 	bl	8010ade <memcpy>
 8013f3e:	4621      	mov	r1, r4
 8013f40:	9801      	ldr	r0, [sp, #4]
 8013f42:	f7fd fcd7 	bl	80118f4 <_Bfree>
 8013f46:	464c      	mov	r4, r9
 8013f48:	6923      	ldr	r3, [r4, #16]
 8013f4a:	1c5a      	adds	r2, r3, #1
 8013f4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013f50:	6122      	str	r2, [r4, #16]
 8013f52:	2201      	movs	r2, #1
 8013f54:	615a      	str	r2, [r3, #20]
 8013f56:	e7be      	b.n	8013ed6 <__gethex+0x362>
 8013f58:	6922      	ldr	r2, [r4, #16]
 8013f5a:	455a      	cmp	r2, fp
 8013f5c:	dd0b      	ble.n	8013f76 <__gethex+0x402>
 8013f5e:	2101      	movs	r1, #1
 8013f60:	4620      	mov	r0, r4
 8013f62:	f7ff fda0 	bl	8013aa6 <rshift>
 8013f66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013f6a:	3701      	adds	r7, #1
 8013f6c:	42bb      	cmp	r3, r7
 8013f6e:	f6ff aee0 	blt.w	8013d32 <__gethex+0x1be>
 8013f72:	2501      	movs	r5, #1
 8013f74:	e7c2      	b.n	8013efc <__gethex+0x388>
 8013f76:	f016 061f 	ands.w	r6, r6, #31
 8013f7a:	d0fa      	beq.n	8013f72 <__gethex+0x3fe>
 8013f7c:	4453      	add	r3, sl
 8013f7e:	f1c6 0620 	rsb	r6, r6, #32
 8013f82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013f86:	f7fd fd67 	bl	8011a58 <__hi0bits>
 8013f8a:	42b0      	cmp	r0, r6
 8013f8c:	dbe7      	blt.n	8013f5e <__gethex+0x3ea>
 8013f8e:	e7f0      	b.n	8013f72 <__gethex+0x3fe>
 8013f90:	08015caa 	.word	0x08015caa

08013f94 <L_shift>:
 8013f94:	f1c2 0208 	rsb	r2, r2, #8
 8013f98:	0092      	lsls	r2, r2, #2
 8013f9a:	b570      	push	{r4, r5, r6, lr}
 8013f9c:	f1c2 0620 	rsb	r6, r2, #32
 8013fa0:	6843      	ldr	r3, [r0, #4]
 8013fa2:	6804      	ldr	r4, [r0, #0]
 8013fa4:	fa03 f506 	lsl.w	r5, r3, r6
 8013fa8:	432c      	orrs	r4, r5
 8013faa:	40d3      	lsrs	r3, r2
 8013fac:	6004      	str	r4, [r0, #0]
 8013fae:	f840 3f04 	str.w	r3, [r0, #4]!
 8013fb2:	4288      	cmp	r0, r1
 8013fb4:	d3f4      	bcc.n	8013fa0 <L_shift+0xc>
 8013fb6:	bd70      	pop	{r4, r5, r6, pc}

08013fb8 <__match>:
 8013fb8:	b530      	push	{r4, r5, lr}
 8013fba:	6803      	ldr	r3, [r0, #0]
 8013fbc:	3301      	adds	r3, #1
 8013fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013fc2:	b914      	cbnz	r4, 8013fca <__match+0x12>
 8013fc4:	6003      	str	r3, [r0, #0]
 8013fc6:	2001      	movs	r0, #1
 8013fc8:	bd30      	pop	{r4, r5, pc}
 8013fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8013fd2:	2d19      	cmp	r5, #25
 8013fd4:	bf98      	it	ls
 8013fd6:	3220      	addls	r2, #32
 8013fd8:	42a2      	cmp	r2, r4
 8013fda:	d0f0      	beq.n	8013fbe <__match+0x6>
 8013fdc:	2000      	movs	r0, #0
 8013fde:	e7f3      	b.n	8013fc8 <__match+0x10>

08013fe0 <__hexnan>:
 8013fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe4:	680b      	ldr	r3, [r1, #0]
 8013fe6:	6801      	ldr	r1, [r0, #0]
 8013fe8:	115e      	asrs	r6, r3, #5
 8013fea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013fee:	f013 031f 	ands.w	r3, r3, #31
 8013ff2:	b087      	sub	sp, #28
 8013ff4:	bf18      	it	ne
 8013ff6:	3604      	addne	r6, #4
 8013ff8:	2500      	movs	r5, #0
 8013ffa:	1f37      	subs	r7, r6, #4
 8013ffc:	4682      	mov	sl, r0
 8013ffe:	4690      	mov	r8, r2
 8014000:	9301      	str	r3, [sp, #4]
 8014002:	f846 5c04 	str.w	r5, [r6, #-4]
 8014006:	46b9      	mov	r9, r7
 8014008:	463c      	mov	r4, r7
 801400a:	9502      	str	r5, [sp, #8]
 801400c:	46ab      	mov	fp, r5
 801400e:	784a      	ldrb	r2, [r1, #1]
 8014010:	1c4b      	adds	r3, r1, #1
 8014012:	9303      	str	r3, [sp, #12]
 8014014:	b342      	cbz	r2, 8014068 <__hexnan+0x88>
 8014016:	4610      	mov	r0, r2
 8014018:	9105      	str	r1, [sp, #20]
 801401a:	9204      	str	r2, [sp, #16]
 801401c:	f7ff fd95 	bl	8013b4a <__hexdig_fun>
 8014020:	2800      	cmp	r0, #0
 8014022:	d151      	bne.n	80140c8 <__hexnan+0xe8>
 8014024:	9a04      	ldr	r2, [sp, #16]
 8014026:	9905      	ldr	r1, [sp, #20]
 8014028:	2a20      	cmp	r2, #32
 801402a:	d818      	bhi.n	801405e <__hexnan+0x7e>
 801402c:	9b02      	ldr	r3, [sp, #8]
 801402e:	459b      	cmp	fp, r3
 8014030:	dd13      	ble.n	801405a <__hexnan+0x7a>
 8014032:	454c      	cmp	r4, r9
 8014034:	d206      	bcs.n	8014044 <__hexnan+0x64>
 8014036:	2d07      	cmp	r5, #7
 8014038:	dc04      	bgt.n	8014044 <__hexnan+0x64>
 801403a:	462a      	mov	r2, r5
 801403c:	4649      	mov	r1, r9
 801403e:	4620      	mov	r0, r4
 8014040:	f7ff ffa8 	bl	8013f94 <L_shift>
 8014044:	4544      	cmp	r4, r8
 8014046:	d952      	bls.n	80140ee <__hexnan+0x10e>
 8014048:	2300      	movs	r3, #0
 801404a:	f1a4 0904 	sub.w	r9, r4, #4
 801404e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014052:	f8cd b008 	str.w	fp, [sp, #8]
 8014056:	464c      	mov	r4, r9
 8014058:	461d      	mov	r5, r3
 801405a:	9903      	ldr	r1, [sp, #12]
 801405c:	e7d7      	b.n	801400e <__hexnan+0x2e>
 801405e:	2a29      	cmp	r2, #41	@ 0x29
 8014060:	d157      	bne.n	8014112 <__hexnan+0x132>
 8014062:	3102      	adds	r1, #2
 8014064:	f8ca 1000 	str.w	r1, [sl]
 8014068:	f1bb 0f00 	cmp.w	fp, #0
 801406c:	d051      	beq.n	8014112 <__hexnan+0x132>
 801406e:	454c      	cmp	r4, r9
 8014070:	d206      	bcs.n	8014080 <__hexnan+0xa0>
 8014072:	2d07      	cmp	r5, #7
 8014074:	dc04      	bgt.n	8014080 <__hexnan+0xa0>
 8014076:	462a      	mov	r2, r5
 8014078:	4649      	mov	r1, r9
 801407a:	4620      	mov	r0, r4
 801407c:	f7ff ff8a 	bl	8013f94 <L_shift>
 8014080:	4544      	cmp	r4, r8
 8014082:	d936      	bls.n	80140f2 <__hexnan+0x112>
 8014084:	f1a8 0204 	sub.w	r2, r8, #4
 8014088:	4623      	mov	r3, r4
 801408a:	f853 1b04 	ldr.w	r1, [r3], #4
 801408e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014092:	429f      	cmp	r7, r3
 8014094:	d2f9      	bcs.n	801408a <__hexnan+0xaa>
 8014096:	1b3b      	subs	r3, r7, r4
 8014098:	f023 0303 	bic.w	r3, r3, #3
 801409c:	3304      	adds	r3, #4
 801409e:	3401      	adds	r4, #1
 80140a0:	3e03      	subs	r6, #3
 80140a2:	42b4      	cmp	r4, r6
 80140a4:	bf88      	it	hi
 80140a6:	2304      	movhi	r3, #4
 80140a8:	4443      	add	r3, r8
 80140aa:	2200      	movs	r2, #0
 80140ac:	f843 2b04 	str.w	r2, [r3], #4
 80140b0:	429f      	cmp	r7, r3
 80140b2:	d2fb      	bcs.n	80140ac <__hexnan+0xcc>
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	b91b      	cbnz	r3, 80140c0 <__hexnan+0xe0>
 80140b8:	4547      	cmp	r7, r8
 80140ba:	d128      	bne.n	801410e <__hexnan+0x12e>
 80140bc:	2301      	movs	r3, #1
 80140be:	603b      	str	r3, [r7, #0]
 80140c0:	2005      	movs	r0, #5
 80140c2:	b007      	add	sp, #28
 80140c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140c8:	3501      	adds	r5, #1
 80140ca:	2d08      	cmp	r5, #8
 80140cc:	f10b 0b01 	add.w	fp, fp, #1
 80140d0:	dd06      	ble.n	80140e0 <__hexnan+0x100>
 80140d2:	4544      	cmp	r4, r8
 80140d4:	d9c1      	bls.n	801405a <__hexnan+0x7a>
 80140d6:	2300      	movs	r3, #0
 80140d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80140dc:	2501      	movs	r5, #1
 80140de:	3c04      	subs	r4, #4
 80140e0:	6822      	ldr	r2, [r4, #0]
 80140e2:	f000 000f 	and.w	r0, r0, #15
 80140e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80140ea:	6020      	str	r0, [r4, #0]
 80140ec:	e7b5      	b.n	801405a <__hexnan+0x7a>
 80140ee:	2508      	movs	r5, #8
 80140f0:	e7b3      	b.n	801405a <__hexnan+0x7a>
 80140f2:	9b01      	ldr	r3, [sp, #4]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d0dd      	beq.n	80140b4 <__hexnan+0xd4>
 80140f8:	f1c3 0320 	rsb	r3, r3, #32
 80140fc:	f04f 32ff 	mov.w	r2, #4294967295
 8014100:	40da      	lsrs	r2, r3
 8014102:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014106:	4013      	ands	r3, r2
 8014108:	f846 3c04 	str.w	r3, [r6, #-4]
 801410c:	e7d2      	b.n	80140b4 <__hexnan+0xd4>
 801410e:	3f04      	subs	r7, #4
 8014110:	e7d0      	b.n	80140b4 <__hexnan+0xd4>
 8014112:	2004      	movs	r0, #4
 8014114:	e7d5      	b.n	80140c2 <__hexnan+0xe2>

08014116 <__ascii_mbtowc>:
 8014116:	b082      	sub	sp, #8
 8014118:	b901      	cbnz	r1, 801411c <__ascii_mbtowc+0x6>
 801411a:	a901      	add	r1, sp, #4
 801411c:	b142      	cbz	r2, 8014130 <__ascii_mbtowc+0x1a>
 801411e:	b14b      	cbz	r3, 8014134 <__ascii_mbtowc+0x1e>
 8014120:	7813      	ldrb	r3, [r2, #0]
 8014122:	600b      	str	r3, [r1, #0]
 8014124:	7812      	ldrb	r2, [r2, #0]
 8014126:	1e10      	subs	r0, r2, #0
 8014128:	bf18      	it	ne
 801412a:	2001      	movne	r0, #1
 801412c:	b002      	add	sp, #8
 801412e:	4770      	bx	lr
 8014130:	4610      	mov	r0, r2
 8014132:	e7fb      	b.n	801412c <__ascii_mbtowc+0x16>
 8014134:	f06f 0001 	mvn.w	r0, #1
 8014138:	e7f8      	b.n	801412c <__ascii_mbtowc+0x16>

0801413a <_realloc_r>:
 801413a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801413e:	4680      	mov	r8, r0
 8014140:	4615      	mov	r5, r2
 8014142:	460c      	mov	r4, r1
 8014144:	b921      	cbnz	r1, 8014150 <_realloc_r+0x16>
 8014146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801414a:	4611      	mov	r1, r2
 801414c:	f7fb bae8 	b.w	800f720 <_malloc_r>
 8014150:	b92a      	cbnz	r2, 801415e <_realloc_r+0x24>
 8014152:	f7fd fb45 	bl	80117e0 <_free_r>
 8014156:	2400      	movs	r4, #0
 8014158:	4620      	mov	r0, r4
 801415a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801415e:	f000 fab1 	bl	80146c4 <_malloc_usable_size_r>
 8014162:	4285      	cmp	r5, r0
 8014164:	4606      	mov	r6, r0
 8014166:	d802      	bhi.n	801416e <_realloc_r+0x34>
 8014168:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801416c:	d8f4      	bhi.n	8014158 <_realloc_r+0x1e>
 801416e:	4629      	mov	r1, r5
 8014170:	4640      	mov	r0, r8
 8014172:	f7fb fad5 	bl	800f720 <_malloc_r>
 8014176:	4607      	mov	r7, r0
 8014178:	2800      	cmp	r0, #0
 801417a:	d0ec      	beq.n	8014156 <_realloc_r+0x1c>
 801417c:	42b5      	cmp	r5, r6
 801417e:	462a      	mov	r2, r5
 8014180:	4621      	mov	r1, r4
 8014182:	bf28      	it	cs
 8014184:	4632      	movcs	r2, r6
 8014186:	f7fc fcaa 	bl	8010ade <memcpy>
 801418a:	4621      	mov	r1, r4
 801418c:	4640      	mov	r0, r8
 801418e:	f7fd fb27 	bl	80117e0 <_free_r>
 8014192:	463c      	mov	r4, r7
 8014194:	e7e0      	b.n	8014158 <_realloc_r+0x1e>
	...

08014198 <_strtoul_l.constprop.0>:
 8014198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801419c:	4e34      	ldr	r6, [pc, #208]	@ (8014270 <_strtoul_l.constprop.0+0xd8>)
 801419e:	4686      	mov	lr, r0
 80141a0:	460d      	mov	r5, r1
 80141a2:	4628      	mov	r0, r5
 80141a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141a8:	5d37      	ldrb	r7, [r6, r4]
 80141aa:	f017 0708 	ands.w	r7, r7, #8
 80141ae:	d1f8      	bne.n	80141a2 <_strtoul_l.constprop.0+0xa>
 80141b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80141b2:	d12f      	bne.n	8014214 <_strtoul_l.constprop.0+0x7c>
 80141b4:	782c      	ldrb	r4, [r5, #0]
 80141b6:	2701      	movs	r7, #1
 80141b8:	1c85      	adds	r5, r0, #2
 80141ba:	f033 0010 	bics.w	r0, r3, #16
 80141be:	d109      	bne.n	80141d4 <_strtoul_l.constprop.0+0x3c>
 80141c0:	2c30      	cmp	r4, #48	@ 0x30
 80141c2:	d12c      	bne.n	801421e <_strtoul_l.constprop.0+0x86>
 80141c4:	7828      	ldrb	r0, [r5, #0]
 80141c6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80141ca:	2858      	cmp	r0, #88	@ 0x58
 80141cc:	d127      	bne.n	801421e <_strtoul_l.constprop.0+0x86>
 80141ce:	786c      	ldrb	r4, [r5, #1]
 80141d0:	2310      	movs	r3, #16
 80141d2:	3502      	adds	r5, #2
 80141d4:	f04f 38ff 	mov.w	r8, #4294967295
 80141d8:	2600      	movs	r6, #0
 80141da:	fbb8 f8f3 	udiv	r8, r8, r3
 80141de:	fb03 f908 	mul.w	r9, r3, r8
 80141e2:	ea6f 0909 	mvn.w	r9, r9
 80141e6:	4630      	mov	r0, r6
 80141e8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80141ec:	f1bc 0f09 	cmp.w	ip, #9
 80141f0:	d81c      	bhi.n	801422c <_strtoul_l.constprop.0+0x94>
 80141f2:	4664      	mov	r4, ip
 80141f4:	42a3      	cmp	r3, r4
 80141f6:	dd2a      	ble.n	801424e <_strtoul_l.constprop.0+0xb6>
 80141f8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80141fc:	d007      	beq.n	801420e <_strtoul_l.constprop.0+0x76>
 80141fe:	4580      	cmp	r8, r0
 8014200:	d322      	bcc.n	8014248 <_strtoul_l.constprop.0+0xb0>
 8014202:	d101      	bne.n	8014208 <_strtoul_l.constprop.0+0x70>
 8014204:	45a1      	cmp	r9, r4
 8014206:	db1f      	blt.n	8014248 <_strtoul_l.constprop.0+0xb0>
 8014208:	fb00 4003 	mla	r0, r0, r3, r4
 801420c:	2601      	movs	r6, #1
 801420e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014212:	e7e9      	b.n	80141e8 <_strtoul_l.constprop.0+0x50>
 8014214:	2c2b      	cmp	r4, #43	@ 0x2b
 8014216:	bf04      	itt	eq
 8014218:	782c      	ldrbeq	r4, [r5, #0]
 801421a:	1c85      	addeq	r5, r0, #2
 801421c:	e7cd      	b.n	80141ba <_strtoul_l.constprop.0+0x22>
 801421e:	2b00      	cmp	r3, #0
 8014220:	d1d8      	bne.n	80141d4 <_strtoul_l.constprop.0+0x3c>
 8014222:	2c30      	cmp	r4, #48	@ 0x30
 8014224:	bf0c      	ite	eq
 8014226:	2308      	moveq	r3, #8
 8014228:	230a      	movne	r3, #10
 801422a:	e7d3      	b.n	80141d4 <_strtoul_l.constprop.0+0x3c>
 801422c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8014230:	f1bc 0f19 	cmp.w	ip, #25
 8014234:	d801      	bhi.n	801423a <_strtoul_l.constprop.0+0xa2>
 8014236:	3c37      	subs	r4, #55	@ 0x37
 8014238:	e7dc      	b.n	80141f4 <_strtoul_l.constprop.0+0x5c>
 801423a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801423e:	f1bc 0f19 	cmp.w	ip, #25
 8014242:	d804      	bhi.n	801424e <_strtoul_l.constprop.0+0xb6>
 8014244:	3c57      	subs	r4, #87	@ 0x57
 8014246:	e7d5      	b.n	80141f4 <_strtoul_l.constprop.0+0x5c>
 8014248:	f04f 36ff 	mov.w	r6, #4294967295
 801424c:	e7df      	b.n	801420e <_strtoul_l.constprop.0+0x76>
 801424e:	1c73      	adds	r3, r6, #1
 8014250:	d106      	bne.n	8014260 <_strtoul_l.constprop.0+0xc8>
 8014252:	2322      	movs	r3, #34	@ 0x22
 8014254:	f8ce 3000 	str.w	r3, [lr]
 8014258:	4630      	mov	r0, r6
 801425a:	b932      	cbnz	r2, 801426a <_strtoul_l.constprop.0+0xd2>
 801425c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014260:	b107      	cbz	r7, 8014264 <_strtoul_l.constprop.0+0xcc>
 8014262:	4240      	negs	r0, r0
 8014264:	2a00      	cmp	r2, #0
 8014266:	d0f9      	beq.n	801425c <_strtoul_l.constprop.0+0xc4>
 8014268:	b106      	cbz	r6, 801426c <_strtoul_l.constprop.0+0xd4>
 801426a:	1e69      	subs	r1, r5, #1
 801426c:	6011      	str	r1, [r2, #0]
 801426e:	e7f5      	b.n	801425c <_strtoul_l.constprop.0+0xc4>
 8014270:	08015e69 	.word	0x08015e69

08014274 <_strtoul_r>:
 8014274:	f7ff bf90 	b.w	8014198 <_strtoul_l.constprop.0>

08014278 <__ascii_wctomb>:
 8014278:	4603      	mov	r3, r0
 801427a:	4608      	mov	r0, r1
 801427c:	b141      	cbz	r1, 8014290 <__ascii_wctomb+0x18>
 801427e:	2aff      	cmp	r2, #255	@ 0xff
 8014280:	d904      	bls.n	801428c <__ascii_wctomb+0x14>
 8014282:	228a      	movs	r2, #138	@ 0x8a
 8014284:	601a      	str	r2, [r3, #0]
 8014286:	f04f 30ff 	mov.w	r0, #4294967295
 801428a:	4770      	bx	lr
 801428c:	700a      	strb	r2, [r1, #0]
 801428e:	2001      	movs	r0, #1
 8014290:	4770      	bx	lr

08014292 <__sfputc_r>:
 8014292:	6893      	ldr	r3, [r2, #8]
 8014294:	3b01      	subs	r3, #1
 8014296:	2b00      	cmp	r3, #0
 8014298:	b410      	push	{r4}
 801429a:	6093      	str	r3, [r2, #8]
 801429c:	da08      	bge.n	80142b0 <__sfputc_r+0x1e>
 801429e:	6994      	ldr	r4, [r2, #24]
 80142a0:	42a3      	cmp	r3, r4
 80142a2:	db01      	blt.n	80142a8 <__sfputc_r+0x16>
 80142a4:	290a      	cmp	r1, #10
 80142a6:	d103      	bne.n	80142b0 <__sfputc_r+0x1e>
 80142a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142ac:	f000 b932 	b.w	8014514 <__swbuf_r>
 80142b0:	6813      	ldr	r3, [r2, #0]
 80142b2:	1c58      	adds	r0, r3, #1
 80142b4:	6010      	str	r0, [r2, #0]
 80142b6:	7019      	strb	r1, [r3, #0]
 80142b8:	4608      	mov	r0, r1
 80142ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142be:	4770      	bx	lr

080142c0 <__sfputs_r>:
 80142c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142c2:	4606      	mov	r6, r0
 80142c4:	460f      	mov	r7, r1
 80142c6:	4614      	mov	r4, r2
 80142c8:	18d5      	adds	r5, r2, r3
 80142ca:	42ac      	cmp	r4, r5
 80142cc:	d101      	bne.n	80142d2 <__sfputs_r+0x12>
 80142ce:	2000      	movs	r0, #0
 80142d0:	e007      	b.n	80142e2 <__sfputs_r+0x22>
 80142d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142d6:	463a      	mov	r2, r7
 80142d8:	4630      	mov	r0, r6
 80142da:	f7ff ffda 	bl	8014292 <__sfputc_r>
 80142de:	1c43      	adds	r3, r0, #1
 80142e0:	d1f3      	bne.n	80142ca <__sfputs_r+0xa>
 80142e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080142e4 <_vfiprintf_r>:
 80142e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142e8:	460d      	mov	r5, r1
 80142ea:	b09d      	sub	sp, #116	@ 0x74
 80142ec:	4614      	mov	r4, r2
 80142ee:	4698      	mov	r8, r3
 80142f0:	4606      	mov	r6, r0
 80142f2:	b118      	cbz	r0, 80142fc <_vfiprintf_r+0x18>
 80142f4:	6a03      	ldr	r3, [r0, #32]
 80142f6:	b90b      	cbnz	r3, 80142fc <_vfiprintf_r+0x18>
 80142f8:	f7fc f9d8 	bl	80106ac <__sinit>
 80142fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80142fe:	07d9      	lsls	r1, r3, #31
 8014300:	d405      	bmi.n	801430e <_vfiprintf_r+0x2a>
 8014302:	89ab      	ldrh	r3, [r5, #12]
 8014304:	059a      	lsls	r2, r3, #22
 8014306:	d402      	bmi.n	801430e <_vfiprintf_r+0x2a>
 8014308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801430a:	f7fc fbe6 	bl	8010ada <__retarget_lock_acquire_recursive>
 801430e:	89ab      	ldrh	r3, [r5, #12]
 8014310:	071b      	lsls	r3, r3, #28
 8014312:	d501      	bpl.n	8014318 <_vfiprintf_r+0x34>
 8014314:	692b      	ldr	r3, [r5, #16]
 8014316:	b99b      	cbnz	r3, 8014340 <_vfiprintf_r+0x5c>
 8014318:	4629      	mov	r1, r5
 801431a:	4630      	mov	r0, r6
 801431c:	f000 f938 	bl	8014590 <__swsetup_r>
 8014320:	b170      	cbz	r0, 8014340 <_vfiprintf_r+0x5c>
 8014322:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014324:	07dc      	lsls	r4, r3, #31
 8014326:	d504      	bpl.n	8014332 <_vfiprintf_r+0x4e>
 8014328:	f04f 30ff 	mov.w	r0, #4294967295
 801432c:	b01d      	add	sp, #116	@ 0x74
 801432e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014332:	89ab      	ldrh	r3, [r5, #12]
 8014334:	0598      	lsls	r0, r3, #22
 8014336:	d4f7      	bmi.n	8014328 <_vfiprintf_r+0x44>
 8014338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801433a:	f7fc fbcf 	bl	8010adc <__retarget_lock_release_recursive>
 801433e:	e7f3      	b.n	8014328 <_vfiprintf_r+0x44>
 8014340:	2300      	movs	r3, #0
 8014342:	9309      	str	r3, [sp, #36]	@ 0x24
 8014344:	2320      	movs	r3, #32
 8014346:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801434a:	f8cd 800c 	str.w	r8, [sp, #12]
 801434e:	2330      	movs	r3, #48	@ 0x30
 8014350:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014500 <_vfiprintf_r+0x21c>
 8014354:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014358:	f04f 0901 	mov.w	r9, #1
 801435c:	4623      	mov	r3, r4
 801435e:	469a      	mov	sl, r3
 8014360:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014364:	b10a      	cbz	r2, 801436a <_vfiprintf_r+0x86>
 8014366:	2a25      	cmp	r2, #37	@ 0x25
 8014368:	d1f9      	bne.n	801435e <_vfiprintf_r+0x7a>
 801436a:	ebba 0b04 	subs.w	fp, sl, r4
 801436e:	d00b      	beq.n	8014388 <_vfiprintf_r+0xa4>
 8014370:	465b      	mov	r3, fp
 8014372:	4622      	mov	r2, r4
 8014374:	4629      	mov	r1, r5
 8014376:	4630      	mov	r0, r6
 8014378:	f7ff ffa2 	bl	80142c0 <__sfputs_r>
 801437c:	3001      	adds	r0, #1
 801437e:	f000 80a7 	beq.w	80144d0 <_vfiprintf_r+0x1ec>
 8014382:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014384:	445a      	add	r2, fp
 8014386:	9209      	str	r2, [sp, #36]	@ 0x24
 8014388:	f89a 3000 	ldrb.w	r3, [sl]
 801438c:	2b00      	cmp	r3, #0
 801438e:	f000 809f 	beq.w	80144d0 <_vfiprintf_r+0x1ec>
 8014392:	2300      	movs	r3, #0
 8014394:	f04f 32ff 	mov.w	r2, #4294967295
 8014398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801439c:	f10a 0a01 	add.w	sl, sl, #1
 80143a0:	9304      	str	r3, [sp, #16]
 80143a2:	9307      	str	r3, [sp, #28]
 80143a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80143a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80143aa:	4654      	mov	r4, sl
 80143ac:	2205      	movs	r2, #5
 80143ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143b2:	4853      	ldr	r0, [pc, #332]	@ (8014500 <_vfiprintf_r+0x21c>)
 80143b4:	f7eb ff1c 	bl	80001f0 <memchr>
 80143b8:	9a04      	ldr	r2, [sp, #16]
 80143ba:	b9d8      	cbnz	r0, 80143f4 <_vfiprintf_r+0x110>
 80143bc:	06d1      	lsls	r1, r2, #27
 80143be:	bf44      	itt	mi
 80143c0:	2320      	movmi	r3, #32
 80143c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80143c6:	0713      	lsls	r3, r2, #28
 80143c8:	bf44      	itt	mi
 80143ca:	232b      	movmi	r3, #43	@ 0x2b
 80143cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80143d0:	f89a 3000 	ldrb.w	r3, [sl]
 80143d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80143d6:	d015      	beq.n	8014404 <_vfiprintf_r+0x120>
 80143d8:	9a07      	ldr	r2, [sp, #28]
 80143da:	4654      	mov	r4, sl
 80143dc:	2000      	movs	r0, #0
 80143de:	f04f 0c0a 	mov.w	ip, #10
 80143e2:	4621      	mov	r1, r4
 80143e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143e8:	3b30      	subs	r3, #48	@ 0x30
 80143ea:	2b09      	cmp	r3, #9
 80143ec:	d94b      	bls.n	8014486 <_vfiprintf_r+0x1a2>
 80143ee:	b1b0      	cbz	r0, 801441e <_vfiprintf_r+0x13a>
 80143f0:	9207      	str	r2, [sp, #28]
 80143f2:	e014      	b.n	801441e <_vfiprintf_r+0x13a>
 80143f4:	eba0 0308 	sub.w	r3, r0, r8
 80143f8:	fa09 f303 	lsl.w	r3, r9, r3
 80143fc:	4313      	orrs	r3, r2
 80143fe:	9304      	str	r3, [sp, #16]
 8014400:	46a2      	mov	sl, r4
 8014402:	e7d2      	b.n	80143aa <_vfiprintf_r+0xc6>
 8014404:	9b03      	ldr	r3, [sp, #12]
 8014406:	1d19      	adds	r1, r3, #4
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	9103      	str	r1, [sp, #12]
 801440c:	2b00      	cmp	r3, #0
 801440e:	bfbb      	ittet	lt
 8014410:	425b      	neglt	r3, r3
 8014412:	f042 0202 	orrlt.w	r2, r2, #2
 8014416:	9307      	strge	r3, [sp, #28]
 8014418:	9307      	strlt	r3, [sp, #28]
 801441a:	bfb8      	it	lt
 801441c:	9204      	strlt	r2, [sp, #16]
 801441e:	7823      	ldrb	r3, [r4, #0]
 8014420:	2b2e      	cmp	r3, #46	@ 0x2e
 8014422:	d10a      	bne.n	801443a <_vfiprintf_r+0x156>
 8014424:	7863      	ldrb	r3, [r4, #1]
 8014426:	2b2a      	cmp	r3, #42	@ 0x2a
 8014428:	d132      	bne.n	8014490 <_vfiprintf_r+0x1ac>
 801442a:	9b03      	ldr	r3, [sp, #12]
 801442c:	1d1a      	adds	r2, r3, #4
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	9203      	str	r2, [sp, #12]
 8014432:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014436:	3402      	adds	r4, #2
 8014438:	9305      	str	r3, [sp, #20]
 801443a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014510 <_vfiprintf_r+0x22c>
 801443e:	7821      	ldrb	r1, [r4, #0]
 8014440:	2203      	movs	r2, #3
 8014442:	4650      	mov	r0, sl
 8014444:	f7eb fed4 	bl	80001f0 <memchr>
 8014448:	b138      	cbz	r0, 801445a <_vfiprintf_r+0x176>
 801444a:	9b04      	ldr	r3, [sp, #16]
 801444c:	eba0 000a 	sub.w	r0, r0, sl
 8014450:	2240      	movs	r2, #64	@ 0x40
 8014452:	4082      	lsls	r2, r0
 8014454:	4313      	orrs	r3, r2
 8014456:	3401      	adds	r4, #1
 8014458:	9304      	str	r3, [sp, #16]
 801445a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801445e:	4829      	ldr	r0, [pc, #164]	@ (8014504 <_vfiprintf_r+0x220>)
 8014460:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014464:	2206      	movs	r2, #6
 8014466:	f7eb fec3 	bl	80001f0 <memchr>
 801446a:	2800      	cmp	r0, #0
 801446c:	d03f      	beq.n	80144ee <_vfiprintf_r+0x20a>
 801446e:	4b26      	ldr	r3, [pc, #152]	@ (8014508 <_vfiprintf_r+0x224>)
 8014470:	bb1b      	cbnz	r3, 80144ba <_vfiprintf_r+0x1d6>
 8014472:	9b03      	ldr	r3, [sp, #12]
 8014474:	3307      	adds	r3, #7
 8014476:	f023 0307 	bic.w	r3, r3, #7
 801447a:	3308      	adds	r3, #8
 801447c:	9303      	str	r3, [sp, #12]
 801447e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014480:	443b      	add	r3, r7
 8014482:	9309      	str	r3, [sp, #36]	@ 0x24
 8014484:	e76a      	b.n	801435c <_vfiprintf_r+0x78>
 8014486:	fb0c 3202 	mla	r2, ip, r2, r3
 801448a:	460c      	mov	r4, r1
 801448c:	2001      	movs	r0, #1
 801448e:	e7a8      	b.n	80143e2 <_vfiprintf_r+0xfe>
 8014490:	2300      	movs	r3, #0
 8014492:	3401      	adds	r4, #1
 8014494:	9305      	str	r3, [sp, #20]
 8014496:	4619      	mov	r1, r3
 8014498:	f04f 0c0a 	mov.w	ip, #10
 801449c:	4620      	mov	r0, r4
 801449e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144a2:	3a30      	subs	r2, #48	@ 0x30
 80144a4:	2a09      	cmp	r2, #9
 80144a6:	d903      	bls.n	80144b0 <_vfiprintf_r+0x1cc>
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d0c6      	beq.n	801443a <_vfiprintf_r+0x156>
 80144ac:	9105      	str	r1, [sp, #20]
 80144ae:	e7c4      	b.n	801443a <_vfiprintf_r+0x156>
 80144b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80144b4:	4604      	mov	r4, r0
 80144b6:	2301      	movs	r3, #1
 80144b8:	e7f0      	b.n	801449c <_vfiprintf_r+0x1b8>
 80144ba:	ab03      	add	r3, sp, #12
 80144bc:	9300      	str	r3, [sp, #0]
 80144be:	462a      	mov	r2, r5
 80144c0:	4b12      	ldr	r3, [pc, #72]	@ (801450c <_vfiprintf_r+0x228>)
 80144c2:	a904      	add	r1, sp, #16
 80144c4:	4630      	mov	r0, r6
 80144c6:	f7fb fa99 	bl	800f9fc <_printf_float>
 80144ca:	4607      	mov	r7, r0
 80144cc:	1c78      	adds	r0, r7, #1
 80144ce:	d1d6      	bne.n	801447e <_vfiprintf_r+0x19a>
 80144d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80144d2:	07d9      	lsls	r1, r3, #31
 80144d4:	d405      	bmi.n	80144e2 <_vfiprintf_r+0x1fe>
 80144d6:	89ab      	ldrh	r3, [r5, #12]
 80144d8:	059a      	lsls	r2, r3, #22
 80144da:	d402      	bmi.n	80144e2 <_vfiprintf_r+0x1fe>
 80144dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80144de:	f7fc fafd 	bl	8010adc <__retarget_lock_release_recursive>
 80144e2:	89ab      	ldrh	r3, [r5, #12]
 80144e4:	065b      	lsls	r3, r3, #25
 80144e6:	f53f af1f 	bmi.w	8014328 <_vfiprintf_r+0x44>
 80144ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80144ec:	e71e      	b.n	801432c <_vfiprintf_r+0x48>
 80144ee:	ab03      	add	r3, sp, #12
 80144f0:	9300      	str	r3, [sp, #0]
 80144f2:	462a      	mov	r2, r5
 80144f4:	4b05      	ldr	r3, [pc, #20]	@ (801450c <_vfiprintf_r+0x228>)
 80144f6:	a904      	add	r1, sp, #16
 80144f8:	4630      	mov	r0, r6
 80144fa:	f7fb fd17 	bl	800ff2c <_printf_i>
 80144fe:	e7e4      	b.n	80144ca <_vfiprintf_r+0x1e6>
 8014500:	08015f69 	.word	0x08015f69
 8014504:	08015f73 	.word	0x08015f73
 8014508:	0800f9fd 	.word	0x0800f9fd
 801450c:	080142c1 	.word	0x080142c1
 8014510:	08015f6f 	.word	0x08015f6f

08014514 <__swbuf_r>:
 8014514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014516:	460e      	mov	r6, r1
 8014518:	4614      	mov	r4, r2
 801451a:	4605      	mov	r5, r0
 801451c:	b118      	cbz	r0, 8014526 <__swbuf_r+0x12>
 801451e:	6a03      	ldr	r3, [r0, #32]
 8014520:	b90b      	cbnz	r3, 8014526 <__swbuf_r+0x12>
 8014522:	f7fc f8c3 	bl	80106ac <__sinit>
 8014526:	69a3      	ldr	r3, [r4, #24]
 8014528:	60a3      	str	r3, [r4, #8]
 801452a:	89a3      	ldrh	r3, [r4, #12]
 801452c:	071a      	lsls	r2, r3, #28
 801452e:	d501      	bpl.n	8014534 <__swbuf_r+0x20>
 8014530:	6923      	ldr	r3, [r4, #16]
 8014532:	b943      	cbnz	r3, 8014546 <__swbuf_r+0x32>
 8014534:	4621      	mov	r1, r4
 8014536:	4628      	mov	r0, r5
 8014538:	f000 f82a 	bl	8014590 <__swsetup_r>
 801453c:	b118      	cbz	r0, 8014546 <__swbuf_r+0x32>
 801453e:	f04f 37ff 	mov.w	r7, #4294967295
 8014542:	4638      	mov	r0, r7
 8014544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014546:	6823      	ldr	r3, [r4, #0]
 8014548:	6922      	ldr	r2, [r4, #16]
 801454a:	1a98      	subs	r0, r3, r2
 801454c:	6963      	ldr	r3, [r4, #20]
 801454e:	b2f6      	uxtb	r6, r6
 8014550:	4283      	cmp	r3, r0
 8014552:	4637      	mov	r7, r6
 8014554:	dc05      	bgt.n	8014562 <__swbuf_r+0x4e>
 8014556:	4621      	mov	r1, r4
 8014558:	4628      	mov	r0, r5
 801455a:	f7ff f9b9 	bl	80138d0 <_fflush_r>
 801455e:	2800      	cmp	r0, #0
 8014560:	d1ed      	bne.n	801453e <__swbuf_r+0x2a>
 8014562:	68a3      	ldr	r3, [r4, #8]
 8014564:	3b01      	subs	r3, #1
 8014566:	60a3      	str	r3, [r4, #8]
 8014568:	6823      	ldr	r3, [r4, #0]
 801456a:	1c5a      	adds	r2, r3, #1
 801456c:	6022      	str	r2, [r4, #0]
 801456e:	701e      	strb	r6, [r3, #0]
 8014570:	6962      	ldr	r2, [r4, #20]
 8014572:	1c43      	adds	r3, r0, #1
 8014574:	429a      	cmp	r2, r3
 8014576:	d004      	beq.n	8014582 <__swbuf_r+0x6e>
 8014578:	89a3      	ldrh	r3, [r4, #12]
 801457a:	07db      	lsls	r3, r3, #31
 801457c:	d5e1      	bpl.n	8014542 <__swbuf_r+0x2e>
 801457e:	2e0a      	cmp	r6, #10
 8014580:	d1df      	bne.n	8014542 <__swbuf_r+0x2e>
 8014582:	4621      	mov	r1, r4
 8014584:	4628      	mov	r0, r5
 8014586:	f7ff f9a3 	bl	80138d0 <_fflush_r>
 801458a:	2800      	cmp	r0, #0
 801458c:	d0d9      	beq.n	8014542 <__swbuf_r+0x2e>
 801458e:	e7d6      	b.n	801453e <__swbuf_r+0x2a>

08014590 <__swsetup_r>:
 8014590:	b538      	push	{r3, r4, r5, lr}
 8014592:	4b29      	ldr	r3, [pc, #164]	@ (8014638 <__swsetup_r+0xa8>)
 8014594:	4605      	mov	r5, r0
 8014596:	6818      	ldr	r0, [r3, #0]
 8014598:	460c      	mov	r4, r1
 801459a:	b118      	cbz	r0, 80145a4 <__swsetup_r+0x14>
 801459c:	6a03      	ldr	r3, [r0, #32]
 801459e:	b90b      	cbnz	r3, 80145a4 <__swsetup_r+0x14>
 80145a0:	f7fc f884 	bl	80106ac <__sinit>
 80145a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145a8:	0719      	lsls	r1, r3, #28
 80145aa:	d422      	bmi.n	80145f2 <__swsetup_r+0x62>
 80145ac:	06da      	lsls	r2, r3, #27
 80145ae:	d407      	bmi.n	80145c0 <__swsetup_r+0x30>
 80145b0:	2209      	movs	r2, #9
 80145b2:	602a      	str	r2, [r5, #0]
 80145b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80145b8:	81a3      	strh	r3, [r4, #12]
 80145ba:	f04f 30ff 	mov.w	r0, #4294967295
 80145be:	e033      	b.n	8014628 <__swsetup_r+0x98>
 80145c0:	0758      	lsls	r0, r3, #29
 80145c2:	d512      	bpl.n	80145ea <__swsetup_r+0x5a>
 80145c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80145c6:	b141      	cbz	r1, 80145da <__swsetup_r+0x4a>
 80145c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80145cc:	4299      	cmp	r1, r3
 80145ce:	d002      	beq.n	80145d6 <__swsetup_r+0x46>
 80145d0:	4628      	mov	r0, r5
 80145d2:	f7fd f905 	bl	80117e0 <_free_r>
 80145d6:	2300      	movs	r3, #0
 80145d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80145da:	89a3      	ldrh	r3, [r4, #12]
 80145dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80145e0:	81a3      	strh	r3, [r4, #12]
 80145e2:	2300      	movs	r3, #0
 80145e4:	6063      	str	r3, [r4, #4]
 80145e6:	6923      	ldr	r3, [r4, #16]
 80145e8:	6023      	str	r3, [r4, #0]
 80145ea:	89a3      	ldrh	r3, [r4, #12]
 80145ec:	f043 0308 	orr.w	r3, r3, #8
 80145f0:	81a3      	strh	r3, [r4, #12]
 80145f2:	6923      	ldr	r3, [r4, #16]
 80145f4:	b94b      	cbnz	r3, 801460a <__swsetup_r+0x7a>
 80145f6:	89a3      	ldrh	r3, [r4, #12]
 80145f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80145fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014600:	d003      	beq.n	801460a <__swsetup_r+0x7a>
 8014602:	4621      	mov	r1, r4
 8014604:	4628      	mov	r0, r5
 8014606:	f000 f88b 	bl	8014720 <__smakebuf_r>
 801460a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801460e:	f013 0201 	ands.w	r2, r3, #1
 8014612:	d00a      	beq.n	801462a <__swsetup_r+0x9a>
 8014614:	2200      	movs	r2, #0
 8014616:	60a2      	str	r2, [r4, #8]
 8014618:	6962      	ldr	r2, [r4, #20]
 801461a:	4252      	negs	r2, r2
 801461c:	61a2      	str	r2, [r4, #24]
 801461e:	6922      	ldr	r2, [r4, #16]
 8014620:	b942      	cbnz	r2, 8014634 <__swsetup_r+0xa4>
 8014622:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014626:	d1c5      	bne.n	80145b4 <__swsetup_r+0x24>
 8014628:	bd38      	pop	{r3, r4, r5, pc}
 801462a:	0799      	lsls	r1, r3, #30
 801462c:	bf58      	it	pl
 801462e:	6962      	ldrpl	r2, [r4, #20]
 8014630:	60a2      	str	r2, [r4, #8]
 8014632:	e7f4      	b.n	801461e <__swsetup_r+0x8e>
 8014634:	2000      	movs	r0, #0
 8014636:	e7f7      	b.n	8014628 <__swsetup_r+0x98>
 8014638:	200000c4 	.word	0x200000c4

0801463c <_raise_r>:
 801463c:	291f      	cmp	r1, #31
 801463e:	b538      	push	{r3, r4, r5, lr}
 8014640:	4605      	mov	r5, r0
 8014642:	460c      	mov	r4, r1
 8014644:	d904      	bls.n	8014650 <_raise_r+0x14>
 8014646:	2316      	movs	r3, #22
 8014648:	6003      	str	r3, [r0, #0]
 801464a:	f04f 30ff 	mov.w	r0, #4294967295
 801464e:	bd38      	pop	{r3, r4, r5, pc}
 8014650:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014652:	b112      	cbz	r2, 801465a <_raise_r+0x1e>
 8014654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014658:	b94b      	cbnz	r3, 801466e <_raise_r+0x32>
 801465a:	4628      	mov	r0, r5
 801465c:	f000 f830 	bl	80146c0 <_getpid_r>
 8014660:	4622      	mov	r2, r4
 8014662:	4601      	mov	r1, r0
 8014664:	4628      	mov	r0, r5
 8014666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801466a:	f000 b817 	b.w	801469c <_kill_r>
 801466e:	2b01      	cmp	r3, #1
 8014670:	d00a      	beq.n	8014688 <_raise_r+0x4c>
 8014672:	1c59      	adds	r1, r3, #1
 8014674:	d103      	bne.n	801467e <_raise_r+0x42>
 8014676:	2316      	movs	r3, #22
 8014678:	6003      	str	r3, [r0, #0]
 801467a:	2001      	movs	r0, #1
 801467c:	e7e7      	b.n	801464e <_raise_r+0x12>
 801467e:	2100      	movs	r1, #0
 8014680:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014684:	4620      	mov	r0, r4
 8014686:	4798      	blx	r3
 8014688:	2000      	movs	r0, #0
 801468a:	e7e0      	b.n	801464e <_raise_r+0x12>

0801468c <raise>:
 801468c:	4b02      	ldr	r3, [pc, #8]	@ (8014698 <raise+0xc>)
 801468e:	4601      	mov	r1, r0
 8014690:	6818      	ldr	r0, [r3, #0]
 8014692:	f7ff bfd3 	b.w	801463c <_raise_r>
 8014696:	bf00      	nop
 8014698:	200000c4 	.word	0x200000c4

0801469c <_kill_r>:
 801469c:	b538      	push	{r3, r4, r5, lr}
 801469e:	4d07      	ldr	r5, [pc, #28]	@ (80146bc <_kill_r+0x20>)
 80146a0:	2300      	movs	r3, #0
 80146a2:	4604      	mov	r4, r0
 80146a4:	4608      	mov	r0, r1
 80146a6:	4611      	mov	r1, r2
 80146a8:	602b      	str	r3, [r5, #0]
 80146aa:	f7f0 fd07 	bl	80050bc <_kill>
 80146ae:	1c43      	adds	r3, r0, #1
 80146b0:	d102      	bne.n	80146b8 <_kill_r+0x1c>
 80146b2:	682b      	ldr	r3, [r5, #0]
 80146b4:	b103      	cbz	r3, 80146b8 <_kill_r+0x1c>
 80146b6:	6023      	str	r3, [r4, #0]
 80146b8:	bd38      	pop	{r3, r4, r5, pc}
 80146ba:	bf00      	nop
 80146bc:	20005724 	.word	0x20005724

080146c0 <_getpid_r>:
 80146c0:	f7f0 bcf4 	b.w	80050ac <_getpid>

080146c4 <_malloc_usable_size_r>:
 80146c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80146c8:	1f18      	subs	r0, r3, #4
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	bfbc      	itt	lt
 80146ce:	580b      	ldrlt	r3, [r1, r0]
 80146d0:	18c0      	addlt	r0, r0, r3
 80146d2:	4770      	bx	lr

080146d4 <__swhatbuf_r>:
 80146d4:	b570      	push	{r4, r5, r6, lr}
 80146d6:	460c      	mov	r4, r1
 80146d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146dc:	2900      	cmp	r1, #0
 80146de:	b096      	sub	sp, #88	@ 0x58
 80146e0:	4615      	mov	r5, r2
 80146e2:	461e      	mov	r6, r3
 80146e4:	da0d      	bge.n	8014702 <__swhatbuf_r+0x2e>
 80146e6:	89a3      	ldrh	r3, [r4, #12]
 80146e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80146ec:	f04f 0100 	mov.w	r1, #0
 80146f0:	bf14      	ite	ne
 80146f2:	2340      	movne	r3, #64	@ 0x40
 80146f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80146f8:	2000      	movs	r0, #0
 80146fa:	6031      	str	r1, [r6, #0]
 80146fc:	602b      	str	r3, [r5, #0]
 80146fe:	b016      	add	sp, #88	@ 0x58
 8014700:	bd70      	pop	{r4, r5, r6, pc}
 8014702:	466a      	mov	r2, sp
 8014704:	f000 f848 	bl	8014798 <_fstat_r>
 8014708:	2800      	cmp	r0, #0
 801470a:	dbec      	blt.n	80146e6 <__swhatbuf_r+0x12>
 801470c:	9901      	ldr	r1, [sp, #4]
 801470e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014712:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014716:	4259      	negs	r1, r3
 8014718:	4159      	adcs	r1, r3
 801471a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801471e:	e7eb      	b.n	80146f8 <__swhatbuf_r+0x24>

08014720 <__smakebuf_r>:
 8014720:	898b      	ldrh	r3, [r1, #12]
 8014722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014724:	079d      	lsls	r5, r3, #30
 8014726:	4606      	mov	r6, r0
 8014728:	460c      	mov	r4, r1
 801472a:	d507      	bpl.n	801473c <__smakebuf_r+0x1c>
 801472c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014730:	6023      	str	r3, [r4, #0]
 8014732:	6123      	str	r3, [r4, #16]
 8014734:	2301      	movs	r3, #1
 8014736:	6163      	str	r3, [r4, #20]
 8014738:	b003      	add	sp, #12
 801473a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801473c:	ab01      	add	r3, sp, #4
 801473e:	466a      	mov	r2, sp
 8014740:	f7ff ffc8 	bl	80146d4 <__swhatbuf_r>
 8014744:	9f00      	ldr	r7, [sp, #0]
 8014746:	4605      	mov	r5, r0
 8014748:	4639      	mov	r1, r7
 801474a:	4630      	mov	r0, r6
 801474c:	f7fa ffe8 	bl	800f720 <_malloc_r>
 8014750:	b948      	cbnz	r0, 8014766 <__smakebuf_r+0x46>
 8014752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014756:	059a      	lsls	r2, r3, #22
 8014758:	d4ee      	bmi.n	8014738 <__smakebuf_r+0x18>
 801475a:	f023 0303 	bic.w	r3, r3, #3
 801475e:	f043 0302 	orr.w	r3, r3, #2
 8014762:	81a3      	strh	r3, [r4, #12]
 8014764:	e7e2      	b.n	801472c <__smakebuf_r+0xc>
 8014766:	89a3      	ldrh	r3, [r4, #12]
 8014768:	6020      	str	r0, [r4, #0]
 801476a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801476e:	81a3      	strh	r3, [r4, #12]
 8014770:	9b01      	ldr	r3, [sp, #4]
 8014772:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014776:	b15b      	cbz	r3, 8014790 <__smakebuf_r+0x70>
 8014778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801477c:	4630      	mov	r0, r6
 801477e:	f000 f81d 	bl	80147bc <_isatty_r>
 8014782:	b128      	cbz	r0, 8014790 <__smakebuf_r+0x70>
 8014784:	89a3      	ldrh	r3, [r4, #12]
 8014786:	f023 0303 	bic.w	r3, r3, #3
 801478a:	f043 0301 	orr.w	r3, r3, #1
 801478e:	81a3      	strh	r3, [r4, #12]
 8014790:	89a3      	ldrh	r3, [r4, #12]
 8014792:	431d      	orrs	r5, r3
 8014794:	81a5      	strh	r5, [r4, #12]
 8014796:	e7cf      	b.n	8014738 <__smakebuf_r+0x18>

08014798 <_fstat_r>:
 8014798:	b538      	push	{r3, r4, r5, lr}
 801479a:	4d07      	ldr	r5, [pc, #28]	@ (80147b8 <_fstat_r+0x20>)
 801479c:	2300      	movs	r3, #0
 801479e:	4604      	mov	r4, r0
 80147a0:	4608      	mov	r0, r1
 80147a2:	4611      	mov	r1, r2
 80147a4:	602b      	str	r3, [r5, #0]
 80147a6:	f7f0 fccd 	bl	8005144 <_fstat>
 80147aa:	1c43      	adds	r3, r0, #1
 80147ac:	d102      	bne.n	80147b4 <_fstat_r+0x1c>
 80147ae:	682b      	ldr	r3, [r5, #0]
 80147b0:	b103      	cbz	r3, 80147b4 <_fstat_r+0x1c>
 80147b2:	6023      	str	r3, [r4, #0]
 80147b4:	bd38      	pop	{r3, r4, r5, pc}
 80147b6:	bf00      	nop
 80147b8:	20005724 	.word	0x20005724

080147bc <_isatty_r>:
 80147bc:	b538      	push	{r3, r4, r5, lr}
 80147be:	4d06      	ldr	r5, [pc, #24]	@ (80147d8 <_isatty_r+0x1c>)
 80147c0:	2300      	movs	r3, #0
 80147c2:	4604      	mov	r4, r0
 80147c4:	4608      	mov	r0, r1
 80147c6:	602b      	str	r3, [r5, #0]
 80147c8:	f7f0 fccc 	bl	8005164 <_isatty>
 80147cc:	1c43      	adds	r3, r0, #1
 80147ce:	d102      	bne.n	80147d6 <_isatty_r+0x1a>
 80147d0:	682b      	ldr	r3, [r5, #0]
 80147d2:	b103      	cbz	r3, 80147d6 <_isatty_r+0x1a>
 80147d4:	6023      	str	r3, [r4, #0]
 80147d6:	bd38      	pop	{r3, r4, r5, pc}
 80147d8:	20005724 	.word	0x20005724

080147dc <pow>:
 80147dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147de:	ed2d 8b02 	vpush	{d8}
 80147e2:	eeb0 8a40 	vmov.f32	s16, s0
 80147e6:	eef0 8a60 	vmov.f32	s17, s1
 80147ea:	ec55 4b11 	vmov	r4, r5, d1
 80147ee:	f000 f977 	bl	8014ae0 <__ieee754_pow>
 80147f2:	4622      	mov	r2, r4
 80147f4:	462b      	mov	r3, r5
 80147f6:	4620      	mov	r0, r4
 80147f8:	4629      	mov	r1, r5
 80147fa:	ec57 6b10 	vmov	r6, r7, d0
 80147fe:	f7ec f9a5 	bl	8000b4c <__aeabi_dcmpun>
 8014802:	2800      	cmp	r0, #0
 8014804:	d13b      	bne.n	801487e <pow+0xa2>
 8014806:	ec51 0b18 	vmov	r0, r1, d8
 801480a:	2200      	movs	r2, #0
 801480c:	2300      	movs	r3, #0
 801480e:	f7ec f96b 	bl	8000ae8 <__aeabi_dcmpeq>
 8014812:	b1b8      	cbz	r0, 8014844 <pow+0x68>
 8014814:	2200      	movs	r2, #0
 8014816:	2300      	movs	r3, #0
 8014818:	4620      	mov	r0, r4
 801481a:	4629      	mov	r1, r5
 801481c:	f7ec f964 	bl	8000ae8 <__aeabi_dcmpeq>
 8014820:	2800      	cmp	r0, #0
 8014822:	d146      	bne.n	80148b2 <pow+0xd6>
 8014824:	ec45 4b10 	vmov	d0, r4, r5
 8014828:	f000 f874 	bl	8014914 <finite>
 801482c:	b338      	cbz	r0, 801487e <pow+0xa2>
 801482e:	2200      	movs	r2, #0
 8014830:	2300      	movs	r3, #0
 8014832:	4620      	mov	r0, r4
 8014834:	4629      	mov	r1, r5
 8014836:	f7ec f961 	bl	8000afc <__aeabi_dcmplt>
 801483a:	b300      	cbz	r0, 801487e <pow+0xa2>
 801483c:	f7fc f922 	bl	8010a84 <__errno>
 8014840:	2322      	movs	r3, #34	@ 0x22
 8014842:	e01b      	b.n	801487c <pow+0xa0>
 8014844:	ec47 6b10 	vmov	d0, r6, r7
 8014848:	f000 f864 	bl	8014914 <finite>
 801484c:	b9e0      	cbnz	r0, 8014888 <pow+0xac>
 801484e:	eeb0 0a48 	vmov.f32	s0, s16
 8014852:	eef0 0a68 	vmov.f32	s1, s17
 8014856:	f000 f85d 	bl	8014914 <finite>
 801485a:	b1a8      	cbz	r0, 8014888 <pow+0xac>
 801485c:	ec45 4b10 	vmov	d0, r4, r5
 8014860:	f000 f858 	bl	8014914 <finite>
 8014864:	b180      	cbz	r0, 8014888 <pow+0xac>
 8014866:	4632      	mov	r2, r6
 8014868:	463b      	mov	r3, r7
 801486a:	4630      	mov	r0, r6
 801486c:	4639      	mov	r1, r7
 801486e:	f7ec f96d 	bl	8000b4c <__aeabi_dcmpun>
 8014872:	2800      	cmp	r0, #0
 8014874:	d0e2      	beq.n	801483c <pow+0x60>
 8014876:	f7fc f905 	bl	8010a84 <__errno>
 801487a:	2321      	movs	r3, #33	@ 0x21
 801487c:	6003      	str	r3, [r0, #0]
 801487e:	ecbd 8b02 	vpop	{d8}
 8014882:	ec47 6b10 	vmov	d0, r6, r7
 8014886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014888:	2200      	movs	r2, #0
 801488a:	2300      	movs	r3, #0
 801488c:	4630      	mov	r0, r6
 801488e:	4639      	mov	r1, r7
 8014890:	f7ec f92a 	bl	8000ae8 <__aeabi_dcmpeq>
 8014894:	2800      	cmp	r0, #0
 8014896:	d0f2      	beq.n	801487e <pow+0xa2>
 8014898:	eeb0 0a48 	vmov.f32	s0, s16
 801489c:	eef0 0a68 	vmov.f32	s1, s17
 80148a0:	f000 f838 	bl	8014914 <finite>
 80148a4:	2800      	cmp	r0, #0
 80148a6:	d0ea      	beq.n	801487e <pow+0xa2>
 80148a8:	ec45 4b10 	vmov	d0, r4, r5
 80148ac:	f000 f832 	bl	8014914 <finite>
 80148b0:	e7c3      	b.n	801483a <pow+0x5e>
 80148b2:	4f01      	ldr	r7, [pc, #4]	@ (80148b8 <pow+0xdc>)
 80148b4:	2600      	movs	r6, #0
 80148b6:	e7e2      	b.n	801487e <pow+0xa2>
 80148b8:	3ff00000 	.word	0x3ff00000

080148bc <sqrt>:
 80148bc:	b538      	push	{r3, r4, r5, lr}
 80148be:	ed2d 8b02 	vpush	{d8}
 80148c2:	ec55 4b10 	vmov	r4, r5, d0
 80148c6:	f000 f831 	bl	801492c <__ieee754_sqrt>
 80148ca:	4622      	mov	r2, r4
 80148cc:	462b      	mov	r3, r5
 80148ce:	4620      	mov	r0, r4
 80148d0:	4629      	mov	r1, r5
 80148d2:	eeb0 8a40 	vmov.f32	s16, s0
 80148d6:	eef0 8a60 	vmov.f32	s17, s1
 80148da:	f7ec f937 	bl	8000b4c <__aeabi_dcmpun>
 80148de:	b990      	cbnz	r0, 8014906 <sqrt+0x4a>
 80148e0:	2200      	movs	r2, #0
 80148e2:	2300      	movs	r3, #0
 80148e4:	4620      	mov	r0, r4
 80148e6:	4629      	mov	r1, r5
 80148e8:	f7ec f908 	bl	8000afc <__aeabi_dcmplt>
 80148ec:	b158      	cbz	r0, 8014906 <sqrt+0x4a>
 80148ee:	f7fc f8c9 	bl	8010a84 <__errno>
 80148f2:	2321      	movs	r3, #33	@ 0x21
 80148f4:	6003      	str	r3, [r0, #0]
 80148f6:	2200      	movs	r2, #0
 80148f8:	2300      	movs	r3, #0
 80148fa:	4610      	mov	r0, r2
 80148fc:	4619      	mov	r1, r3
 80148fe:	f7eb ffb5 	bl	800086c <__aeabi_ddiv>
 8014902:	ec41 0b18 	vmov	d8, r0, r1
 8014906:	eeb0 0a48 	vmov.f32	s0, s16
 801490a:	eef0 0a68 	vmov.f32	s1, s17
 801490e:	ecbd 8b02 	vpop	{d8}
 8014912:	bd38      	pop	{r3, r4, r5, pc}

08014914 <finite>:
 8014914:	b082      	sub	sp, #8
 8014916:	ed8d 0b00 	vstr	d0, [sp]
 801491a:	9801      	ldr	r0, [sp, #4]
 801491c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8014920:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8014924:	0fc0      	lsrs	r0, r0, #31
 8014926:	b002      	add	sp, #8
 8014928:	4770      	bx	lr
	...

0801492c <__ieee754_sqrt>:
 801492c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014930:	4a68      	ldr	r2, [pc, #416]	@ (8014ad4 <__ieee754_sqrt+0x1a8>)
 8014932:	ec55 4b10 	vmov	r4, r5, d0
 8014936:	43aa      	bics	r2, r5
 8014938:	462b      	mov	r3, r5
 801493a:	4621      	mov	r1, r4
 801493c:	d110      	bne.n	8014960 <__ieee754_sqrt+0x34>
 801493e:	4622      	mov	r2, r4
 8014940:	4620      	mov	r0, r4
 8014942:	4629      	mov	r1, r5
 8014944:	f7eb fe68 	bl	8000618 <__aeabi_dmul>
 8014948:	4602      	mov	r2, r0
 801494a:	460b      	mov	r3, r1
 801494c:	4620      	mov	r0, r4
 801494e:	4629      	mov	r1, r5
 8014950:	f7eb fcac 	bl	80002ac <__adddf3>
 8014954:	4604      	mov	r4, r0
 8014956:	460d      	mov	r5, r1
 8014958:	ec45 4b10 	vmov	d0, r4, r5
 801495c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014960:	2d00      	cmp	r5, #0
 8014962:	dc0e      	bgt.n	8014982 <__ieee754_sqrt+0x56>
 8014964:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8014968:	4322      	orrs	r2, r4
 801496a:	d0f5      	beq.n	8014958 <__ieee754_sqrt+0x2c>
 801496c:	b19d      	cbz	r5, 8014996 <__ieee754_sqrt+0x6a>
 801496e:	4622      	mov	r2, r4
 8014970:	4620      	mov	r0, r4
 8014972:	4629      	mov	r1, r5
 8014974:	f7eb fc98 	bl	80002a8 <__aeabi_dsub>
 8014978:	4602      	mov	r2, r0
 801497a:	460b      	mov	r3, r1
 801497c:	f7eb ff76 	bl	800086c <__aeabi_ddiv>
 8014980:	e7e8      	b.n	8014954 <__ieee754_sqrt+0x28>
 8014982:	152a      	asrs	r2, r5, #20
 8014984:	d115      	bne.n	80149b2 <__ieee754_sqrt+0x86>
 8014986:	2000      	movs	r0, #0
 8014988:	e009      	b.n	801499e <__ieee754_sqrt+0x72>
 801498a:	0acb      	lsrs	r3, r1, #11
 801498c:	3a15      	subs	r2, #21
 801498e:	0549      	lsls	r1, r1, #21
 8014990:	2b00      	cmp	r3, #0
 8014992:	d0fa      	beq.n	801498a <__ieee754_sqrt+0x5e>
 8014994:	e7f7      	b.n	8014986 <__ieee754_sqrt+0x5a>
 8014996:	462a      	mov	r2, r5
 8014998:	e7fa      	b.n	8014990 <__ieee754_sqrt+0x64>
 801499a:	005b      	lsls	r3, r3, #1
 801499c:	3001      	adds	r0, #1
 801499e:	02dc      	lsls	r4, r3, #11
 80149a0:	d5fb      	bpl.n	801499a <__ieee754_sqrt+0x6e>
 80149a2:	1e44      	subs	r4, r0, #1
 80149a4:	1b12      	subs	r2, r2, r4
 80149a6:	f1c0 0420 	rsb	r4, r0, #32
 80149aa:	fa21 f404 	lsr.w	r4, r1, r4
 80149ae:	4323      	orrs	r3, r4
 80149b0:	4081      	lsls	r1, r0
 80149b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80149b6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80149ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80149be:	07d2      	lsls	r2, r2, #31
 80149c0:	bf5c      	itt	pl
 80149c2:	005b      	lslpl	r3, r3, #1
 80149c4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80149c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80149cc:	bf58      	it	pl
 80149ce:	0049      	lslpl	r1, r1, #1
 80149d0:	2600      	movs	r6, #0
 80149d2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80149d6:	106d      	asrs	r5, r5, #1
 80149d8:	0049      	lsls	r1, r1, #1
 80149da:	2016      	movs	r0, #22
 80149dc:	4632      	mov	r2, r6
 80149de:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80149e2:	1917      	adds	r7, r2, r4
 80149e4:	429f      	cmp	r7, r3
 80149e6:	bfde      	ittt	le
 80149e8:	193a      	addle	r2, r7, r4
 80149ea:	1bdb      	suble	r3, r3, r7
 80149ec:	1936      	addle	r6, r6, r4
 80149ee:	0fcf      	lsrs	r7, r1, #31
 80149f0:	3801      	subs	r0, #1
 80149f2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80149f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80149fa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80149fe:	d1f0      	bne.n	80149e2 <__ieee754_sqrt+0xb6>
 8014a00:	4604      	mov	r4, r0
 8014a02:	2720      	movs	r7, #32
 8014a04:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	eb00 0e0c 	add.w	lr, r0, ip
 8014a0e:	db02      	blt.n	8014a16 <__ieee754_sqrt+0xea>
 8014a10:	d113      	bne.n	8014a3a <__ieee754_sqrt+0x10e>
 8014a12:	458e      	cmp	lr, r1
 8014a14:	d811      	bhi.n	8014a3a <__ieee754_sqrt+0x10e>
 8014a16:	f1be 0f00 	cmp.w	lr, #0
 8014a1a:	eb0e 000c 	add.w	r0, lr, ip
 8014a1e:	da42      	bge.n	8014aa6 <__ieee754_sqrt+0x17a>
 8014a20:	2800      	cmp	r0, #0
 8014a22:	db40      	blt.n	8014aa6 <__ieee754_sqrt+0x17a>
 8014a24:	f102 0801 	add.w	r8, r2, #1
 8014a28:	1a9b      	subs	r3, r3, r2
 8014a2a:	458e      	cmp	lr, r1
 8014a2c:	bf88      	it	hi
 8014a2e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014a32:	eba1 010e 	sub.w	r1, r1, lr
 8014a36:	4464      	add	r4, ip
 8014a38:	4642      	mov	r2, r8
 8014a3a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8014a3e:	3f01      	subs	r7, #1
 8014a40:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8014a44:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014a48:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8014a4c:	d1dc      	bne.n	8014a08 <__ieee754_sqrt+0xdc>
 8014a4e:	4319      	orrs	r1, r3
 8014a50:	d01b      	beq.n	8014a8a <__ieee754_sqrt+0x15e>
 8014a52:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8014ad8 <__ieee754_sqrt+0x1ac>
 8014a56:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8014adc <__ieee754_sqrt+0x1b0>
 8014a5a:	e9da 0100 	ldrd	r0, r1, [sl]
 8014a5e:	e9db 2300 	ldrd	r2, r3, [fp]
 8014a62:	f7eb fc21 	bl	80002a8 <__aeabi_dsub>
 8014a66:	e9da 8900 	ldrd	r8, r9, [sl]
 8014a6a:	4602      	mov	r2, r0
 8014a6c:	460b      	mov	r3, r1
 8014a6e:	4640      	mov	r0, r8
 8014a70:	4649      	mov	r1, r9
 8014a72:	f7ec f84d 	bl	8000b10 <__aeabi_dcmple>
 8014a76:	b140      	cbz	r0, 8014a8a <__ieee754_sqrt+0x15e>
 8014a78:	f1b4 3fff 	cmp.w	r4, #4294967295
 8014a7c:	e9da 0100 	ldrd	r0, r1, [sl]
 8014a80:	e9db 2300 	ldrd	r2, r3, [fp]
 8014a84:	d111      	bne.n	8014aaa <__ieee754_sqrt+0x17e>
 8014a86:	3601      	adds	r6, #1
 8014a88:	463c      	mov	r4, r7
 8014a8a:	1072      	asrs	r2, r6, #1
 8014a8c:	0863      	lsrs	r3, r4, #1
 8014a8e:	07f1      	lsls	r1, r6, #31
 8014a90:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8014a94:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8014a98:	bf48      	it	mi
 8014a9a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8014a9e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	e756      	b.n	8014954 <__ieee754_sqrt+0x28>
 8014aa6:	4690      	mov	r8, r2
 8014aa8:	e7be      	b.n	8014a28 <__ieee754_sqrt+0xfc>
 8014aaa:	f7eb fbff 	bl	80002ac <__adddf3>
 8014aae:	e9da 8900 	ldrd	r8, r9, [sl]
 8014ab2:	4602      	mov	r2, r0
 8014ab4:	460b      	mov	r3, r1
 8014ab6:	4640      	mov	r0, r8
 8014ab8:	4649      	mov	r1, r9
 8014aba:	f7ec f81f 	bl	8000afc <__aeabi_dcmplt>
 8014abe:	b120      	cbz	r0, 8014aca <__ieee754_sqrt+0x19e>
 8014ac0:	1ca0      	adds	r0, r4, #2
 8014ac2:	bf08      	it	eq
 8014ac4:	3601      	addeq	r6, #1
 8014ac6:	3402      	adds	r4, #2
 8014ac8:	e7df      	b.n	8014a8a <__ieee754_sqrt+0x15e>
 8014aca:	1c63      	adds	r3, r4, #1
 8014acc:	f023 0401 	bic.w	r4, r3, #1
 8014ad0:	e7db      	b.n	8014a8a <__ieee754_sqrt+0x15e>
 8014ad2:	bf00      	nop
 8014ad4:	7ff00000 	.word	0x7ff00000
 8014ad8:	20000288 	.word	0x20000288
 8014adc:	20000280 	.word	0x20000280

08014ae0 <__ieee754_pow>:
 8014ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ae4:	b091      	sub	sp, #68	@ 0x44
 8014ae6:	ed8d 1b00 	vstr	d1, [sp]
 8014aea:	e9dd 1900 	ldrd	r1, r9, [sp]
 8014aee:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8014af2:	ea5a 0001 	orrs.w	r0, sl, r1
 8014af6:	ec57 6b10 	vmov	r6, r7, d0
 8014afa:	d113      	bne.n	8014b24 <__ieee754_pow+0x44>
 8014afc:	19b3      	adds	r3, r6, r6
 8014afe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8014b02:	4152      	adcs	r2, r2
 8014b04:	4298      	cmp	r0, r3
 8014b06:	4b98      	ldr	r3, [pc, #608]	@ (8014d68 <__ieee754_pow+0x288>)
 8014b08:	4193      	sbcs	r3, r2
 8014b0a:	f080 84ea 	bcs.w	80154e2 <__ieee754_pow+0xa02>
 8014b0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014b12:	4630      	mov	r0, r6
 8014b14:	4639      	mov	r1, r7
 8014b16:	f7eb fbc9 	bl	80002ac <__adddf3>
 8014b1a:	ec41 0b10 	vmov	d0, r0, r1
 8014b1e:	b011      	add	sp, #68	@ 0x44
 8014b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b24:	4a91      	ldr	r2, [pc, #580]	@ (8014d6c <__ieee754_pow+0x28c>)
 8014b26:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014b2a:	4590      	cmp	r8, r2
 8014b2c:	463d      	mov	r5, r7
 8014b2e:	4633      	mov	r3, r6
 8014b30:	d806      	bhi.n	8014b40 <__ieee754_pow+0x60>
 8014b32:	d101      	bne.n	8014b38 <__ieee754_pow+0x58>
 8014b34:	2e00      	cmp	r6, #0
 8014b36:	d1ea      	bne.n	8014b0e <__ieee754_pow+0x2e>
 8014b38:	4592      	cmp	sl, r2
 8014b3a:	d801      	bhi.n	8014b40 <__ieee754_pow+0x60>
 8014b3c:	d10e      	bne.n	8014b5c <__ieee754_pow+0x7c>
 8014b3e:	b169      	cbz	r1, 8014b5c <__ieee754_pow+0x7c>
 8014b40:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8014b44:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8014b48:	431d      	orrs	r5, r3
 8014b4a:	d1e0      	bne.n	8014b0e <__ieee754_pow+0x2e>
 8014b4c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014b50:	18db      	adds	r3, r3, r3
 8014b52:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8014b56:	4152      	adcs	r2, r2
 8014b58:	429d      	cmp	r5, r3
 8014b5a:	e7d4      	b.n	8014b06 <__ieee754_pow+0x26>
 8014b5c:	2d00      	cmp	r5, #0
 8014b5e:	46c3      	mov	fp, r8
 8014b60:	da3a      	bge.n	8014bd8 <__ieee754_pow+0xf8>
 8014b62:	4a83      	ldr	r2, [pc, #524]	@ (8014d70 <__ieee754_pow+0x290>)
 8014b64:	4592      	cmp	sl, r2
 8014b66:	d84d      	bhi.n	8014c04 <__ieee754_pow+0x124>
 8014b68:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8014b6c:	4592      	cmp	sl, r2
 8014b6e:	f240 84c7 	bls.w	8015500 <__ieee754_pow+0xa20>
 8014b72:	ea4f 522a 	mov.w	r2, sl, asr #20
 8014b76:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8014b7a:	2a14      	cmp	r2, #20
 8014b7c:	dd0f      	ble.n	8014b9e <__ieee754_pow+0xbe>
 8014b7e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8014b82:	fa21 f402 	lsr.w	r4, r1, r2
 8014b86:	fa04 f202 	lsl.w	r2, r4, r2
 8014b8a:	428a      	cmp	r2, r1
 8014b8c:	f040 84b8 	bne.w	8015500 <__ieee754_pow+0xa20>
 8014b90:	f004 0401 	and.w	r4, r4, #1
 8014b94:	f1c4 0402 	rsb	r4, r4, #2
 8014b98:	2900      	cmp	r1, #0
 8014b9a:	d158      	bne.n	8014c4e <__ieee754_pow+0x16e>
 8014b9c:	e00e      	b.n	8014bbc <__ieee754_pow+0xdc>
 8014b9e:	2900      	cmp	r1, #0
 8014ba0:	d154      	bne.n	8014c4c <__ieee754_pow+0x16c>
 8014ba2:	f1c2 0214 	rsb	r2, r2, #20
 8014ba6:	fa4a f402 	asr.w	r4, sl, r2
 8014baa:	fa04 f202 	lsl.w	r2, r4, r2
 8014bae:	4552      	cmp	r2, sl
 8014bb0:	f040 84a3 	bne.w	80154fa <__ieee754_pow+0xa1a>
 8014bb4:	f004 0401 	and.w	r4, r4, #1
 8014bb8:	f1c4 0402 	rsb	r4, r4, #2
 8014bbc:	4a6d      	ldr	r2, [pc, #436]	@ (8014d74 <__ieee754_pow+0x294>)
 8014bbe:	4592      	cmp	sl, r2
 8014bc0:	d12e      	bne.n	8014c20 <__ieee754_pow+0x140>
 8014bc2:	f1b9 0f00 	cmp.w	r9, #0
 8014bc6:	f280 8494 	bge.w	80154f2 <__ieee754_pow+0xa12>
 8014bca:	496a      	ldr	r1, [pc, #424]	@ (8014d74 <__ieee754_pow+0x294>)
 8014bcc:	4632      	mov	r2, r6
 8014bce:	463b      	mov	r3, r7
 8014bd0:	2000      	movs	r0, #0
 8014bd2:	f7eb fe4b 	bl	800086c <__aeabi_ddiv>
 8014bd6:	e7a0      	b.n	8014b1a <__ieee754_pow+0x3a>
 8014bd8:	2400      	movs	r4, #0
 8014bda:	bbc1      	cbnz	r1, 8014c4e <__ieee754_pow+0x16e>
 8014bdc:	4a63      	ldr	r2, [pc, #396]	@ (8014d6c <__ieee754_pow+0x28c>)
 8014bde:	4592      	cmp	sl, r2
 8014be0:	d1ec      	bne.n	8014bbc <__ieee754_pow+0xdc>
 8014be2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8014be6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8014bea:	431a      	orrs	r2, r3
 8014bec:	f000 8479 	beq.w	80154e2 <__ieee754_pow+0xa02>
 8014bf0:	4b61      	ldr	r3, [pc, #388]	@ (8014d78 <__ieee754_pow+0x298>)
 8014bf2:	4598      	cmp	r8, r3
 8014bf4:	d908      	bls.n	8014c08 <__ieee754_pow+0x128>
 8014bf6:	f1b9 0f00 	cmp.w	r9, #0
 8014bfa:	f2c0 8476 	blt.w	80154ea <__ieee754_pow+0xa0a>
 8014bfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c02:	e78a      	b.n	8014b1a <__ieee754_pow+0x3a>
 8014c04:	2402      	movs	r4, #2
 8014c06:	e7e8      	b.n	8014bda <__ieee754_pow+0xfa>
 8014c08:	f1b9 0f00 	cmp.w	r9, #0
 8014c0c:	f04f 0000 	mov.w	r0, #0
 8014c10:	f04f 0100 	mov.w	r1, #0
 8014c14:	da81      	bge.n	8014b1a <__ieee754_pow+0x3a>
 8014c16:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014c1a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8014c1e:	e77c      	b.n	8014b1a <__ieee754_pow+0x3a>
 8014c20:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8014c24:	d106      	bne.n	8014c34 <__ieee754_pow+0x154>
 8014c26:	4632      	mov	r2, r6
 8014c28:	463b      	mov	r3, r7
 8014c2a:	4630      	mov	r0, r6
 8014c2c:	4639      	mov	r1, r7
 8014c2e:	f7eb fcf3 	bl	8000618 <__aeabi_dmul>
 8014c32:	e772      	b.n	8014b1a <__ieee754_pow+0x3a>
 8014c34:	4a51      	ldr	r2, [pc, #324]	@ (8014d7c <__ieee754_pow+0x29c>)
 8014c36:	4591      	cmp	r9, r2
 8014c38:	d109      	bne.n	8014c4e <__ieee754_pow+0x16e>
 8014c3a:	2d00      	cmp	r5, #0
 8014c3c:	db07      	blt.n	8014c4e <__ieee754_pow+0x16e>
 8014c3e:	ec47 6b10 	vmov	d0, r6, r7
 8014c42:	b011      	add	sp, #68	@ 0x44
 8014c44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c48:	f7ff be70 	b.w	801492c <__ieee754_sqrt>
 8014c4c:	2400      	movs	r4, #0
 8014c4e:	ec47 6b10 	vmov	d0, r6, r7
 8014c52:	9302      	str	r3, [sp, #8]
 8014c54:	f000 fc88 	bl	8015568 <fabs>
 8014c58:	9b02      	ldr	r3, [sp, #8]
 8014c5a:	ec51 0b10 	vmov	r0, r1, d0
 8014c5e:	bb53      	cbnz	r3, 8014cb6 <__ieee754_pow+0x1d6>
 8014c60:	4b44      	ldr	r3, [pc, #272]	@ (8014d74 <__ieee754_pow+0x294>)
 8014c62:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d002      	beq.n	8014c70 <__ieee754_pow+0x190>
 8014c6a:	f1b8 0f00 	cmp.w	r8, #0
 8014c6e:	d122      	bne.n	8014cb6 <__ieee754_pow+0x1d6>
 8014c70:	f1b9 0f00 	cmp.w	r9, #0
 8014c74:	da05      	bge.n	8014c82 <__ieee754_pow+0x1a2>
 8014c76:	4602      	mov	r2, r0
 8014c78:	460b      	mov	r3, r1
 8014c7a:	2000      	movs	r0, #0
 8014c7c:	493d      	ldr	r1, [pc, #244]	@ (8014d74 <__ieee754_pow+0x294>)
 8014c7e:	f7eb fdf5 	bl	800086c <__aeabi_ddiv>
 8014c82:	2d00      	cmp	r5, #0
 8014c84:	f6bf af49 	bge.w	8014b1a <__ieee754_pow+0x3a>
 8014c88:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8014c8c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8014c90:	ea58 0804 	orrs.w	r8, r8, r4
 8014c94:	d108      	bne.n	8014ca8 <__ieee754_pow+0x1c8>
 8014c96:	4602      	mov	r2, r0
 8014c98:	460b      	mov	r3, r1
 8014c9a:	4610      	mov	r0, r2
 8014c9c:	4619      	mov	r1, r3
 8014c9e:	f7eb fb03 	bl	80002a8 <__aeabi_dsub>
 8014ca2:	4602      	mov	r2, r0
 8014ca4:	460b      	mov	r3, r1
 8014ca6:	e794      	b.n	8014bd2 <__ieee754_pow+0xf2>
 8014ca8:	2c01      	cmp	r4, #1
 8014caa:	f47f af36 	bne.w	8014b1a <__ieee754_pow+0x3a>
 8014cae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014cb2:	4619      	mov	r1, r3
 8014cb4:	e731      	b.n	8014b1a <__ieee754_pow+0x3a>
 8014cb6:	0feb      	lsrs	r3, r5, #31
 8014cb8:	3b01      	subs	r3, #1
 8014cba:	ea53 0204 	orrs.w	r2, r3, r4
 8014cbe:	d102      	bne.n	8014cc6 <__ieee754_pow+0x1e6>
 8014cc0:	4632      	mov	r2, r6
 8014cc2:	463b      	mov	r3, r7
 8014cc4:	e7e9      	b.n	8014c9a <__ieee754_pow+0x1ba>
 8014cc6:	3c01      	subs	r4, #1
 8014cc8:	431c      	orrs	r4, r3
 8014cca:	d016      	beq.n	8014cfa <__ieee754_pow+0x21a>
 8014ccc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8014d58 <__ieee754_pow+0x278>
 8014cd0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8014cd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014cd8:	f240 8112 	bls.w	8014f00 <__ieee754_pow+0x420>
 8014cdc:	4b28      	ldr	r3, [pc, #160]	@ (8014d80 <__ieee754_pow+0x2a0>)
 8014cde:	459a      	cmp	sl, r3
 8014ce0:	4b25      	ldr	r3, [pc, #148]	@ (8014d78 <__ieee754_pow+0x298>)
 8014ce2:	d916      	bls.n	8014d12 <__ieee754_pow+0x232>
 8014ce4:	4598      	cmp	r8, r3
 8014ce6:	d80b      	bhi.n	8014d00 <__ieee754_pow+0x220>
 8014ce8:	f1b9 0f00 	cmp.w	r9, #0
 8014cec:	da0b      	bge.n	8014d06 <__ieee754_pow+0x226>
 8014cee:	2000      	movs	r0, #0
 8014cf0:	b011      	add	sp, #68	@ 0x44
 8014cf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cf6:	f000 bcf3 	b.w	80156e0 <__math_oflow>
 8014cfa:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8014d60 <__ieee754_pow+0x280>
 8014cfe:	e7e7      	b.n	8014cd0 <__ieee754_pow+0x1f0>
 8014d00:	f1b9 0f00 	cmp.w	r9, #0
 8014d04:	dcf3      	bgt.n	8014cee <__ieee754_pow+0x20e>
 8014d06:	2000      	movs	r0, #0
 8014d08:	b011      	add	sp, #68	@ 0x44
 8014d0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d0e:	f000 bcdf 	b.w	80156d0 <__math_uflow>
 8014d12:	4598      	cmp	r8, r3
 8014d14:	d20c      	bcs.n	8014d30 <__ieee754_pow+0x250>
 8014d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	f7eb feed 	bl	8000afc <__aeabi_dcmplt>
 8014d22:	3800      	subs	r0, #0
 8014d24:	bf18      	it	ne
 8014d26:	2001      	movne	r0, #1
 8014d28:	f1b9 0f00 	cmp.w	r9, #0
 8014d2c:	daec      	bge.n	8014d08 <__ieee754_pow+0x228>
 8014d2e:	e7df      	b.n	8014cf0 <__ieee754_pow+0x210>
 8014d30:	4b10      	ldr	r3, [pc, #64]	@ (8014d74 <__ieee754_pow+0x294>)
 8014d32:	4598      	cmp	r8, r3
 8014d34:	f04f 0200 	mov.w	r2, #0
 8014d38:	d924      	bls.n	8014d84 <__ieee754_pow+0x2a4>
 8014d3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d3e:	2300      	movs	r3, #0
 8014d40:	f7eb fedc 	bl	8000afc <__aeabi_dcmplt>
 8014d44:	3800      	subs	r0, #0
 8014d46:	bf18      	it	ne
 8014d48:	2001      	movne	r0, #1
 8014d4a:	f1b9 0f00 	cmp.w	r9, #0
 8014d4e:	dccf      	bgt.n	8014cf0 <__ieee754_pow+0x210>
 8014d50:	e7da      	b.n	8014d08 <__ieee754_pow+0x228>
 8014d52:	bf00      	nop
 8014d54:	f3af 8000 	nop.w
 8014d58:	00000000 	.word	0x00000000
 8014d5c:	3ff00000 	.word	0x3ff00000
 8014d60:	00000000 	.word	0x00000000
 8014d64:	bff00000 	.word	0xbff00000
 8014d68:	fff00000 	.word	0xfff00000
 8014d6c:	7ff00000 	.word	0x7ff00000
 8014d70:	433fffff 	.word	0x433fffff
 8014d74:	3ff00000 	.word	0x3ff00000
 8014d78:	3fefffff 	.word	0x3fefffff
 8014d7c:	3fe00000 	.word	0x3fe00000
 8014d80:	43f00000 	.word	0x43f00000
 8014d84:	4b5a      	ldr	r3, [pc, #360]	@ (8014ef0 <__ieee754_pow+0x410>)
 8014d86:	f7eb fa8f 	bl	80002a8 <__aeabi_dsub>
 8014d8a:	a351      	add	r3, pc, #324	@ (adr r3, 8014ed0 <__ieee754_pow+0x3f0>)
 8014d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d90:	4604      	mov	r4, r0
 8014d92:	460d      	mov	r5, r1
 8014d94:	f7eb fc40 	bl	8000618 <__aeabi_dmul>
 8014d98:	a34f      	add	r3, pc, #316	@ (adr r3, 8014ed8 <__ieee754_pow+0x3f8>)
 8014d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d9e:	4606      	mov	r6, r0
 8014da0:	460f      	mov	r7, r1
 8014da2:	4620      	mov	r0, r4
 8014da4:	4629      	mov	r1, r5
 8014da6:	f7eb fc37 	bl	8000618 <__aeabi_dmul>
 8014daa:	4b52      	ldr	r3, [pc, #328]	@ (8014ef4 <__ieee754_pow+0x414>)
 8014dac:	4682      	mov	sl, r0
 8014dae:	468b      	mov	fp, r1
 8014db0:	2200      	movs	r2, #0
 8014db2:	4620      	mov	r0, r4
 8014db4:	4629      	mov	r1, r5
 8014db6:	f7eb fc2f 	bl	8000618 <__aeabi_dmul>
 8014dba:	4602      	mov	r2, r0
 8014dbc:	460b      	mov	r3, r1
 8014dbe:	a148      	add	r1, pc, #288	@ (adr r1, 8014ee0 <__ieee754_pow+0x400>)
 8014dc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014dc4:	f7eb fa70 	bl	80002a8 <__aeabi_dsub>
 8014dc8:	4622      	mov	r2, r4
 8014dca:	462b      	mov	r3, r5
 8014dcc:	f7eb fc24 	bl	8000618 <__aeabi_dmul>
 8014dd0:	4602      	mov	r2, r0
 8014dd2:	460b      	mov	r3, r1
 8014dd4:	2000      	movs	r0, #0
 8014dd6:	4948      	ldr	r1, [pc, #288]	@ (8014ef8 <__ieee754_pow+0x418>)
 8014dd8:	f7eb fa66 	bl	80002a8 <__aeabi_dsub>
 8014ddc:	4622      	mov	r2, r4
 8014dde:	4680      	mov	r8, r0
 8014de0:	4689      	mov	r9, r1
 8014de2:	462b      	mov	r3, r5
 8014de4:	4620      	mov	r0, r4
 8014de6:	4629      	mov	r1, r5
 8014de8:	f7eb fc16 	bl	8000618 <__aeabi_dmul>
 8014dec:	4602      	mov	r2, r0
 8014dee:	460b      	mov	r3, r1
 8014df0:	4640      	mov	r0, r8
 8014df2:	4649      	mov	r1, r9
 8014df4:	f7eb fc10 	bl	8000618 <__aeabi_dmul>
 8014df8:	a33b      	add	r3, pc, #236	@ (adr r3, 8014ee8 <__ieee754_pow+0x408>)
 8014dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dfe:	f7eb fc0b 	bl	8000618 <__aeabi_dmul>
 8014e02:	4602      	mov	r2, r0
 8014e04:	460b      	mov	r3, r1
 8014e06:	4650      	mov	r0, sl
 8014e08:	4659      	mov	r1, fp
 8014e0a:	f7eb fa4d 	bl	80002a8 <__aeabi_dsub>
 8014e0e:	4602      	mov	r2, r0
 8014e10:	460b      	mov	r3, r1
 8014e12:	4680      	mov	r8, r0
 8014e14:	4689      	mov	r9, r1
 8014e16:	4630      	mov	r0, r6
 8014e18:	4639      	mov	r1, r7
 8014e1a:	f7eb fa47 	bl	80002ac <__adddf3>
 8014e1e:	2400      	movs	r4, #0
 8014e20:	4632      	mov	r2, r6
 8014e22:	463b      	mov	r3, r7
 8014e24:	4620      	mov	r0, r4
 8014e26:	460d      	mov	r5, r1
 8014e28:	f7eb fa3e 	bl	80002a8 <__aeabi_dsub>
 8014e2c:	4602      	mov	r2, r0
 8014e2e:	460b      	mov	r3, r1
 8014e30:	4640      	mov	r0, r8
 8014e32:	4649      	mov	r1, r9
 8014e34:	f7eb fa38 	bl	80002a8 <__aeabi_dsub>
 8014e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014e40:	2300      	movs	r3, #0
 8014e42:	9304      	str	r3, [sp, #16]
 8014e44:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014e48:	4606      	mov	r6, r0
 8014e4a:	460f      	mov	r7, r1
 8014e4c:	4652      	mov	r2, sl
 8014e4e:	465b      	mov	r3, fp
 8014e50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e54:	f7eb fa28 	bl	80002a8 <__aeabi_dsub>
 8014e58:	4622      	mov	r2, r4
 8014e5a:	462b      	mov	r3, r5
 8014e5c:	f7eb fbdc 	bl	8000618 <__aeabi_dmul>
 8014e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e64:	4680      	mov	r8, r0
 8014e66:	4689      	mov	r9, r1
 8014e68:	4630      	mov	r0, r6
 8014e6a:	4639      	mov	r1, r7
 8014e6c:	f7eb fbd4 	bl	8000618 <__aeabi_dmul>
 8014e70:	4602      	mov	r2, r0
 8014e72:	460b      	mov	r3, r1
 8014e74:	4640      	mov	r0, r8
 8014e76:	4649      	mov	r1, r9
 8014e78:	f7eb fa18 	bl	80002ac <__adddf3>
 8014e7c:	4652      	mov	r2, sl
 8014e7e:	465b      	mov	r3, fp
 8014e80:	4606      	mov	r6, r0
 8014e82:	460f      	mov	r7, r1
 8014e84:	4620      	mov	r0, r4
 8014e86:	4629      	mov	r1, r5
 8014e88:	f7eb fbc6 	bl	8000618 <__aeabi_dmul>
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	4602      	mov	r2, r0
 8014e90:	4680      	mov	r8, r0
 8014e92:	4689      	mov	r9, r1
 8014e94:	4630      	mov	r0, r6
 8014e96:	4639      	mov	r1, r7
 8014e98:	f7eb fa08 	bl	80002ac <__adddf3>
 8014e9c:	4b17      	ldr	r3, [pc, #92]	@ (8014efc <__ieee754_pow+0x41c>)
 8014e9e:	4299      	cmp	r1, r3
 8014ea0:	4604      	mov	r4, r0
 8014ea2:	460d      	mov	r5, r1
 8014ea4:	468a      	mov	sl, r1
 8014ea6:	468b      	mov	fp, r1
 8014ea8:	f340 82ef 	ble.w	801548a <__ieee754_pow+0x9aa>
 8014eac:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8014eb0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8014eb4:	4303      	orrs	r3, r0
 8014eb6:	f000 81e8 	beq.w	801528a <__ieee754_pow+0x7aa>
 8014eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	f7eb fe1b 	bl	8000afc <__aeabi_dcmplt>
 8014ec6:	3800      	subs	r0, #0
 8014ec8:	bf18      	it	ne
 8014eca:	2001      	movne	r0, #1
 8014ecc:	e710      	b.n	8014cf0 <__ieee754_pow+0x210>
 8014ece:	bf00      	nop
 8014ed0:	60000000 	.word	0x60000000
 8014ed4:	3ff71547 	.word	0x3ff71547
 8014ed8:	f85ddf44 	.word	0xf85ddf44
 8014edc:	3e54ae0b 	.word	0x3e54ae0b
 8014ee0:	55555555 	.word	0x55555555
 8014ee4:	3fd55555 	.word	0x3fd55555
 8014ee8:	652b82fe 	.word	0x652b82fe
 8014eec:	3ff71547 	.word	0x3ff71547
 8014ef0:	3ff00000 	.word	0x3ff00000
 8014ef4:	3fd00000 	.word	0x3fd00000
 8014ef8:	3fe00000 	.word	0x3fe00000
 8014efc:	408fffff 	.word	0x408fffff
 8014f00:	4bd5      	ldr	r3, [pc, #852]	@ (8015258 <__ieee754_pow+0x778>)
 8014f02:	402b      	ands	r3, r5
 8014f04:	2200      	movs	r2, #0
 8014f06:	b92b      	cbnz	r3, 8014f14 <__ieee754_pow+0x434>
 8014f08:	4bd4      	ldr	r3, [pc, #848]	@ (801525c <__ieee754_pow+0x77c>)
 8014f0a:	f7eb fb85 	bl	8000618 <__aeabi_dmul>
 8014f0e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8014f12:	468b      	mov	fp, r1
 8014f14:	ea4f 532b 	mov.w	r3, fp, asr #20
 8014f18:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8014f1c:	4413      	add	r3, r2
 8014f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f20:	4bcf      	ldr	r3, [pc, #828]	@ (8015260 <__ieee754_pow+0x780>)
 8014f22:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8014f26:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8014f2a:	459b      	cmp	fp, r3
 8014f2c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014f30:	dd08      	ble.n	8014f44 <__ieee754_pow+0x464>
 8014f32:	4bcc      	ldr	r3, [pc, #816]	@ (8015264 <__ieee754_pow+0x784>)
 8014f34:	459b      	cmp	fp, r3
 8014f36:	f340 81a5 	ble.w	8015284 <__ieee754_pow+0x7a4>
 8014f3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014f3c:	3301      	adds	r3, #1
 8014f3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f40:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8014f44:	f04f 0a00 	mov.w	sl, #0
 8014f48:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014f4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f4e:	4bc6      	ldr	r3, [pc, #792]	@ (8015268 <__ieee754_pow+0x788>)
 8014f50:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014f54:	ed93 7b00 	vldr	d7, [r3]
 8014f58:	4629      	mov	r1, r5
 8014f5a:	ec53 2b17 	vmov	r2, r3, d7
 8014f5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014f62:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014f66:	f7eb f99f 	bl	80002a8 <__aeabi_dsub>
 8014f6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014f6e:	4606      	mov	r6, r0
 8014f70:	460f      	mov	r7, r1
 8014f72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014f76:	f7eb f999 	bl	80002ac <__adddf3>
 8014f7a:	4602      	mov	r2, r0
 8014f7c:	460b      	mov	r3, r1
 8014f7e:	2000      	movs	r0, #0
 8014f80:	49ba      	ldr	r1, [pc, #744]	@ (801526c <__ieee754_pow+0x78c>)
 8014f82:	f7eb fc73 	bl	800086c <__aeabi_ddiv>
 8014f86:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8014f8a:	4602      	mov	r2, r0
 8014f8c:	460b      	mov	r3, r1
 8014f8e:	4630      	mov	r0, r6
 8014f90:	4639      	mov	r1, r7
 8014f92:	f7eb fb41 	bl	8000618 <__aeabi_dmul>
 8014f96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f9a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8014f9e:	106d      	asrs	r5, r5, #1
 8014fa0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8014fa4:	f04f 0b00 	mov.w	fp, #0
 8014fa8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8014fac:	4661      	mov	r1, ip
 8014fae:	2200      	movs	r2, #0
 8014fb0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014fb4:	4658      	mov	r0, fp
 8014fb6:	46e1      	mov	r9, ip
 8014fb8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8014fbc:	4614      	mov	r4, r2
 8014fbe:	461d      	mov	r5, r3
 8014fc0:	f7eb fb2a 	bl	8000618 <__aeabi_dmul>
 8014fc4:	4602      	mov	r2, r0
 8014fc6:	460b      	mov	r3, r1
 8014fc8:	4630      	mov	r0, r6
 8014fca:	4639      	mov	r1, r7
 8014fcc:	f7eb f96c 	bl	80002a8 <__aeabi_dsub>
 8014fd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014fd4:	4606      	mov	r6, r0
 8014fd6:	460f      	mov	r7, r1
 8014fd8:	4620      	mov	r0, r4
 8014fda:	4629      	mov	r1, r5
 8014fdc:	f7eb f964 	bl	80002a8 <__aeabi_dsub>
 8014fe0:	4602      	mov	r2, r0
 8014fe2:	460b      	mov	r3, r1
 8014fe4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014fe8:	f7eb f95e 	bl	80002a8 <__aeabi_dsub>
 8014fec:	465a      	mov	r2, fp
 8014fee:	464b      	mov	r3, r9
 8014ff0:	f7eb fb12 	bl	8000618 <__aeabi_dmul>
 8014ff4:	4602      	mov	r2, r0
 8014ff6:	460b      	mov	r3, r1
 8014ff8:	4630      	mov	r0, r6
 8014ffa:	4639      	mov	r1, r7
 8014ffc:	f7eb f954 	bl	80002a8 <__aeabi_dsub>
 8015000:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015004:	f7eb fb08 	bl	8000618 <__aeabi_dmul>
 8015008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801500c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015010:	4610      	mov	r0, r2
 8015012:	4619      	mov	r1, r3
 8015014:	f7eb fb00 	bl	8000618 <__aeabi_dmul>
 8015018:	a37d      	add	r3, pc, #500	@ (adr r3, 8015210 <__ieee754_pow+0x730>)
 801501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801501e:	4604      	mov	r4, r0
 8015020:	460d      	mov	r5, r1
 8015022:	f7eb faf9 	bl	8000618 <__aeabi_dmul>
 8015026:	a37c      	add	r3, pc, #496	@ (adr r3, 8015218 <__ieee754_pow+0x738>)
 8015028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801502c:	f7eb f93e 	bl	80002ac <__adddf3>
 8015030:	4622      	mov	r2, r4
 8015032:	462b      	mov	r3, r5
 8015034:	f7eb faf0 	bl	8000618 <__aeabi_dmul>
 8015038:	a379      	add	r3, pc, #484	@ (adr r3, 8015220 <__ieee754_pow+0x740>)
 801503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801503e:	f7eb f935 	bl	80002ac <__adddf3>
 8015042:	4622      	mov	r2, r4
 8015044:	462b      	mov	r3, r5
 8015046:	f7eb fae7 	bl	8000618 <__aeabi_dmul>
 801504a:	a377      	add	r3, pc, #476	@ (adr r3, 8015228 <__ieee754_pow+0x748>)
 801504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015050:	f7eb f92c 	bl	80002ac <__adddf3>
 8015054:	4622      	mov	r2, r4
 8015056:	462b      	mov	r3, r5
 8015058:	f7eb fade 	bl	8000618 <__aeabi_dmul>
 801505c:	a374      	add	r3, pc, #464	@ (adr r3, 8015230 <__ieee754_pow+0x750>)
 801505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015062:	f7eb f923 	bl	80002ac <__adddf3>
 8015066:	4622      	mov	r2, r4
 8015068:	462b      	mov	r3, r5
 801506a:	f7eb fad5 	bl	8000618 <__aeabi_dmul>
 801506e:	a372      	add	r3, pc, #456	@ (adr r3, 8015238 <__ieee754_pow+0x758>)
 8015070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015074:	f7eb f91a 	bl	80002ac <__adddf3>
 8015078:	4622      	mov	r2, r4
 801507a:	4606      	mov	r6, r0
 801507c:	460f      	mov	r7, r1
 801507e:	462b      	mov	r3, r5
 8015080:	4620      	mov	r0, r4
 8015082:	4629      	mov	r1, r5
 8015084:	f7eb fac8 	bl	8000618 <__aeabi_dmul>
 8015088:	4602      	mov	r2, r0
 801508a:	460b      	mov	r3, r1
 801508c:	4630      	mov	r0, r6
 801508e:	4639      	mov	r1, r7
 8015090:	f7eb fac2 	bl	8000618 <__aeabi_dmul>
 8015094:	465a      	mov	r2, fp
 8015096:	4604      	mov	r4, r0
 8015098:	460d      	mov	r5, r1
 801509a:	464b      	mov	r3, r9
 801509c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80150a0:	f7eb f904 	bl	80002ac <__adddf3>
 80150a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80150a8:	f7eb fab6 	bl	8000618 <__aeabi_dmul>
 80150ac:	4622      	mov	r2, r4
 80150ae:	462b      	mov	r3, r5
 80150b0:	f7eb f8fc 	bl	80002ac <__adddf3>
 80150b4:	465a      	mov	r2, fp
 80150b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80150ba:	464b      	mov	r3, r9
 80150bc:	4658      	mov	r0, fp
 80150be:	4649      	mov	r1, r9
 80150c0:	f7eb faaa 	bl	8000618 <__aeabi_dmul>
 80150c4:	4b6a      	ldr	r3, [pc, #424]	@ (8015270 <__ieee754_pow+0x790>)
 80150c6:	2200      	movs	r2, #0
 80150c8:	4606      	mov	r6, r0
 80150ca:	460f      	mov	r7, r1
 80150cc:	f7eb f8ee 	bl	80002ac <__adddf3>
 80150d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80150d4:	f7eb f8ea 	bl	80002ac <__adddf3>
 80150d8:	46d8      	mov	r8, fp
 80150da:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80150de:	460d      	mov	r5, r1
 80150e0:	465a      	mov	r2, fp
 80150e2:	460b      	mov	r3, r1
 80150e4:	4640      	mov	r0, r8
 80150e6:	4649      	mov	r1, r9
 80150e8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80150ec:	f7eb fa94 	bl	8000618 <__aeabi_dmul>
 80150f0:	465c      	mov	r4, fp
 80150f2:	4680      	mov	r8, r0
 80150f4:	4689      	mov	r9, r1
 80150f6:	4b5e      	ldr	r3, [pc, #376]	@ (8015270 <__ieee754_pow+0x790>)
 80150f8:	2200      	movs	r2, #0
 80150fa:	4620      	mov	r0, r4
 80150fc:	4629      	mov	r1, r5
 80150fe:	f7eb f8d3 	bl	80002a8 <__aeabi_dsub>
 8015102:	4632      	mov	r2, r6
 8015104:	463b      	mov	r3, r7
 8015106:	f7eb f8cf 	bl	80002a8 <__aeabi_dsub>
 801510a:	4602      	mov	r2, r0
 801510c:	460b      	mov	r3, r1
 801510e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015112:	f7eb f8c9 	bl	80002a8 <__aeabi_dsub>
 8015116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801511a:	f7eb fa7d 	bl	8000618 <__aeabi_dmul>
 801511e:	4622      	mov	r2, r4
 8015120:	4606      	mov	r6, r0
 8015122:	460f      	mov	r7, r1
 8015124:	462b      	mov	r3, r5
 8015126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801512a:	f7eb fa75 	bl	8000618 <__aeabi_dmul>
 801512e:	4602      	mov	r2, r0
 8015130:	460b      	mov	r3, r1
 8015132:	4630      	mov	r0, r6
 8015134:	4639      	mov	r1, r7
 8015136:	f7eb f8b9 	bl	80002ac <__adddf3>
 801513a:	4606      	mov	r6, r0
 801513c:	460f      	mov	r7, r1
 801513e:	4602      	mov	r2, r0
 8015140:	460b      	mov	r3, r1
 8015142:	4640      	mov	r0, r8
 8015144:	4649      	mov	r1, r9
 8015146:	f7eb f8b1 	bl	80002ac <__adddf3>
 801514a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801514e:	a33c      	add	r3, pc, #240	@ (adr r3, 8015240 <__ieee754_pow+0x760>)
 8015150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015154:	4658      	mov	r0, fp
 8015156:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801515a:	460d      	mov	r5, r1
 801515c:	f7eb fa5c 	bl	8000618 <__aeabi_dmul>
 8015160:	465c      	mov	r4, fp
 8015162:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015166:	4642      	mov	r2, r8
 8015168:	464b      	mov	r3, r9
 801516a:	4620      	mov	r0, r4
 801516c:	4629      	mov	r1, r5
 801516e:	f7eb f89b 	bl	80002a8 <__aeabi_dsub>
 8015172:	4602      	mov	r2, r0
 8015174:	460b      	mov	r3, r1
 8015176:	4630      	mov	r0, r6
 8015178:	4639      	mov	r1, r7
 801517a:	f7eb f895 	bl	80002a8 <__aeabi_dsub>
 801517e:	a332      	add	r3, pc, #200	@ (adr r3, 8015248 <__ieee754_pow+0x768>)
 8015180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015184:	f7eb fa48 	bl	8000618 <__aeabi_dmul>
 8015188:	a331      	add	r3, pc, #196	@ (adr r3, 8015250 <__ieee754_pow+0x770>)
 801518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801518e:	4606      	mov	r6, r0
 8015190:	460f      	mov	r7, r1
 8015192:	4620      	mov	r0, r4
 8015194:	4629      	mov	r1, r5
 8015196:	f7eb fa3f 	bl	8000618 <__aeabi_dmul>
 801519a:	4602      	mov	r2, r0
 801519c:	460b      	mov	r3, r1
 801519e:	4630      	mov	r0, r6
 80151a0:	4639      	mov	r1, r7
 80151a2:	f7eb f883 	bl	80002ac <__adddf3>
 80151a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80151a8:	4b32      	ldr	r3, [pc, #200]	@ (8015274 <__ieee754_pow+0x794>)
 80151aa:	4413      	add	r3, r2
 80151ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151b0:	f7eb f87c 	bl	80002ac <__adddf3>
 80151b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80151b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80151ba:	f7eb f9c3 	bl	8000544 <__aeabi_i2d>
 80151be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80151c0:	4b2d      	ldr	r3, [pc, #180]	@ (8015278 <__ieee754_pow+0x798>)
 80151c2:	4413      	add	r3, r2
 80151c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80151c8:	4606      	mov	r6, r0
 80151ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80151ce:	460f      	mov	r7, r1
 80151d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80151d4:	f7eb f86a 	bl	80002ac <__adddf3>
 80151d8:	4642      	mov	r2, r8
 80151da:	464b      	mov	r3, r9
 80151dc:	f7eb f866 	bl	80002ac <__adddf3>
 80151e0:	4632      	mov	r2, r6
 80151e2:	463b      	mov	r3, r7
 80151e4:	f7eb f862 	bl	80002ac <__adddf3>
 80151e8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80151ec:	4632      	mov	r2, r6
 80151ee:	463b      	mov	r3, r7
 80151f0:	4658      	mov	r0, fp
 80151f2:	460d      	mov	r5, r1
 80151f4:	f7eb f858 	bl	80002a8 <__aeabi_dsub>
 80151f8:	4642      	mov	r2, r8
 80151fa:	464b      	mov	r3, r9
 80151fc:	f7eb f854 	bl	80002a8 <__aeabi_dsub>
 8015200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015204:	f7eb f850 	bl	80002a8 <__aeabi_dsub>
 8015208:	465c      	mov	r4, fp
 801520a:	4602      	mov	r2, r0
 801520c:	e036      	b.n	801527c <__ieee754_pow+0x79c>
 801520e:	bf00      	nop
 8015210:	4a454eef 	.word	0x4a454eef
 8015214:	3fca7e28 	.word	0x3fca7e28
 8015218:	93c9db65 	.word	0x93c9db65
 801521c:	3fcd864a 	.word	0x3fcd864a
 8015220:	a91d4101 	.word	0xa91d4101
 8015224:	3fd17460 	.word	0x3fd17460
 8015228:	518f264d 	.word	0x518f264d
 801522c:	3fd55555 	.word	0x3fd55555
 8015230:	db6fabff 	.word	0xdb6fabff
 8015234:	3fdb6db6 	.word	0x3fdb6db6
 8015238:	33333303 	.word	0x33333303
 801523c:	3fe33333 	.word	0x3fe33333
 8015240:	e0000000 	.word	0xe0000000
 8015244:	3feec709 	.word	0x3feec709
 8015248:	dc3a03fd 	.word	0xdc3a03fd
 801524c:	3feec709 	.word	0x3feec709
 8015250:	145b01f5 	.word	0x145b01f5
 8015254:	be3e2fe0 	.word	0xbe3e2fe0
 8015258:	7ff00000 	.word	0x7ff00000
 801525c:	43400000 	.word	0x43400000
 8015260:	0003988e 	.word	0x0003988e
 8015264:	000bb679 	.word	0x000bb679
 8015268:	08016020 	.word	0x08016020
 801526c:	3ff00000 	.word	0x3ff00000
 8015270:	40080000 	.word	0x40080000
 8015274:	08016000 	.word	0x08016000
 8015278:	08016010 	.word	0x08016010
 801527c:	460b      	mov	r3, r1
 801527e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015282:	e5d7      	b.n	8014e34 <__ieee754_pow+0x354>
 8015284:	f04f 0a01 	mov.w	sl, #1
 8015288:	e65e      	b.n	8014f48 <__ieee754_pow+0x468>
 801528a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801555c <__ieee754_pow+0xa7c>)
 801528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015290:	4630      	mov	r0, r6
 8015292:	4639      	mov	r1, r7
 8015294:	f7eb f80a 	bl	80002ac <__adddf3>
 8015298:	4642      	mov	r2, r8
 801529a:	e9cd 0100 	strd	r0, r1, [sp]
 801529e:	464b      	mov	r3, r9
 80152a0:	4620      	mov	r0, r4
 80152a2:	4629      	mov	r1, r5
 80152a4:	f7eb f800 	bl	80002a8 <__aeabi_dsub>
 80152a8:	4602      	mov	r2, r0
 80152aa:	460b      	mov	r3, r1
 80152ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152b0:	f7eb fc42 	bl	8000b38 <__aeabi_dcmpgt>
 80152b4:	2800      	cmp	r0, #0
 80152b6:	f47f ae00 	bne.w	8014eba <__ieee754_pow+0x3da>
 80152ba:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80152be:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80152c2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80152c6:	fa43 fa0a 	asr.w	sl, r3, sl
 80152ca:	44da      	add	sl, fp
 80152cc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80152d0:	489d      	ldr	r0, [pc, #628]	@ (8015548 <__ieee754_pow+0xa68>)
 80152d2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80152d6:	4108      	asrs	r0, r1
 80152d8:	ea00 030a 	and.w	r3, r0, sl
 80152dc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80152e0:	f1c1 0114 	rsb	r1, r1, #20
 80152e4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80152e8:	fa4a fa01 	asr.w	sl, sl, r1
 80152ec:	f1bb 0f00 	cmp.w	fp, #0
 80152f0:	4640      	mov	r0, r8
 80152f2:	4649      	mov	r1, r9
 80152f4:	f04f 0200 	mov.w	r2, #0
 80152f8:	bfb8      	it	lt
 80152fa:	f1ca 0a00 	rsblt	sl, sl, #0
 80152fe:	f7ea ffd3 	bl	80002a8 <__aeabi_dsub>
 8015302:	4680      	mov	r8, r0
 8015304:	4689      	mov	r9, r1
 8015306:	4632      	mov	r2, r6
 8015308:	463b      	mov	r3, r7
 801530a:	4640      	mov	r0, r8
 801530c:	4649      	mov	r1, r9
 801530e:	f7ea ffcd 	bl	80002ac <__adddf3>
 8015312:	2400      	movs	r4, #0
 8015314:	a37c      	add	r3, pc, #496	@ (adr r3, 8015508 <__ieee754_pow+0xa28>)
 8015316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801531a:	4620      	mov	r0, r4
 801531c:	460d      	mov	r5, r1
 801531e:	f7eb f97b 	bl	8000618 <__aeabi_dmul>
 8015322:	4642      	mov	r2, r8
 8015324:	e9cd 0100 	strd	r0, r1, [sp]
 8015328:	464b      	mov	r3, r9
 801532a:	4620      	mov	r0, r4
 801532c:	4629      	mov	r1, r5
 801532e:	f7ea ffbb 	bl	80002a8 <__aeabi_dsub>
 8015332:	4602      	mov	r2, r0
 8015334:	460b      	mov	r3, r1
 8015336:	4630      	mov	r0, r6
 8015338:	4639      	mov	r1, r7
 801533a:	f7ea ffb5 	bl	80002a8 <__aeabi_dsub>
 801533e:	a374      	add	r3, pc, #464	@ (adr r3, 8015510 <__ieee754_pow+0xa30>)
 8015340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015344:	f7eb f968 	bl	8000618 <__aeabi_dmul>
 8015348:	a373      	add	r3, pc, #460	@ (adr r3, 8015518 <__ieee754_pow+0xa38>)
 801534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801534e:	4680      	mov	r8, r0
 8015350:	4689      	mov	r9, r1
 8015352:	4620      	mov	r0, r4
 8015354:	4629      	mov	r1, r5
 8015356:	f7eb f95f 	bl	8000618 <__aeabi_dmul>
 801535a:	4602      	mov	r2, r0
 801535c:	460b      	mov	r3, r1
 801535e:	4640      	mov	r0, r8
 8015360:	4649      	mov	r1, r9
 8015362:	f7ea ffa3 	bl	80002ac <__adddf3>
 8015366:	4604      	mov	r4, r0
 8015368:	460d      	mov	r5, r1
 801536a:	4602      	mov	r2, r0
 801536c:	460b      	mov	r3, r1
 801536e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015372:	f7ea ff9b 	bl	80002ac <__adddf3>
 8015376:	e9dd 2300 	ldrd	r2, r3, [sp]
 801537a:	4680      	mov	r8, r0
 801537c:	4689      	mov	r9, r1
 801537e:	f7ea ff93 	bl	80002a8 <__aeabi_dsub>
 8015382:	4602      	mov	r2, r0
 8015384:	460b      	mov	r3, r1
 8015386:	4620      	mov	r0, r4
 8015388:	4629      	mov	r1, r5
 801538a:	f7ea ff8d 	bl	80002a8 <__aeabi_dsub>
 801538e:	4642      	mov	r2, r8
 8015390:	4606      	mov	r6, r0
 8015392:	460f      	mov	r7, r1
 8015394:	464b      	mov	r3, r9
 8015396:	4640      	mov	r0, r8
 8015398:	4649      	mov	r1, r9
 801539a:	f7eb f93d 	bl	8000618 <__aeabi_dmul>
 801539e:	a360      	add	r3, pc, #384	@ (adr r3, 8015520 <__ieee754_pow+0xa40>)
 80153a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153a4:	4604      	mov	r4, r0
 80153a6:	460d      	mov	r5, r1
 80153a8:	f7eb f936 	bl	8000618 <__aeabi_dmul>
 80153ac:	a35e      	add	r3, pc, #376	@ (adr r3, 8015528 <__ieee754_pow+0xa48>)
 80153ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153b2:	f7ea ff79 	bl	80002a8 <__aeabi_dsub>
 80153b6:	4622      	mov	r2, r4
 80153b8:	462b      	mov	r3, r5
 80153ba:	f7eb f92d 	bl	8000618 <__aeabi_dmul>
 80153be:	a35c      	add	r3, pc, #368	@ (adr r3, 8015530 <__ieee754_pow+0xa50>)
 80153c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153c4:	f7ea ff72 	bl	80002ac <__adddf3>
 80153c8:	4622      	mov	r2, r4
 80153ca:	462b      	mov	r3, r5
 80153cc:	f7eb f924 	bl	8000618 <__aeabi_dmul>
 80153d0:	a359      	add	r3, pc, #356	@ (adr r3, 8015538 <__ieee754_pow+0xa58>)
 80153d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153d6:	f7ea ff67 	bl	80002a8 <__aeabi_dsub>
 80153da:	4622      	mov	r2, r4
 80153dc:	462b      	mov	r3, r5
 80153de:	f7eb f91b 	bl	8000618 <__aeabi_dmul>
 80153e2:	a357      	add	r3, pc, #348	@ (adr r3, 8015540 <__ieee754_pow+0xa60>)
 80153e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153e8:	f7ea ff60 	bl	80002ac <__adddf3>
 80153ec:	4622      	mov	r2, r4
 80153ee:	462b      	mov	r3, r5
 80153f0:	f7eb f912 	bl	8000618 <__aeabi_dmul>
 80153f4:	4602      	mov	r2, r0
 80153f6:	460b      	mov	r3, r1
 80153f8:	4640      	mov	r0, r8
 80153fa:	4649      	mov	r1, r9
 80153fc:	f7ea ff54 	bl	80002a8 <__aeabi_dsub>
 8015400:	4604      	mov	r4, r0
 8015402:	460d      	mov	r5, r1
 8015404:	4602      	mov	r2, r0
 8015406:	460b      	mov	r3, r1
 8015408:	4640      	mov	r0, r8
 801540a:	4649      	mov	r1, r9
 801540c:	f7eb f904 	bl	8000618 <__aeabi_dmul>
 8015410:	2200      	movs	r2, #0
 8015412:	e9cd 0100 	strd	r0, r1, [sp]
 8015416:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801541a:	4620      	mov	r0, r4
 801541c:	4629      	mov	r1, r5
 801541e:	f7ea ff43 	bl	80002a8 <__aeabi_dsub>
 8015422:	4602      	mov	r2, r0
 8015424:	460b      	mov	r3, r1
 8015426:	e9dd 0100 	ldrd	r0, r1, [sp]
 801542a:	f7eb fa1f 	bl	800086c <__aeabi_ddiv>
 801542e:	4632      	mov	r2, r6
 8015430:	4604      	mov	r4, r0
 8015432:	460d      	mov	r5, r1
 8015434:	463b      	mov	r3, r7
 8015436:	4640      	mov	r0, r8
 8015438:	4649      	mov	r1, r9
 801543a:	f7eb f8ed 	bl	8000618 <__aeabi_dmul>
 801543e:	4632      	mov	r2, r6
 8015440:	463b      	mov	r3, r7
 8015442:	f7ea ff33 	bl	80002ac <__adddf3>
 8015446:	4602      	mov	r2, r0
 8015448:	460b      	mov	r3, r1
 801544a:	4620      	mov	r0, r4
 801544c:	4629      	mov	r1, r5
 801544e:	f7ea ff2b 	bl	80002a8 <__aeabi_dsub>
 8015452:	4642      	mov	r2, r8
 8015454:	464b      	mov	r3, r9
 8015456:	f7ea ff27 	bl	80002a8 <__aeabi_dsub>
 801545a:	460b      	mov	r3, r1
 801545c:	4602      	mov	r2, r0
 801545e:	493b      	ldr	r1, [pc, #236]	@ (801554c <__ieee754_pow+0xa6c>)
 8015460:	2000      	movs	r0, #0
 8015462:	f7ea ff21 	bl	80002a8 <__aeabi_dsub>
 8015466:	ec41 0b10 	vmov	d0, r0, r1
 801546a:	ee10 3a90 	vmov	r3, s1
 801546e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8015472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015476:	da30      	bge.n	80154da <__ieee754_pow+0x9fa>
 8015478:	4650      	mov	r0, sl
 801547a:	f000 f87d 	bl	8015578 <scalbn>
 801547e:	ec51 0b10 	vmov	r0, r1, d0
 8015482:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015486:	f7ff bbd2 	b.w	8014c2e <__ieee754_pow+0x14e>
 801548a:	4c31      	ldr	r4, [pc, #196]	@ (8015550 <__ieee754_pow+0xa70>)
 801548c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015490:	42a3      	cmp	r3, r4
 8015492:	d91a      	bls.n	80154ca <__ieee754_pow+0x9ea>
 8015494:	4b2f      	ldr	r3, [pc, #188]	@ (8015554 <__ieee754_pow+0xa74>)
 8015496:	440b      	add	r3, r1
 8015498:	4303      	orrs	r3, r0
 801549a:	d009      	beq.n	80154b0 <__ieee754_pow+0x9d0>
 801549c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80154a0:	2200      	movs	r2, #0
 80154a2:	2300      	movs	r3, #0
 80154a4:	f7eb fb2a 	bl	8000afc <__aeabi_dcmplt>
 80154a8:	3800      	subs	r0, #0
 80154aa:	bf18      	it	ne
 80154ac:	2001      	movne	r0, #1
 80154ae:	e42b      	b.n	8014d08 <__ieee754_pow+0x228>
 80154b0:	4642      	mov	r2, r8
 80154b2:	464b      	mov	r3, r9
 80154b4:	f7ea fef8 	bl	80002a8 <__aeabi_dsub>
 80154b8:	4632      	mov	r2, r6
 80154ba:	463b      	mov	r3, r7
 80154bc:	f7eb fb32 	bl	8000b24 <__aeabi_dcmpge>
 80154c0:	2800      	cmp	r0, #0
 80154c2:	d1eb      	bne.n	801549c <__ieee754_pow+0x9bc>
 80154c4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8015564 <__ieee754_pow+0xa84>
 80154c8:	e6f7      	b.n	80152ba <__ieee754_pow+0x7da>
 80154ca:	469a      	mov	sl, r3
 80154cc:	4b22      	ldr	r3, [pc, #136]	@ (8015558 <__ieee754_pow+0xa78>)
 80154ce:	459a      	cmp	sl, r3
 80154d0:	f63f aef3 	bhi.w	80152ba <__ieee754_pow+0x7da>
 80154d4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80154d8:	e715      	b.n	8015306 <__ieee754_pow+0x826>
 80154da:	ec51 0b10 	vmov	r0, r1, d0
 80154de:	4619      	mov	r1, r3
 80154e0:	e7cf      	b.n	8015482 <__ieee754_pow+0x9a2>
 80154e2:	491a      	ldr	r1, [pc, #104]	@ (801554c <__ieee754_pow+0xa6c>)
 80154e4:	2000      	movs	r0, #0
 80154e6:	f7ff bb18 	b.w	8014b1a <__ieee754_pow+0x3a>
 80154ea:	2000      	movs	r0, #0
 80154ec:	2100      	movs	r1, #0
 80154ee:	f7ff bb14 	b.w	8014b1a <__ieee754_pow+0x3a>
 80154f2:	4630      	mov	r0, r6
 80154f4:	4639      	mov	r1, r7
 80154f6:	f7ff bb10 	b.w	8014b1a <__ieee754_pow+0x3a>
 80154fa:	460c      	mov	r4, r1
 80154fc:	f7ff bb5e 	b.w	8014bbc <__ieee754_pow+0xdc>
 8015500:	2400      	movs	r4, #0
 8015502:	f7ff bb49 	b.w	8014b98 <__ieee754_pow+0xb8>
 8015506:	bf00      	nop
 8015508:	00000000 	.word	0x00000000
 801550c:	3fe62e43 	.word	0x3fe62e43
 8015510:	fefa39ef 	.word	0xfefa39ef
 8015514:	3fe62e42 	.word	0x3fe62e42
 8015518:	0ca86c39 	.word	0x0ca86c39
 801551c:	be205c61 	.word	0xbe205c61
 8015520:	72bea4d0 	.word	0x72bea4d0
 8015524:	3e663769 	.word	0x3e663769
 8015528:	c5d26bf1 	.word	0xc5d26bf1
 801552c:	3ebbbd41 	.word	0x3ebbbd41
 8015530:	af25de2c 	.word	0xaf25de2c
 8015534:	3f11566a 	.word	0x3f11566a
 8015538:	16bebd93 	.word	0x16bebd93
 801553c:	3f66c16c 	.word	0x3f66c16c
 8015540:	5555553e 	.word	0x5555553e
 8015544:	3fc55555 	.word	0x3fc55555
 8015548:	fff00000 	.word	0xfff00000
 801554c:	3ff00000 	.word	0x3ff00000
 8015550:	4090cbff 	.word	0x4090cbff
 8015554:	3f6f3400 	.word	0x3f6f3400
 8015558:	3fe00000 	.word	0x3fe00000
 801555c:	652b82fe 	.word	0x652b82fe
 8015560:	3c971547 	.word	0x3c971547
 8015564:	4090cc00 	.word	0x4090cc00

08015568 <fabs>:
 8015568:	ec51 0b10 	vmov	r0, r1, d0
 801556c:	4602      	mov	r2, r0
 801556e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015572:	ec43 2b10 	vmov	d0, r2, r3
 8015576:	4770      	bx	lr

08015578 <scalbn>:
 8015578:	b570      	push	{r4, r5, r6, lr}
 801557a:	ec55 4b10 	vmov	r4, r5, d0
 801557e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8015582:	4606      	mov	r6, r0
 8015584:	462b      	mov	r3, r5
 8015586:	b991      	cbnz	r1, 80155ae <scalbn+0x36>
 8015588:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801558c:	4323      	orrs	r3, r4
 801558e:	d03d      	beq.n	801560c <scalbn+0x94>
 8015590:	4b35      	ldr	r3, [pc, #212]	@ (8015668 <scalbn+0xf0>)
 8015592:	4620      	mov	r0, r4
 8015594:	4629      	mov	r1, r5
 8015596:	2200      	movs	r2, #0
 8015598:	f7eb f83e 	bl	8000618 <__aeabi_dmul>
 801559c:	4b33      	ldr	r3, [pc, #204]	@ (801566c <scalbn+0xf4>)
 801559e:	429e      	cmp	r6, r3
 80155a0:	4604      	mov	r4, r0
 80155a2:	460d      	mov	r5, r1
 80155a4:	da0f      	bge.n	80155c6 <scalbn+0x4e>
 80155a6:	a328      	add	r3, pc, #160	@ (adr r3, 8015648 <scalbn+0xd0>)
 80155a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ac:	e01e      	b.n	80155ec <scalbn+0x74>
 80155ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80155b2:	4291      	cmp	r1, r2
 80155b4:	d10b      	bne.n	80155ce <scalbn+0x56>
 80155b6:	4622      	mov	r2, r4
 80155b8:	4620      	mov	r0, r4
 80155ba:	4629      	mov	r1, r5
 80155bc:	f7ea fe76 	bl	80002ac <__adddf3>
 80155c0:	4604      	mov	r4, r0
 80155c2:	460d      	mov	r5, r1
 80155c4:	e022      	b.n	801560c <scalbn+0x94>
 80155c6:	460b      	mov	r3, r1
 80155c8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80155cc:	3936      	subs	r1, #54	@ 0x36
 80155ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80155d2:	4296      	cmp	r6, r2
 80155d4:	dd0d      	ble.n	80155f2 <scalbn+0x7a>
 80155d6:	2d00      	cmp	r5, #0
 80155d8:	a11d      	add	r1, pc, #116	@ (adr r1, 8015650 <scalbn+0xd8>)
 80155da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155de:	da02      	bge.n	80155e6 <scalbn+0x6e>
 80155e0:	a11d      	add	r1, pc, #116	@ (adr r1, 8015658 <scalbn+0xe0>)
 80155e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155e6:	a31a      	add	r3, pc, #104	@ (adr r3, 8015650 <scalbn+0xd8>)
 80155e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ec:	f7eb f814 	bl	8000618 <__aeabi_dmul>
 80155f0:	e7e6      	b.n	80155c0 <scalbn+0x48>
 80155f2:	1872      	adds	r2, r6, r1
 80155f4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80155f8:	428a      	cmp	r2, r1
 80155fa:	dcec      	bgt.n	80155d6 <scalbn+0x5e>
 80155fc:	2a00      	cmp	r2, #0
 80155fe:	dd08      	ble.n	8015612 <scalbn+0x9a>
 8015600:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015604:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015608:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801560c:	ec45 4b10 	vmov	d0, r4, r5
 8015610:	bd70      	pop	{r4, r5, r6, pc}
 8015612:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8015616:	da08      	bge.n	801562a <scalbn+0xb2>
 8015618:	2d00      	cmp	r5, #0
 801561a:	a10b      	add	r1, pc, #44	@ (adr r1, 8015648 <scalbn+0xd0>)
 801561c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015620:	dac1      	bge.n	80155a6 <scalbn+0x2e>
 8015622:	a10f      	add	r1, pc, #60	@ (adr r1, 8015660 <scalbn+0xe8>)
 8015624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015628:	e7bd      	b.n	80155a6 <scalbn+0x2e>
 801562a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801562e:	3236      	adds	r2, #54	@ 0x36
 8015630:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015634:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015638:	4620      	mov	r0, r4
 801563a:	4b0d      	ldr	r3, [pc, #52]	@ (8015670 <scalbn+0xf8>)
 801563c:	4629      	mov	r1, r5
 801563e:	2200      	movs	r2, #0
 8015640:	e7d4      	b.n	80155ec <scalbn+0x74>
 8015642:	bf00      	nop
 8015644:	f3af 8000 	nop.w
 8015648:	c2f8f359 	.word	0xc2f8f359
 801564c:	01a56e1f 	.word	0x01a56e1f
 8015650:	8800759c 	.word	0x8800759c
 8015654:	7e37e43c 	.word	0x7e37e43c
 8015658:	8800759c 	.word	0x8800759c
 801565c:	fe37e43c 	.word	0xfe37e43c
 8015660:	c2f8f359 	.word	0xc2f8f359
 8015664:	81a56e1f 	.word	0x81a56e1f
 8015668:	43500000 	.word	0x43500000
 801566c:	ffff3cb0 	.word	0xffff3cb0
 8015670:	3c900000 	.word	0x3c900000

08015674 <with_errno>:
 8015674:	b510      	push	{r4, lr}
 8015676:	ed2d 8b02 	vpush	{d8}
 801567a:	eeb0 8a40 	vmov.f32	s16, s0
 801567e:	eef0 8a60 	vmov.f32	s17, s1
 8015682:	4604      	mov	r4, r0
 8015684:	f7fb f9fe 	bl	8010a84 <__errno>
 8015688:	eeb0 0a48 	vmov.f32	s0, s16
 801568c:	eef0 0a68 	vmov.f32	s1, s17
 8015690:	ecbd 8b02 	vpop	{d8}
 8015694:	6004      	str	r4, [r0, #0]
 8015696:	bd10      	pop	{r4, pc}

08015698 <xflow>:
 8015698:	4603      	mov	r3, r0
 801569a:	b507      	push	{r0, r1, r2, lr}
 801569c:	ec51 0b10 	vmov	r0, r1, d0
 80156a0:	b183      	cbz	r3, 80156c4 <xflow+0x2c>
 80156a2:	4602      	mov	r2, r0
 80156a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80156a8:	e9cd 2300 	strd	r2, r3, [sp]
 80156ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80156b0:	f7ea ffb2 	bl	8000618 <__aeabi_dmul>
 80156b4:	ec41 0b10 	vmov	d0, r0, r1
 80156b8:	2022      	movs	r0, #34	@ 0x22
 80156ba:	b003      	add	sp, #12
 80156bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80156c0:	f7ff bfd8 	b.w	8015674 <with_errno>
 80156c4:	4602      	mov	r2, r0
 80156c6:	460b      	mov	r3, r1
 80156c8:	e7ee      	b.n	80156a8 <xflow+0x10>
 80156ca:	0000      	movs	r0, r0
 80156cc:	0000      	movs	r0, r0
	...

080156d0 <__math_uflow>:
 80156d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80156d8 <__math_uflow+0x8>
 80156d4:	f7ff bfe0 	b.w	8015698 <xflow>
 80156d8:	00000000 	.word	0x00000000
 80156dc:	10000000 	.word	0x10000000

080156e0 <__math_oflow>:
 80156e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80156e8 <__math_oflow+0x8>
 80156e4:	f7ff bfd8 	b.w	8015698 <xflow>
 80156e8:	00000000 	.word	0x00000000
 80156ec:	70000000 	.word	0x70000000

080156f0 <_init>:
 80156f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156f2:	bf00      	nop
 80156f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156f6:	bc08      	pop	{r3}
 80156f8:	469e      	mov	lr, r3
 80156fa:	4770      	bx	lr

080156fc <_fini>:
 80156fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156fe:	bf00      	nop
 8015700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015702:	bc08      	pop	{r3}
 8015704:	469e      	mov	lr, r3
 8015706:	4770      	bx	lr
