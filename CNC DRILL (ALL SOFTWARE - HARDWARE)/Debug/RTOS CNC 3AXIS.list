
RTOS CNC 3AXIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  08014488  08014488  00015488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d88  08014d88  00016290  2**0
                  CONTENTS
  4 .ARM          00000008  08014d88  08014d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d90  08014d90  00016290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014d90  08014d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d94  08014d94  00015d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08014d98  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00016290  2**0
                  CONTENTS
 10 .bss          000052d8  20000290  20000290  00016290  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005568  20005568  00016290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00016290  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023e51  00000000  00000000  000162c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053eb  00000000  00000000  0003a111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e30  00000000  00000000  0003f500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000176c  00000000  00000000  00041330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028622  00000000  00000000  00042a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026017  00000000  00000000  0006b0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e86b8  00000000  00000000  000910d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017978d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000098e4  00000000  00000000  001797d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  001830b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000290 	.word	0x20000290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014470 	.word	0x08014470

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000294 	.word	0x20000294
 80001cc:	08014470 	.word	0x08014470

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <Accel_Stepper_SetPin>:
 * dir_port : GPIO port of direction pin
 * dir_pin : gpio pin number of direction pin
 */
void Accel_Stepper_SetPin(Acceleration_t* Accel_stepper, GPIO_TypeDef* step_port,
		uint16_t step_pin, GPIO_TypeDef* dir_port, uint16_t dir_pin)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	80fb      	strh	r3, [r7, #6]
	Accel_stepper->Step_Port = step_port;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	629a      	str	r2, [r3, #40]	@ 0x28
	Accel_stepper->Step_Pin = step_pin;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	88fa      	ldrh	r2, [r7, #6]
 800101e:	861a      	strh	r2, [r3, #48]	@ 0x30
	Accel_stepper->Dir_Pin = dir_pin;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	8b3a      	ldrh	r2, [r7, #24]
 8001024:	865a      	strh	r2, [r3, #50]	@ 0x32
	Accel_stepper->Dir_Port = dir_port;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <Accel_Stepper_SetTimer>:
/*
 * Set Timer for each motor
 * timer : pointer to timer typedef(Which timer is use for control speed)
 */
void Accel_Stepper_SetTimer(Acceleration_t *Accel_stepper, TIM_HandleTypeDef* timer){
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	Accel_stepper->htim = timer;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <Accel_Stepper_TIMIT_Handler>:
/*
 * Accel_Stepper_TIMIT_Handler
 * stepper : Num of which stepper use found @ Stepper_t
 */
void Accel_Stepper_TIMIT_Handler(Acceleration_t *Accel_stepper){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    if (state.stop_press) {
 800105c:	4b85      	ldr	r3, [pc, #532]	@ (8001274 <Accel_Stepper_TIMIT_Handler+0x220>)
 800105e:	785b      	ldrb	r3, [r3, #1]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <Accel_Stepper_TIMIT_Handler+0x18>
        Accel_stepper->run_state = STOP;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	705a      	strb	r2, [r3, #1]
    }

	__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, Accel_stepper->step_delay);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6852      	ldr	r2, [r2, #4]
 8001076:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6852      	ldr	r2, [r2, #4]
 8001080:	60da      	str	r2, [r3, #12]

	switch(Accel_stepper->run_state) {
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	785b      	ldrb	r3, [r3, #1]
 8001086:	2b03      	cmp	r3, #3
 8001088:	f200 80eb 	bhi.w	8001262 <Accel_Stepper_TIMIT_Handler+0x20e>
 800108c:	a201      	add	r2, pc, #4	@ (adr r2, 8001094 <Accel_Stepper_TIMIT_Handler+0x40>)
 800108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001092:	bf00      	nop
 8001094:	080010a5 	.word	0x080010a5
 8001098:	080010c3 	.word	0x080010c3
 800109c:	080011cb 	.word	0x080011cb
 80010a0:	0800117d 	.word	0x0800117d
		case STOP:
			Accel_stepper->step_count = 0;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
			Accel_stepper->rest = 0;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
		     // Stop Timer/Counter 1.
		   	HAL_TIM_Base_Stop_IT(Accel_stepper->htim);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b4:	4618      	mov	r0, r3
 80010b6:	f008 f869 	bl	800918c <HAL_TIM_Base_Stop_IT>
		   	Accel_stepper->run_status = 0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
		   	break;
 80010c0:	e0cf      	b.n	8001262 <Accel_Stepper_TIMIT_Handler+0x20e>
	    case ACCEL:
	    	Accel_stepper->run_status = 1;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80010d0:	4619      	mov	r1, r3
 80010d2:	4610      	mov	r0, r2
 80010d4:	f005 f92f 	bl	8006336 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	619a      	str	r2, [r3, #24]
			Accel_stepper->accel_count++;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	615a      	str	r2, [r3, #20]
			Accel_stepper->new_step_delay = Accel_stepper->step_delay - (((2 * (long)Accel_stepper->step_delay) + Accel_stepper->rest)/(4 * Accel_stepper->accel_count + 1));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4619      	mov	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	440b      	add	r3, r1
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	6949      	ldr	r1, [r1, #20]
 8001102:	0089      	lsls	r1, r1, #2
 8001104:	3101      	adds	r1, #1
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	1ad2      	subs	r2, r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	621a      	str	r2, [r3, #32]
			Accel_stepper->rest = ((2 * (long)Accel_stepper->step_delay)+Accel_stepper->rest)%(4 * Accel_stepper->accel_count + 1);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	4413      	add	r3, r2
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6952      	ldr	r2, [r2, #20]
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	3201      	adds	r2, #1
 8001126:	fbb3 f1f2 	udiv	r1, r3, r2
 800112a:	fb01 f202 	mul.w	r2, r1, r2
 800112e:	1a9a      	subs	r2, r3, r2
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	61da      	str	r2, [r3, #28]
	      // Chech if we should start decelration.
			if(Accel_stepper->step_count >= Accel_stepper->decel_start) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699a      	ldr	r2, [r3, #24]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	429a      	cmp	r2, r3
 800113e:	d307      	bcc.n	8001150 <Accel_Stepper_TIMIT_Handler+0xfc>
				Accel_stepper->accel_count = Accel_stepper->decel_val;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	615a      	str	r2, [r3, #20]
				Accel_stepper->run_state = DECEL;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	705a      	strb	r2, [r3, #1]
				Accel_stepper->last_accel_delay = Accel_stepper->new_step_delay;
				Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
				Accel_stepper->rest = 0;
				Accel_stepper->run_state = RUN;
			}
			break;
 800114e:	e083      	b.n	8001258 <Accel_Stepper_TIMIT_Handler+0x204>
			else if(Accel_stepper->new_step_delay <= Accel_stepper->min_step_delay) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6912      	ldr	r2, [r2, #16]
 8001158:	4293      	cmp	r3, r2
 800115a:	d87d      	bhi.n	8001258 <Accel_Stepper_TIMIT_Handler+0x204>
				Accel_stepper->last_accel_delay = Accel_stepper->new_step_delay;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1a      	ldr	r2, [r3, #32]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24
				Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	621a      	str	r2, [r3, #32]
				Accel_stepper->rest = 0;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
				Accel_stepper->run_state = RUN;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2203      	movs	r2, #3
 8001178:	705a      	strb	r2, [r3, #1]
			break;
 800117a:	e06d      	b.n	8001258 <Accel_Stepper_TIMIT_Handler+0x204>

	    case RUN:
	    	Accel_stepper->run_status = 1;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f005 f8d2 	bl	8006336 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
	    	Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	461a      	mov	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	621a      	str	r2, [r3, #32]
//	         Check if we should start deceleration.
			 if(Accel_stepper->step_count >= Accel_stepper->decel_start) {
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699a      	ldr	r2, [r3, #24]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d354      	bcc.n	800125c <Accel_Stepper_TIMIT_Handler+0x208>
				 Accel_stepper->accel_count = Accel_stepper->decel_val;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	615a      	str	r2, [r3, #20]
//	         Start deceleration with same delay as accel ended with.
				 Accel_stepper->new_step_delay = Accel_stepper->last_accel_delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	621a      	str	r2, [r3, #32]
				 Accel_stepper->run_state = DECEL;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2202      	movs	r2, #2
 80011c6:	705a      	strb	r2, [r3, #1]
			 }
			 break;
 80011c8:	e048      	b.n	800125c <Accel_Stepper_TIMIT_Handler+0x208>

	    case DECEL:
	    	Accel_stepper->run_status = 1;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80011d8:	4619      	mov	r1, r3
 80011da:	4610      	mov	r0, r2
 80011dc:	f005 f8ab 	bl	8006336 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	619a      	str	r2, [r3, #24]
			 Accel_stepper->accel_count++;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	615a      	str	r2, [r3, #20]
			 Accel_stepper->new_step_delay = Accel_stepper->step_delay + (((2 * (long)Accel_stepper->step_delay) + Accel_stepper->rest)/(4 * abs(Accel_stepper->accel_count) + 1));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4619      	mov	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	440b      	add	r3, r1
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	6949      	ldr	r1, [r1, #20]
 800120a:	2900      	cmp	r1, #0
 800120c:	bfb8      	it	lt
 800120e:	4249      	neglt	r1, r1
 8001210:	0089      	lsls	r1, r1, #2
 8001212:	3101      	adds	r1, #1
 8001214:	fbb3 f3f1 	udiv	r3, r3, r1
 8001218:	441a      	add	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	621a      	str	r2, [r3, #32]
			 Accel_stepper->rest = ((2 * (long)Accel_stepper->step_delay)+Accel_stepper->rest)%(4 * (long) abs(Accel_stepper->accel_count) + 1);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	461a      	mov	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4413      	add	r3, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6952      	ldr	r2, [r2, #20]
 8001230:	2a00      	cmp	r2, #0
 8001232:	bfb8      	it	lt
 8001234:	4252      	neglt	r2, r2
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	3201      	adds	r2, #1
 800123a:	fbb3 f1f2 	udiv	r1, r3, r2
 800123e:	fb01 f202 	mul.w	r2, r1, r2
 8001242:	1a9a      	subs	r2, r3, r2
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	61da      	str	r2, [r3, #28]
//	         Check if we at last step
			 if(Accel_stepper->accel_count >= 0){
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db07      	blt.n	8001260 <Accel_Stepper_TIMIT_Handler+0x20c>
				 Accel_stepper->run_state = STOP;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	705a      	strb	r2, [r3, #1]
			 }
			 break;
 8001256:	e003      	b.n	8001260 <Accel_Stepper_TIMIT_Handler+0x20c>
			break;
 8001258:	bf00      	nop
 800125a:	e002      	b.n	8001262 <Accel_Stepper_TIMIT_Handler+0x20e>
			 break;
 800125c:	bf00      	nop
 800125e:	e000      	b.n	8001262 <Accel_Stepper_TIMIT_Handler+0x20e>
			 break;
 8001260:	bf00      	nop
	  }
	 Accel_stepper->step_delay = Accel_stepper->new_step_delay;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a1a      	ldr	r2, [r3, #32]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	605a      	str	r2, [r3, #4]
//		  return rc;
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200008c8 	.word	0x200008c8

08001278 <Accel_Stepper_Move>:
 * accel : acceleration
 * decel : deceleration
 * rpm : speed at run state
 */
void Accel_Stepper_Move(Acceleration_t *Accel_stepper, signed int step, unsigned int accel, unsigned int decel, unsigned int rpm)//acc*100
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	603b      	str	r3, [r7, #0]

	unsigned int max_step_lim; //! Number of steps before we hit max speed.
	unsigned int accel_lim;//! Number of steps before we must start deceleration (if accel does not hit max speed).
	unsigned int speed = 2 * 3.14159 * rpm/60;
 8001286:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001288:	f7ff f94c 	bl	8000524 <__aeabi_ui2d>
 800128c:	a389      	add	r3, pc, #548	@ (adr r3, 80014b4 <Accel_Stepper_Move+0x23c>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7ff f9c1 	bl	8000618 <__aeabi_dmul>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b81      	ldr	r3, [pc, #516]	@ (80014a8 <Accel_Stepper_Move+0x230>)
 80012a4:	f7ff fae2 	bl	800086c <__aeabi_ddiv>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fc8a 	bl	8000bc8 <__aeabi_d2uiz>
 80012b4:	4603      	mov	r3, r0
 80012b6:	617b      	str	r3, [r7, #20]
	Accel_stepper->step_count = 0;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
	if(step>0){
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dd0a      	ble.n	80012da <Accel_Stepper_Move+0x62>
		HAL_GPIO_WritePin(Accel_stepper->Dir_Port, Accel_stepper->Dir_Pin, 1);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80012cc:	2201      	movs	r2, #1
 80012ce:	4619      	mov	r1, r3
 80012d0:	f005 f818 	bl	8006304 <HAL_GPIO_WritePin>
		step = 2*step;
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]
//    srd.dir = CW;
	}
//   Set direction from sign on step value.
	if(step < 0){
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	da0d      	bge.n	80012fc <Accel_Stepper_Move+0x84>
//    srd.dir = CCW;
		HAL_GPIO_WritePin(Accel_stepper->Dir_Port, Accel_stepper->Dir_Pin, 0);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80012e8:	2200      	movs	r2, #0
 80012ea:	4619      	mov	r1, r3
 80012ec:	f005 f80a 	bl	8006304 <HAL_GPIO_WritePin>
		step = -2*step;
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	4613      	mov	r3, r2
 80012f4:	07db      	lsls	r3, r3, #31
 80012f6:	1a9b      	subs	r3, r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
	}


//  If moving only 1 step.
	if(step == 1){
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d110      	bne.n	8001324 <Accel_Stepper_Move+0xac>

//      Move one step...
		Accel_stepper->accel_count = -1;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	615a      	str	r2, [r3, #20]
//      ...in DECEL state.
		Accel_stepper->run_state = DECEL;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2202      	movs	r2, #2
 800130e:	705a      	strb	r2, [r3, #1]
//      Just a short delay so main() can act on 'running'.
		Accel_stepper->step_delay = 1000;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001316:	605a      	str	r2, [r3, #4]
//      status.running = TRUE;
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800131c:	4618      	mov	r0, r3
 800131e:	f007 fec5 	bl	80090ac <HAL_TIM_Base_Start_IT>
		Accel_stepper->accel_count = 0;
//    status.running = TRUE;
		__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, 1000);
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
	}
}
 8001322:	e0ae      	b.n	8001482 <Accel_Stepper_Move+0x20a>
	else if(step != 0){
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80ab 	beq.w	8001482 <Accel_Stepper_Move+0x20a>
		Accel_stepper->min_step_delay = ALPHA*TIM_FREQ/speed;
 800132c:	6978      	ldr	r0, [r7, #20]
 800132e:	f7ff f8f9 	bl	8000524 <__aeabi_ui2d>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	a156      	add	r1, pc, #344	@ (adr r1, 8001490 <Accel_Stepper_Move+0x218>)
 8001338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800133c:	f7ff fa96 	bl	800086c <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc16 	bl	8000b78 <__aeabi_d2iz>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	611a      	str	r2, [r3, #16]
		Accel_stepper->step_delay = (TIM_FREQ_SCALE * sqrt(A_SQ / accel))/10000;;
 8001352:	4a56      	ldr	r2, [pc, #344]	@ (80014ac <Accel_Stepper_Move+0x234>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f8e2 	bl	8000524 <__aeabi_ui2d>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	ec43 2b10 	vmov	d0, r2, r3
 8001368:	f012 f968 	bl	801363c <sqrt>
 800136c:	ec51 0b10 	vmov	r0, r1, d0
 8001370:	a349      	add	r3, pc, #292	@ (adr r3, 8001498 <Accel_Stepper_Move+0x220>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff f94f 	bl	8000618 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	a347      	add	r3, pc, #284	@ (adr r3, 80014a0 <Accel_Stepper_Move+0x228>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff fa70 	bl	800086c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc18 	bl	8000bc8 <__aeabi_d2uiz>
 8001398:	4602      	mov	r2, r0
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	605a      	str	r2, [r3, #4]
		max_step_lim = (long)speed*speed*10000/(long)(((long)A_x20000*accel)/100);
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fb03 f303 	mul.w	r3, r3, r3
 80013a4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80013a8:	fb02 f103 	mul.w	r1, r2, r3
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	009a      	lsls	r2, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	4a3d      	ldr	r2, [pc, #244]	@ (80014b0 <Accel_Stepper_Move+0x238>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013c4:	61fb      	str	r3, [r7, #28]
		if(max_step_lim == 0){
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <Accel_Stepper_Move+0x158>
			max_step_lim = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
		accel_lim = ((long)step*decel) / (accel+decel);
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	fb03 f202 	mul.w	r2, r3, r2
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	440b      	add	r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	61bb      	str	r3, [r7, #24]
		if(accel_lim == 0){
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <Accel_Stepper_Move+0x176>
			accel_lim = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
		if(accel_lim <= max_step_lim){
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d806      	bhi.n	8001404 <Accel_Stepper_Move+0x18c>
			Accel_stepper->decel_val = accel_lim - step;//decel_val: step for decel)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	e00a      	b.n	800141a <Accel_Stepper_Move+0x1a2>
			Accel_stepper->decel_val = -(((long)(max_step_lim*accel))/decel);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	fb03 f202 	mul.w	r2, r3, r2
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	425b      	negs	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	60da      	str	r2, [r3, #12]
		if(Accel_stepper->decel_val == 0){
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d103      	bne.n	800142a <Accel_Stepper_Move+0x1b2>
			Accel_stepper->decel_val = -1;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	60da      	str	r2, [r3, #12]
		Accel_stepper->decel_start = step + Accel_stepper->decel_val;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	4413      	add	r3, r2
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	609a      	str	r2, [r3, #8]
		if(Accel_stepper->step_delay <= Accel_stepper->min_step_delay){
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	6912      	ldr	r2, [r2, #16]
 8001440:	4293      	cmp	r3, r2
 8001442:	d808      	bhi.n	8001456 <Accel_Stepper_Move+0x1de>
			Accel_stepper->step_delay = Accel_stepper->min_step_delay;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	461a      	mov	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	605a      	str	r2, [r3, #4]
			Accel_stepper->run_state = RUN;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2203      	movs	r2, #3
 8001452:	705a      	strb	r2, [r3, #1]
 8001454:	e002      	b.n	800145c <Accel_Stepper_Move+0x1e4>
			Accel_stepper->run_state = ACCEL;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2201      	movs	r2, #1
 800145a:	705a      	strb	r2, [r3, #1]
		Accel_stepper->accel_count = 0;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, 1000);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800146c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001472:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001476:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800147c:	4618      	mov	r0, r3
 800147e:	f007 fe15 	bl	80090ac <HAL_TIM_Base_Start_IT>
}
 8001482:	bf00      	nop
 8001484:	3720      	adds	r7, #32
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	f3af 8000 	nop.w
 8001490:	43958106 	.word	0x43958106
 8001494:	4093a28b 	.word	0x4093a28b
 8001498:	00000000 	.word	0x00000000
 800149c:	4124a140 	.word	0x4124a140
 80014a0:	00000000 	.word	0x00000000
 80014a4:	40c38800 	.word	0x40c38800
 80014a8:	404e0000 	.word	0x404e0000
 80014ac:	017f7eb0 	.word	0x017f7eb0
 80014b0:	51eb851f 	.word	0x51eb851f
 80014b4:	f01b866e 	.word	0xf01b866e
 80014b8:	401921f9 	.word	0x401921f9
 80014bc:	00000000 	.word	0x00000000

080014c0 <initializeCNC_pos>:
#include "Inverse_cnc.h"

extern Inv_CNC_t CNC;
extern CNC_pos_t CNC_pos;

void initializeCNC_pos(CNC_pos_t *cnc) {
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	cnc->Lsw1 = 0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
	cnc->Lsw2 = 0;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	705a      	strb	r2, [r3, #1]
	cnc->Lsw3 = 0;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	709a      	strb	r2, [r3, #2]
	cnc->Lsw4 = 0;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	70da      	strb	r2, [r3, #3]
	cnc->Lsw5 = 0;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	711a      	strb	r2, [r3, #4]
	cnc->Lsw6 = 0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	715a      	strb	r2, [r3, #5]
    cnc->accel1 = 0;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	84da      	strh	r2, [r3, #38]	@ 0x26
    cnc->accel2 = 0;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    cnc->accel3 = 0;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    cnc->jerk1 = 0;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	859a      	strh	r2, [r3, #44]	@ 0x2c
    cnc->jerk2 = 0;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	85da      	strh	r2, [r3, #46]	@ 0x2e
    cnc->jerk3 = 0;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	861a      	strh	r2, [r3, #48]	@ 0x30
    cnc->max_speedXY = 30000;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001516:	865a      	strh	r2, [r3, #50]	@ 0x32
    cnc->max_speedZ = 7000;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800151e:	869a      	strh	r2, [r3, #52]	@ 0x34
    cnc->a_maxX = 10000;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001526:	86da      	strh	r2, [r3, #54]	@ 0x36
    cnc->j_maxX = 7000;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800152e:	871a      	strh	r2, [r3, #56]	@ 0x38
    cnc->a_maxY = 10000;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001536:	875a      	strh	r2, [r3, #58]	@ 0x3a
    cnc->j_maxY = 7000;
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001578 <initializeCNC_pos+0xb8>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    cnc->a_maxZ = 1000;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800154a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    cnc->j_maxZ = 1000;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001554:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    cnc->t = 0.25;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800155e:	64da      	str	r2, [r3, #76]	@ 0x4c
    cnc->t1 = 0.5;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001566:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	f3af 8000 	nop.w
 8001578:	00000000 	.word	0x00000000
 800157c:	40bb5800 	.word	0x40bb5800

08001580 <trans_to_posXY>:

void trans_to_posXY(float x,float y)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	ed87 0a01 	vstr	s0, [r7, #4]
 800158a:	edc7 0a00 	vstr	s1, [r7]
	CNC.set_posX = x - CNC.pos_x;
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <trans_to_posXY+0x44>)
 8001590:	edd3 7a03 	vldr	s15, [r3, #12]
 8001594:	ed97 7a01 	vldr	s14, [r7, #4]
 8001598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <trans_to_posXY+0x44>)
 800159e:	edc3 7a00 	vstr	s15, [r3]
	CNC.set_posY = y - CNC.pos_y;
 80015a2:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <trans_to_posXY+0x44>)
 80015a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80015a8:	ed97 7a00 	vldr	s14, [r7]
 80015ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b0:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <trans_to_posXY+0x44>)
 80015b2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	200006f0 	.word	0x200006f0

080015c8 <trans_to_posZ>:
void trans_to_posZ(float z)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	ed87 0a01 	vstr	s0, [r7, #4]
	CNC.set_posZ = z - CNC.pos_z;
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <trans_to_posZ+0x2c>)
 80015d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80015d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80015dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e0:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <trans_to_posZ+0x2c>)
 80015e2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	200006f0 	.word	0x200006f0

080015f8 <caculate_pos>:

signed int caculate_pos(float pos, float pwm)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001602:	edc7 0a00 	vstr	s1, [r7]
	return pos*pwm;
 8001606:	ed97 7a01 	vldr	s14, [r7, #4]
 800160a:	edd7 7a00 	vldr	s15, [r7]
 800160e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001616:	ee17 3a90 	vmov	r3, s15
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800162e:	463b      	mov	r3, r7
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <MX_ADC1_Init+0x78>)
 800163c:	4a19      	ldr	r2, [pc, #100]	@ (80016a4 <MX_ADC1_Init+0x7c>)
 800163e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001640:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <MX_ADC1_Init+0x78>)
 8001642:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001646:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001648:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <MX_ADC1_Init+0x78>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MX_ADC1_Init+0x78>)
 8001650:	2201      	movs	r2, #1
 8001652:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001654:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <MX_ADC1_Init+0x78>)
 8001656:	2201      	movs	r2, #1
 8001658:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_ADC1_Init+0x78>)
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_ADC1_Init+0x78>)
 8001664:	2200      	movs	r2, #0
 8001666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001668:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <MX_ADC1_Init+0x78>)
 800166a:	4a0f      	ldr	r2, [pc, #60]	@ (80016a8 <MX_ADC1_Init+0x80>)
 800166c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800166e:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_ADC1_Init+0x78>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <MX_ADC1_Init+0x78>)
 8001676:	2201      	movs	r2, #1
 8001678:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_ADC1_Init+0x78>)
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001682:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <MX_ADC1_Init+0x78>)
 8001684:	2201      	movs	r2, #1
 8001686:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001688:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_ADC1_Init+0x78>)
 800168a:	f003 fd9d 	bl	80051c8 <HAL_ADC_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001694:	f001 fab8 	bl	8002c08 <Error_Handler>
//  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
//  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//  {
//    Error_Handler();
//  }
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000354 	.word	0x20000354
 80016a4:	40012000 	.word	0x40012000
 80016a8:	0f000001 	.word	0x0f000001

080016ac <ADC_Select_CH10>:

void ADC_Select_CH10(void){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
	ADC_ChannelConfTypeDef sConfig = {0};
 80016b2:	463b      	mov	r3, r7
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_10;
 80016be:	230a      	movs	r3, #10
 80016c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80016c6:	2307      	movs	r3, #7
 80016c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ca:	463b      	mov	r3, r7
 80016cc:	4619      	mov	r1, r3
 80016ce:	4806      	ldr	r0, [pc, #24]	@ (80016e8 <ADC_Select_CH10+0x3c>)
 80016d0:	f004 f88a 	bl	80057e8 <HAL_ADC_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <ADC_Select_CH10+0x32>
  {
    Error_Handler();
 80016da:	f001 fa95 	bl	8002c08 <Error_Handler>
  }
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000354 	.word	0x20000354

080016ec <ADC_Select_CH11>:

void ADC_Select_CH11(void){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
	ADC_ChannelConfTypeDef sConfig = {0};
 80016f2:	463b      	mov	r3, r7
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_11;
 80016fe:	230b      	movs	r3, #11
 8001700:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001702:	2301      	movs	r3, #1
 8001704:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001706:	2307      	movs	r3, #7
 8001708:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800170a:	463b      	mov	r3, r7
 800170c:	4619      	mov	r1, r3
 800170e:	4806      	ldr	r0, [pc, #24]	@ (8001728 <ADC_Select_CH11+0x3c>)
 8001710:	f004 f86a 	bl	80057e8 <HAL_ADC_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <ADC_Select_CH11+0x32>
  {
    Error_Handler();
 800171a:	f001 fa75 	bl	8002c08 <Error_Handler>
  }
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000354 	.word	0x20000354

0800172c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1b      	ldr	r2, [pc, #108]	@ (80017b8 <HAL_ADC_MspInit+0x8c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d12f      	bne.n	80017ae <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <HAL_ADC_MspInit+0x90>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	4a19      	ldr	r2, [pc, #100]	@ (80017bc <HAL_ADC_MspInit+0x90>)
 8001758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800175c:	6453      	str	r3, [r2, #68]	@ 0x44
 800175e:	4b17      	ldr	r3, [pc, #92]	@ (80017bc <HAL_ADC_MspInit+0x90>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <HAL_ADC_MspInit+0x90>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <HAL_ADC_MspInit+0x90>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <HAL_ADC_MspInit+0x90>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001786:	2303      	movs	r3, #3
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178a:	2303      	movs	r3, #3
 800178c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4809      	ldr	r0, [pc, #36]	@ (80017c0 <HAL_ADC_MspInit+0x94>)
 800179a:	f004 fbff 	bl	8005f9c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2105      	movs	r1, #5
 80017a2:	2012      	movs	r0, #18
 80017a4:	f004 fb23 	bl	8005dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80017a8:	2012      	movs	r0, #18
 80017aa:	f004 fb3c 	bl	8005e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	@ 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40012000 	.word	0x40012000
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020800 	.word	0x40020800

080017c4 <prepare_data>:
/* USER CODE END PTD */
extern osMutexId_t lcdMutexHandle;
extern osSemaphoreId_t uartRxSemaphoreHandle;
extern UART_HandleTypeDef huart2;
/* UART TX BEGIN */
void prepare_data(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af02      	add	r7, sp, #8
    snprintf(transmitData.voltage_data, sizeof(transmitData.voltage_data), "%.2f", LCD_adc.voltage);
 80017ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <prepare_data+0x7c>)
 80017cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe feca 	bl	8000568 <__aeabi_f2d>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	e9cd 2300 	strd	r2, r3, [sp]
 80017dc:	4a19      	ldr	r2, [pc, #100]	@ (8001844 <prepare_data+0x80>)
 80017de:	2114      	movs	r1, #20
 80017e0:	4819      	ldr	r0, [pc, #100]	@ (8001848 <prepare_data+0x84>)
 80017e2:	f00d fe59 	bl	800f498 <sniprintf>
    snprintf(transmitData.current_data, sizeof(transmitData.current_data), "%.2f", LCD_adc.current);
 80017e6:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <prepare_data+0x7c>)
 80017e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe febc 	bl	8000568 <__aeabi_f2d>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	e9cd 2300 	strd	r2, r3, [sp]
 80017f8:	4a12      	ldr	r2, [pc, #72]	@ (8001844 <prepare_data+0x80>)
 80017fa:	2114      	movs	r1, #20
 80017fc:	4813      	ldr	r0, [pc, #76]	@ (800184c <prepare_data+0x88>)
 80017fe:	f00d fe4b 	bl	800f498 <sniprintf>
    snprintf(transmitData.temperature_data, sizeof(transmitData.temperature_data), "%.2f", LCD_adc.Temp);
 8001802:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <prepare_data+0x7c>)
 8001804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe feae 	bl	8000568 <__aeabi_f2d>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	e9cd 2300 	strd	r2, r3, [sp]
 8001814:	4a0b      	ldr	r2, [pc, #44]	@ (8001844 <prepare_data+0x80>)
 8001816:	2114      	movs	r1, #20
 8001818:	480d      	ldr	r0, [pc, #52]	@ (8001850 <prepare_data+0x8c>)
 800181a:	f00d fe3d 	bl	800f498 <sniprintf>
    snprintf(transmitData.power_data, sizeof(transmitData.power_data), "%.2f", LCD_adc.power);
 800181e:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <prepare_data+0x7c>)
 8001820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fea0 	bl	8000568 <__aeabi_f2d>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	e9cd 2300 	strd	r2, r3, [sp]
 8001830:	4a04      	ldr	r2, [pc, #16]	@ (8001844 <prepare_data+0x80>)
 8001832:	2114      	movs	r1, #20
 8001834:	4807      	ldr	r0, [pc, #28]	@ (8001854 <prepare_data+0x90>)
 8001836:	f00d fe2f 	bl	800f498 <sniprintf>
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2000075c 	.word	0x2000075c
 8001844:	08014488 	.word	0x08014488
 8001848:	2000039c 	.word	0x2000039c
 800184c:	200003b0 	.word	0x200003b0
 8001850:	200003c4 	.word	0x200003c4
 8001854:	200003d8 	.word	0x200003d8

08001858 <UART_transmit_init>:


void UART_transmit_init(void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
    send_uart_data();
 800185c:	f000 f802 	bl	8001864 <send_uart_data>
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <send_uart_data>:

void send_uart_data(void) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af04      	add	r7, sp, #16
    prepare_data();
 800186a:	f7ff ffab 	bl	80017c4 <prepare_data>
    int len = snprintf((char *)buffer, sizeof(buffer),
 800186e:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <send_uart_data+0x3c>)
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <send_uart_data+0x40>)
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <send_uart_data+0x44>)
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <send_uart_data+0x48>)
 800187c:	4a0c      	ldr	r2, [pc, #48]	@ (80018b0 <send_uart_data+0x4c>)
 800187e:	2164      	movs	r1, #100	@ 0x64
 8001880:	480c      	ldr	r0, [pc, #48]	@ (80018b4 <send_uart_data+0x50>)
 8001882:	f00d fe09 	bl	800f498 <sniprintf>
 8001886:	6078      	str	r0, [r7, #4]
                       "V:%s,C:%s,T:%s,P:%s\n",
                       transmitData.voltage_data,
                       transmitData.current_data,
                       transmitData.temperature_data,
                       transmitData.power_data);
    HAL_UART_Transmit_IT(&huart2, (uint8_t *)buffer, len);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	b29b      	uxth	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	4909      	ldr	r1, [pc, #36]	@ (80018b4 <send_uart_data+0x50>)
 8001890:	4809      	ldr	r0, [pc, #36]	@ (80018b8 <send_uart_data+0x54>)
 8001892:	f008 f93a 	bl	8009b0a <HAL_UART_Transmit_IT>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200003d8 	.word	0x200003d8
 80018a4:	200003c4 	.word	0x200003c4
 80018a8:	200003b0 	.word	0x200003b0
 80018ac:	2000039c 	.word	0x2000039c
 80018b0:	08014490 	.word	0x08014490
 80018b4:	200003f0 	.word	0x200003f0
 80018b8:	20000a80 	.word	0x20000a80

080018bc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
        // Do nothing, the timer will call send_uart_data to send data
    }
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <UART_RECEIVE_Init>:

/* UART TX END */

/* UART RX BEGIN */
void UART_RECEIVE_Init(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);  // Nhận từng byte một
 80018d4:	2201      	movs	r2, #1
 80018d6:	4903      	ldr	r1, [pc, #12]	@ (80018e4 <UART_RECEIVE_Init+0x14>)
 80018d8:	4803      	ldr	r0, [pc, #12]	@ (80018e8 <UART_RECEIVE_Init+0x18>)
 80018da:	f008 f94c 	bl	8009b76 <HAL_UART_Receive_IT>
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000454 	.word	0x20000454
 80018e8:	20000a80 	.word	0x20000a80

080018ec <start_command>:

void start_command(void) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	handle_start_button_press();
 80018f0:	f002 fdb2 	bl	8004458 <handle_start_button_press>
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <stop_command>:

void stop_command(void) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	handle_stop_button_press();
 80018fc:	f002 fdd2 	bl	80044a4 <handle_stop_button_press>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <reset_command>:

void reset_command(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	handle_reset_button_press();
 8001908:	f002 fd96 	bl	8004438 <handle_reset_button_press>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <drill_on_command>:

void drill_on_command(void) {
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(drill_port, drill_pin, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800191a:	4802      	ldr	r0, [pc, #8]	@ (8001924 <drill_on_command+0x14>)
 800191c:	f004 fcf2 	bl	8006304 <HAL_GPIO_WritePin>
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40020400 	.word	0x40020400

08001928 <drill_off_command>:

void drill_off_command(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(drill_port, drill_pin, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001932:	4802      	ldr	r0, [pc, #8]	@ (800193c <drill_off_command+0x14>)
 8001934:	f004 fce6 	bl	8006304 <HAL_GPIO_WritePin>
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40020400 	.word	0x40020400

08001940 <low_command>:

void low_command(void) {
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 10000;
 8001944:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <low_command+0x60>)
 8001946:	f242 7210 	movw	r2, #10000	@ 0x2710
 800194a:	865a      	strh	r2, [r3, #50]	@ 0x32
    CNC_pos.max_speedZ = 5000;
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <low_command+0x60>)
 800194e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001952:	869a      	strh	r2, [r3, #52]	@ 0x34
    CNC_pos.a_maxX = 5000;
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <low_command+0x60>)
 8001956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195a:	86da      	strh	r2, [r3, #54]	@ 0x36
    CNC_pos.j_maxX = 5000;
 800195c:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <low_command+0x60>)
 800195e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001962:	871a      	strh	r2, [r3, #56]	@ 0x38
    CNC_pos.a_maxY = 5000;
 8001964:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <low_command+0x60>)
 8001966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196a:	875a      	strh	r2, [r3, #58]	@ 0x3a
    CNC_pos.j_maxY = 5000;
 800196c:	490c      	ldr	r1, [pc, #48]	@ (80019a0 <low_command+0x60>)
 800196e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001998 <low_command+0x58>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    CNC_pos.a_maxZ = 500;
 8001978:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <low_command+0x60>)
 800197a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800197e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    CNC_pos.j_maxZ = 500;
 8001982:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <low_command+0x60>)
 8001984:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001988:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	00000000 	.word	0x00000000
 800199c:	40b38800 	.word	0x40b38800
 80019a0:	20000698 	.word	0x20000698
 80019a4:	00000000 	.word	0x00000000

080019a8 <medium_command>:

void medium_command(void) {
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 30000;
 80019ac:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <medium_command+0x60>)
 80019ae:	f247 5230 	movw	r2, #30000	@ 0x7530
 80019b2:	865a      	strh	r2, [r3, #50]	@ 0x32
    CNC_pos.max_speedZ = 7000;
 80019b4:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <medium_command+0x60>)
 80019b6:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80019ba:	869a      	strh	r2, [r3, #52]	@ 0x34
    CNC_pos.a_maxX = 10000;
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <medium_command+0x60>)
 80019be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80019c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    CNC_pos.j_maxX = 7000;
 80019c4:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <medium_command+0x60>)
 80019c6:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80019ca:	871a      	strh	r2, [r3, #56]	@ 0x38
    CNC_pos.a_maxY = 10000;
 80019cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <medium_command+0x60>)
 80019ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80019d2:	875a      	strh	r2, [r3, #58]	@ 0x3a
    CNC_pos.j_maxY = 7000;
 80019d4:	490c      	ldr	r1, [pc, #48]	@ (8001a08 <medium_command+0x60>)
 80019d6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001a00 <medium_command+0x58>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    CNC_pos.a_maxZ = 1000;
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <medium_command+0x60>)
 80019e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    CNC_pos.j_maxZ = 1000;
 80019ea:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <medium_command+0x60>)
 80019ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019f0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	00000000 	.word	0x00000000
 8001a04:	40bb5800 	.word	0x40bb5800
 8001a08:	20000698 	.word	0x20000698
 8001a0c:	00000000 	.word	0x00000000

08001a10 <high_command>:

void high_command(void) {
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 50000;
 8001a14:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <high_command+0x60>)
 8001a16:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001a1a:	865a      	strh	r2, [r3, #50]	@ 0x32
    CNC_pos.max_speedZ = 10000;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <high_command+0x60>)
 8001a1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001a22:	869a      	strh	r2, [r3, #52]	@ 0x34
    CNC_pos.a_maxX = 30000;
 8001a24:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <high_command+0x60>)
 8001a26:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001a2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    CNC_pos.j_maxX = 30000;
 8001a2c:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <high_command+0x60>)
 8001a2e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001a32:	871a      	strh	r2, [r3, #56]	@ 0x38
    CNC_pos.a_maxY = 20000;
 8001a34:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <high_command+0x60>)
 8001a36:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001a3a:	875a      	strh	r2, [r3, #58]	@ 0x3a
    CNC_pos.j_maxY = 20000;
 8001a3c:	490c      	ldr	r1, [pc, #48]	@ (8001a70 <high_command+0x60>)
 8001a3e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001a68 <high_command+0x58>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    CNC_pos.a_maxZ = 2000;
 8001a48:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <high_command+0x60>)
 8001a4a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001a4e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    CNC_pos.j_maxZ = 2000;
 8001a52:	4b07      	ldr	r3, [pc, #28]	@ (8001a70 <high_command+0x60>)
 8001a54:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001a58:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40d38800 	.word	0x40d38800
 8001a70:	20000698 	.word	0x20000698

08001a74 <add_coordinate>:

void add_coordinate(float x, float y, float z) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a7e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001a82:	ed87 1a01 	vstr	s2, [r7, #4]
    CoordinateNode *newNode = (CoordinateNode*)malloc(sizeof(CoordinateNode));
 8001a86:	2010      	movs	r0, #16
 8001a88:	f00c fcd8 	bl	800e43c <malloc>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	613b      	str	r3, [r7, #16]
    newNode->x = x;
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	601a      	str	r2, [r3, #0]
    newNode->y = y;
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	605a      	str	r2, [r3, #4]
    newNode->z = z;
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
    newNode->next = NULL;
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]

    if (head == NULL) {
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <add_coordinate+0x68>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d103      	bne.n	8001ab8 <add_coordinate+0x44>
        head = newNode;
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <add_coordinate+0x68>)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	6013      	str	r3, [r2, #0]
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}
 8001ab6:	e00d      	b.n	8001ad4 <add_coordinate+0x60>
        CoordinateNode *current = head;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <add_coordinate+0x68>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	617b      	str	r3, [r7, #20]
        while (current->next != NULL) {
 8001abe:	e002      	b.n	8001ac6 <add_coordinate+0x52>
            current = current->next;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	617b      	str	r3, [r7, #20]
        while (current->next != NULL) {
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f8      	bne.n	8001ac0 <add_coordinate+0x4c>
        current->next = newNode;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	60da      	str	r2, [r3, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200003ec 	.word	0x200003ec

08001ae0 <clear_coordinates>:

void clear_coordinates(void) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
    CoordinateNode *current = head;
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <clear_coordinates+0x34>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	607b      	str	r3, [r7, #4]
    CoordinateNode *next;

    while (current != NULL) {
 8001aec:	e007      	b.n	8001afe <clear_coordinates+0x1e>
        next = current->next;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	603b      	str	r3, [r7, #0]
        free(current);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f00c fca9 	bl	800e44c <free>
        current = next;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	607b      	str	r3, [r7, #4]
    while (current != NULL) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f4      	bne.n	8001aee <clear_coordinates+0xe>
    }

    head = NULL;
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <clear_coordinates+0x34>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200003ec 	.word	0x200003ec

08001b18 <move_to_coordinates>:

void move_to_coordinates(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
    CoordinateNode *current = head;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	@ (8001b7c <move_to_coordinates+0x64>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	607b      	str	r3, [r7, #4]

    while (current != NULL) {
 8001b24:	e021      	b.n	8001b6a <move_to_coordinates+0x52>
    	coordinate_X = current->x;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a15      	ldr	r2, [pc, #84]	@ (8001b80 <move_to_coordinates+0x68>)
 8001b2c:	6013      	str	r3, [r2, #0]
    	coordinate_Y = current->y;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4a14      	ldr	r2, [pc, #80]	@ (8001b84 <move_to_coordinates+0x6c>)
 8001b34:	6013      	str	r3, [r2, #0]
    	coordinate_Z = current->z;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	4a13      	ldr	r2, [pc, #76]	@ (8001b88 <move_to_coordinates+0x70>)
 8001b3c:	6013      	str	r3, [r2, #0]
        MoveToPosXY(coordinate_X, coordinate_Y);
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <move_to_coordinates+0x68>)
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <move_to_coordinates+0x6c>)
 8001b46:	ed93 7a00 	vldr	s14, [r3]
 8001b4a:	eef0 0a47 	vmov.f32	s1, s14
 8001b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b52:	f000 f9eb 	bl	8001f2c <MoveToPosXY>
        MoveToPosZ(coordinate_Z);
 8001b56:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <move_to_coordinates+0x70>)
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b60:	f000 fb42 	bl	80021e8 <MoveToPosZ>
        current = current->next;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	607b      	str	r3, [r7, #4]
    while (current != NULL) {
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1da      	bne.n	8001b26 <move_to_coordinates+0xe>
    }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200003ec 	.word	0x200003ec
 8001b80:	2000066c 	.word	0x2000066c
 8001b84:	20000670 	.word	0x20000670
 8001b88:	20000674 	.word	0x20000674

08001b8c <process_goto_command>:

void process_goto_command(char *cmd) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	6078      	str	r0, [r7, #4]
    char *line = strtok(cmd, "GOTO");
 8001b94:	491c      	ldr	r1, [pc, #112]	@ (8001c08 <process_goto_command+0x7c>)
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f00d fd7e 	bl	800f698 <strtok>
 8001b9c:	6178      	str	r0, [r7, #20]
    clear_coordinates(); // Xóa danh sách tọa độ hiện tại
 8001b9e:	f7ff ff9f 	bl	8001ae0 <clear_coordinates>

    while (line != NULL) {
 8001ba2:	e021      	b.n	8001be8 <process_goto_command+0x5c>
        float x, y, z;
        if (sscanf(line, "%f,%f,%f", &x, &y, &z) == 3) {
 8001ba4:	f107 010c 	add.w	r1, r7, #12
 8001ba8:	f107 0210 	add.w	r2, r7, #16
 8001bac:	f107 0308 	add.w	r3, r7, #8
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4915      	ldr	r1, [pc, #84]	@ (8001c0c <process_goto_command+0x80>)
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f00d fcc2 	bl	800f540 <siscanf>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d10d      	bne.n	8001bde <process_goto_command+0x52>
            add_coordinate(x, y, z);
 8001bc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bc6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bca:	edd7 6a02 	vldr	s13, [r7, #8]
 8001bce:	eeb0 1a66 	vmov.f32	s2, s13
 8001bd2:	eef0 0a47 	vmov.f32	s1, s14
 8001bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bda:	f7ff ff4b 	bl	8001a74 <add_coordinate>
        }
        line = strtok(NULL, "GOTO");
 8001bde:	490a      	ldr	r1, [pc, #40]	@ (8001c08 <process_goto_command+0x7c>)
 8001be0:	2000      	movs	r0, #0
 8001be2:	f00d fd59 	bl	800f698 <strtok>
 8001be6:	6178      	str	r0, [r7, #20]
    while (line != NULL) {
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1da      	bne.n	8001ba4 <process_goto_command+0x18>
    }

    state.start_press = 1; // Đặt cờ để bắt đầu di chuyển đến tọa độ
 8001bee:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <process_goto_command+0x84>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
    state.stop_press = 0;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <process_goto_command+0x84>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	705a      	strb	r2, [r3, #1]
    state.reset_press = 0;
 8001bfa:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <process_goto_command+0x84>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	709a      	strb	r2, [r3, #2]
}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	080144a8 	.word	0x080144a8
 8001c0c:	080144b0 	.word	0x080144b0
 8001c10:	200008c8 	.word	0x200008c8

08001c14 <UART_rx_process>:

void UART_rx_process(void) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    if (cmdstate) {
 8001c18:	4b33      	ldr	r3, [pc, #204]	@ (8001ce8 <UART_rx_process+0xd4>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d061      	beq.n	8001ce4 <UART_rx_process+0xd0>
    	cmdstate = 0;
 8001c20:	4b31      	ldr	r3, [pc, #196]	@ (8001ce8 <UART_rx_process+0xd4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]

        if (strcmp(cmd, "START") == 0) {
 8001c26:	4931      	ldr	r1, [pc, #196]	@ (8001cec <UART_rx_process+0xd8>)
 8001c28:	4831      	ldr	r0, [pc, #196]	@ (8001cf0 <UART_rx_process+0xdc>)
 8001c2a:	f7fe fad1 	bl	80001d0 <strcmp>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <UART_rx_process+0x26>
            start_command();
 8001c34:	f7ff fe5a 	bl	80018ec <start_command>
            process_goto_command(cmd);
        } else {
        	process_ip_address(cmd);
        }
    }
}
 8001c38:	e054      	b.n	8001ce4 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "STOP") == 0) {
 8001c3a:	492e      	ldr	r1, [pc, #184]	@ (8001cf4 <UART_rx_process+0xe0>)
 8001c3c:	482c      	ldr	r0, [pc, #176]	@ (8001cf0 <UART_rx_process+0xdc>)
 8001c3e:	f7fe fac7 	bl	80001d0 <strcmp>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <UART_rx_process+0x3a>
            stop_command();
 8001c48:	f7ff fe56 	bl	80018f8 <stop_command>
}
 8001c4c:	e04a      	b.n	8001ce4 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "RESET") == 0) {
 8001c4e:	492a      	ldr	r1, [pc, #168]	@ (8001cf8 <UART_rx_process+0xe4>)
 8001c50:	4827      	ldr	r0, [pc, #156]	@ (8001cf0 <UART_rx_process+0xdc>)
 8001c52:	f7fe fabd 	bl	80001d0 <strcmp>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <UART_rx_process+0x4e>
            reset_command();
 8001c5c:	f7ff fe52 	bl	8001904 <reset_command>
}
 8001c60:	e040      	b.n	8001ce4 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "ON") == 0) {
 8001c62:	4926      	ldr	r1, [pc, #152]	@ (8001cfc <UART_rx_process+0xe8>)
 8001c64:	4822      	ldr	r0, [pc, #136]	@ (8001cf0 <UART_rx_process+0xdc>)
 8001c66:	f7fe fab3 	bl	80001d0 <strcmp>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <UART_rx_process+0x62>
            drill_on_command();
 8001c70:	f7ff fe4e 	bl	8001910 <drill_on_command>
}
 8001c74:	e036      	b.n	8001ce4 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "OFF") == 0) {
 8001c76:	4922      	ldr	r1, [pc, #136]	@ (8001d00 <UART_rx_process+0xec>)
 8001c78:	481d      	ldr	r0, [pc, #116]	@ (8001cf0 <UART_rx_process+0xdc>)
 8001c7a:	f7fe faa9 	bl	80001d0 <strcmp>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <UART_rx_process+0x76>
            drill_off_command();
 8001c84:	f7ff fe50 	bl	8001928 <drill_off_command>
}
 8001c88:	e02c      	b.n	8001ce4 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "LOW") == 0) {
 8001c8a:	491e      	ldr	r1, [pc, #120]	@ (8001d04 <UART_rx_process+0xf0>)
 8001c8c:	4818      	ldr	r0, [pc, #96]	@ (8001cf0 <UART_rx_process+0xdc>)
 8001c8e:	f7fe fa9f 	bl	80001d0 <strcmp>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <UART_rx_process+0x8a>
            low_command();
 8001c98:	f7ff fe52 	bl	8001940 <low_command>
}
 8001c9c:	e022      	b.n	8001ce4 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "MEDIUM") == 0) {
 8001c9e:	491a      	ldr	r1, [pc, #104]	@ (8001d08 <UART_rx_process+0xf4>)
 8001ca0:	4813      	ldr	r0, [pc, #76]	@ (8001cf0 <UART_rx_process+0xdc>)
 8001ca2:	f7fe fa95 	bl	80001d0 <strcmp>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <UART_rx_process+0x9e>
            medium_command();
 8001cac:	f7ff fe7c 	bl	80019a8 <medium_command>
}
 8001cb0:	e018      	b.n	8001ce4 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "HIGH") == 0) {
 8001cb2:	4916      	ldr	r1, [pc, #88]	@ (8001d0c <UART_rx_process+0xf8>)
 8001cb4:	480e      	ldr	r0, [pc, #56]	@ (8001cf0 <UART_rx_process+0xdc>)
 8001cb6:	f7fe fa8b 	bl	80001d0 <strcmp>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <UART_rx_process+0xb2>
            high_command();
 8001cc0:	f7ff fea6 	bl	8001a10 <high_command>
}
 8001cc4:	e00e      	b.n	8001ce4 <UART_rx_process+0xd0>
        } else if (strncmp(cmd, "GOTO", 4) == 0) {
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	4911      	ldr	r1, [pc, #68]	@ (8001d10 <UART_rx_process+0xfc>)
 8001cca:	4809      	ldr	r0, [pc, #36]	@ (8001cf0 <UART_rx_process+0xdc>)
 8001ccc:	f00d fcbe 	bl	800f64c <strncmp>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d103      	bne.n	8001cde <UART_rx_process+0xca>
            process_goto_command(cmd);
 8001cd6:	4806      	ldr	r0, [pc, #24]	@ (8001cf0 <UART_rx_process+0xdc>)
 8001cd8:	f7ff ff58 	bl	8001b8c <process_goto_command>
}
 8001cdc:	e002      	b.n	8001ce4 <UART_rx_process+0xd0>
        	process_ip_address(cmd);
 8001cde:	4804      	ldr	r0, [pc, #16]	@ (8001cf0 <UART_rx_process+0xdc>)
 8001ce0:	f000 f818 	bl	8001d14 <process_ip_address>
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000668 	.word	0x20000668
 8001cec:	080144bc 	.word	0x080144bc
 8001cf0:	20000554 	.word	0x20000554
 8001cf4:	080144c4 	.word	0x080144c4
 8001cf8:	080144cc 	.word	0x080144cc
 8001cfc:	080144d4 	.word	0x080144d4
 8001d00:	080144d8 	.word	0x080144d8
 8001d04:	080144dc 	.word	0x080144dc
 8001d08:	080144e0 	.word	0x080144e0
 8001d0c:	080144e8 	.word	0x080144e8
 8001d10:	080144a8 	.word	0x080144a8

08001d14 <process_ip_address>:

void process_ip_address(char *ip_address) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
    // Store the received IP address
    strncpy(ip_config, ip_address, sizeof(ip_config) - 1);
 8001d1c:	2213      	movs	r2, #19
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4804      	ldr	r0, [pc, #16]	@ (8001d34 <process_ip_address+0x20>)
 8001d22:	f00d fca5 	bl	800f670 <strncpy>
    ip_config[sizeof(ip_config) - 1] = '\0';  // Ensure null termination
 8001d26:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <process_ip_address+0x20>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	74da      	strb	r2, [r3, #19]
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000654 	.word	0x20000654

08001d38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
    static uint8_t index = 0;

    if (huart->Instance == USART2) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc0 <HAL_UART_RxCpltCallback+0x88>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d135      	bne.n	8001db6 <HAL_UART_RxCpltCallback+0x7e>
        if (rxBuffer[0] != '\r' && rxBuffer[0] != '\n') {
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc4 <HAL_UART_RxCpltCallback+0x8c>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b0d      	cmp	r3, #13
 8001d50:	d013      	beq.n	8001d7a <HAL_UART_RxCpltCallback+0x42>
 8001d52:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc4 <HAL_UART_RxCpltCallback+0x8c>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b0a      	cmp	r3, #10
 8001d58:	d00f      	beq.n	8001d7a <HAL_UART_RxCpltCallback+0x42>
            if (index < sizeof(cmd) - 1) {
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <HAL_UART_RxCpltCallback+0x90>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2bff      	cmp	r3, #255	@ 0xff
 8001d60:	d024      	beq.n	8001dac <HAL_UART_RxCpltCallback+0x74>
            	cmd[index++] = rxBuffer[0];
 8001d62:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <HAL_UART_RxCpltCallback+0x90>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	b2d1      	uxtb	r1, r2
 8001d6a:	4a17      	ldr	r2, [pc, #92]	@ (8001dc8 <HAL_UART_RxCpltCallback+0x90>)
 8001d6c:	7011      	strb	r1, [r2, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b14      	ldr	r3, [pc, #80]	@ (8001dc4 <HAL_UART_RxCpltCallback+0x8c>)
 8001d72:	7819      	ldrb	r1, [r3, #0]
 8001d74:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_UART_RxCpltCallback+0x94>)
 8001d76:	5499      	strb	r1, [r3, r2]
            if (index < sizeof(cmd) - 1) {
 8001d78:	e018      	b.n	8001dac <HAL_UART_RxCpltCallback+0x74>
            }
        } else if (rxBuffer[0] == '\r') {
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_UART_RxCpltCallback+0x8c>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b0d      	cmp	r3, #13
 8001d80:	d114      	bne.n	8001dac <HAL_UART_RxCpltCallback+0x74>
            if (index > 0) {
 8001d82:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <HAL_UART_RxCpltCallback+0x90>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d010      	beq.n	8001dac <HAL_UART_RxCpltCallback+0x74>
            	cmd[index] = '\0';
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <HAL_UART_RxCpltCallback+0x90>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <HAL_UART_RxCpltCallback+0x94>)
 8001d92:	2100      	movs	r1, #0
 8001d94:	5499      	strb	r1, [r3, r2]
                index = 0;
 8001d96:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <HAL_UART_RxCpltCallback+0x90>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
                cmdstate = 1;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <HAL_UART_RxCpltCallback+0x98>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
                osSemaphoreRelease(uartRxSemaphoreHandle);
 8001da2:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <HAL_UART_RxCpltCallback+0x9c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f009 f96a 	bl	800b080 <osSemaphoreRelease>
            }
        }
        HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 8001dac:	2201      	movs	r2, #1
 8001dae:	4905      	ldr	r1, [pc, #20]	@ (8001dc4 <HAL_UART_RxCpltCallback+0x8c>)
 8001db0:	4809      	ldr	r0, [pc, #36]	@ (8001dd8 <HAL_UART_RxCpltCallback+0xa0>)
 8001db2:	f007 fee0 	bl	8009b76 <HAL_UART_Receive_IT>
    }
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40004400 	.word	0x40004400
 8001dc4:	20000454 	.word	0x20000454
 8001dc8:	20000678 	.word	0x20000678
 8001dcc:	20000554 	.word	0x20000554
 8001dd0:	20000668 	.word	0x20000668
 8001dd4:	20000680 	.word	0x20000680
 8001dd8:	20000a80 	.word	0x20000a80

08001ddc <max3>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
/*----------------------------------*/
/* Config speed for stepper */
int max3(int a, int b, int c) {
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
	int n1 = max(a, b);
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4293      	cmp	r3, r2
 8001dee:	bfb8      	it	lt
 8001df0:	4613      	movlt	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]
    return max(n1, c);
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	bfb8      	it	lt
 8001dfc:	4613      	movlt	r3, r2
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <DelayUs_step>:
/* Function set home */
void DelayUs_step(uint32_t us)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim1);
 8001e14:	480a      	ldr	r0, [pc, #40]	@ (8001e40 <DelayUs_step+0x34>)
 8001e16:	f007 f949 	bl	80090ac <HAL_TIM_Base_Start_IT>
	//(&htim7)->Instance->CNT = (0);
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <DelayUs_step+0x34>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 8001e22:	bf00      	nop
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <DelayUs_step+0x34>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d8f9      	bhi.n	8001e24 <DelayUs_step+0x18>
	HAL_TIM_Base_Stop_IT(&htim1);
 8001e30:	4803      	ldr	r0, [pc, #12]	@ (8001e40 <DelayUs_step+0x34>)
 8001e32:	f007 f9ab 	bl	800918c <HAL_TIM_Base_Stop_IT>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200008d0 	.word	0x200008d0

08001e44 <HOME>:

void HOME(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
    // Home Z axis
    HAL_GPIO_WritePin(dir_3_GPIO_Port, dir_3_pin, GPIO_PIN_RESET); // Set direction to move towards home
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2120      	movs	r1, #32
 8001e4e:	4833      	ldr	r0, [pc, #204]	@ (8001f1c <HOME+0xd8>)
 8001e50:	f004 fa58 	bl	8006304 <HAL_GPIO_WritePin>
    while (HAL_GPIO_ReadPin(moveZsub_port, moveZsub_pin) != CNC_pos.Lsw6) {
 8001e54:	e006      	b.n	8001e64 <HOME+0x20>
        HAL_GPIO_TogglePin(step_3_GPIO_Port, step_3_pin); // Toggle step pin to move towards home
 8001e56:	2110      	movs	r1, #16
 8001e58:	4830      	ldr	r0, [pc, #192]	@ (8001f1c <HOME+0xd8>)
 8001e5a:	f004 fa6c 	bl	8006336 <HAL_GPIO_TogglePin>
        DelayUs_step(30); // Adjust delay as needed
 8001e5e:	201e      	movs	r0, #30
 8001e60:	f7ff ffd4 	bl	8001e0c <DelayUs_step>
    while (HAL_GPIO_ReadPin(moveZsub_port, moveZsub_pin) != CNC_pos.Lsw6) {
 8001e64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e68:	482d      	ldr	r0, [pc, #180]	@ (8001f20 <HOME+0xdc>)
 8001e6a:	f004 fa33 	bl	80062d4 <HAL_GPIO_ReadPin>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b2c      	ldr	r3, [pc, #176]	@ (8001f24 <HOME+0xe0>)
 8001e74:	795b      	ldrb	r3, [r3, #5]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d1ed      	bne.n	8001e56 <HOME+0x12>
    }
    // Home X axis
    HAL_GPIO_WritePin(dir_1_GPIO_Port, dir_1_pin, GPIO_PIN_RESET); // Set direction to move towards home
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	4827      	ldr	r0, [pc, #156]	@ (8001f1c <HOME+0xd8>)
 8001e80:	f004 fa40 	bl	8006304 <HAL_GPIO_WritePin>
    bool isXHome = false;
 8001e84:	2300      	movs	r3, #0
 8001e86:	71fb      	strb	r3, [r7, #7]

    // Home Y axis
    HAL_GPIO_WritePin(dir_2_GPIO_Port, dir_2_pin, GPIO_PIN_RESET); // Set direction to move towards home
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2108      	movs	r1, #8
 8001e8c:	4823      	ldr	r0, [pc, #140]	@ (8001f1c <HOME+0xd8>)
 8001e8e:	f004 fa39 	bl	8006304 <HAL_GPIO_WritePin>
    bool isYHome = false;
 8001e92:	2300      	movs	r3, #0
 8001e94:	71bb      	strb	r3, [r7, #6]

    while (!(isXHome && isYHome)) {
 8001e96:	e030      	b.n	8001efa <HOME+0xb6>
        if (!isXHome && (HAL_GPIO_ReadPin(moveXsub_port, moveXsub_pin) != CNC_pos.Lsw2)) {
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00e      	beq.n	8001ec2 <HOME+0x7e>
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	4820      	ldr	r0, [pc, #128]	@ (8001f28 <HOME+0xe4>)
 8001ea8:	f004 fa14 	bl	80062d4 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f24 <HOME+0xe0>)
 8001eb2:	785b      	ldrb	r3, [r3, #1]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d004      	beq.n	8001ec2 <HOME+0x7e>
            HAL_GPIO_TogglePin(step_1_GPIO_Port, step_1_pin); // Toggle step pin to move towards home
 8001eb8:	2101      	movs	r1, #1
 8001eba:	4818      	ldr	r0, [pc, #96]	@ (8001f1c <HOME+0xd8>)
 8001ebc:	f004 fa3b 	bl	8006336 <HAL_GPIO_TogglePin>
 8001ec0:	e001      	b.n	8001ec6 <HOME+0x82>
        } else {
            isXHome = true;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	71fb      	strb	r3, [r7, #7]
        }

        if (!isYHome && (HAL_GPIO_ReadPin(moveYsub_port, moveYsub_pin) != CNC_pos.Lsw4)) {
 8001ec6:	79bb      	ldrb	r3, [r7, #6]
 8001ec8:	f083 0301 	eor.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00e      	beq.n	8001ef0 <HOME+0xac>
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	4814      	ldr	r0, [pc, #80]	@ (8001f28 <HOME+0xe4>)
 8001ed6:	f004 f9fd 	bl	80062d4 <HAL_GPIO_ReadPin>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <HOME+0xe0>)
 8001ee0:	78db      	ldrb	r3, [r3, #3]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d004      	beq.n	8001ef0 <HOME+0xac>
            HAL_GPIO_TogglePin(step_2_GPIO_Port, step_2_pin); // Toggle step pin to move towards home
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	480c      	ldr	r0, [pc, #48]	@ (8001f1c <HOME+0xd8>)
 8001eea:	f004 fa24 	bl	8006336 <HAL_GPIO_TogglePin>
 8001eee:	e001      	b.n	8001ef4 <HOME+0xb0>
        } else {
            isYHome = true;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	71bb      	strb	r3, [r7, #6]
        }
        DelayUs_step(30); // Adjust delay as needed
 8001ef4:	201e      	movs	r0, #30
 8001ef6:	f7ff ff89 	bl	8001e0c <DelayUs_step>
    while (!(isXHome && isYHome)) {
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f083 0301 	eor.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1c8      	bne.n	8001e98 <HOME+0x54>
 8001f06:	79bb      	ldrb	r3, [r7, #6]
 8001f08:	f083 0301 	eor.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1c2      	bne.n	8001e98 <HOME+0x54>
    }
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	20000698 	.word	0x20000698
 8001f28:	40020400 	.word	0x40020400

08001f2c <MoveToPosXY>:
/* Function control 3 axis */
extern uint16_t kalmancurrent;
//Move X-Y
void MoveToPosXY(float x, float y) {
 8001f2c:	b5b0      	push	{r4, r5, r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f36:	edc7 0a00 	vstr	s1, [r7]
    trans_to_posXY(x,y);
 8001f3a:	edd7 0a00 	vldr	s1, [r7]
 8001f3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f42:	f7ff fb1d 	bl	8001580 <trans_to_posXY>
    CNC_pos.MoveX = caculate_pos(CNC.set_posX, 161);
 8001f46:	4ba1      	ldr	r3, [pc, #644]	@ (80021cc <MoveToPosXY+0x2a0>)
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 80021d0 <MoveToPosXY+0x2a4>
 8001f50:	eeb0 0a67 	vmov.f32	s0, s15
 8001f54:	f7ff fb50 	bl	80015f8 <caculate_pos>
 8001f58:	ee07 0a90 	vmov	s15, r0
 8001f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f60:	4b9c      	ldr	r3, [pc, #624]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8001f62:	edc3 7a05 	vstr	s15, [r3, #20]
    CNC_pos.MoveY = caculate_pos(CNC.set_posY, 161);
 8001f66:	4b99      	ldr	r3, [pc, #612]	@ (80021cc <MoveToPosXY+0x2a0>)
 8001f68:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f6c:	eddf 0a98 	vldr	s1, [pc, #608]	@ 80021d0 <MoveToPosXY+0x2a4>
 8001f70:	eeb0 0a67 	vmov.f32	s0, s15
 8001f74:	f7ff fb40 	bl	80015f8 <caculate_pos>
 8001f78:	ee07 0a90 	vmov	s15, r0
 8001f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f80:	4b94      	ldr	r3, [pc, #592]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8001f82:	edc3 7a06 	vstr	s15, [r3, #24]
    int step_max = max3(abs(CNC_pos.MoveX), abs(CNC_pos.MoveY), abs(CNC_pos.MoveZ));
 8001f86:	4b93      	ldr	r3, [pc, #588]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8001f88:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f90:	ee17 3a90 	vmov	r3, s15
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bfb8      	it	lt
 8001f98:	425b      	neglt	r3, r3
 8001f9a:	4a8e      	ldr	r2, [pc, #568]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8001f9c:	edd2 7a06 	vldr	s15, [r2, #24]
 8001fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa4:	ee17 2a90 	vmov	r2, s15
 8001fa8:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8001fac:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8001fb0:	4a88      	ldr	r2, [pc, #544]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8001fb2:	edd2 7a07 	vldr	s15, [r2, #28]
 8001fb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fba:	ee17 2a90 	vmov	r2, s15
 8001fbe:	2a00      	cmp	r2, #0
 8001fc0:	bfb8      	it	lt
 8001fc2:	4252      	neglt	r2, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff09 	bl	8001ddc <max3>
 8001fca:	6178      	str	r0, [r7, #20]
    float coef1 = fabs(CNC_pos.MoveX) / step_max;
 8001fcc:	4b81      	ldr	r3, [pc, #516]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8001fce:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fd2:	eef0 7ae7 	vabs.f32	s15, s15
 8001fd6:	ee17 0a90 	vmov	r0, s15
 8001fda:	f7fe fac5 	bl	8000568 <__aeabi_f2d>
 8001fde:	4604      	mov	r4, r0
 8001fe0:	460d      	mov	r5, r1
 8001fe2:	6978      	ldr	r0, [r7, #20]
 8001fe4:	f7fe faae 	bl	8000544 <__aeabi_i2d>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4620      	mov	r0, r4
 8001fee:	4629      	mov	r1, r5
 8001ff0:	f7fe fc3c 	bl	800086c <__aeabi_ddiv>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fe04 	bl	8000c08 <__aeabi_d2f>
 8002000:	4603      	mov	r3, r0
 8002002:	613b      	str	r3, [r7, #16]
    float coef2 = fabs(CNC_pos.MoveY) / step_max;
 8002004:	4b73      	ldr	r3, [pc, #460]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8002006:	edd3 7a06 	vldr	s15, [r3, #24]
 800200a:	eef0 7ae7 	vabs.f32	s15, s15
 800200e:	ee17 0a90 	vmov	r0, s15
 8002012:	f7fe faa9 	bl	8000568 <__aeabi_f2d>
 8002016:	4604      	mov	r4, r0
 8002018:	460d      	mov	r5, r1
 800201a:	6978      	ldr	r0, [r7, #20]
 800201c:	f7fe fa92 	bl	8000544 <__aeabi_i2d>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4620      	mov	r0, r4
 8002026:	4629      	mov	r1, r5
 8002028:	f7fe fc20 	bl	800086c <__aeabi_ddiv>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fde8 	bl	8000c08 <__aeabi_d2f>
 8002038:	4603      	mov	r3, r0
 800203a:	60fb      	str	r3, [r7, #12]
    CNC_pos.pos1dot = CNC_pos.max_speedXY * coef1;
 800203c:	4b65      	ldr	r3, [pc, #404]	@ (80021d4 <MoveToPosXY+0x2a8>)
 800203e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002048:	edd7 7a04 	vldr	s15, [r7, #16]
 800204c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002054:	ee17 3a90 	vmov	r3, s15
 8002058:	b29a      	uxth	r2, r3
 800205a:	4b5e      	ldr	r3, [pc, #376]	@ (80021d4 <MoveToPosXY+0x2a8>)
 800205c:	841a      	strh	r2, [r3, #32]
    CNC_pos.pos2dot = CNC_pos.max_speedXY * coef2;
 800205e:	4b5d      	ldr	r3, [pc, #372]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8002060:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206a:	edd7 7a03 	vldr	s15, [r7, #12]
 800206e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002076:	ee17 3a90 	vmov	r3, s15
 800207a:	b29a      	uxth	r2, r3
 800207c:	4b55      	ldr	r3, [pc, #340]	@ (80021d4 <MoveToPosXY+0x2a8>)
 800207e:	845a      	strh	r2, [r3, #34]	@ 0x22
    CNC_pos.accel1 = CNC_pos.a_maxX * coef1;
 8002080:	4b54      	ldr	r3, [pc, #336]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8002082:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800208c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002098:	ee17 3a90 	vmov	r3, s15
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b4d      	ldr	r3, [pc, #308]	@ (80021d4 <MoveToPosXY+0x2a8>)
 80020a0:	84da      	strh	r2, [r3, #38]	@ 0x26
    CNC_pos.accel2 = CNC_pos.a_maxY * coef2;
 80020a2:	4b4c      	ldr	r3, [pc, #304]	@ (80021d4 <MoveToPosXY+0x2a8>)
 80020a4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80020a6:	ee07 3a90 	vmov	s15, r3
 80020aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80020b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ba:	ee17 3a90 	vmov	r3, s15
 80020be:	b29a      	uxth	r2, r3
 80020c0:	4b44      	ldr	r3, [pc, #272]	@ (80021d4 <MoveToPosXY+0x2a8>)
 80020c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    CNC_pos.jerk1 = CNC_pos.j_maxX * coef1;
 80020c4:	4b43      	ldr	r3, [pc, #268]	@ (80021d4 <MoveToPosXY+0x2a8>)
 80020c6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80020d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020dc:	ee17 3a90 	vmov	r3, s15
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	4b3c      	ldr	r3, [pc, #240]	@ (80021d4 <MoveToPosXY+0x2a8>)
 80020e4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    CNC_pos.jerk2 = CNC_pos.j_maxY * coef2;
 80020e6:	4b3b      	ldr	r3, [pc, #236]	@ (80021d4 <MoveToPosXY+0x2a8>)
 80020e8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f7fe fa3b 	bl	8000568 <__aeabi_f2d>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4620      	mov	r0, r4
 80020f8:	4629      	mov	r1, r5
 80020fa:	f7fe fa8d 	bl	8000618 <__aeabi_dmul>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fd5f 	bl	8000bc8 <__aeabi_d2uiz>
 800210a:	4603      	mov	r3, r0
 800210c:	b29a      	uxth	r2, r3
 800210e:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8002110:	85da      	strh	r2, [r3, #46]	@ 0x2e
    if (Stepper1.run_state != 1 && Stepper2.run_state != 1) {
 8002112:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <MoveToPosXY+0x2ac>)
 8002114:	785b      	ldrb	r3, [r3, #1]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d053      	beq.n	80021c2 <MoveToPosXY+0x296>
 800211a:	4b30      	ldr	r3, [pc, #192]	@ (80021dc <MoveToPosXY+0x2b0>)
 800211c:	785b      	ldrb	r3, [r3, #1]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d04f      	beq.n	80021c2 <MoveToPosXY+0x296>
        Accel_Stepper_Move(&Stepper1, CNC_pos.MoveX, CNC_pos.accel1, CNC_pos.jerk1, CNC_pos.pos1dot);
 8002122:	4b2c      	ldr	r3, [pc, #176]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8002124:	edd3 7a05 	vldr	s15, [r3, #20]
 8002128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800212c:	4b29      	ldr	r3, [pc, #164]	@ (80021d4 <MoveToPosXY+0x2a8>)
 800212e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002130:	461a      	mov	r2, r3
 8002132:	4b28      	ldr	r3, [pc, #160]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8002134:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002136:	4619      	mov	r1, r3
 8002138:	4b26      	ldr	r3, [pc, #152]	@ (80021d4 <MoveToPosXY+0x2a8>)
 800213a:	8c1b      	ldrh	r3, [r3, #32]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	460b      	mov	r3, r1
 8002140:	ee17 1a90 	vmov	r1, s15
 8002144:	4824      	ldr	r0, [pc, #144]	@ (80021d8 <MoveToPosXY+0x2ac>)
 8002146:	f7ff f897 	bl	8001278 <Accel_Stepper_Move>
        Accel_Stepper_Move(&Stepper2, CNC_pos.MoveY, CNC_pos.accel2, CNC_pos.jerk2, CNC_pos.pos2dot);
 800214a:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <MoveToPosXY+0x2a8>)
 800214c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002154:	4b1f      	ldr	r3, [pc, #124]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8002156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002158:	461a      	mov	r2, r3
 800215a:	4b1e      	ldr	r3, [pc, #120]	@ (80021d4 <MoveToPosXY+0x2a8>)
 800215c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800215e:	4619      	mov	r1, r3
 8002160:	4b1c      	ldr	r3, [pc, #112]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8002162:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	460b      	mov	r3, r1
 8002168:	ee17 1a90 	vmov	r1, s15
 800216c:	481b      	ldr	r0, [pc, #108]	@ (80021dc <MoveToPosXY+0x2b0>)
 800216e:	f7ff f883 	bl	8001278 <Accel_Stepper_Move>
        while (Stepper1.run_state != STOP || Stepper2.run_state != STOP) {
 8002172:	e018      	b.n	80021a6 <MoveToPosXY+0x27a>
        	if(HAL_GPIO_ReadPin(moveXplus_port, moveXplus_pin) == CNC_pos.Lsw1 ||
 8002174:	2120      	movs	r1, #32
 8002176:	481a      	ldr	r0, [pc, #104]	@ (80021e0 <MoveToPosXY+0x2b4>)
 8002178:	f004 f8ac 	bl	80062d4 <HAL_GPIO_ReadPin>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d009      	beq.n	800219c <MoveToPosXY+0x270>
        		HAL_GPIO_ReadPin(moveYplus_port, moveYplus_pin) == CNC_pos.Lsw3){
 8002188:	2104      	movs	r1, #4
 800218a:	4816      	ldr	r0, [pc, #88]	@ (80021e4 <MoveToPosXY+0x2b8>)
 800218c:	f004 f8a2 	bl	80062d4 <HAL_GPIO_ReadPin>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	4b0f      	ldr	r3, [pc, #60]	@ (80021d4 <MoveToPosXY+0x2a8>)
 8002196:	789b      	ldrb	r3, [r3, #2]
        	if(HAL_GPIO_ReadPin(moveXplus_port, moveXplus_pin) == CNC_pos.Lsw1 ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d101      	bne.n	80021a0 <MoveToPosXY+0x274>
        		handle_stop_button_press();
 800219c:	f002 f982 	bl	80044a4 <handle_stop_button_press>
        	}
        	osDelay(1);
 80021a0:	2001      	movs	r0, #1
 80021a2:	f008 fd69 	bl	800ac78 <osDelay>
        while (Stepper1.run_state != STOP || Stepper2.run_state != STOP) {
 80021a6:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <MoveToPosXY+0x2ac>)
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1e2      	bne.n	8002174 <MoveToPosXY+0x248>
 80021ae:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <MoveToPosXY+0x2b0>)
 80021b0:	785b      	ldrb	r3, [r3, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1de      	bne.n	8002174 <MoveToPosXY+0x248>
        }
        CNC.pos_x = x;
 80021b6:	4a05      	ldr	r2, [pc, #20]	@ (80021cc <MoveToPosXY+0x2a0>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	60d3      	str	r3, [r2, #12]
        CNC.pos_y = y;
 80021bc:	4a03      	ldr	r2, [pc, #12]	@ (80021cc <MoveToPosXY+0x2a0>)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6113      	str	r3, [r2, #16]
    }
}
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bdb0      	pop	{r4, r5, r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200006f0 	.word	0x200006f0
 80021d0:	43210000 	.word	0x43210000
 80021d4:	20000698 	.word	0x20000698
 80021d8:	200002ac 	.word	0x200002ac
 80021dc:	200002e4 	.word	0x200002e4
 80021e0:	40020800 	.word	0x40020800
 80021e4:	40020400 	.word	0x40020400

080021e8 <MoveToPosZ>:
// Move Z
void MoveToPosZ(float z) {
 80021e8:	b5b0      	push	{r4, r5, r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	ed87 0a01 	vstr	s0, [r7, #4]
    trans_to_posZ(z);
 80021f2:	ed97 0a01 	vldr	s0, [r7, #4]
 80021f6:	f7ff f9e7 	bl	80015c8 <trans_to_posZ>
    CNC_pos.MoveZ = caculate_pos(CNC.set_posZ, 161);
 80021fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002368 <MoveToPosZ+0x180>)
 80021fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002200:	eddf 0a5a 	vldr	s1, [pc, #360]	@ 800236c <MoveToPosZ+0x184>
 8002204:	eeb0 0a67 	vmov.f32	s0, s15
 8002208:	f7ff f9f6 	bl	80015f8 <caculate_pos>
 800220c:	ee07 0a90 	vmov	s15, r0
 8002210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002214:	4b56      	ldr	r3, [pc, #344]	@ (8002370 <MoveToPosZ+0x188>)
 8002216:	edc3 7a07 	vstr	s15, [r3, #28]
    int step_max = max3(abs(CNC_pos.MoveX), abs(CNC_pos.MoveY), abs(CNC_pos.MoveZ));
 800221a:	4b55      	ldr	r3, [pc, #340]	@ (8002370 <MoveToPosZ+0x188>)
 800221c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002224:	ee17 3a90 	vmov	r3, s15
 8002228:	2b00      	cmp	r3, #0
 800222a:	bfb8      	it	lt
 800222c:	425b      	neglt	r3, r3
 800222e:	4a50      	ldr	r2, [pc, #320]	@ (8002370 <MoveToPosZ+0x188>)
 8002230:	edd2 7a06 	vldr	s15, [r2, #24]
 8002234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002238:	ee17 2a90 	vmov	r2, s15
 800223c:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8002240:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8002244:	4a4a      	ldr	r2, [pc, #296]	@ (8002370 <MoveToPosZ+0x188>)
 8002246:	edd2 7a07 	vldr	s15, [r2, #28]
 800224a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800224e:	ee17 2a90 	vmov	r2, s15
 8002252:	2a00      	cmp	r2, #0
 8002254:	bfb8      	it	lt
 8002256:	4252      	neglt	r2, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fdbf 	bl	8001ddc <max3>
 800225e:	60f8      	str	r0, [r7, #12]
    float coef3 = fabs(CNC_pos.MoveZ) / step_max;
 8002260:	4b43      	ldr	r3, [pc, #268]	@ (8002370 <MoveToPosZ+0x188>)
 8002262:	edd3 7a07 	vldr	s15, [r3, #28]
 8002266:	eef0 7ae7 	vabs.f32	s15, s15
 800226a:	ee17 0a90 	vmov	r0, s15
 800226e:	f7fe f97b 	bl	8000568 <__aeabi_f2d>
 8002272:	4604      	mov	r4, r0
 8002274:	460d      	mov	r5, r1
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f7fe f964 	bl	8000544 <__aeabi_i2d>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4620      	mov	r0, r4
 8002282:	4629      	mov	r1, r5
 8002284:	f7fe faf2 	bl	800086c <__aeabi_ddiv>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4610      	mov	r0, r2
 800228e:	4619      	mov	r1, r3
 8002290:	f7fe fcba 	bl	8000c08 <__aeabi_d2f>
 8002294:	4603      	mov	r3, r0
 8002296:	60bb      	str	r3, [r7, #8]
    CNC_pos.pos3dot = CNC_pos.max_speedZ * coef3;
 8002298:	4b35      	ldr	r3, [pc, #212]	@ (8002370 <MoveToPosZ+0x188>)
 800229a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800229c:	ee07 3a90 	vmov	s15, r3
 80022a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80022a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022b0:	ee17 3a90 	vmov	r3, s15
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002370 <MoveToPosZ+0x188>)
 80022b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    CNC_pos.accel3 = CNC_pos.a_maxZ * coef3;
 80022ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002370 <MoveToPosZ+0x188>)
 80022bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80022c0:	ee07 3a90 	vmov	s15, r3
 80022c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80022cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022d4:	ee17 3a90 	vmov	r3, s15
 80022d8:	b29a      	uxth	r2, r3
 80022da:	4b25      	ldr	r3, [pc, #148]	@ (8002370 <MoveToPosZ+0x188>)
 80022dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    CNC_pos.jerk3 = CNC_pos.j_maxZ * coef3;
 80022de:	4b24      	ldr	r3, [pc, #144]	@ (8002370 <MoveToPosZ+0x188>)
 80022e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80022e4:	ee07 3a90 	vmov	s15, r3
 80022e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80022f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f8:	ee17 3a90 	vmov	r3, s15
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002370 <MoveToPosZ+0x188>)
 8002300:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (Stepper3.run_state != 1) {
 8002302:	4b1c      	ldr	r3, [pc, #112]	@ (8002374 <MoveToPosZ+0x18c>)
 8002304:	785b      	ldrb	r3, [r3, #1]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d02a      	beq.n	8002360 <MoveToPosZ+0x178>
        Accel_Stepper_Move(&Stepper3, CNC_pos.MoveZ, CNC_pos.accel3, CNC_pos.jerk3, CNC_pos.pos3dot);
 800230a:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <MoveToPosZ+0x188>)
 800230c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002314:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <MoveToPosZ+0x188>)
 8002316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002318:	461a      	mov	r2, r3
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <MoveToPosZ+0x188>)
 800231c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800231e:	4619      	mov	r1, r3
 8002320:	4b13      	ldr	r3, [pc, #76]	@ (8002370 <MoveToPosZ+0x188>)
 8002322:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	460b      	mov	r3, r1
 8002328:	ee17 1a90 	vmov	r1, s15
 800232c:	4811      	ldr	r0, [pc, #68]	@ (8002374 <MoveToPosZ+0x18c>)
 800232e:	f7fe ffa3 	bl	8001278 <Accel_Stepper_Move>
        while(Stepper3.run_state != STOP){
 8002332:	e00e      	b.n	8002352 <MoveToPosZ+0x16a>
        	if(HAL_GPIO_ReadPin(moveZplus_port, moveZplus_pin) ==  CNC_pos.Lsw5){
 8002334:	2180      	movs	r1, #128	@ 0x80
 8002336:	4810      	ldr	r0, [pc, #64]	@ (8002378 <MoveToPosZ+0x190>)
 8002338:	f003 ffcc 	bl	80062d4 <HAL_GPIO_ReadPin>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <MoveToPosZ+0x188>)
 8002342:	791b      	ldrb	r3, [r3, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	d101      	bne.n	800234c <MoveToPosZ+0x164>
        		handle_stop_button_press();
 8002348:	f002 f8ac 	bl	80044a4 <handle_stop_button_press>
        	}
			osDelay(1);
 800234c:	2001      	movs	r0, #1
 800234e:	f008 fc93 	bl	800ac78 <osDelay>
        while(Stepper3.run_state != STOP){
 8002352:	4b08      	ldr	r3, [pc, #32]	@ (8002374 <MoveToPosZ+0x18c>)
 8002354:	785b      	ldrb	r3, [r3, #1]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1ec      	bne.n	8002334 <MoveToPosZ+0x14c>
		}
        CNC.pos_z = z;
 800235a:	4a03      	ldr	r2, [pc, #12]	@ (8002368 <MoveToPosZ+0x180>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6153      	str	r3, [r2, #20]
    }
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bdb0      	pop	{r4, r5, r7, pc}
 8002368:	200006f0 	.word	0x200006f0
 800236c:	43210000 	.word	0x43210000
 8002370:	20000698 	.word	0x20000698
 8002374:	2000031c 	.word	0x2000031c
 8002378:	40021000 	.word	0x40021000

0800237c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af02      	add	r7, sp, #8
 8002382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HOME();
 8002384:	f7ff fd5e 	bl	8001e44 <HOME>
  initializeCNC_pos(&CNC_pos);
 8002388:	4821      	ldr	r0, [pc, #132]	@ (8002410 <StartDefaultTask+0x94>)
 800238a:	f7ff f899 	bl	80014c0 <initializeCNC_pos>
  Accel_Stepper_SetPin(&Stepper1, step_1_GPIO_Port, step_1_pin, dir_1_GPIO_Port, dir_1_pin);
 800238e:	2302      	movs	r3, #2
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <StartDefaultTask+0x98>)
 8002394:	2201      	movs	r2, #1
 8002396:	491f      	ldr	r1, [pc, #124]	@ (8002414 <StartDefaultTask+0x98>)
 8002398:	481f      	ldr	r0, [pc, #124]	@ (8002418 <StartDefaultTask+0x9c>)
 800239a:	f7fe fe33 	bl	8001004 <Accel_Stepper_SetPin>
  Accel_Stepper_SetPin(&Stepper2, step_2_GPIO_Port, step_2_pin, dir_2_GPIO_Port, dir_2_pin);
 800239e:	2308      	movs	r3, #8
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <StartDefaultTask+0x98>)
 80023a4:	2204      	movs	r2, #4
 80023a6:	491b      	ldr	r1, [pc, #108]	@ (8002414 <StartDefaultTask+0x98>)
 80023a8:	481c      	ldr	r0, [pc, #112]	@ (800241c <StartDefaultTask+0xa0>)
 80023aa:	f7fe fe2b 	bl	8001004 <Accel_Stepper_SetPin>
  Accel_Stepper_SetPin(&Stepper3, step_3_GPIO_Port, step_3_pin, dir_3_GPIO_Port, dir_3_pin);
 80023ae:	2320      	movs	r3, #32
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <StartDefaultTask+0x98>)
 80023b4:	2210      	movs	r2, #16
 80023b6:	4917      	ldr	r1, [pc, #92]	@ (8002414 <StartDefaultTask+0x98>)
 80023b8:	4819      	ldr	r0, [pc, #100]	@ (8002420 <StartDefaultTask+0xa4>)
 80023ba:	f7fe fe23 	bl	8001004 <Accel_Stepper_SetPin>

  Accel_Stepper_SetTimer(&Stepper1, &htim2);
 80023be:	4919      	ldr	r1, [pc, #100]	@ (8002424 <StartDefaultTask+0xa8>)
 80023c0:	4815      	ldr	r0, [pc, #84]	@ (8002418 <StartDefaultTask+0x9c>)
 80023c2:	f7fe fe39 	bl	8001038 <Accel_Stepper_SetTimer>
  Accel_Stepper_SetTimer(&Stepper2, &htim3);
 80023c6:	4918      	ldr	r1, [pc, #96]	@ (8002428 <StartDefaultTask+0xac>)
 80023c8:	4814      	ldr	r0, [pc, #80]	@ (800241c <StartDefaultTask+0xa0>)
 80023ca:	f7fe fe35 	bl	8001038 <Accel_Stepper_SetTimer>
  Accel_Stepper_SetTimer(&Stepper3, &htim4);
 80023ce:	4917      	ldr	r1, [pc, #92]	@ (800242c <StartDefaultTask+0xb0>)
 80023d0:	4813      	ldr	r0, [pc, #76]	@ (8002420 <StartDefaultTask+0xa4>)
 80023d2:	f7fe fe31 	bl	8001038 <Accel_Stepper_SetTimer>

  CNC.pos_x = 0;
 80023d6:	4b16      	ldr	r3, [pc, #88]	@ (8002430 <StartDefaultTask+0xb4>)
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  CNC.pos_y = 0;
 80023de:	4b14      	ldr	r3, [pc, #80]	@ (8002430 <StartDefaultTask+0xb4>)
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
  CNC.pos_z = 0;
 80023e6:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <StartDefaultTask+0xb4>)
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	615a      	str	r2, [r3, #20]

  //vTaskDelay(pdMS_TO_TICKS(2000));
  /* Infinite loop */
  for(;;)
  {
      if (state.start_press) {
 80023ee:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <StartDefaultTask+0xb8>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <StartDefaultTask+0x8c>
    	  HAL_GPIO_WritePin(drill_port, drill_pin, 1);
 80023f8:	2201      	movs	r2, #1
 80023fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023fe:	480e      	ldr	r0, [pc, #56]	@ (8002438 <StartDefaultTask+0xbc>)
 8002400:	f003 ff80 	bl	8006304 <HAL_GPIO_WritePin>
          move_to_coordinates();
 8002404:	f7ff fb88 	bl	8001b18 <move_to_coordinates>
      }

    osDelay(1);
 8002408:	2001      	movs	r0, #1
 800240a:	f008 fc35 	bl	800ac78 <osDelay>
      if (state.start_press) {
 800240e:	e7ee      	b.n	80023ee <StartDefaultTask+0x72>
 8002410:	20000698 	.word	0x20000698
 8002414:	40020000 	.word	0x40020000
 8002418:	200002ac 	.word	0x200002ac
 800241c:	200002e4 	.word	0x200002e4
 8002420:	2000031c 	.word	0x2000031c
 8002424:	20000918 	.word	0x20000918
 8002428:	20000960 	.word	0x20000960
 800242c:	200009a8 	.word	0x200009a8
 8002430:	200006f0 	.word	0x200006f0
 8002434:	200008c8 	.word	0x200008c8
 8002438:	40020400 	.word	0x40020400

0800243c <StartADC>:
* @retval None
*/

/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
  /* Infinite loop */
  //HAL_ADC_Start	_DMA(&hadc1, (uint32_t*)LCD_adc.readValue, 2);
  for(;;)
  {
	startADC();
 8002444:	f000 ff8a 	bl	800335c <startADC>
    osDelay(1);
 8002448:	2001      	movs	r0, #1
 800244a:	f008 fc15 	bl	800ac78 <osDelay>
	startADC();
 800244e:	bf00      	nop
 8002450:	e7f8      	b.n	8002444 <StartADC+0x8>
	...

08002454 <StartLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD */
void StartLCD(void *argument)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD */
  /* Infinite loop */
  initialize_LCD(&LCD_adc);
 800245c:	4808      	ldr	r0, [pc, #32]	@ (8002480 <StartLCD+0x2c>)
 800245e:	f000 fbd9 	bl	8002c14 <initialize_LCD>
  initialize_Kalman(&kalman_fil_curr);
 8002462:	4808      	ldr	r0, [pc, #32]	@ (8002484 <StartLCD+0x30>)
 8002464:	f000 fc02 	bl	8002c6c <initialize_Kalman>
  initialize_Kalman(&kalman_fil_volt);
 8002468:	4807      	ldr	r0, [pc, #28]	@ (8002488 <StartLCD+0x34>)
 800246a:	f000 fbff 	bl	8002c6c <initialize_Kalman>
  display_menu();
 800246e:	f001 f835 	bl	80034dc <display_menu>
  for(;;)
  {
	ButtonTask();
 8002472:	f001 fd2d 	bl	8003ed0 <ButtonTask>
    osDelay(1);
 8002476:	2001      	movs	r0, #1
 8002478:	f008 fbfe 	bl	800ac78 <osDelay>
	ButtonTask();
 800247c:	bf00      	nop
 800247e:	e7f8      	b.n	8002472 <StartLCD+0x1e>
 8002480:	2000075c 	.word	0x2000075c
 8002484:	20000828 	.word	0x20000828
 8002488:	20000878 	.word	0x20000878

0800248c <StartUART_TX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_TX */
void StartUART_TX(void *argument)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART_TX */
  /* Infinite loop */
  UART_transmit_init();
 8002494:	f7ff f9e0 	bl	8001858 <UART_transmit_init>
  for(;;)
  {
    osDelay(1000);  // Delay 1000 milliseconds (1 second)
 8002498:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800249c:	f008 fbec 	bl	800ac78 <osDelay>
    send_uart_data();  // Send data every second
 80024a0:	f7ff f9e0 	bl	8001864 <send_uart_data>
    osDelay(1000);  // Delay 1000 milliseconds (1 second)
 80024a4:	bf00      	nop
 80024a6:	e7f7      	b.n	8002498 <StartUART_TX+0xc>

080024a8 <StartUART_RX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_RX */

void StartUART_RX(void *argument) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartUART_RX */
    /* Initialize UART receive in DMA mode */
    UART_RECEIVE_Init();
 80024b0:	f7ff fa0e 	bl	80018d0 <UART_RECEIVE_Init>
    /* Infinite loop */
    for(;;)
    {
        if (osSemaphoreAcquire(uartRxSemaphoreHandle, osWaitForever) == osOK) {
 80024b4:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <StartUART_RX+0x2c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295
 80024bc:	4618      	mov	r0, r3
 80024be:	f008 fd8d 	bl	800afdc <osSemaphoreAcquire>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <StartUART_RX+0x24>
            UART_rx_process();
 80024c8:	f7ff fba4 	bl	8001c14 <UART_rx_process>
        }
        osDelay(1);
 80024cc:	2001      	movs	r0, #1
 80024ce:	f008 fbd3 	bl	800ac78 <osDelay>
        if (osSemaphoreAcquire(uartRxSemaphoreHandle, osWaitForever) == osOK) {
 80024d2:	e7ef      	b.n	80024b4 <StartUART_RX+0xc>
 80024d4:	20000680 	.word	0x20000680

080024d8 <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  lcdMutexHandle = osMutexNew(&lcdMutex_attributes);
 80024dc:	481b      	ldr	r0, [pc, #108]	@ (800254c <MX_FREERTOS_Init+0x74>)
 80024de:	f008 fbe6 	bl	800acae <osMutexNew>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002550 <MX_FREERTOS_Init+0x78>)
 80024e6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  uartRxSemaphoreHandle = osSemaphoreNew(1, 1, &uartRxSemaphore_attributes);
 80024e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002554 <MX_FREERTOS_Init+0x7c>)
 80024ea:	2101      	movs	r1, #1
 80024ec:	2001      	movs	r0, #1
 80024ee:	f008 fcec 	bl	800aeca <osSemaphoreNew>
 80024f2:	4603      	mov	r3, r0
 80024f4:	4a18      	ldr	r2, [pc, #96]	@ (8002558 <MX_FREERTOS_Init+0x80>)
 80024f6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80024f8:	4a18      	ldr	r2, [pc, #96]	@ (800255c <MX_FREERTOS_Init+0x84>)
 80024fa:	2100      	movs	r1, #0
 80024fc:	4818      	ldr	r0, [pc, #96]	@ (8002560 <MX_FREERTOS_Init+0x88>)
 80024fe:	f008 fb29 	bl	800ab54 <osThreadNew>
 8002502:	4603      	mov	r3, r0
 8002504:	4a17      	ldr	r2, [pc, #92]	@ (8002564 <MX_FREERTOS_Init+0x8c>)
 8002506:	6013      	str	r3, [r2, #0]

  /* creation of startADC */
  startADCHandle = osThreadNew(StartADC, NULL, &startADC_attributes);
 8002508:	4a17      	ldr	r2, [pc, #92]	@ (8002568 <MX_FREERTOS_Init+0x90>)
 800250a:	2100      	movs	r1, #0
 800250c:	4817      	ldr	r0, [pc, #92]	@ (800256c <MX_FREERTOS_Init+0x94>)
 800250e:	f008 fb21 	bl	800ab54 <osThreadNew>
 8002512:	4603      	mov	r3, r0
 8002514:	4a16      	ldr	r2, [pc, #88]	@ (8002570 <MX_FREERTOS_Init+0x98>)
 8002516:	6013      	str	r3, [r2, #0]

  /* creation of startLCD */
  startLCDHandle = osThreadNew(StartLCD, NULL, &startLCD_attributes);
 8002518:	4a16      	ldr	r2, [pc, #88]	@ (8002574 <MX_FREERTOS_Init+0x9c>)
 800251a:	2100      	movs	r1, #0
 800251c:	4816      	ldr	r0, [pc, #88]	@ (8002578 <MX_FREERTOS_Init+0xa0>)
 800251e:	f008 fb19 	bl	800ab54 <osThreadNew>
 8002522:	4603      	mov	r3, r0
 8002524:	4a15      	ldr	r2, [pc, #84]	@ (800257c <MX_FREERTOS_Init+0xa4>)
 8002526:	6013      	str	r3, [r2, #0]

  /* creation of startUART_TX */
  startUART_TXHandle = osThreadNew(StartUART_TX, NULL, &startUART_TX_attributes);
 8002528:	4a15      	ldr	r2, [pc, #84]	@ (8002580 <MX_FREERTOS_Init+0xa8>)
 800252a:	2100      	movs	r1, #0
 800252c:	4815      	ldr	r0, [pc, #84]	@ (8002584 <MX_FREERTOS_Init+0xac>)
 800252e:	f008 fb11 	bl	800ab54 <osThreadNew>
 8002532:	4603      	mov	r3, r0
 8002534:	4a14      	ldr	r2, [pc, #80]	@ (8002588 <MX_FREERTOS_Init+0xb0>)
 8002536:	6013      	str	r3, [r2, #0]

  /* creation of startUART_RX */
  startUART_RXHandle = osThreadNew(StartUART_RX, NULL, &startUART_RX_attributes);
 8002538:	4a14      	ldr	r2, [pc, #80]	@ (800258c <MX_FREERTOS_Init+0xb4>)
 800253a:	2100      	movs	r1, #0
 800253c:	4814      	ldr	r0, [pc, #80]	@ (8002590 <MX_FREERTOS_Init+0xb8>)
 800253e:	f008 fb09 	bl	800ab54 <osThreadNew>
 8002542:	4603      	mov	r3, r0
 8002544:	4a13      	ldr	r2, [pc, #76]	@ (8002594 <MX_FREERTOS_Init+0xbc>)
 8002546:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	080147a4 	.word	0x080147a4
 8002550:	2000067c 	.word	0x2000067c
 8002554:	080147b4 	.word	0x080147b4
 8002558:	20000680 	.word	0x20000680
 800255c:	080147c4 	.word	0x080147c4
 8002560:	0800237d 	.word	0x0800237d
 8002564:	20000684 	.word	0x20000684
 8002568:	080147e8 	.word	0x080147e8
 800256c:	0800243d 	.word	0x0800243d
 8002570:	20000688 	.word	0x20000688
 8002574:	0801480c 	.word	0x0801480c
 8002578:	08002455 	.word	0x08002455
 800257c:	2000068c 	.word	0x2000068c
 8002580:	08014830 	.word	0x08014830
 8002584:	0800248d 	.word	0x0800248d
 8002588:	20000690 	.word	0x20000690
 800258c:	08014854 	.word	0x08014854
 8002590:	080024a9 	.word	0x080024a9
 8002594:	20000694 	.word	0x20000694

08002598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	@ 0x30
 800259c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	60da      	str	r2, [r3, #12]
 80025ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	4b7c      	ldr	r3, [pc, #496]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	4a7b      	ldr	r2, [pc, #492]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 80025b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025be:	4b79      	ldr	r3, [pc, #484]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	4b75      	ldr	r3, [pc, #468]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	4a74      	ldr	r2, [pc, #464]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025da:	4b72      	ldr	r3, [pc, #456]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	4b6e      	ldr	r3, [pc, #440]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	4a6d      	ldr	r2, [pc, #436]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f6:	4b6b      	ldr	r3, [pc, #428]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b67      	ldr	r3, [pc, #412]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	4a66      	ldr	r2, [pc, #408]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	6313      	str	r3, [r2, #48]	@ 0x30
 8002612:	4b64      	ldr	r3, [pc, #400]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	4b60      	ldr	r3, [pc, #384]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	4a5f      	ldr	r2, [pc, #380]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 8002628:	f043 0310 	orr.w	r3, r3, #16
 800262c:	6313      	str	r3, [r2, #48]	@ 0x30
 800262e:	4b5d      	ldr	r3, [pc, #372]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	4b59      	ldr	r3, [pc, #356]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	4a58      	ldr	r2, [pc, #352]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 8002644:	f043 0308 	orr.w	r3, r3, #8
 8002648:	6313      	str	r3, [r2, #48]	@ 0x30
 800264a:	4b56      	ldr	r3, [pc, #344]	@ (80027a4 <MX_GPIO_Init+0x20c>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, step_1_pin|dir_1_pin|step_2_pin|dir_2_pin
 8002656:	2200      	movs	r2, #0
 8002658:	213f      	movs	r1, #63	@ 0x3f
 800265a:	4853      	ldr	r0, [pc, #332]	@ (80027a8 <MX_GPIO_Init+0x210>)
 800265c:	f003 fe52 	bl	8006304 <HAL_GPIO_WritePin>
                          |step_3_pin|dir_3_pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, led1_pin|led2_pin, GPIO_PIN_RESET);
 8002660:	2200      	movs	r2, #0
 8002662:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8002666:	4851      	ldr	r0, [pc, #324]	@ (80027ac <MX_GPIO_Init+0x214>)
 8002668:	f003 fe4c 	bl	8006304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led3_pin|drill_pin, GPIO_PIN_RESET);
 800266c:	2200      	movs	r2, #0
 800266e:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8002672:	484f      	ldr	r0, [pc, #316]	@ (80027b0 <MX_GPIO_Init+0x218>)
 8002674:	f003 fe46 	bl	8006304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 */
  GPIO_InitStruct.Pin = step_1_pin|dir_1_pin|step_2_pin|dir_2_pin
 8002678:	233f      	movs	r3, #63	@ 0x3f
 800267a:	61fb      	str	r3, [r7, #28]
                          |step_3_pin|dir_3_pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267c:	2301      	movs	r3, #1
 800267e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2300      	movs	r3, #0
 8002686:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	4619      	mov	r1, r3
 800268e:	4846      	ldr	r0, [pc, #280]	@ (80027a8 <MX_GPIO_Init+0x210>)
 8002690:	f003 fc84 	bl	8005f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = backKey|start_pin;
 8002694:	23c0      	movs	r3, #192	@ 0xc0
 8002696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002698:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800269c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800269e:	2301      	movs	r3, #1
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a2:	f107 031c 	add.w	r3, r7, #28
 80026a6:	4619      	mov	r1, r3
 80026a8:	483f      	ldr	r0, [pc, #252]	@ (80027a8 <MX_GPIO_Init+0x210>)
 80026aa:	f003 fc77 	bl	8005f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = downKey;
 80026ae:	2310      	movs	r3, #16
 80026b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80026b2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80026b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b8:	2301      	movs	r3, #1
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026bc:	f107 031c 	add.w	r3, r7, #28
 80026c0:	4619      	mov	r1, r3
 80026c2:	483c      	ldr	r0, [pc, #240]	@ (80027b4 <MX_GPIO_Init+0x21c>)
 80026c4:	f003 fc6a 	bl	8005f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = moveXplus_pin;
 80026c8:	2320      	movs	r3, #32
 80026ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026cc:	2300      	movs	r3, #0
 80026ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026d0:	2301      	movs	r3, #1
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d4:	f107 031c 	add.w	r3, r7, #28
 80026d8:	4619      	mov	r1, r3
 80026da:	4836      	ldr	r0, [pc, #216]	@ (80027b4 <MX_GPIO_Init+0x21c>)
 80026dc:	f003 fc5e 	bl	8005f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = moveXsub_pin|moveYplus_pin|moveYsub_pin|GPIO_PIN_12;
 80026e0:	f241 0307 	movw	r3, #4103	@ 0x1007
 80026e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e6:	2300      	movs	r3, #0
 80026e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ea:	2301      	movs	r3, #1
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	4619      	mov	r1, r3
 80026f4:	482e      	ldr	r0, [pc, #184]	@ (80027b0 <MX_GPIO_Init+0x218>)
 80026f6:	f003 fc51 	bl	8005f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = moveZplus_pin|moveZsub_pin;
 80026fa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80026fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002700:	2300      	movs	r3, #0
 8002702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002704:	2301      	movs	r3, #1
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	4619      	mov	r1, r3
 800270e:	4827      	ldr	r0, [pc, #156]	@ (80027ac <MX_GPIO_Init+0x214>)
 8002710:	f003 fc44 	bl	8005f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE11 PE12 */
  GPIO_InitStruct.Pin = stop_pin|upKey|resetKey|selectKey;
 8002714:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8002718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800271a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800271e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002720:	2301      	movs	r3, #1
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002724:	f107 031c 	add.w	r3, r7, #28
 8002728:	4619      	mov	r1, r3
 800272a:	4820      	ldr	r0, [pc, #128]	@ (80027ac <MX_GPIO_Init+0x214>)
 800272c:	f003 fc36 	bl	8005f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE15 */
  GPIO_InitStruct.Pin = led1_pin|led2_pin;
 8002730:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002736:	2301      	movs	r3, #1
 8002738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273e:	2300      	movs	r3, #0
 8002740:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002742:	f107 031c 	add.w	r3, r7, #28
 8002746:	4619      	mov	r1, r3
 8002748:	4818      	ldr	r0, [pc, #96]	@ (80027ac <MX_GPIO_Init+0x214>)
 800274a:	f003 fc27 	bl	8005f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 */
  GPIO_InitStruct.Pin = led3_pin|drill_pin;
 800274e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002754:	2301      	movs	r3, #1
 8002756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275c:	2300      	movs	r3, #0
 800275e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002760:	f107 031c 	add.w	r3, r7, #28
 8002764:	4619      	mov	r1, r3
 8002766:	4812      	ldr	r0, [pc, #72]	@ (80027b0 <MX_GPIO_Init+0x218>)
 8002768:	f003 fc18 	bl	8005f9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	2105      	movs	r1, #5
 8002770:	200a      	movs	r0, #10
 8002772:	f003 fb3c 	bl	8005dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002776:	200a      	movs	r0, #10
 8002778:	f003 fb55 	bl	8005e26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800277c:	2200      	movs	r2, #0
 800277e:	2105      	movs	r1, #5
 8002780:	2017      	movs	r0, #23
 8002782:	f003 fb34 	bl	8005dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002786:	2017      	movs	r0, #23
 8002788:	f003 fb4d 	bl	8005e26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800278c:	2200      	movs	r2, #0
 800278e:	2105      	movs	r1, #5
 8002790:	2028      	movs	r0, #40	@ 0x28
 8002792:	f003 fb2c 	bl	8005dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002796:	2028      	movs	r0, #40	@ 0x28
 8002798:	f003 fb45 	bl	8005e26 <HAL_NVIC_EnableIRQ>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800279c:	bf00      	nop
 800279e:	3730      	adds	r7, #48	@ 0x30
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40020400 	.word	0x40020400
 80027b4:	40020800 	.word	0x40020800

080027b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027bc:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <MX_I2C1_Init+0x50>)
 80027be:	4a13      	ldr	r2, [pc, #76]	@ (800280c <MX_I2C1_Init+0x54>)
 80027c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80027c2:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <MX_I2C1_Init+0x50>)
 80027c4:	4a12      	ldr	r2, [pc, #72]	@ (8002810 <MX_I2C1_Init+0x58>)
 80027c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002808 <MX_I2C1_Init+0x50>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80027ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002808 <MX_I2C1_Init+0x50>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002808 <MX_I2C1_Init+0x50>)
 80027d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002808 <MX_I2C1_Init+0x50>)
 80027de:	2200      	movs	r2, #0
 80027e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027e2:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <MX_I2C1_Init+0x50>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027e8:	4b07      	ldr	r3, [pc, #28]	@ (8002808 <MX_I2C1_Init+0x50>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <MX_I2C1_Init+0x50>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027f4:	4804      	ldr	r0, [pc, #16]	@ (8002808 <MX_I2C1_Init+0x50>)
 80027f6:	f003 fdd1 	bl	800639c <HAL_I2C_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002800:	f000 fa02 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000708 	.word	0x20000708
 800280c:	40005400 	.word	0x40005400
 8002810:	000186a0 	.word	0x000186a0

08002814 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	@ 0x28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a21      	ldr	r2, [pc, #132]	@ (80028b8 <HAL_I2C_MspInit+0xa4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d13b      	bne.n	80028ae <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	4b20      	ldr	r3, [pc, #128]	@ (80028bc <HAL_I2C_MspInit+0xa8>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	4a1f      	ldr	r2, [pc, #124]	@ (80028bc <HAL_I2C_MspInit+0xa8>)
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	6313      	str	r3, [r2, #48]	@ 0x30
 8002846:	4b1d      	ldr	r3, [pc, #116]	@ (80028bc <HAL_I2C_MspInit+0xa8>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002852:	23c0      	movs	r3, #192	@ 0xc0
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002856:	2312      	movs	r3, #18
 8002858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285e:	2303      	movs	r3, #3
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002862:	2304      	movs	r3, #4
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	4814      	ldr	r0, [pc, #80]	@ (80028c0 <HAL_I2C_MspInit+0xac>)
 800286e:	f003 fb95 	bl	8005f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b11      	ldr	r3, [pc, #68]	@ (80028bc <HAL_I2C_MspInit+0xa8>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	4a10      	ldr	r2, [pc, #64]	@ (80028bc <HAL_I2C_MspInit+0xa8>)
 800287c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002880:	6413      	str	r3, [r2, #64]	@ 0x40
 8002882:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <HAL_I2C_MspInit+0xa8>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2105      	movs	r1, #5
 8002892:	201f      	movs	r0, #31
 8002894:	f003 faab 	bl	8005dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002898:	201f      	movs	r0, #31
 800289a:	f003 fac4 	bl	8005e26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2105      	movs	r1, #5
 80028a2:	2020      	movs	r0, #32
 80028a4:	f003 faa3 	bl	8005dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80028a8:	2020      	movs	r0, #32
 80028aa:	f003 fabc 	bl	8005e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028ae:	bf00      	nop
 80028b0:	3728      	adds	r7, #40	@ 0x28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40005400 	.word	0x40005400
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020400 	.word	0x40020400

080028c4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // Change your handler here accordingly
#define SLAVE_ADDRESS_LCD 0x4E    // Change this according to your setup
extern osMutexId_t lcdMutexHandle;
extern osSemaphoreId_t uartRxSemaphoreHandle;

void lcd_send_cmd(char cmd) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xF0);
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	f023 030f 	bic.w	r3, r3, #15
 80028d4:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xF0);
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C;  // EN=1, RS=0
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	f043 030c 	orr.w	r3, r3, #12
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;  // EN=0, RS=0
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	f043 0308 	orr.w	r3, r3, #8
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C;  // EN=1, RS=0
 80028f0:	7bbb      	ldrb	r3, [r7, #14]
 80028f2:	f043 030c 	orr.w	r3, r3, #12
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;  // EN=0, RS=0
 80028fa:	7bbb      	ldrb	r3, [r7, #14]
 80028fc:	f043 0308 	orr.w	r3, r3, #8
 8002900:	b2db      	uxtb	r3, r3
 8002902:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8002904:	f107 0208 	add.w	r2, r7, #8
 8002908:	2364      	movs	r3, #100	@ 0x64
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2304      	movs	r3, #4
 800290e:	214e      	movs	r1, #78	@ 0x4e
 8002910:	4803      	ldr	r0, [pc, #12]	@ (8002920 <lcd_send_cmd+0x5c>)
 8002912:	f003 fe9d 	bl	8006650 <HAL_I2C_Master_Transmit>
}
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000708 	.word	0x20000708

08002924 <lcd_send_data>:

void lcd_send_data(char data) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af02      	add	r7, sp, #8
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xF0);
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	f023 030f 	bic.w	r3, r3, #15
 8002934:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xF0);
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D;  // EN=1, RS=1
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	f043 030d 	orr.w	r3, r3, #13
 8002942:	b2db      	uxtb	r3, r3
 8002944:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  // EN=0, RS=1
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	f043 0309 	orr.w	r3, r3, #9
 800294c:	b2db      	uxtb	r3, r3
 800294e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  // EN=1, RS=1
 8002950:	7bbb      	ldrb	r3, [r7, #14]
 8002952:	f043 030d 	orr.w	r3, r3, #13
 8002956:	b2db      	uxtb	r3, r3
 8002958:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  // EN=0, RS=1
 800295a:	7bbb      	ldrb	r3, [r7, #14]
 800295c:	f043 0309 	orr.w	r3, r3, #9
 8002960:	b2db      	uxtb	r3, r3
 8002962:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8002964:	f107 0208 	add.w	r2, r7, #8
 8002968:	2364      	movs	r3, #100	@ 0x64
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	2304      	movs	r3, #4
 800296e:	214e      	movs	r1, #78	@ 0x4e
 8002970:	4803      	ldr	r0, [pc, #12]	@ (8002980 <lcd_send_data+0x5c>)
 8002972:	f003 fe6d 	bl	8006650 <HAL_I2C_Master_Transmit>
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000708 	.word	0x20000708

08002984 <lcd_clear>:

void lcd_clear(void) {
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
    osMutexAcquire(lcdMutexHandle, osWaitForever);
 8002988:	4b09      	ldr	r3, [pc, #36]	@ (80029b0 <lcd_clear+0x2c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f04f 31ff 	mov.w	r1, #4294967295
 8002990:	4618      	mov	r0, r3
 8002992:	f008 fa12 	bl	800adba <osMutexAcquire>
    lcd_send_cmd(0x01);  // Clear display
 8002996:	2001      	movs	r0, #1
 8002998:	f7ff ff94 	bl	80028c4 <lcd_send_cmd>
    HAL_Delay(2);        // Delay for clearing
 800299c:	2002      	movs	r0, #2
 800299e:	f002 fbef 	bl	8005180 <HAL_Delay>
    osMutexRelease(lcdMutexHandle);
 80029a2:	4b03      	ldr	r3, [pc, #12]	@ (80029b0 <lcd_clear+0x2c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f008 fa52 	bl	800ae50 <osMutexRelease>
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	2000067c 	.word	0x2000067c

080029b4 <lcd_put_cur>:

void lcd_put_cur(int row, int col) {
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
    int row_offsets[] = {0x00, 0x40, 0x14, 0x54}; // Line offsets for 20x04 LCD
 80029be:	4b0e      	ldr	r3, [pc, #56]	@ (80029f8 <lcd_put_cur+0x44>)
 80029c0:	f107 0408 	add.w	r4, r7, #8
 80029c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lcd_send_cmd(0x80 | (col + row_offsets[row])); // Set DDRAM address
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	3318      	adds	r3, #24
 80029d0:	443b      	add	r3, r7
 80029d2:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	4413      	add	r3, r2
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029e6:	b25b      	sxtb	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff6a 	bl	80028c4 <lcd_send_cmd>
}
 80029f0:	bf00      	nop
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}
 80029f8:	08014550 	.word	0x08014550

080029fc <lcd_init>:

void lcd_init(void) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
    HAL_Delay(50);        // Wait for >40ms
 8002a00:	2032      	movs	r0, #50	@ 0x32
 8002a02:	f002 fbbd 	bl	8005180 <HAL_Delay>
    lcd_send_cmd(0x33);   // Initialization sequence for 4-bit mode
 8002a06:	2033      	movs	r0, #51	@ 0x33
 8002a08:	f7ff ff5c 	bl	80028c4 <lcd_send_cmd>
    HAL_Delay(5);         // Wait for >4.1ms
 8002a0c:	2005      	movs	r0, #5
 8002a0e:	f002 fbb7 	bl	8005180 <HAL_Delay>
    lcd_send_cmd(0x32);   // Initialization sequence for 4-bit mode
 8002a12:	2032      	movs	r0, #50	@ 0x32
 8002a14:	f7ff ff56 	bl	80028c4 <lcd_send_cmd>
    HAL_Delay(1);         // Wait for >100us
 8002a18:	2001      	movs	r0, #1
 8002a1a:	f002 fbb1 	bl	8005180 <HAL_Delay>

    // Display initialization
    lcd_send_cmd(0x28);   // Function set: DL=0 (4-bit mode), N=2 (2 lines), F=0 (5x8 dots)
 8002a1e:	2028      	movs	r0, #40	@ 0x28
 8002a20:	f7ff ff50 	bl	80028c4 <lcd_send_cmd>
    HAL_Delay(1);
 8002a24:	2001      	movs	r0, #1
 8002a26:	f002 fbab 	bl	8005180 <HAL_Delay>
    lcd_send_cmd(0x08);   // Display on/off control: D=0, C=0, B=0 (Display off)
 8002a2a:	2008      	movs	r0, #8
 8002a2c:	f7ff ff4a 	bl	80028c4 <lcd_send_cmd>
    HAL_Delay(1);
 8002a30:	2001      	movs	r0, #1
 8002a32:	f002 fba5 	bl	8005180 <HAL_Delay>
    lcd_send_cmd(0x01);   // Clear display
 8002a36:	2001      	movs	r0, #1
 8002a38:	f7ff ff44 	bl	80028c4 <lcd_send_cmd>
    HAL_Delay(2);
 8002a3c:	2002      	movs	r0, #2
 8002a3e:	f002 fb9f 	bl	8005180 <HAL_Delay>
    lcd_send_cmd(0x06);   // Entry mode set: I/D=1 (Increment), S=0 (No shift)
 8002a42:	2006      	movs	r0, #6
 8002a44:	f7ff ff3e 	bl	80028c4 <lcd_send_cmd>
    HAL_Delay(1);
 8002a48:	2001      	movs	r0, #1
 8002a4a:	f002 fb99 	bl	8005180 <HAL_Delay>
    lcd_send_cmd(0x0C);   // Display on/off control: D=1, C=0, B=0 (Display on, cursor off, blink off)
 8002a4e:	200c      	movs	r0, #12
 8002a50:	f7ff ff38 	bl	80028c4 <lcd_send_cmd>
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <lcd_send_string>:

void lcd_send_string(char *str) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
    osMutexAcquire(lcdMutexHandle, osWaitForever);
 8002a60:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <lcd_send_string+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f04f 31ff 	mov.w	r1, #4294967295
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f008 f9a6 	bl	800adba <osMutexAcquire>
    while (*str) {
 8002a6e:	e006      	b.n	8002a7e <lcd_send_string+0x26>
        lcd_send_data(*str++);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff53 	bl	8002924 <lcd_send_data>
    while (*str) {
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f4      	bne.n	8002a70 <lcd_send_string+0x18>
    }
    osMutexRelease(lcdMutexHandle);
 8002a86:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <lcd_send_string+0x40>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f008 f9e0 	bl	800ae50 <osMutexRelease>
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	2000067c 	.word	0x2000067c

08002a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aa0:	f002 fafc 	bl	800509c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aa4:	f000 f81c 	bl	8002ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002aa8:	f7ff fd76 	bl	8002598 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002aac:	f7fe fdbc 	bl	8001628 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002ab0:	f7ff fe82 	bl	80027b8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002ab4:	f001 ffc2 	bl	8004a3c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002ab8:	f002 f810 	bl	8004adc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002abc:	f002 f85a 	bl	8004b74 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002ac0:	f002 f8a6 	bl	8004c10 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002ac4:	f002 f8f2 	bl	8004cac <MX_TIM5_Init>
  MX_TIM6_Init();
 8002ac8:	f002 f93e 	bl	8004d48 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8002acc:	f002 fa2e 	bl	8004f2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002ad0:	f007 fff6 	bl	800aac0 <osKernelInitialize>

  MX_FREERTOS_Init();
 8002ad4:	f7ff fd00 	bl	80024d8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002ad8:	f008 f816 	bl	800ab08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <main+0x40>

08002ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b094      	sub	sp, #80	@ 0x50
 8002ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ae6:	f107 0320 	add.w	r3, r7, #32
 8002aea:	2230      	movs	r2, #48	@ 0x30
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f00c fd95 	bl	800f61e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002af4:	f107 030c 	add.w	r3, r7, #12
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	4b28      	ldr	r3, [pc, #160]	@ (8002bac <SystemClock_Config+0xcc>)
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	4a27      	ldr	r2, [pc, #156]	@ (8002bac <SystemClock_Config+0xcc>)
 8002b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b12:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b14:	4b25      	ldr	r3, [pc, #148]	@ (8002bac <SystemClock_Config+0xcc>)
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b20:	2300      	movs	r3, #0
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	4b22      	ldr	r3, [pc, #136]	@ (8002bb0 <SystemClock_Config+0xd0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a21      	ldr	r2, [pc, #132]	@ (8002bb0 <SystemClock_Config+0xd0>)
 8002b2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb0 <SystemClock_Config+0xd0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b46:	2302      	movs	r3, #2
 8002b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b50:	2304      	movs	r3, #4
 8002b52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002b54:	23a8      	movs	r3, #168	@ 0xa8
 8002b56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b60:	f107 0320 	add.w	r3, r7, #32
 8002b64:	4618      	mov	r0, r3
 8002b66:	f005 fdb9 	bl	80086dc <HAL_RCC_OscConfig>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002b70:	f000 f84a 	bl	8002c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b74:	230f      	movs	r3, #15
 8002b76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b80:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	2105      	movs	r1, #5
 8002b92:	4618      	mov	r0, r3
 8002b94:	f006 f81a 	bl	8008bcc <HAL_RCC_ClockConfig>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002b9e:	f000 f833 	bl	8002c08 <Error_Handler>
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3750      	adds	r7, #80	@ 0x50
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40007000 	.word	0x40007000

08002bb4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

	  if(htim->Instance == TIM2){
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc4:	d102      	bne.n	8002bcc <HAL_TIM_PeriodElapsedCallback+0x18>
		  Accel_Stepper_TIMIT_Handler(&Stepper1);
 8002bc6:	480b      	ldr	r0, [pc, #44]	@ (8002bf4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002bc8:	f7fe fa44 	bl	8001054 <Accel_Stepper_TIMIT_Handler>
	  }
	  if(htim->Instance == TIM3){
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a09      	ldr	r2, [pc, #36]	@ (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d102      	bne.n	8002bdc <HAL_TIM_PeriodElapsedCallback+0x28>
		  Accel_Stepper_TIMIT_Handler(&Stepper2);
 8002bd6:	4809      	ldr	r0, [pc, #36]	@ (8002bfc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002bd8:	f7fe fa3c 	bl	8001054 <Accel_Stepper_TIMIT_Handler>
	  }
	  if(htim->Instance == TIM4){
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a07      	ldr	r2, [pc, #28]	@ (8002c00 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d102      	bne.n	8002bec <HAL_TIM_PeriodElapsedCallback+0x38>
		  Accel_Stepper_TIMIT_Handler(&Stepper3);
 8002be6:	4807      	ldr	r0, [pc, #28]	@ (8002c04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002be8:	f7fe fa34 	bl	8001054 <Accel_Stepper_TIMIT_Handler>
	  }
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	200002ac 	.word	0x200002ac
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	200002e4 	.word	0x200002e4
 8002c00:	40000800 	.word	0x40000800
 8002c04:	2000031c 	.word	0x2000031c

08002c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c0c:	b672      	cpsid	i
}
 8002c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <Error_Handler+0x8>

08002c14 <initialize_LCD>:
const int numButtons = sizeof(buttons) / sizeof(Button*);

float l,m,k;
extern char ip_config[20];
void initialize_LCD(LCD_adc_t *lcd)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	lcd->sensitivity = 0.066;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c58 <initialize_LCD+0x44>)
 8002c20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	lcd->ACSoffset=2.5;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a0d      	ldr	r2, [pc, #52]	@ (8002c5c <initialize_LCD+0x48>)
 8002c28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	lcd->m = 0.4;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c60 <initialize_LCD+0x4c>)
 8002c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	lcd->C = 2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	lcd->V25 = 0.0025;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a08      	ldr	r2, [pc, #32]	@ (8002c64 <initialize_LCD+0x50>)
 8002c42:	675a      	str	r2, [r3, #116]	@ 0x74
	lcd->Avg_Slope = 0.76;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a08      	ldr	r2, [pc, #32]	@ (8002c68 <initialize_LCD+0x54>)
 8002c48:	679a      	str	r2, [r3, #120]	@ 0x78
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	3d872b02 	.word	0x3d872b02
 8002c5c:	40200000 	.word	0x40200000
 8002c60:	3ecccccd 	.word	0x3ecccccd
 8002c64:	3b23d70a 	.word	0x3b23d70a
 8002c68:	3f428f5c 	.word	0x3f428f5c

08002c6c <initialize_Kalman>:

void initialize_Kalman(Kalman_filter *kf)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	memset(kf->buffer, 0, sizeof(kf->buffer));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3334      	adds	r3, #52	@ 0x34
 8002c78:	2214      	movs	r2, #20
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f00c fcce 	bl	800f61e <memset>
    kf->N = 10;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	220a      	movs	r2, #10
 8002c86:	601a      	str	r2, [r3, #0]
    kf->ema_filtered_value = 0.0f;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
    kf->Q = KALMAN_Q;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a17      	ldr	r2, [pc, #92]	@ (8002cf0 <initialize_Kalman+0x84>)
 8002c94:	61da      	str	r2, [r3, #28]
    kf->R = KALMAN_R;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a16      	ldr	r2, [pc, #88]	@ (8002cf4 <initialize_Kalman+0x88>)
 8002c9a:	621a      	str	r2, [r3, #32]
    kf->Kg = 0.0f;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	625a      	str	r2, [r3, #36]	@ 0x24
    kf->P_k_k1 = 1.0f;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002caa:	629a      	str	r2, [r3, #40]	@ 0x28
    kf->kalman_adc_old = 0.0f;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->index = 0;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	649a      	str	r2, [r3, #72]	@ 0x48
    kf->sum = 0;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	64da      	str	r2, [r3, #76]	@ 0x4c
    for (int i = 0; i < kf->N; ++i) {
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e009      	b.n	8002cda <initialize_Kalman+0x6e>
        kf->buffer[i] = 0;
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3318      	adds	r3, #24
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	809a      	strh	r2, [r3, #4]
    for (int i = 0; i < kf->N; ++i) {
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	dbf0      	blt.n	8002cc6 <initialize_Kalman+0x5a>
    }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	38d1b717 	.word	0x38d1b717
 8002cf4:	3dcccccd 	.word	0x3dcccccd

08002cf8 <delay_lcd>:


void delay_lcd(uint16_t delay)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim6);
 8002d02:	480a      	ldr	r0, [pc, #40]	@ (8002d2c <delay_lcd+0x34>)
 8002d04:	f006 f9d2 	bl	80090ac <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8002d08:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <delay_lcd+0x34>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < delay);
 8002d10:	bf00      	nop
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <delay_lcd+0x34>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d3f9      	bcc.n	8002d12 <delay_lcd+0x1a>
	HAL_TIM_Base_Stop_IT(&htim6);
 8002d1e:	4803      	ldr	r0, [pc, #12]	@ (8002d2c <delay_lcd+0x34>)
 8002d20:	f006 fa34 	bl	800918c <HAL_TIM_Base_Stop_IT>
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000a38 	.word	0x20000a38

08002d30 <stepX>:

void stepX(int steps, uint8_t direction, uint16_t delay)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	803b      	strh	r3, [r7, #0]
    int a;
    HAL_GPIO_WritePin(dir_1_GPIO_Port, dir_1_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2102      	movs	r1, #2
 8002d50:	480c      	ldr	r0, [pc, #48]	@ (8002d84 <stepX+0x54>)
 8002d52:	f003 fad7 	bl	8006304 <HAL_GPIO_WritePin>
    for (a = 0; a < steps; ++a)
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	e00a      	b.n	8002d72 <stepX+0x42>
    {
        HAL_GPIO_TogglePin(step_1_GPIO_Port, step_1_pin);
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4809      	ldr	r0, [pc, #36]	@ (8002d84 <stepX+0x54>)
 8002d60:	f003 fae9 	bl	8006336 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 8002d64:	883b      	ldrh	r3, [r7, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff ffc6 	bl	8002cf8 <delay_lcd>
    for (a = 0; a < steps; ++a)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	dbf0      	blt.n	8002d5c <stepX+0x2c>
    }
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40020000 	.word	0x40020000

08002d88 <stepY>:

void stepY(int steps, uint8_t direction, uint16_t delay)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	70fb      	strb	r3, [r7, #3]
 8002d94:	4613      	mov	r3, r2
 8002d96:	803b      	strh	r3, [r7, #0]
    int b;
    HAL_GPIO_WritePin(dir_2_GPIO_Port, dir_2_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	2108      	movs	r1, #8
 8002da8:	480c      	ldr	r0, [pc, #48]	@ (8002ddc <stepY+0x54>)
 8002daa:	f003 faab 	bl	8006304 <HAL_GPIO_WritePin>
    for (b = 0; b < steps; ++b)
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	e00a      	b.n	8002dca <stepY+0x42>
    {
        HAL_GPIO_TogglePin(step_2_GPIO_Port, step_2_pin);
 8002db4:	2104      	movs	r1, #4
 8002db6:	4809      	ldr	r0, [pc, #36]	@ (8002ddc <stepY+0x54>)
 8002db8:	f003 fabd 	bl	8006336 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 8002dbc:	883b      	ldrh	r3, [r7, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff9a 	bl	8002cf8 <delay_lcd>
    for (b = 0; b < steps; ++b)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	dbf0      	blt.n	8002db4 <stepY+0x2c>
    }
}
 8002dd2:	bf00      	nop
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40020000 	.word	0x40020000

08002de0 <stepZ>:

void stepZ(int steps, uint8_t direction, uint16_t delay)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
 8002dec:	4613      	mov	r3, r2
 8002dee:	803b      	strh	r3, [r7, #0]
    int c;
    HAL_GPIO_WritePin(dir_3_GPIO_Port, dir_3_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bf0c      	ite	eq
 8002df6:	2301      	moveq	r3, #1
 8002df8:	2300      	movne	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2120      	movs	r1, #32
 8002e00:	480c      	ldr	r0, [pc, #48]	@ (8002e34 <stepZ+0x54>)
 8002e02:	f003 fa7f 	bl	8006304 <HAL_GPIO_WritePin>
    for (c = 0; c < steps; ++c)
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	e00a      	b.n	8002e22 <stepZ+0x42>
    {
        HAL_GPIO_TogglePin(step_3_GPIO_Port, step_3_pin);
 8002e0c:	2110      	movs	r1, #16
 8002e0e:	4809      	ldr	r0, [pc, #36]	@ (8002e34 <stepZ+0x54>)
 8002e10:	f003 fa91 	bl	8006336 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 8002e14:	883b      	ldrh	r3, [r7, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff6e 	bl	8002cf8 <delay_lcd>
    for (c = 0; c < steps; ++c)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	dbf0      	blt.n	8002e0c <stepZ+0x2c>
    }
}
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40020000 	.word	0x40020000

08002e38 <moving_average_filter>:

uint16_t moving_average_filter(Kalman_filter *kf, uint16_t ADC_Value)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	807b      	strh	r3, [r7, #2]
    kf->sum -= kf->buffer[kf->index];
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	3318      	adds	r3, #24
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	440b      	add	r3, r1
 8002e54:	889b      	ldrh	r3, [r3, #4]
 8002e56:	1ad2      	subs	r2, r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	64da      	str	r2, [r3, #76]	@ 0x4c
    kf->buffer[kf->index] = ADC_Value;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	3318      	adds	r3, #24
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	887a      	ldrh	r2, [r7, #2]
 8002e6a:	809a      	strh	r2, [r3, #4]
    kf->sum += kf->buffer[kf->index];
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	3318      	adds	r3, #24
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	440b      	add	r3, r1
 8002e7c:	889b      	ldrh	r3, [r3, #4]
 8002e7e:	441a      	add	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	64da      	str	r2, [r3, #76]	@ 0x4c

    kf->index = (kf->index + 1) % kf->N;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e88:	3301      	adds	r3, #1
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	fb93 f1f2 	sdiv	r1, r3, r2
 8002e92:	fb01 f202 	mul.w	r2, r1, r2
 8002e96:	1a9a      	subs	r2, r3, r2
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	649a      	str	r2, [r3, #72]	@ 0x48

    return (uint16_t)(kf->sum / kf->N);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ea8:	b29b      	uxth	r3, r3
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <exponential_moving_average_filter>:

uint16_t exponential_moving_average_filter(Kalman_filter *kf, uint16_t ADC_Value, float alpha)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ec4:	817b      	strh	r3, [r7, #10]
    kf->ema_filtered_value = (alpha * ADC_Value) + ((1 - alpha) * kf->ema_filtered_value);
 8002ec6:	897b      	ldrh	r3, [r7, #10]
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ed0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ed8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002edc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ee0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	edc3 7a02 	vstr	s15, [r3, #8]
    return (uint16_t)kf->ema_filtered_value;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	edd3 7a02 	vldr	s15, [r3, #8]
 8002efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f02:	ee17 3a90 	vmov	r3, s15
 8002f06:	b29b      	uxth	r3, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <kalman_filter>:

uint16_t kalman_filter(Kalman_filter *kf, uint16_t ADC_Value)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
    kf->Z_k = (float)ADC_Value;
 8002f20:	887b      	ldrh	r3, [r7, #2]
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->x_k1_k1 = kf->kalman_adc_old;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	60da      	str	r2, [r3, #12]

    kf->x_k_k1 = kf->x_k1_k1;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	611a      	str	r2, [r3, #16]
    kf->P_k_k1 = kf->P_k1_k1 + kf->Q;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    kf->Kg = kf->P_k_k1 / (kf->P_k_k1 + kf->R);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    kf->kalman_adc = kf->x_k_k1 + kf->Kg * (kf->Z_k - kf->kalman_adc_old);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	ed93 6a05 	vldr	s12, [r3, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002f8e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    kf->P_k1_k1 = (1 - kf->Kg) * kf->P_k_k1;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002fa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002faa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	edc3 7a06 	vstr	s15, [r3, #24]

    kf->kalman_adc_old = kf->kalman_adc;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (uint16_t)kf->kalman_adc;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fd0:	ee17 3a90 	vmov	r3, s15
 8002fd4:	b29b      	uxth	r3, r3
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	0000      	movs	r0, r0
 8002fe4:	0000      	movs	r0, r0
	...

08002fe8 <vol_messure>:

void vol_messure(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
    ADC_Select_CH10();
 8002fee:	f7fe fb5d 	bl	80016ac <ADC_Select_CH10>
    HAL_ADC_Start(&hadc1);
 8002ff2:	483f      	ldr	r0, [pc, #252]	@ (80030f0 <vol_messure+0x108>)
 8002ff4:	f002 f92c 	bl	8005250 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	483d      	ldr	r0, [pc, #244]	@ (80030f0 <vol_messure+0x108>)
 8002ffc:	f002 fa2d 	bl	800545a <HAL_ADC_PollForConversion>
    LCD_adc.readValue[0] = HAL_ADC_GetValue(&hadc1);
 8003000:	483b      	ldr	r0, [pc, #236]	@ (80030f0 <vol_messure+0x108>)
 8003002:	f002 fbc5 	bl	8005790 <HAL_ADC_GetValue>
 8003006:	4603      	mov	r3, r0
 8003008:	b29a      	uxth	r2, r3
 800300a:	4b3a      	ldr	r3, [pc, #232]	@ (80030f4 <vol_messure+0x10c>)
 800300c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    uint16_t moving_avg_filtered = moving_average_filter(&kalman_fil_volt, LCD_adc.readValue[0]); // Apply moving average filter
 8003010:	4b38      	ldr	r3, [pc, #224]	@ (80030f4 <vol_messure+0x10c>)
 8003012:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8003016:	4619      	mov	r1, r3
 8003018:	4837      	ldr	r0, [pc, #220]	@ (80030f8 <vol_messure+0x110>)
 800301a:	f7ff ff0d 	bl	8002e38 <moving_average_filter>
 800301e:	4603      	mov	r3, r0
 8003020:	80fb      	strh	r3, [r7, #6]
    uint16_t ema_filtered = exponential_moving_average_filter(&kalman_fil_volt, moving_avg_filtered, EMA_ALPHA_VOLT); // Apply EMA filter
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80030fc <vol_messure+0x114>
 8003028:	4619      	mov	r1, r3
 800302a:	4833      	ldr	r0, [pc, #204]	@ (80030f8 <vol_messure+0x110>)
 800302c:	f7ff ff43 	bl	8002eb6 <exponential_moving_average_filter>
 8003030:	4603      	mov	r3, r0
 8003032:	80bb      	strh	r3, [r7, #4]
    kalman_fil_volt.filter_kal = kalman_filter(&kalman_fil_volt, ema_filtered); // Apply Kalman filter
 8003034:	88bb      	ldrh	r3, [r7, #4]
 8003036:	4619      	mov	r1, r3
 8003038:	482f      	ldr	r0, [pc, #188]	@ (80030f8 <vol_messure+0x110>)
 800303a:	f7ff ff6b 	bl	8002f14 <kalman_filter>
 800303e:	4603      	mov	r3, r0
 8003040:	461a      	mov	r2, r3
 8003042:	4b2d      	ldr	r3, [pc, #180]	@ (80030f8 <vol_messure+0x110>)
 8003044:	809a      	strh	r2, [r3, #4]

    LCD_adc.volt = ((float)kalman_fil_volt.filter_kal / 4095) * 3.6f;
 8003046:	4b2c      	ldr	r3, [pc, #176]	@ (80030f8 <vol_messure+0x110>)
 8003048:	889b      	ldrh	r3, [r3, #4]
 800304a:	ee07 3a90 	vmov	s15, r3
 800304e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003052:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8003100 <vol_messure+0x118>
 8003056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800305a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003104 <vol_messure+0x11c>
 800305e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003062:	4b24      	ldr	r3, [pc, #144]	@ (80030f4 <vol_messure+0x10c>)
 8003064:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
    LCD_adc.sum = (LCD_adc.volt * 6.5f) + 0.2f;
 8003068:	4b22      	ldr	r3, [pc, #136]	@ (80030f4 <vol_messure+0x10c>)
 800306a:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800306e:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 8003072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003076:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003108 <vol_messure+0x120>
 800307a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800307e:	4b1d      	ldr	r3, [pc, #116]	@ (80030f4 <vol_messure+0x10c>)
 8003080:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (LCD_adc.sum > 16.3 && LCD_adc.sum < 21)
 8003084:	4b1b      	ldr	r3, [pc, #108]	@ (80030f4 <vol_messure+0x10c>)
 8003086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fa6d 	bl	8000568 <__aeabi_f2d>
 800308e:	a316      	add	r3, pc, #88	@ (adr r3, 80030e8 <vol_messure+0x100>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd fd50 	bl	8000b38 <__aeabi_dcmpgt>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00d      	beq.n	80030ba <vol_messure+0xd2>
 800309e:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <vol_messure+0x10c>)
 80030a0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80030a4:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 80030a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b0:	d503      	bpl.n	80030ba <vol_messure+0xd2>
        LCD_adc.voltage = LCD_adc.sum; // Default value when no voltage exceeds the threshold
 80030b2:	4b10      	ldr	r3, [pc, #64]	@ (80030f4 <vol_messure+0x10c>)
 80030b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b6:	4a0f      	ldr	r2, [pc, #60]	@ (80030f4 <vol_messure+0x10c>)
 80030b8:	6553      	str	r3, [r2, #84]	@ 0x54
    if (LCD_adc.sum < 14)
 80030ba:	4b0e      	ldr	r3, [pc, #56]	@ (80030f4 <vol_messure+0x10c>)
 80030bc:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80030c0:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 80030c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030cc:	d503      	bpl.n	80030d6 <vol_messure+0xee>
        LCD_adc.voltage = 0;
 80030ce:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <vol_messure+0x10c>)
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_Stop(&hadc1);
 80030d6:	4806      	ldr	r0, [pc, #24]	@ (80030f0 <vol_messure+0x108>)
 80030d8:	f002 f98c 	bl	80053f4 <HAL_ADC_Stop>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	f3af 8000 	nop.w
 80030e8:	cccccccd 	.word	0xcccccccd
 80030ec:	40304ccc 	.word	0x40304ccc
 80030f0:	20000354 	.word	0x20000354
 80030f4:	2000075c 	.word	0x2000075c
 80030f8:	20000878 	.word	0x20000878
 80030fc:	3ba3d70a 	.word	0x3ba3d70a
 8003100:	457ff000 	.word	0x457ff000
 8003104:	40666666 	.word	0x40666666
 8003108:	3e4ccccd 	.word	0x3e4ccccd
 800310c:	00000000 	.word	0x00000000

08003110 <cur_messure>:
uint16_t kalmancurrent;
void cur_messure(void)
{
 8003110:	b5b0      	push	{r4, r5, r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
    ADC_Select_CH11();
 8003116:	f7fe fae9 	bl	80016ec <ADC_Select_CH11>
    HAL_ADC_Start(&hadc1);
 800311a:	4857      	ldr	r0, [pc, #348]	@ (8003278 <cur_messure+0x168>)
 800311c:	f002 f898 	bl	8005250 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8003120:	2101      	movs	r1, #1
 8003122:	4855      	ldr	r0, [pc, #340]	@ (8003278 <cur_messure+0x168>)
 8003124:	f002 f999 	bl	800545a <HAL_ADC_PollForConversion>
    LCD_adc.readValue[1] = HAL_ADC_GetValue(&hadc1);
 8003128:	4853      	ldr	r0, [pc, #332]	@ (8003278 <cur_messure+0x168>)
 800312a:	f002 fb31 	bl	8005790 <HAL_ADC_GetValue>
 800312e:	4603      	mov	r3, r0
 8003130:	b29a      	uxth	r2, r3
 8003132:	4b52      	ldr	r3, [pc, #328]	@ (800327c <cur_messure+0x16c>)
 8003134:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

    uint16_t moving_avg_filtered = moving_average_filter(&kalman_fil_curr, LCD_adc.readValue[1]); // Apply moving average filter
 8003138:	4b50      	ldr	r3, [pc, #320]	@ (800327c <cur_messure+0x16c>)
 800313a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800313e:	4619      	mov	r1, r3
 8003140:	484f      	ldr	r0, [pc, #316]	@ (8003280 <cur_messure+0x170>)
 8003142:	f7ff fe79 	bl	8002e38 <moving_average_filter>
 8003146:	4603      	mov	r3, r0
 8003148:	80fb      	strh	r3, [r7, #6]
    uint16_t ema_filtered = exponential_moving_average_filter(&kalman_fil_curr, moving_avg_filtered, EMA_ALPHA_CURR); // Apply EMA filter
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8003284 <cur_messure+0x174>
 8003150:	4619      	mov	r1, r3
 8003152:	484b      	ldr	r0, [pc, #300]	@ (8003280 <cur_messure+0x170>)
 8003154:	f7ff feaf 	bl	8002eb6 <exponential_moving_average_filter>
 8003158:	4603      	mov	r3, r0
 800315a:	80bb      	strh	r3, [r7, #4]
    kalman_fil_curr.filter_kal = kalman_filter(&kalman_fil_curr, ema_filtered); // Apply Kalman filter
 800315c:	88bb      	ldrh	r3, [r7, #4]
 800315e:	4619      	mov	r1, r3
 8003160:	4847      	ldr	r0, [pc, #284]	@ (8003280 <cur_messure+0x170>)
 8003162:	f7ff fed7 	bl	8002f14 <kalman_filter>
 8003166:	4603      	mov	r3, r0
 8003168:	461a      	mov	r2, r3
 800316a:	4b45      	ldr	r3, [pc, #276]	@ (8003280 <cur_messure+0x170>)
 800316c:	809a      	strh	r2, [r3, #4]


	LCD_adc.sum1 = 0.00000009 * kalman_fil_curr.filter_kal * kalman_fil_curr.filter_kal + 0.0102 * kalman_fil_curr.filter_kal - 34.52249168;
 800316e:	4b44      	ldr	r3, [pc, #272]	@ (8003280 <cur_messure+0x170>)
 8003170:	889b      	ldrh	r3, [r3, #4]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd f9e6 	bl	8000544 <__aeabi_i2d>
 8003178:	a337      	add	r3, pc, #220	@ (adr r3, 8003258 <cur_messure+0x148>)
 800317a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317e:	f7fd fa4b 	bl	8000618 <__aeabi_dmul>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4614      	mov	r4, r2
 8003188:	461d      	mov	r5, r3
 800318a:	4b3d      	ldr	r3, [pc, #244]	@ (8003280 <cur_messure+0x170>)
 800318c:	889b      	ldrh	r3, [r3, #4]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd f9d8 	bl	8000544 <__aeabi_i2d>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4620      	mov	r0, r4
 800319a:	4629      	mov	r1, r5
 800319c:	f7fd fa3c 	bl	8000618 <__aeabi_dmul>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4614      	mov	r4, r2
 80031a6:	461d      	mov	r5, r3
 80031a8:	4b35      	ldr	r3, [pc, #212]	@ (8003280 <cur_messure+0x170>)
 80031aa:	889b      	ldrh	r3, [r3, #4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd f9c9 	bl	8000544 <__aeabi_i2d>
 80031b2:	a32b      	add	r3, pc, #172	@ (adr r3, 8003260 <cur_messure+0x150>)
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	f7fd fa2e 	bl	8000618 <__aeabi_dmul>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4620      	mov	r0, r4
 80031c2:	4629      	mov	r1, r5
 80031c4:	f7fd f872 	bl	80002ac <__adddf3>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	a325      	add	r3, pc, #148	@ (adr r3, 8003268 <cur_messure+0x158>)
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f7fd f867 	bl	80002a8 <__aeabi_dsub>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	f7fd fd11 	bl	8000c08 <__aeabi_d2f>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4a24      	ldr	r2, [pc, #144]	@ (800327c <cur_messure+0x16c>)
 80031ea:	6453      	str	r3, [r2, #68]	@ 0x44

    if (LCD_adc.sum1 > 0.4 && LCD_adc.sum1 < 15) {
 80031ec:	4b23      	ldr	r3, [pc, #140]	@ (800327c <cur_messure+0x16c>)
 80031ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fd f9b9 	bl	8000568 <__aeabi_f2d>
 80031f6:	a31e      	add	r3, pc, #120	@ (adr r3, 8003270 <cur_messure+0x160>)
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	f7fd fc9c 	bl	8000b38 <__aeabi_dcmpgt>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00e      	beq.n	8003224 <cur_messure+0x114>
 8003206:	4b1d      	ldr	r3, [pc, #116]	@ (800327c <cur_messure+0x16c>)
 8003208:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800320c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8003210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003218:	d504      	bpl.n	8003224 <cur_messure+0x114>
        LCD_adc.current = LCD_adc.sum1;
 800321a:	4b18      	ldr	r3, [pc, #96]	@ (800327c <cur_messure+0x16c>)
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	4a17      	ldr	r2, [pc, #92]	@ (800327c <cur_messure+0x16c>)
 8003220:	6513      	str	r3, [r2, #80]	@ 0x50
 8003222:	e010      	b.n	8003246 <cur_messure+0x136>
    } else if (LCD_adc.sum1 < 0.4) {
 8003224:	4b15      	ldr	r3, [pc, #84]	@ (800327c <cur_messure+0x16c>)
 8003226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd f99d 	bl	8000568 <__aeabi_f2d>
 800322e:	a310      	add	r3, pc, #64	@ (adr r3, 8003270 <cur_messure+0x160>)
 8003230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003234:	f7fd fc62 	bl	8000afc <__aeabi_dcmplt>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <cur_messure+0x136>
        LCD_adc.current = 0;
 800323e:	4b0f      	ldr	r3, [pc, #60]	@ (800327c <cur_messure+0x16c>)
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    HAL_ADC_Stop(&hadc1);
 8003246:	480c      	ldr	r0, [pc, #48]	@ (8003278 <cur_messure+0x168>)
 8003248:	f002 f8d4 	bl	80053f4 <HAL_ADC_Stop>
}
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bdb0      	pop	{r4, r5, r7, pc}
 8003254:	f3af 8000 	nop.w
 8003258:	be769dc1 	.word	0xbe769dc1
 800325c:	3e7828c0 	.word	0x3e7828c0
 8003260:	d35a8588 	.word	0xd35a8588
 8003264:	3f84e3bc 	.word	0x3f84e3bc
 8003268:	01e3041c 	.word	0x01e3041c
 800326c:	404142e1 	.word	0x404142e1
 8003270:	9999999a 	.word	0x9999999a
 8003274:	3fd99999 	.word	0x3fd99999
 8003278:	20000354 	.word	0x20000354
 800327c:	2000075c 	.word	0x2000075c
 8003280:	20000828 	.word	0x20000828
 8003284:	3a83126f 	.word	0x3a83126f

08003288 <power_messure>:


void power_messure(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
    LCD_adc.power = LCD_adc.current * LCD_adc.voltage;
 800328c:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <power_messure+0x24>)
 800328e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8003292:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <power_messure+0x24>)
 8003294:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329c:	4b03      	ldr	r3, [pc, #12]	@ (80032ac <power_messure+0x24>)
 800329e:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
}
 80032a2:	bf00      	nop
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	2000075c 	.word	0x2000075c

080032b0 <temperature_messure>:

void temperature_messure(void)
{
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	af00      	add	r7, sp, #0
    LCD_adc.Temp = ((3.6 * kalman_fil_curr.filter_kal / 4095 - LCD_adc.V25) / LCD_adc.Avg_Slope) + 25;
 80032b4:	4b26      	ldr	r3, [pc, #152]	@ (8003350 <temperature_messure+0xa0>)
 80032b6:	889b      	ldrh	r3, [r3, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd f943 	bl	8000544 <__aeabi_i2d>
 80032be:	a320      	add	r3, pc, #128	@ (adr r3, 8003340 <temperature_messure+0x90>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f7fd f9a8 	bl	8000618 <__aeabi_dmul>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	a31d      	add	r3, pc, #116	@ (adr r3, 8003348 <temperature_messure+0x98>)
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	f7fd fac9 	bl	800086c <__aeabi_ddiv>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4614      	mov	r4, r2
 80032e0:	461d      	mov	r5, r3
 80032e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003354 <temperature_messure+0xa4>)
 80032e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd f93e 	bl	8000568 <__aeabi_f2d>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4620      	mov	r0, r4
 80032f2:	4629      	mov	r1, r5
 80032f4:	f7fc ffd8 	bl	80002a8 <__aeabi_dsub>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4614      	mov	r4, r2
 80032fe:	461d      	mov	r5, r3
 8003300:	4b14      	ldr	r3, [pc, #80]	@ (8003354 <temperature_messure+0xa4>)
 8003302:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd f92f 	bl	8000568 <__aeabi_f2d>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4620      	mov	r0, r4
 8003310:	4629      	mov	r1, r5
 8003312:	f7fd faab 	bl	800086c <__aeabi_ddiv>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4610      	mov	r0, r2
 800331c:	4619      	mov	r1, r3
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	4b0d      	ldr	r3, [pc, #52]	@ (8003358 <temperature_messure+0xa8>)
 8003324:	f7fc ffc2 	bl	80002ac <__adddf3>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4610      	mov	r0, r2
 800332e:	4619      	mov	r1, r3
 8003330:	f7fd fc6a 	bl	8000c08 <__aeabi_d2f>
 8003334:	4603      	mov	r3, r0
 8003336:	4a07      	ldr	r2, [pc, #28]	@ (8003354 <temperature_messure+0xa4>)
 8003338:	67d3      	str	r3, [r2, #124]	@ 0x7c
}
 800333a:	bf00      	nop
 800333c:	bdb0      	pop	{r4, r5, r7, pc}
 800333e:	bf00      	nop
 8003340:	cccccccd 	.word	0xcccccccd
 8003344:	400ccccc 	.word	0x400ccccc
 8003348:	00000000 	.word	0x00000000
 800334c:	40affe00 	.word	0x40affe00
 8003350:	20000828 	.word	0x20000828
 8003354:	2000075c 	.word	0x2000075c
 8003358:	40390000 	.word	0x40390000

0800335c <startADC>:

void startADC(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
    vol_messure();
 8003360:	f7ff fe42 	bl	8002fe8 <vol_messure>
    cur_messure();
 8003364:	f7ff fed4 	bl	8003110 <cur_messure>
    power_messure();
 8003368:	f7ff ff8e 	bl	8003288 <power_messure>
    temperature_messure();
 800336c:	f7ff ffa0 	bl	80032b0 <temperature_messure>
}
 8003370:	bf00      	nop
 8003372:	bd80      	pop	{r7, pc}
 8003374:	0000      	movs	r0, r0
	...

08003378 <float_to_string>:

void float_to_string(float num, char *str, int decimalPlaces) {
 8003378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800337c:	b08d      	sub	sp, #52	@ 0x34
 800337e:	af00      	add	r7, sp, #0
 8003380:	ed87 0a03 	vstr	s0, [r7, #12]
 8003384:	60b8      	str	r0, [r7, #8]
 8003386:	6079      	str	r1, [r7, #4]
 8003388:	466b      	mov	r3, sp
 800338a:	461e      	mov	r6, r3
    int intPart = (int)num;
 800338c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003394:	ee17 3a90 	vmov	r3, s15
 8003398:	62bb      	str	r3, [r7, #40]	@ 0x28
    int decPart = (int)((num - intPart) * pow(10, decimalPlaces));
 800339a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339c:	ee07 3a90 	vmov	s15, r3
 80033a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80033a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ac:	ee17 0a90 	vmov	r0, s15
 80033b0:	f7fd f8da 	bl	8000568 <__aeabi_f2d>
 80033b4:	4682      	mov	sl, r0
 80033b6:	468b      	mov	fp, r1
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7fd f8c3 	bl	8000544 <__aeabi_i2d>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	ec43 2b11 	vmov	d1, r2, r3
 80033c6:	ed9f 0b42 	vldr	d0, [pc, #264]	@ 80034d0 <float_to_string+0x158>
 80033ca:	f010 f8c7 	bl	801355c <pow>
 80033ce:	ec53 2b10 	vmov	r2, r3, d0
 80033d2:	4650      	mov	r0, sl
 80033d4:	4659      	mov	r1, fp
 80033d6:	f7fd f91f 	bl	8000618 <__aeabi_dmul>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4610      	mov	r0, r2
 80033e0:	4619      	mov	r1, r3
 80033e2:	f7fd fbc9 	bl	8000b78 <__aeabi_d2iz>
 80033e6:	4603      	mov	r3, r0
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24

    // Convert integer part to string
    itoa(intPart, str, 10);
 80033ea:	220a      	movs	r2, #10
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033f0:	f00b f822 	bl	800e438 <itoa>

    // Find length of integer part
    int len = strlen(str);
 80033f4:	68b8      	ldr	r0, [r7, #8]
 80033f6:	f7fc ff4b 	bl	8000290 <strlen>
 80033fa:	4603      	mov	r3, r0
 80033fc:	623b      	str	r3, [r7, #32]

    // Append decimal point
    str[len] = '.';
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	4413      	add	r3, r2
 8003404:	222e      	movs	r2, #46	@ 0x2e
 8003406:	701a      	strb	r2, [r3, #0]
    str[len + 1] = '\0';
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	3301      	adds	r3, #1
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	4413      	add	r3, r2
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]

    // Convert decimal part to string
    char decStr[decimalPlaces + 1];
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	1c59      	adds	r1, r3, #1
 8003418:	1e4b      	subs	r3, r1, #1
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	460a      	mov	r2, r1
 800341e:	2300      	movs	r3, #0
 8003420:	4690      	mov	r8, r2
 8003422:	4699      	mov	r9, r3
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003430:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003434:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003438:	460a      	mov	r2, r1
 800343a:	2300      	movs	r3, #0
 800343c:	4614      	mov	r4, r2
 800343e:	461d      	mov	r5, r3
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	00eb      	lsls	r3, r5, #3
 800344a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800344e:	00e2      	lsls	r2, r4, #3
 8003450:	460b      	mov	r3, r1
 8003452:	3307      	adds	r3, #7
 8003454:	08db      	lsrs	r3, r3, #3
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	ebad 0d03 	sub.w	sp, sp, r3
 800345c:	466b      	mov	r3, sp
 800345e:	3300      	adds	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
    itoa(decPart, decStr, 10);
 8003462:	220a      	movs	r2, #10
 8003464:	69b9      	ldr	r1, [r7, #24]
 8003466:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003468:	f00a ffe6 	bl	800e438 <itoa>

    // Pad with zeros if needed
    int decLen = strlen(decStr);
 800346c:	69b8      	ldr	r0, [r7, #24]
 800346e:	f7fc ff0f 	bl	8000290 <strlen>
 8003472:	4603      	mov	r3, r0
 8003474:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < decimalPlaces - decLen; ++i) {
 8003476:	2300      	movs	r3, #0
 8003478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800347a:	e00e      	b.n	800349a <float_to_string+0x122>
        strcat(str, "0");
 800347c:	68b8      	ldr	r0, [r7, #8]
 800347e:	f7fc ff07 	bl	8000290 <strlen>
 8003482:	4603      	mov	r3, r0
 8003484:	461a      	mov	r2, r3
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4413      	add	r3, r2
 800348a:	4913      	ldr	r1, [pc, #76]	@ (80034d8 <float_to_string+0x160>)
 800348c:	461a      	mov	r2, r3
 800348e:	460b      	mov	r3, r1
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	8013      	strh	r3, [r2, #0]
    for (int i = 0; i < decimalPlaces - decLen; ++i) {
 8003494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003496:	3301      	adds	r3, #1
 8003498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034a2:	429a      	cmp	r2, r3
 80034a4:	dbea      	blt.n	800347c <float_to_string+0x104>
    }

    // Append decimal part to the string
    strcat(str, decStr);
 80034a6:	69b9      	ldr	r1, [r7, #24]
 80034a8:	68b8      	ldr	r0, [r7, #8]
 80034aa:	f00c f8c0 	bl	800f62e <strcat>

    // Null-terminate the string
    str[len + 1 + decimalPlaces] = '\0';
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4413      	add	r3, r2
 80034b6:	461a      	mov	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4413      	add	r3, r2
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
 80034c0:	46b5      	mov	sp, r6
}
 80034c2:	bf00      	nop
 80034c4:	3734      	adds	r7, #52	@ 0x34
 80034c6:	46bd      	mov	sp, r7
 80034c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034cc:	f3af 8000 	nop.w
 80034d0:	00000000 	.word	0x00000000
 80034d4:	40240000 	.word	0x40240000
 80034d8:	08014560 	.word	0x08014560

080034dc <display_menu>:


void display_menu(void) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
    lcd_init();
 80034e0:	f7ff fa8c 	bl	80029fc <lcd_init>
    lcd_clear();
 80034e4:	f7ff fa4e 	bl	8002984 <lcd_clear>
    lcd_put_cur(0, 2);
 80034e8:	2102      	movs	r1, #2
 80034ea:	2000      	movs	r0, #0
 80034ec:	f7ff fa62 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("CNC DRILL 3 AXIS");
 80034f0:	480c      	ldr	r0, [pc, #48]	@ (8003524 <display_menu+0x48>)
 80034f2:	f7ff fab1 	bl	8002a58 <lcd_send_string>
    lcd_put_cur(1, 2);
 80034f6:	2102      	movs	r1, #2
 80034f8:	2001      	movs	r0, #1
 80034fa:	f7ff fa5b 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("HCMUTE CDT K20");
 80034fe:	480a      	ldr	r0, [pc, #40]	@ (8003528 <display_menu+0x4c>)
 8003500:	f7ff faaa 	bl	8002a58 <lcd_send_string>
    lcd_put_cur(2, 2);
 8003504:	2102      	movs	r1, #2
 8003506:	2002      	movs	r0, #2
 8003508:	f7ff fa54 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("KHOA CO KHI CTM");
 800350c:	4807      	ldr	r0, [pc, #28]	@ (800352c <display_menu+0x50>)
 800350e:	f7ff faa3 	bl	8002a58 <lcd_send_string>
    lcd_put_cur(3, 0);
 8003512:	2100      	movs	r1, #0
 8003514:	2003      	movs	r0, #3
 8003516:	f7ff fa4d 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("GVHD: ThS N.M. TRIET");
 800351a:	4805      	ldr	r0, [pc, #20]	@ (8003530 <display_menu+0x54>)
 800351c:	f7ff fa9c 	bl	8002a58 <lcd_send_string>
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}
 8003524:	08014564 	.word	0x08014564
 8003528:	08014578 	.word	0x08014578
 800352c:	08014588 	.word	0x08014588
 8003530:	08014598 	.word	0x08014598

08003534 <display_main>:

void display_main(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
	if (LCD_adc.menu_main == 0)
 8003538:	4b46      	ldr	r3, [pc, #280]	@ (8003654 <display_main+0x120>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d11e      	bne.n	800357e <display_main+0x4a>
	{
		lcd_clear();
 8003540:	f7ff fa20 	bl	8002984 <lcd_clear>
		lcd_put_cur(0, 0);
 8003544:	2100      	movs	r1, #0
 8003546:	2000      	movs	r0, #0
 8003548:	f7ff fa34 	bl	80029b4 <lcd_put_cur>
		lcd_send_string(">VOLT/CURRENT");
 800354c:	4842      	ldr	r0, [pc, #264]	@ (8003658 <display_main+0x124>)
 800354e:	f7ff fa83 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003552:	2100      	movs	r1, #0
 8003554:	2001      	movs	r0, #1
 8003556:	f7ff fa2d 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 800355a:	4840      	ldr	r0, [pc, #256]	@ (800365c <display_main+0x128>)
 800355c:	f7ff fa7c 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003560:	2100      	movs	r1, #0
 8003562:	2002      	movs	r0, #2
 8003564:	f7ff fa26 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 8003568:	483d      	ldr	r0, [pc, #244]	@ (8003660 <display_main+0x12c>)
 800356a:	f7ff fa75 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(3, 0);
 800356e:	2100      	movs	r1, #0
 8003570:	2003      	movs	r0, #3
 8003572:	f7ff fa1f 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 8003576:	483b      	ldr	r0, [pc, #236]	@ (8003664 <display_main+0x130>)
 8003578:	f7ff fa6e 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(2, 0);
		lcd_send_string("CONTROLL CNC");
		lcd_put_cur(3, 0);
		lcd_send_string(">SPEED-XY/SPEED-Z");
	}
}
 800357c:	e067      	b.n	800364e <display_main+0x11a>
	else if (LCD_adc.menu_main == 1)
 800357e:	4b35      	ldr	r3, [pc, #212]	@ (8003654 <display_main+0x120>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d11e      	bne.n	80035c4 <display_main+0x90>
		lcd_clear();
 8003586:	f7ff f9fd 	bl	8002984 <lcd_clear>
		lcd_put_cur(0, 0);
 800358a:	2100      	movs	r1, #0
 800358c:	2000      	movs	r0, #0
 800358e:	f7ff fa11 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 8003592:	4835      	ldr	r0, [pc, #212]	@ (8003668 <display_main+0x134>)
 8003594:	f7ff fa60 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003598:	2100      	movs	r1, #0
 800359a:	2001      	movs	r0, #1
 800359c:	f7ff fa0a 	bl	80029b4 <lcd_put_cur>
		lcd_send_string(">POWER/TEMPER");
 80035a0:	4832      	ldr	r0, [pc, #200]	@ (800366c <display_main+0x138>)
 80035a2:	f7ff fa59 	bl	8002a58 <lcd_send_string>
        lcd_put_cur(2, 0);
 80035a6:	2100      	movs	r1, #0
 80035a8:	2002      	movs	r0, #2
 80035aa:	f7ff fa03 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 80035ae:	482c      	ldr	r0, [pc, #176]	@ (8003660 <display_main+0x12c>)
 80035b0:	f7ff fa52 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(3, 0);
 80035b4:	2100      	movs	r1, #0
 80035b6:	2003      	movs	r0, #3
 80035b8:	f7ff f9fc 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 80035bc:	4829      	ldr	r0, [pc, #164]	@ (8003664 <display_main+0x130>)
 80035be:	f7ff fa4b 	bl	8002a58 <lcd_send_string>
}
 80035c2:	e044      	b.n	800364e <display_main+0x11a>
	else if (LCD_adc.menu_main == 2)
 80035c4:	4b23      	ldr	r3, [pc, #140]	@ (8003654 <display_main+0x120>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d11e      	bne.n	800360a <display_main+0xd6>
		lcd_clear();
 80035cc:	f7ff f9da 	bl	8002984 <lcd_clear>
        lcd_put_cur(0, 0);
 80035d0:	2100      	movs	r1, #0
 80035d2:	2000      	movs	r0, #0
 80035d4:	f7ff f9ee 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 80035d8:	4823      	ldr	r0, [pc, #140]	@ (8003668 <display_main+0x134>)
 80035da:	f7ff fa3d 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(1, 0);
 80035de:	2100      	movs	r1, #0
 80035e0:	2001      	movs	r0, #1
 80035e2:	f7ff f9e7 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 80035e6:	481d      	ldr	r0, [pc, #116]	@ (800365c <display_main+0x128>)
 80035e8:	f7ff fa36 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(2, 0);
 80035ec:	2100      	movs	r1, #0
 80035ee:	2002      	movs	r0, #2
 80035f0:	f7ff f9e0 	bl	80029b4 <lcd_put_cur>
		lcd_send_string(">CONTROLL CNC");
 80035f4:	481e      	ldr	r0, [pc, #120]	@ (8003670 <display_main+0x13c>)
 80035f6:	f7ff fa2f 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(3, 0);
 80035fa:	2100      	movs	r1, #0
 80035fc:	2003      	movs	r0, #3
 80035fe:	f7ff f9d9 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 8003602:	4818      	ldr	r0, [pc, #96]	@ (8003664 <display_main+0x130>)
 8003604:	f7ff fa28 	bl	8002a58 <lcd_send_string>
}
 8003608:	e021      	b.n	800364e <display_main+0x11a>
	else if (LCD_adc.menu_main == 3)
 800360a:	4b12      	ldr	r3, [pc, #72]	@ (8003654 <display_main+0x120>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b03      	cmp	r3, #3
 8003610:	d11d      	bne.n	800364e <display_main+0x11a>
		lcd_clear();
 8003612:	f7ff f9b7 	bl	8002984 <lcd_clear>
        lcd_put_cur(0, 0);
 8003616:	2100      	movs	r1, #0
 8003618:	2000      	movs	r0, #0
 800361a:	f7ff f9cb 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 800361e:	4812      	ldr	r0, [pc, #72]	@ (8003668 <display_main+0x134>)
 8003620:	f7ff fa1a 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003624:	2100      	movs	r1, #0
 8003626:	2001      	movs	r0, #1
 8003628:	f7ff f9c4 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 800362c:	480b      	ldr	r0, [pc, #44]	@ (800365c <display_main+0x128>)
 800362e:	f7ff fa13 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003632:	2100      	movs	r1, #0
 8003634:	2002      	movs	r0, #2
 8003636:	f7ff f9bd 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 800363a:	4809      	ldr	r0, [pc, #36]	@ (8003660 <display_main+0x12c>)
 800363c:	f7ff fa0c 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003640:	2100      	movs	r1, #0
 8003642:	2003      	movs	r0, #3
 8003644:	f7ff f9b6 	bl	80029b4 <lcd_put_cur>
		lcd_send_string(">SPEED-XY/SPEED-Z");
 8003648:	480a      	ldr	r0, [pc, #40]	@ (8003674 <display_main+0x140>)
 800364a:	f7ff fa05 	bl	8002a58 <lcd_send_string>
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	2000075c 	.word	0x2000075c
 8003658:	080145b0 	.word	0x080145b0
 800365c:	080145c0 	.word	0x080145c0
 8003660:	080145d0 	.word	0x080145d0
 8003664:	080145e0 	.word	0x080145e0
 8003668:	080145f4 	.word	0x080145f4
 800366c:	08014604 	.word	0x08014604
 8003670:	08014614 	.word	0x08014614
 8003674:	08014624 	.word	0x08014624

08003678 <menu_1>:
      break;
  }
}

void menu_1(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
    lcd_clear();
 800367e:	f7ff f981 	bl	8002984 <lcd_clear>
    lcd_put_cur(0,0);
 8003682:	2100      	movs	r1, #0
 8003684:	2000      	movs	r0, #0
 8003686:	f7ff f995 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("VOLTAGE= ");
 800368a:	4866      	ldr	r0, [pc, #408]	@ (8003824 <menu_1+0x1ac>)
 800368c:	f7ff f9e4 	bl	8002a58 <lcd_send_string>
    lcd_put_cur(1,0);
 8003690:	2100      	movs	r1, #0
 8003692:	2001      	movs	r0, #1
 8003694:	f7ff f98e 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("CURRENT= ");
 8003698:	4863      	ldr	r0, [pc, #396]	@ (8003828 <menu_1+0x1b0>)
 800369a:	f7ff f9dd 	bl	8002a58 <lcd_send_string>
    lcd_put_cur(2,0);
 800369e:	2100      	movs	r1, #0
 80036a0:	2002      	movs	r0, #2
 80036a2:	f7ff f987 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("ADC VOL= ");
 80036a6:	4861      	ldr	r0, [pc, #388]	@ (800382c <menu_1+0x1b4>)
 80036a8:	f7ff f9d6 	bl	8002a58 <lcd_send_string>
    lcd_put_cur(3,0);
 80036ac:	2100      	movs	r1, #0
 80036ae:	2003      	movs	r0, #3
 80036b0:	f7ff f980 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("ADC CUR= ");
 80036b4:	485e      	ldr	r0, [pc, #376]	@ (8003830 <menu_1+0x1b8>)
 80036b6:	f7ff f9cf 	bl	8002a58 <lcd_send_string>

    float last_voltage = -1;
 80036ba:	4b5e      	ldr	r3, [pc, #376]	@ (8003834 <menu_1+0x1bc>)
 80036bc:	60fb      	str	r3, [r7, #12]
    float last_current = -1;
 80036be:	4b5d      	ldr	r3, [pc, #372]	@ (8003834 <menu_1+0x1bc>)
 80036c0:	60bb      	str	r3, [r7, #8]
    int last_adc_vol = -1;
 80036c2:	f04f 33ff 	mov.w	r3, #4294967295
 80036c6:	607b      	str	r3, [r7, #4]
    int last_adc_cur = -1;
 80036c8:	f04f 33ff 	mov.w	r3, #4294967295
 80036cc:	603b      	str	r3, [r7, #0]
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 80036ce:	e086      	b.n	80037de <menu_1+0x166>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
        {
        // Đo điện áp và dòng điện
        vol_messure();
 80036d0:	f7ff fc8a 	bl	8002fe8 <vol_messure>
        cur_messure();
 80036d4:	f7ff fd1c 	bl	8003110 <cur_messure>

        // Cập nhật điện áp nếu có thay đổi
        if (LCD_adc.voltage != last_voltage)
 80036d8:	4b57      	ldr	r3, [pc, #348]	@ (8003838 <menu_1+0x1c0>)
 80036da:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80036de:	ed97 7a03 	vldr	s14, [r7, #12]
 80036e2:	eeb4 7a67 	vcmp.f32	s14, s15
 80036e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ea:	d019      	beq.n	8003720 <menu_1+0xa8>
        {
            last_voltage = LCD_adc.voltage;
 80036ec:	4b52      	ldr	r3, [pc, #328]	@ (8003838 <menu_1+0x1c0>)
 80036ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f0:	60fb      	str	r3, [r7, #12]
            float_to_string(LCD_adc.voltage, LCD_adc.volVal, 2);
 80036f2:	4b51      	ldr	r3, [pc, #324]	@ (8003838 <menu_1+0x1c0>)
 80036f4:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80036f8:	2102      	movs	r1, #2
 80036fa:	4850      	ldr	r0, [pc, #320]	@ (800383c <menu_1+0x1c4>)
 80036fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003700:	f7ff fe3a 	bl	8003378 <float_to_string>
            lcd_put_cur(0, 9);
 8003704:	2109      	movs	r1, #9
 8003706:	2000      	movs	r0, #0
 8003708:	f7ff f954 	bl	80029b4 <lcd_put_cur>
            lcd_send_string(LCD_adc.volVal);
 800370c:	484b      	ldr	r0, [pc, #300]	@ (800383c <menu_1+0x1c4>)
 800370e:	f7ff f9a3 	bl	8002a58 <lcd_send_string>
            lcd_put_cur(0, 15);
 8003712:	210f      	movs	r1, #15
 8003714:	2000      	movs	r0, #0
 8003716:	f7ff f94d 	bl	80029b4 <lcd_put_cur>
            lcd_send_string("V");
 800371a:	4849      	ldr	r0, [pc, #292]	@ (8003840 <menu_1+0x1c8>)
 800371c:	f7ff f99c 	bl	8002a58 <lcd_send_string>
        }

        // Cập nhật dòng điện nếu có thay đổi
        if (LCD_adc.current != last_current)
 8003720:	4b45      	ldr	r3, [pc, #276]	@ (8003838 <menu_1+0x1c0>)
 8003722:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003726:	ed97 7a02 	vldr	s14, [r7, #8]
 800372a:	eeb4 7a67 	vcmp.f32	s14, s15
 800372e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003732:	d019      	beq.n	8003768 <menu_1+0xf0>
        {
            last_current = LCD_adc.current;
 8003734:	4b40      	ldr	r3, [pc, #256]	@ (8003838 <menu_1+0x1c0>)
 8003736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003738:	60bb      	str	r3, [r7, #8]
            float_to_string(LCD_adc.current, LCD_adc.curVal, 3);
 800373a:	4b3f      	ldr	r3, [pc, #252]	@ (8003838 <menu_1+0x1c0>)
 800373c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003740:	2103      	movs	r1, #3
 8003742:	4840      	ldr	r0, [pc, #256]	@ (8003844 <menu_1+0x1cc>)
 8003744:	eeb0 0a67 	vmov.f32	s0, s15
 8003748:	f7ff fe16 	bl	8003378 <float_to_string>
            lcd_put_cur(1, 9);
 800374c:	2109      	movs	r1, #9
 800374e:	2001      	movs	r0, #1
 8003750:	f7ff f930 	bl	80029b4 <lcd_put_cur>
            lcd_send_string(LCD_adc.curVal);
 8003754:	483b      	ldr	r0, [pc, #236]	@ (8003844 <menu_1+0x1cc>)
 8003756:	f7ff f97f 	bl	8002a58 <lcd_send_string>
            lcd_put_cur(1, 15);
 800375a:	210f      	movs	r1, #15
 800375c:	2001      	movs	r0, #1
 800375e:	f7ff f929 	bl	80029b4 <lcd_put_cur>
            lcd_send_string("A");
 8003762:	4839      	ldr	r0, [pc, #228]	@ (8003848 <menu_1+0x1d0>)
 8003764:	f7ff f978 	bl	8002a58 <lcd_send_string>
        }

        // Cập nhật adc volt nếu có thay đổi
        if (kalman_fil_volt.filter_kal != last_adc_vol)
 8003768:	4b38      	ldr	r3, [pc, #224]	@ (800384c <menu_1+0x1d4>)
 800376a:	889b      	ldrh	r3, [r3, #4]
 800376c:	461a      	mov	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4293      	cmp	r3, r2
 8003772:	d015      	beq.n	80037a0 <menu_1+0x128>
        {
            last_adc_vol = kalman_fil_curr.filter_kal; // Fixed: updating last_adc instead of last_current
 8003774:	4b36      	ldr	r3, [pc, #216]	@ (8003850 <menu_1+0x1d8>)
 8003776:	889b      	ldrh	r3, [r3, #4]
 8003778:	607b      	str	r3, [r7, #4]
            float_to_string(kalman_fil_volt.filter_kal, LCD_adc.adc_volVal, 0);
 800377a:	4b34      	ldr	r3, [pc, #208]	@ (800384c <menu_1+0x1d4>)
 800377c:	889b      	ldrh	r3, [r3, #4]
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003786:	2100      	movs	r1, #0
 8003788:	4832      	ldr	r0, [pc, #200]	@ (8003854 <menu_1+0x1dc>)
 800378a:	eeb0 0a67 	vmov.f32	s0, s15
 800378e:	f7ff fdf3 	bl	8003378 <float_to_string>
            //snprintf(LCD_adc.adc_volVal, 6, "%d", kalman_fil_volt.filter_kal);
            lcd_put_cur(2, 9);
 8003792:	2109      	movs	r1, #9
 8003794:	2002      	movs	r0, #2
 8003796:	f7ff f90d 	bl	80029b4 <lcd_put_cur>
            lcd_send_string(LCD_adc.adc_volVal);
 800379a:	482e      	ldr	r0, [pc, #184]	@ (8003854 <menu_1+0x1dc>)
 800379c:	f7ff f95c 	bl	8002a58 <lcd_send_string>
        }

        // Cập nhật adc curr nếu có thay đổi
        if (kalman_fil_curr.filter_kal != last_adc_cur)
 80037a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003850 <menu_1+0x1d8>)
 80037a2:	889b      	ldrh	r3, [r3, #4]
 80037a4:	461a      	mov	r2, r3
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d015      	beq.n	80037d8 <menu_1+0x160>
        {
            last_adc_cur = kalman_fil_curr.filter_kal; // Fixed: updating last_adc instead of last_current
 80037ac:	4b28      	ldr	r3, [pc, #160]	@ (8003850 <menu_1+0x1d8>)
 80037ae:	889b      	ldrh	r3, [r3, #4]
 80037b0:	603b      	str	r3, [r7, #0]
            float_to_string(kalman_fil_curr.filter_kal, LCD_adc.adc_curVal, 0);
 80037b2:	4b27      	ldr	r3, [pc, #156]	@ (8003850 <menu_1+0x1d8>)
 80037b4:	889b      	ldrh	r3, [r3, #4]
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037be:	2100      	movs	r1, #0
 80037c0:	4825      	ldr	r0, [pc, #148]	@ (8003858 <menu_1+0x1e0>)
 80037c2:	eeb0 0a67 	vmov.f32	s0, s15
 80037c6:	f7ff fdd7 	bl	8003378 <float_to_string>
            //snprintf(LCD_adc.adc_curVal, 6, "%d", kalman_fil_curr.filter_kal);
            lcd_put_cur(3, 9);
 80037ca:	2109      	movs	r1, #9
 80037cc:	2003      	movs	r0, #3
 80037ce:	f7ff f8f1 	bl	80029b4 <lcd_put_cur>
            lcd_send_string(LCD_adc.adc_curVal);
 80037d2:	4821      	ldr	r0, [pc, #132]	@ (8003858 <menu_1+0x1e0>)
 80037d4:	f7ff f940 	bl	8002a58 <lcd_send_string>
        }

        // Thêm một khoảng trễ nhỏ để ngăn việc sử dụng CPU quá mức
        osDelay(150);
 80037d8:	2096      	movs	r0, #150	@ 0x96
 80037da:	f007 fa4d 	bl	800ac78 <osDelay>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 80037de:	2140      	movs	r1, #64	@ 0x40
 80037e0:	481e      	ldr	r0, [pc, #120]	@ (800385c <menu_1+0x1e4>)
 80037e2:	f002 fd77 	bl	80062d4 <HAL_GPIO_ReadPin>
 80037e6:	4603      	mov	r3, r0
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d017      	beq.n	800381c <menu_1+0x1a4>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 80037ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80037f0:	481b      	ldr	r0, [pc, #108]	@ (8003860 <menu_1+0x1e8>)
 80037f2:	f002 fd6f 	bl	80062d4 <HAL_GPIO_ReadPin>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00f      	beq.n	800381c <menu_1+0x1a4>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 80037fc:	2180      	movs	r1, #128	@ 0x80
 80037fe:	4817      	ldr	r0, [pc, #92]	@ (800385c <menu_1+0x1e4>)
 8003800:	f002 fd68 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <menu_1+0x1a4>
 800380a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800380e:	4814      	ldr	r0, [pc, #80]	@ (8003860 <menu_1+0x1e8>)
 8003810:	f002 fd60 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	f47f af5a 	bne.w	80036d0 <menu_1+0x58>
    }
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	08014658 	.word	0x08014658
 8003828:	08014664 	.word	0x08014664
 800382c:	08014670 	.word	0x08014670
 8003830:	0801467c 	.word	0x0801467c
 8003834:	bf800000 	.word	0xbf800000
 8003838:	2000075c 	.word	0x2000075c
 800383c:	200007f0 	.word	0x200007f0
 8003840:	08014688 	.word	0x08014688
 8003844:	200007f5 	.word	0x200007f5
 8003848:	0801468c 	.word	0x0801468c
 800384c:	20000878 	.word	0x20000878
 8003850:	20000828 	.word	0x20000828
 8003854:	200007fa 	.word	0x200007fa
 8003858:	200007ff 	.word	0x200007ff
 800385c:	40020000 	.word	0x40020000
 8003860:	40021000 	.word	0x40021000

08003864 <menu_2>:



void menu_2(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
    lcd_clear();
 800386a:	f7ff f88b 	bl	8002984 <lcd_clear>
    lcd_put_cur(0,0);
 800386e:	2100      	movs	r1, #0
 8003870:	2000      	movs	r0, #0
 8003872:	f7ff f89f 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("POWER= ");
 8003876:	4843      	ldr	r0, [pc, #268]	@ (8003984 <menu_2+0x120>)
 8003878:	f7ff f8ee 	bl	8002a58 <lcd_send_string>
    lcd_put_cur(1,0);
 800387c:	2100      	movs	r1, #0
 800387e:	2001      	movs	r0, #1
 8003880:	f7ff f898 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("TEMPER= ");
 8003884:	4840      	ldr	r0, [pc, #256]	@ (8003988 <menu_2+0x124>)
 8003886:	f7ff f8e7 	bl	8002a58 <lcd_send_string>

    float last_power = -1;
 800388a:	4b40      	ldr	r3, [pc, #256]	@ (800398c <menu_2+0x128>)
 800388c:	60fb      	str	r3, [r7, #12]
    float last_temp = -1;
 800388e:	4b3f      	ldr	r3, [pc, #252]	@ (800398c <menu_2+0x128>)
 8003890:	60bb      	str	r3, [r7, #8]

    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8003892:	e054      	b.n	800393e <menu_2+0xda>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
        {
        // Đo điện áp và dòng điện (để tính công suất và nhiệt độ)
        vol_messure();
 8003894:	f7ff fba8 	bl	8002fe8 <vol_messure>
        cur_messure();
 8003898:	f7ff fc3a 	bl	8003110 <cur_messure>

        // Cập nhật công suất nếu có thay đổi
        if (LCD_adc.power != last_power)
 800389c:	4b3c      	ldr	r3, [pc, #240]	@ (8003990 <menu_2+0x12c>)
 800389e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80038a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80038a6:	eeb4 7a67 	vcmp.f32	s14, s15
 80038aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ae:	d019      	beq.n	80038e4 <menu_2+0x80>
        {
            last_power = LCD_adc.power;
 80038b0:	4b37      	ldr	r3, [pc, #220]	@ (8003990 <menu_2+0x12c>)
 80038b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b4:	60fb      	str	r3, [r7, #12]
            float_to_string(LCD_adc.power, LCD_adc.powVal, 2);
 80038b6:	4b36      	ldr	r3, [pc, #216]	@ (8003990 <menu_2+0x12c>)
 80038b8:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80038bc:	2102      	movs	r1, #2
 80038be:	4835      	ldr	r0, [pc, #212]	@ (8003994 <menu_2+0x130>)
 80038c0:	eeb0 0a67 	vmov.f32	s0, s15
 80038c4:	f7ff fd58 	bl	8003378 <float_to_string>
            lcd_put_cur(0, 9);
 80038c8:	2109      	movs	r1, #9
 80038ca:	2000      	movs	r0, #0
 80038cc:	f7ff f872 	bl	80029b4 <lcd_put_cur>
            lcd_send_string(LCD_adc.powVal);
 80038d0:	4830      	ldr	r0, [pc, #192]	@ (8003994 <menu_2+0x130>)
 80038d2:	f7ff f8c1 	bl	8002a58 <lcd_send_string>
            lcd_put_cur(0, 15);
 80038d6:	210f      	movs	r1, #15
 80038d8:	2000      	movs	r0, #0
 80038da:	f7ff f86b 	bl	80029b4 <lcd_put_cur>
            lcd_send_string("W");
 80038de:	482e      	ldr	r0, [pc, #184]	@ (8003998 <menu_2+0x134>)
 80038e0:	f7ff f8ba 	bl	8002a58 <lcd_send_string>
        }

        // Cập nhật nhiệt độ nếu có thay đổi
        if (LCD_adc.temp != last_temp)
 80038e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003990 <menu_2+0x12c>)
 80038e6:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80038ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80038ee:	eeb4 7a67 	vcmp.f32	s14, s15
 80038f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f6:	d01f      	beq.n	8003938 <menu_2+0xd4>
        {
            last_temp = LCD_adc.Temp;
 80038f8:	4b25      	ldr	r3, [pc, #148]	@ (8003990 <menu_2+0x12c>)
 80038fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038fc:	60bb      	str	r3, [r7, #8]
            float_to_string(LCD_adc.Temp, LCD_adc.tempVal, 3);
 80038fe:	4b24      	ldr	r3, [pc, #144]	@ (8003990 <menu_2+0x12c>)
 8003900:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 8003904:	2103      	movs	r1, #3
 8003906:	4825      	ldr	r0, [pc, #148]	@ (800399c <menu_2+0x138>)
 8003908:	eeb0 0a67 	vmov.f32	s0, s15
 800390c:	f7ff fd34 	bl	8003378 <float_to_string>
            char celsiusSymbol[] = {0xDF, 'C', '\0'};
 8003910:	4a23      	ldr	r2, [pc, #140]	@ (80039a0 <menu_2+0x13c>)
 8003912:	1d3b      	adds	r3, r7, #4
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	4611      	mov	r1, r2
 8003918:	8019      	strh	r1, [r3, #0]
 800391a:	3302      	adds	r3, #2
 800391c:	0c12      	lsrs	r2, r2, #16
 800391e:	701a      	strb	r2, [r3, #0]
            strcat(LCD_adc.tempVal, celsiusSymbol);
 8003920:	1d3b      	adds	r3, r7, #4
 8003922:	4619      	mov	r1, r3
 8003924:	481d      	ldr	r0, [pc, #116]	@ (800399c <menu_2+0x138>)
 8003926:	f00b fe82 	bl	800f62e <strcat>
            lcd_put_cur(1, 9);
 800392a:	2109      	movs	r1, #9
 800392c:	2001      	movs	r0, #1
 800392e:	f7ff f841 	bl	80029b4 <lcd_put_cur>
            lcd_send_string(LCD_adc.tempVal);
 8003932:	481a      	ldr	r0, [pc, #104]	@ (800399c <menu_2+0x138>)
 8003934:	f7ff f890 	bl	8002a58 <lcd_send_string>
        }

        // Thêm một khoảng trễ nhỏ để ngăn việc sử dụng CPU quá mức
        osDelay(100);
 8003938:	2064      	movs	r0, #100	@ 0x64
 800393a:	f007 f99d 	bl	800ac78 <osDelay>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 800393e:	2140      	movs	r1, #64	@ 0x40
 8003940:	4818      	ldr	r0, [pc, #96]	@ (80039a4 <menu_2+0x140>)
 8003942:	f002 fcc7 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003946:	4603      	mov	r3, r0
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 8003948:	2b00      	cmp	r3, #0
 800394a:	d016      	beq.n	800397a <menu_2+0x116>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 800394c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003950:	4815      	ldr	r0, [pc, #84]	@ (80039a8 <menu_2+0x144>)
 8003952:	f002 fcbf 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00e      	beq.n	800397a <menu_2+0x116>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 800395c:	2180      	movs	r1, #128	@ 0x80
 800395e:	4811      	ldr	r0, [pc, #68]	@ (80039a4 <menu_2+0x140>)
 8003960:	f002 fcb8 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d007      	beq.n	800397a <menu_2+0x116>
 800396a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800396e:	480e      	ldr	r0, [pc, #56]	@ (80039a8 <menu_2+0x144>)
 8003970:	f002 fcb0 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d18c      	bne.n	8003894 <menu_2+0x30>
    }
}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	08014690 	.word	0x08014690
 8003988:	08014698 	.word	0x08014698
 800398c:	bf800000 	.word	0xbf800000
 8003990:	2000075c 	.word	0x2000075c
 8003994:	20000809 	.word	0x20000809
 8003998:	080146a4 	.word	0x080146a4
 800399c:	20000804 	.word	0x20000804
 80039a0:	080146a8 	.word	0x080146a8
 80039a4:	40020000 	.word	0x40020000
 80039a8:	40021000 	.word	0x40021000

080039ac <menu_3>:


void menu_3(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
	if (LCD_adc.selected_menu3_item == 0)
 80039b0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a5c <menu_3+0xb0>)
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d117      	bne.n	80039e8 <menu_3+0x3c>
	{
		lcd_clear();
 80039b8:	f7fe ffe4 	bl	8002984 <lcd_clear>
		lcd_put_cur(0, 0);
 80039bc:	2100      	movs	r1, #0
 80039be:	2000      	movs	r0, #0
 80039c0:	f7fe fff8 	bl	80029b4 <lcd_put_cur>
		lcd_send_string(">TYPE X= ");
 80039c4:	4826      	ldr	r0, [pc, #152]	@ (8003a60 <menu_3+0xb4>)
 80039c6:	f7ff f847 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(1, 0);
 80039ca:	2100      	movs	r1, #0
 80039cc:	2001      	movs	r0, #1
 80039ce:	f7fe fff1 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("TYPE Y= ");
 80039d2:	4824      	ldr	r0, [pc, #144]	@ (8003a64 <menu_3+0xb8>)
 80039d4:	f7ff f840 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(2, 0);
 80039d8:	2100      	movs	r1, #0
 80039da:	2002      	movs	r0, #2
 80039dc:	f7fe ffea 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("TYPE Z= ");
 80039e0:	4821      	ldr	r0, [pc, #132]	@ (8003a68 <menu_3+0xbc>)
 80039e2:	f7ff f839 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(1, 0);
		lcd_send_string("TYPE Y= ");
		lcd_put_cur(2, 0);
		lcd_send_string(">TYPE Z= ");
	}
}
 80039e6:	e036      	b.n	8003a56 <menu_3+0xaa>
	else if (LCD_adc.selected_menu3_item == 1)
 80039e8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a5c <menu_3+0xb0>)
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d117      	bne.n	8003a20 <menu_3+0x74>
		lcd_clear();
 80039f0:	f7fe ffc8 	bl	8002984 <lcd_clear>
		lcd_put_cur(0, 0);
 80039f4:	2100      	movs	r1, #0
 80039f6:	2000      	movs	r0, #0
 80039f8:	f7fe ffdc 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("TYPE X= ");
 80039fc:	481b      	ldr	r0, [pc, #108]	@ (8003a6c <menu_3+0xc0>)
 80039fe:	f7ff f82b 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003a02:	2100      	movs	r1, #0
 8003a04:	2001      	movs	r0, #1
 8003a06:	f7fe ffd5 	bl	80029b4 <lcd_put_cur>
		lcd_send_string(">TYPE Y= ");
 8003a0a:	4819      	ldr	r0, [pc, #100]	@ (8003a70 <menu_3+0xc4>)
 8003a0c:	f7ff f824 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003a10:	2100      	movs	r1, #0
 8003a12:	2002      	movs	r0, #2
 8003a14:	f7fe ffce 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("TYPE Z= ");
 8003a18:	4813      	ldr	r0, [pc, #76]	@ (8003a68 <menu_3+0xbc>)
 8003a1a:	f7ff f81d 	bl	8002a58 <lcd_send_string>
}
 8003a1e:	e01a      	b.n	8003a56 <menu_3+0xaa>
	else if (LCD_adc.selected_menu3_item == 2)
 8003a20:	4b0e      	ldr	r3, [pc, #56]	@ (8003a5c <menu_3+0xb0>)
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d116      	bne.n	8003a56 <menu_3+0xaa>
		lcd_clear();
 8003a28:	f7fe ffac 	bl	8002984 <lcd_clear>
		lcd_put_cur(0, 0);
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f7fe ffc0 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("TYPE X= ");
 8003a34:	480d      	ldr	r0, [pc, #52]	@ (8003a6c <menu_3+0xc0>)
 8003a36:	f7ff f80f 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	f7fe ffb9 	bl	80029b4 <lcd_put_cur>
		lcd_send_string("TYPE Y= ");
 8003a42:	4808      	ldr	r0, [pc, #32]	@ (8003a64 <menu_3+0xb8>)
 8003a44:	f7ff f808 	bl	8002a58 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003a48:	2100      	movs	r1, #0
 8003a4a:	2002      	movs	r0, #2
 8003a4c:	f7fe ffb2 	bl	80029b4 <lcd_put_cur>
		lcd_send_string(">TYPE Z= ");
 8003a50:	4808      	ldr	r0, [pc, #32]	@ (8003a74 <menu_3+0xc8>)
 8003a52:	f7ff f801 	bl	8002a58 <lcd_send_string>
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	2000075c 	.word	0x2000075c
 8003a60:	080146ac 	.word	0x080146ac
 8003a64:	080146b8 	.word	0x080146b8
 8003a68:	080146c4 	.word	0x080146c4
 8003a6c:	080146d0 	.word	0x080146d0
 8003a70:	080146dc 	.word	0x080146dc
 8003a74:	080146e8 	.word	0x080146e8

08003a78 <select_menu3>:

void select_menu3(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
    switch (LCD_adc.selected_menu3_item)
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa8 <select_menu3+0x30>)
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d00c      	beq.n	8003a9e <select_menu3+0x26>
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	dc0d      	bgt.n	8003aa4 <select_menu3+0x2c>
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <select_menu3+0x1a>
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d003      	beq.n	8003a98 <select_menu3+0x20>
            break;
        case 2:
            lcd_clear();
            break;
    }
}
 8003a90:	e008      	b.n	8003aa4 <select_menu3+0x2c>
            lcd_clear();
 8003a92:	f7fe ff77 	bl	8002984 <lcd_clear>
            break;
 8003a96:	e005      	b.n	8003aa4 <select_menu3+0x2c>
            lcd_clear();
 8003a98:	f7fe ff74 	bl	8002984 <lcd_clear>
            break;
 8003a9c:	e002      	b.n	8003aa4 <select_menu3+0x2c>
            lcd_clear();
 8003a9e:	f7fe ff71 	bl	8002984 <lcd_clear>
            break;
 8003aa2:	bf00      	nop
}
 8003aa4:	bf00      	nop
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	2000075c 	.word	0x2000075c

08003aac <X_count>:

void X_count(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8003ab0:	e01c      	b.n	8003aec <X_count+0x40>
    {
        if (HAL_GPIO_ReadPin(moveXplus_port, moveXplus_pin) == CNC_pos.Lsw1)
 8003ab2:	2120      	movs	r1, #32
 8003ab4:	4825      	ldr	r0, [pc, #148]	@ (8003b4c <X_count+0xa0>)
 8003ab6:	f002 fc0d 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	4b24      	ldr	r3, [pc, #144]	@ (8003b50 <X_count+0xa4>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d103      	bne.n	8003ace <X_count+0x22>
        {
        	state.stop_press = 1;
 8003ac6:	4b23      	ldr	r3, [pc, #140]	@ (8003b54 <X_count+0xa8>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	705a      	strb	r2, [r3, #1]
            break;
 8003acc:	e016      	b.n	8003afc <X_count+0x50>
        }
        LCD_adc.typeX_value++;
 8003ace:	4b22      	ldr	r3, [pc, #136]	@ (8003b58 <X_count+0xac>)
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	4a20      	ldr	r2, [pc, #128]	@ (8003b58 <X_count+0xac>)
 8003ad6:	6253      	str	r3, [r2, #36]	@ 0x24
        stepX(abs(LCD_adc.typeX_value), 0, 15);
 8003ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b58 <X_count+0xac>)
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bfb8      	it	lt
 8003ae0:	425b      	neglt	r3, r3
 8003ae2:	220f      	movs	r2, #15
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff f922 	bl	8002d30 <stepX>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8003aec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003af0:	481a      	ldr	r0, [pc, #104]	@ (8003b5c <X_count+0xb0>)
 8003af2:	f002 fbef 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0da      	beq.n	8003ab2 <X_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8003afc:	e01c      	b.n	8003b38 <X_count+0x8c>
    {
        if (HAL_GPIO_ReadPin(moveXsub_port, moveXsub_pin) == CNC_pos.Lsw2)
 8003afe:	2101      	movs	r1, #1
 8003b00:	4817      	ldr	r0, [pc, #92]	@ (8003b60 <X_count+0xb4>)
 8003b02:	f002 fbe7 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003b06:	4603      	mov	r3, r0
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b11      	ldr	r3, [pc, #68]	@ (8003b50 <X_count+0xa4>)
 8003b0c:	785b      	ldrb	r3, [r3, #1]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d103      	bne.n	8003b1a <X_count+0x6e>
        {
        	state.stop_press = 1;
 8003b12:	4b10      	ldr	r3, [pc, #64]	@ (8003b54 <X_count+0xa8>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	705a      	strb	r2, [r3, #1]
            break;
 8003b18:	e016      	b.n	8003b48 <X_count+0x9c>
        }
        LCD_adc.typeX_value--;
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b58 <X_count+0xac>)
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	4a0d      	ldr	r2, [pc, #52]	@ (8003b58 <X_count+0xac>)
 8003b22:	6253      	str	r3, [r2, #36]	@ 0x24
        stepX(abs(LCD_adc.typeX_value), 1, 15);
 8003b24:	4b0c      	ldr	r3, [pc, #48]	@ (8003b58 <X_count+0xac>)
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bfb8      	it	lt
 8003b2c:	425b      	neglt	r3, r3
 8003b2e:	220f      	movs	r2, #15
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff f8fc 	bl	8002d30 <stepX>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8003b38:	2110      	movs	r1, #16
 8003b3a:	4804      	ldr	r0, [pc, #16]	@ (8003b4c <X_count+0xa0>)
 8003b3c:	f002 fbca 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0db      	beq.n	8003afe <X_count+0x52>
    }
}
 8003b46:	bf00      	nop
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40020800 	.word	0x40020800
 8003b50:	20000698 	.word	0x20000698
 8003b54:	200008c8 	.word	0x200008c8
 8003b58:	2000075c 	.word	0x2000075c
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40020400 	.word	0x40020400

08003b64 <Y_count>:

void Y_count(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8003b68:	e01c      	b.n	8003ba4 <Y_count+0x40>
    {
        if (HAL_GPIO_ReadPin(moveYplus_port, moveYplus_pin) == CNC_pos.Lsw3)
 8003b6a:	2104      	movs	r1, #4
 8003b6c:	4825      	ldr	r0, [pc, #148]	@ (8003c04 <Y_count+0xa0>)
 8003b6e:	f002 fbb1 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003b72:	4603      	mov	r3, r0
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b24      	ldr	r3, [pc, #144]	@ (8003c08 <Y_count+0xa4>)
 8003b78:	789b      	ldrb	r3, [r3, #2]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d103      	bne.n	8003b86 <Y_count+0x22>
        {
        	state.stop_press = 1;
 8003b7e:	4b23      	ldr	r3, [pc, #140]	@ (8003c0c <Y_count+0xa8>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	705a      	strb	r2, [r3, #1]
            break;
 8003b84:	e016      	b.n	8003bb4 <Y_count+0x50>
        }
        LCD_adc.typeY_value++;
 8003b86:	4b22      	ldr	r3, [pc, #136]	@ (8003c10 <Y_count+0xac>)
 8003b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	4a20      	ldr	r2, [pc, #128]	@ (8003c10 <Y_count+0xac>)
 8003b8e:	6293      	str	r3, [r2, #40]	@ 0x28
        stepY(abs(LCD_adc.typeY_value), 0, 15);
 8003b90:	4b1f      	ldr	r3, [pc, #124]	@ (8003c10 <Y_count+0xac>)
 8003b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bfb8      	it	lt
 8003b98:	425b      	neglt	r3, r3
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff f8f2 	bl	8002d88 <stepY>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8003ba4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ba8:	481a      	ldr	r0, [pc, #104]	@ (8003c14 <Y_count+0xb0>)
 8003baa:	f002 fb93 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0da      	beq.n	8003b6a <Y_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8003bb4:	e01c      	b.n	8003bf0 <Y_count+0x8c>
    {
        if (HAL_GPIO_ReadPin(moveYsub_port, moveYsub_pin) == CNC_pos.Lsw4)
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	4812      	ldr	r0, [pc, #72]	@ (8003c04 <Y_count+0xa0>)
 8003bba:	f002 fb8b 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b11      	ldr	r3, [pc, #68]	@ (8003c08 <Y_count+0xa4>)
 8003bc4:	78db      	ldrb	r3, [r3, #3]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d103      	bne.n	8003bd2 <Y_count+0x6e>
        {
        	state.stop_press = 1;
 8003bca:	4b10      	ldr	r3, [pc, #64]	@ (8003c0c <Y_count+0xa8>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	705a      	strb	r2, [r3, #1]
            break;
 8003bd0:	e016      	b.n	8003c00 <Y_count+0x9c>
        }
        LCD_adc.typeY_value--;
 8003bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <Y_count+0xac>)
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8003c10 <Y_count+0xac>)
 8003bda:	6293      	str	r3, [r2, #40]	@ 0x28
        stepY(abs(LCD_adc.typeY_value), 1, 15);
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c10 <Y_count+0xac>)
 8003bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bfb8      	it	lt
 8003be4:	425b      	neglt	r3, r3
 8003be6:	220f      	movs	r2, #15
 8003be8:	2101      	movs	r1, #1
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff f8cc 	bl	8002d88 <stepY>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8003bf0:	2110      	movs	r1, #16
 8003bf2:	4809      	ldr	r0, [pc, #36]	@ (8003c18 <Y_count+0xb4>)
 8003bf4:	f002 fb6e 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0db      	beq.n	8003bb6 <Y_count+0x52>
    }
}
 8003bfe:	bf00      	nop
 8003c00:	bf00      	nop
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40020400 	.word	0x40020400
 8003c08:	20000698 	.word	0x20000698
 8003c0c:	200008c8 	.word	0x200008c8
 8003c10:	2000075c 	.word	0x2000075c
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40020800 	.word	0x40020800

08003c1c <Z_count>:

void Z_count(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8003c20:	e01d      	b.n	8003c5e <Z_count+0x42>
    {
        if (HAL_GPIO_ReadPin(moveZsub_port, moveZsub_pin) ==  CNC_pos.Lsw6)
 8003c22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c26:	4826      	ldr	r0, [pc, #152]	@ (8003cc0 <Z_count+0xa4>)
 8003c28:	f002 fb54 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4b24      	ldr	r3, [pc, #144]	@ (8003cc4 <Z_count+0xa8>)
 8003c32:	795b      	ldrb	r3, [r3, #5]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d103      	bne.n	8003c40 <Z_count+0x24>
        {
        	state.stop_press = 1;
 8003c38:	4b23      	ldr	r3, [pc, #140]	@ (8003cc8 <Z_count+0xac>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	705a      	strb	r2, [r3, #1]
            break;
 8003c3e:	e016      	b.n	8003c6e <Z_count+0x52>
        }
        LCD_adc.typeZ_value--;
 8003c40:	4b22      	ldr	r3, [pc, #136]	@ (8003ccc <Z_count+0xb0>)
 8003c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c44:	3b01      	subs	r3, #1
 8003c46:	4a21      	ldr	r2, [pc, #132]	@ (8003ccc <Z_count+0xb0>)
 8003c48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        stepZ(abs(LCD_adc.typeZ_value), 1, 15);
 8003c4a:	4b20      	ldr	r3, [pc, #128]	@ (8003ccc <Z_count+0xb0>)
 8003c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	bfb8      	it	lt
 8003c52:	425b      	neglt	r3, r3
 8003c54:	220f      	movs	r2, #15
 8003c56:	2101      	movs	r1, #1
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff f8c1 	bl	8002de0 <stepZ>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8003c5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003c62:	4817      	ldr	r0, [pc, #92]	@ (8003cc0 <Z_count+0xa4>)
 8003c64:	f002 fb36 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0d9      	beq.n	8003c22 <Z_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8003c6e:	e01c      	b.n	8003caa <Z_count+0x8e>
    {
        if (HAL_GPIO_ReadPin(moveZplus_port, moveZplus_pin) ==  CNC_pos.Lsw5)
 8003c70:	2180      	movs	r1, #128	@ 0x80
 8003c72:	4813      	ldr	r0, [pc, #76]	@ (8003cc0 <Z_count+0xa4>)
 8003c74:	f002 fb2e 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4b11      	ldr	r3, [pc, #68]	@ (8003cc4 <Z_count+0xa8>)
 8003c7e:	791b      	ldrb	r3, [r3, #4]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d103      	bne.n	8003c8c <Z_count+0x70>
        {
        	state.stop_press = 1;
 8003c84:	4b10      	ldr	r3, [pc, #64]	@ (8003cc8 <Z_count+0xac>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	705a      	strb	r2, [r3, #1]
            break;
 8003c8a:	e016      	b.n	8003cba <Z_count+0x9e>
        }
        LCD_adc.typeZ_value++;
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ccc <Z_count+0xb0>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c90:	3301      	adds	r3, #1
 8003c92:	4a0e      	ldr	r2, [pc, #56]	@ (8003ccc <Z_count+0xb0>)
 8003c94:	62d3      	str	r3, [r2, #44]	@ 0x2c
        stepZ(abs(LCD_adc.typeZ_value), 0, 15);
 8003c96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <Z_count+0xb0>)
 8003c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bfb8      	it	lt
 8003c9e:	425b      	neglt	r3, r3
 8003ca0:	220f      	movs	r2, #15
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff f89b 	bl	8002de0 <stepZ>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8003caa:	2110      	movs	r1, #16
 8003cac:	4808      	ldr	r0, [pc, #32]	@ (8003cd0 <Z_count+0xb4>)
 8003cae:	f002 fb11 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0db      	beq.n	8003c70 <Z_count+0x54>
    }
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	20000698 	.word	0x20000698
 8003cc8:	200008c8 	.word	0x200008c8
 8003ccc:	2000075c 	.word	0x2000075c
 8003cd0:	40020800 	.word	0x40020800

08003cd4 <menu_4>:

void menu_4(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
    if (LCD_adc.selected_menu4_item == 0)
 8003cd8:	4b17      	ldr	r3, [pc, #92]	@ (8003d38 <menu_4+0x64>)
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d112      	bne.n	8003d06 <menu_4+0x32>
    {
        lcd_clear();
 8003ce0:	f7fe fe50 	bl	8002984 <lcd_clear>
        lcd_put_cur(0, 0);
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	f7fe fe64 	bl	80029b4 <lcd_put_cur>
        lcd_send_string(">SPEED X-Y= ");
 8003cec:	4813      	ldr	r0, [pc, #76]	@ (8003d3c <menu_4+0x68>)
 8003cee:	f7fe feb3 	bl	8002a58 <lcd_send_string>
        lcd_put_cur(1, 0);
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	f7fe fe5d 	bl	80029b4 <lcd_put_cur>
        lcd_send_string("SPEED Z= ");
 8003cfa:	4811      	ldr	r0, [pc, #68]	@ (8003d40 <menu_4+0x6c>)
 8003cfc:	f7fe feac 	bl	8002a58 <lcd_send_string>
        speedXY_count();
 8003d00:	f000 f838 	bl	8003d74 <speedXY_count>
        lcd_send_string("SPEED X-Y= ");
        lcd_put_cur(1, 0);
        lcd_send_string(">SPEED Z= ");
        speedZ_count();
    }
}
 8003d04:	e015      	b.n	8003d32 <menu_4+0x5e>
    else if (LCD_adc.selected_menu4_item == 1)
 8003d06:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <menu_4+0x64>)
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d111      	bne.n	8003d32 <menu_4+0x5e>
        lcd_clear();
 8003d0e:	f7fe fe39 	bl	8002984 <lcd_clear>
        lcd_put_cur(0, 0);
 8003d12:	2100      	movs	r1, #0
 8003d14:	2000      	movs	r0, #0
 8003d16:	f7fe fe4d 	bl	80029b4 <lcd_put_cur>
        lcd_send_string("SPEED X-Y= ");
 8003d1a:	480a      	ldr	r0, [pc, #40]	@ (8003d44 <menu_4+0x70>)
 8003d1c:	f7fe fe9c 	bl	8002a58 <lcd_send_string>
        lcd_put_cur(1, 0);
 8003d20:	2100      	movs	r1, #0
 8003d22:	2001      	movs	r0, #1
 8003d24:	f7fe fe46 	bl	80029b4 <lcd_put_cur>
        lcd_send_string(">SPEED Z= ");
 8003d28:	4807      	ldr	r0, [pc, #28]	@ (8003d48 <menu_4+0x74>)
 8003d2a:	f7fe fe95 	bl	8002a58 <lcd_send_string>
        speedZ_count();
 8003d2e:	f000 f857 	bl	8003de0 <speedZ_count>
}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	2000075c 	.word	0x2000075c
 8003d3c:	080146f4 	.word	0x080146f4
 8003d40:	08014704 	.word	0x08014704
 8003d44:	08014710 	.word	0x08014710
 8003d48:	0801471c 	.word	0x0801471c

08003d4c <select_menu4>:

void select_menu4(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
    switch (LCD_adc.selected_menu4_item)
 8003d50:	4b07      	ldr	r3, [pc, #28]	@ (8003d70 <select_menu4+0x24>)
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <select_menu4+0x12>
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d003      	beq.n	8003d64 <select_menu4+0x18>
            break;
        case 1:
            lcd_clear();
            break;
    }
}
 8003d5c:	e005      	b.n	8003d6a <select_menu4+0x1e>
            lcd_clear();
 8003d5e:	f7fe fe11 	bl	8002984 <lcd_clear>
            break;
 8003d62:	e002      	b.n	8003d6a <select_menu4+0x1e>
            lcd_clear();
 8003d64:	f7fe fe0e 	bl	8002984 <lcd_clear>
            break;
 8003d68:	bf00      	nop
}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	2000075c 	.word	0x2000075c

08003d74 <speedXY_count>:

void speedXY_count(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8003d78:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003d7c:	4814      	ldr	r0, [pc, #80]	@ (8003dd0 <speedXY_count+0x5c>)
 8003d7e:	f002 faa9 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10c      	bne.n	8003da2 <speedXY_count+0x2e>
    {
        LCD_adc.speed_valueXY += 100;
 8003d88:	4b12      	ldr	r3, [pc, #72]	@ (8003dd4 <speedXY_count+0x60>)
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8c:	3364      	adds	r3, #100	@ 0x64
 8003d8e:	4a11      	ldr	r2, [pc, #68]	@ (8003dd4 <speedXY_count+0x60>)
 8003d90:	6313      	str	r3, [r2, #48]	@ 0x30
        CNC_pos.max_speedXY = LCD_adc.speed_valueXY;
 8003d92:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <speedXY_count+0x60>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd8 <speedXY_count+0x64>)
 8003d9a:	865a      	strh	r2, [r3, #50]	@ 0x32
        osDelay(10);
 8003d9c:	200a      	movs	r0, #10
 8003d9e:	f006 ff6b 	bl	800ac78 <osDelay>
    }
    if (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8003da2:	2110      	movs	r1, #16
 8003da4:	480d      	ldr	r0, [pc, #52]	@ (8003ddc <speedXY_count+0x68>)
 8003da6:	f002 fa95 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10c      	bne.n	8003dca <speedXY_count+0x56>
    {
        LCD_adc.speed_valueXY -= 100;
 8003db0:	4b08      	ldr	r3, [pc, #32]	@ (8003dd4 <speedXY_count+0x60>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db4:	3b64      	subs	r3, #100	@ 0x64
 8003db6:	4a07      	ldr	r2, [pc, #28]	@ (8003dd4 <speedXY_count+0x60>)
 8003db8:	6313      	str	r3, [r2, #48]	@ 0x30
        CNC_pos.max_speedXY = LCD_adc.speed_valueXY;
 8003dba:	4b06      	ldr	r3, [pc, #24]	@ (8003dd4 <speedXY_count+0x60>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	4b05      	ldr	r3, [pc, #20]	@ (8003dd8 <speedXY_count+0x64>)
 8003dc2:	865a      	strh	r2, [r3, #50]	@ 0x32
        osDelay(10);
 8003dc4:	200a      	movs	r0, #10
 8003dc6:	f006 ff57 	bl	800ac78 <osDelay>
    }
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	2000075c 	.word	0x2000075c
 8003dd8:	20000698 	.word	0x20000698
 8003ddc:	40020800 	.word	0x40020800

08003de0 <speedZ_count>:

void speedZ_count(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8003de4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003de8:	4814      	ldr	r0, [pc, #80]	@ (8003e3c <speedZ_count+0x5c>)
 8003dea:	f002 fa73 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10c      	bne.n	8003e0e <speedZ_count+0x2e>
    {
        LCD_adc.speed_valueZ += 100;
 8003df4:	4b12      	ldr	r3, [pc, #72]	@ (8003e40 <speedZ_count+0x60>)
 8003df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df8:	3364      	adds	r3, #100	@ 0x64
 8003dfa:	4a11      	ldr	r2, [pc, #68]	@ (8003e40 <speedZ_count+0x60>)
 8003dfc:	6353      	str	r3, [r2, #52]	@ 0x34
        CNC_pos.max_speedZ = LCD_adc.speed_valueZ;
 8003dfe:	4b10      	ldr	r3, [pc, #64]	@ (8003e40 <speedZ_count+0x60>)
 8003e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	4b0f      	ldr	r3, [pc, #60]	@ (8003e44 <speedZ_count+0x64>)
 8003e06:	869a      	strh	r2, [r3, #52]	@ 0x34
        osDelay(10);
 8003e08:	200a      	movs	r0, #10
 8003e0a:	f006 ff35 	bl	800ac78 <osDelay>
    }
    if (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8003e0e:	2110      	movs	r1, #16
 8003e10:	480d      	ldr	r0, [pc, #52]	@ (8003e48 <speedZ_count+0x68>)
 8003e12:	f002 fa5f 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10c      	bne.n	8003e36 <speedZ_count+0x56>
    {
        LCD_adc.speed_valueZ -= 100;
 8003e1c:	4b08      	ldr	r3, [pc, #32]	@ (8003e40 <speedZ_count+0x60>)
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e20:	3b64      	subs	r3, #100	@ 0x64
 8003e22:	4a07      	ldr	r2, [pc, #28]	@ (8003e40 <speedZ_count+0x60>)
 8003e24:	6353      	str	r3, [r2, #52]	@ 0x34
        CNC_pos.max_speedZ = LCD_adc.speed_valueZ;
 8003e26:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <speedZ_count+0x60>)
 8003e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <speedZ_count+0x64>)
 8003e2e:	869a      	strh	r2, [r3, #52]	@ 0x34
        osDelay(10);
 8003e30:	200a      	movs	r0, #10
 8003e32:	f006 ff21 	bl	800ac78 <osDelay>
    }
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	2000075c 	.word	0x2000075c
 8003e44:	20000698 	.word	0x20000698
 8003e48:	40020800 	.word	0x40020800

08003e4c <updateButtonState>:

// Function to update button state and debounce time
void updateButtonState(Button* button, uint32_t currentTime) {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
    button->last_stable_state = HAL_GPIO_ReadPin(button->port, button->pin);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f002 fa37 	bl	80062d4 <HAL_GPIO_ReadPin>
 8003e66:	4603      	mov	r3, r0
 8003e68:	461a      	mov	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
    button->last_debounce_time = currentTime;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	60da      	str	r2, [r3, #12]
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_GPIO_EXTI_Callback>:

// HAL GPIO EXTI Callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	80fb      	strh	r3, [r7, #6]
    uint32_t currentTime = HAL_GetTick();
 8003e86:	f001 f96f 	bl	8005168 <HAL_GetTick>
 8003e8a:	60b8      	str	r0, [r7, #8]

    for (int i = 0; i < numButtons; ++i) {
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	e013      	b.n	8003eba <HAL_GPIO_EXTI_Callback+0x3e>
        if (buttons[i]->pin == GPIO_Pin) {
 8003e92:	4a0e      	ldr	r2, [pc, #56]	@ (8003ecc <HAL_GPIO_EXTI_Callback+0x50>)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	88fa      	ldrh	r2, [r7, #6]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d108      	bne.n	8003eb4 <HAL_GPIO_EXTI_Callback+0x38>
            updateButtonState(buttons[i], currentTime);
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8003ecc <HAL_GPIO_EXTI_Callback+0x50>)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eaa:	68b9      	ldr	r1, [r7, #8]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff ffcd 	bl	8003e4c <updateButtonState>
            break;
 8003eb2:	e007      	b.n	8003ec4 <HAL_GPIO_EXTI_Callback+0x48>
    for (int i = 0; i < numButtons; ++i) {
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	2207      	movs	r2, #7
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	dbe7      	blt.n	8003e92 <HAL_GPIO_EXTI_Callback+0x16>
        }
    }
}
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	2000008c 	.word	0x2000008c

08003ed0 <ButtonTask>:

// Function to handle button tasks
void ButtonTask(void) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8003ed6:	f001 f947 	bl	8005168 <HAL_GetTick>
 8003eda:	60b8      	str	r0, [r7, #8]

    for (int i = 0; i < numButtons; ++i) {
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e017      	b.n	8003f12 <ButtonTask+0x42>
        Button* button = buttons[i];
 8003ee2:	4a69      	ldr	r2, [pc, #420]	@ (8004088 <ButtonTask+0x1b8>)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eea:	607b      	str	r3, [r7, #4]

        if ((current_time - button->last_debounce_time > DEBOUNCE_DELAY) && (button->last_stable_state == GPIO_PIN_RESET)) {
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b50      	cmp	r3, #80	@ 0x50
 8003ef6:	d909      	bls.n	8003f0c <ButtonTask+0x3c>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d105      	bne.n	8003f0c <ButtonTask+0x3c>
            button->handler();
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	4798      	blx	r3
            button->last_debounce_time = current_time;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < numButtons; ++i) {
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	2207      	movs	r2, #7
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4293      	cmp	r3, r2
 8003f18:	dbe3      	blt.n	8003ee2 <ButtonTask+0x12>
        }
    }

    // Check button states for menu 3 and menu 4
    if (LCD_adc.demtong == 3 && LCD_adc.demmenu_3 == 1) {
 8003f1a:	4b5c      	ldr	r3, [pc, #368]	@ (800408c <ButtonTask+0x1bc>)
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d165      	bne.n	8003fee <ButtonTask+0x11e>
 8003f22:	4b5a      	ldr	r3, [pc, #360]	@ (800408c <ButtonTask+0x1bc>)
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d161      	bne.n	8003fee <ButtonTask+0x11e>
        switch (LCD_adc.selected_menu3_item) {
 8003f2a:	4b58      	ldr	r3, [pc, #352]	@ (800408c <ButtonTask+0x1bc>)
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d040      	beq.n	8003fb4 <ButtonTask+0xe4>
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	dc5b      	bgt.n	8003fee <ButtonTask+0x11e>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <ButtonTask+0x70>
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d01d      	beq.n	8003f7a <ButtonTask+0xaa>
 8003f3e:	e056      	b.n	8003fee <ButtonTask+0x11e>
            case 0:
                lcd_put_cur(0, 0);
 8003f40:	2100      	movs	r1, #0
 8003f42:	2000      	movs	r0, #0
 8003f44:	f7fe fd36 	bl	80029b4 <lcd_put_cur>
                lcd_send_string(">TYPE X= ");
 8003f48:	4851      	ldr	r0, [pc, #324]	@ (8004090 <ButtonTask+0x1c0>)
 8003f4a:	f7fe fd85 	bl	8002a58 <lcd_send_string>
                float_to_string(LCD_adc.typeX_value, LCD_adc.X_Val, 2);
 8003f4e:	4b4f      	ldr	r3, [pc, #316]	@ (800408c <ButtonTask+0x1bc>)
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	484d      	ldr	r0, [pc, #308]	@ (8004094 <ButtonTask+0x1c4>)
 8003f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f62:	f7ff fa09 	bl	8003378 <float_to_string>
                lcd_put_cur(0, 9);
 8003f66:	2109      	movs	r1, #9
 8003f68:	2000      	movs	r0, #0
 8003f6a:	f7fe fd23 	bl	80029b4 <lcd_put_cur>
                lcd_send_string(LCD_adc.X_Val);
 8003f6e:	4849      	ldr	r0, [pc, #292]	@ (8004094 <ButtonTask+0x1c4>)
 8003f70:	f7fe fd72 	bl	8002a58 <lcd_send_string>
                X_count();
 8003f74:	f7ff fd9a 	bl	8003aac <X_count>
                break;
 8003f78:	e039      	b.n	8003fee <ButtonTask+0x11e>
            case 1:
                lcd_put_cur(1, 0);
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f7fe fd19 	bl	80029b4 <lcd_put_cur>
                lcd_send_string(">TYPE Y= ");
 8003f82:	4845      	ldr	r0, [pc, #276]	@ (8004098 <ButtonTask+0x1c8>)
 8003f84:	f7fe fd68 	bl	8002a58 <lcd_send_string>
                float_to_string(LCD_adc.typeY_value, LCD_adc.Y_Val, 2);
 8003f88:	4b40      	ldr	r3, [pc, #256]	@ (800408c <ButtonTask+0x1bc>)
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	ee07 3a90 	vmov	s15, r3
 8003f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f94:	2102      	movs	r1, #2
 8003f96:	4841      	ldr	r0, [pc, #260]	@ (800409c <ButtonTask+0x1cc>)
 8003f98:	eeb0 0a67 	vmov.f32	s0, s15
 8003f9c:	f7ff f9ec 	bl	8003378 <float_to_string>
                lcd_put_cur(1, 9);
 8003fa0:	2109      	movs	r1, #9
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	f7fe fd06 	bl	80029b4 <lcd_put_cur>
                lcd_send_string(LCD_adc.Y_Val);
 8003fa8:	483c      	ldr	r0, [pc, #240]	@ (800409c <ButtonTask+0x1cc>)
 8003faa:	f7fe fd55 	bl	8002a58 <lcd_send_string>
                Y_count();
 8003fae:	f7ff fdd9 	bl	8003b64 <Y_count>
                break;
 8003fb2:	e01c      	b.n	8003fee <ButtonTask+0x11e>
            case 2:
                lcd_put_cur(2, 0);
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	2002      	movs	r0, #2
 8003fb8:	f7fe fcfc 	bl	80029b4 <lcd_put_cur>
                lcd_send_string(">TYPE Z= ");
 8003fbc:	4838      	ldr	r0, [pc, #224]	@ (80040a0 <ButtonTask+0x1d0>)
 8003fbe:	f7fe fd4b 	bl	8002a58 <lcd_send_string>
                float_to_string(LCD_adc.typeZ_value, LCD_adc.Z_Val, 2);
 8003fc2:	4b32      	ldr	r3, [pc, #200]	@ (800408c <ButtonTask+0x1bc>)
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fce:	2102      	movs	r1, #2
 8003fd0:	4834      	ldr	r0, [pc, #208]	@ (80040a4 <ButtonTask+0x1d4>)
 8003fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd6:	f7ff f9cf 	bl	8003378 <float_to_string>
                lcd_put_cur(2, 9);
 8003fda:	2109      	movs	r1, #9
 8003fdc:	2002      	movs	r0, #2
 8003fde:	f7fe fce9 	bl	80029b4 <lcd_put_cur>
                lcd_send_string(LCD_adc.Z_Val);
 8003fe2:	4830      	ldr	r0, [pc, #192]	@ (80040a4 <ButtonTask+0x1d4>)
 8003fe4:	f7fe fd38 	bl	8002a58 <lcd_send_string>
                Z_count();
 8003fe8:	f7ff fe18 	bl	8003c1c <Z_count>
                break;
 8003fec:	bf00      	nop
        }
    }

    if (LCD_adc.demtong == 3 && LCD_adc.demmenu_4 == 1) {
 8003fee:	4b27      	ldr	r3, [pc, #156]	@ (800408c <ButtonTask+0x1bc>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d144      	bne.n	8004080 <ButtonTask+0x1b0>
 8003ff6:	4b25      	ldr	r3, [pc, #148]	@ (800408c <ButtonTask+0x1bc>)
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d140      	bne.n	8004080 <ButtonTask+0x1b0>
        switch (LCD_adc.selected_menu4_item) {
 8003ffe:	4b23      	ldr	r3, [pc, #140]	@ (800408c <ButtonTask+0x1bc>)
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <ButtonTask+0x13c>
 8004006:	2b01      	cmp	r3, #1
 8004008:	d01d      	beq.n	8004046 <ButtonTask+0x176>
                lcd_send_string(LCD_adc.speed_ValZ);
                speedZ_count();
                break;
        }
    }
}
 800400a:	e039      	b.n	8004080 <ButtonTask+0x1b0>
                lcd_put_cur(0, 0);
 800400c:	2100      	movs	r1, #0
 800400e:	2000      	movs	r0, #0
 8004010:	f7fe fcd0 	bl	80029b4 <lcd_put_cur>
                lcd_send_string(">SPEED X-Y= ");
 8004014:	4824      	ldr	r0, [pc, #144]	@ (80040a8 <ButtonTask+0x1d8>)
 8004016:	f7fe fd1f 	bl	8002a58 <lcd_send_string>
                float_to_string(LCD_adc.speed_valueXY, LCD_adc.speed_ValXY, 2);
 800401a:	4b1c      	ldr	r3, [pc, #112]	@ (800408c <ButtonTask+0x1bc>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004026:	2102      	movs	r1, #2
 8004028:	4820      	ldr	r0, [pc, #128]	@ (80040ac <ButtonTask+0x1dc>)
 800402a:	eeb0 0a67 	vmov.f32	s0, s15
 800402e:	f7ff f9a3 	bl	8003378 <float_to_string>
                lcd_put_cur(0, 12);
 8004032:	210c      	movs	r1, #12
 8004034:	2000      	movs	r0, #0
 8004036:	f7fe fcbd 	bl	80029b4 <lcd_put_cur>
                lcd_send_string(LCD_adc.speed_ValXY);
 800403a:	481c      	ldr	r0, [pc, #112]	@ (80040ac <ButtonTask+0x1dc>)
 800403c:	f7fe fd0c 	bl	8002a58 <lcd_send_string>
                speedXY_count();
 8004040:	f7ff fe98 	bl	8003d74 <speedXY_count>
                break;
 8004044:	e01c      	b.n	8004080 <ButtonTask+0x1b0>
                lcd_put_cur(1, 0);
 8004046:	2100      	movs	r1, #0
 8004048:	2001      	movs	r0, #1
 800404a:	f7fe fcb3 	bl	80029b4 <lcd_put_cur>
                lcd_send_string(">SPEED Z= ");
 800404e:	4818      	ldr	r0, [pc, #96]	@ (80040b0 <ButtonTask+0x1e0>)
 8004050:	f7fe fd02 	bl	8002a58 <lcd_send_string>
                float_to_string(LCD_adc.speed_valueZ, LCD_adc.speed_ValZ, 2);
 8004054:	4b0d      	ldr	r3, [pc, #52]	@ (800408c <ButtonTask+0x1bc>)
 8004056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004060:	2102      	movs	r1, #2
 8004062:	4814      	ldr	r0, [pc, #80]	@ (80040b4 <ButtonTask+0x1e4>)
 8004064:	eeb0 0a67 	vmov.f32	s0, s15
 8004068:	f7ff f986 	bl	8003378 <float_to_string>
                lcd_put_cur(1, 12);
 800406c:	210c      	movs	r1, #12
 800406e:	2001      	movs	r0, #1
 8004070:	f7fe fca0 	bl	80029b4 <lcd_put_cur>
                lcd_send_string(LCD_adc.speed_ValZ);
 8004074:	480f      	ldr	r0, [pc, #60]	@ (80040b4 <ButtonTask+0x1e4>)
 8004076:	f7fe fcef 	bl	8002a58 <lcd_send_string>
                speedZ_count();
 800407a:	f7ff feb1 	bl	8003de0 <speedZ_count>
                break;
 800407e:	bf00      	nop
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	2000008c 	.word	0x2000008c
 800408c:	2000075c 	.word	0x2000075c
 8004090:	080146ac 	.word	0x080146ac
 8004094:	2000080e 	.word	0x2000080e
 8004098:	080146dc 	.word	0x080146dc
 800409c:	20000813 	.word	0x20000813
 80040a0:	080146e8 	.word	0x080146e8
 80040a4:	20000818 	.word	0x20000818
 80040a8:	080146f4 	.word	0x080146f4
 80040ac:	2000081d 	.word	0x2000081d
 80040b0:	0801471c 	.word	0x0801471c
 80040b4:	20000822 	.word	0x20000822

080040b8 <handle_up_button_press>:

void handle_up_button_press(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
    if (LCD_adc.demtong == 1) // move down in menu_main
 80040bc:	4b22      	ldr	r3, [pc, #136]	@ (8004148 <handle_up_button_press+0x90>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d10f      	bne.n	80040e4 <handle_up_button_press+0x2c>
    {
        if (LCD_adc.menu_main <= 0)
 80040c4:	4b20      	ldr	r3, [pc, #128]	@ (8004148 <handle_up_button_press+0x90>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	dc03      	bgt.n	80040d4 <handle_up_button_press+0x1c>
        {
            LCD_adc.menu_main = 3;
 80040cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004148 <handle_up_button_press+0x90>)
 80040ce:	2203      	movs	r2, #3
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e004      	b.n	80040de <handle_up_button_press+0x26>
        }
        else
        {
            LCD_adc.menu_main -= 1;
 80040d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004148 <handle_up_button_press+0x90>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3b01      	subs	r3, #1
 80040da:	4a1b      	ldr	r2, [pc, #108]	@ (8004148 <handle_up_button_press+0x90>)
 80040dc:	6013      	str	r3, [r2, #0]
        }
        display_main();
 80040de:	f7ff fa29 	bl	8003534 <display_main>
        {
            LCD_adc.selected_menu4_item -= 1;
        }
        menu_4();
    }
}
 80040e2:	e02e      	b.n	8004142 <handle_up_button_press+0x8a>
    else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 2)
 80040e4:	4b18      	ldr	r3, [pc, #96]	@ (8004148 <handle_up_button_press+0x90>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d113      	bne.n	8004114 <handle_up_button_press+0x5c>
 80040ec:	4b16      	ldr	r3, [pc, #88]	@ (8004148 <handle_up_button_press+0x90>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d10f      	bne.n	8004114 <handle_up_button_press+0x5c>
        if(LCD_adc.selected_menu3_item <= 0)
 80040f4:	4b14      	ldr	r3, [pc, #80]	@ (8004148 <handle_up_button_press+0x90>)
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	dc03      	bgt.n	8004104 <handle_up_button_press+0x4c>
            LCD_adc.selected_menu3_item = 2;
 80040fc:	4b12      	ldr	r3, [pc, #72]	@ (8004148 <handle_up_button_press+0x90>)
 80040fe:	2202      	movs	r2, #2
 8004100:	615a      	str	r2, [r3, #20]
 8004102:	e004      	b.n	800410e <handle_up_button_press+0x56>
            LCD_adc.selected_menu3_item -= 1;
 8004104:	4b10      	ldr	r3, [pc, #64]	@ (8004148 <handle_up_button_press+0x90>)
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	3b01      	subs	r3, #1
 800410a:	4a0f      	ldr	r2, [pc, #60]	@ (8004148 <handle_up_button_press+0x90>)
 800410c:	6153      	str	r3, [r2, #20]
        menu_3();
 800410e:	f7ff fc4d 	bl	80039ac <menu_3>
}
 8004112:	e016      	b.n	8004142 <handle_up_button_press+0x8a>
    else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 3)
 8004114:	4b0c      	ldr	r3, [pc, #48]	@ (8004148 <handle_up_button_press+0x90>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d112      	bne.n	8004142 <handle_up_button_press+0x8a>
 800411c:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <handle_up_button_press+0x90>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b03      	cmp	r3, #3
 8004122:	d10e      	bne.n	8004142 <handle_up_button_press+0x8a>
        if(LCD_adc.selected_menu4_item <= 0)
 8004124:	4b08      	ldr	r3, [pc, #32]	@ (8004148 <handle_up_button_press+0x90>)
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	dc03      	bgt.n	8004134 <handle_up_button_press+0x7c>
            LCD_adc.selected_menu4_item = 1;
 800412c:	4b06      	ldr	r3, [pc, #24]	@ (8004148 <handle_up_button_press+0x90>)
 800412e:	2201      	movs	r2, #1
 8004130:	619a      	str	r2, [r3, #24]
 8004132:	e004      	b.n	800413e <handle_up_button_press+0x86>
            LCD_adc.selected_menu4_item -= 1;
 8004134:	4b04      	ldr	r3, [pc, #16]	@ (8004148 <handle_up_button_press+0x90>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	3b01      	subs	r3, #1
 800413a:	4a03      	ldr	r2, [pc, #12]	@ (8004148 <handle_up_button_press+0x90>)
 800413c:	6193      	str	r3, [r2, #24]
        menu_4();
 800413e:	f7ff fdc9 	bl	8003cd4 <menu_4>
}
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	2000075c 	.word	0x2000075c

0800414c <handle_down_button_press>:

void handle_down_button_press(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
	if (LCD_adc.demtong == 1) // move up in menu_main
 8004150:	4b22      	ldr	r3, [pc, #136]	@ (80041dc <handle_down_button_press+0x90>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10f      	bne.n	8004178 <handle_down_button_press+0x2c>
	{
		if (LCD_adc.menu_main >= 3)
 8004158:	4b20      	ldr	r3, [pc, #128]	@ (80041dc <handle_down_button_press+0x90>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b02      	cmp	r3, #2
 800415e:	dd03      	ble.n	8004168 <handle_down_button_press+0x1c>
		{
		   LCD_adc.menu_main = 0;
 8004160:	4b1e      	ldr	r3, [pc, #120]	@ (80041dc <handle_down_button_press+0x90>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e004      	b.n	8004172 <handle_down_button_press+0x26>
		}
		else
		{
		   LCD_adc.menu_main += 1;
 8004168:	4b1c      	ldr	r3, [pc, #112]	@ (80041dc <handle_down_button_press+0x90>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	4a1b      	ldr	r2, [pc, #108]	@ (80041dc <handle_down_button_press+0x90>)
 8004170:	6013      	str	r3, [r2, #0]
		}
		display_main();
 8004172:	f7ff f9df 	bl	8003534 <display_main>
		{
			LCD_adc.selected_menu4_item += 1;
		}
		menu_4();
	}
}
 8004176:	e02e      	b.n	80041d6 <handle_down_button_press+0x8a>
	else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 2)
 8004178:	4b18      	ldr	r3, [pc, #96]	@ (80041dc <handle_down_button_press+0x90>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d113      	bne.n	80041a8 <handle_down_button_press+0x5c>
 8004180:	4b16      	ldr	r3, [pc, #88]	@ (80041dc <handle_down_button_press+0x90>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d10f      	bne.n	80041a8 <handle_down_button_press+0x5c>
		if(LCD_adc.selected_menu3_item >= 2)
 8004188:	4b14      	ldr	r3, [pc, #80]	@ (80041dc <handle_down_button_press+0x90>)
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	2b01      	cmp	r3, #1
 800418e:	dd03      	ble.n	8004198 <handle_down_button_press+0x4c>
			LCD_adc.selected_menu3_item = 0;
 8004190:	4b12      	ldr	r3, [pc, #72]	@ (80041dc <handle_down_button_press+0x90>)
 8004192:	2200      	movs	r2, #0
 8004194:	615a      	str	r2, [r3, #20]
 8004196:	e004      	b.n	80041a2 <handle_down_button_press+0x56>
			LCD_adc.selected_menu3_item += 1;
 8004198:	4b10      	ldr	r3, [pc, #64]	@ (80041dc <handle_down_button_press+0x90>)
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	3301      	adds	r3, #1
 800419e:	4a0f      	ldr	r2, [pc, #60]	@ (80041dc <handle_down_button_press+0x90>)
 80041a0:	6153      	str	r3, [r2, #20]
		menu_3();
 80041a2:	f7ff fc03 	bl	80039ac <menu_3>
}
 80041a6:	e016      	b.n	80041d6 <handle_down_button_press+0x8a>
	else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 3)
 80041a8:	4b0c      	ldr	r3, [pc, #48]	@ (80041dc <handle_down_button_press+0x90>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d112      	bne.n	80041d6 <handle_down_button_press+0x8a>
 80041b0:	4b0a      	ldr	r3, [pc, #40]	@ (80041dc <handle_down_button_press+0x90>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d10e      	bne.n	80041d6 <handle_down_button_press+0x8a>
		if(LCD_adc.selected_menu4_item >= 1)
 80041b8:	4b08      	ldr	r3, [pc, #32]	@ (80041dc <handle_down_button_press+0x90>)
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	dd03      	ble.n	80041c8 <handle_down_button_press+0x7c>
			LCD_adc.selected_menu4_item = 0;
 80041c0:	4b06      	ldr	r3, [pc, #24]	@ (80041dc <handle_down_button_press+0x90>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	619a      	str	r2, [r3, #24]
 80041c6:	e004      	b.n	80041d2 <handle_down_button_press+0x86>
			LCD_adc.selected_menu4_item += 1;
 80041c8:	4b04      	ldr	r3, [pc, #16]	@ (80041dc <handle_down_button_press+0x90>)
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	3301      	adds	r3, #1
 80041ce:	4a03      	ldr	r2, [pc, #12]	@ (80041dc <handle_down_button_press+0x90>)
 80041d0:	6193      	str	r3, [r2, #24]
		menu_4();
 80041d2:	f7ff fd7f 	bl	8003cd4 <menu_4>
}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	2000075c 	.word	0x2000075c

080041e0 <handle_back_button_press>:

void handle_back_button_press(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
    LCD_adc.demback += 1;
 80041e4:	4b54      	ldr	r3, [pc, #336]	@ (8004338 <handle_back_button_press+0x158>)
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	3301      	adds	r3, #1
 80041ea:	4a53      	ldr	r2, [pc, #332]	@ (8004338 <handle_back_button_press+0x158>)
 80041ec:	6113      	str	r3, [r2, #16]
    if (LCD_adc.demback == 1)
 80041ee:	4b52      	ldr	r3, [pc, #328]	@ (8004338 <handle_back_button_press+0x158>)
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	f040 8099 	bne.w	800432a <handle_back_button_press+0x14a>
    {
       if (LCD_adc.demtong == 1 && (LCD_adc.menu_main == 0 || LCD_adc.menu_main == 1 || LCD_adc.menu_main == 2 || LCD_adc.menu_main == 3))
 80041f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004338 <handle_back_button_press+0x158>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d11a      	bne.n	8004236 <handle_back_button_press+0x56>
 8004200:	4b4d      	ldr	r3, [pc, #308]	@ (8004338 <handle_back_button_press+0x158>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00b      	beq.n	8004220 <handle_back_button_press+0x40>
 8004208:	4b4b      	ldr	r3, [pc, #300]	@ (8004338 <handle_back_button_press+0x158>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d007      	beq.n	8004220 <handle_back_button_press+0x40>
 8004210:	4b49      	ldr	r3, [pc, #292]	@ (8004338 <handle_back_button_press+0x158>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d003      	beq.n	8004220 <handle_back_button_press+0x40>
 8004218:	4b47      	ldr	r3, [pc, #284]	@ (8004338 <handle_back_button_press+0x158>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b03      	cmp	r3, #3
 800421e:	d10a      	bne.n	8004236 <handle_back_button_press+0x56>
       {
           LCD_adc.demtong -= 1;
 8004220:	4b45      	ldr	r3, [pc, #276]	@ (8004338 <handle_back_button_press+0x158>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	3b01      	subs	r3, #1
 8004226:	4a44      	ldr	r2, [pc, #272]	@ (8004338 <handle_back_button_press+0x158>)
 8004228:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 800422a:	4b43      	ldr	r3, [pc, #268]	@ (8004338 <handle_back_button_press+0x158>)
 800422c:	2200      	movs	r2, #0
 800422e:	611a      	str	r2, [r3, #16]
           display_menu();
 8004230:	f7ff f954 	bl	80034dc <display_menu>
 8004234:	e07d      	b.n	8004332 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 0) // From menu_1 back to display main_menu
 8004236:	4b40      	ldr	r3, [pc, #256]	@ (8004338 <handle_back_button_press+0x158>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d10e      	bne.n	800425c <handle_back_button_press+0x7c>
 800423e:	4b3e      	ldr	r3, [pc, #248]	@ (8004338 <handle_back_button_press+0x158>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10a      	bne.n	800425c <handle_back_button_press+0x7c>
       {
           LCD_adc.demtong -= 1;
 8004246:	4b3c      	ldr	r3, [pc, #240]	@ (8004338 <handle_back_button_press+0x158>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	3b01      	subs	r3, #1
 800424c:	4a3a      	ldr	r2, [pc, #232]	@ (8004338 <handle_back_button_press+0x158>)
 800424e:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 8004250:	4b39      	ldr	r3, [pc, #228]	@ (8004338 <handle_back_button_press+0x158>)
 8004252:	2200      	movs	r2, #0
 8004254:	611a      	str	r2, [r3, #16]
           display_main();
 8004256:	f7ff f96d 	bl	8003534 <display_main>
 800425a:	e06a      	b.n	8004332 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 1) // From menu_2 back to display main_menu
 800425c:	4b36      	ldr	r3, [pc, #216]	@ (8004338 <handle_back_button_press+0x158>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d10e      	bne.n	8004282 <handle_back_button_press+0xa2>
 8004264:	4b34      	ldr	r3, [pc, #208]	@ (8004338 <handle_back_button_press+0x158>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d10a      	bne.n	8004282 <handle_back_button_press+0xa2>
       {
           LCD_adc.demtong -= 1;
 800426c:	4b32      	ldr	r3, [pc, #200]	@ (8004338 <handle_back_button_press+0x158>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	3b01      	subs	r3, #1
 8004272:	4a31      	ldr	r2, [pc, #196]	@ (8004338 <handle_back_button_press+0x158>)
 8004274:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 8004276:	4b30      	ldr	r3, [pc, #192]	@ (8004338 <handle_back_button_press+0x158>)
 8004278:	2200      	movs	r2, #0
 800427a:	611a      	str	r2, [r3, #16]
           display_main();
 800427c:	f7ff f95a 	bl	8003534 <display_main>
 8004280:	e057      	b.n	8004332 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 2) // From menu_3 back to display main_menu
 8004282:	4b2d      	ldr	r3, [pc, #180]	@ (8004338 <handle_back_button_press+0x158>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d111      	bne.n	80042ae <handle_back_button_press+0xce>
 800428a:	4b2b      	ldr	r3, [pc, #172]	@ (8004338 <handle_back_button_press+0x158>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d10d      	bne.n	80042ae <handle_back_button_press+0xce>
       {
           LCD_adc.demtong -= 1;
 8004292:	4b29      	ldr	r3, [pc, #164]	@ (8004338 <handle_back_button_press+0x158>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	3b01      	subs	r3, #1
 8004298:	4a27      	ldr	r2, [pc, #156]	@ (8004338 <handle_back_button_press+0x158>)
 800429a:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 800429c:	4b26      	ldr	r3, [pc, #152]	@ (8004338 <handle_back_button_press+0x158>)
 800429e:	2200      	movs	r2, #0
 80042a0:	611a      	str	r2, [r3, #16]
           LCD_adc.demmenu_3 = 0;
 80042a2:	4b25      	ldr	r3, [pc, #148]	@ (8004338 <handle_back_button_press+0x158>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	61da      	str	r2, [r3, #28]
           display_main();
 80042a8:	f7ff f944 	bl	8003534 <display_main>
 80042ac:	e041      	b.n	8004332 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 3 && LCD_adc.demmenu_3 >= 1) // From select_menu3 back to menu_3
 80042ae:	4b22      	ldr	r3, [pc, #136]	@ (8004338 <handle_back_button_press+0x158>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d10f      	bne.n	80042d6 <handle_back_button_press+0xf6>
 80042b6:	4b20      	ldr	r3, [pc, #128]	@ (8004338 <handle_back_button_press+0x158>)
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	dd0b      	ble.n	80042d6 <handle_back_button_press+0xf6>
       {
           LCD_adc.demback = 0;
 80042be:	4b1e      	ldr	r3, [pc, #120]	@ (8004338 <handle_back_button_press+0x158>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	611a      	str	r2, [r3, #16]
           LCD_adc.demtong = 2;
 80042c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004338 <handle_back_button_press+0x158>)
 80042c6:	2202      	movs	r2, #2
 80042c8:	60da      	str	r2, [r3, #12]
           LCD_adc.selected_menu3_item = 0;
 80042ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004338 <handle_back_button_press+0x158>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	615a      	str	r2, [r3, #20]
           menu_3();
 80042d0:	f7ff fb6c 	bl	80039ac <menu_3>
 80042d4:	e02d      	b.n	8004332 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 3) // From menu_4 back to display main_menu
 80042d6:	4b18      	ldr	r3, [pc, #96]	@ (8004338 <handle_back_button_press+0x158>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d111      	bne.n	8004302 <handle_back_button_press+0x122>
 80042de:	4b16      	ldr	r3, [pc, #88]	@ (8004338 <handle_back_button_press+0x158>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d10d      	bne.n	8004302 <handle_back_button_press+0x122>
       {
           LCD_adc.demtong -= 1;
 80042e6:	4b14      	ldr	r3, [pc, #80]	@ (8004338 <handle_back_button_press+0x158>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	4a12      	ldr	r2, [pc, #72]	@ (8004338 <handle_back_button_press+0x158>)
 80042ee:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 80042f0:	4b11      	ldr	r3, [pc, #68]	@ (8004338 <handle_back_button_press+0x158>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	611a      	str	r2, [r3, #16]
           LCD_adc.demmenu_4 = 0;
 80042f6:	4b10      	ldr	r3, [pc, #64]	@ (8004338 <handle_back_button_press+0x158>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	621a      	str	r2, [r3, #32]
           display_main();
 80042fc:	f7ff f91a 	bl	8003534 <display_main>
 8004300:	e017      	b.n	8004332 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 3 && LCD_adc.demmenu_4 >= 1) // From select_menu4 back to menu_4
 8004302:	4b0d      	ldr	r3, [pc, #52]	@ (8004338 <handle_back_button_press+0x158>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	2b03      	cmp	r3, #3
 8004308:	d113      	bne.n	8004332 <handle_back_button_press+0x152>
 800430a:	4b0b      	ldr	r3, [pc, #44]	@ (8004338 <handle_back_button_press+0x158>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	2b00      	cmp	r3, #0
 8004310:	dd0f      	ble.n	8004332 <handle_back_button_press+0x152>
       {
           LCD_adc.demback = 0;
 8004312:	4b09      	ldr	r3, [pc, #36]	@ (8004338 <handle_back_button_press+0x158>)
 8004314:	2200      	movs	r2, #0
 8004316:	611a      	str	r2, [r3, #16]
           LCD_adc.demtong = 2;
 8004318:	4b07      	ldr	r3, [pc, #28]	@ (8004338 <handle_back_button_press+0x158>)
 800431a:	2202      	movs	r2, #2
 800431c:	60da      	str	r2, [r3, #12]
           LCD_adc.selected_menu4_item = 0;
 800431e:	4b06      	ldr	r3, [pc, #24]	@ (8004338 <handle_back_button_press+0x158>)
 8004320:	2200      	movs	r2, #0
 8004322:	619a      	str	r2, [r3, #24]
           menu_4();
 8004324:	f7ff fcd6 	bl	8003cd4 <menu_4>
    }
    else
    {
       LCD_adc.demback = 0;
    }
}
 8004328:	e003      	b.n	8004332 <handle_back_button_press+0x152>
       LCD_adc.demback = 0;
 800432a:	4b03      	ldr	r3, [pc, #12]	@ (8004338 <handle_back_button_press+0x158>)
 800432c:	2200      	movs	r2, #0
 800432e:	611a      	str	r2, [r3, #16]
}
 8004330:	e7ff      	b.n	8004332 <handle_back_button_press+0x152>
 8004332:	bf00      	nop
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	2000075c 	.word	0x2000075c

0800433c <handle_select_button_press>:

void handle_select_button_press(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
    LCD_adc.demtong += 1;
 8004340:	4b3c      	ldr	r3, [pc, #240]	@ (8004434 <handle_select_button_press+0xf8>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	3301      	adds	r3, #1
 8004346:	4a3b      	ldr	r2, [pc, #236]	@ (8004434 <handle_select_button_press+0xf8>)
 8004348:	60d3      	str	r3, [r2, #12]
    if (LCD_adc.demtong == 1) // in menu_main
 800434a:	4b3a      	ldr	r3, [pc, #232]	@ (8004434 <handle_select_button_press+0xf8>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d105      	bne.n	800435e <handle_select_button_press+0x22>
    {
       LCD_adc.demback = 0;
 8004352:	4b38      	ldr	r3, [pc, #224]	@ (8004434 <handle_select_button_press+0xf8>)
 8004354:	2200      	movs	r2, #0
 8004356:	611a      	str	r2, [r3, #16]
       display_main();
 8004358:	f7ff f8ec 	bl	8003534 <display_main>
    else if (LCD_adc.demtong > 3)
    {
       LCD_adc.demtong = 3;
       LCD_adc.demback = 0;
    }
}
 800435c:	e068      	b.n	8004430 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 0) // choose menu 1
 800435e:	4b35      	ldr	r3, [pc, #212]	@ (8004434 <handle_select_button_press+0xf8>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d109      	bne.n	800437a <handle_select_button_press+0x3e>
 8004366:	4b33      	ldr	r3, [pc, #204]	@ (8004434 <handle_select_button_press+0xf8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d105      	bne.n	800437a <handle_select_button_press+0x3e>
       LCD_adc.demback = 0;
 800436e:	4b31      	ldr	r3, [pc, #196]	@ (8004434 <handle_select_button_press+0xf8>)
 8004370:	2200      	movs	r2, #0
 8004372:	611a      	str	r2, [r3, #16]
       menu_1();
 8004374:	f7ff f980 	bl	8003678 <menu_1>
 8004378:	e05a      	b.n	8004430 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 1) // choose menu 2
 800437a:	4b2e      	ldr	r3, [pc, #184]	@ (8004434 <handle_select_button_press+0xf8>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d109      	bne.n	8004396 <handle_select_button_press+0x5a>
 8004382:	4b2c      	ldr	r3, [pc, #176]	@ (8004434 <handle_select_button_press+0xf8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d105      	bne.n	8004396 <handle_select_button_press+0x5a>
       LCD_adc.demback = 0;
 800438a:	4b2a      	ldr	r3, [pc, #168]	@ (8004434 <handle_select_button_press+0xf8>)
 800438c:	2200      	movs	r2, #0
 800438e:	611a      	str	r2, [r3, #16]
       menu_2();
 8004390:	f7ff fa68 	bl	8003864 <menu_2>
 8004394:	e04c      	b.n	8004430 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 2) // In menu 3
 8004396:	4b27      	ldr	r3, [pc, #156]	@ (8004434 <handle_select_button_press+0xf8>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d10e      	bne.n	80043bc <handle_select_button_press+0x80>
 800439e:	4b25      	ldr	r3, [pc, #148]	@ (8004434 <handle_select_button_press+0xf8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d10a      	bne.n	80043bc <handle_select_button_press+0x80>
       LCD_adc.demback = 0;
 80043a6:	4b23      	ldr	r3, [pc, #140]	@ (8004434 <handle_select_button_press+0xf8>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	611a      	str	r2, [r3, #16]
       menu_3();
 80043ac:	f7ff fafe 	bl	80039ac <menu_3>
       LCD_adc.demmenu_3 += 1;
 80043b0:	4b20      	ldr	r3, [pc, #128]	@ (8004434 <handle_select_button_press+0xf8>)
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	3301      	adds	r3, #1
 80043b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004434 <handle_select_button_press+0xf8>)
 80043b8:	61d3      	str	r3, [r2, #28]
 80043ba:	e039      	b.n	8004430 <handle_select_button_press+0xf4>
    else if(LCD_adc.demtong == 3 && LCD_adc.demmenu_3 == 1)//choose menu 3
 80043bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004434 <handle_select_button_press+0xf8>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d109      	bne.n	80043d8 <handle_select_button_press+0x9c>
 80043c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004434 <handle_select_button_press+0xf8>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d105      	bne.n	80043d8 <handle_select_button_press+0x9c>
        LCD_adc.demback = 0;
 80043cc:	4b19      	ldr	r3, [pc, #100]	@ (8004434 <handle_select_button_press+0xf8>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	611a      	str	r2, [r3, #16]
       select_menu3();
 80043d2:	f7ff fb51 	bl	8003a78 <select_menu3>
 80043d6:	e02b      	b.n	8004430 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 3) // In menu 4
 80043d8:	4b16      	ldr	r3, [pc, #88]	@ (8004434 <handle_select_button_press+0xf8>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d10e      	bne.n	80043fe <handle_select_button_press+0xc2>
 80043e0:	4b14      	ldr	r3, [pc, #80]	@ (8004434 <handle_select_button_press+0xf8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d10a      	bne.n	80043fe <handle_select_button_press+0xc2>
       LCD_adc.demback = 0;
 80043e8:	4b12      	ldr	r3, [pc, #72]	@ (8004434 <handle_select_button_press+0xf8>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
       menu_4();
 80043ee:	f7ff fc71 	bl	8003cd4 <menu_4>
       LCD_adc.demmenu_4 += 1;
 80043f2:	4b10      	ldr	r3, [pc, #64]	@ (8004434 <handle_select_button_press+0xf8>)
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	3301      	adds	r3, #1
 80043f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004434 <handle_select_button_press+0xf8>)
 80043fa:	6213      	str	r3, [r2, #32]
 80043fc:	e018      	b.n	8004430 <handle_select_button_press+0xf4>
    else if(LCD_adc.demtong == 3 && LCD_adc.demmenu_4 == 1)//choose menu 4
 80043fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004434 <handle_select_button_press+0xf8>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	2b03      	cmp	r3, #3
 8004404:	d109      	bne.n	800441a <handle_select_button_press+0xde>
 8004406:	4b0b      	ldr	r3, [pc, #44]	@ (8004434 <handle_select_button_press+0xf8>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d105      	bne.n	800441a <handle_select_button_press+0xde>
       LCD_adc.demback = 0;
 800440e:	4b09      	ldr	r3, [pc, #36]	@ (8004434 <handle_select_button_press+0xf8>)
 8004410:	2200      	movs	r2, #0
 8004412:	611a      	str	r2, [r3, #16]
       select_menu4();
 8004414:	f7ff fc9a 	bl	8003d4c <select_menu4>
 8004418:	e00a      	b.n	8004430 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong > 3)
 800441a:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <handle_select_button_press+0xf8>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2b03      	cmp	r3, #3
 8004420:	dd06      	ble.n	8004430 <handle_select_button_press+0xf4>
       LCD_adc.demtong = 3;
 8004422:	4b04      	ldr	r3, [pc, #16]	@ (8004434 <handle_select_button_press+0xf8>)
 8004424:	2203      	movs	r2, #3
 8004426:	60da      	str	r2, [r3, #12]
       LCD_adc.demback = 0;
 8004428:	4b02      	ldr	r3, [pc, #8]	@ (8004434 <handle_select_button_press+0xf8>)
 800442a:	2200      	movs	r2, #0
 800442c:	611a      	str	r2, [r3, #16]
}
 800442e:	e7ff      	b.n	8004430 <handle_select_button_press+0xf4>
 8004430:	bf00      	nop
 8004432:	bd80      	pop	{r7, pc}
 8004434:	2000075c 	.word	0x2000075c

08004438 <handle_reset_button_press>:

void handle_reset_button_press(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
    if (state.reset_press == 1)
 800443c:	4b05      	ldr	r3, [pc, #20]	@ (8004454 <handle_reset_button_press+0x1c>)
 800443e:	789b      	ldrb	r3, [r3, #2]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b01      	cmp	r3, #1
 8004444:	d104      	bne.n	8004450 <handle_reset_button_press+0x18>
    {
        resetProgram();
 8004446:	f000 f849 	bl	80044dc <resetProgram>
        // when reseted, restarted again
        state.reset_press = 0;
 800444a:	4b02      	ldr	r3, [pc, #8]	@ (8004454 <handle_reset_button_press+0x1c>)
 800444c:	2200      	movs	r2, #0
 800444e:	709a      	strb	r2, [r3, #2]
    }
}
 8004450:	bf00      	nop
 8004452:	bd80      	pop	{r7, pc}
 8004454:	200008c8 	.word	0x200008c8

08004458 <handle_start_button_press>:

void handle_start_button_press(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
    if (state.reset_press == 0)
 800445c:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <handle_start_button_press+0x3c>)
 800445e:	789b      	ldrb	r3, [r3, #2]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d113      	bne.n	800448e <handle_start_button_press+0x36>
    {
    	state.start_press = 1;
 8004466:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <handle_start_button_press+0x3c>)
 8004468:	2201      	movs	r2, #1
 800446a:	701a      	strb	r2, [r3, #0]
    	state.stop_press = 0;
 800446c:	4b09      	ldr	r3, [pc, #36]	@ (8004494 <handle_start_button_press+0x3c>)
 800446e:	2200      	movs	r2, #0
 8004470:	705a      	strb	r2, [r3, #1]
        HAL_GPIO_WritePin(drill_port, drill_pin, 1);
 8004472:	2201      	movs	r2, #1
 8004474:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004478:	4807      	ldr	r0, [pc, #28]	@ (8004498 <handle_start_button_press+0x40>)
 800447a:	f001 ff43 	bl	8006304 <HAL_GPIO_WritePin>
    	HAL_UART_Transmit(&huart2, (uint8_t*)"IP\n", 3, 10);
 800447e:	230a      	movs	r3, #10
 8004480:	2203      	movs	r2, #3
 8004482:	4906      	ldr	r1, [pc, #24]	@ (800449c <handle_start_button_press+0x44>)
 8004484:	4806      	ldr	r0, [pc, #24]	@ (80044a0 <handle_start_button_press+0x48>)
 8004486:	f005 fab5 	bl	80099f4 <HAL_UART_Transmit>
    	StartProgram();
 800448a:	f000 f90d 	bl	80046a8 <StartProgram>
    }
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	200008c8 	.word	0x200008c8
 8004498:	40020400 	.word	0x40020400
 800449c:	08014728 	.word	0x08014728
 80044a0:	20000a80 	.word	0x20000a80

080044a4 <handle_stop_button_press>:

void handle_stop_button_press(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
    if (state.reset_press == 0)
 80044a8:	4b0a      	ldr	r3, [pc, #40]	@ (80044d4 <handle_stop_button_press+0x30>)
 80044aa:	789b      	ldrb	r3, [r3, #2]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10d      	bne.n	80044ce <handle_stop_button_press+0x2a>
    {
    	state.stop_press = 1;
 80044b2:	4b08      	ldr	r3, [pc, #32]	@ (80044d4 <handle_stop_button_press+0x30>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	705a      	strb	r2, [r3, #1]
        HAL_GPIO_WritePin(drill_port, drill_pin, 0);
 80044b8:	2200      	movs	r2, #0
 80044ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80044be:	4806      	ldr	r0, [pc, #24]	@ (80044d8 <handle_stop_button_press+0x34>)
 80044c0:	f001 ff20 	bl	8006304 <HAL_GPIO_WritePin>
        StopProgram();
 80044c4:	f000 f8d8 	bl	8004678 <StopProgram>
        // Sau khi dừng, chỉ cho phép nhấn nút reset
        state.reset_press = 1;
 80044c8:	4b02      	ldr	r3, [pc, #8]	@ (80044d4 <handle_stop_button_press+0x30>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	709a      	strb	r2, [r3, #2]
    }
}
 80044ce:	bf00      	nop
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	200008c8 	.word	0x200008c8
 80044d8:	40020400 	.word	0x40020400

080044dc <resetProgram>:

void resetProgram(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
	state.start_press = 0;
 80044e0:	4b5a      	ldr	r3, [pc, #360]	@ (800464c <resetProgram+0x170>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
	state.stop_press = 1;
 80044e6:	4b59      	ldr	r3, [pc, #356]	@ (800464c <resetProgram+0x170>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	705a      	strb	r2, [r3, #1]
    // reset var
    lcd_clear();
 80044ec:	f7fe fa4a 	bl	8002984 <lcd_clear>
    lcd_put_cur(1, 2);
 80044f0:	2102      	movs	r1, #2
 80044f2:	2001      	movs	r0, #1
 80044f4:	f7fe fa5e 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("PROGRAM RESETING");
 80044f8:	4855      	ldr	r0, [pc, #340]	@ (8004650 <resetProgram+0x174>)
 80044fa:	f7fe faad 	bl	8002a58 <lcd_send_string>
    LCD_adc.demtong = 0;
 80044fe:	4b55      	ldr	r3, [pc, #340]	@ (8004654 <resetProgram+0x178>)
 8004500:	2200      	movs	r2, #0
 8004502:	60da      	str	r2, [r3, #12]
    LCD_adc.demback = 0;
 8004504:	4b53      	ldr	r3, [pc, #332]	@ (8004654 <resetProgram+0x178>)
 8004506:	2200      	movs	r2, #0
 8004508:	611a      	str	r2, [r3, #16]
    LCD_adc.menu_main = 0;
 800450a:	4b52      	ldr	r3, [pc, #328]	@ (8004654 <resetProgram+0x178>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
    LCD_adc.selected_menu3_item = 0;
 8004510:	4b50      	ldr	r3, [pc, #320]	@ (8004654 <resetProgram+0x178>)
 8004512:	2200      	movs	r2, #0
 8004514:	615a      	str	r2, [r3, #20]
    LCD_adc.selected_menu4_item = 0;
 8004516:	4b4f      	ldr	r3, [pc, #316]	@ (8004654 <resetProgram+0x178>)
 8004518:	2200      	movs	r2, #0
 800451a:	619a      	str	r2, [r3, #24]
    LCD_adc.demmenu_3 = 0;
 800451c:	4b4d      	ldr	r3, [pc, #308]	@ (8004654 <resetProgram+0x178>)
 800451e:	2200      	movs	r2, #0
 8004520:	61da      	str	r2, [r3, #28]
    LCD_adc.demmenu_4 = 0;
 8004522:	4b4c      	ldr	r3, [pc, #304]	@ (8004654 <resetProgram+0x178>)
 8004524:	2200      	movs	r2, #0
 8004526:	621a      	str	r2, [r3, #32]
    LCD_adc.typeX_value = 0;
 8004528:	4b4a      	ldr	r3, [pc, #296]	@ (8004654 <resetProgram+0x178>)
 800452a:	2200      	movs	r2, #0
 800452c:	625a      	str	r2, [r3, #36]	@ 0x24
    LCD_adc.typeY_value = 0;
 800452e:	4b49      	ldr	r3, [pc, #292]	@ (8004654 <resetProgram+0x178>)
 8004530:	2200      	movs	r2, #0
 8004532:	629a      	str	r2, [r3, #40]	@ 0x28
    LCD_adc.typeZ_value = 0;
 8004534:	4b47      	ldr	r3, [pc, #284]	@ (8004654 <resetProgram+0x178>)
 8004536:	2200      	movs	r2, #0
 8004538:	62da      	str	r2, [r3, #44]	@ 0x2c
    LCD_adc.speed_valueXY = 0;
 800453a:	4b46      	ldr	r3, [pc, #280]	@ (8004654 <resetProgram+0x178>)
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	@ 0x30
    LCD_adc.speed_valueZ = 0;
 8004540:	4b44      	ldr	r3, [pc, #272]	@ (8004654 <resetProgram+0x178>)
 8004542:	2200      	movs	r2, #0
 8004544:	635a      	str	r2, [r3, #52]	@ 0x34
    LCD_adc.voltage = 0;
 8004546:	4b43      	ldr	r3, [pc, #268]	@ (8004654 <resetProgram+0x178>)
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	655a      	str	r2, [r3, #84]	@ 0x54
    LCD_adc.current = 0;
 800454e:	4b41      	ldr	r3, [pc, #260]	@ (8004654 <resetProgram+0x178>)
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	651a      	str	r2, [r3, #80]	@ 0x50
    LCD_adc.power = 0;
 8004556:	4b3f      	ldr	r3, [pc, #252]	@ (8004654 <resetProgram+0x178>)
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	65da      	str	r2, [r3, #92]	@ 0x5c
    LCD_adc.temp = 0;
 800455e:	4b3d      	ldr	r3, [pc, #244]	@ (8004654 <resetProgram+0x178>)
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	659a      	str	r2, [r3, #88]	@ 0x58
    Stepper1.accel_count = 0;
 8004566:	4b3c      	ldr	r3, [pc, #240]	@ (8004658 <resetProgram+0x17c>)
 8004568:	2200      	movs	r2, #0
 800456a:	615a      	str	r2, [r3, #20]
    Stepper2.accel_count = 0;
 800456c:	4b3b      	ldr	r3, [pc, #236]	@ (800465c <resetProgram+0x180>)
 800456e:	2200      	movs	r2, #0
 8004570:	615a      	str	r2, [r3, #20]
    Stepper3.accel_count = 0;
 8004572:	4b3b      	ldr	r3, [pc, #236]	@ (8004660 <resetProgram+0x184>)
 8004574:	2200      	movs	r2, #0
 8004576:	615a      	str	r2, [r3, #20]
    CNC_pos.x = 0;
 8004578:	4b3a      	ldr	r3, [pc, #232]	@ (8004664 <resetProgram+0x188>)
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	609a      	str	r2, [r3, #8]
    CNC_pos.y = 0;
 8004580:	4b38      	ldr	r3, [pc, #224]	@ (8004664 <resetProgram+0x188>)
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	60da      	str	r2, [r3, #12]
    CNC_pos.z = 0;
 8004588:	4b36      	ldr	r3, [pc, #216]	@ (8004664 <resetProgram+0x188>)
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	611a      	str	r2, [r3, #16]
    CNC_pos.MoveX = 0;
 8004590:	4b34      	ldr	r3, [pc, #208]	@ (8004664 <resetProgram+0x188>)
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	615a      	str	r2, [r3, #20]
    CNC_pos.MoveY = 0;
 8004598:	4b32      	ldr	r3, [pc, #200]	@ (8004664 <resetProgram+0x188>)
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	619a      	str	r2, [r3, #24]
    CNC_pos.MoveZ = 0;
 80045a0:	4b30      	ldr	r3, [pc, #192]	@ (8004664 <resetProgram+0x188>)
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	61da      	str	r2, [r3, #28]
    CNC.pos_x = 0;
 80045a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004668 <resetProgram+0x18c>)
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	60da      	str	r2, [r3, #12]
    CNC.pos_y = 0;
 80045b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004668 <resetProgram+0x18c>)
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	611a      	str	r2, [r3, #16]
    CNC.pos_z = 0;
 80045b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004668 <resetProgram+0x18c>)
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	615a      	str	r2, [r3, #20]
    CNC.set_posX = 0;
 80045c0:	4b29      	ldr	r3, [pc, #164]	@ (8004668 <resetProgram+0x18c>)
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
    CNC.set_posY = 0;
 80045c8:	4b27      	ldr	r3, [pc, #156]	@ (8004668 <resetProgram+0x18c>)
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	605a      	str	r2, [r3, #4]
    CNC.set_posZ = 0;
 80045d0:	4b25      	ldr	r3, [pc, #148]	@ (8004668 <resetProgram+0x18c>)
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	609a      	str	r2, [r3, #8]

    __HAL_TIM_SET_AUTORELOAD(Stepper1.htim, 1000);
 80045d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004658 <resetProgram+0x17c>)
 80045da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80045e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004658 <resetProgram+0x17c>)
 80045e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045ec:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_AUTORELOAD(Stepper2.htim, 1000);
 80045ee:	4b1b      	ldr	r3, [pc, #108]	@ (800465c <resetProgram+0x180>)
 80045f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80045fa:	4b18      	ldr	r3, [pc, #96]	@ (800465c <resetProgram+0x180>)
 80045fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004602:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_AUTORELOAD(Stepper3.htim, 1000);
 8004604:	4b16      	ldr	r3, [pc, #88]	@ (8004660 <resetProgram+0x184>)
 8004606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800460e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004610:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <resetProgram+0x184>)
 8004612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004614:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004618:	60da      	str	r2, [r3, #12]
    // Reset hardware
    initialize_LCD(&LCD_adc);
 800461a:	480e      	ldr	r0, [pc, #56]	@ (8004654 <resetProgram+0x178>)
 800461c:	f7fe fafa 	bl	8002c14 <initialize_LCD>
    initialize_Kalman(&kalman_fil_curr);
 8004620:	4812      	ldr	r0, [pc, #72]	@ (800466c <resetProgram+0x190>)
 8004622:	f7fe fb23 	bl	8002c6c <initialize_Kalman>
    initialize_Kalman(&kalman_fil_volt);
 8004626:	4812      	ldr	r0, [pc, #72]	@ (8004670 <resetProgram+0x194>)
 8004628:	f7fe fb20 	bl	8002c6c <initialize_Kalman>
    initializeCNC_pos(&CNC_pos);
 800462c:	480d      	ldr	r0, [pc, #52]	@ (8004664 <resetProgram+0x188>)
 800462e:	f7fc ff47 	bl	80014c0 <initializeCNC_pos>
    // add code here
    /*
     * code here
     *
     * */
    HOME();
 8004632:	f7fd fc07 	bl	8001e44 <HOME>
    // Start display lcd
    lcd_clear();
 8004636:	f7fe f9a5 	bl	8002984 <lcd_clear>
    lcd_put_cur(1, 2);
 800463a:	2102      	movs	r1, #2
 800463c:	2001      	movs	r0, #1
 800463e:	f7fe f9b9 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("PROGRAM  RESETED");
 8004642:	480c      	ldr	r0, [pc, #48]	@ (8004674 <resetProgram+0x198>)
 8004644:	f7fe fa08 	bl	8002a58 <lcd_send_string>
}
 8004648:	bf00      	nop
 800464a:	bd80      	pop	{r7, pc}
 800464c:	200008c8 	.word	0x200008c8
 8004650:	0801472c 	.word	0x0801472c
 8004654:	2000075c 	.word	0x2000075c
 8004658:	200002ac 	.word	0x200002ac
 800465c:	200002e4 	.word	0x200002e4
 8004660:	2000031c 	.word	0x2000031c
 8004664:	20000698 	.word	0x20000698
 8004668:	200006f0 	.word	0x200006f0
 800466c:	20000828 	.word	0x20000828
 8004670:	20000878 	.word	0x20000878
 8004674:	08014740 	.word	0x08014740

08004678 <StopProgram>:

void StopProgram(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
	state.start_press = 0;
 800467c:	4b08      	ldr	r3, [pc, #32]	@ (80046a0 <StopProgram+0x28>)
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
    lcd_clear();
 8004682:	f7fe f97f 	bl	8002984 <lcd_clear>
    lcd_put_cur(1, 2);
 8004686:	2102      	movs	r1, #2
 8004688:	2001      	movs	r0, #1
 800468a:	f7fe f993 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("PROGRAM  STOPPED");
 800468e:	4805      	ldr	r0, [pc, #20]	@ (80046a4 <StopProgram+0x2c>)
 8004690:	f7fe f9e2 	bl	8002a58 <lcd_send_string>
    lcd_put_cur(3, 0);
 8004694:	2100      	movs	r1, #0
 8004696:	2003      	movs	r0, #3
 8004698:	f7fe f98c 	bl	80029b4 <lcd_put_cur>
}
 800469c:	bf00      	nop
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	200008c8 	.word	0x200008c8
 80046a4:	08014754 	.word	0x08014754

080046a8 <StartProgram>:

void StartProgram(void){
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
    lcd_clear();
 80046ac:	f7fe f96a 	bl	8002984 <lcd_clear>
    lcd_put_cur(1, 3);
 80046b0:	2103      	movs	r1, #3
 80046b2:	2001      	movs	r0, #1
 80046b4:	f7fe f97e 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("PROGRAM  START");
 80046b8:	4809      	ldr	r0, [pc, #36]	@ (80046e0 <StartProgram+0x38>)
 80046ba:	f7fe f9cd 	bl	8002a58 <lcd_send_string>
    lcd_put_cur(2, 0);
 80046be:	2100      	movs	r1, #0
 80046c0:	2002      	movs	r0, #2
 80046c2:	f7fe f977 	bl	80029b4 <lcd_put_cur>
    lcd_send_string("IP ADD:");
 80046c6:	4807      	ldr	r0, [pc, #28]	@ (80046e4 <StartProgram+0x3c>)
 80046c8:	f7fe f9c6 	bl	8002a58 <lcd_send_string>
    lcd_put_cur(2, 7);
 80046cc:	2107      	movs	r1, #7
 80046ce:	2002      	movs	r0, #2
 80046d0:	f7fe f970 	bl	80029b4 <lcd_put_cur>
    lcd_send_string(ip_config);
 80046d4:	4804      	ldr	r0, [pc, #16]	@ (80046e8 <StartProgram+0x40>)
 80046d6:	f7fe f9bf 	bl	8002a58 <lcd_send_string>
}
 80046da:	bf00      	nop
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	08014768 	.word	0x08014768
 80046e4:	08014778 	.word	0x08014778
 80046e8:	20000654 	.word	0x20000654

080046ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	4b16      	ldr	r3, [pc, #88]	@ (8004750 <HAL_MspInit+0x64>)
 80046f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fa:	4a15      	ldr	r2, [pc, #84]	@ (8004750 <HAL_MspInit+0x64>)
 80046fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004700:	6453      	str	r3, [r2, #68]	@ 0x44
 8004702:	4b13      	ldr	r3, [pc, #76]	@ (8004750 <HAL_MspInit+0x64>)
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800470e:	2300      	movs	r3, #0
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	4b0f      	ldr	r3, [pc, #60]	@ (8004750 <HAL_MspInit+0x64>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	4a0e      	ldr	r2, [pc, #56]	@ (8004750 <HAL_MspInit+0x64>)
 8004718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800471c:	6413      	str	r3, [r2, #64]	@ 0x40
 800471e:	4b0c      	ldr	r3, [pc, #48]	@ (8004750 <HAL_MspInit+0x64>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800472a:	2200      	movs	r2, #0
 800472c:	210f      	movs	r1, #15
 800472e:	f06f 0001 	mvn.w	r0, #1
 8004732:	f001 fb5c 	bl	8005dee <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8004736:	2200      	movs	r2, #0
 8004738:	2105      	movs	r1, #5
 800473a:	2001      	movs	r0, #1
 800473c:	f001 fb57 	bl	8005dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8004740:	2001      	movs	r0, #1
 8004742:	f001 fb70 	bl	8005e26 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800

08004754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004758:	bf00      	nop
 800475a:	e7fd      	b.n	8004758 <NMI_Handler+0x4>

0800475c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004760:	bf00      	nop
 8004762:	e7fd      	b.n	8004760 <HardFault_Handler+0x4>

08004764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004768:	bf00      	nop
 800476a:	e7fd      	b.n	8004768 <MemManage_Handler+0x4>

0800476c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004770:	bf00      	nop
 8004772:	e7fd      	b.n	8004770 <BusFault_Handler+0x4>

08004774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004778:	bf00      	nop
 800477a:	e7fd      	b.n	8004778 <UsageFault_Handler+0x4>

0800477c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800478e:	f000 fcd7 	bl	8005140 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004792:	f008 fcbf 	bl	800d114 <xTaskGetSchedulerState>
 8004796:	4603      	mov	r3, r0
 8004798:	2b01      	cmp	r3, #1
 800479a:	d001      	beq.n	80047a0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800479c:	f009 fbb4 	bl	800df08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047a0:	bf00      	nop
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80047a8:	f003 ff7e 	bl	80086a8 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80047ac:	bf00      	nop
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80047b4:	2010      	movs	r0, #16
 80047b6:	f001 fdd9 	bl	800636c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80047ba:	bf00      	nop
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80047c4:	4802      	ldr	r0, [pc, #8]	@ (80047d0 <ADC_IRQHandler+0x10>)
 80047c6:	f000 fed3 	bl	8005570 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000354 	.word	0x20000354

080047d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80047d8:	2040      	movs	r0, #64	@ 0x40
 80047da:	f001 fdc7 	bl	800636c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80047de:	2080      	movs	r0, #128	@ 0x80
 80047e0:	f001 fdc4 	bl	800636c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80047e4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80047e8:	f001 fdc0 	bl	800636c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80047ec:	bf00      	nop
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047f4:	4802      	ldr	r0, [pc, #8]	@ (8004800 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80047f6:	f004 fcf8 	bl	80091ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	200008d0 	.word	0x200008d0

08004804 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004808:	4802      	ldr	r0, [pc, #8]	@ (8004814 <TIM2_IRQHandler+0x10>)
 800480a:	f004 fcee 	bl	80091ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800480e:	bf00      	nop
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20000918 	.word	0x20000918

08004818 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800481c:	4802      	ldr	r0, [pc, #8]	@ (8004828 <TIM3_IRQHandler+0x10>)
 800481e:	f004 fce4 	bl	80091ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004822:	bf00      	nop
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20000960 	.word	0x20000960

0800482c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004830:	4802      	ldr	r0, [pc, #8]	@ (800483c <TIM4_IRQHandler+0x10>)
 8004832:	f004 fcda 	bl	80091ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	200009a8 	.word	0x200009a8

08004840 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004844:	4802      	ldr	r0, [pc, #8]	@ (8004850 <I2C1_EV_IRQHandler+0x10>)
 8004846:	f002 f801 	bl	800684c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000708 	.word	0x20000708

08004854 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004858:	4802      	ldr	r0, [pc, #8]	@ (8004864 <I2C1_ER_IRQHandler+0x10>)
 800485a:	f002 f94a 	bl	8006af2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800485e:	bf00      	nop
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000708 	.word	0x20000708

08004868 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800486c:	4802      	ldr	r0, [pc, #8]	@ (8004878 <USART2_IRQHandler+0x10>)
 800486e:	f005 f9a7 	bl	8009bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004872:	bf00      	nop
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000a80 	.word	0x20000a80

0800487c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004880:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004884:	f001 fd72 	bl	800636c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004888:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800488c:	f001 fd6e 	bl	800636c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004890:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004894:	f001 fd6a 	bl	800636c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004898:	bf00      	nop
 800489a:	bd80      	pop	{r7, pc}

0800489c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80048a0:	4802      	ldr	r0, [pc, #8]	@ (80048ac <TIM5_IRQHandler+0x10>)
 80048a2:	f004 fca2 	bl	80091ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	200009f0 	.word	0x200009f0

080048b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80048b4:	4802      	ldr	r0, [pc, #8]	@ (80048c0 <TIM6_DAC_IRQHandler+0x10>)
 80048b6:	f004 fc98 	bl	80091ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048ba:	bf00      	nop
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000a38 	.word	0x20000a38

080048c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  return 1;
 80048c8:	2301      	movs	r3, #1
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <_kill>:

int _kill(int pid, int sig)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80048de:	f00a ff91 	bl	800f804 <__errno>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2216      	movs	r2, #22
 80048e6:	601a      	str	r2, [r3, #0]
  return -1;
 80048e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <_exit>:

void _exit (int status)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80048fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff ffe7 	bl	80048d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004906:	bf00      	nop
 8004908:	e7fd      	b.n	8004906 <_exit+0x12>

0800490a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b086      	sub	sp, #24
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	e00a      	b.n	8004932 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800491c:	f3af 8000 	nop.w
 8004920:	4601      	mov	r1, r0
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	60ba      	str	r2, [r7, #8]
 8004928:	b2ca      	uxtb	r2, r1
 800492a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	3301      	adds	r3, #1
 8004930:	617b      	str	r3, [r7, #20]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	dbf0      	blt.n	800491c <_read+0x12>
  }

  return len;
 800493a:	687b      	ldr	r3, [r7, #4]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800494c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004950:	4618      	mov	r0, r3
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800496c:	605a      	str	r2, [r3, #4]
  return 0;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <_isatty>:

int _isatty(int file)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004984:	2301      	movs	r3, #1
}
 8004986:	4618      	mov	r0, r3
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004992:	b480      	push	{r7}
 8004994:	b085      	sub	sp, #20
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049b4:	4a14      	ldr	r2, [pc, #80]	@ (8004a08 <_sbrk+0x5c>)
 80049b6:	4b15      	ldr	r3, [pc, #84]	@ (8004a0c <_sbrk+0x60>)
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049c0:	4b13      	ldr	r3, [pc, #76]	@ (8004a10 <_sbrk+0x64>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049c8:	4b11      	ldr	r3, [pc, #68]	@ (8004a10 <_sbrk+0x64>)
 80049ca:	4a12      	ldr	r2, [pc, #72]	@ (8004a14 <_sbrk+0x68>)
 80049cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049ce:	4b10      	ldr	r3, [pc, #64]	@ (8004a10 <_sbrk+0x64>)
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4413      	add	r3, r2
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d207      	bcs.n	80049ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049dc:	f00a ff12 	bl	800f804 <__errno>
 80049e0:	4603      	mov	r3, r0
 80049e2:	220c      	movs	r2, #12
 80049e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049e6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ea:	e009      	b.n	8004a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049ec:	4b08      	ldr	r3, [pc, #32]	@ (8004a10 <_sbrk+0x64>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049f2:	4b07      	ldr	r3, [pc, #28]	@ (8004a10 <_sbrk+0x64>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	4a05      	ldr	r2, [pc, #20]	@ (8004a10 <_sbrk+0x64>)
 80049fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80049fe:	68fb      	ldr	r3, [r7, #12]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20020000 	.word	0x20020000
 8004a0c:	00000400 	.word	0x00000400
 8004a10:	200008cc 	.word	0x200008cc
 8004a14:	20005568 	.word	0x20005568

08004a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a1c:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <SystemInit+0x20>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a22:	4a05      	ldr	r2, [pc, #20]	@ (8004a38 <SystemInit+0x20>)
 8004a24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a2c:	bf00      	nop
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	e000ed00 	.word	0xe000ed00

08004a3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a42:	f107 0308 	add.w	r3, r7, #8
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	605a      	str	r2, [r3, #4]
 8004a4c:	609a      	str	r2, [r3, #8]
 8004a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a50:	463b      	mov	r3, r7
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004a58:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad4 <MX_TIM1_Init+0x98>)
 8004a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad8 <MX_TIM1_Init+0x9c>)
 8004a5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8004a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad4 <MX_TIM1_Init+0x98>)
 8004a60:	2253      	movs	r2, #83	@ 0x53
 8004a62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a64:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad4 <MX_TIM1_Init+0x98>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8004a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad4 <MX_TIM1_Init+0x98>)
 8004a6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a72:	4b18      	ldr	r3, [pc, #96]	@ (8004ad4 <MX_TIM1_Init+0x98>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a78:	4b16      	ldr	r3, [pc, #88]	@ (8004ad4 <MX_TIM1_Init+0x98>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ad4 <MX_TIM1_Init+0x98>)
 8004a80:	2280      	movs	r2, #128	@ 0x80
 8004a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004a84:	4813      	ldr	r0, [pc, #76]	@ (8004ad4 <MX_TIM1_Init+0x98>)
 8004a86:	f004 fac1 	bl	800900c <HAL_TIM_Base_Init>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004a90:	f7fe f8ba 	bl	8002c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004a9a:	f107 0308 	add.w	r3, r7, #8
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	480c      	ldr	r0, [pc, #48]	@ (8004ad4 <MX_TIM1_Init+0x98>)
 8004aa2:	f004 fc92 	bl	80093ca <HAL_TIM_ConfigClockSource>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004aac:	f7fe f8ac 	bl	8002c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ab8:	463b      	mov	r3, r7
 8004aba:	4619      	mov	r1, r3
 8004abc:	4805      	ldr	r0, [pc, #20]	@ (8004ad4 <MX_TIM1_Init+0x98>)
 8004abe:	f004 feb9 	bl	8009834 <HAL_TIMEx_MasterConfigSynchronization>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004ac8:	f7fe f89e 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004acc:	bf00      	nop
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	200008d0 	.word	0x200008d0
 8004ad8:	40010000 	.word	0x40010000

08004adc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ae2:	f107 0308 	add.w	r3, r7, #8
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	605a      	str	r2, [r3, #4]
 8004aec:	609a      	str	r2, [r3, #8]
 8004aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004af0:	463b      	mov	r3, r7
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004af8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b70 <MX_TIM2_Init+0x94>)
 8004afa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004afe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8004b00:	4b1b      	ldr	r3, [pc, #108]	@ (8004b70 <MX_TIM2_Init+0x94>)
 8004b02:	22a7      	movs	r2, #167	@ 0xa7
 8004b04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b06:	4b1a      	ldr	r3, [pc, #104]	@ (8004b70 <MX_TIM2_Init+0x94>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8004b0c:	4b18      	ldr	r3, [pc, #96]	@ (8004b70 <MX_TIM2_Init+0x94>)
 8004b0e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b14:	4b16      	ldr	r3, [pc, #88]	@ (8004b70 <MX_TIM2_Init+0x94>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b1a:	4b15      	ldr	r3, [pc, #84]	@ (8004b70 <MX_TIM2_Init+0x94>)
 8004b1c:	2280      	movs	r2, #128	@ 0x80
 8004b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004b20:	4813      	ldr	r0, [pc, #76]	@ (8004b70 <MX_TIM2_Init+0x94>)
 8004b22:	f004 fa73 	bl	800900c <HAL_TIM_Base_Init>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004b2c:	f7fe f86c 	bl	8002c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004b36:	f107 0308 	add.w	r3, r7, #8
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	480c      	ldr	r0, [pc, #48]	@ (8004b70 <MX_TIM2_Init+0x94>)
 8004b3e:	f004 fc44 	bl	80093ca <HAL_TIM_ConfigClockSource>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004b48:	f7fe f85e 	bl	8002c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b50:	2300      	movs	r3, #0
 8004b52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b54:	463b      	mov	r3, r7
 8004b56:	4619      	mov	r1, r3
 8004b58:	4805      	ldr	r0, [pc, #20]	@ (8004b70 <MX_TIM2_Init+0x94>)
 8004b5a:	f004 fe6b 	bl	8009834 <HAL_TIMEx_MasterConfigSynchronization>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004b64:	f7fe f850 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004b68:	bf00      	nop
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000918 	.word	0x20000918

08004b74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b7a:	f107 0308 	add.w	r3, r7, #8
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	605a      	str	r2, [r3, #4]
 8004b84:	609a      	str	r2, [r3, #8]
 8004b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b88:	463b      	mov	r3, r7
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b90:	4b1d      	ldr	r3, [pc, #116]	@ (8004c08 <MX_TIM3_Init+0x94>)
 8004b92:	4a1e      	ldr	r2, [pc, #120]	@ (8004c0c <MX_TIM3_Init+0x98>)
 8004b94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8004b96:	4b1c      	ldr	r3, [pc, #112]	@ (8004c08 <MX_TIM3_Init+0x94>)
 8004b98:	22a7      	movs	r2, #167	@ 0xa7
 8004b9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c08 <MX_TIM3_Init+0x94>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8004ba2:	4b19      	ldr	r3, [pc, #100]	@ (8004c08 <MX_TIM3_Init+0x94>)
 8004ba4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ba8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004baa:	4b17      	ldr	r3, [pc, #92]	@ (8004c08 <MX_TIM3_Init+0x94>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004bb0:	4b15      	ldr	r3, [pc, #84]	@ (8004c08 <MX_TIM3_Init+0x94>)
 8004bb2:	2280      	movs	r2, #128	@ 0x80
 8004bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004bb6:	4814      	ldr	r0, [pc, #80]	@ (8004c08 <MX_TIM3_Init+0x94>)
 8004bb8:	f004 fa28 	bl	800900c <HAL_TIM_Base_Init>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004bc2:	f7fe f821 	bl	8002c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004bcc:	f107 0308 	add.w	r3, r7, #8
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	480d      	ldr	r0, [pc, #52]	@ (8004c08 <MX_TIM3_Init+0x94>)
 8004bd4:	f004 fbf9 	bl	80093ca <HAL_TIM_ConfigClockSource>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8004bde:	f7fe f813 	bl	8002c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004be2:	2300      	movs	r3, #0
 8004be4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004bea:	463b      	mov	r3, r7
 8004bec:	4619      	mov	r1, r3
 8004bee:	4806      	ldr	r0, [pc, #24]	@ (8004c08 <MX_TIM3_Init+0x94>)
 8004bf0:	f004 fe20 	bl	8009834 <HAL_TIMEx_MasterConfigSynchronization>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004bfa:	f7fe f805 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004bfe:	bf00      	nop
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000960 	.word	0x20000960
 8004c0c:	40000400 	.word	0x40000400

08004c10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c16:	f107 0308 	add.w	r3, r7, #8
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	605a      	str	r2, [r3, #4]
 8004c20:	609a      	str	r2, [r3, #8]
 8004c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c24:	463b      	mov	r3, r7
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca4 <MX_TIM4_Init+0x94>)
 8004c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ca8 <MX_TIM4_Init+0x98>)
 8004c30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8004c32:	4b1c      	ldr	r3, [pc, #112]	@ (8004ca4 <MX_TIM4_Init+0x94>)
 8004c34:	2253      	movs	r2, #83	@ 0x53
 8004c36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c38:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca4 <MX_TIM4_Init+0x94>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8004c3e:	4b19      	ldr	r3, [pc, #100]	@ (8004ca4 <MX_TIM4_Init+0x94>)
 8004c40:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c46:	4b17      	ldr	r3, [pc, #92]	@ (8004ca4 <MX_TIM4_Init+0x94>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ca4 <MX_TIM4_Init+0x94>)
 8004c4e:	2280      	movs	r2, #128	@ 0x80
 8004c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004c52:	4814      	ldr	r0, [pc, #80]	@ (8004ca4 <MX_TIM4_Init+0x94>)
 8004c54:	f004 f9da 	bl	800900c <HAL_TIM_Base_Init>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004c5e:	f7fd ffd3 	bl	8002c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004c68:	f107 0308 	add.w	r3, r7, #8
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	480d      	ldr	r0, [pc, #52]	@ (8004ca4 <MX_TIM4_Init+0x94>)
 8004c70:	f004 fbab 	bl	80093ca <HAL_TIM_ConfigClockSource>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004c7a:	f7fd ffc5 	bl	8002c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004c86:	463b      	mov	r3, r7
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4806      	ldr	r0, [pc, #24]	@ (8004ca4 <MX_TIM4_Init+0x94>)
 8004c8c:	f004 fdd2 	bl	8009834 <HAL_TIMEx_MasterConfigSynchronization>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004c96:	f7fd ffb7 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004c9a:	bf00      	nop
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	200009a8 	.word	0x200009a8
 8004ca8:	40000800 	.word	0x40000800

08004cac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cb2:	f107 0308 	add.w	r3, r7, #8
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	605a      	str	r2, [r3, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
 8004cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cc0:	463b      	mov	r3, r7
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d40 <MX_TIM5_Init+0x94>)
 8004cca:	4a1e      	ldr	r2, [pc, #120]	@ (8004d44 <MX_TIM5_Init+0x98>)
 8004ccc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8004cce:	4b1c      	ldr	r3, [pc, #112]	@ (8004d40 <MX_TIM5_Init+0x94>)
 8004cd0:	2253      	movs	r2, #83	@ 0x53
 8004cd2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d40 <MX_TIM5_Init+0x94>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8004cda:	4b19      	ldr	r3, [pc, #100]	@ (8004d40 <MX_TIM5_Init+0x94>)
 8004cdc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ce0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ce2:	4b17      	ldr	r3, [pc, #92]	@ (8004d40 <MX_TIM5_Init+0x94>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ce8:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <MX_TIM5_Init+0x94>)
 8004cea:	2280      	movs	r2, #128	@ 0x80
 8004cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004cee:	4814      	ldr	r0, [pc, #80]	@ (8004d40 <MX_TIM5_Init+0x94>)
 8004cf0:	f004 f98c 	bl	800900c <HAL_TIM_Base_Init>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8004cfa:	f7fd ff85 	bl	8002c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004d04:	f107 0308 	add.w	r3, r7, #8
 8004d08:	4619      	mov	r1, r3
 8004d0a:	480d      	ldr	r0, [pc, #52]	@ (8004d40 <MX_TIM5_Init+0x94>)
 8004d0c:	f004 fb5d 	bl	80093ca <HAL_TIM_ConfigClockSource>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8004d16:	f7fd ff77 	bl	8002c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004d22:	463b      	mov	r3, r7
 8004d24:	4619      	mov	r1, r3
 8004d26:	4806      	ldr	r0, [pc, #24]	@ (8004d40 <MX_TIM5_Init+0x94>)
 8004d28:	f004 fd84 	bl	8009834 <HAL_TIMEx_MasterConfigSynchronization>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8004d32:	f7fd ff69 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004d36:	bf00      	nop
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	200009f0 	.word	0x200009f0
 8004d44:	40000c00 	.word	0x40000c00

08004d48 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM6_Init(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d4e:	463b      	mov	r3, r7
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004d56:	4b15      	ldr	r3, [pc, #84]	@ (8004dac <MX_TIM6_Init+0x64>)
 8004d58:	4a15      	ldr	r2, [pc, #84]	@ (8004db0 <MX_TIM6_Init+0x68>)
 8004d5a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8004d5c:	4b13      	ldr	r3, [pc, #76]	@ (8004dac <MX_TIM6_Init+0x64>)
 8004d5e:	2253      	movs	r2, #83	@ 0x53
 8004d60:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d62:	4b12      	ldr	r3, [pc, #72]	@ (8004dac <MX_TIM6_Init+0x64>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8004d68:	4b10      	ldr	r3, [pc, #64]	@ (8004dac <MX_TIM6_Init+0x64>)
 8004d6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d6e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d70:	4b0e      	ldr	r3, [pc, #56]	@ (8004dac <MX_TIM6_Init+0x64>)
 8004d72:	2280      	movs	r2, #128	@ 0x80
 8004d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004d76:	480d      	ldr	r0, [pc, #52]	@ (8004dac <MX_TIM6_Init+0x64>)
 8004d78:	f004 f948 	bl	800900c <HAL_TIM_Base_Init>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004d82:	f7fd ff41 	bl	8002c08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d86:	2300      	movs	r3, #0
 8004d88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004d8e:	463b      	mov	r3, r7
 8004d90:	4619      	mov	r1, r3
 8004d92:	4806      	ldr	r0, [pc, #24]	@ (8004dac <MX_TIM6_Init+0x64>)
 8004d94:	f004 fd4e 	bl	8009834 <HAL_TIMEx_MasterConfigSynchronization>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004d9e:	f7fd ff33 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000a38 	.word	0x20000a38
 8004db0:	40001000 	.word	0x40001000

08004db4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b088      	sub	sp, #32
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a54      	ldr	r2, [pc, #336]	@ (8004f14 <HAL_TIM_Base_MspInit+0x160>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d116      	bne.n	8004df4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61fb      	str	r3, [r7, #28]
 8004dca:	4b53      	ldr	r3, [pc, #332]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dce:	4a52      	ldr	r2, [pc, #328]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004dd6:	4b50      	ldr	r3, [pc, #320]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	61fb      	str	r3, [r7, #28]
 8004de0:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8004de2:	2200      	movs	r2, #0
 8004de4:	2105      	movs	r1, #5
 8004de6:	2018      	movs	r0, #24
 8004de8:	f001 f801 	bl	8005dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004dec:	2018      	movs	r0, #24
 8004dee:	f001 f81a 	bl	8005e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004df2:	e08a      	b.n	8004f0a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dfc:	d116      	bne.n	8004e2c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	4b45      	ldr	r3, [pc, #276]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e06:	4a44      	ldr	r2, [pc, #272]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e0e:	4b42      	ldr	r3, [pc, #264]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	61bb      	str	r3, [r7, #24]
 8004e18:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2105      	movs	r1, #5
 8004e1e:	201c      	movs	r0, #28
 8004e20:	f000 ffe5 	bl	8005dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e24:	201c      	movs	r0, #28
 8004e26:	f000 fffe 	bl	8005e26 <HAL_NVIC_EnableIRQ>
}
 8004e2a:	e06e      	b.n	8004f0a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a3a      	ldr	r2, [pc, #232]	@ (8004f1c <HAL_TIM_Base_MspInit+0x168>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d116      	bne.n	8004e64 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	4b37      	ldr	r3, [pc, #220]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	4a36      	ldr	r2, [pc, #216]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004e40:	f043 0302 	orr.w	r3, r3, #2
 8004e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e46:	4b34      	ldr	r3, [pc, #208]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004e52:	2200      	movs	r2, #0
 8004e54:	2105      	movs	r1, #5
 8004e56:	201d      	movs	r0, #29
 8004e58:	f000 ffc9 	bl	8005dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e5c:	201d      	movs	r0, #29
 8004e5e:	f000 ffe2 	bl	8005e26 <HAL_NVIC_EnableIRQ>
}
 8004e62:	e052      	b.n	8004f0a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a2d      	ldr	r2, [pc, #180]	@ (8004f20 <HAL_TIM_Base_MspInit+0x16c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d116      	bne.n	8004e9c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	4b29      	ldr	r3, [pc, #164]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	4a28      	ldr	r2, [pc, #160]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004e78:	f043 0304 	orr.w	r3, r3, #4
 8004e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e7e:	4b26      	ldr	r3, [pc, #152]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2105      	movs	r1, #5
 8004e8e:	201e      	movs	r0, #30
 8004e90:	f000 ffad 	bl	8005dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004e94:	201e      	movs	r0, #30
 8004e96:	f000 ffc6 	bl	8005e26 <HAL_NVIC_EnableIRQ>
}
 8004e9a:	e036      	b.n	8004f0a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM5)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a20      	ldr	r2, [pc, #128]	@ (8004f24 <HAL_TIM_Base_MspInit+0x170>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d116      	bne.n	8004ed4 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	4a1a      	ldr	r2, [pc, #104]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004eb0:	f043 0308 	orr.w	r3, r3, #8
 8004eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eb6:	4b18      	ldr	r3, [pc, #96]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2105      	movs	r1, #5
 8004ec6:	2032      	movs	r0, #50	@ 0x32
 8004ec8:	f000 ff91 	bl	8005dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004ecc:	2032      	movs	r0, #50	@ 0x32
 8004ece:	f000 ffaa 	bl	8005e26 <HAL_NVIC_EnableIRQ>
}
 8004ed2:	e01a      	b.n	8004f0a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM6)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a13      	ldr	r2, [pc, #76]	@ (8004f28 <HAL_TIM_Base_MspInit+0x174>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d115      	bne.n	8004f0a <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004ee8:	f043 0310 	orr.w	r3, r3, #16
 8004eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eee:	4b0a      	ldr	r3, [pc, #40]	@ (8004f18 <HAL_TIM_Base_MspInit+0x164>)
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	f003 0310 	and.w	r3, r3, #16
 8004ef6:	60bb      	str	r3, [r7, #8]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004efa:	2200      	movs	r2, #0
 8004efc:	2105      	movs	r1, #5
 8004efe:	2036      	movs	r0, #54	@ 0x36
 8004f00:	f000 ff75 	bl	8005dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004f04:	2036      	movs	r0, #54	@ 0x36
 8004f06:	f000 ff8e 	bl	8005e26 <HAL_NVIC_EnableIRQ>
}
 8004f0a:	bf00      	nop
 8004f0c:	3720      	adds	r7, #32
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40010000 	.word	0x40010000
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	40000400 	.word	0x40000400
 8004f20:	40000800 	.word	0x40000800
 8004f24:	40000c00 	.word	0x40000c00
 8004f28:	40001000 	.word	0x40001000

08004f2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f30:	4b11      	ldr	r3, [pc, #68]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f32:	4a12      	ldr	r2, [pc, #72]	@ (8004f7c <MX_USART2_UART_Init+0x50>)
 8004f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004f36:	4b10      	ldr	r3, [pc, #64]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f44:	4b0c      	ldr	r3, [pc, #48]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f50:	4b09      	ldr	r3, [pc, #36]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f52:	220c      	movs	r2, #12
 8004f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f56:	4b08      	ldr	r3, [pc, #32]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f5c:	4b06      	ldr	r3, [pc, #24]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f62:	4805      	ldr	r0, [pc, #20]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f64:	f004 fcf6 	bl	8009954 <HAL_UART_Init>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004f6e:	f7fd fe4b 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000a80 	.word	0x20000a80
 8004f7c:	40004400 	.word	0x40004400

08004f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	@ 0x28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f88:	f107 0314 	add.w	r3, r7, #20
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005014 <HAL_UART_MspInit+0x94>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d133      	bne.n	800500a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8005018 <HAL_UART_MspInit+0x98>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004faa:	4a1b      	ldr	r2, [pc, #108]	@ (8005018 <HAL_UART_MspInit+0x98>)
 8004fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fb2:	4b19      	ldr	r3, [pc, #100]	@ (8005018 <HAL_UART_MspInit+0x98>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fba:	613b      	str	r3, [r7, #16]
 8004fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	4b15      	ldr	r3, [pc, #84]	@ (8005018 <HAL_UART_MspInit+0x98>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc6:	4a14      	ldr	r2, [pc, #80]	@ (8005018 <HAL_UART_MspInit+0x98>)
 8004fc8:	f043 0308 	orr.w	r3, r3, #8
 8004fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fce:	4b12      	ldr	r3, [pc, #72]	@ (8005018 <HAL_UART_MspInit+0x98>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004fda:	2360      	movs	r3, #96	@ 0x60
 8004fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004fea:	2307      	movs	r3, #7
 8004fec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fee:	f107 0314 	add.w	r3, r7, #20
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4809      	ldr	r0, [pc, #36]	@ (800501c <HAL_UART_MspInit+0x9c>)
 8004ff6:	f000 ffd1 	bl	8005f9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2105      	movs	r1, #5
 8004ffe:	2026      	movs	r0, #38	@ 0x26
 8005000:	f000 fef5 	bl	8005dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005004:	2026      	movs	r0, #38	@ 0x26
 8005006:	f000 ff0e 	bl	8005e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800500a:	bf00      	nop
 800500c:	3728      	adds	r7, #40	@ 0x28
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40004400 	.word	0x40004400
 8005018:	40023800 	.word	0x40023800
 800501c:	40020c00 	.word	0x40020c00

08005020 <_write>:

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
int _write(int file, char *ptr, int len){
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]


	//while(!UART_SendFlag);

	//UART_SendFlag=0;
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)ptr, len);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	b29b      	uxth	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	4803      	ldr	r0, [pc, #12]	@ (8005044 <_write+0x24>)
 8005036:	f004 fd68 	bl	8009b0a <HAL_UART_Transmit_IT>

	return len;
 800503a:	687b      	ldr	r3, [r7, #4]

}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20000a80 	.word	0x20000a80

08005048 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 8005048:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005080 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800504c:	f7ff fce4 	bl	8004a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005050:	480c      	ldr	r0, [pc, #48]	@ (8005084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005052:	490d      	ldr	r1, [pc, #52]	@ (8005088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005054:	4a0d      	ldr	r2, [pc, #52]	@ (800508c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005058:	e002      	b.n	8005060 <LoopCopyDataInit>

0800505a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800505a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800505c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800505e:	3304      	adds	r3, #4

08005060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005064:	d3f9      	bcc.n	800505a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005066:	4a0a      	ldr	r2, [pc, #40]	@ (8005090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005068:	4c0a      	ldr	r4, [pc, #40]	@ (8005094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800506a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800506c:	e001      	b.n	8005072 <LoopFillZerobss>

0800506e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800506e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005070:	3204      	adds	r2, #4

08005072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005074:	d3fb      	bcc.n	800506e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005076:	f00a fbcb 	bl	800f810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800507a:	f7fd fd0f 	bl	8002a9c <main>
  bx  lr    
 800507e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005088:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 800508c:	08014d98 	.word	0x08014d98
  ldr r2, =_sbss
 8005090:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8005094:	20005568 	.word	0x20005568

08005098 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005098:	e7fe      	b.n	8005098 <CAN1_RX0_IRQHandler>
	...

0800509c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050a0:	4b0e      	ldr	r3, [pc, #56]	@ (80050dc <HAL_Init+0x40>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0d      	ldr	r2, [pc, #52]	@ (80050dc <HAL_Init+0x40>)
 80050a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050ac:	4b0b      	ldr	r3, [pc, #44]	@ (80050dc <HAL_Init+0x40>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a0a      	ldr	r2, [pc, #40]	@ (80050dc <HAL_Init+0x40>)
 80050b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050b8:	4b08      	ldr	r3, [pc, #32]	@ (80050dc <HAL_Init+0x40>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a07      	ldr	r2, [pc, #28]	@ (80050dc <HAL_Init+0x40>)
 80050be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050c4:	2003      	movs	r0, #3
 80050c6:	f000 fe87 	bl	8005dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050ca:	200f      	movs	r0, #15
 80050cc:	f000 f808 	bl	80050e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050d0:	f7ff fb0c 	bl	80046ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40023c00 	.word	0x40023c00

080050e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050e8:	4b12      	ldr	r3, [pc, #72]	@ (8005134 <HAL_InitTick+0x54>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4b12      	ldr	r3, [pc, #72]	@ (8005138 <HAL_InitTick+0x58>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	4619      	mov	r1, r3
 80050f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80050fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fe9f 	bl	8005e42 <HAL_SYSTICK_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e00e      	b.n	800512c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b0f      	cmp	r3, #15
 8005112:	d80a      	bhi.n	800512a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005114:	2200      	movs	r2, #0
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	f000 fe67 	bl	8005dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005120:	4a06      	ldr	r2, [pc, #24]	@ (800513c <HAL_InitTick+0x5c>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	e000      	b.n	800512c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
}
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	200000a8 	.word	0x200000a8
 8005138:	200000b0 	.word	0x200000b0
 800513c:	200000ac 	.word	0x200000ac

08005140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005144:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <HAL_IncTick+0x20>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <HAL_IncTick+0x24>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4413      	add	r3, r2
 8005150:	4a04      	ldr	r2, [pc, #16]	@ (8005164 <HAL_IncTick+0x24>)
 8005152:	6013      	str	r3, [r2, #0]
}
 8005154:	bf00      	nop
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	200000b0 	.word	0x200000b0
 8005164:	20000ac8 	.word	0x20000ac8

08005168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return uwTick;
 800516c:	4b03      	ldr	r3, [pc, #12]	@ (800517c <HAL_GetTick+0x14>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000ac8 	.word	0x20000ac8

08005180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005188:	f7ff ffee 	bl	8005168 <HAL_GetTick>
 800518c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d005      	beq.n	80051a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800519a:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <HAL_Delay+0x44>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80051a6:	bf00      	nop
 80051a8:	f7ff ffde 	bl	8005168 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d8f7      	bhi.n	80051a8 <HAL_Delay+0x28>
  {
  }
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	200000b0 	.word	0x200000b0

080051c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e033      	b.n	8005246 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fc faa0 	bl	800172c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b00      	cmp	r3, #0
 8005204:	d118      	bne.n	8005238 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800520e:	f023 0302 	bic.w	r3, r3, #2
 8005212:	f043 0202 	orr.w	r2, r3, #2
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fc06 	bl	8005a2c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	f023 0303 	bic.w	r3, r3, #3
 800522e:	f043 0201 	orr.w	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	641a      	str	r2, [r3, #64]	@ 0x40
 8005236:	e001      	b.n	800523c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_ADC_Start+0x1a>
 8005266:	2302      	movs	r3, #2
 8005268:	e0b2      	b.n	80053d0 <HAL_ADC_Start+0x180>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b01      	cmp	r3, #1
 800527e:	d018      	beq.n	80052b2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005290:	4b52      	ldr	r3, [pc, #328]	@ (80053dc <HAL_ADC_Start+0x18c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a52      	ldr	r2, [pc, #328]	@ (80053e0 <HAL_ADC_Start+0x190>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	0c9a      	lsrs	r2, r3, #18
 800529c:	4613      	mov	r3, r2
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	4413      	add	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80052a4:	e002      	b.n	80052ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f9      	bne.n	80052a6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d17a      	bne.n	80053b6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80052ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052fe:	d106      	bne.n	800530e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005304:	f023 0206 	bic.w	r2, r3, #6
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	645a      	str	r2, [r3, #68]	@ 0x44
 800530c:	e002      	b.n	8005314 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800531c:	4b31      	ldr	r3, [pc, #196]	@ (80053e4 <HAL_ADC_Start+0x194>)
 800531e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005328:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2b00      	cmp	r3, #0
 8005334:	d12a      	bne.n	800538c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2b      	ldr	r2, [pc, #172]	@ (80053e8 <HAL_ADC_Start+0x198>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d015      	beq.n	800536c <HAL_ADC_Start+0x11c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a29      	ldr	r2, [pc, #164]	@ (80053ec <HAL_ADC_Start+0x19c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d105      	bne.n	8005356 <HAL_ADC_Start+0x106>
 800534a:	4b26      	ldr	r3, [pc, #152]	@ (80053e4 <HAL_ADC_Start+0x194>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a25      	ldr	r2, [pc, #148]	@ (80053f0 <HAL_ADC_Start+0x1a0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d136      	bne.n	80053ce <HAL_ADC_Start+0x17e>
 8005360:	4b20      	ldr	r3, [pc, #128]	@ (80053e4 <HAL_ADC_Start+0x194>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	d130      	bne.n	80053ce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d129      	bne.n	80053ce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005388:	609a      	str	r2, [r3, #8]
 800538a:	e020      	b.n	80053ce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a15      	ldr	r2, [pc, #84]	@ (80053e8 <HAL_ADC_Start+0x198>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d11b      	bne.n	80053ce <HAL_ADC_Start+0x17e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d114      	bne.n	80053ce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80053b2:	609a      	str	r2, [r3, #8]
 80053b4:	e00b      	b.n	80053ce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ba:	f043 0210 	orr.w	r2, r3, #16
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c6:	f043 0201 	orr.w	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	200000a8 	.word	0x200000a8
 80053e0:	431bde83 	.word	0x431bde83
 80053e4:	40012300 	.word	0x40012300
 80053e8:	40012000 	.word	0x40012000
 80053ec:	40012100 	.word	0x40012100
 80053f0:	40012200 	.word	0x40012200

080053f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_ADC_Stop+0x16>
 8005406:	2302      	movs	r3, #2
 8005408:	e021      	b.n	800544e <HAL_ADC_Stop+0x5a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d109      	bne.n	8005444 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005434:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005438:	f023 0301 	bic.w	r3, r3, #1
 800543c:	f043 0201 	orr.w	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005476:	d113      	bne.n	80054a0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005486:	d10b      	bne.n	80054a0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548c:	f043 0220 	orr.w	r2, r3, #32
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e063      	b.n	8005568 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80054a0:	f7ff fe62 	bl	8005168 <HAL_GetTick>
 80054a4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80054a6:	e021      	b.n	80054ec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ae:	d01d      	beq.n	80054ec <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_ADC_PollForConversion+0x6c>
 80054b6:	f7ff fe57 	bl	8005168 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d212      	bcs.n	80054ec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d00b      	beq.n	80054ec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d8:	f043 0204 	orr.w	r2, r3, #4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e03d      	b.n	8005568 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d1d6      	bne.n	80054a8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f06f 0212 	mvn.w	r2, #18
 8005502:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005508:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d123      	bne.n	8005566 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005522:	2b00      	cmp	r3, #0
 8005524:	d11f      	bne.n	8005566 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005530:	2b00      	cmp	r3, #0
 8005532:	d006      	beq.n	8005542 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800553e:	2b00      	cmp	r3, #0
 8005540:	d111      	bne.n	8005566 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d105      	bne.n	8005566 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	f043 0201 	orr.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	2300      	movs	r3, #0
 800557e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d049      	beq.n	800563a <HAL_ADC_IRQHandler+0xca>
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d046      	beq.n	800563a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d105      	bne.n	80055c4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d12b      	bne.n	800562a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d127      	bne.n	800562a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d006      	beq.n	80055f6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d119      	bne.n	800562a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0220 	bic.w	r2, r2, #32
 8005604:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d105      	bne.n	800562a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	f043 0201 	orr.w	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f8bd 	bl	80057aa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0212 	mvn.w	r2, #18
 8005638:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005648:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d057      	beq.n	8005700 <HAL_ADC_IRQHandler+0x190>
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d054      	beq.n	8005700 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b00      	cmp	r3, #0
 8005660:	d105      	bne.n	800566e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005666:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d139      	bne.n	80056f0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005682:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005686:	2b00      	cmp	r3, #0
 8005688:	d006      	beq.n	8005698 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005694:	2b00      	cmp	r3, #0
 8005696:	d12b      	bne.n	80056f0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d124      	bne.n	80056f0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d11d      	bne.n	80056f0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d119      	bne.n	80056f0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056ca:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e8:	f043 0201 	orr.w	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fa97 	bl	8005c24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f06f 020c 	mvn.w	r2, #12
 80056fe:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d017      	beq.n	8005746 <HAL_ADC_IRQHandler+0x1d6>
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d014      	beq.n	8005746 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d10d      	bne.n	8005746 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f841 	bl	80057be <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0201 	mvn.w	r2, #1
 8005744:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005754:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d015      	beq.n	8005788 <HAL_ADC_IRQHandler+0x218>
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d012      	beq.n	8005788 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005766:	f043 0202 	orr.w	r2, r3, #2
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f06f 0220 	mvn.w	r2, #32
 8005776:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f82a 	bl	80057d2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f06f 0220 	mvn.w	r2, #32
 8005786:	601a      	str	r2, [r3, #0]
  }
}
 8005788:	bf00      	nop
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800579e:	4618      	mov	r0, r3
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_ADC_ConfigChannel+0x1c>
 8005800:	2302      	movs	r3, #2
 8005802:	e105      	b.n	8005a10 <HAL_ADC_ConfigChannel+0x228>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b09      	cmp	r3, #9
 8005812:	d925      	bls.n	8005860 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68d9      	ldr	r1, [r3, #12]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	461a      	mov	r2, r3
 8005822:	4613      	mov	r3, r2
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	4413      	add	r3, r2
 8005828:	3b1e      	subs	r3, #30
 800582a:	2207      	movs	r2, #7
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	43da      	mvns	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	400a      	ands	r2, r1
 8005838:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68d9      	ldr	r1, [r3, #12]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	4618      	mov	r0, r3
 800584c:	4603      	mov	r3, r0
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	4403      	add	r3, r0
 8005852:	3b1e      	subs	r3, #30
 8005854:	409a      	lsls	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	60da      	str	r2, [r3, #12]
 800585e:	e022      	b.n	80058a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6919      	ldr	r1, [r3, #16]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	b29b      	uxth	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	4613      	mov	r3, r2
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	4413      	add	r3, r2
 8005874:	2207      	movs	r2, #7
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	43da      	mvns	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	400a      	ands	r2, r1
 8005882:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6919      	ldr	r1, [r3, #16]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	b29b      	uxth	r3, r3
 8005894:	4618      	mov	r0, r3
 8005896:	4603      	mov	r3, r0
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	4403      	add	r3, r0
 800589c:	409a      	lsls	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b06      	cmp	r3, #6
 80058ac:	d824      	bhi.n	80058f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	3b05      	subs	r3, #5
 80058c0:	221f      	movs	r2, #31
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	43da      	mvns	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	400a      	ands	r2, r1
 80058ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	4618      	mov	r0, r3
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	3b05      	subs	r3, #5
 80058ea:	fa00 f203 	lsl.w	r2, r0, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80058f6:	e04c      	b.n	8005992 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b0c      	cmp	r3, #12
 80058fe:	d824      	bhi.n	800594a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	3b23      	subs	r3, #35	@ 0x23
 8005912:	221f      	movs	r2, #31
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	43da      	mvns	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	400a      	ands	r2, r1
 8005920:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	4618      	mov	r0, r3
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	3b23      	subs	r3, #35	@ 0x23
 800593c:	fa00 f203 	lsl.w	r2, r0, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	631a      	str	r2, [r3, #48]	@ 0x30
 8005948:	e023      	b.n	8005992 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	3b41      	subs	r3, #65	@ 0x41
 800595c:	221f      	movs	r2, #31
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43da      	mvns	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	400a      	ands	r2, r1
 800596a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	4618      	mov	r0, r3
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	3b41      	subs	r3, #65	@ 0x41
 8005986:	fa00 f203 	lsl.w	r2, r0, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005992:	4b22      	ldr	r3, [pc, #136]	@ (8005a1c <HAL_ADC_ConfigChannel+0x234>)
 8005994:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a21      	ldr	r2, [pc, #132]	@ (8005a20 <HAL_ADC_ConfigChannel+0x238>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d109      	bne.n	80059b4 <HAL_ADC_ConfigChannel+0x1cc>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b12      	cmp	r3, #18
 80059a6:	d105      	bne.n	80059b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a19      	ldr	r2, [pc, #100]	@ (8005a20 <HAL_ADC_ConfigChannel+0x238>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d123      	bne.n	8005a06 <HAL_ADC_ConfigChannel+0x21e>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b10      	cmp	r3, #16
 80059c4:	d003      	beq.n	80059ce <HAL_ADC_ConfigChannel+0x1e6>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b11      	cmp	r3, #17
 80059cc:	d11b      	bne.n	8005a06 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b10      	cmp	r3, #16
 80059e0:	d111      	bne.n	8005a06 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80059e2:	4b10      	ldr	r3, [pc, #64]	@ (8005a24 <HAL_ADC_ConfigChannel+0x23c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a10      	ldr	r2, [pc, #64]	@ (8005a28 <HAL_ADC_ConfigChannel+0x240>)
 80059e8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ec:	0c9a      	lsrs	r2, r3, #18
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80059f8:	e002      	b.n	8005a00 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1f9      	bne.n	80059fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	40012300 	.word	0x40012300
 8005a20:	40012000 	.word	0x40012000
 8005a24:	200000a8 	.word	0x200000a8
 8005a28:	431bde83 	.word	0x431bde83

08005a2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a34:	4b79      	ldr	r3, [pc, #484]	@ (8005c1c <ADC_Init+0x1f0>)
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6859      	ldr	r1, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	021a      	lsls	r2, r3, #8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005a84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6859      	ldr	r1, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005aa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6899      	ldr	r1, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abe:	4a58      	ldr	r2, [pc, #352]	@ (8005c20 <ADC_Init+0x1f4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d022      	beq.n	8005b0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ad2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6899      	ldr	r1, [r3, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689a      	ldr	r2, [r3, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005af4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6899      	ldr	r1, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	609a      	str	r2, [r3, #8]
 8005b08:	e00f      	b.n	8005b2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005b28:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0202 	bic.w	r2, r2, #2
 8005b38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6899      	ldr	r1, [r3, #8]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	7e1b      	ldrb	r3, [r3, #24]
 8005b44:	005a      	lsls	r2, r3, #1
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01b      	beq.n	8005b90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b66:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005b76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6859      	ldr	r1, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b82:	3b01      	subs	r3, #1
 8005b84:	035a      	lsls	r2, r3, #13
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
 8005b8e:	e007      	b.n	8005ba0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b9e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005bae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	051a      	lsls	r2, r3, #20
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005bd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6899      	ldr	r1, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005be2:	025a      	lsls	r2, r3, #9
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6899      	ldr	r1, [r3, #8]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	029a      	lsls	r2, r3, #10
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	609a      	str	r2, [r3, #8]
}
 8005c10:	bf00      	nop
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	40012300 	.word	0x40012300
 8005c20:	0f000001 	.word	0x0f000001

08005c24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f003 0307 	and.w	r3, r3, #7
 8005c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c48:	4b0c      	ldr	r3, [pc, #48]	@ (8005c7c <__NVIC_SetPriorityGrouping+0x44>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c54:	4013      	ands	r3, r2
 8005c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c6a:	4a04      	ldr	r2, [pc, #16]	@ (8005c7c <__NVIC_SetPriorityGrouping+0x44>)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	60d3      	str	r3, [r2, #12]
}
 8005c70:	bf00      	nop
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	e000ed00 	.word	0xe000ed00

08005c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c84:	4b04      	ldr	r3, [pc, #16]	@ (8005c98 <__NVIC_GetPriorityGrouping+0x18>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	0a1b      	lsrs	r3, r3, #8
 8005c8a:	f003 0307 	and.w	r3, r3, #7
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	e000ed00 	.word	0xe000ed00

08005c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	db0b      	blt.n	8005cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	f003 021f 	and.w	r2, r3, #31
 8005cb4:	4907      	ldr	r1, [pc, #28]	@ (8005cd4 <__NVIC_EnableIRQ+0x38>)
 8005cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	2001      	movs	r0, #1
 8005cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8005cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	e000e100 	.word	0xe000e100

08005cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	6039      	str	r1, [r7, #0]
 8005ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	db0a      	blt.n	8005d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	490c      	ldr	r1, [pc, #48]	@ (8005d24 <__NVIC_SetPriority+0x4c>)
 8005cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf6:	0112      	lsls	r2, r2, #4
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d00:	e00a      	b.n	8005d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	4908      	ldr	r1, [pc, #32]	@ (8005d28 <__NVIC_SetPriority+0x50>)
 8005d08:	79fb      	ldrb	r3, [r7, #7]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	3b04      	subs	r3, #4
 8005d10:	0112      	lsls	r2, r2, #4
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	440b      	add	r3, r1
 8005d16:	761a      	strb	r2, [r3, #24]
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	e000e100 	.word	0xe000e100
 8005d28:	e000ed00 	.word	0xe000ed00

08005d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b089      	sub	sp, #36	@ 0x24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	f1c3 0307 	rsb	r3, r3, #7
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	bf28      	it	cs
 8005d4a:	2304      	movcs	r3, #4
 8005d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	3304      	adds	r3, #4
 8005d52:	2b06      	cmp	r3, #6
 8005d54:	d902      	bls.n	8005d5c <NVIC_EncodePriority+0x30>
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	3b03      	subs	r3, #3
 8005d5a:	e000      	b.n	8005d5e <NVIC_EncodePriority+0x32>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d60:	f04f 32ff 	mov.w	r2, #4294967295
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	43da      	mvns	r2, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	401a      	ands	r2, r3
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d74:	f04f 31ff 	mov.w	r1, #4294967295
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7e:	43d9      	mvns	r1, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d84:	4313      	orrs	r3, r2
         );
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3724      	adds	r7, #36	@ 0x24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
	...

08005d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005da4:	d301      	bcc.n	8005daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005da6:	2301      	movs	r3, #1
 8005da8:	e00f      	b.n	8005dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005daa:	4a0a      	ldr	r2, [pc, #40]	@ (8005dd4 <SysTick_Config+0x40>)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005db2:	210f      	movs	r1, #15
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295
 8005db8:	f7ff ff8e 	bl	8005cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dbc:	4b05      	ldr	r3, [pc, #20]	@ (8005dd4 <SysTick_Config+0x40>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dc2:	4b04      	ldr	r3, [pc, #16]	@ (8005dd4 <SysTick_Config+0x40>)
 8005dc4:	2207      	movs	r2, #7
 8005dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	e000e010 	.word	0xe000e010

08005dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff ff29 	bl	8005c38 <__NVIC_SetPriorityGrouping>
}
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b086      	sub	sp, #24
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	4603      	mov	r3, r0
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e00:	f7ff ff3e 	bl	8005c80 <__NVIC_GetPriorityGrouping>
 8005e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	6978      	ldr	r0, [r7, #20]
 8005e0c:	f7ff ff8e 	bl	8005d2c <NVIC_EncodePriority>
 8005e10:	4602      	mov	r2, r0
 8005e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e16:	4611      	mov	r1, r2
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff ff5d 	bl	8005cd8 <__NVIC_SetPriority>
}
 8005e1e:	bf00      	nop
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff ff31 	bl	8005c9c <__NVIC_EnableIRQ>
}
 8005e3a:	bf00      	nop
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b082      	sub	sp, #8
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff ffa2 	bl	8005d94 <SysTick_Config>
 8005e50:	4603      	mov	r3, r0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e68:	f7ff f97e 	bl	8005168 <HAL_GetTick>
 8005e6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d008      	beq.n	8005e8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2280      	movs	r2, #128	@ 0x80
 8005e7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e052      	b.n	8005f32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0216 	bic.w	r2, r2, #22
 8005e9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695a      	ldr	r2, [r3, #20]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005eaa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d103      	bne.n	8005ebc <HAL_DMA_Abort+0x62>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d007      	beq.n	8005ecc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0208 	bic.w	r2, r2, #8
 8005eca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0201 	bic.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005edc:	e013      	b.n	8005f06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ede:	f7ff f943 	bl	8005168 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b05      	cmp	r3, #5
 8005eea:	d90c      	bls.n	8005f06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2203      	movs	r2, #3
 8005ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e015      	b.n	8005f32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e4      	bne.n	8005ede <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f18:	223f      	movs	r2, #63	@ 0x3f
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d004      	beq.n	8005f58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2280      	movs	r2, #128	@ 0x80
 8005f52:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e00c      	b.n	8005f72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2205      	movs	r2, #5
 8005f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0201 	bic.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f8c:	b2db      	uxtb	r3, r3
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
	...

08005f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b089      	sub	sp, #36	@ 0x24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	61fb      	str	r3, [r7, #28]
 8005fb6:	e16b      	b.n	8006290 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fb8:	2201      	movs	r2, #1
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	f040 815a 	bne.w	800628a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d005      	beq.n	8005fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d130      	bne.n	8006050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffe:	43db      	mvns	r3, r3
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	4013      	ands	r3, r2
 8006004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	fa02 f303 	lsl.w	r3, r2, r3
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	4313      	orrs	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006024:	2201      	movs	r2, #1
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	43db      	mvns	r3, r3
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	4013      	ands	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	091b      	lsrs	r3, r3, #4
 800603a:	f003 0201 	and.w	r2, r3, #1
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	4313      	orrs	r3, r2
 8006048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f003 0303 	and.w	r3, r3, #3
 8006058:	2b03      	cmp	r3, #3
 800605a:	d017      	beq.n	800608c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	2203      	movs	r2, #3
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	43db      	mvns	r3, r3
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	4013      	ands	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	4313      	orrs	r3, r2
 8006084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d123      	bne.n	80060e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	08da      	lsrs	r2, r3, #3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3208      	adds	r2, #8
 80060a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	220f      	movs	r2, #15
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4013      	ands	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	08da      	lsrs	r2, r3, #3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3208      	adds	r2, #8
 80060da:	69b9      	ldr	r1, [r7, #24]
 80060dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	2203      	movs	r2, #3
 80060ec:	fa02 f303 	lsl.w	r3, r2, r3
 80060f0:	43db      	mvns	r3, r3
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	4013      	ands	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f003 0203 	and.w	r2, r3, #3
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	fa02 f303 	lsl.w	r3, r2, r3
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	4313      	orrs	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 80b4 	beq.w	800628a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	4b60      	ldr	r3, [pc, #384]	@ (80062a8 <HAL_GPIO_Init+0x30c>)
 8006128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612a:	4a5f      	ldr	r2, [pc, #380]	@ (80062a8 <HAL_GPIO_Init+0x30c>)
 800612c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006130:	6453      	str	r3, [r2, #68]	@ 0x44
 8006132:	4b5d      	ldr	r3, [pc, #372]	@ (80062a8 <HAL_GPIO_Init+0x30c>)
 8006134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800613e:	4a5b      	ldr	r2, [pc, #364]	@ (80062ac <HAL_GPIO_Init+0x310>)
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	089b      	lsrs	r3, r3, #2
 8006144:	3302      	adds	r3, #2
 8006146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800614a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	220f      	movs	r2, #15
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	43db      	mvns	r3, r3
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	4013      	ands	r3, r2
 8006160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a52      	ldr	r2, [pc, #328]	@ (80062b0 <HAL_GPIO_Init+0x314>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d02b      	beq.n	80061c2 <HAL_GPIO_Init+0x226>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a51      	ldr	r2, [pc, #324]	@ (80062b4 <HAL_GPIO_Init+0x318>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d025      	beq.n	80061be <HAL_GPIO_Init+0x222>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a50      	ldr	r2, [pc, #320]	@ (80062b8 <HAL_GPIO_Init+0x31c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d01f      	beq.n	80061ba <HAL_GPIO_Init+0x21e>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a4f      	ldr	r2, [pc, #316]	@ (80062bc <HAL_GPIO_Init+0x320>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d019      	beq.n	80061b6 <HAL_GPIO_Init+0x21a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a4e      	ldr	r2, [pc, #312]	@ (80062c0 <HAL_GPIO_Init+0x324>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d013      	beq.n	80061b2 <HAL_GPIO_Init+0x216>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a4d      	ldr	r2, [pc, #308]	@ (80062c4 <HAL_GPIO_Init+0x328>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00d      	beq.n	80061ae <HAL_GPIO_Init+0x212>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a4c      	ldr	r2, [pc, #304]	@ (80062c8 <HAL_GPIO_Init+0x32c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d007      	beq.n	80061aa <HAL_GPIO_Init+0x20e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a4b      	ldr	r2, [pc, #300]	@ (80062cc <HAL_GPIO_Init+0x330>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d101      	bne.n	80061a6 <HAL_GPIO_Init+0x20a>
 80061a2:	2307      	movs	r3, #7
 80061a4:	e00e      	b.n	80061c4 <HAL_GPIO_Init+0x228>
 80061a6:	2308      	movs	r3, #8
 80061a8:	e00c      	b.n	80061c4 <HAL_GPIO_Init+0x228>
 80061aa:	2306      	movs	r3, #6
 80061ac:	e00a      	b.n	80061c4 <HAL_GPIO_Init+0x228>
 80061ae:	2305      	movs	r3, #5
 80061b0:	e008      	b.n	80061c4 <HAL_GPIO_Init+0x228>
 80061b2:	2304      	movs	r3, #4
 80061b4:	e006      	b.n	80061c4 <HAL_GPIO_Init+0x228>
 80061b6:	2303      	movs	r3, #3
 80061b8:	e004      	b.n	80061c4 <HAL_GPIO_Init+0x228>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e002      	b.n	80061c4 <HAL_GPIO_Init+0x228>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <HAL_GPIO_Init+0x228>
 80061c2:	2300      	movs	r3, #0
 80061c4:	69fa      	ldr	r2, [r7, #28]
 80061c6:	f002 0203 	and.w	r2, r2, #3
 80061ca:	0092      	lsls	r2, r2, #2
 80061cc:	4093      	lsls	r3, r2
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061d4:	4935      	ldr	r1, [pc, #212]	@ (80062ac <HAL_GPIO_Init+0x310>)
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	089b      	lsrs	r3, r3, #2
 80061da:	3302      	adds	r3, #2
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061e2:	4b3b      	ldr	r3, [pc, #236]	@ (80062d0 <HAL_GPIO_Init+0x334>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	43db      	mvns	r3, r3
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	4013      	ands	r3, r2
 80061f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006206:	4a32      	ldr	r2, [pc, #200]	@ (80062d0 <HAL_GPIO_Init+0x334>)
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800620c:	4b30      	ldr	r3, [pc, #192]	@ (80062d0 <HAL_GPIO_Init+0x334>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	43db      	mvns	r3, r3
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	4013      	ands	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006230:	4a27      	ldr	r2, [pc, #156]	@ (80062d0 <HAL_GPIO_Init+0x334>)
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006236:	4b26      	ldr	r3, [pc, #152]	@ (80062d0 <HAL_GPIO_Init+0x334>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	43db      	mvns	r3, r3
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	4013      	ands	r3, r2
 8006244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800625a:	4a1d      	ldr	r2, [pc, #116]	@ (80062d0 <HAL_GPIO_Init+0x334>)
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006260:	4b1b      	ldr	r3, [pc, #108]	@ (80062d0 <HAL_GPIO_Init+0x334>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	43db      	mvns	r3, r3
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	4013      	ands	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006284:	4a12      	ldr	r2, [pc, #72]	@ (80062d0 <HAL_GPIO_Init+0x334>)
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	3301      	adds	r3, #1
 800628e:	61fb      	str	r3, [r7, #28]
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	2b0f      	cmp	r3, #15
 8006294:	f67f ae90 	bls.w	8005fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	3724      	adds	r7, #36	@ 0x24
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40023800 	.word	0x40023800
 80062ac:	40013800 	.word	0x40013800
 80062b0:	40020000 	.word	0x40020000
 80062b4:	40020400 	.word	0x40020400
 80062b8:	40020800 	.word	0x40020800
 80062bc:	40020c00 	.word	0x40020c00
 80062c0:	40021000 	.word	0x40021000
 80062c4:	40021400 	.word	0x40021400
 80062c8:	40021800 	.word	0x40021800
 80062cc:	40021c00 	.word	0x40021c00
 80062d0:	40013c00 	.word	0x40013c00

080062d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	887b      	ldrh	r3, [r7, #2]
 80062e6:	4013      	ands	r3, r2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
 80062f0:	e001      	b.n	80062f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	807b      	strh	r3, [r7, #2]
 8006310:	4613      	mov	r3, r2
 8006312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006314:	787b      	ldrb	r3, [r7, #1]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800631a:	887a      	ldrh	r2, [r7, #2]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006320:	e003      	b.n	800632a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006322:	887b      	ldrh	r3, [r7, #2]
 8006324:	041a      	lsls	r2, r3, #16
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	619a      	str	r2, [r3, #24]
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006348:	887a      	ldrh	r2, [r7, #2]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4013      	ands	r3, r2
 800634e:	041a      	lsls	r2, r3, #16
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	43d9      	mvns	r1, r3
 8006354:	887b      	ldrh	r3, [r7, #2]
 8006356:	400b      	ands	r3, r1
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	619a      	str	r2, [r3, #24]
}
 800635e:	bf00      	nop
 8006360:	3714      	adds	r7, #20
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
	...

0800636c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	4603      	mov	r3, r0
 8006374:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006376:	4b08      	ldr	r3, [pc, #32]	@ (8006398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006378:	695a      	ldr	r2, [r3, #20]
 800637a:	88fb      	ldrh	r3, [r7, #6]
 800637c:	4013      	ands	r3, r2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d006      	beq.n	8006390 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006382:	4a05      	ldr	r2, [pc, #20]	@ (8006398 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006384:	88fb      	ldrh	r3, [r7, #6]
 8006386:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	4618      	mov	r0, r3
 800638c:	f7fd fd76 	bl	8003e7c <HAL_GPIO_EXTI_Callback>
  }
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	40013c00 	.word	0x40013c00

0800639c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e12b      	b.n	8006606 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fc fa26 	bl	8002814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2224      	movs	r2, #36	@ 0x24
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006400:	f002 fddc 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 8006404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	4a81      	ldr	r2, [pc, #516]	@ (8006610 <HAL_I2C_Init+0x274>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d807      	bhi.n	8006420 <HAL_I2C_Init+0x84>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4a80      	ldr	r2, [pc, #512]	@ (8006614 <HAL_I2C_Init+0x278>)
 8006414:	4293      	cmp	r3, r2
 8006416:	bf94      	ite	ls
 8006418:	2301      	movls	r3, #1
 800641a:	2300      	movhi	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	e006      	b.n	800642e <HAL_I2C_Init+0x92>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4a7d      	ldr	r2, [pc, #500]	@ (8006618 <HAL_I2C_Init+0x27c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	bf94      	ite	ls
 8006428:	2301      	movls	r3, #1
 800642a:	2300      	movhi	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e0e7      	b.n	8006606 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	4a78      	ldr	r2, [pc, #480]	@ (800661c <HAL_I2C_Init+0x280>)
 800643a:	fba2 2303 	umull	r2, r3, r2, r3
 800643e:	0c9b      	lsrs	r3, r3, #18
 8006440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4a6a      	ldr	r2, [pc, #424]	@ (8006610 <HAL_I2C_Init+0x274>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d802      	bhi.n	8006470 <HAL_I2C_Init+0xd4>
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	3301      	adds	r3, #1
 800646e:	e009      	b.n	8006484 <HAL_I2C_Init+0xe8>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006476:	fb02 f303 	mul.w	r3, r2, r3
 800647a:	4a69      	ldr	r2, [pc, #420]	@ (8006620 <HAL_I2C_Init+0x284>)
 800647c:	fba2 2303 	umull	r2, r3, r2, r3
 8006480:	099b      	lsrs	r3, r3, #6
 8006482:	3301      	adds	r3, #1
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	6812      	ldr	r2, [r2, #0]
 8006488:	430b      	orrs	r3, r1
 800648a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006496:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	495c      	ldr	r1, [pc, #368]	@ (8006610 <HAL_I2C_Init+0x274>)
 80064a0:	428b      	cmp	r3, r1
 80064a2:	d819      	bhi.n	80064d8 <HAL_I2C_Init+0x13c>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	1e59      	subs	r1, r3, #1
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80064b2:	1c59      	adds	r1, r3, #1
 80064b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80064b8:	400b      	ands	r3, r1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00a      	beq.n	80064d4 <HAL_I2C_Init+0x138>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	1e59      	subs	r1, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80064cc:	3301      	adds	r3, #1
 80064ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d2:	e051      	b.n	8006578 <HAL_I2C_Init+0x1dc>
 80064d4:	2304      	movs	r3, #4
 80064d6:	e04f      	b.n	8006578 <HAL_I2C_Init+0x1dc>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d111      	bne.n	8006504 <HAL_I2C_Init+0x168>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	1e58      	subs	r0, r3, #1
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6859      	ldr	r1, [r3, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	440b      	add	r3, r1
 80064ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80064f2:	3301      	adds	r3, #1
 80064f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	bf0c      	ite	eq
 80064fc:	2301      	moveq	r3, #1
 80064fe:	2300      	movne	r3, #0
 8006500:	b2db      	uxtb	r3, r3
 8006502:	e012      	b.n	800652a <HAL_I2C_Init+0x18e>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	1e58      	subs	r0, r3, #1
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6859      	ldr	r1, [r3, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	440b      	add	r3, r1
 8006512:	0099      	lsls	r1, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	fbb0 f3f3 	udiv	r3, r0, r3
 800651a:	3301      	adds	r3, #1
 800651c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006520:	2b00      	cmp	r3, #0
 8006522:	bf0c      	ite	eq
 8006524:	2301      	moveq	r3, #1
 8006526:	2300      	movne	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <HAL_I2C_Init+0x196>
 800652e:	2301      	movs	r3, #1
 8006530:	e022      	b.n	8006578 <HAL_I2C_Init+0x1dc>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10e      	bne.n	8006558 <HAL_I2C_Init+0x1bc>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	1e58      	subs	r0, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6859      	ldr	r1, [r3, #4]
 8006542:	460b      	mov	r3, r1
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	440b      	add	r3, r1
 8006548:	fbb0 f3f3 	udiv	r3, r0, r3
 800654c:	3301      	adds	r3, #1
 800654e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006556:	e00f      	b.n	8006578 <HAL_I2C_Init+0x1dc>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	1e58      	subs	r0, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6859      	ldr	r1, [r3, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	440b      	add	r3, r1
 8006566:	0099      	lsls	r1, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	fbb0 f3f3 	udiv	r3, r0, r3
 800656e:	3301      	adds	r3, #1
 8006570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006574:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	6809      	ldr	r1, [r1, #0]
 800657c:	4313      	orrs	r3, r2
 800657e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69da      	ldr	r2, [r3, #28]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	431a      	orrs	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80065a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6911      	ldr	r1, [r2, #16]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	68d2      	ldr	r2, [r2, #12]
 80065b2:	4311      	orrs	r1, r2
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	430b      	orrs	r3, r1
 80065ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695a      	ldr	r2, [r3, #20]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	000186a0 	.word	0x000186a0
 8006614:	001e847f 	.word	0x001e847f
 8006618:	003d08ff 	.word	0x003d08ff
 800661c:	431bde83 	.word	0x431bde83
 8006620:	10624dd3 	.word	0x10624dd3

08006624 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006636:	2b80      	cmp	r3, #128	@ 0x80
 8006638:	d103      	bne.n	8006642 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2200      	movs	r2, #0
 8006640:	611a      	str	r2, [r3, #16]
  }
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
	...

08006650 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	607a      	str	r2, [r7, #4]
 800665a:	461a      	mov	r2, r3
 800665c:	460b      	mov	r3, r1
 800665e:	817b      	strh	r3, [r7, #10]
 8006660:	4613      	mov	r3, r2
 8006662:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006664:	f7fe fd80 	bl	8005168 <HAL_GetTick>
 8006668:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b20      	cmp	r3, #32
 8006674:	f040 80e0 	bne.w	8006838 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	2319      	movs	r3, #25
 800667e:	2201      	movs	r2, #1
 8006680:	4970      	ldr	r1, [pc, #448]	@ (8006844 <HAL_I2C_Master_Transmit+0x1f4>)
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f001 fdea 	bl	800825c <I2C_WaitOnFlagUntilTimeout>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800668e:	2302      	movs	r3, #2
 8006690:	e0d3      	b.n	800683a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_I2C_Master_Transmit+0x50>
 800669c:	2302      	movs	r3, #2
 800669e:	e0cc      	b.n	800683a <HAL_I2C_Master_Transmit+0x1ea>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d007      	beq.n	80066c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0201 	orr.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2221      	movs	r2, #33	@ 0x21
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2210      	movs	r2, #16
 80066e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	893a      	ldrh	r2, [r7, #8]
 80066f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4a50      	ldr	r2, [pc, #320]	@ (8006848 <HAL_I2C_Master_Transmit+0x1f8>)
 8006706:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006708:	8979      	ldrh	r1, [r7, #10]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	6a3a      	ldr	r2, [r7, #32]
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f001 fc7a 	bl	8008008 <I2C_MasterRequestWrite>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e08d      	b.n	800683a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800671e:	2300      	movs	r3, #0
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	613b      	str	r3, [r7, #16]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	613b      	str	r3, [r7, #16]
 8006732:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006734:	e066      	b.n	8006804 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	6a39      	ldr	r1, [r7, #32]
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f001 fea8 	bl	8008490 <I2C_WaitOnTXEFlagUntilTimeout>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00d      	beq.n	8006762 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674a:	2b04      	cmp	r3, #4
 800674c:	d107      	bne.n	800675e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800675c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e06b      	b.n	800683a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006766:	781a      	ldrb	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b04      	cmp	r3, #4
 800679e:	d11b      	bne.n	80067d8 <HAL_I2C_Master_Transmit+0x188>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d017      	beq.n	80067d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ac:	781a      	ldrb	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	6a39      	ldr	r1, [r7, #32]
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f001 fe9f 	bl	8008520 <I2C_WaitOnBTFFlagUntilTimeout>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00d      	beq.n	8006804 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d107      	bne.n	8006800 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e01a      	b.n	800683a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006808:	2b00      	cmp	r3, #0
 800680a:	d194      	bne.n	8006736 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800681a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	e000      	b.n	800683a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006838:	2302      	movs	r3, #2
  }
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	00100002 	.word	0x00100002
 8006848:	ffff0000 	.word	0xffff0000

0800684c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006864:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800686c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006874:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	2b10      	cmp	r3, #16
 800687a:	d003      	beq.n	8006884 <HAL_I2C_EV_IRQHandler+0x38>
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	2b40      	cmp	r3, #64	@ 0x40
 8006880:	f040 80b1 	bne.w	80069e6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10d      	bne.n	80068ba <HAL_I2C_EV_IRQHandler+0x6e>
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80068a4:	d003      	beq.n	80068ae <HAL_I2C_EV_IRQHandler+0x62>
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80068ac:	d101      	bne.n	80068b2 <HAL_I2C_EV_IRQHandler+0x66>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <HAL_I2C_EV_IRQHandler+0x68>
 80068b2:	2300      	movs	r3, #0
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	f000 8114 	beq.w	8006ae2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00b      	beq.n	80068dc <HAL_I2C_EV_IRQHandler+0x90>
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d006      	beq.n	80068dc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 fecf 	bl	8008672 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fd7a 	bl	80073ce <I2C_Master_SB>
 80068da:	e083      	b.n	80069e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d008      	beq.n	80068f8 <HAL_I2C_EV_IRQHandler+0xac>
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fdf2 	bl	80074da <I2C_Master_ADD10>
 80068f6:	e075      	b.n	80069e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d008      	beq.n	8006914 <HAL_I2C_EV_IRQHandler+0xc8>
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fe0e 	bl	800752e <I2C_Master_ADDR>
 8006912:	e067      	b.n	80069e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	f003 0304 	and.w	r3, r3, #4
 800691a:	2b00      	cmp	r3, #0
 800691c:	d036      	beq.n	800698c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800692c:	f000 80db 	beq.w	8006ae6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00d      	beq.n	8006956 <HAL_I2C_EV_IRQHandler+0x10a>
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006940:	2b00      	cmp	r3, #0
 8006942:	d008      	beq.n	8006956 <HAL_I2C_EV_IRQHandler+0x10a>
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b00      	cmp	r3, #0
 800694c:	d103      	bne.n	8006956 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f9d6 	bl	8006d00 <I2C_MasterTransmit_TXE>
 8006954:	e046      	b.n	80069e4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80c2 	beq.w	8006ae6 <HAL_I2C_EV_IRQHandler+0x29a>
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 80bc 	beq.w	8006ae6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	2b21      	cmp	r3, #33	@ 0x21
 8006972:	d103      	bne.n	800697c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fa5f 	bl	8006e38 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800697a:	e0b4      	b.n	8006ae6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b40      	cmp	r3, #64	@ 0x40
 8006980:	f040 80b1 	bne.w	8006ae6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 facd 	bl	8006f24 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800698a:	e0ac      	b.n	8006ae6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006996:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800699a:	f000 80a4 	beq.w	8006ae6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00d      	beq.n	80069c4 <HAL_I2C_EV_IRQHandler+0x178>
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d008      	beq.n	80069c4 <HAL_I2C_EV_IRQHandler+0x178>
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d103      	bne.n	80069c4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 fb49 	bl	8007054 <I2C_MasterReceive_RXNE>
 80069c2:	e00f      	b.n	80069e4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 808b 	beq.w	8006ae6 <HAL_I2C_EV_IRQHandler+0x29a>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 8085 	beq.w	8006ae6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 fc01 	bl	80071e4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069e2:	e080      	b.n	8006ae6 <HAL_I2C_EV_IRQHandler+0x29a>
 80069e4:	e07f      	b.n	8006ae6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d004      	beq.n	80069f8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	61fb      	str	r3, [r7, #28]
 80069f6:	e007      	b.n	8006a08 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d011      	beq.n	8006a36 <HAL_I2C_EV_IRQHandler+0x1ea>
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00c      	beq.n	8006a36 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006a2c:	69b9      	ldr	r1, [r7, #24]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 ffcc 	bl	80079cc <I2C_Slave_ADDR>
 8006a34:	e05a      	b.n	8006aec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	f003 0310 	and.w	r3, r3, #16
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d008      	beq.n	8006a52 <HAL_I2C_EV_IRQHandler+0x206>
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 f806 	bl	8007a5c <I2C_Slave_STOPF>
 8006a50:	e04c      	b.n	8006aec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	2b21      	cmp	r3, #33	@ 0x21
 8006a56:	d002      	beq.n	8006a5e <HAL_I2C_EV_IRQHandler+0x212>
 8006a58:	7bbb      	ldrb	r3, [r7, #14]
 8006a5a:	2b29      	cmp	r3, #41	@ 0x29
 8006a5c:	d120      	bne.n	8006aa0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00d      	beq.n	8006a84 <HAL_I2C_EV_IRQHandler+0x238>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d008      	beq.n	8006a84 <HAL_I2C_EV_IRQHandler+0x238>
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d103      	bne.n	8006a84 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fee7 	bl	8007850 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a82:	e032      	b.n	8006aea <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	f003 0304 	and.w	r3, r3, #4
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d02d      	beq.n	8006aea <HAL_I2C_EV_IRQHandler+0x29e>
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d028      	beq.n	8006aea <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 ff16 	bl	80078ca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a9e:	e024      	b.n	8006aea <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00d      	beq.n	8006ac6 <HAL_I2C_EV_IRQHandler+0x27a>
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d008      	beq.n	8006ac6 <HAL_I2C_EV_IRQHandler+0x27a>
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d103      	bne.n	8006ac6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 ff24 	bl	800790c <I2C_SlaveReceive_RXNE>
 8006ac4:	e012      	b.n	8006aec <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00d      	beq.n	8006aec <HAL_I2C_EV_IRQHandler+0x2a0>
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d008      	beq.n	8006aec <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 ff54 	bl	8007988 <I2C_SlaveReceive_BTF>
 8006ae0:	e004      	b.n	8006aec <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8006ae2:	bf00      	nop
 8006ae4:	e002      	b.n	8006aec <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ae6:	bf00      	nop
 8006ae8:	e000      	b.n	8006aec <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006aea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006aec:	3720      	adds	r7, #32
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b08a      	sub	sp, #40	@ 0x28
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b14:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00d      	beq.n	8006b3c <HAL_I2C_ER_IRQHandler+0x4a>
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d008      	beq.n	8006b3c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	f043 0301 	orr.w	r3, r3, #1
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b3a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00d      	beq.n	8006b62 <HAL_I2C_ER_IRQHandler+0x70>
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d008      	beq.n	8006b62 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	f043 0302 	orr.w	r3, r3, #2
 8006b56:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8006b60:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d03e      	beq.n	8006bea <HAL_I2C_ER_IRQHandler+0xf8>
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d039      	beq.n	8006bea <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8006b76:	7efb      	ldrb	r3, [r7, #27]
 8006b78:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b88:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006b90:	7ebb      	ldrb	r3, [r7, #26]
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	d112      	bne.n	8006bbc <HAL_I2C_ER_IRQHandler+0xca>
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10f      	bne.n	8006bbc <HAL_I2C_ER_IRQHandler+0xca>
 8006b9c:	7cfb      	ldrb	r3, [r7, #19]
 8006b9e:	2b21      	cmp	r3, #33	@ 0x21
 8006ba0:	d008      	beq.n	8006bb4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006ba2:	7cfb      	ldrb	r3, [r7, #19]
 8006ba4:	2b29      	cmp	r3, #41	@ 0x29
 8006ba6:	d005      	beq.n	8006bb4 <HAL_I2C_ER_IRQHandler+0xc2>
 8006ba8:	7cfb      	ldrb	r3, [r7, #19]
 8006baa:	2b28      	cmp	r3, #40	@ 0x28
 8006bac:	d106      	bne.n	8006bbc <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b21      	cmp	r3, #33	@ 0x21
 8006bb2:	d103      	bne.n	8006bbc <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 f881 	bl	8007cbc <I2C_Slave_AF>
 8006bba:	e016      	b.n	8006bea <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006bc4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc8:	f043 0304 	orr.w	r3, r3, #4
 8006bcc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006bce:	7efb      	ldrb	r3, [r7, #27]
 8006bd0:	2b10      	cmp	r3, #16
 8006bd2:	d002      	beq.n	8006bda <HAL_I2C_ER_IRQHandler+0xe8>
 8006bd4:	7efb      	ldrb	r3, [r7, #27]
 8006bd6:	2b40      	cmp	r3, #64	@ 0x40
 8006bd8:	d107      	bne.n	8006bea <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006be8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00d      	beq.n	8006c10 <HAL_I2C_ER_IRQHandler+0x11e>
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d008      	beq.n	8006c10 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	f043 0308 	orr.w	r3, r3, #8
 8006c04:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8006c0e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d008      	beq.n	8006c28 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f001 f8be 	bl	8007da4 <I2C_ITError>
  }
}
 8006c28:	bf00      	nop
 8006c2a:	3728      	adds	r7, #40	@ 0x28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006c38:	bf00      	nop
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006c4c:	bf00      	nop
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d150      	bne.n	8006dc8 <I2C_MasterTransmit_TXE+0xc8>
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	2b21      	cmp	r3, #33	@ 0x21
 8006d2a:	d14d      	bne.n	8006dc8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	d01d      	beq.n	8006d6e <I2C_MasterTransmit_TXE+0x6e>
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	d01a      	beq.n	8006d6e <I2C_MasterTransmit_TXE+0x6e>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d3e:	d016      	beq.n	8006d6e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d4e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2211      	movs	r2, #17
 8006d54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2220      	movs	r2, #32
 8006d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff ff62 	bl	8006c30 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d6c:	e060      	b.n	8006e30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d7c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d8c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b40      	cmp	r3, #64	@ 0x40
 8006da6:	d107      	bne.n	8006db8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff ff7d 	bl	8006cb0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006db6:	e03b      	b.n	8006e30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff ff35 	bl	8006c30 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006dc6:	e033      	b.n	8006e30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	2b21      	cmp	r3, #33	@ 0x21
 8006dcc:	d005      	beq.n	8006dda <I2C_MasterTransmit_TXE+0xda>
 8006dce:	7bbb      	ldrb	r3, [r7, #14]
 8006dd0:	2b40      	cmp	r3, #64	@ 0x40
 8006dd2:	d12d      	bne.n	8006e30 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	2b22      	cmp	r3, #34	@ 0x22
 8006dd8:	d12a      	bne.n	8006e30 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d108      	bne.n	8006df6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006df2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006df4:	e01c      	b.n	8006e30 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b40      	cmp	r3, #64	@ 0x40
 8006e00:	d103      	bne.n	8006e0a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f88e 	bl	8006f24 <I2C_MemoryTransmit_TXE_BTF>
}
 8006e08:	e012      	b.n	8006e30 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0e:	781a      	ldrb	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006e2e:	e7ff      	b.n	8006e30 <I2C_MasterTransmit_TXE+0x130>
 8006e30:	bf00      	nop
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e44:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b21      	cmp	r3, #33	@ 0x21
 8006e50:	d164      	bne.n	8006f1c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d012      	beq.n	8006e82 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006e80:	e04c      	b.n	8006f1c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d01d      	beq.n	8006ec4 <I2C_MasterTransmit_BTF+0x8c>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b20      	cmp	r3, #32
 8006e8c:	d01a      	beq.n	8006ec4 <I2C_MasterTransmit_BTF+0x8c>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e94:	d016      	beq.n	8006ec4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ea4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2211      	movs	r2, #17
 8006eaa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff feb7 	bl	8006c30 <HAL_I2C_MasterTxCpltCallback>
}
 8006ec2:	e02b      	b.n	8006f1c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ed2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ee2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b40      	cmp	r3, #64	@ 0x40
 8006efc:	d107      	bne.n	8006f0e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fed2 	bl	8006cb0 <HAL_I2C_MemTxCpltCallback>
}
 8006f0c:	e006      	b.n	8006f1c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff fe8a 	bl	8006c30 <HAL_I2C_MasterTxCpltCallback>
}
 8006f1c:	bf00      	nop
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f32:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d11d      	bne.n	8006f78 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d10b      	bne.n	8006f5c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f54:	1c9a      	adds	r2, r3, #2
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006f5a:	e077      	b.n	800704c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	121b      	asrs	r3, r3, #8
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006f76:	e069      	b.n	800704c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d10b      	bne.n	8006f98 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006f96:	e059      	b.n	800704c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d152      	bne.n	8007046 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
 8006fa2:	2b22      	cmp	r3, #34	@ 0x22
 8006fa4:	d10d      	bne.n	8006fc2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fb4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006fc0:	e044      	b.n	800704c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d015      	beq.n	8006ff8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	2b21      	cmp	r3, #33	@ 0x21
 8006fd0:	d112      	bne.n	8006ff8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd6:	781a      	ldrb	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006ff6:	e029      	b.n	800704c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d124      	bne.n	800704c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	2b21      	cmp	r3, #33	@ 0x21
 8007006:	d121      	bne.n	800704c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007016:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007026:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff fe36 	bl	8006cb0 <HAL_I2C_MemTxCpltCallback>
}
 8007044:	e002      	b.n	800704c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff faec 	bl	8006624 <I2C_Flush_DR>
}
 800704c:	bf00      	nop
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b22      	cmp	r3, #34	@ 0x22
 8007066:	f040 80b9 	bne.w	80071dc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007074:	b29b      	uxth	r3, r3
 8007076:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b03      	cmp	r3, #3
 800707c:	d921      	bls.n	80070c2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	691a      	ldr	r2, [r3, #16]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007088:	b2d2      	uxtb	r2, r2
 800708a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800709a:	b29b      	uxth	r3, r3
 800709c:	3b01      	subs	r3, #1
 800709e:	b29a      	uxth	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	f040 8096 	bne.w	80071dc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070be:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80070c0:	e08c      	b.n	80071dc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d07f      	beq.n	80071ca <I2C_MasterReceive_RXNE+0x176>
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d002      	beq.n	80070d6 <I2C_MasterReceive_RXNE+0x82>
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d179      	bne.n	80071ca <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 fa6a 	bl	80085b0 <I2C_WaitOnSTOPRequestThroughIT>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d14c      	bne.n	800717c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070f0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007100:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b40      	cmp	r3, #64	@ 0x40
 800713a:	d10a      	bne.n	8007152 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff fdba 	bl	8006cc4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007150:	e044      	b.n	80071dc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b08      	cmp	r3, #8
 800715e:	d002      	beq.n	8007166 <I2C_MasterReceive_RXNE+0x112>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b20      	cmp	r3, #32
 8007164:	d103      	bne.n	800716e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	631a      	str	r2, [r3, #48]	@ 0x30
 800716c:	e002      	b.n	8007174 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2212      	movs	r2, #18
 8007172:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7ff fd65 	bl	8006c44 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800717a:	e02f      	b.n	80071dc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800718a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691a      	ldr	r2, [r3, #16]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719e:	1c5a      	adds	r2, r3, #1
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	3b01      	subs	r3, #1
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff fd88 	bl	8006cd8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80071c8:	e008      	b.n	80071dc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071d8:	605a      	str	r2, [r3, #4]
}
 80071da:	e7ff      	b.n	80071dc <I2C_MasterReceive_RXNE+0x188>
 80071dc:	bf00      	nop
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2b04      	cmp	r3, #4
 80071fa:	d11b      	bne.n	8007234 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800720a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	691a      	ldr	r2, [r3, #16]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007216:	b2d2      	uxtb	r2, r2
 8007218:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007228:	b29b      	uxth	r3, r3
 800722a:	3b01      	subs	r3, #1
 800722c:	b29a      	uxth	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007232:	e0c8      	b.n	80073c6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007238:	b29b      	uxth	r3, r3
 800723a:	2b03      	cmp	r3, #3
 800723c:	d129      	bne.n	8007292 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800724c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b04      	cmp	r3, #4
 8007252:	d00a      	beq.n	800726a <I2C_MasterReceive_BTF+0x86>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d007      	beq.n	800726a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007268:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691a      	ldr	r2, [r3, #16]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007274:	b2d2      	uxtb	r2, r2
 8007276:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007286:	b29b      	uxth	r3, r3
 8007288:	3b01      	subs	r3, #1
 800728a:	b29a      	uxth	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007290:	e099      	b.n	80073c6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007296:	b29b      	uxth	r3, r3
 8007298:	2b02      	cmp	r3, #2
 800729a:	f040 8081 	bne.w	80073a0 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d002      	beq.n	80072aa <I2C_MasterReceive_BTF+0xc6>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b10      	cmp	r3, #16
 80072a8:	d108      	bne.n	80072bc <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	e019      	b.n	80072f0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d002      	beq.n	80072c8 <I2C_MasterReceive_BTF+0xe4>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d108      	bne.n	80072da <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	e00a      	b.n	80072f0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b10      	cmp	r3, #16
 80072de:	d007      	beq.n	80072f0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691a      	ldr	r2, [r3, #16]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fa:	b2d2      	uxtb	r2, r2
 80072fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800730c:	b29b      	uxth	r3, r3
 800730e:	3b01      	subs	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	691a      	ldr	r2, [r3, #16]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007320:	b2d2      	uxtb	r2, r2
 8007322:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	b29a      	uxth	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800734a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2220      	movs	r2, #32
 8007350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b40      	cmp	r3, #64	@ 0x40
 800735e:	d10a      	bne.n	8007376 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff fca8 	bl	8006cc4 <HAL_I2C_MemRxCpltCallback>
}
 8007374:	e027      	b.n	80073c6 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b08      	cmp	r3, #8
 8007382:	d002      	beq.n	800738a <I2C_MasterReceive_BTF+0x1a6>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b20      	cmp	r3, #32
 8007388:	d103      	bne.n	8007392 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007390:	e002      	b.n	8007398 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2212      	movs	r2, #18
 8007396:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7ff fc53 	bl	8006c44 <HAL_I2C_MasterRxCpltCallback>
}
 800739e:	e012      	b.n	80073c6 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691a      	ldr	r2, [r3, #16]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073bc:	b29b      	uxth	r3, r3
 80073be:	3b01      	subs	r3, #1
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80073c6:	bf00      	nop
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b40      	cmp	r3, #64	@ 0x40
 80073e0:	d117      	bne.n	8007412 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d109      	bne.n	80073fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80073fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80073fc:	e067      	b.n	80074ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007402:	b2db      	uxtb	r3, r3
 8007404:	f043 0301 	orr.w	r3, r3, #1
 8007408:	b2da      	uxtb	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	611a      	str	r2, [r3, #16]
}
 8007410:	e05d      	b.n	80074ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800741a:	d133      	bne.n	8007484 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b21      	cmp	r3, #33	@ 0x21
 8007426:	d109      	bne.n	800743c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800742c:	b2db      	uxtb	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007438:	611a      	str	r2, [r3, #16]
 800743a:	e008      	b.n	800744e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007440:	b2db      	uxtb	r3, r3
 8007442:	f043 0301 	orr.w	r3, r3, #1
 8007446:	b2da      	uxtb	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <I2C_Master_SB+0x92>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800745a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d108      	bne.n	8007472 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007464:	2b00      	cmp	r3, #0
 8007466:	d032      	beq.n	80074ce <I2C_Master_SB+0x100>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746e:	2b00      	cmp	r3, #0
 8007470:	d02d      	beq.n	80074ce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007480:	605a      	str	r2, [r3, #4]
}
 8007482:	e024      	b.n	80074ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10e      	bne.n	80074aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007490:	b29b      	uxth	r3, r3
 8007492:	11db      	asrs	r3, r3, #7
 8007494:	b2db      	uxtb	r3, r3
 8007496:	f003 0306 	and.w	r3, r3, #6
 800749a:	b2db      	uxtb	r3, r3
 800749c:	f063 030f 	orn	r3, r3, #15
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	611a      	str	r2, [r3, #16]
}
 80074a8:	e011      	b.n	80074ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d10d      	bne.n	80074ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	11db      	asrs	r3, r3, #7
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f003 0306 	and.w	r3, r3, #6
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	f063 030e 	orn	r3, r3, #14
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	611a      	str	r2, [r3, #16]
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d004      	beq.n	8007500 <I2C_Master_ADD10+0x26>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d108      	bne.n	8007512 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00c      	beq.n	8007522 <I2C_Master_ADD10+0x48>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800750e:	2b00      	cmp	r3, #0
 8007510:	d007      	beq.n	8007522 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007520:	605a      	str	r2, [r3, #4]
  }
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800752e:	b480      	push	{r7}
 8007530:	b091      	sub	sp, #68	@ 0x44
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800753c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007544:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b22      	cmp	r3, #34	@ 0x22
 8007556:	f040 8169 	bne.w	800782c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10f      	bne.n	8007582 <I2C_Master_ADDR+0x54>
 8007562:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007566:	2b40      	cmp	r3, #64	@ 0x40
 8007568:	d10b      	bne.n	8007582 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800756a:	2300      	movs	r3, #0
 800756c:	633b      	str	r3, [r7, #48]	@ 0x30
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	633b      	str	r3, [r7, #48]	@ 0x30
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	633b      	str	r3, [r7, #48]	@ 0x30
 800757e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007580:	e160      	b.n	8007844 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007586:	2b00      	cmp	r3, #0
 8007588:	d11d      	bne.n	80075c6 <I2C_Master_ADDR+0x98>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007592:	d118      	bne.n	80075c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007594:	2300      	movs	r3, #0
 8007596:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80075c4:	e13e      	b.n	8007844 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d113      	bne.n	80075f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075d0:	2300      	movs	r3, #0
 80075d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	e115      	b.n	8007824 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	2b01      	cmp	r3, #1
 8007600:	f040 808a 	bne.w	8007718 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007606:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800760a:	d137      	bne.n	800767c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800761a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007626:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800762a:	d113      	bne.n	8007654 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800763a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800763c:	2300      	movs	r3, #0
 800763e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	627b      	str	r3, [r7, #36]	@ 0x24
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	e0e7      	b.n	8007824 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007654:	2300      	movs	r3, #0
 8007656:	623b      	str	r3, [r7, #32]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	623b      	str	r3, [r7, #32]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	623b      	str	r3, [r7, #32]
 8007668:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	e0d3      	b.n	8007824 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800767c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767e:	2b08      	cmp	r3, #8
 8007680:	d02e      	beq.n	80076e0 <I2C_Master_ADDR+0x1b2>
 8007682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007684:	2b20      	cmp	r3, #32
 8007686:	d02b      	beq.n	80076e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800768a:	2b12      	cmp	r3, #18
 800768c:	d102      	bne.n	8007694 <I2C_Master_ADDR+0x166>
 800768e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007690:	2b01      	cmp	r3, #1
 8007692:	d125      	bne.n	80076e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007696:	2b04      	cmp	r3, #4
 8007698:	d00e      	beq.n	80076b8 <I2C_Master_ADDR+0x18a>
 800769a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769c:	2b02      	cmp	r3, #2
 800769e:	d00b      	beq.n	80076b8 <I2C_Master_ADDR+0x18a>
 80076a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a2:	2b10      	cmp	r3, #16
 80076a4:	d008      	beq.n	80076b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	e007      	b.n	80076c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80076c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076c8:	2300      	movs	r3, #0
 80076ca:	61fb      	str	r3, [r7, #28]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	61fb      	str	r3, [r7, #28]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	61fb      	str	r3, [r7, #28]
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	e0a1      	b.n	8007824 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076f0:	2300      	movs	r3, #0
 80076f2:	61bb      	str	r3, [r7, #24]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	61bb      	str	r3, [r7, #24]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	e085      	b.n	8007824 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d14d      	bne.n	80077be <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007724:	2b04      	cmp	r3, #4
 8007726:	d016      	beq.n	8007756 <I2C_Master_ADDR+0x228>
 8007728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772a:	2b02      	cmp	r3, #2
 800772c:	d013      	beq.n	8007756 <I2C_Master_ADDR+0x228>
 800772e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007730:	2b10      	cmp	r3, #16
 8007732:	d010      	beq.n	8007756 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007742:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	e007      	b.n	8007766 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007764:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007774:	d117      	bne.n	80077a6 <I2C_Master_ADDR+0x278>
 8007776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007778:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800777c:	d00b      	beq.n	8007796 <I2C_Master_ADDR+0x268>
 800777e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007780:	2b01      	cmp	r3, #1
 8007782:	d008      	beq.n	8007796 <I2C_Master_ADDR+0x268>
 8007784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007786:	2b08      	cmp	r3, #8
 8007788:	d005      	beq.n	8007796 <I2C_Master_ADDR+0x268>
 800778a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778c:	2b10      	cmp	r3, #16
 800778e:	d002      	beq.n	8007796 <I2C_Master_ADDR+0x268>
 8007790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007792:	2b20      	cmp	r3, #32
 8007794:	d107      	bne.n	80077a6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	685a      	ldr	r2, [r3, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80077a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077a6:	2300      	movs	r3, #0
 80077a8:	617b      	str	r3, [r7, #20]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	617b      	str	r3, [r7, #20]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	e032      	b.n	8007824 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80077cc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077dc:	d117      	bne.n	800780e <I2C_Master_ADDR+0x2e0>
 80077de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80077e4:	d00b      	beq.n	80077fe <I2C_Master_ADDR+0x2d0>
 80077e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d008      	beq.n	80077fe <I2C_Master_ADDR+0x2d0>
 80077ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d005      	beq.n	80077fe <I2C_Master_ADDR+0x2d0>
 80077f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f4:	2b10      	cmp	r3, #16
 80077f6:	d002      	beq.n	80077fe <I2C_Master_ADDR+0x2d0>
 80077f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	d107      	bne.n	800780e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800780c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800780e:	2300      	movs	r3, #0
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	613b      	str	r3, [r7, #16]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	613b      	str	r3, [r7, #16]
 8007822:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800782a:	e00b      	b.n	8007844 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	68fb      	ldr	r3, [r7, #12]
}
 8007842:	e7ff      	b.n	8007844 <I2C_Master_ADDR+0x316>
 8007844:	bf00      	nop
 8007846:	3744      	adds	r7, #68	@ 0x44
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800785e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d02b      	beq.n	80078c2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786e:	781a      	ldrb	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b29a      	uxth	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007892:	b29b      	uxth	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d114      	bne.n	80078c2 <I2C_SlaveTransmit_TXE+0x72>
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	2b29      	cmp	r3, #41	@ 0x29
 800789c:	d111      	bne.n	80078c2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2221      	movs	r2, #33	@ 0x21
 80078b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2228      	movs	r2, #40	@ 0x28
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff f9cb 	bl	8006c58 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d011      	beq.n	8007900 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e0:	781a      	ldrb	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	3b01      	subs	r3, #1
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800791a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d02c      	beq.n	8007980 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	691a      	ldr	r2, [r3, #16]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007930:	b2d2      	uxtb	r2, r2
 8007932:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007942:	b29b      	uxth	r3, r3
 8007944:	3b01      	subs	r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d114      	bne.n	8007980 <I2C_SlaveReceive_RXNE+0x74>
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	2b2a      	cmp	r3, #42	@ 0x2a
 800795a:	d111      	bne.n	8007980 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800796a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2222      	movs	r2, #34	@ 0x22
 8007970:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2228      	movs	r2, #40	@ 0x28
 8007976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff f976 	bl	8006c6c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007980:	bf00      	nop
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d012      	beq.n	80079c0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	691a      	ldr	r2, [r3, #16]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a4:	b2d2      	uxtb	r2, r2
 80079a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ac:	1c5a      	adds	r2, r3, #1
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	3b01      	subs	r3, #1
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80079e6:	2b28      	cmp	r3, #40	@ 0x28
 80079e8:	d125      	bne.n	8007a36 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079f8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007a04:	2301      	movs	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d103      	bne.n	8007a1a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	81bb      	strh	r3, [r7, #12]
 8007a18:	e002      	b.n	8007a20 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007a28:	89ba      	ldrh	r2, [r7, #12]
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7ff f926 	bl	8006c80 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007a34:	e00e      	b.n	8007a54 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a36:	2300      	movs	r3, #0
 8007a38:	60bb      	str	r3, [r7, #8]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	60bb      	str	r3, [r7, #8]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	60bb      	str	r3, [r7, #8]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8007a54:	bf00      	nop
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007a7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60bb      	str	r3, [r7, #8]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	60bb      	str	r3, [r7, #8]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0201 	orr.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007aa8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ab4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ab8:	d172      	bne.n	8007ba0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	2b22      	cmp	r3, #34	@ 0x22
 8007abe:	d002      	beq.n	8007ac6 <I2C_Slave_STOPF+0x6a>
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ac4:	d135      	bne.n	8007b32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d005      	beq.n	8007aea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae2:	f043 0204 	orr.w	r2, r3, #4
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007af8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe fa3d 	bl	8005f7e <HAL_DMA_GetState>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d049      	beq.n	8007b9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0e:	4a69      	ldr	r2, [pc, #420]	@ (8007cb4 <I2C_Slave_STOPF+0x258>)
 8007b10:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7fe fa0f 	bl	8005f3a <HAL_DMA_Abort_IT>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d03d      	beq.n	8007b9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b30:	e035      	b.n	8007b9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4e:	f043 0204 	orr.w	r2, r3, #4
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fe fa07 	bl	8005f7e <HAL_DMA_GetState>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d014      	beq.n	8007ba0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b7a:	4a4e      	ldr	r2, [pc, #312]	@ (8007cb4 <I2C_Slave_STOPF+0x258>)
 8007b7c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe f9d9 	bl	8005f3a <HAL_DMA_Abort_IT>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d008      	beq.n	8007ba0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007b98:	4610      	mov	r0, r2
 8007b9a:	4798      	blx	r3
 8007b9c:	e000      	b.n	8007ba0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d03e      	beq.n	8007c28 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	f003 0304 	and.w	r3, r3, #4
 8007bb4:	2b04      	cmp	r3, #4
 8007bb6:	d112      	bne.n	8007bde <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691a      	ldr	r2, [r3, #16]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc2:	b2d2      	uxtb	r2, r2
 8007bc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be8:	2b40      	cmp	r3, #64	@ 0x40
 8007bea:	d112      	bne.n	8007c12 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf6:	b2d2      	uxtb	r2, r2
 8007bf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d005      	beq.n	8007c28 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c20:	f043 0204 	orr.w	r2, r3, #4
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d003      	beq.n	8007c38 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f8b7 	bl	8007da4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007c36:	e039      	b.n	8007cac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
 8007c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c3c:	d109      	bne.n	8007c52 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2228      	movs	r2, #40	@ 0x28
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7ff f80d 	bl	8006c6c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b28      	cmp	r3, #40	@ 0x28
 8007c5c:	d111      	bne.n	8007c82 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a15      	ldr	r2, [pc, #84]	@ (8007cb8 <I2C_Slave_STOPF+0x25c>)
 8007c62:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff f80e 	bl	8006c9c <HAL_I2C_ListenCpltCallback>
}
 8007c80:	e014      	b.n	8007cac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c86:	2b22      	cmp	r3, #34	@ 0x22
 8007c88:	d002      	beq.n	8007c90 <I2C_Slave_STOPF+0x234>
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
 8007c8c:	2b22      	cmp	r3, #34	@ 0x22
 8007c8e:	d10d      	bne.n	8007cac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7fe ffe0 	bl	8006c6c <HAL_I2C_SlaveRxCpltCallback>
}
 8007cac:	bf00      	nop
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	0800810d 	.word	0x0800810d
 8007cb8:	ffff0000 	.word	0xffff0000

08007cbc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2b08      	cmp	r3, #8
 8007cd6:	d002      	beq.n	8007cde <I2C_Slave_AF+0x22>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	d129      	bne.n	8007d32 <I2C_Slave_AF+0x76>
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	2b28      	cmp	r3, #40	@ 0x28
 8007ce2:	d126      	bne.n	8007d32 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a2e      	ldr	r2, [pc, #184]	@ (8007da0 <I2C_Slave_AF+0xe4>)
 8007ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007cf8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007d02:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d12:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fe ffb6 	bl	8006c9c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007d30:	e031      	b.n	8007d96 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	2b21      	cmp	r3, #33	@ 0x21
 8007d36:	d129      	bne.n	8007d8c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a19      	ldr	r2, [pc, #100]	@ (8007da0 <I2C_Slave_AF+0xe4>)
 8007d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2221      	movs	r2, #33	@ 0x21
 8007d42:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007d62:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007d6c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d7c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7fe fc50 	bl	8006624 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7fe ff67 	bl	8006c58 <HAL_I2C_SlaveTxCpltCallback>
}
 8007d8a:	e004      	b.n	8007d96 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007d94:	615a      	str	r2, [r3, #20]
}
 8007d96:	bf00      	nop
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	ffff0000 	.word	0xffff0000

08007da4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007db2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007dba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	2b10      	cmp	r3, #16
 8007dc0:	d002      	beq.n	8007dc8 <I2C_ITError+0x24>
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b40      	cmp	r3, #64	@ 0x40
 8007dc6:	d10a      	bne.n	8007dde <I2C_ITError+0x3a>
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	2b22      	cmp	r3, #34	@ 0x22
 8007dcc:	d107      	bne.n	8007dde <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ddc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007de4:	2b28      	cmp	r3, #40	@ 0x28
 8007de6:	d107      	bne.n	8007df8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2228      	movs	r2, #40	@ 0x28
 8007df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007df6:	e015      	b.n	8007e24 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e06:	d00a      	beq.n	8007e1e <I2C_ITError+0x7a>
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
 8007e0a:	2b60      	cmp	r3, #96	@ 0x60
 8007e0c:	d007      	beq.n	8007e1e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e32:	d162      	bne.n	8007efa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e42:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d020      	beq.n	8007e94 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e56:	4a6a      	ldr	r2, [pc, #424]	@ (8008000 <I2C_ITError+0x25c>)
 8007e58:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe f86b 	bl	8005f3a <HAL_DMA_Abort_IT>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 8089 	beq.w	8007f7e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0201 	bic.w	r2, r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007e8e:	4610      	mov	r0, r2
 8007e90:	4798      	blx	r3
 8007e92:	e074      	b.n	8007f7e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e98:	4a59      	ldr	r2, [pc, #356]	@ (8008000 <I2C_ITError+0x25c>)
 8007e9a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe f84a 	bl	8005f3a <HAL_DMA_Abort_IT>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d068      	beq.n	8007f7e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb6:	2b40      	cmp	r3, #64	@ 0x40
 8007eb8:	d10b      	bne.n	8007ed2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	691a      	ldr	r2, [r3, #16]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec4:	b2d2      	uxtb	r2, r2
 8007ec6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0201 	bic.w	r2, r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	4798      	blx	r3
 8007ef8:	e041      	b.n	8007f7e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b60      	cmp	r3, #96	@ 0x60
 8007f04:	d125      	bne.n	8007f52 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f1e:	2b40      	cmp	r3, #64	@ 0x40
 8007f20:	d10b      	bne.n	8007f3a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	691a      	ldr	r2, [r3, #16]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2c:	b2d2      	uxtb	r2, r2
 8007f2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0201 	bic.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fe fece 	bl	8006cec <HAL_I2C_AbortCpltCallback>
 8007f50:	e015      	b.n	8007f7e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5c:	2b40      	cmp	r3, #64	@ 0x40
 8007f5e:	d10b      	bne.n	8007f78 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691a      	ldr	r2, [r3, #16]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6a:	b2d2      	uxtb	r2, r2
 8007f6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7fe fead 	bl	8006cd8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f82:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d10e      	bne.n	8007fac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d109      	bne.n	8007fac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d104      	bne.n	8007fac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d007      	beq.n	8007fbc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007fba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fc2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d113      	bne.n	8007ff8 <I2C_ITError+0x254>
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	2b28      	cmp	r3, #40	@ 0x28
 8007fd4:	d110      	bne.n	8007ff8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8008004 <I2C_ITError+0x260>)
 8007fda:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7fe fe52 	bl	8006c9c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ff8:	bf00      	nop
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	0800810d 	.word	0x0800810d
 8008004:	ffff0000 	.word	0xffff0000

08008008 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b088      	sub	sp, #32
 800800c:	af02      	add	r7, sp, #8
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	607a      	str	r2, [r7, #4]
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	460b      	mov	r3, r1
 8008016:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2b08      	cmp	r3, #8
 8008022:	d006      	beq.n	8008032 <I2C_MasterRequestWrite+0x2a>
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d003      	beq.n	8008032 <I2C_MasterRequestWrite+0x2a>
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008030:	d108      	bne.n	8008044 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	e00b      	b.n	800805c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008048:	2b12      	cmp	r3, #18
 800804a:	d107      	bne.n	800805c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800805a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 f8f7 	bl	800825c <I2C_WaitOnFlagUntilTimeout>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00d      	beq.n	8008090 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800807e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008082:	d103      	bne.n	800808c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800808a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e035      	b.n	80080fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008098:	d108      	bne.n	80080ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800809a:	897b      	ldrh	r3, [r7, #10]
 800809c:	b2db      	uxtb	r3, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80080a8:	611a      	str	r2, [r3, #16]
 80080aa:	e01b      	b.n	80080e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80080ac:	897b      	ldrh	r3, [r7, #10]
 80080ae:	11db      	asrs	r3, r3, #7
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	f003 0306 	and.w	r3, r3, #6
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	f063 030f 	orn	r3, r3, #15
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	490e      	ldr	r1, [pc, #56]	@ (8008104 <I2C_MasterRequestWrite+0xfc>)
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 f940 	bl	8008350 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e010      	b.n	80080fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80080da:	897b      	ldrh	r3, [r7, #10]
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	4907      	ldr	r1, [pc, #28]	@ (8008108 <I2C_MasterRequestWrite+0x100>)
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 f930 	bl	8008350 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e000      	b.n	80080fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	00010008 	.word	0x00010008
 8008108:	00010002 	.word	0x00010002

0800810c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008124:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008126:	4b4b      	ldr	r3, [pc, #300]	@ (8008254 <I2C_DMAAbort+0x148>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	08db      	lsrs	r3, r3, #3
 800812c:	4a4a      	ldr	r2, [pc, #296]	@ (8008258 <I2C_DMAAbort+0x14c>)
 800812e:	fba2 2303 	umull	r2, r3, r2, r3
 8008132:	0a1a      	lsrs	r2, r3, #8
 8008134:	4613      	mov	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	00da      	lsls	r2, r3, #3
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800814a:	f043 0220 	orr.w	r2, r3, #32
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8008152:	e00a      	b.n	800816a <I2C_DMAAbort+0x5e>
    }
    count--;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	3b01      	subs	r3, #1
 8008158:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008168:	d0ea      	beq.n	8008140 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008176:	2200      	movs	r2, #0
 8008178:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008186:	2200      	movs	r2, #0
 8008188:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008198:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2200      	movs	r2, #0
 800819e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d003      	beq.n	80081b0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ac:	2200      	movs	r2, #0
 80081ae:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081bc:	2200      	movs	r2, #0
 80081be:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 0201 	bic.w	r2, r2, #1
 80081ce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b60      	cmp	r3, #96	@ 0x60
 80081da:	d10e      	bne.n	80081fa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2200      	movs	r2, #0
 80081f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80081f2:	6978      	ldr	r0, [r7, #20]
 80081f4:	f7fe fd7a 	bl	8006cec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80081f8:	e027      	b.n	800824a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80081fa:	7cfb      	ldrb	r3, [r7, #19]
 80081fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008200:	2b28      	cmp	r3, #40	@ 0x28
 8008202:	d117      	bne.n	8008234 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f042 0201 	orr.w	r2, r2, #1
 8008212:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008222:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	2200      	movs	r2, #0
 8008228:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2228      	movs	r2, #40	@ 0x28
 800822e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008232:	e007      	b.n	8008244 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2220      	movs	r2, #32
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008244:	6978      	ldr	r0, [r7, #20]
 8008246:	f7fe fd47 	bl	8006cd8 <HAL_I2C_ErrorCallback>
}
 800824a:	bf00      	nop
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	200000a8 	.word	0x200000a8
 8008258:	14f8b589 	.word	0x14f8b589

0800825c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	603b      	str	r3, [r7, #0]
 8008268:	4613      	mov	r3, r2
 800826a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800826c:	e048      	b.n	8008300 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008274:	d044      	beq.n	8008300 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008276:	f7fc ff77 	bl	8005168 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	429a      	cmp	r2, r3
 8008284:	d302      	bcc.n	800828c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d139      	bne.n	8008300 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	0c1b      	lsrs	r3, r3, #16
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b01      	cmp	r3, #1
 8008294:	d10d      	bne.n	80082b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	43da      	mvns	r2, r3
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	4013      	ands	r3, r2
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	bf0c      	ite	eq
 80082a8:	2301      	moveq	r3, #1
 80082aa:	2300      	movne	r3, #0
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	461a      	mov	r2, r3
 80082b0:	e00c      	b.n	80082cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	43da      	mvns	r2, r3
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	4013      	ands	r3, r2
 80082be:	b29b      	uxth	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	bf0c      	ite	eq
 80082c4:	2301      	moveq	r3, #1
 80082c6:	2300      	movne	r3, #0
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	461a      	mov	r2, r3
 80082cc:	79fb      	ldrb	r3, [r7, #7]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d116      	bne.n	8008300 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2220      	movs	r2, #32
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ec:	f043 0220 	orr.w	r2, r3, #32
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e023      	b.n	8008348 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	0c1b      	lsrs	r3, r3, #16
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b01      	cmp	r3, #1
 8008308:	d10d      	bne.n	8008326 <I2C_WaitOnFlagUntilTimeout+0xca>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	43da      	mvns	r2, r3
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	4013      	ands	r3, r2
 8008316:	b29b      	uxth	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	bf0c      	ite	eq
 800831c:	2301      	moveq	r3, #1
 800831e:	2300      	movne	r3, #0
 8008320:	b2db      	uxtb	r3, r3
 8008322:	461a      	mov	r2, r3
 8008324:	e00c      	b.n	8008340 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	43da      	mvns	r2, r3
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	4013      	ands	r3, r2
 8008332:	b29b      	uxth	r3, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	bf0c      	ite	eq
 8008338:	2301      	moveq	r3, #1
 800833a:	2300      	movne	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	461a      	mov	r2, r3
 8008340:	79fb      	ldrb	r3, [r7, #7]
 8008342:	429a      	cmp	r2, r3
 8008344:	d093      	beq.n	800826e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800835e:	e071      	b.n	8008444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800836a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800836e:	d123      	bne.n	80083b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800837e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008388:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2220      	movs	r2, #32
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a4:	f043 0204 	orr.w	r2, r3, #4
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e067      	b.n	8008488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083be:	d041      	beq.n	8008444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083c0:	f7fc fed2 	bl	8005168 <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d302      	bcc.n	80083d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d136      	bne.n	8008444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	0c1b      	lsrs	r3, r3, #16
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d10c      	bne.n	80083fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	43da      	mvns	r2, r3
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	4013      	ands	r3, r2
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	bf14      	ite	ne
 80083f2:	2301      	movne	r3, #1
 80083f4:	2300      	moveq	r3, #0
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	e00b      	b.n	8008412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	43da      	mvns	r2, r3
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	4013      	ands	r3, r2
 8008406:	b29b      	uxth	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	bf14      	ite	ne
 800840c:	2301      	movne	r3, #1
 800840e:	2300      	moveq	r3, #0
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d016      	beq.n	8008444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2200      	movs	r2, #0
 800841a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2220      	movs	r2, #32
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008430:	f043 0220 	orr.w	r2, r3, #32
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e021      	b.n	8008488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	0c1b      	lsrs	r3, r3, #16
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b01      	cmp	r3, #1
 800844c:	d10c      	bne.n	8008468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	43da      	mvns	r2, r3
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	4013      	ands	r3, r2
 800845a:	b29b      	uxth	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	bf14      	ite	ne
 8008460:	2301      	movne	r3, #1
 8008462:	2300      	moveq	r3, #0
 8008464:	b2db      	uxtb	r3, r3
 8008466:	e00b      	b.n	8008480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	43da      	mvns	r2, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	4013      	ands	r3, r2
 8008474:	b29b      	uxth	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	bf14      	ite	ne
 800847a:	2301      	movne	r3, #1
 800847c:	2300      	moveq	r3, #0
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b00      	cmp	r3, #0
 8008482:	f47f af6d 	bne.w	8008360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800849c:	e034      	b.n	8008508 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f000 f8b8 	bl	8008614 <I2C_IsAcknowledgeFailed>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e034      	b.n	8008518 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b4:	d028      	beq.n	8008508 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084b6:	f7fc fe57 	bl	8005168 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d302      	bcc.n	80084cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d11d      	bne.n	8008508 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084d6:	2b80      	cmp	r3, #128	@ 0x80
 80084d8:	d016      	beq.n	8008508 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f4:	f043 0220 	orr.w	r2, r3, #32
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e007      	b.n	8008518 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008512:	2b80      	cmp	r3, #128	@ 0x80
 8008514:	d1c3      	bne.n	800849e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800852c:	e034      	b.n	8008598 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 f870 	bl	8008614 <I2C_IsAcknowledgeFailed>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e034      	b.n	80085a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008544:	d028      	beq.n	8008598 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008546:	f7fc fe0f 	bl	8005168 <HAL_GetTick>
 800854a:	4602      	mov	r2, r0
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	429a      	cmp	r2, r3
 8008554:	d302      	bcc.n	800855c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d11d      	bne.n	8008598 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	2b04      	cmp	r3, #4
 8008568:	d016      	beq.n	8008598 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2220      	movs	r2, #32
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008584:	f043 0220 	orr.w	r2, r3, #32
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e007      	b.n	80085a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	f003 0304 	and.w	r3, r3, #4
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d1c3      	bne.n	800852e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80085bc:	4b13      	ldr	r3, [pc, #76]	@ (800860c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	08db      	lsrs	r3, r3, #3
 80085c2:	4a13      	ldr	r2, [pc, #76]	@ (8008610 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80085c4:	fba2 2303 	umull	r2, r3, r2, r3
 80085c8:	0a1a      	lsrs	r2, r3, #8
 80085ca:	4613      	mov	r3, r2
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3b01      	subs	r3, #1
 80085d6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d107      	bne.n	80085ee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e2:	f043 0220 	orr.w	r2, r3, #32
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e008      	b.n	8008600 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085fc:	d0e9      	beq.n	80085d2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	200000a8 	.word	0x200000a8
 8008610:	14f8b589 	.word	0x14f8b589

08008614 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800862a:	d11b      	bne.n	8008664 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008634:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2220      	movs	r2, #32
 8008640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008650:	f043 0204 	orr.w	r2, r3, #4
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e000      	b.n	8008666 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	370c      	adds	r7, #12
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008682:	d103      	bne.n	800868c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800868a:	e007      	b.n	800869c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008690:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008694:	d102      	bne.n	800869c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2208      	movs	r2, #8
 800869a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80086ac:	4b06      	ldr	r3, [pc, #24]	@ (80086c8 <HAL_PWR_PVD_IRQHandler+0x20>)
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d005      	beq.n	80086c4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80086b8:	f000 f808 	bl	80086cc <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80086bc:	4b02      	ldr	r3, [pc, #8]	@ (80086c8 <HAL_PWR_PVD_IRQHandler+0x20>)
 80086be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80086c2:	615a      	str	r2, [r3, #20]
  }
}
 80086c4:	bf00      	nop
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	40013c00 	.word	0x40013c00

080086cc <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80086d0:	bf00      	nop
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
	...

080086dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d101      	bne.n	80086ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e267      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d075      	beq.n	80087e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80086fa:	4b88      	ldr	r3, [pc, #544]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f003 030c 	and.w	r3, r3, #12
 8008702:	2b04      	cmp	r3, #4
 8008704:	d00c      	beq.n	8008720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008706:	4b85      	ldr	r3, [pc, #532]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800870e:	2b08      	cmp	r3, #8
 8008710:	d112      	bne.n	8008738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008712:	4b82      	ldr	r3, [pc, #520]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800871a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800871e:	d10b      	bne.n	8008738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008720:	4b7e      	ldr	r3, [pc, #504]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d05b      	beq.n	80087e4 <HAL_RCC_OscConfig+0x108>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d157      	bne.n	80087e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e242      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008740:	d106      	bne.n	8008750 <HAL_RCC_OscConfig+0x74>
 8008742:	4b76      	ldr	r3, [pc, #472]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a75      	ldr	r2, [pc, #468]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 8008748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800874c:	6013      	str	r3, [r2, #0]
 800874e:	e01d      	b.n	800878c <HAL_RCC_OscConfig+0xb0>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008758:	d10c      	bne.n	8008774 <HAL_RCC_OscConfig+0x98>
 800875a:	4b70      	ldr	r3, [pc, #448]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a6f      	ldr	r2, [pc, #444]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 8008760:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	4b6d      	ldr	r3, [pc, #436]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a6c      	ldr	r2, [pc, #432]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 800876c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008770:	6013      	str	r3, [r2, #0]
 8008772:	e00b      	b.n	800878c <HAL_RCC_OscConfig+0xb0>
 8008774:	4b69      	ldr	r3, [pc, #420]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a68      	ldr	r2, [pc, #416]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 800877a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800877e:	6013      	str	r3, [r2, #0]
 8008780:	4b66      	ldr	r3, [pc, #408]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a65      	ldr	r2, [pc, #404]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 8008786:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800878a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d013      	beq.n	80087bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008794:	f7fc fce8 	bl	8005168 <HAL_GetTick>
 8008798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800879a:	e008      	b.n	80087ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800879c:	f7fc fce4 	bl	8005168 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	2b64      	cmp	r3, #100	@ 0x64
 80087a8:	d901      	bls.n	80087ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e207      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087ae:	4b5b      	ldr	r3, [pc, #364]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d0f0      	beq.n	800879c <HAL_RCC_OscConfig+0xc0>
 80087ba:	e014      	b.n	80087e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087bc:	f7fc fcd4 	bl	8005168 <HAL_GetTick>
 80087c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087c2:	e008      	b.n	80087d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087c4:	f7fc fcd0 	bl	8005168 <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	2b64      	cmp	r3, #100	@ 0x64
 80087d0:	d901      	bls.n	80087d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e1f3      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087d6:	4b51      	ldr	r3, [pc, #324]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1f0      	bne.n	80087c4 <HAL_RCC_OscConfig+0xe8>
 80087e2:	e000      	b.n	80087e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 0302 	and.w	r3, r3, #2
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d063      	beq.n	80088ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80087f2:	4b4a      	ldr	r3, [pc, #296]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f003 030c 	and.w	r3, r3, #12
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00b      	beq.n	8008816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087fe:	4b47      	ldr	r3, [pc, #284]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008806:	2b08      	cmp	r3, #8
 8008808:	d11c      	bne.n	8008844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800880a:	4b44      	ldr	r3, [pc, #272]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d116      	bne.n	8008844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008816:	4b41      	ldr	r3, [pc, #260]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 0302 	and.w	r3, r3, #2
 800881e:	2b00      	cmp	r3, #0
 8008820:	d005      	beq.n	800882e <HAL_RCC_OscConfig+0x152>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d001      	beq.n	800882e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e1c7      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800882e:	4b3b      	ldr	r3, [pc, #236]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	4937      	ldr	r1, [pc, #220]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 800883e:	4313      	orrs	r3, r2
 8008840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008842:	e03a      	b.n	80088ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d020      	beq.n	800888e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800884c:	4b34      	ldr	r3, [pc, #208]	@ (8008920 <HAL_RCC_OscConfig+0x244>)
 800884e:	2201      	movs	r2, #1
 8008850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008852:	f7fc fc89 	bl	8005168 <HAL_GetTick>
 8008856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008858:	e008      	b.n	800886c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800885a:	f7fc fc85 	bl	8005168 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b02      	cmp	r3, #2
 8008866:	d901      	bls.n	800886c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e1a8      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800886c:	4b2b      	ldr	r3, [pc, #172]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d0f0      	beq.n	800885a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008878:	4b28      	ldr	r3, [pc, #160]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	4925      	ldr	r1, [pc, #148]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 8008888:	4313      	orrs	r3, r2
 800888a:	600b      	str	r3, [r1, #0]
 800888c:	e015      	b.n	80088ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800888e:	4b24      	ldr	r3, [pc, #144]	@ (8008920 <HAL_RCC_OscConfig+0x244>)
 8008890:	2200      	movs	r2, #0
 8008892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008894:	f7fc fc68 	bl	8005168 <HAL_GetTick>
 8008898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800889a:	e008      	b.n	80088ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800889c:	f7fc fc64 	bl	8005168 <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d901      	bls.n	80088ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e187      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088ae:	4b1b      	ldr	r3, [pc, #108]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0302 	and.w	r3, r3, #2
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1f0      	bne.n	800889c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0308 	and.w	r3, r3, #8
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d036      	beq.n	8008934 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d016      	beq.n	80088fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088ce:	4b15      	ldr	r3, [pc, #84]	@ (8008924 <HAL_RCC_OscConfig+0x248>)
 80088d0:	2201      	movs	r2, #1
 80088d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088d4:	f7fc fc48 	bl	8005168 <HAL_GetTick>
 80088d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088da:	e008      	b.n	80088ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088dc:	f7fc fc44 	bl	8005168 <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d901      	bls.n	80088ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e167      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088ee:	4b0b      	ldr	r3, [pc, #44]	@ (800891c <HAL_RCC_OscConfig+0x240>)
 80088f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d0f0      	beq.n	80088dc <HAL_RCC_OscConfig+0x200>
 80088fa:	e01b      	b.n	8008934 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088fc:	4b09      	ldr	r3, [pc, #36]	@ (8008924 <HAL_RCC_OscConfig+0x248>)
 80088fe:	2200      	movs	r2, #0
 8008900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008902:	f7fc fc31 	bl	8005168 <HAL_GetTick>
 8008906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008908:	e00e      	b.n	8008928 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800890a:	f7fc fc2d 	bl	8005168 <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	2b02      	cmp	r3, #2
 8008916:	d907      	bls.n	8008928 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e150      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
 800891c:	40023800 	.word	0x40023800
 8008920:	42470000 	.word	0x42470000
 8008924:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008928:	4b88      	ldr	r3, [pc, #544]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 800892a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1ea      	bne.n	800890a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0304 	and.w	r3, r3, #4
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 8097 	beq.w	8008a70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008942:	2300      	movs	r3, #0
 8008944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008946:	4b81      	ldr	r3, [pc, #516]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 8008948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10f      	bne.n	8008972 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008952:	2300      	movs	r3, #0
 8008954:	60bb      	str	r3, [r7, #8]
 8008956:	4b7d      	ldr	r3, [pc, #500]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 8008958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895a:	4a7c      	ldr	r2, [pc, #496]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 800895c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008960:	6413      	str	r3, [r2, #64]	@ 0x40
 8008962:	4b7a      	ldr	r3, [pc, #488]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 8008964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800896a:	60bb      	str	r3, [r7, #8]
 800896c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800896e:	2301      	movs	r3, #1
 8008970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008972:	4b77      	ldr	r3, [pc, #476]	@ (8008b50 <HAL_RCC_OscConfig+0x474>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800897a:	2b00      	cmp	r3, #0
 800897c:	d118      	bne.n	80089b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800897e:	4b74      	ldr	r3, [pc, #464]	@ (8008b50 <HAL_RCC_OscConfig+0x474>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a73      	ldr	r2, [pc, #460]	@ (8008b50 <HAL_RCC_OscConfig+0x474>)
 8008984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800898a:	f7fc fbed 	bl	8005168 <HAL_GetTick>
 800898e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008990:	e008      	b.n	80089a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008992:	f7fc fbe9 	bl	8005168 <HAL_GetTick>
 8008996:	4602      	mov	r2, r0
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	2b02      	cmp	r3, #2
 800899e:	d901      	bls.n	80089a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e10c      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089a4:	4b6a      	ldr	r3, [pc, #424]	@ (8008b50 <HAL_RCC_OscConfig+0x474>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d0f0      	beq.n	8008992 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d106      	bne.n	80089c6 <HAL_RCC_OscConfig+0x2ea>
 80089b8:	4b64      	ldr	r3, [pc, #400]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 80089ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089bc:	4a63      	ldr	r2, [pc, #396]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 80089be:	f043 0301 	orr.w	r3, r3, #1
 80089c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80089c4:	e01c      	b.n	8008a00 <HAL_RCC_OscConfig+0x324>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	2b05      	cmp	r3, #5
 80089cc:	d10c      	bne.n	80089e8 <HAL_RCC_OscConfig+0x30c>
 80089ce:	4b5f      	ldr	r3, [pc, #380]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 80089d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d2:	4a5e      	ldr	r2, [pc, #376]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 80089d4:	f043 0304 	orr.w	r3, r3, #4
 80089d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80089da:	4b5c      	ldr	r3, [pc, #368]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 80089dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089de:	4a5b      	ldr	r2, [pc, #364]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 80089e0:	f043 0301 	orr.w	r3, r3, #1
 80089e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80089e6:	e00b      	b.n	8008a00 <HAL_RCC_OscConfig+0x324>
 80089e8:	4b58      	ldr	r3, [pc, #352]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 80089ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ec:	4a57      	ldr	r2, [pc, #348]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 80089ee:	f023 0301 	bic.w	r3, r3, #1
 80089f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80089f4:	4b55      	ldr	r3, [pc, #340]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 80089f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089f8:	4a54      	ldr	r2, [pc, #336]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 80089fa:	f023 0304 	bic.w	r3, r3, #4
 80089fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d015      	beq.n	8008a34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a08:	f7fc fbae 	bl	8005168 <HAL_GetTick>
 8008a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a0e:	e00a      	b.n	8008a26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a10:	f7fc fbaa 	bl	8005168 <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e0cb      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a26:	4b49      	ldr	r3, [pc, #292]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 8008a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0ee      	beq.n	8008a10 <HAL_RCC_OscConfig+0x334>
 8008a32:	e014      	b.n	8008a5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a34:	f7fc fb98 	bl	8005168 <HAL_GetTick>
 8008a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a3a:	e00a      	b.n	8008a52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a3c:	f7fc fb94 	bl	8005168 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d901      	bls.n	8008a52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e0b5      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a52:	4b3e      	ldr	r3, [pc, #248]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 8008a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a56:	f003 0302 	and.w	r3, r3, #2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1ee      	bne.n	8008a3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d105      	bne.n	8008a70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a64:	4b39      	ldr	r3, [pc, #228]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 8008a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a68:	4a38      	ldr	r2, [pc, #224]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 8008a6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 80a1 	beq.w	8008bbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a7a:	4b34      	ldr	r3, [pc, #208]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	f003 030c 	and.w	r3, r3, #12
 8008a82:	2b08      	cmp	r3, #8
 8008a84:	d05c      	beq.n	8008b40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d141      	bne.n	8008b12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a8e:	4b31      	ldr	r3, [pc, #196]	@ (8008b54 <HAL_RCC_OscConfig+0x478>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a94:	f7fc fb68 	bl	8005168 <HAL_GetTick>
 8008a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a9a:	e008      	b.n	8008aae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a9c:	f7fc fb64 	bl	8005168 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e087      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aae:	4b27      	ldr	r3, [pc, #156]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1f0      	bne.n	8008a9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	69da      	ldr	r2, [r3, #28]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac8:	019b      	lsls	r3, r3, #6
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad0:	085b      	lsrs	r3, r3, #1
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	041b      	lsls	r3, r3, #16
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008adc:	061b      	lsls	r3, r3, #24
 8008ade:	491b      	ldr	r1, [pc, #108]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8008b54 <HAL_RCC_OscConfig+0x478>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aea:	f7fc fb3d 	bl	8005168 <HAL_GetTick>
 8008aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008af0:	e008      	b.n	8008b04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008af2:	f7fc fb39 	bl	8005168 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d901      	bls.n	8008b04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e05c      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b04:	4b11      	ldr	r3, [pc, #68]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0f0      	beq.n	8008af2 <HAL_RCC_OscConfig+0x416>
 8008b10:	e054      	b.n	8008bbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b12:	4b10      	ldr	r3, [pc, #64]	@ (8008b54 <HAL_RCC_OscConfig+0x478>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b18:	f7fc fb26 	bl	8005168 <HAL_GetTick>
 8008b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b1e:	e008      	b.n	8008b32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b20:	f7fc fb22 	bl	8005168 <HAL_GetTick>
 8008b24:	4602      	mov	r2, r0
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d901      	bls.n	8008b32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e045      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b32:	4b06      	ldr	r3, [pc, #24]	@ (8008b4c <HAL_RCC_OscConfig+0x470>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1f0      	bne.n	8008b20 <HAL_RCC_OscConfig+0x444>
 8008b3e:	e03d      	b.n	8008bbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d107      	bne.n	8008b58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e038      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
 8008b4c:	40023800 	.word	0x40023800
 8008b50:	40007000 	.word	0x40007000
 8008b54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b58:	4b1b      	ldr	r3, [pc, #108]	@ (8008bc8 <HAL_RCC_OscConfig+0x4ec>)
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d028      	beq.n	8008bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d121      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d11a      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008b88:	4013      	ands	r3, r2
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d111      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b9e:	085b      	lsrs	r3, r3, #1
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d107      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d001      	beq.n	8008bbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e000      	b.n	8008bbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	40023800 	.word	0x40023800

08008bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d101      	bne.n	8008be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e0cc      	b.n	8008d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008be0:	4b68      	ldr	r3, [pc, #416]	@ (8008d84 <HAL_RCC_ClockConfig+0x1b8>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0307 	and.w	r3, r3, #7
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d90c      	bls.n	8008c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bee:	4b65      	ldr	r3, [pc, #404]	@ (8008d84 <HAL_RCC_ClockConfig+0x1b8>)
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	b2d2      	uxtb	r2, r2
 8008bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bf6:	4b63      	ldr	r3, [pc, #396]	@ (8008d84 <HAL_RCC_ClockConfig+0x1b8>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0307 	and.w	r3, r3, #7
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d001      	beq.n	8008c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e0b8      	b.n	8008d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d020      	beq.n	8008c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0304 	and.w	r3, r3, #4
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d005      	beq.n	8008c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c20:	4b59      	ldr	r3, [pc, #356]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	4a58      	ldr	r2, [pc, #352]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008c26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008c2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 0308 	and.w	r3, r3, #8
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d005      	beq.n	8008c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c38:	4b53      	ldr	r3, [pc, #332]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	4a52      	ldr	r2, [pc, #328]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008c3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c44:	4b50      	ldr	r3, [pc, #320]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	494d      	ldr	r1, [pc, #308]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d044      	beq.n	8008cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d107      	bne.n	8008c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c6a:	4b47      	ldr	r3, [pc, #284]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d119      	bne.n	8008caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e07f      	b.n	8008d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d003      	beq.n	8008c8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d107      	bne.n	8008c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c8a:	4b3f      	ldr	r3, [pc, #252]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d109      	bne.n	8008caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e06f      	b.n	8008d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e067      	b.n	8008d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008caa:	4b37      	ldr	r3, [pc, #220]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f023 0203 	bic.w	r2, r3, #3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	4934      	ldr	r1, [pc, #208]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008cbc:	f7fc fa54 	bl	8005168 <HAL_GetTick>
 8008cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cc2:	e00a      	b.n	8008cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cc4:	f7fc fa50 	bl	8005168 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d901      	bls.n	8008cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e04f      	b.n	8008d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cda:	4b2b      	ldr	r3, [pc, #172]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 020c 	and.w	r2, r3, #12
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d1eb      	bne.n	8008cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cec:	4b25      	ldr	r3, [pc, #148]	@ (8008d84 <HAL_RCC_ClockConfig+0x1b8>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0307 	and.w	r3, r3, #7
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d20c      	bcs.n	8008d14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cfa:	4b22      	ldr	r3, [pc, #136]	@ (8008d84 <HAL_RCC_ClockConfig+0x1b8>)
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d02:	4b20      	ldr	r3, [pc, #128]	@ (8008d84 <HAL_RCC_ClockConfig+0x1b8>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d001      	beq.n	8008d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e032      	b.n	8008d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0304 	and.w	r3, r3, #4
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d008      	beq.n	8008d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d20:	4b19      	ldr	r3, [pc, #100]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	4916      	ldr	r1, [pc, #88]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0308 	and.w	r3, r3, #8
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d009      	beq.n	8008d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d3e:	4b12      	ldr	r3, [pc, #72]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	00db      	lsls	r3, r3, #3
 8008d4c:	490e      	ldr	r1, [pc, #56]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d52:	f000 f821 	bl	8008d98 <HAL_RCC_GetSysClockFreq>
 8008d56:	4602      	mov	r2, r0
 8008d58:	4b0b      	ldr	r3, [pc, #44]	@ (8008d88 <HAL_RCC_ClockConfig+0x1bc>)
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	091b      	lsrs	r3, r3, #4
 8008d5e:	f003 030f 	and.w	r3, r3, #15
 8008d62:	490a      	ldr	r1, [pc, #40]	@ (8008d8c <HAL_RCC_ClockConfig+0x1c0>)
 8008d64:	5ccb      	ldrb	r3, [r1, r3]
 8008d66:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6a:	4a09      	ldr	r2, [pc, #36]	@ (8008d90 <HAL_RCC_ClockConfig+0x1c4>)
 8008d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d6e:	4b09      	ldr	r3, [pc, #36]	@ (8008d94 <HAL_RCC_ClockConfig+0x1c8>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fc f9b4 	bl	80050e0 <HAL_InitTick>

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	40023c00 	.word	0x40023c00
 8008d88:	40023800 	.word	0x40023800
 8008d8c:	08014878 	.word	0x08014878
 8008d90:	200000a8 	.word	0x200000a8
 8008d94:	200000ac 	.word	0x200000ac

08008d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d9c:	b094      	sub	sp, #80	@ 0x50
 8008d9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008da0:	2300      	movs	r3, #0
 8008da2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008da4:	2300      	movs	r3, #0
 8008da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008da8:	2300      	movs	r3, #0
 8008daa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008db0:	4b79      	ldr	r3, [pc, #484]	@ (8008f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f003 030c 	and.w	r3, r3, #12
 8008db8:	2b08      	cmp	r3, #8
 8008dba:	d00d      	beq.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x40>
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	f200 80e1 	bhi.w	8008f84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d002      	beq.n	8008dcc <HAL_RCC_GetSysClockFreq+0x34>
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d003      	beq.n	8008dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008dca:	e0db      	b.n	8008f84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008dcc:	4b73      	ldr	r3, [pc, #460]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x204>)
 8008dce:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8008dd0:	e0db      	b.n	8008f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008dd2:	4b73      	ldr	r3, [pc, #460]	@ (8008fa0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008dd6:	e0d8      	b.n	8008f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8008f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008de0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008de2:	4b6d      	ldr	r3, [pc, #436]	@ (8008f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d063      	beq.n	8008eb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dee:	4b6a      	ldr	r3, [pc, #424]	@ (8008f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	099b      	lsrs	r3, r3, #6
 8008df4:	2200      	movs	r2, #0
 8008df6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008df8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e02:	2300      	movs	r3, #0
 8008e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	462b      	mov	r3, r5
 8008e0e:	f04f 0000 	mov.w	r0, #0
 8008e12:	f04f 0100 	mov.w	r1, #0
 8008e16:	0159      	lsls	r1, r3, #5
 8008e18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e1c:	0150      	lsls	r0, r2, #5
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4621      	mov	r1, r4
 8008e24:	1a51      	subs	r1, r2, r1
 8008e26:	6139      	str	r1, [r7, #16]
 8008e28:	4629      	mov	r1, r5
 8008e2a:	eb63 0301 	sbc.w	r3, r3, r1
 8008e2e:	617b      	str	r3, [r7, #20]
 8008e30:	f04f 0200 	mov.w	r2, #0
 8008e34:	f04f 0300 	mov.w	r3, #0
 8008e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e3c:	4659      	mov	r1, fp
 8008e3e:	018b      	lsls	r3, r1, #6
 8008e40:	4651      	mov	r1, sl
 8008e42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008e46:	4651      	mov	r1, sl
 8008e48:	018a      	lsls	r2, r1, #6
 8008e4a:	4651      	mov	r1, sl
 8008e4c:	ebb2 0801 	subs.w	r8, r2, r1
 8008e50:	4659      	mov	r1, fp
 8008e52:	eb63 0901 	sbc.w	r9, r3, r1
 8008e56:	f04f 0200 	mov.w	r2, #0
 8008e5a:	f04f 0300 	mov.w	r3, #0
 8008e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e6a:	4690      	mov	r8, r2
 8008e6c:	4699      	mov	r9, r3
 8008e6e:	4623      	mov	r3, r4
 8008e70:	eb18 0303 	adds.w	r3, r8, r3
 8008e74:	60bb      	str	r3, [r7, #8]
 8008e76:	462b      	mov	r3, r5
 8008e78:	eb49 0303 	adc.w	r3, r9, r3
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	f04f 0300 	mov.w	r3, #0
 8008e86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	024b      	lsls	r3, r1, #9
 8008e8e:	4621      	mov	r1, r4
 8008e90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e94:	4621      	mov	r1, r4
 8008e96:	024a      	lsls	r2, r1, #9
 8008e98:	4610      	mov	r0, r2
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ea4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008ea8:	f7f7 fefe 	bl	8000ca8 <__aeabi_uldivmod>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008eb4:	e058      	b.n	8008f68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008eb6:	4b38      	ldr	r3, [pc, #224]	@ (8008f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	099b      	lsrs	r3, r3, #6
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008ec6:	623b      	str	r3, [r7, #32]
 8008ec8:	2300      	movs	r3, #0
 8008eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ecc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008ed0:	4642      	mov	r2, r8
 8008ed2:	464b      	mov	r3, r9
 8008ed4:	f04f 0000 	mov.w	r0, #0
 8008ed8:	f04f 0100 	mov.w	r1, #0
 8008edc:	0159      	lsls	r1, r3, #5
 8008ede:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ee2:	0150      	lsls	r0, r2, #5
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4641      	mov	r1, r8
 8008eea:	ebb2 0a01 	subs.w	sl, r2, r1
 8008eee:	4649      	mov	r1, r9
 8008ef0:	eb63 0b01 	sbc.w	fp, r3, r1
 8008ef4:	f04f 0200 	mov.w	r2, #0
 8008ef8:	f04f 0300 	mov.w	r3, #0
 8008efc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008f00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008f04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008f08:	ebb2 040a 	subs.w	r4, r2, sl
 8008f0c:	eb63 050b 	sbc.w	r5, r3, fp
 8008f10:	f04f 0200 	mov.w	r2, #0
 8008f14:	f04f 0300 	mov.w	r3, #0
 8008f18:	00eb      	lsls	r3, r5, #3
 8008f1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f1e:	00e2      	lsls	r2, r4, #3
 8008f20:	4614      	mov	r4, r2
 8008f22:	461d      	mov	r5, r3
 8008f24:	4643      	mov	r3, r8
 8008f26:	18e3      	adds	r3, r4, r3
 8008f28:	603b      	str	r3, [r7, #0]
 8008f2a:	464b      	mov	r3, r9
 8008f2c:	eb45 0303 	adc.w	r3, r5, r3
 8008f30:	607b      	str	r3, [r7, #4]
 8008f32:	f04f 0200 	mov.w	r2, #0
 8008f36:	f04f 0300 	mov.w	r3, #0
 8008f3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008f3e:	4629      	mov	r1, r5
 8008f40:	028b      	lsls	r3, r1, #10
 8008f42:	4621      	mov	r1, r4
 8008f44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f48:	4621      	mov	r1, r4
 8008f4a:	028a      	lsls	r2, r1, #10
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f52:	2200      	movs	r2, #0
 8008f54:	61bb      	str	r3, [r7, #24]
 8008f56:	61fa      	str	r2, [r7, #28]
 8008f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f5c:	f7f7 fea4 	bl	8000ca8 <__aeabi_uldivmod>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4613      	mov	r3, r2
 8008f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f68:	4b0b      	ldr	r3, [pc, #44]	@ (8008f98 <HAL_RCC_GetSysClockFreq+0x200>)
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	0c1b      	lsrs	r3, r3, #16
 8008f6e:	f003 0303 	and.w	r3, r3, #3
 8008f72:	3301      	adds	r3, #1
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008f78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008f82:	e002      	b.n	8008f8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f84:	4b05      	ldr	r3, [pc, #20]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x204>)
 8008f86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008f88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3750      	adds	r7, #80	@ 0x50
 8008f90:	46bd      	mov	sp, r7
 8008f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f96:	bf00      	nop
 8008f98:	40023800 	.word	0x40023800
 8008f9c:	00f42400 	.word	0x00f42400
 8008fa0:	007a1200 	.word	0x007a1200

08008fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fa8:	4b03      	ldr	r3, [pc, #12]	@ (8008fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008faa:	681b      	ldr	r3, [r3, #0]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	200000a8 	.word	0x200000a8

08008fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008fc0:	f7ff fff0 	bl	8008fa4 <HAL_RCC_GetHCLKFreq>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	4b05      	ldr	r3, [pc, #20]	@ (8008fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	0a9b      	lsrs	r3, r3, #10
 8008fcc:	f003 0307 	and.w	r3, r3, #7
 8008fd0:	4903      	ldr	r1, [pc, #12]	@ (8008fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fd2:	5ccb      	ldrb	r3, [r1, r3]
 8008fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	40023800 	.word	0x40023800
 8008fe0:	08014888 	.word	0x08014888

08008fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008fe8:	f7ff ffdc 	bl	8008fa4 <HAL_RCC_GetHCLKFreq>
 8008fec:	4602      	mov	r2, r0
 8008fee:	4b05      	ldr	r3, [pc, #20]	@ (8009004 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	0b5b      	lsrs	r3, r3, #13
 8008ff4:	f003 0307 	and.w	r3, r3, #7
 8008ff8:	4903      	ldr	r1, [pc, #12]	@ (8009008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ffa:	5ccb      	ldrb	r3, [r1, r3]
 8008ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009000:	4618      	mov	r0, r3
 8009002:	bd80      	pop	{r7, pc}
 8009004:	40023800 	.word	0x40023800
 8009008:	08014888 	.word	0x08014888

0800900c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e041      	b.n	80090a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d106      	bne.n	8009038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fb febe 	bl	8004db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	3304      	adds	r3, #4
 8009048:	4619      	mov	r1, r3
 800904a:	4610      	mov	r0, r2
 800904c:	f000 faac 	bl	80095a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d001      	beq.n	80090c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e04e      	b.n	8009162 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68da      	ldr	r2, [r3, #12]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f042 0201 	orr.w	r2, r2, #1
 80090da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a23      	ldr	r2, [pc, #140]	@ (8009170 <HAL_TIM_Base_Start_IT+0xc4>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d022      	beq.n	800912c <HAL_TIM_Base_Start_IT+0x80>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ee:	d01d      	beq.n	800912c <HAL_TIM_Base_Start_IT+0x80>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a1f      	ldr	r2, [pc, #124]	@ (8009174 <HAL_TIM_Base_Start_IT+0xc8>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d018      	beq.n	800912c <HAL_TIM_Base_Start_IT+0x80>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009178 <HAL_TIM_Base_Start_IT+0xcc>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d013      	beq.n	800912c <HAL_TIM_Base_Start_IT+0x80>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a1c      	ldr	r2, [pc, #112]	@ (800917c <HAL_TIM_Base_Start_IT+0xd0>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d00e      	beq.n	800912c <HAL_TIM_Base_Start_IT+0x80>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a1b      	ldr	r2, [pc, #108]	@ (8009180 <HAL_TIM_Base_Start_IT+0xd4>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d009      	beq.n	800912c <HAL_TIM_Base_Start_IT+0x80>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a19      	ldr	r2, [pc, #100]	@ (8009184 <HAL_TIM_Base_Start_IT+0xd8>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d004      	beq.n	800912c <HAL_TIM_Base_Start_IT+0x80>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a18      	ldr	r2, [pc, #96]	@ (8009188 <HAL_TIM_Base_Start_IT+0xdc>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d111      	bne.n	8009150 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f003 0307 	and.w	r3, r3, #7
 8009136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b06      	cmp	r3, #6
 800913c:	d010      	beq.n	8009160 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f042 0201 	orr.w	r2, r2, #1
 800914c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800914e:	e007      	b.n	8009160 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f042 0201 	orr.w	r2, r2, #1
 800915e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	40010000 	.word	0x40010000
 8009174:	40000400 	.word	0x40000400
 8009178:	40000800 	.word	0x40000800
 800917c:	40000c00 	.word	0x40000c00
 8009180:	40010400 	.word	0x40010400
 8009184:	40014000 	.word	0x40014000
 8009188:	40001800 	.word	0x40001800

0800918c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68da      	ldr	r2, [r3, #12]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0201 	bic.w	r2, r2, #1
 80091a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6a1a      	ldr	r2, [r3, #32]
 80091aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80091ae:	4013      	ands	r3, r2
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10f      	bne.n	80091d4 <HAL_TIM_Base_Stop_IT+0x48>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6a1a      	ldr	r2, [r3, #32]
 80091ba:	f240 4344 	movw	r3, #1092	@ 0x444
 80091be:	4013      	ands	r3, r2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d107      	bne.n	80091d4 <HAL_TIM_Base_Stop_IT+0x48>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 0201 	bic.w	r2, r2, #1
 80091d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	f003 0302 	and.w	r3, r3, #2
 8009208:	2b00      	cmp	r3, #0
 800920a:	d020      	beq.n	800924e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d01b      	beq.n	800924e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f06f 0202 	mvn.w	r2, #2
 800921e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	f003 0303 	and.w	r3, r3, #3
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f999 	bl	800956c <HAL_TIM_IC_CaptureCallback>
 800923a:	e005      	b.n	8009248 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f98b 	bl	8009558 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f99c 	bl	8009580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	f003 0304 	and.w	r3, r3, #4
 8009254:	2b00      	cmp	r3, #0
 8009256:	d020      	beq.n	800929a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f003 0304 	and.w	r3, r3, #4
 800925e:	2b00      	cmp	r3, #0
 8009260:	d01b      	beq.n	800929a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f06f 0204 	mvn.w	r2, #4
 800926a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800927c:	2b00      	cmp	r3, #0
 800927e:	d003      	beq.n	8009288 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f973 	bl	800956c <HAL_TIM_IC_CaptureCallback>
 8009286:	e005      	b.n	8009294 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f965 	bl	8009558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f976 	bl	8009580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	f003 0308 	and.w	r3, r3, #8
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d020      	beq.n	80092e6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f003 0308 	and.w	r3, r3, #8
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d01b      	beq.n	80092e6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f06f 0208 	mvn.w	r2, #8
 80092b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2204      	movs	r2, #4
 80092bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	f003 0303 	and.w	r3, r3, #3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f94d 	bl	800956c <HAL_TIM_IC_CaptureCallback>
 80092d2:	e005      	b.n	80092e0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f93f 	bl	8009558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f950 	bl	8009580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	f003 0310 	and.w	r3, r3, #16
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d020      	beq.n	8009332 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f003 0310 	and.w	r3, r3, #16
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d01b      	beq.n	8009332 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f06f 0210 	mvn.w	r2, #16
 8009302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2208      	movs	r2, #8
 8009308:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	69db      	ldr	r3, [r3, #28]
 8009310:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009314:	2b00      	cmp	r3, #0
 8009316:	d003      	beq.n	8009320 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f927 	bl	800956c <HAL_TIM_IC_CaptureCallback>
 800931e:	e005      	b.n	800932c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f919 	bl	8009558 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f92a 	bl	8009580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00c      	beq.n	8009356 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	2b00      	cmp	r3, #0
 8009344:	d007      	beq.n	8009356 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f06f 0201 	mvn.w	r2, #1
 800934e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7f9 fc2f 	bl	8002bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00c      	beq.n	800937a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009366:	2b00      	cmp	r3, #0
 8009368:	d007      	beq.n	800937a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fae3 	bl	8009940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00c      	beq.n	800939e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800938a:	2b00      	cmp	r3, #0
 800938c:	d007      	beq.n	800939e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f8fb 	bl	8009594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	f003 0320 	and.w	r3, r3, #32
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00c      	beq.n	80093c2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f003 0320 	and.w	r3, r3, #32
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d007      	beq.n	80093c2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f06f 0220 	mvn.w	r2, #32
 80093ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fab5 	bl	800992c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093c2:	bf00      	nop
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d101      	bne.n	80093e6 <HAL_TIM_ConfigClockSource+0x1c>
 80093e2:	2302      	movs	r3, #2
 80093e4:	e0b4      	b.n	8009550 <HAL_TIM_ConfigClockSource+0x186>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2202      	movs	r2, #2
 80093f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009404:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800940c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800941e:	d03e      	beq.n	800949e <HAL_TIM_ConfigClockSource+0xd4>
 8009420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009424:	f200 8087 	bhi.w	8009536 <HAL_TIM_ConfigClockSource+0x16c>
 8009428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800942c:	f000 8086 	beq.w	800953c <HAL_TIM_ConfigClockSource+0x172>
 8009430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009434:	d87f      	bhi.n	8009536 <HAL_TIM_ConfigClockSource+0x16c>
 8009436:	2b70      	cmp	r3, #112	@ 0x70
 8009438:	d01a      	beq.n	8009470 <HAL_TIM_ConfigClockSource+0xa6>
 800943a:	2b70      	cmp	r3, #112	@ 0x70
 800943c:	d87b      	bhi.n	8009536 <HAL_TIM_ConfigClockSource+0x16c>
 800943e:	2b60      	cmp	r3, #96	@ 0x60
 8009440:	d050      	beq.n	80094e4 <HAL_TIM_ConfigClockSource+0x11a>
 8009442:	2b60      	cmp	r3, #96	@ 0x60
 8009444:	d877      	bhi.n	8009536 <HAL_TIM_ConfigClockSource+0x16c>
 8009446:	2b50      	cmp	r3, #80	@ 0x50
 8009448:	d03c      	beq.n	80094c4 <HAL_TIM_ConfigClockSource+0xfa>
 800944a:	2b50      	cmp	r3, #80	@ 0x50
 800944c:	d873      	bhi.n	8009536 <HAL_TIM_ConfigClockSource+0x16c>
 800944e:	2b40      	cmp	r3, #64	@ 0x40
 8009450:	d058      	beq.n	8009504 <HAL_TIM_ConfigClockSource+0x13a>
 8009452:	2b40      	cmp	r3, #64	@ 0x40
 8009454:	d86f      	bhi.n	8009536 <HAL_TIM_ConfigClockSource+0x16c>
 8009456:	2b30      	cmp	r3, #48	@ 0x30
 8009458:	d064      	beq.n	8009524 <HAL_TIM_ConfigClockSource+0x15a>
 800945a:	2b30      	cmp	r3, #48	@ 0x30
 800945c:	d86b      	bhi.n	8009536 <HAL_TIM_ConfigClockSource+0x16c>
 800945e:	2b20      	cmp	r3, #32
 8009460:	d060      	beq.n	8009524 <HAL_TIM_ConfigClockSource+0x15a>
 8009462:	2b20      	cmp	r3, #32
 8009464:	d867      	bhi.n	8009536 <HAL_TIM_ConfigClockSource+0x16c>
 8009466:	2b00      	cmp	r3, #0
 8009468:	d05c      	beq.n	8009524 <HAL_TIM_ConfigClockSource+0x15a>
 800946a:	2b10      	cmp	r3, #16
 800946c:	d05a      	beq.n	8009524 <HAL_TIM_ConfigClockSource+0x15a>
 800946e:	e062      	b.n	8009536 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009480:	f000 f9b8 	bl	80097f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009492:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	609a      	str	r2, [r3, #8]
      break;
 800949c:	e04f      	b.n	800953e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80094ae:	f000 f9a1 	bl	80097f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	689a      	ldr	r2, [r3, #8]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80094c0:	609a      	str	r2, [r3, #8]
      break;
 80094c2:	e03c      	b.n	800953e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094d0:	461a      	mov	r2, r3
 80094d2:	f000 f915 	bl	8009700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2150      	movs	r1, #80	@ 0x50
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 f96e 	bl	80097be <TIM_ITRx_SetConfig>
      break;
 80094e2:	e02c      	b.n	800953e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094f0:	461a      	mov	r2, r3
 80094f2:	f000 f934 	bl	800975e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2160      	movs	r1, #96	@ 0x60
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 f95e 	bl	80097be <TIM_ITRx_SetConfig>
      break;
 8009502:	e01c      	b.n	800953e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009510:	461a      	mov	r2, r3
 8009512:	f000 f8f5 	bl	8009700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2140      	movs	r1, #64	@ 0x40
 800951c:	4618      	mov	r0, r3
 800951e:	f000 f94e 	bl	80097be <TIM_ITRx_SetConfig>
      break;
 8009522:	e00c      	b.n	800953e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4619      	mov	r1, r3
 800952e:	4610      	mov	r0, r2
 8009530:	f000 f945 	bl	80097be <TIM_ITRx_SetConfig>
      break;
 8009534:	e003      	b.n	800953e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	73fb      	strb	r3, [r7, #15]
      break;
 800953a:	e000      	b.n	800953e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800953c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800954e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a46      	ldr	r2, [pc, #280]	@ (80096d4 <TIM_Base_SetConfig+0x12c>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d013      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095c6:	d00f      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a43      	ldr	r2, [pc, #268]	@ (80096d8 <TIM_Base_SetConfig+0x130>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d00b      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a42      	ldr	r2, [pc, #264]	@ (80096dc <TIM_Base_SetConfig+0x134>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d007      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a41      	ldr	r2, [pc, #260]	@ (80096e0 <TIM_Base_SetConfig+0x138>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d003      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a40      	ldr	r2, [pc, #256]	@ (80096e4 <TIM_Base_SetConfig+0x13c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d108      	bne.n	80095fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a35      	ldr	r2, [pc, #212]	@ (80096d4 <TIM_Base_SetConfig+0x12c>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d02b      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009608:	d027      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a32      	ldr	r2, [pc, #200]	@ (80096d8 <TIM_Base_SetConfig+0x130>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d023      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a31      	ldr	r2, [pc, #196]	@ (80096dc <TIM_Base_SetConfig+0x134>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d01f      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a30      	ldr	r2, [pc, #192]	@ (80096e0 <TIM_Base_SetConfig+0x138>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d01b      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a2f      	ldr	r2, [pc, #188]	@ (80096e4 <TIM_Base_SetConfig+0x13c>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d017      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a2e      	ldr	r2, [pc, #184]	@ (80096e8 <TIM_Base_SetConfig+0x140>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d013      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a2d      	ldr	r2, [pc, #180]	@ (80096ec <TIM_Base_SetConfig+0x144>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d00f      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a2c      	ldr	r2, [pc, #176]	@ (80096f0 <TIM_Base_SetConfig+0x148>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00b      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a2b      	ldr	r2, [pc, #172]	@ (80096f4 <TIM_Base_SetConfig+0x14c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d007      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a2a      	ldr	r2, [pc, #168]	@ (80096f8 <TIM_Base_SetConfig+0x150>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d003      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a29      	ldr	r2, [pc, #164]	@ (80096fc <TIM_Base_SetConfig+0x154>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d108      	bne.n	800966c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4313      	orrs	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a10      	ldr	r2, [pc, #64]	@ (80096d4 <TIM_Base_SetConfig+0x12c>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d003      	beq.n	80096a0 <TIM_Base_SetConfig+0xf8>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a12      	ldr	r2, [pc, #72]	@ (80096e4 <TIM_Base_SetConfig+0x13c>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d103      	bne.n	80096a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	691a      	ldr	r2, [r3, #16]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d105      	bne.n	80096c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	f023 0201 	bic.w	r2, r3, #1
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	611a      	str	r2, [r3, #16]
  }
}
 80096c6:	bf00      	nop
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	40010000 	.word	0x40010000
 80096d8:	40000400 	.word	0x40000400
 80096dc:	40000800 	.word	0x40000800
 80096e0:	40000c00 	.word	0x40000c00
 80096e4:	40010400 	.word	0x40010400
 80096e8:	40014000 	.word	0x40014000
 80096ec:	40014400 	.word	0x40014400
 80096f0:	40014800 	.word	0x40014800
 80096f4:	40001800 	.word	0x40001800
 80096f8:	40001c00 	.word	0x40001c00
 80096fc:	40002000 	.word	0x40002000

08009700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009700:	b480      	push	{r7}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	6a1b      	ldr	r3, [r3, #32]
 8009710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6a1b      	ldr	r3, [r3, #32]
 8009716:	f023 0201 	bic.w	r2, r3, #1
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	699b      	ldr	r3, [r3, #24]
 8009722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800972a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	4313      	orrs	r3, r2
 8009734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f023 030a 	bic.w	r3, r3, #10
 800973c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800973e:	697a      	ldr	r2, [r7, #20]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	4313      	orrs	r3, r2
 8009744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	621a      	str	r2, [r3, #32]
}
 8009752:	bf00      	nop
 8009754:	371c      	adds	r7, #28
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr

0800975e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800975e:	b480      	push	{r7}
 8009760:	b087      	sub	sp, #28
 8009762:	af00      	add	r7, sp, #0
 8009764:	60f8      	str	r0, [r7, #12]
 8009766:	60b9      	str	r1, [r7, #8]
 8009768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	f023 0210 	bic.w	r2, r3, #16
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	031b      	lsls	r3, r3, #12
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	4313      	orrs	r3, r2
 8009792:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800979a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	011b      	lsls	r3, r3, #4
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	621a      	str	r2, [r3, #32]
}
 80097b2:	bf00      	nop
 80097b4:	371c      	adds	r7, #28
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097be:	b480      	push	{r7}
 80097c0:	b085      	sub	sp, #20
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4313      	orrs	r3, r2
 80097dc:	f043 0307 	orr.w	r3, r3, #7
 80097e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	609a      	str	r2, [r3, #8]
}
 80097e8:	bf00      	nop
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
 8009800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800980e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	021a      	lsls	r2, r3, #8
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	431a      	orrs	r2, r3
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	4313      	orrs	r3, r2
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	4313      	orrs	r3, r2
 8009820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	609a      	str	r2, [r3, #8]
}
 8009828:	bf00      	nop
 800982a:	371c      	adds	r7, #28
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009844:	2b01      	cmp	r3, #1
 8009846:	d101      	bne.n	800984c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009848:	2302      	movs	r3, #2
 800984a:	e05a      	b.n	8009902 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2202      	movs	r2, #2
 8009858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	4313      	orrs	r3, r2
 800987c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a21      	ldr	r2, [pc, #132]	@ (8009910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d022      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009898:	d01d      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a1d      	ldr	r2, [pc, #116]	@ (8009914 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d018      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a1b      	ldr	r2, [pc, #108]	@ (8009918 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d013      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a1a      	ldr	r2, [pc, #104]	@ (800991c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d00e      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a18      	ldr	r2, [pc, #96]	@ (8009920 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d009      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a17      	ldr	r2, [pc, #92]	@ (8009924 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d004      	beq.n	80098d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a15      	ldr	r2, [pc, #84]	@ (8009928 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d10c      	bne.n	80098f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	40010000 	.word	0x40010000
 8009914:	40000400 	.word	0x40000400
 8009918:	40000800 	.word	0x40000800
 800991c:	40000c00 	.word	0x40000c00
 8009920:	40010400 	.word	0x40010400
 8009924:	40014000 	.word	0x40014000
 8009928:	40001800 	.word	0x40001800

0800992c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009934:	bf00      	nop
 8009936:	370c      	adds	r7, #12
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e042      	b.n	80099ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d106      	bne.n	8009980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7fb fb00 	bl	8004f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2224      	movs	r2, #36	@ 0x24
 8009984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68da      	ldr	r2, [r3, #12]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fde9 	bl	800a570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	691a      	ldr	r2, [r3, #16]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80099ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	695a      	ldr	r2, [r3, #20]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80099bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68da      	ldr	r2, [r3, #12]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2220      	movs	r2, #32
 80099e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b08a      	sub	sp, #40	@ 0x28
 80099f8:	af02      	add	r7, sp, #8
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	603b      	str	r3, [r7, #0]
 8009a00:	4613      	mov	r3, r2
 8009a02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b20      	cmp	r3, #32
 8009a12:	d175      	bne.n	8009b00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <HAL_UART_Transmit+0x2c>
 8009a1a:	88fb      	ldrh	r3, [r7, #6]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e06e      	b.n	8009b02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2221      	movs	r2, #33	@ 0x21
 8009a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a32:	f7fb fb99 	bl	8005168 <HAL_GetTick>
 8009a36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	88fa      	ldrh	r2, [r7, #6]
 8009a3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	88fa      	ldrh	r2, [r7, #6]
 8009a42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a4c:	d108      	bne.n	8009a60 <HAL_UART_Transmit+0x6c>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d104      	bne.n	8009a60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	61bb      	str	r3, [r7, #24]
 8009a5e:	e003      	b.n	8009a68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a68:	e02e      	b.n	8009ac8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2200      	movs	r2, #0
 8009a72:	2180      	movs	r1, #128	@ 0x80
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f000 fb4b 	bl	800a110 <UART_WaitOnFlagUntilTimeout>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d005      	beq.n	8009a8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2220      	movs	r2, #32
 8009a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e03a      	b.n	8009b02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10b      	bne.n	8009aaa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	461a      	mov	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009aa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	3302      	adds	r3, #2
 8009aa6:	61bb      	str	r3, [r7, #24]
 8009aa8:	e007      	b.n	8009aba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	781a      	ldrb	r2, [r3, #0]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1cb      	bne.n	8009a6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2140      	movs	r1, #64	@ 0x40
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f000 fb17 	bl	800a110 <UART_WaitOnFlagUntilTimeout>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d005      	beq.n	8009af4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2220      	movs	r2, #32
 8009aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e006      	b.n	8009b02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2220      	movs	r2, #32
 8009af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009afc:	2300      	movs	r3, #0
 8009afe:	e000      	b.n	8009b02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009b00:	2302      	movs	r3, #2
  }
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3720      	adds	r7, #32
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b085      	sub	sp, #20
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	60f8      	str	r0, [r7, #12]
 8009b12:	60b9      	str	r1, [r7, #8]
 8009b14:	4613      	mov	r3, r2
 8009b16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	d121      	bne.n	8009b68 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <HAL_UART_Transmit_IT+0x26>
 8009b2a:	88fb      	ldrh	r3, [r7, #6]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e01a      	b.n	8009b6a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	88fa      	ldrh	r2, [r7, #6]
 8009b3e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	88fa      	ldrh	r2, [r7, #6]
 8009b44:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2221      	movs	r2, #33	@ 0x21
 8009b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009b62:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	e000      	b.n	8009b6a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8009b68:	2302      	movs	r3, #2
  }
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b084      	sub	sp, #16
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	60f8      	str	r0, [r7, #12]
 8009b7e:	60b9      	str	r1, [r7, #8]
 8009b80:	4613      	mov	r3, r2
 8009b82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b20      	cmp	r3, #32
 8009b8e:	d112      	bne.n	8009bb6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <HAL_UART_Receive_IT+0x26>
 8009b96:	88fb      	ldrh	r3, [r7, #6]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e00b      	b.n	8009bb8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009ba6:	88fb      	ldrh	r3, [r7, #6]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	68b9      	ldr	r1, [r7, #8]
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 fb08 	bl	800a1c2 <UART_Start_Receive_IT>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	e000      	b.n	8009bb8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009bb6:	2302      	movs	r3, #2
  }
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b0ba      	sub	sp, #232	@ 0xe8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bf6:	f003 030f 	and.w	r3, r3, #15
 8009bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10f      	bne.n	8009c26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c0a:	f003 0320 	and.w	r3, r3, #32
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d009      	beq.n	8009c26 <HAL_UART_IRQHandler+0x66>
 8009c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c16:	f003 0320 	and.w	r3, r3, #32
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d003      	beq.n	8009c26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 fbe8 	bl	800a3f4 <UART_Receive_IT>
      return;
 8009c24:	e25b      	b.n	800a0de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f000 80de 	beq.w	8009dec <HAL_UART_IRQHandler+0x22c>
 8009c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c34:	f003 0301 	and.w	r3, r3, #1
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d106      	bne.n	8009c4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 80d1 	beq.w	8009dec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00b      	beq.n	8009c6e <HAL_UART_IRQHandler+0xae>
 8009c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d005      	beq.n	8009c6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c66:	f043 0201 	orr.w	r2, r3, #1
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c72:	f003 0304 	and.w	r3, r3, #4
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00b      	beq.n	8009c92 <HAL_UART_IRQHandler+0xd2>
 8009c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d005      	beq.n	8009c92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c8a:	f043 0202 	orr.w	r2, r3, #2
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c96:	f003 0302 	and.w	r3, r3, #2
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00b      	beq.n	8009cb6 <HAL_UART_IRQHandler+0xf6>
 8009c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d005      	beq.n	8009cb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cae:	f043 0204 	orr.w	r2, r3, #4
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cba:	f003 0308 	and.w	r3, r3, #8
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d011      	beq.n	8009ce6 <HAL_UART_IRQHandler+0x126>
 8009cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d105      	bne.n	8009cda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d005      	beq.n	8009ce6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cde:	f043 0208 	orr.w	r2, r3, #8
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 81f2 	beq.w	800a0d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cf4:	f003 0320 	and.w	r3, r3, #32
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d008      	beq.n	8009d0e <HAL_UART_IRQHandler+0x14e>
 8009cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d00:	f003 0320 	and.w	r3, r3, #32
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fb73 	bl	800a3f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	695b      	ldr	r3, [r3, #20]
 8009d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d18:	2b40      	cmp	r3, #64	@ 0x40
 8009d1a:	bf0c      	ite	eq
 8009d1c:	2301      	moveq	r3, #1
 8009d1e:	2300      	movne	r3, #0
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d2a:	f003 0308 	and.w	r3, r3, #8
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d103      	bne.n	8009d3a <HAL_UART_IRQHandler+0x17a>
 8009d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d04f      	beq.n	8009dda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fa7b 	bl	800a236 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d4a:	2b40      	cmp	r3, #64	@ 0x40
 8009d4c:	d141      	bne.n	8009dd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	3314      	adds	r3, #20
 8009d54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d5c:	e853 3f00 	ldrex	r3, [r3]
 8009d60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3314      	adds	r3, #20
 8009d76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d8a:	e841 2300 	strex	r3, r2, [r1]
 8009d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1d9      	bne.n	8009d4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d013      	beq.n	8009dca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009da6:	4a7e      	ldr	r2, [pc, #504]	@ (8009fa0 <HAL_UART_IRQHandler+0x3e0>)
 8009da8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fc f8c3 	bl	8005f3a <HAL_DMA_Abort_IT>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d016      	beq.n	8009de8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dc8:	e00e      	b.n	8009de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f98a 	bl	800a0e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd0:	e00a      	b.n	8009de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f986 	bl	800a0e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd8:	e006      	b.n	8009de8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f982 	bl	800a0e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009de6:	e175      	b.n	800a0d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de8:	bf00      	nop
    return;
 8009dea:	e173      	b.n	800a0d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	f040 814f 	bne.w	800a094 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dfa:	f003 0310 	and.w	r3, r3, #16
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f000 8148 	beq.w	800a094 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e08:	f003 0310 	and.w	r3, r3, #16
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 8141 	beq.w	800a094 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e12:	2300      	movs	r3, #0
 8009e14:	60bb      	str	r3, [r7, #8]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	60bb      	str	r3, [r7, #8]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	60bb      	str	r3, [r7, #8]
 8009e26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	695b      	ldr	r3, [r3, #20]
 8009e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e32:	2b40      	cmp	r3, #64	@ 0x40
 8009e34:	f040 80b6 	bne.w	8009fa4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 8145 	beq.w	800a0d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e56:	429a      	cmp	r2, r3
 8009e58:	f080 813e 	bcs.w	800a0d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e68:	69db      	ldr	r3, [r3, #28]
 8009e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e6e:	f000 8088 	beq.w	8009f82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	330c      	adds	r3, #12
 8009e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e80:	e853 3f00 	ldrex	r3, [r3]
 8009e84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	330c      	adds	r3, #12
 8009e9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009e9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009eaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009eae:	e841 2300 	strex	r3, r2, [r1]
 8009eb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1d9      	bne.n	8009e72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3314      	adds	r3, #20
 8009ec4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ec8:	e853 3f00 	ldrex	r3, [r3]
 8009ecc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ece:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ed0:	f023 0301 	bic.w	r3, r3, #1
 8009ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3314      	adds	r3, #20
 8009ede:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ee2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009ee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009eea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e1      	bne.n	8009ebe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3314      	adds	r3, #20
 8009f00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3314      	adds	r3, #20
 8009f1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f26:	e841 2300 	strex	r3, r2, [r1]
 8009f2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1e3      	bne.n	8009efa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2220      	movs	r2, #32
 8009f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	330c      	adds	r3, #12
 8009f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f4a:	e853 3f00 	ldrex	r3, [r3]
 8009f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f52:	f023 0310 	bic.w	r3, r3, #16
 8009f56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	330c      	adds	r3, #12
 8009f60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009f64:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009f66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f6c:	e841 2300 	strex	r3, r2, [r1]
 8009f70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1e3      	bne.n	8009f40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fb ff6c 	bl	8005e5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2202      	movs	r2, #2
 8009f86:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f8ad 	bl	800a0f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f9e:	e09b      	b.n	800a0d8 <HAL_UART_IRQHandler+0x518>
 8009fa0:	0800a2fd 	.word	0x0800a2fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 808e 	beq.w	800a0dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 8089 	beq.w	800a0dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	330c      	adds	r3, #12
 8009fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd4:	e853 3f00 	ldrex	r3, [r3]
 8009fd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	330c      	adds	r3, #12
 8009fea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009fee:	647a      	str	r2, [r7, #68]	@ 0x44
 8009ff0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ff4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ff6:	e841 2300 	strex	r3, r2, [r1]
 8009ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1e3      	bne.n	8009fca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3314      	adds	r3, #20
 800a008:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	623b      	str	r3, [r7, #32]
   return(result);
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	f023 0301 	bic.w	r3, r3, #1
 800a018:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3314      	adds	r3, #20
 800a022:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a026:	633a      	str	r2, [r7, #48]	@ 0x30
 800a028:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a02c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a02e:	e841 2300 	strex	r3, r2, [r1]
 800a032:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1e3      	bne.n	800a002 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2220      	movs	r2, #32
 800a03e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	330c      	adds	r3, #12
 800a04e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	e853 3f00 	ldrex	r3, [r3]
 800a056:	60fb      	str	r3, [r7, #12]
   return(result);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f023 0310 	bic.w	r3, r3, #16
 800a05e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	330c      	adds	r3, #12
 800a068:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a06c:	61fa      	str	r2, [r7, #28]
 800a06e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a070:	69b9      	ldr	r1, [r7, #24]
 800a072:	69fa      	ldr	r2, [r7, #28]
 800a074:	e841 2300 	strex	r3, r2, [r1]
 800a078:	617b      	str	r3, [r7, #20]
   return(result);
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1e3      	bne.n	800a048 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2202      	movs	r2, #2
 800a084:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a086:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f833 	bl	800a0f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a092:	e023      	b.n	800a0dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d009      	beq.n	800a0b4 <HAL_UART_IRQHandler+0x4f4>
 800a0a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d003      	beq.n	800a0b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 f939 	bl	800a324 <UART_Transmit_IT>
    return;
 800a0b2:	e014      	b.n	800a0de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00e      	beq.n	800a0de <HAL_UART_IRQHandler+0x51e>
 800a0c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d008      	beq.n	800a0de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f979 	bl	800a3c4 <UART_EndTransmit_IT>
    return;
 800a0d2:	e004      	b.n	800a0de <HAL_UART_IRQHandler+0x51e>
    return;
 800a0d4:	bf00      	nop
 800a0d6:	e002      	b.n	800a0de <HAL_UART_IRQHandler+0x51e>
      return;
 800a0d8:	bf00      	nop
 800a0da:	e000      	b.n	800a0de <HAL_UART_IRQHandler+0x51e>
      return;
 800a0dc:	bf00      	nop
  }
}
 800a0de:	37e8      	adds	r7, #232	@ 0xe8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	603b      	str	r3, [r7, #0]
 800a11c:	4613      	mov	r3, r2
 800a11e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a120:	e03b      	b.n	800a19a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a128:	d037      	beq.n	800a19a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a12a:	f7fb f81d 	bl	8005168 <HAL_GetTick>
 800a12e:	4602      	mov	r2, r0
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	6a3a      	ldr	r2, [r7, #32]
 800a136:	429a      	cmp	r2, r3
 800a138:	d302      	bcc.n	800a140 <UART_WaitOnFlagUntilTimeout+0x30>
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d101      	bne.n	800a144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	e03a      	b.n	800a1ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	f003 0304 	and.w	r3, r3, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d023      	beq.n	800a19a <UART_WaitOnFlagUntilTimeout+0x8a>
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2b80      	cmp	r3, #128	@ 0x80
 800a156:	d020      	beq.n	800a19a <UART_WaitOnFlagUntilTimeout+0x8a>
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	2b40      	cmp	r3, #64	@ 0x40
 800a15c:	d01d      	beq.n	800a19a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 0308 	and.w	r3, r3, #8
 800a168:	2b08      	cmp	r3, #8
 800a16a:	d116      	bne.n	800a19a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a16c:	2300      	movs	r3, #0
 800a16e:	617b      	str	r3, [r7, #20]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	617b      	str	r3, [r7, #20]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	617b      	str	r3, [r7, #20]
 800a180:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f000 f857 	bl	800a236 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2208      	movs	r2, #8
 800a18c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e00f      	b.n	800a1ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	4013      	ands	r3, r2
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	bf0c      	ite	eq
 800a1aa:	2301      	moveq	r3, #1
 800a1ac:	2300      	movne	r3, #0
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	79fb      	ldrb	r3, [r7, #7]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d0b4      	beq.n	800a122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3718      	adds	r7, #24
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b085      	sub	sp, #20
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	60f8      	str	r0, [r7, #12]
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	88fa      	ldrh	r2, [r7, #6]
 800a1da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	88fa      	ldrh	r2, [r7, #6]
 800a1e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2222      	movs	r2, #34	@ 0x22
 800a1ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d007      	beq.n	800a208 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a206:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	695a      	ldr	r2, [r3, #20]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f042 0201 	orr.w	r2, r2, #1
 800a216:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68da      	ldr	r2, [r3, #12]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f042 0220 	orr.w	r2, r2, #32
 800a226:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3714      	adds	r7, #20
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a236:	b480      	push	{r7}
 800a238:	b095      	sub	sp, #84	@ 0x54
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	330c      	adds	r3, #12
 800a244:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a248:	e853 3f00 	ldrex	r3, [r3]
 800a24c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	330c      	adds	r3, #12
 800a25c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a25e:	643a      	str	r2, [r7, #64]	@ 0x40
 800a260:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a262:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a264:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a266:	e841 2300 	strex	r3, r2, [r1]
 800a26a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d1e5      	bne.n	800a23e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	3314      	adds	r3, #20
 800a278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27a:	6a3b      	ldr	r3, [r7, #32]
 800a27c:	e853 3f00 	ldrex	r3, [r3]
 800a280:	61fb      	str	r3, [r7, #28]
   return(result);
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	f023 0301 	bic.w	r3, r3, #1
 800a288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	3314      	adds	r3, #20
 800a290:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a294:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a296:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a29a:	e841 2300 	strex	r3, r2, [r1]
 800a29e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1e5      	bne.n	800a272 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d119      	bne.n	800a2e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	330c      	adds	r3, #12
 800a2b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	e853 3f00 	ldrex	r3, [r3]
 800a2bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	f023 0310 	bic.w	r3, r3, #16
 800a2c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	330c      	adds	r3, #12
 800a2cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2ce:	61ba      	str	r2, [r7, #24]
 800a2d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d2:	6979      	ldr	r1, [r7, #20]
 800a2d4:	69ba      	ldr	r2, [r7, #24]
 800a2d6:	e841 2300 	strex	r3, r2, [r1]
 800a2da:	613b      	str	r3, [r7, #16]
   return(result);
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1e5      	bne.n	800a2ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2220      	movs	r2, #32
 800a2e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a2f0:	bf00      	nop
 800a2f2:	3754      	adds	r7, #84	@ 0x54
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a308:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f7ff fee4 	bl	800a0e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a31c:	bf00      	nop
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a332:	b2db      	uxtb	r3, r3
 800a334:	2b21      	cmp	r3, #33	@ 0x21
 800a336:	d13e      	bne.n	800a3b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a340:	d114      	bne.n	800a36c <UART_Transmit_IT+0x48>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d110      	bne.n	800a36c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	881b      	ldrh	r3, [r3, #0]
 800a354:	461a      	mov	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a35e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a1b      	ldr	r3, [r3, #32]
 800a364:	1c9a      	adds	r2, r3, #2
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	621a      	str	r2, [r3, #32]
 800a36a:	e008      	b.n	800a37e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6a1b      	ldr	r3, [r3, #32]
 800a370:	1c59      	adds	r1, r3, #1
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	6211      	str	r1, [r2, #32]
 800a376:	781a      	ldrb	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a382:	b29b      	uxth	r3, r3
 800a384:	3b01      	subs	r3, #1
 800a386:	b29b      	uxth	r3, r3
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	4619      	mov	r1, r3
 800a38c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10f      	bne.n	800a3b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68da      	ldr	r2, [r3, #12]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a3a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68da      	ldr	r2, [r3, #12]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e000      	b.n	800a3b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a3b6:	2302      	movs	r3, #2
  }
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68da      	ldr	r2, [r3, #12]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a3da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2220      	movs	r2, #32
 800a3e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7f7 fa69 	bl	80018bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08c      	sub	sp, #48	@ 0x30
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b22      	cmp	r3, #34	@ 0x22
 800a406:	f040 80ae 	bne.w	800a566 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a412:	d117      	bne.n	800a444 <UART_Receive_IT+0x50>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d113      	bne.n	800a444 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a41c:	2300      	movs	r3, #0
 800a41e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a424:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a432:	b29a      	uxth	r2, r3
 800a434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a436:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a43c:	1c9a      	adds	r2, r3, #2
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	629a      	str	r2, [r3, #40]	@ 0x28
 800a442:	e026      	b.n	800a492 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a448:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a44a:	2300      	movs	r3, #0
 800a44c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a456:	d007      	beq.n	800a468 <UART_Receive_IT+0x74>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10a      	bne.n	800a476 <UART_Receive_IT+0x82>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d106      	bne.n	800a476 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a472:	701a      	strb	r2, [r3, #0]
 800a474:	e008      	b.n	800a488 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a482:	b2da      	uxtb	r2, r3
 800a484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a486:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a48c:	1c5a      	adds	r2, r3, #1
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a496:	b29b      	uxth	r3, r3
 800a498:	3b01      	subs	r3, #1
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d15d      	bne.n	800a562 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68da      	ldr	r2, [r3, #12]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f022 0220 	bic.w	r2, r2, #32
 800a4b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	68da      	ldr	r2, [r3, #12]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a4c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	695a      	ldr	r2, [r3, #20]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f022 0201 	bic.w	r2, r2, #1
 800a4d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2220      	movs	r2, #32
 800a4da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d135      	bne.n	800a558 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	330c      	adds	r3, #12
 800a4f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	e853 3f00 	ldrex	r3, [r3]
 800a500:	613b      	str	r3, [r7, #16]
   return(result);
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	f023 0310 	bic.w	r3, r3, #16
 800a508:	627b      	str	r3, [r7, #36]	@ 0x24
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	330c      	adds	r3, #12
 800a510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a512:	623a      	str	r2, [r7, #32]
 800a514:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a516:	69f9      	ldr	r1, [r7, #28]
 800a518:	6a3a      	ldr	r2, [r7, #32]
 800a51a:	e841 2300 	strex	r3, r2, [r1]
 800a51e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1e5      	bne.n	800a4f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 0310 	and.w	r3, r3, #16
 800a530:	2b10      	cmp	r3, #16
 800a532:	d10a      	bne.n	800a54a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a534:	2300      	movs	r3, #0
 800a536:	60fb      	str	r3, [r7, #12]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	60fb      	str	r3, [r7, #12]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a54e:	4619      	mov	r1, r3
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f7ff fdd1 	bl	800a0f8 <HAL_UARTEx_RxEventCallback>
 800a556:	e002      	b.n	800a55e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7f7 fbed 	bl	8001d38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	e002      	b.n	800a568 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	e000      	b.n	800a568 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a566:	2302      	movs	r3, #2
  }
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3730      	adds	r7, #48	@ 0x30
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a574:	b0c0      	sub	sp, #256	@ 0x100
 800a576:	af00      	add	r7, sp, #0
 800a578:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a57c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a58c:	68d9      	ldr	r1, [r3, #12]
 800a58e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	ea40 0301 	orr.w	r3, r0, r1
 800a598:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a59a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a59e:	689a      	ldr	r2, [r3, #8]
 800a5a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	431a      	orrs	r2, r3
 800a5a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5ac:	695b      	ldr	r3, [r3, #20]
 800a5ae:	431a      	orrs	r2, r3
 800a5b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5b4:	69db      	ldr	r3, [r3, #28]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a5bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a5c8:	f021 010c 	bic.w	r1, r1, #12
 800a5cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a5d6:	430b      	orrs	r3, r1
 800a5d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a5e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5ea:	6999      	ldr	r1, [r3, #24]
 800a5ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	ea40 0301 	orr.w	r3, r0, r1
 800a5f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	4b8f      	ldr	r3, [pc, #572]	@ (800a83c <UART_SetConfig+0x2cc>)
 800a600:	429a      	cmp	r2, r3
 800a602:	d005      	beq.n	800a610 <UART_SetConfig+0xa0>
 800a604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	4b8d      	ldr	r3, [pc, #564]	@ (800a840 <UART_SetConfig+0x2d0>)
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d104      	bne.n	800a61a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a610:	f7fe fce8 	bl	8008fe4 <HAL_RCC_GetPCLK2Freq>
 800a614:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a618:	e003      	b.n	800a622 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a61a:	f7fe fccf 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 800a61e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a626:	69db      	ldr	r3, [r3, #28]
 800a628:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a62c:	f040 810c 	bne.w	800a848 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a634:	2200      	movs	r2, #0
 800a636:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a63a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a63e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a642:	4622      	mov	r2, r4
 800a644:	462b      	mov	r3, r5
 800a646:	1891      	adds	r1, r2, r2
 800a648:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a64a:	415b      	adcs	r3, r3
 800a64c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a64e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a652:	4621      	mov	r1, r4
 800a654:	eb12 0801 	adds.w	r8, r2, r1
 800a658:	4629      	mov	r1, r5
 800a65a:	eb43 0901 	adc.w	r9, r3, r1
 800a65e:	f04f 0200 	mov.w	r2, #0
 800a662:	f04f 0300 	mov.w	r3, #0
 800a666:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a66a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a66e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a672:	4690      	mov	r8, r2
 800a674:	4699      	mov	r9, r3
 800a676:	4623      	mov	r3, r4
 800a678:	eb18 0303 	adds.w	r3, r8, r3
 800a67c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a680:	462b      	mov	r3, r5
 800a682:	eb49 0303 	adc.w	r3, r9, r3
 800a686:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a68a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a696:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a69a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a69e:	460b      	mov	r3, r1
 800a6a0:	18db      	adds	r3, r3, r3
 800a6a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	eb42 0303 	adc.w	r3, r2, r3
 800a6aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a6b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a6b4:	f7f6 faf8 	bl	8000ca8 <__aeabi_uldivmod>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4b61      	ldr	r3, [pc, #388]	@ (800a844 <UART_SetConfig+0x2d4>)
 800a6be:	fba3 2302 	umull	r2, r3, r3, r2
 800a6c2:	095b      	lsrs	r3, r3, #5
 800a6c4:	011c      	lsls	r4, r3, #4
 800a6c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a6d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a6d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a6d8:	4642      	mov	r2, r8
 800a6da:	464b      	mov	r3, r9
 800a6dc:	1891      	adds	r1, r2, r2
 800a6de:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a6e0:	415b      	adcs	r3, r3
 800a6e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a6e8:	4641      	mov	r1, r8
 800a6ea:	eb12 0a01 	adds.w	sl, r2, r1
 800a6ee:	4649      	mov	r1, r9
 800a6f0:	eb43 0b01 	adc.w	fp, r3, r1
 800a6f4:	f04f 0200 	mov.w	r2, #0
 800a6f8:	f04f 0300 	mov.w	r3, #0
 800a6fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a700:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a704:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a708:	4692      	mov	sl, r2
 800a70a:	469b      	mov	fp, r3
 800a70c:	4643      	mov	r3, r8
 800a70e:	eb1a 0303 	adds.w	r3, sl, r3
 800a712:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a716:	464b      	mov	r3, r9
 800a718:	eb4b 0303 	adc.w	r3, fp, r3
 800a71c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a72c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a730:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a734:	460b      	mov	r3, r1
 800a736:	18db      	adds	r3, r3, r3
 800a738:	643b      	str	r3, [r7, #64]	@ 0x40
 800a73a:	4613      	mov	r3, r2
 800a73c:	eb42 0303 	adc.w	r3, r2, r3
 800a740:	647b      	str	r3, [r7, #68]	@ 0x44
 800a742:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a746:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a74a:	f7f6 faad 	bl	8000ca8 <__aeabi_uldivmod>
 800a74e:	4602      	mov	r2, r0
 800a750:	460b      	mov	r3, r1
 800a752:	4611      	mov	r1, r2
 800a754:	4b3b      	ldr	r3, [pc, #236]	@ (800a844 <UART_SetConfig+0x2d4>)
 800a756:	fba3 2301 	umull	r2, r3, r3, r1
 800a75a:	095b      	lsrs	r3, r3, #5
 800a75c:	2264      	movs	r2, #100	@ 0x64
 800a75e:	fb02 f303 	mul.w	r3, r2, r3
 800a762:	1acb      	subs	r3, r1, r3
 800a764:	00db      	lsls	r3, r3, #3
 800a766:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a76a:	4b36      	ldr	r3, [pc, #216]	@ (800a844 <UART_SetConfig+0x2d4>)
 800a76c:	fba3 2302 	umull	r2, r3, r3, r2
 800a770:	095b      	lsrs	r3, r3, #5
 800a772:	005b      	lsls	r3, r3, #1
 800a774:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a778:	441c      	add	r4, r3
 800a77a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a77e:	2200      	movs	r2, #0
 800a780:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a784:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a788:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a78c:	4642      	mov	r2, r8
 800a78e:	464b      	mov	r3, r9
 800a790:	1891      	adds	r1, r2, r2
 800a792:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a794:	415b      	adcs	r3, r3
 800a796:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a798:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a79c:	4641      	mov	r1, r8
 800a79e:	1851      	adds	r1, r2, r1
 800a7a0:	6339      	str	r1, [r7, #48]	@ 0x30
 800a7a2:	4649      	mov	r1, r9
 800a7a4:	414b      	adcs	r3, r1
 800a7a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7a8:	f04f 0200 	mov.w	r2, #0
 800a7ac:	f04f 0300 	mov.w	r3, #0
 800a7b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a7b4:	4659      	mov	r1, fp
 800a7b6:	00cb      	lsls	r3, r1, #3
 800a7b8:	4651      	mov	r1, sl
 800a7ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7be:	4651      	mov	r1, sl
 800a7c0:	00ca      	lsls	r2, r1, #3
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	4642      	mov	r2, r8
 800a7ca:	189b      	adds	r3, r3, r2
 800a7cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7d0:	464b      	mov	r3, r9
 800a7d2:	460a      	mov	r2, r1
 800a7d4:	eb42 0303 	adc.w	r3, r2, r3
 800a7d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a7e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a7ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	18db      	adds	r3, r3, r3
 800a7f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	eb42 0303 	adc.w	r3, r2, r3
 800a7fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a7fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a802:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a806:	f7f6 fa4f 	bl	8000ca8 <__aeabi_uldivmod>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	4b0d      	ldr	r3, [pc, #52]	@ (800a844 <UART_SetConfig+0x2d4>)
 800a810:	fba3 1302 	umull	r1, r3, r3, r2
 800a814:	095b      	lsrs	r3, r3, #5
 800a816:	2164      	movs	r1, #100	@ 0x64
 800a818:	fb01 f303 	mul.w	r3, r1, r3
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	00db      	lsls	r3, r3, #3
 800a820:	3332      	adds	r3, #50	@ 0x32
 800a822:	4a08      	ldr	r2, [pc, #32]	@ (800a844 <UART_SetConfig+0x2d4>)
 800a824:	fba2 2303 	umull	r2, r3, r2, r3
 800a828:	095b      	lsrs	r3, r3, #5
 800a82a:	f003 0207 	and.w	r2, r3, #7
 800a82e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4422      	add	r2, r4
 800a836:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a838:	e106      	b.n	800aa48 <UART_SetConfig+0x4d8>
 800a83a:	bf00      	nop
 800a83c:	40011000 	.word	0x40011000
 800a840:	40011400 	.word	0x40011400
 800a844:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a84c:	2200      	movs	r2, #0
 800a84e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a852:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a856:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a85a:	4642      	mov	r2, r8
 800a85c:	464b      	mov	r3, r9
 800a85e:	1891      	adds	r1, r2, r2
 800a860:	6239      	str	r1, [r7, #32]
 800a862:	415b      	adcs	r3, r3
 800a864:	627b      	str	r3, [r7, #36]	@ 0x24
 800a866:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a86a:	4641      	mov	r1, r8
 800a86c:	1854      	adds	r4, r2, r1
 800a86e:	4649      	mov	r1, r9
 800a870:	eb43 0501 	adc.w	r5, r3, r1
 800a874:	f04f 0200 	mov.w	r2, #0
 800a878:	f04f 0300 	mov.w	r3, #0
 800a87c:	00eb      	lsls	r3, r5, #3
 800a87e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a882:	00e2      	lsls	r2, r4, #3
 800a884:	4614      	mov	r4, r2
 800a886:	461d      	mov	r5, r3
 800a888:	4643      	mov	r3, r8
 800a88a:	18e3      	adds	r3, r4, r3
 800a88c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a890:	464b      	mov	r3, r9
 800a892:	eb45 0303 	adc.w	r3, r5, r3
 800a896:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a8a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a8aa:	f04f 0200 	mov.w	r2, #0
 800a8ae:	f04f 0300 	mov.w	r3, #0
 800a8b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	008b      	lsls	r3, r1, #2
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	008a      	lsls	r2, r1, #2
 800a8c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a8c8:	f7f6 f9ee 	bl	8000ca8 <__aeabi_uldivmod>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4b60      	ldr	r3, [pc, #384]	@ (800aa54 <UART_SetConfig+0x4e4>)
 800a8d2:	fba3 2302 	umull	r2, r3, r3, r2
 800a8d6:	095b      	lsrs	r3, r3, #5
 800a8d8:	011c      	lsls	r4, r3, #4
 800a8da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a8e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a8e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a8ec:	4642      	mov	r2, r8
 800a8ee:	464b      	mov	r3, r9
 800a8f0:	1891      	adds	r1, r2, r2
 800a8f2:	61b9      	str	r1, [r7, #24]
 800a8f4:	415b      	adcs	r3, r3
 800a8f6:	61fb      	str	r3, [r7, #28]
 800a8f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8fc:	4641      	mov	r1, r8
 800a8fe:	1851      	adds	r1, r2, r1
 800a900:	6139      	str	r1, [r7, #16]
 800a902:	4649      	mov	r1, r9
 800a904:	414b      	adcs	r3, r1
 800a906:	617b      	str	r3, [r7, #20]
 800a908:	f04f 0200 	mov.w	r2, #0
 800a90c:	f04f 0300 	mov.w	r3, #0
 800a910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a914:	4659      	mov	r1, fp
 800a916:	00cb      	lsls	r3, r1, #3
 800a918:	4651      	mov	r1, sl
 800a91a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a91e:	4651      	mov	r1, sl
 800a920:	00ca      	lsls	r2, r1, #3
 800a922:	4610      	mov	r0, r2
 800a924:	4619      	mov	r1, r3
 800a926:	4603      	mov	r3, r0
 800a928:	4642      	mov	r2, r8
 800a92a:	189b      	adds	r3, r3, r2
 800a92c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a930:	464b      	mov	r3, r9
 800a932:	460a      	mov	r2, r1
 800a934:	eb42 0303 	adc.w	r3, r2, r3
 800a938:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a93c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a946:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a948:	f04f 0200 	mov.w	r2, #0
 800a94c:	f04f 0300 	mov.w	r3, #0
 800a950:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a954:	4649      	mov	r1, r9
 800a956:	008b      	lsls	r3, r1, #2
 800a958:	4641      	mov	r1, r8
 800a95a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a95e:	4641      	mov	r1, r8
 800a960:	008a      	lsls	r2, r1, #2
 800a962:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a966:	f7f6 f99f 	bl	8000ca8 <__aeabi_uldivmod>
 800a96a:	4602      	mov	r2, r0
 800a96c:	460b      	mov	r3, r1
 800a96e:	4611      	mov	r1, r2
 800a970:	4b38      	ldr	r3, [pc, #224]	@ (800aa54 <UART_SetConfig+0x4e4>)
 800a972:	fba3 2301 	umull	r2, r3, r3, r1
 800a976:	095b      	lsrs	r3, r3, #5
 800a978:	2264      	movs	r2, #100	@ 0x64
 800a97a:	fb02 f303 	mul.w	r3, r2, r3
 800a97e:	1acb      	subs	r3, r1, r3
 800a980:	011b      	lsls	r3, r3, #4
 800a982:	3332      	adds	r3, #50	@ 0x32
 800a984:	4a33      	ldr	r2, [pc, #204]	@ (800aa54 <UART_SetConfig+0x4e4>)
 800a986:	fba2 2303 	umull	r2, r3, r2, r3
 800a98a:	095b      	lsrs	r3, r3, #5
 800a98c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a990:	441c      	add	r4, r3
 800a992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a996:	2200      	movs	r2, #0
 800a998:	673b      	str	r3, [r7, #112]	@ 0x70
 800a99a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a99c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a9a0:	4642      	mov	r2, r8
 800a9a2:	464b      	mov	r3, r9
 800a9a4:	1891      	adds	r1, r2, r2
 800a9a6:	60b9      	str	r1, [r7, #8]
 800a9a8:	415b      	adcs	r3, r3
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9b0:	4641      	mov	r1, r8
 800a9b2:	1851      	adds	r1, r2, r1
 800a9b4:	6039      	str	r1, [r7, #0]
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	414b      	adcs	r3, r1
 800a9ba:	607b      	str	r3, [r7, #4]
 800a9bc:	f04f 0200 	mov.w	r2, #0
 800a9c0:	f04f 0300 	mov.w	r3, #0
 800a9c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a9c8:	4659      	mov	r1, fp
 800a9ca:	00cb      	lsls	r3, r1, #3
 800a9cc:	4651      	mov	r1, sl
 800a9ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9d2:	4651      	mov	r1, sl
 800a9d4:	00ca      	lsls	r2, r1, #3
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4603      	mov	r3, r0
 800a9dc:	4642      	mov	r2, r8
 800a9de:	189b      	adds	r3, r3, r2
 800a9e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a9e2:	464b      	mov	r3, r9
 800a9e4:	460a      	mov	r2, r1
 800a9e6:	eb42 0303 	adc.w	r3, r2, r3
 800a9ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a9ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a9f6:	667a      	str	r2, [r7, #100]	@ 0x64
 800a9f8:	f04f 0200 	mov.w	r2, #0
 800a9fc:	f04f 0300 	mov.w	r3, #0
 800aa00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aa04:	4649      	mov	r1, r9
 800aa06:	008b      	lsls	r3, r1, #2
 800aa08:	4641      	mov	r1, r8
 800aa0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa0e:	4641      	mov	r1, r8
 800aa10:	008a      	lsls	r2, r1, #2
 800aa12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aa16:	f7f6 f947 	bl	8000ca8 <__aeabi_uldivmod>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa54 <UART_SetConfig+0x4e4>)
 800aa20:	fba3 1302 	umull	r1, r3, r3, r2
 800aa24:	095b      	lsrs	r3, r3, #5
 800aa26:	2164      	movs	r1, #100	@ 0x64
 800aa28:	fb01 f303 	mul.w	r3, r1, r3
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	011b      	lsls	r3, r3, #4
 800aa30:	3332      	adds	r3, #50	@ 0x32
 800aa32:	4a08      	ldr	r2, [pc, #32]	@ (800aa54 <UART_SetConfig+0x4e4>)
 800aa34:	fba2 2303 	umull	r2, r3, r2, r3
 800aa38:	095b      	lsrs	r3, r3, #5
 800aa3a:	f003 020f 	and.w	r2, r3, #15
 800aa3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4422      	add	r2, r4
 800aa46:	609a      	str	r2, [r3, #8]
}
 800aa48:	bf00      	nop
 800aa4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa54:	51eb851f 	.word	0x51eb851f

0800aa58 <__NVIC_SetPriority>:
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	4603      	mov	r3, r0
 800aa60:	6039      	str	r1, [r7, #0]
 800aa62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aa64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	db0a      	blt.n	800aa82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	b2da      	uxtb	r2, r3
 800aa70:	490c      	ldr	r1, [pc, #48]	@ (800aaa4 <__NVIC_SetPriority+0x4c>)
 800aa72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa76:	0112      	lsls	r2, r2, #4
 800aa78:	b2d2      	uxtb	r2, r2
 800aa7a:	440b      	add	r3, r1
 800aa7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800aa80:	e00a      	b.n	800aa98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	b2da      	uxtb	r2, r3
 800aa86:	4908      	ldr	r1, [pc, #32]	@ (800aaa8 <__NVIC_SetPriority+0x50>)
 800aa88:	79fb      	ldrb	r3, [r7, #7]
 800aa8a:	f003 030f 	and.w	r3, r3, #15
 800aa8e:	3b04      	subs	r3, #4
 800aa90:	0112      	lsls	r2, r2, #4
 800aa92:	b2d2      	uxtb	r2, r2
 800aa94:	440b      	add	r3, r1
 800aa96:	761a      	strb	r2, [r3, #24]
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	e000e100 	.word	0xe000e100
 800aaa8:	e000ed00 	.word	0xe000ed00

0800aaac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aaac:	b580      	push	{r7, lr}
 800aaae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aab0:	2100      	movs	r1, #0
 800aab2:	f06f 0004 	mvn.w	r0, #4
 800aab6:	f7ff ffcf 	bl	800aa58 <__NVIC_SetPriority>
#endif
}
 800aaba:	bf00      	nop
 800aabc:	bd80      	pop	{r7, pc}
	...

0800aac0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aac6:	f3ef 8305 	mrs	r3, IPSR
 800aaca:	603b      	str	r3, [r7, #0]
  return(result);
 800aacc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d003      	beq.n	800aada <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800aad2:	f06f 0305 	mvn.w	r3, #5
 800aad6:	607b      	str	r3, [r7, #4]
 800aad8:	e00c      	b.n	800aaf4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aada:	4b0a      	ldr	r3, [pc, #40]	@ (800ab04 <osKernelInitialize+0x44>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d105      	bne.n	800aaee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aae2:	4b08      	ldr	r3, [pc, #32]	@ (800ab04 <osKernelInitialize+0x44>)
 800aae4:	2201      	movs	r2, #1
 800aae6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	607b      	str	r3, [r7, #4]
 800aaec:	e002      	b.n	800aaf4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800aaee:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aaf4:	687b      	ldr	r3, [r7, #4]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	20000acc 	.word	0x20000acc

0800ab08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab0e:	f3ef 8305 	mrs	r3, IPSR
 800ab12:	603b      	str	r3, [r7, #0]
  return(result);
 800ab14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ab1a:	f06f 0305 	mvn.w	r3, #5
 800ab1e:	607b      	str	r3, [r7, #4]
 800ab20:	e010      	b.n	800ab44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ab22:	4b0b      	ldr	r3, [pc, #44]	@ (800ab50 <osKernelStart+0x48>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d109      	bne.n	800ab3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ab2a:	f7ff ffbf 	bl	800aaac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ab2e:	4b08      	ldr	r3, [pc, #32]	@ (800ab50 <osKernelStart+0x48>)
 800ab30:	2202      	movs	r2, #2
 800ab32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ab34:	f001 fe90 	bl	800c858 <vTaskStartScheduler>
      stat = osOK;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	607b      	str	r3, [r7, #4]
 800ab3c:	e002      	b.n	800ab44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ab3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab44:	687b      	ldr	r3, [r7, #4]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	20000acc 	.word	0x20000acc

0800ab54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b08e      	sub	sp, #56	@ 0x38
 800ab58:	af04      	add	r7, sp, #16
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ab60:	2300      	movs	r3, #0
 800ab62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab64:	f3ef 8305 	mrs	r3, IPSR
 800ab68:	617b      	str	r3, [r7, #20]
  return(result);
 800ab6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d17e      	bne.n	800ac6e <osThreadNew+0x11a>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d07b      	beq.n	800ac6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ab76:	2380      	movs	r3, #128	@ 0x80
 800ab78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ab7a:	2318      	movs	r3, #24
 800ab7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ab82:	f04f 33ff 	mov.w	r3, #4294967295
 800ab86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d045      	beq.n	800ac1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d002      	beq.n	800ab9c <osThreadNew+0x48>
        name = attr->name;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d008      	beq.n	800abc2 <osThreadNew+0x6e>
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	2b38      	cmp	r3, #56	@ 0x38
 800abb4:	d805      	bhi.n	800abc2 <osThreadNew+0x6e>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <osThreadNew+0x72>
        return (NULL);
 800abc2:	2300      	movs	r3, #0
 800abc4:	e054      	b.n	800ac70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	695b      	ldr	r3, [r3, #20]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d003      	beq.n	800abd6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	695b      	ldr	r3, [r3, #20]
 800abd2:	089b      	lsrs	r3, r3, #2
 800abd4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00e      	beq.n	800abfc <osThreadNew+0xa8>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	2b5b      	cmp	r3, #91	@ 0x5b
 800abe4:	d90a      	bls.n	800abfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800abea:	2b00      	cmp	r3, #0
 800abec:	d006      	beq.n	800abfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <osThreadNew+0xa8>
        mem = 1;
 800abf6:	2301      	movs	r3, #1
 800abf8:	61bb      	str	r3, [r7, #24]
 800abfa:	e010      	b.n	800ac1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10c      	bne.n	800ac1e <osThreadNew+0xca>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d108      	bne.n	800ac1e <osThreadNew+0xca>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d104      	bne.n	800ac1e <osThreadNew+0xca>
          mem = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	61bb      	str	r3, [r7, #24]
 800ac18:	e001      	b.n	800ac1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d110      	bne.n	800ac46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ac2c:	9202      	str	r2, [sp, #8]
 800ac2e:	9301      	str	r3, [sp, #4]
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	6a3a      	ldr	r2, [r7, #32]
 800ac38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f001 fc30 	bl	800c4a0 <xTaskCreateStatic>
 800ac40:	4603      	mov	r3, r0
 800ac42:	613b      	str	r3, [r7, #16]
 800ac44:	e013      	b.n	800ac6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d110      	bne.n	800ac6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ac4c:	6a3b      	ldr	r3, [r7, #32]
 800ac4e:	b29a      	uxth	r2, r3
 800ac50:	f107 0310 	add.w	r3, r7, #16
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f001 fc7e 	bl	800c560 <xTaskCreate>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d001      	beq.n	800ac6e <osThreadNew+0x11a>
            hTask = NULL;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ac6e:	693b      	ldr	r3, [r7, #16]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3728      	adds	r7, #40	@ 0x28
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac80:	f3ef 8305 	mrs	r3, IPSR
 800ac84:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <osDelay+0x1c>
    stat = osErrorISR;
 800ac8c:	f06f 0305 	mvn.w	r3, #5
 800ac90:	60fb      	str	r3, [r7, #12]
 800ac92:	e007      	b.n	800aca4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d002      	beq.n	800aca4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f001 fda4 	bl	800c7ec <vTaskDelay>
    }
  }

  return (stat);
 800aca4:	68fb      	ldr	r3, [r7, #12]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3710      	adds	r7, #16
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800acae:	b580      	push	{r7, lr}
 800acb0:	b088      	sub	sp, #32
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800acb6:	2300      	movs	r3, #0
 800acb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acba:	f3ef 8305 	mrs	r3, IPSR
 800acbe:	60bb      	str	r3, [r7, #8]
  return(result);
 800acc0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d174      	bne.n	800adb0 <osMutexNew+0x102>
    if (attr != NULL) {
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d003      	beq.n	800acd4 <osMutexNew+0x26>
      type = attr->attr_bits;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	61bb      	str	r3, [r7, #24]
 800acd2:	e001      	b.n	800acd8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800acd4:	2300      	movs	r3, #0
 800acd6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	f003 0301 	and.w	r3, r3, #1
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d002      	beq.n	800ace8 <osMutexNew+0x3a>
      rmtx = 1U;
 800ace2:	2301      	movs	r3, #1
 800ace4:	617b      	str	r3, [r7, #20]
 800ace6:	e001      	b.n	800acec <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ace8:	2300      	movs	r3, #0
 800acea:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	f003 0308 	and.w	r3, r3, #8
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d15c      	bne.n	800adb0 <osMutexNew+0x102>
      mem = -1;
 800acf6:	f04f 33ff 	mov.w	r3, #4294967295
 800acfa:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d015      	beq.n	800ad2e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d006      	beq.n	800ad18 <osMutexNew+0x6a>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	2b4f      	cmp	r3, #79	@ 0x4f
 800ad10:	d902      	bls.n	800ad18 <osMutexNew+0x6a>
          mem = 1;
 800ad12:	2301      	movs	r3, #1
 800ad14:	613b      	str	r3, [r7, #16]
 800ad16:	e00c      	b.n	800ad32 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d108      	bne.n	800ad32 <osMutexNew+0x84>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d104      	bne.n	800ad32 <osMutexNew+0x84>
            mem = 0;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	613b      	str	r3, [r7, #16]
 800ad2c:	e001      	b.n	800ad32 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d112      	bne.n	800ad5e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d007      	beq.n	800ad4e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	4619      	mov	r1, r3
 800ad44:	2004      	movs	r0, #4
 800ad46:	f000 fc3e 	bl	800b5c6 <xQueueCreateMutexStatic>
 800ad4a:	61f8      	str	r0, [r7, #28]
 800ad4c:	e016      	b.n	800ad7c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	4619      	mov	r1, r3
 800ad54:	2001      	movs	r0, #1
 800ad56:	f000 fc36 	bl	800b5c6 <xQueueCreateMutexStatic>
 800ad5a:	61f8      	str	r0, [r7, #28]
 800ad5c:	e00e      	b.n	800ad7c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10b      	bne.n	800ad7c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d004      	beq.n	800ad74 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ad6a:	2004      	movs	r0, #4
 800ad6c:	f000 fc13 	bl	800b596 <xQueueCreateMutex>
 800ad70:	61f8      	str	r0, [r7, #28]
 800ad72:	e003      	b.n	800ad7c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ad74:	2001      	movs	r0, #1
 800ad76:	f000 fc0e 	bl	800b596 <xQueueCreateMutex>
 800ad7a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00c      	beq.n	800ad9c <osMutexNew+0xee>
        if (attr != NULL) {
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d003      	beq.n	800ad90 <osMutexNew+0xe2>
          name = attr->name;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	60fb      	str	r3, [r7, #12]
 800ad8e:	e001      	b.n	800ad94 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ad90:	2300      	movs	r3, #0
 800ad92:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ad94:	68f9      	ldr	r1, [r7, #12]
 800ad96:	69f8      	ldr	r0, [r7, #28]
 800ad98:	f001 fafa 	bl	800c390 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d006      	beq.n	800adb0 <osMutexNew+0x102>
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d003      	beq.n	800adb0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	f043 0301 	orr.w	r3, r3, #1
 800adae:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800adb0:	69fb      	ldr	r3, [r7, #28]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3720      	adds	r7, #32
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800adba:	b580      	push	{r7, lr}
 800adbc:	b086      	sub	sp, #24
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f023 0301 	bic.w	r3, r3, #1
 800adca:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800add4:	2300      	movs	r3, #0
 800add6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800add8:	f3ef 8305 	mrs	r3, IPSR
 800addc:	60bb      	str	r3, [r7, #8]
  return(result);
 800adde:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d003      	beq.n	800adec <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ade4:	f06f 0305 	mvn.w	r3, #5
 800ade8:	617b      	str	r3, [r7, #20]
 800adea:	e02c      	b.n	800ae46 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d103      	bne.n	800adfa <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800adf2:	f06f 0303 	mvn.w	r3, #3
 800adf6:	617b      	str	r3, [r7, #20]
 800adf8:	e025      	b.n	800ae46 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d011      	beq.n	800ae24 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6938      	ldr	r0, [r7, #16]
 800ae04:	f000 fc2f 	bl	800b666 <xQueueTakeMutexRecursive>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d01b      	beq.n	800ae46 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d003      	beq.n	800ae1c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ae14:	f06f 0301 	mvn.w	r3, #1
 800ae18:	617b      	str	r3, [r7, #20]
 800ae1a:	e014      	b.n	800ae46 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ae1c:	f06f 0302 	mvn.w	r3, #2
 800ae20:	617b      	str	r3, [r7, #20]
 800ae22:	e010      	b.n	800ae46 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6938      	ldr	r0, [r7, #16]
 800ae28:	f000 ffd4 	bl	800bdd4 <xQueueSemaphoreTake>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d009      	beq.n	800ae46 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d003      	beq.n	800ae40 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ae38:	f06f 0301 	mvn.w	r3, #1
 800ae3c:	617b      	str	r3, [r7, #20]
 800ae3e:	e002      	b.n	800ae46 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ae40:	f06f 0302 	mvn.w	r3, #2
 800ae44:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ae46:	697b      	ldr	r3, [r7, #20]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3718      	adds	r7, #24
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f023 0301 	bic.w	r3, r3, #1
 800ae5e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae6c:	f3ef 8305 	mrs	r3, IPSR
 800ae70:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae72:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d003      	beq.n	800ae80 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ae78:	f06f 0305 	mvn.w	r3, #5
 800ae7c:	617b      	str	r3, [r7, #20]
 800ae7e:	e01f      	b.n	800aec0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d103      	bne.n	800ae8e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ae86:	f06f 0303 	mvn.w	r3, #3
 800ae8a:	617b      	str	r3, [r7, #20]
 800ae8c:	e018      	b.n	800aec0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d009      	beq.n	800aea8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ae94:	6938      	ldr	r0, [r7, #16]
 800ae96:	f000 fbb1 	bl	800b5fc <xQueueGiveMutexRecursive>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d00f      	beq.n	800aec0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800aea0:	f06f 0302 	mvn.w	r3, #2
 800aea4:	617b      	str	r3, [r7, #20]
 800aea6:	e00b      	b.n	800aec0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800aea8:	2300      	movs	r3, #0
 800aeaa:	2200      	movs	r2, #0
 800aeac:	2100      	movs	r1, #0
 800aeae:	6938      	ldr	r0, [r7, #16]
 800aeb0:	f000 fc7e 	bl	800b7b0 <xQueueGenericSend>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d002      	beq.n	800aec0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800aeba:	f06f 0302 	mvn.w	r3, #2
 800aebe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800aec0:	697b      	ldr	r3, [r7, #20]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3718      	adds	r7, #24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b08a      	sub	sp, #40	@ 0x28
 800aece:	af02      	add	r7, sp, #8
 800aed0:	60f8      	str	r0, [r7, #12]
 800aed2:	60b9      	str	r1, [r7, #8]
 800aed4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800aed6:	2300      	movs	r3, #0
 800aed8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeda:	f3ef 8305 	mrs	r3, IPSR
 800aede:	613b      	str	r3, [r7, #16]
  return(result);
 800aee0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d175      	bne.n	800afd2 <osSemaphoreNew+0x108>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d072      	beq.n	800afd2 <osSemaphoreNew+0x108>
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d86e      	bhi.n	800afd2 <osSemaphoreNew+0x108>
    mem = -1;
 800aef4:	f04f 33ff 	mov.w	r3, #4294967295
 800aef8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d015      	beq.n	800af2c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d006      	beq.n	800af16 <osSemaphoreNew+0x4c>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	2b4f      	cmp	r3, #79	@ 0x4f
 800af0e:	d902      	bls.n	800af16 <osSemaphoreNew+0x4c>
        mem = 1;
 800af10:	2301      	movs	r3, #1
 800af12:	61bb      	str	r3, [r7, #24]
 800af14:	e00c      	b.n	800af30 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d108      	bne.n	800af30 <osSemaphoreNew+0x66>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d104      	bne.n	800af30 <osSemaphoreNew+0x66>
          mem = 0;
 800af26:	2300      	movs	r3, #0
 800af28:	61bb      	str	r3, [r7, #24]
 800af2a:	e001      	b.n	800af30 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af36:	d04c      	beq.n	800afd2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d128      	bne.n	800af90 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d10a      	bne.n	800af5a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	2203      	movs	r2, #3
 800af4a:	9200      	str	r2, [sp, #0]
 800af4c:	2200      	movs	r2, #0
 800af4e:	2100      	movs	r1, #0
 800af50:	2001      	movs	r0, #1
 800af52:	f000 fa2b 	bl	800b3ac <xQueueGenericCreateStatic>
 800af56:	61f8      	str	r0, [r7, #28]
 800af58:	e005      	b.n	800af66 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800af5a:	2203      	movs	r2, #3
 800af5c:	2100      	movs	r1, #0
 800af5e:	2001      	movs	r0, #1
 800af60:	f000 faa1 	bl	800b4a6 <xQueueGenericCreate>
 800af64:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d022      	beq.n	800afb2 <osSemaphoreNew+0xe8>
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d01f      	beq.n	800afb2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800af72:	2300      	movs	r3, #0
 800af74:	2200      	movs	r2, #0
 800af76:	2100      	movs	r1, #0
 800af78:	69f8      	ldr	r0, [r7, #28]
 800af7a:	f000 fc19 	bl	800b7b0 <xQueueGenericSend>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b01      	cmp	r3, #1
 800af82:	d016      	beq.n	800afb2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800af84:	69f8      	ldr	r0, [r7, #28]
 800af86:	f001 f8b7 	bl	800c0f8 <vQueueDelete>
            hSemaphore = NULL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	61fb      	str	r3, [r7, #28]
 800af8e:	e010      	b.n	800afb2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	2b01      	cmp	r3, #1
 800af94:	d108      	bne.n	800afa8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	461a      	mov	r2, r3
 800af9c:	68b9      	ldr	r1, [r7, #8]
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 fb98 	bl	800b6d4 <xQueueCreateCountingSemaphoreStatic>
 800afa4:	61f8      	str	r0, [r7, #28]
 800afa6:	e004      	b.n	800afb2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800afa8:	68b9      	ldr	r1, [r7, #8]
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f000 fbcb 	bl	800b746 <xQueueCreateCountingSemaphore>
 800afb0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00c      	beq.n	800afd2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d003      	beq.n	800afc6 <osSemaphoreNew+0xfc>
          name = attr->name;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	617b      	str	r3, [r7, #20]
 800afc4:	e001      	b.n	800afca <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800afc6:	2300      	movs	r3, #0
 800afc8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800afca:	6979      	ldr	r1, [r7, #20]
 800afcc:	69f8      	ldr	r0, [r7, #28]
 800afce:	f001 f9df 	bl	800c390 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800afd2:	69fb      	ldr	r3, [r7, #28]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3720      	adds	r7, #32
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800afea:	2300      	movs	r3, #0
 800afec:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d103      	bne.n	800affc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800aff4:	f06f 0303 	mvn.w	r3, #3
 800aff8:	617b      	str	r3, [r7, #20]
 800affa:	e039      	b.n	800b070 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800affc:	f3ef 8305 	mrs	r3, IPSR
 800b000:	60fb      	str	r3, [r7, #12]
  return(result);
 800b002:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b004:	2b00      	cmp	r3, #0
 800b006:	d022      	beq.n	800b04e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d003      	beq.n	800b016 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b00e:	f06f 0303 	mvn.w	r3, #3
 800b012:	617b      	str	r3, [r7, #20]
 800b014:	e02c      	b.n	800b070 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b016:	2300      	movs	r3, #0
 800b018:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b01a:	f107 0308 	add.w	r3, r7, #8
 800b01e:	461a      	mov	r2, r3
 800b020:	2100      	movs	r1, #0
 800b022:	6938      	ldr	r0, [r7, #16]
 800b024:	f000 ffe6 	bl	800bff4 <xQueueReceiveFromISR>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d003      	beq.n	800b036 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b02e:	f06f 0302 	mvn.w	r3, #2
 800b032:	617b      	str	r3, [r7, #20]
 800b034:	e01c      	b.n	800b070 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d019      	beq.n	800b070 <osSemaphoreAcquire+0x94>
 800b03c:	4b0f      	ldr	r3, [pc, #60]	@ (800b07c <osSemaphoreAcquire+0xa0>)
 800b03e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	e010      	b.n	800b070 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b04e:	6839      	ldr	r1, [r7, #0]
 800b050:	6938      	ldr	r0, [r7, #16]
 800b052:	f000 febf 	bl	800bdd4 <xQueueSemaphoreTake>
 800b056:	4603      	mov	r3, r0
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d009      	beq.n	800b070 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b062:	f06f 0301 	mvn.w	r3, #1
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	e002      	b.n	800b070 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b06a:	f06f 0302 	mvn.w	r3, #2
 800b06e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b070:	697b      	ldr	r3, [r7, #20]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3718      	adds	r7, #24
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	e000ed04 	.word	0xe000ed04

0800b080 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d103      	bne.n	800b09e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b096:	f06f 0303 	mvn.w	r3, #3
 800b09a:	617b      	str	r3, [r7, #20]
 800b09c:	e02c      	b.n	800b0f8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b09e:	f3ef 8305 	mrs	r3, IPSR
 800b0a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d01a      	beq.n	800b0e0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b0ae:	f107 0308 	add.w	r3, r7, #8
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	6938      	ldr	r0, [r7, #16]
 800b0b6:	f000 fd1b 	bl	800baf0 <xQueueGiveFromISR>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d003      	beq.n	800b0c8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b0c0:	f06f 0302 	mvn.w	r3, #2
 800b0c4:	617b      	str	r3, [r7, #20]
 800b0c6:	e017      	b.n	800b0f8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d014      	beq.n	800b0f8 <osSemaphoreRelease+0x78>
 800b0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b104 <osSemaphoreRelease+0x84>)
 800b0d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0d4:	601a      	str	r2, [r3, #0]
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	e00b      	b.n	800b0f8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	6938      	ldr	r0, [r7, #16]
 800b0e8:	f000 fb62 	bl	800b7b0 <xQueueGenericSend>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d002      	beq.n	800b0f8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b0f2:	f06f 0302 	mvn.w	r3, #2
 800b0f6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b0f8:	697b      	ldr	r3, [r7, #20]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	e000ed04 	.word	0xe000ed04

0800b108 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	60b9      	str	r1, [r7, #8]
 800b112:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	4a07      	ldr	r2, [pc, #28]	@ (800b134 <vApplicationGetIdleTaskMemory+0x2c>)
 800b118:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	4a06      	ldr	r2, [pc, #24]	@ (800b138 <vApplicationGetIdleTaskMemory+0x30>)
 800b11e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2280      	movs	r2, #128	@ 0x80
 800b124:	601a      	str	r2, [r3, #0]
}
 800b126:	bf00      	nop
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	20000ad0 	.word	0x20000ad0
 800b138:	20000b2c 	.word	0x20000b2c

0800b13c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	4a07      	ldr	r2, [pc, #28]	@ (800b168 <vApplicationGetTimerTaskMemory+0x2c>)
 800b14c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	4a06      	ldr	r2, [pc, #24]	@ (800b16c <vApplicationGetTimerTaskMemory+0x30>)
 800b152:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b15a:	601a      	str	r2, [r3, #0]
}
 800b15c:	bf00      	nop
 800b15e:	3714      	adds	r7, #20
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	20000d2c 	.word	0x20000d2c
 800b16c:	20000d88 	.word	0x20000d88

0800b170 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f103 0208 	add.w	r2, r3, #8
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f04f 32ff 	mov.w	r2, #4294967295
 800b188:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f103 0208 	add.w	r2, r3, #8
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f103 0208 	add.w	r2, r3, #8
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b1be:	bf00      	nop
 800b1c0:	370c      	adds	r7, #12
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b085      	sub	sp, #20
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	689a      	ldr	r2, [r3, #8]
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	683a      	ldr	r2, [r7, #0]
 800b1ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	1c5a      	adds	r2, r3, #1
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	601a      	str	r2, [r3, #0]
}
 800b206:	bf00      	nop
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr

0800b212 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b212:	b480      	push	{r7}
 800b214:	b085      	sub	sp, #20
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
 800b21a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b228:	d103      	bne.n	800b232 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	60fb      	str	r3, [r7, #12]
 800b230:	e00c      	b.n	800b24c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3308      	adds	r3, #8
 800b236:	60fb      	str	r3, [r7, #12]
 800b238:	e002      	b.n	800b240 <vListInsert+0x2e>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	60fb      	str	r3, [r7, #12]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68ba      	ldr	r2, [r7, #8]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d2f6      	bcs.n	800b23a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	685a      	ldr	r2, [r3, #4]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	683a      	ldr	r2, [r7, #0]
 800b266:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	1c5a      	adds	r2, r3, #1
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	601a      	str	r2, [r3, #0]
}
 800b278:	bf00      	nop
 800b27a:	3714      	adds	r7, #20
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	6892      	ldr	r2, [r2, #8]
 800b29a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	6852      	ldr	r2, [r2, #4]
 800b2a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d103      	bne.n	800b2b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	689a      	ldr	r2, [r3, #8]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	1e5a      	subs	r2, r3, #1
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3714      	adds	r7, #20
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10b      	bne.n	800b304 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f0:	f383 8811 	msr	BASEPRI, r3
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	f3bf 8f4f 	dsb	sy
 800b2fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b2fe:	bf00      	nop
 800b300:	bf00      	nop
 800b302:	e7fd      	b.n	800b300 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b304:	f002 fd70 	bl	800dde8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b310:	68f9      	ldr	r1, [r7, #12]
 800b312:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b314:	fb01 f303 	mul.w	r3, r1, r3
 800b318:	441a      	add	r2, r3
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b334:	3b01      	subs	r3, #1
 800b336:	68f9      	ldr	r1, [r7, #12]
 800b338:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b33a:	fb01 f303 	mul.w	r3, r1, r3
 800b33e:	441a      	add	r2, r3
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	22ff      	movs	r2, #255	@ 0xff
 800b348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	22ff      	movs	r2, #255	@ 0xff
 800b350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d114      	bne.n	800b384 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d01a      	beq.n	800b398 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3310      	adds	r3, #16
 800b366:	4618      	mov	r0, r3
 800b368:	f001 fd04 	bl	800cd74 <xTaskRemoveFromEventList>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d012      	beq.n	800b398 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b372:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a8 <xQueueGenericReset+0xd0>)
 800b374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	f3bf 8f6f 	isb	sy
 800b382:	e009      	b.n	800b398 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	3310      	adds	r3, #16
 800b388:	4618      	mov	r0, r3
 800b38a:	f7ff fef1 	bl	800b170 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	3324      	adds	r3, #36	@ 0x24
 800b392:	4618      	mov	r0, r3
 800b394:	f7ff feec 	bl	800b170 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b398:	f002 fd58 	bl	800de4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b39c:	2301      	movs	r3, #1
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	e000ed04 	.word	0xe000ed04

0800b3ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b08e      	sub	sp, #56	@ 0x38
 800b3b0:	af02      	add	r7, sp, #8
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
 800b3b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d10b      	bne.n	800b3d8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b3d2:	bf00      	nop
 800b3d4:	bf00      	nop
 800b3d6:	e7fd      	b.n	800b3d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10b      	bne.n	800b3f6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b3f0:	bf00      	nop
 800b3f2:	bf00      	nop
 800b3f4:	e7fd      	b.n	800b3f2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <xQueueGenericCreateStatic+0x56>
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <xQueueGenericCreateStatic+0x5a>
 800b402:	2301      	movs	r3, #1
 800b404:	e000      	b.n	800b408 <xQueueGenericCreateStatic+0x5c>
 800b406:	2300      	movs	r3, #0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10b      	bne.n	800b424 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b410:	f383 8811 	msr	BASEPRI, r3
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	623b      	str	r3, [r7, #32]
}
 800b41e:	bf00      	nop
 800b420:	bf00      	nop
 800b422:	e7fd      	b.n	800b420 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d102      	bne.n	800b430 <xQueueGenericCreateStatic+0x84>
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <xQueueGenericCreateStatic+0x88>
 800b430:	2301      	movs	r3, #1
 800b432:	e000      	b.n	800b436 <xQueueGenericCreateStatic+0x8a>
 800b434:	2300      	movs	r3, #0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d10b      	bne.n	800b452 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	61fb      	str	r3, [r7, #28]
}
 800b44c:	bf00      	nop
 800b44e:	bf00      	nop
 800b450:	e7fd      	b.n	800b44e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b452:	2350      	movs	r3, #80	@ 0x50
 800b454:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	2b50      	cmp	r3, #80	@ 0x50
 800b45a:	d00b      	beq.n	800b474 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b45c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	61bb      	str	r3, [r7, #24]
}
 800b46e:	bf00      	nop
 800b470:	bf00      	nop
 800b472:	e7fd      	b.n	800b470 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b474:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00d      	beq.n	800b49c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b488:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	4613      	mov	r3, r2
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	68b9      	ldr	r1, [r7, #8]
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	f000 f840 	bl	800b51c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3730      	adds	r7, #48	@ 0x30
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b08a      	sub	sp, #40	@ 0x28
 800b4aa:	af02      	add	r7, sp, #8
 800b4ac:	60f8      	str	r0, [r7, #12]
 800b4ae:	60b9      	str	r1, [r7, #8]
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d10b      	bne.n	800b4d2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	613b      	str	r3, [r7, #16]
}
 800b4cc:	bf00      	nop
 800b4ce:	bf00      	nop
 800b4d0:	e7fd      	b.n	800b4ce <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	68ba      	ldr	r2, [r7, #8]
 800b4d6:	fb02 f303 	mul.w	r3, r2, r3
 800b4da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	3350      	adds	r3, #80	@ 0x50
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f002 fda3 	bl	800e02c <pvPortMalloc>
 800b4e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d011      	beq.n	800b512 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	3350      	adds	r3, #80	@ 0x50
 800b4f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b500:	79fa      	ldrb	r2, [r7, #7]
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	4613      	mov	r3, r2
 800b508:	697a      	ldr	r2, [r7, #20]
 800b50a:	68b9      	ldr	r1, [r7, #8]
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f000 f805 	bl	800b51c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b512:	69bb      	ldr	r3, [r7, #24]
	}
 800b514:	4618      	mov	r0, r3
 800b516:	3720      	adds	r7, #32
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
 800b528:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d103      	bne.n	800b538 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	69ba      	ldr	r2, [r7, #24]
 800b534:	601a      	str	r2, [r3, #0]
 800b536:	e002      	b.n	800b53e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	68ba      	ldr	r2, [r7, #8]
 800b548:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b54a:	2101      	movs	r1, #1
 800b54c:	69b8      	ldr	r0, [r7, #24]
 800b54e:	f7ff fec3 	bl	800b2d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	78fa      	ldrb	r2, [r7, #3]
 800b556:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b55a:	bf00      	nop
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b562:	b580      	push	{r7, lr}
 800b564:	b082      	sub	sp, #8
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00e      	beq.n	800b58e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b582:	2300      	movs	r3, #0
 800b584:	2200      	movs	r2, #0
 800b586:	2100      	movs	r1, #0
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f911 	bl	800b7b0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b58e:	bf00      	nop
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b596:	b580      	push	{r7, lr}
 800b598:	b086      	sub	sp, #24
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	4603      	mov	r3, r0
 800b59e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	617b      	str	r3, [r7, #20]
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b5a8:	79fb      	ldrb	r3, [r7, #7]
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	6939      	ldr	r1, [r7, #16]
 800b5ae:	6978      	ldr	r0, [r7, #20]
 800b5b0:	f7ff ff79 	bl	800b4a6 <xQueueGenericCreate>
 800b5b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f7ff ffd3 	bl	800b562 <prvInitialiseMutex>

		return xNewQueue;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
	}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3718      	adds	r7, #24
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b088      	sub	sp, #32
 800b5ca:	af02      	add	r7, sp, #8
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	6039      	str	r1, [r7, #0]
 800b5d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	617b      	str	r3, [r7, #20]
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	6939      	ldr	r1, [r7, #16]
 800b5e4:	6978      	ldr	r0, [r7, #20]
 800b5e6:	f7ff fee1 	bl	800b3ac <xQueueGenericCreateStatic>
 800b5ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f7ff ffb8 	bl	800b562 <prvInitialiseMutex>

		return xNewQueue;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
	}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b5fc:	b590      	push	{r4, r7, lr}
 800b5fe:	b087      	sub	sp, #28
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10b      	bne.n	800b626 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800b60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b612:	f383 8811 	msr	BASEPRI, r3
 800b616:	f3bf 8f6f 	isb	sy
 800b61a:	f3bf 8f4f 	dsb	sy
 800b61e:	60fb      	str	r3, [r7, #12]
}
 800b620:	bf00      	nop
 800b622:	bf00      	nop
 800b624:	e7fd      	b.n	800b622 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	689c      	ldr	r4, [r3, #8]
 800b62a:	f001 fd63 	bl	800d0f4 <xTaskGetCurrentTaskHandle>
 800b62e:	4603      	mov	r3, r0
 800b630:	429c      	cmp	r4, r3
 800b632:	d111      	bne.n	800b658 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	1e5a      	subs	r2, r3, #1
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d105      	bne.n	800b652 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b646:	2300      	movs	r3, #0
 800b648:	2200      	movs	r2, #0
 800b64a:	2100      	movs	r1, #0
 800b64c:	6938      	ldr	r0, [r7, #16]
 800b64e:	f000 f8af 	bl	800b7b0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b652:	2301      	movs	r3, #1
 800b654:	617b      	str	r3, [r7, #20]
 800b656:	e001      	b.n	800b65c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b658:	2300      	movs	r3, #0
 800b65a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b65c:	697b      	ldr	r3, [r7, #20]
	}
 800b65e:	4618      	mov	r0, r3
 800b660:	371c      	adds	r7, #28
 800b662:	46bd      	mov	sp, r7
 800b664:	bd90      	pop	{r4, r7, pc}

0800b666 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b666:	b590      	push	{r4, r7, lr}
 800b668:	b087      	sub	sp, #28
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d10b      	bne.n	800b692 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800b67a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b67e:	f383 8811 	msr	BASEPRI, r3
 800b682:	f3bf 8f6f 	isb	sy
 800b686:	f3bf 8f4f 	dsb	sy
 800b68a:	60fb      	str	r3, [r7, #12]
}
 800b68c:	bf00      	nop
 800b68e:	bf00      	nop
 800b690:	e7fd      	b.n	800b68e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	689c      	ldr	r4, [r3, #8]
 800b696:	f001 fd2d 	bl	800d0f4 <xTaskGetCurrentTaskHandle>
 800b69a:	4603      	mov	r3, r0
 800b69c:	429c      	cmp	r4, r3
 800b69e:	d107      	bne.n	800b6b0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	1c5a      	adds	r2, r3, #1
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	617b      	str	r3, [r7, #20]
 800b6ae:	e00c      	b.n	800b6ca <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	6938      	ldr	r0, [r7, #16]
 800b6b4:	f000 fb8e 	bl	800bdd4 <xQueueSemaphoreTake>
 800b6b8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d004      	beq.n	800b6ca <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	1c5a      	adds	r2, r3, #1
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b6ca:	697b      	ldr	r3, [r7, #20]
	}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	371c      	adds	r7, #28
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd90      	pop	{r4, r7, pc}

0800b6d4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b08a      	sub	sp, #40	@ 0x28
 800b6d8:	af02      	add	r7, sp, #8
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d10b      	bne.n	800b6fe <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800b6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ea:	f383 8811 	msr	BASEPRI, r3
 800b6ee:	f3bf 8f6f 	isb	sy
 800b6f2:	f3bf 8f4f 	dsb	sy
 800b6f6:	61bb      	str	r3, [r7, #24]
}
 800b6f8:	bf00      	nop
 800b6fa:	bf00      	nop
 800b6fc:	e7fd      	b.n	800b6fa <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	429a      	cmp	r2, r3
 800b704:	d90b      	bls.n	800b71e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	617b      	str	r3, [r7, #20]
}
 800b718:	bf00      	nop
 800b71a:	bf00      	nop
 800b71c:	e7fd      	b.n	800b71a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b71e:	2302      	movs	r3, #2
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	2100      	movs	r1, #0
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f7ff fe3f 	bl	800b3ac <xQueueGenericCreateStatic>
 800b72e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d002      	beq.n	800b73c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b73c:	69fb      	ldr	r3, [r7, #28]
	}
 800b73e:	4618      	mov	r0, r3
 800b740:	3720      	adds	r7, #32
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b746:	b580      	push	{r7, lr}
 800b748:	b086      	sub	sp, #24
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10b      	bne.n	800b76e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800b756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b75a:	f383 8811 	msr	BASEPRI, r3
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	f3bf 8f4f 	dsb	sy
 800b766:	613b      	str	r3, [r7, #16]
}
 800b768:	bf00      	nop
 800b76a:	bf00      	nop
 800b76c:	e7fd      	b.n	800b76a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	429a      	cmp	r2, r3
 800b774:	d90b      	bls.n	800b78e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800b776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	60fb      	str	r3, [r7, #12]
}
 800b788:	bf00      	nop
 800b78a:	bf00      	nop
 800b78c:	e7fd      	b.n	800b78a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b78e:	2202      	movs	r2, #2
 800b790:	2100      	movs	r1, #0
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7ff fe87 	bl	800b4a6 <xQueueGenericCreate>
 800b798:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	683a      	ldr	r2, [r7, #0]
 800b7a4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b7a6:	697b      	ldr	r3, [r7, #20]
	}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b08e      	sub	sp, #56	@ 0x38
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d10b      	bne.n	800b7e4 <xQueueGenericSend+0x34>
	__asm volatile
 800b7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d0:	f383 8811 	msr	BASEPRI, r3
 800b7d4:	f3bf 8f6f 	isb	sy
 800b7d8:	f3bf 8f4f 	dsb	sy
 800b7dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b7de:	bf00      	nop
 800b7e0:	bf00      	nop
 800b7e2:	e7fd      	b.n	800b7e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d103      	bne.n	800b7f2 <xQueueGenericSend+0x42>
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <xQueueGenericSend+0x46>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e000      	b.n	800b7f8 <xQueueGenericSend+0x48>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10b      	bne.n	800b814 <xQueueGenericSend+0x64>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b80e:	bf00      	nop
 800b810:	bf00      	nop
 800b812:	e7fd      	b.n	800b810 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	2b02      	cmp	r3, #2
 800b818:	d103      	bne.n	800b822 <xQueueGenericSend+0x72>
 800b81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b81c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d101      	bne.n	800b826 <xQueueGenericSend+0x76>
 800b822:	2301      	movs	r3, #1
 800b824:	e000      	b.n	800b828 <xQueueGenericSend+0x78>
 800b826:	2300      	movs	r3, #0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10b      	bne.n	800b844 <xQueueGenericSend+0x94>
	__asm volatile
 800b82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b830:	f383 8811 	msr	BASEPRI, r3
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	623b      	str	r3, [r7, #32]
}
 800b83e:	bf00      	nop
 800b840:	bf00      	nop
 800b842:	e7fd      	b.n	800b840 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b844:	f001 fc66 	bl	800d114 <xTaskGetSchedulerState>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d102      	bne.n	800b854 <xQueueGenericSend+0xa4>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d101      	bne.n	800b858 <xQueueGenericSend+0xa8>
 800b854:	2301      	movs	r3, #1
 800b856:	e000      	b.n	800b85a <xQueueGenericSend+0xaa>
 800b858:	2300      	movs	r3, #0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10b      	bne.n	800b876 <xQueueGenericSend+0xc6>
	__asm volatile
 800b85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	61fb      	str	r3, [r7, #28]
}
 800b870:	bf00      	nop
 800b872:	bf00      	nop
 800b874:	e7fd      	b.n	800b872 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b876:	f002 fab7 	bl	800dde8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b882:	429a      	cmp	r2, r3
 800b884:	d302      	bcc.n	800b88c <xQueueGenericSend+0xdc>
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d129      	bne.n	800b8e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b88c:	683a      	ldr	r2, [r7, #0]
 800b88e:	68b9      	ldr	r1, [r7, #8]
 800b890:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b892:	f000 fc6d 	bl	800c170 <prvCopyDataToQueue>
 800b896:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b89a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d010      	beq.n	800b8c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a2:	3324      	adds	r3, #36	@ 0x24
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	f001 fa65 	bl	800cd74 <xTaskRemoveFromEventList>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d013      	beq.n	800b8d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b8b0:	4b3f      	ldr	r3, [pc, #252]	@ (800b9b0 <xQueueGenericSend+0x200>)
 800b8b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	e00a      	b.n	800b8d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d007      	beq.n	800b8d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b8c8:	4b39      	ldr	r3, [pc, #228]	@ (800b9b0 <xQueueGenericSend+0x200>)
 800b8ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8ce:	601a      	str	r2, [r3, #0]
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b8d8:	f002 fab8 	bl	800de4c <vPortExitCritical>
				return pdPASS;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e063      	b.n	800b9a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d103      	bne.n	800b8ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8e6:	f002 fab1 	bl	800de4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	e05c      	b.n	800b9a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d106      	bne.n	800b902 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8f4:	f107 0314 	add.w	r3, r7, #20
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f001 fa9f 	bl	800ce3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8fe:	2301      	movs	r3, #1
 800b900:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b902:	f002 faa3 	bl	800de4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b906:	f001 f80f 	bl	800c928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b90a:	f002 fa6d 	bl	800dde8 <vPortEnterCritical>
 800b90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b910:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b914:	b25b      	sxtb	r3, r3
 800b916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91a:	d103      	bne.n	800b924 <xQueueGenericSend+0x174>
 800b91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b926:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b92a:	b25b      	sxtb	r3, r3
 800b92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b930:	d103      	bne.n	800b93a <xQueueGenericSend+0x18a>
 800b932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b934:	2200      	movs	r2, #0
 800b936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b93a:	f002 fa87 	bl	800de4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b93e:	1d3a      	adds	r2, r7, #4
 800b940:	f107 0314 	add.w	r3, r7, #20
 800b944:	4611      	mov	r1, r2
 800b946:	4618      	mov	r0, r3
 800b948:	f001 fa8e 	bl	800ce68 <xTaskCheckForTimeOut>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d124      	bne.n	800b99c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b952:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b954:	f000 fd04 	bl	800c360 <prvIsQueueFull>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d018      	beq.n	800b990 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b960:	3310      	adds	r3, #16
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	4611      	mov	r1, r2
 800b966:	4618      	mov	r0, r3
 800b968:	f001 f9b2 	bl	800ccd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b96c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b96e:	f000 fc8f 	bl	800c290 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b972:	f000 ffe7 	bl	800c944 <xTaskResumeAll>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f47f af7c 	bne.w	800b876 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b97e:	4b0c      	ldr	r3, [pc, #48]	@ (800b9b0 <xQueueGenericSend+0x200>)
 800b980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b984:	601a      	str	r2, [r3, #0]
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	e772      	b.n	800b876 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b990:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b992:	f000 fc7d 	bl	800c290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b996:	f000 ffd5 	bl	800c944 <xTaskResumeAll>
 800b99a:	e76c      	b.n	800b876 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b99c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b99e:	f000 fc77 	bl	800c290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9a2:	f000 ffcf 	bl	800c944 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b9a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3738      	adds	r7, #56	@ 0x38
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	e000ed04 	.word	0xe000ed04

0800b9b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b090      	sub	sp, #64	@ 0x40
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10b      	bne.n	800b9e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b9de:	bf00      	nop
 800b9e0:	bf00      	nop
 800b9e2:	e7fd      	b.n	800b9e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d103      	bne.n	800b9f2 <xQueueGenericSendFromISR+0x3e>
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <xQueueGenericSendFromISR+0x42>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e000      	b.n	800b9f8 <xQueueGenericSendFromISR+0x44>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10b      	bne.n	800ba14 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ba0e:	bf00      	nop
 800ba10:	bf00      	nop
 800ba12:	e7fd      	b.n	800ba10 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d103      	bne.n	800ba22 <xQueueGenericSendFromISR+0x6e>
 800ba1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d101      	bne.n	800ba26 <xQueueGenericSendFromISR+0x72>
 800ba22:	2301      	movs	r3, #1
 800ba24:	e000      	b.n	800ba28 <xQueueGenericSendFromISR+0x74>
 800ba26:	2300      	movs	r3, #0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10b      	bne.n	800ba44 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ba2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba30:	f383 8811 	msr	BASEPRI, r3
 800ba34:	f3bf 8f6f 	isb	sy
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	623b      	str	r3, [r7, #32]
}
 800ba3e:	bf00      	nop
 800ba40:	bf00      	nop
 800ba42:	e7fd      	b.n	800ba40 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba44:	f002 fab0 	bl	800dfa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba48:	f3ef 8211 	mrs	r2, BASEPRI
 800ba4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba50:	f383 8811 	msr	BASEPRI, r3
 800ba54:	f3bf 8f6f 	isb	sy
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	61fa      	str	r2, [r7, #28]
 800ba5e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ba60:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba62:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d302      	bcc.n	800ba76 <xQueueGenericSendFromISR+0xc2>
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d12f      	bne.n	800bad6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba84:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	68b9      	ldr	r1, [r7, #8]
 800ba8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba8c:	f000 fb70 	bl	800c170 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba90:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ba94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba98:	d112      	bne.n	800bac0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d016      	beq.n	800bad0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa4:	3324      	adds	r3, #36	@ 0x24
 800baa6:	4618      	mov	r0, r3
 800baa8:	f001 f964 	bl	800cd74 <xTaskRemoveFromEventList>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00e      	beq.n	800bad0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00b      	beq.n	800bad0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	601a      	str	r2, [r3, #0]
 800babe:	e007      	b.n	800bad0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bac0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bac4:	3301      	adds	r3, #1
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	b25a      	sxtb	r2, r3
 800baca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bacc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bad0:	2301      	movs	r3, #1
 800bad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bad4:	e001      	b.n	800bada <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bad6:	2300      	movs	r3, #0
 800bad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800badc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bae4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3740      	adds	r7, #64	@ 0x40
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b08e      	sub	sp, #56	@ 0x38
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10b      	bne.n	800bb1c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800bb04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	623b      	str	r3, [r7, #32]
}
 800bb16:	bf00      	nop
 800bb18:	bf00      	nop
 800bb1a:	e7fd      	b.n	800bb18 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bb1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00b      	beq.n	800bb3c <xQueueGiveFromISR+0x4c>
	__asm volatile
 800bb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb28:	f383 8811 	msr	BASEPRI, r3
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	61fb      	str	r3, [r7, #28]
}
 800bb36:	bf00      	nop
 800bb38:	bf00      	nop
 800bb3a:	e7fd      	b.n	800bb38 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bb3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d103      	bne.n	800bb4c <xQueueGiveFromISR+0x5c>
 800bb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d101      	bne.n	800bb50 <xQueueGiveFromISR+0x60>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e000      	b.n	800bb52 <xQueueGiveFromISR+0x62>
 800bb50:	2300      	movs	r3, #0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10b      	bne.n	800bb6e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800bb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	61bb      	str	r3, [r7, #24]
}
 800bb68:	bf00      	nop
 800bb6a:	bf00      	nop
 800bb6c:	e7fd      	b.n	800bb6a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb6e:	f002 fa1b 	bl	800dfa8 <vPortValidateInterruptPriority>
	__asm volatile
 800bb72:	f3ef 8211 	mrs	r2, BASEPRI
 800bb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	617a      	str	r2, [r7, #20]
 800bb88:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bb8a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb92:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d22b      	bcs.n	800bbf6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bba0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbaa:	1c5a      	adds	r2, r3, #1
 800bbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb8:	d112      	bne.n	800bbe0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d016      	beq.n	800bbf0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc4:	3324      	adds	r3, #36	@ 0x24
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f001 f8d4 	bl	800cd74 <xTaskRemoveFromEventList>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00e      	beq.n	800bbf0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00b      	beq.n	800bbf0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	e007      	b.n	800bbf0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bbe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	b25a      	sxtb	r2, r3
 800bbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbf4:	e001      	b.n	800bbfa <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbfc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f383 8811 	msr	BASEPRI, r3
}
 800bc04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3738      	adds	r7, #56	@ 0x38
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b08c      	sub	sp, #48	@ 0x30
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10b      	bne.n	800bc42 <xQueueReceive+0x32>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	623b      	str	r3, [r7, #32]
}
 800bc3c:	bf00      	nop
 800bc3e:	bf00      	nop
 800bc40:	e7fd      	b.n	800bc3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d103      	bne.n	800bc50 <xQueueReceive+0x40>
 800bc48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d101      	bne.n	800bc54 <xQueueReceive+0x44>
 800bc50:	2301      	movs	r3, #1
 800bc52:	e000      	b.n	800bc56 <xQueueReceive+0x46>
 800bc54:	2300      	movs	r3, #0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10b      	bne.n	800bc72 <xQueueReceive+0x62>
	__asm volatile
 800bc5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc5e:	f383 8811 	msr	BASEPRI, r3
 800bc62:	f3bf 8f6f 	isb	sy
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	61fb      	str	r3, [r7, #28]
}
 800bc6c:	bf00      	nop
 800bc6e:	bf00      	nop
 800bc70:	e7fd      	b.n	800bc6e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc72:	f001 fa4f 	bl	800d114 <xTaskGetSchedulerState>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d102      	bne.n	800bc82 <xQueueReceive+0x72>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d101      	bne.n	800bc86 <xQueueReceive+0x76>
 800bc82:	2301      	movs	r3, #1
 800bc84:	e000      	b.n	800bc88 <xQueueReceive+0x78>
 800bc86:	2300      	movs	r3, #0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10b      	bne.n	800bca4 <xQueueReceive+0x94>
	__asm volatile
 800bc8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	61bb      	str	r3, [r7, #24]
}
 800bc9e:	bf00      	nop
 800bca0:	bf00      	nop
 800bca2:	e7fd      	b.n	800bca0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bca4:	f002 f8a0 	bl	800dde8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d01f      	beq.n	800bcf4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcb4:	68b9      	ldr	r1, [r7, #8]
 800bcb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcb8:	f000 fac4 	bl	800c244 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcbe:	1e5a      	subs	r2, r3, #1
 800bcc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcc2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcc6:	691b      	ldr	r3, [r3, #16]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00f      	beq.n	800bcec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcce:	3310      	adds	r3, #16
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f001 f84f 	bl	800cd74 <xTaskRemoveFromEventList>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d007      	beq.n	800bcec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bcdc:	4b3c      	ldr	r3, [pc, #240]	@ (800bdd0 <xQueueReceive+0x1c0>)
 800bcde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bce2:	601a      	str	r2, [r3, #0]
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bcec:	f002 f8ae 	bl	800de4c <vPortExitCritical>
				return pdPASS;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e069      	b.n	800bdc8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d103      	bne.n	800bd02 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcfa:	f002 f8a7 	bl	800de4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	e062      	b.n	800bdc8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d106      	bne.n	800bd16 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd08:	f107 0310 	add.w	r3, r7, #16
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f001 f895 	bl	800ce3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd12:	2301      	movs	r3, #1
 800bd14:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd16:	f002 f899 	bl	800de4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd1a:	f000 fe05 	bl	800c928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd1e:	f002 f863 	bl	800dde8 <vPortEnterCritical>
 800bd22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd28:	b25b      	sxtb	r3, r3
 800bd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd2e:	d103      	bne.n	800bd38 <xQueueReceive+0x128>
 800bd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd32:	2200      	movs	r2, #0
 800bd34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd3e:	b25b      	sxtb	r3, r3
 800bd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd44:	d103      	bne.n	800bd4e <xQueueReceive+0x13e>
 800bd46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd4e:	f002 f87d 	bl	800de4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd52:	1d3a      	adds	r2, r7, #4
 800bd54:	f107 0310 	add.w	r3, r7, #16
 800bd58:	4611      	mov	r1, r2
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f001 f884 	bl	800ce68 <xTaskCheckForTimeOut>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d123      	bne.n	800bdae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd68:	f000 fae4 	bl	800c334 <prvIsQueueEmpty>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d017      	beq.n	800bda2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd74:	3324      	adds	r3, #36	@ 0x24
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	4611      	mov	r1, r2
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 ffa8 	bl	800ccd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd82:	f000 fa85 	bl	800c290 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd86:	f000 fddd 	bl	800c944 <xTaskResumeAll>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d189      	bne.n	800bca4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bd90:	4b0f      	ldr	r3, [pc, #60]	@ (800bdd0 <xQueueReceive+0x1c0>)
 800bd92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd96:	601a      	str	r2, [r3, #0]
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	f3bf 8f6f 	isb	sy
 800bda0:	e780      	b.n	800bca4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bda2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bda4:	f000 fa74 	bl	800c290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bda8:	f000 fdcc 	bl	800c944 <xTaskResumeAll>
 800bdac:	e77a      	b.n	800bca4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bdae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdb0:	f000 fa6e 	bl	800c290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdb4:	f000 fdc6 	bl	800c944 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdba:	f000 fabb 	bl	800c334 <prvIsQueueEmpty>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f43f af6f 	beq.w	800bca4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bdc6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3730      	adds	r7, #48	@ 0x30
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	e000ed04 	.word	0xe000ed04

0800bdd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b08e      	sub	sp, #56	@ 0x38
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bdde:	2300      	movs	r3, #0
 800bde0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bde6:	2300      	movs	r3, #0
 800bde8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bdea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d10b      	bne.n	800be08 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800bdf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	623b      	str	r3, [r7, #32]
}
 800be02:	bf00      	nop
 800be04:	bf00      	nop
 800be06:	e7fd      	b.n	800be04 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00b      	beq.n	800be28 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800be10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be14:	f383 8811 	msr	BASEPRI, r3
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	61fb      	str	r3, [r7, #28]
}
 800be22:	bf00      	nop
 800be24:	bf00      	nop
 800be26:	e7fd      	b.n	800be24 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be28:	f001 f974 	bl	800d114 <xTaskGetSchedulerState>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d102      	bne.n	800be38 <xQueueSemaphoreTake+0x64>
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d101      	bne.n	800be3c <xQueueSemaphoreTake+0x68>
 800be38:	2301      	movs	r3, #1
 800be3a:	e000      	b.n	800be3e <xQueueSemaphoreTake+0x6a>
 800be3c:	2300      	movs	r3, #0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10b      	bne.n	800be5a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	61bb      	str	r3, [r7, #24]
}
 800be54:	bf00      	nop
 800be56:	bf00      	nop
 800be58:	e7fd      	b.n	800be56 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be5a:	f001 ffc5 	bl	800dde8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800be5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be62:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800be64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be66:	2b00      	cmp	r3, #0
 800be68:	d024      	beq.n	800beb4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800be6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be6c:	1e5a      	subs	r2, r3, #1
 800be6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be70:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d104      	bne.n	800be84 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800be7a:	f001 fac5 	bl	800d408 <pvTaskIncrementMutexHeldCount>
 800be7e:	4602      	mov	r2, r0
 800be80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be82:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00f      	beq.n	800beac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be8e:	3310      	adds	r3, #16
 800be90:	4618      	mov	r0, r3
 800be92:	f000 ff6f 	bl	800cd74 <xTaskRemoveFromEventList>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d007      	beq.n	800beac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be9c:	4b54      	ldr	r3, [pc, #336]	@ (800bff0 <xQueueSemaphoreTake+0x21c>)
 800be9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800beac:	f001 ffce 	bl	800de4c <vPortExitCritical>
				return pdPASS;
 800beb0:	2301      	movs	r3, #1
 800beb2:	e098      	b.n	800bfe6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d112      	bne.n	800bee0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800beba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00b      	beq.n	800bed8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	617b      	str	r3, [r7, #20]
}
 800bed2:	bf00      	nop
 800bed4:	bf00      	nop
 800bed6:	e7fd      	b.n	800bed4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bed8:	f001 ffb8 	bl	800de4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bedc:	2300      	movs	r3, #0
 800bede:	e082      	b.n	800bfe6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d106      	bne.n	800bef4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bee6:	f107 030c 	add.w	r3, r7, #12
 800beea:	4618      	mov	r0, r3
 800beec:	f000 ffa6 	bl	800ce3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bef0:	2301      	movs	r3, #1
 800bef2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bef4:	f001 ffaa 	bl	800de4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bef8:	f000 fd16 	bl	800c928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800befc:	f001 ff74 	bl	800dde8 <vPortEnterCritical>
 800bf00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bf06:	b25b      	sxtb	r3, r3
 800bf08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0c:	d103      	bne.n	800bf16 <xQueueSemaphoreTake+0x142>
 800bf0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf10:	2200      	movs	r2, #0
 800bf12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf1c:	b25b      	sxtb	r3, r3
 800bf1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf22:	d103      	bne.n	800bf2c <xQueueSemaphoreTake+0x158>
 800bf24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf26:	2200      	movs	r2, #0
 800bf28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf2c:	f001 ff8e 	bl	800de4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf30:	463a      	mov	r2, r7
 800bf32:	f107 030c 	add.w	r3, r7, #12
 800bf36:	4611      	mov	r1, r2
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 ff95 	bl	800ce68 <xTaskCheckForTimeOut>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d132      	bne.n	800bfaa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf46:	f000 f9f5 	bl	800c334 <prvIsQueueEmpty>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d026      	beq.n	800bf9e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d109      	bne.n	800bf6c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800bf58:	f001 ff46 	bl	800dde8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	4618      	mov	r0, r3
 800bf62:	f001 f8f5 	bl	800d150 <xTaskPriorityInherit>
 800bf66:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bf68:	f001 ff70 	bl	800de4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf6e:	3324      	adds	r3, #36	@ 0x24
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	4611      	mov	r1, r2
 800bf74:	4618      	mov	r0, r3
 800bf76:	f000 feab 	bl	800ccd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf7c:	f000 f988 	bl	800c290 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf80:	f000 fce0 	bl	800c944 <xTaskResumeAll>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f47f af67 	bne.w	800be5a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800bf8c:	4b18      	ldr	r3, [pc, #96]	@ (800bff0 <xQueueSemaphoreTake+0x21c>)
 800bf8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	e75d      	b.n	800be5a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bf9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfa0:	f000 f976 	bl	800c290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfa4:	f000 fcce 	bl	800c944 <xTaskResumeAll>
 800bfa8:	e757      	b.n	800be5a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bfaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfac:	f000 f970 	bl	800c290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfb0:	f000 fcc8 	bl	800c944 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfb6:	f000 f9bd 	bl	800c334 <prvIsQueueEmpty>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f43f af4c 	beq.w	800be5a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bfc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00d      	beq.n	800bfe4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800bfc8:	f001 ff0e 	bl	800dde8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bfcc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfce:	f000 f8b7 	bl	800c140 <prvGetDisinheritPriorityAfterTimeout>
 800bfd2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bfd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f001 f990 	bl	800d300 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bfe0:	f001 ff34 	bl	800de4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bfe4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3738      	adds	r7, #56	@ 0x38
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	e000ed04 	.word	0xe000ed04

0800bff4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b08e      	sub	sp, #56	@ 0x38
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10b      	bne.n	800c022 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00e:	f383 8811 	msr	BASEPRI, r3
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	623b      	str	r3, [r7, #32]
}
 800c01c:	bf00      	nop
 800c01e:	bf00      	nop
 800c020:	e7fd      	b.n	800c01e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d103      	bne.n	800c030 <xQueueReceiveFromISR+0x3c>
 800c028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c02a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d101      	bne.n	800c034 <xQueueReceiveFromISR+0x40>
 800c030:	2301      	movs	r3, #1
 800c032:	e000      	b.n	800c036 <xQueueReceiveFromISR+0x42>
 800c034:	2300      	movs	r3, #0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d10b      	bne.n	800c052 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03e:	f383 8811 	msr	BASEPRI, r3
 800c042:	f3bf 8f6f 	isb	sy
 800c046:	f3bf 8f4f 	dsb	sy
 800c04a:	61fb      	str	r3, [r7, #28]
}
 800c04c:	bf00      	nop
 800c04e:	bf00      	nop
 800c050:	e7fd      	b.n	800c04e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c052:	f001 ffa9 	bl	800dfa8 <vPortValidateInterruptPriority>
	__asm volatile
 800c056:	f3ef 8211 	mrs	r2, BASEPRI
 800c05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	61ba      	str	r2, [r7, #24]
 800c06c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c06e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c070:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c076:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d02f      	beq.n	800c0de <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c080:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c084:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c088:	68b9      	ldr	r1, [r7, #8]
 800c08a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c08c:	f000 f8da 	bl	800c244 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c092:	1e5a      	subs	r2, r3, #1
 800c094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c096:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c098:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a0:	d112      	bne.n	800c0c8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d016      	beq.n	800c0d8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ac:	3310      	adds	r3, #16
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f000 fe60 	bl	800cd74 <xTaskRemoveFromEventList>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00e      	beq.n	800c0d8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00b      	beq.n	800c0d8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	601a      	str	r2, [r3, #0]
 800c0c6:	e007      	b.n	800c0d8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	b25a      	sxtb	r2, r3
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0dc:	e001      	b.n	800c0e2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	f383 8811 	msr	BASEPRI, r3
}
 800c0ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3738      	adds	r7, #56	@ 0x38
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d10b      	bne.n	800c122 <vQueueDelete+0x2a>
	__asm volatile
 800c10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	60bb      	str	r3, [r7, #8]
}
 800c11c:	bf00      	nop
 800c11e:	bf00      	nop
 800c120:	e7fd      	b.n	800c11e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	f000 f95e 	bl	800c3e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d102      	bne.n	800c138 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f002 f848 	bl	800e1c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c138:	bf00      	nop
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d006      	beq.n	800c15e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c15a:	60fb      	str	r3, [r7, #12]
 800c15c:	e001      	b.n	800c162 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c15e:	2300      	movs	r3, #0
 800c160:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c162:	68fb      	ldr	r3, [r7, #12]
	}
 800c164:	4618      	mov	r0, r3
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b086      	sub	sp, #24
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	60b9      	str	r1, [r7, #8]
 800c17a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c17c:	2300      	movs	r3, #0
 800c17e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c184:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d10d      	bne.n	800c1aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d14d      	bne.n	800c232 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f001 f840 	bl	800d220 <xTaskPriorityDisinherit>
 800c1a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	609a      	str	r2, [r3, #8]
 800c1a8:	e043      	b.n	800c232 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d119      	bne.n	800c1e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6858      	ldr	r0, [r3, #4]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	68b9      	ldr	r1, [r7, #8]
 800c1bc:	f003 fb4f 	bl	800f85e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	685a      	ldr	r2, [r3, #4]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1c8:	441a      	add	r2, r3
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d32b      	bcc.n	800c232 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	605a      	str	r2, [r3, #4]
 800c1e2:	e026      	b.n	800c232 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	68d8      	ldr	r0, [r3, #12]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	68b9      	ldr	r1, [r7, #8]
 800c1f0:	f003 fb35 	bl	800f85e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	68da      	ldr	r2, [r3, #12]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1fc:	425b      	negs	r3, r3
 800c1fe:	441a      	add	r2, r3
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	68da      	ldr	r2, [r3, #12]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d207      	bcs.n	800c220 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	689a      	ldr	r2, [r3, #8]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c218:	425b      	negs	r3, r3
 800c21a:	441a      	add	r2, r3
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b02      	cmp	r3, #2
 800c224:	d105      	bne.n	800c232 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d002      	beq.n	800c232 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	3b01      	subs	r3, #1
 800c230:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	1c5a      	adds	r2, r3, #1
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c23a:	697b      	ldr	r3, [r7, #20]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3718      	adds	r7, #24
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c252:	2b00      	cmp	r3, #0
 800c254:	d018      	beq.n	800c288 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	68da      	ldr	r2, [r3, #12]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c25e:	441a      	add	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	68da      	ldr	r2, [r3, #12]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d303      	bcc.n	800c278 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	68d9      	ldr	r1, [r3, #12]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c280:	461a      	mov	r2, r3
 800c282:	6838      	ldr	r0, [r7, #0]
 800c284:	f003 faeb 	bl	800f85e <memcpy>
	}
}
 800c288:	bf00      	nop
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c298:	f001 fda6 	bl	800dde8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2a4:	e011      	b.n	800c2ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d012      	beq.n	800c2d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	3324      	adds	r3, #36	@ 0x24
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f000 fd5e 	bl	800cd74 <xTaskRemoveFromEventList>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d001      	beq.n	800c2c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2be:	f000 fe37 	bl	800cf30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2c2:	7bfb      	ldrb	r3, [r7, #15]
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	dce9      	bgt.n	800c2a6 <prvUnlockQueue+0x16>
 800c2d2:	e000      	b.n	800c2d6 <prvUnlockQueue+0x46>
					break;
 800c2d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	22ff      	movs	r2, #255	@ 0xff
 800c2da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c2de:	f001 fdb5 	bl	800de4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c2e2:	f001 fd81 	bl	800dde8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c2ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2ee:	e011      	b.n	800c314 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	691b      	ldr	r3, [r3, #16]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d012      	beq.n	800c31e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	3310      	adds	r3, #16
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 fd39 	bl	800cd74 <xTaskRemoveFromEventList>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d001      	beq.n	800c30c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c308:	f000 fe12 	bl	800cf30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c30c:	7bbb      	ldrb	r3, [r7, #14]
 800c30e:	3b01      	subs	r3, #1
 800c310:	b2db      	uxtb	r3, r3
 800c312:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	dce9      	bgt.n	800c2f0 <prvUnlockQueue+0x60>
 800c31c:	e000      	b.n	800c320 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c31e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	22ff      	movs	r2, #255	@ 0xff
 800c324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c328:	f001 fd90 	bl	800de4c <vPortExitCritical>
}
 800c32c:	bf00      	nop
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c33c:	f001 fd54 	bl	800dde8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c344:	2b00      	cmp	r3, #0
 800c346:	d102      	bne.n	800c34e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c348:	2301      	movs	r3, #1
 800c34a:	60fb      	str	r3, [r7, #12]
 800c34c:	e001      	b.n	800c352 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c34e:	2300      	movs	r3, #0
 800c350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c352:	f001 fd7b 	bl	800de4c <vPortExitCritical>

	return xReturn;
 800c356:	68fb      	ldr	r3, [r7, #12]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c368:	f001 fd3e 	bl	800dde8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c374:	429a      	cmp	r2, r3
 800c376:	d102      	bne.n	800c37e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c378:	2301      	movs	r3, #1
 800c37a:	60fb      	str	r3, [r7, #12]
 800c37c:	e001      	b.n	800c382 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c37e:	2300      	movs	r3, #0
 800c380:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c382:	f001 fd63 	bl	800de4c <vPortExitCritical>

	return xReturn;
 800c386:	68fb      	ldr	r3, [r7, #12]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c39a:	2300      	movs	r3, #0
 800c39c:	60fb      	str	r3, [r7, #12]
 800c39e:	e014      	b.n	800c3ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c3a0:	4a0f      	ldr	r2, [pc, #60]	@ (800c3e0 <vQueueAddToRegistry+0x50>)
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10b      	bne.n	800c3c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c3ac:	490c      	ldr	r1, [pc, #48]	@ (800c3e0 <vQueueAddToRegistry+0x50>)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	683a      	ldr	r2, [r7, #0]
 800c3b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3b6:	4a0a      	ldr	r2, [pc, #40]	@ (800c3e0 <vQueueAddToRegistry+0x50>)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	00db      	lsls	r3, r3, #3
 800c3bc:	4413      	add	r3, r2
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c3c2:	e006      	b.n	800c3d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	60fb      	str	r3, [r7, #12]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2b07      	cmp	r3, #7
 800c3ce:	d9e7      	bls.n	800c3a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c3d0:	bf00      	nop
 800c3d2:	bf00      	nop
 800c3d4:	3714      	adds	r7, #20
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	20001188 	.word	0x20001188

0800c3e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	60fb      	str	r3, [r7, #12]
 800c3f0:	e016      	b.n	800c420 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c3f2:	4a10      	ldr	r2, [pc, #64]	@ (800c434 <vQueueUnregisterQueue+0x50>)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	00db      	lsls	r3, r3, #3
 800c3f8:	4413      	add	r3, r2
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d10b      	bne.n	800c41a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c402:	4a0c      	ldr	r2, [pc, #48]	@ (800c434 <vQueueUnregisterQueue+0x50>)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2100      	movs	r1, #0
 800c408:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c40c:	4a09      	ldr	r2, [pc, #36]	@ (800c434 <vQueueUnregisterQueue+0x50>)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	00db      	lsls	r3, r3, #3
 800c412:	4413      	add	r3, r2
 800c414:	2200      	movs	r2, #0
 800c416:	605a      	str	r2, [r3, #4]
				break;
 800c418:	e006      	b.n	800c428 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	3301      	adds	r3, #1
 800c41e:	60fb      	str	r3, [r7, #12]
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2b07      	cmp	r3, #7
 800c424:	d9e5      	bls.n	800c3f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c426:	bf00      	nop
 800c428:	bf00      	nop
 800c42a:	3714      	adds	r7, #20
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr
 800c434:	20001188 	.word	0x20001188

0800c438 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b086      	sub	sp, #24
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c448:	f001 fcce 	bl	800dde8 <vPortEnterCritical>
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c452:	b25b      	sxtb	r3, r3
 800c454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c458:	d103      	bne.n	800c462 <vQueueWaitForMessageRestricted+0x2a>
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	2200      	movs	r2, #0
 800c45e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c468:	b25b      	sxtb	r3, r3
 800c46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46e:	d103      	bne.n	800c478 <vQueueWaitForMessageRestricted+0x40>
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	2200      	movs	r2, #0
 800c474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c478:	f001 fce8 	bl	800de4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c480:	2b00      	cmp	r3, #0
 800c482:	d106      	bne.n	800c492 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	3324      	adds	r3, #36	@ 0x24
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	68b9      	ldr	r1, [r7, #8]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f000 fc45 	bl	800cd1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c492:	6978      	ldr	r0, [r7, #20]
 800c494:	f7ff fefc 	bl	800c290 <prvUnlockQueue>
	}
 800c498:	bf00      	nop
 800c49a:	3718      	adds	r7, #24
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b08e      	sub	sp, #56	@ 0x38
 800c4a4:	af04      	add	r7, sp, #16
 800c4a6:	60f8      	str	r0, [r7, #12]
 800c4a8:	60b9      	str	r1, [r7, #8]
 800c4aa:	607a      	str	r2, [r7, #4]
 800c4ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c4ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d10b      	bne.n	800c4cc <xTaskCreateStatic+0x2c>
	__asm volatile
 800c4b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	623b      	str	r3, [r7, #32]
}
 800c4c6:	bf00      	nop
 800c4c8:	bf00      	nop
 800c4ca:	e7fd      	b.n	800c4c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d10b      	bne.n	800c4ea <xTaskCreateStatic+0x4a>
	__asm volatile
 800c4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d6:	f383 8811 	msr	BASEPRI, r3
 800c4da:	f3bf 8f6f 	isb	sy
 800c4de:	f3bf 8f4f 	dsb	sy
 800c4e2:	61fb      	str	r3, [r7, #28]
}
 800c4e4:	bf00      	nop
 800c4e6:	bf00      	nop
 800c4e8:	e7fd      	b.n	800c4e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c4ea:	235c      	movs	r3, #92	@ 0x5c
 800c4ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c4f2:	d00b      	beq.n	800c50c <xTaskCreateStatic+0x6c>
	__asm volatile
 800c4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	61bb      	str	r3, [r7, #24]
}
 800c506:	bf00      	nop
 800c508:	bf00      	nop
 800c50a:	e7fd      	b.n	800c508 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c50c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c510:	2b00      	cmp	r3, #0
 800c512:	d01e      	beq.n	800c552 <xTaskCreateStatic+0xb2>
 800c514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c516:	2b00      	cmp	r3, #0
 800c518:	d01b      	beq.n	800c552 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c51a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c51c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c520:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c522:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c526:	2202      	movs	r2, #2
 800c528:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c52c:	2300      	movs	r3, #0
 800c52e:	9303      	str	r3, [sp, #12]
 800c530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c532:	9302      	str	r3, [sp, #8]
 800c534:	f107 0314 	add.w	r3, r7, #20
 800c538:	9301      	str	r3, [sp, #4]
 800c53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	68b9      	ldr	r1, [r7, #8]
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f000 f850 	bl	800c5ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c54a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c54c:	f000 f8de 	bl	800c70c <prvAddNewTaskToReadyList>
 800c550:	e001      	b.n	800c556 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c552:	2300      	movs	r3, #0
 800c554:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c556:	697b      	ldr	r3, [r7, #20]
	}
 800c558:	4618      	mov	r0, r3
 800c55a:	3728      	adds	r7, #40	@ 0x28
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c560:	b580      	push	{r7, lr}
 800c562:	b08c      	sub	sp, #48	@ 0x30
 800c564:	af04      	add	r7, sp, #16
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	603b      	str	r3, [r7, #0]
 800c56c:	4613      	mov	r3, r2
 800c56e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c570:	88fb      	ldrh	r3, [r7, #6]
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	4618      	mov	r0, r3
 800c576:	f001 fd59 	bl	800e02c <pvPortMalloc>
 800c57a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00e      	beq.n	800c5a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c582:	205c      	movs	r0, #92	@ 0x5c
 800c584:	f001 fd52 	bl	800e02c <pvPortMalloc>
 800c588:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	697a      	ldr	r2, [r7, #20]
 800c594:	631a      	str	r2, [r3, #48]	@ 0x30
 800c596:	e005      	b.n	800c5a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c598:	6978      	ldr	r0, [r7, #20]
 800c59a:	f001 fe15 	bl	800e1c8 <vPortFree>
 800c59e:	e001      	b.n	800c5a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d017      	beq.n	800c5da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c5b2:	88fa      	ldrh	r2, [r7, #6]
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	9303      	str	r3, [sp, #12]
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	9302      	str	r3, [sp, #8]
 800c5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5be:	9301      	str	r3, [sp, #4]
 800c5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	68b9      	ldr	r1, [r7, #8]
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	f000 f80e 	bl	800c5ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5ce:	69f8      	ldr	r0, [r7, #28]
 800c5d0:	f000 f89c 	bl	800c70c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	61bb      	str	r3, [r7, #24]
 800c5d8:	e002      	b.n	800c5e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5da:	f04f 33ff 	mov.w	r3, #4294967295
 800c5de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c5e0:	69bb      	ldr	r3, [r7, #24]
	}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3720      	adds	r7, #32
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b088      	sub	sp, #32
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	60f8      	str	r0, [r7, #12]
 800c5f2:	60b9      	str	r1, [r7, #8]
 800c5f4:	607a      	str	r2, [r7, #4]
 800c5f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	461a      	mov	r2, r3
 800c602:	21a5      	movs	r1, #165	@ 0xa5
 800c604:	f003 f80b 	bl	800f61e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c612:	3b01      	subs	r3, #1
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	4413      	add	r3, r2
 800c618:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c61a:	69bb      	ldr	r3, [r7, #24]
 800c61c:	f023 0307 	bic.w	r3, r3, #7
 800c620:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c622:	69bb      	ldr	r3, [r7, #24]
 800c624:	f003 0307 	and.w	r3, r3, #7
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00b      	beq.n	800c644 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	617b      	str	r3, [r7, #20]
}
 800c63e:	bf00      	nop
 800c640:	bf00      	nop
 800c642:	e7fd      	b.n	800c640 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d01f      	beq.n	800c68a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c64a:	2300      	movs	r3, #0
 800c64c:	61fb      	str	r3, [r7, #28]
 800c64e:	e012      	b.n	800c676 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	4413      	add	r3, r2
 800c656:	7819      	ldrb	r1, [r3, #0]
 800c658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	4413      	add	r3, r2
 800c65e:	3334      	adds	r3, #52	@ 0x34
 800c660:	460a      	mov	r2, r1
 800c662:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	4413      	add	r3, r2
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d006      	beq.n	800c67e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	3301      	adds	r3, #1
 800c674:	61fb      	str	r3, [r7, #28]
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	2b0f      	cmp	r3, #15
 800c67a:	d9e9      	bls.n	800c650 <prvInitialiseNewTask+0x66>
 800c67c:	e000      	b.n	800c680 <prvInitialiseNewTask+0x96>
			{
				break;
 800c67e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c682:	2200      	movs	r2, #0
 800c684:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c688:	e003      	b.n	800c692 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68c:	2200      	movs	r2, #0
 800c68e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c694:	2b37      	cmp	r3, #55	@ 0x37
 800c696:	d901      	bls.n	800c69c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c698:	2337      	movs	r3, #55	@ 0x37
 800c69a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c69e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6a0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6a6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fe fd7c 	bl	800b1b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ba:	3318      	adds	r3, #24
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7fe fd77 	bl	800b1b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6d6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6da:	2200      	movs	r2, #0
 800c6dc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	68f9      	ldr	r1, [r7, #12]
 800c6ea:	69b8      	ldr	r0, [r7, #24]
 800c6ec:	f001 fa4e 	bl	800db8c <pxPortInitialiseStack>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c700:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c702:	bf00      	nop
 800c704:	3720      	adds	r7, #32
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
	...

0800c70c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c714:	f001 fb68 	bl	800dde8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c718:	4b2d      	ldr	r3, [pc, #180]	@ (800c7d0 <prvAddNewTaskToReadyList+0xc4>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	3301      	adds	r3, #1
 800c71e:	4a2c      	ldr	r2, [pc, #176]	@ (800c7d0 <prvAddNewTaskToReadyList+0xc4>)
 800c720:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c722:	4b2c      	ldr	r3, [pc, #176]	@ (800c7d4 <prvAddNewTaskToReadyList+0xc8>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d109      	bne.n	800c73e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c72a:	4a2a      	ldr	r2, [pc, #168]	@ (800c7d4 <prvAddNewTaskToReadyList+0xc8>)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c730:	4b27      	ldr	r3, [pc, #156]	@ (800c7d0 <prvAddNewTaskToReadyList+0xc4>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d110      	bne.n	800c75a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c738:	f000 fc1e 	bl	800cf78 <prvInitialiseTaskLists>
 800c73c:	e00d      	b.n	800c75a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c73e:	4b26      	ldr	r3, [pc, #152]	@ (800c7d8 <prvAddNewTaskToReadyList+0xcc>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d109      	bne.n	800c75a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c746:	4b23      	ldr	r3, [pc, #140]	@ (800c7d4 <prvAddNewTaskToReadyList+0xc8>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c750:	429a      	cmp	r2, r3
 800c752:	d802      	bhi.n	800c75a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c754:	4a1f      	ldr	r2, [pc, #124]	@ (800c7d4 <prvAddNewTaskToReadyList+0xc8>)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c75a:	4b20      	ldr	r3, [pc, #128]	@ (800c7dc <prvAddNewTaskToReadyList+0xd0>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	3301      	adds	r3, #1
 800c760:	4a1e      	ldr	r2, [pc, #120]	@ (800c7dc <prvAddNewTaskToReadyList+0xd0>)
 800c762:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c764:	4b1d      	ldr	r3, [pc, #116]	@ (800c7dc <prvAddNewTaskToReadyList+0xd0>)
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c770:	4b1b      	ldr	r3, [pc, #108]	@ (800c7e0 <prvAddNewTaskToReadyList+0xd4>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	429a      	cmp	r2, r3
 800c776:	d903      	bls.n	800c780 <prvAddNewTaskToReadyList+0x74>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c77c:	4a18      	ldr	r2, [pc, #96]	@ (800c7e0 <prvAddNewTaskToReadyList+0xd4>)
 800c77e:	6013      	str	r3, [r2, #0]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c784:	4613      	mov	r3, r2
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	4413      	add	r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4a15      	ldr	r2, [pc, #84]	@ (800c7e4 <prvAddNewTaskToReadyList+0xd8>)
 800c78e:	441a      	add	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3304      	adds	r3, #4
 800c794:	4619      	mov	r1, r3
 800c796:	4610      	mov	r0, r2
 800c798:	f7fe fd17 	bl	800b1ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c79c:	f001 fb56 	bl	800de4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c7a0:	4b0d      	ldr	r3, [pc, #52]	@ (800c7d8 <prvAddNewTaskToReadyList+0xcc>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00e      	beq.n	800c7c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c7a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c7d4 <prvAddNewTaskToReadyList+0xc8>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d207      	bcs.n	800c7c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c7b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c7e8 <prvAddNewTaskToReadyList+0xdc>)
 800c7b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7c6:	bf00      	nop
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	2000169c 	.word	0x2000169c
 800c7d4:	200011c8 	.word	0x200011c8
 800c7d8:	200016a8 	.word	0x200016a8
 800c7dc:	200016b8 	.word	0x200016b8
 800c7e0:	200016a4 	.word	0x200016a4
 800c7e4:	200011cc 	.word	0x200011cc
 800c7e8:	e000ed04 	.word	0xe000ed04

0800c7ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d018      	beq.n	800c830 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c7fe:	4b14      	ldr	r3, [pc, #80]	@ (800c850 <vTaskDelay+0x64>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00b      	beq.n	800c81e <vTaskDelay+0x32>
	__asm volatile
 800c806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	60bb      	str	r3, [r7, #8]
}
 800c818:	bf00      	nop
 800c81a:	bf00      	nop
 800c81c:	e7fd      	b.n	800c81a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c81e:	f000 f883 	bl	800c928 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c822:	2100      	movs	r1, #0
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 fe03 	bl	800d430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c82a:	f000 f88b 	bl	800c944 <xTaskResumeAll>
 800c82e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d107      	bne.n	800c846 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c836:	4b07      	ldr	r3, [pc, #28]	@ (800c854 <vTaskDelay+0x68>)
 800c838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c83c:	601a      	str	r2, [r3, #0]
 800c83e:	f3bf 8f4f 	dsb	sy
 800c842:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c846:	bf00      	nop
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	200016c4 	.word	0x200016c4
 800c854:	e000ed04 	.word	0xe000ed04

0800c858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b08a      	sub	sp, #40	@ 0x28
 800c85c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c862:	2300      	movs	r3, #0
 800c864:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c866:	463a      	mov	r2, r7
 800c868:	1d39      	adds	r1, r7, #4
 800c86a:	f107 0308 	add.w	r3, r7, #8
 800c86e:	4618      	mov	r0, r3
 800c870:	f7fe fc4a 	bl	800b108 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c874:	6839      	ldr	r1, [r7, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	9202      	str	r2, [sp, #8]
 800c87c:	9301      	str	r3, [sp, #4]
 800c87e:	2300      	movs	r3, #0
 800c880:	9300      	str	r3, [sp, #0]
 800c882:	2300      	movs	r3, #0
 800c884:	460a      	mov	r2, r1
 800c886:	4922      	ldr	r1, [pc, #136]	@ (800c910 <vTaskStartScheduler+0xb8>)
 800c888:	4822      	ldr	r0, [pc, #136]	@ (800c914 <vTaskStartScheduler+0xbc>)
 800c88a:	f7ff fe09 	bl	800c4a0 <xTaskCreateStatic>
 800c88e:	4603      	mov	r3, r0
 800c890:	4a21      	ldr	r2, [pc, #132]	@ (800c918 <vTaskStartScheduler+0xc0>)
 800c892:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c894:	4b20      	ldr	r3, [pc, #128]	@ (800c918 <vTaskStartScheduler+0xc0>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c89c:	2301      	movs	r3, #1
 800c89e:	617b      	str	r3, [r7, #20]
 800c8a0:	e001      	b.n	800c8a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d102      	bne.n	800c8b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c8ac:	f000 fe14 	bl	800d4d8 <xTimerCreateTimerTask>
 800c8b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d116      	bne.n	800c8e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	613b      	str	r3, [r7, #16]
}
 800c8ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c8cc:	4b13      	ldr	r3, [pc, #76]	@ (800c91c <vTaskStartScheduler+0xc4>)
 800c8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c8d4:	4b12      	ldr	r3, [pc, #72]	@ (800c920 <vTaskStartScheduler+0xc8>)
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c8da:	4b12      	ldr	r3, [pc, #72]	@ (800c924 <vTaskStartScheduler+0xcc>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c8e0:	f001 f9de 	bl	800dca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c8e4:	e00f      	b.n	800c906 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ec:	d10b      	bne.n	800c906 <vTaskStartScheduler+0xae>
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	60fb      	str	r3, [r7, #12]
}
 800c900:	bf00      	nop
 800c902:	bf00      	nop
 800c904:	e7fd      	b.n	800c902 <vTaskStartScheduler+0xaa>
}
 800c906:	bf00      	nop
 800c908:	3718      	adds	r7, #24
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	08014780 	.word	0x08014780
 800c914:	0800cf49 	.word	0x0800cf49
 800c918:	200016c0 	.word	0x200016c0
 800c91c:	200016bc 	.word	0x200016bc
 800c920:	200016a8 	.word	0x200016a8
 800c924:	200016a0 	.word	0x200016a0

0800c928 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c928:	b480      	push	{r7}
 800c92a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c92c:	4b04      	ldr	r3, [pc, #16]	@ (800c940 <vTaskSuspendAll+0x18>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	3301      	adds	r3, #1
 800c932:	4a03      	ldr	r2, [pc, #12]	@ (800c940 <vTaskSuspendAll+0x18>)
 800c934:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c936:	bf00      	nop
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr
 800c940:	200016c4 	.word	0x200016c4

0800c944 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c94a:	2300      	movs	r3, #0
 800c94c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c94e:	2300      	movs	r3, #0
 800c950:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c952:	4b42      	ldr	r3, [pc, #264]	@ (800ca5c <xTaskResumeAll+0x118>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d10b      	bne.n	800c972 <xTaskResumeAll+0x2e>
	__asm volatile
 800c95a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	603b      	str	r3, [r7, #0]
}
 800c96c:	bf00      	nop
 800c96e:	bf00      	nop
 800c970:	e7fd      	b.n	800c96e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c972:	f001 fa39 	bl	800dde8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c976:	4b39      	ldr	r3, [pc, #228]	@ (800ca5c <xTaskResumeAll+0x118>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	3b01      	subs	r3, #1
 800c97c:	4a37      	ldr	r2, [pc, #220]	@ (800ca5c <xTaskResumeAll+0x118>)
 800c97e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c980:	4b36      	ldr	r3, [pc, #216]	@ (800ca5c <xTaskResumeAll+0x118>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d162      	bne.n	800ca4e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c988:	4b35      	ldr	r3, [pc, #212]	@ (800ca60 <xTaskResumeAll+0x11c>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d05e      	beq.n	800ca4e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c990:	e02f      	b.n	800c9f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c992:	4b34      	ldr	r3, [pc, #208]	@ (800ca64 <xTaskResumeAll+0x120>)
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	3318      	adds	r3, #24
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7fe fc70 	bl	800b284 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3304      	adds	r3, #4
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7fe fc6b 	bl	800b284 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9b2:	4b2d      	ldr	r3, [pc, #180]	@ (800ca68 <xTaskResumeAll+0x124>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d903      	bls.n	800c9c2 <xTaskResumeAll+0x7e>
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9be:	4a2a      	ldr	r2, [pc, #168]	@ (800ca68 <xTaskResumeAll+0x124>)
 800c9c0:	6013      	str	r3, [r2, #0]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	4413      	add	r3, r2
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	4a27      	ldr	r2, [pc, #156]	@ (800ca6c <xTaskResumeAll+0x128>)
 800c9d0:	441a      	add	r2, r3
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	4610      	mov	r0, r2
 800c9da:	f7fe fbf6 	bl	800b1ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9e2:	4b23      	ldr	r3, [pc, #140]	@ (800ca70 <xTaskResumeAll+0x12c>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d302      	bcc.n	800c9f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c9ec:	4b21      	ldr	r3, [pc, #132]	@ (800ca74 <xTaskResumeAll+0x130>)
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c9f2:	4b1c      	ldr	r3, [pc, #112]	@ (800ca64 <xTaskResumeAll+0x120>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d1cb      	bne.n	800c992 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d001      	beq.n	800ca04 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ca00:	f000 fb58 	bl	800d0b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ca04:	4b1c      	ldr	r3, [pc, #112]	@ (800ca78 <xTaskResumeAll+0x134>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d010      	beq.n	800ca32 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ca10:	f000 f846 	bl	800caa0 <xTaskIncrementTick>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d002      	beq.n	800ca20 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ca1a:	4b16      	ldr	r3, [pc, #88]	@ (800ca74 <xTaskResumeAll+0x130>)
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	3b01      	subs	r3, #1
 800ca24:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d1f1      	bne.n	800ca10 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ca2c:	4b12      	ldr	r3, [pc, #72]	@ (800ca78 <xTaskResumeAll+0x134>)
 800ca2e:	2200      	movs	r2, #0
 800ca30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ca32:	4b10      	ldr	r3, [pc, #64]	@ (800ca74 <xTaskResumeAll+0x130>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d009      	beq.n	800ca4e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ca3e:	4b0f      	ldr	r3, [pc, #60]	@ (800ca7c <xTaskResumeAll+0x138>)
 800ca40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca44:	601a      	str	r2, [r3, #0]
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca4e:	f001 f9fd 	bl	800de4c <vPortExitCritical>

	return xAlreadyYielded;
 800ca52:	68bb      	ldr	r3, [r7, #8]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3710      	adds	r7, #16
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	200016c4 	.word	0x200016c4
 800ca60:	2000169c 	.word	0x2000169c
 800ca64:	2000165c 	.word	0x2000165c
 800ca68:	200016a4 	.word	0x200016a4
 800ca6c:	200011cc 	.word	0x200011cc
 800ca70:	200011c8 	.word	0x200011c8
 800ca74:	200016b0 	.word	0x200016b0
 800ca78:	200016ac 	.word	0x200016ac
 800ca7c:	e000ed04 	.word	0xe000ed04

0800ca80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ca86:	4b05      	ldr	r3, [pc, #20]	@ (800ca9c <xTaskGetTickCount+0x1c>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ca8c:	687b      	ldr	r3, [r7, #4]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	370c      	adds	r7, #12
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop
 800ca9c:	200016a0 	.word	0x200016a0

0800caa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800caa6:	2300      	movs	r3, #0
 800caa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caaa:	4b4f      	ldr	r3, [pc, #316]	@ (800cbe8 <xTaskIncrementTick+0x148>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	f040 8090 	bne.w	800cbd4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cab4:	4b4d      	ldr	r3, [pc, #308]	@ (800cbec <xTaskIncrementTick+0x14c>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	3301      	adds	r3, #1
 800caba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cabc:	4a4b      	ldr	r2, [pc, #300]	@ (800cbec <xTaskIncrementTick+0x14c>)
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d121      	bne.n	800cb0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cac8:	4b49      	ldr	r3, [pc, #292]	@ (800cbf0 <xTaskIncrementTick+0x150>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d00b      	beq.n	800caea <xTaskIncrementTick+0x4a>
	__asm volatile
 800cad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	603b      	str	r3, [r7, #0]
}
 800cae4:	bf00      	nop
 800cae6:	bf00      	nop
 800cae8:	e7fd      	b.n	800cae6 <xTaskIncrementTick+0x46>
 800caea:	4b41      	ldr	r3, [pc, #260]	@ (800cbf0 <xTaskIncrementTick+0x150>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	60fb      	str	r3, [r7, #12]
 800caf0:	4b40      	ldr	r3, [pc, #256]	@ (800cbf4 <xTaskIncrementTick+0x154>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a3e      	ldr	r2, [pc, #248]	@ (800cbf0 <xTaskIncrementTick+0x150>)
 800caf6:	6013      	str	r3, [r2, #0]
 800caf8:	4a3e      	ldr	r2, [pc, #248]	@ (800cbf4 <xTaskIncrementTick+0x154>)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6013      	str	r3, [r2, #0]
 800cafe:	4b3e      	ldr	r3, [pc, #248]	@ (800cbf8 <xTaskIncrementTick+0x158>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	3301      	adds	r3, #1
 800cb04:	4a3c      	ldr	r2, [pc, #240]	@ (800cbf8 <xTaskIncrementTick+0x158>)
 800cb06:	6013      	str	r3, [r2, #0]
 800cb08:	f000 fad4 	bl	800d0b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cb0c:	4b3b      	ldr	r3, [pc, #236]	@ (800cbfc <xTaskIncrementTick+0x15c>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	693a      	ldr	r2, [r7, #16]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d349      	bcc.n	800cbaa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb16:	4b36      	ldr	r3, [pc, #216]	@ (800cbf0 <xTaskIncrementTick+0x150>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d104      	bne.n	800cb2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb20:	4b36      	ldr	r3, [pc, #216]	@ (800cbfc <xTaskIncrementTick+0x15c>)
 800cb22:	f04f 32ff 	mov.w	r2, #4294967295
 800cb26:	601a      	str	r2, [r3, #0]
					break;
 800cb28:	e03f      	b.n	800cbaa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb2a:	4b31      	ldr	r3, [pc, #196]	@ (800cbf0 <xTaskIncrementTick+0x150>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	68db      	ldr	r3, [r3, #12]
 800cb32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cb3a:	693a      	ldr	r2, [r7, #16]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d203      	bcs.n	800cb4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cb42:	4a2e      	ldr	r2, [pc, #184]	@ (800cbfc <xTaskIncrementTick+0x15c>)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cb48:	e02f      	b.n	800cbaa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	3304      	adds	r3, #4
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7fe fb98 	bl	800b284 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d004      	beq.n	800cb66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	3318      	adds	r3, #24
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7fe fb8f 	bl	800b284 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb6a:	4b25      	ldr	r3, [pc, #148]	@ (800cc00 <xTaskIncrementTick+0x160>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d903      	bls.n	800cb7a <xTaskIncrementTick+0xda>
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb76:	4a22      	ldr	r2, [pc, #136]	@ (800cc00 <xTaskIncrementTick+0x160>)
 800cb78:	6013      	str	r3, [r2, #0]
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb7e:	4613      	mov	r3, r2
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	4413      	add	r3, r2
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	4a1f      	ldr	r2, [pc, #124]	@ (800cc04 <xTaskIncrementTick+0x164>)
 800cb88:	441a      	add	r2, r3
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	4619      	mov	r1, r3
 800cb90:	4610      	mov	r0, r2
 800cb92:	f7fe fb1a 	bl	800b1ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb9a:	4b1b      	ldr	r3, [pc, #108]	@ (800cc08 <xTaskIncrementTick+0x168>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d3b8      	bcc.n	800cb16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cba4:	2301      	movs	r3, #1
 800cba6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cba8:	e7b5      	b.n	800cb16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cbaa:	4b17      	ldr	r3, [pc, #92]	@ (800cc08 <xTaskIncrementTick+0x168>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbb0:	4914      	ldr	r1, [pc, #80]	@ (800cc04 <xTaskIncrementTick+0x164>)
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	4413      	add	r3, r2
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	440b      	add	r3, r1
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d901      	bls.n	800cbc6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cbc6:	4b11      	ldr	r3, [pc, #68]	@ (800cc0c <xTaskIncrementTick+0x16c>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d007      	beq.n	800cbde <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	617b      	str	r3, [r7, #20]
 800cbd2:	e004      	b.n	800cbde <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cbd4:	4b0e      	ldr	r3, [pc, #56]	@ (800cc10 <xTaskIncrementTick+0x170>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	4a0d      	ldr	r2, [pc, #52]	@ (800cc10 <xTaskIncrementTick+0x170>)
 800cbdc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cbde:	697b      	ldr	r3, [r7, #20]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3718      	adds	r7, #24
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	200016c4 	.word	0x200016c4
 800cbec:	200016a0 	.word	0x200016a0
 800cbf0:	20001654 	.word	0x20001654
 800cbf4:	20001658 	.word	0x20001658
 800cbf8:	200016b4 	.word	0x200016b4
 800cbfc:	200016bc 	.word	0x200016bc
 800cc00:	200016a4 	.word	0x200016a4
 800cc04:	200011cc 	.word	0x200011cc
 800cc08:	200011c8 	.word	0x200011c8
 800cc0c:	200016b0 	.word	0x200016b0
 800cc10:	200016ac 	.word	0x200016ac

0800cc14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cc14:	b480      	push	{r7}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc1a:	4b28      	ldr	r3, [pc, #160]	@ (800ccbc <vTaskSwitchContext+0xa8>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d003      	beq.n	800cc2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cc22:	4b27      	ldr	r3, [pc, #156]	@ (800ccc0 <vTaskSwitchContext+0xac>)
 800cc24:	2201      	movs	r2, #1
 800cc26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cc28:	e042      	b.n	800ccb0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800cc2a:	4b25      	ldr	r3, [pc, #148]	@ (800ccc0 <vTaskSwitchContext+0xac>)
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc30:	4b24      	ldr	r3, [pc, #144]	@ (800ccc4 <vTaskSwitchContext+0xb0>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	60fb      	str	r3, [r7, #12]
 800cc36:	e011      	b.n	800cc5c <vTaskSwitchContext+0x48>
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10b      	bne.n	800cc56 <vTaskSwitchContext+0x42>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	607b      	str	r3, [r7, #4]
}
 800cc50:	bf00      	nop
 800cc52:	bf00      	nop
 800cc54:	e7fd      	b.n	800cc52 <vTaskSwitchContext+0x3e>
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	3b01      	subs	r3, #1
 800cc5a:	60fb      	str	r3, [r7, #12]
 800cc5c:	491a      	ldr	r1, [pc, #104]	@ (800ccc8 <vTaskSwitchContext+0xb4>)
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	4613      	mov	r3, r2
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	4413      	add	r3, r2
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	440b      	add	r3, r1
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d0e3      	beq.n	800cc38 <vTaskSwitchContext+0x24>
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	4613      	mov	r3, r2
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	4413      	add	r3, r2
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	4a13      	ldr	r2, [pc, #76]	@ (800ccc8 <vTaskSwitchContext+0xb4>)
 800cc7c:	4413      	add	r3, r2
 800cc7e:	60bb      	str	r3, [r7, #8]
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	605a      	str	r2, [r3, #4]
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	685a      	ldr	r2, [r3, #4]
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	3308      	adds	r3, #8
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d104      	bne.n	800cca0 <vTaskSwitchContext+0x8c>
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	685a      	ldr	r2, [r3, #4]
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	605a      	str	r2, [r3, #4]
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	4a09      	ldr	r2, [pc, #36]	@ (800cccc <vTaskSwitchContext+0xb8>)
 800cca8:	6013      	str	r3, [r2, #0]
 800ccaa:	4a06      	ldr	r2, [pc, #24]	@ (800ccc4 <vTaskSwitchContext+0xb0>)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6013      	str	r3, [r2, #0]
}
 800ccb0:	bf00      	nop
 800ccb2:	3714      	adds	r7, #20
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	200016c4 	.word	0x200016c4
 800ccc0:	200016b0 	.word	0x200016b0
 800ccc4:	200016a4 	.word	0x200016a4
 800ccc8:	200011cc 	.word	0x200011cc
 800cccc:	200011c8 	.word	0x200011c8

0800ccd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10b      	bne.n	800ccf8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	60fb      	str	r3, [r7, #12]
}
 800ccf2:	bf00      	nop
 800ccf4:	bf00      	nop
 800ccf6:	e7fd      	b.n	800ccf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ccf8:	4b07      	ldr	r3, [pc, #28]	@ (800cd18 <vTaskPlaceOnEventList+0x48>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	3318      	adds	r3, #24
 800ccfe:	4619      	mov	r1, r3
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f7fe fa86 	bl	800b212 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd06:	2101      	movs	r1, #1
 800cd08:	6838      	ldr	r0, [r7, #0]
 800cd0a:	f000 fb91 	bl	800d430 <prvAddCurrentTaskToDelayedList>
}
 800cd0e:	bf00      	nop
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	200011c8 	.word	0x200011c8

0800cd1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d10b      	bne.n	800cd46 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd32:	f383 8811 	msr	BASEPRI, r3
 800cd36:	f3bf 8f6f 	isb	sy
 800cd3a:	f3bf 8f4f 	dsb	sy
 800cd3e:	617b      	str	r3, [r7, #20]
}
 800cd40:	bf00      	nop
 800cd42:	bf00      	nop
 800cd44:	e7fd      	b.n	800cd42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd46:	4b0a      	ldr	r3, [pc, #40]	@ (800cd70 <vTaskPlaceOnEventListRestricted+0x54>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	3318      	adds	r3, #24
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f7fe fa3b 	bl	800b1ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d002      	beq.n	800cd60 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cd5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cd60:	6879      	ldr	r1, [r7, #4]
 800cd62:	68b8      	ldr	r0, [r7, #8]
 800cd64:	f000 fb64 	bl	800d430 <prvAddCurrentTaskToDelayedList>
	}
 800cd68:	bf00      	nop
 800cd6a:	3718      	adds	r7, #24
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	200011c8 	.word	0x200011c8

0800cd74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b086      	sub	sp, #24
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	68db      	ldr	r3, [r3, #12]
 800cd82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d10b      	bne.n	800cda2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cd8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd8e:	f383 8811 	msr	BASEPRI, r3
 800cd92:	f3bf 8f6f 	isb	sy
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	60fb      	str	r3, [r7, #12]
}
 800cd9c:	bf00      	nop
 800cd9e:	bf00      	nop
 800cda0:	e7fd      	b.n	800cd9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	3318      	adds	r3, #24
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fe fa6c 	bl	800b284 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdac:	4b1d      	ldr	r3, [pc, #116]	@ (800ce24 <xTaskRemoveFromEventList+0xb0>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d11d      	bne.n	800cdf0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7fe fa63 	bl	800b284 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdc2:	4b19      	ldr	r3, [pc, #100]	@ (800ce28 <xTaskRemoveFromEventList+0xb4>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d903      	bls.n	800cdd2 <xTaskRemoveFromEventList+0x5e>
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdce:	4a16      	ldr	r2, [pc, #88]	@ (800ce28 <xTaskRemoveFromEventList+0xb4>)
 800cdd0:	6013      	str	r3, [r2, #0]
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	4413      	add	r3, r2
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	4a13      	ldr	r2, [pc, #76]	@ (800ce2c <xTaskRemoveFromEventList+0xb8>)
 800cde0:	441a      	add	r2, r3
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	3304      	adds	r3, #4
 800cde6:	4619      	mov	r1, r3
 800cde8:	4610      	mov	r0, r2
 800cdea:	f7fe f9ee 	bl	800b1ca <vListInsertEnd>
 800cdee:	e005      	b.n	800cdfc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	3318      	adds	r3, #24
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	480e      	ldr	r0, [pc, #56]	@ (800ce30 <xTaskRemoveFromEventList+0xbc>)
 800cdf8:	f7fe f9e7 	bl	800b1ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce00:	4b0c      	ldr	r3, [pc, #48]	@ (800ce34 <xTaskRemoveFromEventList+0xc0>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d905      	bls.n	800ce16 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ce38 <xTaskRemoveFromEventList+0xc4>)
 800ce10:	2201      	movs	r2, #1
 800ce12:	601a      	str	r2, [r3, #0]
 800ce14:	e001      	b.n	800ce1a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ce16:	2300      	movs	r3, #0
 800ce18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ce1a:	697b      	ldr	r3, [r7, #20]
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3718      	adds	r7, #24
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	200016c4 	.word	0x200016c4
 800ce28:	200016a4 	.word	0x200016a4
 800ce2c:	200011cc 	.word	0x200011cc
 800ce30:	2000165c 	.word	0x2000165c
 800ce34:	200011c8 	.word	0x200011c8
 800ce38:	200016b0 	.word	0x200016b0

0800ce3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b083      	sub	sp, #12
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ce44:	4b06      	ldr	r3, [pc, #24]	@ (800ce60 <vTaskInternalSetTimeOutState+0x24>)
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce4c:	4b05      	ldr	r3, [pc, #20]	@ (800ce64 <vTaskInternalSetTimeOutState+0x28>)
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	605a      	str	r2, [r3, #4]
}
 800ce54:	bf00      	nop
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr
 800ce60:	200016b4 	.word	0x200016b4
 800ce64:	200016a0 	.word	0x200016a0

0800ce68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b088      	sub	sp, #32
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d10b      	bne.n	800ce90 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ce78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7c:	f383 8811 	msr	BASEPRI, r3
 800ce80:	f3bf 8f6f 	isb	sy
 800ce84:	f3bf 8f4f 	dsb	sy
 800ce88:	613b      	str	r3, [r7, #16]
}
 800ce8a:	bf00      	nop
 800ce8c:	bf00      	nop
 800ce8e:	e7fd      	b.n	800ce8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d10b      	bne.n	800ceae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ce96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce9a:	f383 8811 	msr	BASEPRI, r3
 800ce9e:	f3bf 8f6f 	isb	sy
 800cea2:	f3bf 8f4f 	dsb	sy
 800cea6:	60fb      	str	r3, [r7, #12]
}
 800cea8:	bf00      	nop
 800ceaa:	bf00      	nop
 800ceac:	e7fd      	b.n	800ceaa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ceae:	f000 ff9b 	bl	800dde8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ceb2:	4b1d      	ldr	r3, [pc, #116]	@ (800cf28 <xTaskCheckForTimeOut+0xc0>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	69ba      	ldr	r2, [r7, #24]
 800cebe:	1ad3      	subs	r3, r2, r3
 800cec0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceca:	d102      	bne.n	800ced2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cecc:	2300      	movs	r3, #0
 800cece:	61fb      	str	r3, [r7, #28]
 800ced0:	e023      	b.n	800cf1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	4b15      	ldr	r3, [pc, #84]	@ (800cf2c <xTaskCheckForTimeOut+0xc4>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d007      	beq.n	800ceee <xTaskCheckForTimeOut+0x86>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	69ba      	ldr	r2, [r7, #24]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d302      	bcc.n	800ceee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cee8:	2301      	movs	r3, #1
 800ceea:	61fb      	str	r3, [r7, #28]
 800ceec:	e015      	b.n	800cf1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	697a      	ldr	r2, [r7, #20]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d20b      	bcs.n	800cf10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	1ad2      	subs	r2, r2, r3
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f7ff ff99 	bl	800ce3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	61fb      	str	r3, [r7, #28]
 800cf0e:	e004      	b.n	800cf1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	2200      	movs	r2, #0
 800cf14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cf16:	2301      	movs	r3, #1
 800cf18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cf1a:	f000 ff97 	bl	800de4c <vPortExitCritical>

	return xReturn;
 800cf1e:	69fb      	ldr	r3, [r7, #28]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3720      	adds	r7, #32
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	200016a0 	.word	0x200016a0
 800cf2c:	200016b4 	.word	0x200016b4

0800cf30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cf30:	b480      	push	{r7}
 800cf32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cf34:	4b03      	ldr	r3, [pc, #12]	@ (800cf44 <vTaskMissedYield+0x14>)
 800cf36:	2201      	movs	r2, #1
 800cf38:	601a      	str	r2, [r3, #0]
}
 800cf3a:	bf00      	nop
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr
 800cf44:	200016b0 	.word	0x200016b0

0800cf48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cf50:	f000 f852 	bl	800cff8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cf54:	4b06      	ldr	r3, [pc, #24]	@ (800cf70 <prvIdleTask+0x28>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d9f9      	bls.n	800cf50 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cf5c:	4b05      	ldr	r3, [pc, #20]	@ (800cf74 <prvIdleTask+0x2c>)
 800cf5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf62:	601a      	str	r2, [r3, #0]
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cf6c:	e7f0      	b.n	800cf50 <prvIdleTask+0x8>
 800cf6e:	bf00      	nop
 800cf70:	200011cc 	.word	0x200011cc
 800cf74:	e000ed04 	.word	0xe000ed04

0800cf78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf7e:	2300      	movs	r3, #0
 800cf80:	607b      	str	r3, [r7, #4]
 800cf82:	e00c      	b.n	800cf9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	4613      	mov	r3, r2
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	4413      	add	r3, r2
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	4a12      	ldr	r2, [pc, #72]	@ (800cfd8 <prvInitialiseTaskLists+0x60>)
 800cf90:	4413      	add	r3, r2
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fe f8ec 	bl	800b170 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	607b      	str	r3, [r7, #4]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2b37      	cmp	r3, #55	@ 0x37
 800cfa2:	d9ef      	bls.n	800cf84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cfa4:	480d      	ldr	r0, [pc, #52]	@ (800cfdc <prvInitialiseTaskLists+0x64>)
 800cfa6:	f7fe f8e3 	bl	800b170 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cfaa:	480d      	ldr	r0, [pc, #52]	@ (800cfe0 <prvInitialiseTaskLists+0x68>)
 800cfac:	f7fe f8e0 	bl	800b170 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cfb0:	480c      	ldr	r0, [pc, #48]	@ (800cfe4 <prvInitialiseTaskLists+0x6c>)
 800cfb2:	f7fe f8dd 	bl	800b170 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cfb6:	480c      	ldr	r0, [pc, #48]	@ (800cfe8 <prvInitialiseTaskLists+0x70>)
 800cfb8:	f7fe f8da 	bl	800b170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cfbc:	480b      	ldr	r0, [pc, #44]	@ (800cfec <prvInitialiseTaskLists+0x74>)
 800cfbe:	f7fe f8d7 	bl	800b170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cfc2:	4b0b      	ldr	r3, [pc, #44]	@ (800cff0 <prvInitialiseTaskLists+0x78>)
 800cfc4:	4a05      	ldr	r2, [pc, #20]	@ (800cfdc <prvInitialiseTaskLists+0x64>)
 800cfc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cfc8:	4b0a      	ldr	r3, [pc, #40]	@ (800cff4 <prvInitialiseTaskLists+0x7c>)
 800cfca:	4a05      	ldr	r2, [pc, #20]	@ (800cfe0 <prvInitialiseTaskLists+0x68>)
 800cfcc:	601a      	str	r2, [r3, #0]
}
 800cfce:	bf00      	nop
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	200011cc 	.word	0x200011cc
 800cfdc:	2000162c 	.word	0x2000162c
 800cfe0:	20001640 	.word	0x20001640
 800cfe4:	2000165c 	.word	0x2000165c
 800cfe8:	20001670 	.word	0x20001670
 800cfec:	20001688 	.word	0x20001688
 800cff0:	20001654 	.word	0x20001654
 800cff4:	20001658 	.word	0x20001658

0800cff8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
	{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cffe:	e019      	b.n	800d034 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d000:	f000 fef2 	bl	800dde8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d004:	4b10      	ldr	r3, [pc, #64]	@ (800d048 <prvCheckTasksWaitingTermination+0x50>)
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	3304      	adds	r3, #4
 800d010:	4618      	mov	r0, r3
 800d012:	f7fe f937 	bl	800b284 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d016:	4b0d      	ldr	r3, [pc, #52]	@ (800d04c <prvCheckTasksWaitingTermination+0x54>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	3b01      	subs	r3, #1
 800d01c:	4a0b      	ldr	r2, [pc, #44]	@ (800d04c <prvCheckTasksWaitingTermination+0x54>)
 800d01e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d020:	4b0b      	ldr	r3, [pc, #44]	@ (800d050 <prvCheckTasksWaitingTermination+0x58>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	3b01      	subs	r3, #1
 800d026:	4a0a      	ldr	r2, [pc, #40]	@ (800d050 <prvCheckTasksWaitingTermination+0x58>)
 800d028:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d02a:	f000 ff0f 	bl	800de4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 f810 	bl	800d054 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d034:	4b06      	ldr	r3, [pc, #24]	@ (800d050 <prvCheckTasksWaitingTermination+0x58>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1e1      	bne.n	800d000 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d03c:	bf00      	nop
 800d03e:	bf00      	nop
 800d040:	3708      	adds	r7, #8
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	20001670 	.word	0x20001670
 800d04c:	2000169c 	.word	0x2000169c
 800d050:	20001684 	.word	0x20001684

0800d054 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d062:	2b00      	cmp	r3, #0
 800d064:	d108      	bne.n	800d078 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d06a:	4618      	mov	r0, r3
 800d06c:	f001 f8ac 	bl	800e1c8 <vPortFree>
				vPortFree( pxTCB );
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f001 f8a9 	bl	800e1c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d076:	e019      	b.n	800d0ac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d103      	bne.n	800d08a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f001 f8a0 	bl	800e1c8 <vPortFree>
	}
 800d088:	e010      	b.n	800d0ac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d090:	2b02      	cmp	r3, #2
 800d092:	d00b      	beq.n	800d0ac <prvDeleteTCB+0x58>
	__asm volatile
 800d094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d098:	f383 8811 	msr	BASEPRI, r3
 800d09c:	f3bf 8f6f 	isb	sy
 800d0a0:	f3bf 8f4f 	dsb	sy
 800d0a4:	60fb      	str	r3, [r7, #12]
}
 800d0a6:	bf00      	nop
 800d0a8:	bf00      	nop
 800d0aa:	e7fd      	b.n	800d0a8 <prvDeleteTCB+0x54>
	}
 800d0ac:	bf00      	nop
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d0ec <prvResetNextTaskUnblockTime+0x38>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d104      	bne.n	800d0ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d0c4:	4b0a      	ldr	r3, [pc, #40]	@ (800d0f0 <prvResetNextTaskUnblockTime+0x3c>)
 800d0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d0cc:	e008      	b.n	800d0e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0ce:	4b07      	ldr	r3, [pc, #28]	@ (800d0ec <prvResetNextTaskUnblockTime+0x38>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	68db      	ldr	r3, [r3, #12]
 800d0d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	4a04      	ldr	r2, [pc, #16]	@ (800d0f0 <prvResetNextTaskUnblockTime+0x3c>)
 800d0de:	6013      	str	r3, [r2, #0]
}
 800d0e0:	bf00      	nop
 800d0e2:	370c      	adds	r7, #12
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr
 800d0ec:	20001654 	.word	0x20001654
 800d0f0:	200016bc 	.word	0x200016bc

0800d0f4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d0fa:	4b05      	ldr	r3, [pc, #20]	@ (800d110 <xTaskGetCurrentTaskHandle+0x1c>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d100:	687b      	ldr	r3, [r7, #4]
	}
 800d102:	4618      	mov	r0, r3
 800d104:	370c      	adds	r7, #12
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	200011c8 	.word	0x200011c8

0800d114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d11a:	4b0b      	ldr	r3, [pc, #44]	@ (800d148 <xTaskGetSchedulerState+0x34>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d102      	bne.n	800d128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d122:	2301      	movs	r3, #1
 800d124:	607b      	str	r3, [r7, #4]
 800d126:	e008      	b.n	800d13a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d128:	4b08      	ldr	r3, [pc, #32]	@ (800d14c <xTaskGetSchedulerState+0x38>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d102      	bne.n	800d136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d130:	2302      	movs	r3, #2
 800d132:	607b      	str	r3, [r7, #4]
 800d134:	e001      	b.n	800d13a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d136:	2300      	movs	r3, #0
 800d138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d13a:	687b      	ldr	r3, [r7, #4]
	}
 800d13c:	4618      	mov	r0, r3
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr
 800d148:	200016a8 	.word	0x200016a8
 800d14c:	200016c4 	.word	0x200016c4

0800d150 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d15c:	2300      	movs	r3, #0
 800d15e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d051      	beq.n	800d20a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d16a:	4b2a      	ldr	r3, [pc, #168]	@ (800d214 <xTaskPriorityInherit+0xc4>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d170:	429a      	cmp	r2, r3
 800d172:	d241      	bcs.n	800d1f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	db06      	blt.n	800d18a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d17c:	4b25      	ldr	r3, [pc, #148]	@ (800d214 <xTaskPriorityInherit+0xc4>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d182:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	6959      	ldr	r1, [r3, #20]
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d192:	4613      	mov	r3, r2
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	4413      	add	r3, r2
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	4a1f      	ldr	r2, [pc, #124]	@ (800d218 <xTaskPriorityInherit+0xc8>)
 800d19c:	4413      	add	r3, r2
 800d19e:	4299      	cmp	r1, r3
 800d1a0:	d122      	bne.n	800d1e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	3304      	adds	r3, #4
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7fe f86c 	bl	800b284 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d1ac:	4b19      	ldr	r3, [pc, #100]	@ (800d214 <xTaskPriorityInherit+0xc4>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1ba:	4b18      	ldr	r3, [pc, #96]	@ (800d21c <xTaskPriorityInherit+0xcc>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d903      	bls.n	800d1ca <xTaskPriorityInherit+0x7a>
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1c6:	4a15      	ldr	r2, [pc, #84]	@ (800d21c <xTaskPriorityInherit+0xcc>)
 800d1c8:	6013      	str	r3, [r2, #0]
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	4413      	add	r3, r2
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	4a10      	ldr	r2, [pc, #64]	@ (800d218 <xTaskPriorityInherit+0xc8>)
 800d1d8:	441a      	add	r2, r3
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	3304      	adds	r3, #4
 800d1de:	4619      	mov	r1, r3
 800d1e0:	4610      	mov	r0, r2
 800d1e2:	f7fd fff2 	bl	800b1ca <vListInsertEnd>
 800d1e6:	e004      	b.n	800d1f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d1e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d214 <xTaskPriorityInherit+0xc4>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	60fb      	str	r3, [r7, #12]
 800d1f6:	e008      	b.n	800d20a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d1fc:	4b05      	ldr	r3, [pc, #20]	@ (800d214 <xTaskPriorityInherit+0xc4>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d202:	429a      	cmp	r2, r3
 800d204:	d201      	bcs.n	800d20a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d206:	2301      	movs	r3, #1
 800d208:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d20a:	68fb      	ldr	r3, [r7, #12]
	}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3710      	adds	r7, #16
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	200011c8 	.word	0x200011c8
 800d218:	200011cc 	.word	0x200011cc
 800d21c:	200016a4 	.word	0x200016a4

0800d220 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d22c:	2300      	movs	r3, #0
 800d22e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d058      	beq.n	800d2e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d236:	4b2f      	ldr	r3, [pc, #188]	@ (800d2f4 <xTaskPriorityDisinherit+0xd4>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	693a      	ldr	r2, [r7, #16]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d00b      	beq.n	800d258 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	60fb      	str	r3, [r7, #12]
}
 800d252:	bf00      	nop
 800d254:	bf00      	nop
 800d256:	e7fd      	b.n	800d254 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d10b      	bne.n	800d278 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d264:	f383 8811 	msr	BASEPRI, r3
 800d268:	f3bf 8f6f 	isb	sy
 800d26c:	f3bf 8f4f 	dsb	sy
 800d270:	60bb      	str	r3, [r7, #8]
}
 800d272:	bf00      	nop
 800d274:	bf00      	nop
 800d276:	e7fd      	b.n	800d274 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d27c:	1e5a      	subs	r2, r3, #1
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d02c      	beq.n	800d2e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d292:	2b00      	cmp	r3, #0
 800d294:	d128      	bne.n	800d2e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	3304      	adds	r3, #4
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fd fff2 	bl	800b284 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2b8:	4b0f      	ldr	r3, [pc, #60]	@ (800d2f8 <xTaskPriorityDisinherit+0xd8>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d903      	bls.n	800d2c8 <xTaskPriorityDisinherit+0xa8>
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2c4:	4a0c      	ldr	r2, [pc, #48]	@ (800d2f8 <xTaskPriorityDisinherit+0xd8>)
 800d2c6:	6013      	str	r3, [r2, #0]
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	4413      	add	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4a09      	ldr	r2, [pc, #36]	@ (800d2fc <xTaskPriorityDisinherit+0xdc>)
 800d2d6:	441a      	add	r2, r3
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	3304      	adds	r3, #4
 800d2dc:	4619      	mov	r1, r3
 800d2de:	4610      	mov	r0, r2
 800d2e0:	f7fd ff73 	bl	800b1ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2e8:	697b      	ldr	r3, [r7, #20]
	}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3718      	adds	r7, #24
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	200011c8 	.word	0x200011c8
 800d2f8:	200016a4 	.word	0x200016a4
 800d2fc:	200011cc 	.word	0x200011cc

0800d300 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d300:	b580      	push	{r7, lr}
 800d302:	b088      	sub	sp, #32
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d30e:	2301      	movs	r3, #1
 800d310:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d06c      	beq.n	800d3f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d10b      	bne.n	800d338 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d324:	f383 8811 	msr	BASEPRI, r3
 800d328:	f3bf 8f6f 	isb	sy
 800d32c:	f3bf 8f4f 	dsb	sy
 800d330:	60fb      	str	r3, [r7, #12]
}
 800d332:	bf00      	nop
 800d334:	bf00      	nop
 800d336:	e7fd      	b.n	800d334 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d33c:	683a      	ldr	r2, [r7, #0]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d902      	bls.n	800d348 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	61fb      	str	r3, [r7, #28]
 800d346:	e002      	b.n	800d34e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d34c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d352:	69fa      	ldr	r2, [r7, #28]
 800d354:	429a      	cmp	r2, r3
 800d356:	d04c      	beq.n	800d3f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d35c:	697a      	ldr	r2, [r7, #20]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d147      	bne.n	800d3f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d362:	4b26      	ldr	r3, [pc, #152]	@ (800d3fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	69ba      	ldr	r2, [r7, #24]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d10b      	bne.n	800d384 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800d36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d370:	f383 8811 	msr	BASEPRI, r3
 800d374:	f3bf 8f6f 	isb	sy
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	60bb      	str	r3, [r7, #8]
}
 800d37e:	bf00      	nop
 800d380:	bf00      	nop
 800d382:	e7fd      	b.n	800d380 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d388:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	69fa      	ldr	r2, [r7, #28]
 800d38e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d390:	69bb      	ldr	r3, [r7, #24]
 800d392:	699b      	ldr	r3, [r3, #24]
 800d394:	2b00      	cmp	r3, #0
 800d396:	db04      	blt.n	800d3a2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d39e:	69bb      	ldr	r3, [r7, #24]
 800d3a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	6959      	ldr	r1, [r3, #20]
 800d3a6:	693a      	ldr	r2, [r7, #16]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	4413      	add	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	4a13      	ldr	r2, [pc, #76]	@ (800d400 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d3b2:	4413      	add	r3, r2
 800d3b4:	4299      	cmp	r1, r3
 800d3b6:	d11c      	bne.n	800d3f2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	3304      	adds	r3, #4
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7fd ff61 	bl	800b284 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3c6:	4b0f      	ldr	r3, [pc, #60]	@ (800d404 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d903      	bls.n	800d3d6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3d2:	4a0c      	ldr	r2, [pc, #48]	@ (800d404 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d3d4:	6013      	str	r3, [r2, #0]
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3da:	4613      	mov	r3, r2
 800d3dc:	009b      	lsls	r3, r3, #2
 800d3de:	4413      	add	r3, r2
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	4a07      	ldr	r2, [pc, #28]	@ (800d400 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d3e4:	441a      	add	r2, r3
 800d3e6:	69bb      	ldr	r3, [r7, #24]
 800d3e8:	3304      	adds	r3, #4
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	f7fd feec 	bl	800b1ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d3f2:	bf00      	nop
 800d3f4:	3720      	adds	r7, #32
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	200011c8 	.word	0x200011c8
 800d400:	200011cc 	.word	0x200011cc
 800d404:	200016a4 	.word	0x200016a4

0800d408 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d408:	b480      	push	{r7}
 800d40a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d40c:	4b07      	ldr	r3, [pc, #28]	@ (800d42c <pvTaskIncrementMutexHeldCount+0x24>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d004      	beq.n	800d41e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d414:	4b05      	ldr	r3, [pc, #20]	@ (800d42c <pvTaskIncrementMutexHeldCount+0x24>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d41a:	3201      	adds	r2, #1
 800d41c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800d41e:	4b03      	ldr	r3, [pc, #12]	@ (800d42c <pvTaskIncrementMutexHeldCount+0x24>)
 800d420:	681b      	ldr	r3, [r3, #0]
	}
 800d422:	4618      	mov	r0, r3
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr
 800d42c:	200011c8 	.word	0x200011c8

0800d430 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d43a:	4b21      	ldr	r3, [pc, #132]	@ (800d4c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d440:	4b20      	ldr	r3, [pc, #128]	@ (800d4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3304      	adds	r3, #4
 800d446:	4618      	mov	r0, r3
 800d448:	f7fd ff1c 	bl	800b284 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d452:	d10a      	bne.n	800d46a <prvAddCurrentTaskToDelayedList+0x3a>
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d007      	beq.n	800d46a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d45a:	4b1a      	ldr	r3, [pc, #104]	@ (800d4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3304      	adds	r3, #4
 800d460:	4619      	mov	r1, r3
 800d462:	4819      	ldr	r0, [pc, #100]	@ (800d4c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d464:	f7fd feb1 	bl	800b1ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d468:	e026      	b.n	800d4b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	4413      	add	r3, r2
 800d470:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d472:	4b14      	ldr	r3, [pc, #80]	@ (800d4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d209      	bcs.n	800d496 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d482:	4b12      	ldr	r3, [pc, #72]	@ (800d4cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	4b0f      	ldr	r3, [pc, #60]	@ (800d4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	3304      	adds	r3, #4
 800d48c:	4619      	mov	r1, r3
 800d48e:	4610      	mov	r0, r2
 800d490:	f7fd febf 	bl	800b212 <vListInsert>
}
 800d494:	e010      	b.n	800d4b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d496:	4b0e      	ldr	r3, [pc, #56]	@ (800d4d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	4b0a      	ldr	r3, [pc, #40]	@ (800d4c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	3304      	adds	r3, #4
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	4610      	mov	r0, r2
 800d4a4:	f7fd feb5 	bl	800b212 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d4a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d4d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	68ba      	ldr	r2, [r7, #8]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d202      	bcs.n	800d4b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d4b2:	4a08      	ldr	r2, [pc, #32]	@ (800d4d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	6013      	str	r3, [r2, #0]
}
 800d4b8:	bf00      	nop
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	200016a0 	.word	0x200016a0
 800d4c4:	200011c8 	.word	0x200011c8
 800d4c8:	20001688 	.word	0x20001688
 800d4cc:	20001658 	.word	0x20001658
 800d4d0:	20001654 	.word	0x20001654
 800d4d4:	200016bc 	.word	0x200016bc

0800d4d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b08a      	sub	sp, #40	@ 0x28
 800d4dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d4e2:	f000 fb13 	bl	800db0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d4e6:	4b1d      	ldr	r3, [pc, #116]	@ (800d55c <xTimerCreateTimerTask+0x84>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d021      	beq.n	800d532 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d4f6:	1d3a      	adds	r2, r7, #4
 800d4f8:	f107 0108 	add.w	r1, r7, #8
 800d4fc:	f107 030c 	add.w	r3, r7, #12
 800d500:	4618      	mov	r0, r3
 800d502:	f7fd fe1b 	bl	800b13c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d506:	6879      	ldr	r1, [r7, #4]
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	9202      	str	r2, [sp, #8]
 800d50e:	9301      	str	r3, [sp, #4]
 800d510:	2302      	movs	r3, #2
 800d512:	9300      	str	r3, [sp, #0]
 800d514:	2300      	movs	r3, #0
 800d516:	460a      	mov	r2, r1
 800d518:	4911      	ldr	r1, [pc, #68]	@ (800d560 <xTimerCreateTimerTask+0x88>)
 800d51a:	4812      	ldr	r0, [pc, #72]	@ (800d564 <xTimerCreateTimerTask+0x8c>)
 800d51c:	f7fe ffc0 	bl	800c4a0 <xTaskCreateStatic>
 800d520:	4603      	mov	r3, r0
 800d522:	4a11      	ldr	r2, [pc, #68]	@ (800d568 <xTimerCreateTimerTask+0x90>)
 800d524:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d526:	4b10      	ldr	r3, [pc, #64]	@ (800d568 <xTimerCreateTimerTask+0x90>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d001      	beq.n	800d532 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d52e:	2301      	movs	r3, #1
 800d530:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10b      	bne.n	800d550 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d53c:	f383 8811 	msr	BASEPRI, r3
 800d540:	f3bf 8f6f 	isb	sy
 800d544:	f3bf 8f4f 	dsb	sy
 800d548:	613b      	str	r3, [r7, #16]
}
 800d54a:	bf00      	nop
 800d54c:	bf00      	nop
 800d54e:	e7fd      	b.n	800d54c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d550:	697b      	ldr	r3, [r7, #20]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3718      	adds	r7, #24
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	200016f8 	.word	0x200016f8
 800d560:	08014788 	.word	0x08014788
 800d564:	0800d6a5 	.word	0x0800d6a5
 800d568:	200016fc 	.word	0x200016fc

0800d56c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b08a      	sub	sp, #40	@ 0x28
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
 800d578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d57a:	2300      	movs	r3, #0
 800d57c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10b      	bne.n	800d59c <xTimerGenericCommand+0x30>
	__asm volatile
 800d584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	623b      	str	r3, [r7, #32]
}
 800d596:	bf00      	nop
 800d598:	bf00      	nop
 800d59a:	e7fd      	b.n	800d598 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d59c:	4b19      	ldr	r3, [pc, #100]	@ (800d604 <xTimerGenericCommand+0x98>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d02a      	beq.n	800d5fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	2b05      	cmp	r3, #5
 800d5b4:	dc18      	bgt.n	800d5e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d5b6:	f7ff fdad 	bl	800d114 <xTaskGetSchedulerState>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	d109      	bne.n	800d5d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d5c0:	4b10      	ldr	r3, [pc, #64]	@ (800d604 <xTimerGenericCommand+0x98>)
 800d5c2:	6818      	ldr	r0, [r3, #0]
 800d5c4:	f107 0110 	add.w	r1, r7, #16
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5cc:	f7fe f8f0 	bl	800b7b0 <xQueueGenericSend>
 800d5d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800d5d2:	e012      	b.n	800d5fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d5d4:	4b0b      	ldr	r3, [pc, #44]	@ (800d604 <xTimerGenericCommand+0x98>)
 800d5d6:	6818      	ldr	r0, [r3, #0]
 800d5d8:	f107 0110 	add.w	r1, r7, #16
 800d5dc:	2300      	movs	r3, #0
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f7fe f8e6 	bl	800b7b0 <xQueueGenericSend>
 800d5e4:	6278      	str	r0, [r7, #36]	@ 0x24
 800d5e6:	e008      	b.n	800d5fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d5e8:	4b06      	ldr	r3, [pc, #24]	@ (800d604 <xTimerGenericCommand+0x98>)
 800d5ea:	6818      	ldr	r0, [r3, #0]
 800d5ec:	f107 0110 	add.w	r1, r7, #16
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	683a      	ldr	r2, [r7, #0]
 800d5f4:	f7fe f9de 	bl	800b9b4 <xQueueGenericSendFromISR>
 800d5f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3728      	adds	r7, #40	@ 0x28
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	200016f8 	.word	0x200016f8

0800d608 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b088      	sub	sp, #32
 800d60c:	af02      	add	r7, sp, #8
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d612:	4b23      	ldr	r3, [pc, #140]	@ (800d6a0 <prvProcessExpiredTimer+0x98>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	3304      	adds	r3, #4
 800d620:	4618      	mov	r0, r3
 800d622:	f7fd fe2f 	bl	800b284 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d62c:	f003 0304 	and.w	r3, r3, #4
 800d630:	2b00      	cmp	r3, #0
 800d632:	d023      	beq.n	800d67c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	699a      	ldr	r2, [r3, #24]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	18d1      	adds	r1, r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	683a      	ldr	r2, [r7, #0]
 800d640:	6978      	ldr	r0, [r7, #20]
 800d642:	f000 f8d5 	bl	800d7f0 <prvInsertTimerInActiveList>
 800d646:	4603      	mov	r3, r0
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d020      	beq.n	800d68e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d64c:	2300      	movs	r3, #0
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	2300      	movs	r3, #0
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	2100      	movs	r1, #0
 800d656:	6978      	ldr	r0, [r7, #20]
 800d658:	f7ff ff88 	bl	800d56c <xTimerGenericCommand>
 800d65c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d114      	bne.n	800d68e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d668:	f383 8811 	msr	BASEPRI, r3
 800d66c:	f3bf 8f6f 	isb	sy
 800d670:	f3bf 8f4f 	dsb	sy
 800d674:	60fb      	str	r3, [r7, #12]
}
 800d676:	bf00      	nop
 800d678:	bf00      	nop
 800d67a:	e7fd      	b.n	800d678 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d682:	f023 0301 	bic.w	r3, r3, #1
 800d686:	b2da      	uxtb	r2, r3
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	6a1b      	ldr	r3, [r3, #32]
 800d692:	6978      	ldr	r0, [r7, #20]
 800d694:	4798      	blx	r3
}
 800d696:	bf00      	nop
 800d698:	3718      	adds	r7, #24
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	200016f0 	.word	0x200016f0

0800d6a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b084      	sub	sp, #16
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d6ac:	f107 0308 	add.w	r3, r7, #8
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f000 f859 	bl	800d768 <prvGetNextExpireTime>
 800d6b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	68f8      	ldr	r0, [r7, #12]
 800d6be:	f000 f805 	bl	800d6cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d6c2:	f000 f8d7 	bl	800d874 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d6c6:	bf00      	nop
 800d6c8:	e7f0      	b.n	800d6ac <prvTimerTask+0x8>
	...

0800d6cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d6d6:	f7ff f927 	bl	800c928 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d6da:	f107 0308 	add.w	r3, r7, #8
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f000 f866 	bl	800d7b0 <prvSampleTimeNow>
 800d6e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d130      	bne.n	800d74e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d10a      	bne.n	800d708 <prvProcessTimerOrBlockTask+0x3c>
 800d6f2:	687a      	ldr	r2, [r7, #4]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d806      	bhi.n	800d708 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d6fa:	f7ff f923 	bl	800c944 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d6fe:	68f9      	ldr	r1, [r7, #12]
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7ff ff81 	bl	800d608 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d706:	e024      	b.n	800d752 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d008      	beq.n	800d720 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d70e:	4b13      	ldr	r3, [pc, #76]	@ (800d75c <prvProcessTimerOrBlockTask+0x90>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d101      	bne.n	800d71c <prvProcessTimerOrBlockTask+0x50>
 800d718:	2301      	movs	r3, #1
 800d71a:	e000      	b.n	800d71e <prvProcessTimerOrBlockTask+0x52>
 800d71c:	2300      	movs	r3, #0
 800d71e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d720:	4b0f      	ldr	r3, [pc, #60]	@ (800d760 <prvProcessTimerOrBlockTask+0x94>)
 800d722:	6818      	ldr	r0, [r3, #0]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	1ad3      	subs	r3, r2, r3
 800d72a:	683a      	ldr	r2, [r7, #0]
 800d72c:	4619      	mov	r1, r3
 800d72e:	f7fe fe83 	bl	800c438 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d732:	f7ff f907 	bl	800c944 <xTaskResumeAll>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d10a      	bne.n	800d752 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d73c:	4b09      	ldr	r3, [pc, #36]	@ (800d764 <prvProcessTimerOrBlockTask+0x98>)
 800d73e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d742:	601a      	str	r2, [r3, #0]
 800d744:	f3bf 8f4f 	dsb	sy
 800d748:	f3bf 8f6f 	isb	sy
}
 800d74c:	e001      	b.n	800d752 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d74e:	f7ff f8f9 	bl	800c944 <xTaskResumeAll>
}
 800d752:	bf00      	nop
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	200016f4 	.word	0x200016f4
 800d760:	200016f8 	.word	0x200016f8
 800d764:	e000ed04 	.word	0xe000ed04

0800d768 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d768:	b480      	push	{r7}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d770:	4b0e      	ldr	r3, [pc, #56]	@ (800d7ac <prvGetNextExpireTime+0x44>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d101      	bne.n	800d77e <prvGetNextExpireTime+0x16>
 800d77a:	2201      	movs	r2, #1
 800d77c:	e000      	b.n	800d780 <prvGetNextExpireTime+0x18>
 800d77e:	2200      	movs	r2, #0
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d105      	bne.n	800d798 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d78c:	4b07      	ldr	r3, [pc, #28]	@ (800d7ac <prvGetNextExpireTime+0x44>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	60fb      	str	r3, [r7, #12]
 800d796:	e001      	b.n	800d79c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d798:	2300      	movs	r3, #0
 800d79a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d79c:	68fb      	ldr	r3, [r7, #12]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3714      	adds	r7, #20
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	200016f0 	.word	0x200016f0

0800d7b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d7b8:	f7ff f962 	bl	800ca80 <xTaskGetTickCount>
 800d7bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d7be:	4b0b      	ldr	r3, [pc, #44]	@ (800d7ec <prvSampleTimeNow+0x3c>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	68fa      	ldr	r2, [r7, #12]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d205      	bcs.n	800d7d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d7c8:	f000 f93a 	bl	800da40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	601a      	str	r2, [r3, #0]
 800d7d2:	e002      	b.n	800d7da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d7da:	4a04      	ldr	r2, [pc, #16]	@ (800d7ec <prvSampleTimeNow+0x3c>)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	20001700 	.word	0x20001700

0800d7f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	607a      	str	r2, [r7, #4]
 800d7fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d7fe:	2300      	movs	r3, #0
 800d800:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	68fa      	ldr	r2, [r7, #12]
 800d80c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	429a      	cmp	r2, r3
 800d814:	d812      	bhi.n	800d83c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	1ad2      	subs	r2, r2, r3
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	699b      	ldr	r3, [r3, #24]
 800d820:	429a      	cmp	r2, r3
 800d822:	d302      	bcc.n	800d82a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d824:	2301      	movs	r3, #1
 800d826:	617b      	str	r3, [r7, #20]
 800d828:	e01b      	b.n	800d862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d82a:	4b10      	ldr	r3, [pc, #64]	@ (800d86c <prvInsertTimerInActiveList+0x7c>)
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	3304      	adds	r3, #4
 800d832:	4619      	mov	r1, r3
 800d834:	4610      	mov	r0, r2
 800d836:	f7fd fcec 	bl	800b212 <vListInsert>
 800d83a:	e012      	b.n	800d862 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	429a      	cmp	r2, r3
 800d842:	d206      	bcs.n	800d852 <prvInsertTimerInActiveList+0x62>
 800d844:	68ba      	ldr	r2, [r7, #8]
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d302      	bcc.n	800d852 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d84c:	2301      	movs	r3, #1
 800d84e:	617b      	str	r3, [r7, #20]
 800d850:	e007      	b.n	800d862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d852:	4b07      	ldr	r3, [pc, #28]	@ (800d870 <prvInsertTimerInActiveList+0x80>)
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	3304      	adds	r3, #4
 800d85a:	4619      	mov	r1, r3
 800d85c:	4610      	mov	r0, r2
 800d85e:	f7fd fcd8 	bl	800b212 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d862:	697b      	ldr	r3, [r7, #20]
}
 800d864:	4618      	mov	r0, r3
 800d866:	3718      	adds	r7, #24
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	200016f4 	.word	0x200016f4
 800d870:	200016f0 	.word	0x200016f0

0800d874 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b08e      	sub	sp, #56	@ 0x38
 800d878:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d87a:	e0ce      	b.n	800da1a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	da19      	bge.n	800d8b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d882:	1d3b      	adds	r3, r7, #4
 800d884:	3304      	adds	r3, #4
 800d886:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d10b      	bne.n	800d8a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	61fb      	str	r3, [r7, #28]
}
 800d8a0:	bf00      	nop
 800d8a2:	bf00      	nop
 800d8a4:	e7fd      	b.n	800d8a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8ac:	6850      	ldr	r0, [r2, #4]
 800d8ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8b0:	6892      	ldr	r2, [r2, #8]
 800d8b2:	4611      	mov	r1, r2
 800d8b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	f2c0 80ae 	blt.w	800da1a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c4:	695b      	ldr	r3, [r3, #20]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d004      	beq.n	800d8d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8cc:	3304      	adds	r3, #4
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7fd fcd8 	bl	800b284 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d8d4:	463b      	mov	r3, r7
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7ff ff6a 	bl	800d7b0 <prvSampleTimeNow>
 800d8dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2b09      	cmp	r3, #9
 800d8e2:	f200 8097 	bhi.w	800da14 <prvProcessReceivedCommands+0x1a0>
 800d8e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d8ec <prvProcessReceivedCommands+0x78>)
 800d8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ec:	0800d915 	.word	0x0800d915
 800d8f0:	0800d915 	.word	0x0800d915
 800d8f4:	0800d915 	.word	0x0800d915
 800d8f8:	0800d98b 	.word	0x0800d98b
 800d8fc:	0800d99f 	.word	0x0800d99f
 800d900:	0800d9eb 	.word	0x0800d9eb
 800d904:	0800d915 	.word	0x0800d915
 800d908:	0800d915 	.word	0x0800d915
 800d90c:	0800d98b 	.word	0x0800d98b
 800d910:	0800d99f 	.word	0x0800d99f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d916:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d91a:	f043 0301 	orr.w	r3, r3, #1
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d922:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d926:	68ba      	ldr	r2, [r7, #8]
 800d928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d92a:	699b      	ldr	r3, [r3, #24]
 800d92c:	18d1      	adds	r1, r2, r3
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d934:	f7ff ff5c 	bl	800d7f0 <prvInsertTimerInActiveList>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d06c      	beq.n	800da18 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d940:	6a1b      	ldr	r3, [r3, #32]
 800d942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d944:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d94c:	f003 0304 	and.w	r3, r3, #4
 800d950:	2b00      	cmp	r3, #0
 800d952:	d061      	beq.n	800da18 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d954:	68ba      	ldr	r2, [r7, #8]
 800d956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d958:	699b      	ldr	r3, [r3, #24]
 800d95a:	441a      	add	r2, r3
 800d95c:	2300      	movs	r3, #0
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	2300      	movs	r3, #0
 800d962:	2100      	movs	r1, #0
 800d964:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d966:	f7ff fe01 	bl	800d56c <xTimerGenericCommand>
 800d96a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d96c:	6a3b      	ldr	r3, [r7, #32]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d152      	bne.n	800da18 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	61bb      	str	r3, [r7, #24]
}
 800d984:	bf00      	nop
 800d986:	bf00      	nop
 800d988:	e7fd      	b.n	800d986 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d98c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d990:	f023 0301 	bic.w	r3, r3, #1
 800d994:	b2da      	uxtb	r2, r3
 800d996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d998:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d99c:	e03d      	b.n	800da1a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d9a4:	f043 0301 	orr.w	r3, r3, #1
 800d9a8:	b2da      	uxtb	r2, r3
 800d9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b8:	699b      	ldr	r3, [r3, #24]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d10b      	bne.n	800d9d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c2:	f383 8811 	msr	BASEPRI, r3
 800d9c6:	f3bf 8f6f 	isb	sy
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	617b      	str	r3, [r7, #20]
}
 800d9d0:	bf00      	nop
 800d9d2:	bf00      	nop
 800d9d4:	e7fd      	b.n	800d9d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d8:	699a      	ldr	r2, [r3, #24]
 800d9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9dc:	18d1      	adds	r1, r2, r3
 800d9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d9e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9e4:	f7ff ff04 	bl	800d7f0 <prvInsertTimerInActiveList>
					break;
 800d9e8:	e017      	b.n	800da1a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d9f0:	f003 0302 	and.w	r3, r3, #2
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d103      	bne.n	800da00 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d9f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9fa:	f000 fbe5 	bl	800e1c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d9fe:	e00c      	b.n	800da1a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da06:	f023 0301 	bic.w	r3, r3, #1
 800da0a:	b2da      	uxtb	r2, r3
 800da0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800da12:	e002      	b.n	800da1a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800da14:	bf00      	nop
 800da16:	e000      	b.n	800da1a <prvProcessReceivedCommands+0x1a6>
					break;
 800da18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da1a:	4b08      	ldr	r3, [pc, #32]	@ (800da3c <prvProcessReceivedCommands+0x1c8>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	1d39      	adds	r1, r7, #4
 800da20:	2200      	movs	r2, #0
 800da22:	4618      	mov	r0, r3
 800da24:	f7fe f8f4 	bl	800bc10 <xQueueReceive>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f47f af26 	bne.w	800d87c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800da30:	bf00      	nop
 800da32:	bf00      	nop
 800da34:	3730      	adds	r7, #48	@ 0x30
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	200016f8 	.word	0x200016f8

0800da40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b088      	sub	sp, #32
 800da44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da46:	e049      	b.n	800dadc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da48:	4b2e      	ldr	r3, [pc, #184]	@ (800db04 <prvSwitchTimerLists+0xc4>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da52:	4b2c      	ldr	r3, [pc, #176]	@ (800db04 <prvSwitchTimerLists+0xc4>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	3304      	adds	r3, #4
 800da60:	4618      	mov	r0, r3
 800da62:	f7fd fc0f 	bl	800b284 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	6a1b      	ldr	r3, [r3, #32]
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da74:	f003 0304 	and.w	r3, r3, #4
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d02f      	beq.n	800dadc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	699b      	ldr	r3, [r3, #24]
 800da80:	693a      	ldr	r2, [r7, #16]
 800da82:	4413      	add	r3, r2
 800da84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800da86:	68ba      	ldr	r2, [r7, #8]
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d90e      	bls.n	800daac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	68fa      	ldr	r2, [r7, #12]
 800da98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800da9a:	4b1a      	ldr	r3, [pc, #104]	@ (800db04 <prvSwitchTimerLists+0xc4>)
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	3304      	adds	r3, #4
 800daa2:	4619      	mov	r1, r3
 800daa4:	4610      	mov	r0, r2
 800daa6:	f7fd fbb4 	bl	800b212 <vListInsert>
 800daaa:	e017      	b.n	800dadc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800daac:	2300      	movs	r3, #0
 800daae:	9300      	str	r3, [sp, #0]
 800dab0:	2300      	movs	r3, #0
 800dab2:	693a      	ldr	r2, [r7, #16]
 800dab4:	2100      	movs	r1, #0
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f7ff fd58 	bl	800d56c <xTimerGenericCommand>
 800dabc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d10b      	bne.n	800dadc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dac8:	f383 8811 	msr	BASEPRI, r3
 800dacc:	f3bf 8f6f 	isb	sy
 800dad0:	f3bf 8f4f 	dsb	sy
 800dad4:	603b      	str	r3, [r7, #0]
}
 800dad6:	bf00      	nop
 800dad8:	bf00      	nop
 800dada:	e7fd      	b.n	800dad8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dadc:	4b09      	ldr	r3, [pc, #36]	@ (800db04 <prvSwitchTimerLists+0xc4>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d1b0      	bne.n	800da48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dae6:	4b07      	ldr	r3, [pc, #28]	@ (800db04 <prvSwitchTimerLists+0xc4>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800daec:	4b06      	ldr	r3, [pc, #24]	@ (800db08 <prvSwitchTimerLists+0xc8>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a04      	ldr	r2, [pc, #16]	@ (800db04 <prvSwitchTimerLists+0xc4>)
 800daf2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800daf4:	4a04      	ldr	r2, [pc, #16]	@ (800db08 <prvSwitchTimerLists+0xc8>)
 800daf6:	697b      	ldr	r3, [r7, #20]
 800daf8:	6013      	str	r3, [r2, #0]
}
 800dafa:	bf00      	nop
 800dafc:	3718      	adds	r7, #24
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	200016f0 	.word	0x200016f0
 800db08:	200016f4 	.word	0x200016f4

0800db0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800db12:	f000 f969 	bl	800dde8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800db16:	4b15      	ldr	r3, [pc, #84]	@ (800db6c <prvCheckForValidListAndQueue+0x60>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d120      	bne.n	800db60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800db1e:	4814      	ldr	r0, [pc, #80]	@ (800db70 <prvCheckForValidListAndQueue+0x64>)
 800db20:	f7fd fb26 	bl	800b170 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800db24:	4813      	ldr	r0, [pc, #76]	@ (800db74 <prvCheckForValidListAndQueue+0x68>)
 800db26:	f7fd fb23 	bl	800b170 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800db2a:	4b13      	ldr	r3, [pc, #76]	@ (800db78 <prvCheckForValidListAndQueue+0x6c>)
 800db2c:	4a10      	ldr	r2, [pc, #64]	@ (800db70 <prvCheckForValidListAndQueue+0x64>)
 800db2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800db30:	4b12      	ldr	r3, [pc, #72]	@ (800db7c <prvCheckForValidListAndQueue+0x70>)
 800db32:	4a10      	ldr	r2, [pc, #64]	@ (800db74 <prvCheckForValidListAndQueue+0x68>)
 800db34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800db36:	2300      	movs	r3, #0
 800db38:	9300      	str	r3, [sp, #0]
 800db3a:	4b11      	ldr	r3, [pc, #68]	@ (800db80 <prvCheckForValidListAndQueue+0x74>)
 800db3c:	4a11      	ldr	r2, [pc, #68]	@ (800db84 <prvCheckForValidListAndQueue+0x78>)
 800db3e:	2110      	movs	r1, #16
 800db40:	200a      	movs	r0, #10
 800db42:	f7fd fc33 	bl	800b3ac <xQueueGenericCreateStatic>
 800db46:	4603      	mov	r3, r0
 800db48:	4a08      	ldr	r2, [pc, #32]	@ (800db6c <prvCheckForValidListAndQueue+0x60>)
 800db4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800db4c:	4b07      	ldr	r3, [pc, #28]	@ (800db6c <prvCheckForValidListAndQueue+0x60>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d005      	beq.n	800db60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800db54:	4b05      	ldr	r3, [pc, #20]	@ (800db6c <prvCheckForValidListAndQueue+0x60>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	490b      	ldr	r1, [pc, #44]	@ (800db88 <prvCheckForValidListAndQueue+0x7c>)
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7fe fc18 	bl	800c390 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db60:	f000 f974 	bl	800de4c <vPortExitCritical>
}
 800db64:	bf00      	nop
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	200016f8 	.word	0x200016f8
 800db70:	200016c8 	.word	0x200016c8
 800db74:	200016dc 	.word	0x200016dc
 800db78:	200016f0 	.word	0x200016f0
 800db7c:	200016f4 	.word	0x200016f4
 800db80:	200017a4 	.word	0x200017a4
 800db84:	20001704 	.word	0x20001704
 800db88:	08014790 	.word	0x08014790

0800db8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800db8c:	b480      	push	{r7}
 800db8e:	b085      	sub	sp, #20
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	60b9      	str	r1, [r7, #8]
 800db96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	3b04      	subs	r3, #4
 800db9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	3b04      	subs	r3, #4
 800dbaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	f023 0201 	bic.w	r2, r3, #1
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	3b04      	subs	r3, #4
 800dbba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dbbc:	4a0c      	ldr	r2, [pc, #48]	@ (800dbf0 <pxPortInitialiseStack+0x64>)
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	3b14      	subs	r3, #20
 800dbc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	3b04      	subs	r3, #4
 800dbd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f06f 0202 	mvn.w	r2, #2
 800dbda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	3b20      	subs	r3, #32
 800dbe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3714      	adds	r7, #20
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr
 800dbf0:	0800dbf5 	.word	0x0800dbf5

0800dbf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b085      	sub	sp, #20
 800dbf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dbfe:	4b13      	ldr	r3, [pc, #76]	@ (800dc4c <prvTaskExitError+0x58>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc06:	d00b      	beq.n	800dc20 <prvTaskExitError+0x2c>
	__asm volatile
 800dc08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc0c:	f383 8811 	msr	BASEPRI, r3
 800dc10:	f3bf 8f6f 	isb	sy
 800dc14:	f3bf 8f4f 	dsb	sy
 800dc18:	60fb      	str	r3, [r7, #12]
}
 800dc1a:	bf00      	nop
 800dc1c:	bf00      	nop
 800dc1e:	e7fd      	b.n	800dc1c <prvTaskExitError+0x28>
	__asm volatile
 800dc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc24:	f383 8811 	msr	BASEPRI, r3
 800dc28:	f3bf 8f6f 	isb	sy
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	60bb      	str	r3, [r7, #8]
}
 800dc32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dc34:	bf00      	nop
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d0fc      	beq.n	800dc36 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dc3c:	bf00      	nop
 800dc3e:	bf00      	nop
 800dc40:	3714      	adds	r7, #20
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	200000b4 	.word	0x200000b4

0800dc50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dc50:	4b07      	ldr	r3, [pc, #28]	@ (800dc70 <pxCurrentTCBConst2>)
 800dc52:	6819      	ldr	r1, [r3, #0]
 800dc54:	6808      	ldr	r0, [r1, #0]
 800dc56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc5a:	f380 8809 	msr	PSP, r0
 800dc5e:	f3bf 8f6f 	isb	sy
 800dc62:	f04f 0000 	mov.w	r0, #0
 800dc66:	f380 8811 	msr	BASEPRI, r0
 800dc6a:	4770      	bx	lr
 800dc6c:	f3af 8000 	nop.w

0800dc70 <pxCurrentTCBConst2>:
 800dc70:	200011c8 	.word	0x200011c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dc74:	bf00      	nop
 800dc76:	bf00      	nop

0800dc78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dc78:	4808      	ldr	r0, [pc, #32]	@ (800dc9c <prvPortStartFirstTask+0x24>)
 800dc7a:	6800      	ldr	r0, [r0, #0]
 800dc7c:	6800      	ldr	r0, [r0, #0]
 800dc7e:	f380 8808 	msr	MSP, r0
 800dc82:	f04f 0000 	mov.w	r0, #0
 800dc86:	f380 8814 	msr	CONTROL, r0
 800dc8a:	b662      	cpsie	i
 800dc8c:	b661      	cpsie	f
 800dc8e:	f3bf 8f4f 	dsb	sy
 800dc92:	f3bf 8f6f 	isb	sy
 800dc96:	df00      	svc	0
 800dc98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dc9a:	bf00      	nop
 800dc9c:	e000ed08 	.word	0xe000ed08

0800dca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b086      	sub	sp, #24
 800dca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dca6:	4b47      	ldr	r3, [pc, #284]	@ (800ddc4 <xPortStartScheduler+0x124>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a47      	ldr	r2, [pc, #284]	@ (800ddc8 <xPortStartScheduler+0x128>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d10b      	bne.n	800dcc8 <xPortStartScheduler+0x28>
	__asm volatile
 800dcb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb4:	f383 8811 	msr	BASEPRI, r3
 800dcb8:	f3bf 8f6f 	isb	sy
 800dcbc:	f3bf 8f4f 	dsb	sy
 800dcc0:	613b      	str	r3, [r7, #16]
}
 800dcc2:	bf00      	nop
 800dcc4:	bf00      	nop
 800dcc6:	e7fd      	b.n	800dcc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dcc8:	4b3e      	ldr	r3, [pc, #248]	@ (800ddc4 <xPortStartScheduler+0x124>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a3f      	ldr	r2, [pc, #252]	@ (800ddcc <xPortStartScheduler+0x12c>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d10b      	bne.n	800dcea <xPortStartScheduler+0x4a>
	__asm volatile
 800dcd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd6:	f383 8811 	msr	BASEPRI, r3
 800dcda:	f3bf 8f6f 	isb	sy
 800dcde:	f3bf 8f4f 	dsb	sy
 800dce2:	60fb      	str	r3, [r7, #12]
}
 800dce4:	bf00      	nop
 800dce6:	bf00      	nop
 800dce8:	e7fd      	b.n	800dce6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dcea:	4b39      	ldr	r3, [pc, #228]	@ (800ddd0 <xPortStartScheduler+0x130>)
 800dcec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	22ff      	movs	r2, #255	@ 0xff
 800dcfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dd04:	78fb      	ldrb	r3, [r7, #3]
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800dd0c:	b2da      	uxtb	r2, r3
 800dd0e:	4b31      	ldr	r3, [pc, #196]	@ (800ddd4 <xPortStartScheduler+0x134>)
 800dd10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dd12:	4b31      	ldr	r3, [pc, #196]	@ (800ddd8 <xPortStartScheduler+0x138>)
 800dd14:	2207      	movs	r2, #7
 800dd16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd18:	e009      	b.n	800dd2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800dd1a:	4b2f      	ldr	r3, [pc, #188]	@ (800ddd8 <xPortStartScheduler+0x138>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	3b01      	subs	r3, #1
 800dd20:	4a2d      	ldr	r2, [pc, #180]	@ (800ddd8 <xPortStartScheduler+0x138>)
 800dd22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dd24:	78fb      	ldrb	r3, [r7, #3]
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	005b      	lsls	r3, r3, #1
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd2e:	78fb      	ldrb	r3, [r7, #3]
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd36:	2b80      	cmp	r3, #128	@ 0x80
 800dd38:	d0ef      	beq.n	800dd1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd3a:	4b27      	ldr	r3, [pc, #156]	@ (800ddd8 <xPortStartScheduler+0x138>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f1c3 0307 	rsb	r3, r3, #7
 800dd42:	2b04      	cmp	r3, #4
 800dd44:	d00b      	beq.n	800dd5e <xPortStartScheduler+0xbe>
	__asm volatile
 800dd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd4a:	f383 8811 	msr	BASEPRI, r3
 800dd4e:	f3bf 8f6f 	isb	sy
 800dd52:	f3bf 8f4f 	dsb	sy
 800dd56:	60bb      	str	r3, [r7, #8]
}
 800dd58:	bf00      	nop
 800dd5a:	bf00      	nop
 800dd5c:	e7fd      	b.n	800dd5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dd5e:	4b1e      	ldr	r3, [pc, #120]	@ (800ddd8 <xPortStartScheduler+0x138>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	021b      	lsls	r3, r3, #8
 800dd64:	4a1c      	ldr	r2, [pc, #112]	@ (800ddd8 <xPortStartScheduler+0x138>)
 800dd66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dd68:	4b1b      	ldr	r3, [pc, #108]	@ (800ddd8 <xPortStartScheduler+0x138>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dd70:	4a19      	ldr	r2, [pc, #100]	@ (800ddd8 <xPortStartScheduler+0x138>)
 800dd72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	b2da      	uxtb	r2, r3
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dd7c:	4b17      	ldr	r3, [pc, #92]	@ (800dddc <xPortStartScheduler+0x13c>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a16      	ldr	r2, [pc, #88]	@ (800dddc <xPortStartScheduler+0x13c>)
 800dd82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dd86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dd88:	4b14      	ldr	r3, [pc, #80]	@ (800dddc <xPortStartScheduler+0x13c>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a13      	ldr	r2, [pc, #76]	@ (800dddc <xPortStartScheduler+0x13c>)
 800dd8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dd92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dd94:	f000 f8da 	bl	800df4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dd98:	4b11      	ldr	r3, [pc, #68]	@ (800dde0 <xPortStartScheduler+0x140>)
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dd9e:	f000 f8f9 	bl	800df94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dda2:	4b10      	ldr	r3, [pc, #64]	@ (800dde4 <xPortStartScheduler+0x144>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a0f      	ldr	r2, [pc, #60]	@ (800dde4 <xPortStartScheduler+0x144>)
 800dda8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ddac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ddae:	f7ff ff63 	bl	800dc78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ddb2:	f7fe ff2f 	bl	800cc14 <vTaskSwitchContext>
	prvTaskExitError();
 800ddb6:	f7ff ff1d 	bl	800dbf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ddba:	2300      	movs	r3, #0
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3718      	adds	r7, #24
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	e000ed00 	.word	0xe000ed00
 800ddc8:	410fc271 	.word	0x410fc271
 800ddcc:	410fc270 	.word	0x410fc270
 800ddd0:	e000e400 	.word	0xe000e400
 800ddd4:	200017f4 	.word	0x200017f4
 800ddd8:	200017f8 	.word	0x200017f8
 800dddc:	e000ed20 	.word	0xe000ed20
 800dde0:	200000b4 	.word	0x200000b4
 800dde4:	e000ef34 	.word	0xe000ef34

0800dde8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dde8:	b480      	push	{r7}
 800ddea:	b083      	sub	sp, #12
 800ddec:	af00      	add	r7, sp, #0
	__asm volatile
 800ddee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf2:	f383 8811 	msr	BASEPRI, r3
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	f3bf 8f4f 	dsb	sy
 800ddfe:	607b      	str	r3, [r7, #4]
}
 800de00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800de02:	4b10      	ldr	r3, [pc, #64]	@ (800de44 <vPortEnterCritical+0x5c>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	3301      	adds	r3, #1
 800de08:	4a0e      	ldr	r2, [pc, #56]	@ (800de44 <vPortEnterCritical+0x5c>)
 800de0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800de0c:	4b0d      	ldr	r3, [pc, #52]	@ (800de44 <vPortEnterCritical+0x5c>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b01      	cmp	r3, #1
 800de12:	d110      	bne.n	800de36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800de14:	4b0c      	ldr	r3, [pc, #48]	@ (800de48 <vPortEnterCritical+0x60>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00b      	beq.n	800de36 <vPortEnterCritical+0x4e>
	__asm volatile
 800de1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de22:	f383 8811 	msr	BASEPRI, r3
 800de26:	f3bf 8f6f 	isb	sy
 800de2a:	f3bf 8f4f 	dsb	sy
 800de2e:	603b      	str	r3, [r7, #0]
}
 800de30:	bf00      	nop
 800de32:	bf00      	nop
 800de34:	e7fd      	b.n	800de32 <vPortEnterCritical+0x4a>
	}
}
 800de36:	bf00      	nop
 800de38:	370c      	adds	r7, #12
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr
 800de42:	bf00      	nop
 800de44:	200000b4 	.word	0x200000b4
 800de48:	e000ed04 	.word	0xe000ed04

0800de4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de52:	4b12      	ldr	r3, [pc, #72]	@ (800de9c <vPortExitCritical+0x50>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d10b      	bne.n	800de72 <vPortExitCritical+0x26>
	__asm volatile
 800de5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de5e:	f383 8811 	msr	BASEPRI, r3
 800de62:	f3bf 8f6f 	isb	sy
 800de66:	f3bf 8f4f 	dsb	sy
 800de6a:	607b      	str	r3, [r7, #4]
}
 800de6c:	bf00      	nop
 800de6e:	bf00      	nop
 800de70:	e7fd      	b.n	800de6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800de72:	4b0a      	ldr	r3, [pc, #40]	@ (800de9c <vPortExitCritical+0x50>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	3b01      	subs	r3, #1
 800de78:	4a08      	ldr	r2, [pc, #32]	@ (800de9c <vPortExitCritical+0x50>)
 800de7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800de7c:	4b07      	ldr	r3, [pc, #28]	@ (800de9c <vPortExitCritical+0x50>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d105      	bne.n	800de90 <vPortExitCritical+0x44>
 800de84:	2300      	movs	r3, #0
 800de86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	f383 8811 	msr	BASEPRI, r3
}
 800de8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800de90:	bf00      	nop
 800de92:	370c      	adds	r7, #12
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr
 800de9c:	200000b4 	.word	0x200000b4

0800dea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dea0:	f3ef 8009 	mrs	r0, PSP
 800dea4:	f3bf 8f6f 	isb	sy
 800dea8:	4b15      	ldr	r3, [pc, #84]	@ (800df00 <pxCurrentTCBConst>)
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	f01e 0f10 	tst.w	lr, #16
 800deb0:	bf08      	it	eq
 800deb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800deb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deba:	6010      	str	r0, [r2, #0]
 800debc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dec0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dec4:	f380 8811 	msr	BASEPRI, r0
 800dec8:	f3bf 8f4f 	dsb	sy
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f7fe fea0 	bl	800cc14 <vTaskSwitchContext>
 800ded4:	f04f 0000 	mov.w	r0, #0
 800ded8:	f380 8811 	msr	BASEPRI, r0
 800dedc:	bc09      	pop	{r0, r3}
 800dede:	6819      	ldr	r1, [r3, #0]
 800dee0:	6808      	ldr	r0, [r1, #0]
 800dee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee6:	f01e 0f10 	tst.w	lr, #16
 800deea:	bf08      	it	eq
 800deec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800def0:	f380 8809 	msr	PSP, r0
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	4770      	bx	lr
 800defa:	bf00      	nop
 800defc:	f3af 8000 	nop.w

0800df00 <pxCurrentTCBConst>:
 800df00:	200011c8 	.word	0x200011c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800df04:	bf00      	nop
 800df06:	bf00      	nop

0800df08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
	__asm volatile
 800df0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df12:	f383 8811 	msr	BASEPRI, r3
 800df16:	f3bf 8f6f 	isb	sy
 800df1a:	f3bf 8f4f 	dsb	sy
 800df1e:	607b      	str	r3, [r7, #4]
}
 800df20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800df22:	f7fe fdbd 	bl	800caa0 <xTaskIncrementTick>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d003      	beq.n	800df34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df2c:	4b06      	ldr	r3, [pc, #24]	@ (800df48 <xPortSysTickHandler+0x40>)
 800df2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df32:	601a      	str	r2, [r3, #0]
 800df34:	2300      	movs	r3, #0
 800df36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	f383 8811 	msr	BASEPRI, r3
}
 800df3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800df40:	bf00      	nop
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	e000ed04 	.word	0xe000ed04

0800df4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df4c:	b480      	push	{r7}
 800df4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df50:	4b0b      	ldr	r3, [pc, #44]	@ (800df80 <vPortSetupTimerInterrupt+0x34>)
 800df52:	2200      	movs	r2, #0
 800df54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df56:	4b0b      	ldr	r3, [pc, #44]	@ (800df84 <vPortSetupTimerInterrupt+0x38>)
 800df58:	2200      	movs	r2, #0
 800df5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df5c:	4b0a      	ldr	r3, [pc, #40]	@ (800df88 <vPortSetupTimerInterrupt+0x3c>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4a0a      	ldr	r2, [pc, #40]	@ (800df8c <vPortSetupTimerInterrupt+0x40>)
 800df62:	fba2 2303 	umull	r2, r3, r2, r3
 800df66:	099b      	lsrs	r3, r3, #6
 800df68:	4a09      	ldr	r2, [pc, #36]	@ (800df90 <vPortSetupTimerInterrupt+0x44>)
 800df6a:	3b01      	subs	r3, #1
 800df6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800df6e:	4b04      	ldr	r3, [pc, #16]	@ (800df80 <vPortSetupTimerInterrupt+0x34>)
 800df70:	2207      	movs	r2, #7
 800df72:	601a      	str	r2, [r3, #0]
}
 800df74:	bf00      	nop
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr
 800df7e:	bf00      	nop
 800df80:	e000e010 	.word	0xe000e010
 800df84:	e000e018 	.word	0xe000e018
 800df88:	200000a8 	.word	0x200000a8
 800df8c:	10624dd3 	.word	0x10624dd3
 800df90:	e000e014 	.word	0xe000e014

0800df94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800df94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dfa4 <vPortEnableVFP+0x10>
 800df98:	6801      	ldr	r1, [r0, #0]
 800df9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800df9e:	6001      	str	r1, [r0, #0]
 800dfa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dfa2:	bf00      	nop
 800dfa4:	e000ed88 	.word	0xe000ed88

0800dfa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b085      	sub	sp, #20
 800dfac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dfae:	f3ef 8305 	mrs	r3, IPSR
 800dfb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2b0f      	cmp	r3, #15
 800dfb8:	d915      	bls.n	800dfe6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dfba:	4a18      	ldr	r2, [pc, #96]	@ (800e01c <vPortValidateInterruptPriority+0x74>)
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	4413      	add	r3, r2
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dfc4:	4b16      	ldr	r3, [pc, #88]	@ (800e020 <vPortValidateInterruptPriority+0x78>)
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	7afa      	ldrb	r2, [r7, #11]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d20b      	bcs.n	800dfe6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800dfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd2:	f383 8811 	msr	BASEPRI, r3
 800dfd6:	f3bf 8f6f 	isb	sy
 800dfda:	f3bf 8f4f 	dsb	sy
 800dfde:	607b      	str	r3, [r7, #4]
}
 800dfe0:	bf00      	nop
 800dfe2:	bf00      	nop
 800dfe4:	e7fd      	b.n	800dfe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dfe6:	4b0f      	ldr	r3, [pc, #60]	@ (800e024 <vPortValidateInterruptPriority+0x7c>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dfee:	4b0e      	ldr	r3, [pc, #56]	@ (800e028 <vPortValidateInterruptPriority+0x80>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d90b      	bls.n	800e00e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800dff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffa:	f383 8811 	msr	BASEPRI, r3
 800dffe:	f3bf 8f6f 	isb	sy
 800e002:	f3bf 8f4f 	dsb	sy
 800e006:	603b      	str	r3, [r7, #0]
}
 800e008:	bf00      	nop
 800e00a:	bf00      	nop
 800e00c:	e7fd      	b.n	800e00a <vPortValidateInterruptPriority+0x62>
	}
 800e00e:	bf00      	nop
 800e010:	3714      	adds	r7, #20
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr
 800e01a:	bf00      	nop
 800e01c:	e000e3f0 	.word	0xe000e3f0
 800e020:	200017f4 	.word	0x200017f4
 800e024:	e000ed0c 	.word	0xe000ed0c
 800e028:	200017f8 	.word	0x200017f8

0800e02c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b08a      	sub	sp, #40	@ 0x28
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e034:	2300      	movs	r3, #0
 800e036:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e038:	f7fe fc76 	bl	800c928 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e03c:	4b5c      	ldr	r3, [pc, #368]	@ (800e1b0 <pvPortMalloc+0x184>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d101      	bne.n	800e048 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e044:	f000 f924 	bl	800e290 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e048:	4b5a      	ldr	r3, [pc, #360]	@ (800e1b4 <pvPortMalloc+0x188>)
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	4013      	ands	r3, r2
 800e050:	2b00      	cmp	r3, #0
 800e052:	f040 8095 	bne.w	800e180 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d01e      	beq.n	800e09a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e05c:	2208      	movs	r2, #8
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	4413      	add	r3, r2
 800e062:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f003 0307 	and.w	r3, r3, #7
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d015      	beq.n	800e09a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f023 0307 	bic.w	r3, r3, #7
 800e074:	3308      	adds	r3, #8
 800e076:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f003 0307 	and.w	r3, r3, #7
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d00b      	beq.n	800e09a <pvPortMalloc+0x6e>
	__asm volatile
 800e082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e086:	f383 8811 	msr	BASEPRI, r3
 800e08a:	f3bf 8f6f 	isb	sy
 800e08e:	f3bf 8f4f 	dsb	sy
 800e092:	617b      	str	r3, [r7, #20]
}
 800e094:	bf00      	nop
 800e096:	bf00      	nop
 800e098:	e7fd      	b.n	800e096 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d06f      	beq.n	800e180 <pvPortMalloc+0x154>
 800e0a0:	4b45      	ldr	r3, [pc, #276]	@ (800e1b8 <pvPortMalloc+0x18c>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d86a      	bhi.n	800e180 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e0aa:	4b44      	ldr	r3, [pc, #272]	@ (800e1bc <pvPortMalloc+0x190>)
 800e0ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e0ae:	4b43      	ldr	r3, [pc, #268]	@ (800e1bc <pvPortMalloc+0x190>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0b4:	e004      	b.n	800e0c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d903      	bls.n	800e0d2 <pvPortMalloc+0xa6>
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1f1      	bne.n	800e0b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e0d2:	4b37      	ldr	r3, [pc, #220]	@ (800e1b0 <pvPortMalloc+0x184>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d051      	beq.n	800e180 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e0dc:	6a3b      	ldr	r3, [r7, #32]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2208      	movs	r2, #8
 800e0e2:	4413      	add	r3, r2
 800e0e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	6a3b      	ldr	r3, [r7, #32]
 800e0ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0f0:	685a      	ldr	r2, [r3, #4]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	1ad2      	subs	r2, r2, r3
 800e0f6:	2308      	movs	r3, #8
 800e0f8:	005b      	lsls	r3, r3, #1
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d920      	bls.n	800e140 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e0fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	4413      	add	r3, r2
 800e104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e106:	69bb      	ldr	r3, [r7, #24]
 800e108:	f003 0307 	and.w	r3, r3, #7
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00b      	beq.n	800e128 <pvPortMalloc+0xfc>
	__asm volatile
 800e110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e114:	f383 8811 	msr	BASEPRI, r3
 800e118:	f3bf 8f6f 	isb	sy
 800e11c:	f3bf 8f4f 	dsb	sy
 800e120:	613b      	str	r3, [r7, #16]
}
 800e122:	bf00      	nop
 800e124:	bf00      	nop
 800e126:	e7fd      	b.n	800e124 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12a:	685a      	ldr	r2, [r3, #4]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	1ad2      	subs	r2, r2, r3
 800e130:	69bb      	ldr	r3, [r7, #24]
 800e132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e13a:	69b8      	ldr	r0, [r7, #24]
 800e13c:	f000 f90a 	bl	800e354 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e140:	4b1d      	ldr	r3, [pc, #116]	@ (800e1b8 <pvPortMalloc+0x18c>)
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	4a1b      	ldr	r2, [pc, #108]	@ (800e1b8 <pvPortMalloc+0x18c>)
 800e14c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e14e:	4b1a      	ldr	r3, [pc, #104]	@ (800e1b8 <pvPortMalloc+0x18c>)
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	4b1b      	ldr	r3, [pc, #108]	@ (800e1c0 <pvPortMalloc+0x194>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	429a      	cmp	r2, r3
 800e158:	d203      	bcs.n	800e162 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e15a:	4b17      	ldr	r3, [pc, #92]	@ (800e1b8 <pvPortMalloc+0x18c>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	4a18      	ldr	r2, [pc, #96]	@ (800e1c0 <pvPortMalloc+0x194>)
 800e160:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e164:	685a      	ldr	r2, [r3, #4]
 800e166:	4b13      	ldr	r3, [pc, #76]	@ (800e1b4 <pvPortMalloc+0x188>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	431a      	orrs	r2, r3
 800e16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e172:	2200      	movs	r2, #0
 800e174:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e176:	4b13      	ldr	r3, [pc, #76]	@ (800e1c4 <pvPortMalloc+0x198>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	3301      	adds	r3, #1
 800e17c:	4a11      	ldr	r2, [pc, #68]	@ (800e1c4 <pvPortMalloc+0x198>)
 800e17e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e180:	f7fe fbe0 	bl	800c944 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	f003 0307 	and.w	r3, r3, #7
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00b      	beq.n	800e1a6 <pvPortMalloc+0x17a>
	__asm volatile
 800e18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e192:	f383 8811 	msr	BASEPRI, r3
 800e196:	f3bf 8f6f 	isb	sy
 800e19a:	f3bf 8f4f 	dsb	sy
 800e19e:	60fb      	str	r3, [r7, #12]
}
 800e1a0:	bf00      	nop
 800e1a2:	bf00      	nop
 800e1a4:	e7fd      	b.n	800e1a2 <pvPortMalloc+0x176>
	return pvReturn;
 800e1a6:	69fb      	ldr	r3, [r7, #28]
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3728      	adds	r7, #40	@ 0x28
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	20005404 	.word	0x20005404
 800e1b4:	20005418 	.word	0x20005418
 800e1b8:	20005408 	.word	0x20005408
 800e1bc:	200053fc 	.word	0x200053fc
 800e1c0:	2000540c 	.word	0x2000540c
 800e1c4:	20005410 	.word	0x20005410

0800e1c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b086      	sub	sp, #24
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d04f      	beq.n	800e27a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e1da:	2308      	movs	r3, #8
 800e1dc:	425b      	negs	r3, r3
 800e1de:	697a      	ldr	r2, [r7, #20]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	685a      	ldr	r2, [r3, #4]
 800e1ec:	4b25      	ldr	r3, [pc, #148]	@ (800e284 <vPortFree+0xbc>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4013      	ands	r3, r2
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d10b      	bne.n	800e20e <vPortFree+0x46>
	__asm volatile
 800e1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fa:	f383 8811 	msr	BASEPRI, r3
 800e1fe:	f3bf 8f6f 	isb	sy
 800e202:	f3bf 8f4f 	dsb	sy
 800e206:	60fb      	str	r3, [r7, #12]
}
 800e208:	bf00      	nop
 800e20a:	bf00      	nop
 800e20c:	e7fd      	b.n	800e20a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00b      	beq.n	800e22e <vPortFree+0x66>
	__asm volatile
 800e216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e21a:	f383 8811 	msr	BASEPRI, r3
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	60bb      	str	r3, [r7, #8]
}
 800e228:	bf00      	nop
 800e22a:	bf00      	nop
 800e22c:	e7fd      	b.n	800e22a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	685a      	ldr	r2, [r3, #4]
 800e232:	4b14      	ldr	r3, [pc, #80]	@ (800e284 <vPortFree+0xbc>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4013      	ands	r3, r2
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d01e      	beq.n	800e27a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d11a      	bne.n	800e27a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	685a      	ldr	r2, [r3, #4]
 800e248:	4b0e      	ldr	r3, [pc, #56]	@ (800e284 <vPortFree+0xbc>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	43db      	mvns	r3, r3
 800e24e:	401a      	ands	r2, r3
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e254:	f7fe fb68 	bl	800c928 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	685a      	ldr	r2, [r3, #4]
 800e25c:	4b0a      	ldr	r3, [pc, #40]	@ (800e288 <vPortFree+0xc0>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4413      	add	r3, r2
 800e262:	4a09      	ldr	r2, [pc, #36]	@ (800e288 <vPortFree+0xc0>)
 800e264:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e266:	6938      	ldr	r0, [r7, #16]
 800e268:	f000 f874 	bl	800e354 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e26c:	4b07      	ldr	r3, [pc, #28]	@ (800e28c <vPortFree+0xc4>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	3301      	adds	r3, #1
 800e272:	4a06      	ldr	r2, [pc, #24]	@ (800e28c <vPortFree+0xc4>)
 800e274:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e276:	f7fe fb65 	bl	800c944 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e27a:	bf00      	nop
 800e27c:	3718      	adds	r7, #24
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	20005418 	.word	0x20005418
 800e288:	20005408 	.word	0x20005408
 800e28c:	20005414 	.word	0x20005414

0800e290 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e290:	b480      	push	{r7}
 800e292:	b085      	sub	sp, #20
 800e294:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e296:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e29a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e29c:	4b27      	ldr	r3, [pc, #156]	@ (800e33c <prvHeapInit+0xac>)
 800e29e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f003 0307 	and.w	r3, r3, #7
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00c      	beq.n	800e2c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	3307      	adds	r3, #7
 800e2ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f023 0307 	bic.w	r3, r3, #7
 800e2b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e2b8:	68ba      	ldr	r2, [r7, #8]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	1ad3      	subs	r3, r2, r3
 800e2be:	4a1f      	ldr	r2, [pc, #124]	@ (800e33c <prvHeapInit+0xac>)
 800e2c0:	4413      	add	r3, r2
 800e2c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e2c8:	4a1d      	ldr	r2, [pc, #116]	@ (800e340 <prvHeapInit+0xb0>)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e2ce:	4b1c      	ldr	r3, [pc, #112]	@ (800e340 <prvHeapInit+0xb0>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	68ba      	ldr	r2, [r7, #8]
 800e2d8:	4413      	add	r3, r2
 800e2da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e2dc:	2208      	movs	r2, #8
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	1a9b      	subs	r3, r3, r2
 800e2e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f023 0307 	bic.w	r3, r3, #7
 800e2ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	4a15      	ldr	r2, [pc, #84]	@ (800e344 <prvHeapInit+0xb4>)
 800e2f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e2f2:	4b14      	ldr	r3, [pc, #80]	@ (800e344 <prvHeapInit+0xb4>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e2fa:	4b12      	ldr	r3, [pc, #72]	@ (800e344 <prvHeapInit+0xb4>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2200      	movs	r2, #0
 800e300:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	1ad2      	subs	r2, r2, r3
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e310:	4b0c      	ldr	r3, [pc, #48]	@ (800e344 <prvHeapInit+0xb4>)
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	4a0a      	ldr	r2, [pc, #40]	@ (800e348 <prvHeapInit+0xb8>)
 800e31e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	4a09      	ldr	r2, [pc, #36]	@ (800e34c <prvHeapInit+0xbc>)
 800e326:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e328:	4b09      	ldr	r3, [pc, #36]	@ (800e350 <prvHeapInit+0xc0>)
 800e32a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e32e:	601a      	str	r2, [r3, #0]
}
 800e330:	bf00      	nop
 800e332:	3714      	adds	r7, #20
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr
 800e33c:	200017fc 	.word	0x200017fc
 800e340:	200053fc 	.word	0x200053fc
 800e344:	20005404 	.word	0x20005404
 800e348:	2000540c 	.word	0x2000540c
 800e34c:	20005408 	.word	0x20005408
 800e350:	20005418 	.word	0x20005418

0800e354 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e354:	b480      	push	{r7}
 800e356:	b085      	sub	sp, #20
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e35c:	4b28      	ldr	r3, [pc, #160]	@ (800e400 <prvInsertBlockIntoFreeList+0xac>)
 800e35e:	60fb      	str	r3, [r7, #12]
 800e360:	e002      	b.n	800e368 <prvInsertBlockIntoFreeList+0x14>
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	60fb      	str	r3, [r7, #12]
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	687a      	ldr	r2, [r7, #4]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d8f7      	bhi.n	800e362 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	68ba      	ldr	r2, [r7, #8]
 800e37c:	4413      	add	r3, r2
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	429a      	cmp	r2, r3
 800e382:	d108      	bne.n	800e396 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	685a      	ldr	r2, [r3, #4]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	441a      	add	r2, r3
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	68ba      	ldr	r2, [r7, #8]
 800e3a0:	441a      	add	r2, r3
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d118      	bne.n	800e3dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	4b15      	ldr	r3, [pc, #84]	@ (800e404 <prvInsertBlockIntoFreeList+0xb0>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d00d      	beq.n	800e3d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	685a      	ldr	r2, [r3, #4]
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	685b      	ldr	r3, [r3, #4]
 800e3c0:	441a      	add	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	681a      	ldr	r2, [r3, #0]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	601a      	str	r2, [r3, #0]
 800e3d0:	e008      	b.n	800e3e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e3d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e404 <prvInsertBlockIntoFreeList+0xb0>)
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	601a      	str	r2, [r3, #0]
 800e3da:	e003      	b.n	800e3e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681a      	ldr	r2, [r3, #0]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d002      	beq.n	800e3f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3f2:	bf00      	nop
 800e3f4:	3714      	adds	r7, #20
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr
 800e3fe:	bf00      	nop
 800e400:	200053fc 	.word	0x200053fc
 800e404:	20005404 	.word	0x20005404

0800e408 <__itoa>:
 800e408:	1e93      	subs	r3, r2, #2
 800e40a:	2b22      	cmp	r3, #34	@ 0x22
 800e40c:	b510      	push	{r4, lr}
 800e40e:	460c      	mov	r4, r1
 800e410:	d904      	bls.n	800e41c <__itoa+0x14>
 800e412:	2300      	movs	r3, #0
 800e414:	700b      	strb	r3, [r1, #0]
 800e416:	461c      	mov	r4, r3
 800e418:	4620      	mov	r0, r4
 800e41a:	bd10      	pop	{r4, pc}
 800e41c:	2a0a      	cmp	r2, #10
 800e41e:	d109      	bne.n	800e434 <__itoa+0x2c>
 800e420:	2800      	cmp	r0, #0
 800e422:	da07      	bge.n	800e434 <__itoa+0x2c>
 800e424:	232d      	movs	r3, #45	@ 0x2d
 800e426:	700b      	strb	r3, [r1, #0]
 800e428:	4240      	negs	r0, r0
 800e42a:	2101      	movs	r1, #1
 800e42c:	4421      	add	r1, r4
 800e42e:	f000 f8c3 	bl	800e5b8 <__utoa>
 800e432:	e7f1      	b.n	800e418 <__itoa+0x10>
 800e434:	2100      	movs	r1, #0
 800e436:	e7f9      	b.n	800e42c <__itoa+0x24>

0800e438 <itoa>:
 800e438:	f7ff bfe6 	b.w	800e408 <__itoa>

0800e43c <malloc>:
 800e43c:	4b02      	ldr	r3, [pc, #8]	@ (800e448 <malloc+0xc>)
 800e43e:	4601      	mov	r1, r0
 800e440:	6818      	ldr	r0, [r3, #0]
 800e442:	f000 b82d 	b.w	800e4a0 <_malloc_r>
 800e446:	bf00      	nop
 800e448:	200000c4 	.word	0x200000c4

0800e44c <free>:
 800e44c:	4b02      	ldr	r3, [pc, #8]	@ (800e458 <free+0xc>)
 800e44e:	4601      	mov	r1, r0
 800e450:	6818      	ldr	r0, [r3, #0]
 800e452:	f002 b885 	b.w	8010560 <_free_r>
 800e456:	bf00      	nop
 800e458:	200000c4 	.word	0x200000c4

0800e45c <sbrk_aligned>:
 800e45c:	b570      	push	{r4, r5, r6, lr}
 800e45e:	4e0f      	ldr	r6, [pc, #60]	@ (800e49c <sbrk_aligned+0x40>)
 800e460:	460c      	mov	r4, r1
 800e462:	6831      	ldr	r1, [r6, #0]
 800e464:	4605      	mov	r5, r0
 800e466:	b911      	cbnz	r1, 800e46e <sbrk_aligned+0x12>
 800e468:	f001 f9aa 	bl	800f7c0 <_sbrk_r>
 800e46c:	6030      	str	r0, [r6, #0]
 800e46e:	4621      	mov	r1, r4
 800e470:	4628      	mov	r0, r5
 800e472:	f001 f9a5 	bl	800f7c0 <_sbrk_r>
 800e476:	1c43      	adds	r3, r0, #1
 800e478:	d103      	bne.n	800e482 <sbrk_aligned+0x26>
 800e47a:	f04f 34ff 	mov.w	r4, #4294967295
 800e47e:	4620      	mov	r0, r4
 800e480:	bd70      	pop	{r4, r5, r6, pc}
 800e482:	1cc4      	adds	r4, r0, #3
 800e484:	f024 0403 	bic.w	r4, r4, #3
 800e488:	42a0      	cmp	r0, r4
 800e48a:	d0f8      	beq.n	800e47e <sbrk_aligned+0x22>
 800e48c:	1a21      	subs	r1, r4, r0
 800e48e:	4628      	mov	r0, r5
 800e490:	f001 f996 	bl	800f7c0 <_sbrk_r>
 800e494:	3001      	adds	r0, #1
 800e496:	d1f2      	bne.n	800e47e <sbrk_aligned+0x22>
 800e498:	e7ef      	b.n	800e47a <sbrk_aligned+0x1e>
 800e49a:	bf00      	nop
 800e49c:	2000541c 	.word	0x2000541c

0800e4a0 <_malloc_r>:
 800e4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4a4:	1ccd      	adds	r5, r1, #3
 800e4a6:	f025 0503 	bic.w	r5, r5, #3
 800e4aa:	3508      	adds	r5, #8
 800e4ac:	2d0c      	cmp	r5, #12
 800e4ae:	bf38      	it	cc
 800e4b0:	250c      	movcc	r5, #12
 800e4b2:	2d00      	cmp	r5, #0
 800e4b4:	4606      	mov	r6, r0
 800e4b6:	db01      	blt.n	800e4bc <_malloc_r+0x1c>
 800e4b8:	42a9      	cmp	r1, r5
 800e4ba:	d904      	bls.n	800e4c6 <_malloc_r+0x26>
 800e4bc:	230c      	movs	r3, #12
 800e4be:	6033      	str	r3, [r6, #0]
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e59c <_malloc_r+0xfc>
 800e4ca:	f000 f869 	bl	800e5a0 <__malloc_lock>
 800e4ce:	f8d8 3000 	ldr.w	r3, [r8]
 800e4d2:	461c      	mov	r4, r3
 800e4d4:	bb44      	cbnz	r4, 800e528 <_malloc_r+0x88>
 800e4d6:	4629      	mov	r1, r5
 800e4d8:	4630      	mov	r0, r6
 800e4da:	f7ff ffbf 	bl	800e45c <sbrk_aligned>
 800e4de:	1c43      	adds	r3, r0, #1
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	d158      	bne.n	800e596 <_malloc_r+0xf6>
 800e4e4:	f8d8 4000 	ldr.w	r4, [r8]
 800e4e8:	4627      	mov	r7, r4
 800e4ea:	2f00      	cmp	r7, #0
 800e4ec:	d143      	bne.n	800e576 <_malloc_r+0xd6>
 800e4ee:	2c00      	cmp	r4, #0
 800e4f0:	d04b      	beq.n	800e58a <_malloc_r+0xea>
 800e4f2:	6823      	ldr	r3, [r4, #0]
 800e4f4:	4639      	mov	r1, r7
 800e4f6:	4630      	mov	r0, r6
 800e4f8:	eb04 0903 	add.w	r9, r4, r3
 800e4fc:	f001 f960 	bl	800f7c0 <_sbrk_r>
 800e500:	4581      	cmp	r9, r0
 800e502:	d142      	bne.n	800e58a <_malloc_r+0xea>
 800e504:	6821      	ldr	r1, [r4, #0]
 800e506:	1a6d      	subs	r5, r5, r1
 800e508:	4629      	mov	r1, r5
 800e50a:	4630      	mov	r0, r6
 800e50c:	f7ff ffa6 	bl	800e45c <sbrk_aligned>
 800e510:	3001      	adds	r0, #1
 800e512:	d03a      	beq.n	800e58a <_malloc_r+0xea>
 800e514:	6823      	ldr	r3, [r4, #0]
 800e516:	442b      	add	r3, r5
 800e518:	6023      	str	r3, [r4, #0]
 800e51a:	f8d8 3000 	ldr.w	r3, [r8]
 800e51e:	685a      	ldr	r2, [r3, #4]
 800e520:	bb62      	cbnz	r2, 800e57c <_malloc_r+0xdc>
 800e522:	f8c8 7000 	str.w	r7, [r8]
 800e526:	e00f      	b.n	800e548 <_malloc_r+0xa8>
 800e528:	6822      	ldr	r2, [r4, #0]
 800e52a:	1b52      	subs	r2, r2, r5
 800e52c:	d420      	bmi.n	800e570 <_malloc_r+0xd0>
 800e52e:	2a0b      	cmp	r2, #11
 800e530:	d917      	bls.n	800e562 <_malloc_r+0xc2>
 800e532:	1961      	adds	r1, r4, r5
 800e534:	42a3      	cmp	r3, r4
 800e536:	6025      	str	r5, [r4, #0]
 800e538:	bf18      	it	ne
 800e53a:	6059      	strne	r1, [r3, #4]
 800e53c:	6863      	ldr	r3, [r4, #4]
 800e53e:	bf08      	it	eq
 800e540:	f8c8 1000 	streq.w	r1, [r8]
 800e544:	5162      	str	r2, [r4, r5]
 800e546:	604b      	str	r3, [r1, #4]
 800e548:	4630      	mov	r0, r6
 800e54a:	f000 f82f 	bl	800e5ac <__malloc_unlock>
 800e54e:	f104 000b 	add.w	r0, r4, #11
 800e552:	1d23      	adds	r3, r4, #4
 800e554:	f020 0007 	bic.w	r0, r0, #7
 800e558:	1ac2      	subs	r2, r0, r3
 800e55a:	bf1c      	itt	ne
 800e55c:	1a1b      	subne	r3, r3, r0
 800e55e:	50a3      	strne	r3, [r4, r2]
 800e560:	e7af      	b.n	800e4c2 <_malloc_r+0x22>
 800e562:	6862      	ldr	r2, [r4, #4]
 800e564:	42a3      	cmp	r3, r4
 800e566:	bf0c      	ite	eq
 800e568:	f8c8 2000 	streq.w	r2, [r8]
 800e56c:	605a      	strne	r2, [r3, #4]
 800e56e:	e7eb      	b.n	800e548 <_malloc_r+0xa8>
 800e570:	4623      	mov	r3, r4
 800e572:	6864      	ldr	r4, [r4, #4]
 800e574:	e7ae      	b.n	800e4d4 <_malloc_r+0x34>
 800e576:	463c      	mov	r4, r7
 800e578:	687f      	ldr	r7, [r7, #4]
 800e57a:	e7b6      	b.n	800e4ea <_malloc_r+0x4a>
 800e57c:	461a      	mov	r2, r3
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	42a3      	cmp	r3, r4
 800e582:	d1fb      	bne.n	800e57c <_malloc_r+0xdc>
 800e584:	2300      	movs	r3, #0
 800e586:	6053      	str	r3, [r2, #4]
 800e588:	e7de      	b.n	800e548 <_malloc_r+0xa8>
 800e58a:	230c      	movs	r3, #12
 800e58c:	6033      	str	r3, [r6, #0]
 800e58e:	4630      	mov	r0, r6
 800e590:	f000 f80c 	bl	800e5ac <__malloc_unlock>
 800e594:	e794      	b.n	800e4c0 <_malloc_r+0x20>
 800e596:	6005      	str	r5, [r0, #0]
 800e598:	e7d6      	b.n	800e548 <_malloc_r+0xa8>
 800e59a:	bf00      	nop
 800e59c:	20005420 	.word	0x20005420

0800e5a0 <__malloc_lock>:
 800e5a0:	4801      	ldr	r0, [pc, #4]	@ (800e5a8 <__malloc_lock+0x8>)
 800e5a2:	f001 b95a 	b.w	800f85a <__retarget_lock_acquire_recursive>
 800e5a6:	bf00      	nop
 800e5a8:	20005564 	.word	0x20005564

0800e5ac <__malloc_unlock>:
 800e5ac:	4801      	ldr	r0, [pc, #4]	@ (800e5b4 <__malloc_unlock+0x8>)
 800e5ae:	f001 b955 	b.w	800f85c <__retarget_lock_release_recursive>
 800e5b2:	bf00      	nop
 800e5b4:	20005564 	.word	0x20005564

0800e5b8 <__utoa>:
 800e5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5ba:	4c1f      	ldr	r4, [pc, #124]	@ (800e638 <__utoa+0x80>)
 800e5bc:	b08b      	sub	sp, #44	@ 0x2c
 800e5be:	4605      	mov	r5, r0
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	466e      	mov	r6, sp
 800e5c4:	f104 0c20 	add.w	ip, r4, #32
 800e5c8:	6820      	ldr	r0, [r4, #0]
 800e5ca:	6861      	ldr	r1, [r4, #4]
 800e5cc:	4637      	mov	r7, r6
 800e5ce:	c703      	stmia	r7!, {r0, r1}
 800e5d0:	3408      	adds	r4, #8
 800e5d2:	4564      	cmp	r4, ip
 800e5d4:	463e      	mov	r6, r7
 800e5d6:	d1f7      	bne.n	800e5c8 <__utoa+0x10>
 800e5d8:	7921      	ldrb	r1, [r4, #4]
 800e5da:	7139      	strb	r1, [r7, #4]
 800e5dc:	1e91      	subs	r1, r2, #2
 800e5de:	6820      	ldr	r0, [r4, #0]
 800e5e0:	6038      	str	r0, [r7, #0]
 800e5e2:	2922      	cmp	r1, #34	@ 0x22
 800e5e4:	f04f 0100 	mov.w	r1, #0
 800e5e8:	d904      	bls.n	800e5f4 <__utoa+0x3c>
 800e5ea:	7019      	strb	r1, [r3, #0]
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	b00b      	add	sp, #44	@ 0x2c
 800e5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5f4:	1e58      	subs	r0, r3, #1
 800e5f6:	4684      	mov	ip, r0
 800e5f8:	fbb5 f7f2 	udiv	r7, r5, r2
 800e5fc:	fb02 5617 	mls	r6, r2, r7, r5
 800e600:	3628      	adds	r6, #40	@ 0x28
 800e602:	446e      	add	r6, sp
 800e604:	460c      	mov	r4, r1
 800e606:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e60a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e60e:	462e      	mov	r6, r5
 800e610:	42b2      	cmp	r2, r6
 800e612:	f101 0101 	add.w	r1, r1, #1
 800e616:	463d      	mov	r5, r7
 800e618:	d9ee      	bls.n	800e5f8 <__utoa+0x40>
 800e61a:	2200      	movs	r2, #0
 800e61c:	545a      	strb	r2, [r3, r1]
 800e61e:	1919      	adds	r1, r3, r4
 800e620:	1aa5      	subs	r5, r4, r2
 800e622:	42aa      	cmp	r2, r5
 800e624:	dae3      	bge.n	800e5ee <__utoa+0x36>
 800e626:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e62a:	780e      	ldrb	r6, [r1, #0]
 800e62c:	7006      	strb	r6, [r0, #0]
 800e62e:	3201      	adds	r2, #1
 800e630:	f801 5901 	strb.w	r5, [r1], #-1
 800e634:	e7f4      	b.n	800e620 <__utoa+0x68>
 800e636:	bf00      	nop
 800e638:	08014890 	.word	0x08014890

0800e63c <__cvt>:
 800e63c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e640:	ec57 6b10 	vmov	r6, r7, d0
 800e644:	2f00      	cmp	r7, #0
 800e646:	460c      	mov	r4, r1
 800e648:	4619      	mov	r1, r3
 800e64a:	463b      	mov	r3, r7
 800e64c:	bfbb      	ittet	lt
 800e64e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e652:	461f      	movlt	r7, r3
 800e654:	2300      	movge	r3, #0
 800e656:	232d      	movlt	r3, #45	@ 0x2d
 800e658:	700b      	strb	r3, [r1, #0]
 800e65a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e65c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e660:	4691      	mov	r9, r2
 800e662:	f023 0820 	bic.w	r8, r3, #32
 800e666:	bfbc      	itt	lt
 800e668:	4632      	movlt	r2, r6
 800e66a:	4616      	movlt	r6, r2
 800e66c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e670:	d005      	beq.n	800e67e <__cvt+0x42>
 800e672:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e676:	d100      	bne.n	800e67a <__cvt+0x3e>
 800e678:	3401      	adds	r4, #1
 800e67a:	2102      	movs	r1, #2
 800e67c:	e000      	b.n	800e680 <__cvt+0x44>
 800e67e:	2103      	movs	r1, #3
 800e680:	ab03      	add	r3, sp, #12
 800e682:	9301      	str	r3, [sp, #4]
 800e684:	ab02      	add	r3, sp, #8
 800e686:	9300      	str	r3, [sp, #0]
 800e688:	ec47 6b10 	vmov	d0, r6, r7
 800e68c:	4653      	mov	r3, sl
 800e68e:	4622      	mov	r2, r4
 800e690:	f001 f9a2 	bl	800f9d8 <_dtoa_r>
 800e694:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e698:	4605      	mov	r5, r0
 800e69a:	d119      	bne.n	800e6d0 <__cvt+0x94>
 800e69c:	f019 0f01 	tst.w	r9, #1
 800e6a0:	d00e      	beq.n	800e6c0 <__cvt+0x84>
 800e6a2:	eb00 0904 	add.w	r9, r0, r4
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	4639      	mov	r1, r7
 800e6ae:	f7f2 fa1b 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6b2:	b108      	cbz	r0, 800e6b8 <__cvt+0x7c>
 800e6b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e6b8:	2230      	movs	r2, #48	@ 0x30
 800e6ba:	9b03      	ldr	r3, [sp, #12]
 800e6bc:	454b      	cmp	r3, r9
 800e6be:	d31e      	bcc.n	800e6fe <__cvt+0xc2>
 800e6c0:	9b03      	ldr	r3, [sp, #12]
 800e6c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6c4:	1b5b      	subs	r3, r3, r5
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	6013      	str	r3, [r2, #0]
 800e6ca:	b004      	add	sp, #16
 800e6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e6d4:	eb00 0904 	add.w	r9, r0, r4
 800e6d8:	d1e5      	bne.n	800e6a6 <__cvt+0x6a>
 800e6da:	7803      	ldrb	r3, [r0, #0]
 800e6dc:	2b30      	cmp	r3, #48	@ 0x30
 800e6de:	d10a      	bne.n	800e6f6 <__cvt+0xba>
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	4630      	mov	r0, r6
 800e6e6:	4639      	mov	r1, r7
 800e6e8:	f7f2 f9fe 	bl	8000ae8 <__aeabi_dcmpeq>
 800e6ec:	b918      	cbnz	r0, 800e6f6 <__cvt+0xba>
 800e6ee:	f1c4 0401 	rsb	r4, r4, #1
 800e6f2:	f8ca 4000 	str.w	r4, [sl]
 800e6f6:	f8da 3000 	ldr.w	r3, [sl]
 800e6fa:	4499      	add	r9, r3
 800e6fc:	e7d3      	b.n	800e6a6 <__cvt+0x6a>
 800e6fe:	1c59      	adds	r1, r3, #1
 800e700:	9103      	str	r1, [sp, #12]
 800e702:	701a      	strb	r2, [r3, #0]
 800e704:	e7d9      	b.n	800e6ba <__cvt+0x7e>

0800e706 <__exponent>:
 800e706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e708:	2900      	cmp	r1, #0
 800e70a:	bfba      	itte	lt
 800e70c:	4249      	neglt	r1, r1
 800e70e:	232d      	movlt	r3, #45	@ 0x2d
 800e710:	232b      	movge	r3, #43	@ 0x2b
 800e712:	2909      	cmp	r1, #9
 800e714:	7002      	strb	r2, [r0, #0]
 800e716:	7043      	strb	r3, [r0, #1]
 800e718:	dd29      	ble.n	800e76e <__exponent+0x68>
 800e71a:	f10d 0307 	add.w	r3, sp, #7
 800e71e:	461d      	mov	r5, r3
 800e720:	270a      	movs	r7, #10
 800e722:	461a      	mov	r2, r3
 800e724:	fbb1 f6f7 	udiv	r6, r1, r7
 800e728:	fb07 1416 	mls	r4, r7, r6, r1
 800e72c:	3430      	adds	r4, #48	@ 0x30
 800e72e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e732:	460c      	mov	r4, r1
 800e734:	2c63      	cmp	r4, #99	@ 0x63
 800e736:	f103 33ff 	add.w	r3, r3, #4294967295
 800e73a:	4631      	mov	r1, r6
 800e73c:	dcf1      	bgt.n	800e722 <__exponent+0x1c>
 800e73e:	3130      	adds	r1, #48	@ 0x30
 800e740:	1e94      	subs	r4, r2, #2
 800e742:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e746:	1c41      	adds	r1, r0, #1
 800e748:	4623      	mov	r3, r4
 800e74a:	42ab      	cmp	r3, r5
 800e74c:	d30a      	bcc.n	800e764 <__exponent+0x5e>
 800e74e:	f10d 0309 	add.w	r3, sp, #9
 800e752:	1a9b      	subs	r3, r3, r2
 800e754:	42ac      	cmp	r4, r5
 800e756:	bf88      	it	hi
 800e758:	2300      	movhi	r3, #0
 800e75a:	3302      	adds	r3, #2
 800e75c:	4403      	add	r3, r0
 800e75e:	1a18      	subs	r0, r3, r0
 800e760:	b003      	add	sp, #12
 800e762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e764:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e768:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e76c:	e7ed      	b.n	800e74a <__exponent+0x44>
 800e76e:	2330      	movs	r3, #48	@ 0x30
 800e770:	3130      	adds	r1, #48	@ 0x30
 800e772:	7083      	strb	r3, [r0, #2]
 800e774:	70c1      	strb	r1, [r0, #3]
 800e776:	1d03      	adds	r3, r0, #4
 800e778:	e7f1      	b.n	800e75e <__exponent+0x58>
	...

0800e77c <_printf_float>:
 800e77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e780:	b08d      	sub	sp, #52	@ 0x34
 800e782:	460c      	mov	r4, r1
 800e784:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e788:	4616      	mov	r6, r2
 800e78a:	461f      	mov	r7, r3
 800e78c:	4605      	mov	r5, r0
 800e78e:	f000 ffdf 	bl	800f750 <_localeconv_r>
 800e792:	6803      	ldr	r3, [r0, #0]
 800e794:	9304      	str	r3, [sp, #16]
 800e796:	4618      	mov	r0, r3
 800e798:	f7f1 fd7a 	bl	8000290 <strlen>
 800e79c:	2300      	movs	r3, #0
 800e79e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7a0:	f8d8 3000 	ldr.w	r3, [r8]
 800e7a4:	9005      	str	r0, [sp, #20]
 800e7a6:	3307      	adds	r3, #7
 800e7a8:	f023 0307 	bic.w	r3, r3, #7
 800e7ac:	f103 0208 	add.w	r2, r3, #8
 800e7b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e7b4:	f8d4 b000 	ldr.w	fp, [r4]
 800e7b8:	f8c8 2000 	str.w	r2, [r8]
 800e7bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e7c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e7c4:	9307      	str	r3, [sp, #28]
 800e7c6:	f8cd 8018 	str.w	r8, [sp, #24]
 800e7ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e7ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7d2:	4b9c      	ldr	r3, [pc, #624]	@ (800ea44 <_printf_float+0x2c8>)
 800e7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7d8:	f7f2 f9b8 	bl	8000b4c <__aeabi_dcmpun>
 800e7dc:	bb70      	cbnz	r0, 800e83c <_printf_float+0xc0>
 800e7de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7e2:	4b98      	ldr	r3, [pc, #608]	@ (800ea44 <_printf_float+0x2c8>)
 800e7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7e8:	f7f2 f992 	bl	8000b10 <__aeabi_dcmple>
 800e7ec:	bb30      	cbnz	r0, 800e83c <_printf_float+0xc0>
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	4640      	mov	r0, r8
 800e7f4:	4649      	mov	r1, r9
 800e7f6:	f7f2 f981 	bl	8000afc <__aeabi_dcmplt>
 800e7fa:	b110      	cbz	r0, 800e802 <_printf_float+0x86>
 800e7fc:	232d      	movs	r3, #45	@ 0x2d
 800e7fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e802:	4a91      	ldr	r2, [pc, #580]	@ (800ea48 <_printf_float+0x2cc>)
 800e804:	4b91      	ldr	r3, [pc, #580]	@ (800ea4c <_printf_float+0x2d0>)
 800e806:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e80a:	bf94      	ite	ls
 800e80c:	4690      	movls	r8, r2
 800e80e:	4698      	movhi	r8, r3
 800e810:	2303      	movs	r3, #3
 800e812:	6123      	str	r3, [r4, #16]
 800e814:	f02b 0304 	bic.w	r3, fp, #4
 800e818:	6023      	str	r3, [r4, #0]
 800e81a:	f04f 0900 	mov.w	r9, #0
 800e81e:	9700      	str	r7, [sp, #0]
 800e820:	4633      	mov	r3, r6
 800e822:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e824:	4621      	mov	r1, r4
 800e826:	4628      	mov	r0, r5
 800e828:	f000 f9d2 	bl	800ebd0 <_printf_common>
 800e82c:	3001      	adds	r0, #1
 800e82e:	f040 808d 	bne.w	800e94c <_printf_float+0x1d0>
 800e832:	f04f 30ff 	mov.w	r0, #4294967295
 800e836:	b00d      	add	sp, #52	@ 0x34
 800e838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83c:	4642      	mov	r2, r8
 800e83e:	464b      	mov	r3, r9
 800e840:	4640      	mov	r0, r8
 800e842:	4649      	mov	r1, r9
 800e844:	f7f2 f982 	bl	8000b4c <__aeabi_dcmpun>
 800e848:	b140      	cbz	r0, 800e85c <_printf_float+0xe0>
 800e84a:	464b      	mov	r3, r9
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	bfbc      	itt	lt
 800e850:	232d      	movlt	r3, #45	@ 0x2d
 800e852:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e856:	4a7e      	ldr	r2, [pc, #504]	@ (800ea50 <_printf_float+0x2d4>)
 800e858:	4b7e      	ldr	r3, [pc, #504]	@ (800ea54 <_printf_float+0x2d8>)
 800e85a:	e7d4      	b.n	800e806 <_printf_float+0x8a>
 800e85c:	6863      	ldr	r3, [r4, #4]
 800e85e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e862:	9206      	str	r2, [sp, #24]
 800e864:	1c5a      	adds	r2, r3, #1
 800e866:	d13b      	bne.n	800e8e0 <_printf_float+0x164>
 800e868:	2306      	movs	r3, #6
 800e86a:	6063      	str	r3, [r4, #4]
 800e86c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e870:	2300      	movs	r3, #0
 800e872:	6022      	str	r2, [r4, #0]
 800e874:	9303      	str	r3, [sp, #12]
 800e876:	ab0a      	add	r3, sp, #40	@ 0x28
 800e878:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e87c:	ab09      	add	r3, sp, #36	@ 0x24
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	6861      	ldr	r1, [r4, #4]
 800e882:	ec49 8b10 	vmov	d0, r8, r9
 800e886:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e88a:	4628      	mov	r0, r5
 800e88c:	f7ff fed6 	bl	800e63c <__cvt>
 800e890:	9b06      	ldr	r3, [sp, #24]
 800e892:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e894:	2b47      	cmp	r3, #71	@ 0x47
 800e896:	4680      	mov	r8, r0
 800e898:	d129      	bne.n	800e8ee <_printf_float+0x172>
 800e89a:	1cc8      	adds	r0, r1, #3
 800e89c:	db02      	blt.n	800e8a4 <_printf_float+0x128>
 800e89e:	6863      	ldr	r3, [r4, #4]
 800e8a0:	4299      	cmp	r1, r3
 800e8a2:	dd41      	ble.n	800e928 <_printf_float+0x1ac>
 800e8a4:	f1aa 0a02 	sub.w	sl, sl, #2
 800e8a8:	fa5f fa8a 	uxtb.w	sl, sl
 800e8ac:	3901      	subs	r1, #1
 800e8ae:	4652      	mov	r2, sl
 800e8b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e8b4:	9109      	str	r1, [sp, #36]	@ 0x24
 800e8b6:	f7ff ff26 	bl	800e706 <__exponent>
 800e8ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e8bc:	1813      	adds	r3, r2, r0
 800e8be:	2a01      	cmp	r2, #1
 800e8c0:	4681      	mov	r9, r0
 800e8c2:	6123      	str	r3, [r4, #16]
 800e8c4:	dc02      	bgt.n	800e8cc <_printf_float+0x150>
 800e8c6:	6822      	ldr	r2, [r4, #0]
 800e8c8:	07d2      	lsls	r2, r2, #31
 800e8ca:	d501      	bpl.n	800e8d0 <_printf_float+0x154>
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	6123      	str	r3, [r4, #16]
 800e8d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d0a2      	beq.n	800e81e <_printf_float+0xa2>
 800e8d8:	232d      	movs	r3, #45	@ 0x2d
 800e8da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8de:	e79e      	b.n	800e81e <_printf_float+0xa2>
 800e8e0:	9a06      	ldr	r2, [sp, #24]
 800e8e2:	2a47      	cmp	r2, #71	@ 0x47
 800e8e4:	d1c2      	bne.n	800e86c <_printf_float+0xf0>
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d1c0      	bne.n	800e86c <_printf_float+0xf0>
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	e7bd      	b.n	800e86a <_printf_float+0xee>
 800e8ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e8f2:	d9db      	bls.n	800e8ac <_printf_float+0x130>
 800e8f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e8f8:	d118      	bne.n	800e92c <_printf_float+0x1b0>
 800e8fa:	2900      	cmp	r1, #0
 800e8fc:	6863      	ldr	r3, [r4, #4]
 800e8fe:	dd0b      	ble.n	800e918 <_printf_float+0x19c>
 800e900:	6121      	str	r1, [r4, #16]
 800e902:	b913      	cbnz	r3, 800e90a <_printf_float+0x18e>
 800e904:	6822      	ldr	r2, [r4, #0]
 800e906:	07d0      	lsls	r0, r2, #31
 800e908:	d502      	bpl.n	800e910 <_printf_float+0x194>
 800e90a:	3301      	adds	r3, #1
 800e90c:	440b      	add	r3, r1
 800e90e:	6123      	str	r3, [r4, #16]
 800e910:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e912:	f04f 0900 	mov.w	r9, #0
 800e916:	e7db      	b.n	800e8d0 <_printf_float+0x154>
 800e918:	b913      	cbnz	r3, 800e920 <_printf_float+0x1a4>
 800e91a:	6822      	ldr	r2, [r4, #0]
 800e91c:	07d2      	lsls	r2, r2, #31
 800e91e:	d501      	bpl.n	800e924 <_printf_float+0x1a8>
 800e920:	3302      	adds	r3, #2
 800e922:	e7f4      	b.n	800e90e <_printf_float+0x192>
 800e924:	2301      	movs	r3, #1
 800e926:	e7f2      	b.n	800e90e <_printf_float+0x192>
 800e928:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e92c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e92e:	4299      	cmp	r1, r3
 800e930:	db05      	blt.n	800e93e <_printf_float+0x1c2>
 800e932:	6823      	ldr	r3, [r4, #0]
 800e934:	6121      	str	r1, [r4, #16]
 800e936:	07d8      	lsls	r0, r3, #31
 800e938:	d5ea      	bpl.n	800e910 <_printf_float+0x194>
 800e93a:	1c4b      	adds	r3, r1, #1
 800e93c:	e7e7      	b.n	800e90e <_printf_float+0x192>
 800e93e:	2900      	cmp	r1, #0
 800e940:	bfd4      	ite	le
 800e942:	f1c1 0202 	rsble	r2, r1, #2
 800e946:	2201      	movgt	r2, #1
 800e948:	4413      	add	r3, r2
 800e94a:	e7e0      	b.n	800e90e <_printf_float+0x192>
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	055a      	lsls	r2, r3, #21
 800e950:	d407      	bmi.n	800e962 <_printf_float+0x1e6>
 800e952:	6923      	ldr	r3, [r4, #16]
 800e954:	4642      	mov	r2, r8
 800e956:	4631      	mov	r1, r6
 800e958:	4628      	mov	r0, r5
 800e95a:	47b8      	blx	r7
 800e95c:	3001      	adds	r0, #1
 800e95e:	d12b      	bne.n	800e9b8 <_printf_float+0x23c>
 800e960:	e767      	b.n	800e832 <_printf_float+0xb6>
 800e962:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e966:	f240 80dd 	bls.w	800eb24 <_printf_float+0x3a8>
 800e96a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e96e:	2200      	movs	r2, #0
 800e970:	2300      	movs	r3, #0
 800e972:	f7f2 f8b9 	bl	8000ae8 <__aeabi_dcmpeq>
 800e976:	2800      	cmp	r0, #0
 800e978:	d033      	beq.n	800e9e2 <_printf_float+0x266>
 800e97a:	4a37      	ldr	r2, [pc, #220]	@ (800ea58 <_printf_float+0x2dc>)
 800e97c:	2301      	movs	r3, #1
 800e97e:	4631      	mov	r1, r6
 800e980:	4628      	mov	r0, r5
 800e982:	47b8      	blx	r7
 800e984:	3001      	adds	r0, #1
 800e986:	f43f af54 	beq.w	800e832 <_printf_float+0xb6>
 800e98a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e98e:	4543      	cmp	r3, r8
 800e990:	db02      	blt.n	800e998 <_printf_float+0x21c>
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	07d8      	lsls	r0, r3, #31
 800e996:	d50f      	bpl.n	800e9b8 <_printf_float+0x23c>
 800e998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e99c:	4631      	mov	r1, r6
 800e99e:	4628      	mov	r0, r5
 800e9a0:	47b8      	blx	r7
 800e9a2:	3001      	adds	r0, #1
 800e9a4:	f43f af45 	beq.w	800e832 <_printf_float+0xb6>
 800e9a8:	f04f 0900 	mov.w	r9, #0
 800e9ac:	f108 38ff 	add.w	r8, r8, #4294967295
 800e9b0:	f104 0a1a 	add.w	sl, r4, #26
 800e9b4:	45c8      	cmp	r8, r9
 800e9b6:	dc09      	bgt.n	800e9cc <_printf_float+0x250>
 800e9b8:	6823      	ldr	r3, [r4, #0]
 800e9ba:	079b      	lsls	r3, r3, #30
 800e9bc:	f100 8103 	bmi.w	800ebc6 <_printf_float+0x44a>
 800e9c0:	68e0      	ldr	r0, [r4, #12]
 800e9c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9c4:	4298      	cmp	r0, r3
 800e9c6:	bfb8      	it	lt
 800e9c8:	4618      	movlt	r0, r3
 800e9ca:	e734      	b.n	800e836 <_printf_float+0xba>
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	4652      	mov	r2, sl
 800e9d0:	4631      	mov	r1, r6
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	47b8      	blx	r7
 800e9d6:	3001      	adds	r0, #1
 800e9d8:	f43f af2b 	beq.w	800e832 <_printf_float+0xb6>
 800e9dc:	f109 0901 	add.w	r9, r9, #1
 800e9e0:	e7e8      	b.n	800e9b4 <_printf_float+0x238>
 800e9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	dc39      	bgt.n	800ea5c <_printf_float+0x2e0>
 800e9e8:	4a1b      	ldr	r2, [pc, #108]	@ (800ea58 <_printf_float+0x2dc>)
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	4631      	mov	r1, r6
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	47b8      	blx	r7
 800e9f2:	3001      	adds	r0, #1
 800e9f4:	f43f af1d 	beq.w	800e832 <_printf_float+0xb6>
 800e9f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e9fc:	ea59 0303 	orrs.w	r3, r9, r3
 800ea00:	d102      	bne.n	800ea08 <_printf_float+0x28c>
 800ea02:	6823      	ldr	r3, [r4, #0]
 800ea04:	07d9      	lsls	r1, r3, #31
 800ea06:	d5d7      	bpl.n	800e9b8 <_printf_float+0x23c>
 800ea08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea0c:	4631      	mov	r1, r6
 800ea0e:	4628      	mov	r0, r5
 800ea10:	47b8      	blx	r7
 800ea12:	3001      	adds	r0, #1
 800ea14:	f43f af0d 	beq.w	800e832 <_printf_float+0xb6>
 800ea18:	f04f 0a00 	mov.w	sl, #0
 800ea1c:	f104 0b1a 	add.w	fp, r4, #26
 800ea20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea22:	425b      	negs	r3, r3
 800ea24:	4553      	cmp	r3, sl
 800ea26:	dc01      	bgt.n	800ea2c <_printf_float+0x2b0>
 800ea28:	464b      	mov	r3, r9
 800ea2a:	e793      	b.n	800e954 <_printf_float+0x1d8>
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	465a      	mov	r2, fp
 800ea30:	4631      	mov	r1, r6
 800ea32:	4628      	mov	r0, r5
 800ea34:	47b8      	blx	r7
 800ea36:	3001      	adds	r0, #1
 800ea38:	f43f aefb 	beq.w	800e832 <_printf_float+0xb6>
 800ea3c:	f10a 0a01 	add.w	sl, sl, #1
 800ea40:	e7ee      	b.n	800ea20 <_printf_float+0x2a4>
 800ea42:	bf00      	nop
 800ea44:	7fefffff 	.word	0x7fefffff
 800ea48:	080148b5 	.word	0x080148b5
 800ea4c:	080148b9 	.word	0x080148b9
 800ea50:	080148bd 	.word	0x080148bd
 800ea54:	080148c1 	.word	0x080148c1
 800ea58:	08014ce8 	.word	0x08014ce8
 800ea5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ea5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ea62:	4553      	cmp	r3, sl
 800ea64:	bfa8      	it	ge
 800ea66:	4653      	movge	r3, sl
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	4699      	mov	r9, r3
 800ea6c:	dc36      	bgt.n	800eadc <_printf_float+0x360>
 800ea6e:	f04f 0b00 	mov.w	fp, #0
 800ea72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea76:	f104 021a 	add.w	r2, r4, #26
 800ea7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ea7c:	9306      	str	r3, [sp, #24]
 800ea7e:	eba3 0309 	sub.w	r3, r3, r9
 800ea82:	455b      	cmp	r3, fp
 800ea84:	dc31      	bgt.n	800eaea <_printf_float+0x36e>
 800ea86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea88:	459a      	cmp	sl, r3
 800ea8a:	dc3a      	bgt.n	800eb02 <_printf_float+0x386>
 800ea8c:	6823      	ldr	r3, [r4, #0]
 800ea8e:	07da      	lsls	r2, r3, #31
 800ea90:	d437      	bmi.n	800eb02 <_printf_float+0x386>
 800ea92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea94:	ebaa 0903 	sub.w	r9, sl, r3
 800ea98:	9b06      	ldr	r3, [sp, #24]
 800ea9a:	ebaa 0303 	sub.w	r3, sl, r3
 800ea9e:	4599      	cmp	r9, r3
 800eaa0:	bfa8      	it	ge
 800eaa2:	4699      	movge	r9, r3
 800eaa4:	f1b9 0f00 	cmp.w	r9, #0
 800eaa8:	dc33      	bgt.n	800eb12 <_printf_float+0x396>
 800eaaa:	f04f 0800 	mov.w	r8, #0
 800eaae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eab2:	f104 0b1a 	add.w	fp, r4, #26
 800eab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eab8:	ebaa 0303 	sub.w	r3, sl, r3
 800eabc:	eba3 0309 	sub.w	r3, r3, r9
 800eac0:	4543      	cmp	r3, r8
 800eac2:	f77f af79 	ble.w	800e9b8 <_printf_float+0x23c>
 800eac6:	2301      	movs	r3, #1
 800eac8:	465a      	mov	r2, fp
 800eaca:	4631      	mov	r1, r6
 800eacc:	4628      	mov	r0, r5
 800eace:	47b8      	blx	r7
 800ead0:	3001      	adds	r0, #1
 800ead2:	f43f aeae 	beq.w	800e832 <_printf_float+0xb6>
 800ead6:	f108 0801 	add.w	r8, r8, #1
 800eada:	e7ec      	b.n	800eab6 <_printf_float+0x33a>
 800eadc:	4642      	mov	r2, r8
 800eade:	4631      	mov	r1, r6
 800eae0:	4628      	mov	r0, r5
 800eae2:	47b8      	blx	r7
 800eae4:	3001      	adds	r0, #1
 800eae6:	d1c2      	bne.n	800ea6e <_printf_float+0x2f2>
 800eae8:	e6a3      	b.n	800e832 <_printf_float+0xb6>
 800eaea:	2301      	movs	r3, #1
 800eaec:	4631      	mov	r1, r6
 800eaee:	4628      	mov	r0, r5
 800eaf0:	9206      	str	r2, [sp, #24]
 800eaf2:	47b8      	blx	r7
 800eaf4:	3001      	adds	r0, #1
 800eaf6:	f43f ae9c 	beq.w	800e832 <_printf_float+0xb6>
 800eafa:	9a06      	ldr	r2, [sp, #24]
 800eafc:	f10b 0b01 	add.w	fp, fp, #1
 800eb00:	e7bb      	b.n	800ea7a <_printf_float+0x2fe>
 800eb02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb06:	4631      	mov	r1, r6
 800eb08:	4628      	mov	r0, r5
 800eb0a:	47b8      	blx	r7
 800eb0c:	3001      	adds	r0, #1
 800eb0e:	d1c0      	bne.n	800ea92 <_printf_float+0x316>
 800eb10:	e68f      	b.n	800e832 <_printf_float+0xb6>
 800eb12:	9a06      	ldr	r2, [sp, #24]
 800eb14:	464b      	mov	r3, r9
 800eb16:	4442      	add	r2, r8
 800eb18:	4631      	mov	r1, r6
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	47b8      	blx	r7
 800eb1e:	3001      	adds	r0, #1
 800eb20:	d1c3      	bne.n	800eaaa <_printf_float+0x32e>
 800eb22:	e686      	b.n	800e832 <_printf_float+0xb6>
 800eb24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eb28:	f1ba 0f01 	cmp.w	sl, #1
 800eb2c:	dc01      	bgt.n	800eb32 <_printf_float+0x3b6>
 800eb2e:	07db      	lsls	r3, r3, #31
 800eb30:	d536      	bpl.n	800eba0 <_printf_float+0x424>
 800eb32:	2301      	movs	r3, #1
 800eb34:	4642      	mov	r2, r8
 800eb36:	4631      	mov	r1, r6
 800eb38:	4628      	mov	r0, r5
 800eb3a:	47b8      	blx	r7
 800eb3c:	3001      	adds	r0, #1
 800eb3e:	f43f ae78 	beq.w	800e832 <_printf_float+0xb6>
 800eb42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb46:	4631      	mov	r1, r6
 800eb48:	4628      	mov	r0, r5
 800eb4a:	47b8      	blx	r7
 800eb4c:	3001      	adds	r0, #1
 800eb4e:	f43f ae70 	beq.w	800e832 <_printf_float+0xb6>
 800eb52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eb56:	2200      	movs	r2, #0
 800eb58:	2300      	movs	r3, #0
 800eb5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb5e:	f7f1 ffc3 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb62:	b9c0      	cbnz	r0, 800eb96 <_printf_float+0x41a>
 800eb64:	4653      	mov	r3, sl
 800eb66:	f108 0201 	add.w	r2, r8, #1
 800eb6a:	4631      	mov	r1, r6
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	47b8      	blx	r7
 800eb70:	3001      	adds	r0, #1
 800eb72:	d10c      	bne.n	800eb8e <_printf_float+0x412>
 800eb74:	e65d      	b.n	800e832 <_printf_float+0xb6>
 800eb76:	2301      	movs	r3, #1
 800eb78:	465a      	mov	r2, fp
 800eb7a:	4631      	mov	r1, r6
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	47b8      	blx	r7
 800eb80:	3001      	adds	r0, #1
 800eb82:	f43f ae56 	beq.w	800e832 <_printf_float+0xb6>
 800eb86:	f108 0801 	add.w	r8, r8, #1
 800eb8a:	45d0      	cmp	r8, sl
 800eb8c:	dbf3      	blt.n	800eb76 <_printf_float+0x3fa>
 800eb8e:	464b      	mov	r3, r9
 800eb90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eb94:	e6df      	b.n	800e956 <_printf_float+0x1da>
 800eb96:	f04f 0800 	mov.w	r8, #0
 800eb9a:	f104 0b1a 	add.w	fp, r4, #26
 800eb9e:	e7f4      	b.n	800eb8a <_printf_float+0x40e>
 800eba0:	2301      	movs	r3, #1
 800eba2:	4642      	mov	r2, r8
 800eba4:	e7e1      	b.n	800eb6a <_printf_float+0x3ee>
 800eba6:	2301      	movs	r3, #1
 800eba8:	464a      	mov	r2, r9
 800ebaa:	4631      	mov	r1, r6
 800ebac:	4628      	mov	r0, r5
 800ebae:	47b8      	blx	r7
 800ebb0:	3001      	adds	r0, #1
 800ebb2:	f43f ae3e 	beq.w	800e832 <_printf_float+0xb6>
 800ebb6:	f108 0801 	add.w	r8, r8, #1
 800ebba:	68e3      	ldr	r3, [r4, #12]
 800ebbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ebbe:	1a5b      	subs	r3, r3, r1
 800ebc0:	4543      	cmp	r3, r8
 800ebc2:	dcf0      	bgt.n	800eba6 <_printf_float+0x42a>
 800ebc4:	e6fc      	b.n	800e9c0 <_printf_float+0x244>
 800ebc6:	f04f 0800 	mov.w	r8, #0
 800ebca:	f104 0919 	add.w	r9, r4, #25
 800ebce:	e7f4      	b.n	800ebba <_printf_float+0x43e>

0800ebd0 <_printf_common>:
 800ebd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd4:	4616      	mov	r6, r2
 800ebd6:	4698      	mov	r8, r3
 800ebd8:	688a      	ldr	r2, [r1, #8]
 800ebda:	690b      	ldr	r3, [r1, #16]
 800ebdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	bfb8      	it	lt
 800ebe4:	4613      	movlt	r3, r2
 800ebe6:	6033      	str	r3, [r6, #0]
 800ebe8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ebec:	4607      	mov	r7, r0
 800ebee:	460c      	mov	r4, r1
 800ebf0:	b10a      	cbz	r2, 800ebf6 <_printf_common+0x26>
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	6033      	str	r3, [r6, #0]
 800ebf6:	6823      	ldr	r3, [r4, #0]
 800ebf8:	0699      	lsls	r1, r3, #26
 800ebfa:	bf42      	ittt	mi
 800ebfc:	6833      	ldrmi	r3, [r6, #0]
 800ebfe:	3302      	addmi	r3, #2
 800ec00:	6033      	strmi	r3, [r6, #0]
 800ec02:	6825      	ldr	r5, [r4, #0]
 800ec04:	f015 0506 	ands.w	r5, r5, #6
 800ec08:	d106      	bne.n	800ec18 <_printf_common+0x48>
 800ec0a:	f104 0a19 	add.w	sl, r4, #25
 800ec0e:	68e3      	ldr	r3, [r4, #12]
 800ec10:	6832      	ldr	r2, [r6, #0]
 800ec12:	1a9b      	subs	r3, r3, r2
 800ec14:	42ab      	cmp	r3, r5
 800ec16:	dc26      	bgt.n	800ec66 <_printf_common+0x96>
 800ec18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec1c:	6822      	ldr	r2, [r4, #0]
 800ec1e:	3b00      	subs	r3, #0
 800ec20:	bf18      	it	ne
 800ec22:	2301      	movne	r3, #1
 800ec24:	0692      	lsls	r2, r2, #26
 800ec26:	d42b      	bmi.n	800ec80 <_printf_common+0xb0>
 800ec28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ec2c:	4641      	mov	r1, r8
 800ec2e:	4638      	mov	r0, r7
 800ec30:	47c8      	blx	r9
 800ec32:	3001      	adds	r0, #1
 800ec34:	d01e      	beq.n	800ec74 <_printf_common+0xa4>
 800ec36:	6823      	ldr	r3, [r4, #0]
 800ec38:	6922      	ldr	r2, [r4, #16]
 800ec3a:	f003 0306 	and.w	r3, r3, #6
 800ec3e:	2b04      	cmp	r3, #4
 800ec40:	bf02      	ittt	eq
 800ec42:	68e5      	ldreq	r5, [r4, #12]
 800ec44:	6833      	ldreq	r3, [r6, #0]
 800ec46:	1aed      	subeq	r5, r5, r3
 800ec48:	68a3      	ldr	r3, [r4, #8]
 800ec4a:	bf0c      	ite	eq
 800ec4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec50:	2500      	movne	r5, #0
 800ec52:	4293      	cmp	r3, r2
 800ec54:	bfc4      	itt	gt
 800ec56:	1a9b      	subgt	r3, r3, r2
 800ec58:	18ed      	addgt	r5, r5, r3
 800ec5a:	2600      	movs	r6, #0
 800ec5c:	341a      	adds	r4, #26
 800ec5e:	42b5      	cmp	r5, r6
 800ec60:	d11a      	bne.n	800ec98 <_printf_common+0xc8>
 800ec62:	2000      	movs	r0, #0
 800ec64:	e008      	b.n	800ec78 <_printf_common+0xa8>
 800ec66:	2301      	movs	r3, #1
 800ec68:	4652      	mov	r2, sl
 800ec6a:	4641      	mov	r1, r8
 800ec6c:	4638      	mov	r0, r7
 800ec6e:	47c8      	blx	r9
 800ec70:	3001      	adds	r0, #1
 800ec72:	d103      	bne.n	800ec7c <_printf_common+0xac>
 800ec74:	f04f 30ff 	mov.w	r0, #4294967295
 800ec78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec7c:	3501      	adds	r5, #1
 800ec7e:	e7c6      	b.n	800ec0e <_printf_common+0x3e>
 800ec80:	18e1      	adds	r1, r4, r3
 800ec82:	1c5a      	adds	r2, r3, #1
 800ec84:	2030      	movs	r0, #48	@ 0x30
 800ec86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ec8a:	4422      	add	r2, r4
 800ec8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ec90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ec94:	3302      	adds	r3, #2
 800ec96:	e7c7      	b.n	800ec28 <_printf_common+0x58>
 800ec98:	2301      	movs	r3, #1
 800ec9a:	4622      	mov	r2, r4
 800ec9c:	4641      	mov	r1, r8
 800ec9e:	4638      	mov	r0, r7
 800eca0:	47c8      	blx	r9
 800eca2:	3001      	adds	r0, #1
 800eca4:	d0e6      	beq.n	800ec74 <_printf_common+0xa4>
 800eca6:	3601      	adds	r6, #1
 800eca8:	e7d9      	b.n	800ec5e <_printf_common+0x8e>
	...

0800ecac <_printf_i>:
 800ecac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecb0:	7e0f      	ldrb	r7, [r1, #24]
 800ecb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ecb4:	2f78      	cmp	r7, #120	@ 0x78
 800ecb6:	4691      	mov	r9, r2
 800ecb8:	4680      	mov	r8, r0
 800ecba:	460c      	mov	r4, r1
 800ecbc:	469a      	mov	sl, r3
 800ecbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ecc2:	d807      	bhi.n	800ecd4 <_printf_i+0x28>
 800ecc4:	2f62      	cmp	r7, #98	@ 0x62
 800ecc6:	d80a      	bhi.n	800ecde <_printf_i+0x32>
 800ecc8:	2f00      	cmp	r7, #0
 800ecca:	f000 80d2 	beq.w	800ee72 <_printf_i+0x1c6>
 800ecce:	2f58      	cmp	r7, #88	@ 0x58
 800ecd0:	f000 80b9 	beq.w	800ee46 <_printf_i+0x19a>
 800ecd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ecd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ecdc:	e03a      	b.n	800ed54 <_printf_i+0xa8>
 800ecde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ece2:	2b15      	cmp	r3, #21
 800ece4:	d8f6      	bhi.n	800ecd4 <_printf_i+0x28>
 800ece6:	a101      	add	r1, pc, #4	@ (adr r1, 800ecec <_printf_i+0x40>)
 800ece8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ecec:	0800ed45 	.word	0x0800ed45
 800ecf0:	0800ed59 	.word	0x0800ed59
 800ecf4:	0800ecd5 	.word	0x0800ecd5
 800ecf8:	0800ecd5 	.word	0x0800ecd5
 800ecfc:	0800ecd5 	.word	0x0800ecd5
 800ed00:	0800ecd5 	.word	0x0800ecd5
 800ed04:	0800ed59 	.word	0x0800ed59
 800ed08:	0800ecd5 	.word	0x0800ecd5
 800ed0c:	0800ecd5 	.word	0x0800ecd5
 800ed10:	0800ecd5 	.word	0x0800ecd5
 800ed14:	0800ecd5 	.word	0x0800ecd5
 800ed18:	0800ee59 	.word	0x0800ee59
 800ed1c:	0800ed83 	.word	0x0800ed83
 800ed20:	0800ee13 	.word	0x0800ee13
 800ed24:	0800ecd5 	.word	0x0800ecd5
 800ed28:	0800ecd5 	.word	0x0800ecd5
 800ed2c:	0800ee7b 	.word	0x0800ee7b
 800ed30:	0800ecd5 	.word	0x0800ecd5
 800ed34:	0800ed83 	.word	0x0800ed83
 800ed38:	0800ecd5 	.word	0x0800ecd5
 800ed3c:	0800ecd5 	.word	0x0800ecd5
 800ed40:	0800ee1b 	.word	0x0800ee1b
 800ed44:	6833      	ldr	r3, [r6, #0]
 800ed46:	1d1a      	adds	r2, r3, #4
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	6032      	str	r2, [r6, #0]
 800ed4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ed54:	2301      	movs	r3, #1
 800ed56:	e09d      	b.n	800ee94 <_printf_i+0x1e8>
 800ed58:	6833      	ldr	r3, [r6, #0]
 800ed5a:	6820      	ldr	r0, [r4, #0]
 800ed5c:	1d19      	adds	r1, r3, #4
 800ed5e:	6031      	str	r1, [r6, #0]
 800ed60:	0606      	lsls	r6, r0, #24
 800ed62:	d501      	bpl.n	800ed68 <_printf_i+0xbc>
 800ed64:	681d      	ldr	r5, [r3, #0]
 800ed66:	e003      	b.n	800ed70 <_printf_i+0xc4>
 800ed68:	0645      	lsls	r5, r0, #25
 800ed6a:	d5fb      	bpl.n	800ed64 <_printf_i+0xb8>
 800ed6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ed70:	2d00      	cmp	r5, #0
 800ed72:	da03      	bge.n	800ed7c <_printf_i+0xd0>
 800ed74:	232d      	movs	r3, #45	@ 0x2d
 800ed76:	426d      	negs	r5, r5
 800ed78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed7c:	4859      	ldr	r0, [pc, #356]	@ (800eee4 <_printf_i+0x238>)
 800ed7e:	230a      	movs	r3, #10
 800ed80:	e011      	b.n	800eda6 <_printf_i+0xfa>
 800ed82:	6821      	ldr	r1, [r4, #0]
 800ed84:	6833      	ldr	r3, [r6, #0]
 800ed86:	0608      	lsls	r0, r1, #24
 800ed88:	f853 5b04 	ldr.w	r5, [r3], #4
 800ed8c:	d402      	bmi.n	800ed94 <_printf_i+0xe8>
 800ed8e:	0649      	lsls	r1, r1, #25
 800ed90:	bf48      	it	mi
 800ed92:	b2ad      	uxthmi	r5, r5
 800ed94:	2f6f      	cmp	r7, #111	@ 0x6f
 800ed96:	4853      	ldr	r0, [pc, #332]	@ (800eee4 <_printf_i+0x238>)
 800ed98:	6033      	str	r3, [r6, #0]
 800ed9a:	bf14      	ite	ne
 800ed9c:	230a      	movne	r3, #10
 800ed9e:	2308      	moveq	r3, #8
 800eda0:	2100      	movs	r1, #0
 800eda2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eda6:	6866      	ldr	r6, [r4, #4]
 800eda8:	60a6      	str	r6, [r4, #8]
 800edaa:	2e00      	cmp	r6, #0
 800edac:	bfa2      	ittt	ge
 800edae:	6821      	ldrge	r1, [r4, #0]
 800edb0:	f021 0104 	bicge.w	r1, r1, #4
 800edb4:	6021      	strge	r1, [r4, #0]
 800edb6:	b90d      	cbnz	r5, 800edbc <_printf_i+0x110>
 800edb8:	2e00      	cmp	r6, #0
 800edba:	d04b      	beq.n	800ee54 <_printf_i+0x1a8>
 800edbc:	4616      	mov	r6, r2
 800edbe:	fbb5 f1f3 	udiv	r1, r5, r3
 800edc2:	fb03 5711 	mls	r7, r3, r1, r5
 800edc6:	5dc7      	ldrb	r7, [r0, r7]
 800edc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800edcc:	462f      	mov	r7, r5
 800edce:	42bb      	cmp	r3, r7
 800edd0:	460d      	mov	r5, r1
 800edd2:	d9f4      	bls.n	800edbe <_printf_i+0x112>
 800edd4:	2b08      	cmp	r3, #8
 800edd6:	d10b      	bne.n	800edf0 <_printf_i+0x144>
 800edd8:	6823      	ldr	r3, [r4, #0]
 800edda:	07df      	lsls	r7, r3, #31
 800eddc:	d508      	bpl.n	800edf0 <_printf_i+0x144>
 800edde:	6923      	ldr	r3, [r4, #16]
 800ede0:	6861      	ldr	r1, [r4, #4]
 800ede2:	4299      	cmp	r1, r3
 800ede4:	bfde      	ittt	le
 800ede6:	2330      	movle	r3, #48	@ 0x30
 800ede8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800edec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800edf0:	1b92      	subs	r2, r2, r6
 800edf2:	6122      	str	r2, [r4, #16]
 800edf4:	f8cd a000 	str.w	sl, [sp]
 800edf8:	464b      	mov	r3, r9
 800edfa:	aa03      	add	r2, sp, #12
 800edfc:	4621      	mov	r1, r4
 800edfe:	4640      	mov	r0, r8
 800ee00:	f7ff fee6 	bl	800ebd0 <_printf_common>
 800ee04:	3001      	adds	r0, #1
 800ee06:	d14a      	bne.n	800ee9e <_printf_i+0x1f2>
 800ee08:	f04f 30ff 	mov.w	r0, #4294967295
 800ee0c:	b004      	add	sp, #16
 800ee0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee12:	6823      	ldr	r3, [r4, #0]
 800ee14:	f043 0320 	orr.w	r3, r3, #32
 800ee18:	6023      	str	r3, [r4, #0]
 800ee1a:	4833      	ldr	r0, [pc, #204]	@ (800eee8 <_printf_i+0x23c>)
 800ee1c:	2778      	movs	r7, #120	@ 0x78
 800ee1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee22:	6823      	ldr	r3, [r4, #0]
 800ee24:	6831      	ldr	r1, [r6, #0]
 800ee26:	061f      	lsls	r7, r3, #24
 800ee28:	f851 5b04 	ldr.w	r5, [r1], #4
 800ee2c:	d402      	bmi.n	800ee34 <_printf_i+0x188>
 800ee2e:	065f      	lsls	r7, r3, #25
 800ee30:	bf48      	it	mi
 800ee32:	b2ad      	uxthmi	r5, r5
 800ee34:	6031      	str	r1, [r6, #0]
 800ee36:	07d9      	lsls	r1, r3, #31
 800ee38:	bf44      	itt	mi
 800ee3a:	f043 0320 	orrmi.w	r3, r3, #32
 800ee3e:	6023      	strmi	r3, [r4, #0]
 800ee40:	b11d      	cbz	r5, 800ee4a <_printf_i+0x19e>
 800ee42:	2310      	movs	r3, #16
 800ee44:	e7ac      	b.n	800eda0 <_printf_i+0xf4>
 800ee46:	4827      	ldr	r0, [pc, #156]	@ (800eee4 <_printf_i+0x238>)
 800ee48:	e7e9      	b.n	800ee1e <_printf_i+0x172>
 800ee4a:	6823      	ldr	r3, [r4, #0]
 800ee4c:	f023 0320 	bic.w	r3, r3, #32
 800ee50:	6023      	str	r3, [r4, #0]
 800ee52:	e7f6      	b.n	800ee42 <_printf_i+0x196>
 800ee54:	4616      	mov	r6, r2
 800ee56:	e7bd      	b.n	800edd4 <_printf_i+0x128>
 800ee58:	6833      	ldr	r3, [r6, #0]
 800ee5a:	6825      	ldr	r5, [r4, #0]
 800ee5c:	6961      	ldr	r1, [r4, #20]
 800ee5e:	1d18      	adds	r0, r3, #4
 800ee60:	6030      	str	r0, [r6, #0]
 800ee62:	062e      	lsls	r6, r5, #24
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	d501      	bpl.n	800ee6c <_printf_i+0x1c0>
 800ee68:	6019      	str	r1, [r3, #0]
 800ee6a:	e002      	b.n	800ee72 <_printf_i+0x1c6>
 800ee6c:	0668      	lsls	r0, r5, #25
 800ee6e:	d5fb      	bpl.n	800ee68 <_printf_i+0x1bc>
 800ee70:	8019      	strh	r1, [r3, #0]
 800ee72:	2300      	movs	r3, #0
 800ee74:	6123      	str	r3, [r4, #16]
 800ee76:	4616      	mov	r6, r2
 800ee78:	e7bc      	b.n	800edf4 <_printf_i+0x148>
 800ee7a:	6833      	ldr	r3, [r6, #0]
 800ee7c:	1d1a      	adds	r2, r3, #4
 800ee7e:	6032      	str	r2, [r6, #0]
 800ee80:	681e      	ldr	r6, [r3, #0]
 800ee82:	6862      	ldr	r2, [r4, #4]
 800ee84:	2100      	movs	r1, #0
 800ee86:	4630      	mov	r0, r6
 800ee88:	f7f1 f9b2 	bl	80001f0 <memchr>
 800ee8c:	b108      	cbz	r0, 800ee92 <_printf_i+0x1e6>
 800ee8e:	1b80      	subs	r0, r0, r6
 800ee90:	6060      	str	r0, [r4, #4]
 800ee92:	6863      	ldr	r3, [r4, #4]
 800ee94:	6123      	str	r3, [r4, #16]
 800ee96:	2300      	movs	r3, #0
 800ee98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee9c:	e7aa      	b.n	800edf4 <_printf_i+0x148>
 800ee9e:	6923      	ldr	r3, [r4, #16]
 800eea0:	4632      	mov	r2, r6
 800eea2:	4649      	mov	r1, r9
 800eea4:	4640      	mov	r0, r8
 800eea6:	47d0      	blx	sl
 800eea8:	3001      	adds	r0, #1
 800eeaa:	d0ad      	beq.n	800ee08 <_printf_i+0x15c>
 800eeac:	6823      	ldr	r3, [r4, #0]
 800eeae:	079b      	lsls	r3, r3, #30
 800eeb0:	d413      	bmi.n	800eeda <_printf_i+0x22e>
 800eeb2:	68e0      	ldr	r0, [r4, #12]
 800eeb4:	9b03      	ldr	r3, [sp, #12]
 800eeb6:	4298      	cmp	r0, r3
 800eeb8:	bfb8      	it	lt
 800eeba:	4618      	movlt	r0, r3
 800eebc:	e7a6      	b.n	800ee0c <_printf_i+0x160>
 800eebe:	2301      	movs	r3, #1
 800eec0:	4632      	mov	r2, r6
 800eec2:	4649      	mov	r1, r9
 800eec4:	4640      	mov	r0, r8
 800eec6:	47d0      	blx	sl
 800eec8:	3001      	adds	r0, #1
 800eeca:	d09d      	beq.n	800ee08 <_printf_i+0x15c>
 800eecc:	3501      	adds	r5, #1
 800eece:	68e3      	ldr	r3, [r4, #12]
 800eed0:	9903      	ldr	r1, [sp, #12]
 800eed2:	1a5b      	subs	r3, r3, r1
 800eed4:	42ab      	cmp	r3, r5
 800eed6:	dcf2      	bgt.n	800eebe <_printf_i+0x212>
 800eed8:	e7eb      	b.n	800eeb2 <_printf_i+0x206>
 800eeda:	2500      	movs	r5, #0
 800eedc:	f104 0619 	add.w	r6, r4, #25
 800eee0:	e7f5      	b.n	800eece <_printf_i+0x222>
 800eee2:	bf00      	nop
 800eee4:	080148c5 	.word	0x080148c5
 800eee8:	080148d6 	.word	0x080148d6

0800eeec <_scanf_float>:
 800eeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef0:	b087      	sub	sp, #28
 800eef2:	4617      	mov	r7, r2
 800eef4:	9303      	str	r3, [sp, #12]
 800eef6:	688b      	ldr	r3, [r1, #8]
 800eef8:	1e5a      	subs	r2, r3, #1
 800eefa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800eefe:	bf81      	itttt	hi
 800ef00:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ef04:	eb03 0b05 	addhi.w	fp, r3, r5
 800ef08:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ef0c:	608b      	strhi	r3, [r1, #8]
 800ef0e:	680b      	ldr	r3, [r1, #0]
 800ef10:	460a      	mov	r2, r1
 800ef12:	f04f 0500 	mov.w	r5, #0
 800ef16:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ef1a:	f842 3b1c 	str.w	r3, [r2], #28
 800ef1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ef22:	4680      	mov	r8, r0
 800ef24:	460c      	mov	r4, r1
 800ef26:	bf98      	it	ls
 800ef28:	f04f 0b00 	movls.w	fp, #0
 800ef2c:	9201      	str	r2, [sp, #4]
 800ef2e:	4616      	mov	r6, r2
 800ef30:	46aa      	mov	sl, r5
 800ef32:	46a9      	mov	r9, r5
 800ef34:	9502      	str	r5, [sp, #8]
 800ef36:	68a2      	ldr	r2, [r4, #8]
 800ef38:	b152      	cbz	r2, 800ef50 <_scanf_float+0x64>
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	2b4e      	cmp	r3, #78	@ 0x4e
 800ef40:	d864      	bhi.n	800f00c <_scanf_float+0x120>
 800ef42:	2b40      	cmp	r3, #64	@ 0x40
 800ef44:	d83c      	bhi.n	800efc0 <_scanf_float+0xd4>
 800ef46:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ef4a:	b2c8      	uxtb	r0, r1
 800ef4c:	280e      	cmp	r0, #14
 800ef4e:	d93a      	bls.n	800efc6 <_scanf_float+0xda>
 800ef50:	f1b9 0f00 	cmp.w	r9, #0
 800ef54:	d003      	beq.n	800ef5e <_scanf_float+0x72>
 800ef56:	6823      	ldr	r3, [r4, #0]
 800ef58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef5c:	6023      	str	r3, [r4, #0]
 800ef5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef62:	f1ba 0f01 	cmp.w	sl, #1
 800ef66:	f200 8117 	bhi.w	800f198 <_scanf_float+0x2ac>
 800ef6a:	9b01      	ldr	r3, [sp, #4]
 800ef6c:	429e      	cmp	r6, r3
 800ef6e:	f200 8108 	bhi.w	800f182 <_scanf_float+0x296>
 800ef72:	2001      	movs	r0, #1
 800ef74:	b007      	add	sp, #28
 800ef76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef7a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ef7e:	2a0d      	cmp	r2, #13
 800ef80:	d8e6      	bhi.n	800ef50 <_scanf_float+0x64>
 800ef82:	a101      	add	r1, pc, #4	@ (adr r1, 800ef88 <_scanf_float+0x9c>)
 800ef84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ef88:	0800f0cf 	.word	0x0800f0cf
 800ef8c:	0800ef51 	.word	0x0800ef51
 800ef90:	0800ef51 	.word	0x0800ef51
 800ef94:	0800ef51 	.word	0x0800ef51
 800ef98:	0800f12f 	.word	0x0800f12f
 800ef9c:	0800f107 	.word	0x0800f107
 800efa0:	0800ef51 	.word	0x0800ef51
 800efa4:	0800ef51 	.word	0x0800ef51
 800efa8:	0800f0dd 	.word	0x0800f0dd
 800efac:	0800ef51 	.word	0x0800ef51
 800efb0:	0800ef51 	.word	0x0800ef51
 800efb4:	0800ef51 	.word	0x0800ef51
 800efb8:	0800ef51 	.word	0x0800ef51
 800efbc:	0800f095 	.word	0x0800f095
 800efc0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800efc4:	e7db      	b.n	800ef7e <_scanf_float+0x92>
 800efc6:	290e      	cmp	r1, #14
 800efc8:	d8c2      	bhi.n	800ef50 <_scanf_float+0x64>
 800efca:	a001      	add	r0, pc, #4	@ (adr r0, 800efd0 <_scanf_float+0xe4>)
 800efcc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800efd0:	0800f085 	.word	0x0800f085
 800efd4:	0800ef51 	.word	0x0800ef51
 800efd8:	0800f085 	.word	0x0800f085
 800efdc:	0800f11b 	.word	0x0800f11b
 800efe0:	0800ef51 	.word	0x0800ef51
 800efe4:	0800f02d 	.word	0x0800f02d
 800efe8:	0800f06b 	.word	0x0800f06b
 800efec:	0800f06b 	.word	0x0800f06b
 800eff0:	0800f06b 	.word	0x0800f06b
 800eff4:	0800f06b 	.word	0x0800f06b
 800eff8:	0800f06b 	.word	0x0800f06b
 800effc:	0800f06b 	.word	0x0800f06b
 800f000:	0800f06b 	.word	0x0800f06b
 800f004:	0800f06b 	.word	0x0800f06b
 800f008:	0800f06b 	.word	0x0800f06b
 800f00c:	2b6e      	cmp	r3, #110	@ 0x6e
 800f00e:	d809      	bhi.n	800f024 <_scanf_float+0x138>
 800f010:	2b60      	cmp	r3, #96	@ 0x60
 800f012:	d8b2      	bhi.n	800ef7a <_scanf_float+0x8e>
 800f014:	2b54      	cmp	r3, #84	@ 0x54
 800f016:	d07b      	beq.n	800f110 <_scanf_float+0x224>
 800f018:	2b59      	cmp	r3, #89	@ 0x59
 800f01a:	d199      	bne.n	800ef50 <_scanf_float+0x64>
 800f01c:	2d07      	cmp	r5, #7
 800f01e:	d197      	bne.n	800ef50 <_scanf_float+0x64>
 800f020:	2508      	movs	r5, #8
 800f022:	e02c      	b.n	800f07e <_scanf_float+0x192>
 800f024:	2b74      	cmp	r3, #116	@ 0x74
 800f026:	d073      	beq.n	800f110 <_scanf_float+0x224>
 800f028:	2b79      	cmp	r3, #121	@ 0x79
 800f02a:	e7f6      	b.n	800f01a <_scanf_float+0x12e>
 800f02c:	6821      	ldr	r1, [r4, #0]
 800f02e:	05c8      	lsls	r0, r1, #23
 800f030:	d51b      	bpl.n	800f06a <_scanf_float+0x17e>
 800f032:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f036:	6021      	str	r1, [r4, #0]
 800f038:	f109 0901 	add.w	r9, r9, #1
 800f03c:	f1bb 0f00 	cmp.w	fp, #0
 800f040:	d003      	beq.n	800f04a <_scanf_float+0x15e>
 800f042:	3201      	adds	r2, #1
 800f044:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f048:	60a2      	str	r2, [r4, #8]
 800f04a:	68a3      	ldr	r3, [r4, #8]
 800f04c:	3b01      	subs	r3, #1
 800f04e:	60a3      	str	r3, [r4, #8]
 800f050:	6923      	ldr	r3, [r4, #16]
 800f052:	3301      	adds	r3, #1
 800f054:	6123      	str	r3, [r4, #16]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	3b01      	subs	r3, #1
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	607b      	str	r3, [r7, #4]
 800f05e:	f340 8087 	ble.w	800f170 <_scanf_float+0x284>
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	3301      	adds	r3, #1
 800f066:	603b      	str	r3, [r7, #0]
 800f068:	e765      	b.n	800ef36 <_scanf_float+0x4a>
 800f06a:	eb1a 0105 	adds.w	r1, sl, r5
 800f06e:	f47f af6f 	bne.w	800ef50 <_scanf_float+0x64>
 800f072:	6822      	ldr	r2, [r4, #0]
 800f074:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f078:	6022      	str	r2, [r4, #0]
 800f07a:	460d      	mov	r5, r1
 800f07c:	468a      	mov	sl, r1
 800f07e:	f806 3b01 	strb.w	r3, [r6], #1
 800f082:	e7e2      	b.n	800f04a <_scanf_float+0x15e>
 800f084:	6822      	ldr	r2, [r4, #0]
 800f086:	0610      	lsls	r0, r2, #24
 800f088:	f57f af62 	bpl.w	800ef50 <_scanf_float+0x64>
 800f08c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f090:	6022      	str	r2, [r4, #0]
 800f092:	e7f4      	b.n	800f07e <_scanf_float+0x192>
 800f094:	f1ba 0f00 	cmp.w	sl, #0
 800f098:	d10e      	bne.n	800f0b8 <_scanf_float+0x1cc>
 800f09a:	f1b9 0f00 	cmp.w	r9, #0
 800f09e:	d10e      	bne.n	800f0be <_scanf_float+0x1d2>
 800f0a0:	6822      	ldr	r2, [r4, #0]
 800f0a2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f0a6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f0aa:	d108      	bne.n	800f0be <_scanf_float+0x1d2>
 800f0ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f0b0:	6022      	str	r2, [r4, #0]
 800f0b2:	f04f 0a01 	mov.w	sl, #1
 800f0b6:	e7e2      	b.n	800f07e <_scanf_float+0x192>
 800f0b8:	f1ba 0f02 	cmp.w	sl, #2
 800f0bc:	d055      	beq.n	800f16a <_scanf_float+0x27e>
 800f0be:	2d01      	cmp	r5, #1
 800f0c0:	d002      	beq.n	800f0c8 <_scanf_float+0x1dc>
 800f0c2:	2d04      	cmp	r5, #4
 800f0c4:	f47f af44 	bne.w	800ef50 <_scanf_float+0x64>
 800f0c8:	3501      	adds	r5, #1
 800f0ca:	b2ed      	uxtb	r5, r5
 800f0cc:	e7d7      	b.n	800f07e <_scanf_float+0x192>
 800f0ce:	f1ba 0f01 	cmp.w	sl, #1
 800f0d2:	f47f af3d 	bne.w	800ef50 <_scanf_float+0x64>
 800f0d6:	f04f 0a02 	mov.w	sl, #2
 800f0da:	e7d0      	b.n	800f07e <_scanf_float+0x192>
 800f0dc:	b97d      	cbnz	r5, 800f0fe <_scanf_float+0x212>
 800f0de:	f1b9 0f00 	cmp.w	r9, #0
 800f0e2:	f47f af38 	bne.w	800ef56 <_scanf_float+0x6a>
 800f0e6:	6822      	ldr	r2, [r4, #0]
 800f0e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f0ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f0f0:	f040 8108 	bne.w	800f304 <_scanf_float+0x418>
 800f0f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f0f8:	6022      	str	r2, [r4, #0]
 800f0fa:	2501      	movs	r5, #1
 800f0fc:	e7bf      	b.n	800f07e <_scanf_float+0x192>
 800f0fe:	2d03      	cmp	r5, #3
 800f100:	d0e2      	beq.n	800f0c8 <_scanf_float+0x1dc>
 800f102:	2d05      	cmp	r5, #5
 800f104:	e7de      	b.n	800f0c4 <_scanf_float+0x1d8>
 800f106:	2d02      	cmp	r5, #2
 800f108:	f47f af22 	bne.w	800ef50 <_scanf_float+0x64>
 800f10c:	2503      	movs	r5, #3
 800f10e:	e7b6      	b.n	800f07e <_scanf_float+0x192>
 800f110:	2d06      	cmp	r5, #6
 800f112:	f47f af1d 	bne.w	800ef50 <_scanf_float+0x64>
 800f116:	2507      	movs	r5, #7
 800f118:	e7b1      	b.n	800f07e <_scanf_float+0x192>
 800f11a:	6822      	ldr	r2, [r4, #0]
 800f11c:	0591      	lsls	r1, r2, #22
 800f11e:	f57f af17 	bpl.w	800ef50 <_scanf_float+0x64>
 800f122:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f126:	6022      	str	r2, [r4, #0]
 800f128:	f8cd 9008 	str.w	r9, [sp, #8]
 800f12c:	e7a7      	b.n	800f07e <_scanf_float+0x192>
 800f12e:	6822      	ldr	r2, [r4, #0]
 800f130:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f134:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f138:	d006      	beq.n	800f148 <_scanf_float+0x25c>
 800f13a:	0550      	lsls	r0, r2, #21
 800f13c:	f57f af08 	bpl.w	800ef50 <_scanf_float+0x64>
 800f140:	f1b9 0f00 	cmp.w	r9, #0
 800f144:	f000 80de 	beq.w	800f304 <_scanf_float+0x418>
 800f148:	0591      	lsls	r1, r2, #22
 800f14a:	bf58      	it	pl
 800f14c:	9902      	ldrpl	r1, [sp, #8]
 800f14e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f152:	bf58      	it	pl
 800f154:	eba9 0101 	subpl.w	r1, r9, r1
 800f158:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f15c:	bf58      	it	pl
 800f15e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f162:	6022      	str	r2, [r4, #0]
 800f164:	f04f 0900 	mov.w	r9, #0
 800f168:	e789      	b.n	800f07e <_scanf_float+0x192>
 800f16a:	f04f 0a03 	mov.w	sl, #3
 800f16e:	e786      	b.n	800f07e <_scanf_float+0x192>
 800f170:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f174:	4639      	mov	r1, r7
 800f176:	4640      	mov	r0, r8
 800f178:	4798      	blx	r3
 800f17a:	2800      	cmp	r0, #0
 800f17c:	f43f aedb 	beq.w	800ef36 <_scanf_float+0x4a>
 800f180:	e6e6      	b.n	800ef50 <_scanf_float+0x64>
 800f182:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f186:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f18a:	463a      	mov	r2, r7
 800f18c:	4640      	mov	r0, r8
 800f18e:	4798      	blx	r3
 800f190:	6923      	ldr	r3, [r4, #16]
 800f192:	3b01      	subs	r3, #1
 800f194:	6123      	str	r3, [r4, #16]
 800f196:	e6e8      	b.n	800ef6a <_scanf_float+0x7e>
 800f198:	1e6b      	subs	r3, r5, #1
 800f19a:	2b06      	cmp	r3, #6
 800f19c:	d824      	bhi.n	800f1e8 <_scanf_float+0x2fc>
 800f19e:	2d02      	cmp	r5, #2
 800f1a0:	d836      	bhi.n	800f210 <_scanf_float+0x324>
 800f1a2:	9b01      	ldr	r3, [sp, #4]
 800f1a4:	429e      	cmp	r6, r3
 800f1a6:	f67f aee4 	bls.w	800ef72 <_scanf_float+0x86>
 800f1aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f1ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f1b2:	463a      	mov	r2, r7
 800f1b4:	4640      	mov	r0, r8
 800f1b6:	4798      	blx	r3
 800f1b8:	6923      	ldr	r3, [r4, #16]
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	6123      	str	r3, [r4, #16]
 800f1be:	e7f0      	b.n	800f1a2 <_scanf_float+0x2b6>
 800f1c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f1c4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f1c8:	463a      	mov	r2, r7
 800f1ca:	4640      	mov	r0, r8
 800f1cc:	4798      	blx	r3
 800f1ce:	6923      	ldr	r3, [r4, #16]
 800f1d0:	3b01      	subs	r3, #1
 800f1d2:	6123      	str	r3, [r4, #16]
 800f1d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1d8:	fa5f fa8a 	uxtb.w	sl, sl
 800f1dc:	f1ba 0f02 	cmp.w	sl, #2
 800f1e0:	d1ee      	bne.n	800f1c0 <_scanf_float+0x2d4>
 800f1e2:	3d03      	subs	r5, #3
 800f1e4:	b2ed      	uxtb	r5, r5
 800f1e6:	1b76      	subs	r6, r6, r5
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	05da      	lsls	r2, r3, #23
 800f1ec:	d530      	bpl.n	800f250 <_scanf_float+0x364>
 800f1ee:	055b      	lsls	r3, r3, #21
 800f1f0:	d511      	bpl.n	800f216 <_scanf_float+0x32a>
 800f1f2:	9b01      	ldr	r3, [sp, #4]
 800f1f4:	429e      	cmp	r6, r3
 800f1f6:	f67f aebc 	bls.w	800ef72 <_scanf_float+0x86>
 800f1fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f1fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f202:	463a      	mov	r2, r7
 800f204:	4640      	mov	r0, r8
 800f206:	4798      	blx	r3
 800f208:	6923      	ldr	r3, [r4, #16]
 800f20a:	3b01      	subs	r3, #1
 800f20c:	6123      	str	r3, [r4, #16]
 800f20e:	e7f0      	b.n	800f1f2 <_scanf_float+0x306>
 800f210:	46aa      	mov	sl, r5
 800f212:	46b3      	mov	fp, r6
 800f214:	e7de      	b.n	800f1d4 <_scanf_float+0x2e8>
 800f216:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f21a:	6923      	ldr	r3, [r4, #16]
 800f21c:	2965      	cmp	r1, #101	@ 0x65
 800f21e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f222:	f106 35ff 	add.w	r5, r6, #4294967295
 800f226:	6123      	str	r3, [r4, #16]
 800f228:	d00c      	beq.n	800f244 <_scanf_float+0x358>
 800f22a:	2945      	cmp	r1, #69	@ 0x45
 800f22c:	d00a      	beq.n	800f244 <_scanf_float+0x358>
 800f22e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f232:	463a      	mov	r2, r7
 800f234:	4640      	mov	r0, r8
 800f236:	4798      	blx	r3
 800f238:	6923      	ldr	r3, [r4, #16]
 800f23a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f23e:	3b01      	subs	r3, #1
 800f240:	1eb5      	subs	r5, r6, #2
 800f242:	6123      	str	r3, [r4, #16]
 800f244:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f248:	463a      	mov	r2, r7
 800f24a:	4640      	mov	r0, r8
 800f24c:	4798      	blx	r3
 800f24e:	462e      	mov	r6, r5
 800f250:	6822      	ldr	r2, [r4, #0]
 800f252:	f012 0210 	ands.w	r2, r2, #16
 800f256:	d001      	beq.n	800f25c <_scanf_float+0x370>
 800f258:	2000      	movs	r0, #0
 800f25a:	e68b      	b.n	800ef74 <_scanf_float+0x88>
 800f25c:	7032      	strb	r2, [r6, #0]
 800f25e:	6823      	ldr	r3, [r4, #0]
 800f260:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f264:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f268:	d11c      	bne.n	800f2a4 <_scanf_float+0x3b8>
 800f26a:	9b02      	ldr	r3, [sp, #8]
 800f26c:	454b      	cmp	r3, r9
 800f26e:	eba3 0209 	sub.w	r2, r3, r9
 800f272:	d123      	bne.n	800f2bc <_scanf_float+0x3d0>
 800f274:	9901      	ldr	r1, [sp, #4]
 800f276:	2200      	movs	r2, #0
 800f278:	4640      	mov	r0, r8
 800f27a:	f002 fc71 	bl	8011b60 <_strtod_r>
 800f27e:	9b03      	ldr	r3, [sp, #12]
 800f280:	6821      	ldr	r1, [r4, #0]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f011 0f02 	tst.w	r1, #2
 800f288:	ec57 6b10 	vmov	r6, r7, d0
 800f28c:	f103 0204 	add.w	r2, r3, #4
 800f290:	d01f      	beq.n	800f2d2 <_scanf_float+0x3e6>
 800f292:	9903      	ldr	r1, [sp, #12]
 800f294:	600a      	str	r2, [r1, #0]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	e9c3 6700 	strd	r6, r7, [r3]
 800f29c:	68e3      	ldr	r3, [r4, #12]
 800f29e:	3301      	adds	r3, #1
 800f2a0:	60e3      	str	r3, [r4, #12]
 800f2a2:	e7d9      	b.n	800f258 <_scanf_float+0x36c>
 800f2a4:	9b04      	ldr	r3, [sp, #16]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d0e4      	beq.n	800f274 <_scanf_float+0x388>
 800f2aa:	9905      	ldr	r1, [sp, #20]
 800f2ac:	230a      	movs	r3, #10
 800f2ae:	3101      	adds	r1, #1
 800f2b0:	4640      	mov	r0, r8
 800f2b2:	f002 fcd5 	bl	8011c60 <_strtol_r>
 800f2b6:	9b04      	ldr	r3, [sp, #16]
 800f2b8:	9e05      	ldr	r6, [sp, #20]
 800f2ba:	1ac2      	subs	r2, r0, r3
 800f2bc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f2c0:	429e      	cmp	r6, r3
 800f2c2:	bf28      	it	cs
 800f2c4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f2c8:	4910      	ldr	r1, [pc, #64]	@ (800f30c <_scanf_float+0x420>)
 800f2ca:	4630      	mov	r0, r6
 800f2cc:	f000 f918 	bl	800f500 <siprintf>
 800f2d0:	e7d0      	b.n	800f274 <_scanf_float+0x388>
 800f2d2:	f011 0f04 	tst.w	r1, #4
 800f2d6:	9903      	ldr	r1, [sp, #12]
 800f2d8:	600a      	str	r2, [r1, #0]
 800f2da:	d1dc      	bne.n	800f296 <_scanf_float+0x3aa>
 800f2dc:	681d      	ldr	r5, [r3, #0]
 800f2de:	4632      	mov	r2, r6
 800f2e0:	463b      	mov	r3, r7
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	4639      	mov	r1, r7
 800f2e6:	f7f1 fc31 	bl	8000b4c <__aeabi_dcmpun>
 800f2ea:	b128      	cbz	r0, 800f2f8 <_scanf_float+0x40c>
 800f2ec:	4808      	ldr	r0, [pc, #32]	@ (800f310 <_scanf_float+0x424>)
 800f2ee:	f000 fac5 	bl	800f87c <nanf>
 800f2f2:	ed85 0a00 	vstr	s0, [r5]
 800f2f6:	e7d1      	b.n	800f29c <_scanf_float+0x3b0>
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	4639      	mov	r1, r7
 800f2fc:	f7f1 fc84 	bl	8000c08 <__aeabi_d2f>
 800f300:	6028      	str	r0, [r5, #0]
 800f302:	e7cb      	b.n	800f29c <_scanf_float+0x3b0>
 800f304:	f04f 0900 	mov.w	r9, #0
 800f308:	e629      	b.n	800ef5e <_scanf_float+0x72>
 800f30a:	bf00      	nop
 800f30c:	080148e7 	.word	0x080148e7
 800f310:	08014998 	.word	0x08014998

0800f314 <std>:
 800f314:	2300      	movs	r3, #0
 800f316:	b510      	push	{r4, lr}
 800f318:	4604      	mov	r4, r0
 800f31a:	e9c0 3300 	strd	r3, r3, [r0]
 800f31e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f322:	6083      	str	r3, [r0, #8]
 800f324:	8181      	strh	r1, [r0, #12]
 800f326:	6643      	str	r3, [r0, #100]	@ 0x64
 800f328:	81c2      	strh	r2, [r0, #14]
 800f32a:	6183      	str	r3, [r0, #24]
 800f32c:	4619      	mov	r1, r3
 800f32e:	2208      	movs	r2, #8
 800f330:	305c      	adds	r0, #92	@ 0x5c
 800f332:	f000 f974 	bl	800f61e <memset>
 800f336:	4b0d      	ldr	r3, [pc, #52]	@ (800f36c <std+0x58>)
 800f338:	6263      	str	r3, [r4, #36]	@ 0x24
 800f33a:	4b0d      	ldr	r3, [pc, #52]	@ (800f370 <std+0x5c>)
 800f33c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f33e:	4b0d      	ldr	r3, [pc, #52]	@ (800f374 <std+0x60>)
 800f340:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f342:	4b0d      	ldr	r3, [pc, #52]	@ (800f378 <std+0x64>)
 800f344:	6323      	str	r3, [r4, #48]	@ 0x30
 800f346:	4b0d      	ldr	r3, [pc, #52]	@ (800f37c <std+0x68>)
 800f348:	6224      	str	r4, [r4, #32]
 800f34a:	429c      	cmp	r4, r3
 800f34c:	d006      	beq.n	800f35c <std+0x48>
 800f34e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f352:	4294      	cmp	r4, r2
 800f354:	d002      	beq.n	800f35c <std+0x48>
 800f356:	33d0      	adds	r3, #208	@ 0xd0
 800f358:	429c      	cmp	r4, r3
 800f35a:	d105      	bne.n	800f368 <std+0x54>
 800f35c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f364:	f000 ba78 	b.w	800f858 <__retarget_lock_init_recursive>
 800f368:	bd10      	pop	{r4, pc}
 800f36a:	bf00      	nop
 800f36c:	0800f595 	.word	0x0800f595
 800f370:	0800f5bb 	.word	0x0800f5bb
 800f374:	0800f5f3 	.word	0x0800f5f3
 800f378:	0800f617 	.word	0x0800f617
 800f37c:	20005424 	.word	0x20005424

0800f380 <stdio_exit_handler>:
 800f380:	4a02      	ldr	r2, [pc, #8]	@ (800f38c <stdio_exit_handler+0xc>)
 800f382:	4903      	ldr	r1, [pc, #12]	@ (800f390 <stdio_exit_handler+0x10>)
 800f384:	4803      	ldr	r0, [pc, #12]	@ (800f394 <stdio_exit_handler+0x14>)
 800f386:	f000 b869 	b.w	800f45c <_fwalk_sglue>
 800f38a:	bf00      	nop
 800f38c:	200000b8 	.word	0x200000b8
 800f390:	08012651 	.word	0x08012651
 800f394:	200000c8 	.word	0x200000c8

0800f398 <cleanup_stdio>:
 800f398:	6841      	ldr	r1, [r0, #4]
 800f39a:	4b0c      	ldr	r3, [pc, #48]	@ (800f3cc <cleanup_stdio+0x34>)
 800f39c:	4299      	cmp	r1, r3
 800f39e:	b510      	push	{r4, lr}
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	d001      	beq.n	800f3a8 <cleanup_stdio+0x10>
 800f3a4:	f003 f954 	bl	8012650 <_fflush_r>
 800f3a8:	68a1      	ldr	r1, [r4, #8]
 800f3aa:	4b09      	ldr	r3, [pc, #36]	@ (800f3d0 <cleanup_stdio+0x38>)
 800f3ac:	4299      	cmp	r1, r3
 800f3ae:	d002      	beq.n	800f3b6 <cleanup_stdio+0x1e>
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	f003 f94d 	bl	8012650 <_fflush_r>
 800f3b6:	68e1      	ldr	r1, [r4, #12]
 800f3b8:	4b06      	ldr	r3, [pc, #24]	@ (800f3d4 <cleanup_stdio+0x3c>)
 800f3ba:	4299      	cmp	r1, r3
 800f3bc:	d004      	beq.n	800f3c8 <cleanup_stdio+0x30>
 800f3be:	4620      	mov	r0, r4
 800f3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3c4:	f003 b944 	b.w	8012650 <_fflush_r>
 800f3c8:	bd10      	pop	{r4, pc}
 800f3ca:	bf00      	nop
 800f3cc:	20005424 	.word	0x20005424
 800f3d0:	2000548c 	.word	0x2000548c
 800f3d4:	200054f4 	.word	0x200054f4

0800f3d8 <global_stdio_init.part.0>:
 800f3d8:	b510      	push	{r4, lr}
 800f3da:	4b0b      	ldr	r3, [pc, #44]	@ (800f408 <global_stdio_init.part.0+0x30>)
 800f3dc:	4c0b      	ldr	r4, [pc, #44]	@ (800f40c <global_stdio_init.part.0+0x34>)
 800f3de:	4a0c      	ldr	r2, [pc, #48]	@ (800f410 <global_stdio_init.part.0+0x38>)
 800f3e0:	601a      	str	r2, [r3, #0]
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	2104      	movs	r1, #4
 800f3e8:	f7ff ff94 	bl	800f314 <std>
 800f3ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	2109      	movs	r1, #9
 800f3f4:	f7ff ff8e 	bl	800f314 <std>
 800f3f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f3fc:	2202      	movs	r2, #2
 800f3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f402:	2112      	movs	r1, #18
 800f404:	f7ff bf86 	b.w	800f314 <std>
 800f408:	2000555c 	.word	0x2000555c
 800f40c:	20005424 	.word	0x20005424
 800f410:	0800f381 	.word	0x0800f381

0800f414 <__sfp_lock_acquire>:
 800f414:	4801      	ldr	r0, [pc, #4]	@ (800f41c <__sfp_lock_acquire+0x8>)
 800f416:	f000 ba20 	b.w	800f85a <__retarget_lock_acquire_recursive>
 800f41a:	bf00      	nop
 800f41c:	20005565 	.word	0x20005565

0800f420 <__sfp_lock_release>:
 800f420:	4801      	ldr	r0, [pc, #4]	@ (800f428 <__sfp_lock_release+0x8>)
 800f422:	f000 ba1b 	b.w	800f85c <__retarget_lock_release_recursive>
 800f426:	bf00      	nop
 800f428:	20005565 	.word	0x20005565

0800f42c <__sinit>:
 800f42c:	b510      	push	{r4, lr}
 800f42e:	4604      	mov	r4, r0
 800f430:	f7ff fff0 	bl	800f414 <__sfp_lock_acquire>
 800f434:	6a23      	ldr	r3, [r4, #32]
 800f436:	b11b      	cbz	r3, 800f440 <__sinit+0x14>
 800f438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f43c:	f7ff bff0 	b.w	800f420 <__sfp_lock_release>
 800f440:	4b04      	ldr	r3, [pc, #16]	@ (800f454 <__sinit+0x28>)
 800f442:	6223      	str	r3, [r4, #32]
 800f444:	4b04      	ldr	r3, [pc, #16]	@ (800f458 <__sinit+0x2c>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d1f5      	bne.n	800f438 <__sinit+0xc>
 800f44c:	f7ff ffc4 	bl	800f3d8 <global_stdio_init.part.0>
 800f450:	e7f2      	b.n	800f438 <__sinit+0xc>
 800f452:	bf00      	nop
 800f454:	0800f399 	.word	0x0800f399
 800f458:	2000555c 	.word	0x2000555c

0800f45c <_fwalk_sglue>:
 800f45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f460:	4607      	mov	r7, r0
 800f462:	4688      	mov	r8, r1
 800f464:	4614      	mov	r4, r2
 800f466:	2600      	movs	r6, #0
 800f468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f46c:	f1b9 0901 	subs.w	r9, r9, #1
 800f470:	d505      	bpl.n	800f47e <_fwalk_sglue+0x22>
 800f472:	6824      	ldr	r4, [r4, #0]
 800f474:	2c00      	cmp	r4, #0
 800f476:	d1f7      	bne.n	800f468 <_fwalk_sglue+0xc>
 800f478:	4630      	mov	r0, r6
 800f47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f47e:	89ab      	ldrh	r3, [r5, #12]
 800f480:	2b01      	cmp	r3, #1
 800f482:	d907      	bls.n	800f494 <_fwalk_sglue+0x38>
 800f484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f488:	3301      	adds	r3, #1
 800f48a:	d003      	beq.n	800f494 <_fwalk_sglue+0x38>
 800f48c:	4629      	mov	r1, r5
 800f48e:	4638      	mov	r0, r7
 800f490:	47c0      	blx	r8
 800f492:	4306      	orrs	r6, r0
 800f494:	3568      	adds	r5, #104	@ 0x68
 800f496:	e7e9      	b.n	800f46c <_fwalk_sglue+0x10>

0800f498 <sniprintf>:
 800f498:	b40c      	push	{r2, r3}
 800f49a:	b530      	push	{r4, r5, lr}
 800f49c:	4b17      	ldr	r3, [pc, #92]	@ (800f4fc <sniprintf+0x64>)
 800f49e:	1e0c      	subs	r4, r1, #0
 800f4a0:	681d      	ldr	r5, [r3, #0]
 800f4a2:	b09d      	sub	sp, #116	@ 0x74
 800f4a4:	da08      	bge.n	800f4b8 <sniprintf+0x20>
 800f4a6:	238b      	movs	r3, #139	@ 0x8b
 800f4a8:	602b      	str	r3, [r5, #0]
 800f4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ae:	b01d      	add	sp, #116	@ 0x74
 800f4b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4b4:	b002      	add	sp, #8
 800f4b6:	4770      	bx	lr
 800f4b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f4bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f4c0:	bf14      	ite	ne
 800f4c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f4c6:	4623      	moveq	r3, r4
 800f4c8:	9304      	str	r3, [sp, #16]
 800f4ca:	9307      	str	r3, [sp, #28]
 800f4cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f4d0:	9002      	str	r0, [sp, #8]
 800f4d2:	9006      	str	r0, [sp, #24]
 800f4d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f4d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f4da:	ab21      	add	r3, sp, #132	@ 0x84
 800f4dc:	a902      	add	r1, sp, #8
 800f4de:	4628      	mov	r0, r5
 800f4e0:	9301      	str	r3, [sp, #4]
 800f4e2:	f002 fc1b 	bl	8011d1c <_svfiprintf_r>
 800f4e6:	1c43      	adds	r3, r0, #1
 800f4e8:	bfbc      	itt	lt
 800f4ea:	238b      	movlt	r3, #139	@ 0x8b
 800f4ec:	602b      	strlt	r3, [r5, #0]
 800f4ee:	2c00      	cmp	r4, #0
 800f4f0:	d0dd      	beq.n	800f4ae <sniprintf+0x16>
 800f4f2:	9b02      	ldr	r3, [sp, #8]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	701a      	strb	r2, [r3, #0]
 800f4f8:	e7d9      	b.n	800f4ae <sniprintf+0x16>
 800f4fa:	bf00      	nop
 800f4fc:	200000c4 	.word	0x200000c4

0800f500 <siprintf>:
 800f500:	b40e      	push	{r1, r2, r3}
 800f502:	b500      	push	{lr}
 800f504:	b09c      	sub	sp, #112	@ 0x70
 800f506:	ab1d      	add	r3, sp, #116	@ 0x74
 800f508:	9002      	str	r0, [sp, #8]
 800f50a:	9006      	str	r0, [sp, #24]
 800f50c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f510:	4809      	ldr	r0, [pc, #36]	@ (800f538 <siprintf+0x38>)
 800f512:	9107      	str	r1, [sp, #28]
 800f514:	9104      	str	r1, [sp, #16]
 800f516:	4909      	ldr	r1, [pc, #36]	@ (800f53c <siprintf+0x3c>)
 800f518:	f853 2b04 	ldr.w	r2, [r3], #4
 800f51c:	9105      	str	r1, [sp, #20]
 800f51e:	6800      	ldr	r0, [r0, #0]
 800f520:	9301      	str	r3, [sp, #4]
 800f522:	a902      	add	r1, sp, #8
 800f524:	f002 fbfa 	bl	8011d1c <_svfiprintf_r>
 800f528:	9b02      	ldr	r3, [sp, #8]
 800f52a:	2200      	movs	r2, #0
 800f52c:	701a      	strb	r2, [r3, #0]
 800f52e:	b01c      	add	sp, #112	@ 0x70
 800f530:	f85d eb04 	ldr.w	lr, [sp], #4
 800f534:	b003      	add	sp, #12
 800f536:	4770      	bx	lr
 800f538:	200000c4 	.word	0x200000c4
 800f53c:	ffff0208 	.word	0xffff0208

0800f540 <siscanf>:
 800f540:	b40e      	push	{r1, r2, r3}
 800f542:	b530      	push	{r4, r5, lr}
 800f544:	b09c      	sub	sp, #112	@ 0x70
 800f546:	ac1f      	add	r4, sp, #124	@ 0x7c
 800f548:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800f54c:	f854 5b04 	ldr.w	r5, [r4], #4
 800f550:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f554:	9002      	str	r0, [sp, #8]
 800f556:	9006      	str	r0, [sp, #24]
 800f558:	f7f0 fe9a 	bl	8000290 <strlen>
 800f55c:	4b0b      	ldr	r3, [pc, #44]	@ (800f58c <siscanf+0x4c>)
 800f55e:	9003      	str	r0, [sp, #12]
 800f560:	9007      	str	r0, [sp, #28]
 800f562:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f564:	480a      	ldr	r0, [pc, #40]	@ (800f590 <siscanf+0x50>)
 800f566:	9401      	str	r4, [sp, #4]
 800f568:	2300      	movs	r3, #0
 800f56a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f56c:	9314      	str	r3, [sp, #80]	@ 0x50
 800f56e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f572:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f576:	462a      	mov	r2, r5
 800f578:	4623      	mov	r3, r4
 800f57a:	a902      	add	r1, sp, #8
 800f57c:	6800      	ldr	r0, [r0, #0]
 800f57e:	f002 fd21 	bl	8011fc4 <__ssvfiscanf_r>
 800f582:	b01c      	add	sp, #112	@ 0x70
 800f584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f588:	b003      	add	sp, #12
 800f58a:	4770      	bx	lr
 800f58c:	0800f5b7 	.word	0x0800f5b7
 800f590:	200000c4 	.word	0x200000c4

0800f594 <__sread>:
 800f594:	b510      	push	{r4, lr}
 800f596:	460c      	mov	r4, r1
 800f598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f59c:	f000 f8fe 	bl	800f79c <_read_r>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	bfab      	itete	ge
 800f5a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f5a6:	89a3      	ldrhlt	r3, [r4, #12]
 800f5a8:	181b      	addge	r3, r3, r0
 800f5aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f5ae:	bfac      	ite	ge
 800f5b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f5b2:	81a3      	strhlt	r3, [r4, #12]
 800f5b4:	bd10      	pop	{r4, pc}

0800f5b6 <__seofread>:
 800f5b6:	2000      	movs	r0, #0
 800f5b8:	4770      	bx	lr

0800f5ba <__swrite>:
 800f5ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5be:	461f      	mov	r7, r3
 800f5c0:	898b      	ldrh	r3, [r1, #12]
 800f5c2:	05db      	lsls	r3, r3, #23
 800f5c4:	4605      	mov	r5, r0
 800f5c6:	460c      	mov	r4, r1
 800f5c8:	4616      	mov	r6, r2
 800f5ca:	d505      	bpl.n	800f5d8 <__swrite+0x1e>
 800f5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5d0:	2302      	movs	r3, #2
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f000 f8d0 	bl	800f778 <_lseek_r>
 800f5d8:	89a3      	ldrh	r3, [r4, #12]
 800f5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f5e2:	81a3      	strh	r3, [r4, #12]
 800f5e4:	4632      	mov	r2, r6
 800f5e6:	463b      	mov	r3, r7
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ee:	f000 b8f7 	b.w	800f7e0 <_write_r>

0800f5f2 <__sseek>:
 800f5f2:	b510      	push	{r4, lr}
 800f5f4:	460c      	mov	r4, r1
 800f5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5fa:	f000 f8bd 	bl	800f778 <_lseek_r>
 800f5fe:	1c43      	adds	r3, r0, #1
 800f600:	89a3      	ldrh	r3, [r4, #12]
 800f602:	bf15      	itete	ne
 800f604:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f606:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f60a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f60e:	81a3      	strheq	r3, [r4, #12]
 800f610:	bf18      	it	ne
 800f612:	81a3      	strhne	r3, [r4, #12]
 800f614:	bd10      	pop	{r4, pc}

0800f616 <__sclose>:
 800f616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f61a:	f000 b89d 	b.w	800f758 <_close_r>

0800f61e <memset>:
 800f61e:	4402      	add	r2, r0
 800f620:	4603      	mov	r3, r0
 800f622:	4293      	cmp	r3, r2
 800f624:	d100      	bne.n	800f628 <memset+0xa>
 800f626:	4770      	bx	lr
 800f628:	f803 1b01 	strb.w	r1, [r3], #1
 800f62c:	e7f9      	b.n	800f622 <memset+0x4>

0800f62e <strcat>:
 800f62e:	b510      	push	{r4, lr}
 800f630:	4602      	mov	r2, r0
 800f632:	7814      	ldrb	r4, [r2, #0]
 800f634:	4613      	mov	r3, r2
 800f636:	3201      	adds	r2, #1
 800f638:	2c00      	cmp	r4, #0
 800f63a:	d1fa      	bne.n	800f632 <strcat+0x4>
 800f63c:	3b01      	subs	r3, #1
 800f63e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f642:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f646:	2a00      	cmp	r2, #0
 800f648:	d1f9      	bne.n	800f63e <strcat+0x10>
 800f64a:	bd10      	pop	{r4, pc}

0800f64c <strncmp>:
 800f64c:	b510      	push	{r4, lr}
 800f64e:	b16a      	cbz	r2, 800f66c <strncmp+0x20>
 800f650:	3901      	subs	r1, #1
 800f652:	1884      	adds	r4, r0, r2
 800f654:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f658:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d103      	bne.n	800f668 <strncmp+0x1c>
 800f660:	42a0      	cmp	r0, r4
 800f662:	d001      	beq.n	800f668 <strncmp+0x1c>
 800f664:	2a00      	cmp	r2, #0
 800f666:	d1f5      	bne.n	800f654 <strncmp+0x8>
 800f668:	1ad0      	subs	r0, r2, r3
 800f66a:	bd10      	pop	{r4, pc}
 800f66c:	4610      	mov	r0, r2
 800f66e:	e7fc      	b.n	800f66a <strncmp+0x1e>

0800f670 <strncpy>:
 800f670:	b510      	push	{r4, lr}
 800f672:	3901      	subs	r1, #1
 800f674:	4603      	mov	r3, r0
 800f676:	b132      	cbz	r2, 800f686 <strncpy+0x16>
 800f678:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f67c:	f803 4b01 	strb.w	r4, [r3], #1
 800f680:	3a01      	subs	r2, #1
 800f682:	2c00      	cmp	r4, #0
 800f684:	d1f7      	bne.n	800f676 <strncpy+0x6>
 800f686:	441a      	add	r2, r3
 800f688:	2100      	movs	r1, #0
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d100      	bne.n	800f690 <strncpy+0x20>
 800f68e:	bd10      	pop	{r4, pc}
 800f690:	f803 1b01 	strb.w	r1, [r3], #1
 800f694:	e7f9      	b.n	800f68a <strncpy+0x1a>
	...

0800f698 <strtok>:
 800f698:	4b16      	ldr	r3, [pc, #88]	@ (800f6f4 <strtok+0x5c>)
 800f69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f69e:	681f      	ldr	r7, [r3, #0]
 800f6a0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	460e      	mov	r6, r1
 800f6a6:	b9ec      	cbnz	r4, 800f6e4 <strtok+0x4c>
 800f6a8:	2050      	movs	r0, #80	@ 0x50
 800f6aa:	f7fe fec7 	bl	800e43c <malloc>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	6478      	str	r0, [r7, #68]	@ 0x44
 800f6b2:	b920      	cbnz	r0, 800f6be <strtok+0x26>
 800f6b4:	4b10      	ldr	r3, [pc, #64]	@ (800f6f8 <strtok+0x60>)
 800f6b6:	4811      	ldr	r0, [pc, #68]	@ (800f6fc <strtok+0x64>)
 800f6b8:	215b      	movs	r1, #91	@ 0x5b
 800f6ba:	f000 f8e5 	bl	800f888 <__assert_func>
 800f6be:	e9c0 4400 	strd	r4, r4, [r0]
 800f6c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f6c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f6ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f6ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f6d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f6d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f6da:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f6de:	6184      	str	r4, [r0, #24]
 800f6e0:	7704      	strb	r4, [r0, #28]
 800f6e2:	6244      	str	r4, [r0, #36]	@ 0x24
 800f6e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6e6:	4631      	mov	r1, r6
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f0:	f000 b806 	b.w	800f700 <__strtok_r>
 800f6f4:	200000c4 	.word	0x200000c4
 800f6f8:	080148ec 	.word	0x080148ec
 800f6fc:	08014903 	.word	0x08014903

0800f700 <__strtok_r>:
 800f700:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f702:	4604      	mov	r4, r0
 800f704:	b908      	cbnz	r0, 800f70a <__strtok_r+0xa>
 800f706:	6814      	ldr	r4, [r2, #0]
 800f708:	b144      	cbz	r4, 800f71c <__strtok_r+0x1c>
 800f70a:	4620      	mov	r0, r4
 800f70c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f710:	460f      	mov	r7, r1
 800f712:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f716:	b91e      	cbnz	r6, 800f720 <__strtok_r+0x20>
 800f718:	b965      	cbnz	r5, 800f734 <__strtok_r+0x34>
 800f71a:	6015      	str	r5, [r2, #0]
 800f71c:	2000      	movs	r0, #0
 800f71e:	e005      	b.n	800f72c <__strtok_r+0x2c>
 800f720:	42b5      	cmp	r5, r6
 800f722:	d1f6      	bne.n	800f712 <__strtok_r+0x12>
 800f724:	2b00      	cmp	r3, #0
 800f726:	d1f0      	bne.n	800f70a <__strtok_r+0xa>
 800f728:	6014      	str	r4, [r2, #0]
 800f72a:	7003      	strb	r3, [r0, #0]
 800f72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f72e:	461c      	mov	r4, r3
 800f730:	e00c      	b.n	800f74c <__strtok_r+0x4c>
 800f732:	b915      	cbnz	r5, 800f73a <__strtok_r+0x3a>
 800f734:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f738:	460e      	mov	r6, r1
 800f73a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f73e:	42ab      	cmp	r3, r5
 800f740:	d1f7      	bne.n	800f732 <__strtok_r+0x32>
 800f742:	2b00      	cmp	r3, #0
 800f744:	d0f3      	beq.n	800f72e <__strtok_r+0x2e>
 800f746:	2300      	movs	r3, #0
 800f748:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f74c:	6014      	str	r4, [r2, #0]
 800f74e:	e7ed      	b.n	800f72c <__strtok_r+0x2c>

0800f750 <_localeconv_r>:
 800f750:	4800      	ldr	r0, [pc, #0]	@ (800f754 <_localeconv_r+0x4>)
 800f752:	4770      	bx	lr
 800f754:	20000204 	.word	0x20000204

0800f758 <_close_r>:
 800f758:	b538      	push	{r3, r4, r5, lr}
 800f75a:	4d06      	ldr	r5, [pc, #24]	@ (800f774 <_close_r+0x1c>)
 800f75c:	2300      	movs	r3, #0
 800f75e:	4604      	mov	r4, r0
 800f760:	4608      	mov	r0, r1
 800f762:	602b      	str	r3, [r5, #0]
 800f764:	f7f5 f8ee 	bl	8004944 <_close>
 800f768:	1c43      	adds	r3, r0, #1
 800f76a:	d102      	bne.n	800f772 <_close_r+0x1a>
 800f76c:	682b      	ldr	r3, [r5, #0]
 800f76e:	b103      	cbz	r3, 800f772 <_close_r+0x1a>
 800f770:	6023      	str	r3, [r4, #0]
 800f772:	bd38      	pop	{r3, r4, r5, pc}
 800f774:	20005560 	.word	0x20005560

0800f778 <_lseek_r>:
 800f778:	b538      	push	{r3, r4, r5, lr}
 800f77a:	4d07      	ldr	r5, [pc, #28]	@ (800f798 <_lseek_r+0x20>)
 800f77c:	4604      	mov	r4, r0
 800f77e:	4608      	mov	r0, r1
 800f780:	4611      	mov	r1, r2
 800f782:	2200      	movs	r2, #0
 800f784:	602a      	str	r2, [r5, #0]
 800f786:	461a      	mov	r2, r3
 800f788:	f7f5 f903 	bl	8004992 <_lseek>
 800f78c:	1c43      	adds	r3, r0, #1
 800f78e:	d102      	bne.n	800f796 <_lseek_r+0x1e>
 800f790:	682b      	ldr	r3, [r5, #0]
 800f792:	b103      	cbz	r3, 800f796 <_lseek_r+0x1e>
 800f794:	6023      	str	r3, [r4, #0]
 800f796:	bd38      	pop	{r3, r4, r5, pc}
 800f798:	20005560 	.word	0x20005560

0800f79c <_read_r>:
 800f79c:	b538      	push	{r3, r4, r5, lr}
 800f79e:	4d07      	ldr	r5, [pc, #28]	@ (800f7bc <_read_r+0x20>)
 800f7a0:	4604      	mov	r4, r0
 800f7a2:	4608      	mov	r0, r1
 800f7a4:	4611      	mov	r1, r2
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	602a      	str	r2, [r5, #0]
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	f7f5 f8ad 	bl	800490a <_read>
 800f7b0:	1c43      	adds	r3, r0, #1
 800f7b2:	d102      	bne.n	800f7ba <_read_r+0x1e>
 800f7b4:	682b      	ldr	r3, [r5, #0]
 800f7b6:	b103      	cbz	r3, 800f7ba <_read_r+0x1e>
 800f7b8:	6023      	str	r3, [r4, #0]
 800f7ba:	bd38      	pop	{r3, r4, r5, pc}
 800f7bc:	20005560 	.word	0x20005560

0800f7c0 <_sbrk_r>:
 800f7c0:	b538      	push	{r3, r4, r5, lr}
 800f7c2:	4d06      	ldr	r5, [pc, #24]	@ (800f7dc <_sbrk_r+0x1c>)
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	4604      	mov	r4, r0
 800f7c8:	4608      	mov	r0, r1
 800f7ca:	602b      	str	r3, [r5, #0]
 800f7cc:	f7f5 f8ee 	bl	80049ac <_sbrk>
 800f7d0:	1c43      	adds	r3, r0, #1
 800f7d2:	d102      	bne.n	800f7da <_sbrk_r+0x1a>
 800f7d4:	682b      	ldr	r3, [r5, #0]
 800f7d6:	b103      	cbz	r3, 800f7da <_sbrk_r+0x1a>
 800f7d8:	6023      	str	r3, [r4, #0]
 800f7da:	bd38      	pop	{r3, r4, r5, pc}
 800f7dc:	20005560 	.word	0x20005560

0800f7e0 <_write_r>:
 800f7e0:	b538      	push	{r3, r4, r5, lr}
 800f7e2:	4d07      	ldr	r5, [pc, #28]	@ (800f800 <_write_r+0x20>)
 800f7e4:	4604      	mov	r4, r0
 800f7e6:	4608      	mov	r0, r1
 800f7e8:	4611      	mov	r1, r2
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	602a      	str	r2, [r5, #0]
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	f7f5 fc16 	bl	8005020 <_write>
 800f7f4:	1c43      	adds	r3, r0, #1
 800f7f6:	d102      	bne.n	800f7fe <_write_r+0x1e>
 800f7f8:	682b      	ldr	r3, [r5, #0]
 800f7fa:	b103      	cbz	r3, 800f7fe <_write_r+0x1e>
 800f7fc:	6023      	str	r3, [r4, #0]
 800f7fe:	bd38      	pop	{r3, r4, r5, pc}
 800f800:	20005560 	.word	0x20005560

0800f804 <__errno>:
 800f804:	4b01      	ldr	r3, [pc, #4]	@ (800f80c <__errno+0x8>)
 800f806:	6818      	ldr	r0, [r3, #0]
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	200000c4 	.word	0x200000c4

0800f810 <__libc_init_array>:
 800f810:	b570      	push	{r4, r5, r6, lr}
 800f812:	4d0d      	ldr	r5, [pc, #52]	@ (800f848 <__libc_init_array+0x38>)
 800f814:	4c0d      	ldr	r4, [pc, #52]	@ (800f84c <__libc_init_array+0x3c>)
 800f816:	1b64      	subs	r4, r4, r5
 800f818:	10a4      	asrs	r4, r4, #2
 800f81a:	2600      	movs	r6, #0
 800f81c:	42a6      	cmp	r6, r4
 800f81e:	d109      	bne.n	800f834 <__libc_init_array+0x24>
 800f820:	4d0b      	ldr	r5, [pc, #44]	@ (800f850 <__libc_init_array+0x40>)
 800f822:	4c0c      	ldr	r4, [pc, #48]	@ (800f854 <__libc_init_array+0x44>)
 800f824:	f004 fe24 	bl	8014470 <_init>
 800f828:	1b64      	subs	r4, r4, r5
 800f82a:	10a4      	asrs	r4, r4, #2
 800f82c:	2600      	movs	r6, #0
 800f82e:	42a6      	cmp	r6, r4
 800f830:	d105      	bne.n	800f83e <__libc_init_array+0x2e>
 800f832:	bd70      	pop	{r4, r5, r6, pc}
 800f834:	f855 3b04 	ldr.w	r3, [r5], #4
 800f838:	4798      	blx	r3
 800f83a:	3601      	adds	r6, #1
 800f83c:	e7ee      	b.n	800f81c <__libc_init_array+0xc>
 800f83e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f842:	4798      	blx	r3
 800f844:	3601      	adds	r6, #1
 800f846:	e7f2      	b.n	800f82e <__libc_init_array+0x1e>
 800f848:	08014d90 	.word	0x08014d90
 800f84c:	08014d90 	.word	0x08014d90
 800f850:	08014d90 	.word	0x08014d90
 800f854:	08014d94 	.word	0x08014d94

0800f858 <__retarget_lock_init_recursive>:
 800f858:	4770      	bx	lr

0800f85a <__retarget_lock_acquire_recursive>:
 800f85a:	4770      	bx	lr

0800f85c <__retarget_lock_release_recursive>:
 800f85c:	4770      	bx	lr

0800f85e <memcpy>:
 800f85e:	440a      	add	r2, r1
 800f860:	4291      	cmp	r1, r2
 800f862:	f100 33ff 	add.w	r3, r0, #4294967295
 800f866:	d100      	bne.n	800f86a <memcpy+0xc>
 800f868:	4770      	bx	lr
 800f86a:	b510      	push	{r4, lr}
 800f86c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f870:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f874:	4291      	cmp	r1, r2
 800f876:	d1f9      	bne.n	800f86c <memcpy+0xe>
 800f878:	bd10      	pop	{r4, pc}
	...

0800f87c <nanf>:
 800f87c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f884 <nanf+0x8>
 800f880:	4770      	bx	lr
 800f882:	bf00      	nop
 800f884:	7fc00000 	.word	0x7fc00000

0800f888 <__assert_func>:
 800f888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f88a:	4614      	mov	r4, r2
 800f88c:	461a      	mov	r2, r3
 800f88e:	4b09      	ldr	r3, [pc, #36]	@ (800f8b4 <__assert_func+0x2c>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	4605      	mov	r5, r0
 800f894:	68d8      	ldr	r0, [r3, #12]
 800f896:	b954      	cbnz	r4, 800f8ae <__assert_func+0x26>
 800f898:	4b07      	ldr	r3, [pc, #28]	@ (800f8b8 <__assert_func+0x30>)
 800f89a:	461c      	mov	r4, r3
 800f89c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8a0:	9100      	str	r1, [sp, #0]
 800f8a2:	462b      	mov	r3, r5
 800f8a4:	4905      	ldr	r1, [pc, #20]	@ (800f8bc <__assert_func+0x34>)
 800f8a6:	f002 fefb 	bl	80126a0 <fiprintf>
 800f8aa:	f002 ffa1 	bl	80127f0 <abort>
 800f8ae:	4b04      	ldr	r3, [pc, #16]	@ (800f8c0 <__assert_func+0x38>)
 800f8b0:	e7f4      	b.n	800f89c <__assert_func+0x14>
 800f8b2:	bf00      	nop
 800f8b4:	200000c4 	.word	0x200000c4
 800f8b8:	08014998 	.word	0x08014998
 800f8bc:	0801496a 	.word	0x0801496a
 800f8c0:	0801495d 	.word	0x0801495d

0800f8c4 <quorem>:
 800f8c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c8:	6903      	ldr	r3, [r0, #16]
 800f8ca:	690c      	ldr	r4, [r1, #16]
 800f8cc:	42a3      	cmp	r3, r4
 800f8ce:	4607      	mov	r7, r0
 800f8d0:	db7e      	blt.n	800f9d0 <quorem+0x10c>
 800f8d2:	3c01      	subs	r4, #1
 800f8d4:	f101 0814 	add.w	r8, r1, #20
 800f8d8:	00a3      	lsls	r3, r4, #2
 800f8da:	f100 0514 	add.w	r5, r0, #20
 800f8de:	9300      	str	r3, [sp, #0]
 800f8e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8e4:	9301      	str	r3, [sp, #4]
 800f8e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f8ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f8f6:	fbb2 f6f3 	udiv	r6, r2, r3
 800f8fa:	d32e      	bcc.n	800f95a <quorem+0x96>
 800f8fc:	f04f 0a00 	mov.w	sl, #0
 800f900:	46c4      	mov	ip, r8
 800f902:	46ae      	mov	lr, r5
 800f904:	46d3      	mov	fp, sl
 800f906:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f90a:	b298      	uxth	r0, r3
 800f90c:	fb06 a000 	mla	r0, r6, r0, sl
 800f910:	0c02      	lsrs	r2, r0, #16
 800f912:	0c1b      	lsrs	r3, r3, #16
 800f914:	fb06 2303 	mla	r3, r6, r3, r2
 800f918:	f8de 2000 	ldr.w	r2, [lr]
 800f91c:	b280      	uxth	r0, r0
 800f91e:	b292      	uxth	r2, r2
 800f920:	1a12      	subs	r2, r2, r0
 800f922:	445a      	add	r2, fp
 800f924:	f8de 0000 	ldr.w	r0, [lr]
 800f928:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f932:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f936:	b292      	uxth	r2, r2
 800f938:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f93c:	45e1      	cmp	r9, ip
 800f93e:	f84e 2b04 	str.w	r2, [lr], #4
 800f942:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f946:	d2de      	bcs.n	800f906 <quorem+0x42>
 800f948:	9b00      	ldr	r3, [sp, #0]
 800f94a:	58eb      	ldr	r3, [r5, r3]
 800f94c:	b92b      	cbnz	r3, 800f95a <quorem+0x96>
 800f94e:	9b01      	ldr	r3, [sp, #4]
 800f950:	3b04      	subs	r3, #4
 800f952:	429d      	cmp	r5, r3
 800f954:	461a      	mov	r2, r3
 800f956:	d32f      	bcc.n	800f9b8 <quorem+0xf4>
 800f958:	613c      	str	r4, [r7, #16]
 800f95a:	4638      	mov	r0, r7
 800f95c:	f001 f90e 	bl	8010b7c <__mcmp>
 800f960:	2800      	cmp	r0, #0
 800f962:	db25      	blt.n	800f9b0 <quorem+0xec>
 800f964:	4629      	mov	r1, r5
 800f966:	2000      	movs	r0, #0
 800f968:	f858 2b04 	ldr.w	r2, [r8], #4
 800f96c:	f8d1 c000 	ldr.w	ip, [r1]
 800f970:	fa1f fe82 	uxth.w	lr, r2
 800f974:	fa1f f38c 	uxth.w	r3, ip
 800f978:	eba3 030e 	sub.w	r3, r3, lr
 800f97c:	4403      	add	r3, r0
 800f97e:	0c12      	lsrs	r2, r2, #16
 800f980:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f984:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f988:	b29b      	uxth	r3, r3
 800f98a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f98e:	45c1      	cmp	r9, r8
 800f990:	f841 3b04 	str.w	r3, [r1], #4
 800f994:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f998:	d2e6      	bcs.n	800f968 <quorem+0xa4>
 800f99a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f99e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f9a2:	b922      	cbnz	r2, 800f9ae <quorem+0xea>
 800f9a4:	3b04      	subs	r3, #4
 800f9a6:	429d      	cmp	r5, r3
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	d30b      	bcc.n	800f9c4 <quorem+0x100>
 800f9ac:	613c      	str	r4, [r7, #16]
 800f9ae:	3601      	adds	r6, #1
 800f9b0:	4630      	mov	r0, r6
 800f9b2:	b003      	add	sp, #12
 800f9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b8:	6812      	ldr	r2, [r2, #0]
 800f9ba:	3b04      	subs	r3, #4
 800f9bc:	2a00      	cmp	r2, #0
 800f9be:	d1cb      	bne.n	800f958 <quorem+0x94>
 800f9c0:	3c01      	subs	r4, #1
 800f9c2:	e7c6      	b.n	800f952 <quorem+0x8e>
 800f9c4:	6812      	ldr	r2, [r2, #0]
 800f9c6:	3b04      	subs	r3, #4
 800f9c8:	2a00      	cmp	r2, #0
 800f9ca:	d1ef      	bne.n	800f9ac <quorem+0xe8>
 800f9cc:	3c01      	subs	r4, #1
 800f9ce:	e7ea      	b.n	800f9a6 <quorem+0xe2>
 800f9d0:	2000      	movs	r0, #0
 800f9d2:	e7ee      	b.n	800f9b2 <quorem+0xee>
 800f9d4:	0000      	movs	r0, r0
	...

0800f9d8 <_dtoa_r>:
 800f9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9dc:	69c7      	ldr	r7, [r0, #28]
 800f9de:	b099      	sub	sp, #100	@ 0x64
 800f9e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f9e4:	ec55 4b10 	vmov	r4, r5, d0
 800f9e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f9ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800f9ec:	4683      	mov	fp, r0
 800f9ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800f9f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f9f2:	b97f      	cbnz	r7, 800fa14 <_dtoa_r+0x3c>
 800f9f4:	2010      	movs	r0, #16
 800f9f6:	f7fe fd21 	bl	800e43c <malloc>
 800f9fa:	4602      	mov	r2, r0
 800f9fc:	f8cb 001c 	str.w	r0, [fp, #28]
 800fa00:	b920      	cbnz	r0, 800fa0c <_dtoa_r+0x34>
 800fa02:	4ba7      	ldr	r3, [pc, #668]	@ (800fca0 <_dtoa_r+0x2c8>)
 800fa04:	21ef      	movs	r1, #239	@ 0xef
 800fa06:	48a7      	ldr	r0, [pc, #668]	@ (800fca4 <_dtoa_r+0x2cc>)
 800fa08:	f7ff ff3e 	bl	800f888 <__assert_func>
 800fa0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fa10:	6007      	str	r7, [r0, #0]
 800fa12:	60c7      	str	r7, [r0, #12]
 800fa14:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa18:	6819      	ldr	r1, [r3, #0]
 800fa1a:	b159      	cbz	r1, 800fa34 <_dtoa_r+0x5c>
 800fa1c:	685a      	ldr	r2, [r3, #4]
 800fa1e:	604a      	str	r2, [r1, #4]
 800fa20:	2301      	movs	r3, #1
 800fa22:	4093      	lsls	r3, r2
 800fa24:	608b      	str	r3, [r1, #8]
 800fa26:	4658      	mov	r0, fp
 800fa28:	f000 fe24 	bl	8010674 <_Bfree>
 800fa2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa30:	2200      	movs	r2, #0
 800fa32:	601a      	str	r2, [r3, #0]
 800fa34:	1e2b      	subs	r3, r5, #0
 800fa36:	bfb9      	ittee	lt
 800fa38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fa3c:	9303      	strlt	r3, [sp, #12]
 800fa3e:	2300      	movge	r3, #0
 800fa40:	6033      	strge	r3, [r6, #0]
 800fa42:	9f03      	ldr	r7, [sp, #12]
 800fa44:	4b98      	ldr	r3, [pc, #608]	@ (800fca8 <_dtoa_r+0x2d0>)
 800fa46:	bfbc      	itt	lt
 800fa48:	2201      	movlt	r2, #1
 800fa4a:	6032      	strlt	r2, [r6, #0]
 800fa4c:	43bb      	bics	r3, r7
 800fa4e:	d112      	bne.n	800fa76 <_dtoa_r+0x9e>
 800fa50:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fa52:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fa56:	6013      	str	r3, [r2, #0]
 800fa58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fa5c:	4323      	orrs	r3, r4
 800fa5e:	f000 854d 	beq.w	80104fc <_dtoa_r+0xb24>
 800fa62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa64:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fcbc <_dtoa_r+0x2e4>
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	f000 854f 	beq.w	801050c <_dtoa_r+0xb34>
 800fa6e:	f10a 0303 	add.w	r3, sl, #3
 800fa72:	f000 bd49 	b.w	8010508 <_dtoa_r+0xb30>
 800fa76:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	ec51 0b17 	vmov	r0, r1, d7
 800fa80:	2300      	movs	r3, #0
 800fa82:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fa86:	f7f1 f82f 	bl	8000ae8 <__aeabi_dcmpeq>
 800fa8a:	4680      	mov	r8, r0
 800fa8c:	b158      	cbz	r0, 800faa6 <_dtoa_r+0xce>
 800fa8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fa90:	2301      	movs	r3, #1
 800fa92:	6013      	str	r3, [r2, #0]
 800fa94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa96:	b113      	cbz	r3, 800fa9e <_dtoa_r+0xc6>
 800fa98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fa9a:	4b84      	ldr	r3, [pc, #528]	@ (800fcac <_dtoa_r+0x2d4>)
 800fa9c:	6013      	str	r3, [r2, #0]
 800fa9e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fcc0 <_dtoa_r+0x2e8>
 800faa2:	f000 bd33 	b.w	801050c <_dtoa_r+0xb34>
 800faa6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800faaa:	aa16      	add	r2, sp, #88	@ 0x58
 800faac:	a917      	add	r1, sp, #92	@ 0x5c
 800faae:	4658      	mov	r0, fp
 800fab0:	f001 f984 	bl	8010dbc <__d2b>
 800fab4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fab8:	4681      	mov	r9, r0
 800faba:	2e00      	cmp	r6, #0
 800fabc:	d077      	beq.n	800fbae <_dtoa_r+0x1d6>
 800fabe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fac0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800facc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fad0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fad4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fad8:	4619      	mov	r1, r3
 800fada:	2200      	movs	r2, #0
 800fadc:	4b74      	ldr	r3, [pc, #464]	@ (800fcb0 <_dtoa_r+0x2d8>)
 800fade:	f7f0 fbe3 	bl	80002a8 <__aeabi_dsub>
 800fae2:	a369      	add	r3, pc, #420	@ (adr r3, 800fc88 <_dtoa_r+0x2b0>)
 800fae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae8:	f7f0 fd96 	bl	8000618 <__aeabi_dmul>
 800faec:	a368      	add	r3, pc, #416	@ (adr r3, 800fc90 <_dtoa_r+0x2b8>)
 800faee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf2:	f7f0 fbdb 	bl	80002ac <__adddf3>
 800faf6:	4604      	mov	r4, r0
 800faf8:	4630      	mov	r0, r6
 800fafa:	460d      	mov	r5, r1
 800fafc:	f7f0 fd22 	bl	8000544 <__aeabi_i2d>
 800fb00:	a365      	add	r3, pc, #404	@ (adr r3, 800fc98 <_dtoa_r+0x2c0>)
 800fb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb06:	f7f0 fd87 	bl	8000618 <__aeabi_dmul>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	4620      	mov	r0, r4
 800fb10:	4629      	mov	r1, r5
 800fb12:	f7f0 fbcb 	bl	80002ac <__adddf3>
 800fb16:	4604      	mov	r4, r0
 800fb18:	460d      	mov	r5, r1
 800fb1a:	f7f1 f82d 	bl	8000b78 <__aeabi_d2iz>
 800fb1e:	2200      	movs	r2, #0
 800fb20:	4607      	mov	r7, r0
 800fb22:	2300      	movs	r3, #0
 800fb24:	4620      	mov	r0, r4
 800fb26:	4629      	mov	r1, r5
 800fb28:	f7f0 ffe8 	bl	8000afc <__aeabi_dcmplt>
 800fb2c:	b140      	cbz	r0, 800fb40 <_dtoa_r+0x168>
 800fb2e:	4638      	mov	r0, r7
 800fb30:	f7f0 fd08 	bl	8000544 <__aeabi_i2d>
 800fb34:	4622      	mov	r2, r4
 800fb36:	462b      	mov	r3, r5
 800fb38:	f7f0 ffd6 	bl	8000ae8 <__aeabi_dcmpeq>
 800fb3c:	b900      	cbnz	r0, 800fb40 <_dtoa_r+0x168>
 800fb3e:	3f01      	subs	r7, #1
 800fb40:	2f16      	cmp	r7, #22
 800fb42:	d851      	bhi.n	800fbe8 <_dtoa_r+0x210>
 800fb44:	4b5b      	ldr	r3, [pc, #364]	@ (800fcb4 <_dtoa_r+0x2dc>)
 800fb46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb52:	f7f0 ffd3 	bl	8000afc <__aeabi_dcmplt>
 800fb56:	2800      	cmp	r0, #0
 800fb58:	d048      	beq.n	800fbec <_dtoa_r+0x214>
 800fb5a:	3f01      	subs	r7, #1
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	9312      	str	r3, [sp, #72]	@ 0x48
 800fb60:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fb62:	1b9b      	subs	r3, r3, r6
 800fb64:	1e5a      	subs	r2, r3, #1
 800fb66:	bf44      	itt	mi
 800fb68:	f1c3 0801 	rsbmi	r8, r3, #1
 800fb6c:	2300      	movmi	r3, #0
 800fb6e:	9208      	str	r2, [sp, #32]
 800fb70:	bf54      	ite	pl
 800fb72:	f04f 0800 	movpl.w	r8, #0
 800fb76:	9308      	strmi	r3, [sp, #32]
 800fb78:	2f00      	cmp	r7, #0
 800fb7a:	db39      	blt.n	800fbf0 <_dtoa_r+0x218>
 800fb7c:	9b08      	ldr	r3, [sp, #32]
 800fb7e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fb80:	443b      	add	r3, r7
 800fb82:	9308      	str	r3, [sp, #32]
 800fb84:	2300      	movs	r3, #0
 800fb86:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb8a:	2b09      	cmp	r3, #9
 800fb8c:	d864      	bhi.n	800fc58 <_dtoa_r+0x280>
 800fb8e:	2b05      	cmp	r3, #5
 800fb90:	bfc4      	itt	gt
 800fb92:	3b04      	subgt	r3, #4
 800fb94:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fb96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb98:	f1a3 0302 	sub.w	r3, r3, #2
 800fb9c:	bfcc      	ite	gt
 800fb9e:	2400      	movgt	r4, #0
 800fba0:	2401      	movle	r4, #1
 800fba2:	2b03      	cmp	r3, #3
 800fba4:	d863      	bhi.n	800fc6e <_dtoa_r+0x296>
 800fba6:	e8df f003 	tbb	[pc, r3]
 800fbaa:	372a      	.short	0x372a
 800fbac:	5535      	.short	0x5535
 800fbae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fbb2:	441e      	add	r6, r3
 800fbb4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fbb8:	2b20      	cmp	r3, #32
 800fbba:	bfc1      	itttt	gt
 800fbbc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fbc0:	409f      	lslgt	r7, r3
 800fbc2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fbc6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fbca:	bfd6      	itet	le
 800fbcc:	f1c3 0320 	rsble	r3, r3, #32
 800fbd0:	ea47 0003 	orrgt.w	r0, r7, r3
 800fbd4:	fa04 f003 	lslle.w	r0, r4, r3
 800fbd8:	f7f0 fca4 	bl	8000524 <__aeabi_ui2d>
 800fbdc:	2201      	movs	r2, #1
 800fbde:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fbe2:	3e01      	subs	r6, #1
 800fbe4:	9214      	str	r2, [sp, #80]	@ 0x50
 800fbe6:	e777      	b.n	800fad8 <_dtoa_r+0x100>
 800fbe8:	2301      	movs	r3, #1
 800fbea:	e7b8      	b.n	800fb5e <_dtoa_r+0x186>
 800fbec:	9012      	str	r0, [sp, #72]	@ 0x48
 800fbee:	e7b7      	b.n	800fb60 <_dtoa_r+0x188>
 800fbf0:	427b      	negs	r3, r7
 800fbf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	eba8 0807 	sub.w	r8, r8, r7
 800fbfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fbfc:	e7c4      	b.n	800fb88 <_dtoa_r+0x1b0>
 800fbfe:	2300      	movs	r3, #0
 800fc00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	dc35      	bgt.n	800fc74 <_dtoa_r+0x29c>
 800fc08:	2301      	movs	r3, #1
 800fc0a:	9300      	str	r3, [sp, #0]
 800fc0c:	9307      	str	r3, [sp, #28]
 800fc0e:	461a      	mov	r2, r3
 800fc10:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc12:	e00b      	b.n	800fc2c <_dtoa_r+0x254>
 800fc14:	2301      	movs	r3, #1
 800fc16:	e7f3      	b.n	800fc00 <_dtoa_r+0x228>
 800fc18:	2300      	movs	r3, #0
 800fc1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc1e:	18fb      	adds	r3, r7, r3
 800fc20:	9300      	str	r3, [sp, #0]
 800fc22:	3301      	adds	r3, #1
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	9307      	str	r3, [sp, #28]
 800fc28:	bfb8      	it	lt
 800fc2a:	2301      	movlt	r3, #1
 800fc2c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fc30:	2100      	movs	r1, #0
 800fc32:	2204      	movs	r2, #4
 800fc34:	f102 0514 	add.w	r5, r2, #20
 800fc38:	429d      	cmp	r5, r3
 800fc3a:	d91f      	bls.n	800fc7c <_dtoa_r+0x2a4>
 800fc3c:	6041      	str	r1, [r0, #4]
 800fc3e:	4658      	mov	r0, fp
 800fc40:	f000 fcd8 	bl	80105f4 <_Balloc>
 800fc44:	4682      	mov	sl, r0
 800fc46:	2800      	cmp	r0, #0
 800fc48:	d13c      	bne.n	800fcc4 <_dtoa_r+0x2ec>
 800fc4a:	4b1b      	ldr	r3, [pc, #108]	@ (800fcb8 <_dtoa_r+0x2e0>)
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	f240 11af 	movw	r1, #431	@ 0x1af
 800fc52:	e6d8      	b.n	800fa06 <_dtoa_r+0x2e>
 800fc54:	2301      	movs	r3, #1
 800fc56:	e7e0      	b.n	800fc1a <_dtoa_r+0x242>
 800fc58:	2401      	movs	r4, #1
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc5e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fc60:	f04f 33ff 	mov.w	r3, #4294967295
 800fc64:	9300      	str	r3, [sp, #0]
 800fc66:	9307      	str	r3, [sp, #28]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	2312      	movs	r3, #18
 800fc6c:	e7d0      	b.n	800fc10 <_dtoa_r+0x238>
 800fc6e:	2301      	movs	r3, #1
 800fc70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc72:	e7f5      	b.n	800fc60 <_dtoa_r+0x288>
 800fc74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc76:	9300      	str	r3, [sp, #0]
 800fc78:	9307      	str	r3, [sp, #28]
 800fc7a:	e7d7      	b.n	800fc2c <_dtoa_r+0x254>
 800fc7c:	3101      	adds	r1, #1
 800fc7e:	0052      	lsls	r2, r2, #1
 800fc80:	e7d8      	b.n	800fc34 <_dtoa_r+0x25c>
 800fc82:	bf00      	nop
 800fc84:	f3af 8000 	nop.w
 800fc88:	636f4361 	.word	0x636f4361
 800fc8c:	3fd287a7 	.word	0x3fd287a7
 800fc90:	8b60c8b3 	.word	0x8b60c8b3
 800fc94:	3fc68a28 	.word	0x3fc68a28
 800fc98:	509f79fb 	.word	0x509f79fb
 800fc9c:	3fd34413 	.word	0x3fd34413
 800fca0:	080148ec 	.word	0x080148ec
 800fca4:	080149a6 	.word	0x080149a6
 800fca8:	7ff00000 	.word	0x7ff00000
 800fcac:	08014ce9 	.word	0x08014ce9
 800fcb0:	3ff80000 	.word	0x3ff80000
 800fcb4:	08014aa0 	.word	0x08014aa0
 800fcb8:	080149fe 	.word	0x080149fe
 800fcbc:	080149a2 	.word	0x080149a2
 800fcc0:	08014ce8 	.word	0x08014ce8
 800fcc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fcc8:	6018      	str	r0, [r3, #0]
 800fcca:	9b07      	ldr	r3, [sp, #28]
 800fccc:	2b0e      	cmp	r3, #14
 800fcce:	f200 80a4 	bhi.w	800fe1a <_dtoa_r+0x442>
 800fcd2:	2c00      	cmp	r4, #0
 800fcd4:	f000 80a1 	beq.w	800fe1a <_dtoa_r+0x442>
 800fcd8:	2f00      	cmp	r7, #0
 800fcda:	dd33      	ble.n	800fd44 <_dtoa_r+0x36c>
 800fcdc:	4bad      	ldr	r3, [pc, #692]	@ (800ff94 <_dtoa_r+0x5bc>)
 800fcde:	f007 020f 	and.w	r2, r7, #15
 800fce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fce6:	ed93 7b00 	vldr	d7, [r3]
 800fcea:	05f8      	lsls	r0, r7, #23
 800fcec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fcf0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fcf4:	d516      	bpl.n	800fd24 <_dtoa_r+0x34c>
 800fcf6:	4ba8      	ldr	r3, [pc, #672]	@ (800ff98 <_dtoa_r+0x5c0>)
 800fcf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fcfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd00:	f7f0 fdb4 	bl	800086c <__aeabi_ddiv>
 800fd04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd08:	f004 040f 	and.w	r4, r4, #15
 800fd0c:	2603      	movs	r6, #3
 800fd0e:	4da2      	ldr	r5, [pc, #648]	@ (800ff98 <_dtoa_r+0x5c0>)
 800fd10:	b954      	cbnz	r4, 800fd28 <_dtoa_r+0x350>
 800fd12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd1a:	f7f0 fda7 	bl	800086c <__aeabi_ddiv>
 800fd1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd22:	e028      	b.n	800fd76 <_dtoa_r+0x39e>
 800fd24:	2602      	movs	r6, #2
 800fd26:	e7f2      	b.n	800fd0e <_dtoa_r+0x336>
 800fd28:	07e1      	lsls	r1, r4, #31
 800fd2a:	d508      	bpl.n	800fd3e <_dtoa_r+0x366>
 800fd2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd34:	f7f0 fc70 	bl	8000618 <__aeabi_dmul>
 800fd38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd3c:	3601      	adds	r6, #1
 800fd3e:	1064      	asrs	r4, r4, #1
 800fd40:	3508      	adds	r5, #8
 800fd42:	e7e5      	b.n	800fd10 <_dtoa_r+0x338>
 800fd44:	f000 80d2 	beq.w	800feec <_dtoa_r+0x514>
 800fd48:	427c      	negs	r4, r7
 800fd4a:	4b92      	ldr	r3, [pc, #584]	@ (800ff94 <_dtoa_r+0x5bc>)
 800fd4c:	4d92      	ldr	r5, [pc, #584]	@ (800ff98 <_dtoa_r+0x5c0>)
 800fd4e:	f004 020f 	and.w	r2, r4, #15
 800fd52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd5e:	f7f0 fc5b 	bl	8000618 <__aeabi_dmul>
 800fd62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd66:	1124      	asrs	r4, r4, #4
 800fd68:	2300      	movs	r3, #0
 800fd6a:	2602      	movs	r6, #2
 800fd6c:	2c00      	cmp	r4, #0
 800fd6e:	f040 80b2 	bne.w	800fed6 <_dtoa_r+0x4fe>
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d1d3      	bne.n	800fd1e <_dtoa_r+0x346>
 800fd76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fd78:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	f000 80b7 	beq.w	800fef0 <_dtoa_r+0x518>
 800fd82:	4b86      	ldr	r3, [pc, #536]	@ (800ff9c <_dtoa_r+0x5c4>)
 800fd84:	2200      	movs	r2, #0
 800fd86:	4620      	mov	r0, r4
 800fd88:	4629      	mov	r1, r5
 800fd8a:	f7f0 feb7 	bl	8000afc <__aeabi_dcmplt>
 800fd8e:	2800      	cmp	r0, #0
 800fd90:	f000 80ae 	beq.w	800fef0 <_dtoa_r+0x518>
 800fd94:	9b07      	ldr	r3, [sp, #28]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	f000 80aa 	beq.w	800fef0 <_dtoa_r+0x518>
 800fd9c:	9b00      	ldr	r3, [sp, #0]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	dd37      	ble.n	800fe12 <_dtoa_r+0x43a>
 800fda2:	1e7b      	subs	r3, r7, #1
 800fda4:	9304      	str	r3, [sp, #16]
 800fda6:	4620      	mov	r0, r4
 800fda8:	4b7d      	ldr	r3, [pc, #500]	@ (800ffa0 <_dtoa_r+0x5c8>)
 800fdaa:	2200      	movs	r2, #0
 800fdac:	4629      	mov	r1, r5
 800fdae:	f7f0 fc33 	bl	8000618 <__aeabi_dmul>
 800fdb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdb6:	9c00      	ldr	r4, [sp, #0]
 800fdb8:	3601      	adds	r6, #1
 800fdba:	4630      	mov	r0, r6
 800fdbc:	f7f0 fbc2 	bl	8000544 <__aeabi_i2d>
 800fdc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fdc4:	f7f0 fc28 	bl	8000618 <__aeabi_dmul>
 800fdc8:	4b76      	ldr	r3, [pc, #472]	@ (800ffa4 <_dtoa_r+0x5cc>)
 800fdca:	2200      	movs	r2, #0
 800fdcc:	f7f0 fa6e 	bl	80002ac <__adddf3>
 800fdd0:	4605      	mov	r5, r0
 800fdd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fdd6:	2c00      	cmp	r4, #0
 800fdd8:	f040 808d 	bne.w	800fef6 <_dtoa_r+0x51e>
 800fddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fde0:	4b71      	ldr	r3, [pc, #452]	@ (800ffa8 <_dtoa_r+0x5d0>)
 800fde2:	2200      	movs	r2, #0
 800fde4:	f7f0 fa60 	bl	80002a8 <__aeabi_dsub>
 800fde8:	4602      	mov	r2, r0
 800fdea:	460b      	mov	r3, r1
 800fdec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fdf0:	462a      	mov	r2, r5
 800fdf2:	4633      	mov	r3, r6
 800fdf4:	f7f0 fea0 	bl	8000b38 <__aeabi_dcmpgt>
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	f040 828b 	bne.w	8010314 <_dtoa_r+0x93c>
 800fdfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe02:	462a      	mov	r2, r5
 800fe04:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fe08:	f7f0 fe78 	bl	8000afc <__aeabi_dcmplt>
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	f040 8128 	bne.w	8010062 <_dtoa_r+0x68a>
 800fe12:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fe16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fe1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	f2c0 815a 	blt.w	80100d6 <_dtoa_r+0x6fe>
 800fe22:	2f0e      	cmp	r7, #14
 800fe24:	f300 8157 	bgt.w	80100d6 <_dtoa_r+0x6fe>
 800fe28:	4b5a      	ldr	r3, [pc, #360]	@ (800ff94 <_dtoa_r+0x5bc>)
 800fe2a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe2e:	ed93 7b00 	vldr	d7, [r3]
 800fe32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	ed8d 7b00 	vstr	d7, [sp]
 800fe3a:	da03      	bge.n	800fe44 <_dtoa_r+0x46c>
 800fe3c:	9b07      	ldr	r3, [sp, #28]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	f340 8101 	ble.w	8010046 <_dtoa_r+0x66e>
 800fe44:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fe48:	4656      	mov	r6, sl
 800fe4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe4e:	4620      	mov	r0, r4
 800fe50:	4629      	mov	r1, r5
 800fe52:	f7f0 fd0b 	bl	800086c <__aeabi_ddiv>
 800fe56:	f7f0 fe8f 	bl	8000b78 <__aeabi_d2iz>
 800fe5a:	4680      	mov	r8, r0
 800fe5c:	f7f0 fb72 	bl	8000544 <__aeabi_i2d>
 800fe60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe64:	f7f0 fbd8 	bl	8000618 <__aeabi_dmul>
 800fe68:	4602      	mov	r2, r0
 800fe6a:	460b      	mov	r3, r1
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	4629      	mov	r1, r5
 800fe70:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fe74:	f7f0 fa18 	bl	80002a8 <__aeabi_dsub>
 800fe78:	f806 4b01 	strb.w	r4, [r6], #1
 800fe7c:	9d07      	ldr	r5, [sp, #28]
 800fe7e:	eba6 040a 	sub.w	r4, r6, sl
 800fe82:	42a5      	cmp	r5, r4
 800fe84:	4602      	mov	r2, r0
 800fe86:	460b      	mov	r3, r1
 800fe88:	f040 8117 	bne.w	80100ba <_dtoa_r+0x6e2>
 800fe8c:	f7f0 fa0e 	bl	80002ac <__adddf3>
 800fe90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe94:	4604      	mov	r4, r0
 800fe96:	460d      	mov	r5, r1
 800fe98:	f7f0 fe4e 	bl	8000b38 <__aeabi_dcmpgt>
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	f040 80f9 	bne.w	8010094 <_dtoa_r+0x6bc>
 800fea2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fea6:	4620      	mov	r0, r4
 800fea8:	4629      	mov	r1, r5
 800feaa:	f7f0 fe1d 	bl	8000ae8 <__aeabi_dcmpeq>
 800feae:	b118      	cbz	r0, 800feb8 <_dtoa_r+0x4e0>
 800feb0:	f018 0f01 	tst.w	r8, #1
 800feb4:	f040 80ee 	bne.w	8010094 <_dtoa_r+0x6bc>
 800feb8:	4649      	mov	r1, r9
 800feba:	4658      	mov	r0, fp
 800febc:	f000 fbda 	bl	8010674 <_Bfree>
 800fec0:	2300      	movs	r3, #0
 800fec2:	7033      	strb	r3, [r6, #0]
 800fec4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fec6:	3701      	adds	r7, #1
 800fec8:	601f      	str	r7, [r3, #0]
 800feca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fecc:	2b00      	cmp	r3, #0
 800fece:	f000 831d 	beq.w	801050c <_dtoa_r+0xb34>
 800fed2:	601e      	str	r6, [r3, #0]
 800fed4:	e31a      	b.n	801050c <_dtoa_r+0xb34>
 800fed6:	07e2      	lsls	r2, r4, #31
 800fed8:	d505      	bpl.n	800fee6 <_dtoa_r+0x50e>
 800feda:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fede:	f7f0 fb9b 	bl	8000618 <__aeabi_dmul>
 800fee2:	3601      	adds	r6, #1
 800fee4:	2301      	movs	r3, #1
 800fee6:	1064      	asrs	r4, r4, #1
 800fee8:	3508      	adds	r5, #8
 800feea:	e73f      	b.n	800fd6c <_dtoa_r+0x394>
 800feec:	2602      	movs	r6, #2
 800feee:	e742      	b.n	800fd76 <_dtoa_r+0x39e>
 800fef0:	9c07      	ldr	r4, [sp, #28]
 800fef2:	9704      	str	r7, [sp, #16]
 800fef4:	e761      	b.n	800fdba <_dtoa_r+0x3e2>
 800fef6:	4b27      	ldr	r3, [pc, #156]	@ (800ff94 <_dtoa_r+0x5bc>)
 800fef8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fefa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fefe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ff02:	4454      	add	r4, sl
 800ff04:	2900      	cmp	r1, #0
 800ff06:	d053      	beq.n	800ffb0 <_dtoa_r+0x5d8>
 800ff08:	4928      	ldr	r1, [pc, #160]	@ (800ffac <_dtoa_r+0x5d4>)
 800ff0a:	2000      	movs	r0, #0
 800ff0c:	f7f0 fcae 	bl	800086c <__aeabi_ddiv>
 800ff10:	4633      	mov	r3, r6
 800ff12:	462a      	mov	r2, r5
 800ff14:	f7f0 f9c8 	bl	80002a8 <__aeabi_dsub>
 800ff18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff1c:	4656      	mov	r6, sl
 800ff1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff22:	f7f0 fe29 	bl	8000b78 <__aeabi_d2iz>
 800ff26:	4605      	mov	r5, r0
 800ff28:	f7f0 fb0c 	bl	8000544 <__aeabi_i2d>
 800ff2c:	4602      	mov	r2, r0
 800ff2e:	460b      	mov	r3, r1
 800ff30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff34:	f7f0 f9b8 	bl	80002a8 <__aeabi_dsub>
 800ff38:	3530      	adds	r5, #48	@ 0x30
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	460b      	mov	r3, r1
 800ff3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff42:	f806 5b01 	strb.w	r5, [r6], #1
 800ff46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ff4a:	f7f0 fdd7 	bl	8000afc <__aeabi_dcmplt>
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	d171      	bne.n	8010036 <_dtoa_r+0x65e>
 800ff52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff56:	4911      	ldr	r1, [pc, #68]	@ (800ff9c <_dtoa_r+0x5c4>)
 800ff58:	2000      	movs	r0, #0
 800ff5a:	f7f0 f9a5 	bl	80002a8 <__aeabi_dsub>
 800ff5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ff62:	f7f0 fdcb 	bl	8000afc <__aeabi_dcmplt>
 800ff66:	2800      	cmp	r0, #0
 800ff68:	f040 8095 	bne.w	8010096 <_dtoa_r+0x6be>
 800ff6c:	42a6      	cmp	r6, r4
 800ff6e:	f43f af50 	beq.w	800fe12 <_dtoa_r+0x43a>
 800ff72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ff76:	4b0a      	ldr	r3, [pc, #40]	@ (800ffa0 <_dtoa_r+0x5c8>)
 800ff78:	2200      	movs	r2, #0
 800ff7a:	f7f0 fb4d 	bl	8000618 <__aeabi_dmul>
 800ff7e:	4b08      	ldr	r3, [pc, #32]	@ (800ffa0 <_dtoa_r+0x5c8>)
 800ff80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff84:	2200      	movs	r2, #0
 800ff86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff8a:	f7f0 fb45 	bl	8000618 <__aeabi_dmul>
 800ff8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff92:	e7c4      	b.n	800ff1e <_dtoa_r+0x546>
 800ff94:	08014aa0 	.word	0x08014aa0
 800ff98:	08014a78 	.word	0x08014a78
 800ff9c:	3ff00000 	.word	0x3ff00000
 800ffa0:	40240000 	.word	0x40240000
 800ffa4:	401c0000 	.word	0x401c0000
 800ffa8:	40140000 	.word	0x40140000
 800ffac:	3fe00000 	.word	0x3fe00000
 800ffb0:	4631      	mov	r1, r6
 800ffb2:	4628      	mov	r0, r5
 800ffb4:	f7f0 fb30 	bl	8000618 <__aeabi_dmul>
 800ffb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ffbc:	9415      	str	r4, [sp, #84]	@ 0x54
 800ffbe:	4656      	mov	r6, sl
 800ffc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffc4:	f7f0 fdd8 	bl	8000b78 <__aeabi_d2iz>
 800ffc8:	4605      	mov	r5, r0
 800ffca:	f7f0 fabb 	bl	8000544 <__aeabi_i2d>
 800ffce:	4602      	mov	r2, r0
 800ffd0:	460b      	mov	r3, r1
 800ffd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffd6:	f7f0 f967 	bl	80002a8 <__aeabi_dsub>
 800ffda:	3530      	adds	r5, #48	@ 0x30
 800ffdc:	f806 5b01 	strb.w	r5, [r6], #1
 800ffe0:	4602      	mov	r2, r0
 800ffe2:	460b      	mov	r3, r1
 800ffe4:	42a6      	cmp	r6, r4
 800ffe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ffea:	f04f 0200 	mov.w	r2, #0
 800ffee:	d124      	bne.n	801003a <_dtoa_r+0x662>
 800fff0:	4bac      	ldr	r3, [pc, #688]	@ (80102a4 <_dtoa_r+0x8cc>)
 800fff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fff6:	f7f0 f959 	bl	80002ac <__adddf3>
 800fffa:	4602      	mov	r2, r0
 800fffc:	460b      	mov	r3, r1
 800fffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010002:	f7f0 fd99 	bl	8000b38 <__aeabi_dcmpgt>
 8010006:	2800      	cmp	r0, #0
 8010008:	d145      	bne.n	8010096 <_dtoa_r+0x6be>
 801000a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801000e:	49a5      	ldr	r1, [pc, #660]	@ (80102a4 <_dtoa_r+0x8cc>)
 8010010:	2000      	movs	r0, #0
 8010012:	f7f0 f949 	bl	80002a8 <__aeabi_dsub>
 8010016:	4602      	mov	r2, r0
 8010018:	460b      	mov	r3, r1
 801001a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801001e:	f7f0 fd6d 	bl	8000afc <__aeabi_dcmplt>
 8010022:	2800      	cmp	r0, #0
 8010024:	f43f aef5 	beq.w	800fe12 <_dtoa_r+0x43a>
 8010028:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801002a:	1e73      	subs	r3, r6, #1
 801002c:	9315      	str	r3, [sp, #84]	@ 0x54
 801002e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010032:	2b30      	cmp	r3, #48	@ 0x30
 8010034:	d0f8      	beq.n	8010028 <_dtoa_r+0x650>
 8010036:	9f04      	ldr	r7, [sp, #16]
 8010038:	e73e      	b.n	800feb8 <_dtoa_r+0x4e0>
 801003a:	4b9b      	ldr	r3, [pc, #620]	@ (80102a8 <_dtoa_r+0x8d0>)
 801003c:	f7f0 faec 	bl	8000618 <__aeabi_dmul>
 8010040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010044:	e7bc      	b.n	800ffc0 <_dtoa_r+0x5e8>
 8010046:	d10c      	bne.n	8010062 <_dtoa_r+0x68a>
 8010048:	4b98      	ldr	r3, [pc, #608]	@ (80102ac <_dtoa_r+0x8d4>)
 801004a:	2200      	movs	r2, #0
 801004c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010050:	f7f0 fae2 	bl	8000618 <__aeabi_dmul>
 8010054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010058:	f7f0 fd64 	bl	8000b24 <__aeabi_dcmpge>
 801005c:	2800      	cmp	r0, #0
 801005e:	f000 8157 	beq.w	8010310 <_dtoa_r+0x938>
 8010062:	2400      	movs	r4, #0
 8010064:	4625      	mov	r5, r4
 8010066:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010068:	43db      	mvns	r3, r3
 801006a:	9304      	str	r3, [sp, #16]
 801006c:	4656      	mov	r6, sl
 801006e:	2700      	movs	r7, #0
 8010070:	4621      	mov	r1, r4
 8010072:	4658      	mov	r0, fp
 8010074:	f000 fafe 	bl	8010674 <_Bfree>
 8010078:	2d00      	cmp	r5, #0
 801007a:	d0dc      	beq.n	8010036 <_dtoa_r+0x65e>
 801007c:	b12f      	cbz	r7, 801008a <_dtoa_r+0x6b2>
 801007e:	42af      	cmp	r7, r5
 8010080:	d003      	beq.n	801008a <_dtoa_r+0x6b2>
 8010082:	4639      	mov	r1, r7
 8010084:	4658      	mov	r0, fp
 8010086:	f000 faf5 	bl	8010674 <_Bfree>
 801008a:	4629      	mov	r1, r5
 801008c:	4658      	mov	r0, fp
 801008e:	f000 faf1 	bl	8010674 <_Bfree>
 8010092:	e7d0      	b.n	8010036 <_dtoa_r+0x65e>
 8010094:	9704      	str	r7, [sp, #16]
 8010096:	4633      	mov	r3, r6
 8010098:	461e      	mov	r6, r3
 801009a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801009e:	2a39      	cmp	r2, #57	@ 0x39
 80100a0:	d107      	bne.n	80100b2 <_dtoa_r+0x6da>
 80100a2:	459a      	cmp	sl, r3
 80100a4:	d1f8      	bne.n	8010098 <_dtoa_r+0x6c0>
 80100a6:	9a04      	ldr	r2, [sp, #16]
 80100a8:	3201      	adds	r2, #1
 80100aa:	9204      	str	r2, [sp, #16]
 80100ac:	2230      	movs	r2, #48	@ 0x30
 80100ae:	f88a 2000 	strb.w	r2, [sl]
 80100b2:	781a      	ldrb	r2, [r3, #0]
 80100b4:	3201      	adds	r2, #1
 80100b6:	701a      	strb	r2, [r3, #0]
 80100b8:	e7bd      	b.n	8010036 <_dtoa_r+0x65e>
 80100ba:	4b7b      	ldr	r3, [pc, #492]	@ (80102a8 <_dtoa_r+0x8d0>)
 80100bc:	2200      	movs	r2, #0
 80100be:	f7f0 faab 	bl	8000618 <__aeabi_dmul>
 80100c2:	2200      	movs	r2, #0
 80100c4:	2300      	movs	r3, #0
 80100c6:	4604      	mov	r4, r0
 80100c8:	460d      	mov	r5, r1
 80100ca:	f7f0 fd0d 	bl	8000ae8 <__aeabi_dcmpeq>
 80100ce:	2800      	cmp	r0, #0
 80100d0:	f43f aebb 	beq.w	800fe4a <_dtoa_r+0x472>
 80100d4:	e6f0      	b.n	800feb8 <_dtoa_r+0x4e0>
 80100d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80100d8:	2a00      	cmp	r2, #0
 80100da:	f000 80db 	beq.w	8010294 <_dtoa_r+0x8bc>
 80100de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100e0:	2a01      	cmp	r2, #1
 80100e2:	f300 80bf 	bgt.w	8010264 <_dtoa_r+0x88c>
 80100e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80100e8:	2a00      	cmp	r2, #0
 80100ea:	f000 80b7 	beq.w	801025c <_dtoa_r+0x884>
 80100ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80100f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80100f4:	4646      	mov	r6, r8
 80100f6:	9a08      	ldr	r2, [sp, #32]
 80100f8:	2101      	movs	r1, #1
 80100fa:	441a      	add	r2, r3
 80100fc:	4658      	mov	r0, fp
 80100fe:	4498      	add	r8, r3
 8010100:	9208      	str	r2, [sp, #32]
 8010102:	f000 fbb5 	bl	8010870 <__i2b>
 8010106:	4605      	mov	r5, r0
 8010108:	b15e      	cbz	r6, 8010122 <_dtoa_r+0x74a>
 801010a:	9b08      	ldr	r3, [sp, #32]
 801010c:	2b00      	cmp	r3, #0
 801010e:	dd08      	ble.n	8010122 <_dtoa_r+0x74a>
 8010110:	42b3      	cmp	r3, r6
 8010112:	9a08      	ldr	r2, [sp, #32]
 8010114:	bfa8      	it	ge
 8010116:	4633      	movge	r3, r6
 8010118:	eba8 0803 	sub.w	r8, r8, r3
 801011c:	1af6      	subs	r6, r6, r3
 801011e:	1ad3      	subs	r3, r2, r3
 8010120:	9308      	str	r3, [sp, #32]
 8010122:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010124:	b1f3      	cbz	r3, 8010164 <_dtoa_r+0x78c>
 8010126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010128:	2b00      	cmp	r3, #0
 801012a:	f000 80b7 	beq.w	801029c <_dtoa_r+0x8c4>
 801012e:	b18c      	cbz	r4, 8010154 <_dtoa_r+0x77c>
 8010130:	4629      	mov	r1, r5
 8010132:	4622      	mov	r2, r4
 8010134:	4658      	mov	r0, fp
 8010136:	f000 fc5b 	bl	80109f0 <__pow5mult>
 801013a:	464a      	mov	r2, r9
 801013c:	4601      	mov	r1, r0
 801013e:	4605      	mov	r5, r0
 8010140:	4658      	mov	r0, fp
 8010142:	f000 fbab 	bl	801089c <__multiply>
 8010146:	4649      	mov	r1, r9
 8010148:	9004      	str	r0, [sp, #16]
 801014a:	4658      	mov	r0, fp
 801014c:	f000 fa92 	bl	8010674 <_Bfree>
 8010150:	9b04      	ldr	r3, [sp, #16]
 8010152:	4699      	mov	r9, r3
 8010154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010156:	1b1a      	subs	r2, r3, r4
 8010158:	d004      	beq.n	8010164 <_dtoa_r+0x78c>
 801015a:	4649      	mov	r1, r9
 801015c:	4658      	mov	r0, fp
 801015e:	f000 fc47 	bl	80109f0 <__pow5mult>
 8010162:	4681      	mov	r9, r0
 8010164:	2101      	movs	r1, #1
 8010166:	4658      	mov	r0, fp
 8010168:	f000 fb82 	bl	8010870 <__i2b>
 801016c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801016e:	4604      	mov	r4, r0
 8010170:	2b00      	cmp	r3, #0
 8010172:	f000 81cf 	beq.w	8010514 <_dtoa_r+0xb3c>
 8010176:	461a      	mov	r2, r3
 8010178:	4601      	mov	r1, r0
 801017a:	4658      	mov	r0, fp
 801017c:	f000 fc38 	bl	80109f0 <__pow5mult>
 8010180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010182:	2b01      	cmp	r3, #1
 8010184:	4604      	mov	r4, r0
 8010186:	f300 8095 	bgt.w	80102b4 <_dtoa_r+0x8dc>
 801018a:	9b02      	ldr	r3, [sp, #8]
 801018c:	2b00      	cmp	r3, #0
 801018e:	f040 8087 	bne.w	80102a0 <_dtoa_r+0x8c8>
 8010192:	9b03      	ldr	r3, [sp, #12]
 8010194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010198:	2b00      	cmp	r3, #0
 801019a:	f040 8089 	bne.w	80102b0 <_dtoa_r+0x8d8>
 801019e:	9b03      	ldr	r3, [sp, #12]
 80101a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80101a4:	0d1b      	lsrs	r3, r3, #20
 80101a6:	051b      	lsls	r3, r3, #20
 80101a8:	b12b      	cbz	r3, 80101b6 <_dtoa_r+0x7de>
 80101aa:	9b08      	ldr	r3, [sp, #32]
 80101ac:	3301      	adds	r3, #1
 80101ae:	9308      	str	r3, [sp, #32]
 80101b0:	f108 0801 	add.w	r8, r8, #1
 80101b4:	2301      	movs	r3, #1
 80101b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80101b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	f000 81b0 	beq.w	8010520 <_dtoa_r+0xb48>
 80101c0:	6923      	ldr	r3, [r4, #16]
 80101c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80101c6:	6918      	ldr	r0, [r3, #16]
 80101c8:	f000 fb06 	bl	80107d8 <__hi0bits>
 80101cc:	f1c0 0020 	rsb	r0, r0, #32
 80101d0:	9b08      	ldr	r3, [sp, #32]
 80101d2:	4418      	add	r0, r3
 80101d4:	f010 001f 	ands.w	r0, r0, #31
 80101d8:	d077      	beq.n	80102ca <_dtoa_r+0x8f2>
 80101da:	f1c0 0320 	rsb	r3, r0, #32
 80101de:	2b04      	cmp	r3, #4
 80101e0:	dd6b      	ble.n	80102ba <_dtoa_r+0x8e2>
 80101e2:	9b08      	ldr	r3, [sp, #32]
 80101e4:	f1c0 001c 	rsb	r0, r0, #28
 80101e8:	4403      	add	r3, r0
 80101ea:	4480      	add	r8, r0
 80101ec:	4406      	add	r6, r0
 80101ee:	9308      	str	r3, [sp, #32]
 80101f0:	f1b8 0f00 	cmp.w	r8, #0
 80101f4:	dd05      	ble.n	8010202 <_dtoa_r+0x82a>
 80101f6:	4649      	mov	r1, r9
 80101f8:	4642      	mov	r2, r8
 80101fa:	4658      	mov	r0, fp
 80101fc:	f000 fc52 	bl	8010aa4 <__lshift>
 8010200:	4681      	mov	r9, r0
 8010202:	9b08      	ldr	r3, [sp, #32]
 8010204:	2b00      	cmp	r3, #0
 8010206:	dd05      	ble.n	8010214 <_dtoa_r+0x83c>
 8010208:	4621      	mov	r1, r4
 801020a:	461a      	mov	r2, r3
 801020c:	4658      	mov	r0, fp
 801020e:	f000 fc49 	bl	8010aa4 <__lshift>
 8010212:	4604      	mov	r4, r0
 8010214:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010216:	2b00      	cmp	r3, #0
 8010218:	d059      	beq.n	80102ce <_dtoa_r+0x8f6>
 801021a:	4621      	mov	r1, r4
 801021c:	4648      	mov	r0, r9
 801021e:	f000 fcad 	bl	8010b7c <__mcmp>
 8010222:	2800      	cmp	r0, #0
 8010224:	da53      	bge.n	80102ce <_dtoa_r+0x8f6>
 8010226:	1e7b      	subs	r3, r7, #1
 8010228:	9304      	str	r3, [sp, #16]
 801022a:	4649      	mov	r1, r9
 801022c:	2300      	movs	r3, #0
 801022e:	220a      	movs	r2, #10
 8010230:	4658      	mov	r0, fp
 8010232:	f000 fa41 	bl	80106b8 <__multadd>
 8010236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010238:	4681      	mov	r9, r0
 801023a:	2b00      	cmp	r3, #0
 801023c:	f000 8172 	beq.w	8010524 <_dtoa_r+0xb4c>
 8010240:	2300      	movs	r3, #0
 8010242:	4629      	mov	r1, r5
 8010244:	220a      	movs	r2, #10
 8010246:	4658      	mov	r0, fp
 8010248:	f000 fa36 	bl	80106b8 <__multadd>
 801024c:	9b00      	ldr	r3, [sp, #0]
 801024e:	2b00      	cmp	r3, #0
 8010250:	4605      	mov	r5, r0
 8010252:	dc67      	bgt.n	8010324 <_dtoa_r+0x94c>
 8010254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010256:	2b02      	cmp	r3, #2
 8010258:	dc41      	bgt.n	80102de <_dtoa_r+0x906>
 801025a:	e063      	b.n	8010324 <_dtoa_r+0x94c>
 801025c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801025e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010262:	e746      	b.n	80100f2 <_dtoa_r+0x71a>
 8010264:	9b07      	ldr	r3, [sp, #28]
 8010266:	1e5c      	subs	r4, r3, #1
 8010268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801026a:	42a3      	cmp	r3, r4
 801026c:	bfbf      	itttt	lt
 801026e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010270:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010272:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010274:	1ae3      	sublt	r3, r4, r3
 8010276:	bfb4      	ite	lt
 8010278:	18d2      	addlt	r2, r2, r3
 801027a:	1b1c      	subge	r4, r3, r4
 801027c:	9b07      	ldr	r3, [sp, #28]
 801027e:	bfbc      	itt	lt
 8010280:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010282:	2400      	movlt	r4, #0
 8010284:	2b00      	cmp	r3, #0
 8010286:	bfb5      	itete	lt
 8010288:	eba8 0603 	sublt.w	r6, r8, r3
 801028c:	9b07      	ldrge	r3, [sp, #28]
 801028e:	2300      	movlt	r3, #0
 8010290:	4646      	movge	r6, r8
 8010292:	e730      	b.n	80100f6 <_dtoa_r+0x71e>
 8010294:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010296:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010298:	4646      	mov	r6, r8
 801029a:	e735      	b.n	8010108 <_dtoa_r+0x730>
 801029c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801029e:	e75c      	b.n	801015a <_dtoa_r+0x782>
 80102a0:	2300      	movs	r3, #0
 80102a2:	e788      	b.n	80101b6 <_dtoa_r+0x7de>
 80102a4:	3fe00000 	.word	0x3fe00000
 80102a8:	40240000 	.word	0x40240000
 80102ac:	40140000 	.word	0x40140000
 80102b0:	9b02      	ldr	r3, [sp, #8]
 80102b2:	e780      	b.n	80101b6 <_dtoa_r+0x7de>
 80102b4:	2300      	movs	r3, #0
 80102b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80102b8:	e782      	b.n	80101c0 <_dtoa_r+0x7e8>
 80102ba:	d099      	beq.n	80101f0 <_dtoa_r+0x818>
 80102bc:	9a08      	ldr	r2, [sp, #32]
 80102be:	331c      	adds	r3, #28
 80102c0:	441a      	add	r2, r3
 80102c2:	4498      	add	r8, r3
 80102c4:	441e      	add	r6, r3
 80102c6:	9208      	str	r2, [sp, #32]
 80102c8:	e792      	b.n	80101f0 <_dtoa_r+0x818>
 80102ca:	4603      	mov	r3, r0
 80102cc:	e7f6      	b.n	80102bc <_dtoa_r+0x8e4>
 80102ce:	9b07      	ldr	r3, [sp, #28]
 80102d0:	9704      	str	r7, [sp, #16]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	dc20      	bgt.n	8010318 <_dtoa_r+0x940>
 80102d6:	9300      	str	r3, [sp, #0]
 80102d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102da:	2b02      	cmp	r3, #2
 80102dc:	dd1e      	ble.n	801031c <_dtoa_r+0x944>
 80102de:	9b00      	ldr	r3, [sp, #0]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	f47f aec0 	bne.w	8010066 <_dtoa_r+0x68e>
 80102e6:	4621      	mov	r1, r4
 80102e8:	2205      	movs	r2, #5
 80102ea:	4658      	mov	r0, fp
 80102ec:	f000 f9e4 	bl	80106b8 <__multadd>
 80102f0:	4601      	mov	r1, r0
 80102f2:	4604      	mov	r4, r0
 80102f4:	4648      	mov	r0, r9
 80102f6:	f000 fc41 	bl	8010b7c <__mcmp>
 80102fa:	2800      	cmp	r0, #0
 80102fc:	f77f aeb3 	ble.w	8010066 <_dtoa_r+0x68e>
 8010300:	4656      	mov	r6, sl
 8010302:	2331      	movs	r3, #49	@ 0x31
 8010304:	f806 3b01 	strb.w	r3, [r6], #1
 8010308:	9b04      	ldr	r3, [sp, #16]
 801030a:	3301      	adds	r3, #1
 801030c:	9304      	str	r3, [sp, #16]
 801030e:	e6ae      	b.n	801006e <_dtoa_r+0x696>
 8010310:	9c07      	ldr	r4, [sp, #28]
 8010312:	9704      	str	r7, [sp, #16]
 8010314:	4625      	mov	r5, r4
 8010316:	e7f3      	b.n	8010300 <_dtoa_r+0x928>
 8010318:	9b07      	ldr	r3, [sp, #28]
 801031a:	9300      	str	r3, [sp, #0]
 801031c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801031e:	2b00      	cmp	r3, #0
 8010320:	f000 8104 	beq.w	801052c <_dtoa_r+0xb54>
 8010324:	2e00      	cmp	r6, #0
 8010326:	dd05      	ble.n	8010334 <_dtoa_r+0x95c>
 8010328:	4629      	mov	r1, r5
 801032a:	4632      	mov	r2, r6
 801032c:	4658      	mov	r0, fp
 801032e:	f000 fbb9 	bl	8010aa4 <__lshift>
 8010332:	4605      	mov	r5, r0
 8010334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010336:	2b00      	cmp	r3, #0
 8010338:	d05a      	beq.n	80103f0 <_dtoa_r+0xa18>
 801033a:	6869      	ldr	r1, [r5, #4]
 801033c:	4658      	mov	r0, fp
 801033e:	f000 f959 	bl	80105f4 <_Balloc>
 8010342:	4606      	mov	r6, r0
 8010344:	b928      	cbnz	r0, 8010352 <_dtoa_r+0x97a>
 8010346:	4b84      	ldr	r3, [pc, #528]	@ (8010558 <_dtoa_r+0xb80>)
 8010348:	4602      	mov	r2, r0
 801034a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801034e:	f7ff bb5a 	b.w	800fa06 <_dtoa_r+0x2e>
 8010352:	692a      	ldr	r2, [r5, #16]
 8010354:	3202      	adds	r2, #2
 8010356:	0092      	lsls	r2, r2, #2
 8010358:	f105 010c 	add.w	r1, r5, #12
 801035c:	300c      	adds	r0, #12
 801035e:	f7ff fa7e 	bl	800f85e <memcpy>
 8010362:	2201      	movs	r2, #1
 8010364:	4631      	mov	r1, r6
 8010366:	4658      	mov	r0, fp
 8010368:	f000 fb9c 	bl	8010aa4 <__lshift>
 801036c:	f10a 0301 	add.w	r3, sl, #1
 8010370:	9307      	str	r3, [sp, #28]
 8010372:	9b00      	ldr	r3, [sp, #0]
 8010374:	4453      	add	r3, sl
 8010376:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010378:	9b02      	ldr	r3, [sp, #8]
 801037a:	f003 0301 	and.w	r3, r3, #1
 801037e:	462f      	mov	r7, r5
 8010380:	930a      	str	r3, [sp, #40]	@ 0x28
 8010382:	4605      	mov	r5, r0
 8010384:	9b07      	ldr	r3, [sp, #28]
 8010386:	4621      	mov	r1, r4
 8010388:	3b01      	subs	r3, #1
 801038a:	4648      	mov	r0, r9
 801038c:	9300      	str	r3, [sp, #0]
 801038e:	f7ff fa99 	bl	800f8c4 <quorem>
 8010392:	4639      	mov	r1, r7
 8010394:	9002      	str	r0, [sp, #8]
 8010396:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801039a:	4648      	mov	r0, r9
 801039c:	f000 fbee 	bl	8010b7c <__mcmp>
 80103a0:	462a      	mov	r2, r5
 80103a2:	9008      	str	r0, [sp, #32]
 80103a4:	4621      	mov	r1, r4
 80103a6:	4658      	mov	r0, fp
 80103a8:	f000 fc04 	bl	8010bb4 <__mdiff>
 80103ac:	68c2      	ldr	r2, [r0, #12]
 80103ae:	4606      	mov	r6, r0
 80103b0:	bb02      	cbnz	r2, 80103f4 <_dtoa_r+0xa1c>
 80103b2:	4601      	mov	r1, r0
 80103b4:	4648      	mov	r0, r9
 80103b6:	f000 fbe1 	bl	8010b7c <__mcmp>
 80103ba:	4602      	mov	r2, r0
 80103bc:	4631      	mov	r1, r6
 80103be:	4658      	mov	r0, fp
 80103c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80103c2:	f000 f957 	bl	8010674 <_Bfree>
 80103c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103ca:	9e07      	ldr	r6, [sp, #28]
 80103cc:	ea43 0102 	orr.w	r1, r3, r2
 80103d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103d2:	4319      	orrs	r1, r3
 80103d4:	d110      	bne.n	80103f8 <_dtoa_r+0xa20>
 80103d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80103da:	d029      	beq.n	8010430 <_dtoa_r+0xa58>
 80103dc:	9b08      	ldr	r3, [sp, #32]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	dd02      	ble.n	80103e8 <_dtoa_r+0xa10>
 80103e2:	9b02      	ldr	r3, [sp, #8]
 80103e4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80103e8:	9b00      	ldr	r3, [sp, #0]
 80103ea:	f883 8000 	strb.w	r8, [r3]
 80103ee:	e63f      	b.n	8010070 <_dtoa_r+0x698>
 80103f0:	4628      	mov	r0, r5
 80103f2:	e7bb      	b.n	801036c <_dtoa_r+0x994>
 80103f4:	2201      	movs	r2, #1
 80103f6:	e7e1      	b.n	80103bc <_dtoa_r+0x9e4>
 80103f8:	9b08      	ldr	r3, [sp, #32]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	db04      	blt.n	8010408 <_dtoa_r+0xa30>
 80103fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010400:	430b      	orrs	r3, r1
 8010402:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010404:	430b      	orrs	r3, r1
 8010406:	d120      	bne.n	801044a <_dtoa_r+0xa72>
 8010408:	2a00      	cmp	r2, #0
 801040a:	dded      	ble.n	80103e8 <_dtoa_r+0xa10>
 801040c:	4649      	mov	r1, r9
 801040e:	2201      	movs	r2, #1
 8010410:	4658      	mov	r0, fp
 8010412:	f000 fb47 	bl	8010aa4 <__lshift>
 8010416:	4621      	mov	r1, r4
 8010418:	4681      	mov	r9, r0
 801041a:	f000 fbaf 	bl	8010b7c <__mcmp>
 801041e:	2800      	cmp	r0, #0
 8010420:	dc03      	bgt.n	801042a <_dtoa_r+0xa52>
 8010422:	d1e1      	bne.n	80103e8 <_dtoa_r+0xa10>
 8010424:	f018 0f01 	tst.w	r8, #1
 8010428:	d0de      	beq.n	80103e8 <_dtoa_r+0xa10>
 801042a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801042e:	d1d8      	bne.n	80103e2 <_dtoa_r+0xa0a>
 8010430:	9a00      	ldr	r2, [sp, #0]
 8010432:	2339      	movs	r3, #57	@ 0x39
 8010434:	7013      	strb	r3, [r2, #0]
 8010436:	4633      	mov	r3, r6
 8010438:	461e      	mov	r6, r3
 801043a:	3b01      	subs	r3, #1
 801043c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010440:	2a39      	cmp	r2, #57	@ 0x39
 8010442:	d052      	beq.n	80104ea <_dtoa_r+0xb12>
 8010444:	3201      	adds	r2, #1
 8010446:	701a      	strb	r2, [r3, #0]
 8010448:	e612      	b.n	8010070 <_dtoa_r+0x698>
 801044a:	2a00      	cmp	r2, #0
 801044c:	dd07      	ble.n	801045e <_dtoa_r+0xa86>
 801044e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010452:	d0ed      	beq.n	8010430 <_dtoa_r+0xa58>
 8010454:	9a00      	ldr	r2, [sp, #0]
 8010456:	f108 0301 	add.w	r3, r8, #1
 801045a:	7013      	strb	r3, [r2, #0]
 801045c:	e608      	b.n	8010070 <_dtoa_r+0x698>
 801045e:	9b07      	ldr	r3, [sp, #28]
 8010460:	9a07      	ldr	r2, [sp, #28]
 8010462:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010468:	4293      	cmp	r3, r2
 801046a:	d028      	beq.n	80104be <_dtoa_r+0xae6>
 801046c:	4649      	mov	r1, r9
 801046e:	2300      	movs	r3, #0
 8010470:	220a      	movs	r2, #10
 8010472:	4658      	mov	r0, fp
 8010474:	f000 f920 	bl	80106b8 <__multadd>
 8010478:	42af      	cmp	r7, r5
 801047a:	4681      	mov	r9, r0
 801047c:	f04f 0300 	mov.w	r3, #0
 8010480:	f04f 020a 	mov.w	r2, #10
 8010484:	4639      	mov	r1, r7
 8010486:	4658      	mov	r0, fp
 8010488:	d107      	bne.n	801049a <_dtoa_r+0xac2>
 801048a:	f000 f915 	bl	80106b8 <__multadd>
 801048e:	4607      	mov	r7, r0
 8010490:	4605      	mov	r5, r0
 8010492:	9b07      	ldr	r3, [sp, #28]
 8010494:	3301      	adds	r3, #1
 8010496:	9307      	str	r3, [sp, #28]
 8010498:	e774      	b.n	8010384 <_dtoa_r+0x9ac>
 801049a:	f000 f90d 	bl	80106b8 <__multadd>
 801049e:	4629      	mov	r1, r5
 80104a0:	4607      	mov	r7, r0
 80104a2:	2300      	movs	r3, #0
 80104a4:	220a      	movs	r2, #10
 80104a6:	4658      	mov	r0, fp
 80104a8:	f000 f906 	bl	80106b8 <__multadd>
 80104ac:	4605      	mov	r5, r0
 80104ae:	e7f0      	b.n	8010492 <_dtoa_r+0xaba>
 80104b0:	9b00      	ldr	r3, [sp, #0]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	bfcc      	ite	gt
 80104b6:	461e      	movgt	r6, r3
 80104b8:	2601      	movle	r6, #1
 80104ba:	4456      	add	r6, sl
 80104bc:	2700      	movs	r7, #0
 80104be:	4649      	mov	r1, r9
 80104c0:	2201      	movs	r2, #1
 80104c2:	4658      	mov	r0, fp
 80104c4:	f000 faee 	bl	8010aa4 <__lshift>
 80104c8:	4621      	mov	r1, r4
 80104ca:	4681      	mov	r9, r0
 80104cc:	f000 fb56 	bl	8010b7c <__mcmp>
 80104d0:	2800      	cmp	r0, #0
 80104d2:	dcb0      	bgt.n	8010436 <_dtoa_r+0xa5e>
 80104d4:	d102      	bne.n	80104dc <_dtoa_r+0xb04>
 80104d6:	f018 0f01 	tst.w	r8, #1
 80104da:	d1ac      	bne.n	8010436 <_dtoa_r+0xa5e>
 80104dc:	4633      	mov	r3, r6
 80104de:	461e      	mov	r6, r3
 80104e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104e4:	2a30      	cmp	r2, #48	@ 0x30
 80104e6:	d0fa      	beq.n	80104de <_dtoa_r+0xb06>
 80104e8:	e5c2      	b.n	8010070 <_dtoa_r+0x698>
 80104ea:	459a      	cmp	sl, r3
 80104ec:	d1a4      	bne.n	8010438 <_dtoa_r+0xa60>
 80104ee:	9b04      	ldr	r3, [sp, #16]
 80104f0:	3301      	adds	r3, #1
 80104f2:	9304      	str	r3, [sp, #16]
 80104f4:	2331      	movs	r3, #49	@ 0x31
 80104f6:	f88a 3000 	strb.w	r3, [sl]
 80104fa:	e5b9      	b.n	8010070 <_dtoa_r+0x698>
 80104fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80104fe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801055c <_dtoa_r+0xb84>
 8010502:	b11b      	cbz	r3, 801050c <_dtoa_r+0xb34>
 8010504:	f10a 0308 	add.w	r3, sl, #8
 8010508:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801050a:	6013      	str	r3, [r2, #0]
 801050c:	4650      	mov	r0, sl
 801050e:	b019      	add	sp, #100	@ 0x64
 8010510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010516:	2b01      	cmp	r3, #1
 8010518:	f77f ae37 	ble.w	801018a <_dtoa_r+0x7b2>
 801051c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801051e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010520:	2001      	movs	r0, #1
 8010522:	e655      	b.n	80101d0 <_dtoa_r+0x7f8>
 8010524:	9b00      	ldr	r3, [sp, #0]
 8010526:	2b00      	cmp	r3, #0
 8010528:	f77f aed6 	ble.w	80102d8 <_dtoa_r+0x900>
 801052c:	4656      	mov	r6, sl
 801052e:	4621      	mov	r1, r4
 8010530:	4648      	mov	r0, r9
 8010532:	f7ff f9c7 	bl	800f8c4 <quorem>
 8010536:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801053a:	f806 8b01 	strb.w	r8, [r6], #1
 801053e:	9b00      	ldr	r3, [sp, #0]
 8010540:	eba6 020a 	sub.w	r2, r6, sl
 8010544:	4293      	cmp	r3, r2
 8010546:	ddb3      	ble.n	80104b0 <_dtoa_r+0xad8>
 8010548:	4649      	mov	r1, r9
 801054a:	2300      	movs	r3, #0
 801054c:	220a      	movs	r2, #10
 801054e:	4658      	mov	r0, fp
 8010550:	f000 f8b2 	bl	80106b8 <__multadd>
 8010554:	4681      	mov	r9, r0
 8010556:	e7ea      	b.n	801052e <_dtoa_r+0xb56>
 8010558:	080149fe 	.word	0x080149fe
 801055c:	08014999 	.word	0x08014999

08010560 <_free_r>:
 8010560:	b538      	push	{r3, r4, r5, lr}
 8010562:	4605      	mov	r5, r0
 8010564:	2900      	cmp	r1, #0
 8010566:	d041      	beq.n	80105ec <_free_r+0x8c>
 8010568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801056c:	1f0c      	subs	r4, r1, #4
 801056e:	2b00      	cmp	r3, #0
 8010570:	bfb8      	it	lt
 8010572:	18e4      	addlt	r4, r4, r3
 8010574:	f7fe f814 	bl	800e5a0 <__malloc_lock>
 8010578:	4a1d      	ldr	r2, [pc, #116]	@ (80105f0 <_free_r+0x90>)
 801057a:	6813      	ldr	r3, [r2, #0]
 801057c:	b933      	cbnz	r3, 801058c <_free_r+0x2c>
 801057e:	6063      	str	r3, [r4, #4]
 8010580:	6014      	str	r4, [r2, #0]
 8010582:	4628      	mov	r0, r5
 8010584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010588:	f7fe b810 	b.w	800e5ac <__malloc_unlock>
 801058c:	42a3      	cmp	r3, r4
 801058e:	d908      	bls.n	80105a2 <_free_r+0x42>
 8010590:	6820      	ldr	r0, [r4, #0]
 8010592:	1821      	adds	r1, r4, r0
 8010594:	428b      	cmp	r3, r1
 8010596:	bf01      	itttt	eq
 8010598:	6819      	ldreq	r1, [r3, #0]
 801059a:	685b      	ldreq	r3, [r3, #4]
 801059c:	1809      	addeq	r1, r1, r0
 801059e:	6021      	streq	r1, [r4, #0]
 80105a0:	e7ed      	b.n	801057e <_free_r+0x1e>
 80105a2:	461a      	mov	r2, r3
 80105a4:	685b      	ldr	r3, [r3, #4]
 80105a6:	b10b      	cbz	r3, 80105ac <_free_r+0x4c>
 80105a8:	42a3      	cmp	r3, r4
 80105aa:	d9fa      	bls.n	80105a2 <_free_r+0x42>
 80105ac:	6811      	ldr	r1, [r2, #0]
 80105ae:	1850      	adds	r0, r2, r1
 80105b0:	42a0      	cmp	r0, r4
 80105b2:	d10b      	bne.n	80105cc <_free_r+0x6c>
 80105b4:	6820      	ldr	r0, [r4, #0]
 80105b6:	4401      	add	r1, r0
 80105b8:	1850      	adds	r0, r2, r1
 80105ba:	4283      	cmp	r3, r0
 80105bc:	6011      	str	r1, [r2, #0]
 80105be:	d1e0      	bne.n	8010582 <_free_r+0x22>
 80105c0:	6818      	ldr	r0, [r3, #0]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	6053      	str	r3, [r2, #4]
 80105c6:	4408      	add	r0, r1
 80105c8:	6010      	str	r0, [r2, #0]
 80105ca:	e7da      	b.n	8010582 <_free_r+0x22>
 80105cc:	d902      	bls.n	80105d4 <_free_r+0x74>
 80105ce:	230c      	movs	r3, #12
 80105d0:	602b      	str	r3, [r5, #0]
 80105d2:	e7d6      	b.n	8010582 <_free_r+0x22>
 80105d4:	6820      	ldr	r0, [r4, #0]
 80105d6:	1821      	adds	r1, r4, r0
 80105d8:	428b      	cmp	r3, r1
 80105da:	bf04      	itt	eq
 80105dc:	6819      	ldreq	r1, [r3, #0]
 80105de:	685b      	ldreq	r3, [r3, #4]
 80105e0:	6063      	str	r3, [r4, #4]
 80105e2:	bf04      	itt	eq
 80105e4:	1809      	addeq	r1, r1, r0
 80105e6:	6021      	streq	r1, [r4, #0]
 80105e8:	6054      	str	r4, [r2, #4]
 80105ea:	e7ca      	b.n	8010582 <_free_r+0x22>
 80105ec:	bd38      	pop	{r3, r4, r5, pc}
 80105ee:	bf00      	nop
 80105f0:	20005420 	.word	0x20005420

080105f4 <_Balloc>:
 80105f4:	b570      	push	{r4, r5, r6, lr}
 80105f6:	69c6      	ldr	r6, [r0, #28]
 80105f8:	4604      	mov	r4, r0
 80105fa:	460d      	mov	r5, r1
 80105fc:	b976      	cbnz	r6, 801061c <_Balloc+0x28>
 80105fe:	2010      	movs	r0, #16
 8010600:	f7fd ff1c 	bl	800e43c <malloc>
 8010604:	4602      	mov	r2, r0
 8010606:	61e0      	str	r0, [r4, #28]
 8010608:	b920      	cbnz	r0, 8010614 <_Balloc+0x20>
 801060a:	4b18      	ldr	r3, [pc, #96]	@ (801066c <_Balloc+0x78>)
 801060c:	4818      	ldr	r0, [pc, #96]	@ (8010670 <_Balloc+0x7c>)
 801060e:	216b      	movs	r1, #107	@ 0x6b
 8010610:	f7ff f93a 	bl	800f888 <__assert_func>
 8010614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010618:	6006      	str	r6, [r0, #0]
 801061a:	60c6      	str	r6, [r0, #12]
 801061c:	69e6      	ldr	r6, [r4, #28]
 801061e:	68f3      	ldr	r3, [r6, #12]
 8010620:	b183      	cbz	r3, 8010644 <_Balloc+0x50>
 8010622:	69e3      	ldr	r3, [r4, #28]
 8010624:	68db      	ldr	r3, [r3, #12]
 8010626:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801062a:	b9b8      	cbnz	r0, 801065c <_Balloc+0x68>
 801062c:	2101      	movs	r1, #1
 801062e:	fa01 f605 	lsl.w	r6, r1, r5
 8010632:	1d72      	adds	r2, r6, #5
 8010634:	0092      	lsls	r2, r2, #2
 8010636:	4620      	mov	r0, r4
 8010638:	f002 f8e1 	bl	80127fe <_calloc_r>
 801063c:	b160      	cbz	r0, 8010658 <_Balloc+0x64>
 801063e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010642:	e00e      	b.n	8010662 <_Balloc+0x6e>
 8010644:	2221      	movs	r2, #33	@ 0x21
 8010646:	2104      	movs	r1, #4
 8010648:	4620      	mov	r0, r4
 801064a:	f002 f8d8 	bl	80127fe <_calloc_r>
 801064e:	69e3      	ldr	r3, [r4, #28]
 8010650:	60f0      	str	r0, [r6, #12]
 8010652:	68db      	ldr	r3, [r3, #12]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d1e4      	bne.n	8010622 <_Balloc+0x2e>
 8010658:	2000      	movs	r0, #0
 801065a:	bd70      	pop	{r4, r5, r6, pc}
 801065c:	6802      	ldr	r2, [r0, #0]
 801065e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010662:	2300      	movs	r3, #0
 8010664:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010668:	e7f7      	b.n	801065a <_Balloc+0x66>
 801066a:	bf00      	nop
 801066c:	080148ec 	.word	0x080148ec
 8010670:	08014a0f 	.word	0x08014a0f

08010674 <_Bfree>:
 8010674:	b570      	push	{r4, r5, r6, lr}
 8010676:	69c6      	ldr	r6, [r0, #28]
 8010678:	4605      	mov	r5, r0
 801067a:	460c      	mov	r4, r1
 801067c:	b976      	cbnz	r6, 801069c <_Bfree+0x28>
 801067e:	2010      	movs	r0, #16
 8010680:	f7fd fedc 	bl	800e43c <malloc>
 8010684:	4602      	mov	r2, r0
 8010686:	61e8      	str	r0, [r5, #28]
 8010688:	b920      	cbnz	r0, 8010694 <_Bfree+0x20>
 801068a:	4b09      	ldr	r3, [pc, #36]	@ (80106b0 <_Bfree+0x3c>)
 801068c:	4809      	ldr	r0, [pc, #36]	@ (80106b4 <_Bfree+0x40>)
 801068e:	218f      	movs	r1, #143	@ 0x8f
 8010690:	f7ff f8fa 	bl	800f888 <__assert_func>
 8010694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010698:	6006      	str	r6, [r0, #0]
 801069a:	60c6      	str	r6, [r0, #12]
 801069c:	b13c      	cbz	r4, 80106ae <_Bfree+0x3a>
 801069e:	69eb      	ldr	r3, [r5, #28]
 80106a0:	6862      	ldr	r2, [r4, #4]
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80106a8:	6021      	str	r1, [r4, #0]
 80106aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80106ae:	bd70      	pop	{r4, r5, r6, pc}
 80106b0:	080148ec 	.word	0x080148ec
 80106b4:	08014a0f 	.word	0x08014a0f

080106b8 <__multadd>:
 80106b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106bc:	690d      	ldr	r5, [r1, #16]
 80106be:	4607      	mov	r7, r0
 80106c0:	460c      	mov	r4, r1
 80106c2:	461e      	mov	r6, r3
 80106c4:	f101 0c14 	add.w	ip, r1, #20
 80106c8:	2000      	movs	r0, #0
 80106ca:	f8dc 3000 	ldr.w	r3, [ip]
 80106ce:	b299      	uxth	r1, r3
 80106d0:	fb02 6101 	mla	r1, r2, r1, r6
 80106d4:	0c1e      	lsrs	r6, r3, #16
 80106d6:	0c0b      	lsrs	r3, r1, #16
 80106d8:	fb02 3306 	mla	r3, r2, r6, r3
 80106dc:	b289      	uxth	r1, r1
 80106de:	3001      	adds	r0, #1
 80106e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80106e4:	4285      	cmp	r5, r0
 80106e6:	f84c 1b04 	str.w	r1, [ip], #4
 80106ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80106ee:	dcec      	bgt.n	80106ca <__multadd+0x12>
 80106f0:	b30e      	cbz	r6, 8010736 <__multadd+0x7e>
 80106f2:	68a3      	ldr	r3, [r4, #8]
 80106f4:	42ab      	cmp	r3, r5
 80106f6:	dc19      	bgt.n	801072c <__multadd+0x74>
 80106f8:	6861      	ldr	r1, [r4, #4]
 80106fa:	4638      	mov	r0, r7
 80106fc:	3101      	adds	r1, #1
 80106fe:	f7ff ff79 	bl	80105f4 <_Balloc>
 8010702:	4680      	mov	r8, r0
 8010704:	b928      	cbnz	r0, 8010712 <__multadd+0x5a>
 8010706:	4602      	mov	r2, r0
 8010708:	4b0c      	ldr	r3, [pc, #48]	@ (801073c <__multadd+0x84>)
 801070a:	480d      	ldr	r0, [pc, #52]	@ (8010740 <__multadd+0x88>)
 801070c:	21ba      	movs	r1, #186	@ 0xba
 801070e:	f7ff f8bb 	bl	800f888 <__assert_func>
 8010712:	6922      	ldr	r2, [r4, #16]
 8010714:	3202      	adds	r2, #2
 8010716:	f104 010c 	add.w	r1, r4, #12
 801071a:	0092      	lsls	r2, r2, #2
 801071c:	300c      	adds	r0, #12
 801071e:	f7ff f89e 	bl	800f85e <memcpy>
 8010722:	4621      	mov	r1, r4
 8010724:	4638      	mov	r0, r7
 8010726:	f7ff ffa5 	bl	8010674 <_Bfree>
 801072a:	4644      	mov	r4, r8
 801072c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010730:	3501      	adds	r5, #1
 8010732:	615e      	str	r6, [r3, #20]
 8010734:	6125      	str	r5, [r4, #16]
 8010736:	4620      	mov	r0, r4
 8010738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801073c:	080149fe 	.word	0x080149fe
 8010740:	08014a0f 	.word	0x08014a0f

08010744 <__s2b>:
 8010744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010748:	460c      	mov	r4, r1
 801074a:	4615      	mov	r5, r2
 801074c:	461f      	mov	r7, r3
 801074e:	2209      	movs	r2, #9
 8010750:	3308      	adds	r3, #8
 8010752:	4606      	mov	r6, r0
 8010754:	fb93 f3f2 	sdiv	r3, r3, r2
 8010758:	2100      	movs	r1, #0
 801075a:	2201      	movs	r2, #1
 801075c:	429a      	cmp	r2, r3
 801075e:	db09      	blt.n	8010774 <__s2b+0x30>
 8010760:	4630      	mov	r0, r6
 8010762:	f7ff ff47 	bl	80105f4 <_Balloc>
 8010766:	b940      	cbnz	r0, 801077a <__s2b+0x36>
 8010768:	4602      	mov	r2, r0
 801076a:	4b19      	ldr	r3, [pc, #100]	@ (80107d0 <__s2b+0x8c>)
 801076c:	4819      	ldr	r0, [pc, #100]	@ (80107d4 <__s2b+0x90>)
 801076e:	21d3      	movs	r1, #211	@ 0xd3
 8010770:	f7ff f88a 	bl	800f888 <__assert_func>
 8010774:	0052      	lsls	r2, r2, #1
 8010776:	3101      	adds	r1, #1
 8010778:	e7f0      	b.n	801075c <__s2b+0x18>
 801077a:	9b08      	ldr	r3, [sp, #32]
 801077c:	6143      	str	r3, [r0, #20]
 801077e:	2d09      	cmp	r5, #9
 8010780:	f04f 0301 	mov.w	r3, #1
 8010784:	6103      	str	r3, [r0, #16]
 8010786:	dd16      	ble.n	80107b6 <__s2b+0x72>
 8010788:	f104 0909 	add.w	r9, r4, #9
 801078c:	46c8      	mov	r8, r9
 801078e:	442c      	add	r4, r5
 8010790:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010794:	4601      	mov	r1, r0
 8010796:	3b30      	subs	r3, #48	@ 0x30
 8010798:	220a      	movs	r2, #10
 801079a:	4630      	mov	r0, r6
 801079c:	f7ff ff8c 	bl	80106b8 <__multadd>
 80107a0:	45a0      	cmp	r8, r4
 80107a2:	d1f5      	bne.n	8010790 <__s2b+0x4c>
 80107a4:	f1a5 0408 	sub.w	r4, r5, #8
 80107a8:	444c      	add	r4, r9
 80107aa:	1b2d      	subs	r5, r5, r4
 80107ac:	1963      	adds	r3, r4, r5
 80107ae:	42bb      	cmp	r3, r7
 80107b0:	db04      	blt.n	80107bc <__s2b+0x78>
 80107b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107b6:	340a      	adds	r4, #10
 80107b8:	2509      	movs	r5, #9
 80107ba:	e7f6      	b.n	80107aa <__s2b+0x66>
 80107bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80107c0:	4601      	mov	r1, r0
 80107c2:	3b30      	subs	r3, #48	@ 0x30
 80107c4:	220a      	movs	r2, #10
 80107c6:	4630      	mov	r0, r6
 80107c8:	f7ff ff76 	bl	80106b8 <__multadd>
 80107cc:	e7ee      	b.n	80107ac <__s2b+0x68>
 80107ce:	bf00      	nop
 80107d0:	080149fe 	.word	0x080149fe
 80107d4:	08014a0f 	.word	0x08014a0f

080107d8 <__hi0bits>:
 80107d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80107dc:	4603      	mov	r3, r0
 80107de:	bf36      	itet	cc
 80107e0:	0403      	lslcc	r3, r0, #16
 80107e2:	2000      	movcs	r0, #0
 80107e4:	2010      	movcc	r0, #16
 80107e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80107ea:	bf3c      	itt	cc
 80107ec:	021b      	lslcc	r3, r3, #8
 80107ee:	3008      	addcc	r0, #8
 80107f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80107f4:	bf3c      	itt	cc
 80107f6:	011b      	lslcc	r3, r3, #4
 80107f8:	3004      	addcc	r0, #4
 80107fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80107fe:	bf3c      	itt	cc
 8010800:	009b      	lslcc	r3, r3, #2
 8010802:	3002      	addcc	r0, #2
 8010804:	2b00      	cmp	r3, #0
 8010806:	db05      	blt.n	8010814 <__hi0bits+0x3c>
 8010808:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801080c:	f100 0001 	add.w	r0, r0, #1
 8010810:	bf08      	it	eq
 8010812:	2020      	moveq	r0, #32
 8010814:	4770      	bx	lr

08010816 <__lo0bits>:
 8010816:	6803      	ldr	r3, [r0, #0]
 8010818:	4602      	mov	r2, r0
 801081a:	f013 0007 	ands.w	r0, r3, #7
 801081e:	d00b      	beq.n	8010838 <__lo0bits+0x22>
 8010820:	07d9      	lsls	r1, r3, #31
 8010822:	d421      	bmi.n	8010868 <__lo0bits+0x52>
 8010824:	0798      	lsls	r0, r3, #30
 8010826:	bf49      	itett	mi
 8010828:	085b      	lsrmi	r3, r3, #1
 801082a:	089b      	lsrpl	r3, r3, #2
 801082c:	2001      	movmi	r0, #1
 801082e:	6013      	strmi	r3, [r2, #0]
 8010830:	bf5c      	itt	pl
 8010832:	6013      	strpl	r3, [r2, #0]
 8010834:	2002      	movpl	r0, #2
 8010836:	4770      	bx	lr
 8010838:	b299      	uxth	r1, r3
 801083a:	b909      	cbnz	r1, 8010840 <__lo0bits+0x2a>
 801083c:	0c1b      	lsrs	r3, r3, #16
 801083e:	2010      	movs	r0, #16
 8010840:	b2d9      	uxtb	r1, r3
 8010842:	b909      	cbnz	r1, 8010848 <__lo0bits+0x32>
 8010844:	3008      	adds	r0, #8
 8010846:	0a1b      	lsrs	r3, r3, #8
 8010848:	0719      	lsls	r1, r3, #28
 801084a:	bf04      	itt	eq
 801084c:	091b      	lsreq	r3, r3, #4
 801084e:	3004      	addeq	r0, #4
 8010850:	0799      	lsls	r1, r3, #30
 8010852:	bf04      	itt	eq
 8010854:	089b      	lsreq	r3, r3, #2
 8010856:	3002      	addeq	r0, #2
 8010858:	07d9      	lsls	r1, r3, #31
 801085a:	d403      	bmi.n	8010864 <__lo0bits+0x4e>
 801085c:	085b      	lsrs	r3, r3, #1
 801085e:	f100 0001 	add.w	r0, r0, #1
 8010862:	d003      	beq.n	801086c <__lo0bits+0x56>
 8010864:	6013      	str	r3, [r2, #0]
 8010866:	4770      	bx	lr
 8010868:	2000      	movs	r0, #0
 801086a:	4770      	bx	lr
 801086c:	2020      	movs	r0, #32
 801086e:	4770      	bx	lr

08010870 <__i2b>:
 8010870:	b510      	push	{r4, lr}
 8010872:	460c      	mov	r4, r1
 8010874:	2101      	movs	r1, #1
 8010876:	f7ff febd 	bl	80105f4 <_Balloc>
 801087a:	4602      	mov	r2, r0
 801087c:	b928      	cbnz	r0, 801088a <__i2b+0x1a>
 801087e:	4b05      	ldr	r3, [pc, #20]	@ (8010894 <__i2b+0x24>)
 8010880:	4805      	ldr	r0, [pc, #20]	@ (8010898 <__i2b+0x28>)
 8010882:	f240 1145 	movw	r1, #325	@ 0x145
 8010886:	f7fe ffff 	bl	800f888 <__assert_func>
 801088a:	2301      	movs	r3, #1
 801088c:	6144      	str	r4, [r0, #20]
 801088e:	6103      	str	r3, [r0, #16]
 8010890:	bd10      	pop	{r4, pc}
 8010892:	bf00      	nop
 8010894:	080149fe 	.word	0x080149fe
 8010898:	08014a0f 	.word	0x08014a0f

0801089c <__multiply>:
 801089c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108a0:	4614      	mov	r4, r2
 80108a2:	690a      	ldr	r2, [r1, #16]
 80108a4:	6923      	ldr	r3, [r4, #16]
 80108a6:	429a      	cmp	r2, r3
 80108a8:	bfa8      	it	ge
 80108aa:	4623      	movge	r3, r4
 80108ac:	460f      	mov	r7, r1
 80108ae:	bfa4      	itt	ge
 80108b0:	460c      	movge	r4, r1
 80108b2:	461f      	movge	r7, r3
 80108b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80108b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80108bc:	68a3      	ldr	r3, [r4, #8]
 80108be:	6861      	ldr	r1, [r4, #4]
 80108c0:	eb0a 0609 	add.w	r6, sl, r9
 80108c4:	42b3      	cmp	r3, r6
 80108c6:	b085      	sub	sp, #20
 80108c8:	bfb8      	it	lt
 80108ca:	3101      	addlt	r1, #1
 80108cc:	f7ff fe92 	bl	80105f4 <_Balloc>
 80108d0:	b930      	cbnz	r0, 80108e0 <__multiply+0x44>
 80108d2:	4602      	mov	r2, r0
 80108d4:	4b44      	ldr	r3, [pc, #272]	@ (80109e8 <__multiply+0x14c>)
 80108d6:	4845      	ldr	r0, [pc, #276]	@ (80109ec <__multiply+0x150>)
 80108d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80108dc:	f7fe ffd4 	bl	800f888 <__assert_func>
 80108e0:	f100 0514 	add.w	r5, r0, #20
 80108e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80108e8:	462b      	mov	r3, r5
 80108ea:	2200      	movs	r2, #0
 80108ec:	4543      	cmp	r3, r8
 80108ee:	d321      	bcc.n	8010934 <__multiply+0x98>
 80108f0:	f107 0114 	add.w	r1, r7, #20
 80108f4:	f104 0214 	add.w	r2, r4, #20
 80108f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80108fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010900:	9302      	str	r3, [sp, #8]
 8010902:	1b13      	subs	r3, r2, r4
 8010904:	3b15      	subs	r3, #21
 8010906:	f023 0303 	bic.w	r3, r3, #3
 801090a:	3304      	adds	r3, #4
 801090c:	f104 0715 	add.w	r7, r4, #21
 8010910:	42ba      	cmp	r2, r7
 8010912:	bf38      	it	cc
 8010914:	2304      	movcc	r3, #4
 8010916:	9301      	str	r3, [sp, #4]
 8010918:	9b02      	ldr	r3, [sp, #8]
 801091a:	9103      	str	r1, [sp, #12]
 801091c:	428b      	cmp	r3, r1
 801091e:	d80c      	bhi.n	801093a <__multiply+0x9e>
 8010920:	2e00      	cmp	r6, #0
 8010922:	dd03      	ble.n	801092c <__multiply+0x90>
 8010924:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010928:	2b00      	cmp	r3, #0
 801092a:	d05b      	beq.n	80109e4 <__multiply+0x148>
 801092c:	6106      	str	r6, [r0, #16]
 801092e:	b005      	add	sp, #20
 8010930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010934:	f843 2b04 	str.w	r2, [r3], #4
 8010938:	e7d8      	b.n	80108ec <__multiply+0x50>
 801093a:	f8b1 a000 	ldrh.w	sl, [r1]
 801093e:	f1ba 0f00 	cmp.w	sl, #0
 8010942:	d024      	beq.n	801098e <__multiply+0xf2>
 8010944:	f104 0e14 	add.w	lr, r4, #20
 8010948:	46a9      	mov	r9, r5
 801094a:	f04f 0c00 	mov.w	ip, #0
 801094e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010952:	f8d9 3000 	ldr.w	r3, [r9]
 8010956:	fa1f fb87 	uxth.w	fp, r7
 801095a:	b29b      	uxth	r3, r3
 801095c:	fb0a 330b 	mla	r3, sl, fp, r3
 8010960:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010964:	f8d9 7000 	ldr.w	r7, [r9]
 8010968:	4463      	add	r3, ip
 801096a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801096e:	fb0a c70b 	mla	r7, sl, fp, ip
 8010972:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010976:	b29b      	uxth	r3, r3
 8010978:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801097c:	4572      	cmp	r2, lr
 801097e:	f849 3b04 	str.w	r3, [r9], #4
 8010982:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010986:	d8e2      	bhi.n	801094e <__multiply+0xb2>
 8010988:	9b01      	ldr	r3, [sp, #4]
 801098a:	f845 c003 	str.w	ip, [r5, r3]
 801098e:	9b03      	ldr	r3, [sp, #12]
 8010990:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010994:	3104      	adds	r1, #4
 8010996:	f1b9 0f00 	cmp.w	r9, #0
 801099a:	d021      	beq.n	80109e0 <__multiply+0x144>
 801099c:	682b      	ldr	r3, [r5, #0]
 801099e:	f104 0c14 	add.w	ip, r4, #20
 80109a2:	46ae      	mov	lr, r5
 80109a4:	f04f 0a00 	mov.w	sl, #0
 80109a8:	f8bc b000 	ldrh.w	fp, [ip]
 80109ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80109b0:	fb09 770b 	mla	r7, r9, fp, r7
 80109b4:	4457      	add	r7, sl
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80109bc:	f84e 3b04 	str.w	r3, [lr], #4
 80109c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80109c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80109c8:	f8be 3000 	ldrh.w	r3, [lr]
 80109cc:	fb09 330a 	mla	r3, r9, sl, r3
 80109d0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80109d4:	4562      	cmp	r2, ip
 80109d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80109da:	d8e5      	bhi.n	80109a8 <__multiply+0x10c>
 80109dc:	9f01      	ldr	r7, [sp, #4]
 80109de:	51eb      	str	r3, [r5, r7]
 80109e0:	3504      	adds	r5, #4
 80109e2:	e799      	b.n	8010918 <__multiply+0x7c>
 80109e4:	3e01      	subs	r6, #1
 80109e6:	e79b      	b.n	8010920 <__multiply+0x84>
 80109e8:	080149fe 	.word	0x080149fe
 80109ec:	08014a0f 	.word	0x08014a0f

080109f0 <__pow5mult>:
 80109f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109f4:	4615      	mov	r5, r2
 80109f6:	f012 0203 	ands.w	r2, r2, #3
 80109fa:	4607      	mov	r7, r0
 80109fc:	460e      	mov	r6, r1
 80109fe:	d007      	beq.n	8010a10 <__pow5mult+0x20>
 8010a00:	4c25      	ldr	r4, [pc, #148]	@ (8010a98 <__pow5mult+0xa8>)
 8010a02:	3a01      	subs	r2, #1
 8010a04:	2300      	movs	r3, #0
 8010a06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a0a:	f7ff fe55 	bl	80106b8 <__multadd>
 8010a0e:	4606      	mov	r6, r0
 8010a10:	10ad      	asrs	r5, r5, #2
 8010a12:	d03d      	beq.n	8010a90 <__pow5mult+0xa0>
 8010a14:	69fc      	ldr	r4, [r7, #28]
 8010a16:	b97c      	cbnz	r4, 8010a38 <__pow5mult+0x48>
 8010a18:	2010      	movs	r0, #16
 8010a1a:	f7fd fd0f 	bl	800e43c <malloc>
 8010a1e:	4602      	mov	r2, r0
 8010a20:	61f8      	str	r0, [r7, #28]
 8010a22:	b928      	cbnz	r0, 8010a30 <__pow5mult+0x40>
 8010a24:	4b1d      	ldr	r3, [pc, #116]	@ (8010a9c <__pow5mult+0xac>)
 8010a26:	481e      	ldr	r0, [pc, #120]	@ (8010aa0 <__pow5mult+0xb0>)
 8010a28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010a2c:	f7fe ff2c 	bl	800f888 <__assert_func>
 8010a30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a34:	6004      	str	r4, [r0, #0]
 8010a36:	60c4      	str	r4, [r0, #12]
 8010a38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010a3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010a40:	b94c      	cbnz	r4, 8010a56 <__pow5mult+0x66>
 8010a42:	f240 2171 	movw	r1, #625	@ 0x271
 8010a46:	4638      	mov	r0, r7
 8010a48:	f7ff ff12 	bl	8010870 <__i2b>
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010a52:	4604      	mov	r4, r0
 8010a54:	6003      	str	r3, [r0, #0]
 8010a56:	f04f 0900 	mov.w	r9, #0
 8010a5a:	07eb      	lsls	r3, r5, #31
 8010a5c:	d50a      	bpl.n	8010a74 <__pow5mult+0x84>
 8010a5e:	4631      	mov	r1, r6
 8010a60:	4622      	mov	r2, r4
 8010a62:	4638      	mov	r0, r7
 8010a64:	f7ff ff1a 	bl	801089c <__multiply>
 8010a68:	4631      	mov	r1, r6
 8010a6a:	4680      	mov	r8, r0
 8010a6c:	4638      	mov	r0, r7
 8010a6e:	f7ff fe01 	bl	8010674 <_Bfree>
 8010a72:	4646      	mov	r6, r8
 8010a74:	106d      	asrs	r5, r5, #1
 8010a76:	d00b      	beq.n	8010a90 <__pow5mult+0xa0>
 8010a78:	6820      	ldr	r0, [r4, #0]
 8010a7a:	b938      	cbnz	r0, 8010a8c <__pow5mult+0x9c>
 8010a7c:	4622      	mov	r2, r4
 8010a7e:	4621      	mov	r1, r4
 8010a80:	4638      	mov	r0, r7
 8010a82:	f7ff ff0b 	bl	801089c <__multiply>
 8010a86:	6020      	str	r0, [r4, #0]
 8010a88:	f8c0 9000 	str.w	r9, [r0]
 8010a8c:	4604      	mov	r4, r0
 8010a8e:	e7e4      	b.n	8010a5a <__pow5mult+0x6a>
 8010a90:	4630      	mov	r0, r6
 8010a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a96:	bf00      	nop
 8010a98:	08014a68 	.word	0x08014a68
 8010a9c:	080148ec 	.word	0x080148ec
 8010aa0:	08014a0f 	.word	0x08014a0f

08010aa4 <__lshift>:
 8010aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aa8:	460c      	mov	r4, r1
 8010aaa:	6849      	ldr	r1, [r1, #4]
 8010aac:	6923      	ldr	r3, [r4, #16]
 8010aae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010ab2:	68a3      	ldr	r3, [r4, #8]
 8010ab4:	4607      	mov	r7, r0
 8010ab6:	4691      	mov	r9, r2
 8010ab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010abc:	f108 0601 	add.w	r6, r8, #1
 8010ac0:	42b3      	cmp	r3, r6
 8010ac2:	db0b      	blt.n	8010adc <__lshift+0x38>
 8010ac4:	4638      	mov	r0, r7
 8010ac6:	f7ff fd95 	bl	80105f4 <_Balloc>
 8010aca:	4605      	mov	r5, r0
 8010acc:	b948      	cbnz	r0, 8010ae2 <__lshift+0x3e>
 8010ace:	4602      	mov	r2, r0
 8010ad0:	4b28      	ldr	r3, [pc, #160]	@ (8010b74 <__lshift+0xd0>)
 8010ad2:	4829      	ldr	r0, [pc, #164]	@ (8010b78 <__lshift+0xd4>)
 8010ad4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010ad8:	f7fe fed6 	bl	800f888 <__assert_func>
 8010adc:	3101      	adds	r1, #1
 8010ade:	005b      	lsls	r3, r3, #1
 8010ae0:	e7ee      	b.n	8010ac0 <__lshift+0x1c>
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	f100 0114 	add.w	r1, r0, #20
 8010ae8:	f100 0210 	add.w	r2, r0, #16
 8010aec:	4618      	mov	r0, r3
 8010aee:	4553      	cmp	r3, sl
 8010af0:	db33      	blt.n	8010b5a <__lshift+0xb6>
 8010af2:	6920      	ldr	r0, [r4, #16]
 8010af4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010af8:	f104 0314 	add.w	r3, r4, #20
 8010afc:	f019 091f 	ands.w	r9, r9, #31
 8010b00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010b08:	d02b      	beq.n	8010b62 <__lshift+0xbe>
 8010b0a:	f1c9 0e20 	rsb	lr, r9, #32
 8010b0e:	468a      	mov	sl, r1
 8010b10:	2200      	movs	r2, #0
 8010b12:	6818      	ldr	r0, [r3, #0]
 8010b14:	fa00 f009 	lsl.w	r0, r0, r9
 8010b18:	4310      	orrs	r0, r2
 8010b1a:	f84a 0b04 	str.w	r0, [sl], #4
 8010b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b22:	459c      	cmp	ip, r3
 8010b24:	fa22 f20e 	lsr.w	r2, r2, lr
 8010b28:	d8f3      	bhi.n	8010b12 <__lshift+0x6e>
 8010b2a:	ebac 0304 	sub.w	r3, ip, r4
 8010b2e:	3b15      	subs	r3, #21
 8010b30:	f023 0303 	bic.w	r3, r3, #3
 8010b34:	3304      	adds	r3, #4
 8010b36:	f104 0015 	add.w	r0, r4, #21
 8010b3a:	4584      	cmp	ip, r0
 8010b3c:	bf38      	it	cc
 8010b3e:	2304      	movcc	r3, #4
 8010b40:	50ca      	str	r2, [r1, r3]
 8010b42:	b10a      	cbz	r2, 8010b48 <__lshift+0xa4>
 8010b44:	f108 0602 	add.w	r6, r8, #2
 8010b48:	3e01      	subs	r6, #1
 8010b4a:	4638      	mov	r0, r7
 8010b4c:	612e      	str	r6, [r5, #16]
 8010b4e:	4621      	mov	r1, r4
 8010b50:	f7ff fd90 	bl	8010674 <_Bfree>
 8010b54:	4628      	mov	r0, r5
 8010b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010b5e:	3301      	adds	r3, #1
 8010b60:	e7c5      	b.n	8010aee <__lshift+0x4a>
 8010b62:	3904      	subs	r1, #4
 8010b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b68:	f841 2f04 	str.w	r2, [r1, #4]!
 8010b6c:	459c      	cmp	ip, r3
 8010b6e:	d8f9      	bhi.n	8010b64 <__lshift+0xc0>
 8010b70:	e7ea      	b.n	8010b48 <__lshift+0xa4>
 8010b72:	bf00      	nop
 8010b74:	080149fe 	.word	0x080149fe
 8010b78:	08014a0f 	.word	0x08014a0f

08010b7c <__mcmp>:
 8010b7c:	690a      	ldr	r2, [r1, #16]
 8010b7e:	4603      	mov	r3, r0
 8010b80:	6900      	ldr	r0, [r0, #16]
 8010b82:	1a80      	subs	r0, r0, r2
 8010b84:	b530      	push	{r4, r5, lr}
 8010b86:	d10e      	bne.n	8010ba6 <__mcmp+0x2a>
 8010b88:	3314      	adds	r3, #20
 8010b8a:	3114      	adds	r1, #20
 8010b8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010b90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010b94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010b98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010b9c:	4295      	cmp	r5, r2
 8010b9e:	d003      	beq.n	8010ba8 <__mcmp+0x2c>
 8010ba0:	d205      	bcs.n	8010bae <__mcmp+0x32>
 8010ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ba6:	bd30      	pop	{r4, r5, pc}
 8010ba8:	42a3      	cmp	r3, r4
 8010baa:	d3f3      	bcc.n	8010b94 <__mcmp+0x18>
 8010bac:	e7fb      	b.n	8010ba6 <__mcmp+0x2a>
 8010bae:	2001      	movs	r0, #1
 8010bb0:	e7f9      	b.n	8010ba6 <__mcmp+0x2a>
	...

08010bb4 <__mdiff>:
 8010bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bb8:	4689      	mov	r9, r1
 8010bba:	4606      	mov	r6, r0
 8010bbc:	4611      	mov	r1, r2
 8010bbe:	4648      	mov	r0, r9
 8010bc0:	4614      	mov	r4, r2
 8010bc2:	f7ff ffdb 	bl	8010b7c <__mcmp>
 8010bc6:	1e05      	subs	r5, r0, #0
 8010bc8:	d112      	bne.n	8010bf0 <__mdiff+0x3c>
 8010bca:	4629      	mov	r1, r5
 8010bcc:	4630      	mov	r0, r6
 8010bce:	f7ff fd11 	bl	80105f4 <_Balloc>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	b928      	cbnz	r0, 8010be2 <__mdiff+0x2e>
 8010bd6:	4b3f      	ldr	r3, [pc, #252]	@ (8010cd4 <__mdiff+0x120>)
 8010bd8:	f240 2137 	movw	r1, #567	@ 0x237
 8010bdc:	483e      	ldr	r0, [pc, #248]	@ (8010cd8 <__mdiff+0x124>)
 8010bde:	f7fe fe53 	bl	800f888 <__assert_func>
 8010be2:	2301      	movs	r3, #1
 8010be4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010be8:	4610      	mov	r0, r2
 8010bea:	b003      	add	sp, #12
 8010bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bf0:	bfbc      	itt	lt
 8010bf2:	464b      	movlt	r3, r9
 8010bf4:	46a1      	movlt	r9, r4
 8010bf6:	4630      	mov	r0, r6
 8010bf8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010bfc:	bfba      	itte	lt
 8010bfe:	461c      	movlt	r4, r3
 8010c00:	2501      	movlt	r5, #1
 8010c02:	2500      	movge	r5, #0
 8010c04:	f7ff fcf6 	bl	80105f4 <_Balloc>
 8010c08:	4602      	mov	r2, r0
 8010c0a:	b918      	cbnz	r0, 8010c14 <__mdiff+0x60>
 8010c0c:	4b31      	ldr	r3, [pc, #196]	@ (8010cd4 <__mdiff+0x120>)
 8010c0e:	f240 2145 	movw	r1, #581	@ 0x245
 8010c12:	e7e3      	b.n	8010bdc <__mdiff+0x28>
 8010c14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010c18:	6926      	ldr	r6, [r4, #16]
 8010c1a:	60c5      	str	r5, [r0, #12]
 8010c1c:	f109 0310 	add.w	r3, r9, #16
 8010c20:	f109 0514 	add.w	r5, r9, #20
 8010c24:	f104 0e14 	add.w	lr, r4, #20
 8010c28:	f100 0b14 	add.w	fp, r0, #20
 8010c2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010c30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010c34:	9301      	str	r3, [sp, #4]
 8010c36:	46d9      	mov	r9, fp
 8010c38:	f04f 0c00 	mov.w	ip, #0
 8010c3c:	9b01      	ldr	r3, [sp, #4]
 8010c3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010c42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010c46:	9301      	str	r3, [sp, #4]
 8010c48:	fa1f f38a 	uxth.w	r3, sl
 8010c4c:	4619      	mov	r1, r3
 8010c4e:	b283      	uxth	r3, r0
 8010c50:	1acb      	subs	r3, r1, r3
 8010c52:	0c00      	lsrs	r0, r0, #16
 8010c54:	4463      	add	r3, ip
 8010c56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010c5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010c64:	4576      	cmp	r6, lr
 8010c66:	f849 3b04 	str.w	r3, [r9], #4
 8010c6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010c6e:	d8e5      	bhi.n	8010c3c <__mdiff+0x88>
 8010c70:	1b33      	subs	r3, r6, r4
 8010c72:	3b15      	subs	r3, #21
 8010c74:	f023 0303 	bic.w	r3, r3, #3
 8010c78:	3415      	adds	r4, #21
 8010c7a:	3304      	adds	r3, #4
 8010c7c:	42a6      	cmp	r6, r4
 8010c7e:	bf38      	it	cc
 8010c80:	2304      	movcc	r3, #4
 8010c82:	441d      	add	r5, r3
 8010c84:	445b      	add	r3, fp
 8010c86:	461e      	mov	r6, r3
 8010c88:	462c      	mov	r4, r5
 8010c8a:	4544      	cmp	r4, r8
 8010c8c:	d30e      	bcc.n	8010cac <__mdiff+0xf8>
 8010c8e:	f108 0103 	add.w	r1, r8, #3
 8010c92:	1b49      	subs	r1, r1, r5
 8010c94:	f021 0103 	bic.w	r1, r1, #3
 8010c98:	3d03      	subs	r5, #3
 8010c9a:	45a8      	cmp	r8, r5
 8010c9c:	bf38      	it	cc
 8010c9e:	2100      	movcc	r1, #0
 8010ca0:	440b      	add	r3, r1
 8010ca2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010ca6:	b191      	cbz	r1, 8010cce <__mdiff+0x11a>
 8010ca8:	6117      	str	r7, [r2, #16]
 8010caa:	e79d      	b.n	8010be8 <__mdiff+0x34>
 8010cac:	f854 1b04 	ldr.w	r1, [r4], #4
 8010cb0:	46e6      	mov	lr, ip
 8010cb2:	0c08      	lsrs	r0, r1, #16
 8010cb4:	fa1c fc81 	uxtah	ip, ip, r1
 8010cb8:	4471      	add	r1, lr
 8010cba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010cbe:	b289      	uxth	r1, r1
 8010cc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010cc4:	f846 1b04 	str.w	r1, [r6], #4
 8010cc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010ccc:	e7dd      	b.n	8010c8a <__mdiff+0xd6>
 8010cce:	3f01      	subs	r7, #1
 8010cd0:	e7e7      	b.n	8010ca2 <__mdiff+0xee>
 8010cd2:	bf00      	nop
 8010cd4:	080149fe 	.word	0x080149fe
 8010cd8:	08014a0f 	.word	0x08014a0f

08010cdc <__ulp>:
 8010cdc:	b082      	sub	sp, #8
 8010cde:	ed8d 0b00 	vstr	d0, [sp]
 8010ce2:	9a01      	ldr	r2, [sp, #4]
 8010ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8010d24 <__ulp+0x48>)
 8010ce6:	4013      	ands	r3, r2
 8010ce8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	dc08      	bgt.n	8010d02 <__ulp+0x26>
 8010cf0:	425b      	negs	r3, r3
 8010cf2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010cf6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010cfa:	da04      	bge.n	8010d06 <__ulp+0x2a>
 8010cfc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010d00:	4113      	asrs	r3, r2
 8010d02:	2200      	movs	r2, #0
 8010d04:	e008      	b.n	8010d18 <__ulp+0x3c>
 8010d06:	f1a2 0314 	sub.w	r3, r2, #20
 8010d0a:	2b1e      	cmp	r3, #30
 8010d0c:	bfda      	itte	le
 8010d0e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010d12:	40da      	lsrle	r2, r3
 8010d14:	2201      	movgt	r2, #1
 8010d16:	2300      	movs	r3, #0
 8010d18:	4619      	mov	r1, r3
 8010d1a:	4610      	mov	r0, r2
 8010d1c:	ec41 0b10 	vmov	d0, r0, r1
 8010d20:	b002      	add	sp, #8
 8010d22:	4770      	bx	lr
 8010d24:	7ff00000 	.word	0x7ff00000

08010d28 <__b2d>:
 8010d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d2c:	6906      	ldr	r6, [r0, #16]
 8010d2e:	f100 0814 	add.w	r8, r0, #20
 8010d32:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010d36:	1f37      	subs	r7, r6, #4
 8010d38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010d3c:	4610      	mov	r0, r2
 8010d3e:	f7ff fd4b 	bl	80107d8 <__hi0bits>
 8010d42:	f1c0 0320 	rsb	r3, r0, #32
 8010d46:	280a      	cmp	r0, #10
 8010d48:	600b      	str	r3, [r1, #0]
 8010d4a:	491b      	ldr	r1, [pc, #108]	@ (8010db8 <__b2d+0x90>)
 8010d4c:	dc15      	bgt.n	8010d7a <__b2d+0x52>
 8010d4e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010d52:	fa22 f30c 	lsr.w	r3, r2, ip
 8010d56:	45b8      	cmp	r8, r7
 8010d58:	ea43 0501 	orr.w	r5, r3, r1
 8010d5c:	bf34      	ite	cc
 8010d5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010d62:	2300      	movcs	r3, #0
 8010d64:	3015      	adds	r0, #21
 8010d66:	fa02 f000 	lsl.w	r0, r2, r0
 8010d6a:	fa23 f30c 	lsr.w	r3, r3, ip
 8010d6e:	4303      	orrs	r3, r0
 8010d70:	461c      	mov	r4, r3
 8010d72:	ec45 4b10 	vmov	d0, r4, r5
 8010d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d7a:	45b8      	cmp	r8, r7
 8010d7c:	bf3a      	itte	cc
 8010d7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010d82:	f1a6 0708 	subcc.w	r7, r6, #8
 8010d86:	2300      	movcs	r3, #0
 8010d88:	380b      	subs	r0, #11
 8010d8a:	d012      	beq.n	8010db2 <__b2d+0x8a>
 8010d8c:	f1c0 0120 	rsb	r1, r0, #32
 8010d90:	fa23 f401 	lsr.w	r4, r3, r1
 8010d94:	4082      	lsls	r2, r0
 8010d96:	4322      	orrs	r2, r4
 8010d98:	4547      	cmp	r7, r8
 8010d9a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010d9e:	bf8c      	ite	hi
 8010da0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010da4:	2200      	movls	r2, #0
 8010da6:	4083      	lsls	r3, r0
 8010da8:	40ca      	lsrs	r2, r1
 8010daa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010dae:	4313      	orrs	r3, r2
 8010db0:	e7de      	b.n	8010d70 <__b2d+0x48>
 8010db2:	ea42 0501 	orr.w	r5, r2, r1
 8010db6:	e7db      	b.n	8010d70 <__b2d+0x48>
 8010db8:	3ff00000 	.word	0x3ff00000

08010dbc <__d2b>:
 8010dbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010dc0:	460f      	mov	r7, r1
 8010dc2:	2101      	movs	r1, #1
 8010dc4:	ec59 8b10 	vmov	r8, r9, d0
 8010dc8:	4616      	mov	r6, r2
 8010dca:	f7ff fc13 	bl	80105f4 <_Balloc>
 8010dce:	4604      	mov	r4, r0
 8010dd0:	b930      	cbnz	r0, 8010de0 <__d2b+0x24>
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	4b23      	ldr	r3, [pc, #140]	@ (8010e64 <__d2b+0xa8>)
 8010dd6:	4824      	ldr	r0, [pc, #144]	@ (8010e68 <__d2b+0xac>)
 8010dd8:	f240 310f 	movw	r1, #783	@ 0x30f
 8010ddc:	f7fe fd54 	bl	800f888 <__assert_func>
 8010de0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010de4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010de8:	b10d      	cbz	r5, 8010dee <__d2b+0x32>
 8010dea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010dee:	9301      	str	r3, [sp, #4]
 8010df0:	f1b8 0300 	subs.w	r3, r8, #0
 8010df4:	d023      	beq.n	8010e3e <__d2b+0x82>
 8010df6:	4668      	mov	r0, sp
 8010df8:	9300      	str	r3, [sp, #0]
 8010dfa:	f7ff fd0c 	bl	8010816 <__lo0bits>
 8010dfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010e02:	b1d0      	cbz	r0, 8010e3a <__d2b+0x7e>
 8010e04:	f1c0 0320 	rsb	r3, r0, #32
 8010e08:	fa02 f303 	lsl.w	r3, r2, r3
 8010e0c:	430b      	orrs	r3, r1
 8010e0e:	40c2      	lsrs	r2, r0
 8010e10:	6163      	str	r3, [r4, #20]
 8010e12:	9201      	str	r2, [sp, #4]
 8010e14:	9b01      	ldr	r3, [sp, #4]
 8010e16:	61a3      	str	r3, [r4, #24]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	bf0c      	ite	eq
 8010e1c:	2201      	moveq	r2, #1
 8010e1e:	2202      	movne	r2, #2
 8010e20:	6122      	str	r2, [r4, #16]
 8010e22:	b1a5      	cbz	r5, 8010e4e <__d2b+0x92>
 8010e24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010e28:	4405      	add	r5, r0
 8010e2a:	603d      	str	r5, [r7, #0]
 8010e2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010e30:	6030      	str	r0, [r6, #0]
 8010e32:	4620      	mov	r0, r4
 8010e34:	b003      	add	sp, #12
 8010e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e3a:	6161      	str	r1, [r4, #20]
 8010e3c:	e7ea      	b.n	8010e14 <__d2b+0x58>
 8010e3e:	a801      	add	r0, sp, #4
 8010e40:	f7ff fce9 	bl	8010816 <__lo0bits>
 8010e44:	9b01      	ldr	r3, [sp, #4]
 8010e46:	6163      	str	r3, [r4, #20]
 8010e48:	3020      	adds	r0, #32
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	e7e8      	b.n	8010e20 <__d2b+0x64>
 8010e4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010e52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010e56:	6038      	str	r0, [r7, #0]
 8010e58:	6918      	ldr	r0, [r3, #16]
 8010e5a:	f7ff fcbd 	bl	80107d8 <__hi0bits>
 8010e5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010e62:	e7e5      	b.n	8010e30 <__d2b+0x74>
 8010e64:	080149fe 	.word	0x080149fe
 8010e68:	08014a0f 	.word	0x08014a0f

08010e6c <__ratio>:
 8010e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e70:	b085      	sub	sp, #20
 8010e72:	e9cd 1000 	strd	r1, r0, [sp]
 8010e76:	a902      	add	r1, sp, #8
 8010e78:	f7ff ff56 	bl	8010d28 <__b2d>
 8010e7c:	9800      	ldr	r0, [sp, #0]
 8010e7e:	a903      	add	r1, sp, #12
 8010e80:	ec55 4b10 	vmov	r4, r5, d0
 8010e84:	f7ff ff50 	bl	8010d28 <__b2d>
 8010e88:	9b01      	ldr	r3, [sp, #4]
 8010e8a:	6919      	ldr	r1, [r3, #16]
 8010e8c:	9b00      	ldr	r3, [sp, #0]
 8010e8e:	691b      	ldr	r3, [r3, #16]
 8010e90:	1ac9      	subs	r1, r1, r3
 8010e92:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010e96:	1a9b      	subs	r3, r3, r2
 8010e98:	ec5b ab10 	vmov	sl, fp, d0
 8010e9c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	bfce      	itee	gt
 8010ea4:	462a      	movgt	r2, r5
 8010ea6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010eaa:	465a      	movle	r2, fp
 8010eac:	462f      	mov	r7, r5
 8010eae:	46d9      	mov	r9, fp
 8010eb0:	bfcc      	ite	gt
 8010eb2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010eb6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010eba:	464b      	mov	r3, r9
 8010ebc:	4652      	mov	r2, sl
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	4639      	mov	r1, r7
 8010ec2:	f7ef fcd3 	bl	800086c <__aeabi_ddiv>
 8010ec6:	ec41 0b10 	vmov	d0, r0, r1
 8010eca:	b005      	add	sp, #20
 8010ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ed0 <__copybits>:
 8010ed0:	3901      	subs	r1, #1
 8010ed2:	b570      	push	{r4, r5, r6, lr}
 8010ed4:	1149      	asrs	r1, r1, #5
 8010ed6:	6914      	ldr	r4, [r2, #16]
 8010ed8:	3101      	adds	r1, #1
 8010eda:	f102 0314 	add.w	r3, r2, #20
 8010ede:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010ee2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010ee6:	1f05      	subs	r5, r0, #4
 8010ee8:	42a3      	cmp	r3, r4
 8010eea:	d30c      	bcc.n	8010f06 <__copybits+0x36>
 8010eec:	1aa3      	subs	r3, r4, r2
 8010eee:	3b11      	subs	r3, #17
 8010ef0:	f023 0303 	bic.w	r3, r3, #3
 8010ef4:	3211      	adds	r2, #17
 8010ef6:	42a2      	cmp	r2, r4
 8010ef8:	bf88      	it	hi
 8010efa:	2300      	movhi	r3, #0
 8010efc:	4418      	add	r0, r3
 8010efe:	2300      	movs	r3, #0
 8010f00:	4288      	cmp	r0, r1
 8010f02:	d305      	bcc.n	8010f10 <__copybits+0x40>
 8010f04:	bd70      	pop	{r4, r5, r6, pc}
 8010f06:	f853 6b04 	ldr.w	r6, [r3], #4
 8010f0a:	f845 6f04 	str.w	r6, [r5, #4]!
 8010f0e:	e7eb      	b.n	8010ee8 <__copybits+0x18>
 8010f10:	f840 3b04 	str.w	r3, [r0], #4
 8010f14:	e7f4      	b.n	8010f00 <__copybits+0x30>

08010f16 <__any_on>:
 8010f16:	f100 0214 	add.w	r2, r0, #20
 8010f1a:	6900      	ldr	r0, [r0, #16]
 8010f1c:	114b      	asrs	r3, r1, #5
 8010f1e:	4298      	cmp	r0, r3
 8010f20:	b510      	push	{r4, lr}
 8010f22:	db11      	blt.n	8010f48 <__any_on+0x32>
 8010f24:	dd0a      	ble.n	8010f3c <__any_on+0x26>
 8010f26:	f011 011f 	ands.w	r1, r1, #31
 8010f2a:	d007      	beq.n	8010f3c <__any_on+0x26>
 8010f2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010f30:	fa24 f001 	lsr.w	r0, r4, r1
 8010f34:	fa00 f101 	lsl.w	r1, r0, r1
 8010f38:	428c      	cmp	r4, r1
 8010f3a:	d10b      	bne.n	8010f54 <__any_on+0x3e>
 8010f3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d803      	bhi.n	8010f4c <__any_on+0x36>
 8010f44:	2000      	movs	r0, #0
 8010f46:	bd10      	pop	{r4, pc}
 8010f48:	4603      	mov	r3, r0
 8010f4a:	e7f7      	b.n	8010f3c <__any_on+0x26>
 8010f4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010f50:	2900      	cmp	r1, #0
 8010f52:	d0f5      	beq.n	8010f40 <__any_on+0x2a>
 8010f54:	2001      	movs	r0, #1
 8010f56:	e7f6      	b.n	8010f46 <__any_on+0x30>

08010f58 <sulp>:
 8010f58:	b570      	push	{r4, r5, r6, lr}
 8010f5a:	4604      	mov	r4, r0
 8010f5c:	460d      	mov	r5, r1
 8010f5e:	ec45 4b10 	vmov	d0, r4, r5
 8010f62:	4616      	mov	r6, r2
 8010f64:	f7ff feba 	bl	8010cdc <__ulp>
 8010f68:	ec51 0b10 	vmov	r0, r1, d0
 8010f6c:	b17e      	cbz	r6, 8010f8e <sulp+0x36>
 8010f6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010f72:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	dd09      	ble.n	8010f8e <sulp+0x36>
 8010f7a:	051b      	lsls	r3, r3, #20
 8010f7c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010f80:	2400      	movs	r4, #0
 8010f82:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010f86:	4622      	mov	r2, r4
 8010f88:	462b      	mov	r3, r5
 8010f8a:	f7ef fb45 	bl	8000618 <__aeabi_dmul>
 8010f8e:	ec41 0b10 	vmov	d0, r0, r1
 8010f92:	bd70      	pop	{r4, r5, r6, pc}
 8010f94:	0000      	movs	r0, r0
	...

08010f98 <_strtod_l>:
 8010f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f9c:	b09f      	sub	sp, #124	@ 0x7c
 8010f9e:	460c      	mov	r4, r1
 8010fa0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	921a      	str	r2, [sp, #104]	@ 0x68
 8010fa6:	9005      	str	r0, [sp, #20]
 8010fa8:	f04f 0a00 	mov.w	sl, #0
 8010fac:	f04f 0b00 	mov.w	fp, #0
 8010fb0:	460a      	mov	r2, r1
 8010fb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8010fb4:	7811      	ldrb	r1, [r2, #0]
 8010fb6:	292b      	cmp	r1, #43	@ 0x2b
 8010fb8:	d04a      	beq.n	8011050 <_strtod_l+0xb8>
 8010fba:	d838      	bhi.n	801102e <_strtod_l+0x96>
 8010fbc:	290d      	cmp	r1, #13
 8010fbe:	d832      	bhi.n	8011026 <_strtod_l+0x8e>
 8010fc0:	2908      	cmp	r1, #8
 8010fc2:	d832      	bhi.n	801102a <_strtod_l+0x92>
 8010fc4:	2900      	cmp	r1, #0
 8010fc6:	d03b      	beq.n	8011040 <_strtod_l+0xa8>
 8010fc8:	2200      	movs	r2, #0
 8010fca:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010fcc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010fce:	782a      	ldrb	r2, [r5, #0]
 8010fd0:	2a30      	cmp	r2, #48	@ 0x30
 8010fd2:	f040 80b3 	bne.w	801113c <_strtod_l+0x1a4>
 8010fd6:	786a      	ldrb	r2, [r5, #1]
 8010fd8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010fdc:	2a58      	cmp	r2, #88	@ 0x58
 8010fde:	d16e      	bne.n	80110be <_strtod_l+0x126>
 8010fe0:	9302      	str	r3, [sp, #8]
 8010fe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010fe4:	9301      	str	r3, [sp, #4]
 8010fe6:	ab1a      	add	r3, sp, #104	@ 0x68
 8010fe8:	9300      	str	r3, [sp, #0]
 8010fea:	4a8e      	ldr	r2, [pc, #568]	@ (8011224 <_strtod_l+0x28c>)
 8010fec:	9805      	ldr	r0, [sp, #20]
 8010fee:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010ff0:	a919      	add	r1, sp, #100	@ 0x64
 8010ff2:	f001 fc7f 	bl	80128f4 <__gethex>
 8010ff6:	f010 060f 	ands.w	r6, r0, #15
 8010ffa:	4604      	mov	r4, r0
 8010ffc:	d005      	beq.n	801100a <_strtod_l+0x72>
 8010ffe:	2e06      	cmp	r6, #6
 8011000:	d128      	bne.n	8011054 <_strtod_l+0xbc>
 8011002:	3501      	adds	r5, #1
 8011004:	2300      	movs	r3, #0
 8011006:	9519      	str	r5, [sp, #100]	@ 0x64
 8011008:	930b      	str	r3, [sp, #44]	@ 0x2c
 801100a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801100c:	2b00      	cmp	r3, #0
 801100e:	f040 858e 	bne.w	8011b2e <_strtod_l+0xb96>
 8011012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011014:	b1cb      	cbz	r3, 801104a <_strtod_l+0xb2>
 8011016:	4652      	mov	r2, sl
 8011018:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801101c:	ec43 2b10 	vmov	d0, r2, r3
 8011020:	b01f      	add	sp, #124	@ 0x7c
 8011022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011026:	2920      	cmp	r1, #32
 8011028:	d1ce      	bne.n	8010fc8 <_strtod_l+0x30>
 801102a:	3201      	adds	r2, #1
 801102c:	e7c1      	b.n	8010fb2 <_strtod_l+0x1a>
 801102e:	292d      	cmp	r1, #45	@ 0x2d
 8011030:	d1ca      	bne.n	8010fc8 <_strtod_l+0x30>
 8011032:	2101      	movs	r1, #1
 8011034:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011036:	1c51      	adds	r1, r2, #1
 8011038:	9119      	str	r1, [sp, #100]	@ 0x64
 801103a:	7852      	ldrb	r2, [r2, #1]
 801103c:	2a00      	cmp	r2, #0
 801103e:	d1c5      	bne.n	8010fcc <_strtod_l+0x34>
 8011040:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011042:	9419      	str	r4, [sp, #100]	@ 0x64
 8011044:	2b00      	cmp	r3, #0
 8011046:	f040 8570 	bne.w	8011b2a <_strtod_l+0xb92>
 801104a:	4652      	mov	r2, sl
 801104c:	465b      	mov	r3, fp
 801104e:	e7e5      	b.n	801101c <_strtod_l+0x84>
 8011050:	2100      	movs	r1, #0
 8011052:	e7ef      	b.n	8011034 <_strtod_l+0x9c>
 8011054:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011056:	b13a      	cbz	r2, 8011068 <_strtod_l+0xd0>
 8011058:	2135      	movs	r1, #53	@ 0x35
 801105a:	a81c      	add	r0, sp, #112	@ 0x70
 801105c:	f7ff ff38 	bl	8010ed0 <__copybits>
 8011060:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011062:	9805      	ldr	r0, [sp, #20]
 8011064:	f7ff fb06 	bl	8010674 <_Bfree>
 8011068:	3e01      	subs	r6, #1
 801106a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801106c:	2e04      	cmp	r6, #4
 801106e:	d806      	bhi.n	801107e <_strtod_l+0xe6>
 8011070:	e8df f006 	tbb	[pc, r6]
 8011074:	201d0314 	.word	0x201d0314
 8011078:	14          	.byte	0x14
 8011079:	00          	.byte	0x00
 801107a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801107e:	05e1      	lsls	r1, r4, #23
 8011080:	bf48      	it	mi
 8011082:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011086:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801108a:	0d1b      	lsrs	r3, r3, #20
 801108c:	051b      	lsls	r3, r3, #20
 801108e:	2b00      	cmp	r3, #0
 8011090:	d1bb      	bne.n	801100a <_strtod_l+0x72>
 8011092:	f7fe fbb7 	bl	800f804 <__errno>
 8011096:	2322      	movs	r3, #34	@ 0x22
 8011098:	6003      	str	r3, [r0, #0]
 801109a:	e7b6      	b.n	801100a <_strtod_l+0x72>
 801109c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80110a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80110a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80110a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80110ac:	e7e7      	b.n	801107e <_strtod_l+0xe6>
 80110ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801122c <_strtod_l+0x294>
 80110b2:	e7e4      	b.n	801107e <_strtod_l+0xe6>
 80110b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80110b8:	f04f 3aff 	mov.w	sl, #4294967295
 80110bc:	e7df      	b.n	801107e <_strtod_l+0xe6>
 80110be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110c0:	1c5a      	adds	r2, r3, #1
 80110c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80110c4:	785b      	ldrb	r3, [r3, #1]
 80110c6:	2b30      	cmp	r3, #48	@ 0x30
 80110c8:	d0f9      	beq.n	80110be <_strtod_l+0x126>
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d09d      	beq.n	801100a <_strtod_l+0x72>
 80110ce:	2301      	movs	r3, #1
 80110d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80110d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80110d6:	2300      	movs	r3, #0
 80110d8:	9308      	str	r3, [sp, #32]
 80110da:	930a      	str	r3, [sp, #40]	@ 0x28
 80110dc:	461f      	mov	r7, r3
 80110de:	220a      	movs	r2, #10
 80110e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80110e2:	7805      	ldrb	r5, [r0, #0]
 80110e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80110e8:	b2d9      	uxtb	r1, r3
 80110ea:	2909      	cmp	r1, #9
 80110ec:	d928      	bls.n	8011140 <_strtod_l+0x1a8>
 80110ee:	494e      	ldr	r1, [pc, #312]	@ (8011228 <_strtod_l+0x290>)
 80110f0:	2201      	movs	r2, #1
 80110f2:	f7fe faab 	bl	800f64c <strncmp>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	d032      	beq.n	8011160 <_strtod_l+0x1c8>
 80110fa:	2000      	movs	r0, #0
 80110fc:	462a      	mov	r2, r5
 80110fe:	4681      	mov	r9, r0
 8011100:	463d      	mov	r5, r7
 8011102:	4603      	mov	r3, r0
 8011104:	2a65      	cmp	r2, #101	@ 0x65
 8011106:	d001      	beq.n	801110c <_strtod_l+0x174>
 8011108:	2a45      	cmp	r2, #69	@ 0x45
 801110a:	d114      	bne.n	8011136 <_strtod_l+0x19e>
 801110c:	b91d      	cbnz	r5, 8011116 <_strtod_l+0x17e>
 801110e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011110:	4302      	orrs	r2, r0
 8011112:	d095      	beq.n	8011040 <_strtod_l+0xa8>
 8011114:	2500      	movs	r5, #0
 8011116:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011118:	1c62      	adds	r2, r4, #1
 801111a:	9219      	str	r2, [sp, #100]	@ 0x64
 801111c:	7862      	ldrb	r2, [r4, #1]
 801111e:	2a2b      	cmp	r2, #43	@ 0x2b
 8011120:	d077      	beq.n	8011212 <_strtod_l+0x27a>
 8011122:	2a2d      	cmp	r2, #45	@ 0x2d
 8011124:	d07b      	beq.n	801121e <_strtod_l+0x286>
 8011126:	f04f 0c00 	mov.w	ip, #0
 801112a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801112e:	2909      	cmp	r1, #9
 8011130:	f240 8082 	bls.w	8011238 <_strtod_l+0x2a0>
 8011134:	9419      	str	r4, [sp, #100]	@ 0x64
 8011136:	f04f 0800 	mov.w	r8, #0
 801113a:	e0a2      	b.n	8011282 <_strtod_l+0x2ea>
 801113c:	2300      	movs	r3, #0
 801113e:	e7c7      	b.n	80110d0 <_strtod_l+0x138>
 8011140:	2f08      	cmp	r7, #8
 8011142:	bfd5      	itete	le
 8011144:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8011146:	9908      	ldrgt	r1, [sp, #32]
 8011148:	fb02 3301 	mlale	r3, r2, r1, r3
 801114c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011150:	f100 0001 	add.w	r0, r0, #1
 8011154:	bfd4      	ite	le
 8011156:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011158:	9308      	strgt	r3, [sp, #32]
 801115a:	3701      	adds	r7, #1
 801115c:	9019      	str	r0, [sp, #100]	@ 0x64
 801115e:	e7bf      	b.n	80110e0 <_strtod_l+0x148>
 8011160:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011162:	1c5a      	adds	r2, r3, #1
 8011164:	9219      	str	r2, [sp, #100]	@ 0x64
 8011166:	785a      	ldrb	r2, [r3, #1]
 8011168:	b37f      	cbz	r7, 80111ca <_strtod_l+0x232>
 801116a:	4681      	mov	r9, r0
 801116c:	463d      	mov	r5, r7
 801116e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011172:	2b09      	cmp	r3, #9
 8011174:	d912      	bls.n	801119c <_strtod_l+0x204>
 8011176:	2301      	movs	r3, #1
 8011178:	e7c4      	b.n	8011104 <_strtod_l+0x16c>
 801117a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801117c:	1c5a      	adds	r2, r3, #1
 801117e:	9219      	str	r2, [sp, #100]	@ 0x64
 8011180:	785a      	ldrb	r2, [r3, #1]
 8011182:	3001      	adds	r0, #1
 8011184:	2a30      	cmp	r2, #48	@ 0x30
 8011186:	d0f8      	beq.n	801117a <_strtod_l+0x1e2>
 8011188:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801118c:	2b08      	cmp	r3, #8
 801118e:	f200 84d3 	bhi.w	8011b38 <_strtod_l+0xba0>
 8011192:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011194:	930c      	str	r3, [sp, #48]	@ 0x30
 8011196:	4681      	mov	r9, r0
 8011198:	2000      	movs	r0, #0
 801119a:	4605      	mov	r5, r0
 801119c:	3a30      	subs	r2, #48	@ 0x30
 801119e:	f100 0301 	add.w	r3, r0, #1
 80111a2:	d02a      	beq.n	80111fa <_strtod_l+0x262>
 80111a4:	4499      	add	r9, r3
 80111a6:	eb00 0c05 	add.w	ip, r0, r5
 80111aa:	462b      	mov	r3, r5
 80111ac:	210a      	movs	r1, #10
 80111ae:	4563      	cmp	r3, ip
 80111b0:	d10d      	bne.n	80111ce <_strtod_l+0x236>
 80111b2:	1c69      	adds	r1, r5, #1
 80111b4:	4401      	add	r1, r0
 80111b6:	4428      	add	r0, r5
 80111b8:	2808      	cmp	r0, #8
 80111ba:	dc16      	bgt.n	80111ea <_strtod_l+0x252>
 80111bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80111be:	230a      	movs	r3, #10
 80111c0:	fb03 2300 	mla	r3, r3, r0, r2
 80111c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80111c6:	2300      	movs	r3, #0
 80111c8:	e018      	b.n	80111fc <_strtod_l+0x264>
 80111ca:	4638      	mov	r0, r7
 80111cc:	e7da      	b.n	8011184 <_strtod_l+0x1ec>
 80111ce:	2b08      	cmp	r3, #8
 80111d0:	f103 0301 	add.w	r3, r3, #1
 80111d4:	dc03      	bgt.n	80111de <_strtod_l+0x246>
 80111d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80111d8:	434e      	muls	r6, r1
 80111da:	960a      	str	r6, [sp, #40]	@ 0x28
 80111dc:	e7e7      	b.n	80111ae <_strtod_l+0x216>
 80111de:	2b10      	cmp	r3, #16
 80111e0:	bfde      	ittt	le
 80111e2:	9e08      	ldrle	r6, [sp, #32]
 80111e4:	434e      	mulle	r6, r1
 80111e6:	9608      	strle	r6, [sp, #32]
 80111e8:	e7e1      	b.n	80111ae <_strtod_l+0x216>
 80111ea:	280f      	cmp	r0, #15
 80111ec:	dceb      	bgt.n	80111c6 <_strtod_l+0x22e>
 80111ee:	9808      	ldr	r0, [sp, #32]
 80111f0:	230a      	movs	r3, #10
 80111f2:	fb03 2300 	mla	r3, r3, r0, r2
 80111f6:	9308      	str	r3, [sp, #32]
 80111f8:	e7e5      	b.n	80111c6 <_strtod_l+0x22e>
 80111fa:	4629      	mov	r1, r5
 80111fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80111fe:	1c50      	adds	r0, r2, #1
 8011200:	9019      	str	r0, [sp, #100]	@ 0x64
 8011202:	7852      	ldrb	r2, [r2, #1]
 8011204:	4618      	mov	r0, r3
 8011206:	460d      	mov	r5, r1
 8011208:	e7b1      	b.n	801116e <_strtod_l+0x1d6>
 801120a:	f04f 0900 	mov.w	r9, #0
 801120e:	2301      	movs	r3, #1
 8011210:	e77d      	b.n	801110e <_strtod_l+0x176>
 8011212:	f04f 0c00 	mov.w	ip, #0
 8011216:	1ca2      	adds	r2, r4, #2
 8011218:	9219      	str	r2, [sp, #100]	@ 0x64
 801121a:	78a2      	ldrb	r2, [r4, #2]
 801121c:	e785      	b.n	801112a <_strtod_l+0x192>
 801121e:	f04f 0c01 	mov.w	ip, #1
 8011222:	e7f8      	b.n	8011216 <_strtod_l+0x27e>
 8011224:	08014b80 	.word	0x08014b80
 8011228:	08014b68 	.word	0x08014b68
 801122c:	7ff00000 	.word	0x7ff00000
 8011230:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011232:	1c51      	adds	r1, r2, #1
 8011234:	9119      	str	r1, [sp, #100]	@ 0x64
 8011236:	7852      	ldrb	r2, [r2, #1]
 8011238:	2a30      	cmp	r2, #48	@ 0x30
 801123a:	d0f9      	beq.n	8011230 <_strtod_l+0x298>
 801123c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011240:	2908      	cmp	r1, #8
 8011242:	f63f af78 	bhi.w	8011136 <_strtod_l+0x19e>
 8011246:	3a30      	subs	r2, #48	@ 0x30
 8011248:	920e      	str	r2, [sp, #56]	@ 0x38
 801124a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801124c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801124e:	f04f 080a 	mov.w	r8, #10
 8011252:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011254:	1c56      	adds	r6, r2, #1
 8011256:	9619      	str	r6, [sp, #100]	@ 0x64
 8011258:	7852      	ldrb	r2, [r2, #1]
 801125a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801125e:	f1be 0f09 	cmp.w	lr, #9
 8011262:	d939      	bls.n	80112d8 <_strtod_l+0x340>
 8011264:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011266:	1a76      	subs	r6, r6, r1
 8011268:	2e08      	cmp	r6, #8
 801126a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801126e:	dc03      	bgt.n	8011278 <_strtod_l+0x2e0>
 8011270:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011272:	4588      	cmp	r8, r1
 8011274:	bfa8      	it	ge
 8011276:	4688      	movge	r8, r1
 8011278:	f1bc 0f00 	cmp.w	ip, #0
 801127c:	d001      	beq.n	8011282 <_strtod_l+0x2ea>
 801127e:	f1c8 0800 	rsb	r8, r8, #0
 8011282:	2d00      	cmp	r5, #0
 8011284:	d14e      	bne.n	8011324 <_strtod_l+0x38c>
 8011286:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011288:	4308      	orrs	r0, r1
 801128a:	f47f aebe 	bne.w	801100a <_strtod_l+0x72>
 801128e:	2b00      	cmp	r3, #0
 8011290:	f47f aed6 	bne.w	8011040 <_strtod_l+0xa8>
 8011294:	2a69      	cmp	r2, #105	@ 0x69
 8011296:	d028      	beq.n	80112ea <_strtod_l+0x352>
 8011298:	dc25      	bgt.n	80112e6 <_strtod_l+0x34e>
 801129a:	2a49      	cmp	r2, #73	@ 0x49
 801129c:	d025      	beq.n	80112ea <_strtod_l+0x352>
 801129e:	2a4e      	cmp	r2, #78	@ 0x4e
 80112a0:	f47f aece 	bne.w	8011040 <_strtod_l+0xa8>
 80112a4:	499b      	ldr	r1, [pc, #620]	@ (8011514 <_strtod_l+0x57c>)
 80112a6:	a819      	add	r0, sp, #100	@ 0x64
 80112a8:	f001 fd46 	bl	8012d38 <__match>
 80112ac:	2800      	cmp	r0, #0
 80112ae:	f43f aec7 	beq.w	8011040 <_strtod_l+0xa8>
 80112b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80112b4:	781b      	ldrb	r3, [r3, #0]
 80112b6:	2b28      	cmp	r3, #40	@ 0x28
 80112b8:	d12e      	bne.n	8011318 <_strtod_l+0x380>
 80112ba:	4997      	ldr	r1, [pc, #604]	@ (8011518 <_strtod_l+0x580>)
 80112bc:	aa1c      	add	r2, sp, #112	@ 0x70
 80112be:	a819      	add	r0, sp, #100	@ 0x64
 80112c0:	f001 fd4e 	bl	8012d60 <__hexnan>
 80112c4:	2805      	cmp	r0, #5
 80112c6:	d127      	bne.n	8011318 <_strtod_l+0x380>
 80112c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80112ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80112ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80112d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80112d6:	e698      	b.n	801100a <_strtod_l+0x72>
 80112d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80112da:	fb08 2101 	mla	r1, r8, r1, r2
 80112de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80112e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80112e4:	e7b5      	b.n	8011252 <_strtod_l+0x2ba>
 80112e6:	2a6e      	cmp	r2, #110	@ 0x6e
 80112e8:	e7da      	b.n	80112a0 <_strtod_l+0x308>
 80112ea:	498c      	ldr	r1, [pc, #560]	@ (801151c <_strtod_l+0x584>)
 80112ec:	a819      	add	r0, sp, #100	@ 0x64
 80112ee:	f001 fd23 	bl	8012d38 <__match>
 80112f2:	2800      	cmp	r0, #0
 80112f4:	f43f aea4 	beq.w	8011040 <_strtod_l+0xa8>
 80112f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80112fa:	4989      	ldr	r1, [pc, #548]	@ (8011520 <_strtod_l+0x588>)
 80112fc:	3b01      	subs	r3, #1
 80112fe:	a819      	add	r0, sp, #100	@ 0x64
 8011300:	9319      	str	r3, [sp, #100]	@ 0x64
 8011302:	f001 fd19 	bl	8012d38 <__match>
 8011306:	b910      	cbnz	r0, 801130e <_strtod_l+0x376>
 8011308:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801130a:	3301      	adds	r3, #1
 801130c:	9319      	str	r3, [sp, #100]	@ 0x64
 801130e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011530 <_strtod_l+0x598>
 8011312:	f04f 0a00 	mov.w	sl, #0
 8011316:	e678      	b.n	801100a <_strtod_l+0x72>
 8011318:	4882      	ldr	r0, [pc, #520]	@ (8011524 <_strtod_l+0x58c>)
 801131a:	f001 fa61 	bl	80127e0 <nan>
 801131e:	ec5b ab10 	vmov	sl, fp, d0
 8011322:	e672      	b.n	801100a <_strtod_l+0x72>
 8011324:	eba8 0309 	sub.w	r3, r8, r9
 8011328:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801132a:	9309      	str	r3, [sp, #36]	@ 0x24
 801132c:	2f00      	cmp	r7, #0
 801132e:	bf08      	it	eq
 8011330:	462f      	moveq	r7, r5
 8011332:	2d10      	cmp	r5, #16
 8011334:	462c      	mov	r4, r5
 8011336:	bfa8      	it	ge
 8011338:	2410      	movge	r4, #16
 801133a:	f7ef f8f3 	bl	8000524 <__aeabi_ui2d>
 801133e:	2d09      	cmp	r5, #9
 8011340:	4682      	mov	sl, r0
 8011342:	468b      	mov	fp, r1
 8011344:	dc13      	bgt.n	801136e <_strtod_l+0x3d6>
 8011346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011348:	2b00      	cmp	r3, #0
 801134a:	f43f ae5e 	beq.w	801100a <_strtod_l+0x72>
 801134e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011350:	dd78      	ble.n	8011444 <_strtod_l+0x4ac>
 8011352:	2b16      	cmp	r3, #22
 8011354:	dc5f      	bgt.n	8011416 <_strtod_l+0x47e>
 8011356:	4974      	ldr	r1, [pc, #464]	@ (8011528 <_strtod_l+0x590>)
 8011358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801135c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011360:	4652      	mov	r2, sl
 8011362:	465b      	mov	r3, fp
 8011364:	f7ef f958 	bl	8000618 <__aeabi_dmul>
 8011368:	4682      	mov	sl, r0
 801136a:	468b      	mov	fp, r1
 801136c:	e64d      	b.n	801100a <_strtod_l+0x72>
 801136e:	4b6e      	ldr	r3, [pc, #440]	@ (8011528 <_strtod_l+0x590>)
 8011370:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011374:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011378:	f7ef f94e 	bl	8000618 <__aeabi_dmul>
 801137c:	4682      	mov	sl, r0
 801137e:	9808      	ldr	r0, [sp, #32]
 8011380:	468b      	mov	fp, r1
 8011382:	f7ef f8cf 	bl	8000524 <__aeabi_ui2d>
 8011386:	4602      	mov	r2, r0
 8011388:	460b      	mov	r3, r1
 801138a:	4650      	mov	r0, sl
 801138c:	4659      	mov	r1, fp
 801138e:	f7ee ff8d 	bl	80002ac <__adddf3>
 8011392:	2d0f      	cmp	r5, #15
 8011394:	4682      	mov	sl, r0
 8011396:	468b      	mov	fp, r1
 8011398:	ddd5      	ble.n	8011346 <_strtod_l+0x3ae>
 801139a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801139c:	1b2c      	subs	r4, r5, r4
 801139e:	441c      	add	r4, r3
 80113a0:	2c00      	cmp	r4, #0
 80113a2:	f340 8096 	ble.w	80114d2 <_strtod_l+0x53a>
 80113a6:	f014 030f 	ands.w	r3, r4, #15
 80113aa:	d00a      	beq.n	80113c2 <_strtod_l+0x42a>
 80113ac:	495e      	ldr	r1, [pc, #376]	@ (8011528 <_strtod_l+0x590>)
 80113ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80113b2:	4652      	mov	r2, sl
 80113b4:	465b      	mov	r3, fp
 80113b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113ba:	f7ef f92d 	bl	8000618 <__aeabi_dmul>
 80113be:	4682      	mov	sl, r0
 80113c0:	468b      	mov	fp, r1
 80113c2:	f034 040f 	bics.w	r4, r4, #15
 80113c6:	d073      	beq.n	80114b0 <_strtod_l+0x518>
 80113c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80113cc:	dd48      	ble.n	8011460 <_strtod_l+0x4c8>
 80113ce:	2400      	movs	r4, #0
 80113d0:	46a0      	mov	r8, r4
 80113d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80113d4:	46a1      	mov	r9, r4
 80113d6:	9a05      	ldr	r2, [sp, #20]
 80113d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011530 <_strtod_l+0x598>
 80113dc:	2322      	movs	r3, #34	@ 0x22
 80113de:	6013      	str	r3, [r2, #0]
 80113e0:	f04f 0a00 	mov.w	sl, #0
 80113e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	f43f ae0f 	beq.w	801100a <_strtod_l+0x72>
 80113ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80113ee:	9805      	ldr	r0, [sp, #20]
 80113f0:	f7ff f940 	bl	8010674 <_Bfree>
 80113f4:	9805      	ldr	r0, [sp, #20]
 80113f6:	4649      	mov	r1, r9
 80113f8:	f7ff f93c 	bl	8010674 <_Bfree>
 80113fc:	9805      	ldr	r0, [sp, #20]
 80113fe:	4641      	mov	r1, r8
 8011400:	f7ff f938 	bl	8010674 <_Bfree>
 8011404:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011406:	9805      	ldr	r0, [sp, #20]
 8011408:	f7ff f934 	bl	8010674 <_Bfree>
 801140c:	9805      	ldr	r0, [sp, #20]
 801140e:	4621      	mov	r1, r4
 8011410:	f7ff f930 	bl	8010674 <_Bfree>
 8011414:	e5f9      	b.n	801100a <_strtod_l+0x72>
 8011416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011418:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801141c:	4293      	cmp	r3, r2
 801141e:	dbbc      	blt.n	801139a <_strtod_l+0x402>
 8011420:	4c41      	ldr	r4, [pc, #260]	@ (8011528 <_strtod_l+0x590>)
 8011422:	f1c5 050f 	rsb	r5, r5, #15
 8011426:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801142a:	4652      	mov	r2, sl
 801142c:	465b      	mov	r3, fp
 801142e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011432:	f7ef f8f1 	bl	8000618 <__aeabi_dmul>
 8011436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011438:	1b5d      	subs	r5, r3, r5
 801143a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801143e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011442:	e78f      	b.n	8011364 <_strtod_l+0x3cc>
 8011444:	3316      	adds	r3, #22
 8011446:	dba8      	blt.n	801139a <_strtod_l+0x402>
 8011448:	4b37      	ldr	r3, [pc, #220]	@ (8011528 <_strtod_l+0x590>)
 801144a:	eba9 0808 	sub.w	r8, r9, r8
 801144e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011452:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011456:	4650      	mov	r0, sl
 8011458:	4659      	mov	r1, fp
 801145a:	f7ef fa07 	bl	800086c <__aeabi_ddiv>
 801145e:	e783      	b.n	8011368 <_strtod_l+0x3d0>
 8011460:	4b32      	ldr	r3, [pc, #200]	@ (801152c <_strtod_l+0x594>)
 8011462:	9308      	str	r3, [sp, #32]
 8011464:	2300      	movs	r3, #0
 8011466:	1124      	asrs	r4, r4, #4
 8011468:	4650      	mov	r0, sl
 801146a:	4659      	mov	r1, fp
 801146c:	461e      	mov	r6, r3
 801146e:	2c01      	cmp	r4, #1
 8011470:	dc21      	bgt.n	80114b6 <_strtod_l+0x51e>
 8011472:	b10b      	cbz	r3, 8011478 <_strtod_l+0x4e0>
 8011474:	4682      	mov	sl, r0
 8011476:	468b      	mov	fp, r1
 8011478:	492c      	ldr	r1, [pc, #176]	@ (801152c <_strtod_l+0x594>)
 801147a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801147e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011482:	4652      	mov	r2, sl
 8011484:	465b      	mov	r3, fp
 8011486:	e9d1 0100 	ldrd	r0, r1, [r1]
 801148a:	f7ef f8c5 	bl	8000618 <__aeabi_dmul>
 801148e:	4b28      	ldr	r3, [pc, #160]	@ (8011530 <_strtod_l+0x598>)
 8011490:	460a      	mov	r2, r1
 8011492:	400b      	ands	r3, r1
 8011494:	4927      	ldr	r1, [pc, #156]	@ (8011534 <_strtod_l+0x59c>)
 8011496:	428b      	cmp	r3, r1
 8011498:	4682      	mov	sl, r0
 801149a:	d898      	bhi.n	80113ce <_strtod_l+0x436>
 801149c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80114a0:	428b      	cmp	r3, r1
 80114a2:	bf86      	itte	hi
 80114a4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011538 <_strtod_l+0x5a0>
 80114a8:	f04f 3aff 	movhi.w	sl, #4294967295
 80114ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80114b0:	2300      	movs	r3, #0
 80114b2:	9308      	str	r3, [sp, #32]
 80114b4:	e07a      	b.n	80115ac <_strtod_l+0x614>
 80114b6:	07e2      	lsls	r2, r4, #31
 80114b8:	d505      	bpl.n	80114c6 <_strtod_l+0x52e>
 80114ba:	9b08      	ldr	r3, [sp, #32]
 80114bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c0:	f7ef f8aa 	bl	8000618 <__aeabi_dmul>
 80114c4:	2301      	movs	r3, #1
 80114c6:	9a08      	ldr	r2, [sp, #32]
 80114c8:	3208      	adds	r2, #8
 80114ca:	3601      	adds	r6, #1
 80114cc:	1064      	asrs	r4, r4, #1
 80114ce:	9208      	str	r2, [sp, #32]
 80114d0:	e7cd      	b.n	801146e <_strtod_l+0x4d6>
 80114d2:	d0ed      	beq.n	80114b0 <_strtod_l+0x518>
 80114d4:	4264      	negs	r4, r4
 80114d6:	f014 020f 	ands.w	r2, r4, #15
 80114da:	d00a      	beq.n	80114f2 <_strtod_l+0x55a>
 80114dc:	4b12      	ldr	r3, [pc, #72]	@ (8011528 <_strtod_l+0x590>)
 80114de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80114e2:	4650      	mov	r0, sl
 80114e4:	4659      	mov	r1, fp
 80114e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ea:	f7ef f9bf 	bl	800086c <__aeabi_ddiv>
 80114ee:	4682      	mov	sl, r0
 80114f0:	468b      	mov	fp, r1
 80114f2:	1124      	asrs	r4, r4, #4
 80114f4:	d0dc      	beq.n	80114b0 <_strtod_l+0x518>
 80114f6:	2c1f      	cmp	r4, #31
 80114f8:	dd20      	ble.n	801153c <_strtod_l+0x5a4>
 80114fa:	2400      	movs	r4, #0
 80114fc:	46a0      	mov	r8, r4
 80114fe:	940a      	str	r4, [sp, #40]	@ 0x28
 8011500:	46a1      	mov	r9, r4
 8011502:	9a05      	ldr	r2, [sp, #20]
 8011504:	2322      	movs	r3, #34	@ 0x22
 8011506:	f04f 0a00 	mov.w	sl, #0
 801150a:	f04f 0b00 	mov.w	fp, #0
 801150e:	6013      	str	r3, [r2, #0]
 8011510:	e768      	b.n	80113e4 <_strtod_l+0x44c>
 8011512:	bf00      	nop
 8011514:	080148c2 	.word	0x080148c2
 8011518:	08014b6c 	.word	0x08014b6c
 801151c:	080148ba 	.word	0x080148ba
 8011520:	0801499c 	.word	0x0801499c
 8011524:	08014998 	.word	0x08014998
 8011528:	08014aa0 	.word	0x08014aa0
 801152c:	08014a78 	.word	0x08014a78
 8011530:	7ff00000 	.word	0x7ff00000
 8011534:	7ca00000 	.word	0x7ca00000
 8011538:	7fefffff 	.word	0x7fefffff
 801153c:	f014 0310 	ands.w	r3, r4, #16
 8011540:	bf18      	it	ne
 8011542:	236a      	movne	r3, #106	@ 0x6a
 8011544:	4ea9      	ldr	r6, [pc, #676]	@ (80117ec <_strtod_l+0x854>)
 8011546:	9308      	str	r3, [sp, #32]
 8011548:	4650      	mov	r0, sl
 801154a:	4659      	mov	r1, fp
 801154c:	2300      	movs	r3, #0
 801154e:	07e2      	lsls	r2, r4, #31
 8011550:	d504      	bpl.n	801155c <_strtod_l+0x5c4>
 8011552:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011556:	f7ef f85f 	bl	8000618 <__aeabi_dmul>
 801155a:	2301      	movs	r3, #1
 801155c:	1064      	asrs	r4, r4, #1
 801155e:	f106 0608 	add.w	r6, r6, #8
 8011562:	d1f4      	bne.n	801154e <_strtod_l+0x5b6>
 8011564:	b10b      	cbz	r3, 801156a <_strtod_l+0x5d2>
 8011566:	4682      	mov	sl, r0
 8011568:	468b      	mov	fp, r1
 801156a:	9b08      	ldr	r3, [sp, #32]
 801156c:	b1b3      	cbz	r3, 801159c <_strtod_l+0x604>
 801156e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011572:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011576:	2b00      	cmp	r3, #0
 8011578:	4659      	mov	r1, fp
 801157a:	dd0f      	ble.n	801159c <_strtod_l+0x604>
 801157c:	2b1f      	cmp	r3, #31
 801157e:	dd55      	ble.n	801162c <_strtod_l+0x694>
 8011580:	2b34      	cmp	r3, #52	@ 0x34
 8011582:	bfde      	ittt	le
 8011584:	f04f 33ff 	movle.w	r3, #4294967295
 8011588:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801158c:	4093      	lslle	r3, r2
 801158e:	f04f 0a00 	mov.w	sl, #0
 8011592:	bfcc      	ite	gt
 8011594:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011598:	ea03 0b01 	andle.w	fp, r3, r1
 801159c:	2200      	movs	r2, #0
 801159e:	2300      	movs	r3, #0
 80115a0:	4650      	mov	r0, sl
 80115a2:	4659      	mov	r1, fp
 80115a4:	f7ef faa0 	bl	8000ae8 <__aeabi_dcmpeq>
 80115a8:	2800      	cmp	r0, #0
 80115aa:	d1a6      	bne.n	80114fa <_strtod_l+0x562>
 80115ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115ae:	9300      	str	r3, [sp, #0]
 80115b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80115b2:	9805      	ldr	r0, [sp, #20]
 80115b4:	462b      	mov	r3, r5
 80115b6:	463a      	mov	r2, r7
 80115b8:	f7ff f8c4 	bl	8010744 <__s2b>
 80115bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80115be:	2800      	cmp	r0, #0
 80115c0:	f43f af05 	beq.w	80113ce <_strtod_l+0x436>
 80115c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115c6:	2a00      	cmp	r2, #0
 80115c8:	eba9 0308 	sub.w	r3, r9, r8
 80115cc:	bfa8      	it	ge
 80115ce:	2300      	movge	r3, #0
 80115d0:	9312      	str	r3, [sp, #72]	@ 0x48
 80115d2:	2400      	movs	r4, #0
 80115d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80115d8:	9316      	str	r3, [sp, #88]	@ 0x58
 80115da:	46a0      	mov	r8, r4
 80115dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115de:	9805      	ldr	r0, [sp, #20]
 80115e0:	6859      	ldr	r1, [r3, #4]
 80115e2:	f7ff f807 	bl	80105f4 <_Balloc>
 80115e6:	4681      	mov	r9, r0
 80115e8:	2800      	cmp	r0, #0
 80115ea:	f43f aef4 	beq.w	80113d6 <_strtod_l+0x43e>
 80115ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115f0:	691a      	ldr	r2, [r3, #16]
 80115f2:	3202      	adds	r2, #2
 80115f4:	f103 010c 	add.w	r1, r3, #12
 80115f8:	0092      	lsls	r2, r2, #2
 80115fa:	300c      	adds	r0, #12
 80115fc:	f7fe f92f 	bl	800f85e <memcpy>
 8011600:	ec4b ab10 	vmov	d0, sl, fp
 8011604:	9805      	ldr	r0, [sp, #20]
 8011606:	aa1c      	add	r2, sp, #112	@ 0x70
 8011608:	a91b      	add	r1, sp, #108	@ 0x6c
 801160a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801160e:	f7ff fbd5 	bl	8010dbc <__d2b>
 8011612:	901a      	str	r0, [sp, #104]	@ 0x68
 8011614:	2800      	cmp	r0, #0
 8011616:	f43f aede 	beq.w	80113d6 <_strtod_l+0x43e>
 801161a:	9805      	ldr	r0, [sp, #20]
 801161c:	2101      	movs	r1, #1
 801161e:	f7ff f927 	bl	8010870 <__i2b>
 8011622:	4680      	mov	r8, r0
 8011624:	b948      	cbnz	r0, 801163a <_strtod_l+0x6a2>
 8011626:	f04f 0800 	mov.w	r8, #0
 801162a:	e6d4      	b.n	80113d6 <_strtod_l+0x43e>
 801162c:	f04f 32ff 	mov.w	r2, #4294967295
 8011630:	fa02 f303 	lsl.w	r3, r2, r3
 8011634:	ea03 0a0a 	and.w	sl, r3, sl
 8011638:	e7b0      	b.n	801159c <_strtod_l+0x604>
 801163a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801163c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801163e:	2d00      	cmp	r5, #0
 8011640:	bfab      	itete	ge
 8011642:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011644:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011646:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011648:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801164a:	bfac      	ite	ge
 801164c:	18ef      	addge	r7, r5, r3
 801164e:	1b5e      	sublt	r6, r3, r5
 8011650:	9b08      	ldr	r3, [sp, #32]
 8011652:	1aed      	subs	r5, r5, r3
 8011654:	4415      	add	r5, r2
 8011656:	4b66      	ldr	r3, [pc, #408]	@ (80117f0 <_strtod_l+0x858>)
 8011658:	3d01      	subs	r5, #1
 801165a:	429d      	cmp	r5, r3
 801165c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011660:	da50      	bge.n	8011704 <_strtod_l+0x76c>
 8011662:	1b5b      	subs	r3, r3, r5
 8011664:	2b1f      	cmp	r3, #31
 8011666:	eba2 0203 	sub.w	r2, r2, r3
 801166a:	f04f 0101 	mov.w	r1, #1
 801166e:	dc3d      	bgt.n	80116ec <_strtod_l+0x754>
 8011670:	fa01 f303 	lsl.w	r3, r1, r3
 8011674:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011676:	2300      	movs	r3, #0
 8011678:	9310      	str	r3, [sp, #64]	@ 0x40
 801167a:	18bd      	adds	r5, r7, r2
 801167c:	9b08      	ldr	r3, [sp, #32]
 801167e:	42af      	cmp	r7, r5
 8011680:	4416      	add	r6, r2
 8011682:	441e      	add	r6, r3
 8011684:	463b      	mov	r3, r7
 8011686:	bfa8      	it	ge
 8011688:	462b      	movge	r3, r5
 801168a:	42b3      	cmp	r3, r6
 801168c:	bfa8      	it	ge
 801168e:	4633      	movge	r3, r6
 8011690:	2b00      	cmp	r3, #0
 8011692:	bfc2      	ittt	gt
 8011694:	1aed      	subgt	r5, r5, r3
 8011696:	1af6      	subgt	r6, r6, r3
 8011698:	1aff      	subgt	r7, r7, r3
 801169a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801169c:	2b00      	cmp	r3, #0
 801169e:	dd16      	ble.n	80116ce <_strtod_l+0x736>
 80116a0:	4641      	mov	r1, r8
 80116a2:	9805      	ldr	r0, [sp, #20]
 80116a4:	461a      	mov	r2, r3
 80116a6:	f7ff f9a3 	bl	80109f0 <__pow5mult>
 80116aa:	4680      	mov	r8, r0
 80116ac:	2800      	cmp	r0, #0
 80116ae:	d0ba      	beq.n	8011626 <_strtod_l+0x68e>
 80116b0:	4601      	mov	r1, r0
 80116b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80116b4:	9805      	ldr	r0, [sp, #20]
 80116b6:	f7ff f8f1 	bl	801089c <__multiply>
 80116ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80116bc:	2800      	cmp	r0, #0
 80116be:	f43f ae8a 	beq.w	80113d6 <_strtod_l+0x43e>
 80116c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80116c4:	9805      	ldr	r0, [sp, #20]
 80116c6:	f7fe ffd5 	bl	8010674 <_Bfree>
 80116ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80116cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80116ce:	2d00      	cmp	r5, #0
 80116d0:	dc1d      	bgt.n	801170e <_strtod_l+0x776>
 80116d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	dd23      	ble.n	8011720 <_strtod_l+0x788>
 80116d8:	4649      	mov	r1, r9
 80116da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80116dc:	9805      	ldr	r0, [sp, #20]
 80116de:	f7ff f987 	bl	80109f0 <__pow5mult>
 80116e2:	4681      	mov	r9, r0
 80116e4:	b9e0      	cbnz	r0, 8011720 <_strtod_l+0x788>
 80116e6:	f04f 0900 	mov.w	r9, #0
 80116ea:	e674      	b.n	80113d6 <_strtod_l+0x43e>
 80116ec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80116f0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80116f4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80116f8:	35e2      	adds	r5, #226	@ 0xe2
 80116fa:	fa01 f305 	lsl.w	r3, r1, r5
 80116fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8011700:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011702:	e7ba      	b.n	801167a <_strtod_l+0x6e2>
 8011704:	2300      	movs	r3, #0
 8011706:	9310      	str	r3, [sp, #64]	@ 0x40
 8011708:	2301      	movs	r3, #1
 801170a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801170c:	e7b5      	b.n	801167a <_strtod_l+0x6e2>
 801170e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011710:	9805      	ldr	r0, [sp, #20]
 8011712:	462a      	mov	r2, r5
 8011714:	f7ff f9c6 	bl	8010aa4 <__lshift>
 8011718:	901a      	str	r0, [sp, #104]	@ 0x68
 801171a:	2800      	cmp	r0, #0
 801171c:	d1d9      	bne.n	80116d2 <_strtod_l+0x73a>
 801171e:	e65a      	b.n	80113d6 <_strtod_l+0x43e>
 8011720:	2e00      	cmp	r6, #0
 8011722:	dd07      	ble.n	8011734 <_strtod_l+0x79c>
 8011724:	4649      	mov	r1, r9
 8011726:	9805      	ldr	r0, [sp, #20]
 8011728:	4632      	mov	r2, r6
 801172a:	f7ff f9bb 	bl	8010aa4 <__lshift>
 801172e:	4681      	mov	r9, r0
 8011730:	2800      	cmp	r0, #0
 8011732:	d0d8      	beq.n	80116e6 <_strtod_l+0x74e>
 8011734:	2f00      	cmp	r7, #0
 8011736:	dd08      	ble.n	801174a <_strtod_l+0x7b2>
 8011738:	4641      	mov	r1, r8
 801173a:	9805      	ldr	r0, [sp, #20]
 801173c:	463a      	mov	r2, r7
 801173e:	f7ff f9b1 	bl	8010aa4 <__lshift>
 8011742:	4680      	mov	r8, r0
 8011744:	2800      	cmp	r0, #0
 8011746:	f43f ae46 	beq.w	80113d6 <_strtod_l+0x43e>
 801174a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801174c:	9805      	ldr	r0, [sp, #20]
 801174e:	464a      	mov	r2, r9
 8011750:	f7ff fa30 	bl	8010bb4 <__mdiff>
 8011754:	4604      	mov	r4, r0
 8011756:	2800      	cmp	r0, #0
 8011758:	f43f ae3d 	beq.w	80113d6 <_strtod_l+0x43e>
 801175c:	68c3      	ldr	r3, [r0, #12]
 801175e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011760:	2300      	movs	r3, #0
 8011762:	60c3      	str	r3, [r0, #12]
 8011764:	4641      	mov	r1, r8
 8011766:	f7ff fa09 	bl	8010b7c <__mcmp>
 801176a:	2800      	cmp	r0, #0
 801176c:	da46      	bge.n	80117fc <_strtod_l+0x864>
 801176e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011770:	ea53 030a 	orrs.w	r3, r3, sl
 8011774:	d16c      	bne.n	8011850 <_strtod_l+0x8b8>
 8011776:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801177a:	2b00      	cmp	r3, #0
 801177c:	d168      	bne.n	8011850 <_strtod_l+0x8b8>
 801177e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011782:	0d1b      	lsrs	r3, r3, #20
 8011784:	051b      	lsls	r3, r3, #20
 8011786:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801178a:	d961      	bls.n	8011850 <_strtod_l+0x8b8>
 801178c:	6963      	ldr	r3, [r4, #20]
 801178e:	b913      	cbnz	r3, 8011796 <_strtod_l+0x7fe>
 8011790:	6923      	ldr	r3, [r4, #16]
 8011792:	2b01      	cmp	r3, #1
 8011794:	dd5c      	ble.n	8011850 <_strtod_l+0x8b8>
 8011796:	4621      	mov	r1, r4
 8011798:	2201      	movs	r2, #1
 801179a:	9805      	ldr	r0, [sp, #20]
 801179c:	f7ff f982 	bl	8010aa4 <__lshift>
 80117a0:	4641      	mov	r1, r8
 80117a2:	4604      	mov	r4, r0
 80117a4:	f7ff f9ea 	bl	8010b7c <__mcmp>
 80117a8:	2800      	cmp	r0, #0
 80117aa:	dd51      	ble.n	8011850 <_strtod_l+0x8b8>
 80117ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80117b0:	9a08      	ldr	r2, [sp, #32]
 80117b2:	0d1b      	lsrs	r3, r3, #20
 80117b4:	051b      	lsls	r3, r3, #20
 80117b6:	2a00      	cmp	r2, #0
 80117b8:	d06b      	beq.n	8011892 <_strtod_l+0x8fa>
 80117ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80117be:	d868      	bhi.n	8011892 <_strtod_l+0x8fa>
 80117c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80117c4:	f67f ae9d 	bls.w	8011502 <_strtod_l+0x56a>
 80117c8:	4b0a      	ldr	r3, [pc, #40]	@ (80117f4 <_strtod_l+0x85c>)
 80117ca:	4650      	mov	r0, sl
 80117cc:	4659      	mov	r1, fp
 80117ce:	2200      	movs	r2, #0
 80117d0:	f7ee ff22 	bl	8000618 <__aeabi_dmul>
 80117d4:	4b08      	ldr	r3, [pc, #32]	@ (80117f8 <_strtod_l+0x860>)
 80117d6:	400b      	ands	r3, r1
 80117d8:	4682      	mov	sl, r0
 80117da:	468b      	mov	fp, r1
 80117dc:	2b00      	cmp	r3, #0
 80117de:	f47f ae05 	bne.w	80113ec <_strtod_l+0x454>
 80117e2:	9a05      	ldr	r2, [sp, #20]
 80117e4:	2322      	movs	r3, #34	@ 0x22
 80117e6:	6013      	str	r3, [r2, #0]
 80117e8:	e600      	b.n	80113ec <_strtod_l+0x454>
 80117ea:	bf00      	nop
 80117ec:	08014b98 	.word	0x08014b98
 80117f0:	fffffc02 	.word	0xfffffc02
 80117f4:	39500000 	.word	0x39500000
 80117f8:	7ff00000 	.word	0x7ff00000
 80117fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011800:	d165      	bne.n	80118ce <_strtod_l+0x936>
 8011802:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011804:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011808:	b35a      	cbz	r2, 8011862 <_strtod_l+0x8ca>
 801180a:	4a9f      	ldr	r2, [pc, #636]	@ (8011a88 <_strtod_l+0xaf0>)
 801180c:	4293      	cmp	r3, r2
 801180e:	d12b      	bne.n	8011868 <_strtod_l+0x8d0>
 8011810:	9b08      	ldr	r3, [sp, #32]
 8011812:	4651      	mov	r1, sl
 8011814:	b303      	cbz	r3, 8011858 <_strtod_l+0x8c0>
 8011816:	4b9d      	ldr	r3, [pc, #628]	@ (8011a8c <_strtod_l+0xaf4>)
 8011818:	465a      	mov	r2, fp
 801181a:	4013      	ands	r3, r2
 801181c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011820:	f04f 32ff 	mov.w	r2, #4294967295
 8011824:	d81b      	bhi.n	801185e <_strtod_l+0x8c6>
 8011826:	0d1b      	lsrs	r3, r3, #20
 8011828:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801182c:	fa02 f303 	lsl.w	r3, r2, r3
 8011830:	4299      	cmp	r1, r3
 8011832:	d119      	bne.n	8011868 <_strtod_l+0x8d0>
 8011834:	4b96      	ldr	r3, [pc, #600]	@ (8011a90 <_strtod_l+0xaf8>)
 8011836:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011838:	429a      	cmp	r2, r3
 801183a:	d102      	bne.n	8011842 <_strtod_l+0x8aa>
 801183c:	3101      	adds	r1, #1
 801183e:	f43f adca 	beq.w	80113d6 <_strtod_l+0x43e>
 8011842:	4b92      	ldr	r3, [pc, #584]	@ (8011a8c <_strtod_l+0xaf4>)
 8011844:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011846:	401a      	ands	r2, r3
 8011848:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801184c:	f04f 0a00 	mov.w	sl, #0
 8011850:	9b08      	ldr	r3, [sp, #32]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d1b8      	bne.n	80117c8 <_strtod_l+0x830>
 8011856:	e5c9      	b.n	80113ec <_strtod_l+0x454>
 8011858:	f04f 33ff 	mov.w	r3, #4294967295
 801185c:	e7e8      	b.n	8011830 <_strtod_l+0x898>
 801185e:	4613      	mov	r3, r2
 8011860:	e7e6      	b.n	8011830 <_strtod_l+0x898>
 8011862:	ea53 030a 	orrs.w	r3, r3, sl
 8011866:	d0a1      	beq.n	80117ac <_strtod_l+0x814>
 8011868:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801186a:	b1db      	cbz	r3, 80118a4 <_strtod_l+0x90c>
 801186c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801186e:	4213      	tst	r3, r2
 8011870:	d0ee      	beq.n	8011850 <_strtod_l+0x8b8>
 8011872:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011874:	9a08      	ldr	r2, [sp, #32]
 8011876:	4650      	mov	r0, sl
 8011878:	4659      	mov	r1, fp
 801187a:	b1bb      	cbz	r3, 80118ac <_strtod_l+0x914>
 801187c:	f7ff fb6c 	bl	8010f58 <sulp>
 8011880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011884:	ec53 2b10 	vmov	r2, r3, d0
 8011888:	f7ee fd10 	bl	80002ac <__adddf3>
 801188c:	4682      	mov	sl, r0
 801188e:	468b      	mov	fp, r1
 8011890:	e7de      	b.n	8011850 <_strtod_l+0x8b8>
 8011892:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011896:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801189a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801189e:	f04f 3aff 	mov.w	sl, #4294967295
 80118a2:	e7d5      	b.n	8011850 <_strtod_l+0x8b8>
 80118a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80118a6:	ea13 0f0a 	tst.w	r3, sl
 80118aa:	e7e1      	b.n	8011870 <_strtod_l+0x8d8>
 80118ac:	f7ff fb54 	bl	8010f58 <sulp>
 80118b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80118b4:	ec53 2b10 	vmov	r2, r3, d0
 80118b8:	f7ee fcf6 	bl	80002a8 <__aeabi_dsub>
 80118bc:	2200      	movs	r2, #0
 80118be:	2300      	movs	r3, #0
 80118c0:	4682      	mov	sl, r0
 80118c2:	468b      	mov	fp, r1
 80118c4:	f7ef f910 	bl	8000ae8 <__aeabi_dcmpeq>
 80118c8:	2800      	cmp	r0, #0
 80118ca:	d0c1      	beq.n	8011850 <_strtod_l+0x8b8>
 80118cc:	e619      	b.n	8011502 <_strtod_l+0x56a>
 80118ce:	4641      	mov	r1, r8
 80118d0:	4620      	mov	r0, r4
 80118d2:	f7ff facb 	bl	8010e6c <__ratio>
 80118d6:	ec57 6b10 	vmov	r6, r7, d0
 80118da:	2200      	movs	r2, #0
 80118dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80118e0:	4630      	mov	r0, r6
 80118e2:	4639      	mov	r1, r7
 80118e4:	f7ef f914 	bl	8000b10 <__aeabi_dcmple>
 80118e8:	2800      	cmp	r0, #0
 80118ea:	d06f      	beq.n	80119cc <_strtod_l+0xa34>
 80118ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d17a      	bne.n	80119e8 <_strtod_l+0xa50>
 80118f2:	f1ba 0f00 	cmp.w	sl, #0
 80118f6:	d158      	bne.n	80119aa <_strtod_l+0xa12>
 80118f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d15a      	bne.n	80119b8 <_strtod_l+0xa20>
 8011902:	4b64      	ldr	r3, [pc, #400]	@ (8011a94 <_strtod_l+0xafc>)
 8011904:	2200      	movs	r2, #0
 8011906:	4630      	mov	r0, r6
 8011908:	4639      	mov	r1, r7
 801190a:	f7ef f8f7 	bl	8000afc <__aeabi_dcmplt>
 801190e:	2800      	cmp	r0, #0
 8011910:	d159      	bne.n	80119c6 <_strtod_l+0xa2e>
 8011912:	4630      	mov	r0, r6
 8011914:	4639      	mov	r1, r7
 8011916:	4b60      	ldr	r3, [pc, #384]	@ (8011a98 <_strtod_l+0xb00>)
 8011918:	2200      	movs	r2, #0
 801191a:	f7ee fe7d 	bl	8000618 <__aeabi_dmul>
 801191e:	4606      	mov	r6, r0
 8011920:	460f      	mov	r7, r1
 8011922:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011926:	9606      	str	r6, [sp, #24]
 8011928:	9307      	str	r3, [sp, #28]
 801192a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801192e:	4d57      	ldr	r5, [pc, #348]	@ (8011a8c <_strtod_l+0xaf4>)
 8011930:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011934:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011936:	401d      	ands	r5, r3
 8011938:	4b58      	ldr	r3, [pc, #352]	@ (8011a9c <_strtod_l+0xb04>)
 801193a:	429d      	cmp	r5, r3
 801193c:	f040 80b2 	bne.w	8011aa4 <_strtod_l+0xb0c>
 8011940:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011942:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011946:	ec4b ab10 	vmov	d0, sl, fp
 801194a:	f7ff f9c7 	bl	8010cdc <__ulp>
 801194e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011952:	ec51 0b10 	vmov	r0, r1, d0
 8011956:	f7ee fe5f 	bl	8000618 <__aeabi_dmul>
 801195a:	4652      	mov	r2, sl
 801195c:	465b      	mov	r3, fp
 801195e:	f7ee fca5 	bl	80002ac <__adddf3>
 8011962:	460b      	mov	r3, r1
 8011964:	4949      	ldr	r1, [pc, #292]	@ (8011a8c <_strtod_l+0xaf4>)
 8011966:	4a4e      	ldr	r2, [pc, #312]	@ (8011aa0 <_strtod_l+0xb08>)
 8011968:	4019      	ands	r1, r3
 801196a:	4291      	cmp	r1, r2
 801196c:	4682      	mov	sl, r0
 801196e:	d942      	bls.n	80119f6 <_strtod_l+0xa5e>
 8011970:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011972:	4b47      	ldr	r3, [pc, #284]	@ (8011a90 <_strtod_l+0xaf8>)
 8011974:	429a      	cmp	r2, r3
 8011976:	d103      	bne.n	8011980 <_strtod_l+0x9e8>
 8011978:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801197a:	3301      	adds	r3, #1
 801197c:	f43f ad2b 	beq.w	80113d6 <_strtod_l+0x43e>
 8011980:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011a90 <_strtod_l+0xaf8>
 8011984:	f04f 3aff 	mov.w	sl, #4294967295
 8011988:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801198a:	9805      	ldr	r0, [sp, #20]
 801198c:	f7fe fe72 	bl	8010674 <_Bfree>
 8011990:	9805      	ldr	r0, [sp, #20]
 8011992:	4649      	mov	r1, r9
 8011994:	f7fe fe6e 	bl	8010674 <_Bfree>
 8011998:	9805      	ldr	r0, [sp, #20]
 801199a:	4641      	mov	r1, r8
 801199c:	f7fe fe6a 	bl	8010674 <_Bfree>
 80119a0:	9805      	ldr	r0, [sp, #20]
 80119a2:	4621      	mov	r1, r4
 80119a4:	f7fe fe66 	bl	8010674 <_Bfree>
 80119a8:	e618      	b.n	80115dc <_strtod_l+0x644>
 80119aa:	f1ba 0f01 	cmp.w	sl, #1
 80119ae:	d103      	bne.n	80119b8 <_strtod_l+0xa20>
 80119b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	f43f ada5 	beq.w	8011502 <_strtod_l+0x56a>
 80119b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011a68 <_strtod_l+0xad0>
 80119bc:	4f35      	ldr	r7, [pc, #212]	@ (8011a94 <_strtod_l+0xafc>)
 80119be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80119c2:	2600      	movs	r6, #0
 80119c4:	e7b1      	b.n	801192a <_strtod_l+0x992>
 80119c6:	4f34      	ldr	r7, [pc, #208]	@ (8011a98 <_strtod_l+0xb00>)
 80119c8:	2600      	movs	r6, #0
 80119ca:	e7aa      	b.n	8011922 <_strtod_l+0x98a>
 80119cc:	4b32      	ldr	r3, [pc, #200]	@ (8011a98 <_strtod_l+0xb00>)
 80119ce:	4630      	mov	r0, r6
 80119d0:	4639      	mov	r1, r7
 80119d2:	2200      	movs	r2, #0
 80119d4:	f7ee fe20 	bl	8000618 <__aeabi_dmul>
 80119d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80119da:	4606      	mov	r6, r0
 80119dc:	460f      	mov	r7, r1
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d09f      	beq.n	8011922 <_strtod_l+0x98a>
 80119e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80119e6:	e7a0      	b.n	801192a <_strtod_l+0x992>
 80119e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011a70 <_strtod_l+0xad8>
 80119ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80119f0:	ec57 6b17 	vmov	r6, r7, d7
 80119f4:	e799      	b.n	801192a <_strtod_l+0x992>
 80119f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80119fa:	9b08      	ldr	r3, [sp, #32]
 80119fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d1c1      	bne.n	8011988 <_strtod_l+0x9f0>
 8011a04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011a08:	0d1b      	lsrs	r3, r3, #20
 8011a0a:	051b      	lsls	r3, r3, #20
 8011a0c:	429d      	cmp	r5, r3
 8011a0e:	d1bb      	bne.n	8011988 <_strtod_l+0x9f0>
 8011a10:	4630      	mov	r0, r6
 8011a12:	4639      	mov	r1, r7
 8011a14:	f7ef f960 	bl	8000cd8 <__aeabi_d2lz>
 8011a18:	f7ee fdd0 	bl	80005bc <__aeabi_l2d>
 8011a1c:	4602      	mov	r2, r0
 8011a1e:	460b      	mov	r3, r1
 8011a20:	4630      	mov	r0, r6
 8011a22:	4639      	mov	r1, r7
 8011a24:	f7ee fc40 	bl	80002a8 <__aeabi_dsub>
 8011a28:	460b      	mov	r3, r1
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011a30:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a36:	ea46 060a 	orr.w	r6, r6, sl
 8011a3a:	431e      	orrs	r6, r3
 8011a3c:	d06f      	beq.n	8011b1e <_strtod_l+0xb86>
 8011a3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011a78 <_strtod_l+0xae0>)
 8011a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a44:	f7ef f85a 	bl	8000afc <__aeabi_dcmplt>
 8011a48:	2800      	cmp	r0, #0
 8011a4a:	f47f accf 	bne.w	80113ec <_strtod_l+0x454>
 8011a4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8011a80 <_strtod_l+0xae8>)
 8011a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011a58:	f7ef f86e 	bl	8000b38 <__aeabi_dcmpgt>
 8011a5c:	2800      	cmp	r0, #0
 8011a5e:	d093      	beq.n	8011988 <_strtod_l+0x9f0>
 8011a60:	e4c4      	b.n	80113ec <_strtod_l+0x454>
 8011a62:	bf00      	nop
 8011a64:	f3af 8000 	nop.w
 8011a68:	00000000 	.word	0x00000000
 8011a6c:	bff00000 	.word	0xbff00000
 8011a70:	00000000 	.word	0x00000000
 8011a74:	3ff00000 	.word	0x3ff00000
 8011a78:	94a03595 	.word	0x94a03595
 8011a7c:	3fdfffff 	.word	0x3fdfffff
 8011a80:	35afe535 	.word	0x35afe535
 8011a84:	3fe00000 	.word	0x3fe00000
 8011a88:	000fffff 	.word	0x000fffff
 8011a8c:	7ff00000 	.word	0x7ff00000
 8011a90:	7fefffff 	.word	0x7fefffff
 8011a94:	3ff00000 	.word	0x3ff00000
 8011a98:	3fe00000 	.word	0x3fe00000
 8011a9c:	7fe00000 	.word	0x7fe00000
 8011aa0:	7c9fffff 	.word	0x7c9fffff
 8011aa4:	9b08      	ldr	r3, [sp, #32]
 8011aa6:	b323      	cbz	r3, 8011af2 <_strtod_l+0xb5a>
 8011aa8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011aac:	d821      	bhi.n	8011af2 <_strtod_l+0xb5a>
 8011aae:	a328      	add	r3, pc, #160	@ (adr r3, 8011b50 <_strtod_l+0xbb8>)
 8011ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab4:	4630      	mov	r0, r6
 8011ab6:	4639      	mov	r1, r7
 8011ab8:	f7ef f82a 	bl	8000b10 <__aeabi_dcmple>
 8011abc:	b1a0      	cbz	r0, 8011ae8 <_strtod_l+0xb50>
 8011abe:	4639      	mov	r1, r7
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	f7ef f881 	bl	8000bc8 <__aeabi_d2uiz>
 8011ac6:	2801      	cmp	r0, #1
 8011ac8:	bf38      	it	cc
 8011aca:	2001      	movcc	r0, #1
 8011acc:	f7ee fd2a 	bl	8000524 <__aeabi_ui2d>
 8011ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ad2:	4606      	mov	r6, r0
 8011ad4:	460f      	mov	r7, r1
 8011ad6:	b9fb      	cbnz	r3, 8011b18 <_strtod_l+0xb80>
 8011ad8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011adc:	9014      	str	r0, [sp, #80]	@ 0x50
 8011ade:	9315      	str	r3, [sp, #84]	@ 0x54
 8011ae0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011ae4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011ae8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011aea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011aee:	1b5b      	subs	r3, r3, r5
 8011af0:	9311      	str	r3, [sp, #68]	@ 0x44
 8011af2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011af6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011afa:	f7ff f8ef 	bl	8010cdc <__ulp>
 8011afe:	4650      	mov	r0, sl
 8011b00:	ec53 2b10 	vmov	r2, r3, d0
 8011b04:	4659      	mov	r1, fp
 8011b06:	f7ee fd87 	bl	8000618 <__aeabi_dmul>
 8011b0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011b0e:	f7ee fbcd 	bl	80002ac <__adddf3>
 8011b12:	4682      	mov	sl, r0
 8011b14:	468b      	mov	fp, r1
 8011b16:	e770      	b.n	80119fa <_strtod_l+0xa62>
 8011b18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011b1c:	e7e0      	b.n	8011ae0 <_strtod_l+0xb48>
 8011b1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011b58 <_strtod_l+0xbc0>)
 8011b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b24:	f7ee ffea 	bl	8000afc <__aeabi_dcmplt>
 8011b28:	e798      	b.n	8011a5c <_strtod_l+0xac4>
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011b30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011b32:	6013      	str	r3, [r2, #0]
 8011b34:	f7ff ba6d 	b.w	8011012 <_strtod_l+0x7a>
 8011b38:	2a65      	cmp	r2, #101	@ 0x65
 8011b3a:	f43f ab66 	beq.w	801120a <_strtod_l+0x272>
 8011b3e:	2a45      	cmp	r2, #69	@ 0x45
 8011b40:	f43f ab63 	beq.w	801120a <_strtod_l+0x272>
 8011b44:	2301      	movs	r3, #1
 8011b46:	f7ff bb9e 	b.w	8011286 <_strtod_l+0x2ee>
 8011b4a:	bf00      	nop
 8011b4c:	f3af 8000 	nop.w
 8011b50:	ffc00000 	.word	0xffc00000
 8011b54:	41dfffff 	.word	0x41dfffff
 8011b58:	94a03595 	.word	0x94a03595
 8011b5c:	3fcfffff 	.word	0x3fcfffff

08011b60 <_strtod_r>:
 8011b60:	4b01      	ldr	r3, [pc, #4]	@ (8011b68 <_strtod_r+0x8>)
 8011b62:	f7ff ba19 	b.w	8010f98 <_strtod_l>
 8011b66:	bf00      	nop
 8011b68:	20000114 	.word	0x20000114

08011b6c <_strtol_l.constprop.0>:
 8011b6c:	2b24      	cmp	r3, #36	@ 0x24
 8011b6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b72:	4686      	mov	lr, r0
 8011b74:	4690      	mov	r8, r2
 8011b76:	d801      	bhi.n	8011b7c <_strtol_l.constprop.0+0x10>
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	d106      	bne.n	8011b8a <_strtol_l.constprop.0+0x1e>
 8011b7c:	f7fd fe42 	bl	800f804 <__errno>
 8011b80:	2316      	movs	r3, #22
 8011b82:	6003      	str	r3, [r0, #0]
 8011b84:	2000      	movs	r0, #0
 8011b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b8a:	4834      	ldr	r0, [pc, #208]	@ (8011c5c <_strtol_l.constprop.0+0xf0>)
 8011b8c:	460d      	mov	r5, r1
 8011b8e:	462a      	mov	r2, r5
 8011b90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b94:	5d06      	ldrb	r6, [r0, r4]
 8011b96:	f016 0608 	ands.w	r6, r6, #8
 8011b9a:	d1f8      	bne.n	8011b8e <_strtol_l.constprop.0+0x22>
 8011b9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8011b9e:	d12d      	bne.n	8011bfc <_strtol_l.constprop.0+0x90>
 8011ba0:	782c      	ldrb	r4, [r5, #0]
 8011ba2:	2601      	movs	r6, #1
 8011ba4:	1c95      	adds	r5, r2, #2
 8011ba6:	f033 0210 	bics.w	r2, r3, #16
 8011baa:	d109      	bne.n	8011bc0 <_strtol_l.constprop.0+0x54>
 8011bac:	2c30      	cmp	r4, #48	@ 0x30
 8011bae:	d12a      	bne.n	8011c06 <_strtol_l.constprop.0+0x9a>
 8011bb0:	782a      	ldrb	r2, [r5, #0]
 8011bb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011bb6:	2a58      	cmp	r2, #88	@ 0x58
 8011bb8:	d125      	bne.n	8011c06 <_strtol_l.constprop.0+0x9a>
 8011bba:	786c      	ldrb	r4, [r5, #1]
 8011bbc:	2310      	movs	r3, #16
 8011bbe:	3502      	adds	r5, #2
 8011bc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011bc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011bc8:	2200      	movs	r2, #0
 8011bca:	fbbc f9f3 	udiv	r9, ip, r3
 8011bce:	4610      	mov	r0, r2
 8011bd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8011bd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011bd8:	2f09      	cmp	r7, #9
 8011bda:	d81b      	bhi.n	8011c14 <_strtol_l.constprop.0+0xa8>
 8011bdc:	463c      	mov	r4, r7
 8011bde:	42a3      	cmp	r3, r4
 8011be0:	dd27      	ble.n	8011c32 <_strtol_l.constprop.0+0xc6>
 8011be2:	1c57      	adds	r7, r2, #1
 8011be4:	d007      	beq.n	8011bf6 <_strtol_l.constprop.0+0x8a>
 8011be6:	4581      	cmp	r9, r0
 8011be8:	d320      	bcc.n	8011c2c <_strtol_l.constprop.0+0xc0>
 8011bea:	d101      	bne.n	8011bf0 <_strtol_l.constprop.0+0x84>
 8011bec:	45a2      	cmp	sl, r4
 8011bee:	db1d      	blt.n	8011c2c <_strtol_l.constprop.0+0xc0>
 8011bf0:	fb00 4003 	mla	r0, r0, r3, r4
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011bfa:	e7eb      	b.n	8011bd4 <_strtol_l.constprop.0+0x68>
 8011bfc:	2c2b      	cmp	r4, #43	@ 0x2b
 8011bfe:	bf04      	itt	eq
 8011c00:	782c      	ldrbeq	r4, [r5, #0]
 8011c02:	1c95      	addeq	r5, r2, #2
 8011c04:	e7cf      	b.n	8011ba6 <_strtol_l.constprop.0+0x3a>
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d1da      	bne.n	8011bc0 <_strtol_l.constprop.0+0x54>
 8011c0a:	2c30      	cmp	r4, #48	@ 0x30
 8011c0c:	bf0c      	ite	eq
 8011c0e:	2308      	moveq	r3, #8
 8011c10:	230a      	movne	r3, #10
 8011c12:	e7d5      	b.n	8011bc0 <_strtol_l.constprop.0+0x54>
 8011c14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011c18:	2f19      	cmp	r7, #25
 8011c1a:	d801      	bhi.n	8011c20 <_strtol_l.constprop.0+0xb4>
 8011c1c:	3c37      	subs	r4, #55	@ 0x37
 8011c1e:	e7de      	b.n	8011bde <_strtol_l.constprop.0+0x72>
 8011c20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011c24:	2f19      	cmp	r7, #25
 8011c26:	d804      	bhi.n	8011c32 <_strtol_l.constprop.0+0xc6>
 8011c28:	3c57      	subs	r4, #87	@ 0x57
 8011c2a:	e7d8      	b.n	8011bde <_strtol_l.constprop.0+0x72>
 8011c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011c30:	e7e1      	b.n	8011bf6 <_strtol_l.constprop.0+0x8a>
 8011c32:	1c53      	adds	r3, r2, #1
 8011c34:	d108      	bne.n	8011c48 <_strtol_l.constprop.0+0xdc>
 8011c36:	2322      	movs	r3, #34	@ 0x22
 8011c38:	f8ce 3000 	str.w	r3, [lr]
 8011c3c:	4660      	mov	r0, ip
 8011c3e:	f1b8 0f00 	cmp.w	r8, #0
 8011c42:	d0a0      	beq.n	8011b86 <_strtol_l.constprop.0+0x1a>
 8011c44:	1e69      	subs	r1, r5, #1
 8011c46:	e006      	b.n	8011c56 <_strtol_l.constprop.0+0xea>
 8011c48:	b106      	cbz	r6, 8011c4c <_strtol_l.constprop.0+0xe0>
 8011c4a:	4240      	negs	r0, r0
 8011c4c:	f1b8 0f00 	cmp.w	r8, #0
 8011c50:	d099      	beq.n	8011b86 <_strtol_l.constprop.0+0x1a>
 8011c52:	2a00      	cmp	r2, #0
 8011c54:	d1f6      	bne.n	8011c44 <_strtol_l.constprop.0+0xd8>
 8011c56:	f8c8 1000 	str.w	r1, [r8]
 8011c5a:	e794      	b.n	8011b86 <_strtol_l.constprop.0+0x1a>
 8011c5c:	08014bc1 	.word	0x08014bc1

08011c60 <_strtol_r>:
 8011c60:	f7ff bf84 	b.w	8011b6c <_strtol_l.constprop.0>

08011c64 <__ssputs_r>:
 8011c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c68:	688e      	ldr	r6, [r1, #8]
 8011c6a:	461f      	mov	r7, r3
 8011c6c:	42be      	cmp	r6, r7
 8011c6e:	680b      	ldr	r3, [r1, #0]
 8011c70:	4682      	mov	sl, r0
 8011c72:	460c      	mov	r4, r1
 8011c74:	4690      	mov	r8, r2
 8011c76:	d82d      	bhi.n	8011cd4 <__ssputs_r+0x70>
 8011c78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011c80:	d026      	beq.n	8011cd0 <__ssputs_r+0x6c>
 8011c82:	6965      	ldr	r5, [r4, #20]
 8011c84:	6909      	ldr	r1, [r1, #16]
 8011c86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c8a:	eba3 0901 	sub.w	r9, r3, r1
 8011c8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011c92:	1c7b      	adds	r3, r7, #1
 8011c94:	444b      	add	r3, r9
 8011c96:	106d      	asrs	r5, r5, #1
 8011c98:	429d      	cmp	r5, r3
 8011c9a:	bf38      	it	cc
 8011c9c:	461d      	movcc	r5, r3
 8011c9e:	0553      	lsls	r3, r2, #21
 8011ca0:	d527      	bpl.n	8011cf2 <__ssputs_r+0x8e>
 8011ca2:	4629      	mov	r1, r5
 8011ca4:	f7fc fbfc 	bl	800e4a0 <_malloc_r>
 8011ca8:	4606      	mov	r6, r0
 8011caa:	b360      	cbz	r0, 8011d06 <__ssputs_r+0xa2>
 8011cac:	6921      	ldr	r1, [r4, #16]
 8011cae:	464a      	mov	r2, r9
 8011cb0:	f7fd fdd5 	bl	800f85e <memcpy>
 8011cb4:	89a3      	ldrh	r3, [r4, #12]
 8011cb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cbe:	81a3      	strh	r3, [r4, #12]
 8011cc0:	6126      	str	r6, [r4, #16]
 8011cc2:	6165      	str	r5, [r4, #20]
 8011cc4:	444e      	add	r6, r9
 8011cc6:	eba5 0509 	sub.w	r5, r5, r9
 8011cca:	6026      	str	r6, [r4, #0]
 8011ccc:	60a5      	str	r5, [r4, #8]
 8011cce:	463e      	mov	r6, r7
 8011cd0:	42be      	cmp	r6, r7
 8011cd2:	d900      	bls.n	8011cd6 <__ssputs_r+0x72>
 8011cd4:	463e      	mov	r6, r7
 8011cd6:	6820      	ldr	r0, [r4, #0]
 8011cd8:	4632      	mov	r2, r6
 8011cda:	4641      	mov	r1, r8
 8011cdc:	f000 fd65 	bl	80127aa <memmove>
 8011ce0:	68a3      	ldr	r3, [r4, #8]
 8011ce2:	1b9b      	subs	r3, r3, r6
 8011ce4:	60a3      	str	r3, [r4, #8]
 8011ce6:	6823      	ldr	r3, [r4, #0]
 8011ce8:	4433      	add	r3, r6
 8011cea:	6023      	str	r3, [r4, #0]
 8011cec:	2000      	movs	r0, #0
 8011cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cf2:	462a      	mov	r2, r5
 8011cf4:	f001 f8e1 	bl	8012eba <_realloc_r>
 8011cf8:	4606      	mov	r6, r0
 8011cfa:	2800      	cmp	r0, #0
 8011cfc:	d1e0      	bne.n	8011cc0 <__ssputs_r+0x5c>
 8011cfe:	6921      	ldr	r1, [r4, #16]
 8011d00:	4650      	mov	r0, sl
 8011d02:	f7fe fc2d 	bl	8010560 <_free_r>
 8011d06:	230c      	movs	r3, #12
 8011d08:	f8ca 3000 	str.w	r3, [sl]
 8011d0c:	89a3      	ldrh	r3, [r4, #12]
 8011d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d12:	81a3      	strh	r3, [r4, #12]
 8011d14:	f04f 30ff 	mov.w	r0, #4294967295
 8011d18:	e7e9      	b.n	8011cee <__ssputs_r+0x8a>
	...

08011d1c <_svfiprintf_r>:
 8011d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d20:	4698      	mov	r8, r3
 8011d22:	898b      	ldrh	r3, [r1, #12]
 8011d24:	061b      	lsls	r3, r3, #24
 8011d26:	b09d      	sub	sp, #116	@ 0x74
 8011d28:	4607      	mov	r7, r0
 8011d2a:	460d      	mov	r5, r1
 8011d2c:	4614      	mov	r4, r2
 8011d2e:	d510      	bpl.n	8011d52 <_svfiprintf_r+0x36>
 8011d30:	690b      	ldr	r3, [r1, #16]
 8011d32:	b973      	cbnz	r3, 8011d52 <_svfiprintf_r+0x36>
 8011d34:	2140      	movs	r1, #64	@ 0x40
 8011d36:	f7fc fbb3 	bl	800e4a0 <_malloc_r>
 8011d3a:	6028      	str	r0, [r5, #0]
 8011d3c:	6128      	str	r0, [r5, #16]
 8011d3e:	b930      	cbnz	r0, 8011d4e <_svfiprintf_r+0x32>
 8011d40:	230c      	movs	r3, #12
 8011d42:	603b      	str	r3, [r7, #0]
 8011d44:	f04f 30ff 	mov.w	r0, #4294967295
 8011d48:	b01d      	add	sp, #116	@ 0x74
 8011d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d4e:	2340      	movs	r3, #64	@ 0x40
 8011d50:	616b      	str	r3, [r5, #20]
 8011d52:	2300      	movs	r3, #0
 8011d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d56:	2320      	movs	r3, #32
 8011d58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011d5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d60:	2330      	movs	r3, #48	@ 0x30
 8011d62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011f00 <_svfiprintf_r+0x1e4>
 8011d66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011d6a:	f04f 0901 	mov.w	r9, #1
 8011d6e:	4623      	mov	r3, r4
 8011d70:	469a      	mov	sl, r3
 8011d72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d76:	b10a      	cbz	r2, 8011d7c <_svfiprintf_r+0x60>
 8011d78:	2a25      	cmp	r2, #37	@ 0x25
 8011d7a:	d1f9      	bne.n	8011d70 <_svfiprintf_r+0x54>
 8011d7c:	ebba 0b04 	subs.w	fp, sl, r4
 8011d80:	d00b      	beq.n	8011d9a <_svfiprintf_r+0x7e>
 8011d82:	465b      	mov	r3, fp
 8011d84:	4622      	mov	r2, r4
 8011d86:	4629      	mov	r1, r5
 8011d88:	4638      	mov	r0, r7
 8011d8a:	f7ff ff6b 	bl	8011c64 <__ssputs_r>
 8011d8e:	3001      	adds	r0, #1
 8011d90:	f000 80a7 	beq.w	8011ee2 <_svfiprintf_r+0x1c6>
 8011d94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d96:	445a      	add	r2, fp
 8011d98:	9209      	str	r2, [sp, #36]	@ 0x24
 8011d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f000 809f 	beq.w	8011ee2 <_svfiprintf_r+0x1c6>
 8011da4:	2300      	movs	r3, #0
 8011da6:	f04f 32ff 	mov.w	r2, #4294967295
 8011daa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dae:	f10a 0a01 	add.w	sl, sl, #1
 8011db2:	9304      	str	r3, [sp, #16]
 8011db4:	9307      	str	r3, [sp, #28]
 8011db6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011dba:	931a      	str	r3, [sp, #104]	@ 0x68
 8011dbc:	4654      	mov	r4, sl
 8011dbe:	2205      	movs	r2, #5
 8011dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dc4:	484e      	ldr	r0, [pc, #312]	@ (8011f00 <_svfiprintf_r+0x1e4>)
 8011dc6:	f7ee fa13 	bl	80001f0 <memchr>
 8011dca:	9a04      	ldr	r2, [sp, #16]
 8011dcc:	b9d8      	cbnz	r0, 8011e06 <_svfiprintf_r+0xea>
 8011dce:	06d0      	lsls	r0, r2, #27
 8011dd0:	bf44      	itt	mi
 8011dd2:	2320      	movmi	r3, #32
 8011dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011dd8:	0711      	lsls	r1, r2, #28
 8011dda:	bf44      	itt	mi
 8011ddc:	232b      	movmi	r3, #43	@ 0x2b
 8011dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011de2:	f89a 3000 	ldrb.w	r3, [sl]
 8011de6:	2b2a      	cmp	r3, #42	@ 0x2a
 8011de8:	d015      	beq.n	8011e16 <_svfiprintf_r+0xfa>
 8011dea:	9a07      	ldr	r2, [sp, #28]
 8011dec:	4654      	mov	r4, sl
 8011dee:	2000      	movs	r0, #0
 8011df0:	f04f 0c0a 	mov.w	ip, #10
 8011df4:	4621      	mov	r1, r4
 8011df6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dfa:	3b30      	subs	r3, #48	@ 0x30
 8011dfc:	2b09      	cmp	r3, #9
 8011dfe:	d94b      	bls.n	8011e98 <_svfiprintf_r+0x17c>
 8011e00:	b1b0      	cbz	r0, 8011e30 <_svfiprintf_r+0x114>
 8011e02:	9207      	str	r2, [sp, #28]
 8011e04:	e014      	b.n	8011e30 <_svfiprintf_r+0x114>
 8011e06:	eba0 0308 	sub.w	r3, r0, r8
 8011e0a:	fa09 f303 	lsl.w	r3, r9, r3
 8011e0e:	4313      	orrs	r3, r2
 8011e10:	9304      	str	r3, [sp, #16]
 8011e12:	46a2      	mov	sl, r4
 8011e14:	e7d2      	b.n	8011dbc <_svfiprintf_r+0xa0>
 8011e16:	9b03      	ldr	r3, [sp, #12]
 8011e18:	1d19      	adds	r1, r3, #4
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	9103      	str	r1, [sp, #12]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	bfbb      	ittet	lt
 8011e22:	425b      	neglt	r3, r3
 8011e24:	f042 0202 	orrlt.w	r2, r2, #2
 8011e28:	9307      	strge	r3, [sp, #28]
 8011e2a:	9307      	strlt	r3, [sp, #28]
 8011e2c:	bfb8      	it	lt
 8011e2e:	9204      	strlt	r2, [sp, #16]
 8011e30:	7823      	ldrb	r3, [r4, #0]
 8011e32:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e34:	d10a      	bne.n	8011e4c <_svfiprintf_r+0x130>
 8011e36:	7863      	ldrb	r3, [r4, #1]
 8011e38:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e3a:	d132      	bne.n	8011ea2 <_svfiprintf_r+0x186>
 8011e3c:	9b03      	ldr	r3, [sp, #12]
 8011e3e:	1d1a      	adds	r2, r3, #4
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	9203      	str	r2, [sp, #12]
 8011e44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011e48:	3402      	adds	r4, #2
 8011e4a:	9305      	str	r3, [sp, #20]
 8011e4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011f10 <_svfiprintf_r+0x1f4>
 8011e50:	7821      	ldrb	r1, [r4, #0]
 8011e52:	2203      	movs	r2, #3
 8011e54:	4650      	mov	r0, sl
 8011e56:	f7ee f9cb 	bl	80001f0 <memchr>
 8011e5a:	b138      	cbz	r0, 8011e6c <_svfiprintf_r+0x150>
 8011e5c:	9b04      	ldr	r3, [sp, #16]
 8011e5e:	eba0 000a 	sub.w	r0, r0, sl
 8011e62:	2240      	movs	r2, #64	@ 0x40
 8011e64:	4082      	lsls	r2, r0
 8011e66:	4313      	orrs	r3, r2
 8011e68:	3401      	adds	r4, #1
 8011e6a:	9304      	str	r3, [sp, #16]
 8011e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e70:	4824      	ldr	r0, [pc, #144]	@ (8011f04 <_svfiprintf_r+0x1e8>)
 8011e72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011e76:	2206      	movs	r2, #6
 8011e78:	f7ee f9ba 	bl	80001f0 <memchr>
 8011e7c:	2800      	cmp	r0, #0
 8011e7e:	d036      	beq.n	8011eee <_svfiprintf_r+0x1d2>
 8011e80:	4b21      	ldr	r3, [pc, #132]	@ (8011f08 <_svfiprintf_r+0x1ec>)
 8011e82:	bb1b      	cbnz	r3, 8011ecc <_svfiprintf_r+0x1b0>
 8011e84:	9b03      	ldr	r3, [sp, #12]
 8011e86:	3307      	adds	r3, #7
 8011e88:	f023 0307 	bic.w	r3, r3, #7
 8011e8c:	3308      	adds	r3, #8
 8011e8e:	9303      	str	r3, [sp, #12]
 8011e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e92:	4433      	add	r3, r6
 8011e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e96:	e76a      	b.n	8011d6e <_svfiprintf_r+0x52>
 8011e98:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e9c:	460c      	mov	r4, r1
 8011e9e:	2001      	movs	r0, #1
 8011ea0:	e7a8      	b.n	8011df4 <_svfiprintf_r+0xd8>
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	3401      	adds	r4, #1
 8011ea6:	9305      	str	r3, [sp, #20]
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	f04f 0c0a 	mov.w	ip, #10
 8011eae:	4620      	mov	r0, r4
 8011eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011eb4:	3a30      	subs	r2, #48	@ 0x30
 8011eb6:	2a09      	cmp	r2, #9
 8011eb8:	d903      	bls.n	8011ec2 <_svfiprintf_r+0x1a6>
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d0c6      	beq.n	8011e4c <_svfiprintf_r+0x130>
 8011ebe:	9105      	str	r1, [sp, #20]
 8011ec0:	e7c4      	b.n	8011e4c <_svfiprintf_r+0x130>
 8011ec2:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ec6:	4604      	mov	r4, r0
 8011ec8:	2301      	movs	r3, #1
 8011eca:	e7f0      	b.n	8011eae <_svfiprintf_r+0x192>
 8011ecc:	ab03      	add	r3, sp, #12
 8011ece:	9300      	str	r3, [sp, #0]
 8011ed0:	462a      	mov	r2, r5
 8011ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8011f0c <_svfiprintf_r+0x1f0>)
 8011ed4:	a904      	add	r1, sp, #16
 8011ed6:	4638      	mov	r0, r7
 8011ed8:	f7fc fc50 	bl	800e77c <_printf_float>
 8011edc:	1c42      	adds	r2, r0, #1
 8011ede:	4606      	mov	r6, r0
 8011ee0:	d1d6      	bne.n	8011e90 <_svfiprintf_r+0x174>
 8011ee2:	89ab      	ldrh	r3, [r5, #12]
 8011ee4:	065b      	lsls	r3, r3, #25
 8011ee6:	f53f af2d 	bmi.w	8011d44 <_svfiprintf_r+0x28>
 8011eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011eec:	e72c      	b.n	8011d48 <_svfiprintf_r+0x2c>
 8011eee:	ab03      	add	r3, sp, #12
 8011ef0:	9300      	str	r3, [sp, #0]
 8011ef2:	462a      	mov	r2, r5
 8011ef4:	4b05      	ldr	r3, [pc, #20]	@ (8011f0c <_svfiprintf_r+0x1f0>)
 8011ef6:	a904      	add	r1, sp, #16
 8011ef8:	4638      	mov	r0, r7
 8011efa:	f7fc fed7 	bl	800ecac <_printf_i>
 8011efe:	e7ed      	b.n	8011edc <_svfiprintf_r+0x1c0>
 8011f00:	08014cc1 	.word	0x08014cc1
 8011f04:	08014ccb 	.word	0x08014ccb
 8011f08:	0800e77d 	.word	0x0800e77d
 8011f0c:	08011c65 	.word	0x08011c65
 8011f10:	08014cc7 	.word	0x08014cc7

08011f14 <_sungetc_r>:
 8011f14:	b538      	push	{r3, r4, r5, lr}
 8011f16:	1c4b      	adds	r3, r1, #1
 8011f18:	4614      	mov	r4, r2
 8011f1a:	d103      	bne.n	8011f24 <_sungetc_r+0x10>
 8011f1c:	f04f 35ff 	mov.w	r5, #4294967295
 8011f20:	4628      	mov	r0, r5
 8011f22:	bd38      	pop	{r3, r4, r5, pc}
 8011f24:	8993      	ldrh	r3, [r2, #12]
 8011f26:	f023 0320 	bic.w	r3, r3, #32
 8011f2a:	8193      	strh	r3, [r2, #12]
 8011f2c:	6853      	ldr	r3, [r2, #4]
 8011f2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8011f30:	b2cd      	uxtb	r5, r1
 8011f32:	b18a      	cbz	r2, 8011f58 <_sungetc_r+0x44>
 8011f34:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011f36:	429a      	cmp	r2, r3
 8011f38:	dd08      	ble.n	8011f4c <_sungetc_r+0x38>
 8011f3a:	6823      	ldr	r3, [r4, #0]
 8011f3c:	1e5a      	subs	r2, r3, #1
 8011f3e:	6022      	str	r2, [r4, #0]
 8011f40:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011f44:	6863      	ldr	r3, [r4, #4]
 8011f46:	3301      	adds	r3, #1
 8011f48:	6063      	str	r3, [r4, #4]
 8011f4a:	e7e9      	b.n	8011f20 <_sungetc_r+0xc>
 8011f4c:	4621      	mov	r1, r4
 8011f4e:	f000 fbf2 	bl	8012736 <__submore>
 8011f52:	2800      	cmp	r0, #0
 8011f54:	d0f1      	beq.n	8011f3a <_sungetc_r+0x26>
 8011f56:	e7e1      	b.n	8011f1c <_sungetc_r+0x8>
 8011f58:	6921      	ldr	r1, [r4, #16]
 8011f5a:	6822      	ldr	r2, [r4, #0]
 8011f5c:	b141      	cbz	r1, 8011f70 <_sungetc_r+0x5c>
 8011f5e:	4291      	cmp	r1, r2
 8011f60:	d206      	bcs.n	8011f70 <_sungetc_r+0x5c>
 8011f62:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011f66:	42a9      	cmp	r1, r5
 8011f68:	d102      	bne.n	8011f70 <_sungetc_r+0x5c>
 8011f6a:	3a01      	subs	r2, #1
 8011f6c:	6022      	str	r2, [r4, #0]
 8011f6e:	e7ea      	b.n	8011f46 <_sungetc_r+0x32>
 8011f70:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8011f74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f78:	6363      	str	r3, [r4, #52]	@ 0x34
 8011f7a:	2303      	movs	r3, #3
 8011f7c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011f7e:	4623      	mov	r3, r4
 8011f80:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011f84:	6023      	str	r3, [r4, #0]
 8011f86:	2301      	movs	r3, #1
 8011f88:	e7de      	b.n	8011f48 <_sungetc_r+0x34>

08011f8a <__ssrefill_r>:
 8011f8a:	b510      	push	{r4, lr}
 8011f8c:	460c      	mov	r4, r1
 8011f8e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011f90:	b169      	cbz	r1, 8011fae <__ssrefill_r+0x24>
 8011f92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f96:	4299      	cmp	r1, r3
 8011f98:	d001      	beq.n	8011f9e <__ssrefill_r+0x14>
 8011f9a:	f7fe fae1 	bl	8010560 <_free_r>
 8011f9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011fa0:	6063      	str	r3, [r4, #4]
 8011fa2:	2000      	movs	r0, #0
 8011fa4:	6360      	str	r0, [r4, #52]	@ 0x34
 8011fa6:	b113      	cbz	r3, 8011fae <__ssrefill_r+0x24>
 8011fa8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011faa:	6023      	str	r3, [r4, #0]
 8011fac:	bd10      	pop	{r4, pc}
 8011fae:	6923      	ldr	r3, [r4, #16]
 8011fb0:	6023      	str	r3, [r4, #0]
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	6063      	str	r3, [r4, #4]
 8011fb6:	89a3      	ldrh	r3, [r4, #12]
 8011fb8:	f043 0320 	orr.w	r3, r3, #32
 8011fbc:	81a3      	strh	r3, [r4, #12]
 8011fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc2:	e7f3      	b.n	8011fac <__ssrefill_r+0x22>

08011fc4 <__ssvfiscanf_r>:
 8011fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fc8:	460c      	mov	r4, r1
 8011fca:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8011fce:	2100      	movs	r1, #0
 8011fd0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8011fd4:	49a5      	ldr	r1, [pc, #660]	@ (801226c <__ssvfiscanf_r+0x2a8>)
 8011fd6:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011fd8:	f10d 0804 	add.w	r8, sp, #4
 8011fdc:	49a4      	ldr	r1, [pc, #656]	@ (8012270 <__ssvfiscanf_r+0x2ac>)
 8011fde:	4fa5      	ldr	r7, [pc, #660]	@ (8012274 <__ssvfiscanf_r+0x2b0>)
 8011fe0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8011fe4:	4606      	mov	r6, r0
 8011fe6:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011fe8:	9300      	str	r3, [sp, #0]
 8011fea:	7813      	ldrb	r3, [r2, #0]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	f000 8158 	beq.w	80122a2 <__ssvfiscanf_r+0x2de>
 8011ff2:	5cf9      	ldrb	r1, [r7, r3]
 8011ff4:	f011 0108 	ands.w	r1, r1, #8
 8011ff8:	f102 0501 	add.w	r5, r2, #1
 8011ffc:	d019      	beq.n	8012032 <__ssvfiscanf_r+0x6e>
 8011ffe:	6863      	ldr	r3, [r4, #4]
 8012000:	2b00      	cmp	r3, #0
 8012002:	dd0f      	ble.n	8012024 <__ssvfiscanf_r+0x60>
 8012004:	6823      	ldr	r3, [r4, #0]
 8012006:	781a      	ldrb	r2, [r3, #0]
 8012008:	5cba      	ldrb	r2, [r7, r2]
 801200a:	0712      	lsls	r2, r2, #28
 801200c:	d401      	bmi.n	8012012 <__ssvfiscanf_r+0x4e>
 801200e:	462a      	mov	r2, r5
 8012010:	e7eb      	b.n	8011fea <__ssvfiscanf_r+0x26>
 8012012:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012014:	3201      	adds	r2, #1
 8012016:	9245      	str	r2, [sp, #276]	@ 0x114
 8012018:	6862      	ldr	r2, [r4, #4]
 801201a:	3301      	adds	r3, #1
 801201c:	3a01      	subs	r2, #1
 801201e:	6062      	str	r2, [r4, #4]
 8012020:	6023      	str	r3, [r4, #0]
 8012022:	e7ec      	b.n	8011ffe <__ssvfiscanf_r+0x3a>
 8012024:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012026:	4621      	mov	r1, r4
 8012028:	4630      	mov	r0, r6
 801202a:	4798      	blx	r3
 801202c:	2800      	cmp	r0, #0
 801202e:	d0e9      	beq.n	8012004 <__ssvfiscanf_r+0x40>
 8012030:	e7ed      	b.n	801200e <__ssvfiscanf_r+0x4a>
 8012032:	2b25      	cmp	r3, #37	@ 0x25
 8012034:	d012      	beq.n	801205c <__ssvfiscanf_r+0x98>
 8012036:	4699      	mov	r9, r3
 8012038:	6863      	ldr	r3, [r4, #4]
 801203a:	2b00      	cmp	r3, #0
 801203c:	f340 8093 	ble.w	8012166 <__ssvfiscanf_r+0x1a2>
 8012040:	6822      	ldr	r2, [r4, #0]
 8012042:	7813      	ldrb	r3, [r2, #0]
 8012044:	454b      	cmp	r3, r9
 8012046:	f040 812c 	bne.w	80122a2 <__ssvfiscanf_r+0x2de>
 801204a:	6863      	ldr	r3, [r4, #4]
 801204c:	3b01      	subs	r3, #1
 801204e:	6063      	str	r3, [r4, #4]
 8012050:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8012052:	3201      	adds	r2, #1
 8012054:	3301      	adds	r3, #1
 8012056:	6022      	str	r2, [r4, #0]
 8012058:	9345      	str	r3, [sp, #276]	@ 0x114
 801205a:	e7d8      	b.n	801200e <__ssvfiscanf_r+0x4a>
 801205c:	9141      	str	r1, [sp, #260]	@ 0x104
 801205e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012060:	7853      	ldrb	r3, [r2, #1]
 8012062:	2b2a      	cmp	r3, #42	@ 0x2a
 8012064:	bf02      	ittt	eq
 8012066:	2310      	moveq	r3, #16
 8012068:	1c95      	addeq	r5, r2, #2
 801206a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801206c:	220a      	movs	r2, #10
 801206e:	46a9      	mov	r9, r5
 8012070:	f819 1b01 	ldrb.w	r1, [r9], #1
 8012074:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012078:	2b09      	cmp	r3, #9
 801207a:	d91e      	bls.n	80120ba <__ssvfiscanf_r+0xf6>
 801207c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8012278 <__ssvfiscanf_r+0x2b4>
 8012080:	2203      	movs	r2, #3
 8012082:	4650      	mov	r0, sl
 8012084:	f7ee f8b4 	bl	80001f0 <memchr>
 8012088:	b138      	cbz	r0, 801209a <__ssvfiscanf_r+0xd6>
 801208a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801208c:	eba0 000a 	sub.w	r0, r0, sl
 8012090:	2301      	movs	r3, #1
 8012092:	4083      	lsls	r3, r0
 8012094:	4313      	orrs	r3, r2
 8012096:	9341      	str	r3, [sp, #260]	@ 0x104
 8012098:	464d      	mov	r5, r9
 801209a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801209e:	2b78      	cmp	r3, #120	@ 0x78
 80120a0:	d806      	bhi.n	80120b0 <__ssvfiscanf_r+0xec>
 80120a2:	2b57      	cmp	r3, #87	@ 0x57
 80120a4:	d810      	bhi.n	80120c8 <__ssvfiscanf_r+0x104>
 80120a6:	2b25      	cmp	r3, #37	@ 0x25
 80120a8:	d0c5      	beq.n	8012036 <__ssvfiscanf_r+0x72>
 80120aa:	d857      	bhi.n	801215c <__ssvfiscanf_r+0x198>
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d065      	beq.n	801217c <__ssvfiscanf_r+0x1b8>
 80120b0:	2303      	movs	r3, #3
 80120b2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80120b4:	230a      	movs	r3, #10
 80120b6:	9342      	str	r3, [sp, #264]	@ 0x108
 80120b8:	e078      	b.n	80121ac <__ssvfiscanf_r+0x1e8>
 80120ba:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80120bc:	fb02 1103 	mla	r1, r2, r3, r1
 80120c0:	3930      	subs	r1, #48	@ 0x30
 80120c2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80120c4:	464d      	mov	r5, r9
 80120c6:	e7d2      	b.n	801206e <__ssvfiscanf_r+0xaa>
 80120c8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80120cc:	2a20      	cmp	r2, #32
 80120ce:	d8ef      	bhi.n	80120b0 <__ssvfiscanf_r+0xec>
 80120d0:	a101      	add	r1, pc, #4	@ (adr r1, 80120d8 <__ssvfiscanf_r+0x114>)
 80120d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80120d6:	bf00      	nop
 80120d8:	0801218b 	.word	0x0801218b
 80120dc:	080120b1 	.word	0x080120b1
 80120e0:	080120b1 	.word	0x080120b1
 80120e4:	080121e5 	.word	0x080121e5
 80120e8:	080120b1 	.word	0x080120b1
 80120ec:	080120b1 	.word	0x080120b1
 80120f0:	080120b1 	.word	0x080120b1
 80120f4:	080120b1 	.word	0x080120b1
 80120f8:	080120b1 	.word	0x080120b1
 80120fc:	080120b1 	.word	0x080120b1
 8012100:	080120b1 	.word	0x080120b1
 8012104:	080121fb 	.word	0x080121fb
 8012108:	080121e1 	.word	0x080121e1
 801210c:	08012163 	.word	0x08012163
 8012110:	08012163 	.word	0x08012163
 8012114:	08012163 	.word	0x08012163
 8012118:	080120b1 	.word	0x080120b1
 801211c:	0801219d 	.word	0x0801219d
 8012120:	080120b1 	.word	0x080120b1
 8012124:	080120b1 	.word	0x080120b1
 8012128:	080120b1 	.word	0x080120b1
 801212c:	080120b1 	.word	0x080120b1
 8012130:	0801220b 	.word	0x0801220b
 8012134:	080121a5 	.word	0x080121a5
 8012138:	08012183 	.word	0x08012183
 801213c:	080120b1 	.word	0x080120b1
 8012140:	080120b1 	.word	0x080120b1
 8012144:	08012207 	.word	0x08012207
 8012148:	080120b1 	.word	0x080120b1
 801214c:	080121e1 	.word	0x080121e1
 8012150:	080120b1 	.word	0x080120b1
 8012154:	080120b1 	.word	0x080120b1
 8012158:	0801218b 	.word	0x0801218b
 801215c:	3b45      	subs	r3, #69	@ 0x45
 801215e:	2b02      	cmp	r3, #2
 8012160:	d8a6      	bhi.n	80120b0 <__ssvfiscanf_r+0xec>
 8012162:	2305      	movs	r3, #5
 8012164:	e021      	b.n	80121aa <__ssvfiscanf_r+0x1e6>
 8012166:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012168:	4621      	mov	r1, r4
 801216a:	4630      	mov	r0, r6
 801216c:	4798      	blx	r3
 801216e:	2800      	cmp	r0, #0
 8012170:	f43f af66 	beq.w	8012040 <__ssvfiscanf_r+0x7c>
 8012174:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012176:	2800      	cmp	r0, #0
 8012178:	f040 808b 	bne.w	8012292 <__ssvfiscanf_r+0x2ce>
 801217c:	f04f 30ff 	mov.w	r0, #4294967295
 8012180:	e08b      	b.n	801229a <__ssvfiscanf_r+0x2d6>
 8012182:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012184:	f042 0220 	orr.w	r2, r2, #32
 8012188:	9241      	str	r2, [sp, #260]	@ 0x104
 801218a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801218c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012190:	9241      	str	r2, [sp, #260]	@ 0x104
 8012192:	2210      	movs	r2, #16
 8012194:	2b6e      	cmp	r3, #110	@ 0x6e
 8012196:	9242      	str	r2, [sp, #264]	@ 0x108
 8012198:	d902      	bls.n	80121a0 <__ssvfiscanf_r+0x1dc>
 801219a:	e005      	b.n	80121a8 <__ssvfiscanf_r+0x1e4>
 801219c:	2300      	movs	r3, #0
 801219e:	9342      	str	r3, [sp, #264]	@ 0x108
 80121a0:	2303      	movs	r3, #3
 80121a2:	e002      	b.n	80121aa <__ssvfiscanf_r+0x1e6>
 80121a4:	2308      	movs	r3, #8
 80121a6:	9342      	str	r3, [sp, #264]	@ 0x108
 80121a8:	2304      	movs	r3, #4
 80121aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80121ac:	6863      	ldr	r3, [r4, #4]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	dd39      	ble.n	8012226 <__ssvfiscanf_r+0x262>
 80121b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80121b4:	0659      	lsls	r1, r3, #25
 80121b6:	d404      	bmi.n	80121c2 <__ssvfiscanf_r+0x1fe>
 80121b8:	6823      	ldr	r3, [r4, #0]
 80121ba:	781a      	ldrb	r2, [r3, #0]
 80121bc:	5cba      	ldrb	r2, [r7, r2]
 80121be:	0712      	lsls	r2, r2, #28
 80121c0:	d438      	bmi.n	8012234 <__ssvfiscanf_r+0x270>
 80121c2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80121c4:	2b02      	cmp	r3, #2
 80121c6:	dc47      	bgt.n	8012258 <__ssvfiscanf_r+0x294>
 80121c8:	466b      	mov	r3, sp
 80121ca:	4622      	mov	r2, r4
 80121cc:	a941      	add	r1, sp, #260	@ 0x104
 80121ce:	4630      	mov	r0, r6
 80121d0:	f000 f86c 	bl	80122ac <_scanf_chars>
 80121d4:	2801      	cmp	r0, #1
 80121d6:	d064      	beq.n	80122a2 <__ssvfiscanf_r+0x2de>
 80121d8:	2802      	cmp	r0, #2
 80121da:	f47f af18 	bne.w	801200e <__ssvfiscanf_r+0x4a>
 80121de:	e7c9      	b.n	8012174 <__ssvfiscanf_r+0x1b0>
 80121e0:	220a      	movs	r2, #10
 80121e2:	e7d7      	b.n	8012194 <__ssvfiscanf_r+0x1d0>
 80121e4:	4629      	mov	r1, r5
 80121e6:	4640      	mov	r0, r8
 80121e8:	f000 fa6c 	bl	80126c4 <__sccl>
 80121ec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80121ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121f2:	9341      	str	r3, [sp, #260]	@ 0x104
 80121f4:	4605      	mov	r5, r0
 80121f6:	2301      	movs	r3, #1
 80121f8:	e7d7      	b.n	80121aa <__ssvfiscanf_r+0x1e6>
 80121fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80121fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012200:	9341      	str	r3, [sp, #260]	@ 0x104
 8012202:	2300      	movs	r3, #0
 8012204:	e7d1      	b.n	80121aa <__ssvfiscanf_r+0x1e6>
 8012206:	2302      	movs	r3, #2
 8012208:	e7cf      	b.n	80121aa <__ssvfiscanf_r+0x1e6>
 801220a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801220c:	06c3      	lsls	r3, r0, #27
 801220e:	f53f aefe 	bmi.w	801200e <__ssvfiscanf_r+0x4a>
 8012212:	9b00      	ldr	r3, [sp, #0]
 8012214:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012216:	1d19      	adds	r1, r3, #4
 8012218:	9100      	str	r1, [sp, #0]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	07c0      	lsls	r0, r0, #31
 801221e:	bf4c      	ite	mi
 8012220:	801a      	strhmi	r2, [r3, #0]
 8012222:	601a      	strpl	r2, [r3, #0]
 8012224:	e6f3      	b.n	801200e <__ssvfiscanf_r+0x4a>
 8012226:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012228:	4621      	mov	r1, r4
 801222a:	4630      	mov	r0, r6
 801222c:	4798      	blx	r3
 801222e:	2800      	cmp	r0, #0
 8012230:	d0bf      	beq.n	80121b2 <__ssvfiscanf_r+0x1ee>
 8012232:	e79f      	b.n	8012174 <__ssvfiscanf_r+0x1b0>
 8012234:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012236:	3201      	adds	r2, #1
 8012238:	9245      	str	r2, [sp, #276]	@ 0x114
 801223a:	6862      	ldr	r2, [r4, #4]
 801223c:	3a01      	subs	r2, #1
 801223e:	2a00      	cmp	r2, #0
 8012240:	6062      	str	r2, [r4, #4]
 8012242:	dd02      	ble.n	801224a <__ssvfiscanf_r+0x286>
 8012244:	3301      	adds	r3, #1
 8012246:	6023      	str	r3, [r4, #0]
 8012248:	e7b6      	b.n	80121b8 <__ssvfiscanf_r+0x1f4>
 801224a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801224c:	4621      	mov	r1, r4
 801224e:	4630      	mov	r0, r6
 8012250:	4798      	blx	r3
 8012252:	2800      	cmp	r0, #0
 8012254:	d0b0      	beq.n	80121b8 <__ssvfiscanf_r+0x1f4>
 8012256:	e78d      	b.n	8012174 <__ssvfiscanf_r+0x1b0>
 8012258:	2b04      	cmp	r3, #4
 801225a:	dc0f      	bgt.n	801227c <__ssvfiscanf_r+0x2b8>
 801225c:	466b      	mov	r3, sp
 801225e:	4622      	mov	r2, r4
 8012260:	a941      	add	r1, sp, #260	@ 0x104
 8012262:	4630      	mov	r0, r6
 8012264:	f000 f87c 	bl	8012360 <_scanf_i>
 8012268:	e7b4      	b.n	80121d4 <__ssvfiscanf_r+0x210>
 801226a:	bf00      	nop
 801226c:	08011f15 	.word	0x08011f15
 8012270:	08011f8b 	.word	0x08011f8b
 8012274:	08014bc1 	.word	0x08014bc1
 8012278:	08014cc7 	.word	0x08014cc7
 801227c:	4b0a      	ldr	r3, [pc, #40]	@ (80122a8 <__ssvfiscanf_r+0x2e4>)
 801227e:	2b00      	cmp	r3, #0
 8012280:	f43f aec5 	beq.w	801200e <__ssvfiscanf_r+0x4a>
 8012284:	466b      	mov	r3, sp
 8012286:	4622      	mov	r2, r4
 8012288:	a941      	add	r1, sp, #260	@ 0x104
 801228a:	4630      	mov	r0, r6
 801228c:	f7fc fe2e 	bl	800eeec <_scanf_float>
 8012290:	e7a0      	b.n	80121d4 <__ssvfiscanf_r+0x210>
 8012292:	89a3      	ldrh	r3, [r4, #12]
 8012294:	065b      	lsls	r3, r3, #25
 8012296:	f53f af71 	bmi.w	801217c <__ssvfiscanf_r+0x1b8>
 801229a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801229e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122a2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80122a4:	e7f9      	b.n	801229a <__ssvfiscanf_r+0x2d6>
 80122a6:	bf00      	nop
 80122a8:	0800eeed 	.word	0x0800eeed

080122ac <_scanf_chars>:
 80122ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122b0:	4615      	mov	r5, r2
 80122b2:	688a      	ldr	r2, [r1, #8]
 80122b4:	4680      	mov	r8, r0
 80122b6:	460c      	mov	r4, r1
 80122b8:	b932      	cbnz	r2, 80122c8 <_scanf_chars+0x1c>
 80122ba:	698a      	ldr	r2, [r1, #24]
 80122bc:	2a00      	cmp	r2, #0
 80122be:	bf14      	ite	ne
 80122c0:	f04f 32ff 	movne.w	r2, #4294967295
 80122c4:	2201      	moveq	r2, #1
 80122c6:	608a      	str	r2, [r1, #8]
 80122c8:	6822      	ldr	r2, [r4, #0]
 80122ca:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801235c <_scanf_chars+0xb0>
 80122ce:	06d1      	lsls	r1, r2, #27
 80122d0:	bf5f      	itttt	pl
 80122d2:	681a      	ldrpl	r2, [r3, #0]
 80122d4:	1d11      	addpl	r1, r2, #4
 80122d6:	6019      	strpl	r1, [r3, #0]
 80122d8:	6816      	ldrpl	r6, [r2, #0]
 80122da:	2700      	movs	r7, #0
 80122dc:	69a0      	ldr	r0, [r4, #24]
 80122de:	b188      	cbz	r0, 8012304 <_scanf_chars+0x58>
 80122e0:	2801      	cmp	r0, #1
 80122e2:	d107      	bne.n	80122f4 <_scanf_chars+0x48>
 80122e4:	682b      	ldr	r3, [r5, #0]
 80122e6:	781a      	ldrb	r2, [r3, #0]
 80122e8:	6963      	ldr	r3, [r4, #20]
 80122ea:	5c9b      	ldrb	r3, [r3, r2]
 80122ec:	b953      	cbnz	r3, 8012304 <_scanf_chars+0x58>
 80122ee:	2f00      	cmp	r7, #0
 80122f0:	d031      	beq.n	8012356 <_scanf_chars+0xaa>
 80122f2:	e022      	b.n	801233a <_scanf_chars+0x8e>
 80122f4:	2802      	cmp	r0, #2
 80122f6:	d120      	bne.n	801233a <_scanf_chars+0x8e>
 80122f8:	682b      	ldr	r3, [r5, #0]
 80122fa:	781b      	ldrb	r3, [r3, #0]
 80122fc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012300:	071b      	lsls	r3, r3, #28
 8012302:	d41a      	bmi.n	801233a <_scanf_chars+0x8e>
 8012304:	6823      	ldr	r3, [r4, #0]
 8012306:	06da      	lsls	r2, r3, #27
 8012308:	bf5e      	ittt	pl
 801230a:	682b      	ldrpl	r3, [r5, #0]
 801230c:	781b      	ldrbpl	r3, [r3, #0]
 801230e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012312:	682a      	ldr	r2, [r5, #0]
 8012314:	686b      	ldr	r3, [r5, #4]
 8012316:	3201      	adds	r2, #1
 8012318:	602a      	str	r2, [r5, #0]
 801231a:	68a2      	ldr	r2, [r4, #8]
 801231c:	3b01      	subs	r3, #1
 801231e:	3a01      	subs	r2, #1
 8012320:	606b      	str	r3, [r5, #4]
 8012322:	3701      	adds	r7, #1
 8012324:	60a2      	str	r2, [r4, #8]
 8012326:	b142      	cbz	r2, 801233a <_scanf_chars+0x8e>
 8012328:	2b00      	cmp	r3, #0
 801232a:	dcd7      	bgt.n	80122dc <_scanf_chars+0x30>
 801232c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012330:	4629      	mov	r1, r5
 8012332:	4640      	mov	r0, r8
 8012334:	4798      	blx	r3
 8012336:	2800      	cmp	r0, #0
 8012338:	d0d0      	beq.n	80122dc <_scanf_chars+0x30>
 801233a:	6823      	ldr	r3, [r4, #0]
 801233c:	f013 0310 	ands.w	r3, r3, #16
 8012340:	d105      	bne.n	801234e <_scanf_chars+0xa2>
 8012342:	68e2      	ldr	r2, [r4, #12]
 8012344:	3201      	adds	r2, #1
 8012346:	60e2      	str	r2, [r4, #12]
 8012348:	69a2      	ldr	r2, [r4, #24]
 801234a:	b102      	cbz	r2, 801234e <_scanf_chars+0xa2>
 801234c:	7033      	strb	r3, [r6, #0]
 801234e:	6923      	ldr	r3, [r4, #16]
 8012350:	443b      	add	r3, r7
 8012352:	6123      	str	r3, [r4, #16]
 8012354:	2000      	movs	r0, #0
 8012356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801235a:	bf00      	nop
 801235c:	08014bc1 	.word	0x08014bc1

08012360 <_scanf_i>:
 8012360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012364:	4698      	mov	r8, r3
 8012366:	4b74      	ldr	r3, [pc, #464]	@ (8012538 <_scanf_i+0x1d8>)
 8012368:	460c      	mov	r4, r1
 801236a:	4682      	mov	sl, r0
 801236c:	4616      	mov	r6, r2
 801236e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012372:	b087      	sub	sp, #28
 8012374:	ab03      	add	r3, sp, #12
 8012376:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801237a:	4b70      	ldr	r3, [pc, #448]	@ (801253c <_scanf_i+0x1dc>)
 801237c:	69a1      	ldr	r1, [r4, #24]
 801237e:	4a70      	ldr	r2, [pc, #448]	@ (8012540 <_scanf_i+0x1e0>)
 8012380:	2903      	cmp	r1, #3
 8012382:	bf08      	it	eq
 8012384:	461a      	moveq	r2, r3
 8012386:	68a3      	ldr	r3, [r4, #8]
 8012388:	9201      	str	r2, [sp, #4]
 801238a:	1e5a      	subs	r2, r3, #1
 801238c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012390:	bf88      	it	hi
 8012392:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012396:	4627      	mov	r7, r4
 8012398:	bf82      	ittt	hi
 801239a:	eb03 0905 	addhi.w	r9, r3, r5
 801239e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80123a2:	60a3      	strhi	r3, [r4, #8]
 80123a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80123a8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80123ac:	bf98      	it	ls
 80123ae:	f04f 0900 	movls.w	r9, #0
 80123b2:	6023      	str	r3, [r4, #0]
 80123b4:	463d      	mov	r5, r7
 80123b6:	f04f 0b00 	mov.w	fp, #0
 80123ba:	6831      	ldr	r1, [r6, #0]
 80123bc:	ab03      	add	r3, sp, #12
 80123be:	7809      	ldrb	r1, [r1, #0]
 80123c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80123c4:	2202      	movs	r2, #2
 80123c6:	f7ed ff13 	bl	80001f0 <memchr>
 80123ca:	b328      	cbz	r0, 8012418 <_scanf_i+0xb8>
 80123cc:	f1bb 0f01 	cmp.w	fp, #1
 80123d0:	d159      	bne.n	8012486 <_scanf_i+0x126>
 80123d2:	6862      	ldr	r2, [r4, #4]
 80123d4:	b92a      	cbnz	r2, 80123e2 <_scanf_i+0x82>
 80123d6:	6822      	ldr	r2, [r4, #0]
 80123d8:	2108      	movs	r1, #8
 80123da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80123de:	6061      	str	r1, [r4, #4]
 80123e0:	6022      	str	r2, [r4, #0]
 80123e2:	6822      	ldr	r2, [r4, #0]
 80123e4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80123e8:	6022      	str	r2, [r4, #0]
 80123ea:	68a2      	ldr	r2, [r4, #8]
 80123ec:	1e51      	subs	r1, r2, #1
 80123ee:	60a1      	str	r1, [r4, #8]
 80123f0:	b192      	cbz	r2, 8012418 <_scanf_i+0xb8>
 80123f2:	6832      	ldr	r2, [r6, #0]
 80123f4:	1c51      	adds	r1, r2, #1
 80123f6:	6031      	str	r1, [r6, #0]
 80123f8:	7812      	ldrb	r2, [r2, #0]
 80123fa:	f805 2b01 	strb.w	r2, [r5], #1
 80123fe:	6872      	ldr	r2, [r6, #4]
 8012400:	3a01      	subs	r2, #1
 8012402:	2a00      	cmp	r2, #0
 8012404:	6072      	str	r2, [r6, #4]
 8012406:	dc07      	bgt.n	8012418 <_scanf_i+0xb8>
 8012408:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801240c:	4631      	mov	r1, r6
 801240e:	4650      	mov	r0, sl
 8012410:	4790      	blx	r2
 8012412:	2800      	cmp	r0, #0
 8012414:	f040 8085 	bne.w	8012522 <_scanf_i+0x1c2>
 8012418:	f10b 0b01 	add.w	fp, fp, #1
 801241c:	f1bb 0f03 	cmp.w	fp, #3
 8012420:	d1cb      	bne.n	80123ba <_scanf_i+0x5a>
 8012422:	6863      	ldr	r3, [r4, #4]
 8012424:	b90b      	cbnz	r3, 801242a <_scanf_i+0xca>
 8012426:	230a      	movs	r3, #10
 8012428:	6063      	str	r3, [r4, #4]
 801242a:	6863      	ldr	r3, [r4, #4]
 801242c:	4945      	ldr	r1, [pc, #276]	@ (8012544 <_scanf_i+0x1e4>)
 801242e:	6960      	ldr	r0, [r4, #20]
 8012430:	1ac9      	subs	r1, r1, r3
 8012432:	f000 f947 	bl	80126c4 <__sccl>
 8012436:	f04f 0b00 	mov.w	fp, #0
 801243a:	68a3      	ldr	r3, [r4, #8]
 801243c:	6822      	ldr	r2, [r4, #0]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d03d      	beq.n	80124be <_scanf_i+0x15e>
 8012442:	6831      	ldr	r1, [r6, #0]
 8012444:	6960      	ldr	r0, [r4, #20]
 8012446:	f891 c000 	ldrb.w	ip, [r1]
 801244a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801244e:	2800      	cmp	r0, #0
 8012450:	d035      	beq.n	80124be <_scanf_i+0x15e>
 8012452:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012456:	d124      	bne.n	80124a2 <_scanf_i+0x142>
 8012458:	0510      	lsls	r0, r2, #20
 801245a:	d522      	bpl.n	80124a2 <_scanf_i+0x142>
 801245c:	f10b 0b01 	add.w	fp, fp, #1
 8012460:	f1b9 0f00 	cmp.w	r9, #0
 8012464:	d003      	beq.n	801246e <_scanf_i+0x10e>
 8012466:	3301      	adds	r3, #1
 8012468:	f109 39ff 	add.w	r9, r9, #4294967295
 801246c:	60a3      	str	r3, [r4, #8]
 801246e:	6873      	ldr	r3, [r6, #4]
 8012470:	3b01      	subs	r3, #1
 8012472:	2b00      	cmp	r3, #0
 8012474:	6073      	str	r3, [r6, #4]
 8012476:	dd1b      	ble.n	80124b0 <_scanf_i+0x150>
 8012478:	6833      	ldr	r3, [r6, #0]
 801247a:	3301      	adds	r3, #1
 801247c:	6033      	str	r3, [r6, #0]
 801247e:	68a3      	ldr	r3, [r4, #8]
 8012480:	3b01      	subs	r3, #1
 8012482:	60a3      	str	r3, [r4, #8]
 8012484:	e7d9      	b.n	801243a <_scanf_i+0xda>
 8012486:	f1bb 0f02 	cmp.w	fp, #2
 801248a:	d1ae      	bne.n	80123ea <_scanf_i+0x8a>
 801248c:	6822      	ldr	r2, [r4, #0]
 801248e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012492:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012496:	d1bf      	bne.n	8012418 <_scanf_i+0xb8>
 8012498:	2110      	movs	r1, #16
 801249a:	6061      	str	r1, [r4, #4]
 801249c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80124a0:	e7a2      	b.n	80123e8 <_scanf_i+0x88>
 80124a2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80124a6:	6022      	str	r2, [r4, #0]
 80124a8:	780b      	ldrb	r3, [r1, #0]
 80124aa:	f805 3b01 	strb.w	r3, [r5], #1
 80124ae:	e7de      	b.n	801246e <_scanf_i+0x10e>
 80124b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80124b4:	4631      	mov	r1, r6
 80124b6:	4650      	mov	r0, sl
 80124b8:	4798      	blx	r3
 80124ba:	2800      	cmp	r0, #0
 80124bc:	d0df      	beq.n	801247e <_scanf_i+0x11e>
 80124be:	6823      	ldr	r3, [r4, #0]
 80124c0:	05d9      	lsls	r1, r3, #23
 80124c2:	d50d      	bpl.n	80124e0 <_scanf_i+0x180>
 80124c4:	42bd      	cmp	r5, r7
 80124c6:	d909      	bls.n	80124dc <_scanf_i+0x17c>
 80124c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80124cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80124d0:	4632      	mov	r2, r6
 80124d2:	4650      	mov	r0, sl
 80124d4:	4798      	blx	r3
 80124d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80124da:	464d      	mov	r5, r9
 80124dc:	42bd      	cmp	r5, r7
 80124de:	d028      	beq.n	8012532 <_scanf_i+0x1d2>
 80124e0:	6822      	ldr	r2, [r4, #0]
 80124e2:	f012 0210 	ands.w	r2, r2, #16
 80124e6:	d113      	bne.n	8012510 <_scanf_i+0x1b0>
 80124e8:	702a      	strb	r2, [r5, #0]
 80124ea:	6863      	ldr	r3, [r4, #4]
 80124ec:	9e01      	ldr	r6, [sp, #4]
 80124ee:	4639      	mov	r1, r7
 80124f0:	4650      	mov	r0, sl
 80124f2:	47b0      	blx	r6
 80124f4:	f8d8 3000 	ldr.w	r3, [r8]
 80124f8:	6821      	ldr	r1, [r4, #0]
 80124fa:	1d1a      	adds	r2, r3, #4
 80124fc:	f8c8 2000 	str.w	r2, [r8]
 8012500:	f011 0f20 	tst.w	r1, #32
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	d00f      	beq.n	8012528 <_scanf_i+0x1c8>
 8012508:	6018      	str	r0, [r3, #0]
 801250a:	68e3      	ldr	r3, [r4, #12]
 801250c:	3301      	adds	r3, #1
 801250e:	60e3      	str	r3, [r4, #12]
 8012510:	6923      	ldr	r3, [r4, #16]
 8012512:	1bed      	subs	r5, r5, r7
 8012514:	445d      	add	r5, fp
 8012516:	442b      	add	r3, r5
 8012518:	6123      	str	r3, [r4, #16]
 801251a:	2000      	movs	r0, #0
 801251c:	b007      	add	sp, #28
 801251e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012522:	f04f 0b00 	mov.w	fp, #0
 8012526:	e7ca      	b.n	80124be <_scanf_i+0x15e>
 8012528:	07ca      	lsls	r2, r1, #31
 801252a:	bf4c      	ite	mi
 801252c:	8018      	strhmi	r0, [r3, #0]
 801252e:	6018      	strpl	r0, [r3, #0]
 8012530:	e7eb      	b.n	801250a <_scanf_i+0x1aa>
 8012532:	2001      	movs	r0, #1
 8012534:	e7f2      	b.n	801251c <_scanf_i+0x1bc>
 8012536:	bf00      	nop
 8012538:	08014798 	.word	0x08014798
 801253c:	08011c61 	.word	0x08011c61
 8012540:	08012ff5 	.word	0x08012ff5
 8012544:	08014ce2 	.word	0x08014ce2

08012548 <__sflush_r>:
 8012548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801254c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012550:	0716      	lsls	r6, r2, #28
 8012552:	4605      	mov	r5, r0
 8012554:	460c      	mov	r4, r1
 8012556:	d454      	bmi.n	8012602 <__sflush_r+0xba>
 8012558:	684b      	ldr	r3, [r1, #4]
 801255a:	2b00      	cmp	r3, #0
 801255c:	dc02      	bgt.n	8012564 <__sflush_r+0x1c>
 801255e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012560:	2b00      	cmp	r3, #0
 8012562:	dd48      	ble.n	80125f6 <__sflush_r+0xae>
 8012564:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012566:	2e00      	cmp	r6, #0
 8012568:	d045      	beq.n	80125f6 <__sflush_r+0xae>
 801256a:	2300      	movs	r3, #0
 801256c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012570:	682f      	ldr	r7, [r5, #0]
 8012572:	6a21      	ldr	r1, [r4, #32]
 8012574:	602b      	str	r3, [r5, #0]
 8012576:	d030      	beq.n	80125da <__sflush_r+0x92>
 8012578:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801257a:	89a3      	ldrh	r3, [r4, #12]
 801257c:	0759      	lsls	r1, r3, #29
 801257e:	d505      	bpl.n	801258c <__sflush_r+0x44>
 8012580:	6863      	ldr	r3, [r4, #4]
 8012582:	1ad2      	subs	r2, r2, r3
 8012584:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012586:	b10b      	cbz	r3, 801258c <__sflush_r+0x44>
 8012588:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801258a:	1ad2      	subs	r2, r2, r3
 801258c:	2300      	movs	r3, #0
 801258e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012590:	6a21      	ldr	r1, [r4, #32]
 8012592:	4628      	mov	r0, r5
 8012594:	47b0      	blx	r6
 8012596:	1c43      	adds	r3, r0, #1
 8012598:	89a3      	ldrh	r3, [r4, #12]
 801259a:	d106      	bne.n	80125aa <__sflush_r+0x62>
 801259c:	6829      	ldr	r1, [r5, #0]
 801259e:	291d      	cmp	r1, #29
 80125a0:	d82b      	bhi.n	80125fa <__sflush_r+0xb2>
 80125a2:	4a2a      	ldr	r2, [pc, #168]	@ (801264c <__sflush_r+0x104>)
 80125a4:	410a      	asrs	r2, r1
 80125a6:	07d6      	lsls	r6, r2, #31
 80125a8:	d427      	bmi.n	80125fa <__sflush_r+0xb2>
 80125aa:	2200      	movs	r2, #0
 80125ac:	6062      	str	r2, [r4, #4]
 80125ae:	04d9      	lsls	r1, r3, #19
 80125b0:	6922      	ldr	r2, [r4, #16]
 80125b2:	6022      	str	r2, [r4, #0]
 80125b4:	d504      	bpl.n	80125c0 <__sflush_r+0x78>
 80125b6:	1c42      	adds	r2, r0, #1
 80125b8:	d101      	bne.n	80125be <__sflush_r+0x76>
 80125ba:	682b      	ldr	r3, [r5, #0]
 80125bc:	b903      	cbnz	r3, 80125c0 <__sflush_r+0x78>
 80125be:	6560      	str	r0, [r4, #84]	@ 0x54
 80125c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80125c2:	602f      	str	r7, [r5, #0]
 80125c4:	b1b9      	cbz	r1, 80125f6 <__sflush_r+0xae>
 80125c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80125ca:	4299      	cmp	r1, r3
 80125cc:	d002      	beq.n	80125d4 <__sflush_r+0x8c>
 80125ce:	4628      	mov	r0, r5
 80125d0:	f7fd ffc6 	bl	8010560 <_free_r>
 80125d4:	2300      	movs	r3, #0
 80125d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80125d8:	e00d      	b.n	80125f6 <__sflush_r+0xae>
 80125da:	2301      	movs	r3, #1
 80125dc:	4628      	mov	r0, r5
 80125de:	47b0      	blx	r6
 80125e0:	4602      	mov	r2, r0
 80125e2:	1c50      	adds	r0, r2, #1
 80125e4:	d1c9      	bne.n	801257a <__sflush_r+0x32>
 80125e6:	682b      	ldr	r3, [r5, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d0c6      	beq.n	801257a <__sflush_r+0x32>
 80125ec:	2b1d      	cmp	r3, #29
 80125ee:	d001      	beq.n	80125f4 <__sflush_r+0xac>
 80125f0:	2b16      	cmp	r3, #22
 80125f2:	d11e      	bne.n	8012632 <__sflush_r+0xea>
 80125f4:	602f      	str	r7, [r5, #0]
 80125f6:	2000      	movs	r0, #0
 80125f8:	e022      	b.n	8012640 <__sflush_r+0xf8>
 80125fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125fe:	b21b      	sxth	r3, r3
 8012600:	e01b      	b.n	801263a <__sflush_r+0xf2>
 8012602:	690f      	ldr	r7, [r1, #16]
 8012604:	2f00      	cmp	r7, #0
 8012606:	d0f6      	beq.n	80125f6 <__sflush_r+0xae>
 8012608:	0793      	lsls	r3, r2, #30
 801260a:	680e      	ldr	r6, [r1, #0]
 801260c:	bf08      	it	eq
 801260e:	694b      	ldreq	r3, [r1, #20]
 8012610:	600f      	str	r7, [r1, #0]
 8012612:	bf18      	it	ne
 8012614:	2300      	movne	r3, #0
 8012616:	eba6 0807 	sub.w	r8, r6, r7
 801261a:	608b      	str	r3, [r1, #8]
 801261c:	f1b8 0f00 	cmp.w	r8, #0
 8012620:	dde9      	ble.n	80125f6 <__sflush_r+0xae>
 8012622:	6a21      	ldr	r1, [r4, #32]
 8012624:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012626:	4643      	mov	r3, r8
 8012628:	463a      	mov	r2, r7
 801262a:	4628      	mov	r0, r5
 801262c:	47b0      	blx	r6
 801262e:	2800      	cmp	r0, #0
 8012630:	dc08      	bgt.n	8012644 <__sflush_r+0xfc>
 8012632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801263a:	81a3      	strh	r3, [r4, #12]
 801263c:	f04f 30ff 	mov.w	r0, #4294967295
 8012640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012644:	4407      	add	r7, r0
 8012646:	eba8 0800 	sub.w	r8, r8, r0
 801264a:	e7e7      	b.n	801261c <__sflush_r+0xd4>
 801264c:	dfbffffe 	.word	0xdfbffffe

08012650 <_fflush_r>:
 8012650:	b538      	push	{r3, r4, r5, lr}
 8012652:	690b      	ldr	r3, [r1, #16]
 8012654:	4605      	mov	r5, r0
 8012656:	460c      	mov	r4, r1
 8012658:	b913      	cbnz	r3, 8012660 <_fflush_r+0x10>
 801265a:	2500      	movs	r5, #0
 801265c:	4628      	mov	r0, r5
 801265e:	bd38      	pop	{r3, r4, r5, pc}
 8012660:	b118      	cbz	r0, 801266a <_fflush_r+0x1a>
 8012662:	6a03      	ldr	r3, [r0, #32]
 8012664:	b90b      	cbnz	r3, 801266a <_fflush_r+0x1a>
 8012666:	f7fc fee1 	bl	800f42c <__sinit>
 801266a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d0f3      	beq.n	801265a <_fflush_r+0xa>
 8012672:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012674:	07d0      	lsls	r0, r2, #31
 8012676:	d404      	bmi.n	8012682 <_fflush_r+0x32>
 8012678:	0599      	lsls	r1, r3, #22
 801267a:	d402      	bmi.n	8012682 <_fflush_r+0x32>
 801267c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801267e:	f7fd f8ec 	bl	800f85a <__retarget_lock_acquire_recursive>
 8012682:	4628      	mov	r0, r5
 8012684:	4621      	mov	r1, r4
 8012686:	f7ff ff5f 	bl	8012548 <__sflush_r>
 801268a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801268c:	07da      	lsls	r2, r3, #31
 801268e:	4605      	mov	r5, r0
 8012690:	d4e4      	bmi.n	801265c <_fflush_r+0xc>
 8012692:	89a3      	ldrh	r3, [r4, #12]
 8012694:	059b      	lsls	r3, r3, #22
 8012696:	d4e1      	bmi.n	801265c <_fflush_r+0xc>
 8012698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801269a:	f7fd f8df 	bl	800f85c <__retarget_lock_release_recursive>
 801269e:	e7dd      	b.n	801265c <_fflush_r+0xc>

080126a0 <fiprintf>:
 80126a0:	b40e      	push	{r1, r2, r3}
 80126a2:	b503      	push	{r0, r1, lr}
 80126a4:	4601      	mov	r1, r0
 80126a6:	ab03      	add	r3, sp, #12
 80126a8:	4805      	ldr	r0, [pc, #20]	@ (80126c0 <fiprintf+0x20>)
 80126aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80126ae:	6800      	ldr	r0, [r0, #0]
 80126b0:	9301      	str	r3, [sp, #4]
 80126b2:	f000 fcd7 	bl	8013064 <_vfiprintf_r>
 80126b6:	b002      	add	sp, #8
 80126b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80126bc:	b003      	add	sp, #12
 80126be:	4770      	bx	lr
 80126c0:	200000c4 	.word	0x200000c4

080126c4 <__sccl>:
 80126c4:	b570      	push	{r4, r5, r6, lr}
 80126c6:	780b      	ldrb	r3, [r1, #0]
 80126c8:	4604      	mov	r4, r0
 80126ca:	2b5e      	cmp	r3, #94	@ 0x5e
 80126cc:	bf0b      	itete	eq
 80126ce:	784b      	ldrbeq	r3, [r1, #1]
 80126d0:	1c4a      	addne	r2, r1, #1
 80126d2:	1c8a      	addeq	r2, r1, #2
 80126d4:	2100      	movne	r1, #0
 80126d6:	bf08      	it	eq
 80126d8:	2101      	moveq	r1, #1
 80126da:	3801      	subs	r0, #1
 80126dc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80126e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80126e4:	42a8      	cmp	r0, r5
 80126e6:	d1fb      	bne.n	80126e0 <__sccl+0x1c>
 80126e8:	b90b      	cbnz	r3, 80126ee <__sccl+0x2a>
 80126ea:	1e50      	subs	r0, r2, #1
 80126ec:	bd70      	pop	{r4, r5, r6, pc}
 80126ee:	f081 0101 	eor.w	r1, r1, #1
 80126f2:	54e1      	strb	r1, [r4, r3]
 80126f4:	4610      	mov	r0, r2
 80126f6:	4602      	mov	r2, r0
 80126f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80126fc:	2d2d      	cmp	r5, #45	@ 0x2d
 80126fe:	d005      	beq.n	801270c <__sccl+0x48>
 8012700:	2d5d      	cmp	r5, #93	@ 0x5d
 8012702:	d016      	beq.n	8012732 <__sccl+0x6e>
 8012704:	2d00      	cmp	r5, #0
 8012706:	d0f1      	beq.n	80126ec <__sccl+0x28>
 8012708:	462b      	mov	r3, r5
 801270a:	e7f2      	b.n	80126f2 <__sccl+0x2e>
 801270c:	7846      	ldrb	r6, [r0, #1]
 801270e:	2e5d      	cmp	r6, #93	@ 0x5d
 8012710:	d0fa      	beq.n	8012708 <__sccl+0x44>
 8012712:	42b3      	cmp	r3, r6
 8012714:	dcf8      	bgt.n	8012708 <__sccl+0x44>
 8012716:	3002      	adds	r0, #2
 8012718:	461a      	mov	r2, r3
 801271a:	3201      	adds	r2, #1
 801271c:	4296      	cmp	r6, r2
 801271e:	54a1      	strb	r1, [r4, r2]
 8012720:	dcfb      	bgt.n	801271a <__sccl+0x56>
 8012722:	1af2      	subs	r2, r6, r3
 8012724:	3a01      	subs	r2, #1
 8012726:	1c5d      	adds	r5, r3, #1
 8012728:	42b3      	cmp	r3, r6
 801272a:	bfa8      	it	ge
 801272c:	2200      	movge	r2, #0
 801272e:	18ab      	adds	r3, r5, r2
 8012730:	e7e1      	b.n	80126f6 <__sccl+0x32>
 8012732:	4610      	mov	r0, r2
 8012734:	e7da      	b.n	80126ec <__sccl+0x28>

08012736 <__submore>:
 8012736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801273a:	460c      	mov	r4, r1
 801273c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801273e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012742:	4299      	cmp	r1, r3
 8012744:	d11d      	bne.n	8012782 <__submore+0x4c>
 8012746:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801274a:	f7fb fea9 	bl	800e4a0 <_malloc_r>
 801274e:	b918      	cbnz	r0, 8012758 <__submore+0x22>
 8012750:	f04f 30ff 	mov.w	r0, #4294967295
 8012754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801275c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801275e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012762:	6360      	str	r0, [r4, #52]	@ 0x34
 8012764:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012768:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801276c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012770:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012774:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012778:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801277c:	6020      	str	r0, [r4, #0]
 801277e:	2000      	movs	r0, #0
 8012780:	e7e8      	b.n	8012754 <__submore+0x1e>
 8012782:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012784:	0077      	lsls	r7, r6, #1
 8012786:	463a      	mov	r2, r7
 8012788:	f000 fb97 	bl	8012eba <_realloc_r>
 801278c:	4605      	mov	r5, r0
 801278e:	2800      	cmp	r0, #0
 8012790:	d0de      	beq.n	8012750 <__submore+0x1a>
 8012792:	eb00 0806 	add.w	r8, r0, r6
 8012796:	4601      	mov	r1, r0
 8012798:	4632      	mov	r2, r6
 801279a:	4640      	mov	r0, r8
 801279c:	f7fd f85f 	bl	800f85e <memcpy>
 80127a0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80127a4:	f8c4 8000 	str.w	r8, [r4]
 80127a8:	e7e9      	b.n	801277e <__submore+0x48>

080127aa <memmove>:
 80127aa:	4288      	cmp	r0, r1
 80127ac:	b510      	push	{r4, lr}
 80127ae:	eb01 0402 	add.w	r4, r1, r2
 80127b2:	d902      	bls.n	80127ba <memmove+0x10>
 80127b4:	4284      	cmp	r4, r0
 80127b6:	4623      	mov	r3, r4
 80127b8:	d807      	bhi.n	80127ca <memmove+0x20>
 80127ba:	1e43      	subs	r3, r0, #1
 80127bc:	42a1      	cmp	r1, r4
 80127be:	d008      	beq.n	80127d2 <memmove+0x28>
 80127c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80127c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80127c8:	e7f8      	b.n	80127bc <memmove+0x12>
 80127ca:	4402      	add	r2, r0
 80127cc:	4601      	mov	r1, r0
 80127ce:	428a      	cmp	r2, r1
 80127d0:	d100      	bne.n	80127d4 <memmove+0x2a>
 80127d2:	bd10      	pop	{r4, pc}
 80127d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80127d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80127dc:	e7f7      	b.n	80127ce <memmove+0x24>
	...

080127e0 <nan>:
 80127e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80127e8 <nan+0x8>
 80127e4:	4770      	bx	lr
 80127e6:	bf00      	nop
 80127e8:	00000000 	.word	0x00000000
 80127ec:	7ff80000 	.word	0x7ff80000

080127f0 <abort>:
 80127f0:	b508      	push	{r3, lr}
 80127f2:	2006      	movs	r0, #6
 80127f4:	f000 fe0a 	bl	801340c <raise>
 80127f8:	2001      	movs	r0, #1
 80127fa:	f7f2 f87b 	bl	80048f4 <_exit>

080127fe <_calloc_r>:
 80127fe:	b570      	push	{r4, r5, r6, lr}
 8012800:	fba1 5402 	umull	r5, r4, r1, r2
 8012804:	b93c      	cbnz	r4, 8012816 <_calloc_r+0x18>
 8012806:	4629      	mov	r1, r5
 8012808:	f7fb fe4a 	bl	800e4a0 <_malloc_r>
 801280c:	4606      	mov	r6, r0
 801280e:	b928      	cbnz	r0, 801281c <_calloc_r+0x1e>
 8012810:	2600      	movs	r6, #0
 8012812:	4630      	mov	r0, r6
 8012814:	bd70      	pop	{r4, r5, r6, pc}
 8012816:	220c      	movs	r2, #12
 8012818:	6002      	str	r2, [r0, #0]
 801281a:	e7f9      	b.n	8012810 <_calloc_r+0x12>
 801281c:	462a      	mov	r2, r5
 801281e:	4621      	mov	r1, r4
 8012820:	f7fc fefd 	bl	800f61e <memset>
 8012824:	e7f5      	b.n	8012812 <_calloc_r+0x14>

08012826 <rshift>:
 8012826:	6903      	ldr	r3, [r0, #16]
 8012828:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801282c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012830:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012834:	f100 0414 	add.w	r4, r0, #20
 8012838:	dd45      	ble.n	80128c6 <rshift+0xa0>
 801283a:	f011 011f 	ands.w	r1, r1, #31
 801283e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012842:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012846:	d10c      	bne.n	8012862 <rshift+0x3c>
 8012848:	f100 0710 	add.w	r7, r0, #16
 801284c:	4629      	mov	r1, r5
 801284e:	42b1      	cmp	r1, r6
 8012850:	d334      	bcc.n	80128bc <rshift+0x96>
 8012852:	1a9b      	subs	r3, r3, r2
 8012854:	009b      	lsls	r3, r3, #2
 8012856:	1eea      	subs	r2, r5, #3
 8012858:	4296      	cmp	r6, r2
 801285a:	bf38      	it	cc
 801285c:	2300      	movcc	r3, #0
 801285e:	4423      	add	r3, r4
 8012860:	e015      	b.n	801288e <rshift+0x68>
 8012862:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012866:	f1c1 0820 	rsb	r8, r1, #32
 801286a:	40cf      	lsrs	r7, r1
 801286c:	f105 0e04 	add.w	lr, r5, #4
 8012870:	46a1      	mov	r9, r4
 8012872:	4576      	cmp	r6, lr
 8012874:	46f4      	mov	ip, lr
 8012876:	d815      	bhi.n	80128a4 <rshift+0x7e>
 8012878:	1a9a      	subs	r2, r3, r2
 801287a:	0092      	lsls	r2, r2, #2
 801287c:	3a04      	subs	r2, #4
 801287e:	3501      	adds	r5, #1
 8012880:	42ae      	cmp	r6, r5
 8012882:	bf38      	it	cc
 8012884:	2200      	movcc	r2, #0
 8012886:	18a3      	adds	r3, r4, r2
 8012888:	50a7      	str	r7, [r4, r2]
 801288a:	b107      	cbz	r7, 801288e <rshift+0x68>
 801288c:	3304      	adds	r3, #4
 801288e:	1b1a      	subs	r2, r3, r4
 8012890:	42a3      	cmp	r3, r4
 8012892:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012896:	bf08      	it	eq
 8012898:	2300      	moveq	r3, #0
 801289a:	6102      	str	r2, [r0, #16]
 801289c:	bf08      	it	eq
 801289e:	6143      	streq	r3, [r0, #20]
 80128a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128a4:	f8dc c000 	ldr.w	ip, [ip]
 80128a8:	fa0c fc08 	lsl.w	ip, ip, r8
 80128ac:	ea4c 0707 	orr.w	r7, ip, r7
 80128b0:	f849 7b04 	str.w	r7, [r9], #4
 80128b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80128b8:	40cf      	lsrs	r7, r1
 80128ba:	e7da      	b.n	8012872 <rshift+0x4c>
 80128bc:	f851 cb04 	ldr.w	ip, [r1], #4
 80128c0:	f847 cf04 	str.w	ip, [r7, #4]!
 80128c4:	e7c3      	b.n	801284e <rshift+0x28>
 80128c6:	4623      	mov	r3, r4
 80128c8:	e7e1      	b.n	801288e <rshift+0x68>

080128ca <__hexdig_fun>:
 80128ca:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80128ce:	2b09      	cmp	r3, #9
 80128d0:	d802      	bhi.n	80128d8 <__hexdig_fun+0xe>
 80128d2:	3820      	subs	r0, #32
 80128d4:	b2c0      	uxtb	r0, r0
 80128d6:	4770      	bx	lr
 80128d8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80128dc:	2b05      	cmp	r3, #5
 80128de:	d801      	bhi.n	80128e4 <__hexdig_fun+0x1a>
 80128e0:	3847      	subs	r0, #71	@ 0x47
 80128e2:	e7f7      	b.n	80128d4 <__hexdig_fun+0xa>
 80128e4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80128e8:	2b05      	cmp	r3, #5
 80128ea:	d801      	bhi.n	80128f0 <__hexdig_fun+0x26>
 80128ec:	3827      	subs	r0, #39	@ 0x27
 80128ee:	e7f1      	b.n	80128d4 <__hexdig_fun+0xa>
 80128f0:	2000      	movs	r0, #0
 80128f2:	4770      	bx	lr

080128f4 <__gethex>:
 80128f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128f8:	b085      	sub	sp, #20
 80128fa:	468a      	mov	sl, r1
 80128fc:	9302      	str	r3, [sp, #8]
 80128fe:	680b      	ldr	r3, [r1, #0]
 8012900:	9001      	str	r0, [sp, #4]
 8012902:	4690      	mov	r8, r2
 8012904:	1c9c      	adds	r4, r3, #2
 8012906:	46a1      	mov	r9, r4
 8012908:	f814 0b01 	ldrb.w	r0, [r4], #1
 801290c:	2830      	cmp	r0, #48	@ 0x30
 801290e:	d0fa      	beq.n	8012906 <__gethex+0x12>
 8012910:	eba9 0303 	sub.w	r3, r9, r3
 8012914:	f1a3 0b02 	sub.w	fp, r3, #2
 8012918:	f7ff ffd7 	bl	80128ca <__hexdig_fun>
 801291c:	4605      	mov	r5, r0
 801291e:	2800      	cmp	r0, #0
 8012920:	d168      	bne.n	80129f4 <__gethex+0x100>
 8012922:	49a0      	ldr	r1, [pc, #640]	@ (8012ba4 <__gethex+0x2b0>)
 8012924:	2201      	movs	r2, #1
 8012926:	4648      	mov	r0, r9
 8012928:	f7fc fe90 	bl	800f64c <strncmp>
 801292c:	4607      	mov	r7, r0
 801292e:	2800      	cmp	r0, #0
 8012930:	d167      	bne.n	8012a02 <__gethex+0x10e>
 8012932:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012936:	4626      	mov	r6, r4
 8012938:	f7ff ffc7 	bl	80128ca <__hexdig_fun>
 801293c:	2800      	cmp	r0, #0
 801293e:	d062      	beq.n	8012a06 <__gethex+0x112>
 8012940:	4623      	mov	r3, r4
 8012942:	7818      	ldrb	r0, [r3, #0]
 8012944:	2830      	cmp	r0, #48	@ 0x30
 8012946:	4699      	mov	r9, r3
 8012948:	f103 0301 	add.w	r3, r3, #1
 801294c:	d0f9      	beq.n	8012942 <__gethex+0x4e>
 801294e:	f7ff ffbc 	bl	80128ca <__hexdig_fun>
 8012952:	fab0 f580 	clz	r5, r0
 8012956:	096d      	lsrs	r5, r5, #5
 8012958:	f04f 0b01 	mov.w	fp, #1
 801295c:	464a      	mov	r2, r9
 801295e:	4616      	mov	r6, r2
 8012960:	3201      	adds	r2, #1
 8012962:	7830      	ldrb	r0, [r6, #0]
 8012964:	f7ff ffb1 	bl	80128ca <__hexdig_fun>
 8012968:	2800      	cmp	r0, #0
 801296a:	d1f8      	bne.n	801295e <__gethex+0x6a>
 801296c:	498d      	ldr	r1, [pc, #564]	@ (8012ba4 <__gethex+0x2b0>)
 801296e:	2201      	movs	r2, #1
 8012970:	4630      	mov	r0, r6
 8012972:	f7fc fe6b 	bl	800f64c <strncmp>
 8012976:	2800      	cmp	r0, #0
 8012978:	d13f      	bne.n	80129fa <__gethex+0x106>
 801297a:	b944      	cbnz	r4, 801298e <__gethex+0x9a>
 801297c:	1c74      	adds	r4, r6, #1
 801297e:	4622      	mov	r2, r4
 8012980:	4616      	mov	r6, r2
 8012982:	3201      	adds	r2, #1
 8012984:	7830      	ldrb	r0, [r6, #0]
 8012986:	f7ff ffa0 	bl	80128ca <__hexdig_fun>
 801298a:	2800      	cmp	r0, #0
 801298c:	d1f8      	bne.n	8012980 <__gethex+0x8c>
 801298e:	1ba4      	subs	r4, r4, r6
 8012990:	00a7      	lsls	r7, r4, #2
 8012992:	7833      	ldrb	r3, [r6, #0]
 8012994:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012998:	2b50      	cmp	r3, #80	@ 0x50
 801299a:	d13e      	bne.n	8012a1a <__gethex+0x126>
 801299c:	7873      	ldrb	r3, [r6, #1]
 801299e:	2b2b      	cmp	r3, #43	@ 0x2b
 80129a0:	d033      	beq.n	8012a0a <__gethex+0x116>
 80129a2:	2b2d      	cmp	r3, #45	@ 0x2d
 80129a4:	d034      	beq.n	8012a10 <__gethex+0x11c>
 80129a6:	1c71      	adds	r1, r6, #1
 80129a8:	2400      	movs	r4, #0
 80129aa:	7808      	ldrb	r0, [r1, #0]
 80129ac:	f7ff ff8d 	bl	80128ca <__hexdig_fun>
 80129b0:	1e43      	subs	r3, r0, #1
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	2b18      	cmp	r3, #24
 80129b6:	d830      	bhi.n	8012a1a <__gethex+0x126>
 80129b8:	f1a0 0210 	sub.w	r2, r0, #16
 80129bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80129c0:	f7ff ff83 	bl	80128ca <__hexdig_fun>
 80129c4:	f100 3cff 	add.w	ip, r0, #4294967295
 80129c8:	fa5f fc8c 	uxtb.w	ip, ip
 80129cc:	f1bc 0f18 	cmp.w	ip, #24
 80129d0:	f04f 030a 	mov.w	r3, #10
 80129d4:	d91e      	bls.n	8012a14 <__gethex+0x120>
 80129d6:	b104      	cbz	r4, 80129da <__gethex+0xe6>
 80129d8:	4252      	negs	r2, r2
 80129da:	4417      	add	r7, r2
 80129dc:	f8ca 1000 	str.w	r1, [sl]
 80129e0:	b1ed      	cbz	r5, 8012a1e <__gethex+0x12a>
 80129e2:	f1bb 0f00 	cmp.w	fp, #0
 80129e6:	bf0c      	ite	eq
 80129e8:	2506      	moveq	r5, #6
 80129ea:	2500      	movne	r5, #0
 80129ec:	4628      	mov	r0, r5
 80129ee:	b005      	add	sp, #20
 80129f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129f4:	2500      	movs	r5, #0
 80129f6:	462c      	mov	r4, r5
 80129f8:	e7b0      	b.n	801295c <__gethex+0x68>
 80129fa:	2c00      	cmp	r4, #0
 80129fc:	d1c7      	bne.n	801298e <__gethex+0x9a>
 80129fe:	4627      	mov	r7, r4
 8012a00:	e7c7      	b.n	8012992 <__gethex+0x9e>
 8012a02:	464e      	mov	r6, r9
 8012a04:	462f      	mov	r7, r5
 8012a06:	2501      	movs	r5, #1
 8012a08:	e7c3      	b.n	8012992 <__gethex+0x9e>
 8012a0a:	2400      	movs	r4, #0
 8012a0c:	1cb1      	adds	r1, r6, #2
 8012a0e:	e7cc      	b.n	80129aa <__gethex+0xb6>
 8012a10:	2401      	movs	r4, #1
 8012a12:	e7fb      	b.n	8012a0c <__gethex+0x118>
 8012a14:	fb03 0002 	mla	r0, r3, r2, r0
 8012a18:	e7ce      	b.n	80129b8 <__gethex+0xc4>
 8012a1a:	4631      	mov	r1, r6
 8012a1c:	e7de      	b.n	80129dc <__gethex+0xe8>
 8012a1e:	eba6 0309 	sub.w	r3, r6, r9
 8012a22:	3b01      	subs	r3, #1
 8012a24:	4629      	mov	r1, r5
 8012a26:	2b07      	cmp	r3, #7
 8012a28:	dc0a      	bgt.n	8012a40 <__gethex+0x14c>
 8012a2a:	9801      	ldr	r0, [sp, #4]
 8012a2c:	f7fd fde2 	bl	80105f4 <_Balloc>
 8012a30:	4604      	mov	r4, r0
 8012a32:	b940      	cbnz	r0, 8012a46 <__gethex+0x152>
 8012a34:	4b5c      	ldr	r3, [pc, #368]	@ (8012ba8 <__gethex+0x2b4>)
 8012a36:	4602      	mov	r2, r0
 8012a38:	21e4      	movs	r1, #228	@ 0xe4
 8012a3a:	485c      	ldr	r0, [pc, #368]	@ (8012bac <__gethex+0x2b8>)
 8012a3c:	f7fc ff24 	bl	800f888 <__assert_func>
 8012a40:	3101      	adds	r1, #1
 8012a42:	105b      	asrs	r3, r3, #1
 8012a44:	e7ef      	b.n	8012a26 <__gethex+0x132>
 8012a46:	f100 0a14 	add.w	sl, r0, #20
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	4655      	mov	r5, sl
 8012a4e:	469b      	mov	fp, r3
 8012a50:	45b1      	cmp	r9, r6
 8012a52:	d337      	bcc.n	8012ac4 <__gethex+0x1d0>
 8012a54:	f845 bb04 	str.w	fp, [r5], #4
 8012a58:	eba5 050a 	sub.w	r5, r5, sl
 8012a5c:	10ad      	asrs	r5, r5, #2
 8012a5e:	6125      	str	r5, [r4, #16]
 8012a60:	4658      	mov	r0, fp
 8012a62:	f7fd feb9 	bl	80107d8 <__hi0bits>
 8012a66:	016d      	lsls	r5, r5, #5
 8012a68:	f8d8 6000 	ldr.w	r6, [r8]
 8012a6c:	1a2d      	subs	r5, r5, r0
 8012a6e:	42b5      	cmp	r5, r6
 8012a70:	dd54      	ble.n	8012b1c <__gethex+0x228>
 8012a72:	1bad      	subs	r5, r5, r6
 8012a74:	4629      	mov	r1, r5
 8012a76:	4620      	mov	r0, r4
 8012a78:	f7fe fa4d 	bl	8010f16 <__any_on>
 8012a7c:	4681      	mov	r9, r0
 8012a7e:	b178      	cbz	r0, 8012aa0 <__gethex+0x1ac>
 8012a80:	1e6b      	subs	r3, r5, #1
 8012a82:	1159      	asrs	r1, r3, #5
 8012a84:	f003 021f 	and.w	r2, r3, #31
 8012a88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012a8c:	f04f 0901 	mov.w	r9, #1
 8012a90:	fa09 f202 	lsl.w	r2, r9, r2
 8012a94:	420a      	tst	r2, r1
 8012a96:	d003      	beq.n	8012aa0 <__gethex+0x1ac>
 8012a98:	454b      	cmp	r3, r9
 8012a9a:	dc36      	bgt.n	8012b0a <__gethex+0x216>
 8012a9c:	f04f 0902 	mov.w	r9, #2
 8012aa0:	4629      	mov	r1, r5
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	f7ff febf 	bl	8012826 <rshift>
 8012aa8:	442f      	add	r7, r5
 8012aaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012aae:	42bb      	cmp	r3, r7
 8012ab0:	da42      	bge.n	8012b38 <__gethex+0x244>
 8012ab2:	9801      	ldr	r0, [sp, #4]
 8012ab4:	4621      	mov	r1, r4
 8012ab6:	f7fd fddd 	bl	8010674 <_Bfree>
 8012aba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012abc:	2300      	movs	r3, #0
 8012abe:	6013      	str	r3, [r2, #0]
 8012ac0:	25a3      	movs	r5, #163	@ 0xa3
 8012ac2:	e793      	b.n	80129ec <__gethex+0xf8>
 8012ac4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012ac8:	2a2e      	cmp	r2, #46	@ 0x2e
 8012aca:	d012      	beq.n	8012af2 <__gethex+0x1fe>
 8012acc:	2b20      	cmp	r3, #32
 8012ace:	d104      	bne.n	8012ada <__gethex+0x1e6>
 8012ad0:	f845 bb04 	str.w	fp, [r5], #4
 8012ad4:	f04f 0b00 	mov.w	fp, #0
 8012ad8:	465b      	mov	r3, fp
 8012ada:	7830      	ldrb	r0, [r6, #0]
 8012adc:	9303      	str	r3, [sp, #12]
 8012ade:	f7ff fef4 	bl	80128ca <__hexdig_fun>
 8012ae2:	9b03      	ldr	r3, [sp, #12]
 8012ae4:	f000 000f 	and.w	r0, r0, #15
 8012ae8:	4098      	lsls	r0, r3
 8012aea:	ea4b 0b00 	orr.w	fp, fp, r0
 8012aee:	3304      	adds	r3, #4
 8012af0:	e7ae      	b.n	8012a50 <__gethex+0x15c>
 8012af2:	45b1      	cmp	r9, r6
 8012af4:	d8ea      	bhi.n	8012acc <__gethex+0x1d8>
 8012af6:	492b      	ldr	r1, [pc, #172]	@ (8012ba4 <__gethex+0x2b0>)
 8012af8:	9303      	str	r3, [sp, #12]
 8012afa:	2201      	movs	r2, #1
 8012afc:	4630      	mov	r0, r6
 8012afe:	f7fc fda5 	bl	800f64c <strncmp>
 8012b02:	9b03      	ldr	r3, [sp, #12]
 8012b04:	2800      	cmp	r0, #0
 8012b06:	d1e1      	bne.n	8012acc <__gethex+0x1d8>
 8012b08:	e7a2      	b.n	8012a50 <__gethex+0x15c>
 8012b0a:	1ea9      	subs	r1, r5, #2
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	f7fe fa02 	bl	8010f16 <__any_on>
 8012b12:	2800      	cmp	r0, #0
 8012b14:	d0c2      	beq.n	8012a9c <__gethex+0x1a8>
 8012b16:	f04f 0903 	mov.w	r9, #3
 8012b1a:	e7c1      	b.n	8012aa0 <__gethex+0x1ac>
 8012b1c:	da09      	bge.n	8012b32 <__gethex+0x23e>
 8012b1e:	1b75      	subs	r5, r6, r5
 8012b20:	4621      	mov	r1, r4
 8012b22:	9801      	ldr	r0, [sp, #4]
 8012b24:	462a      	mov	r2, r5
 8012b26:	f7fd ffbd 	bl	8010aa4 <__lshift>
 8012b2a:	1b7f      	subs	r7, r7, r5
 8012b2c:	4604      	mov	r4, r0
 8012b2e:	f100 0a14 	add.w	sl, r0, #20
 8012b32:	f04f 0900 	mov.w	r9, #0
 8012b36:	e7b8      	b.n	8012aaa <__gethex+0x1b6>
 8012b38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012b3c:	42bd      	cmp	r5, r7
 8012b3e:	dd6f      	ble.n	8012c20 <__gethex+0x32c>
 8012b40:	1bed      	subs	r5, r5, r7
 8012b42:	42ae      	cmp	r6, r5
 8012b44:	dc34      	bgt.n	8012bb0 <__gethex+0x2bc>
 8012b46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012b4a:	2b02      	cmp	r3, #2
 8012b4c:	d022      	beq.n	8012b94 <__gethex+0x2a0>
 8012b4e:	2b03      	cmp	r3, #3
 8012b50:	d024      	beq.n	8012b9c <__gethex+0x2a8>
 8012b52:	2b01      	cmp	r3, #1
 8012b54:	d115      	bne.n	8012b82 <__gethex+0x28e>
 8012b56:	42ae      	cmp	r6, r5
 8012b58:	d113      	bne.n	8012b82 <__gethex+0x28e>
 8012b5a:	2e01      	cmp	r6, #1
 8012b5c:	d10b      	bne.n	8012b76 <__gethex+0x282>
 8012b5e:	9a02      	ldr	r2, [sp, #8]
 8012b60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012b64:	6013      	str	r3, [r2, #0]
 8012b66:	2301      	movs	r3, #1
 8012b68:	6123      	str	r3, [r4, #16]
 8012b6a:	f8ca 3000 	str.w	r3, [sl]
 8012b6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b70:	2562      	movs	r5, #98	@ 0x62
 8012b72:	601c      	str	r4, [r3, #0]
 8012b74:	e73a      	b.n	80129ec <__gethex+0xf8>
 8012b76:	1e71      	subs	r1, r6, #1
 8012b78:	4620      	mov	r0, r4
 8012b7a:	f7fe f9cc 	bl	8010f16 <__any_on>
 8012b7e:	2800      	cmp	r0, #0
 8012b80:	d1ed      	bne.n	8012b5e <__gethex+0x26a>
 8012b82:	9801      	ldr	r0, [sp, #4]
 8012b84:	4621      	mov	r1, r4
 8012b86:	f7fd fd75 	bl	8010674 <_Bfree>
 8012b8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	6013      	str	r3, [r2, #0]
 8012b90:	2550      	movs	r5, #80	@ 0x50
 8012b92:	e72b      	b.n	80129ec <__gethex+0xf8>
 8012b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d1f3      	bne.n	8012b82 <__gethex+0x28e>
 8012b9a:	e7e0      	b.n	8012b5e <__gethex+0x26a>
 8012b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d1dd      	bne.n	8012b5e <__gethex+0x26a>
 8012ba2:	e7ee      	b.n	8012b82 <__gethex+0x28e>
 8012ba4:	08014b68 	.word	0x08014b68
 8012ba8:	080149fe 	.word	0x080149fe
 8012bac:	08014cf5 	.word	0x08014cf5
 8012bb0:	1e6f      	subs	r7, r5, #1
 8012bb2:	f1b9 0f00 	cmp.w	r9, #0
 8012bb6:	d130      	bne.n	8012c1a <__gethex+0x326>
 8012bb8:	b127      	cbz	r7, 8012bc4 <__gethex+0x2d0>
 8012bba:	4639      	mov	r1, r7
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	f7fe f9aa 	bl	8010f16 <__any_on>
 8012bc2:	4681      	mov	r9, r0
 8012bc4:	117a      	asrs	r2, r7, #5
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012bcc:	f007 071f 	and.w	r7, r7, #31
 8012bd0:	40bb      	lsls	r3, r7
 8012bd2:	4213      	tst	r3, r2
 8012bd4:	4629      	mov	r1, r5
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	bf18      	it	ne
 8012bda:	f049 0902 	orrne.w	r9, r9, #2
 8012bde:	f7ff fe22 	bl	8012826 <rshift>
 8012be2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012be6:	1b76      	subs	r6, r6, r5
 8012be8:	2502      	movs	r5, #2
 8012bea:	f1b9 0f00 	cmp.w	r9, #0
 8012bee:	d047      	beq.n	8012c80 <__gethex+0x38c>
 8012bf0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012bf4:	2b02      	cmp	r3, #2
 8012bf6:	d015      	beq.n	8012c24 <__gethex+0x330>
 8012bf8:	2b03      	cmp	r3, #3
 8012bfa:	d017      	beq.n	8012c2c <__gethex+0x338>
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d109      	bne.n	8012c14 <__gethex+0x320>
 8012c00:	f019 0f02 	tst.w	r9, #2
 8012c04:	d006      	beq.n	8012c14 <__gethex+0x320>
 8012c06:	f8da 3000 	ldr.w	r3, [sl]
 8012c0a:	ea49 0903 	orr.w	r9, r9, r3
 8012c0e:	f019 0f01 	tst.w	r9, #1
 8012c12:	d10e      	bne.n	8012c32 <__gethex+0x33e>
 8012c14:	f045 0510 	orr.w	r5, r5, #16
 8012c18:	e032      	b.n	8012c80 <__gethex+0x38c>
 8012c1a:	f04f 0901 	mov.w	r9, #1
 8012c1e:	e7d1      	b.n	8012bc4 <__gethex+0x2d0>
 8012c20:	2501      	movs	r5, #1
 8012c22:	e7e2      	b.n	8012bea <__gethex+0x2f6>
 8012c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c26:	f1c3 0301 	rsb	r3, r3, #1
 8012c2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d0f0      	beq.n	8012c14 <__gethex+0x320>
 8012c32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012c36:	f104 0314 	add.w	r3, r4, #20
 8012c3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012c3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012c42:	f04f 0c00 	mov.w	ip, #0
 8012c46:	4618      	mov	r0, r3
 8012c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012c50:	d01b      	beq.n	8012c8a <__gethex+0x396>
 8012c52:	3201      	adds	r2, #1
 8012c54:	6002      	str	r2, [r0, #0]
 8012c56:	2d02      	cmp	r5, #2
 8012c58:	f104 0314 	add.w	r3, r4, #20
 8012c5c:	d13c      	bne.n	8012cd8 <__gethex+0x3e4>
 8012c5e:	f8d8 2000 	ldr.w	r2, [r8]
 8012c62:	3a01      	subs	r2, #1
 8012c64:	42b2      	cmp	r2, r6
 8012c66:	d109      	bne.n	8012c7c <__gethex+0x388>
 8012c68:	1171      	asrs	r1, r6, #5
 8012c6a:	2201      	movs	r2, #1
 8012c6c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012c70:	f006 061f 	and.w	r6, r6, #31
 8012c74:	fa02 f606 	lsl.w	r6, r2, r6
 8012c78:	421e      	tst	r6, r3
 8012c7a:	d13a      	bne.n	8012cf2 <__gethex+0x3fe>
 8012c7c:	f045 0520 	orr.w	r5, r5, #32
 8012c80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c82:	601c      	str	r4, [r3, #0]
 8012c84:	9b02      	ldr	r3, [sp, #8]
 8012c86:	601f      	str	r7, [r3, #0]
 8012c88:	e6b0      	b.n	80129ec <__gethex+0xf8>
 8012c8a:	4299      	cmp	r1, r3
 8012c8c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012c90:	d8d9      	bhi.n	8012c46 <__gethex+0x352>
 8012c92:	68a3      	ldr	r3, [r4, #8]
 8012c94:	459b      	cmp	fp, r3
 8012c96:	db17      	blt.n	8012cc8 <__gethex+0x3d4>
 8012c98:	6861      	ldr	r1, [r4, #4]
 8012c9a:	9801      	ldr	r0, [sp, #4]
 8012c9c:	3101      	adds	r1, #1
 8012c9e:	f7fd fca9 	bl	80105f4 <_Balloc>
 8012ca2:	4681      	mov	r9, r0
 8012ca4:	b918      	cbnz	r0, 8012cae <__gethex+0x3ba>
 8012ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8012d10 <__gethex+0x41c>)
 8012ca8:	4602      	mov	r2, r0
 8012caa:	2184      	movs	r1, #132	@ 0x84
 8012cac:	e6c5      	b.n	8012a3a <__gethex+0x146>
 8012cae:	6922      	ldr	r2, [r4, #16]
 8012cb0:	3202      	adds	r2, #2
 8012cb2:	f104 010c 	add.w	r1, r4, #12
 8012cb6:	0092      	lsls	r2, r2, #2
 8012cb8:	300c      	adds	r0, #12
 8012cba:	f7fc fdd0 	bl	800f85e <memcpy>
 8012cbe:	4621      	mov	r1, r4
 8012cc0:	9801      	ldr	r0, [sp, #4]
 8012cc2:	f7fd fcd7 	bl	8010674 <_Bfree>
 8012cc6:	464c      	mov	r4, r9
 8012cc8:	6923      	ldr	r3, [r4, #16]
 8012cca:	1c5a      	adds	r2, r3, #1
 8012ccc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012cd0:	6122      	str	r2, [r4, #16]
 8012cd2:	2201      	movs	r2, #1
 8012cd4:	615a      	str	r2, [r3, #20]
 8012cd6:	e7be      	b.n	8012c56 <__gethex+0x362>
 8012cd8:	6922      	ldr	r2, [r4, #16]
 8012cda:	455a      	cmp	r2, fp
 8012cdc:	dd0b      	ble.n	8012cf6 <__gethex+0x402>
 8012cde:	2101      	movs	r1, #1
 8012ce0:	4620      	mov	r0, r4
 8012ce2:	f7ff fda0 	bl	8012826 <rshift>
 8012ce6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012cea:	3701      	adds	r7, #1
 8012cec:	42bb      	cmp	r3, r7
 8012cee:	f6ff aee0 	blt.w	8012ab2 <__gethex+0x1be>
 8012cf2:	2501      	movs	r5, #1
 8012cf4:	e7c2      	b.n	8012c7c <__gethex+0x388>
 8012cf6:	f016 061f 	ands.w	r6, r6, #31
 8012cfa:	d0fa      	beq.n	8012cf2 <__gethex+0x3fe>
 8012cfc:	4453      	add	r3, sl
 8012cfe:	f1c6 0620 	rsb	r6, r6, #32
 8012d02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012d06:	f7fd fd67 	bl	80107d8 <__hi0bits>
 8012d0a:	42b0      	cmp	r0, r6
 8012d0c:	dbe7      	blt.n	8012cde <__gethex+0x3ea>
 8012d0e:	e7f0      	b.n	8012cf2 <__gethex+0x3fe>
 8012d10:	080149fe 	.word	0x080149fe

08012d14 <L_shift>:
 8012d14:	f1c2 0208 	rsb	r2, r2, #8
 8012d18:	0092      	lsls	r2, r2, #2
 8012d1a:	b570      	push	{r4, r5, r6, lr}
 8012d1c:	f1c2 0620 	rsb	r6, r2, #32
 8012d20:	6843      	ldr	r3, [r0, #4]
 8012d22:	6804      	ldr	r4, [r0, #0]
 8012d24:	fa03 f506 	lsl.w	r5, r3, r6
 8012d28:	432c      	orrs	r4, r5
 8012d2a:	40d3      	lsrs	r3, r2
 8012d2c:	6004      	str	r4, [r0, #0]
 8012d2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012d32:	4288      	cmp	r0, r1
 8012d34:	d3f4      	bcc.n	8012d20 <L_shift+0xc>
 8012d36:	bd70      	pop	{r4, r5, r6, pc}

08012d38 <__match>:
 8012d38:	b530      	push	{r4, r5, lr}
 8012d3a:	6803      	ldr	r3, [r0, #0]
 8012d3c:	3301      	adds	r3, #1
 8012d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d42:	b914      	cbnz	r4, 8012d4a <__match+0x12>
 8012d44:	6003      	str	r3, [r0, #0]
 8012d46:	2001      	movs	r0, #1
 8012d48:	bd30      	pop	{r4, r5, pc}
 8012d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d4e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012d52:	2d19      	cmp	r5, #25
 8012d54:	bf98      	it	ls
 8012d56:	3220      	addls	r2, #32
 8012d58:	42a2      	cmp	r2, r4
 8012d5a:	d0f0      	beq.n	8012d3e <__match+0x6>
 8012d5c:	2000      	movs	r0, #0
 8012d5e:	e7f3      	b.n	8012d48 <__match+0x10>

08012d60 <__hexnan>:
 8012d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d64:	680b      	ldr	r3, [r1, #0]
 8012d66:	6801      	ldr	r1, [r0, #0]
 8012d68:	115e      	asrs	r6, r3, #5
 8012d6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012d6e:	f013 031f 	ands.w	r3, r3, #31
 8012d72:	b087      	sub	sp, #28
 8012d74:	bf18      	it	ne
 8012d76:	3604      	addne	r6, #4
 8012d78:	2500      	movs	r5, #0
 8012d7a:	1f37      	subs	r7, r6, #4
 8012d7c:	4682      	mov	sl, r0
 8012d7e:	4690      	mov	r8, r2
 8012d80:	9301      	str	r3, [sp, #4]
 8012d82:	f846 5c04 	str.w	r5, [r6, #-4]
 8012d86:	46b9      	mov	r9, r7
 8012d88:	463c      	mov	r4, r7
 8012d8a:	9502      	str	r5, [sp, #8]
 8012d8c:	46ab      	mov	fp, r5
 8012d8e:	784a      	ldrb	r2, [r1, #1]
 8012d90:	1c4b      	adds	r3, r1, #1
 8012d92:	9303      	str	r3, [sp, #12]
 8012d94:	b342      	cbz	r2, 8012de8 <__hexnan+0x88>
 8012d96:	4610      	mov	r0, r2
 8012d98:	9105      	str	r1, [sp, #20]
 8012d9a:	9204      	str	r2, [sp, #16]
 8012d9c:	f7ff fd95 	bl	80128ca <__hexdig_fun>
 8012da0:	2800      	cmp	r0, #0
 8012da2:	d151      	bne.n	8012e48 <__hexnan+0xe8>
 8012da4:	9a04      	ldr	r2, [sp, #16]
 8012da6:	9905      	ldr	r1, [sp, #20]
 8012da8:	2a20      	cmp	r2, #32
 8012daa:	d818      	bhi.n	8012dde <__hexnan+0x7e>
 8012dac:	9b02      	ldr	r3, [sp, #8]
 8012dae:	459b      	cmp	fp, r3
 8012db0:	dd13      	ble.n	8012dda <__hexnan+0x7a>
 8012db2:	454c      	cmp	r4, r9
 8012db4:	d206      	bcs.n	8012dc4 <__hexnan+0x64>
 8012db6:	2d07      	cmp	r5, #7
 8012db8:	dc04      	bgt.n	8012dc4 <__hexnan+0x64>
 8012dba:	462a      	mov	r2, r5
 8012dbc:	4649      	mov	r1, r9
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	f7ff ffa8 	bl	8012d14 <L_shift>
 8012dc4:	4544      	cmp	r4, r8
 8012dc6:	d952      	bls.n	8012e6e <__hexnan+0x10e>
 8012dc8:	2300      	movs	r3, #0
 8012dca:	f1a4 0904 	sub.w	r9, r4, #4
 8012dce:	f844 3c04 	str.w	r3, [r4, #-4]
 8012dd2:	f8cd b008 	str.w	fp, [sp, #8]
 8012dd6:	464c      	mov	r4, r9
 8012dd8:	461d      	mov	r5, r3
 8012dda:	9903      	ldr	r1, [sp, #12]
 8012ddc:	e7d7      	b.n	8012d8e <__hexnan+0x2e>
 8012dde:	2a29      	cmp	r2, #41	@ 0x29
 8012de0:	d157      	bne.n	8012e92 <__hexnan+0x132>
 8012de2:	3102      	adds	r1, #2
 8012de4:	f8ca 1000 	str.w	r1, [sl]
 8012de8:	f1bb 0f00 	cmp.w	fp, #0
 8012dec:	d051      	beq.n	8012e92 <__hexnan+0x132>
 8012dee:	454c      	cmp	r4, r9
 8012df0:	d206      	bcs.n	8012e00 <__hexnan+0xa0>
 8012df2:	2d07      	cmp	r5, #7
 8012df4:	dc04      	bgt.n	8012e00 <__hexnan+0xa0>
 8012df6:	462a      	mov	r2, r5
 8012df8:	4649      	mov	r1, r9
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	f7ff ff8a 	bl	8012d14 <L_shift>
 8012e00:	4544      	cmp	r4, r8
 8012e02:	d936      	bls.n	8012e72 <__hexnan+0x112>
 8012e04:	f1a8 0204 	sub.w	r2, r8, #4
 8012e08:	4623      	mov	r3, r4
 8012e0a:	f853 1b04 	ldr.w	r1, [r3], #4
 8012e0e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012e12:	429f      	cmp	r7, r3
 8012e14:	d2f9      	bcs.n	8012e0a <__hexnan+0xaa>
 8012e16:	1b3b      	subs	r3, r7, r4
 8012e18:	f023 0303 	bic.w	r3, r3, #3
 8012e1c:	3304      	adds	r3, #4
 8012e1e:	3401      	adds	r4, #1
 8012e20:	3e03      	subs	r6, #3
 8012e22:	42b4      	cmp	r4, r6
 8012e24:	bf88      	it	hi
 8012e26:	2304      	movhi	r3, #4
 8012e28:	4443      	add	r3, r8
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	f843 2b04 	str.w	r2, [r3], #4
 8012e30:	429f      	cmp	r7, r3
 8012e32:	d2fb      	bcs.n	8012e2c <__hexnan+0xcc>
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	b91b      	cbnz	r3, 8012e40 <__hexnan+0xe0>
 8012e38:	4547      	cmp	r7, r8
 8012e3a:	d128      	bne.n	8012e8e <__hexnan+0x12e>
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	603b      	str	r3, [r7, #0]
 8012e40:	2005      	movs	r0, #5
 8012e42:	b007      	add	sp, #28
 8012e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e48:	3501      	adds	r5, #1
 8012e4a:	2d08      	cmp	r5, #8
 8012e4c:	f10b 0b01 	add.w	fp, fp, #1
 8012e50:	dd06      	ble.n	8012e60 <__hexnan+0x100>
 8012e52:	4544      	cmp	r4, r8
 8012e54:	d9c1      	bls.n	8012dda <__hexnan+0x7a>
 8012e56:	2300      	movs	r3, #0
 8012e58:	f844 3c04 	str.w	r3, [r4, #-4]
 8012e5c:	2501      	movs	r5, #1
 8012e5e:	3c04      	subs	r4, #4
 8012e60:	6822      	ldr	r2, [r4, #0]
 8012e62:	f000 000f 	and.w	r0, r0, #15
 8012e66:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012e6a:	6020      	str	r0, [r4, #0]
 8012e6c:	e7b5      	b.n	8012dda <__hexnan+0x7a>
 8012e6e:	2508      	movs	r5, #8
 8012e70:	e7b3      	b.n	8012dda <__hexnan+0x7a>
 8012e72:	9b01      	ldr	r3, [sp, #4]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d0dd      	beq.n	8012e34 <__hexnan+0xd4>
 8012e78:	f1c3 0320 	rsb	r3, r3, #32
 8012e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8012e80:	40da      	lsrs	r2, r3
 8012e82:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012e86:	4013      	ands	r3, r2
 8012e88:	f846 3c04 	str.w	r3, [r6, #-4]
 8012e8c:	e7d2      	b.n	8012e34 <__hexnan+0xd4>
 8012e8e:	3f04      	subs	r7, #4
 8012e90:	e7d0      	b.n	8012e34 <__hexnan+0xd4>
 8012e92:	2004      	movs	r0, #4
 8012e94:	e7d5      	b.n	8012e42 <__hexnan+0xe2>

08012e96 <__ascii_mbtowc>:
 8012e96:	b082      	sub	sp, #8
 8012e98:	b901      	cbnz	r1, 8012e9c <__ascii_mbtowc+0x6>
 8012e9a:	a901      	add	r1, sp, #4
 8012e9c:	b142      	cbz	r2, 8012eb0 <__ascii_mbtowc+0x1a>
 8012e9e:	b14b      	cbz	r3, 8012eb4 <__ascii_mbtowc+0x1e>
 8012ea0:	7813      	ldrb	r3, [r2, #0]
 8012ea2:	600b      	str	r3, [r1, #0]
 8012ea4:	7812      	ldrb	r2, [r2, #0]
 8012ea6:	1e10      	subs	r0, r2, #0
 8012ea8:	bf18      	it	ne
 8012eaa:	2001      	movne	r0, #1
 8012eac:	b002      	add	sp, #8
 8012eae:	4770      	bx	lr
 8012eb0:	4610      	mov	r0, r2
 8012eb2:	e7fb      	b.n	8012eac <__ascii_mbtowc+0x16>
 8012eb4:	f06f 0001 	mvn.w	r0, #1
 8012eb8:	e7f8      	b.n	8012eac <__ascii_mbtowc+0x16>

08012eba <_realloc_r>:
 8012eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ebe:	4680      	mov	r8, r0
 8012ec0:	4615      	mov	r5, r2
 8012ec2:	460c      	mov	r4, r1
 8012ec4:	b921      	cbnz	r1, 8012ed0 <_realloc_r+0x16>
 8012ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012eca:	4611      	mov	r1, r2
 8012ecc:	f7fb bae8 	b.w	800e4a0 <_malloc_r>
 8012ed0:	b92a      	cbnz	r2, 8012ede <_realloc_r+0x24>
 8012ed2:	f7fd fb45 	bl	8010560 <_free_r>
 8012ed6:	2400      	movs	r4, #0
 8012ed8:	4620      	mov	r0, r4
 8012eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ede:	f000 fab1 	bl	8013444 <_malloc_usable_size_r>
 8012ee2:	4285      	cmp	r5, r0
 8012ee4:	4606      	mov	r6, r0
 8012ee6:	d802      	bhi.n	8012eee <_realloc_r+0x34>
 8012ee8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012eec:	d8f4      	bhi.n	8012ed8 <_realloc_r+0x1e>
 8012eee:	4629      	mov	r1, r5
 8012ef0:	4640      	mov	r0, r8
 8012ef2:	f7fb fad5 	bl	800e4a0 <_malloc_r>
 8012ef6:	4607      	mov	r7, r0
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	d0ec      	beq.n	8012ed6 <_realloc_r+0x1c>
 8012efc:	42b5      	cmp	r5, r6
 8012efe:	462a      	mov	r2, r5
 8012f00:	4621      	mov	r1, r4
 8012f02:	bf28      	it	cs
 8012f04:	4632      	movcs	r2, r6
 8012f06:	f7fc fcaa 	bl	800f85e <memcpy>
 8012f0a:	4621      	mov	r1, r4
 8012f0c:	4640      	mov	r0, r8
 8012f0e:	f7fd fb27 	bl	8010560 <_free_r>
 8012f12:	463c      	mov	r4, r7
 8012f14:	e7e0      	b.n	8012ed8 <_realloc_r+0x1e>
	...

08012f18 <_strtoul_l.constprop.0>:
 8012f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f1c:	4e34      	ldr	r6, [pc, #208]	@ (8012ff0 <_strtoul_l.constprop.0+0xd8>)
 8012f1e:	4686      	mov	lr, r0
 8012f20:	460d      	mov	r5, r1
 8012f22:	4628      	mov	r0, r5
 8012f24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f28:	5d37      	ldrb	r7, [r6, r4]
 8012f2a:	f017 0708 	ands.w	r7, r7, #8
 8012f2e:	d1f8      	bne.n	8012f22 <_strtoul_l.constprop.0+0xa>
 8012f30:	2c2d      	cmp	r4, #45	@ 0x2d
 8012f32:	d12f      	bne.n	8012f94 <_strtoul_l.constprop.0+0x7c>
 8012f34:	782c      	ldrb	r4, [r5, #0]
 8012f36:	2701      	movs	r7, #1
 8012f38:	1c85      	adds	r5, r0, #2
 8012f3a:	f033 0010 	bics.w	r0, r3, #16
 8012f3e:	d109      	bne.n	8012f54 <_strtoul_l.constprop.0+0x3c>
 8012f40:	2c30      	cmp	r4, #48	@ 0x30
 8012f42:	d12c      	bne.n	8012f9e <_strtoul_l.constprop.0+0x86>
 8012f44:	7828      	ldrb	r0, [r5, #0]
 8012f46:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012f4a:	2858      	cmp	r0, #88	@ 0x58
 8012f4c:	d127      	bne.n	8012f9e <_strtoul_l.constprop.0+0x86>
 8012f4e:	786c      	ldrb	r4, [r5, #1]
 8012f50:	2310      	movs	r3, #16
 8012f52:	3502      	adds	r5, #2
 8012f54:	f04f 38ff 	mov.w	r8, #4294967295
 8012f58:	2600      	movs	r6, #0
 8012f5a:	fbb8 f8f3 	udiv	r8, r8, r3
 8012f5e:	fb03 f908 	mul.w	r9, r3, r8
 8012f62:	ea6f 0909 	mvn.w	r9, r9
 8012f66:	4630      	mov	r0, r6
 8012f68:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012f6c:	f1bc 0f09 	cmp.w	ip, #9
 8012f70:	d81c      	bhi.n	8012fac <_strtoul_l.constprop.0+0x94>
 8012f72:	4664      	mov	r4, ip
 8012f74:	42a3      	cmp	r3, r4
 8012f76:	dd2a      	ble.n	8012fce <_strtoul_l.constprop.0+0xb6>
 8012f78:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012f7c:	d007      	beq.n	8012f8e <_strtoul_l.constprop.0+0x76>
 8012f7e:	4580      	cmp	r8, r0
 8012f80:	d322      	bcc.n	8012fc8 <_strtoul_l.constprop.0+0xb0>
 8012f82:	d101      	bne.n	8012f88 <_strtoul_l.constprop.0+0x70>
 8012f84:	45a1      	cmp	r9, r4
 8012f86:	db1f      	blt.n	8012fc8 <_strtoul_l.constprop.0+0xb0>
 8012f88:	fb00 4003 	mla	r0, r0, r3, r4
 8012f8c:	2601      	movs	r6, #1
 8012f8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f92:	e7e9      	b.n	8012f68 <_strtoul_l.constprop.0+0x50>
 8012f94:	2c2b      	cmp	r4, #43	@ 0x2b
 8012f96:	bf04      	itt	eq
 8012f98:	782c      	ldrbeq	r4, [r5, #0]
 8012f9a:	1c85      	addeq	r5, r0, #2
 8012f9c:	e7cd      	b.n	8012f3a <_strtoul_l.constprop.0+0x22>
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d1d8      	bne.n	8012f54 <_strtoul_l.constprop.0+0x3c>
 8012fa2:	2c30      	cmp	r4, #48	@ 0x30
 8012fa4:	bf0c      	ite	eq
 8012fa6:	2308      	moveq	r3, #8
 8012fa8:	230a      	movne	r3, #10
 8012faa:	e7d3      	b.n	8012f54 <_strtoul_l.constprop.0+0x3c>
 8012fac:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012fb0:	f1bc 0f19 	cmp.w	ip, #25
 8012fb4:	d801      	bhi.n	8012fba <_strtoul_l.constprop.0+0xa2>
 8012fb6:	3c37      	subs	r4, #55	@ 0x37
 8012fb8:	e7dc      	b.n	8012f74 <_strtoul_l.constprop.0+0x5c>
 8012fba:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012fbe:	f1bc 0f19 	cmp.w	ip, #25
 8012fc2:	d804      	bhi.n	8012fce <_strtoul_l.constprop.0+0xb6>
 8012fc4:	3c57      	subs	r4, #87	@ 0x57
 8012fc6:	e7d5      	b.n	8012f74 <_strtoul_l.constprop.0+0x5c>
 8012fc8:	f04f 36ff 	mov.w	r6, #4294967295
 8012fcc:	e7df      	b.n	8012f8e <_strtoul_l.constprop.0+0x76>
 8012fce:	1c73      	adds	r3, r6, #1
 8012fd0:	d106      	bne.n	8012fe0 <_strtoul_l.constprop.0+0xc8>
 8012fd2:	2322      	movs	r3, #34	@ 0x22
 8012fd4:	f8ce 3000 	str.w	r3, [lr]
 8012fd8:	4630      	mov	r0, r6
 8012fda:	b932      	cbnz	r2, 8012fea <_strtoul_l.constprop.0+0xd2>
 8012fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012fe0:	b107      	cbz	r7, 8012fe4 <_strtoul_l.constprop.0+0xcc>
 8012fe2:	4240      	negs	r0, r0
 8012fe4:	2a00      	cmp	r2, #0
 8012fe6:	d0f9      	beq.n	8012fdc <_strtoul_l.constprop.0+0xc4>
 8012fe8:	b106      	cbz	r6, 8012fec <_strtoul_l.constprop.0+0xd4>
 8012fea:	1e69      	subs	r1, r5, #1
 8012fec:	6011      	str	r1, [r2, #0]
 8012fee:	e7f5      	b.n	8012fdc <_strtoul_l.constprop.0+0xc4>
 8012ff0:	08014bc1 	.word	0x08014bc1

08012ff4 <_strtoul_r>:
 8012ff4:	f7ff bf90 	b.w	8012f18 <_strtoul_l.constprop.0>

08012ff8 <__ascii_wctomb>:
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	4608      	mov	r0, r1
 8012ffc:	b141      	cbz	r1, 8013010 <__ascii_wctomb+0x18>
 8012ffe:	2aff      	cmp	r2, #255	@ 0xff
 8013000:	d904      	bls.n	801300c <__ascii_wctomb+0x14>
 8013002:	228a      	movs	r2, #138	@ 0x8a
 8013004:	601a      	str	r2, [r3, #0]
 8013006:	f04f 30ff 	mov.w	r0, #4294967295
 801300a:	4770      	bx	lr
 801300c:	700a      	strb	r2, [r1, #0]
 801300e:	2001      	movs	r0, #1
 8013010:	4770      	bx	lr

08013012 <__sfputc_r>:
 8013012:	6893      	ldr	r3, [r2, #8]
 8013014:	3b01      	subs	r3, #1
 8013016:	2b00      	cmp	r3, #0
 8013018:	b410      	push	{r4}
 801301a:	6093      	str	r3, [r2, #8]
 801301c:	da08      	bge.n	8013030 <__sfputc_r+0x1e>
 801301e:	6994      	ldr	r4, [r2, #24]
 8013020:	42a3      	cmp	r3, r4
 8013022:	db01      	blt.n	8013028 <__sfputc_r+0x16>
 8013024:	290a      	cmp	r1, #10
 8013026:	d103      	bne.n	8013030 <__sfputc_r+0x1e>
 8013028:	f85d 4b04 	ldr.w	r4, [sp], #4
 801302c:	f000 b932 	b.w	8013294 <__swbuf_r>
 8013030:	6813      	ldr	r3, [r2, #0]
 8013032:	1c58      	adds	r0, r3, #1
 8013034:	6010      	str	r0, [r2, #0]
 8013036:	7019      	strb	r1, [r3, #0]
 8013038:	4608      	mov	r0, r1
 801303a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801303e:	4770      	bx	lr

08013040 <__sfputs_r>:
 8013040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013042:	4606      	mov	r6, r0
 8013044:	460f      	mov	r7, r1
 8013046:	4614      	mov	r4, r2
 8013048:	18d5      	adds	r5, r2, r3
 801304a:	42ac      	cmp	r4, r5
 801304c:	d101      	bne.n	8013052 <__sfputs_r+0x12>
 801304e:	2000      	movs	r0, #0
 8013050:	e007      	b.n	8013062 <__sfputs_r+0x22>
 8013052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013056:	463a      	mov	r2, r7
 8013058:	4630      	mov	r0, r6
 801305a:	f7ff ffda 	bl	8013012 <__sfputc_r>
 801305e:	1c43      	adds	r3, r0, #1
 8013060:	d1f3      	bne.n	801304a <__sfputs_r+0xa>
 8013062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013064 <_vfiprintf_r>:
 8013064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013068:	460d      	mov	r5, r1
 801306a:	b09d      	sub	sp, #116	@ 0x74
 801306c:	4614      	mov	r4, r2
 801306e:	4698      	mov	r8, r3
 8013070:	4606      	mov	r6, r0
 8013072:	b118      	cbz	r0, 801307c <_vfiprintf_r+0x18>
 8013074:	6a03      	ldr	r3, [r0, #32]
 8013076:	b90b      	cbnz	r3, 801307c <_vfiprintf_r+0x18>
 8013078:	f7fc f9d8 	bl	800f42c <__sinit>
 801307c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801307e:	07d9      	lsls	r1, r3, #31
 8013080:	d405      	bmi.n	801308e <_vfiprintf_r+0x2a>
 8013082:	89ab      	ldrh	r3, [r5, #12]
 8013084:	059a      	lsls	r2, r3, #22
 8013086:	d402      	bmi.n	801308e <_vfiprintf_r+0x2a>
 8013088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801308a:	f7fc fbe6 	bl	800f85a <__retarget_lock_acquire_recursive>
 801308e:	89ab      	ldrh	r3, [r5, #12]
 8013090:	071b      	lsls	r3, r3, #28
 8013092:	d501      	bpl.n	8013098 <_vfiprintf_r+0x34>
 8013094:	692b      	ldr	r3, [r5, #16]
 8013096:	b99b      	cbnz	r3, 80130c0 <_vfiprintf_r+0x5c>
 8013098:	4629      	mov	r1, r5
 801309a:	4630      	mov	r0, r6
 801309c:	f000 f938 	bl	8013310 <__swsetup_r>
 80130a0:	b170      	cbz	r0, 80130c0 <_vfiprintf_r+0x5c>
 80130a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80130a4:	07dc      	lsls	r4, r3, #31
 80130a6:	d504      	bpl.n	80130b2 <_vfiprintf_r+0x4e>
 80130a8:	f04f 30ff 	mov.w	r0, #4294967295
 80130ac:	b01d      	add	sp, #116	@ 0x74
 80130ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130b2:	89ab      	ldrh	r3, [r5, #12]
 80130b4:	0598      	lsls	r0, r3, #22
 80130b6:	d4f7      	bmi.n	80130a8 <_vfiprintf_r+0x44>
 80130b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80130ba:	f7fc fbcf 	bl	800f85c <__retarget_lock_release_recursive>
 80130be:	e7f3      	b.n	80130a8 <_vfiprintf_r+0x44>
 80130c0:	2300      	movs	r3, #0
 80130c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80130c4:	2320      	movs	r3, #32
 80130c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80130ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80130ce:	2330      	movs	r3, #48	@ 0x30
 80130d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013280 <_vfiprintf_r+0x21c>
 80130d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80130d8:	f04f 0901 	mov.w	r9, #1
 80130dc:	4623      	mov	r3, r4
 80130de:	469a      	mov	sl, r3
 80130e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130e4:	b10a      	cbz	r2, 80130ea <_vfiprintf_r+0x86>
 80130e6:	2a25      	cmp	r2, #37	@ 0x25
 80130e8:	d1f9      	bne.n	80130de <_vfiprintf_r+0x7a>
 80130ea:	ebba 0b04 	subs.w	fp, sl, r4
 80130ee:	d00b      	beq.n	8013108 <_vfiprintf_r+0xa4>
 80130f0:	465b      	mov	r3, fp
 80130f2:	4622      	mov	r2, r4
 80130f4:	4629      	mov	r1, r5
 80130f6:	4630      	mov	r0, r6
 80130f8:	f7ff ffa2 	bl	8013040 <__sfputs_r>
 80130fc:	3001      	adds	r0, #1
 80130fe:	f000 80a7 	beq.w	8013250 <_vfiprintf_r+0x1ec>
 8013102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013104:	445a      	add	r2, fp
 8013106:	9209      	str	r2, [sp, #36]	@ 0x24
 8013108:	f89a 3000 	ldrb.w	r3, [sl]
 801310c:	2b00      	cmp	r3, #0
 801310e:	f000 809f 	beq.w	8013250 <_vfiprintf_r+0x1ec>
 8013112:	2300      	movs	r3, #0
 8013114:	f04f 32ff 	mov.w	r2, #4294967295
 8013118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801311c:	f10a 0a01 	add.w	sl, sl, #1
 8013120:	9304      	str	r3, [sp, #16]
 8013122:	9307      	str	r3, [sp, #28]
 8013124:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013128:	931a      	str	r3, [sp, #104]	@ 0x68
 801312a:	4654      	mov	r4, sl
 801312c:	2205      	movs	r2, #5
 801312e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013132:	4853      	ldr	r0, [pc, #332]	@ (8013280 <_vfiprintf_r+0x21c>)
 8013134:	f7ed f85c 	bl	80001f0 <memchr>
 8013138:	9a04      	ldr	r2, [sp, #16]
 801313a:	b9d8      	cbnz	r0, 8013174 <_vfiprintf_r+0x110>
 801313c:	06d1      	lsls	r1, r2, #27
 801313e:	bf44      	itt	mi
 8013140:	2320      	movmi	r3, #32
 8013142:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013146:	0713      	lsls	r3, r2, #28
 8013148:	bf44      	itt	mi
 801314a:	232b      	movmi	r3, #43	@ 0x2b
 801314c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013150:	f89a 3000 	ldrb.w	r3, [sl]
 8013154:	2b2a      	cmp	r3, #42	@ 0x2a
 8013156:	d015      	beq.n	8013184 <_vfiprintf_r+0x120>
 8013158:	9a07      	ldr	r2, [sp, #28]
 801315a:	4654      	mov	r4, sl
 801315c:	2000      	movs	r0, #0
 801315e:	f04f 0c0a 	mov.w	ip, #10
 8013162:	4621      	mov	r1, r4
 8013164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013168:	3b30      	subs	r3, #48	@ 0x30
 801316a:	2b09      	cmp	r3, #9
 801316c:	d94b      	bls.n	8013206 <_vfiprintf_r+0x1a2>
 801316e:	b1b0      	cbz	r0, 801319e <_vfiprintf_r+0x13a>
 8013170:	9207      	str	r2, [sp, #28]
 8013172:	e014      	b.n	801319e <_vfiprintf_r+0x13a>
 8013174:	eba0 0308 	sub.w	r3, r0, r8
 8013178:	fa09 f303 	lsl.w	r3, r9, r3
 801317c:	4313      	orrs	r3, r2
 801317e:	9304      	str	r3, [sp, #16]
 8013180:	46a2      	mov	sl, r4
 8013182:	e7d2      	b.n	801312a <_vfiprintf_r+0xc6>
 8013184:	9b03      	ldr	r3, [sp, #12]
 8013186:	1d19      	adds	r1, r3, #4
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	9103      	str	r1, [sp, #12]
 801318c:	2b00      	cmp	r3, #0
 801318e:	bfbb      	ittet	lt
 8013190:	425b      	neglt	r3, r3
 8013192:	f042 0202 	orrlt.w	r2, r2, #2
 8013196:	9307      	strge	r3, [sp, #28]
 8013198:	9307      	strlt	r3, [sp, #28]
 801319a:	bfb8      	it	lt
 801319c:	9204      	strlt	r2, [sp, #16]
 801319e:	7823      	ldrb	r3, [r4, #0]
 80131a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80131a2:	d10a      	bne.n	80131ba <_vfiprintf_r+0x156>
 80131a4:	7863      	ldrb	r3, [r4, #1]
 80131a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80131a8:	d132      	bne.n	8013210 <_vfiprintf_r+0x1ac>
 80131aa:	9b03      	ldr	r3, [sp, #12]
 80131ac:	1d1a      	adds	r2, r3, #4
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	9203      	str	r2, [sp, #12]
 80131b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80131b6:	3402      	adds	r4, #2
 80131b8:	9305      	str	r3, [sp, #20]
 80131ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013290 <_vfiprintf_r+0x22c>
 80131be:	7821      	ldrb	r1, [r4, #0]
 80131c0:	2203      	movs	r2, #3
 80131c2:	4650      	mov	r0, sl
 80131c4:	f7ed f814 	bl	80001f0 <memchr>
 80131c8:	b138      	cbz	r0, 80131da <_vfiprintf_r+0x176>
 80131ca:	9b04      	ldr	r3, [sp, #16]
 80131cc:	eba0 000a 	sub.w	r0, r0, sl
 80131d0:	2240      	movs	r2, #64	@ 0x40
 80131d2:	4082      	lsls	r2, r0
 80131d4:	4313      	orrs	r3, r2
 80131d6:	3401      	adds	r4, #1
 80131d8:	9304      	str	r3, [sp, #16]
 80131da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131de:	4829      	ldr	r0, [pc, #164]	@ (8013284 <_vfiprintf_r+0x220>)
 80131e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80131e4:	2206      	movs	r2, #6
 80131e6:	f7ed f803 	bl	80001f0 <memchr>
 80131ea:	2800      	cmp	r0, #0
 80131ec:	d03f      	beq.n	801326e <_vfiprintf_r+0x20a>
 80131ee:	4b26      	ldr	r3, [pc, #152]	@ (8013288 <_vfiprintf_r+0x224>)
 80131f0:	bb1b      	cbnz	r3, 801323a <_vfiprintf_r+0x1d6>
 80131f2:	9b03      	ldr	r3, [sp, #12]
 80131f4:	3307      	adds	r3, #7
 80131f6:	f023 0307 	bic.w	r3, r3, #7
 80131fa:	3308      	adds	r3, #8
 80131fc:	9303      	str	r3, [sp, #12]
 80131fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013200:	443b      	add	r3, r7
 8013202:	9309      	str	r3, [sp, #36]	@ 0x24
 8013204:	e76a      	b.n	80130dc <_vfiprintf_r+0x78>
 8013206:	fb0c 3202 	mla	r2, ip, r2, r3
 801320a:	460c      	mov	r4, r1
 801320c:	2001      	movs	r0, #1
 801320e:	e7a8      	b.n	8013162 <_vfiprintf_r+0xfe>
 8013210:	2300      	movs	r3, #0
 8013212:	3401      	adds	r4, #1
 8013214:	9305      	str	r3, [sp, #20]
 8013216:	4619      	mov	r1, r3
 8013218:	f04f 0c0a 	mov.w	ip, #10
 801321c:	4620      	mov	r0, r4
 801321e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013222:	3a30      	subs	r2, #48	@ 0x30
 8013224:	2a09      	cmp	r2, #9
 8013226:	d903      	bls.n	8013230 <_vfiprintf_r+0x1cc>
 8013228:	2b00      	cmp	r3, #0
 801322a:	d0c6      	beq.n	80131ba <_vfiprintf_r+0x156>
 801322c:	9105      	str	r1, [sp, #20]
 801322e:	e7c4      	b.n	80131ba <_vfiprintf_r+0x156>
 8013230:	fb0c 2101 	mla	r1, ip, r1, r2
 8013234:	4604      	mov	r4, r0
 8013236:	2301      	movs	r3, #1
 8013238:	e7f0      	b.n	801321c <_vfiprintf_r+0x1b8>
 801323a:	ab03      	add	r3, sp, #12
 801323c:	9300      	str	r3, [sp, #0]
 801323e:	462a      	mov	r2, r5
 8013240:	4b12      	ldr	r3, [pc, #72]	@ (801328c <_vfiprintf_r+0x228>)
 8013242:	a904      	add	r1, sp, #16
 8013244:	4630      	mov	r0, r6
 8013246:	f7fb fa99 	bl	800e77c <_printf_float>
 801324a:	4607      	mov	r7, r0
 801324c:	1c78      	adds	r0, r7, #1
 801324e:	d1d6      	bne.n	80131fe <_vfiprintf_r+0x19a>
 8013250:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013252:	07d9      	lsls	r1, r3, #31
 8013254:	d405      	bmi.n	8013262 <_vfiprintf_r+0x1fe>
 8013256:	89ab      	ldrh	r3, [r5, #12]
 8013258:	059a      	lsls	r2, r3, #22
 801325a:	d402      	bmi.n	8013262 <_vfiprintf_r+0x1fe>
 801325c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801325e:	f7fc fafd 	bl	800f85c <__retarget_lock_release_recursive>
 8013262:	89ab      	ldrh	r3, [r5, #12]
 8013264:	065b      	lsls	r3, r3, #25
 8013266:	f53f af1f 	bmi.w	80130a8 <_vfiprintf_r+0x44>
 801326a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801326c:	e71e      	b.n	80130ac <_vfiprintf_r+0x48>
 801326e:	ab03      	add	r3, sp, #12
 8013270:	9300      	str	r3, [sp, #0]
 8013272:	462a      	mov	r2, r5
 8013274:	4b05      	ldr	r3, [pc, #20]	@ (801328c <_vfiprintf_r+0x228>)
 8013276:	a904      	add	r1, sp, #16
 8013278:	4630      	mov	r0, r6
 801327a:	f7fb fd17 	bl	800ecac <_printf_i>
 801327e:	e7e4      	b.n	801324a <_vfiprintf_r+0x1e6>
 8013280:	08014cc1 	.word	0x08014cc1
 8013284:	08014ccb 	.word	0x08014ccb
 8013288:	0800e77d 	.word	0x0800e77d
 801328c:	08013041 	.word	0x08013041
 8013290:	08014cc7 	.word	0x08014cc7

08013294 <__swbuf_r>:
 8013294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013296:	460e      	mov	r6, r1
 8013298:	4614      	mov	r4, r2
 801329a:	4605      	mov	r5, r0
 801329c:	b118      	cbz	r0, 80132a6 <__swbuf_r+0x12>
 801329e:	6a03      	ldr	r3, [r0, #32]
 80132a0:	b90b      	cbnz	r3, 80132a6 <__swbuf_r+0x12>
 80132a2:	f7fc f8c3 	bl	800f42c <__sinit>
 80132a6:	69a3      	ldr	r3, [r4, #24]
 80132a8:	60a3      	str	r3, [r4, #8]
 80132aa:	89a3      	ldrh	r3, [r4, #12]
 80132ac:	071a      	lsls	r2, r3, #28
 80132ae:	d501      	bpl.n	80132b4 <__swbuf_r+0x20>
 80132b0:	6923      	ldr	r3, [r4, #16]
 80132b2:	b943      	cbnz	r3, 80132c6 <__swbuf_r+0x32>
 80132b4:	4621      	mov	r1, r4
 80132b6:	4628      	mov	r0, r5
 80132b8:	f000 f82a 	bl	8013310 <__swsetup_r>
 80132bc:	b118      	cbz	r0, 80132c6 <__swbuf_r+0x32>
 80132be:	f04f 37ff 	mov.w	r7, #4294967295
 80132c2:	4638      	mov	r0, r7
 80132c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132c6:	6823      	ldr	r3, [r4, #0]
 80132c8:	6922      	ldr	r2, [r4, #16]
 80132ca:	1a98      	subs	r0, r3, r2
 80132cc:	6963      	ldr	r3, [r4, #20]
 80132ce:	b2f6      	uxtb	r6, r6
 80132d0:	4283      	cmp	r3, r0
 80132d2:	4637      	mov	r7, r6
 80132d4:	dc05      	bgt.n	80132e2 <__swbuf_r+0x4e>
 80132d6:	4621      	mov	r1, r4
 80132d8:	4628      	mov	r0, r5
 80132da:	f7ff f9b9 	bl	8012650 <_fflush_r>
 80132de:	2800      	cmp	r0, #0
 80132e0:	d1ed      	bne.n	80132be <__swbuf_r+0x2a>
 80132e2:	68a3      	ldr	r3, [r4, #8]
 80132e4:	3b01      	subs	r3, #1
 80132e6:	60a3      	str	r3, [r4, #8]
 80132e8:	6823      	ldr	r3, [r4, #0]
 80132ea:	1c5a      	adds	r2, r3, #1
 80132ec:	6022      	str	r2, [r4, #0]
 80132ee:	701e      	strb	r6, [r3, #0]
 80132f0:	6962      	ldr	r2, [r4, #20]
 80132f2:	1c43      	adds	r3, r0, #1
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d004      	beq.n	8013302 <__swbuf_r+0x6e>
 80132f8:	89a3      	ldrh	r3, [r4, #12]
 80132fa:	07db      	lsls	r3, r3, #31
 80132fc:	d5e1      	bpl.n	80132c2 <__swbuf_r+0x2e>
 80132fe:	2e0a      	cmp	r6, #10
 8013300:	d1df      	bne.n	80132c2 <__swbuf_r+0x2e>
 8013302:	4621      	mov	r1, r4
 8013304:	4628      	mov	r0, r5
 8013306:	f7ff f9a3 	bl	8012650 <_fflush_r>
 801330a:	2800      	cmp	r0, #0
 801330c:	d0d9      	beq.n	80132c2 <__swbuf_r+0x2e>
 801330e:	e7d6      	b.n	80132be <__swbuf_r+0x2a>

08013310 <__swsetup_r>:
 8013310:	b538      	push	{r3, r4, r5, lr}
 8013312:	4b29      	ldr	r3, [pc, #164]	@ (80133b8 <__swsetup_r+0xa8>)
 8013314:	4605      	mov	r5, r0
 8013316:	6818      	ldr	r0, [r3, #0]
 8013318:	460c      	mov	r4, r1
 801331a:	b118      	cbz	r0, 8013324 <__swsetup_r+0x14>
 801331c:	6a03      	ldr	r3, [r0, #32]
 801331e:	b90b      	cbnz	r3, 8013324 <__swsetup_r+0x14>
 8013320:	f7fc f884 	bl	800f42c <__sinit>
 8013324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013328:	0719      	lsls	r1, r3, #28
 801332a:	d422      	bmi.n	8013372 <__swsetup_r+0x62>
 801332c:	06da      	lsls	r2, r3, #27
 801332e:	d407      	bmi.n	8013340 <__swsetup_r+0x30>
 8013330:	2209      	movs	r2, #9
 8013332:	602a      	str	r2, [r5, #0]
 8013334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013338:	81a3      	strh	r3, [r4, #12]
 801333a:	f04f 30ff 	mov.w	r0, #4294967295
 801333e:	e033      	b.n	80133a8 <__swsetup_r+0x98>
 8013340:	0758      	lsls	r0, r3, #29
 8013342:	d512      	bpl.n	801336a <__swsetup_r+0x5a>
 8013344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013346:	b141      	cbz	r1, 801335a <__swsetup_r+0x4a>
 8013348:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801334c:	4299      	cmp	r1, r3
 801334e:	d002      	beq.n	8013356 <__swsetup_r+0x46>
 8013350:	4628      	mov	r0, r5
 8013352:	f7fd f905 	bl	8010560 <_free_r>
 8013356:	2300      	movs	r3, #0
 8013358:	6363      	str	r3, [r4, #52]	@ 0x34
 801335a:	89a3      	ldrh	r3, [r4, #12]
 801335c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013360:	81a3      	strh	r3, [r4, #12]
 8013362:	2300      	movs	r3, #0
 8013364:	6063      	str	r3, [r4, #4]
 8013366:	6923      	ldr	r3, [r4, #16]
 8013368:	6023      	str	r3, [r4, #0]
 801336a:	89a3      	ldrh	r3, [r4, #12]
 801336c:	f043 0308 	orr.w	r3, r3, #8
 8013370:	81a3      	strh	r3, [r4, #12]
 8013372:	6923      	ldr	r3, [r4, #16]
 8013374:	b94b      	cbnz	r3, 801338a <__swsetup_r+0x7a>
 8013376:	89a3      	ldrh	r3, [r4, #12]
 8013378:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801337c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013380:	d003      	beq.n	801338a <__swsetup_r+0x7a>
 8013382:	4621      	mov	r1, r4
 8013384:	4628      	mov	r0, r5
 8013386:	f000 f88b 	bl	80134a0 <__smakebuf_r>
 801338a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801338e:	f013 0201 	ands.w	r2, r3, #1
 8013392:	d00a      	beq.n	80133aa <__swsetup_r+0x9a>
 8013394:	2200      	movs	r2, #0
 8013396:	60a2      	str	r2, [r4, #8]
 8013398:	6962      	ldr	r2, [r4, #20]
 801339a:	4252      	negs	r2, r2
 801339c:	61a2      	str	r2, [r4, #24]
 801339e:	6922      	ldr	r2, [r4, #16]
 80133a0:	b942      	cbnz	r2, 80133b4 <__swsetup_r+0xa4>
 80133a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80133a6:	d1c5      	bne.n	8013334 <__swsetup_r+0x24>
 80133a8:	bd38      	pop	{r3, r4, r5, pc}
 80133aa:	0799      	lsls	r1, r3, #30
 80133ac:	bf58      	it	pl
 80133ae:	6962      	ldrpl	r2, [r4, #20]
 80133b0:	60a2      	str	r2, [r4, #8]
 80133b2:	e7f4      	b.n	801339e <__swsetup_r+0x8e>
 80133b4:	2000      	movs	r0, #0
 80133b6:	e7f7      	b.n	80133a8 <__swsetup_r+0x98>
 80133b8:	200000c4 	.word	0x200000c4

080133bc <_raise_r>:
 80133bc:	291f      	cmp	r1, #31
 80133be:	b538      	push	{r3, r4, r5, lr}
 80133c0:	4605      	mov	r5, r0
 80133c2:	460c      	mov	r4, r1
 80133c4:	d904      	bls.n	80133d0 <_raise_r+0x14>
 80133c6:	2316      	movs	r3, #22
 80133c8:	6003      	str	r3, [r0, #0]
 80133ca:	f04f 30ff 	mov.w	r0, #4294967295
 80133ce:	bd38      	pop	{r3, r4, r5, pc}
 80133d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80133d2:	b112      	cbz	r2, 80133da <_raise_r+0x1e>
 80133d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80133d8:	b94b      	cbnz	r3, 80133ee <_raise_r+0x32>
 80133da:	4628      	mov	r0, r5
 80133dc:	f000 f830 	bl	8013440 <_getpid_r>
 80133e0:	4622      	mov	r2, r4
 80133e2:	4601      	mov	r1, r0
 80133e4:	4628      	mov	r0, r5
 80133e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80133ea:	f000 b817 	b.w	801341c <_kill_r>
 80133ee:	2b01      	cmp	r3, #1
 80133f0:	d00a      	beq.n	8013408 <_raise_r+0x4c>
 80133f2:	1c59      	adds	r1, r3, #1
 80133f4:	d103      	bne.n	80133fe <_raise_r+0x42>
 80133f6:	2316      	movs	r3, #22
 80133f8:	6003      	str	r3, [r0, #0]
 80133fa:	2001      	movs	r0, #1
 80133fc:	e7e7      	b.n	80133ce <_raise_r+0x12>
 80133fe:	2100      	movs	r1, #0
 8013400:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013404:	4620      	mov	r0, r4
 8013406:	4798      	blx	r3
 8013408:	2000      	movs	r0, #0
 801340a:	e7e0      	b.n	80133ce <_raise_r+0x12>

0801340c <raise>:
 801340c:	4b02      	ldr	r3, [pc, #8]	@ (8013418 <raise+0xc>)
 801340e:	4601      	mov	r1, r0
 8013410:	6818      	ldr	r0, [r3, #0]
 8013412:	f7ff bfd3 	b.w	80133bc <_raise_r>
 8013416:	bf00      	nop
 8013418:	200000c4 	.word	0x200000c4

0801341c <_kill_r>:
 801341c:	b538      	push	{r3, r4, r5, lr}
 801341e:	4d07      	ldr	r5, [pc, #28]	@ (801343c <_kill_r+0x20>)
 8013420:	2300      	movs	r3, #0
 8013422:	4604      	mov	r4, r0
 8013424:	4608      	mov	r0, r1
 8013426:	4611      	mov	r1, r2
 8013428:	602b      	str	r3, [r5, #0]
 801342a:	f7f1 fa53 	bl	80048d4 <_kill>
 801342e:	1c43      	adds	r3, r0, #1
 8013430:	d102      	bne.n	8013438 <_kill_r+0x1c>
 8013432:	682b      	ldr	r3, [r5, #0]
 8013434:	b103      	cbz	r3, 8013438 <_kill_r+0x1c>
 8013436:	6023      	str	r3, [r4, #0]
 8013438:	bd38      	pop	{r3, r4, r5, pc}
 801343a:	bf00      	nop
 801343c:	20005560 	.word	0x20005560

08013440 <_getpid_r>:
 8013440:	f7f1 ba40 	b.w	80048c4 <_getpid>

08013444 <_malloc_usable_size_r>:
 8013444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013448:	1f18      	subs	r0, r3, #4
 801344a:	2b00      	cmp	r3, #0
 801344c:	bfbc      	itt	lt
 801344e:	580b      	ldrlt	r3, [r1, r0]
 8013450:	18c0      	addlt	r0, r0, r3
 8013452:	4770      	bx	lr

08013454 <__swhatbuf_r>:
 8013454:	b570      	push	{r4, r5, r6, lr}
 8013456:	460c      	mov	r4, r1
 8013458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801345c:	2900      	cmp	r1, #0
 801345e:	b096      	sub	sp, #88	@ 0x58
 8013460:	4615      	mov	r5, r2
 8013462:	461e      	mov	r6, r3
 8013464:	da0d      	bge.n	8013482 <__swhatbuf_r+0x2e>
 8013466:	89a3      	ldrh	r3, [r4, #12]
 8013468:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801346c:	f04f 0100 	mov.w	r1, #0
 8013470:	bf14      	ite	ne
 8013472:	2340      	movne	r3, #64	@ 0x40
 8013474:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013478:	2000      	movs	r0, #0
 801347a:	6031      	str	r1, [r6, #0]
 801347c:	602b      	str	r3, [r5, #0]
 801347e:	b016      	add	sp, #88	@ 0x58
 8013480:	bd70      	pop	{r4, r5, r6, pc}
 8013482:	466a      	mov	r2, sp
 8013484:	f000 f848 	bl	8013518 <_fstat_r>
 8013488:	2800      	cmp	r0, #0
 801348a:	dbec      	blt.n	8013466 <__swhatbuf_r+0x12>
 801348c:	9901      	ldr	r1, [sp, #4]
 801348e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013492:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013496:	4259      	negs	r1, r3
 8013498:	4159      	adcs	r1, r3
 801349a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801349e:	e7eb      	b.n	8013478 <__swhatbuf_r+0x24>

080134a0 <__smakebuf_r>:
 80134a0:	898b      	ldrh	r3, [r1, #12]
 80134a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134a4:	079d      	lsls	r5, r3, #30
 80134a6:	4606      	mov	r6, r0
 80134a8:	460c      	mov	r4, r1
 80134aa:	d507      	bpl.n	80134bc <__smakebuf_r+0x1c>
 80134ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80134b0:	6023      	str	r3, [r4, #0]
 80134b2:	6123      	str	r3, [r4, #16]
 80134b4:	2301      	movs	r3, #1
 80134b6:	6163      	str	r3, [r4, #20]
 80134b8:	b003      	add	sp, #12
 80134ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134bc:	ab01      	add	r3, sp, #4
 80134be:	466a      	mov	r2, sp
 80134c0:	f7ff ffc8 	bl	8013454 <__swhatbuf_r>
 80134c4:	9f00      	ldr	r7, [sp, #0]
 80134c6:	4605      	mov	r5, r0
 80134c8:	4639      	mov	r1, r7
 80134ca:	4630      	mov	r0, r6
 80134cc:	f7fa ffe8 	bl	800e4a0 <_malloc_r>
 80134d0:	b948      	cbnz	r0, 80134e6 <__smakebuf_r+0x46>
 80134d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134d6:	059a      	lsls	r2, r3, #22
 80134d8:	d4ee      	bmi.n	80134b8 <__smakebuf_r+0x18>
 80134da:	f023 0303 	bic.w	r3, r3, #3
 80134de:	f043 0302 	orr.w	r3, r3, #2
 80134e2:	81a3      	strh	r3, [r4, #12]
 80134e4:	e7e2      	b.n	80134ac <__smakebuf_r+0xc>
 80134e6:	89a3      	ldrh	r3, [r4, #12]
 80134e8:	6020      	str	r0, [r4, #0]
 80134ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80134ee:	81a3      	strh	r3, [r4, #12]
 80134f0:	9b01      	ldr	r3, [sp, #4]
 80134f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80134f6:	b15b      	cbz	r3, 8013510 <__smakebuf_r+0x70>
 80134f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134fc:	4630      	mov	r0, r6
 80134fe:	f000 f81d 	bl	801353c <_isatty_r>
 8013502:	b128      	cbz	r0, 8013510 <__smakebuf_r+0x70>
 8013504:	89a3      	ldrh	r3, [r4, #12]
 8013506:	f023 0303 	bic.w	r3, r3, #3
 801350a:	f043 0301 	orr.w	r3, r3, #1
 801350e:	81a3      	strh	r3, [r4, #12]
 8013510:	89a3      	ldrh	r3, [r4, #12]
 8013512:	431d      	orrs	r5, r3
 8013514:	81a5      	strh	r5, [r4, #12]
 8013516:	e7cf      	b.n	80134b8 <__smakebuf_r+0x18>

08013518 <_fstat_r>:
 8013518:	b538      	push	{r3, r4, r5, lr}
 801351a:	4d07      	ldr	r5, [pc, #28]	@ (8013538 <_fstat_r+0x20>)
 801351c:	2300      	movs	r3, #0
 801351e:	4604      	mov	r4, r0
 8013520:	4608      	mov	r0, r1
 8013522:	4611      	mov	r1, r2
 8013524:	602b      	str	r3, [r5, #0]
 8013526:	f7f1 fa19 	bl	800495c <_fstat>
 801352a:	1c43      	adds	r3, r0, #1
 801352c:	d102      	bne.n	8013534 <_fstat_r+0x1c>
 801352e:	682b      	ldr	r3, [r5, #0]
 8013530:	b103      	cbz	r3, 8013534 <_fstat_r+0x1c>
 8013532:	6023      	str	r3, [r4, #0]
 8013534:	bd38      	pop	{r3, r4, r5, pc}
 8013536:	bf00      	nop
 8013538:	20005560 	.word	0x20005560

0801353c <_isatty_r>:
 801353c:	b538      	push	{r3, r4, r5, lr}
 801353e:	4d06      	ldr	r5, [pc, #24]	@ (8013558 <_isatty_r+0x1c>)
 8013540:	2300      	movs	r3, #0
 8013542:	4604      	mov	r4, r0
 8013544:	4608      	mov	r0, r1
 8013546:	602b      	str	r3, [r5, #0]
 8013548:	f7f1 fa18 	bl	800497c <_isatty>
 801354c:	1c43      	adds	r3, r0, #1
 801354e:	d102      	bne.n	8013556 <_isatty_r+0x1a>
 8013550:	682b      	ldr	r3, [r5, #0]
 8013552:	b103      	cbz	r3, 8013556 <_isatty_r+0x1a>
 8013554:	6023      	str	r3, [r4, #0]
 8013556:	bd38      	pop	{r3, r4, r5, pc}
 8013558:	20005560 	.word	0x20005560

0801355c <pow>:
 801355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801355e:	ed2d 8b02 	vpush	{d8}
 8013562:	eeb0 8a40 	vmov.f32	s16, s0
 8013566:	eef0 8a60 	vmov.f32	s17, s1
 801356a:	ec55 4b11 	vmov	r4, r5, d1
 801356e:	f000 f977 	bl	8013860 <__ieee754_pow>
 8013572:	4622      	mov	r2, r4
 8013574:	462b      	mov	r3, r5
 8013576:	4620      	mov	r0, r4
 8013578:	4629      	mov	r1, r5
 801357a:	ec57 6b10 	vmov	r6, r7, d0
 801357e:	f7ed fae5 	bl	8000b4c <__aeabi_dcmpun>
 8013582:	2800      	cmp	r0, #0
 8013584:	d13b      	bne.n	80135fe <pow+0xa2>
 8013586:	ec51 0b18 	vmov	r0, r1, d8
 801358a:	2200      	movs	r2, #0
 801358c:	2300      	movs	r3, #0
 801358e:	f7ed faab 	bl	8000ae8 <__aeabi_dcmpeq>
 8013592:	b1b8      	cbz	r0, 80135c4 <pow+0x68>
 8013594:	2200      	movs	r2, #0
 8013596:	2300      	movs	r3, #0
 8013598:	4620      	mov	r0, r4
 801359a:	4629      	mov	r1, r5
 801359c:	f7ed faa4 	bl	8000ae8 <__aeabi_dcmpeq>
 80135a0:	2800      	cmp	r0, #0
 80135a2:	d146      	bne.n	8013632 <pow+0xd6>
 80135a4:	ec45 4b10 	vmov	d0, r4, r5
 80135a8:	f000 f874 	bl	8013694 <finite>
 80135ac:	b338      	cbz	r0, 80135fe <pow+0xa2>
 80135ae:	2200      	movs	r2, #0
 80135b0:	2300      	movs	r3, #0
 80135b2:	4620      	mov	r0, r4
 80135b4:	4629      	mov	r1, r5
 80135b6:	f7ed faa1 	bl	8000afc <__aeabi_dcmplt>
 80135ba:	b300      	cbz	r0, 80135fe <pow+0xa2>
 80135bc:	f7fc f922 	bl	800f804 <__errno>
 80135c0:	2322      	movs	r3, #34	@ 0x22
 80135c2:	e01b      	b.n	80135fc <pow+0xa0>
 80135c4:	ec47 6b10 	vmov	d0, r6, r7
 80135c8:	f000 f864 	bl	8013694 <finite>
 80135cc:	b9e0      	cbnz	r0, 8013608 <pow+0xac>
 80135ce:	eeb0 0a48 	vmov.f32	s0, s16
 80135d2:	eef0 0a68 	vmov.f32	s1, s17
 80135d6:	f000 f85d 	bl	8013694 <finite>
 80135da:	b1a8      	cbz	r0, 8013608 <pow+0xac>
 80135dc:	ec45 4b10 	vmov	d0, r4, r5
 80135e0:	f000 f858 	bl	8013694 <finite>
 80135e4:	b180      	cbz	r0, 8013608 <pow+0xac>
 80135e6:	4632      	mov	r2, r6
 80135e8:	463b      	mov	r3, r7
 80135ea:	4630      	mov	r0, r6
 80135ec:	4639      	mov	r1, r7
 80135ee:	f7ed faad 	bl	8000b4c <__aeabi_dcmpun>
 80135f2:	2800      	cmp	r0, #0
 80135f4:	d0e2      	beq.n	80135bc <pow+0x60>
 80135f6:	f7fc f905 	bl	800f804 <__errno>
 80135fa:	2321      	movs	r3, #33	@ 0x21
 80135fc:	6003      	str	r3, [r0, #0]
 80135fe:	ecbd 8b02 	vpop	{d8}
 8013602:	ec47 6b10 	vmov	d0, r6, r7
 8013606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013608:	2200      	movs	r2, #0
 801360a:	2300      	movs	r3, #0
 801360c:	4630      	mov	r0, r6
 801360e:	4639      	mov	r1, r7
 8013610:	f7ed fa6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8013614:	2800      	cmp	r0, #0
 8013616:	d0f2      	beq.n	80135fe <pow+0xa2>
 8013618:	eeb0 0a48 	vmov.f32	s0, s16
 801361c:	eef0 0a68 	vmov.f32	s1, s17
 8013620:	f000 f838 	bl	8013694 <finite>
 8013624:	2800      	cmp	r0, #0
 8013626:	d0ea      	beq.n	80135fe <pow+0xa2>
 8013628:	ec45 4b10 	vmov	d0, r4, r5
 801362c:	f000 f832 	bl	8013694 <finite>
 8013630:	e7c3      	b.n	80135ba <pow+0x5e>
 8013632:	4f01      	ldr	r7, [pc, #4]	@ (8013638 <pow+0xdc>)
 8013634:	2600      	movs	r6, #0
 8013636:	e7e2      	b.n	80135fe <pow+0xa2>
 8013638:	3ff00000 	.word	0x3ff00000

0801363c <sqrt>:
 801363c:	b538      	push	{r3, r4, r5, lr}
 801363e:	ed2d 8b02 	vpush	{d8}
 8013642:	ec55 4b10 	vmov	r4, r5, d0
 8013646:	f000 f831 	bl	80136ac <__ieee754_sqrt>
 801364a:	4622      	mov	r2, r4
 801364c:	462b      	mov	r3, r5
 801364e:	4620      	mov	r0, r4
 8013650:	4629      	mov	r1, r5
 8013652:	eeb0 8a40 	vmov.f32	s16, s0
 8013656:	eef0 8a60 	vmov.f32	s17, s1
 801365a:	f7ed fa77 	bl	8000b4c <__aeabi_dcmpun>
 801365e:	b990      	cbnz	r0, 8013686 <sqrt+0x4a>
 8013660:	2200      	movs	r2, #0
 8013662:	2300      	movs	r3, #0
 8013664:	4620      	mov	r0, r4
 8013666:	4629      	mov	r1, r5
 8013668:	f7ed fa48 	bl	8000afc <__aeabi_dcmplt>
 801366c:	b158      	cbz	r0, 8013686 <sqrt+0x4a>
 801366e:	f7fc f8c9 	bl	800f804 <__errno>
 8013672:	2321      	movs	r3, #33	@ 0x21
 8013674:	6003      	str	r3, [r0, #0]
 8013676:	2200      	movs	r2, #0
 8013678:	2300      	movs	r3, #0
 801367a:	4610      	mov	r0, r2
 801367c:	4619      	mov	r1, r3
 801367e:	f7ed f8f5 	bl	800086c <__aeabi_ddiv>
 8013682:	ec41 0b18 	vmov	d8, r0, r1
 8013686:	eeb0 0a48 	vmov.f32	s0, s16
 801368a:	eef0 0a68 	vmov.f32	s1, s17
 801368e:	ecbd 8b02 	vpop	{d8}
 8013692:	bd38      	pop	{r3, r4, r5, pc}

08013694 <finite>:
 8013694:	b082      	sub	sp, #8
 8013696:	ed8d 0b00 	vstr	d0, [sp]
 801369a:	9801      	ldr	r0, [sp, #4]
 801369c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80136a0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80136a4:	0fc0      	lsrs	r0, r0, #31
 80136a6:	b002      	add	sp, #8
 80136a8:	4770      	bx	lr
	...

080136ac <__ieee754_sqrt>:
 80136ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136b0:	4a68      	ldr	r2, [pc, #416]	@ (8013854 <__ieee754_sqrt+0x1a8>)
 80136b2:	ec55 4b10 	vmov	r4, r5, d0
 80136b6:	43aa      	bics	r2, r5
 80136b8:	462b      	mov	r3, r5
 80136ba:	4621      	mov	r1, r4
 80136bc:	d110      	bne.n	80136e0 <__ieee754_sqrt+0x34>
 80136be:	4622      	mov	r2, r4
 80136c0:	4620      	mov	r0, r4
 80136c2:	4629      	mov	r1, r5
 80136c4:	f7ec ffa8 	bl	8000618 <__aeabi_dmul>
 80136c8:	4602      	mov	r2, r0
 80136ca:	460b      	mov	r3, r1
 80136cc:	4620      	mov	r0, r4
 80136ce:	4629      	mov	r1, r5
 80136d0:	f7ec fdec 	bl	80002ac <__adddf3>
 80136d4:	4604      	mov	r4, r0
 80136d6:	460d      	mov	r5, r1
 80136d8:	ec45 4b10 	vmov	d0, r4, r5
 80136dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136e0:	2d00      	cmp	r5, #0
 80136e2:	dc0e      	bgt.n	8013702 <__ieee754_sqrt+0x56>
 80136e4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80136e8:	4322      	orrs	r2, r4
 80136ea:	d0f5      	beq.n	80136d8 <__ieee754_sqrt+0x2c>
 80136ec:	b19d      	cbz	r5, 8013716 <__ieee754_sqrt+0x6a>
 80136ee:	4622      	mov	r2, r4
 80136f0:	4620      	mov	r0, r4
 80136f2:	4629      	mov	r1, r5
 80136f4:	f7ec fdd8 	bl	80002a8 <__aeabi_dsub>
 80136f8:	4602      	mov	r2, r0
 80136fa:	460b      	mov	r3, r1
 80136fc:	f7ed f8b6 	bl	800086c <__aeabi_ddiv>
 8013700:	e7e8      	b.n	80136d4 <__ieee754_sqrt+0x28>
 8013702:	152a      	asrs	r2, r5, #20
 8013704:	d115      	bne.n	8013732 <__ieee754_sqrt+0x86>
 8013706:	2000      	movs	r0, #0
 8013708:	e009      	b.n	801371e <__ieee754_sqrt+0x72>
 801370a:	0acb      	lsrs	r3, r1, #11
 801370c:	3a15      	subs	r2, #21
 801370e:	0549      	lsls	r1, r1, #21
 8013710:	2b00      	cmp	r3, #0
 8013712:	d0fa      	beq.n	801370a <__ieee754_sqrt+0x5e>
 8013714:	e7f7      	b.n	8013706 <__ieee754_sqrt+0x5a>
 8013716:	462a      	mov	r2, r5
 8013718:	e7fa      	b.n	8013710 <__ieee754_sqrt+0x64>
 801371a:	005b      	lsls	r3, r3, #1
 801371c:	3001      	adds	r0, #1
 801371e:	02dc      	lsls	r4, r3, #11
 8013720:	d5fb      	bpl.n	801371a <__ieee754_sqrt+0x6e>
 8013722:	1e44      	subs	r4, r0, #1
 8013724:	1b12      	subs	r2, r2, r4
 8013726:	f1c0 0420 	rsb	r4, r0, #32
 801372a:	fa21 f404 	lsr.w	r4, r1, r4
 801372e:	4323      	orrs	r3, r4
 8013730:	4081      	lsls	r1, r0
 8013732:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013736:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801373a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801373e:	07d2      	lsls	r2, r2, #31
 8013740:	bf5c      	itt	pl
 8013742:	005b      	lslpl	r3, r3, #1
 8013744:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8013748:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801374c:	bf58      	it	pl
 801374e:	0049      	lslpl	r1, r1, #1
 8013750:	2600      	movs	r6, #0
 8013752:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8013756:	106d      	asrs	r5, r5, #1
 8013758:	0049      	lsls	r1, r1, #1
 801375a:	2016      	movs	r0, #22
 801375c:	4632      	mov	r2, r6
 801375e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8013762:	1917      	adds	r7, r2, r4
 8013764:	429f      	cmp	r7, r3
 8013766:	bfde      	ittt	le
 8013768:	193a      	addle	r2, r7, r4
 801376a:	1bdb      	suble	r3, r3, r7
 801376c:	1936      	addle	r6, r6, r4
 801376e:	0fcf      	lsrs	r7, r1, #31
 8013770:	3801      	subs	r0, #1
 8013772:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8013776:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801377a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801377e:	d1f0      	bne.n	8013762 <__ieee754_sqrt+0xb6>
 8013780:	4604      	mov	r4, r0
 8013782:	2720      	movs	r7, #32
 8013784:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8013788:	429a      	cmp	r2, r3
 801378a:	eb00 0e0c 	add.w	lr, r0, ip
 801378e:	db02      	blt.n	8013796 <__ieee754_sqrt+0xea>
 8013790:	d113      	bne.n	80137ba <__ieee754_sqrt+0x10e>
 8013792:	458e      	cmp	lr, r1
 8013794:	d811      	bhi.n	80137ba <__ieee754_sqrt+0x10e>
 8013796:	f1be 0f00 	cmp.w	lr, #0
 801379a:	eb0e 000c 	add.w	r0, lr, ip
 801379e:	da42      	bge.n	8013826 <__ieee754_sqrt+0x17a>
 80137a0:	2800      	cmp	r0, #0
 80137a2:	db40      	blt.n	8013826 <__ieee754_sqrt+0x17a>
 80137a4:	f102 0801 	add.w	r8, r2, #1
 80137a8:	1a9b      	subs	r3, r3, r2
 80137aa:	458e      	cmp	lr, r1
 80137ac:	bf88      	it	hi
 80137ae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80137b2:	eba1 010e 	sub.w	r1, r1, lr
 80137b6:	4464      	add	r4, ip
 80137b8:	4642      	mov	r2, r8
 80137ba:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80137be:	3f01      	subs	r7, #1
 80137c0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80137c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80137c8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80137cc:	d1dc      	bne.n	8013788 <__ieee754_sqrt+0xdc>
 80137ce:	4319      	orrs	r1, r3
 80137d0:	d01b      	beq.n	801380a <__ieee754_sqrt+0x15e>
 80137d2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8013858 <__ieee754_sqrt+0x1ac>
 80137d6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801385c <__ieee754_sqrt+0x1b0>
 80137da:	e9da 0100 	ldrd	r0, r1, [sl]
 80137de:	e9db 2300 	ldrd	r2, r3, [fp]
 80137e2:	f7ec fd61 	bl	80002a8 <__aeabi_dsub>
 80137e6:	e9da 8900 	ldrd	r8, r9, [sl]
 80137ea:	4602      	mov	r2, r0
 80137ec:	460b      	mov	r3, r1
 80137ee:	4640      	mov	r0, r8
 80137f0:	4649      	mov	r1, r9
 80137f2:	f7ed f98d 	bl	8000b10 <__aeabi_dcmple>
 80137f6:	b140      	cbz	r0, 801380a <__ieee754_sqrt+0x15e>
 80137f8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80137fc:	e9da 0100 	ldrd	r0, r1, [sl]
 8013800:	e9db 2300 	ldrd	r2, r3, [fp]
 8013804:	d111      	bne.n	801382a <__ieee754_sqrt+0x17e>
 8013806:	3601      	adds	r6, #1
 8013808:	463c      	mov	r4, r7
 801380a:	1072      	asrs	r2, r6, #1
 801380c:	0863      	lsrs	r3, r4, #1
 801380e:	07f1      	lsls	r1, r6, #31
 8013810:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8013814:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8013818:	bf48      	it	mi
 801381a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801381e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8013822:	4618      	mov	r0, r3
 8013824:	e756      	b.n	80136d4 <__ieee754_sqrt+0x28>
 8013826:	4690      	mov	r8, r2
 8013828:	e7be      	b.n	80137a8 <__ieee754_sqrt+0xfc>
 801382a:	f7ec fd3f 	bl	80002ac <__adddf3>
 801382e:	e9da 8900 	ldrd	r8, r9, [sl]
 8013832:	4602      	mov	r2, r0
 8013834:	460b      	mov	r3, r1
 8013836:	4640      	mov	r0, r8
 8013838:	4649      	mov	r1, r9
 801383a:	f7ed f95f 	bl	8000afc <__aeabi_dcmplt>
 801383e:	b120      	cbz	r0, 801384a <__ieee754_sqrt+0x19e>
 8013840:	1ca0      	adds	r0, r4, #2
 8013842:	bf08      	it	eq
 8013844:	3601      	addeq	r6, #1
 8013846:	3402      	adds	r4, #2
 8013848:	e7df      	b.n	801380a <__ieee754_sqrt+0x15e>
 801384a:	1c63      	adds	r3, r4, #1
 801384c:	f023 0401 	bic.w	r4, r3, #1
 8013850:	e7db      	b.n	801380a <__ieee754_sqrt+0x15e>
 8013852:	bf00      	nop
 8013854:	7ff00000 	.word	0x7ff00000
 8013858:	20000288 	.word	0x20000288
 801385c:	20000280 	.word	0x20000280

08013860 <__ieee754_pow>:
 8013860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013864:	b091      	sub	sp, #68	@ 0x44
 8013866:	ed8d 1b00 	vstr	d1, [sp]
 801386a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801386e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8013872:	ea5a 0001 	orrs.w	r0, sl, r1
 8013876:	ec57 6b10 	vmov	r6, r7, d0
 801387a:	d113      	bne.n	80138a4 <__ieee754_pow+0x44>
 801387c:	19b3      	adds	r3, r6, r6
 801387e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8013882:	4152      	adcs	r2, r2
 8013884:	4298      	cmp	r0, r3
 8013886:	4b98      	ldr	r3, [pc, #608]	@ (8013ae8 <__ieee754_pow+0x288>)
 8013888:	4193      	sbcs	r3, r2
 801388a:	f080 84ea 	bcs.w	8014262 <__ieee754_pow+0xa02>
 801388e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013892:	4630      	mov	r0, r6
 8013894:	4639      	mov	r1, r7
 8013896:	f7ec fd09 	bl	80002ac <__adddf3>
 801389a:	ec41 0b10 	vmov	d0, r0, r1
 801389e:	b011      	add	sp, #68	@ 0x44
 80138a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138a4:	4a91      	ldr	r2, [pc, #580]	@ (8013aec <__ieee754_pow+0x28c>)
 80138a6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80138aa:	4590      	cmp	r8, r2
 80138ac:	463d      	mov	r5, r7
 80138ae:	4633      	mov	r3, r6
 80138b0:	d806      	bhi.n	80138c0 <__ieee754_pow+0x60>
 80138b2:	d101      	bne.n	80138b8 <__ieee754_pow+0x58>
 80138b4:	2e00      	cmp	r6, #0
 80138b6:	d1ea      	bne.n	801388e <__ieee754_pow+0x2e>
 80138b8:	4592      	cmp	sl, r2
 80138ba:	d801      	bhi.n	80138c0 <__ieee754_pow+0x60>
 80138bc:	d10e      	bne.n	80138dc <__ieee754_pow+0x7c>
 80138be:	b169      	cbz	r1, 80138dc <__ieee754_pow+0x7c>
 80138c0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80138c4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80138c8:	431d      	orrs	r5, r3
 80138ca:	d1e0      	bne.n	801388e <__ieee754_pow+0x2e>
 80138cc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80138d0:	18db      	adds	r3, r3, r3
 80138d2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80138d6:	4152      	adcs	r2, r2
 80138d8:	429d      	cmp	r5, r3
 80138da:	e7d4      	b.n	8013886 <__ieee754_pow+0x26>
 80138dc:	2d00      	cmp	r5, #0
 80138de:	46c3      	mov	fp, r8
 80138e0:	da3a      	bge.n	8013958 <__ieee754_pow+0xf8>
 80138e2:	4a83      	ldr	r2, [pc, #524]	@ (8013af0 <__ieee754_pow+0x290>)
 80138e4:	4592      	cmp	sl, r2
 80138e6:	d84d      	bhi.n	8013984 <__ieee754_pow+0x124>
 80138e8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80138ec:	4592      	cmp	sl, r2
 80138ee:	f240 84c7 	bls.w	8014280 <__ieee754_pow+0xa20>
 80138f2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80138f6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80138fa:	2a14      	cmp	r2, #20
 80138fc:	dd0f      	ble.n	801391e <__ieee754_pow+0xbe>
 80138fe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8013902:	fa21 f402 	lsr.w	r4, r1, r2
 8013906:	fa04 f202 	lsl.w	r2, r4, r2
 801390a:	428a      	cmp	r2, r1
 801390c:	f040 84b8 	bne.w	8014280 <__ieee754_pow+0xa20>
 8013910:	f004 0401 	and.w	r4, r4, #1
 8013914:	f1c4 0402 	rsb	r4, r4, #2
 8013918:	2900      	cmp	r1, #0
 801391a:	d158      	bne.n	80139ce <__ieee754_pow+0x16e>
 801391c:	e00e      	b.n	801393c <__ieee754_pow+0xdc>
 801391e:	2900      	cmp	r1, #0
 8013920:	d154      	bne.n	80139cc <__ieee754_pow+0x16c>
 8013922:	f1c2 0214 	rsb	r2, r2, #20
 8013926:	fa4a f402 	asr.w	r4, sl, r2
 801392a:	fa04 f202 	lsl.w	r2, r4, r2
 801392e:	4552      	cmp	r2, sl
 8013930:	f040 84a3 	bne.w	801427a <__ieee754_pow+0xa1a>
 8013934:	f004 0401 	and.w	r4, r4, #1
 8013938:	f1c4 0402 	rsb	r4, r4, #2
 801393c:	4a6d      	ldr	r2, [pc, #436]	@ (8013af4 <__ieee754_pow+0x294>)
 801393e:	4592      	cmp	sl, r2
 8013940:	d12e      	bne.n	80139a0 <__ieee754_pow+0x140>
 8013942:	f1b9 0f00 	cmp.w	r9, #0
 8013946:	f280 8494 	bge.w	8014272 <__ieee754_pow+0xa12>
 801394a:	496a      	ldr	r1, [pc, #424]	@ (8013af4 <__ieee754_pow+0x294>)
 801394c:	4632      	mov	r2, r6
 801394e:	463b      	mov	r3, r7
 8013950:	2000      	movs	r0, #0
 8013952:	f7ec ff8b 	bl	800086c <__aeabi_ddiv>
 8013956:	e7a0      	b.n	801389a <__ieee754_pow+0x3a>
 8013958:	2400      	movs	r4, #0
 801395a:	bbc1      	cbnz	r1, 80139ce <__ieee754_pow+0x16e>
 801395c:	4a63      	ldr	r2, [pc, #396]	@ (8013aec <__ieee754_pow+0x28c>)
 801395e:	4592      	cmp	sl, r2
 8013960:	d1ec      	bne.n	801393c <__ieee754_pow+0xdc>
 8013962:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8013966:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801396a:	431a      	orrs	r2, r3
 801396c:	f000 8479 	beq.w	8014262 <__ieee754_pow+0xa02>
 8013970:	4b61      	ldr	r3, [pc, #388]	@ (8013af8 <__ieee754_pow+0x298>)
 8013972:	4598      	cmp	r8, r3
 8013974:	d908      	bls.n	8013988 <__ieee754_pow+0x128>
 8013976:	f1b9 0f00 	cmp.w	r9, #0
 801397a:	f2c0 8476 	blt.w	801426a <__ieee754_pow+0xa0a>
 801397e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013982:	e78a      	b.n	801389a <__ieee754_pow+0x3a>
 8013984:	2402      	movs	r4, #2
 8013986:	e7e8      	b.n	801395a <__ieee754_pow+0xfa>
 8013988:	f1b9 0f00 	cmp.w	r9, #0
 801398c:	f04f 0000 	mov.w	r0, #0
 8013990:	f04f 0100 	mov.w	r1, #0
 8013994:	da81      	bge.n	801389a <__ieee754_pow+0x3a>
 8013996:	e9dd 0300 	ldrd	r0, r3, [sp]
 801399a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801399e:	e77c      	b.n	801389a <__ieee754_pow+0x3a>
 80139a0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80139a4:	d106      	bne.n	80139b4 <__ieee754_pow+0x154>
 80139a6:	4632      	mov	r2, r6
 80139a8:	463b      	mov	r3, r7
 80139aa:	4630      	mov	r0, r6
 80139ac:	4639      	mov	r1, r7
 80139ae:	f7ec fe33 	bl	8000618 <__aeabi_dmul>
 80139b2:	e772      	b.n	801389a <__ieee754_pow+0x3a>
 80139b4:	4a51      	ldr	r2, [pc, #324]	@ (8013afc <__ieee754_pow+0x29c>)
 80139b6:	4591      	cmp	r9, r2
 80139b8:	d109      	bne.n	80139ce <__ieee754_pow+0x16e>
 80139ba:	2d00      	cmp	r5, #0
 80139bc:	db07      	blt.n	80139ce <__ieee754_pow+0x16e>
 80139be:	ec47 6b10 	vmov	d0, r6, r7
 80139c2:	b011      	add	sp, #68	@ 0x44
 80139c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139c8:	f7ff be70 	b.w	80136ac <__ieee754_sqrt>
 80139cc:	2400      	movs	r4, #0
 80139ce:	ec47 6b10 	vmov	d0, r6, r7
 80139d2:	9302      	str	r3, [sp, #8]
 80139d4:	f000 fc88 	bl	80142e8 <fabs>
 80139d8:	9b02      	ldr	r3, [sp, #8]
 80139da:	ec51 0b10 	vmov	r0, r1, d0
 80139de:	bb53      	cbnz	r3, 8013a36 <__ieee754_pow+0x1d6>
 80139e0:	4b44      	ldr	r3, [pc, #272]	@ (8013af4 <__ieee754_pow+0x294>)
 80139e2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d002      	beq.n	80139f0 <__ieee754_pow+0x190>
 80139ea:	f1b8 0f00 	cmp.w	r8, #0
 80139ee:	d122      	bne.n	8013a36 <__ieee754_pow+0x1d6>
 80139f0:	f1b9 0f00 	cmp.w	r9, #0
 80139f4:	da05      	bge.n	8013a02 <__ieee754_pow+0x1a2>
 80139f6:	4602      	mov	r2, r0
 80139f8:	460b      	mov	r3, r1
 80139fa:	2000      	movs	r0, #0
 80139fc:	493d      	ldr	r1, [pc, #244]	@ (8013af4 <__ieee754_pow+0x294>)
 80139fe:	f7ec ff35 	bl	800086c <__aeabi_ddiv>
 8013a02:	2d00      	cmp	r5, #0
 8013a04:	f6bf af49 	bge.w	801389a <__ieee754_pow+0x3a>
 8013a08:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8013a0c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8013a10:	ea58 0804 	orrs.w	r8, r8, r4
 8013a14:	d108      	bne.n	8013a28 <__ieee754_pow+0x1c8>
 8013a16:	4602      	mov	r2, r0
 8013a18:	460b      	mov	r3, r1
 8013a1a:	4610      	mov	r0, r2
 8013a1c:	4619      	mov	r1, r3
 8013a1e:	f7ec fc43 	bl	80002a8 <__aeabi_dsub>
 8013a22:	4602      	mov	r2, r0
 8013a24:	460b      	mov	r3, r1
 8013a26:	e794      	b.n	8013952 <__ieee754_pow+0xf2>
 8013a28:	2c01      	cmp	r4, #1
 8013a2a:	f47f af36 	bne.w	801389a <__ieee754_pow+0x3a>
 8013a2e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013a32:	4619      	mov	r1, r3
 8013a34:	e731      	b.n	801389a <__ieee754_pow+0x3a>
 8013a36:	0feb      	lsrs	r3, r5, #31
 8013a38:	3b01      	subs	r3, #1
 8013a3a:	ea53 0204 	orrs.w	r2, r3, r4
 8013a3e:	d102      	bne.n	8013a46 <__ieee754_pow+0x1e6>
 8013a40:	4632      	mov	r2, r6
 8013a42:	463b      	mov	r3, r7
 8013a44:	e7e9      	b.n	8013a1a <__ieee754_pow+0x1ba>
 8013a46:	3c01      	subs	r4, #1
 8013a48:	431c      	orrs	r4, r3
 8013a4a:	d016      	beq.n	8013a7a <__ieee754_pow+0x21a>
 8013a4c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8013ad8 <__ieee754_pow+0x278>
 8013a50:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8013a54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013a58:	f240 8112 	bls.w	8013c80 <__ieee754_pow+0x420>
 8013a5c:	4b28      	ldr	r3, [pc, #160]	@ (8013b00 <__ieee754_pow+0x2a0>)
 8013a5e:	459a      	cmp	sl, r3
 8013a60:	4b25      	ldr	r3, [pc, #148]	@ (8013af8 <__ieee754_pow+0x298>)
 8013a62:	d916      	bls.n	8013a92 <__ieee754_pow+0x232>
 8013a64:	4598      	cmp	r8, r3
 8013a66:	d80b      	bhi.n	8013a80 <__ieee754_pow+0x220>
 8013a68:	f1b9 0f00 	cmp.w	r9, #0
 8013a6c:	da0b      	bge.n	8013a86 <__ieee754_pow+0x226>
 8013a6e:	2000      	movs	r0, #0
 8013a70:	b011      	add	sp, #68	@ 0x44
 8013a72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a76:	f000 bcf3 	b.w	8014460 <__math_oflow>
 8013a7a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8013ae0 <__ieee754_pow+0x280>
 8013a7e:	e7e7      	b.n	8013a50 <__ieee754_pow+0x1f0>
 8013a80:	f1b9 0f00 	cmp.w	r9, #0
 8013a84:	dcf3      	bgt.n	8013a6e <__ieee754_pow+0x20e>
 8013a86:	2000      	movs	r0, #0
 8013a88:	b011      	add	sp, #68	@ 0x44
 8013a8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a8e:	f000 bcdf 	b.w	8014450 <__math_uflow>
 8013a92:	4598      	cmp	r8, r3
 8013a94:	d20c      	bcs.n	8013ab0 <__ieee754_pow+0x250>
 8013a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	f7ed f82d 	bl	8000afc <__aeabi_dcmplt>
 8013aa2:	3800      	subs	r0, #0
 8013aa4:	bf18      	it	ne
 8013aa6:	2001      	movne	r0, #1
 8013aa8:	f1b9 0f00 	cmp.w	r9, #0
 8013aac:	daec      	bge.n	8013a88 <__ieee754_pow+0x228>
 8013aae:	e7df      	b.n	8013a70 <__ieee754_pow+0x210>
 8013ab0:	4b10      	ldr	r3, [pc, #64]	@ (8013af4 <__ieee754_pow+0x294>)
 8013ab2:	4598      	cmp	r8, r3
 8013ab4:	f04f 0200 	mov.w	r2, #0
 8013ab8:	d924      	bls.n	8013b04 <__ieee754_pow+0x2a4>
 8013aba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013abe:	2300      	movs	r3, #0
 8013ac0:	f7ed f81c 	bl	8000afc <__aeabi_dcmplt>
 8013ac4:	3800      	subs	r0, #0
 8013ac6:	bf18      	it	ne
 8013ac8:	2001      	movne	r0, #1
 8013aca:	f1b9 0f00 	cmp.w	r9, #0
 8013ace:	dccf      	bgt.n	8013a70 <__ieee754_pow+0x210>
 8013ad0:	e7da      	b.n	8013a88 <__ieee754_pow+0x228>
 8013ad2:	bf00      	nop
 8013ad4:	f3af 8000 	nop.w
 8013ad8:	00000000 	.word	0x00000000
 8013adc:	3ff00000 	.word	0x3ff00000
 8013ae0:	00000000 	.word	0x00000000
 8013ae4:	bff00000 	.word	0xbff00000
 8013ae8:	fff00000 	.word	0xfff00000
 8013aec:	7ff00000 	.word	0x7ff00000
 8013af0:	433fffff 	.word	0x433fffff
 8013af4:	3ff00000 	.word	0x3ff00000
 8013af8:	3fefffff 	.word	0x3fefffff
 8013afc:	3fe00000 	.word	0x3fe00000
 8013b00:	43f00000 	.word	0x43f00000
 8013b04:	4b5a      	ldr	r3, [pc, #360]	@ (8013c70 <__ieee754_pow+0x410>)
 8013b06:	f7ec fbcf 	bl	80002a8 <__aeabi_dsub>
 8013b0a:	a351      	add	r3, pc, #324	@ (adr r3, 8013c50 <__ieee754_pow+0x3f0>)
 8013b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b10:	4604      	mov	r4, r0
 8013b12:	460d      	mov	r5, r1
 8013b14:	f7ec fd80 	bl	8000618 <__aeabi_dmul>
 8013b18:	a34f      	add	r3, pc, #316	@ (adr r3, 8013c58 <__ieee754_pow+0x3f8>)
 8013b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b1e:	4606      	mov	r6, r0
 8013b20:	460f      	mov	r7, r1
 8013b22:	4620      	mov	r0, r4
 8013b24:	4629      	mov	r1, r5
 8013b26:	f7ec fd77 	bl	8000618 <__aeabi_dmul>
 8013b2a:	4b52      	ldr	r3, [pc, #328]	@ (8013c74 <__ieee754_pow+0x414>)
 8013b2c:	4682      	mov	sl, r0
 8013b2e:	468b      	mov	fp, r1
 8013b30:	2200      	movs	r2, #0
 8013b32:	4620      	mov	r0, r4
 8013b34:	4629      	mov	r1, r5
 8013b36:	f7ec fd6f 	bl	8000618 <__aeabi_dmul>
 8013b3a:	4602      	mov	r2, r0
 8013b3c:	460b      	mov	r3, r1
 8013b3e:	a148      	add	r1, pc, #288	@ (adr r1, 8013c60 <__ieee754_pow+0x400>)
 8013b40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b44:	f7ec fbb0 	bl	80002a8 <__aeabi_dsub>
 8013b48:	4622      	mov	r2, r4
 8013b4a:	462b      	mov	r3, r5
 8013b4c:	f7ec fd64 	bl	8000618 <__aeabi_dmul>
 8013b50:	4602      	mov	r2, r0
 8013b52:	460b      	mov	r3, r1
 8013b54:	2000      	movs	r0, #0
 8013b56:	4948      	ldr	r1, [pc, #288]	@ (8013c78 <__ieee754_pow+0x418>)
 8013b58:	f7ec fba6 	bl	80002a8 <__aeabi_dsub>
 8013b5c:	4622      	mov	r2, r4
 8013b5e:	4680      	mov	r8, r0
 8013b60:	4689      	mov	r9, r1
 8013b62:	462b      	mov	r3, r5
 8013b64:	4620      	mov	r0, r4
 8013b66:	4629      	mov	r1, r5
 8013b68:	f7ec fd56 	bl	8000618 <__aeabi_dmul>
 8013b6c:	4602      	mov	r2, r0
 8013b6e:	460b      	mov	r3, r1
 8013b70:	4640      	mov	r0, r8
 8013b72:	4649      	mov	r1, r9
 8013b74:	f7ec fd50 	bl	8000618 <__aeabi_dmul>
 8013b78:	a33b      	add	r3, pc, #236	@ (adr r3, 8013c68 <__ieee754_pow+0x408>)
 8013b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b7e:	f7ec fd4b 	bl	8000618 <__aeabi_dmul>
 8013b82:	4602      	mov	r2, r0
 8013b84:	460b      	mov	r3, r1
 8013b86:	4650      	mov	r0, sl
 8013b88:	4659      	mov	r1, fp
 8013b8a:	f7ec fb8d 	bl	80002a8 <__aeabi_dsub>
 8013b8e:	4602      	mov	r2, r0
 8013b90:	460b      	mov	r3, r1
 8013b92:	4680      	mov	r8, r0
 8013b94:	4689      	mov	r9, r1
 8013b96:	4630      	mov	r0, r6
 8013b98:	4639      	mov	r1, r7
 8013b9a:	f7ec fb87 	bl	80002ac <__adddf3>
 8013b9e:	2400      	movs	r4, #0
 8013ba0:	4632      	mov	r2, r6
 8013ba2:	463b      	mov	r3, r7
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	460d      	mov	r5, r1
 8013ba8:	f7ec fb7e 	bl	80002a8 <__aeabi_dsub>
 8013bac:	4602      	mov	r2, r0
 8013bae:	460b      	mov	r3, r1
 8013bb0:	4640      	mov	r0, r8
 8013bb2:	4649      	mov	r1, r9
 8013bb4:	f7ec fb78 	bl	80002a8 <__aeabi_dsub>
 8013bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013bbc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	9304      	str	r3, [sp, #16]
 8013bc4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013bc8:	4606      	mov	r6, r0
 8013bca:	460f      	mov	r7, r1
 8013bcc:	4652      	mov	r2, sl
 8013bce:	465b      	mov	r3, fp
 8013bd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013bd4:	f7ec fb68 	bl	80002a8 <__aeabi_dsub>
 8013bd8:	4622      	mov	r2, r4
 8013bda:	462b      	mov	r3, r5
 8013bdc:	f7ec fd1c 	bl	8000618 <__aeabi_dmul>
 8013be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013be4:	4680      	mov	r8, r0
 8013be6:	4689      	mov	r9, r1
 8013be8:	4630      	mov	r0, r6
 8013bea:	4639      	mov	r1, r7
 8013bec:	f7ec fd14 	bl	8000618 <__aeabi_dmul>
 8013bf0:	4602      	mov	r2, r0
 8013bf2:	460b      	mov	r3, r1
 8013bf4:	4640      	mov	r0, r8
 8013bf6:	4649      	mov	r1, r9
 8013bf8:	f7ec fb58 	bl	80002ac <__adddf3>
 8013bfc:	4652      	mov	r2, sl
 8013bfe:	465b      	mov	r3, fp
 8013c00:	4606      	mov	r6, r0
 8013c02:	460f      	mov	r7, r1
 8013c04:	4620      	mov	r0, r4
 8013c06:	4629      	mov	r1, r5
 8013c08:	f7ec fd06 	bl	8000618 <__aeabi_dmul>
 8013c0c:	460b      	mov	r3, r1
 8013c0e:	4602      	mov	r2, r0
 8013c10:	4680      	mov	r8, r0
 8013c12:	4689      	mov	r9, r1
 8013c14:	4630      	mov	r0, r6
 8013c16:	4639      	mov	r1, r7
 8013c18:	f7ec fb48 	bl	80002ac <__adddf3>
 8013c1c:	4b17      	ldr	r3, [pc, #92]	@ (8013c7c <__ieee754_pow+0x41c>)
 8013c1e:	4299      	cmp	r1, r3
 8013c20:	4604      	mov	r4, r0
 8013c22:	460d      	mov	r5, r1
 8013c24:	468a      	mov	sl, r1
 8013c26:	468b      	mov	fp, r1
 8013c28:	f340 82ef 	ble.w	801420a <__ieee754_pow+0x9aa>
 8013c2c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013c30:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013c34:	4303      	orrs	r3, r0
 8013c36:	f000 81e8 	beq.w	801400a <__ieee754_pow+0x7aa>
 8013c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c3e:	2200      	movs	r2, #0
 8013c40:	2300      	movs	r3, #0
 8013c42:	f7ec ff5b 	bl	8000afc <__aeabi_dcmplt>
 8013c46:	3800      	subs	r0, #0
 8013c48:	bf18      	it	ne
 8013c4a:	2001      	movne	r0, #1
 8013c4c:	e710      	b.n	8013a70 <__ieee754_pow+0x210>
 8013c4e:	bf00      	nop
 8013c50:	60000000 	.word	0x60000000
 8013c54:	3ff71547 	.word	0x3ff71547
 8013c58:	f85ddf44 	.word	0xf85ddf44
 8013c5c:	3e54ae0b 	.word	0x3e54ae0b
 8013c60:	55555555 	.word	0x55555555
 8013c64:	3fd55555 	.word	0x3fd55555
 8013c68:	652b82fe 	.word	0x652b82fe
 8013c6c:	3ff71547 	.word	0x3ff71547
 8013c70:	3ff00000 	.word	0x3ff00000
 8013c74:	3fd00000 	.word	0x3fd00000
 8013c78:	3fe00000 	.word	0x3fe00000
 8013c7c:	408fffff 	.word	0x408fffff
 8013c80:	4bd5      	ldr	r3, [pc, #852]	@ (8013fd8 <__ieee754_pow+0x778>)
 8013c82:	402b      	ands	r3, r5
 8013c84:	2200      	movs	r2, #0
 8013c86:	b92b      	cbnz	r3, 8013c94 <__ieee754_pow+0x434>
 8013c88:	4bd4      	ldr	r3, [pc, #848]	@ (8013fdc <__ieee754_pow+0x77c>)
 8013c8a:	f7ec fcc5 	bl	8000618 <__aeabi_dmul>
 8013c8e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8013c92:	468b      	mov	fp, r1
 8013c94:	ea4f 532b 	mov.w	r3, fp, asr #20
 8013c98:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8013c9c:	4413      	add	r3, r2
 8013c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ca0:	4bcf      	ldr	r3, [pc, #828]	@ (8013fe0 <__ieee754_pow+0x780>)
 8013ca2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8013ca6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8013caa:	459b      	cmp	fp, r3
 8013cac:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013cb0:	dd08      	ble.n	8013cc4 <__ieee754_pow+0x464>
 8013cb2:	4bcc      	ldr	r3, [pc, #816]	@ (8013fe4 <__ieee754_pow+0x784>)
 8013cb4:	459b      	cmp	fp, r3
 8013cb6:	f340 81a5 	ble.w	8014004 <__ieee754_pow+0x7a4>
 8013cba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013cbc:	3301      	adds	r3, #1
 8013cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8013cc0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8013cc4:	f04f 0a00 	mov.w	sl, #0
 8013cc8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013ccc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013cce:	4bc6      	ldr	r3, [pc, #792]	@ (8013fe8 <__ieee754_pow+0x788>)
 8013cd0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013cd4:	ed93 7b00 	vldr	d7, [r3]
 8013cd8:	4629      	mov	r1, r5
 8013cda:	ec53 2b17 	vmov	r2, r3, d7
 8013cde:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013ce2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013ce6:	f7ec fadf 	bl	80002a8 <__aeabi_dsub>
 8013cea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013cee:	4606      	mov	r6, r0
 8013cf0:	460f      	mov	r7, r1
 8013cf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013cf6:	f7ec fad9 	bl	80002ac <__adddf3>
 8013cfa:	4602      	mov	r2, r0
 8013cfc:	460b      	mov	r3, r1
 8013cfe:	2000      	movs	r0, #0
 8013d00:	49ba      	ldr	r1, [pc, #744]	@ (8013fec <__ieee754_pow+0x78c>)
 8013d02:	f7ec fdb3 	bl	800086c <__aeabi_ddiv>
 8013d06:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013d0a:	4602      	mov	r2, r0
 8013d0c:	460b      	mov	r3, r1
 8013d0e:	4630      	mov	r0, r6
 8013d10:	4639      	mov	r1, r7
 8013d12:	f7ec fc81 	bl	8000618 <__aeabi_dmul>
 8013d16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013d1a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8013d1e:	106d      	asrs	r5, r5, #1
 8013d20:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013d24:	f04f 0b00 	mov.w	fp, #0
 8013d28:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013d2c:	4661      	mov	r1, ip
 8013d2e:	2200      	movs	r2, #0
 8013d30:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013d34:	4658      	mov	r0, fp
 8013d36:	46e1      	mov	r9, ip
 8013d38:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8013d3c:	4614      	mov	r4, r2
 8013d3e:	461d      	mov	r5, r3
 8013d40:	f7ec fc6a 	bl	8000618 <__aeabi_dmul>
 8013d44:	4602      	mov	r2, r0
 8013d46:	460b      	mov	r3, r1
 8013d48:	4630      	mov	r0, r6
 8013d4a:	4639      	mov	r1, r7
 8013d4c:	f7ec faac 	bl	80002a8 <__aeabi_dsub>
 8013d50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013d54:	4606      	mov	r6, r0
 8013d56:	460f      	mov	r7, r1
 8013d58:	4620      	mov	r0, r4
 8013d5a:	4629      	mov	r1, r5
 8013d5c:	f7ec faa4 	bl	80002a8 <__aeabi_dsub>
 8013d60:	4602      	mov	r2, r0
 8013d62:	460b      	mov	r3, r1
 8013d64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013d68:	f7ec fa9e 	bl	80002a8 <__aeabi_dsub>
 8013d6c:	465a      	mov	r2, fp
 8013d6e:	464b      	mov	r3, r9
 8013d70:	f7ec fc52 	bl	8000618 <__aeabi_dmul>
 8013d74:	4602      	mov	r2, r0
 8013d76:	460b      	mov	r3, r1
 8013d78:	4630      	mov	r0, r6
 8013d7a:	4639      	mov	r1, r7
 8013d7c:	f7ec fa94 	bl	80002a8 <__aeabi_dsub>
 8013d80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013d84:	f7ec fc48 	bl	8000618 <__aeabi_dmul>
 8013d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013d90:	4610      	mov	r0, r2
 8013d92:	4619      	mov	r1, r3
 8013d94:	f7ec fc40 	bl	8000618 <__aeabi_dmul>
 8013d98:	a37d      	add	r3, pc, #500	@ (adr r3, 8013f90 <__ieee754_pow+0x730>)
 8013d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d9e:	4604      	mov	r4, r0
 8013da0:	460d      	mov	r5, r1
 8013da2:	f7ec fc39 	bl	8000618 <__aeabi_dmul>
 8013da6:	a37c      	add	r3, pc, #496	@ (adr r3, 8013f98 <__ieee754_pow+0x738>)
 8013da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dac:	f7ec fa7e 	bl	80002ac <__adddf3>
 8013db0:	4622      	mov	r2, r4
 8013db2:	462b      	mov	r3, r5
 8013db4:	f7ec fc30 	bl	8000618 <__aeabi_dmul>
 8013db8:	a379      	add	r3, pc, #484	@ (adr r3, 8013fa0 <__ieee754_pow+0x740>)
 8013dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dbe:	f7ec fa75 	bl	80002ac <__adddf3>
 8013dc2:	4622      	mov	r2, r4
 8013dc4:	462b      	mov	r3, r5
 8013dc6:	f7ec fc27 	bl	8000618 <__aeabi_dmul>
 8013dca:	a377      	add	r3, pc, #476	@ (adr r3, 8013fa8 <__ieee754_pow+0x748>)
 8013dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd0:	f7ec fa6c 	bl	80002ac <__adddf3>
 8013dd4:	4622      	mov	r2, r4
 8013dd6:	462b      	mov	r3, r5
 8013dd8:	f7ec fc1e 	bl	8000618 <__aeabi_dmul>
 8013ddc:	a374      	add	r3, pc, #464	@ (adr r3, 8013fb0 <__ieee754_pow+0x750>)
 8013dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de2:	f7ec fa63 	bl	80002ac <__adddf3>
 8013de6:	4622      	mov	r2, r4
 8013de8:	462b      	mov	r3, r5
 8013dea:	f7ec fc15 	bl	8000618 <__aeabi_dmul>
 8013dee:	a372      	add	r3, pc, #456	@ (adr r3, 8013fb8 <__ieee754_pow+0x758>)
 8013df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df4:	f7ec fa5a 	bl	80002ac <__adddf3>
 8013df8:	4622      	mov	r2, r4
 8013dfa:	4606      	mov	r6, r0
 8013dfc:	460f      	mov	r7, r1
 8013dfe:	462b      	mov	r3, r5
 8013e00:	4620      	mov	r0, r4
 8013e02:	4629      	mov	r1, r5
 8013e04:	f7ec fc08 	bl	8000618 <__aeabi_dmul>
 8013e08:	4602      	mov	r2, r0
 8013e0a:	460b      	mov	r3, r1
 8013e0c:	4630      	mov	r0, r6
 8013e0e:	4639      	mov	r1, r7
 8013e10:	f7ec fc02 	bl	8000618 <__aeabi_dmul>
 8013e14:	465a      	mov	r2, fp
 8013e16:	4604      	mov	r4, r0
 8013e18:	460d      	mov	r5, r1
 8013e1a:	464b      	mov	r3, r9
 8013e1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013e20:	f7ec fa44 	bl	80002ac <__adddf3>
 8013e24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013e28:	f7ec fbf6 	bl	8000618 <__aeabi_dmul>
 8013e2c:	4622      	mov	r2, r4
 8013e2e:	462b      	mov	r3, r5
 8013e30:	f7ec fa3c 	bl	80002ac <__adddf3>
 8013e34:	465a      	mov	r2, fp
 8013e36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e3a:	464b      	mov	r3, r9
 8013e3c:	4658      	mov	r0, fp
 8013e3e:	4649      	mov	r1, r9
 8013e40:	f7ec fbea 	bl	8000618 <__aeabi_dmul>
 8013e44:	4b6a      	ldr	r3, [pc, #424]	@ (8013ff0 <__ieee754_pow+0x790>)
 8013e46:	2200      	movs	r2, #0
 8013e48:	4606      	mov	r6, r0
 8013e4a:	460f      	mov	r7, r1
 8013e4c:	f7ec fa2e 	bl	80002ac <__adddf3>
 8013e50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013e54:	f7ec fa2a 	bl	80002ac <__adddf3>
 8013e58:	46d8      	mov	r8, fp
 8013e5a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8013e5e:	460d      	mov	r5, r1
 8013e60:	465a      	mov	r2, fp
 8013e62:	460b      	mov	r3, r1
 8013e64:	4640      	mov	r0, r8
 8013e66:	4649      	mov	r1, r9
 8013e68:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8013e6c:	f7ec fbd4 	bl	8000618 <__aeabi_dmul>
 8013e70:	465c      	mov	r4, fp
 8013e72:	4680      	mov	r8, r0
 8013e74:	4689      	mov	r9, r1
 8013e76:	4b5e      	ldr	r3, [pc, #376]	@ (8013ff0 <__ieee754_pow+0x790>)
 8013e78:	2200      	movs	r2, #0
 8013e7a:	4620      	mov	r0, r4
 8013e7c:	4629      	mov	r1, r5
 8013e7e:	f7ec fa13 	bl	80002a8 <__aeabi_dsub>
 8013e82:	4632      	mov	r2, r6
 8013e84:	463b      	mov	r3, r7
 8013e86:	f7ec fa0f 	bl	80002a8 <__aeabi_dsub>
 8013e8a:	4602      	mov	r2, r0
 8013e8c:	460b      	mov	r3, r1
 8013e8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013e92:	f7ec fa09 	bl	80002a8 <__aeabi_dsub>
 8013e96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e9a:	f7ec fbbd 	bl	8000618 <__aeabi_dmul>
 8013e9e:	4622      	mov	r2, r4
 8013ea0:	4606      	mov	r6, r0
 8013ea2:	460f      	mov	r7, r1
 8013ea4:	462b      	mov	r3, r5
 8013ea6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013eaa:	f7ec fbb5 	bl	8000618 <__aeabi_dmul>
 8013eae:	4602      	mov	r2, r0
 8013eb0:	460b      	mov	r3, r1
 8013eb2:	4630      	mov	r0, r6
 8013eb4:	4639      	mov	r1, r7
 8013eb6:	f7ec f9f9 	bl	80002ac <__adddf3>
 8013eba:	4606      	mov	r6, r0
 8013ebc:	460f      	mov	r7, r1
 8013ebe:	4602      	mov	r2, r0
 8013ec0:	460b      	mov	r3, r1
 8013ec2:	4640      	mov	r0, r8
 8013ec4:	4649      	mov	r1, r9
 8013ec6:	f7ec f9f1 	bl	80002ac <__adddf3>
 8013eca:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8013ece:	a33c      	add	r3, pc, #240	@ (adr r3, 8013fc0 <__ieee754_pow+0x760>)
 8013ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed4:	4658      	mov	r0, fp
 8013ed6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8013eda:	460d      	mov	r5, r1
 8013edc:	f7ec fb9c 	bl	8000618 <__aeabi_dmul>
 8013ee0:	465c      	mov	r4, fp
 8013ee2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ee6:	4642      	mov	r2, r8
 8013ee8:	464b      	mov	r3, r9
 8013eea:	4620      	mov	r0, r4
 8013eec:	4629      	mov	r1, r5
 8013eee:	f7ec f9db 	bl	80002a8 <__aeabi_dsub>
 8013ef2:	4602      	mov	r2, r0
 8013ef4:	460b      	mov	r3, r1
 8013ef6:	4630      	mov	r0, r6
 8013ef8:	4639      	mov	r1, r7
 8013efa:	f7ec f9d5 	bl	80002a8 <__aeabi_dsub>
 8013efe:	a332      	add	r3, pc, #200	@ (adr r3, 8013fc8 <__ieee754_pow+0x768>)
 8013f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f04:	f7ec fb88 	bl	8000618 <__aeabi_dmul>
 8013f08:	a331      	add	r3, pc, #196	@ (adr r3, 8013fd0 <__ieee754_pow+0x770>)
 8013f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f0e:	4606      	mov	r6, r0
 8013f10:	460f      	mov	r7, r1
 8013f12:	4620      	mov	r0, r4
 8013f14:	4629      	mov	r1, r5
 8013f16:	f7ec fb7f 	bl	8000618 <__aeabi_dmul>
 8013f1a:	4602      	mov	r2, r0
 8013f1c:	460b      	mov	r3, r1
 8013f1e:	4630      	mov	r0, r6
 8013f20:	4639      	mov	r1, r7
 8013f22:	f7ec f9c3 	bl	80002ac <__adddf3>
 8013f26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013f28:	4b32      	ldr	r3, [pc, #200]	@ (8013ff4 <__ieee754_pow+0x794>)
 8013f2a:	4413      	add	r3, r2
 8013f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f30:	f7ec f9bc 	bl	80002ac <__adddf3>
 8013f34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013f38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013f3a:	f7ec fb03 	bl	8000544 <__aeabi_i2d>
 8013f3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013f40:	4b2d      	ldr	r3, [pc, #180]	@ (8013ff8 <__ieee754_pow+0x798>)
 8013f42:	4413      	add	r3, r2
 8013f44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013f48:	4606      	mov	r6, r0
 8013f4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f4e:	460f      	mov	r7, r1
 8013f50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013f54:	f7ec f9aa 	bl	80002ac <__adddf3>
 8013f58:	4642      	mov	r2, r8
 8013f5a:	464b      	mov	r3, r9
 8013f5c:	f7ec f9a6 	bl	80002ac <__adddf3>
 8013f60:	4632      	mov	r2, r6
 8013f62:	463b      	mov	r3, r7
 8013f64:	f7ec f9a2 	bl	80002ac <__adddf3>
 8013f68:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8013f6c:	4632      	mov	r2, r6
 8013f6e:	463b      	mov	r3, r7
 8013f70:	4658      	mov	r0, fp
 8013f72:	460d      	mov	r5, r1
 8013f74:	f7ec f998 	bl	80002a8 <__aeabi_dsub>
 8013f78:	4642      	mov	r2, r8
 8013f7a:	464b      	mov	r3, r9
 8013f7c:	f7ec f994 	bl	80002a8 <__aeabi_dsub>
 8013f80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f84:	f7ec f990 	bl	80002a8 <__aeabi_dsub>
 8013f88:	465c      	mov	r4, fp
 8013f8a:	4602      	mov	r2, r0
 8013f8c:	e036      	b.n	8013ffc <__ieee754_pow+0x79c>
 8013f8e:	bf00      	nop
 8013f90:	4a454eef 	.word	0x4a454eef
 8013f94:	3fca7e28 	.word	0x3fca7e28
 8013f98:	93c9db65 	.word	0x93c9db65
 8013f9c:	3fcd864a 	.word	0x3fcd864a
 8013fa0:	a91d4101 	.word	0xa91d4101
 8013fa4:	3fd17460 	.word	0x3fd17460
 8013fa8:	518f264d 	.word	0x518f264d
 8013fac:	3fd55555 	.word	0x3fd55555
 8013fb0:	db6fabff 	.word	0xdb6fabff
 8013fb4:	3fdb6db6 	.word	0x3fdb6db6
 8013fb8:	33333303 	.word	0x33333303
 8013fbc:	3fe33333 	.word	0x3fe33333
 8013fc0:	e0000000 	.word	0xe0000000
 8013fc4:	3feec709 	.word	0x3feec709
 8013fc8:	dc3a03fd 	.word	0xdc3a03fd
 8013fcc:	3feec709 	.word	0x3feec709
 8013fd0:	145b01f5 	.word	0x145b01f5
 8013fd4:	be3e2fe0 	.word	0xbe3e2fe0
 8013fd8:	7ff00000 	.word	0x7ff00000
 8013fdc:	43400000 	.word	0x43400000
 8013fe0:	0003988e 	.word	0x0003988e
 8013fe4:	000bb679 	.word	0x000bb679
 8013fe8:	08014d78 	.word	0x08014d78
 8013fec:	3ff00000 	.word	0x3ff00000
 8013ff0:	40080000 	.word	0x40080000
 8013ff4:	08014d58 	.word	0x08014d58
 8013ff8:	08014d68 	.word	0x08014d68
 8013ffc:	460b      	mov	r3, r1
 8013ffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014002:	e5d7      	b.n	8013bb4 <__ieee754_pow+0x354>
 8014004:	f04f 0a01 	mov.w	sl, #1
 8014008:	e65e      	b.n	8013cc8 <__ieee754_pow+0x468>
 801400a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80142dc <__ieee754_pow+0xa7c>)
 801400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014010:	4630      	mov	r0, r6
 8014012:	4639      	mov	r1, r7
 8014014:	f7ec f94a 	bl	80002ac <__adddf3>
 8014018:	4642      	mov	r2, r8
 801401a:	e9cd 0100 	strd	r0, r1, [sp]
 801401e:	464b      	mov	r3, r9
 8014020:	4620      	mov	r0, r4
 8014022:	4629      	mov	r1, r5
 8014024:	f7ec f940 	bl	80002a8 <__aeabi_dsub>
 8014028:	4602      	mov	r2, r0
 801402a:	460b      	mov	r3, r1
 801402c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014030:	f7ec fd82 	bl	8000b38 <__aeabi_dcmpgt>
 8014034:	2800      	cmp	r0, #0
 8014036:	f47f ae00 	bne.w	8013c3a <__ieee754_pow+0x3da>
 801403a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801403e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8014042:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8014046:	fa43 fa0a 	asr.w	sl, r3, sl
 801404a:	44da      	add	sl, fp
 801404c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8014050:	489d      	ldr	r0, [pc, #628]	@ (80142c8 <__ieee754_pow+0xa68>)
 8014052:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8014056:	4108      	asrs	r0, r1
 8014058:	ea00 030a 	and.w	r3, r0, sl
 801405c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8014060:	f1c1 0114 	rsb	r1, r1, #20
 8014064:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8014068:	fa4a fa01 	asr.w	sl, sl, r1
 801406c:	f1bb 0f00 	cmp.w	fp, #0
 8014070:	4640      	mov	r0, r8
 8014072:	4649      	mov	r1, r9
 8014074:	f04f 0200 	mov.w	r2, #0
 8014078:	bfb8      	it	lt
 801407a:	f1ca 0a00 	rsblt	sl, sl, #0
 801407e:	f7ec f913 	bl	80002a8 <__aeabi_dsub>
 8014082:	4680      	mov	r8, r0
 8014084:	4689      	mov	r9, r1
 8014086:	4632      	mov	r2, r6
 8014088:	463b      	mov	r3, r7
 801408a:	4640      	mov	r0, r8
 801408c:	4649      	mov	r1, r9
 801408e:	f7ec f90d 	bl	80002ac <__adddf3>
 8014092:	2400      	movs	r4, #0
 8014094:	a37c      	add	r3, pc, #496	@ (adr r3, 8014288 <__ieee754_pow+0xa28>)
 8014096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801409a:	4620      	mov	r0, r4
 801409c:	460d      	mov	r5, r1
 801409e:	f7ec fabb 	bl	8000618 <__aeabi_dmul>
 80140a2:	4642      	mov	r2, r8
 80140a4:	e9cd 0100 	strd	r0, r1, [sp]
 80140a8:	464b      	mov	r3, r9
 80140aa:	4620      	mov	r0, r4
 80140ac:	4629      	mov	r1, r5
 80140ae:	f7ec f8fb 	bl	80002a8 <__aeabi_dsub>
 80140b2:	4602      	mov	r2, r0
 80140b4:	460b      	mov	r3, r1
 80140b6:	4630      	mov	r0, r6
 80140b8:	4639      	mov	r1, r7
 80140ba:	f7ec f8f5 	bl	80002a8 <__aeabi_dsub>
 80140be:	a374      	add	r3, pc, #464	@ (adr r3, 8014290 <__ieee754_pow+0xa30>)
 80140c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c4:	f7ec faa8 	bl	8000618 <__aeabi_dmul>
 80140c8:	a373      	add	r3, pc, #460	@ (adr r3, 8014298 <__ieee754_pow+0xa38>)
 80140ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ce:	4680      	mov	r8, r0
 80140d0:	4689      	mov	r9, r1
 80140d2:	4620      	mov	r0, r4
 80140d4:	4629      	mov	r1, r5
 80140d6:	f7ec fa9f 	bl	8000618 <__aeabi_dmul>
 80140da:	4602      	mov	r2, r0
 80140dc:	460b      	mov	r3, r1
 80140de:	4640      	mov	r0, r8
 80140e0:	4649      	mov	r1, r9
 80140e2:	f7ec f8e3 	bl	80002ac <__adddf3>
 80140e6:	4604      	mov	r4, r0
 80140e8:	460d      	mov	r5, r1
 80140ea:	4602      	mov	r2, r0
 80140ec:	460b      	mov	r3, r1
 80140ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140f2:	f7ec f8db 	bl	80002ac <__adddf3>
 80140f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80140fa:	4680      	mov	r8, r0
 80140fc:	4689      	mov	r9, r1
 80140fe:	f7ec f8d3 	bl	80002a8 <__aeabi_dsub>
 8014102:	4602      	mov	r2, r0
 8014104:	460b      	mov	r3, r1
 8014106:	4620      	mov	r0, r4
 8014108:	4629      	mov	r1, r5
 801410a:	f7ec f8cd 	bl	80002a8 <__aeabi_dsub>
 801410e:	4642      	mov	r2, r8
 8014110:	4606      	mov	r6, r0
 8014112:	460f      	mov	r7, r1
 8014114:	464b      	mov	r3, r9
 8014116:	4640      	mov	r0, r8
 8014118:	4649      	mov	r1, r9
 801411a:	f7ec fa7d 	bl	8000618 <__aeabi_dmul>
 801411e:	a360      	add	r3, pc, #384	@ (adr r3, 80142a0 <__ieee754_pow+0xa40>)
 8014120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014124:	4604      	mov	r4, r0
 8014126:	460d      	mov	r5, r1
 8014128:	f7ec fa76 	bl	8000618 <__aeabi_dmul>
 801412c:	a35e      	add	r3, pc, #376	@ (adr r3, 80142a8 <__ieee754_pow+0xa48>)
 801412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014132:	f7ec f8b9 	bl	80002a8 <__aeabi_dsub>
 8014136:	4622      	mov	r2, r4
 8014138:	462b      	mov	r3, r5
 801413a:	f7ec fa6d 	bl	8000618 <__aeabi_dmul>
 801413e:	a35c      	add	r3, pc, #368	@ (adr r3, 80142b0 <__ieee754_pow+0xa50>)
 8014140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014144:	f7ec f8b2 	bl	80002ac <__adddf3>
 8014148:	4622      	mov	r2, r4
 801414a:	462b      	mov	r3, r5
 801414c:	f7ec fa64 	bl	8000618 <__aeabi_dmul>
 8014150:	a359      	add	r3, pc, #356	@ (adr r3, 80142b8 <__ieee754_pow+0xa58>)
 8014152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014156:	f7ec f8a7 	bl	80002a8 <__aeabi_dsub>
 801415a:	4622      	mov	r2, r4
 801415c:	462b      	mov	r3, r5
 801415e:	f7ec fa5b 	bl	8000618 <__aeabi_dmul>
 8014162:	a357      	add	r3, pc, #348	@ (adr r3, 80142c0 <__ieee754_pow+0xa60>)
 8014164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014168:	f7ec f8a0 	bl	80002ac <__adddf3>
 801416c:	4622      	mov	r2, r4
 801416e:	462b      	mov	r3, r5
 8014170:	f7ec fa52 	bl	8000618 <__aeabi_dmul>
 8014174:	4602      	mov	r2, r0
 8014176:	460b      	mov	r3, r1
 8014178:	4640      	mov	r0, r8
 801417a:	4649      	mov	r1, r9
 801417c:	f7ec f894 	bl	80002a8 <__aeabi_dsub>
 8014180:	4604      	mov	r4, r0
 8014182:	460d      	mov	r5, r1
 8014184:	4602      	mov	r2, r0
 8014186:	460b      	mov	r3, r1
 8014188:	4640      	mov	r0, r8
 801418a:	4649      	mov	r1, r9
 801418c:	f7ec fa44 	bl	8000618 <__aeabi_dmul>
 8014190:	2200      	movs	r2, #0
 8014192:	e9cd 0100 	strd	r0, r1, [sp]
 8014196:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801419a:	4620      	mov	r0, r4
 801419c:	4629      	mov	r1, r5
 801419e:	f7ec f883 	bl	80002a8 <__aeabi_dsub>
 80141a2:	4602      	mov	r2, r0
 80141a4:	460b      	mov	r3, r1
 80141a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80141aa:	f7ec fb5f 	bl	800086c <__aeabi_ddiv>
 80141ae:	4632      	mov	r2, r6
 80141b0:	4604      	mov	r4, r0
 80141b2:	460d      	mov	r5, r1
 80141b4:	463b      	mov	r3, r7
 80141b6:	4640      	mov	r0, r8
 80141b8:	4649      	mov	r1, r9
 80141ba:	f7ec fa2d 	bl	8000618 <__aeabi_dmul>
 80141be:	4632      	mov	r2, r6
 80141c0:	463b      	mov	r3, r7
 80141c2:	f7ec f873 	bl	80002ac <__adddf3>
 80141c6:	4602      	mov	r2, r0
 80141c8:	460b      	mov	r3, r1
 80141ca:	4620      	mov	r0, r4
 80141cc:	4629      	mov	r1, r5
 80141ce:	f7ec f86b 	bl	80002a8 <__aeabi_dsub>
 80141d2:	4642      	mov	r2, r8
 80141d4:	464b      	mov	r3, r9
 80141d6:	f7ec f867 	bl	80002a8 <__aeabi_dsub>
 80141da:	460b      	mov	r3, r1
 80141dc:	4602      	mov	r2, r0
 80141de:	493b      	ldr	r1, [pc, #236]	@ (80142cc <__ieee754_pow+0xa6c>)
 80141e0:	2000      	movs	r0, #0
 80141e2:	f7ec f861 	bl	80002a8 <__aeabi_dsub>
 80141e6:	ec41 0b10 	vmov	d0, r0, r1
 80141ea:	ee10 3a90 	vmov	r3, s1
 80141ee:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80141f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80141f6:	da30      	bge.n	801425a <__ieee754_pow+0x9fa>
 80141f8:	4650      	mov	r0, sl
 80141fa:	f000 f87d 	bl	80142f8 <scalbn>
 80141fe:	ec51 0b10 	vmov	r0, r1, d0
 8014202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014206:	f7ff bbd2 	b.w	80139ae <__ieee754_pow+0x14e>
 801420a:	4c31      	ldr	r4, [pc, #196]	@ (80142d0 <__ieee754_pow+0xa70>)
 801420c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8014210:	42a3      	cmp	r3, r4
 8014212:	d91a      	bls.n	801424a <__ieee754_pow+0x9ea>
 8014214:	4b2f      	ldr	r3, [pc, #188]	@ (80142d4 <__ieee754_pow+0xa74>)
 8014216:	440b      	add	r3, r1
 8014218:	4303      	orrs	r3, r0
 801421a:	d009      	beq.n	8014230 <__ieee754_pow+0x9d0>
 801421c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014220:	2200      	movs	r2, #0
 8014222:	2300      	movs	r3, #0
 8014224:	f7ec fc6a 	bl	8000afc <__aeabi_dcmplt>
 8014228:	3800      	subs	r0, #0
 801422a:	bf18      	it	ne
 801422c:	2001      	movne	r0, #1
 801422e:	e42b      	b.n	8013a88 <__ieee754_pow+0x228>
 8014230:	4642      	mov	r2, r8
 8014232:	464b      	mov	r3, r9
 8014234:	f7ec f838 	bl	80002a8 <__aeabi_dsub>
 8014238:	4632      	mov	r2, r6
 801423a:	463b      	mov	r3, r7
 801423c:	f7ec fc72 	bl	8000b24 <__aeabi_dcmpge>
 8014240:	2800      	cmp	r0, #0
 8014242:	d1eb      	bne.n	801421c <__ieee754_pow+0x9bc>
 8014244:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80142e4 <__ieee754_pow+0xa84>
 8014248:	e6f7      	b.n	801403a <__ieee754_pow+0x7da>
 801424a:	469a      	mov	sl, r3
 801424c:	4b22      	ldr	r3, [pc, #136]	@ (80142d8 <__ieee754_pow+0xa78>)
 801424e:	459a      	cmp	sl, r3
 8014250:	f63f aef3 	bhi.w	801403a <__ieee754_pow+0x7da>
 8014254:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014258:	e715      	b.n	8014086 <__ieee754_pow+0x826>
 801425a:	ec51 0b10 	vmov	r0, r1, d0
 801425e:	4619      	mov	r1, r3
 8014260:	e7cf      	b.n	8014202 <__ieee754_pow+0x9a2>
 8014262:	491a      	ldr	r1, [pc, #104]	@ (80142cc <__ieee754_pow+0xa6c>)
 8014264:	2000      	movs	r0, #0
 8014266:	f7ff bb18 	b.w	801389a <__ieee754_pow+0x3a>
 801426a:	2000      	movs	r0, #0
 801426c:	2100      	movs	r1, #0
 801426e:	f7ff bb14 	b.w	801389a <__ieee754_pow+0x3a>
 8014272:	4630      	mov	r0, r6
 8014274:	4639      	mov	r1, r7
 8014276:	f7ff bb10 	b.w	801389a <__ieee754_pow+0x3a>
 801427a:	460c      	mov	r4, r1
 801427c:	f7ff bb5e 	b.w	801393c <__ieee754_pow+0xdc>
 8014280:	2400      	movs	r4, #0
 8014282:	f7ff bb49 	b.w	8013918 <__ieee754_pow+0xb8>
 8014286:	bf00      	nop
 8014288:	00000000 	.word	0x00000000
 801428c:	3fe62e43 	.word	0x3fe62e43
 8014290:	fefa39ef 	.word	0xfefa39ef
 8014294:	3fe62e42 	.word	0x3fe62e42
 8014298:	0ca86c39 	.word	0x0ca86c39
 801429c:	be205c61 	.word	0xbe205c61
 80142a0:	72bea4d0 	.word	0x72bea4d0
 80142a4:	3e663769 	.word	0x3e663769
 80142a8:	c5d26bf1 	.word	0xc5d26bf1
 80142ac:	3ebbbd41 	.word	0x3ebbbd41
 80142b0:	af25de2c 	.word	0xaf25de2c
 80142b4:	3f11566a 	.word	0x3f11566a
 80142b8:	16bebd93 	.word	0x16bebd93
 80142bc:	3f66c16c 	.word	0x3f66c16c
 80142c0:	5555553e 	.word	0x5555553e
 80142c4:	3fc55555 	.word	0x3fc55555
 80142c8:	fff00000 	.word	0xfff00000
 80142cc:	3ff00000 	.word	0x3ff00000
 80142d0:	4090cbff 	.word	0x4090cbff
 80142d4:	3f6f3400 	.word	0x3f6f3400
 80142d8:	3fe00000 	.word	0x3fe00000
 80142dc:	652b82fe 	.word	0x652b82fe
 80142e0:	3c971547 	.word	0x3c971547
 80142e4:	4090cc00 	.word	0x4090cc00

080142e8 <fabs>:
 80142e8:	ec51 0b10 	vmov	r0, r1, d0
 80142ec:	4602      	mov	r2, r0
 80142ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80142f2:	ec43 2b10 	vmov	d0, r2, r3
 80142f6:	4770      	bx	lr

080142f8 <scalbn>:
 80142f8:	b570      	push	{r4, r5, r6, lr}
 80142fa:	ec55 4b10 	vmov	r4, r5, d0
 80142fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8014302:	4606      	mov	r6, r0
 8014304:	462b      	mov	r3, r5
 8014306:	b991      	cbnz	r1, 801432e <scalbn+0x36>
 8014308:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801430c:	4323      	orrs	r3, r4
 801430e:	d03d      	beq.n	801438c <scalbn+0x94>
 8014310:	4b35      	ldr	r3, [pc, #212]	@ (80143e8 <scalbn+0xf0>)
 8014312:	4620      	mov	r0, r4
 8014314:	4629      	mov	r1, r5
 8014316:	2200      	movs	r2, #0
 8014318:	f7ec f97e 	bl	8000618 <__aeabi_dmul>
 801431c:	4b33      	ldr	r3, [pc, #204]	@ (80143ec <scalbn+0xf4>)
 801431e:	429e      	cmp	r6, r3
 8014320:	4604      	mov	r4, r0
 8014322:	460d      	mov	r5, r1
 8014324:	da0f      	bge.n	8014346 <scalbn+0x4e>
 8014326:	a328      	add	r3, pc, #160	@ (adr r3, 80143c8 <scalbn+0xd0>)
 8014328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801432c:	e01e      	b.n	801436c <scalbn+0x74>
 801432e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8014332:	4291      	cmp	r1, r2
 8014334:	d10b      	bne.n	801434e <scalbn+0x56>
 8014336:	4622      	mov	r2, r4
 8014338:	4620      	mov	r0, r4
 801433a:	4629      	mov	r1, r5
 801433c:	f7eb ffb6 	bl	80002ac <__adddf3>
 8014340:	4604      	mov	r4, r0
 8014342:	460d      	mov	r5, r1
 8014344:	e022      	b.n	801438c <scalbn+0x94>
 8014346:	460b      	mov	r3, r1
 8014348:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801434c:	3936      	subs	r1, #54	@ 0x36
 801434e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8014352:	4296      	cmp	r6, r2
 8014354:	dd0d      	ble.n	8014372 <scalbn+0x7a>
 8014356:	2d00      	cmp	r5, #0
 8014358:	a11d      	add	r1, pc, #116	@ (adr r1, 80143d0 <scalbn+0xd8>)
 801435a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801435e:	da02      	bge.n	8014366 <scalbn+0x6e>
 8014360:	a11d      	add	r1, pc, #116	@ (adr r1, 80143d8 <scalbn+0xe0>)
 8014362:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014366:	a31a      	add	r3, pc, #104	@ (adr r3, 80143d0 <scalbn+0xd8>)
 8014368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801436c:	f7ec f954 	bl	8000618 <__aeabi_dmul>
 8014370:	e7e6      	b.n	8014340 <scalbn+0x48>
 8014372:	1872      	adds	r2, r6, r1
 8014374:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8014378:	428a      	cmp	r2, r1
 801437a:	dcec      	bgt.n	8014356 <scalbn+0x5e>
 801437c:	2a00      	cmp	r2, #0
 801437e:	dd08      	ble.n	8014392 <scalbn+0x9a>
 8014380:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014384:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8014388:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801438c:	ec45 4b10 	vmov	d0, r4, r5
 8014390:	bd70      	pop	{r4, r5, r6, pc}
 8014392:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8014396:	da08      	bge.n	80143aa <scalbn+0xb2>
 8014398:	2d00      	cmp	r5, #0
 801439a:	a10b      	add	r1, pc, #44	@ (adr r1, 80143c8 <scalbn+0xd0>)
 801439c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143a0:	dac1      	bge.n	8014326 <scalbn+0x2e>
 80143a2:	a10f      	add	r1, pc, #60	@ (adr r1, 80143e0 <scalbn+0xe8>)
 80143a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143a8:	e7bd      	b.n	8014326 <scalbn+0x2e>
 80143aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80143ae:	3236      	adds	r2, #54	@ 0x36
 80143b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80143b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80143b8:	4620      	mov	r0, r4
 80143ba:	4b0d      	ldr	r3, [pc, #52]	@ (80143f0 <scalbn+0xf8>)
 80143bc:	4629      	mov	r1, r5
 80143be:	2200      	movs	r2, #0
 80143c0:	e7d4      	b.n	801436c <scalbn+0x74>
 80143c2:	bf00      	nop
 80143c4:	f3af 8000 	nop.w
 80143c8:	c2f8f359 	.word	0xc2f8f359
 80143cc:	01a56e1f 	.word	0x01a56e1f
 80143d0:	8800759c 	.word	0x8800759c
 80143d4:	7e37e43c 	.word	0x7e37e43c
 80143d8:	8800759c 	.word	0x8800759c
 80143dc:	fe37e43c 	.word	0xfe37e43c
 80143e0:	c2f8f359 	.word	0xc2f8f359
 80143e4:	81a56e1f 	.word	0x81a56e1f
 80143e8:	43500000 	.word	0x43500000
 80143ec:	ffff3cb0 	.word	0xffff3cb0
 80143f0:	3c900000 	.word	0x3c900000

080143f4 <with_errno>:
 80143f4:	b510      	push	{r4, lr}
 80143f6:	ed2d 8b02 	vpush	{d8}
 80143fa:	eeb0 8a40 	vmov.f32	s16, s0
 80143fe:	eef0 8a60 	vmov.f32	s17, s1
 8014402:	4604      	mov	r4, r0
 8014404:	f7fb f9fe 	bl	800f804 <__errno>
 8014408:	eeb0 0a48 	vmov.f32	s0, s16
 801440c:	eef0 0a68 	vmov.f32	s1, s17
 8014410:	ecbd 8b02 	vpop	{d8}
 8014414:	6004      	str	r4, [r0, #0]
 8014416:	bd10      	pop	{r4, pc}

08014418 <xflow>:
 8014418:	4603      	mov	r3, r0
 801441a:	b507      	push	{r0, r1, r2, lr}
 801441c:	ec51 0b10 	vmov	r0, r1, d0
 8014420:	b183      	cbz	r3, 8014444 <xflow+0x2c>
 8014422:	4602      	mov	r2, r0
 8014424:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014428:	e9cd 2300 	strd	r2, r3, [sp]
 801442c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014430:	f7ec f8f2 	bl	8000618 <__aeabi_dmul>
 8014434:	ec41 0b10 	vmov	d0, r0, r1
 8014438:	2022      	movs	r0, #34	@ 0x22
 801443a:	b003      	add	sp, #12
 801443c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014440:	f7ff bfd8 	b.w	80143f4 <with_errno>
 8014444:	4602      	mov	r2, r0
 8014446:	460b      	mov	r3, r1
 8014448:	e7ee      	b.n	8014428 <xflow+0x10>
 801444a:	0000      	movs	r0, r0
 801444c:	0000      	movs	r0, r0
	...

08014450 <__math_uflow>:
 8014450:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014458 <__math_uflow+0x8>
 8014454:	f7ff bfe0 	b.w	8014418 <xflow>
 8014458:	00000000 	.word	0x00000000
 801445c:	10000000 	.word	0x10000000

08014460 <__math_oflow>:
 8014460:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014468 <__math_oflow+0x8>
 8014464:	f7ff bfd8 	b.w	8014418 <xflow>
 8014468:	00000000 	.word	0x00000000
 801446c:	70000000 	.word	0x70000000

08014470 <_init>:
 8014470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014472:	bf00      	nop
 8014474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014476:	bc08      	pop	{r3}
 8014478:	469e      	mov	lr, r3
 801447a:	4770      	bx	lr

0801447c <_fini>:
 801447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801447e:	bf00      	nop
 8014480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014482:	bc08      	pop	{r3}
 8014484:	469e      	mov	lr, r3
 8014486:	4770      	bx	lr
