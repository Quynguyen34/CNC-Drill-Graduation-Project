
RTOS CNC 3AXIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000155c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000908  08015758  08015758  00016758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016060  08016060  00018290  2**0
                  CONTENTS
  4 .ARM          00000008  08016060  08016060  00017060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016068  08016068  00018290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016068  08016068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801606c  0801606c  0001706c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08016070  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00018290  2**0
                  CONTENTS
 10 .bss          000054a0  20000290  20000290  00018290  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005730  20005730  00018290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00018290  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023f9b  00000000  00000000  000182c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005406  00000000  00000000  0003c25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e50  00000000  00000000  00041668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001789  00000000  00000000  000434b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000285b6  00000000  00000000  00044c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002615e  00000000  00000000  0006d1f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8719  00000000  00000000  00093355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017ba6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000998c  00000000  00000000  0017bab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  00185440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000290 	.word	0x20000290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015740 	.word	0x08015740

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000294 	.word	0x20000294
 80001cc:	08015740 	.word	0x08015740

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <Accel_Stepper_SetPin>:
 * dir_port : GPIO port of direction pin
 * dir_pin : gpio pin number of direction pin
 */
void Accel_Stepper_SetPin(Acceleration_t* Accel_stepper, GPIO_TypeDef* step_port,
		uint16_t step_pin, GPIO_TypeDef* dir_port, uint16_t dir_pin)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	80fb      	strh	r3, [r7, #6]
	Accel_stepper->Step_Port = step_port;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	651a      	str	r2, [r3, #80]	@ 0x50
	Accel_stepper->Step_Pin = step_pin;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	88fa      	ldrh	r2, [r7, #6]
 800101e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	Accel_stepper->Dir_Pin = dir_pin;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	8b3a      	ldrh	r2, [r7, #24]
 8001026:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	Accel_stepper->Dir_Port = dir_port;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <Accel_Stepper_SetTimer>:
/*
 * Set Timer for each motor
 * timer : pointer to timer typedef(Which timer is use for control speed)
 */
void Accel_Stepper_SetTimer(Acceleration_t *Accel_stepper, TIM_HandleTypeDef* timer){
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	Accel_stepper->htim = timer;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <Accel_Stepper_TIMIT_Handler>:
/*
 * Accel_Stepper_TIMIT_Handler
 * stepper : Num of which stepper use found @ Stepper_t
 */
void Accel_Stepper_TIMIT_Handler(Acceleration_t *Accel_stepper){
 8001058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800105c:	b0a2      	sub	sp, #136	@ 0x88
 800105e:	af00      	add	r7, sp, #0
 8001060:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (state.stop_press) {
 8001064:	4bb4      	ldr	r3, [pc, #720]	@ (8001338 <Accel_Stepper_TIMIT_Handler+0x2e0>)
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <Accel_Stepper_TIMIT_Handler+0x1e>
        Accel_stepper->run_state = STOP;
 800106e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001072:	2300      	movs	r3, #0
 8001074:	7053      	strb	r3, [r2, #1]
    }

	__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, Accel_stepper->step_delay);
 8001076:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800107a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800107e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4603      	mov	r3, r0
 8001088:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800108a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800108e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001092:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001096:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001098:	4603      	mov	r3, r0
 800109a:	60d3      	str	r3, [r2, #12]

	switch(Accel_stepper->run_state) {
 800109c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010a0:	785b      	ldrb	r3, [r3, #1]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	f200 81eb 	bhi.w	800147e <Accel_Stepper_TIMIT_Handler+0x426>
 80010a8:	a201      	add	r2, pc, #4	@ (adr r2, 80010b0 <Accel_Stepper_TIMIT_Handler+0x58>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010c1 	.word	0x080010c1
 80010b4:	080010f7 	.word	0x080010f7
 80010b8:	0800133d 	.word	0x0800133d
 80010bc:	080012af 	.word	0x080012af
		case STOP:
			Accel_stepper->step_count = 0;
 80010c0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
			Accel_stepper->rest = 0;
 80010d0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		     // Stop Timer/Counter 1.
		   	HAL_TIM_Base_Stop_IT(Accel_stepper->htim);
 80010e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010e6:	4618      	mov	r0, r3
 80010e8:	f009 f86e 	bl	800a1c8 <HAL_TIM_Base_Stop_IT>
		   	Accel_stepper->run_status = 0;
 80010ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
		   	break;
 80010f4:	e1c3      	b.n	800147e <Accel_Stepper_TIMIT_Handler+0x426>
	    case ACCEL:
	    	Accel_stepper->run_status = 1;
 80010f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80010fa:	2301      	movs	r3, #1
 80010fc:	7013      	strb	r3, [r2, #0]
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 80010fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001102:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001104:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001108:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800110c:	4619      	mov	r1, r3
 800110e:	4610      	mov	r0, r2
 8001110:	f006 f92f 	bl	8007372 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 8001114:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001118:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800111c:	f112 0a01 	adds.w	sl, r2, #1
 8001120:	f143 0b00 	adc.w	fp, r3, #0
 8001124:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001128:	e9c3 ab0c 	strd	sl, fp, [r3, #48]	@ 0x30
			Accel_stepper->accel_count++;
 800112c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001130:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001134:	1c51      	adds	r1, r2, #1
 8001136:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001138:	f143 0300 	adc.w	r3, r3, #0
 800113c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800113e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001142:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8001146:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
			Accel_stepper->new_step_delay = Accel_stepper->step_delay - (((2 * (long)Accel_stepper->step_delay) + Accel_stepper->rest)/(4 * Accel_stepper->accel_count + 1));
 800114a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800114e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001152:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001156:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	17da      	asrs	r2, r3, #31
 8001160:	673b      	str	r3, [r7, #112]	@ 0x70
 8001162:	677a      	str	r2, [r7, #116]	@ 0x74
 8001164:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001168:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800116c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001170:	4641      	mov	r1, r8
 8001172:	1889      	adds	r1, r1, r2
 8001174:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001176:	4649      	mov	r1, r9
 8001178:	eb43 0101 	adc.w	r1, r3, r1
 800117c:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800117e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001182:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	f04f 0100 	mov.w	r1, #0
 800118e:	0099      	lsls	r1, r3, #2
 8001190:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001194:	0090      	lsls	r0, r2, #2
 8001196:	1c43      	adds	r3, r0, #1
 8001198:	663b      	str	r3, [r7, #96]	@ 0x60
 800119a:	f141 0300 	adc.w	r3, r1, #0
 800119e:	667b      	str	r3, [r7, #100]	@ 0x64
 80011a0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80011a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80011a8:	f7ff fd7e 	bl	8000ca8 <__aeabi_uldivmod>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	1aa1      	subs	r1, r4, r2
 80011b2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80011b4:	eb65 0303 	sbc.w	r3, r5, r3
 80011b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80011c2:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
			Accel_stepper->rest = ((2 * (long)Accel_stepper->step_delay)+Accel_stepper->rest)%(4 * Accel_stepper->accel_count + 1);
 80011c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	17da      	asrs	r2, r3, #31
 80011d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80011d6:	657a      	str	r2, [r7, #84]	@ 0x54
 80011d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80011e0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80011e4:	4621      	mov	r1, r4
 80011e6:	1889      	adds	r1, r1, r2
 80011e8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80011ea:	4629      	mov	r1, r5
 80011ec:	eb43 0101 	adc.w	r1, r3, r1
 80011f0:	64f9      	str	r1, [r7, #76]	@ 0x4c
 80011f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011f6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	008b      	lsls	r3, r1, #2
 8001204:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001208:	0082      	lsls	r2, r0, #2
 800120a:	1c51      	adds	r1, r2, #1
 800120c:	6439      	str	r1, [r7, #64]	@ 0x40
 800120e:	f143 0300 	adc.w	r3, r3, #0
 8001212:	647b      	str	r3, [r7, #68]	@ 0x44
 8001214:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001218:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800121c:	f7ff fd44 	bl	8000ca8 <__aeabi_uldivmod>
 8001220:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001224:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	      // Chech if we should start decelration.
			if(Accel_stepper->step_count >= Accel_stepper->decel_start) {
 8001228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800122c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001234:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001238:	4290      	cmp	r0, r2
 800123a:	eb71 0303 	sbcs.w	r3, r1, r3
 800123e:	d30c      	bcc.n	800125a <Accel_Stepper_TIMIT_Handler+0x202>
				Accel_stepper->accel_count = Accel_stepper->decel_val;
 8001240:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001244:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001248:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800124c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
				Accel_stepper->run_state = DECEL;
 8001250:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001254:	2202      	movs	r2, #2
 8001256:	705a      	strb	r2, [r3, #1]
				Accel_stepper->last_accel_delay = Accel_stepper->new_step_delay;
				Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
				Accel_stepper->rest = 0;
				Accel_stepper->run_state = RUN;
			}
			break;
 8001258:	e10c      	b.n	8001474 <Accel_Stepper_TIMIT_Handler+0x41c>
			else if(Accel_stepper->new_step_delay <= Accel_stepper->min_step_delay) {
 800125a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800125e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001262:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001266:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800126a:	4290      	cmp	r0, r2
 800126c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001270:	f0c0 8100 	bcc.w	8001474 <Accel_Stepper_TIMIT_Handler+0x41c>
				Accel_stepper->last_accel_delay = Accel_stepper->new_step_delay;
 8001274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001278:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800127c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001280:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
				Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
 8001284:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001288:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800128c:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001290:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
				Accel_stepper->rest = 0;
 8001294:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				Accel_stepper->run_state = RUN;
 80012a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012a8:	2203      	movs	r2, #3
 80012aa:	705a      	strb	r2, [r3, #1]
			break;
 80012ac:	e0e2      	b.n	8001474 <Accel_Stepper_TIMIT_Handler+0x41c>

	    case RUN:
	    	Accel_stepper->run_status = 1;
 80012ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 80012b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80012c4:	4619      	mov	r1, r3
 80012c6:	4610      	mov	r0, r2
 80012c8:	f006 f853 	bl	8007372 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 80012cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80012d4:	1c54      	adds	r4, r2, #1
 80012d6:	f143 0500 	adc.w	r5, r3, #0
 80012da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012de:	e9c3 450c 	strd	r4, r5, [r3, #48]	@ 0x30
	    	Accel_stepper->new_step_delay = Accel_stepper->min_step_delay;
 80012e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80012ea:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80012ee:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
//	         Check if we should start deceleration.
			 if(Accel_stepper->step_count >= Accel_stepper->decel_start) {
 80012f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012f6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80012fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001302:	4290      	cmp	r0, r2
 8001304:	eb71 0303 	sbcs.w	r3, r1, r3
 8001308:	f0c0 80b6 	bcc.w	8001478 <Accel_Stepper_TIMIT_Handler+0x420>
				 Accel_stepper->accel_count = Accel_stepper->decel_val;
 800130c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001310:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001314:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001318:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//	         Start deceleration with same delay as accel ended with.
				 Accel_stepper->new_step_delay = Accel_stepper->last_accel_delay;
 800131c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001320:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001324:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001328:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
				 Accel_stepper->run_state = DECEL;
 800132c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001330:	2202      	movs	r2, #2
 8001332:	705a      	strb	r2, [r3, #1]
			 }
			 break;
 8001334:	e0a0      	b.n	8001478 <Accel_Stepper_TIMIT_Handler+0x420>
 8001336:	bf00      	nop
 8001338:	20000a28 	.word	0x20000a28

	    case DECEL:
	    	Accel_stepper->run_status = 1;
 800133c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001340:	2301      	movs	r3, #1
 8001342:	7013      	strb	r3, [r2, #0]
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 1);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
//			 HAL_GPIO_WritePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin, 0);
	    	HAL_GPIO_TogglePin(Accel_stepper->Step_Port, Accel_stepper->Step_Pin);
 8001344:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800134a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800134e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8001352:	4619      	mov	r1, r3
 8001354:	4610      	mov	r0, r2
 8001356:	f006 f80c 	bl	8007372 <HAL_GPIO_TogglePin>
	    	Accel_stepper->step_count++;
 800135a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800135e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001362:	f112 0801 	adds.w	r8, r2, #1
 8001366:	f143 0900 	adc.w	r9, r3, #0
 800136a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800136e:	e9c3 890c 	strd	r8, r9, [r3, #48]	@ 0x30
			 Accel_stepper->accel_count++;
 8001372:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001376:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800137a:	1c51      	adds	r1, r2, #1
 800137c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800137e:	f143 0300 	adc.w	r3, r3, #0
 8001382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001384:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001388:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800138c:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
			 Accel_stepper->new_step_delay = Accel_stepper->step_delay + (((2 * (long)Accel_stepper->step_delay) + Accel_stepper->rest)/(4 * abs(Accel_stepper->accel_count) + 1));
 8001390:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001394:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001398:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800139c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	17da      	asrs	r2, r3, #31
 80013a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80013a8:	637a      	str	r2, [r7, #52]	@ 0x34
 80013aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80013b2:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 80013b6:	4641      	mov	r1, r8
 80013b8:	1889      	adds	r1, r1, r2
 80013ba:	62b9      	str	r1, [r7, #40]	@ 0x28
 80013bc:	4649      	mov	r1, r9
 80013be:	eb43 0101 	adc.w	r1, r3, r1
 80013c2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80013c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80013cc:	4613      	mov	r3, r2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bfb8      	it	lt
 80013d2:	425b      	neglt	r3, r3
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	3301      	adds	r3, #1
 80013d8:	17da      	asrs	r2, r3, #31
 80013da:	623b      	str	r3, [r7, #32]
 80013dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80013de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80013e6:	f7ff fc5f 	bl	8000ca8 <__aeabi_uldivmod>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	18a1      	adds	r1, r4, r2
 80013f0:	61b9      	str	r1, [r7, #24]
 80013f2:	eb45 0303 	adc.w	r3, r5, r3
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001400:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
			 Accel_stepper->rest = ((2 * (long)Accel_stepper->step_delay)+Accel_stepper->rest)%(4 * (long) abs(Accel_stepper->accel_count) + 1);
 8001404:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001408:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	17da      	asrs	r2, r3, #31
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	617a      	str	r2, [r7, #20]
 8001416:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800141a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800141e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001422:	4621      	mov	r1, r4
 8001424:	1889      	adds	r1, r1, r2
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	4629      	mov	r1, r5
 800142a:	eb43 0101 	adc.w	r1, r3, r1
 800142e:	60f9      	str	r1, [r7, #12]
 8001430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001434:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001438:	4613      	mov	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	bfb8      	it	lt
 800143e:	425b      	neglt	r3, r3
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	3301      	adds	r3, #1
 8001444:	17da      	asrs	r2, r3, #31
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800144e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001452:	f7ff fc29 	bl	8000ca8 <__aeabi_uldivmod>
 8001456:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800145a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
//	         Check if we at last step
			 if(Accel_stepper->accel_count >= 0){
 800145e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001462:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001466:	2b00      	cmp	r3, #0
 8001468:	db08      	blt.n	800147c <Accel_Stepper_TIMIT_Handler+0x424>
				 Accel_stepper->run_state = STOP;
 800146a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800146e:	2200      	movs	r2, #0
 8001470:	705a      	strb	r2, [r3, #1]
			 }
			 break;
 8001472:	e003      	b.n	800147c <Accel_Stepper_TIMIT_Handler+0x424>
			break;
 8001474:	bf00      	nop
 8001476:	e002      	b.n	800147e <Accel_Stepper_TIMIT_Handler+0x426>
			 break;
 8001478:	bf00      	nop
 800147a:	e000      	b.n	800147e <Accel_Stepper_TIMIT_Handler+0x426>
			 break;
 800147c:	bf00      	nop
	  }
	 Accel_stepper->step_delay = Accel_stepper->new_step_delay;
 800147e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001482:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001486:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800148a:	e9c1 2302 	strd	r2, r3, [r1, #8]
//		  return rc;
}
 800148e:	bf00      	nop
 8001490:	3788      	adds	r7, #136	@ 0x88
 8001492:	46bd      	mov	sp, r7
 8001494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001498 <Accel_Stepper_Move>:
 * accel : acceleration
 * decel : deceleration
 * rpm : speed at run state
 */
void Accel_Stepper_Move(Acceleration_t *Accel_stepper, signed long long int step, unsigned long long int accel, unsigned long long int decel, unsigned long long int rpm)//acc*100
{
 8001498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800149c:	b0ab      	sub	sp, #172	@ 0xac
 800149e:	af00      	add	r7, sp, #0
 80014a0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80014a4:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

	unsigned long long int max_step_lim; //! Number of steps before we hit max speed.
	unsigned long long int accel_lim;//! Number of steps before we must start deceleration (if accel does not hit max speed).
	unsigned long long int speed = 2 * 3.14159 * rpm/60;
 80014a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80014ac:	f7ff f87e 	bl	80005ac <__aeabi_ul2d>
 80014b0:	a3e8      	add	r3, pc, #928	@ (adr r3, 8001854 <Accel_Stepper_Move+0x3bc>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f8af 	bl	8000618 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4be2      	ldr	r3, [pc, #904]	@ (8001850 <Accel_Stepper_Move+0x3b8>)
 80014c8:	f7ff f9d0 	bl	800086c <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fc18 	bl	8000d08 <__aeabi_d2ulz>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
	Accel_stepper->step_count = 0;
 80014e0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	if(step>0){
 80014f0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80014f4:	2a01      	cmp	r2, #1
 80014f6:	f173 0300 	sbcs.w	r3, r3, #0
 80014fa:	db14      	blt.n	8001526 <Accel_Stepper_Move+0x8e>
		HAL_GPIO_WritePin(Accel_stepper->Dir_Port, Accel_stepper->Dir_Pin, 1);
 80014fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001500:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001506:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800150a:	2201      	movs	r2, #1
 800150c:	4619      	mov	r1, r3
 800150e:	f005 ff17 	bl	8007340 <HAL_GPIO_WritePin>
		step = 2*step;
 8001512:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001516:	1891      	adds	r1, r2, r2
 8001518:	62b9      	str	r1, [r7, #40]	@ 0x28
 800151a:	415b      	adcs	r3, r3
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800151e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001522:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
//    srd.dir = CW;
	}
//   Set direction from sign on step value.
	if(step < 0){
 8001526:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800152a:	2b00      	cmp	r3, #0
 800152c:	da1c      	bge.n	8001568 <Accel_Stepper_Move+0xd0>
//    srd.dir = CCW;
		HAL_GPIO_WritePin(Accel_stepper->Dir_Port, Accel_stepper->Dir_Pin, 0);
 800152e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001532:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001534:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001538:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800153c:	2200      	movs	r2, #0
 800153e:	4619      	mov	r1, r3
 8001540:	f005 fefe 	bl	8007340 <HAL_GPIO_WritePin>
		step = -2*step;
 8001544:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	1a14      	subs	r4, r2, r0
 8001552:	eb63 0501 	sbc.w	r5, r3, r1
 8001556:	1923      	adds	r3, r4, r4
 8001558:	623b      	str	r3, [r7, #32]
 800155a:	eb45 0305 	adc.w	r3, r5, r5
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001560:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001564:	e9c7 4520 	strd	r4, r5, [r7, #128]	@ 0x80
	}


//  If moving only 1 step.
	if(step == 1){
 8001568:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800156c:	1e51      	subs	r1, r2, #1
 800156e:	430b      	orrs	r3, r1
 8001570:	d11a      	bne.n	80015a8 <Accel_Stepper_Move+0x110>

//      Move one step...
		Accel_stepper->accel_count = -1;
 8001572:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001576:	f04f 32ff 	mov.w	r2, #4294967295
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
//      ...in DECEL state.
		Accel_stepper->run_state = DECEL;
 8001582:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001586:	2202      	movs	r2, #2
 8001588:	705a      	strb	r2, [r3, #1]
//      Just a short delay so main() can act on 'running'.
		Accel_stepper->step_delay = 1000;
 800158a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800158e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	e9c1 2302 	strd	r2, r3, [r1, #8]
//      status.running = TRUE;
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
 800159a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800159e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a0:	4618      	mov	r0, r3
 80015a2:	f008 fda1 	bl	800a0e8 <HAL_TIM_Base_Start_IT>
		Accel_stepper->accel_count = 0;
//    status.running = TRUE;
		__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, 1000);
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
	}
}
 80015a6:	e1cd      	b.n	8001944 <Accel_Stepper_Move+0x4ac>
	else if(step != 0){
 80015a8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80015ac:	4313      	orrs	r3, r2
 80015ae:	f000 81c9 	beq.w	8001944 <Accel_Stepper_Move+0x4ac>
		Accel_stepper->min_step_delay = ALPHA*TIM_FREQ/speed;
 80015b2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80015b6:	f7fe fff9 	bl	80005ac <__aeabi_ul2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	a19c      	add	r1, pc, #624	@ (adr r1, 8001830 <Accel_Stepper_Move+0x398>)
 80015c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015c4:	f7ff f952 	bl	800086c <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fb82 	bl	8000cd8 <__aeabi_d2lz>
 80015d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015d8:	e9c3 0108 	strd	r0, r1, [r3, #32]
		Accel_stepper->step_delay = (TIM_FREQ_SCALE * sqrt(A_SQ / accel))/10000;;
 80015dc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80015e0:	a195      	add	r1, pc, #596	@ (adr r1, 8001838 <Accel_Stepper_Move+0x3a0>)
 80015e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015e6:	f7ff fb5f 	bl	8000ca8 <__aeabi_uldivmod>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7fe ffdb 	bl	80005ac <__aeabi_ul2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	ec43 2b10 	vmov	d0, r2, r3
 80015fe:	f013 f985 	bl	801490c <sqrt>
 8001602:	ec51 0b10 	vmov	r0, r1, d0
 8001606:	a38e      	add	r3, pc, #568	@ (adr r3, 8001840 <Accel_Stepper_Move+0x3a8>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7ff f804 	bl	8000618 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	a38b      	add	r3, pc, #556	@ (adr r3, 8001848 <Accel_Stepper_Move+0x3b0>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7ff f925 	bl	800086c <__aeabi_ddiv>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fb6d 	bl	8000d08 <__aeabi_d2ulz>
 800162e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001632:	e9c3 0102 	strd	r0, r1, [r3, #8]
		max_step_lim = (long)speed*speed*10000/(long)(((long)A_x20000*accel)/100);
 8001636:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800163a:	17da      	asrs	r2, r3, #31
 800163c:	673b      	str	r3, [r7, #112]	@ 0x70
 800163e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001640:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001644:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001648:	462a      	mov	r2, r5
 800164a:	fb02 f203 	mul.w	r2, r2, r3
 800164e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001652:	4621      	mov	r1, r4
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	441a      	add	r2, r3
 800165a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800165e:	4621      	mov	r1, r4
 8001660:	fba3 ab01 	umull	sl, fp, r3, r1
 8001664:	eb02 030b 	add.w	r3, r2, fp
 8001668:	469b      	mov	fp, r3
 800166a:	4652      	mov	r2, sl
 800166c:	465b      	mov	r3, fp
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	f04f 0100 	mov.w	r1, #0
 8001676:	0099      	lsls	r1, r3, #2
 8001678:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800167c:	0090      	lsls	r0, r2, #2
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	eb12 080a 	adds.w	r8, r2, sl
 8001686:	eb43 090b 	adc.w	r9, r3, fp
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800169a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800169e:	4690      	mov	r8, r2
 80016a0:	4699      	mov	r9, r3
 80016a2:	ebb8 030a 	subs.w	r3, r8, sl
 80016a6:	61bb      	str	r3, [r7, #24]
 80016a8:	eb69 030b 	sbc.w	r3, r9, fp
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80016ba:	4629      	mov	r1, r5
 80016bc:	010b      	lsls	r3, r1, #4
 80016be:	4621      	mov	r1, r4
 80016c0:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80016c4:	4621      	mov	r1, r4
 80016c6:	010a      	lsls	r2, r1, #4
 80016c8:	4611      	mov	r1, r2
 80016ca:	461a      	mov	r2, r3
 80016cc:	460b      	mov	r3, r1
 80016ce:	eb13 030a 	adds.w	r3, r3, sl
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	4613      	mov	r3, r2
 80016d6:	eb43 030b 	adc.w	r3, r3, fp
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016e8:	4629      	mov	r1, r5
 80016ea:	010b      	lsls	r3, r1, #4
 80016ec:	4621      	mov	r1, r4
 80016ee:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 80016f2:	4621      	mov	r1, r4
 80016f4:	010a      	lsls	r2, r1, #4
 80016f6:	4614      	mov	r4, r2
 80016f8:	461d      	mov	r5, r3
 80016fa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	1896      	adds	r6, r2, r2
 8001704:	60be      	str	r6, [r7, #8]
 8001706:	415b      	adcs	r3, r3
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800170e:	1816      	adds	r6, r2, r0
 8001710:	603e      	str	r6, [r7, #0]
 8001712:	414b      	adcs	r3, r1
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001722:	464e      	mov	r6, r9
 8001724:	00f3      	lsls	r3, r6, #3
 8001726:	4646      	mov	r6, r8
 8001728:	ea43 7356 	orr.w	r3, r3, r6, lsr #29
 800172c:	4646      	mov	r6, r8
 800172e:	00f2      	lsls	r2, r6, #3
 8001730:	4690      	mov	r8, r2
 8001732:	4699      	mov	r9, r3
 8001734:	4643      	mov	r3, r8
 8001736:	181b      	adds	r3, r3, r0
 8001738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800173a:	464b      	mov	r3, r9
 800173c:	eb41 0303 	adc.w	r3, r1, r3
 8001740:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001742:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800174e:	f7ff faab 	bl	8000ca8 <__aeabi_uldivmod>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4613      	mov	r3, r2
 8001758:	17da      	asrs	r2, r3, #31
 800175a:	663b      	str	r3, [r7, #96]	@ 0x60
 800175c:	667a      	str	r2, [r7, #100]	@ 0x64
 800175e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001762:	4620      	mov	r0, r4
 8001764:	4629      	mov	r1, r5
 8001766:	f7ff fa9f 	bl	8000ca8 <__aeabi_uldivmod>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		if(max_step_lim == 0){
 8001772:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8001776:	4313      	orrs	r3, r2
 8001778:	d105      	bne.n	8001786 <Accel_Stepper_Move+0x2ee>
			max_step_lim = 1;
 800177a:	f04f 0201 	mov.w	r2, #1
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
		accel_lim = ((long)step*decel) / (accel+decel);
 8001786:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800178a:	17da      	asrs	r2, r3, #31
 800178c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800178e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001794:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001798:	462a      	mov	r2, r5
 800179a:	fb02 f203 	mul.w	r2, r2, r3
 800179e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017a2:	4621      	mov	r1, r4
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	441a      	add	r2, r3
 80017aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80017ae:	4621      	mov	r1, r4
 80017b0:	fba3 1301 	umull	r1, r3, r3, r1
 80017b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017b6:	460b      	mov	r3, r1
 80017b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80017ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80017bc:	18d3      	adds	r3, r2, r3
 80017be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017c0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80017c4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 80017c8:	1884      	adds	r4, r0, r2
 80017ca:	653c      	str	r4, [r7, #80]	@ 0x50
 80017cc:	eb41 0303 	adc.w	r3, r1, r3
 80017d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80017d2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80017d6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80017da:	f7ff fa65 	bl	8000ca8 <__aeabi_uldivmod>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		if(accel_lim == 0){
 80017e6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80017ea:	4313      	orrs	r3, r2
 80017ec:	d105      	bne.n	80017fa <Accel_Stepper_Move+0x362>
			accel_lim = 1;
 80017ee:	f04f 0201 	mov.w	r2, #1
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		if(accel_lim <= max_step_lim){
 80017fa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80017fe:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8001802:	4290      	cmp	r0, r2
 8001804:	eb71 0303 	sbcs.w	r3, r1, r3
 8001808:	d328      	bcc.n	800185c <Accel_Stepper_Move+0x3c4>
			Accel_stepper->decel_val = accel_lim - step;//decel_val: step for decel)
 800180a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800180e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001812:	1a84      	subs	r4, r0, r2
 8001814:	64bc      	str	r4, [r7, #72]	@ 0x48
 8001816:	eb61 0303 	sbc.w	r3, r1, r3
 800181a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800181c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001820:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001824:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001828:	e035      	b.n	8001896 <Accel_Stepper_Move+0x3fe>
 800182a:	bf00      	nop
 800182c:	f3af 8000 	nop.w
 8001830:	43958106 	.word	0x43958106
 8001834:	4093a28b 	.word	0x4093a28b
 8001838:	017f7eb0 	.word	0x017f7eb0
	...
 8001844:	4124a140 	.word	0x4124a140
 8001848:	00000000 	.word	0x00000000
 800184c:	40c38800 	.word	0x40c38800
 8001850:	404e0000 	.word	0x404e0000
 8001854:	f01b866e 	.word	0xf01b866e
 8001858:	401921f9 	.word	0x401921f9
			Accel_stepper->decel_val = -(((long)(max_step_lim*accel))/decel);
 800185c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001860:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	17da      	asrs	r2, r3, #31
 800186a:	643b      	str	r3, [r7, #64]	@ 0x40
 800186c:	647a      	str	r2, [r7, #68]	@ 0x44
 800186e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8001872:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001876:	f7ff fa17 	bl	8000ca8 <__aeabi_uldivmod>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	2100      	movs	r1, #0
 8001880:	4250      	negs	r0, r2
 8001882:	63b8      	str	r0, [r7, #56]	@ 0x38
 8001884:	eb61 0303 	sbc.w	r3, r1, r3
 8001888:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800188a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800188e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001892:	e9c1 2306 	strd	r2, r3, [r1, #24]
		if(Accel_stepper->decel_val == 0){
 8001896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800189a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	d107      	bne.n	80018b2 <Accel_Stepper_Move+0x41a>
			Accel_stepper->decel_val = -1;
 80018a2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018a6:	f04f 32ff 	mov.w	r2, #4294967295
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	e9c1 2306 	strd	r2, r3, [r1, #24]
		Accel_stepper->decel_start = step + Accel_stepper->decel_val;
 80018b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018b6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80018ba:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80018be:	1884      	adds	r4, r0, r2
 80018c0:	633c      	str	r4, [r7, #48]	@ 0x30
 80018c2:	eb41 0303 	adc.w	r3, r1, r3
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80018c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80018cc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if(Accel_stepper->step_delay <= Accel_stepper->min_step_delay){
 80018d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018dc:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018e0:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 80018e4:	4290      	cmp	r0, r2
 80018e6:	eb71 0303 	sbcs.w	r3, r1, r3
 80018ea:	d30c      	bcc.n	8001906 <Accel_Stepper_Move+0x46e>
			Accel_stepper->step_delay = Accel_stepper->min_step_delay;
 80018ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80018f4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80018f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			Accel_stepper->run_state = RUN;
 80018fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001900:	2203      	movs	r2, #3
 8001902:	705a      	strb	r2, [r3, #1]
 8001904:	e003      	b.n	800190e <Accel_Stepper_Move+0x476>
			Accel_stepper->run_state = ACCEL;
 8001906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800190a:	2201      	movs	r2, #1
 800190c:	705a      	strb	r2, [r3, #1]
		Accel_stepper->accel_count = 0;
 800190e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(Accel_stepper->htim, 1000);
 800191e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800192a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800192c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001932:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001936:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start_IT(Accel_stepper->htim);
 8001938:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800193c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800193e:	4618      	mov	r0, r3
 8001940:	f008 fbd2 	bl	800a0e8 <HAL_TIM_Base_Start_IT>
}
 8001944:	bf00      	nop
 8001946:	37ac      	adds	r7, #172	@ 0xac
 8001948:	46bd      	mov	sp, r7
 800194a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800194e:	bf00      	nop

08001950 <initializeCNC_pos>:
#include "Inverse_cnc.h"

extern Inv_CNC_t CNC;
extern CNC_pos_t CNC_pos;

void initializeCNC_pos(CNC_pos_t *cnc) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	cnc->Lsw1 = 0;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
	cnc->Lsw2 = 0;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	705a      	strb	r2, [r3, #1]
	cnc->Lsw3 = 0;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	709a      	strb	r2, [r3, #2]
	cnc->Lsw4 = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	70da      	strb	r2, [r3, #3]
	cnc->Lsw5 = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	711a      	strb	r2, [r3, #4]
	cnc->Lsw6 = 0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	715a      	strb	r2, [r3, #5]
    cnc->accel1 = 0;
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    cnc->accel2 = 0;
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    cnc->accel3 = 0;
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    cnc->jerk1 = 0;
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    cnc->jerk2 = 0;
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    cnc->jerk3 = 0;
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
    cnc->max_speedXY = 30000;
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	a320      	add	r3, pc, #128	@ (adr r3, 8001a54 <initializeCNC_pos+0x104>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    cnc->max_speedZ = 7000;
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	a31f      	add	r3, pc, #124	@ (adr r3, 8001a5c <initializeCNC_pos+0x10c>)
 80019e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e4:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    cnc->a_maxX = 10000;
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	a31e      	add	r3, pc, #120	@ (adr r3, 8001a64 <initializeCNC_pos+0x114>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    cnc->j_maxX = 7000;
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	a319      	add	r3, pc, #100	@ (adr r3, 8001a5c <initializeCNC_pos+0x10c>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    cnc->a_maxY = 10000;
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	a318      	add	r3, pc, #96	@ (adr r3, 8001a64 <initializeCNC_pos+0x114>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    cnc->j_maxY = 7000;
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	a313      	add	r3, pc, #76	@ (adr r3, 8001a5c <initializeCNC_pos+0x10c>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    cnc->a_maxZ = 1000;
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <initializeCNC_pos+0x100>)
 8001a20:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    cnc->j_maxZ = 1000;
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <initializeCNC_pos+0x100>)
 8001a2c:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
    cnc->t = 0.25;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8001a36:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    cnc->t1 = 0.5;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001a40:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	408f4000 	.word	0x408f4000
 8001a54:	00000000 	.word	0x00000000
 8001a58:	40dd4c00 	.word	0x40dd4c00
 8001a5c:	00000000 	.word	0x00000000
 8001a60:	40bb5800 	.word	0x40bb5800
 8001a64:	00000000 	.word	0x00000000
 8001a68:	40c38800 	.word	0x40c38800

08001a6c <trans_to_posXY>:

void trans_to_posXY(float x,float y)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a76:	edc7 0a00 	vstr	s1, [r7]
	CNC.set_posX = x - CNC.pos_x;
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7fe fd74 	bl	8000568 <__aeabi_f2d>
 8001a80:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <trans_to_posXY+0x4c>)
 8001a82:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a86:	f7fe fc0f 	bl	80002a8 <__aeabi_dsub>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	490a      	ldr	r1, [pc, #40]	@ (8001ab8 <trans_to_posXY+0x4c>)
 8001a90:	e9c1 2300 	strd	r2, r3, [r1]
	CNC.set_posY = y - CNC.pos_y;
 8001a94:	6838      	ldr	r0, [r7, #0]
 8001a96:	f7fe fd67 	bl	8000568 <__aeabi_f2d>
 8001a9a:	4b07      	ldr	r3, [pc, #28]	@ (8001ab8 <trans_to_posXY+0x4c>)
 8001a9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001aa0:	f7fe fc02 	bl	80002a8 <__aeabi_dsub>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4903      	ldr	r1, [pc, #12]	@ (8001ab8 <trans_to_posXY+0x4c>)
 8001aaa:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000838 	.word	0x20000838

08001abc <trans_to_posZ>:
void trans_to_posZ(float z)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	ed87 0a01 	vstr	s0, [r7, #4]
	CNC.set_posZ = z - CNC.pos_z;
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7fe fd4e 	bl	8000568 <__aeabi_f2d>
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <trans_to_posZ+0x2c>)
 8001ace:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001ad2:	f7fe fbe9 	bl	80002a8 <__aeabi_dsub>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4903      	ldr	r1, [pc, #12]	@ (8001ae8 <trans_to_posZ+0x2c>)
 8001adc:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000838 	.word	0x20000838

08001aec <caculate_pos>:

signed long long int caculate_pos(double pos, double pwm)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	ed87 0b02 	vstr	d0, [r7, #8]
 8001af6:	ed87 1b00 	vstr	d1, [r7]
	return pos*pwm;
 8001afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001afe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b02:	f7fe fd89 	bl	8000618 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7ff f8e3 	bl	8000cd8 <__aeabi_d2lz>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
}
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b26:	463b      	mov	r3, r7
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b32:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b34:	4a19      	ldr	r2, [pc, #100]	@ (8001b9c <MX_ADC1_Init+0x7c>)
 8001b36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b38:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b40:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b46:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b52:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b60:	4b0d      	ldr	r3, [pc, #52]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b62:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba0 <MX_ADC1_Init+0x80>)
 8001b64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b66:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b72:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b80:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <MX_ADC1_Init+0x78>)
 8001b82:	f003 ffcf 	bl	8005b24 <HAL_ADC_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b8c:	f001 fc20 	bl	80033d0 <Error_Handler>
//  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
//  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
//  {
//    Error_Handler();
//  }
}
 8001b90:	bf00      	nop
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	200003d0 	.word	0x200003d0
 8001b9c:	40012000 	.word	0x40012000
 8001ba0:	0f000001 	.word	0x0f000001

08001ba4 <ADC_Select_CH10>:

void ADC_Select_CH10(void){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
	ADC_ChannelConfTypeDef sConfig = {0};
 8001baa:	463b      	mov	r3, r7
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_10;
 8001bb6:	230a      	movs	r3, #10
 8001bb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4806      	ldr	r0, [pc, #24]	@ (8001be0 <ADC_Select_CH10+0x3c>)
 8001bc8:	f004 fabc 	bl	8006144 <HAL_ADC_ConfigChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <ADC_Select_CH10+0x32>
  {
    Error_Handler();
 8001bd2:	f001 fbfd 	bl	80033d0 <Error_Handler>
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200003d0 	.word	0x200003d0

08001be4 <ADC_Select_CH11>:

void ADC_Select_CH11(void){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
	ADC_ChannelConfTypeDef sConfig = {0};
 8001bea:	463b      	mov	r3, r7
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_11;
 8001bf6:	230b      	movs	r3, #11
 8001bf8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001bfe:	2307      	movs	r3, #7
 8001c00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	4619      	mov	r1, r3
 8001c06:	4806      	ldr	r0, [pc, #24]	@ (8001c20 <ADC_Select_CH11+0x3c>)
 8001c08:	f004 fa9c 	bl	8006144 <HAL_ADC_ConfigChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <ADC_Select_CH11+0x32>
  {
    Error_Handler();
 8001c12:	f001 fbdd 	bl	80033d0 <Error_Handler>
  }
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200003d0 	.word	0x200003d0

08001c24 <MX_DMA_ADC_Init>:
/**
  * Enable DMA controller clock
  */
void MX_DMA_ADC_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <MX_DMA_ADC_Init+0x3c>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	4a0b      	ldr	r2, [pc, #44]	@ (8001c60 <MX_DMA_ADC_Init+0x3c>)
 8001c34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <MX_DMA_ADC_Init+0x3c>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2105      	movs	r1, #5
 8001c4a:	2038      	movs	r0, #56	@ 0x38
 8001c4c:	f004 fd7d 	bl	800674a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001c50:	2038      	movs	r0, #56	@ 0x38
 8001c52:	f004 fd96 	bl	8006782 <HAL_NVIC_EnableIRQ>

}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800

08001c64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	@ 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a33      	ldr	r2, [pc, #204]	@ (8001d50 <HAL_ADC_MspInit+0xec>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d15f      	bne.n	8001d46 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	4b32      	ldr	r3, [pc, #200]	@ (8001d54 <HAL_ADC_MspInit+0xf0>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	4a31      	ldr	r2, [pc, #196]	@ (8001d54 <HAL_ADC_MspInit+0xf0>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c96:	4b2f      	ldr	r3, [pc, #188]	@ (8001d54 <HAL_ADC_MspInit+0xf0>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8001d54 <HAL_ADC_MspInit+0xf0>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a2a      	ldr	r2, [pc, #168]	@ (8001d54 <HAL_ADC_MspInit+0xf0>)
 8001cac:	f043 0304 	orr.w	r3, r3, #4
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b28      	ldr	r3, [pc, #160]	@ (8001d54 <HAL_ADC_MspInit+0xf0>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4821      	ldr	r0, [pc, #132]	@ (8001d58 <HAL_ADC_MspInit+0xf4>)
 8001cd2:	f005 f981 	bl	8006fd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cd6:	4b21      	ldr	r3, [pc, #132]	@ (8001d5c <HAL_ADC_MspInit+0xf8>)
 8001cd8:	4a21      	ldr	r2, [pc, #132]	@ (8001d60 <HAL_ADC_MspInit+0xfc>)
 8001cda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d5c <HAL_ADC_MspInit+0xf8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <HAL_ADC_MspInit+0xf8>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <HAL_ADC_MspInit+0xf8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cee:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <HAL_ADC_MspInit+0xf8>)
 8001cf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cf4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <HAL_ADC_MspInit+0xf8>)
 8001cf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cfc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cfe:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <HAL_ADC_MspInit+0xf8>)
 8001d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d06:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <HAL_ADC_MspInit+0xf8>)
 8001d08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d0c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <HAL_ADC_MspInit+0xf8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <HAL_ADC_MspInit+0xf8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d1a:	4810      	ldr	r0, [pc, #64]	@ (8001d5c <HAL_ADC_MspInit+0xf8>)
 8001d1c:	f004 fd4c 	bl	80067b8 <HAL_DMA_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d26:	f001 fb53 	bl	80033d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d5c <HAL_ADC_MspInit+0xf8>)
 8001d2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d30:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <HAL_ADC_MspInit+0xf8>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2105      	movs	r1, #5
 8001d3a:	2012      	movs	r0, #18
 8001d3c:	f004 fd05 	bl	800674a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d40:	2012      	movs	r0, #18
 8001d42:	f004 fd1e 	bl	8006782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	@ 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40012000 	.word	0x40012000
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	20000418 	.word	0x20000418
 8001d60:	40026410 	.word	0x40026410

08001d64 <prepare_data>:
/* USER CODE END PTD */
extern osMutexId_t lcdMutexHandle;
extern osSemaphoreId_t uartRxSemaphoreHandle;
extern UART_HandleTypeDef huart2;
/* UART TX BEGIN */
void prepare_data(void) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af02      	add	r7, sp, #8
    snprintf(transmitData.voltage_data, sizeof(transmitData.voltage_data), "%.2f", LCD_adc.voltage);
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <prepare_data+0x7c>)
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbfa 	bl	8000568 <__aeabi_f2d>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	e9cd 2300 	strd	r2, r3, [sp]
 8001d7c:	4a19      	ldr	r2, [pc, #100]	@ (8001de4 <prepare_data+0x80>)
 8001d7e:	2114      	movs	r1, #20
 8001d80:	4819      	ldr	r0, [pc, #100]	@ (8001de8 <prepare_data+0x84>)
 8001d82:	f00e fcf1 	bl	8010768 <sniprintf>
    snprintf(transmitData.current_data, sizeof(transmitData.current_data), "%.2f", LCD_adc.current);
 8001d86:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <prepare_data+0x7c>)
 8001d88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbec 	bl	8000568 <__aeabi_f2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	e9cd 2300 	strd	r2, r3, [sp]
 8001d98:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <prepare_data+0x80>)
 8001d9a:	2114      	movs	r1, #20
 8001d9c:	4813      	ldr	r0, [pc, #76]	@ (8001dec <prepare_data+0x88>)
 8001d9e:	f00e fce3 	bl	8010768 <sniprintf>
    snprintf(transmitData.temperature_data, sizeof(transmitData.temperature_data), "%.2f", LCD_adc.Temp);
 8001da2:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <prepare_data+0x7c>)
 8001da4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fbde 	bl	8000568 <__aeabi_f2d>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	e9cd 2300 	strd	r2, r3, [sp]
 8001db4:	4a0b      	ldr	r2, [pc, #44]	@ (8001de4 <prepare_data+0x80>)
 8001db6:	2114      	movs	r1, #20
 8001db8:	480d      	ldr	r0, [pc, #52]	@ (8001df0 <prepare_data+0x8c>)
 8001dba:	f00e fcd5 	bl	8010768 <sniprintf>
    snprintf(transmitData.power_data, sizeof(transmitData.power_data), "%.2f", LCD_adc.power);
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <prepare_data+0x7c>)
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fbd0 	bl	8000568 <__aeabi_f2d>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	e9cd 2300 	strd	r2, r3, [sp]
 8001dd0:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <prepare_data+0x80>)
 8001dd2:	2114      	movs	r1, #20
 8001dd4:	4807      	ldr	r0, [pc, #28]	@ (8001df4 <prepare_data+0x90>)
 8001dd6:	f00e fcc7 	bl	8010768 <sniprintf>
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200008bc 	.word	0x200008bc
 8001de4:	08015758 	.word	0x08015758
 8001de8:	20000478 	.word	0x20000478
 8001dec:	2000048c 	.word	0x2000048c
 8001df0:	200004a0 	.word	0x200004a0
 8001df4:	200004b4 	.word	0x200004b4

08001df8 <UART_transmit_init>:


void UART_transmit_init(void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
    send_uart_data();
 8001dfc:	f000 f802 	bl	8001e04 <send_uart_data>
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <send_uart_data>:

void send_uart_data(void) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af04      	add	r7, sp, #16
    prepare_data();
 8001e0a:	f7ff ffab 	bl	8001d64 <prepare_data>
    int len = snprintf((char *)buffer, sizeof(buffer),
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <send_uart_data+0x3c>)
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <send_uart_data+0x40>)
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <send_uart_data+0x44>)
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <send_uart_data+0x48>)
 8001e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e50 <send_uart_data+0x4c>)
 8001e1e:	2164      	movs	r1, #100	@ 0x64
 8001e20:	480c      	ldr	r0, [pc, #48]	@ (8001e54 <send_uart_data+0x50>)
 8001e22:	f00e fca1 	bl	8010768 <sniprintf>
 8001e26:	6078      	str	r0, [r7, #4]
                       "V:%s,C:%s,T:%s,P:%s\n",
                       transmitData.voltage_data,
                       transmitData.current_data,
                       transmitData.temperature_data,
                       transmitData.power_data);
    HAL_UART_Transmit_IT(&huart2, (uint8_t *)buffer, len);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4909      	ldr	r1, [pc, #36]	@ (8001e54 <send_uart_data+0x50>)
 8001e30:	4809      	ldr	r0, [pc, #36]	@ (8001e58 <send_uart_data+0x54>)
 8001e32:	f008 fe88 	bl	800ab46 <HAL_UART_Transmit_IT>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200004b4 	.word	0x200004b4
 8001e44:	200004a0 	.word	0x200004a0
 8001e48:	2000048c 	.word	0x2000048c
 8001e4c:	20000478 	.word	0x20000478
 8001e50:	08015760 	.word	0x08015760
 8001e54:	200004cc 	.word	0x200004cc
 8001e58:	20000be8 	.word	0x20000be8

08001e5c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
        // Do nothing, the timer will call send_uart_data to send data
    }
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <UART_RECEIVE_Init>:

/* UART TX END */

/* UART RX BEGIN */
void UART_RECEIVE_Init(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, rxBuffer, 1);  // Nhận từng byte một
 8001e74:	2201      	movs	r2, #1
 8001e76:	4903      	ldr	r1, [pc, #12]	@ (8001e84 <UART_RECEIVE_Init+0x14>)
 8001e78:	4803      	ldr	r0, [pc, #12]	@ (8001e88 <UART_RECEIVE_Init+0x18>)
 8001e7a:	f008 fe9a 	bl	800abb2 <HAL_UART_Receive_IT>
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000530 	.word	0x20000530
 8001e88:	20000be8 	.word	0x20000be8

08001e8c <start_command>:

void start_command(void) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	handle_start_button_press();
 8001e90:	f002 ff02 	bl	8004c98 <handle_start_button_press>
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <stop_command>:

void stop_command(void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	handle_stop_button_press();
 8001e9c:	f002 ff22 	bl	8004ce4 <handle_stop_button_press>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <reset_command>:

void reset_command(void) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	handle_reset_button_press();
 8001ea8:	f002 fee6 	bl	8004c78 <handle_reset_button_press>
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <drill_on_command>:

void drill_on_command(void) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(drill_port, drill_pin, GPIO_PIN_SET);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eba:	4802      	ldr	r0, [pc, #8]	@ (8001ec4 <drill_on_command+0x14>)
 8001ebc:	f005 fa40 	bl	8007340 <HAL_GPIO_WritePin>
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40020400 	.word	0x40020400

08001ec8 <drill_off_command>:

void drill_off_command(void) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(drill_port, drill_pin, GPIO_PIN_RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ed2:	4802      	ldr	r0, [pc, #8]	@ (8001edc <drill_off_command+0x14>)
 8001ed4:	f005 fa34 	bl	8007340 <HAL_GPIO_WritePin>
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40020400 	.word	0x40020400

08001ee0 <low_command>:

void low_command(void) {
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 10000;
 8001ee4:	491e      	ldr	r1, [pc, #120]	@ (8001f60 <low_command+0x80>)
 8001ee6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001f50 <low_command+0x70>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    CNC_pos.max_speedZ = 5000;
 8001ef0:	491b      	ldr	r1, [pc, #108]	@ (8001f60 <low_command+0x80>)
 8001ef2:	a319      	add	r3, pc, #100	@ (adr r3, 8001f58 <low_command+0x78>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    CNC_pos.a_maxX = 5000;
 8001efc:	4918      	ldr	r1, [pc, #96]	@ (8001f60 <low_command+0x80>)
 8001efe:	a316      	add	r3, pc, #88	@ (adr r3, 8001f58 <low_command+0x78>)
 8001f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f04:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    CNC_pos.j_maxX = 5000;
 8001f08:	4915      	ldr	r1, [pc, #84]	@ (8001f60 <low_command+0x80>)
 8001f0a:	a313      	add	r3, pc, #76	@ (adr r3, 8001f58 <low_command+0x78>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    CNC_pos.a_maxY = 5000;
 8001f14:	4912      	ldr	r1, [pc, #72]	@ (8001f60 <low_command+0x80>)
 8001f16:	a310      	add	r3, pc, #64	@ (adr r3, 8001f58 <low_command+0x78>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    CNC_pos.j_maxY = 5000;
 8001f20:	490f      	ldr	r1, [pc, #60]	@ (8001f60 <low_command+0x80>)
 8001f22:	a30d      	add	r3, pc, #52	@ (adr r3, 8001f58 <low_command+0x78>)
 8001f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f28:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    CNC_pos.a_maxZ = 500;
 8001f2c:	490c      	ldr	r1, [pc, #48]	@ (8001f60 <low_command+0x80>)
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <low_command+0x84>)
 8001f34:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    CNC_pos.j_maxZ = 500;
 8001f38:	4909      	ldr	r1, [pc, #36]	@ (8001f60 <low_command+0x80>)
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <low_command+0x84>)
 8001f40:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	00000000 	.word	0x00000000
 8001f54:	40c38800 	.word	0x40c38800
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	40b38800 	.word	0x40b38800
 8001f60:	20000778 	.word	0x20000778
 8001f64:	407f4000 	.word	0x407f4000

08001f68 <medium_command>:

void medium_command(void) {
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 30000;
 8001f6c:	4920      	ldr	r1, [pc, #128]	@ (8001ff0 <medium_command+0x88>)
 8001f6e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001fd8 <medium_command+0x70>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    CNC_pos.max_speedZ = 7000;
 8001f78:	491d      	ldr	r1, [pc, #116]	@ (8001ff0 <medium_command+0x88>)
 8001f7a:	a319      	add	r3, pc, #100	@ (adr r3, 8001fe0 <medium_command+0x78>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    CNC_pos.a_maxX = 10000;
 8001f84:	491a      	ldr	r1, [pc, #104]	@ (8001ff0 <medium_command+0x88>)
 8001f86:	a318      	add	r3, pc, #96	@ (adr r3, 8001fe8 <medium_command+0x80>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    CNC_pos.j_maxX = 7000;
 8001f90:	4917      	ldr	r1, [pc, #92]	@ (8001ff0 <medium_command+0x88>)
 8001f92:	a313      	add	r3, pc, #76	@ (adr r3, 8001fe0 <medium_command+0x78>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    CNC_pos.a_maxY = 10000;
 8001f9c:	4914      	ldr	r1, [pc, #80]	@ (8001ff0 <medium_command+0x88>)
 8001f9e:	a312      	add	r3, pc, #72	@ (adr r3, 8001fe8 <medium_command+0x80>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    CNC_pos.j_maxY = 7000;
 8001fa8:	4911      	ldr	r1, [pc, #68]	@ (8001ff0 <medium_command+0x88>)
 8001faa:	a30d      	add	r3, pc, #52	@ (adr r3, 8001fe0 <medium_command+0x78>)
 8001fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb0:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    CNC_pos.a_maxZ = 1000;
 8001fb4:	490e      	ldr	r1, [pc, #56]	@ (8001ff0 <medium_command+0x88>)
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <medium_command+0x8c>)
 8001fbc:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    CNC_pos.j_maxZ = 1000;
 8001fc0:	490b      	ldr	r1, [pc, #44]	@ (8001ff0 <medium_command+0x88>)
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <medium_command+0x8c>)
 8001fc8:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	40dd4c00 	.word	0x40dd4c00
 8001fe0:	00000000 	.word	0x00000000
 8001fe4:	40bb5800 	.word	0x40bb5800
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	40c38800 	.word	0x40c38800
 8001ff0:	20000778 	.word	0x20000778
 8001ff4:	408f4000 	.word	0x408f4000

08001ff8 <high_command>:

void high_command(void) {
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
    CNC_pos.max_speedXY = 50000;
 8001ffc:	4922      	ldr	r1, [pc, #136]	@ (8002088 <high_command+0x90>)
 8001ffe:	a31a      	add	r3, pc, #104	@ (adr r3, 8002068 <high_command+0x70>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
    CNC_pos.max_speedZ = 10000;
 8002008:	491f      	ldr	r1, [pc, #124]	@ (8002088 <high_command+0x90>)
 800200a:	a319      	add	r3, pc, #100	@ (adr r3, 8002070 <high_command+0x78>)
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    CNC_pos.a_maxX = 20000;
 8002014:	491c      	ldr	r1, [pc, #112]	@ (8002088 <high_command+0x90>)
 8002016:	a318      	add	r3, pc, #96	@ (adr r3, 8002078 <high_command+0x80>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
    CNC_pos.j_maxX = 10000;
 8002020:	4919      	ldr	r1, [pc, #100]	@ (8002088 <high_command+0x90>)
 8002022:	a313      	add	r3, pc, #76	@ (adr r3, 8002070 <high_command+0x78>)
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
    CNC_pos.a_maxY = 20000;
 800202c:	4916      	ldr	r1, [pc, #88]	@ (8002088 <high_command+0x90>)
 800202e:	a312      	add	r3, pc, #72	@ (adr r3, 8002078 <high_command+0x80>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
    CNC_pos.j_maxY = 10000;
 8002038:	4913      	ldr	r1, [pc, #76]	@ (8002088 <high_command+0x90>)
 800203a:	a30d      	add	r3, pc, #52	@ (adr r3, 8002070 <high_command+0x78>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
    CNC_pos.a_maxZ = 1500;
 8002044:	4910      	ldr	r1, [pc, #64]	@ (8002088 <high_command+0x90>)
 8002046:	a30e      	add	r3, pc, #56	@ (adr r3, 8002080 <high_command+0x88>)
 8002048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204c:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
    CNC_pos.j_maxZ = 1000;
 8002050:	490d      	ldr	r1, [pc, #52]	@ (8002088 <high_command+0x90>)
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <high_command+0x94>)
 8002058:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	00000000 	.word	0x00000000
 800206c:	40e86a00 	.word	0x40e86a00
 8002070:	00000000 	.word	0x00000000
 8002074:	40c38800 	.word	0x40c38800
 8002078:	00000000 	.word	0x00000000
 800207c:	40d38800 	.word	0x40d38800
 8002080:	00000000 	.word	0x00000000
 8002084:	40977000 	.word	0x40977000
 8002088:	20000778 	.word	0x20000778
 800208c:	408f4000 	.word	0x408f4000

08002090 <add_coordinate>:

void add_coordinate(float x, float y, float z) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	ed87 0a03 	vstr	s0, [r7, #12]
 800209a:	edc7 0a02 	vstr	s1, [r7, #8]
 800209e:	ed87 1a01 	vstr	s2, [r7, #4]
    CoordinateNode *newNode = (CoordinateNode*)malloc(sizeof(CoordinateNode));
 80020a2:	2010      	movs	r0, #16
 80020a4:	f00d fb32 	bl	800f70c <malloc>
 80020a8:	4603      	mov	r3, r0
 80020aa:	613b      	str	r3, [r7, #16]
    newNode->x = x;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	601a      	str	r2, [r3, #0]
    newNode->y = y;
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	605a      	str	r2, [r3, #4]
    newNode->z = z;
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	609a      	str	r2, [r3, #8]
    newNode->next = NULL;
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]

    if (head == NULL) {
 80020c4:	4b0c      	ldr	r3, [pc, #48]	@ (80020f8 <add_coordinate+0x68>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <add_coordinate+0x44>
        head = newNode;
 80020cc:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <add_coordinate+0x68>)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	6013      	str	r3, [r2, #0]
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}
 80020d2:	e00d      	b.n	80020f0 <add_coordinate+0x60>
        CoordinateNode *current = head;
 80020d4:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <add_coordinate+0x68>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	617b      	str	r3, [r7, #20]
        while (current->next != NULL) {
 80020da:	e002      	b.n	80020e2 <add_coordinate+0x52>
            current = current->next;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	617b      	str	r3, [r7, #20]
        while (current->next != NULL) {
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f8      	bne.n	80020dc <add_coordinate+0x4c>
        current->next = newNode;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	60da      	str	r2, [r3, #12]
}
 80020f0:	bf00      	nop
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200004c8 	.word	0x200004c8

080020fc <clear_coordinates>:

void clear_coordinates(void) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
    CoordinateNode *current = head;
 8002102:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <clear_coordinates+0x34>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	607b      	str	r3, [r7, #4]
    CoordinateNode *next;

    while (current != NULL) {
 8002108:	e007      	b.n	800211a <clear_coordinates+0x1e>
        next = current->next;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	603b      	str	r3, [r7, #0]
        free(current);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f00d fb03 	bl	800f71c <free>
        current = next;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	607b      	str	r3, [r7, #4]
    while (current != NULL) {
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f4      	bne.n	800210a <clear_coordinates+0xe>
    }

    head = NULL;
 8002120:	4b03      	ldr	r3, [pc, #12]	@ (8002130 <clear_coordinates+0x34>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200004c8 	.word	0x200004c8

08002134 <move_to_coordinates>:

void move_to_coordinates(void) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
    CoordinateNode *current = head;
 800213a:	4b17      	ldr	r3, [pc, #92]	@ (8002198 <move_to_coordinates+0x64>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	607b      	str	r3, [r7, #4]

    while (current != NULL) {
 8002140:	e021      	b.n	8002186 <move_to_coordinates+0x52>
    	coordinate_X = current->x;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a15      	ldr	r2, [pc, #84]	@ (800219c <move_to_coordinates+0x68>)
 8002148:	6013      	str	r3, [r2, #0]
    	coordinate_Y = current->y;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4a14      	ldr	r2, [pc, #80]	@ (80021a0 <move_to_coordinates+0x6c>)
 8002150:	6013      	str	r3, [r2, #0]
    	coordinate_Z = current->z;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	4a13      	ldr	r2, [pc, #76]	@ (80021a4 <move_to_coordinates+0x70>)
 8002158:	6013      	str	r3, [r2, #0]
        MoveToPosXY(coordinate_X, coordinate_Y);
 800215a:	4b10      	ldr	r3, [pc, #64]	@ (800219c <move_to_coordinates+0x68>)
 800215c:	edd3 7a00 	vldr	s15, [r3]
 8002160:	4b0f      	ldr	r3, [pc, #60]	@ (80021a0 <move_to_coordinates+0x6c>)
 8002162:	ed93 7a00 	vldr	s14, [r3]
 8002166:	eef0 0a47 	vmov.f32	s1, s14
 800216a:	eeb0 0a67 	vmov.f32	s0, s15
 800216e:	f000 fa03 	bl	8002578 <MoveToPosXY>
        MoveToPosZ(coordinate_Z);
 8002172:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <move_to_coordinates+0x70>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	eeb0 0a67 	vmov.f32	s0, s15
 800217c:	f000 fbc0 	bl	8002900 <MoveToPosZ>
        current = current->next;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	607b      	str	r3, [r7, #4]
    while (current != NULL) {
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1da      	bne.n	8002142 <move_to_coordinates+0xe>
    }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200004c8 	.word	0x200004c8
 800219c:	20000748 	.word	0x20000748
 80021a0:	2000074c 	.word	0x2000074c
 80021a4:	20000750 	.word	0x20000750

080021a8 <process_goto_command>:

void process_goto_command(char *cmd) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	6078      	str	r0, [r7, #4]
    char *line = strtok(cmd, "GOTO");
 80021b0:	491c      	ldr	r1, [pc, #112]	@ (8002224 <process_goto_command+0x7c>)
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f00e fbd8 	bl	8010968 <strtok>
 80021b8:	6178      	str	r0, [r7, #20]
    clear_coordinates(); // Xóa danh sách tọa độ hiện tại
 80021ba:	f7ff ff9f 	bl	80020fc <clear_coordinates>

    while (line != NULL) {
 80021be:	e021      	b.n	8002204 <process_goto_command+0x5c>
        float x, y, z;
        if (sscanf(line, "%f,%f,%f", &x, &y, &z) == 3) {
 80021c0:	f107 010c 	add.w	r1, r7, #12
 80021c4:	f107 0210 	add.w	r2, r7, #16
 80021c8:	f107 0308 	add.w	r3, r7, #8
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	460b      	mov	r3, r1
 80021d0:	4915      	ldr	r1, [pc, #84]	@ (8002228 <process_goto_command+0x80>)
 80021d2:	6978      	ldr	r0, [r7, #20]
 80021d4:	f00e fb1c 	bl	8010810 <siscanf>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d10d      	bne.n	80021fa <process_goto_command+0x52>
            add_coordinate(x, y, z);
 80021de:	edd7 7a04 	vldr	s15, [r7, #16]
 80021e2:	ed97 7a03 	vldr	s14, [r7, #12]
 80021e6:	edd7 6a02 	vldr	s13, [r7, #8]
 80021ea:	eeb0 1a66 	vmov.f32	s2, s13
 80021ee:	eef0 0a47 	vmov.f32	s1, s14
 80021f2:	eeb0 0a67 	vmov.f32	s0, s15
 80021f6:	f7ff ff4b 	bl	8002090 <add_coordinate>
        }
        line = strtok(NULL, "GOTO");
 80021fa:	490a      	ldr	r1, [pc, #40]	@ (8002224 <process_goto_command+0x7c>)
 80021fc:	2000      	movs	r0, #0
 80021fe:	f00e fbb3 	bl	8010968 <strtok>
 8002202:	6178      	str	r0, [r7, #20]
    while (line != NULL) {
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1da      	bne.n	80021c0 <process_goto_command+0x18>
    }

    state.start_press = 1; // Đặt cờ để bắt đầu di chuyển đến tọa độ
 800220a:	4b08      	ldr	r3, [pc, #32]	@ (800222c <process_goto_command+0x84>)
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
    state.stop_press = 0;
 8002210:	4b06      	ldr	r3, [pc, #24]	@ (800222c <process_goto_command+0x84>)
 8002212:	2200      	movs	r2, #0
 8002214:	705a      	strb	r2, [r3, #1]
    state.reset_press = 0;
 8002216:	4b05      	ldr	r3, [pc, #20]	@ (800222c <process_goto_command+0x84>)
 8002218:	2200      	movs	r2, #0
 800221a:	709a      	strb	r2, [r3, #2]
}
 800221c:	bf00      	nop
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	08015778 	.word	0x08015778
 8002228:	08015780 	.word	0x08015780
 800222c:	20000a28 	.word	0x20000a28

08002230 <UART_rx_process>:

void UART_rx_process(void) {
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
    if (cmdstate) {
 8002234:	4b33      	ldr	r3, [pc, #204]	@ (8002304 <UART_rx_process+0xd4>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d061      	beq.n	8002300 <UART_rx_process+0xd0>
    	cmdstate = 0;
 800223c:	4b31      	ldr	r3, [pc, #196]	@ (8002304 <UART_rx_process+0xd4>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]

        if (strcmp(cmd, "START") == 0) {
 8002242:	4931      	ldr	r1, [pc, #196]	@ (8002308 <UART_rx_process+0xd8>)
 8002244:	4831      	ldr	r0, [pc, #196]	@ (800230c <UART_rx_process+0xdc>)
 8002246:	f7fd ffc3 	bl	80001d0 <strcmp>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <UART_rx_process+0x26>
            start_command();
 8002250:	f7ff fe1c 	bl	8001e8c <start_command>
            process_goto_command(cmd);
        } else {
        	process_ip_address(cmd);
        }
    }
}
 8002254:	e054      	b.n	8002300 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "STOP") == 0) {
 8002256:	492e      	ldr	r1, [pc, #184]	@ (8002310 <UART_rx_process+0xe0>)
 8002258:	482c      	ldr	r0, [pc, #176]	@ (800230c <UART_rx_process+0xdc>)
 800225a:	f7fd ffb9 	bl	80001d0 <strcmp>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <UART_rx_process+0x3a>
            stop_command();
 8002264:	f7ff fe18 	bl	8001e98 <stop_command>
}
 8002268:	e04a      	b.n	8002300 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "RESET") == 0) {
 800226a:	492a      	ldr	r1, [pc, #168]	@ (8002314 <UART_rx_process+0xe4>)
 800226c:	4827      	ldr	r0, [pc, #156]	@ (800230c <UART_rx_process+0xdc>)
 800226e:	f7fd ffaf 	bl	80001d0 <strcmp>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <UART_rx_process+0x4e>
            reset_command();
 8002278:	f7ff fe14 	bl	8001ea4 <reset_command>
}
 800227c:	e040      	b.n	8002300 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "ON") == 0) {
 800227e:	4926      	ldr	r1, [pc, #152]	@ (8002318 <UART_rx_process+0xe8>)
 8002280:	4822      	ldr	r0, [pc, #136]	@ (800230c <UART_rx_process+0xdc>)
 8002282:	f7fd ffa5 	bl	80001d0 <strcmp>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <UART_rx_process+0x62>
            drill_on_command();
 800228c:	f7ff fe10 	bl	8001eb0 <drill_on_command>
}
 8002290:	e036      	b.n	8002300 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "OFF") == 0) {
 8002292:	4922      	ldr	r1, [pc, #136]	@ (800231c <UART_rx_process+0xec>)
 8002294:	481d      	ldr	r0, [pc, #116]	@ (800230c <UART_rx_process+0xdc>)
 8002296:	f7fd ff9b 	bl	80001d0 <strcmp>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <UART_rx_process+0x76>
            drill_off_command();
 80022a0:	f7ff fe12 	bl	8001ec8 <drill_off_command>
}
 80022a4:	e02c      	b.n	8002300 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "LOW") == 0) {
 80022a6:	491e      	ldr	r1, [pc, #120]	@ (8002320 <UART_rx_process+0xf0>)
 80022a8:	4818      	ldr	r0, [pc, #96]	@ (800230c <UART_rx_process+0xdc>)
 80022aa:	f7fd ff91 	bl	80001d0 <strcmp>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <UART_rx_process+0x8a>
            low_command();
 80022b4:	f7ff fe14 	bl	8001ee0 <low_command>
}
 80022b8:	e022      	b.n	8002300 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "MEDIUM") == 0) {
 80022ba:	491a      	ldr	r1, [pc, #104]	@ (8002324 <UART_rx_process+0xf4>)
 80022bc:	4813      	ldr	r0, [pc, #76]	@ (800230c <UART_rx_process+0xdc>)
 80022be:	f7fd ff87 	bl	80001d0 <strcmp>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d102      	bne.n	80022ce <UART_rx_process+0x9e>
            medium_command();
 80022c8:	f7ff fe4e 	bl	8001f68 <medium_command>
}
 80022cc:	e018      	b.n	8002300 <UART_rx_process+0xd0>
        } else if (strcmp(cmd, "HIGH") == 0) {
 80022ce:	4916      	ldr	r1, [pc, #88]	@ (8002328 <UART_rx_process+0xf8>)
 80022d0:	480e      	ldr	r0, [pc, #56]	@ (800230c <UART_rx_process+0xdc>)
 80022d2:	f7fd ff7d 	bl	80001d0 <strcmp>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <UART_rx_process+0xb2>
            high_command();
 80022dc:	f7ff fe8c 	bl	8001ff8 <high_command>
}
 80022e0:	e00e      	b.n	8002300 <UART_rx_process+0xd0>
        } else if (strncmp(cmd, "GOTO", 4) == 0) {
 80022e2:	2204      	movs	r2, #4
 80022e4:	4911      	ldr	r1, [pc, #68]	@ (800232c <UART_rx_process+0xfc>)
 80022e6:	4809      	ldr	r0, [pc, #36]	@ (800230c <UART_rx_process+0xdc>)
 80022e8:	f00e fb18 	bl	801091c <strncmp>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d103      	bne.n	80022fa <UART_rx_process+0xca>
            process_goto_command(cmd);
 80022f2:	4806      	ldr	r0, [pc, #24]	@ (800230c <UART_rx_process+0xdc>)
 80022f4:	f7ff ff58 	bl	80021a8 <process_goto_command>
}
 80022f8:	e002      	b.n	8002300 <UART_rx_process+0xd0>
        	process_ip_address(cmd);
 80022fa:	4804      	ldr	r0, [pc, #16]	@ (800230c <UART_rx_process+0xdc>)
 80022fc:	f000 f818 	bl	8002330 <process_ip_address>
}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000744 	.word	0x20000744
 8002308:	0801578c 	.word	0x0801578c
 800230c:	20000630 	.word	0x20000630
 8002310:	08015794 	.word	0x08015794
 8002314:	0801579c 	.word	0x0801579c
 8002318:	080157a4 	.word	0x080157a4
 800231c:	080157a8 	.word	0x080157a8
 8002320:	080157ac 	.word	0x080157ac
 8002324:	080157b0 	.word	0x080157b0
 8002328:	080157b8 	.word	0x080157b8
 800232c:	08015778 	.word	0x08015778

08002330 <process_ip_address>:

void process_ip_address(char *ip_address) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
    // Store the received IP address
    strncpy(ip_config, ip_address, sizeof(ip_config) - 1);
 8002338:	2213      	movs	r2, #19
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4804      	ldr	r0, [pc, #16]	@ (8002350 <process_ip_address+0x20>)
 800233e:	f00e faff 	bl	8010940 <strncpy>
    ip_config[sizeof(ip_config) - 1] = '\0';  // Ensure null termination
 8002342:	4b03      	ldr	r3, [pc, #12]	@ (8002350 <process_ip_address+0x20>)
 8002344:	2200      	movs	r2, #0
 8002346:	74da      	strb	r2, [r3, #19]
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000730 	.word	0x20000730

08002354 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
    static uint8_t index = 0;

    if (huart->Instance == USART2) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a1e      	ldr	r2, [pc, #120]	@ (80023dc <HAL_UART_RxCpltCallback+0x88>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d135      	bne.n	80023d2 <HAL_UART_RxCpltCallback+0x7e>
        if (rxBuffer[0] != '\r' && rxBuffer[0] != '\n') {
 8002366:	4b1e      	ldr	r3, [pc, #120]	@ (80023e0 <HAL_UART_RxCpltCallback+0x8c>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b0d      	cmp	r3, #13
 800236c:	d013      	beq.n	8002396 <HAL_UART_RxCpltCallback+0x42>
 800236e:	4b1c      	ldr	r3, [pc, #112]	@ (80023e0 <HAL_UART_RxCpltCallback+0x8c>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b0a      	cmp	r3, #10
 8002374:	d00f      	beq.n	8002396 <HAL_UART_RxCpltCallback+0x42>
            if (index < sizeof(cmd) - 1) {
 8002376:	4b1b      	ldr	r3, [pc, #108]	@ (80023e4 <HAL_UART_RxCpltCallback+0x90>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2bff      	cmp	r3, #255	@ 0xff
 800237c:	d024      	beq.n	80023c8 <HAL_UART_RxCpltCallback+0x74>
            	cmd[index++] = rxBuffer[0];
 800237e:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <HAL_UART_RxCpltCallback+0x90>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	b2d1      	uxtb	r1, r2
 8002386:	4a17      	ldr	r2, [pc, #92]	@ (80023e4 <HAL_UART_RxCpltCallback+0x90>)
 8002388:	7011      	strb	r1, [r2, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <HAL_UART_RxCpltCallback+0x8c>)
 800238e:	7819      	ldrb	r1, [r3, #0]
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <HAL_UART_RxCpltCallback+0x94>)
 8002392:	5499      	strb	r1, [r3, r2]
            if (index < sizeof(cmd) - 1) {
 8002394:	e018      	b.n	80023c8 <HAL_UART_RxCpltCallback+0x74>
            }
        } else if (rxBuffer[0] == '\r') {
 8002396:	4b12      	ldr	r3, [pc, #72]	@ (80023e0 <HAL_UART_RxCpltCallback+0x8c>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b0d      	cmp	r3, #13
 800239c:	d114      	bne.n	80023c8 <HAL_UART_RxCpltCallback+0x74>
            if (index > 0) {
 800239e:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <HAL_UART_RxCpltCallback+0x90>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d010      	beq.n	80023c8 <HAL_UART_RxCpltCallback+0x74>
            	cmd[index] = '\0';
 80023a6:	4b0f      	ldr	r3, [pc, #60]	@ (80023e4 <HAL_UART_RxCpltCallback+0x90>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <HAL_UART_RxCpltCallback+0x94>)
 80023ae:	2100      	movs	r1, #0
 80023b0:	5499      	strb	r1, [r3, r2]
                index = 0;
 80023b2:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <HAL_UART_RxCpltCallback+0x90>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
                cmdstate = 1;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <HAL_UART_RxCpltCallback+0x98>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	701a      	strb	r2, [r3, #0]
                osSemaphoreRelease(uartRxSemaphoreHandle);
 80023be:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <HAL_UART_RxCpltCallback+0x9c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f009 ffc2 	bl	800c34c <osSemaphoreRelease>
            }
        }
        HAL_UART_Receive_IT(&huart2, rxBuffer, 1);
 80023c8:	2201      	movs	r2, #1
 80023ca:	4905      	ldr	r1, [pc, #20]	@ (80023e0 <HAL_UART_RxCpltCallback+0x8c>)
 80023cc:	4809      	ldr	r0, [pc, #36]	@ (80023f4 <HAL_UART_RxCpltCallback+0xa0>)
 80023ce:	f008 fbf0 	bl	800abb2 <HAL_UART_Receive_IT>
    }
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40004400 	.word	0x40004400
 80023e0:	20000530 	.word	0x20000530
 80023e4:	20000754 	.word	0x20000754
 80023e8:	20000630 	.word	0x20000630
 80023ec:	20000744 	.word	0x20000744
 80023f0:	2000075c 	.word	0x2000075c
 80023f4:	20000be8 	.word	0x20000be8

080023f8 <max3>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
/*----------------------------------*/
/* Config speed for stepper */
double_t max3(double_t a, double_t b, double_t c) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8002402:	ed87 1b02 	vstr	d1, [r7, #8]
 8002406:	ed87 2b00 	vstr	d2, [r7]
	double_t n1 = max(a, b);
 800240a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800240e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002412:	f7fe fb91 	bl	8000b38 <__aeabi_dcmpgt>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <max3+0x2a>
 800241c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002420:	e001      	b.n	8002426 <max3+0x2e>
 8002422:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002426:	e9c7 2306 	strd	r2, r3, [r7, #24]
    return max(n1, c);
 800242a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800242e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002432:	f7fe fb81 	bl	8000b38 <__aeabi_dcmpgt>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <max3+0x4a>
 800243c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002440:	e001      	b.n	8002446 <max3+0x4e>
 8002442:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002446:	ec43 2b17 	vmov	d7, r2, r3
}
 800244a:	eeb0 0a47 	vmov.f32	s0, s14
 800244e:	eef0 0a67 	vmov.f32	s1, s15
 8002452:	3720      	adds	r7, #32
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <DelayUs_step>:
/* Function set home */
void DelayUs_step(uint32_t us)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim1);
 8002460:	480a      	ldr	r0, [pc, #40]	@ (800248c <DelayUs_step+0x34>)
 8002462:	f007 fe41 	bl	800a0e8 <HAL_TIM_Base_Start_IT>
	//(&htim7)->Instance->CNT = (0);
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002466:	4b09      	ldr	r3, [pc, #36]	@ (800248c <DelayUs_step+0x34>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2200      	movs	r2, #0
 800246c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 800246e:	bf00      	nop
 8002470:	4b06      	ldr	r3, [pc, #24]	@ (800248c <DelayUs_step+0x34>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	429a      	cmp	r2, r3
 800247a:	d8f9      	bhi.n	8002470 <DelayUs_step+0x18>
	HAL_TIM_Base_Stop_IT(&htim1);
 800247c:	4803      	ldr	r0, [pc, #12]	@ (800248c <DelayUs_step+0x34>)
 800247e:	f007 fea3 	bl	800a1c8 <HAL_TIM_Base_Stop_IT>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000a38 	.word	0x20000a38

08002490 <HOME>:

void HOME(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
    // Home Z axis
    HAL_GPIO_WritePin(dir_3_GPIO_Port, dir_3_pin, GPIO_PIN_RESET); // Set direction to move towards home
 8002496:	2200      	movs	r2, #0
 8002498:	2120      	movs	r1, #32
 800249a:	4833      	ldr	r0, [pc, #204]	@ (8002568 <HOME+0xd8>)
 800249c:	f004 ff50 	bl	8007340 <HAL_GPIO_WritePin>
    while (HAL_GPIO_ReadPin(moveZsub_port, moveZsub_pin) != CNC_pos.Lsw6) {
 80024a0:	e006      	b.n	80024b0 <HOME+0x20>
        HAL_GPIO_TogglePin(step_3_GPIO_Port, step_3_pin); // Toggle step pin to move towards home
 80024a2:	2110      	movs	r1, #16
 80024a4:	4830      	ldr	r0, [pc, #192]	@ (8002568 <HOME+0xd8>)
 80024a6:	f004 ff64 	bl	8007372 <HAL_GPIO_TogglePin>
        DelayUs_step(30); // Adjust delay as needed
 80024aa:	201e      	movs	r0, #30
 80024ac:	f7ff ffd4 	bl	8002458 <DelayUs_step>
    while (HAL_GPIO_ReadPin(moveZsub_port, moveZsub_pin) != CNC_pos.Lsw6) {
 80024b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024b4:	482d      	ldr	r0, [pc, #180]	@ (800256c <HOME+0xdc>)
 80024b6:	f004 ff2b 	bl	8007310 <HAL_GPIO_ReadPin>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	4b2c      	ldr	r3, [pc, #176]	@ (8002570 <HOME+0xe0>)
 80024c0:	795b      	ldrb	r3, [r3, #5]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d1ed      	bne.n	80024a2 <HOME+0x12>
    }
    // Home X axis
    HAL_GPIO_WritePin(dir_1_GPIO_Port, dir_1_pin, GPIO_PIN_RESET); // Set direction to move towards home
 80024c6:	2200      	movs	r2, #0
 80024c8:	2102      	movs	r1, #2
 80024ca:	4827      	ldr	r0, [pc, #156]	@ (8002568 <HOME+0xd8>)
 80024cc:	f004 ff38 	bl	8007340 <HAL_GPIO_WritePin>
    bool isXHome = false;
 80024d0:	2300      	movs	r3, #0
 80024d2:	71fb      	strb	r3, [r7, #7]

    // Home Y axis
    HAL_GPIO_WritePin(dir_2_GPIO_Port, dir_2_pin, GPIO_PIN_RESET); // Set direction to move towards home
 80024d4:	2200      	movs	r2, #0
 80024d6:	2108      	movs	r1, #8
 80024d8:	4823      	ldr	r0, [pc, #140]	@ (8002568 <HOME+0xd8>)
 80024da:	f004 ff31 	bl	8007340 <HAL_GPIO_WritePin>
    bool isYHome = false;
 80024de:	2300      	movs	r3, #0
 80024e0:	71bb      	strb	r3, [r7, #6]

    while (!(isXHome && isYHome)) {
 80024e2:	e030      	b.n	8002546 <HOME+0xb6>
        if (!isXHome && (HAL_GPIO_ReadPin(moveXsub_port, moveXsub_pin) != CNC_pos.Lsw2)) {
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	f083 0301 	eor.w	r3, r3, #1
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00e      	beq.n	800250e <HOME+0x7e>
 80024f0:	2101      	movs	r1, #1
 80024f2:	4820      	ldr	r0, [pc, #128]	@ (8002574 <HOME+0xe4>)
 80024f4:	f004 ff0c 	bl	8007310 <HAL_GPIO_ReadPin>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002570 <HOME+0xe0>)
 80024fe:	785b      	ldrb	r3, [r3, #1]
 8002500:	429a      	cmp	r2, r3
 8002502:	d004      	beq.n	800250e <HOME+0x7e>
            HAL_GPIO_TogglePin(step_1_GPIO_Port, step_1_pin); // Toggle step pin to move towards home
 8002504:	2101      	movs	r1, #1
 8002506:	4818      	ldr	r0, [pc, #96]	@ (8002568 <HOME+0xd8>)
 8002508:	f004 ff33 	bl	8007372 <HAL_GPIO_TogglePin>
 800250c:	e001      	b.n	8002512 <HOME+0x82>
        } else {
            isXHome = true;
 800250e:	2301      	movs	r3, #1
 8002510:	71fb      	strb	r3, [r7, #7]
        }

        if (!isYHome && (HAL_GPIO_ReadPin(moveYsub_port, moveYsub_pin) != CNC_pos.Lsw4)) {
 8002512:	79bb      	ldrb	r3, [r7, #6]
 8002514:	f083 0301 	eor.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00e      	beq.n	800253c <HOME+0xac>
 800251e:	2102      	movs	r1, #2
 8002520:	4814      	ldr	r0, [pc, #80]	@ (8002574 <HOME+0xe4>)
 8002522:	f004 fef5 	bl	8007310 <HAL_GPIO_ReadPin>
 8002526:	4603      	mov	r3, r0
 8002528:	461a      	mov	r2, r3
 800252a:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <HOME+0xe0>)
 800252c:	78db      	ldrb	r3, [r3, #3]
 800252e:	429a      	cmp	r2, r3
 8002530:	d004      	beq.n	800253c <HOME+0xac>
            HAL_GPIO_TogglePin(step_2_GPIO_Port, step_2_pin); // Toggle step pin to move towards home
 8002532:	2104      	movs	r1, #4
 8002534:	480c      	ldr	r0, [pc, #48]	@ (8002568 <HOME+0xd8>)
 8002536:	f004 ff1c 	bl	8007372 <HAL_GPIO_TogglePin>
 800253a:	e001      	b.n	8002540 <HOME+0xb0>
        } else {
            isYHome = true;
 800253c:	2301      	movs	r3, #1
 800253e:	71bb      	strb	r3, [r7, #6]
        }
        DelayUs_step(30); // Adjust delay as needed
 8002540:	201e      	movs	r0, #30
 8002542:	f7ff ff89 	bl	8002458 <DelayUs_step>
    while (!(isXHome && isYHome)) {
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	f083 0301 	eor.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1c8      	bne.n	80024e4 <HOME+0x54>
 8002552:	79bb      	ldrb	r3, [r7, #6]
 8002554:	f083 0301 	eor.w	r3, r3, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1c2      	bne.n	80024e4 <HOME+0x54>
    }
}
 800255e:	bf00      	nop
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40020000 	.word	0x40020000
 800256c:	40021000 	.word	0x40021000
 8002570:	20000778 	.word	0x20000778
 8002574:	40020400 	.word	0x40020400

08002578 <MoveToPosXY>:
/* Function control 3 axis */
//Move X-Y
void MoveToPosXY(float x, float y) {
 8002578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257c:	ed2d 8b02 	vpush	{d8}
 8002580:	b092      	sub	sp, #72	@ 0x48
 8002582:	af06      	add	r7, sp, #24
 8002584:	ed87 0a05 	vstr	s0, [r7, #20]
 8002588:	edc7 0a04 	vstr	s1, [r7, #16]
    trans_to_posXY(x,y);
 800258c:	edd7 0a04 	vldr	s1, [r7, #16]
 8002590:	ed97 0a05 	vldr	s0, [r7, #20]
 8002594:	f7ff fa6a 	bl	8001a6c <trans_to_posXY>
    CNC_pos.MoveX = caculate_pos(CNC.set_posX, 161);
 8002598:	4bb3      	ldr	r3, [pc, #716]	@ (8002868 <MoveToPosXY+0x2f0>)
 800259a:	ed93 7b00 	vldr	d7, [r3]
 800259e:	ed9f 1bb0 	vldr	d1, [pc, #704]	@ 8002860 <MoveToPosXY+0x2e8>
 80025a2:	eeb0 0a47 	vmov.f32	s0, s14
 80025a6:	eef0 0a67 	vmov.f32	s1, s15
 80025aa:	f7ff fa9f 	bl	8001aec <caculate_pos>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4610      	mov	r0, r2
 80025b4:	4619      	mov	r1, r3
 80025b6:	f7fe f801 	bl	80005bc <__aeabi_l2d>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	49ab      	ldr	r1, [pc, #684]	@ (800286c <MoveToPosXY+0x2f4>)
 80025c0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    CNC_pos.MoveY = caculate_pos(CNC.set_posY, 161);
 80025c4:	4ba8      	ldr	r3, [pc, #672]	@ (8002868 <MoveToPosXY+0x2f0>)
 80025c6:	ed93 7b02 	vldr	d7, [r3, #8]
 80025ca:	ed9f 1ba5 	vldr	d1, [pc, #660]	@ 8002860 <MoveToPosXY+0x2e8>
 80025ce:	eeb0 0a47 	vmov.f32	s0, s14
 80025d2:	eef0 0a67 	vmov.f32	s1, s15
 80025d6:	f7ff fa89 	bl	8001aec <caculate_pos>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7fd ffeb 	bl	80005bc <__aeabi_l2d>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	49a0      	ldr	r1, [pc, #640]	@ (800286c <MoveToPosXY+0x2f4>)
 80025ec:	e9c1 2308 	strd	r2, r3, [r1, #32]
    long long int step_max = max3(llabs(CNC_pos.MoveX), llabs(CNC_pos.MoveY), llabs(CNC_pos.MoveZ));
 80025f0:	4b9e      	ldr	r3, [pc, #632]	@ (800286c <MoveToPosXY+0x2f4>)
 80025f2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	f7fe fb6d 	bl	8000cd8 <__aeabi_d2lz>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	2b00      	cmp	r3, #0
 8002604:	da05      	bge.n	8002612 <MoveToPosXY+0x9a>
 8002606:	2100      	movs	r1, #0
 8002608:	4254      	negs	r4, r2
 800260a:	eb61 0503 	sbc.w	r5, r1, r3
 800260e:	4622      	mov	r2, r4
 8002610:	462b      	mov	r3, r5
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f7fd ffd1 	bl	80005bc <__aeabi_l2d>
 800261a:	ec41 0b18 	vmov	d8, r0, r1
 800261e:	4b93      	ldr	r3, [pc, #588]	@ (800286c <MoveToPosXY+0x2f4>)
 8002620:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	f7fe fb56 	bl	8000cd8 <__aeabi_d2lz>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	2b00      	cmp	r3, #0
 8002632:	da06      	bge.n	8002642 <MoveToPosXY+0xca>
 8002634:	2100      	movs	r1, #0
 8002636:	f1d2 0800 	rsbs	r8, r2, #0
 800263a:	eb61 0903 	sbc.w	r9, r1, r3
 800263e:	4642      	mov	r2, r8
 8002640:	464b      	mov	r3, r9
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	f7fd ffb9 	bl	80005bc <__aeabi_l2d>
 800264a:	4604      	mov	r4, r0
 800264c:	460d      	mov	r5, r1
 800264e:	4b87      	ldr	r3, [pc, #540]	@ (800286c <MoveToPosXY+0x2f4>)
 8002650:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	f7fe fb3e 	bl	8000cd8 <__aeabi_d2lz>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	2b00      	cmp	r3, #0
 8002662:	da06      	bge.n	8002672 <MoveToPosXY+0xfa>
 8002664:	2100      	movs	r1, #0
 8002666:	f1d2 0a00 	rsbs	sl, r2, #0
 800266a:	eb61 0b03 	sbc.w	fp, r1, r3
 800266e:	4652      	mov	r2, sl
 8002670:	465b      	mov	r3, fp
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	f7fd ffa1 	bl	80005bc <__aeabi_l2d>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	ec43 2b12 	vmov	d2, r2, r3
 8002682:	ec45 4b11 	vmov	d1, r4, r5
 8002686:	eeb0 0a48 	vmov.f32	s0, s16
 800268a:	eef0 0a68 	vmov.f32	s1, s17
 800268e:	f7ff feb3 	bl	80023f8 <max3>
 8002692:	ec53 2b10 	vmov	r2, r3, d0
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	f7fe fb1d 	bl	8000cd8 <__aeabi_d2lz>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double_t coef1 = fabs(CNC_pos.MoveX) / step_max;
 80026a6:	4b71      	ldr	r3, [pc, #452]	@ (800286c <MoveToPosXY+0x2f4>)
 80026a8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80026ac:	60ba      	str	r2, [r7, #8]
 80026ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026b8:	f7fd ff80 	bl	80005bc <__aeabi_l2d>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026c4:	f7fe f8d2 	bl	800086c <__aeabi_ddiv>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double_t coef2 = fabs(CNC_pos.MoveY) / step_max;
 80026d0:	4b66      	ldr	r3, [pc, #408]	@ (800286c <MoveToPosXY+0x2f4>)
 80026d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80026d6:	603a      	str	r2, [r7, #0]
 80026d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026e2:	f7fd ff6b 	bl	80005bc <__aeabi_l2d>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026ee:	f7fe f8bd 	bl	800086c <__aeabi_ddiv>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    CNC_pos.pos1dot = CNC_pos.max_speedXY * coef1;
 80026fa:	4b5c      	ldr	r3, [pc, #368]	@ (800286c <MoveToPosXY+0x2f4>)
 80026fc:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002700:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002704:	f7fd ff88 	bl	8000618 <__aeabi_dmul>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4957      	ldr	r1, [pc, #348]	@ (800286c <MoveToPosXY+0x2f4>)
 800270e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    CNC_pos.pos2dot = CNC_pos.max_speedXY * coef2;
 8002712:	4b56      	ldr	r3, [pc, #344]	@ (800286c <MoveToPosXY+0x2f4>)
 8002714:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 8002718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800271c:	f7fd ff7c 	bl	8000618 <__aeabi_dmul>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4951      	ldr	r1, [pc, #324]	@ (800286c <MoveToPosXY+0x2f4>)
 8002726:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    CNC_pos.accel1 = CNC_pos.a_maxX * coef1;
 800272a:	4b50      	ldr	r3, [pc, #320]	@ (800286c <MoveToPosXY+0x2f4>)
 800272c:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 8002730:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002734:	f7fd ff70 	bl	8000618 <__aeabi_dmul>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	494b      	ldr	r1, [pc, #300]	@ (800286c <MoveToPosXY+0x2f4>)
 800273e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    CNC_pos.accel2 = CNC_pos.a_maxY * coef2;
 8002742:	4b4a      	ldr	r3, [pc, #296]	@ (800286c <MoveToPosXY+0x2f4>)
 8002744:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	@ 0x98
 8002748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800274c:	f7fd ff64 	bl	8000618 <__aeabi_dmul>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4945      	ldr	r1, [pc, #276]	@ (800286c <MoveToPosXY+0x2f4>)
 8002756:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    CNC_pos.jerk1 = CNC_pos.j_maxX * coef1;
 800275a:	4b44      	ldr	r3, [pc, #272]	@ (800286c <MoveToPosXY+0x2f4>)
 800275c:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 8002760:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002764:	f7fd ff58 	bl	8000618 <__aeabi_dmul>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	493f      	ldr	r1, [pc, #252]	@ (800286c <MoveToPosXY+0x2f4>)
 800276e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    CNC_pos.jerk2 = CNC_pos.j_maxY * coef2;
 8002772:	4b3e      	ldr	r3, [pc, #248]	@ (800286c <MoveToPosXY+0x2f4>)
 8002774:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	@ 0xa0
 8002778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800277c:	f7fd ff4c 	bl	8000618 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4939      	ldr	r1, [pc, #228]	@ (800286c <MoveToPosXY+0x2f4>)
 8002786:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    if (Stepper1.run_state != 1 && Stepper2.run_state != 1) {
 800278a:	4b39      	ldr	r3, [pc, #228]	@ (8002870 <MoveToPosXY+0x2f8>)
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	2b01      	cmp	r3, #1
 8002790:	f000 80a3 	beq.w	80028da <MoveToPosXY+0x362>
 8002794:	4b37      	ldr	r3, [pc, #220]	@ (8002874 <MoveToPosXY+0x2fc>)
 8002796:	785b      	ldrb	r3, [r3, #1]
 8002798:	2b01      	cmp	r3, #1
 800279a:	f000 809e 	beq.w	80028da <MoveToPosXY+0x362>
        Accel_Stepper_Move(&Stepper1, CNC_pos.MoveX, CNC_pos.accel1, CNC_pos.jerk1, CNC_pos.pos1dot);
 800279e:	4b33      	ldr	r3, [pc, #204]	@ (800286c <MoveToPosXY+0x2f4>)
 80027a0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	f7fe fa96 	bl	8000cd8 <__aeabi_d2lz>
 80027ac:	4682      	mov	sl, r0
 80027ae:	468b      	mov	fp, r1
 80027b0:	4b2e      	ldr	r3, [pc, #184]	@ (800286c <MoveToPosXY+0x2f4>)
 80027b2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80027b6:	4610      	mov	r0, r2
 80027b8:	4619      	mov	r1, r3
 80027ba:	f7fe faa5 	bl	8000d08 <__aeabi_d2ulz>
 80027be:	4604      	mov	r4, r0
 80027c0:	460d      	mov	r5, r1
 80027c2:	4b2a      	ldr	r3, [pc, #168]	@ (800286c <MoveToPosXY+0x2f4>)
 80027c4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	f7fe fa9c 	bl	8000d08 <__aeabi_d2ulz>
 80027d0:	4680      	mov	r8, r0
 80027d2:	4689      	mov	r9, r1
 80027d4:	4b25      	ldr	r3, [pc, #148]	@ (800286c <MoveToPosXY+0x2f4>)
 80027d6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	f7fe fa93 	bl	8000d08 <__aeabi_d2ulz>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80027ea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80027ee:	e9cd 4500 	strd	r4, r5, [sp]
 80027f2:	4652      	mov	r2, sl
 80027f4:	465b      	mov	r3, fp
 80027f6:	481e      	ldr	r0, [pc, #120]	@ (8002870 <MoveToPosXY+0x2f8>)
 80027f8:	f7fe fe4e 	bl	8001498 <Accel_Stepper_Move>
        Accel_Stepper_Move(&Stepper2, CNC_pos.MoveY, CNC_pos.accel2, CNC_pos.jerk2, CNC_pos.pos2dot);
 80027fc:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <MoveToPosXY+0x2f4>)
 80027fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	f7fe fa67 	bl	8000cd8 <__aeabi_d2lz>
 800280a:	4682      	mov	sl, r0
 800280c:	468b      	mov	fp, r1
 800280e:	4b17      	ldr	r3, [pc, #92]	@ (800286c <MoveToPosXY+0x2f4>)
 8002810:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002814:	4610      	mov	r0, r2
 8002816:	4619      	mov	r1, r3
 8002818:	f7fe fa76 	bl	8000d08 <__aeabi_d2ulz>
 800281c:	4604      	mov	r4, r0
 800281e:	460d      	mov	r5, r1
 8002820:	4b12      	ldr	r3, [pc, #72]	@ (800286c <MoveToPosXY+0x2f4>)
 8002822:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f7fe fa6d 	bl	8000d08 <__aeabi_d2ulz>
 800282e:	4680      	mov	r8, r0
 8002830:	4689      	mov	r9, r1
 8002832:	4b0e      	ldr	r3, [pc, #56]	@ (800286c <MoveToPosXY+0x2f4>)
 8002834:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	f7fe fa64 	bl	8000d08 <__aeabi_d2ulz>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002848:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800284c:	e9cd 4500 	strd	r4, r5, [sp]
 8002850:	4652      	mov	r2, sl
 8002852:	465b      	mov	r3, fp
 8002854:	4807      	ldr	r0, [pc, #28]	@ (8002874 <MoveToPosXY+0x2fc>)
 8002856:	f7fe fe1f 	bl	8001498 <Accel_Stepper_Move>
        while (Stepper1.run_state != STOP || Stepper2.run_state != STOP) {
 800285a:	e026      	b.n	80028aa <MoveToPosXY+0x332>
 800285c:	f3af 8000 	nop.w
 8002860:	00000000 	.word	0x00000000
 8002864:	40642000 	.word	0x40642000
 8002868:	20000838 	.word	0x20000838
 800286c:	20000778 	.word	0x20000778
 8002870:	200002b0 	.word	0x200002b0
 8002874:	20000310 	.word	0x20000310
        	if(HAL_GPIO_ReadPin(moveXplus_port, moveXplus_pin) == CNC_pos.Lsw1 ||
 8002878:	2120      	movs	r1, #32
 800287a:	481b      	ldr	r0, [pc, #108]	@ (80028e8 <MoveToPosXY+0x370>)
 800287c:	f004 fd48 	bl	8007310 <HAL_GPIO_ReadPin>
 8002880:	4603      	mov	r3, r0
 8002882:	461a      	mov	r2, r3
 8002884:	4b19      	ldr	r3, [pc, #100]	@ (80028ec <MoveToPosXY+0x374>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d009      	beq.n	80028a0 <MoveToPosXY+0x328>
        		HAL_GPIO_ReadPin(moveYplus_port, moveYplus_pin) == CNC_pos.Lsw3){
 800288c:	2104      	movs	r1, #4
 800288e:	4818      	ldr	r0, [pc, #96]	@ (80028f0 <MoveToPosXY+0x378>)
 8002890:	f004 fd3e 	bl	8007310 <HAL_GPIO_ReadPin>
 8002894:	4603      	mov	r3, r0
 8002896:	461a      	mov	r2, r3
 8002898:	4b14      	ldr	r3, [pc, #80]	@ (80028ec <MoveToPosXY+0x374>)
 800289a:	789b      	ldrb	r3, [r3, #2]
        	if(HAL_GPIO_ReadPin(moveXplus_port, moveXplus_pin) == CNC_pos.Lsw1 ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d101      	bne.n	80028a4 <MoveToPosXY+0x32c>
        		handle_stop_button_press();
 80028a0:	f002 fa20 	bl	8004ce4 <handle_stop_button_press>
        	}
        	osDelay(1);
 80028a4:	2001      	movs	r0, #1
 80028a6:	f009 fb4d 	bl	800bf44 <osDelay>
        while (Stepper1.run_state != STOP || Stepper2.run_state != STOP) {
 80028aa:	4b12      	ldr	r3, [pc, #72]	@ (80028f4 <MoveToPosXY+0x37c>)
 80028ac:	785b      	ldrb	r3, [r3, #1]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1e2      	bne.n	8002878 <MoveToPosXY+0x300>
 80028b2:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <MoveToPosXY+0x380>)
 80028b4:	785b      	ldrb	r3, [r3, #1]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1de      	bne.n	8002878 <MoveToPosXY+0x300>
        }
        CNC.pos_x = x;
 80028ba:	6978      	ldr	r0, [r7, #20]
 80028bc:	f7fd fe54 	bl	8000568 <__aeabi_f2d>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	490d      	ldr	r1, [pc, #52]	@ (80028fc <MoveToPosXY+0x384>)
 80028c6:	e9c1 2306 	strd	r2, r3, [r1, #24]
        CNC.pos_y = y;
 80028ca:	6938      	ldr	r0, [r7, #16]
 80028cc:	f7fd fe4c 	bl	8000568 <__aeabi_f2d>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4909      	ldr	r1, [pc, #36]	@ (80028fc <MoveToPosXY+0x384>)
 80028d6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    }
}
 80028da:	bf00      	nop
 80028dc:	3730      	adds	r7, #48	@ 0x30
 80028de:	46bd      	mov	sp, r7
 80028e0:	ecbd 8b02 	vpop	{d8}
 80028e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e8:	40020800 	.word	0x40020800
 80028ec:	20000778 	.word	0x20000778
 80028f0:	40020400 	.word	0x40020400
 80028f4:	200002b0 	.word	0x200002b0
 80028f8:	20000310 	.word	0x20000310
 80028fc:	20000838 	.word	0x20000838

08002900 <MoveToPosZ>:
// Move Z
void MoveToPosZ(float z) {
 8002900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002904:	b08e      	sub	sp, #56	@ 0x38
 8002906:	af06      	add	r7, sp, #24
 8002908:	ed87 0a03 	vstr	s0, [r7, #12]
    trans_to_posZ(z);
 800290c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002910:	f7ff f8d4 	bl	8001abc <trans_to_posZ>
    CNC_pos.MoveZ = caculate_pos(CNC.set_posZ, 161);
 8002914:	4b80      	ldr	r3, [pc, #512]	@ (8002b18 <MoveToPosZ+0x218>)
 8002916:	ed93 7b04 	vldr	d7, [r3, #16]
 800291a:	ed9f 1b7d 	vldr	d1, [pc, #500]	@ 8002b10 <MoveToPosZ+0x210>
 800291e:	eeb0 0a47 	vmov.f32	s0, s14
 8002922:	eef0 0a67 	vmov.f32	s1, s15
 8002926:	f7ff f8e1 	bl	8001aec <caculate_pos>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	f7fd fe43 	bl	80005bc <__aeabi_l2d>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4978      	ldr	r1, [pc, #480]	@ (8002b1c <MoveToPosZ+0x21c>)
 800293c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    long long int step_max = max3(llabs(CNC_pos.MoveX), llabs(CNC_pos.MoveY), llabs(CNC_pos.MoveZ));
 8002940:	4b76      	ldr	r3, [pc, #472]	@ (8002b1c <MoveToPosZ+0x21c>)
 8002942:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f7fe f9c5 	bl	8000cd8 <__aeabi_d2lz>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	2b00      	cmp	r3, #0
 8002954:	da06      	bge.n	8002964 <MoveToPosZ+0x64>
 8002956:	2100      	movs	r1, #0
 8002958:	f1d2 0a00 	rsbs	sl, r2, #0
 800295c:	eb61 0b03 	sbc.w	fp, r1, r3
 8002960:	4652      	mov	r2, sl
 8002962:	465b      	mov	r3, fp
 8002964:	4610      	mov	r0, r2
 8002966:	4619      	mov	r1, r3
 8002968:	f7fd fe28 	bl	80005bc <__aeabi_l2d>
 800296c:	4682      	mov	sl, r0
 800296e:	468b      	mov	fp, r1
 8002970:	4b6a      	ldr	r3, [pc, #424]	@ (8002b1c <MoveToPosZ+0x21c>)
 8002972:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	f7fe f9ad 	bl	8000cd8 <__aeabi_d2lz>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	2b00      	cmp	r3, #0
 8002984:	da06      	bge.n	8002994 <MoveToPosZ+0x94>
 8002986:	2100      	movs	r1, #0
 8002988:	f1d2 0800 	rsbs	r8, r2, #0
 800298c:	eb61 0903 	sbc.w	r9, r1, r3
 8002990:	4642      	mov	r2, r8
 8002992:	464b      	mov	r3, r9
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	f7fd fe10 	bl	80005bc <__aeabi_l2d>
 800299c:	4680      	mov	r8, r0
 800299e:	4689      	mov	r9, r1
 80029a0:	4b5e      	ldr	r3, [pc, #376]	@ (8002b1c <MoveToPosZ+0x21c>)
 80029a2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	f7fe f995 	bl	8000cd8 <__aeabi_d2lz>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	da05      	bge.n	80029c2 <MoveToPosZ+0xc2>
 80029b6:	2100      	movs	r1, #0
 80029b8:	4254      	negs	r4, r2
 80029ba:	eb61 0503 	sbc.w	r5, r1, r3
 80029be:	4622      	mov	r2, r4
 80029c0:	462b      	mov	r3, r5
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	f7fd fdf9 	bl	80005bc <__aeabi_l2d>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	ec43 2b12 	vmov	d2, r2, r3
 80029d2:	ec49 8b11 	vmov	d1, r8, r9
 80029d6:	ec4b ab10 	vmov	d0, sl, fp
 80029da:	f7ff fd0d 	bl	80023f8 <max3>
 80029de:	ec53 2b10 	vmov	r2, r3, d0
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f7fe f977 	bl	8000cd8 <__aeabi_d2lz>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double_t coef3 = fabs(CNC_pos.MoveZ) / step_max;
 80029f2:	4b4a      	ldr	r3, [pc, #296]	@ (8002b1c <MoveToPosZ+0x21c>)
 80029f4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80029f8:	603a      	str	r2, [r7, #0]
 80029fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a04:	f7fd fdda 	bl	80005bc <__aeabi_l2d>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a10:	f7fd ff2c 	bl	800086c <__aeabi_ddiv>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    CNC_pos.pos3dot = CNC_pos.max_speedZ * coef3;
 8002a1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b1c <MoveToPosZ+0x21c>)
 8002a1e:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 8002a22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a26:	f7fd fdf7 	bl	8000618 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	493b      	ldr	r1, [pc, #236]	@ (8002b1c <MoveToPosZ+0x21c>)
 8002a30:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    CNC_pos.accel3 = CNC_pos.a_maxZ * coef3;
 8002a34:	4b39      	ldr	r3, [pc, #228]	@ (8002b1c <MoveToPosZ+0x21c>)
 8002a36:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	@ 0xa8
 8002a3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a3e:	f7fd fdeb 	bl	8000618 <__aeabi_dmul>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4935      	ldr	r1, [pc, #212]	@ (8002b1c <MoveToPosZ+0x21c>)
 8002a48:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    CNC_pos.jerk3 = CNC_pos.j_maxZ * coef3;
 8002a4c:	4b33      	ldr	r3, [pc, #204]	@ (8002b1c <MoveToPosZ+0x21c>)
 8002a4e:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	@ 0xb0
 8002a52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a56:	f7fd fddf 	bl	8000618 <__aeabi_dmul>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	492f      	ldr	r1, [pc, #188]	@ (8002b1c <MoveToPosZ+0x21c>)
 8002a60:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
    if (Stepper3.run_state != 1) {
 8002a64:	4b2e      	ldr	r3, [pc, #184]	@ (8002b20 <MoveToPosZ+0x220>)
 8002a66:	785b      	ldrb	r3, [r3, #1]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d04a      	beq.n	8002b02 <MoveToPosZ+0x202>
        Accel_Stepper_Move(&Stepper3, CNC_pos.MoveZ, CNC_pos.accel3, CNC_pos.jerk3, CNC_pos.pos3dot);
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b1c <MoveToPosZ+0x21c>)
 8002a6e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	f7fe f92f 	bl	8000cd8 <__aeabi_d2lz>
 8002a7a:	4682      	mov	sl, r0
 8002a7c:	468b      	mov	fp, r1
 8002a7e:	4b27      	ldr	r3, [pc, #156]	@ (8002b1c <MoveToPosZ+0x21c>)
 8002a80:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fe f93e 	bl	8000d08 <__aeabi_d2ulz>
 8002a8c:	4604      	mov	r4, r0
 8002a8e:	460d      	mov	r5, r1
 8002a90:	4b22      	ldr	r3, [pc, #136]	@ (8002b1c <MoveToPosZ+0x21c>)
 8002a92:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f935 	bl	8000d08 <__aeabi_d2ulz>
 8002a9e:	4680      	mov	r8, r0
 8002aa0:	4689      	mov	r9, r1
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b1c <MoveToPosZ+0x21c>)
 8002aa4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7fe f92c 	bl	8000d08 <__aeabi_d2ulz>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ab8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002abc:	e9cd 4500 	strd	r4, r5, [sp]
 8002ac0:	4652      	mov	r2, sl
 8002ac2:	465b      	mov	r3, fp
 8002ac4:	4816      	ldr	r0, [pc, #88]	@ (8002b20 <MoveToPosZ+0x220>)
 8002ac6:	f7fe fce7 	bl	8001498 <Accel_Stepper_Move>
        while(Stepper3.run_state != STOP){
 8002aca:	e00e      	b.n	8002aea <MoveToPosZ+0x1ea>
        	if(HAL_GPIO_ReadPin(moveZplus_port, moveZplus_pin) ==  CNC_pos.Lsw5){
 8002acc:	2180      	movs	r1, #128	@ 0x80
 8002ace:	4815      	ldr	r0, [pc, #84]	@ (8002b24 <MoveToPosZ+0x224>)
 8002ad0:	f004 fc1e 	bl	8007310 <HAL_GPIO_ReadPin>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b10      	ldr	r3, [pc, #64]	@ (8002b1c <MoveToPosZ+0x21c>)
 8002ada:	791b      	ldrb	r3, [r3, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d101      	bne.n	8002ae4 <MoveToPosZ+0x1e4>
        		handle_stop_button_press();
 8002ae0:	f002 f900 	bl	8004ce4 <handle_stop_button_press>
        	}
			osDelay(1);
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	f009 fa2d 	bl	800bf44 <osDelay>
        while(Stepper3.run_state != STOP){
 8002aea:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <MoveToPosZ+0x220>)
 8002aec:	785b      	ldrb	r3, [r3, #1]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1ec      	bne.n	8002acc <MoveToPosZ+0x1cc>
		}
        CNC.pos_z = z;
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f7fd fd38 	bl	8000568 <__aeabi_f2d>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4906      	ldr	r1, [pc, #24]	@ (8002b18 <MoveToPosZ+0x218>)
 8002afe:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    }
}
 8002b02:	bf00      	nop
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b0c:	f3af 8000 	nop.w
 8002b10:	00000000 	.word	0x00000000
 8002b14:	40642000 	.word	0x40642000
 8002b18:	20000838 	.word	0x20000838
 8002b1c:	20000778 	.word	0x20000778
 8002b20:	20000370 	.word	0x20000370
 8002b24:	40021000 	.word	0x40021000

08002b28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HOME();
 8002b30:	f7ff fcae 	bl	8002490 <HOME>
  initializeCNC_pos(&CNC_pos);
 8002b34:	4826      	ldr	r0, [pc, #152]	@ (8002bd0 <StartDefaultTask+0xa8>)
 8002b36:	f7fe ff0b 	bl	8001950 <initializeCNC_pos>
  Accel_Stepper_SetPin(&Stepper1, step_1_GPIO_Port, step_1_pin, dir_1_GPIO_Port, dir_1_pin);
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	4b25      	ldr	r3, [pc, #148]	@ (8002bd4 <StartDefaultTask+0xac>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	4924      	ldr	r1, [pc, #144]	@ (8002bd4 <StartDefaultTask+0xac>)
 8002b44:	4824      	ldr	r0, [pc, #144]	@ (8002bd8 <StartDefaultTask+0xb0>)
 8002b46:	f7fe fa5d 	bl	8001004 <Accel_Stepper_SetPin>
  Accel_Stepper_SetPin(&Stepper2, step_2_GPIO_Port, step_2_pin, dir_2_GPIO_Port, dir_2_pin);
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	4b21      	ldr	r3, [pc, #132]	@ (8002bd4 <StartDefaultTask+0xac>)
 8002b50:	2204      	movs	r2, #4
 8002b52:	4920      	ldr	r1, [pc, #128]	@ (8002bd4 <StartDefaultTask+0xac>)
 8002b54:	4821      	ldr	r0, [pc, #132]	@ (8002bdc <StartDefaultTask+0xb4>)
 8002b56:	f7fe fa55 	bl	8001004 <Accel_Stepper_SetPin>
  Accel_Stepper_SetPin(&Stepper3, step_3_GPIO_Port, step_3_pin, dir_3_GPIO_Port, dir_3_pin);
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd4 <StartDefaultTask+0xac>)
 8002b60:	2210      	movs	r2, #16
 8002b62:	491c      	ldr	r1, [pc, #112]	@ (8002bd4 <StartDefaultTask+0xac>)
 8002b64:	481e      	ldr	r0, [pc, #120]	@ (8002be0 <StartDefaultTask+0xb8>)
 8002b66:	f7fe fa4d 	bl	8001004 <Accel_Stepper_SetPin>

  Accel_Stepper_SetTimer(&Stepper1, &htim2);
 8002b6a:	491e      	ldr	r1, [pc, #120]	@ (8002be4 <StartDefaultTask+0xbc>)
 8002b6c:	481a      	ldr	r0, [pc, #104]	@ (8002bd8 <StartDefaultTask+0xb0>)
 8002b6e:	f7fe fa65 	bl	800103c <Accel_Stepper_SetTimer>
  Accel_Stepper_SetTimer(&Stepper2, &htim3);
 8002b72:	491d      	ldr	r1, [pc, #116]	@ (8002be8 <StartDefaultTask+0xc0>)
 8002b74:	4819      	ldr	r0, [pc, #100]	@ (8002bdc <StartDefaultTask+0xb4>)
 8002b76:	f7fe fa61 	bl	800103c <Accel_Stepper_SetTimer>
  Accel_Stepper_SetTimer(&Stepper3, &htim4);
 8002b7a:	491c      	ldr	r1, [pc, #112]	@ (8002bec <StartDefaultTask+0xc4>)
 8002b7c:	4818      	ldr	r0, [pc, #96]	@ (8002be0 <StartDefaultTask+0xb8>)
 8002b7e:	f7fe fa5d 	bl	800103c <Accel_Stepper_SetTimer>

  CNC.pos_x = 0;
 8002b82:	491b      	ldr	r1, [pc, #108]	@ (8002bf0 <StartDefaultTask+0xc8>)
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9c1 2306 	strd	r2, r3, [r1, #24]
  CNC.pos_y = 0;
 8002b90:	4917      	ldr	r1, [pc, #92]	@ (8002bf0 <StartDefaultTask+0xc8>)
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	e9c1 2308 	strd	r2, r3, [r1, #32]
  CNC.pos_z = 0;
 8002b9e:	4914      	ldr	r1, [pc, #80]	@ (8002bf0 <StartDefaultTask+0xc8>)
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

  //vTaskDelay(pdMS_TO_TICKS(2000));
  /* Infinite loop */
  for(;;)
  {
      if (state.start_press) {
 8002bac:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <StartDefaultTask+0xcc>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <StartDefaultTask+0x9e>
    	  HAL_GPIO_WritePin(drill_port, drill_pin, 1);
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002bbc:	480e      	ldr	r0, [pc, #56]	@ (8002bf8 <StartDefaultTask+0xd0>)
 8002bbe:	f004 fbbf 	bl	8007340 <HAL_GPIO_WritePin>
          move_to_coordinates();
 8002bc2:	f7ff fab7 	bl	8002134 <move_to_coordinates>
      }

    osDelay(1);
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	f009 f9bc 	bl	800bf44 <osDelay>
      if (state.start_press) {
 8002bcc:	e7ee      	b.n	8002bac <StartDefaultTask+0x84>
 8002bce:	bf00      	nop
 8002bd0:	20000778 	.word	0x20000778
 8002bd4:	40020000 	.word	0x40020000
 8002bd8:	200002b0 	.word	0x200002b0
 8002bdc:	20000310 	.word	0x20000310
 8002be0:	20000370 	.word	0x20000370
 8002be4:	20000a80 	.word	0x20000a80
 8002be8:	20000ac8 	.word	0x20000ac8
 8002bec:	20000b10 	.word	0x20000b10
 8002bf0:	20000838 	.word	0x20000838
 8002bf4:	20000a28 	.word	0x20000a28
 8002bf8:	40020400 	.word	0x40020400

08002bfc <StartADC>:
* @retval None
*/

/* USER CODE END Header_StartADC */
void StartADC(void *argument)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC */
  /* Infinite loop */
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)LCD_adc.readValue, 2);
  for(;;)
  {
	startADC();
 8002c04:	f000 ffbe 	bl	8003b84 <startADC>
    osDelay(1);
 8002c08:	2001      	movs	r0, #1
 8002c0a:	f009 f99b 	bl	800bf44 <osDelay>
	startADC();
 8002c0e:	bf00      	nop
 8002c10:	e7f8      	b.n	8002c04 <StartADC+0x8>
	...

08002c14 <StartLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD */
void StartLCD(void *argument)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD */
  /* Infinite loop */
  initialize_LCD(&LCD_adc);
 8002c1c:	4808      	ldr	r0, [pc, #32]	@ (8002c40 <StartLCD+0x2c>)
 8002c1e:	f000 fbdd 	bl	80033dc <initialize_LCD>
  initialize_Kalman(&kalman_fil_curr);
 8002c22:	4808      	ldr	r0, [pc, #32]	@ (8002c44 <StartLCD+0x30>)
 8002c24:	f000 fc06 	bl	8003434 <initialize_Kalman>
  initialize_Kalman(&kalman_fil_volt);
 8002c28:	4807      	ldr	r0, [pc, #28]	@ (8002c48 <StartLCD+0x34>)
 8002c2a:	f000 fc03 	bl	8003434 <initialize_Kalman>
  display_menu();
 8002c2e:	f001 f869 	bl	8003d04 <display_menu>
  for(;;)
  {
	ButtonTask();
 8002c32:	f001 fd6d 	bl	8004710 <ButtonTask>
    osDelay(1);
 8002c36:	2001      	movs	r0, #1
 8002c38:	f009 f984 	bl	800bf44 <osDelay>
	ButtonTask();
 8002c3c:	bf00      	nop
 8002c3e:	e7f8      	b.n	8002c32 <StartLCD+0x1e>
 8002c40:	200008bc 	.word	0x200008bc
 8002c44:	20000988 	.word	0x20000988
 8002c48:	200009d8 	.word	0x200009d8

08002c4c <StartUART_TX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_TX */
void StartUART_TX(void *argument)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART_TX */
  /* Infinite loop */
  UART_transmit_init();
 8002c54:	f7ff f8d0 	bl	8001df8 <UART_transmit_init>
  for(;;)
  {
    osDelay(1000);  // Delay 1000 milliseconds (1 second)
 8002c58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c5c:	f009 f972 	bl	800bf44 <osDelay>
    send_uart_data();  // Send data every second
 8002c60:	f7ff f8d0 	bl	8001e04 <send_uart_data>
    osDelay(1000);  // Delay 1000 milliseconds (1 second)
 8002c64:	bf00      	nop
 8002c66:	e7f7      	b.n	8002c58 <StartUART_TX+0xc>

08002c68 <StartUART_RX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_RX */

void StartUART_RX(void *argument) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartUART_RX */
    /* Initialize UART receive in DMA mode */
    UART_RECEIVE_Init();
 8002c70:	f7ff f8fe 	bl	8001e70 <UART_RECEIVE_Init>
    /* Infinite loop */
    for(;;)
    {
        if (osSemaphoreAcquire(uartRxSemaphoreHandle, osWaitForever) == osOK) {
 8002c74:	4b07      	ldr	r3, [pc, #28]	@ (8002c94 <StartUART_RX+0x2c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f04f 31ff 	mov.w	r1, #4294967295
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f009 fb13 	bl	800c2a8 <osSemaphoreAcquire>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <StartUART_RX+0x24>
            UART_rx_process();
 8002c88:	f7ff fad2 	bl	8002230 <UART_rx_process>
        }
        osDelay(1);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f009 f959 	bl	800bf44 <osDelay>
        if (osSemaphoreAcquire(uartRxSemaphoreHandle, osWaitForever) == osOK) {
 8002c92:	e7ef      	b.n	8002c74 <StartUART_RX+0xc>
 8002c94:	2000075c 	.word	0x2000075c

08002c98 <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  lcdMutexHandle = osMutexNew(&lcdMutex_attributes);
 8002c9c:	481b      	ldr	r0, [pc, #108]	@ (8002d0c <MX_FREERTOS_Init+0x74>)
 8002c9e:	f009 f96c 	bl	800bf7a <osMutexNew>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d10 <MX_FREERTOS_Init+0x78>)
 8002ca6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  uartRxSemaphoreHandle = osSemaphoreNew(1, 1, &uartRxSemaphore_attributes);
 8002ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d14 <MX_FREERTOS_Init+0x7c>)
 8002caa:	2101      	movs	r1, #1
 8002cac:	2001      	movs	r0, #1
 8002cae:	f009 fa72 	bl	800c196 <osSemaphoreNew>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4a18      	ldr	r2, [pc, #96]	@ (8002d18 <MX_FREERTOS_Init+0x80>)
 8002cb6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002cb8:	4a18      	ldr	r2, [pc, #96]	@ (8002d1c <MX_FREERTOS_Init+0x84>)
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4818      	ldr	r0, [pc, #96]	@ (8002d20 <MX_FREERTOS_Init+0x88>)
 8002cbe:	f009 f8af 	bl	800be20 <osThreadNew>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4a17      	ldr	r2, [pc, #92]	@ (8002d24 <MX_FREERTOS_Init+0x8c>)
 8002cc6:	6013      	str	r3, [r2, #0]

  /* creation of startADC */
  startADCHandle = osThreadNew(StartADC, NULL, &startADC_attributes);
 8002cc8:	4a17      	ldr	r2, [pc, #92]	@ (8002d28 <MX_FREERTOS_Init+0x90>)
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4817      	ldr	r0, [pc, #92]	@ (8002d2c <MX_FREERTOS_Init+0x94>)
 8002cce:	f009 f8a7 	bl	800be20 <osThreadNew>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4a16      	ldr	r2, [pc, #88]	@ (8002d30 <MX_FREERTOS_Init+0x98>)
 8002cd6:	6013      	str	r3, [r2, #0]

  /* creation of startLCD */
  startLCDHandle = osThreadNew(StartLCD, NULL, &startLCD_attributes);
 8002cd8:	4a16      	ldr	r2, [pc, #88]	@ (8002d34 <MX_FREERTOS_Init+0x9c>)
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4816      	ldr	r0, [pc, #88]	@ (8002d38 <MX_FREERTOS_Init+0xa0>)
 8002cde:	f009 f89f 	bl	800be20 <osThreadNew>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a15      	ldr	r2, [pc, #84]	@ (8002d3c <MX_FREERTOS_Init+0xa4>)
 8002ce6:	6013      	str	r3, [r2, #0]

  /* creation of startUART_TX */
  startUART_TXHandle = osThreadNew(StartUART_TX, NULL, &startUART_TX_attributes);
 8002ce8:	4a15      	ldr	r2, [pc, #84]	@ (8002d40 <MX_FREERTOS_Init+0xa8>)
 8002cea:	2100      	movs	r1, #0
 8002cec:	4815      	ldr	r0, [pc, #84]	@ (8002d44 <MX_FREERTOS_Init+0xac>)
 8002cee:	f009 f897 	bl	800be20 <osThreadNew>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4a14      	ldr	r2, [pc, #80]	@ (8002d48 <MX_FREERTOS_Init+0xb0>)
 8002cf6:	6013      	str	r3, [r2, #0]

  /* creation of startUART_RX */
  startUART_RXHandle = osThreadNew(StartUART_RX, NULL, &startUART_RX_attributes);
 8002cf8:	4a14      	ldr	r2, [pc, #80]	@ (8002d4c <MX_FREERTOS_Init+0xb4>)
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4814      	ldr	r0, [pc, #80]	@ (8002d50 <MX_FREERTOS_Init+0xb8>)
 8002cfe:	f009 f88f 	bl	800be20 <osThreadNew>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4a13      	ldr	r2, [pc, #76]	@ (8002d54 <MX_FREERTOS_Init+0xbc>)
 8002d06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	08015a78 	.word	0x08015a78
 8002d10:	20000758 	.word	0x20000758
 8002d14:	08015a88 	.word	0x08015a88
 8002d18:	2000075c 	.word	0x2000075c
 8002d1c:	08015a98 	.word	0x08015a98
 8002d20:	08002b29 	.word	0x08002b29
 8002d24:	20000760 	.word	0x20000760
 8002d28:	08015abc 	.word	0x08015abc
 8002d2c:	08002bfd 	.word	0x08002bfd
 8002d30:	20000764 	.word	0x20000764
 8002d34:	08015ae0 	.word	0x08015ae0
 8002d38:	08002c15 	.word	0x08002c15
 8002d3c:	20000768 	.word	0x20000768
 8002d40:	08015b04 	.word	0x08015b04
 8002d44:	08002c4d 	.word	0x08002c4d
 8002d48:	2000076c 	.word	0x2000076c
 8002d4c:	08015b28 	.word	0x08015b28
 8002d50:	08002c69 	.word	0x08002c69
 8002d54:	20000770 	.word	0x20000770

08002d58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08c      	sub	sp, #48	@ 0x30
 8002d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5e:	f107 031c 	add.w	r3, r7, #28
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
 8002d6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
 8002d72:	4b7c      	ldr	r3, [pc, #496]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	4a7b      	ldr	r2, [pc, #492]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7e:	4b79      	ldr	r3, [pc, #484]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	4b75      	ldr	r3, [pc, #468]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	4a74      	ldr	r2, [pc, #464]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002d94:	f043 0304 	orr.w	r3, r3, #4
 8002d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9a:	4b72      	ldr	r3, [pc, #456]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	4b6e      	ldr	r3, [pc, #440]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	4a6d      	ldr	r2, [pc, #436]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db6:	4b6b      	ldr	r3, [pc, #428]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b67      	ldr	r3, [pc, #412]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	4a66      	ldr	r2, [pc, #408]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002dcc:	f043 0302 	orr.w	r3, r3, #2
 8002dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd2:	4b64      	ldr	r3, [pc, #400]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	4b60      	ldr	r3, [pc, #384]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	4a5f      	ldr	r2, [pc, #380]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002de8:	f043 0310 	orr.w	r3, r3, #16
 8002dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dee:	4b5d      	ldr	r3, [pc, #372]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	4b59      	ldr	r3, [pc, #356]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	4a58      	ldr	r2, [pc, #352]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002e04:	f043 0308 	orr.w	r3, r3, #8
 8002e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e0a:	4b56      	ldr	r3, [pc, #344]	@ (8002f64 <MX_GPIO_Init+0x20c>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	607b      	str	r3, [r7, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, step_1_pin|dir_1_pin|step_2_pin|dir_2_pin
 8002e16:	2200      	movs	r2, #0
 8002e18:	213f      	movs	r1, #63	@ 0x3f
 8002e1a:	4853      	ldr	r0, [pc, #332]	@ (8002f68 <MX_GPIO_Init+0x210>)
 8002e1c:	f004 fa90 	bl	8007340 <HAL_GPIO_WritePin>
                          |step_3_pin|dir_3_pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, led1_pin|led2_pin, GPIO_PIN_RESET);
 8002e20:	2200      	movs	r2, #0
 8002e22:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8002e26:	4851      	ldr	r0, [pc, #324]	@ (8002f6c <MX_GPIO_Init+0x214>)
 8002e28:	f004 fa8a 	bl	8007340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led3_pin|drill_pin, GPIO_PIN_RESET);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 8002e32:	484f      	ldr	r0, [pc, #316]	@ (8002f70 <MX_GPIO_Init+0x218>)
 8002e34:	f004 fa84 	bl	8007340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 */
  GPIO_InitStruct.Pin = step_1_pin|dir_1_pin|step_2_pin|dir_2_pin
 8002e38:	233f      	movs	r3, #63	@ 0x3f
 8002e3a:	61fb      	str	r3, [r7, #28]
                          |step_3_pin|dir_3_pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e48:	f107 031c 	add.w	r3, r7, #28
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4846      	ldr	r0, [pc, #280]	@ (8002f68 <MX_GPIO_Init+0x210>)
 8002e50:	f004 f8c2 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = backKey|start_pin;
 8002e54:	23c0      	movs	r3, #192	@ 0xc0
 8002e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e58:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	f107 031c 	add.w	r3, r7, #28
 8002e66:	4619      	mov	r1, r3
 8002e68:	483f      	ldr	r0, [pc, #252]	@ (8002f68 <MX_GPIO_Init+0x210>)
 8002e6a:	f004 f8b5 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = downKey;
 8002e6e:	2310      	movs	r3, #16
 8002e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002e72:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e7c:	f107 031c 	add.w	r3, r7, #28
 8002e80:	4619      	mov	r1, r3
 8002e82:	483c      	ldr	r0, [pc, #240]	@ (8002f74 <MX_GPIO_Init+0x21c>)
 8002e84:	f004 f8a8 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = moveXplus_pin;
 8002e88:	2320      	movs	r3, #32
 8002e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e90:	2301      	movs	r3, #1
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e94:	f107 031c 	add.w	r3, r7, #28
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4836      	ldr	r0, [pc, #216]	@ (8002f74 <MX_GPIO_Init+0x21c>)
 8002e9c:	f004 f89c 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12 */
  GPIO_InitStruct.Pin = moveXsub_pin|moveYplus_pin|moveYsub_pin|GPIO_PIN_12;
 8002ea0:	f241 0307 	movw	r3, #4103	@ 0x1007
 8002ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eae:	f107 031c 	add.w	r3, r7, #28
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	482e      	ldr	r0, [pc, #184]	@ (8002f70 <MX_GPIO_Init+0x218>)
 8002eb6:	f004 f88f 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = moveZplus_pin|moveZsub_pin;
 8002eba:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ec8:	f107 031c 	add.w	r3, r7, #28
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4827      	ldr	r0, [pc, #156]	@ (8002f6c <MX_GPIO_Init+0x214>)
 8002ed0:	f004 f882 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE11 PE12 */
  GPIO_InitStruct.Pin = stop_pin|upKey|resetKey|selectKey;
 8002ed4:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8002ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002eda:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002ede:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ee4:	f107 031c 	add.w	r3, r7, #28
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4820      	ldr	r0, [pc, #128]	@ (8002f6c <MX_GPIO_Init+0x214>)
 8002eec:	f004 f874 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE13 PE15 */
  GPIO_InitStruct.Pin = led1_pin|led2_pin;
 8002ef0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efe:	2300      	movs	r3, #0
 8002f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f02:	f107 031c 	add.w	r3, r7, #28
 8002f06:	4619      	mov	r1, r3
 8002f08:	4818      	ldr	r0, [pc, #96]	@ (8002f6c <MX_GPIO_Init+0x214>)
 8002f0a:	f004 f865 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 */
  GPIO_InitStruct.Pin = led3_pin|drill_pin;
 8002f0e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f14:	2301      	movs	r3, #1
 8002f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f20:	f107 031c 	add.w	r3, r7, #28
 8002f24:	4619      	mov	r1, r3
 8002f26:	4812      	ldr	r0, [pc, #72]	@ (8002f70 <MX_GPIO_Init+0x218>)
 8002f28:	f004 f856 	bl	8006fd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2105      	movs	r1, #5
 8002f30:	200a      	movs	r0, #10
 8002f32:	f003 fc0a 	bl	800674a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002f36:	200a      	movs	r0, #10
 8002f38:	f003 fc23 	bl	8006782 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2105      	movs	r1, #5
 8002f40:	2017      	movs	r0, #23
 8002f42:	f003 fc02 	bl	800674a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f46:	2017      	movs	r0, #23
 8002f48:	f003 fc1b 	bl	8006782 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2105      	movs	r1, #5
 8002f50:	2028      	movs	r0, #40	@ 0x28
 8002f52:	f003 fbfa 	bl	800674a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f56:	2028      	movs	r0, #40	@ 0x28
 8002f58:	f003 fc13 	bl	8006782 <HAL_NVIC_EnableIRQ>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f5c:	bf00      	nop
 8002f5e:	3730      	adds	r7, #48	@ 0x30
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40020000 	.word	0x40020000
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40020400 	.word	0x40020400
 8002f74:	40020800 	.word	0x40020800

08002f78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f7c:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002f7e:	4a13      	ldr	r2, [pc, #76]	@ (8002fcc <MX_I2C1_Init+0x54>)
 8002f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f82:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002f84:	4a12      	ldr	r2, [pc, #72]	@ (8002fd0 <MX_I2C1_Init+0x58>)
 8002f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f88:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f94:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002f96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fa2:	4b09      	ldr	r3, [pc, #36]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fa8:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fb4:	4804      	ldr	r0, [pc, #16]	@ (8002fc8 <MX_I2C1_Init+0x50>)
 8002fb6:	f004 fa0f 	bl	80073d8 <HAL_I2C_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fc0:	f000 fa06 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000868 	.word	0x20000868
 8002fcc:	40005400 	.word	0x40005400
 8002fd0:	000186a0 	.word	0x000186a0

08002fd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	@ 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a21      	ldr	r2, [pc, #132]	@ (8003078 <HAL_I2C_MspInit+0xa4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d13b      	bne.n	800306e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	4b20      	ldr	r3, [pc, #128]	@ (800307c <HAL_I2C_MspInit+0xa8>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800307c <HAL_I2C_MspInit+0xa8>)
 8003000:	f043 0302 	orr.w	r3, r3, #2
 8003004:	6313      	str	r3, [r2, #48]	@ 0x30
 8003006:	4b1d      	ldr	r3, [pc, #116]	@ (800307c <HAL_I2C_MspInit+0xa8>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003012:	23c0      	movs	r3, #192	@ 0xc0
 8003014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003016:	2312      	movs	r3, #18
 8003018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301e:	2303      	movs	r3, #3
 8003020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003022:	2304      	movs	r3, #4
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003026:	f107 0314 	add.w	r3, r7, #20
 800302a:	4619      	mov	r1, r3
 800302c:	4814      	ldr	r0, [pc, #80]	@ (8003080 <HAL_I2C_MspInit+0xac>)
 800302e:	f003 ffd3 	bl	8006fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	4b11      	ldr	r3, [pc, #68]	@ (800307c <HAL_I2C_MspInit+0xa8>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	4a10      	ldr	r2, [pc, #64]	@ (800307c <HAL_I2C_MspInit+0xa8>)
 800303c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003040:	6413      	str	r3, [r2, #64]	@ 0x40
 8003042:	4b0e      	ldr	r3, [pc, #56]	@ (800307c <HAL_I2C_MspInit+0xa8>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800304e:	2200      	movs	r2, #0
 8003050:	2105      	movs	r1, #5
 8003052:	201f      	movs	r0, #31
 8003054:	f003 fb79 	bl	800674a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003058:	201f      	movs	r0, #31
 800305a:	f003 fb92 	bl	8006782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800305e:	2200      	movs	r2, #0
 8003060:	2105      	movs	r1, #5
 8003062:	2020      	movs	r0, #32
 8003064:	f003 fb71 	bl	800674a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003068:	2020      	movs	r0, #32
 800306a:	f003 fb8a 	bl	8006782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800306e:	bf00      	nop
 8003070:	3728      	adds	r7, #40	@ 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40005400 	.word	0x40005400
 800307c:	40023800 	.word	0x40023800
 8003080:	40020400 	.word	0x40020400

08003084 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // Change your handler here accordingly
#define SLAVE_ADDRESS_LCD 0x4E    // Change this according to your setup
extern osMutexId_t lcdMutexHandle;
extern osSemaphoreId_t uartRxSemaphoreHandle;

void lcd_send_cmd(char cmd) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af02      	add	r7, sp, #8
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xF0);
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	f023 030f 	bic.w	r3, r3, #15
 8003094:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xF0);
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C;  // EN=1, RS=0
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	f043 030c 	orr.w	r3, r3, #12
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;  // EN=0, RS=0
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	f043 0308 	orr.w	r3, r3, #8
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C;  // EN=1, RS=0
 80030b0:	7bbb      	ldrb	r3, [r7, #14]
 80030b2:	f043 030c 	orr.w	r3, r3, #12
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;  // EN=0, RS=0
 80030ba:	7bbb      	ldrb	r3, [r7, #14]
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80030c4:	f107 0208 	add.w	r2, r7, #8
 80030c8:	2364      	movs	r3, #100	@ 0x64
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2304      	movs	r3, #4
 80030ce:	214e      	movs	r1, #78	@ 0x4e
 80030d0:	4803      	ldr	r0, [pc, #12]	@ (80030e0 <lcd_send_cmd+0x5c>)
 80030d2:	f004 fadb 	bl	800768c <HAL_I2C_Master_Transmit>
}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000868 	.word	0x20000868

080030e4 <lcd_send_data>:

void lcd_send_data(char data) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xF0);
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	f023 030f 	bic.w	r3, r3, #15
 80030f4:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xF0);
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D;  // EN=1, RS=1
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	f043 030d 	orr.w	r3, r3, #13
 8003102:	b2db      	uxtb	r3, r3
 8003104:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  // EN=0, RS=1
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	f043 0309 	orr.w	r3, r3, #9
 800310c:	b2db      	uxtb	r3, r3
 800310e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  // EN=1, RS=1
 8003110:	7bbb      	ldrb	r3, [r7, #14]
 8003112:	f043 030d 	orr.w	r3, r3, #13
 8003116:	b2db      	uxtb	r3, r3
 8003118:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  // EN=0, RS=1
 800311a:	7bbb      	ldrb	r3, [r7, #14]
 800311c:	f043 0309 	orr.w	r3, r3, #9
 8003120:	b2db      	uxtb	r3, r3
 8003122:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8003124:	f107 0208 	add.w	r2, r7, #8
 8003128:	2364      	movs	r3, #100	@ 0x64
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2304      	movs	r3, #4
 800312e:	214e      	movs	r1, #78	@ 0x4e
 8003130:	4803      	ldr	r0, [pc, #12]	@ (8003140 <lcd_send_data+0x5c>)
 8003132:	f004 faab 	bl	800768c <HAL_I2C_Master_Transmit>
}
 8003136:	bf00      	nop
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000868 	.word	0x20000868

08003144 <lcd_clear>:

void lcd_clear(void) {
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
    osMutexAcquire(lcdMutexHandle, osWaitForever);
 8003148:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <lcd_clear+0x2c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f04f 31ff 	mov.w	r1, #4294967295
 8003150:	4618      	mov	r0, r3
 8003152:	f008 ff98 	bl	800c086 <osMutexAcquire>
    lcd_send_cmd(0x01);  // Clear display
 8003156:	2001      	movs	r0, #1
 8003158:	f7ff ff94 	bl	8003084 <lcd_send_cmd>
    HAL_Delay(2);        // Delay for clearing
 800315c:	2002      	movs	r0, #2
 800315e:	f002 fcbd 	bl	8005adc <HAL_Delay>
    osMutexRelease(lcdMutexHandle);
 8003162:	4b03      	ldr	r3, [pc, #12]	@ (8003170 <lcd_clear+0x2c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f008 ffd8 	bl	800c11c <osMutexRelease>
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000758 	.word	0x20000758

08003174 <lcd_put_cur>:

void lcd_put_cur(int row, int col) {
 8003174:	b590      	push	{r4, r7, lr}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
    int row_offsets[] = {0x00, 0x40, 0x14, 0x54}; // Line offsets for 20x04 LCD
 800317e:	4b0e      	ldr	r3, [pc, #56]	@ (80031b8 <lcd_put_cur+0x44>)
 8003180:	f107 0408 	add.w	r4, r7, #8
 8003184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lcd_send_cmd(0x80 | (col + row_offsets[row])); // Set DDRAM address
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	3318      	adds	r3, #24
 8003190:	443b      	add	r3, r7
 8003192:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	4413      	add	r3, r2
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	b25b      	sxtb	r3, r3
 80031a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031a6:	b25b      	sxtb	r3, r3
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ff6a 	bl	8003084 <lcd_send_cmd>
}
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd90      	pop	{r4, r7, pc}
 80031b8:	08015820 	.word	0x08015820

080031bc <lcd_init>:

void lcd_init(void) {
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
    HAL_Delay(50);        // Wait for >40ms
 80031c0:	2032      	movs	r0, #50	@ 0x32
 80031c2:	f002 fc8b 	bl	8005adc <HAL_Delay>
    lcd_send_cmd(0x33);   // Initialization sequence for 4-bit mode
 80031c6:	2033      	movs	r0, #51	@ 0x33
 80031c8:	f7ff ff5c 	bl	8003084 <lcd_send_cmd>
    HAL_Delay(5);         // Wait for >4.1ms
 80031cc:	2005      	movs	r0, #5
 80031ce:	f002 fc85 	bl	8005adc <HAL_Delay>
    lcd_send_cmd(0x32);   // Initialization sequence for 4-bit mode
 80031d2:	2032      	movs	r0, #50	@ 0x32
 80031d4:	f7ff ff56 	bl	8003084 <lcd_send_cmd>
    HAL_Delay(1);         // Wait for >100us
 80031d8:	2001      	movs	r0, #1
 80031da:	f002 fc7f 	bl	8005adc <HAL_Delay>

    // Display initialization
    lcd_send_cmd(0x28);   // Function set: DL=0 (4-bit mode), N=2 (2 lines), F=0 (5x8 dots)
 80031de:	2028      	movs	r0, #40	@ 0x28
 80031e0:	f7ff ff50 	bl	8003084 <lcd_send_cmd>
    HAL_Delay(1);
 80031e4:	2001      	movs	r0, #1
 80031e6:	f002 fc79 	bl	8005adc <HAL_Delay>
    lcd_send_cmd(0x08);   // Display on/off control: D=0, C=0, B=0 (Display off)
 80031ea:	2008      	movs	r0, #8
 80031ec:	f7ff ff4a 	bl	8003084 <lcd_send_cmd>
    HAL_Delay(1);
 80031f0:	2001      	movs	r0, #1
 80031f2:	f002 fc73 	bl	8005adc <HAL_Delay>
    lcd_send_cmd(0x01);   // Clear display
 80031f6:	2001      	movs	r0, #1
 80031f8:	f7ff ff44 	bl	8003084 <lcd_send_cmd>
    HAL_Delay(2);
 80031fc:	2002      	movs	r0, #2
 80031fe:	f002 fc6d 	bl	8005adc <HAL_Delay>
    lcd_send_cmd(0x06);   // Entry mode set: I/D=1 (Increment), S=0 (No shift)
 8003202:	2006      	movs	r0, #6
 8003204:	f7ff ff3e 	bl	8003084 <lcd_send_cmd>
    HAL_Delay(1);
 8003208:	2001      	movs	r0, #1
 800320a:	f002 fc67 	bl	8005adc <HAL_Delay>
    lcd_send_cmd(0x0C);   // Display on/off control: D=1, C=0, B=0 (Display on, cursor off, blink off)
 800320e:	200c      	movs	r0, #12
 8003210:	f7ff ff38 	bl	8003084 <lcd_send_cmd>
}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}

08003218 <lcd_send_string>:

void lcd_send_string(char *str) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
    osMutexAcquire(lcdMutexHandle, osWaitForever);
 8003220:	4b0d      	ldr	r3, [pc, #52]	@ (8003258 <lcd_send_string+0x40>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f04f 31ff 	mov.w	r1, #4294967295
 8003228:	4618      	mov	r0, r3
 800322a:	f008 ff2c 	bl	800c086 <osMutexAcquire>
    while (*str) {
 800322e:	e006      	b.n	800323e <lcd_send_string+0x26>
        lcd_send_data(*str++);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff53 	bl	80030e4 <lcd_send_data>
    while (*str) {
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f4      	bne.n	8003230 <lcd_send_string+0x18>
    }
    osMutexRelease(lcdMutexHandle);
 8003246:	4b04      	ldr	r3, [pc, #16]	@ (8003258 <lcd_send_string+0x40>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f008 ff66 	bl	800c11c <osMutexRelease>
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000758 	.word	0x20000758

0800325c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003260:	f002 fbca 	bl	80059f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003264:	f000 f820 	bl	80032a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003268:	f7ff fd76 	bl	8002d58 <MX_GPIO_Init>
  MX_DMA_UART_Init();
 800326c:	f002 fae4 	bl	8005838 <MX_DMA_UART_Init>
  MX_DMA_ADC_Init();
 8003270:	f7fe fcd8 	bl	8001c24 <MX_DMA_ADC_Init>
  MX_ADC1_Init();
 8003274:	f7fe fc54 	bl	8001b20 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003278:	f7ff fe7e 	bl	8002f78 <MX_I2C1_Init>
  MX_TIM1_Init();
 800327c:	f002 f83a 	bl	80052f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003280:	f002 f888 	bl	8005394 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003284:	f002 f8d2 	bl	800542c <MX_TIM3_Init>
  MX_TIM4_Init();
 8003288:	f002 f91e 	bl	80054c8 <MX_TIM4_Init>
  MX_TIM5_Init();
 800328c:	f002 f96a 	bl	8005564 <MX_TIM5_Init>
  MX_TIM6_Init();
 8003290:	f002 f9b6 	bl	8005600 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8003294:	f002 faa6 	bl	80057e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003298:	f008 fd78 	bl	800bd8c <osKernelInitialize>

  MX_FREERTOS_Init();
 800329c:	f7ff fcfc 	bl	8002c98 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80032a0:	f008 fd98 	bl	800bdd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80032a4:	bf00      	nop
 80032a6:	e7fd      	b.n	80032a4 <main+0x48>

080032a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b094      	sub	sp, #80	@ 0x50
 80032ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ae:	f107 0320 	add.w	r3, r7, #32
 80032b2:	2230      	movs	r2, #48	@ 0x30
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f00d fb19 	bl	80108ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032bc:	f107 030c 	add.w	r3, r7, #12
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032cc:	2300      	movs	r3, #0
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	4b28      	ldr	r3, [pc, #160]	@ (8003374 <SystemClock_Config+0xcc>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	4a27      	ldr	r2, [pc, #156]	@ (8003374 <SystemClock_Config+0xcc>)
 80032d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032da:	6413      	str	r3, [r2, #64]	@ 0x40
 80032dc:	4b25      	ldr	r3, [pc, #148]	@ (8003374 <SystemClock_Config+0xcc>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032e8:	2300      	movs	r3, #0
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	4b22      	ldr	r3, [pc, #136]	@ (8003378 <SystemClock_Config+0xd0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a21      	ldr	r2, [pc, #132]	@ (8003378 <SystemClock_Config+0xd0>)
 80032f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003378 <SystemClock_Config+0xd0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003304:	2301      	movs	r3, #1
 8003306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003308:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800330e:	2302      	movs	r3, #2
 8003310:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003312:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003318:	2304      	movs	r3, #4
 800331a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800331c:	23a8      	movs	r3, #168	@ 0xa8
 800331e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003320:	2302      	movs	r3, #2
 8003322:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003324:	2304      	movs	r3, #4
 8003326:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003328:	f107 0320 	add.w	r3, r7, #32
 800332c:	4618      	mov	r0, r3
 800332e:	f006 f9f3 	bl	8009718 <HAL_RCC_OscConfig>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003338:	f000 f84a 	bl	80033d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800333c:	230f      	movs	r3, #15
 800333e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003340:	2302      	movs	r3, #2
 8003342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003348:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800334c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800334e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003352:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003354:	f107 030c 	add.w	r3, r7, #12
 8003358:	2105      	movs	r1, #5
 800335a:	4618      	mov	r0, r3
 800335c:	f006 fc54 	bl	8009c08 <HAL_RCC_ClockConfig>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003366:	f000 f833 	bl	80033d0 <Error_Handler>
  }
}
 800336a:	bf00      	nop
 800336c:	3750      	adds	r7, #80	@ 0x50
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800
 8003378:	40007000 	.word	0x40007000

0800337c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

	  if(htim->Instance == TIM2){
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338c:	d102      	bne.n	8003394 <HAL_TIM_PeriodElapsedCallback+0x18>
		  Accel_Stepper_TIMIT_Handler(&Stepper1);
 800338e:	480b      	ldr	r0, [pc, #44]	@ (80033bc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003390:	f7fd fe62 	bl	8001058 <Accel_Stepper_TIMIT_Handler>
	  }
	  if(htim->Instance == TIM3){
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a09      	ldr	r2, [pc, #36]	@ (80033c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d102      	bne.n	80033a4 <HAL_TIM_PeriodElapsedCallback+0x28>
		  Accel_Stepper_TIMIT_Handler(&Stepper2);
 800339e:	4809      	ldr	r0, [pc, #36]	@ (80033c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80033a0:	f7fd fe5a 	bl	8001058 <Accel_Stepper_TIMIT_Handler>
	  }
	  if(htim->Instance == TIM4){
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a07      	ldr	r2, [pc, #28]	@ (80033c8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d102      	bne.n	80033b4 <HAL_TIM_PeriodElapsedCallback+0x38>
		  Accel_Stepper_TIMIT_Handler(&Stepper3);
 80033ae:	4807      	ldr	r0, [pc, #28]	@ (80033cc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80033b0:	f7fd fe52 	bl	8001058 <Accel_Stepper_TIMIT_Handler>
	  }
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	200002b0 	.word	0x200002b0
 80033c0:	40000400 	.word	0x40000400
 80033c4:	20000310 	.word	0x20000310
 80033c8:	40000800 	.word	0x40000800
 80033cc:	20000370 	.word	0x20000370

080033d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033d4:	b672      	cpsid	i
}
 80033d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033d8:	bf00      	nop
 80033da:	e7fd      	b.n	80033d8 <Error_Handler+0x8>

080033dc <initialize_LCD>:
const int numButtons = sizeof(buttons) / sizeof(Button*);

float l,m,k;
extern char ip_config[20];
void initialize_LCD(LCD_adc_t *lcd)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	lcd->sensitivity = 0.066;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003420 <initialize_LCD+0x44>)
 80033e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	lcd->ACSoffset=2.5;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003424 <initialize_LCD+0x48>)
 80033f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	lcd->m = 0.4;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003428 <initialize_LCD+0x4c>)
 80033f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	lcd->C = 2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	lcd->V25 = 0.0025;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a08      	ldr	r2, [pc, #32]	@ (800342c <initialize_LCD+0x50>)
 800340a:	675a      	str	r2, [r3, #116]	@ 0x74
	lcd->Avg_Slope = 0.76;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a08      	ldr	r2, [pc, #32]	@ (8003430 <initialize_LCD+0x54>)
 8003410:	679a      	str	r2, [r3, #120]	@ 0x78
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	3d872b02 	.word	0x3d872b02
 8003424:	40200000 	.word	0x40200000
 8003428:	3ecccccd 	.word	0x3ecccccd
 800342c:	3b23d70a 	.word	0x3b23d70a
 8003430:	3f428f5c 	.word	0x3f428f5c

08003434 <initialize_Kalman>:

void initialize_Kalman(Kalman_filter *kf)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	memset(kf->buffer, 0, sizeof(kf->buffer));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3334      	adds	r3, #52	@ 0x34
 8003440:	2214      	movs	r2, #20
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f00d fa52 	bl	80108ee <memset>
    kf->N = 10;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	220a      	movs	r2, #10
 800344e:	601a      	str	r2, [r3, #0]
    kf->ema_filtered_value = 0.0f;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	609a      	str	r2, [r3, #8]
    kf->Q = KALMAN_Q;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a17      	ldr	r2, [pc, #92]	@ (80034b8 <initialize_Kalman+0x84>)
 800345c:	61da      	str	r2, [r3, #28]
    kf->R = KALMAN_R;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a16      	ldr	r2, [pc, #88]	@ (80034bc <initialize_Kalman+0x88>)
 8003462:	621a      	str	r2, [r3, #32]
    kf->Kg = 0.0f;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	625a      	str	r2, [r3, #36]	@ 0x24
    kf->P_k_k1 = 1.0f;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003472:	629a      	str	r2, [r3, #40]	@ 0x28
    kf->kalman_adc_old = 0.0f;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->index = 0;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	649a      	str	r2, [r3, #72]	@ 0x48
    kf->sum = 0;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	64da      	str	r2, [r3, #76]	@ 0x4c
    for (int i = 0; i < kf->N; ++i) {
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e009      	b.n	80034a2 <initialize_Kalman+0x6e>
        kf->buffer[i] = 0;
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3318      	adds	r3, #24
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	2200      	movs	r2, #0
 800349a:	809a      	strh	r2, [r3, #4]
    for (int i = 0; i < kf->N; ++i) {
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3301      	adds	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	dbf0      	blt.n	800348e <initialize_Kalman+0x5a>
    }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	38d1b717 	.word	0x38d1b717
 80034bc:	3dcccccd 	.word	0x3dcccccd

080034c0 <delay_lcd>:


void delay_lcd(uint16_t delay)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim6);
 80034ca:	480a      	ldr	r0, [pc, #40]	@ (80034f4 <delay_lcd+0x34>)
 80034cc:	f006 fe0c 	bl	800a0e8 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80034d0:	4b08      	ldr	r3, [pc, #32]	@ (80034f4 <delay_lcd+0x34>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2200      	movs	r2, #0
 80034d6:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < delay);
 80034d8:	bf00      	nop
 80034da:	4b06      	ldr	r3, [pc, #24]	@ (80034f4 <delay_lcd+0x34>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d3f9      	bcc.n	80034da <delay_lcd+0x1a>
	HAL_TIM_Base_Stop_IT(&htim6);
 80034e6:	4803      	ldr	r0, [pc, #12]	@ (80034f4 <delay_lcd+0x34>)
 80034e8:	f006 fe6e 	bl	800a1c8 <HAL_TIM_Base_Stop_IT>
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000ba0 	.word	0x20000ba0

080034f8 <stepX>:

void stepX(int steps, uint8_t direction, uint16_t delay)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	70fb      	strb	r3, [r7, #3]
 8003504:	4613      	mov	r3, r2
 8003506:	803b      	strh	r3, [r7, #0]
    int a;
    HAL_GPIO_WritePin(dir_1_GPIO_Port, dir_1_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	2102      	movs	r1, #2
 8003518:	480c      	ldr	r0, [pc, #48]	@ (800354c <stepX+0x54>)
 800351a:	f003 ff11 	bl	8007340 <HAL_GPIO_WritePin>
    for (a = 0; a < steps; ++a)
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e00a      	b.n	800353a <stepX+0x42>
    {
        HAL_GPIO_TogglePin(step_1_GPIO_Port, step_1_pin);
 8003524:	2101      	movs	r1, #1
 8003526:	4809      	ldr	r0, [pc, #36]	@ (800354c <stepX+0x54>)
 8003528:	f003 ff23 	bl	8007372 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 800352c:	883b      	ldrh	r3, [r7, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ffc6 	bl	80034c0 <delay_lcd>
    for (a = 0; a < steps; ++a)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3301      	adds	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	429a      	cmp	r2, r3
 8003540:	dbf0      	blt.n	8003524 <stepX+0x2c>
    }
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40020000 	.word	0x40020000

08003550 <stepY>:

void stepY(int steps, uint8_t direction, uint16_t delay)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	70fb      	strb	r3, [r7, #3]
 800355c:	4613      	mov	r3, r2
 800355e:	803b      	strh	r3, [r7, #0]
    int b;
    HAL_GPIO_WritePin(dir_2_GPIO_Port, dir_2_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	2b00      	cmp	r3, #0
 8003564:	bf0c      	ite	eq
 8003566:	2301      	moveq	r3, #1
 8003568:	2300      	movne	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	2108      	movs	r1, #8
 8003570:	480c      	ldr	r0, [pc, #48]	@ (80035a4 <stepY+0x54>)
 8003572:	f003 fee5 	bl	8007340 <HAL_GPIO_WritePin>
    for (b = 0; b < steps; ++b)
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	e00a      	b.n	8003592 <stepY+0x42>
    {
        HAL_GPIO_TogglePin(step_2_GPIO_Port, step_2_pin);
 800357c:	2104      	movs	r1, #4
 800357e:	4809      	ldr	r0, [pc, #36]	@ (80035a4 <stepY+0x54>)
 8003580:	f003 fef7 	bl	8007372 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 8003584:	883b      	ldrh	r3, [r7, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff9a 	bl	80034c0 <delay_lcd>
    for (b = 0; b < steps; ++b)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3301      	adds	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	429a      	cmp	r2, r3
 8003598:	dbf0      	blt.n	800357c <stepY+0x2c>
    }
}
 800359a:	bf00      	nop
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40020000 	.word	0x40020000

080035a8 <stepZ>:

void stepZ(int steps, uint8_t direction, uint16_t delay)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]
 80035b4:	4613      	mov	r3, r2
 80035b6:	803b      	strh	r3, [r7, #0]
    int c;
    HAL_GPIO_WritePin(dir_3_GPIO_Port, dir_3_pin, direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	bf0c      	ite	eq
 80035be:	2301      	moveq	r3, #1
 80035c0:	2300      	movne	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	461a      	mov	r2, r3
 80035c6:	2120      	movs	r1, #32
 80035c8:	480c      	ldr	r0, [pc, #48]	@ (80035fc <stepZ+0x54>)
 80035ca:	f003 feb9 	bl	8007340 <HAL_GPIO_WritePin>
    for (c = 0; c < steps; ++c)
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	e00a      	b.n	80035ea <stepZ+0x42>
    {
        HAL_GPIO_TogglePin(step_3_GPIO_Port, step_3_pin);
 80035d4:	2110      	movs	r1, #16
 80035d6:	4809      	ldr	r0, [pc, #36]	@ (80035fc <stepZ+0x54>)
 80035d8:	f003 fecb 	bl	8007372 <HAL_GPIO_TogglePin>
        delay_lcd(delay);
 80035dc:	883b      	ldrh	r3, [r7, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff ff6e 	bl	80034c0 <delay_lcd>
    for (c = 0; c < steps; ++c)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	3301      	adds	r3, #1
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	dbf0      	blt.n	80035d4 <stepZ+0x2c>
    }
}
 80035f2:	bf00      	nop
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40020000 	.word	0x40020000

08003600 <moving_average_filter>:

uint16_t moving_average_filter(Kalman_filter *kf, uint16_t ADC_Value)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	807b      	strh	r3, [r7, #2]
    kf->sum -= kf->buffer[kf->index];
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	3318      	adds	r3, #24
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	440b      	add	r3, r1
 800361c:	889b      	ldrh	r3, [r3, #4]
 800361e:	1ad2      	subs	r2, r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	64da      	str	r2, [r3, #76]	@ 0x4c
    kf->buffer[kf->index] = ADC_Value;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	3318      	adds	r3, #24
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	887a      	ldrh	r2, [r7, #2]
 8003632:	809a      	strh	r2, [r3, #4]
    kf->sum += kf->buffer[kf->index];
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	3318      	adds	r3, #24
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	440b      	add	r3, r1
 8003644:	889b      	ldrh	r3, [r3, #4]
 8003646:	441a      	add	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	64da      	str	r2, [r3, #76]	@ 0x4c

    kf->index = (kf->index + 1) % kf->N;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003650:	3301      	adds	r3, #1
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	fb93 f1f2 	sdiv	r1, r3, r2
 800365a:	fb01 f202 	mul.w	r2, r1, r2
 800365e:	1a9a      	subs	r2, r3, r2
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	649a      	str	r2, [r3, #72]	@ 0x48

    return (uint16_t)(kf->sum / kf->N);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003670:	b29b      	uxth	r3, r3
}
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <exponential_moving_average_filter>:

uint16_t exponential_moving_average_filter(Kalman_filter *kf, uint16_t ADC_Value, float alpha)
{
 800367e:	b480      	push	{r7}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	460b      	mov	r3, r1
 8003688:	ed87 0a01 	vstr	s0, [r7, #4]
 800368c:	817b      	strh	r3, [r7, #10]
    kf->ema_filtered_value = (alpha * ADC_Value) + ((1 - alpha) * kf->ema_filtered_value);
 800368e:	897b      	ldrh	r3, [r7, #10]
 8003690:	ee07 3a90 	vmov	s15, r3
 8003694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003698:	edd7 7a01 	vldr	s15, [r7, #4]
 800369c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80036b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	edc3 7a02 	vstr	s15, [r3, #8]
    return (uint16_t)kf->ema_filtered_value;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80036c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ca:	ee17 3a90 	vmov	r3, s15
 80036ce:	b29b      	uxth	r3, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <kalman_filter>:

uint16_t kalman_filter(Kalman_filter *kf, uint16_t ADC_Value)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	807b      	strh	r3, [r7, #2]
    kf->Z_k = (float)ADC_Value;
 80036e8:	887b      	ldrh	r3, [r7, #2]
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	edc3 7a05 	vstr	s15, [r3, #20]
    kf->x_k1_k1 = kf->kalman_adc_old;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	60da      	str	r2, [r3, #12]

    kf->x_k_k1 = kf->x_k1_k1;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	611a      	str	r2, [r3, #16]
    kf->P_k_k1 = kf->P_k1_k1 + kf->Q;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	ed93 7a06 	vldr	s14, [r3, #24]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	edd3 7a07 	vldr	s15, [r3, #28]
 8003714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    kf->Kg = kf->P_k_k1 / (kf->P_k_k1 + kf->R);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003730:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    kf->kalman_adc = kf->x_k_k1 + kf->Kg * (kf->Z_k - kf->kalman_adc_old);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	ed93 7a04 	vldr	s14, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	ed93 6a05 	vldr	s12, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003756:	ee76 7a67 	vsub.f32	s15, s12, s15
 800375a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800375e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    kf->P_k1_k1 = (1 - kf->Kg) * kf->P_k_k1;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800376e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800377c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	edc3 7a06 	vstr	s15, [r3, #24]

    kf->kalman_adc_old = kf->kalman_adc;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (uint16_t)kf->kalman_adc;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003798:	ee17 3a90 	vmov	r3, s15
 800379c:	b29b      	uxth	r3, r3
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	0000      	movs	r0, r0
 80037ac:	0000      	movs	r0, r0
	...

080037b0 <vol_messure>:

void vol_messure(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
	static uint8_t is_initialized = 0;
	if (!is_initialized) {
 80037b6:	4b44      	ldr	r3, [pc, #272]	@ (80038c8 <vol_messure+0x118>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <vol_messure+0x1a>
		initialize_Kalman(&kalman_fil_volt);
 80037be:	4843      	ldr	r0, [pc, #268]	@ (80038cc <vol_messure+0x11c>)
 80037c0:	f7ff fe38 	bl	8003434 <initialize_Kalman>
		is_initialized = 1;
 80037c4:	4b40      	ldr	r3, [pc, #256]	@ (80038c8 <vol_messure+0x118>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
	}
    ADC_Select_CH10();  
 80037ca:	f7fe f9eb 	bl	8001ba4 <ADC_Select_CH10>
    HAL_ADC_Start(&hadc1);
 80037ce:	4840      	ldr	r0, [pc, #256]	@ (80038d0 <vol_messure+0x120>)
 80037d0:	f002 f9ec 	bl	8005bac <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 80037d4:	2101      	movs	r1, #1
 80037d6:	483e      	ldr	r0, [pc, #248]	@ (80038d0 <vol_messure+0x120>)
 80037d8:	f002 faed 	bl	8005db6 <HAL_ADC_PollForConversion>
    LCD_adc.readValue[0] = HAL_ADC_GetValue(&hadc1);
 80037dc:	483c      	ldr	r0, [pc, #240]	@ (80038d0 <vol_messure+0x120>)
 80037de:	f002 fc85 	bl	80060ec <HAL_ADC_GetValue>
 80037e2:	4603      	mov	r3, r0
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	4b3b      	ldr	r3, [pc, #236]	@ (80038d4 <vol_messure+0x124>)
 80037e8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    uint16_t moving_avg_filtered = moving_average_filter(&kalman_fil_volt, LCD_adc.readValue[0]); // Apply moving average filter
 80037ec:	4b39      	ldr	r3, [pc, #228]	@ (80038d4 <vol_messure+0x124>)
 80037ee:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80037f2:	4619      	mov	r1, r3
 80037f4:	4835      	ldr	r0, [pc, #212]	@ (80038cc <vol_messure+0x11c>)
 80037f6:	f7ff ff03 	bl	8003600 <moving_average_filter>
 80037fa:	4603      	mov	r3, r0
 80037fc:	80fb      	strh	r3, [r7, #6]
    uint16_t ema_filtered = exponential_moving_average_filter(&kalman_fil_volt, moving_avg_filtered, EMA_ALPHA_VOLT); // Apply EMA filter
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80038d8 <vol_messure+0x128>
 8003804:	4619      	mov	r1, r3
 8003806:	4831      	ldr	r0, [pc, #196]	@ (80038cc <vol_messure+0x11c>)
 8003808:	f7ff ff39 	bl	800367e <exponential_moving_average_filter>
 800380c:	4603      	mov	r3, r0
 800380e:	80bb      	strh	r3, [r7, #4]
    kalman_fil_volt.filter_kal = kalman_filter(&kalman_fil_volt, ema_filtered); // Apply Kalman filter
 8003810:	88bb      	ldrh	r3, [r7, #4]
 8003812:	4619      	mov	r1, r3
 8003814:	482d      	ldr	r0, [pc, #180]	@ (80038cc <vol_messure+0x11c>)
 8003816:	f7ff ff61 	bl	80036dc <kalman_filter>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	4b2b      	ldr	r3, [pc, #172]	@ (80038cc <vol_messure+0x11c>)
 8003820:	809a      	strh	r2, [r3, #4]

    LCD_adc.volt = ((float)kalman_fil_volt.filter_kal / 4095) * 3.6f;
 8003822:	4b2a      	ldr	r3, [pc, #168]	@ (80038cc <vol_messure+0x11c>)
 8003824:	889b      	ldrh	r3, [r3, #4]
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800382e:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 80038dc <vol_messure+0x12c>
 8003832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003836:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80038e0 <vol_messure+0x130>
 800383a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800383e:	4b25      	ldr	r3, [pc, #148]	@ (80038d4 <vol_messure+0x124>)
 8003840:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
    LCD_adc.sum = (LCD_adc.volt * 6.5f) + 0.2f;
 8003844:	4b23      	ldr	r3, [pc, #140]	@ (80038d4 <vol_messure+0x124>)
 8003846:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 800384a:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 800384e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003852:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80038e4 <vol_messure+0x134>
 8003856:	ee77 7a87 	vadd.f32	s15, s15, s14
 800385a:	4b1e      	ldr	r3, [pc, #120]	@ (80038d4 <vol_messure+0x124>)
 800385c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (LCD_adc.sum > 16.3 && LCD_adc.sum < 21)
 8003860:	4b1c      	ldr	r3, [pc, #112]	@ (80038d4 <vol_messure+0x124>)
 8003862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003864:	4618      	mov	r0, r3
 8003866:	f7fc fe7f 	bl	8000568 <__aeabi_f2d>
 800386a:	a315      	add	r3, pc, #84	@ (adr r3, 80038c0 <vol_messure+0x110>)
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f7fd f962 	bl	8000b38 <__aeabi_dcmpgt>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00d      	beq.n	8003896 <vol_messure+0xe6>
 800387a:	4b16      	ldr	r3, [pc, #88]	@ (80038d4 <vol_messure+0x124>)
 800387c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003880:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 8003884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388c:	d503      	bpl.n	8003896 <vol_messure+0xe6>
        LCD_adc.voltage = LCD_adc.sum; // Default value when no voltage exceeds the threshold
 800388e:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <vol_messure+0x124>)
 8003890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003892:	4a10      	ldr	r2, [pc, #64]	@ (80038d4 <vol_messure+0x124>)
 8003894:	6553      	str	r3, [r2, #84]	@ 0x54
    if (LCD_adc.sum < 14)
 8003896:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <vol_messure+0x124>)
 8003898:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800389c:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 80038a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a8:	d503      	bpl.n	80038b2 <vol_messure+0x102>
        LCD_adc.voltage = 0;
 80038aa:	4b0a      	ldr	r3, [pc, #40]	@ (80038d4 <vol_messure+0x124>)
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_Stop(&hadc1);
 80038b2:	4807      	ldr	r0, [pc, #28]	@ (80038d0 <vol_messure+0x120>)
 80038b4:	f002 fa4c 	bl	8005d50 <HAL_ADC_Stop>
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	cccccccd 	.word	0xcccccccd
 80038c4:	40304ccc 	.word	0x40304ccc
 80038c8:	20000a30 	.word	0x20000a30
 80038cc:	200009d8 	.word	0x200009d8
 80038d0:	200003d0 	.word	0x200003d0
 80038d4:	200008bc 	.word	0x200008bc
 80038d8:	3ba3d70a 	.word	0x3ba3d70a
 80038dc:	457ff000 	.word	0x457ff000
 80038e0:	40666666 	.word	0x40666666
 80038e4:	3e4ccccd 	.word	0x3e4ccccd

080038e8 <cur_messure>:

void cur_messure(void)
{
 80038e8:	b5b0      	push	{r4, r5, r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
	static uint8_t is_initialized = 0;
	if (!is_initialized) {
 80038ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003a98 <cur_messure+0x1b0>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d105      	bne.n	8003902 <cur_messure+0x1a>
		initialize_Kalman(&kalman_fil_curr);
 80038f6:	4869      	ldr	r0, [pc, #420]	@ (8003a9c <cur_messure+0x1b4>)
 80038f8:	f7ff fd9c 	bl	8003434 <initialize_Kalman>
		is_initialized = 1;
 80038fc:	4b66      	ldr	r3, [pc, #408]	@ (8003a98 <cur_messure+0x1b0>)
 80038fe:	2201      	movs	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
	}
    ADC_Select_CH11();
 8003902:	f7fe f96f 	bl	8001be4 <ADC_Select_CH11>
    HAL_ADC_Start(&hadc1);
 8003906:	4866      	ldr	r0, [pc, #408]	@ (8003aa0 <cur_messure+0x1b8>)
 8003908:	f002 f950 	bl	8005bac <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 800390c:	2101      	movs	r1, #1
 800390e:	4864      	ldr	r0, [pc, #400]	@ (8003aa0 <cur_messure+0x1b8>)
 8003910:	f002 fa51 	bl	8005db6 <HAL_ADC_PollForConversion>
    LCD_adc.readValue[1] = HAL_ADC_GetValue(&hadc1);
 8003914:	4862      	ldr	r0, [pc, #392]	@ (8003aa0 <cur_messure+0x1b8>)
 8003916:	f002 fbe9 	bl	80060ec <HAL_ADC_GetValue>
 800391a:	4603      	mov	r3, r0
 800391c:	b29a      	uxth	r2, r3
 800391e:	4b61      	ldr	r3, [pc, #388]	@ (8003aa4 <cur_messure+0x1bc>)
 8003920:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    uint16_t moving_avg_filtered = moving_average_filter(&kalman_fil_curr, LCD_adc.readValue[1]); // Apply moving average filter
 8003924:	4b5f      	ldr	r3, [pc, #380]	@ (8003aa4 <cur_messure+0x1bc>)
 8003926:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800392a:	4619      	mov	r1, r3
 800392c:	485b      	ldr	r0, [pc, #364]	@ (8003a9c <cur_messure+0x1b4>)
 800392e:	f7ff fe67 	bl	8003600 <moving_average_filter>
 8003932:	4603      	mov	r3, r0
 8003934:	80fb      	strh	r3, [r7, #6]
    uint16_t ema_filtered = exponential_moving_average_filter(&kalman_fil_curr, moving_avg_filtered, EMA_ALPHA_CURR); // Apply EMA filter
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 8003aa8 <cur_messure+0x1c0>
 800393c:	4619      	mov	r1, r3
 800393e:	4857      	ldr	r0, [pc, #348]	@ (8003a9c <cur_messure+0x1b4>)
 8003940:	f7ff fe9d 	bl	800367e <exponential_moving_average_filter>
 8003944:	4603      	mov	r3, r0
 8003946:	80bb      	strh	r3, [r7, #4]
    kalman_fil_curr.filter_kal = kalman_filter(&kalman_fil_curr, ema_filtered); // Apply Kalman filter
 8003948:	88bb      	ldrh	r3, [r7, #4]
 800394a:	4619      	mov	r1, r3
 800394c:	4853      	ldr	r0, [pc, #332]	@ (8003a9c <cur_messure+0x1b4>)
 800394e:	f7ff fec5 	bl	80036dc <kalman_filter>
 8003952:	4603      	mov	r3, r0
 8003954:	461a      	mov	r2, r3
 8003956:	4b51      	ldr	r3, [pc, #324]	@ (8003a9c <cur_messure+0x1b4>)
 8003958:	809a      	strh	r2, [r3, #4]
    //    LCD_adc.sum1 = 0.0000002f * kalman_fil_curr.filter_kal_cur * kalman_fil_curr.filter_kal_cur - 0.0114f * kalman_fil_curr.filter_kal_cur + 35.5522898f -0.43 -  0.277999997; //- 0.897746623 + 0.105 + 0.085 - 0.02
    //    if (LCD_adc.sum1 > 0.43 && LCD_adc.sum1 < 15) LCD_adc.current = LCD_adc.sum1;
    //    if (LCD_adc.sum1 < 0.43) LCD_adc.current = 0;
    //    LCD_adc.Temp = ((3.3 * kalman_fil_curr.filter_kal_cur / 4095 - LCD_adc.V25) / LCD_adc.Avg_Slope) + 25;
    	// Calculate CURRENT using the cubic polynomial equation
    LCD_adc.sum1 = 0.00000009 * kalman_fil_curr.filter_kal * kalman_fil_curr.filter_kal + 0.0102 * kalman_fil_curr.filter_kal - 34.52249168 + 0.14 + l ;
 800395a:	4b50      	ldr	r3, [pc, #320]	@ (8003a9c <cur_messure+0x1b4>)
 800395c:	889b      	ldrh	r3, [r3, #4]
 800395e:	4618      	mov	r0, r3
 8003960:	f7fc fdf0 	bl	8000544 <__aeabi_i2d>
 8003964:	a342      	add	r3, pc, #264	@ (adr r3, 8003a70 <cur_messure+0x188>)
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	f7fc fe55 	bl	8000618 <__aeabi_dmul>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4614      	mov	r4, r2
 8003974:	461d      	mov	r5, r3
 8003976:	4b49      	ldr	r3, [pc, #292]	@ (8003a9c <cur_messure+0x1b4>)
 8003978:	889b      	ldrh	r3, [r3, #4]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fc fde2 	bl	8000544 <__aeabi_i2d>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4620      	mov	r0, r4
 8003986:	4629      	mov	r1, r5
 8003988:	f7fc fe46 	bl	8000618 <__aeabi_dmul>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4614      	mov	r4, r2
 8003992:	461d      	mov	r5, r3
 8003994:	4b41      	ldr	r3, [pc, #260]	@ (8003a9c <cur_messure+0x1b4>)
 8003996:	889b      	ldrh	r3, [r3, #4]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fc fdd3 	bl	8000544 <__aeabi_i2d>
 800399e:	a336      	add	r3, pc, #216	@ (adr r3, 8003a78 <cur_messure+0x190>)
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f7fc fe38 	bl	8000618 <__aeabi_dmul>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4620      	mov	r0, r4
 80039ae:	4629      	mov	r1, r5
 80039b0:	f7fc fc7c 	bl	80002ac <__adddf3>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4610      	mov	r0, r2
 80039ba:	4619      	mov	r1, r3
 80039bc:	a330      	add	r3, pc, #192	@ (adr r3, 8003a80 <cur_messure+0x198>)
 80039be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c2:	f7fc fc71 	bl	80002a8 <__aeabi_dsub>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4610      	mov	r0, r2
 80039cc:	4619      	mov	r1, r3
 80039ce:	a32e      	add	r3, pc, #184	@ (adr r3, 8003a88 <cur_messure+0x1a0>)
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	f7fc fc6a 	bl	80002ac <__adddf3>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4614      	mov	r4, r2
 80039de:	461d      	mov	r5, r3
 80039e0:	4b32      	ldr	r3, [pc, #200]	@ (8003aac <cur_messure+0x1c4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fc fdbf 	bl	8000568 <__aeabi_f2d>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4620      	mov	r0, r4
 80039f0:	4629      	mov	r1, r5
 80039f2:	f7fc fc5b 	bl	80002ac <__adddf3>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	f7fd f903 	bl	8000c08 <__aeabi_d2f>
 8003a02:	4603      	mov	r3, r0
 8003a04:	4a27      	ldr	r2, [pc, #156]	@ (8003aa4 <cur_messure+0x1bc>)
 8003a06:	6453      	str	r3, [r2, #68]	@ 0x44
    if (LCD_adc.sum1 > 0.1 && LCD_adc.sum1 < 15)
 8003a08:	4b26      	ldr	r3, [pc, #152]	@ (8003aa4 <cur_messure+0x1bc>)
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fdab 	bl	8000568 <__aeabi_f2d>
 8003a12:	a31f      	add	r3, pc, #124	@ (adr r3, 8003a90 <cur_messure+0x1a8>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f7fd f88e 	bl	8000b38 <__aeabi_dcmpgt>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00d      	beq.n	8003a3e <cur_messure+0x156>
 8003a22:	4b20      	ldr	r3, [pc, #128]	@ (8003aa4 <cur_messure+0x1bc>)
 8003a24:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003a28:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8003a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	d503      	bpl.n	8003a3e <cur_messure+0x156>
        LCD_adc.current = LCD_adc.sum1;
 8003a36:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa4 <cur_messure+0x1bc>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa4 <cur_messure+0x1bc>)
 8003a3c:	6513      	str	r3, [r2, #80]	@ 0x50
    if (LCD_adc.sum1 < 0.1)
 8003a3e:	4b19      	ldr	r3, [pc, #100]	@ (8003aa4 <cur_messure+0x1bc>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fc fd90 	bl	8000568 <__aeabi_f2d>
 8003a48:	a311      	add	r3, pc, #68	@ (adr r3, 8003a90 <cur_messure+0x1a8>)
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	f7fd f855 	bl	8000afc <__aeabi_dcmplt>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <cur_messure+0x178>
        LCD_adc.current = 0;
 8003a58:	4b12      	ldr	r3, [pc, #72]	@ (8003aa4 <cur_messure+0x1bc>)
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_ADC_Stop(&hadc1);
 8003a60:	480f      	ldr	r0, [pc, #60]	@ (8003aa0 <cur_messure+0x1b8>)
 8003a62:	f002 f975 	bl	8005d50 <HAL_ADC_Stop>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	be769dc1 	.word	0xbe769dc1
 8003a74:	3e7828c0 	.word	0x3e7828c0
 8003a78:	d35a8588 	.word	0xd35a8588
 8003a7c:	3f84e3bc 	.word	0x3f84e3bc
 8003a80:	01e3041c 	.word	0x01e3041c
 8003a84:	404142e1 	.word	0x404142e1
 8003a88:	1eb851ec 	.word	0x1eb851ec
 8003a8c:	3fc1eb85 	.word	0x3fc1eb85
 8003a90:	9999999a 	.word	0x9999999a
 8003a94:	3fb99999 	.word	0x3fb99999
 8003a98:	20000a31 	.word	0x20000a31
 8003a9c:	20000988 	.word	0x20000988
 8003aa0:	200003d0 	.word	0x200003d0
 8003aa4:	200008bc 	.word	0x200008bc
 8003aa8:	3a83126f 	.word	0x3a83126f
 8003aac:	20000a2c 	.word	0x20000a2c

08003ab0 <power_messure>:

void power_messure(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
    LCD_adc.power = LCD_adc.current * LCD_adc.voltage;
 8003ab4:	4b07      	ldr	r3, [pc, #28]	@ (8003ad4 <power_messure+0x24>)
 8003ab6:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8003aba:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <power_messure+0x24>)
 8003abc:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac4:	4b03      	ldr	r3, [pc, #12]	@ (8003ad4 <power_messure+0x24>)
 8003ac6:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
}
 8003aca:	bf00      	nop
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	200008bc 	.word	0x200008bc

08003ad8 <temperature_messure>:

void temperature_messure(void)
{
 8003ad8:	b5b0      	push	{r4, r5, r7, lr}
 8003ada:	af00      	add	r7, sp, #0
    LCD_adc.Temp = ((3.6 * kalman_fil_curr.filter_kal / 4095 - LCD_adc.V25) / LCD_adc.Avg_Slope) + 25;
 8003adc:	4b26      	ldr	r3, [pc, #152]	@ (8003b78 <temperature_messure+0xa0>)
 8003ade:	889b      	ldrh	r3, [r3, #4]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fc fd2f 	bl	8000544 <__aeabi_i2d>
 8003ae6:	a320      	add	r3, pc, #128	@ (adr r3, 8003b68 <temperature_messure+0x90>)
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f7fc fd94 	bl	8000618 <__aeabi_dmul>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	a31d      	add	r3, pc, #116	@ (adr r3, 8003b70 <temperature_messure+0x98>)
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f7fc feb5 	bl	800086c <__aeabi_ddiv>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4614      	mov	r4, r2
 8003b08:	461d      	mov	r5, r3
 8003b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b7c <temperature_messure+0xa4>)
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fc fd2a 	bl	8000568 <__aeabi_f2d>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4620      	mov	r0, r4
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	f7fc fbc4 	bl	80002a8 <__aeabi_dsub>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4614      	mov	r4, r2
 8003b26:	461d      	mov	r5, r3
 8003b28:	4b14      	ldr	r3, [pc, #80]	@ (8003b7c <temperature_messure+0xa4>)
 8003b2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fc fd1b 	bl	8000568 <__aeabi_f2d>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4620      	mov	r0, r4
 8003b38:	4629      	mov	r1, r5
 8003b3a:	f7fc fe97 	bl	800086c <__aeabi_ddiv>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b80 <temperature_messure+0xa8>)
 8003b4c:	f7fc fbae 	bl	80002ac <__adddf3>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4610      	mov	r0, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	f7fd f856 	bl	8000c08 <__aeabi_d2f>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4a07      	ldr	r2, [pc, #28]	@ (8003b7c <temperature_messure+0xa4>)
 8003b60:	67d3      	str	r3, [r2, #124]	@ 0x7c
}
 8003b62:	bf00      	nop
 8003b64:	bdb0      	pop	{r4, r5, r7, pc}
 8003b66:	bf00      	nop
 8003b68:	cccccccd 	.word	0xcccccccd
 8003b6c:	400ccccc 	.word	0x400ccccc
 8003b70:	00000000 	.word	0x00000000
 8003b74:	40affe00 	.word	0x40affe00
 8003b78:	20000988 	.word	0x20000988
 8003b7c:	200008bc 	.word	0x200008bc
 8003b80:	40390000 	.word	0x40390000

08003b84 <startADC>:

void startADC(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
    vol_messure();
 8003b88:	f7ff fe12 	bl	80037b0 <vol_messure>
    cur_messure();
 8003b8c:	f7ff feac 	bl	80038e8 <cur_messure>
    power_messure();
 8003b90:	f7ff ff8e 	bl	8003ab0 <power_messure>
    temperature_messure();
 8003b94:	f7ff ffa0 	bl	8003ad8 <temperature_messure>
}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	0000      	movs	r0, r0
	...

08003ba0 <float_to_string>:

void float_to_string(float num, char *str, int decimalPlaces) {
 8003ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba4:	b08d      	sub	sp, #52	@ 0x34
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	ed87 0a03 	vstr	s0, [r7, #12]
 8003bac:	60b8      	str	r0, [r7, #8]
 8003bae:	6079      	str	r1, [r7, #4]
 8003bb0:	466b      	mov	r3, sp
 8003bb2:	461e      	mov	r6, r3
    int intPart = (int)num;
 8003bb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bbc:	ee17 3a90 	vmov	r3, s15
 8003bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    int decPart = (int)((num - intPart) * pow(10, decimalPlaces));
 8003bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc4:	ee07 3a90 	vmov	s15, r3
 8003bc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8003bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bd4:	ee17 0a90 	vmov	r0, s15
 8003bd8:	f7fc fcc6 	bl	8000568 <__aeabi_f2d>
 8003bdc:	4682      	mov	sl, r0
 8003bde:	468b      	mov	fp, r1
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7fc fcaf 	bl	8000544 <__aeabi_i2d>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	ec43 2b11 	vmov	d1, r2, r3
 8003bee:	ed9f 0b42 	vldr	d0, [pc, #264]	@ 8003cf8 <float_to_string+0x158>
 8003bf2:	f010 fe1b 	bl	801482c <pow>
 8003bf6:	ec53 2b10 	vmov	r2, r3, d0
 8003bfa:	4650      	mov	r0, sl
 8003bfc:	4659      	mov	r1, fp
 8003bfe:	f7fc fd0b 	bl	8000618 <__aeabi_dmul>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4610      	mov	r0, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f7fc ffb5 	bl	8000b78 <__aeabi_d2iz>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	627b      	str	r3, [r7, #36]	@ 0x24

    // Convert integer part to string
    itoa(intPart, str, 10);
 8003c12:	220a      	movs	r2, #10
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c18:	f00b fd76 	bl	800f708 <itoa>

    // Find length of integer part
    int len = strlen(str);
 8003c1c:	68b8      	ldr	r0, [r7, #8]
 8003c1e:	f7fc fb37 	bl	8000290 <strlen>
 8003c22:	4603      	mov	r3, r0
 8003c24:	623b      	str	r3, [r7, #32]

    // Append decimal point
    str[len] = '.';
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	222e      	movs	r2, #46	@ 0x2e
 8003c2e:	701a      	strb	r2, [r3, #0]
    str[len + 1] = '\0';
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	3301      	adds	r3, #1
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	4413      	add	r3, r2
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]

    // Convert decimal part to string
    char decStr[decimalPlaces + 1];
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	1c59      	adds	r1, r3, #1
 8003c40:	1e4b      	subs	r3, r1, #1
 8003c42:	61fb      	str	r3, [r7, #28]
 8003c44:	460a      	mov	r2, r1
 8003c46:	2300      	movs	r3, #0
 8003c48:	4690      	mov	r8, r2
 8003c4a:	4699      	mov	r9, r3
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c60:	460a      	mov	r2, r1
 8003c62:	2300      	movs	r3, #0
 8003c64:	4614      	mov	r4, r2
 8003c66:	461d      	mov	r5, r3
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	00eb      	lsls	r3, r5, #3
 8003c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c76:	00e2      	lsls	r2, r4, #3
 8003c78:	460b      	mov	r3, r1
 8003c7a:	3307      	adds	r3, #7
 8003c7c:	08db      	lsrs	r3, r3, #3
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	ebad 0d03 	sub.w	sp, sp, r3
 8003c84:	466b      	mov	r3, sp
 8003c86:	3300      	adds	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
    itoa(decPart, decStr, 10);
 8003c8a:	220a      	movs	r2, #10
 8003c8c:	69b9      	ldr	r1, [r7, #24]
 8003c8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c90:	f00b fd3a 	bl	800f708 <itoa>

    // Pad with zeros if needed
    int decLen = strlen(decStr);
 8003c94:	69b8      	ldr	r0, [r7, #24]
 8003c96:	f7fc fafb 	bl	8000290 <strlen>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < decimalPlaces - decLen; ++i) {
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ca2:	e00e      	b.n	8003cc2 <float_to_string+0x122>
        strcat(str, "0");
 8003ca4:	68b8      	ldr	r0, [r7, #8]
 8003ca6:	f7fc faf3 	bl	8000290 <strlen>
 8003caa:	4603      	mov	r3, r0
 8003cac:	461a      	mov	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	4913      	ldr	r1, [pc, #76]	@ (8003d00 <float_to_string+0x160>)
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	8013      	strh	r3, [r2, #0]
    for (int i = 0; i < decimalPlaces - decLen; ++i) {
 8003cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	dbea      	blt.n	8003ca4 <float_to_string+0x104>
    }

    // Append decimal part to the string
    strcat(str, decStr);
 8003cce:	69b9      	ldr	r1, [r7, #24]
 8003cd0:	68b8      	ldr	r0, [r7, #8]
 8003cd2:	f00c fe14 	bl	80108fe <strcat>

    // Null-terminate the string
    str[len + 1 + decimalPlaces] = '\0';
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]
 8003ce8:	46b5      	mov	sp, r6
}
 8003cea:	bf00      	nop
 8003cec:	3734      	adds	r7, #52	@ 0x34
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf4:	f3af 8000 	nop.w
 8003cf8:	00000000 	.word	0x00000000
 8003cfc:	40240000 	.word	0x40240000
 8003d00:	08015830 	.word	0x08015830

08003d04 <display_menu>:


void display_menu(void) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
    lcd_init();
 8003d08:	f7ff fa58 	bl	80031bc <lcd_init>
    lcd_clear();
 8003d0c:	f7ff fa1a 	bl	8003144 <lcd_clear>
    lcd_put_cur(0, 2);
 8003d10:	2102      	movs	r1, #2
 8003d12:	2000      	movs	r0, #0
 8003d14:	f7ff fa2e 	bl	8003174 <lcd_put_cur>
    lcd_send_string("CNC DRILL 3 AXIS");
 8003d18:	480c      	ldr	r0, [pc, #48]	@ (8003d4c <display_menu+0x48>)
 8003d1a:	f7ff fa7d 	bl	8003218 <lcd_send_string>
    lcd_put_cur(1, 2);
 8003d1e:	2102      	movs	r1, #2
 8003d20:	2001      	movs	r0, #1
 8003d22:	f7ff fa27 	bl	8003174 <lcd_put_cur>
    lcd_send_string("HCMUTE CDT K20");
 8003d26:	480a      	ldr	r0, [pc, #40]	@ (8003d50 <display_menu+0x4c>)
 8003d28:	f7ff fa76 	bl	8003218 <lcd_send_string>
    lcd_put_cur(2, 2);
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	2002      	movs	r0, #2
 8003d30:	f7ff fa20 	bl	8003174 <lcd_put_cur>
    lcd_send_string("KHOA CO KHI CTM");
 8003d34:	4807      	ldr	r0, [pc, #28]	@ (8003d54 <display_menu+0x50>)
 8003d36:	f7ff fa6f 	bl	8003218 <lcd_send_string>
    lcd_put_cur(3, 0);
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	2003      	movs	r0, #3
 8003d3e:	f7ff fa19 	bl	8003174 <lcd_put_cur>
    lcd_send_string("GVHD: ThS N.M. TRIET");
 8003d42:	4805      	ldr	r0, [pc, #20]	@ (8003d58 <display_menu+0x54>)
 8003d44:	f7ff fa68 	bl	8003218 <lcd_send_string>
}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	08015834 	.word	0x08015834
 8003d50:	08015848 	.word	0x08015848
 8003d54:	08015858 	.word	0x08015858
 8003d58:	08015868 	.word	0x08015868

08003d5c <display_main>:

void display_main(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
	if (LCD_adc.menu_main == 0)
 8003d60:	4b46      	ldr	r3, [pc, #280]	@ (8003e7c <display_main+0x120>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d11e      	bne.n	8003da6 <display_main+0x4a>
	{
		lcd_clear();
 8003d68:	f7ff f9ec 	bl	8003144 <lcd_clear>
		lcd_put_cur(0, 0);
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f7ff fa00 	bl	8003174 <lcd_put_cur>
		lcd_send_string(">VOLT/CURRENT");
 8003d74:	4842      	ldr	r0, [pc, #264]	@ (8003e80 <display_main+0x124>)
 8003d76:	f7ff fa4f 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	f7ff f9f9 	bl	8003174 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 8003d82:	4840      	ldr	r0, [pc, #256]	@ (8003e84 <display_main+0x128>)
 8003d84:	f7ff fa48 	bl	8003218 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003d88:	2100      	movs	r1, #0
 8003d8a:	2002      	movs	r0, #2
 8003d8c:	f7ff f9f2 	bl	8003174 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 8003d90:	483d      	ldr	r0, [pc, #244]	@ (8003e88 <display_main+0x12c>)
 8003d92:	f7ff fa41 	bl	8003218 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003d96:	2100      	movs	r1, #0
 8003d98:	2003      	movs	r0, #3
 8003d9a:	f7ff f9eb 	bl	8003174 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 8003d9e:	483b      	ldr	r0, [pc, #236]	@ (8003e8c <display_main+0x130>)
 8003da0:	f7ff fa3a 	bl	8003218 <lcd_send_string>
		lcd_put_cur(2, 0);
		lcd_send_string("CONTROLL CNC");
		lcd_put_cur(3, 0);
		lcd_send_string(">SPEED-XY/SPEED-Z");
	}
}
 8003da4:	e067      	b.n	8003e76 <display_main+0x11a>
	else if (LCD_adc.menu_main == 1)
 8003da6:	4b35      	ldr	r3, [pc, #212]	@ (8003e7c <display_main+0x120>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d11e      	bne.n	8003dec <display_main+0x90>
		lcd_clear();
 8003dae:	f7ff f9c9 	bl	8003144 <lcd_clear>
		lcd_put_cur(0, 0);
 8003db2:	2100      	movs	r1, #0
 8003db4:	2000      	movs	r0, #0
 8003db6:	f7ff f9dd 	bl	8003174 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 8003dba:	4835      	ldr	r0, [pc, #212]	@ (8003e90 <display_main+0x134>)
 8003dbc:	f7ff fa2c 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	f7ff f9d6 	bl	8003174 <lcd_put_cur>
		lcd_send_string(">POWER/TEMPER");
 8003dc8:	4832      	ldr	r0, [pc, #200]	@ (8003e94 <display_main+0x138>)
 8003dca:	f7ff fa25 	bl	8003218 <lcd_send_string>
        lcd_put_cur(2, 0);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	2002      	movs	r0, #2
 8003dd2:	f7ff f9cf 	bl	8003174 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 8003dd6:	482c      	ldr	r0, [pc, #176]	@ (8003e88 <display_main+0x12c>)
 8003dd8:	f7ff fa1e 	bl	8003218 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003ddc:	2100      	movs	r1, #0
 8003dde:	2003      	movs	r0, #3
 8003de0:	f7ff f9c8 	bl	8003174 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 8003de4:	4829      	ldr	r0, [pc, #164]	@ (8003e8c <display_main+0x130>)
 8003de6:	f7ff fa17 	bl	8003218 <lcd_send_string>
}
 8003dea:	e044      	b.n	8003e76 <display_main+0x11a>
	else if (LCD_adc.menu_main == 2)
 8003dec:	4b23      	ldr	r3, [pc, #140]	@ (8003e7c <display_main+0x120>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d11e      	bne.n	8003e32 <display_main+0xd6>
		lcd_clear();
 8003df4:	f7ff f9a6 	bl	8003144 <lcd_clear>
        lcd_put_cur(0, 0);
 8003df8:	2100      	movs	r1, #0
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f7ff f9ba 	bl	8003174 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 8003e00:	4823      	ldr	r0, [pc, #140]	@ (8003e90 <display_main+0x134>)
 8003e02:	f7ff fa09 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003e06:	2100      	movs	r1, #0
 8003e08:	2001      	movs	r0, #1
 8003e0a:	f7ff f9b3 	bl	8003174 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 8003e0e:	481d      	ldr	r0, [pc, #116]	@ (8003e84 <display_main+0x128>)
 8003e10:	f7ff fa02 	bl	8003218 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003e14:	2100      	movs	r1, #0
 8003e16:	2002      	movs	r0, #2
 8003e18:	f7ff f9ac 	bl	8003174 <lcd_put_cur>
		lcd_send_string(">CONTROLL CNC");
 8003e1c:	481e      	ldr	r0, [pc, #120]	@ (8003e98 <display_main+0x13c>)
 8003e1e:	f7ff f9fb 	bl	8003218 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003e22:	2100      	movs	r1, #0
 8003e24:	2003      	movs	r0, #3
 8003e26:	f7ff f9a5 	bl	8003174 <lcd_put_cur>
		lcd_send_string("SPEED-XY/SPEED-Z");
 8003e2a:	4818      	ldr	r0, [pc, #96]	@ (8003e8c <display_main+0x130>)
 8003e2c:	f7ff f9f4 	bl	8003218 <lcd_send_string>
}
 8003e30:	e021      	b.n	8003e76 <display_main+0x11a>
	else if (LCD_adc.menu_main == 3)
 8003e32:	4b12      	ldr	r3, [pc, #72]	@ (8003e7c <display_main+0x120>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d11d      	bne.n	8003e76 <display_main+0x11a>
		lcd_clear();
 8003e3a:	f7ff f983 	bl	8003144 <lcd_clear>
        lcd_put_cur(0, 0);
 8003e3e:	2100      	movs	r1, #0
 8003e40:	2000      	movs	r0, #0
 8003e42:	f7ff f997 	bl	8003174 <lcd_put_cur>
		lcd_send_string("VOLTAGE/CURRENT");
 8003e46:	4812      	ldr	r0, [pc, #72]	@ (8003e90 <display_main+0x134>)
 8003e48:	f7ff f9e6 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f7ff f990 	bl	8003174 <lcd_put_cur>
		lcd_send_string("POWER/TEMPER");
 8003e54:	480b      	ldr	r0, [pc, #44]	@ (8003e84 <display_main+0x128>)
 8003e56:	f7ff f9df 	bl	8003218 <lcd_send_string>
		lcd_put_cur(2, 0);
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	2002      	movs	r0, #2
 8003e5e:	f7ff f989 	bl	8003174 <lcd_put_cur>
		lcd_send_string("CONTROLL CNC");
 8003e62:	4809      	ldr	r0, [pc, #36]	@ (8003e88 <display_main+0x12c>)
 8003e64:	f7ff f9d8 	bl	8003218 <lcd_send_string>
		lcd_put_cur(3, 0);
 8003e68:	2100      	movs	r1, #0
 8003e6a:	2003      	movs	r0, #3
 8003e6c:	f7ff f982 	bl	8003174 <lcd_put_cur>
		lcd_send_string(">SPEED-XY/SPEED-Z");
 8003e70:	480a      	ldr	r0, [pc, #40]	@ (8003e9c <display_main+0x140>)
 8003e72:	f7ff f9d1 	bl	8003218 <lcd_send_string>
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	200008bc 	.word	0x200008bc
 8003e80:	08015880 	.word	0x08015880
 8003e84:	08015890 	.word	0x08015890
 8003e88:	080158a0 	.word	0x080158a0
 8003e8c:	080158b0 	.word	0x080158b0
 8003e90:	080158c4 	.word	0x080158c4
 8003e94:	080158d4 	.word	0x080158d4
 8003e98:	080158e4 	.word	0x080158e4
 8003e9c:	080158f4 	.word	0x080158f4

08003ea0 <menu_1>:
      break;
  }
}

void menu_1(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
    lcd_clear();
 8003ea6:	f7ff f94d 	bl	8003144 <lcd_clear>
    lcd_put_cur(0,0);
 8003eaa:	2100      	movs	r1, #0
 8003eac:	2000      	movs	r0, #0
 8003eae:	f7ff f961 	bl	8003174 <lcd_put_cur>
    lcd_send_string("VOLTAGE= ");
 8003eb2:	4861      	ldr	r0, [pc, #388]	@ (8004038 <menu_1+0x198>)
 8003eb4:	f7ff f9b0 	bl	8003218 <lcd_send_string>
    lcd_put_cur(1,0);
 8003eb8:	2100      	movs	r1, #0
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f7ff f95a 	bl	8003174 <lcd_put_cur>
    lcd_send_string("CURRENT= ");
 8003ec0:	485e      	ldr	r0, [pc, #376]	@ (800403c <menu_1+0x19c>)
 8003ec2:	f7ff f9a9 	bl	8003218 <lcd_send_string>
    lcd_put_cur(2,0);
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	2002      	movs	r0, #2
 8003eca:	f7ff f953 	bl	8003174 <lcd_put_cur>
    lcd_send_string("ADC VOL= ");
 8003ece:	485c      	ldr	r0, [pc, #368]	@ (8004040 <menu_1+0x1a0>)
 8003ed0:	f7ff f9a2 	bl	8003218 <lcd_send_string>
    lcd_put_cur(3,0);
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	2003      	movs	r0, #3
 8003ed8:	f7ff f94c 	bl	8003174 <lcd_put_cur>
    lcd_send_string("ADC CUR= ");
 8003edc:	4859      	ldr	r0, [pc, #356]	@ (8004044 <menu_1+0x1a4>)
 8003ede:	f7ff f99b 	bl	8003218 <lcd_send_string>

    float last_voltage = -1;
 8003ee2:	4b59      	ldr	r3, [pc, #356]	@ (8004048 <menu_1+0x1a8>)
 8003ee4:	60fb      	str	r3, [r7, #12]
    float last_current = -1;
 8003ee6:	4b58      	ldr	r3, [pc, #352]	@ (8004048 <menu_1+0x1a8>)
 8003ee8:	60bb      	str	r3, [r7, #8]
    int last_adc_vol = -1;
 8003eea:	f04f 33ff 	mov.w	r3, #4294967295
 8003eee:	607b      	str	r3, [r7, #4]
    int last_adc_cur = -1;
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef4:	603b      	str	r3, [r7, #0]
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8003ef6:	e07c      	b.n	8003ff2 <menu_1+0x152>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
        {
        // Đo điện áp và dòng điện
        vol_messure();
 8003ef8:	f7ff fc5a 	bl	80037b0 <vol_messure>
        cur_messure();
 8003efc:	f7ff fcf4 	bl	80038e8 <cur_messure>

        // Cập nhật điện áp nếu có thay đổi
        if (LCD_adc.voltage != last_voltage)
 8003f00:	4b52      	ldr	r3, [pc, #328]	@ (800404c <menu_1+0x1ac>)
 8003f02:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003f06:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f0a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f12:	d019      	beq.n	8003f48 <menu_1+0xa8>
        {
            last_voltage = LCD_adc.voltage;
 8003f14:	4b4d      	ldr	r3, [pc, #308]	@ (800404c <menu_1+0x1ac>)
 8003f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f18:	60fb      	str	r3, [r7, #12]
            float_to_string(LCD_adc.voltage, LCD_adc.volVal, 2);
 8003f1a:	4b4c      	ldr	r3, [pc, #304]	@ (800404c <menu_1+0x1ac>)
 8003f1c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003f20:	2102      	movs	r1, #2
 8003f22:	484b      	ldr	r0, [pc, #300]	@ (8004050 <menu_1+0x1b0>)
 8003f24:	eeb0 0a67 	vmov.f32	s0, s15
 8003f28:	f7ff fe3a 	bl	8003ba0 <float_to_string>
            lcd_put_cur(0, 9);
 8003f2c:	2109      	movs	r1, #9
 8003f2e:	2000      	movs	r0, #0
 8003f30:	f7ff f920 	bl	8003174 <lcd_put_cur>
            lcd_send_string(LCD_adc.volVal);
 8003f34:	4846      	ldr	r0, [pc, #280]	@ (8004050 <menu_1+0x1b0>)
 8003f36:	f7ff f96f 	bl	8003218 <lcd_send_string>
            lcd_put_cur(0, 15);
 8003f3a:	210f      	movs	r1, #15
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f7ff f919 	bl	8003174 <lcd_put_cur>
            lcd_send_string("V");
 8003f42:	4844      	ldr	r0, [pc, #272]	@ (8004054 <menu_1+0x1b4>)
 8003f44:	f7ff f968 	bl	8003218 <lcd_send_string>
        }

        // Cập nhật dòng điện nếu có thay đổi
        if (LCD_adc.current != last_current)
 8003f48:	4b40      	ldr	r3, [pc, #256]	@ (800404c <menu_1+0x1ac>)
 8003f4a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003f4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f52:	eeb4 7a67 	vcmp.f32	s14, s15
 8003f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5a:	d019      	beq.n	8003f90 <menu_1+0xf0>
        {
            last_current = LCD_adc.current;
 8003f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800404c <menu_1+0x1ac>)
 8003f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f60:	60bb      	str	r3, [r7, #8]
            float_to_string(LCD_adc.current, LCD_adc.curVal, 3);
 8003f62:	4b3a      	ldr	r3, [pc, #232]	@ (800404c <menu_1+0x1ac>)
 8003f64:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8003f68:	2103      	movs	r1, #3
 8003f6a:	483b      	ldr	r0, [pc, #236]	@ (8004058 <menu_1+0x1b8>)
 8003f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f70:	f7ff fe16 	bl	8003ba0 <float_to_string>
            lcd_put_cur(1, 9);
 8003f74:	2109      	movs	r1, #9
 8003f76:	2001      	movs	r0, #1
 8003f78:	f7ff f8fc 	bl	8003174 <lcd_put_cur>
            lcd_send_string(LCD_adc.curVal);
 8003f7c:	4836      	ldr	r0, [pc, #216]	@ (8004058 <menu_1+0x1b8>)
 8003f7e:	f7ff f94b 	bl	8003218 <lcd_send_string>
            lcd_put_cur(1, 15);
 8003f82:	210f      	movs	r1, #15
 8003f84:	2001      	movs	r0, #1
 8003f86:	f7ff f8f5 	bl	8003174 <lcd_put_cur>
            lcd_send_string("A");
 8003f8a:	4834      	ldr	r0, [pc, #208]	@ (800405c <menu_1+0x1bc>)
 8003f8c:	f7ff f944 	bl	8003218 <lcd_send_string>
        }

        // Cập nhật adc volt nếu có thay đổi
        if (kalman_fil_volt.filter_kal != last_adc_vol)
 8003f90:	4b33      	ldr	r3, [pc, #204]	@ (8004060 <menu_1+0x1c0>)
 8003f92:	889b      	ldrh	r3, [r3, #4]
 8003f94:	461a      	mov	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d010      	beq.n	8003fbe <menu_1+0x11e>
        {
            last_adc_vol = kalman_fil_curr.filter_kal; // Fixed: updating last_adc instead of last_current
 8003f9c:	4b31      	ldr	r3, [pc, #196]	@ (8004064 <menu_1+0x1c4>)
 8003f9e:	889b      	ldrh	r3, [r3, #4]
 8003fa0:	607b      	str	r3, [r7, #4]
            snprintf(LCD_adc.adc_volVal, 6, "%d", kalman_fil_volt.filter_kal);
 8003fa2:	4b2f      	ldr	r3, [pc, #188]	@ (8004060 <menu_1+0x1c0>)
 8003fa4:	889b      	ldrh	r3, [r3, #4]
 8003fa6:	4a30      	ldr	r2, [pc, #192]	@ (8004068 <menu_1+0x1c8>)
 8003fa8:	2106      	movs	r1, #6
 8003faa:	4830      	ldr	r0, [pc, #192]	@ (800406c <menu_1+0x1cc>)
 8003fac:	f00c fbdc 	bl	8010768 <sniprintf>
            lcd_put_cur(2, 9);
 8003fb0:	2109      	movs	r1, #9
 8003fb2:	2002      	movs	r0, #2
 8003fb4:	f7ff f8de 	bl	8003174 <lcd_put_cur>
            lcd_send_string(LCD_adc.adc_volVal);
 8003fb8:	482c      	ldr	r0, [pc, #176]	@ (800406c <menu_1+0x1cc>)
 8003fba:	f7ff f92d 	bl	8003218 <lcd_send_string>
        }

        // Cập nhật adc curr nếu có thay đổi
        if (kalman_fil_curr.filter_kal != last_adc_cur)
 8003fbe:	4b29      	ldr	r3, [pc, #164]	@ (8004064 <menu_1+0x1c4>)
 8003fc0:	889b      	ldrh	r3, [r3, #4]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d010      	beq.n	8003fec <menu_1+0x14c>
        {
            last_adc_cur = kalman_fil_curr.filter_kal; // Fixed: updating last_adc instead of last_current
 8003fca:	4b26      	ldr	r3, [pc, #152]	@ (8004064 <menu_1+0x1c4>)
 8003fcc:	889b      	ldrh	r3, [r3, #4]
 8003fce:	603b      	str	r3, [r7, #0]
            snprintf(LCD_adc.adc_curVal, 6, "%d", kalman_fil_curr.filter_kal);
 8003fd0:	4b24      	ldr	r3, [pc, #144]	@ (8004064 <menu_1+0x1c4>)
 8003fd2:	889b      	ldrh	r3, [r3, #4]
 8003fd4:	4a24      	ldr	r2, [pc, #144]	@ (8004068 <menu_1+0x1c8>)
 8003fd6:	2106      	movs	r1, #6
 8003fd8:	4825      	ldr	r0, [pc, #148]	@ (8004070 <menu_1+0x1d0>)
 8003fda:	f00c fbc5 	bl	8010768 <sniprintf>
            lcd_put_cur(3, 9);
 8003fde:	2109      	movs	r1, #9
 8003fe0:	2003      	movs	r0, #3
 8003fe2:	f7ff f8c7 	bl	8003174 <lcd_put_cur>
            lcd_send_string(LCD_adc.adc_curVal);
 8003fe6:	4822      	ldr	r0, [pc, #136]	@ (8004070 <menu_1+0x1d0>)
 8003fe8:	f7ff f916 	bl	8003218 <lcd_send_string>
        }

        // Thêm một khoảng trễ nhỏ để ngăn việc sử dụng CPU quá mức
        osDelay(150);
 8003fec:	2096      	movs	r0, #150	@ 0x96
 8003fee:	f007 ffa9 	bl	800bf44 <osDelay>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8003ff2:	2140      	movs	r1, #64	@ 0x40
 8003ff4:	481f      	ldr	r0, [pc, #124]	@ (8004074 <menu_1+0x1d4>)
 8003ff6:	f003 f98b 	bl	8007310 <HAL_GPIO_ReadPin>
 8003ffa:	4603      	mov	r3, r0
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d017      	beq.n	8004030 <menu_1+0x190>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8004000:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004004:	481c      	ldr	r0, [pc, #112]	@ (8004078 <menu_1+0x1d8>)
 8004006:	f003 f983 	bl	8007310 <HAL_GPIO_ReadPin>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00f      	beq.n	8004030 <menu_1+0x190>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 8004010:	2180      	movs	r1, #128	@ 0x80
 8004012:	4818      	ldr	r0, [pc, #96]	@ (8004074 <menu_1+0x1d4>)
 8004014:	f003 f97c 	bl	8007310 <HAL_GPIO_ReadPin>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <menu_1+0x190>
 800401e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004022:	4815      	ldr	r0, [pc, #84]	@ (8004078 <menu_1+0x1d8>)
 8004024:	f003 f974 	bl	8007310 <HAL_GPIO_ReadPin>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	f47f af64 	bne.w	8003ef8 <menu_1+0x58>
    }
}
 8004030:	bf00      	nop
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	08015928 	.word	0x08015928
 800403c:	08015934 	.word	0x08015934
 8004040:	08015940 	.word	0x08015940
 8004044:	0801594c 	.word	0x0801594c
 8004048:	bf800000 	.word	0xbf800000
 800404c:	200008bc 	.word	0x200008bc
 8004050:	20000950 	.word	0x20000950
 8004054:	08015958 	.word	0x08015958
 8004058:	20000955 	.word	0x20000955
 800405c:	0801595c 	.word	0x0801595c
 8004060:	200009d8 	.word	0x200009d8
 8004064:	20000988 	.word	0x20000988
 8004068:	08015960 	.word	0x08015960
 800406c:	2000095a 	.word	0x2000095a
 8004070:	2000095f 	.word	0x2000095f
 8004074:	40020000 	.word	0x40020000
 8004078:	40021000 	.word	0x40021000

0800407c <menu_2>:



void menu_2(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
    lcd_clear();
 8004082:	f7ff f85f 	bl	8003144 <lcd_clear>
    lcd_put_cur(0,0);
 8004086:	2100      	movs	r1, #0
 8004088:	2000      	movs	r0, #0
 800408a:	f7ff f873 	bl	8003174 <lcd_put_cur>
    lcd_send_string("POWER= ");
 800408e:	4843      	ldr	r0, [pc, #268]	@ (800419c <menu_2+0x120>)
 8004090:	f7ff f8c2 	bl	8003218 <lcd_send_string>
    lcd_put_cur(1,0);
 8004094:	2100      	movs	r1, #0
 8004096:	2001      	movs	r0, #1
 8004098:	f7ff f86c 	bl	8003174 <lcd_put_cur>
    lcd_send_string("TEMPER= ");
 800409c:	4840      	ldr	r0, [pc, #256]	@ (80041a0 <menu_2+0x124>)
 800409e:	f7ff f8bb 	bl	8003218 <lcd_send_string>

    float last_power = -1;
 80040a2:	4b40      	ldr	r3, [pc, #256]	@ (80041a4 <menu_2+0x128>)
 80040a4:	60fb      	str	r3, [r7, #12]
    float last_temp = -1;
 80040a6:	4b3f      	ldr	r3, [pc, #252]	@ (80041a4 <menu_2+0x128>)
 80040a8:	60bb      	str	r3, [r7, #8]

    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 80040aa:	e054      	b.n	8004156 <menu_2+0xda>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
        {
        // Đo điện áp và dòng điện (để tính công suất và nhiệt độ)
        vol_messure();
 80040ac:	f7ff fb80 	bl	80037b0 <vol_messure>
        cur_messure();
 80040b0:	f7ff fc1a 	bl	80038e8 <cur_messure>

        // Cập nhật công suất nếu có thay đổi
        if (LCD_adc.power != last_power)
 80040b4:	4b3c      	ldr	r3, [pc, #240]	@ (80041a8 <menu_2+0x12c>)
 80040b6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80040ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80040be:	eeb4 7a67 	vcmp.f32	s14, s15
 80040c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c6:	d019      	beq.n	80040fc <menu_2+0x80>
        {
            last_power = LCD_adc.power;
 80040c8:	4b37      	ldr	r3, [pc, #220]	@ (80041a8 <menu_2+0x12c>)
 80040ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040cc:	60fb      	str	r3, [r7, #12]
            float_to_string(LCD_adc.power, LCD_adc.powVal, 2);
 80040ce:	4b36      	ldr	r3, [pc, #216]	@ (80041a8 <menu_2+0x12c>)
 80040d0:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80040d4:	2102      	movs	r1, #2
 80040d6:	4835      	ldr	r0, [pc, #212]	@ (80041ac <menu_2+0x130>)
 80040d8:	eeb0 0a67 	vmov.f32	s0, s15
 80040dc:	f7ff fd60 	bl	8003ba0 <float_to_string>
            lcd_put_cur(0, 9);
 80040e0:	2109      	movs	r1, #9
 80040e2:	2000      	movs	r0, #0
 80040e4:	f7ff f846 	bl	8003174 <lcd_put_cur>
            lcd_send_string(LCD_adc.powVal);
 80040e8:	4830      	ldr	r0, [pc, #192]	@ (80041ac <menu_2+0x130>)
 80040ea:	f7ff f895 	bl	8003218 <lcd_send_string>
            lcd_put_cur(0, 15);
 80040ee:	210f      	movs	r1, #15
 80040f0:	2000      	movs	r0, #0
 80040f2:	f7ff f83f 	bl	8003174 <lcd_put_cur>
            lcd_send_string("W");
 80040f6:	482e      	ldr	r0, [pc, #184]	@ (80041b0 <menu_2+0x134>)
 80040f8:	f7ff f88e 	bl	8003218 <lcd_send_string>
        }

        // Cập nhật nhiệt độ nếu có thay đổi
        if (LCD_adc.temp != last_temp)
 80040fc:	4b2a      	ldr	r3, [pc, #168]	@ (80041a8 <menu_2+0x12c>)
 80040fe:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8004102:	ed97 7a02 	vldr	s14, [r7, #8]
 8004106:	eeb4 7a67 	vcmp.f32	s14, s15
 800410a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410e:	d01f      	beq.n	8004150 <menu_2+0xd4>
        {
            last_temp = LCD_adc.Temp;
 8004110:	4b25      	ldr	r3, [pc, #148]	@ (80041a8 <menu_2+0x12c>)
 8004112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004114:	60bb      	str	r3, [r7, #8]
            float_to_string(LCD_adc.Temp, LCD_adc.tempVal, 3);
 8004116:	4b24      	ldr	r3, [pc, #144]	@ (80041a8 <menu_2+0x12c>)
 8004118:	edd3 7a1f 	vldr	s15, [r3, #124]	@ 0x7c
 800411c:	2103      	movs	r1, #3
 800411e:	4825      	ldr	r0, [pc, #148]	@ (80041b4 <menu_2+0x138>)
 8004120:	eeb0 0a67 	vmov.f32	s0, s15
 8004124:	f7ff fd3c 	bl	8003ba0 <float_to_string>
            char celsiusSymbol[] = {0xDF, 'C', '\0'};
 8004128:	4a23      	ldr	r2, [pc, #140]	@ (80041b8 <menu_2+0x13c>)
 800412a:	1d3b      	adds	r3, r7, #4
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	4611      	mov	r1, r2
 8004130:	8019      	strh	r1, [r3, #0]
 8004132:	3302      	adds	r3, #2
 8004134:	0c12      	lsrs	r2, r2, #16
 8004136:	701a      	strb	r2, [r3, #0]
            strcat(LCD_adc.tempVal, celsiusSymbol);
 8004138:	1d3b      	adds	r3, r7, #4
 800413a:	4619      	mov	r1, r3
 800413c:	481d      	ldr	r0, [pc, #116]	@ (80041b4 <menu_2+0x138>)
 800413e:	f00c fbde 	bl	80108fe <strcat>
            lcd_put_cur(1, 9);
 8004142:	2109      	movs	r1, #9
 8004144:	2001      	movs	r0, #1
 8004146:	f7ff f815 	bl	8003174 <lcd_put_cur>
            lcd_send_string(LCD_adc.tempVal);
 800414a:	481a      	ldr	r0, [pc, #104]	@ (80041b4 <menu_2+0x138>)
 800414c:	f7ff f864 	bl	8003218 <lcd_send_string>
        }

        // Thêm một khoảng trễ nhỏ để ngăn việc sử dụng CPU quá mức
        osDelay(100);
 8004150:	2064      	movs	r0, #100	@ 0x64
 8004152:	f007 fef7 	bl	800bf44 <osDelay>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8004156:	2140      	movs	r1, #64	@ 0x40
 8004158:	4818      	ldr	r0, [pc, #96]	@ (80041bc <menu_2+0x140>)
 800415a:	f003 f8d9 	bl	8007310 <HAL_GPIO_ReadPin>
 800415e:	4603      	mov	r3, r0
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 8004160:	2b00      	cmp	r3, #0
 8004162:	d016      	beq.n	8004192 <menu_2+0x116>
    while (HAL_GPIO_ReadPin(back_port, backKey) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(reset_port, resetKey) != GPIO_PIN_RESET
 8004164:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004168:	4815      	ldr	r0, [pc, #84]	@ (80041c0 <menu_2+0x144>)
 800416a:	f003 f8d1 	bl	8007310 <HAL_GPIO_ReadPin>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00e      	beq.n	8004192 <menu_2+0x116>
        		&& HAL_GPIO_ReadPin(start_port, start_pin) != GPIO_PIN_RESET && HAL_GPIO_ReadPin(stop_port, stop_pin) != GPIO_PIN_RESET) // Kiểm tra nút "Back" chưa được nhấn
 8004174:	2180      	movs	r1, #128	@ 0x80
 8004176:	4811      	ldr	r0, [pc, #68]	@ (80041bc <menu_2+0x140>)
 8004178:	f003 f8ca 	bl	8007310 <HAL_GPIO_ReadPin>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <menu_2+0x116>
 8004182:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004186:	480e      	ldr	r0, [pc, #56]	@ (80041c0 <menu_2+0x144>)
 8004188:	f003 f8c2 	bl	8007310 <HAL_GPIO_ReadPin>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d18c      	bne.n	80040ac <menu_2+0x30>
    }
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	08015964 	.word	0x08015964
 80041a0:	0801596c 	.word	0x0801596c
 80041a4:	bf800000 	.word	0xbf800000
 80041a8:	200008bc 	.word	0x200008bc
 80041ac:	20000969 	.word	0x20000969
 80041b0:	08015978 	.word	0x08015978
 80041b4:	20000964 	.word	0x20000964
 80041b8:	0801597c 	.word	0x0801597c
 80041bc:	40020000 	.word	0x40020000
 80041c0:	40021000 	.word	0x40021000

080041c4 <menu_3>:


void menu_3(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
	if (LCD_adc.selected_menu3_item == 0)
 80041c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004274 <menu_3+0xb0>)
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d117      	bne.n	8004200 <menu_3+0x3c>
	{
		lcd_clear();
 80041d0:	f7fe ffb8 	bl	8003144 <lcd_clear>
		lcd_put_cur(0, 0);
 80041d4:	2100      	movs	r1, #0
 80041d6:	2000      	movs	r0, #0
 80041d8:	f7fe ffcc 	bl	8003174 <lcd_put_cur>
		lcd_send_string(">TYPE X= ");
 80041dc:	4826      	ldr	r0, [pc, #152]	@ (8004278 <menu_3+0xb4>)
 80041de:	f7ff f81b 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
 80041e2:	2100      	movs	r1, #0
 80041e4:	2001      	movs	r0, #1
 80041e6:	f7fe ffc5 	bl	8003174 <lcd_put_cur>
		lcd_send_string("TYPE Y= ");
 80041ea:	4824      	ldr	r0, [pc, #144]	@ (800427c <menu_3+0xb8>)
 80041ec:	f7ff f814 	bl	8003218 <lcd_send_string>
		lcd_put_cur(2, 0);
 80041f0:	2100      	movs	r1, #0
 80041f2:	2002      	movs	r0, #2
 80041f4:	f7fe ffbe 	bl	8003174 <lcd_put_cur>
		lcd_send_string("TYPE Z= ");
 80041f8:	4821      	ldr	r0, [pc, #132]	@ (8004280 <menu_3+0xbc>)
 80041fa:	f7ff f80d 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
		lcd_send_string("TYPE Y= ");
		lcd_put_cur(2, 0);
		lcd_send_string(">TYPE Z= ");
	}
}
 80041fe:	e036      	b.n	800426e <menu_3+0xaa>
	else if (LCD_adc.selected_menu3_item == 1)
 8004200:	4b1c      	ldr	r3, [pc, #112]	@ (8004274 <menu_3+0xb0>)
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d117      	bne.n	8004238 <menu_3+0x74>
		lcd_clear();
 8004208:	f7fe ff9c 	bl	8003144 <lcd_clear>
		lcd_put_cur(0, 0);
 800420c:	2100      	movs	r1, #0
 800420e:	2000      	movs	r0, #0
 8004210:	f7fe ffb0 	bl	8003174 <lcd_put_cur>
		lcd_send_string("TYPE X= ");
 8004214:	481b      	ldr	r0, [pc, #108]	@ (8004284 <menu_3+0xc0>)
 8004216:	f7fe ffff 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
 800421a:	2100      	movs	r1, #0
 800421c:	2001      	movs	r0, #1
 800421e:	f7fe ffa9 	bl	8003174 <lcd_put_cur>
		lcd_send_string(">TYPE Y= ");
 8004222:	4819      	ldr	r0, [pc, #100]	@ (8004288 <menu_3+0xc4>)
 8004224:	f7fe fff8 	bl	8003218 <lcd_send_string>
		lcd_put_cur(2, 0);
 8004228:	2100      	movs	r1, #0
 800422a:	2002      	movs	r0, #2
 800422c:	f7fe ffa2 	bl	8003174 <lcd_put_cur>
		lcd_send_string("TYPE Z= ");
 8004230:	4813      	ldr	r0, [pc, #76]	@ (8004280 <menu_3+0xbc>)
 8004232:	f7fe fff1 	bl	8003218 <lcd_send_string>
}
 8004236:	e01a      	b.n	800426e <menu_3+0xaa>
	else if (LCD_adc.selected_menu3_item == 2)
 8004238:	4b0e      	ldr	r3, [pc, #56]	@ (8004274 <menu_3+0xb0>)
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d116      	bne.n	800426e <menu_3+0xaa>
		lcd_clear();
 8004240:	f7fe ff80 	bl	8003144 <lcd_clear>
		lcd_put_cur(0, 0);
 8004244:	2100      	movs	r1, #0
 8004246:	2000      	movs	r0, #0
 8004248:	f7fe ff94 	bl	8003174 <lcd_put_cur>
		lcd_send_string("TYPE X= ");
 800424c:	480d      	ldr	r0, [pc, #52]	@ (8004284 <menu_3+0xc0>)
 800424e:	f7fe ffe3 	bl	8003218 <lcd_send_string>
		lcd_put_cur(1, 0);
 8004252:	2100      	movs	r1, #0
 8004254:	2001      	movs	r0, #1
 8004256:	f7fe ff8d 	bl	8003174 <lcd_put_cur>
		lcd_send_string("TYPE Y= ");
 800425a:	4808      	ldr	r0, [pc, #32]	@ (800427c <menu_3+0xb8>)
 800425c:	f7fe ffdc 	bl	8003218 <lcd_send_string>
		lcd_put_cur(2, 0);
 8004260:	2100      	movs	r1, #0
 8004262:	2002      	movs	r0, #2
 8004264:	f7fe ff86 	bl	8003174 <lcd_put_cur>
		lcd_send_string(">TYPE Z= ");
 8004268:	4808      	ldr	r0, [pc, #32]	@ (800428c <menu_3+0xc8>)
 800426a:	f7fe ffd5 	bl	8003218 <lcd_send_string>
}
 800426e:	bf00      	nop
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	200008bc 	.word	0x200008bc
 8004278:	08015980 	.word	0x08015980
 800427c:	0801598c 	.word	0x0801598c
 8004280:	08015998 	.word	0x08015998
 8004284:	080159a4 	.word	0x080159a4
 8004288:	080159b0 	.word	0x080159b0
 800428c:	080159bc 	.word	0x080159bc

08004290 <select_menu3>:

void select_menu3(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
    switch (LCD_adc.selected_menu3_item)
 8004294:	4b0a      	ldr	r3, [pc, #40]	@ (80042c0 <select_menu3+0x30>)
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d00c      	beq.n	80042b6 <select_menu3+0x26>
 800429c:	2b02      	cmp	r3, #2
 800429e:	dc0d      	bgt.n	80042bc <select_menu3+0x2c>
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <select_menu3+0x1a>
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d003      	beq.n	80042b0 <select_menu3+0x20>
            break;
        case 2:
            lcd_clear();
            break;
    }
}
 80042a8:	e008      	b.n	80042bc <select_menu3+0x2c>
            lcd_clear();
 80042aa:	f7fe ff4b 	bl	8003144 <lcd_clear>
            break;
 80042ae:	e005      	b.n	80042bc <select_menu3+0x2c>
            lcd_clear();
 80042b0:	f7fe ff48 	bl	8003144 <lcd_clear>
            break;
 80042b4:	e002      	b.n	80042bc <select_menu3+0x2c>
            lcd_clear();
 80042b6:	f7fe ff45 	bl	8003144 <lcd_clear>
            break;
 80042ba:	bf00      	nop
}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	200008bc 	.word	0x200008bc

080042c4 <X_count>:

void X_count(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 80042c8:	e01c      	b.n	8004304 <X_count+0x40>
    {
        if (HAL_GPIO_ReadPin(moveXplus_port, moveXplus_pin) == CNC_pos.Lsw1)
 80042ca:	2120      	movs	r1, #32
 80042cc:	4825      	ldr	r0, [pc, #148]	@ (8004364 <X_count+0xa0>)
 80042ce:	f003 f81f 	bl	8007310 <HAL_GPIO_ReadPin>
 80042d2:	4603      	mov	r3, r0
 80042d4:	461a      	mov	r2, r3
 80042d6:	4b24      	ldr	r3, [pc, #144]	@ (8004368 <X_count+0xa4>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d103      	bne.n	80042e6 <X_count+0x22>
        {
        	state.stop_press = 1;
 80042de:	4b23      	ldr	r3, [pc, #140]	@ (800436c <X_count+0xa8>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	705a      	strb	r2, [r3, #1]
            break;
 80042e4:	e016      	b.n	8004314 <X_count+0x50>
        }
        LCD_adc.typeX_value++;
 80042e6:	4b22      	ldr	r3, [pc, #136]	@ (8004370 <X_count+0xac>)
 80042e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ea:	3301      	adds	r3, #1
 80042ec:	4a20      	ldr	r2, [pc, #128]	@ (8004370 <X_count+0xac>)
 80042ee:	6253      	str	r3, [r2, #36]	@ 0x24
        stepX(abs(LCD_adc.typeX_value), 0, 15);
 80042f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004370 <X_count+0xac>)
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bfb8      	it	lt
 80042f8:	425b      	neglt	r3, r3
 80042fa:	220f      	movs	r2, #15
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff f8fa 	bl	80034f8 <stepX>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8004304:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004308:	481a      	ldr	r0, [pc, #104]	@ (8004374 <X_count+0xb0>)
 800430a:	f003 f801 	bl	8007310 <HAL_GPIO_ReadPin>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0da      	beq.n	80042ca <X_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004314:	e01c      	b.n	8004350 <X_count+0x8c>
    {
        if (HAL_GPIO_ReadPin(moveXsub_port, moveXsub_pin) == CNC_pos.Lsw2)
 8004316:	2101      	movs	r1, #1
 8004318:	4817      	ldr	r0, [pc, #92]	@ (8004378 <X_count+0xb4>)
 800431a:	f002 fff9 	bl	8007310 <HAL_GPIO_ReadPin>
 800431e:	4603      	mov	r3, r0
 8004320:	461a      	mov	r2, r3
 8004322:	4b11      	ldr	r3, [pc, #68]	@ (8004368 <X_count+0xa4>)
 8004324:	785b      	ldrb	r3, [r3, #1]
 8004326:	429a      	cmp	r2, r3
 8004328:	d103      	bne.n	8004332 <X_count+0x6e>
        {
        	state.stop_press = 1;
 800432a:	4b10      	ldr	r3, [pc, #64]	@ (800436c <X_count+0xa8>)
 800432c:	2201      	movs	r2, #1
 800432e:	705a      	strb	r2, [r3, #1]
            break;
 8004330:	e016      	b.n	8004360 <X_count+0x9c>
        }
        LCD_adc.typeX_value--;
 8004332:	4b0f      	ldr	r3, [pc, #60]	@ (8004370 <X_count+0xac>)
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	3b01      	subs	r3, #1
 8004338:	4a0d      	ldr	r2, [pc, #52]	@ (8004370 <X_count+0xac>)
 800433a:	6253      	str	r3, [r2, #36]	@ 0x24
        stepX(abs(LCD_adc.typeX_value), 1, 15);
 800433c:	4b0c      	ldr	r3, [pc, #48]	@ (8004370 <X_count+0xac>)
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	bfb8      	it	lt
 8004344:	425b      	neglt	r3, r3
 8004346:	220f      	movs	r2, #15
 8004348:	2101      	movs	r1, #1
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff f8d4 	bl	80034f8 <stepX>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004350:	2110      	movs	r1, #16
 8004352:	4804      	ldr	r0, [pc, #16]	@ (8004364 <X_count+0xa0>)
 8004354:	f002 ffdc 	bl	8007310 <HAL_GPIO_ReadPin>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0db      	beq.n	8004316 <X_count+0x52>
    }
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40020800 	.word	0x40020800
 8004368:	20000778 	.word	0x20000778
 800436c:	20000a28 	.word	0x20000a28
 8004370:	200008bc 	.word	0x200008bc
 8004374:	40021000 	.word	0x40021000
 8004378:	40020400 	.word	0x40020400

0800437c <Y_count>:

void Y_count(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8004380:	e01c      	b.n	80043bc <Y_count+0x40>
    {
        if (HAL_GPIO_ReadPin(moveYplus_port, moveYplus_pin) == CNC_pos.Lsw3)
 8004382:	2104      	movs	r1, #4
 8004384:	4825      	ldr	r0, [pc, #148]	@ (800441c <Y_count+0xa0>)
 8004386:	f002 ffc3 	bl	8007310 <HAL_GPIO_ReadPin>
 800438a:	4603      	mov	r3, r0
 800438c:	461a      	mov	r2, r3
 800438e:	4b24      	ldr	r3, [pc, #144]	@ (8004420 <Y_count+0xa4>)
 8004390:	789b      	ldrb	r3, [r3, #2]
 8004392:	429a      	cmp	r2, r3
 8004394:	d103      	bne.n	800439e <Y_count+0x22>
        {
        	state.stop_press = 1;
 8004396:	4b23      	ldr	r3, [pc, #140]	@ (8004424 <Y_count+0xa8>)
 8004398:	2201      	movs	r2, #1
 800439a:	705a      	strb	r2, [r3, #1]
            break;
 800439c:	e016      	b.n	80043cc <Y_count+0x50>
        }
        LCD_adc.typeY_value++;
 800439e:	4b22      	ldr	r3, [pc, #136]	@ (8004428 <Y_count+0xac>)
 80043a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a2:	3301      	adds	r3, #1
 80043a4:	4a20      	ldr	r2, [pc, #128]	@ (8004428 <Y_count+0xac>)
 80043a6:	6293      	str	r3, [r2, #40]	@ 0x28
        stepY(abs(LCD_adc.typeY_value), 0, 15);
 80043a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004428 <Y_count+0xac>)
 80043aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bfb8      	it	lt
 80043b0:	425b      	neglt	r3, r3
 80043b2:	220f      	movs	r2, #15
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff f8ca 	bl	8003550 <stepY>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 80043bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80043c0:	481a      	ldr	r0, [pc, #104]	@ (800442c <Y_count+0xb0>)
 80043c2:	f002 ffa5 	bl	8007310 <HAL_GPIO_ReadPin>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0da      	beq.n	8004382 <Y_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 80043cc:	e01c      	b.n	8004408 <Y_count+0x8c>
    {
        if (HAL_GPIO_ReadPin(moveYsub_port, moveYsub_pin) == CNC_pos.Lsw4)
 80043ce:	2102      	movs	r1, #2
 80043d0:	4812      	ldr	r0, [pc, #72]	@ (800441c <Y_count+0xa0>)
 80043d2:	f002 ff9d 	bl	8007310 <HAL_GPIO_ReadPin>
 80043d6:	4603      	mov	r3, r0
 80043d8:	461a      	mov	r2, r3
 80043da:	4b11      	ldr	r3, [pc, #68]	@ (8004420 <Y_count+0xa4>)
 80043dc:	78db      	ldrb	r3, [r3, #3]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d103      	bne.n	80043ea <Y_count+0x6e>
        {
        	state.stop_press = 1;
 80043e2:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <Y_count+0xa8>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	705a      	strb	r2, [r3, #1]
            break;
 80043e8:	e016      	b.n	8004418 <Y_count+0x9c>
        }
        LCD_adc.typeY_value--;
 80043ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004428 <Y_count+0xac>)
 80043ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ee:	3b01      	subs	r3, #1
 80043f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004428 <Y_count+0xac>)
 80043f2:	6293      	str	r3, [r2, #40]	@ 0x28
        stepY(abs(LCD_adc.typeY_value), 1, 15);
 80043f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004428 <Y_count+0xac>)
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	bfb8      	it	lt
 80043fc:	425b      	neglt	r3, r3
 80043fe:	220f      	movs	r2, #15
 8004400:	2101      	movs	r1, #1
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff f8a4 	bl	8003550 <stepY>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004408:	2110      	movs	r1, #16
 800440a:	4809      	ldr	r0, [pc, #36]	@ (8004430 <Y_count+0xb4>)
 800440c:	f002 ff80 	bl	8007310 <HAL_GPIO_ReadPin>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0db      	beq.n	80043ce <Y_count+0x52>
    }
}
 8004416:	bf00      	nop
 8004418:	bf00      	nop
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40020400 	.word	0x40020400
 8004420:	20000778 	.word	0x20000778
 8004424:	20000a28 	.word	0x20000a28
 8004428:	200008bc 	.word	0x200008bc
 800442c:	40021000 	.word	0x40021000
 8004430:	40020800 	.word	0x40020800

08004434 <Z_count>:

void Z_count(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8004438:	e01d      	b.n	8004476 <Z_count+0x42>
    {
        if (HAL_GPIO_ReadPin(moveZsub_port, moveZsub_pin) ==  CNC_pos.Lsw6)
 800443a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800443e:	4826      	ldr	r0, [pc, #152]	@ (80044d8 <Z_count+0xa4>)
 8004440:	f002 ff66 	bl	8007310 <HAL_GPIO_ReadPin>
 8004444:	4603      	mov	r3, r0
 8004446:	461a      	mov	r2, r3
 8004448:	4b24      	ldr	r3, [pc, #144]	@ (80044dc <Z_count+0xa8>)
 800444a:	795b      	ldrb	r3, [r3, #5]
 800444c:	429a      	cmp	r2, r3
 800444e:	d103      	bne.n	8004458 <Z_count+0x24>
        {
        	state.stop_press = 1;
 8004450:	4b23      	ldr	r3, [pc, #140]	@ (80044e0 <Z_count+0xac>)
 8004452:	2201      	movs	r2, #1
 8004454:	705a      	strb	r2, [r3, #1]
            break;
 8004456:	e016      	b.n	8004486 <Z_count+0x52>
        }
        LCD_adc.typeZ_value--;
 8004458:	4b22      	ldr	r3, [pc, #136]	@ (80044e4 <Z_count+0xb0>)
 800445a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445c:	3b01      	subs	r3, #1
 800445e:	4a21      	ldr	r2, [pc, #132]	@ (80044e4 <Z_count+0xb0>)
 8004460:	62d3      	str	r3, [r2, #44]	@ 0x2c
        stepZ(abs(LCD_adc.typeZ_value), 1, 15);
 8004462:	4b20      	ldr	r3, [pc, #128]	@ (80044e4 <Z_count+0xb0>)
 8004464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004466:	2b00      	cmp	r3, #0
 8004468:	bfb8      	it	lt
 800446a:	425b      	neglt	r3, r3
 800446c:	220f      	movs	r2, #15
 800446e:	2101      	movs	r1, #1
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff f899 	bl	80035a8 <stepZ>
    while (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8004476:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800447a:	4817      	ldr	r0, [pc, #92]	@ (80044d8 <Z_count+0xa4>)
 800447c:	f002 ff48 	bl	8007310 <HAL_GPIO_ReadPin>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0d9      	beq.n	800443a <Z_count+0x6>
    }
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004486:	e01c      	b.n	80044c2 <Z_count+0x8e>
    {
        if (HAL_GPIO_ReadPin(moveZplus_port, moveZplus_pin) ==  CNC_pos.Lsw5)
 8004488:	2180      	movs	r1, #128	@ 0x80
 800448a:	4813      	ldr	r0, [pc, #76]	@ (80044d8 <Z_count+0xa4>)
 800448c:	f002 ff40 	bl	8007310 <HAL_GPIO_ReadPin>
 8004490:	4603      	mov	r3, r0
 8004492:	461a      	mov	r2, r3
 8004494:	4b11      	ldr	r3, [pc, #68]	@ (80044dc <Z_count+0xa8>)
 8004496:	791b      	ldrb	r3, [r3, #4]
 8004498:	429a      	cmp	r2, r3
 800449a:	d103      	bne.n	80044a4 <Z_count+0x70>
        {
        	state.stop_press = 1;
 800449c:	4b10      	ldr	r3, [pc, #64]	@ (80044e0 <Z_count+0xac>)
 800449e:	2201      	movs	r2, #1
 80044a0:	705a      	strb	r2, [r3, #1]
            break;
 80044a2:	e016      	b.n	80044d2 <Z_count+0x9e>
        }
        LCD_adc.typeZ_value++;
 80044a4:	4b0f      	ldr	r3, [pc, #60]	@ (80044e4 <Z_count+0xb0>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a8:	3301      	adds	r3, #1
 80044aa:	4a0e      	ldr	r2, [pc, #56]	@ (80044e4 <Z_count+0xb0>)
 80044ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        stepZ(abs(LCD_adc.typeZ_value), 0, 15);
 80044ae:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <Z_count+0xb0>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	bfb8      	it	lt
 80044b6:	425b      	neglt	r3, r3
 80044b8:	220f      	movs	r2, #15
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff f873 	bl	80035a8 <stepZ>
    while (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 80044c2:	2110      	movs	r1, #16
 80044c4:	4808      	ldr	r0, [pc, #32]	@ (80044e8 <Z_count+0xb4>)
 80044c6:	f002 ff23 	bl	8007310 <HAL_GPIO_ReadPin>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0db      	beq.n	8004488 <Z_count+0x54>
    }
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40021000 	.word	0x40021000
 80044dc:	20000778 	.word	0x20000778
 80044e0:	20000a28 	.word	0x20000a28
 80044e4:	200008bc 	.word	0x200008bc
 80044e8:	40020800 	.word	0x40020800

080044ec <menu_4>:

void menu_4(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
    if (LCD_adc.selected_menu4_item == 0)
 80044f0:	4b17      	ldr	r3, [pc, #92]	@ (8004550 <menu_4+0x64>)
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d112      	bne.n	800451e <menu_4+0x32>
    {
        lcd_clear();
 80044f8:	f7fe fe24 	bl	8003144 <lcd_clear>
        lcd_put_cur(0, 0);
 80044fc:	2100      	movs	r1, #0
 80044fe:	2000      	movs	r0, #0
 8004500:	f7fe fe38 	bl	8003174 <lcd_put_cur>
        lcd_send_string(">SPEED X-Y= ");
 8004504:	4813      	ldr	r0, [pc, #76]	@ (8004554 <menu_4+0x68>)
 8004506:	f7fe fe87 	bl	8003218 <lcd_send_string>
        lcd_put_cur(1, 0);
 800450a:	2100      	movs	r1, #0
 800450c:	2001      	movs	r0, #1
 800450e:	f7fe fe31 	bl	8003174 <lcd_put_cur>
        lcd_send_string("SPEED Z= ");
 8004512:	4811      	ldr	r0, [pc, #68]	@ (8004558 <menu_4+0x6c>)
 8004514:	f7fe fe80 	bl	8003218 <lcd_send_string>
        speedXY_count();
 8004518:	f000 f838 	bl	800458c <speedXY_count>
        lcd_send_string("SPEED X-Y= ");
        lcd_put_cur(1, 0);
        lcd_send_string(">SPEED Z= ");
        speedZ_count();
    }
}
 800451c:	e015      	b.n	800454a <menu_4+0x5e>
    else if (LCD_adc.selected_menu4_item == 1)
 800451e:	4b0c      	ldr	r3, [pc, #48]	@ (8004550 <menu_4+0x64>)
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d111      	bne.n	800454a <menu_4+0x5e>
        lcd_clear();
 8004526:	f7fe fe0d 	bl	8003144 <lcd_clear>
        lcd_put_cur(0, 0);
 800452a:	2100      	movs	r1, #0
 800452c:	2000      	movs	r0, #0
 800452e:	f7fe fe21 	bl	8003174 <lcd_put_cur>
        lcd_send_string("SPEED X-Y= ");
 8004532:	480a      	ldr	r0, [pc, #40]	@ (800455c <menu_4+0x70>)
 8004534:	f7fe fe70 	bl	8003218 <lcd_send_string>
        lcd_put_cur(1, 0);
 8004538:	2100      	movs	r1, #0
 800453a:	2001      	movs	r0, #1
 800453c:	f7fe fe1a 	bl	8003174 <lcd_put_cur>
        lcd_send_string(">SPEED Z= ");
 8004540:	4807      	ldr	r0, [pc, #28]	@ (8004560 <menu_4+0x74>)
 8004542:	f7fe fe69 	bl	8003218 <lcd_send_string>
        speedZ_count();
 8004546:	f000 f861 	bl	800460c <speedZ_count>
}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	200008bc 	.word	0x200008bc
 8004554:	080159c8 	.word	0x080159c8
 8004558:	080159d8 	.word	0x080159d8
 800455c:	080159e4 	.word	0x080159e4
 8004560:	080159f0 	.word	0x080159f0

08004564 <select_menu4>:

void select_menu4(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
    switch (LCD_adc.selected_menu4_item)
 8004568:	4b07      	ldr	r3, [pc, #28]	@ (8004588 <select_menu4+0x24>)
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <select_menu4+0x12>
 8004570:	2b01      	cmp	r3, #1
 8004572:	d003      	beq.n	800457c <select_menu4+0x18>
            break;
        case 1:
            lcd_clear();
            break;
    }
}
 8004574:	e005      	b.n	8004582 <select_menu4+0x1e>
            lcd_clear();
 8004576:	f7fe fde5 	bl	8003144 <lcd_clear>
            break;
 800457a:	e002      	b.n	8004582 <select_menu4+0x1e>
            lcd_clear();
 800457c:	f7fe fde2 	bl	8003144 <lcd_clear>
            break;
 8004580:	bf00      	nop
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	200008bc 	.word	0x200008bc

0800458c <speedXY_count>:

void speedXY_count(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8004590:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004594:	4819      	ldr	r0, [pc, #100]	@ (80045fc <speedXY_count+0x70>)
 8004596:	f002 febb 	bl	8007310 <HAL_GPIO_ReadPin>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d111      	bne.n	80045c4 <speedXY_count+0x38>
    {
        LCD_adc.speed_valueXY += 100;
 80045a0:	4b17      	ldr	r3, [pc, #92]	@ (8004600 <speedXY_count+0x74>)
 80045a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a4:	3364      	adds	r3, #100	@ 0x64
 80045a6:	4a16      	ldr	r2, [pc, #88]	@ (8004600 <speedXY_count+0x74>)
 80045a8:	6313      	str	r3, [r2, #48]	@ 0x30
        CNC_pos.max_speedXY = LCD_adc.speed_valueXY;
 80045aa:	4b15      	ldr	r3, [pc, #84]	@ (8004600 <speedXY_count+0x74>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fb ffc8 	bl	8000544 <__aeabi_i2d>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4912      	ldr	r1, [pc, #72]	@ (8004604 <speedXY_count+0x78>)
 80045ba:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
        osDelay(10);
 80045be:	200a      	movs	r0, #10
 80045c0:	f007 fcc0 	bl	800bf44 <osDelay>
    }
    if (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 80045c4:	2110      	movs	r1, #16
 80045c6:	4810      	ldr	r0, [pc, #64]	@ (8004608 <speedXY_count+0x7c>)
 80045c8:	f002 fea2 	bl	8007310 <HAL_GPIO_ReadPin>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d111      	bne.n	80045f6 <speedXY_count+0x6a>
    {
        LCD_adc.speed_valueXY -= 100;
 80045d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <speedXY_count+0x74>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d6:	3b64      	subs	r3, #100	@ 0x64
 80045d8:	4a09      	ldr	r2, [pc, #36]	@ (8004600 <speedXY_count+0x74>)
 80045da:	6313      	str	r3, [r2, #48]	@ 0x30
        CNC_pos.max_speedXY = LCD_adc.speed_valueXY;
 80045dc:	4b08      	ldr	r3, [pc, #32]	@ (8004600 <speedXY_count+0x74>)
 80045de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fb ffaf 	bl	8000544 <__aeabi_i2d>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4906      	ldr	r1, [pc, #24]	@ (8004604 <speedXY_count+0x78>)
 80045ec:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
        osDelay(10);
 80045f0:	200a      	movs	r0, #10
 80045f2:	f007 fca7 	bl	800bf44 <osDelay>
    }
}
 80045f6:	bf00      	nop
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	200008bc 	.word	0x200008bc
 8004604:	20000778 	.word	0x20000778
 8004608:	40020800 	.word	0x40020800

0800460c <speedZ_count>:

void speedZ_count(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(up_port, upKey) == GPIO_PIN_RESET)
 8004610:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004614:	4819      	ldr	r0, [pc, #100]	@ (800467c <speedZ_count+0x70>)
 8004616:	f002 fe7b 	bl	8007310 <HAL_GPIO_ReadPin>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d111      	bne.n	8004644 <speedZ_count+0x38>
    {
        LCD_adc.speed_valueZ += 100;
 8004620:	4b17      	ldr	r3, [pc, #92]	@ (8004680 <speedZ_count+0x74>)
 8004622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004624:	3364      	adds	r3, #100	@ 0x64
 8004626:	4a16      	ldr	r2, [pc, #88]	@ (8004680 <speedZ_count+0x74>)
 8004628:	6353      	str	r3, [r2, #52]	@ 0x34
        CNC_pos.max_speedZ = LCD_adc.speed_valueZ;
 800462a:	4b15      	ldr	r3, [pc, #84]	@ (8004680 <speedZ_count+0x74>)
 800462c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462e:	4618      	mov	r0, r3
 8004630:	f7fb ff88 	bl	8000544 <__aeabi_i2d>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4912      	ldr	r1, [pc, #72]	@ (8004684 <speedZ_count+0x78>)
 800463a:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
        osDelay(10);
 800463e:	200a      	movs	r0, #10
 8004640:	f007 fc80 	bl	800bf44 <osDelay>
    }
    if (HAL_GPIO_ReadPin(down_port, downKey) == GPIO_PIN_RESET)
 8004644:	2110      	movs	r1, #16
 8004646:	4810      	ldr	r0, [pc, #64]	@ (8004688 <speedZ_count+0x7c>)
 8004648:	f002 fe62 	bl	8007310 <HAL_GPIO_ReadPin>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d111      	bne.n	8004676 <speedZ_count+0x6a>
    {
        LCD_adc.speed_valueZ -= 100;
 8004652:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <speedZ_count+0x74>)
 8004654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004656:	3b64      	subs	r3, #100	@ 0x64
 8004658:	4a09      	ldr	r2, [pc, #36]	@ (8004680 <speedZ_count+0x74>)
 800465a:	6353      	str	r3, [r2, #52]	@ 0x34
        CNC_pos.max_speedZ = LCD_adc.speed_valueZ;
 800465c:	4b08      	ldr	r3, [pc, #32]	@ (8004680 <speedZ_count+0x74>)
 800465e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004660:	4618      	mov	r0, r3
 8004662:	f7fb ff6f 	bl	8000544 <__aeabi_i2d>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4906      	ldr	r1, [pc, #24]	@ (8004684 <speedZ_count+0x78>)
 800466c:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
        osDelay(10);
 8004670:	200a      	movs	r0, #10
 8004672:	f007 fc67 	bl	800bf44 <osDelay>
    }
}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	200008bc 	.word	0x200008bc
 8004684:	20000778 	.word	0x20000778
 8004688:	40020800 	.word	0x40020800

0800468c <updateButtonState>:

// Function to update button state and debounce time
void updateButtonState(Button* button, uint32_t currentTime) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
    button->last_stable_state = HAL_GPIO_ReadPin(button->port, button->pin);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f002 fe35 	bl	8007310 <HAL_GPIO_ReadPin>
 80046a6:	4603      	mov	r3, r0
 80046a8:	461a      	mov	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	609a      	str	r2, [r3, #8]
    button->last_debounce_time = currentTime;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	60da      	str	r2, [r3, #12]
}
 80046b4:	bf00      	nop
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_GPIO_EXTI_Callback>:

// HAL GPIO EXTI Callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	80fb      	strh	r3, [r7, #6]
    uint32_t currentTime = HAL_GetTick();
 80046c6:	f001 f9fd 	bl	8005ac4 <HAL_GetTick>
 80046ca:	60b8      	str	r0, [r7, #8]

    for (int i = 0; i < numButtons; ++i) {
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	e013      	b.n	80046fa <HAL_GPIO_EXTI_Callback+0x3e>
        if (buttons[i]->pin == GPIO_Pin) {
 80046d2:	4a0e      	ldr	r2, [pc, #56]	@ (800470c <HAL_GPIO_EXTI_Callback+0x50>)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	88fa      	ldrh	r2, [r7, #6]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d108      	bne.n	80046f4 <HAL_GPIO_EXTI_Callback+0x38>
            updateButtonState(buttons[i], currentTime);
 80046e2:	4a0a      	ldr	r2, [pc, #40]	@ (800470c <HAL_GPIO_EXTI_Callback+0x50>)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ffcd 	bl	800468c <updateButtonState>
            break;
 80046f2:	e007      	b.n	8004704 <HAL_GPIO_EXTI_Callback+0x48>
    for (int i = 0; i < numButtons; ++i) {
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3301      	adds	r3, #1
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	2207      	movs	r2, #7
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4293      	cmp	r3, r2
 8004700:	dbe7      	blt.n	80046d2 <HAL_GPIO_EXTI_Callback+0x16>
        }
    }
}
 8004702:	bf00      	nop
 8004704:	bf00      	nop
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	2000008c 	.word	0x2000008c

08004710 <ButtonTask>:

// Function to handle button tasks
void ButtonTask(void) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8004716:	f001 f9d5 	bl	8005ac4 <HAL_GetTick>
 800471a:	60b8      	str	r0, [r7, #8]

    for (int i = 0; i < numButtons; ++i) {
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e017      	b.n	8004752 <ButtonTask+0x42>
        Button* button = buttons[i];
 8004722:	4a69      	ldr	r2, [pc, #420]	@ (80048c8 <ButtonTask+0x1b8>)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472a:	607b      	str	r3, [r7, #4]

        if ((current_time - button->last_debounce_time > DEBOUNCE_DELAY) && (button->last_stable_state == GPIO_PIN_RESET)) {
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b50      	cmp	r3, #80	@ 0x50
 8004736:	d909      	bls.n	800474c <ButtonTask+0x3c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d105      	bne.n	800474c <ButtonTask+0x3c>
            button->handler();
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	4798      	blx	r3
            button->last_debounce_time = current_time;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < numButtons; ++i) {
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3301      	adds	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	2207      	movs	r2, #7
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4293      	cmp	r3, r2
 8004758:	dbe3      	blt.n	8004722 <ButtonTask+0x12>
        }
    }

    // Check button states for menu 3 and menu 4
    if (LCD_adc.demtong == 3 && LCD_adc.demmenu_3 == 1) {
 800475a:	4b5c      	ldr	r3, [pc, #368]	@ (80048cc <ButtonTask+0x1bc>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	2b03      	cmp	r3, #3
 8004760:	d165      	bne.n	800482e <ButtonTask+0x11e>
 8004762:	4b5a      	ldr	r3, [pc, #360]	@ (80048cc <ButtonTask+0x1bc>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d161      	bne.n	800482e <ButtonTask+0x11e>
        switch (LCD_adc.selected_menu3_item) {
 800476a:	4b58      	ldr	r3, [pc, #352]	@ (80048cc <ButtonTask+0x1bc>)
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d040      	beq.n	80047f4 <ButtonTask+0xe4>
 8004772:	2b02      	cmp	r3, #2
 8004774:	dc5b      	bgt.n	800482e <ButtonTask+0x11e>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <ButtonTask+0x70>
 800477a:	2b01      	cmp	r3, #1
 800477c:	d01d      	beq.n	80047ba <ButtonTask+0xaa>
 800477e:	e056      	b.n	800482e <ButtonTask+0x11e>
            case 0:
                lcd_put_cur(0, 0);
 8004780:	2100      	movs	r1, #0
 8004782:	2000      	movs	r0, #0
 8004784:	f7fe fcf6 	bl	8003174 <lcd_put_cur>
                lcd_send_string(">TYPE X= ");
 8004788:	4851      	ldr	r0, [pc, #324]	@ (80048d0 <ButtonTask+0x1c0>)
 800478a:	f7fe fd45 	bl	8003218 <lcd_send_string>
                float_to_string(LCD_adc.typeX_value, LCD_adc.X_Val, 2);
 800478e:	4b4f      	ldr	r3, [pc, #316]	@ (80048cc <ButtonTask+0x1bc>)
 8004790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800479a:	2102      	movs	r1, #2
 800479c:	484d      	ldr	r0, [pc, #308]	@ (80048d4 <ButtonTask+0x1c4>)
 800479e:	eeb0 0a67 	vmov.f32	s0, s15
 80047a2:	f7ff f9fd 	bl	8003ba0 <float_to_string>
                lcd_put_cur(0, 9);
 80047a6:	2109      	movs	r1, #9
 80047a8:	2000      	movs	r0, #0
 80047aa:	f7fe fce3 	bl	8003174 <lcd_put_cur>
                lcd_send_string(LCD_adc.X_Val);
 80047ae:	4849      	ldr	r0, [pc, #292]	@ (80048d4 <ButtonTask+0x1c4>)
 80047b0:	f7fe fd32 	bl	8003218 <lcd_send_string>
                X_count();
 80047b4:	f7ff fd86 	bl	80042c4 <X_count>
                break;
 80047b8:	e039      	b.n	800482e <ButtonTask+0x11e>
            case 1:
                lcd_put_cur(1, 0);
 80047ba:	2100      	movs	r1, #0
 80047bc:	2001      	movs	r0, #1
 80047be:	f7fe fcd9 	bl	8003174 <lcd_put_cur>
                lcd_send_string(">TYPE Y= ");
 80047c2:	4845      	ldr	r0, [pc, #276]	@ (80048d8 <ButtonTask+0x1c8>)
 80047c4:	f7fe fd28 	bl	8003218 <lcd_send_string>
                float_to_string(LCD_adc.typeY_value, LCD_adc.Y_Val, 2);
 80047c8:	4b40      	ldr	r3, [pc, #256]	@ (80048cc <ButtonTask+0x1bc>)
 80047ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047cc:	ee07 3a90 	vmov	s15, r3
 80047d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047d4:	2102      	movs	r1, #2
 80047d6:	4841      	ldr	r0, [pc, #260]	@ (80048dc <ButtonTask+0x1cc>)
 80047d8:	eeb0 0a67 	vmov.f32	s0, s15
 80047dc:	f7ff f9e0 	bl	8003ba0 <float_to_string>
                lcd_put_cur(1, 9);
 80047e0:	2109      	movs	r1, #9
 80047e2:	2001      	movs	r0, #1
 80047e4:	f7fe fcc6 	bl	8003174 <lcd_put_cur>
                lcd_send_string(LCD_adc.Y_Val);
 80047e8:	483c      	ldr	r0, [pc, #240]	@ (80048dc <ButtonTask+0x1cc>)
 80047ea:	f7fe fd15 	bl	8003218 <lcd_send_string>
                Y_count();
 80047ee:	f7ff fdc5 	bl	800437c <Y_count>
                break;
 80047f2:	e01c      	b.n	800482e <ButtonTask+0x11e>
            case 2:
                lcd_put_cur(2, 0);
 80047f4:	2100      	movs	r1, #0
 80047f6:	2002      	movs	r0, #2
 80047f8:	f7fe fcbc 	bl	8003174 <lcd_put_cur>
                lcd_send_string(">TYPE Z= ");
 80047fc:	4838      	ldr	r0, [pc, #224]	@ (80048e0 <ButtonTask+0x1d0>)
 80047fe:	f7fe fd0b 	bl	8003218 <lcd_send_string>
                float_to_string(LCD_adc.typeZ_value, LCD_adc.Z_Val, 2);
 8004802:	4b32      	ldr	r3, [pc, #200]	@ (80048cc <ButtonTask+0x1bc>)
 8004804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800480e:	2102      	movs	r1, #2
 8004810:	4834      	ldr	r0, [pc, #208]	@ (80048e4 <ButtonTask+0x1d4>)
 8004812:	eeb0 0a67 	vmov.f32	s0, s15
 8004816:	f7ff f9c3 	bl	8003ba0 <float_to_string>
                lcd_put_cur(2, 9);
 800481a:	2109      	movs	r1, #9
 800481c:	2002      	movs	r0, #2
 800481e:	f7fe fca9 	bl	8003174 <lcd_put_cur>
                lcd_send_string(LCD_adc.Z_Val);
 8004822:	4830      	ldr	r0, [pc, #192]	@ (80048e4 <ButtonTask+0x1d4>)
 8004824:	f7fe fcf8 	bl	8003218 <lcd_send_string>
                Z_count();
 8004828:	f7ff fe04 	bl	8004434 <Z_count>
                break;
 800482c:	bf00      	nop
        }
    }

    if (LCD_adc.demtong == 3 && LCD_adc.demmenu_4 == 1) {
 800482e:	4b27      	ldr	r3, [pc, #156]	@ (80048cc <ButtonTask+0x1bc>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2b03      	cmp	r3, #3
 8004834:	d144      	bne.n	80048c0 <ButtonTask+0x1b0>
 8004836:	4b25      	ldr	r3, [pc, #148]	@ (80048cc <ButtonTask+0x1bc>)
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d140      	bne.n	80048c0 <ButtonTask+0x1b0>
        switch (LCD_adc.selected_menu4_item) {
 800483e:	4b23      	ldr	r3, [pc, #140]	@ (80048cc <ButtonTask+0x1bc>)
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <ButtonTask+0x13c>
 8004846:	2b01      	cmp	r3, #1
 8004848:	d01d      	beq.n	8004886 <ButtonTask+0x176>
                lcd_send_string(LCD_adc.speed_ValZ);
                speedZ_count();
                break;
        }
    }
}
 800484a:	e039      	b.n	80048c0 <ButtonTask+0x1b0>
                lcd_put_cur(0, 0);
 800484c:	2100      	movs	r1, #0
 800484e:	2000      	movs	r0, #0
 8004850:	f7fe fc90 	bl	8003174 <lcd_put_cur>
                lcd_send_string(">SPEED X-Y= ");
 8004854:	4824      	ldr	r0, [pc, #144]	@ (80048e8 <ButtonTask+0x1d8>)
 8004856:	f7fe fcdf 	bl	8003218 <lcd_send_string>
                float_to_string(LCD_adc.speed_valueXY, LCD_adc.speed_ValXY, 2);
 800485a:	4b1c      	ldr	r3, [pc, #112]	@ (80048cc <ButtonTask+0x1bc>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004866:	2102      	movs	r1, #2
 8004868:	4820      	ldr	r0, [pc, #128]	@ (80048ec <ButtonTask+0x1dc>)
 800486a:	eeb0 0a67 	vmov.f32	s0, s15
 800486e:	f7ff f997 	bl	8003ba0 <float_to_string>
                lcd_put_cur(0, 12);
 8004872:	210c      	movs	r1, #12
 8004874:	2000      	movs	r0, #0
 8004876:	f7fe fc7d 	bl	8003174 <lcd_put_cur>
                lcd_send_string(LCD_adc.speed_ValXY);
 800487a:	481c      	ldr	r0, [pc, #112]	@ (80048ec <ButtonTask+0x1dc>)
 800487c:	f7fe fccc 	bl	8003218 <lcd_send_string>
                speedXY_count();
 8004880:	f7ff fe84 	bl	800458c <speedXY_count>
                break;
 8004884:	e01c      	b.n	80048c0 <ButtonTask+0x1b0>
                lcd_put_cur(1, 0);
 8004886:	2100      	movs	r1, #0
 8004888:	2001      	movs	r0, #1
 800488a:	f7fe fc73 	bl	8003174 <lcd_put_cur>
                lcd_send_string(">SPEED Z= ");
 800488e:	4818      	ldr	r0, [pc, #96]	@ (80048f0 <ButtonTask+0x1e0>)
 8004890:	f7fe fcc2 	bl	8003218 <lcd_send_string>
                float_to_string(LCD_adc.speed_valueZ, LCD_adc.speed_ValZ, 2);
 8004894:	4b0d      	ldr	r3, [pc, #52]	@ (80048cc <ButtonTask+0x1bc>)
 8004896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004898:	ee07 3a90 	vmov	s15, r3
 800489c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048a0:	2102      	movs	r1, #2
 80048a2:	4814      	ldr	r0, [pc, #80]	@ (80048f4 <ButtonTask+0x1e4>)
 80048a4:	eeb0 0a67 	vmov.f32	s0, s15
 80048a8:	f7ff f97a 	bl	8003ba0 <float_to_string>
                lcd_put_cur(1, 12);
 80048ac:	210c      	movs	r1, #12
 80048ae:	2001      	movs	r0, #1
 80048b0:	f7fe fc60 	bl	8003174 <lcd_put_cur>
                lcd_send_string(LCD_adc.speed_ValZ);
 80048b4:	480f      	ldr	r0, [pc, #60]	@ (80048f4 <ButtonTask+0x1e4>)
 80048b6:	f7fe fcaf 	bl	8003218 <lcd_send_string>
                speedZ_count();
 80048ba:	f7ff fea7 	bl	800460c <speedZ_count>
                break;
 80048be:	bf00      	nop
}
 80048c0:	bf00      	nop
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	2000008c 	.word	0x2000008c
 80048cc:	200008bc 	.word	0x200008bc
 80048d0:	08015980 	.word	0x08015980
 80048d4:	2000096e 	.word	0x2000096e
 80048d8:	080159b0 	.word	0x080159b0
 80048dc:	20000973 	.word	0x20000973
 80048e0:	080159bc 	.word	0x080159bc
 80048e4:	20000978 	.word	0x20000978
 80048e8:	080159c8 	.word	0x080159c8
 80048ec:	2000097d 	.word	0x2000097d
 80048f0:	080159f0 	.word	0x080159f0
 80048f4:	20000982 	.word	0x20000982

080048f8 <handle_up_button_press>:

void handle_up_button_press(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
    if (LCD_adc.demtong == 1) // move down in menu_main
 80048fc:	4b22      	ldr	r3, [pc, #136]	@ (8004988 <handle_up_button_press+0x90>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d10f      	bne.n	8004924 <handle_up_button_press+0x2c>
    {
        if (LCD_adc.menu_main <= 0)
 8004904:	4b20      	ldr	r3, [pc, #128]	@ (8004988 <handle_up_button_press+0x90>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	dc03      	bgt.n	8004914 <handle_up_button_press+0x1c>
        {
            LCD_adc.menu_main = 3;
 800490c:	4b1e      	ldr	r3, [pc, #120]	@ (8004988 <handle_up_button_press+0x90>)
 800490e:	2203      	movs	r2, #3
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	e004      	b.n	800491e <handle_up_button_press+0x26>
        }
        else
        {
            LCD_adc.menu_main -= 1;
 8004914:	4b1c      	ldr	r3, [pc, #112]	@ (8004988 <handle_up_button_press+0x90>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3b01      	subs	r3, #1
 800491a:	4a1b      	ldr	r2, [pc, #108]	@ (8004988 <handle_up_button_press+0x90>)
 800491c:	6013      	str	r3, [r2, #0]
        }
        display_main();
 800491e:	f7ff fa1d 	bl	8003d5c <display_main>
        {
            LCD_adc.selected_menu4_item -= 1;
        }
        menu_4();
    }
}
 8004922:	e02e      	b.n	8004982 <handle_up_button_press+0x8a>
    else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 2)
 8004924:	4b18      	ldr	r3, [pc, #96]	@ (8004988 <handle_up_button_press+0x90>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d113      	bne.n	8004954 <handle_up_button_press+0x5c>
 800492c:	4b16      	ldr	r3, [pc, #88]	@ (8004988 <handle_up_button_press+0x90>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d10f      	bne.n	8004954 <handle_up_button_press+0x5c>
        if(LCD_adc.selected_menu3_item <= 0)
 8004934:	4b14      	ldr	r3, [pc, #80]	@ (8004988 <handle_up_button_press+0x90>)
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	2b00      	cmp	r3, #0
 800493a:	dc03      	bgt.n	8004944 <handle_up_button_press+0x4c>
            LCD_adc.selected_menu3_item = 2;
 800493c:	4b12      	ldr	r3, [pc, #72]	@ (8004988 <handle_up_button_press+0x90>)
 800493e:	2202      	movs	r2, #2
 8004940:	615a      	str	r2, [r3, #20]
 8004942:	e004      	b.n	800494e <handle_up_button_press+0x56>
            LCD_adc.selected_menu3_item -= 1;
 8004944:	4b10      	ldr	r3, [pc, #64]	@ (8004988 <handle_up_button_press+0x90>)
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	3b01      	subs	r3, #1
 800494a:	4a0f      	ldr	r2, [pc, #60]	@ (8004988 <handle_up_button_press+0x90>)
 800494c:	6153      	str	r3, [r2, #20]
        menu_3();
 800494e:	f7ff fc39 	bl	80041c4 <menu_3>
}
 8004952:	e016      	b.n	8004982 <handle_up_button_press+0x8a>
    else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 3)
 8004954:	4b0c      	ldr	r3, [pc, #48]	@ (8004988 <handle_up_button_press+0x90>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	2b02      	cmp	r3, #2
 800495a:	d112      	bne.n	8004982 <handle_up_button_press+0x8a>
 800495c:	4b0a      	ldr	r3, [pc, #40]	@ (8004988 <handle_up_button_press+0x90>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b03      	cmp	r3, #3
 8004962:	d10e      	bne.n	8004982 <handle_up_button_press+0x8a>
        if(LCD_adc.selected_menu4_item <= 0)
 8004964:	4b08      	ldr	r3, [pc, #32]	@ (8004988 <handle_up_button_press+0x90>)
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	2b00      	cmp	r3, #0
 800496a:	dc03      	bgt.n	8004974 <handle_up_button_press+0x7c>
            LCD_adc.selected_menu4_item = 1;
 800496c:	4b06      	ldr	r3, [pc, #24]	@ (8004988 <handle_up_button_press+0x90>)
 800496e:	2201      	movs	r2, #1
 8004970:	619a      	str	r2, [r3, #24]
 8004972:	e004      	b.n	800497e <handle_up_button_press+0x86>
            LCD_adc.selected_menu4_item -= 1;
 8004974:	4b04      	ldr	r3, [pc, #16]	@ (8004988 <handle_up_button_press+0x90>)
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	3b01      	subs	r3, #1
 800497a:	4a03      	ldr	r2, [pc, #12]	@ (8004988 <handle_up_button_press+0x90>)
 800497c:	6193      	str	r3, [r2, #24]
        menu_4();
 800497e:	f7ff fdb5 	bl	80044ec <menu_4>
}
 8004982:	bf00      	nop
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	200008bc 	.word	0x200008bc

0800498c <handle_down_button_press>:

void handle_down_button_press(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
	if (LCD_adc.demtong == 1) // move up in menu_main
 8004990:	4b22      	ldr	r3, [pc, #136]	@ (8004a1c <handle_down_button_press+0x90>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d10f      	bne.n	80049b8 <handle_down_button_press+0x2c>
	{
		if (LCD_adc.menu_main >= 3)
 8004998:	4b20      	ldr	r3, [pc, #128]	@ (8004a1c <handle_down_button_press+0x90>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b02      	cmp	r3, #2
 800499e:	dd03      	ble.n	80049a8 <handle_down_button_press+0x1c>
		{
		   LCD_adc.menu_main = 0;
 80049a0:	4b1e      	ldr	r3, [pc, #120]	@ (8004a1c <handle_down_button_press+0x90>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	e004      	b.n	80049b2 <handle_down_button_press+0x26>
		}
		else
		{
		   LCD_adc.menu_main += 1;
 80049a8:	4b1c      	ldr	r3, [pc, #112]	@ (8004a1c <handle_down_button_press+0x90>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3301      	adds	r3, #1
 80049ae:	4a1b      	ldr	r2, [pc, #108]	@ (8004a1c <handle_down_button_press+0x90>)
 80049b0:	6013      	str	r3, [r2, #0]
		}
		display_main();
 80049b2:	f7ff f9d3 	bl	8003d5c <display_main>
		{
			LCD_adc.selected_menu4_item += 1;
		}
		menu_4();
	}
}
 80049b6:	e02e      	b.n	8004a16 <handle_down_button_press+0x8a>
	else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 2)
 80049b8:	4b18      	ldr	r3, [pc, #96]	@ (8004a1c <handle_down_button_press+0x90>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d113      	bne.n	80049e8 <handle_down_button_press+0x5c>
 80049c0:	4b16      	ldr	r3, [pc, #88]	@ (8004a1c <handle_down_button_press+0x90>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d10f      	bne.n	80049e8 <handle_down_button_press+0x5c>
		if(LCD_adc.selected_menu3_item >= 2)
 80049c8:	4b14      	ldr	r3, [pc, #80]	@ (8004a1c <handle_down_button_press+0x90>)
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	dd03      	ble.n	80049d8 <handle_down_button_press+0x4c>
			LCD_adc.selected_menu3_item = 0;
 80049d0:	4b12      	ldr	r3, [pc, #72]	@ (8004a1c <handle_down_button_press+0x90>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	615a      	str	r2, [r3, #20]
 80049d6:	e004      	b.n	80049e2 <handle_down_button_press+0x56>
			LCD_adc.selected_menu3_item += 1;
 80049d8:	4b10      	ldr	r3, [pc, #64]	@ (8004a1c <handle_down_button_press+0x90>)
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	3301      	adds	r3, #1
 80049de:	4a0f      	ldr	r2, [pc, #60]	@ (8004a1c <handle_down_button_press+0x90>)
 80049e0:	6153      	str	r3, [r2, #20]
		menu_3();
 80049e2:	f7ff fbef 	bl	80041c4 <menu_3>
}
 80049e6:	e016      	b.n	8004a16 <handle_down_button_press+0x8a>
	else if(LCD_adc.demtong == 2 && LCD_adc.menu_main == 3)
 80049e8:	4b0c      	ldr	r3, [pc, #48]	@ (8004a1c <handle_down_button_press+0x90>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d112      	bne.n	8004a16 <handle_down_button_press+0x8a>
 80049f0:	4b0a      	ldr	r3, [pc, #40]	@ (8004a1c <handle_down_button_press+0x90>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d10e      	bne.n	8004a16 <handle_down_button_press+0x8a>
		if(LCD_adc.selected_menu4_item >= 1)
 80049f8:	4b08      	ldr	r3, [pc, #32]	@ (8004a1c <handle_down_button_press+0x90>)
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	dd03      	ble.n	8004a08 <handle_down_button_press+0x7c>
			LCD_adc.selected_menu4_item = 0;
 8004a00:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <handle_down_button_press+0x90>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	619a      	str	r2, [r3, #24]
 8004a06:	e004      	b.n	8004a12 <handle_down_button_press+0x86>
			LCD_adc.selected_menu4_item += 1;
 8004a08:	4b04      	ldr	r3, [pc, #16]	@ (8004a1c <handle_down_button_press+0x90>)
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	4a03      	ldr	r2, [pc, #12]	@ (8004a1c <handle_down_button_press+0x90>)
 8004a10:	6193      	str	r3, [r2, #24]
		menu_4();
 8004a12:	f7ff fd6b 	bl	80044ec <menu_4>
}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	200008bc 	.word	0x200008bc

08004a20 <handle_back_button_press>:

void handle_back_button_press(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
    LCD_adc.demback += 1;
 8004a24:	4b54      	ldr	r3, [pc, #336]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	4a53      	ldr	r2, [pc, #332]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a2c:	6113      	str	r3, [r2, #16]
    if (LCD_adc.demback == 1)
 8004a2e:	4b52      	ldr	r3, [pc, #328]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	f040 8099 	bne.w	8004b6a <handle_back_button_press+0x14a>
    {
       if (LCD_adc.demtong == 1 && (LCD_adc.menu_main == 0 || LCD_adc.menu_main == 1 || LCD_adc.menu_main == 2 || LCD_adc.menu_main == 3))
 8004a38:	4b4f      	ldr	r3, [pc, #316]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d11a      	bne.n	8004a76 <handle_back_button_press+0x56>
 8004a40:	4b4d      	ldr	r3, [pc, #308]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00b      	beq.n	8004a60 <handle_back_button_press+0x40>
 8004a48:	4b4b      	ldr	r3, [pc, #300]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d007      	beq.n	8004a60 <handle_back_button_press+0x40>
 8004a50:	4b49      	ldr	r3, [pc, #292]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d003      	beq.n	8004a60 <handle_back_button_press+0x40>
 8004a58:	4b47      	ldr	r3, [pc, #284]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d10a      	bne.n	8004a76 <handle_back_button_press+0x56>
       {
           LCD_adc.demtong -= 1;
 8004a60:	4b45      	ldr	r3, [pc, #276]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	4a44      	ldr	r2, [pc, #272]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a68:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 8004a6a:	4b43      	ldr	r3, [pc, #268]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	611a      	str	r2, [r3, #16]
           display_menu();
 8004a70:	f7ff f948 	bl	8003d04 <display_menu>
 8004a74:	e07d      	b.n	8004b72 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 0) // From menu_1 back to display main_menu
 8004a76:	4b40      	ldr	r3, [pc, #256]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d10e      	bne.n	8004a9c <handle_back_button_press+0x7c>
 8004a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <handle_back_button_press+0x7c>
       {
           LCD_adc.demtong -= 1;
 8004a86:	4b3c      	ldr	r3, [pc, #240]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	4a3a      	ldr	r2, [pc, #232]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a8e:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 8004a90:	4b39      	ldr	r3, [pc, #228]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	611a      	str	r2, [r3, #16]
           display_main();
 8004a96:	f7ff f961 	bl	8003d5c <display_main>
 8004a9a:	e06a      	b.n	8004b72 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 1) // From menu_2 back to display main_menu
 8004a9c:	4b36      	ldr	r3, [pc, #216]	@ (8004b78 <handle_back_button_press+0x158>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d10e      	bne.n	8004ac2 <handle_back_button_press+0xa2>
 8004aa4:	4b34      	ldr	r3, [pc, #208]	@ (8004b78 <handle_back_button_press+0x158>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d10a      	bne.n	8004ac2 <handle_back_button_press+0xa2>
       {
           LCD_adc.demtong -= 1;
 8004aac:	4b32      	ldr	r3, [pc, #200]	@ (8004b78 <handle_back_button_press+0x158>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	4a31      	ldr	r2, [pc, #196]	@ (8004b78 <handle_back_button_press+0x158>)
 8004ab4:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 8004ab6:	4b30      	ldr	r3, [pc, #192]	@ (8004b78 <handle_back_button_press+0x158>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	611a      	str	r2, [r3, #16]
           display_main();
 8004abc:	f7ff f94e 	bl	8003d5c <display_main>
 8004ac0:	e057      	b.n	8004b72 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 2) // From menu_3 back to display main_menu
 8004ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8004b78 <handle_back_button_press+0x158>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d111      	bne.n	8004aee <handle_back_button_press+0xce>
 8004aca:	4b2b      	ldr	r3, [pc, #172]	@ (8004b78 <handle_back_button_press+0x158>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d10d      	bne.n	8004aee <handle_back_button_press+0xce>
       {
           LCD_adc.demtong -= 1;
 8004ad2:	4b29      	ldr	r3, [pc, #164]	@ (8004b78 <handle_back_button_press+0x158>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	4a27      	ldr	r2, [pc, #156]	@ (8004b78 <handle_back_button_press+0x158>)
 8004ada:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 8004adc:	4b26      	ldr	r3, [pc, #152]	@ (8004b78 <handle_back_button_press+0x158>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	611a      	str	r2, [r3, #16]
           LCD_adc.demmenu_3 = 0;
 8004ae2:	4b25      	ldr	r3, [pc, #148]	@ (8004b78 <handle_back_button_press+0x158>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	61da      	str	r2, [r3, #28]
           display_main();
 8004ae8:	f7ff f938 	bl	8003d5c <display_main>
 8004aec:	e041      	b.n	8004b72 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 3 && LCD_adc.demmenu_3 >= 1) // From select_menu3 back to menu_3
 8004aee:	4b22      	ldr	r3, [pc, #136]	@ (8004b78 <handle_back_button_press+0x158>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d10f      	bne.n	8004b16 <handle_back_button_press+0xf6>
 8004af6:	4b20      	ldr	r3, [pc, #128]	@ (8004b78 <handle_back_button_press+0x158>)
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	dd0b      	ble.n	8004b16 <handle_back_button_press+0xf6>
       {
           LCD_adc.demback = 0;
 8004afe:	4b1e      	ldr	r3, [pc, #120]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	611a      	str	r2, [r3, #16]
           LCD_adc.demtong = 2;
 8004b04:	4b1c      	ldr	r3, [pc, #112]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b06:	2202      	movs	r2, #2
 8004b08:	60da      	str	r2, [r3, #12]
           LCD_adc.selected_menu3_item = 0;
 8004b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	615a      	str	r2, [r3, #20]
           menu_3();
 8004b10:	f7ff fb58 	bl	80041c4 <menu_3>
 8004b14:	e02d      	b.n	8004b72 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 3) // From menu_4 back to display main_menu
 8004b16:	4b18      	ldr	r3, [pc, #96]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d111      	bne.n	8004b42 <handle_back_button_press+0x122>
 8004b1e:	4b16      	ldr	r3, [pc, #88]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d10d      	bne.n	8004b42 <handle_back_button_press+0x122>
       {
           LCD_adc.demtong -= 1;
 8004b26:	4b14      	ldr	r3, [pc, #80]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	4a12      	ldr	r2, [pc, #72]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b2e:	60d3      	str	r3, [r2, #12]
           LCD_adc.demback = 0;
 8004b30:	4b11      	ldr	r3, [pc, #68]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	611a      	str	r2, [r3, #16]
           LCD_adc.demmenu_4 = 0;
 8004b36:	4b10      	ldr	r3, [pc, #64]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	621a      	str	r2, [r3, #32]
           display_main();
 8004b3c:	f7ff f90e 	bl	8003d5c <display_main>
 8004b40:	e017      	b.n	8004b72 <handle_back_button_press+0x152>
       }
       else if (LCD_adc.demtong == 3 && LCD_adc.demmenu_4 >= 1) // From select_menu4 back to menu_4
 8004b42:	4b0d      	ldr	r3, [pc, #52]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d113      	bne.n	8004b72 <handle_back_button_press+0x152>
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	dd0f      	ble.n	8004b72 <handle_back_button_press+0x152>
       {
           LCD_adc.demback = 0;
 8004b52:	4b09      	ldr	r3, [pc, #36]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	611a      	str	r2, [r3, #16]
           LCD_adc.demtong = 2;
 8004b58:	4b07      	ldr	r3, [pc, #28]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	60da      	str	r2, [r3, #12]
           LCD_adc.selected_menu4_item = 0;
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	619a      	str	r2, [r3, #24]
           menu_4();
 8004b64:	f7ff fcc2 	bl	80044ec <menu_4>
    }
    else
    {
       LCD_adc.demback = 0;
    }
}
 8004b68:	e003      	b.n	8004b72 <handle_back_button_press+0x152>
       LCD_adc.demback = 0;
 8004b6a:	4b03      	ldr	r3, [pc, #12]	@ (8004b78 <handle_back_button_press+0x158>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	611a      	str	r2, [r3, #16]
}
 8004b70:	e7ff      	b.n	8004b72 <handle_back_button_press+0x152>
 8004b72:	bf00      	nop
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	200008bc 	.word	0x200008bc

08004b7c <handle_select_button_press>:

void handle_select_button_press(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
    LCD_adc.demtong += 1;
 8004b80:	4b3c      	ldr	r3, [pc, #240]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	3301      	adds	r3, #1
 8004b86:	4a3b      	ldr	r2, [pc, #236]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004b88:	60d3      	str	r3, [r2, #12]
    if (LCD_adc.demtong == 1) // in menu_main
 8004b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d105      	bne.n	8004b9e <handle_select_button_press+0x22>
    {
       LCD_adc.demback = 0;
 8004b92:	4b38      	ldr	r3, [pc, #224]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	611a      	str	r2, [r3, #16]
       display_main();
 8004b98:	f7ff f8e0 	bl	8003d5c <display_main>
    else if (LCD_adc.demtong > 3)
    {
       LCD_adc.demtong = 3;
       LCD_adc.demback = 0;
    }
}
 8004b9c:	e068      	b.n	8004c70 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 0) // choose menu 1
 8004b9e:	4b35      	ldr	r3, [pc, #212]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d109      	bne.n	8004bba <handle_select_button_press+0x3e>
 8004ba6:	4b33      	ldr	r3, [pc, #204]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d105      	bne.n	8004bba <handle_select_button_press+0x3e>
       LCD_adc.demback = 0;
 8004bae:	4b31      	ldr	r3, [pc, #196]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	611a      	str	r2, [r3, #16]
       menu_1();
 8004bb4:	f7ff f974 	bl	8003ea0 <menu_1>
 8004bb8:	e05a      	b.n	8004c70 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 1) // choose menu 2
 8004bba:	4b2e      	ldr	r3, [pc, #184]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d109      	bne.n	8004bd6 <handle_select_button_press+0x5a>
 8004bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d105      	bne.n	8004bd6 <handle_select_button_press+0x5a>
       LCD_adc.demback = 0;
 8004bca:	4b2a      	ldr	r3, [pc, #168]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	611a      	str	r2, [r3, #16]
       menu_2();
 8004bd0:	f7ff fa54 	bl	800407c <menu_2>
 8004bd4:	e04c      	b.n	8004c70 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 2) // In menu 3
 8004bd6:	4b27      	ldr	r3, [pc, #156]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d10e      	bne.n	8004bfc <handle_select_button_press+0x80>
 8004bde:	4b25      	ldr	r3, [pc, #148]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d10a      	bne.n	8004bfc <handle_select_button_press+0x80>
       LCD_adc.demback = 0;
 8004be6:	4b23      	ldr	r3, [pc, #140]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	611a      	str	r2, [r3, #16]
       menu_3();
 8004bec:	f7ff faea 	bl	80041c4 <menu_3>
       LCD_adc.demmenu_3 += 1;
 8004bf0:	4b20      	ldr	r3, [pc, #128]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004bf8:	61d3      	str	r3, [r2, #28]
 8004bfa:	e039      	b.n	8004c70 <handle_select_button_press+0xf4>
    else if(LCD_adc.demtong == 3 && LCD_adc.demmenu_3 == 1)//choose menu 3
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d109      	bne.n	8004c18 <handle_select_button_press+0x9c>
 8004c04:	4b1b      	ldr	r3, [pc, #108]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d105      	bne.n	8004c18 <handle_select_button_press+0x9c>
        LCD_adc.demback = 0;
 8004c0c:	4b19      	ldr	r3, [pc, #100]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	611a      	str	r2, [r3, #16]
       select_menu3();
 8004c12:	f7ff fb3d 	bl	8004290 <select_menu3>
 8004c16:	e02b      	b.n	8004c70 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong == 2 && LCD_adc.menu_main == 3) // In menu 4
 8004c18:	4b16      	ldr	r3, [pc, #88]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d10e      	bne.n	8004c3e <handle_select_button_press+0xc2>
 8004c20:	4b14      	ldr	r3, [pc, #80]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d10a      	bne.n	8004c3e <handle_select_button_press+0xc2>
       LCD_adc.demback = 0;
 8004c28:	4b12      	ldr	r3, [pc, #72]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	611a      	str	r2, [r3, #16]
       menu_4();
 8004c2e:	f7ff fc5d 	bl	80044ec <menu_4>
       LCD_adc.demmenu_4 += 1;
 8004c32:	4b10      	ldr	r3, [pc, #64]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	3301      	adds	r3, #1
 8004c38:	4a0e      	ldr	r2, [pc, #56]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004c3a:	6213      	str	r3, [r2, #32]
 8004c3c:	e018      	b.n	8004c70 <handle_select_button_press+0xf4>
    else if(LCD_adc.demtong == 3 && LCD_adc.demmenu_4 == 1)//choose menu 4
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d109      	bne.n	8004c5a <handle_select_button_press+0xde>
 8004c46:	4b0b      	ldr	r3, [pc, #44]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d105      	bne.n	8004c5a <handle_select_button_press+0xde>
       LCD_adc.demback = 0;
 8004c4e:	4b09      	ldr	r3, [pc, #36]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	611a      	str	r2, [r3, #16]
       select_menu4();
 8004c54:	f7ff fc86 	bl	8004564 <select_menu4>
 8004c58:	e00a      	b.n	8004c70 <handle_select_button_press+0xf4>
    else if (LCD_adc.demtong > 3)
 8004c5a:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	dd06      	ble.n	8004c70 <handle_select_button_press+0xf4>
       LCD_adc.demtong = 3;
 8004c62:	4b04      	ldr	r3, [pc, #16]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004c64:	2203      	movs	r2, #3
 8004c66:	60da      	str	r2, [r3, #12]
       LCD_adc.demback = 0;
 8004c68:	4b02      	ldr	r3, [pc, #8]	@ (8004c74 <handle_select_button_press+0xf8>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	611a      	str	r2, [r3, #16]
}
 8004c6e:	e7ff      	b.n	8004c70 <handle_select_button_press+0xf4>
 8004c70:	bf00      	nop
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	200008bc 	.word	0x200008bc

08004c78 <handle_reset_button_press>:

void handle_reset_button_press(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
    if (state.reset_press == 1)
 8004c7c:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <handle_reset_button_press+0x1c>)
 8004c7e:	789b      	ldrb	r3, [r3, #2]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d104      	bne.n	8004c90 <handle_reset_button_press+0x18>
    {
        resetProgram();
 8004c86:	f000 f849 	bl	8004d1c <resetProgram>
        // when reseted, restarted again
        state.reset_press = 0;
 8004c8a:	4b02      	ldr	r3, [pc, #8]	@ (8004c94 <handle_reset_button_press+0x1c>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	709a      	strb	r2, [r3, #2]
    }
}
 8004c90:	bf00      	nop
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20000a28 	.word	0x20000a28

08004c98 <handle_start_button_press>:

void handle_start_button_press(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
    if (state.reset_press == 0)
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd4 <handle_start_button_press+0x3c>)
 8004c9e:	789b      	ldrb	r3, [r3, #2]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d113      	bne.n	8004cce <handle_start_button_press+0x36>
    {
    	state.start_press = 1;
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <handle_start_button_press+0x3c>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	701a      	strb	r2, [r3, #0]
    	state.stop_press = 0;
 8004cac:	4b09      	ldr	r3, [pc, #36]	@ (8004cd4 <handle_start_button_press+0x3c>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	705a      	strb	r2, [r3, #1]
        HAL_GPIO_WritePin(drill_port, drill_pin, 1);
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004cb8:	4807      	ldr	r0, [pc, #28]	@ (8004cd8 <handle_start_button_press+0x40>)
 8004cba:	f002 fb41 	bl	8007340 <HAL_GPIO_WritePin>
    	HAL_UART_Transmit(&huart2, (uint8_t*)"IP\n", 3, 10);
 8004cbe:	230a      	movs	r3, #10
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	4906      	ldr	r1, [pc, #24]	@ (8004cdc <handle_start_button_press+0x44>)
 8004cc4:	4806      	ldr	r0, [pc, #24]	@ (8004ce0 <handle_start_button_press+0x48>)
 8004cc6:	f005 feb3 	bl	800aa30 <HAL_UART_Transmit>
    	StartProgram();
 8004cca:	f000 f935 	bl	8004f38 <StartProgram>
    }
}
 8004cce:	bf00      	nop
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000a28 	.word	0x20000a28
 8004cd8:	40020400 	.word	0x40020400
 8004cdc:	080159fc 	.word	0x080159fc
 8004ce0:	20000be8 	.word	0x20000be8

08004ce4 <handle_stop_button_press>:

void handle_stop_button_press(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
    if (state.reset_press == 0)
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d14 <handle_stop_button_press+0x30>)
 8004cea:	789b      	ldrb	r3, [r3, #2]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10d      	bne.n	8004d0e <handle_stop_button_press+0x2a>
    {
    	state.stop_press = 1;
 8004cf2:	4b08      	ldr	r3, [pc, #32]	@ (8004d14 <handle_stop_button_press+0x30>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	705a      	strb	r2, [r3, #1]
        HAL_GPIO_WritePin(drill_port, drill_pin, 0);
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004cfe:	4806      	ldr	r0, [pc, #24]	@ (8004d18 <handle_stop_button_press+0x34>)
 8004d00:	f002 fb1e 	bl	8007340 <HAL_GPIO_WritePin>
        StopProgram();
 8004d04:	f000 f900 	bl	8004f08 <StopProgram>
        // Sau khi dừng, chỉ cho phép nhấn nút reset
        state.reset_press = 1;
 8004d08:	4b02      	ldr	r3, [pc, #8]	@ (8004d14 <handle_stop_button_press+0x30>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	709a      	strb	r2, [r3, #2]
    }
}
 8004d0e:	bf00      	nop
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000a28 	.word	0x20000a28
 8004d18:	40020400 	.word	0x40020400

08004d1c <resetProgram>:

void resetProgram(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
	state.start_press = 0;
 8004d20:	4b6e      	ldr	r3, [pc, #440]	@ (8004edc <resetProgram+0x1c0>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]
	state.stop_press = 1;
 8004d26:	4b6d      	ldr	r3, [pc, #436]	@ (8004edc <resetProgram+0x1c0>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	705a      	strb	r2, [r3, #1]
    // reset var
    lcd_clear();
 8004d2c:	f7fe fa0a 	bl	8003144 <lcd_clear>
    lcd_put_cur(1, 2);
 8004d30:	2102      	movs	r1, #2
 8004d32:	2001      	movs	r0, #1
 8004d34:	f7fe fa1e 	bl	8003174 <lcd_put_cur>
    lcd_send_string("PROGRAM RESETING");
 8004d38:	4869      	ldr	r0, [pc, #420]	@ (8004ee0 <resetProgram+0x1c4>)
 8004d3a:	f7fe fa6d 	bl	8003218 <lcd_send_string>
    LCD_adc.demtong = 0;
 8004d3e:	4b69      	ldr	r3, [pc, #420]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	60da      	str	r2, [r3, #12]
    LCD_adc.demback = 0;
 8004d44:	4b67      	ldr	r3, [pc, #412]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	611a      	str	r2, [r3, #16]
    LCD_adc.menu_main = 0;
 8004d4a:	4b66      	ldr	r3, [pc, #408]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
    LCD_adc.selected_menu3_item = 0;
 8004d50:	4b64      	ldr	r3, [pc, #400]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	615a      	str	r2, [r3, #20]
    LCD_adc.selected_menu4_item = 0;
 8004d56:	4b63      	ldr	r3, [pc, #396]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	619a      	str	r2, [r3, #24]
    LCD_adc.demmenu_3 = 0;
 8004d5c:	4b61      	ldr	r3, [pc, #388]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	61da      	str	r2, [r3, #28]
    LCD_adc.demmenu_4 = 0;
 8004d62:	4b60      	ldr	r3, [pc, #384]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	621a      	str	r2, [r3, #32]
    LCD_adc.typeX_value = 0;
 8004d68:	4b5e      	ldr	r3, [pc, #376]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	625a      	str	r2, [r3, #36]	@ 0x24
    LCD_adc.typeY_value = 0;
 8004d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	629a      	str	r2, [r3, #40]	@ 0x28
    LCD_adc.typeZ_value = 0;
 8004d74:	4b5b      	ldr	r3, [pc, #364]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	62da      	str	r2, [r3, #44]	@ 0x2c
    LCD_adc.speed_valueXY = 0;
 8004d7a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	@ 0x30
    LCD_adc.speed_valueZ = 0;
 8004d80:	4b58      	ldr	r3, [pc, #352]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	635a      	str	r2, [r3, #52]	@ 0x34
    LCD_adc.voltage = 0;
 8004d86:	4b57      	ldr	r3, [pc, #348]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    LCD_adc.current = 0;
 8004d8e:	4b55      	ldr	r3, [pc, #340]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	651a      	str	r2, [r3, #80]	@ 0x50
    LCD_adc.power = 0;
 8004d96:	4b53      	ldr	r3, [pc, #332]	@ (8004ee4 <resetProgram+0x1c8>)
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    LCD_adc.temp = 0;
 8004d9e:	4b51      	ldr	r3, [pc, #324]	@ (8004ee4 <resetProgram+0x1c8>)
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	659a      	str	r2, [r3, #88]	@ 0x58
    Stepper1.accel_count = 0;
 8004da6:	4950      	ldr	r1, [pc, #320]	@ (8004ee8 <resetProgram+0x1cc>)
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Stepper2.accel_count = 0;
 8004db4:	494d      	ldr	r1, [pc, #308]	@ (8004eec <resetProgram+0x1d0>)
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Stepper3.accel_count = 0;
 8004dc2:	494b      	ldr	r1, [pc, #300]	@ (8004ef0 <resetProgram+0x1d4>)
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    CNC_pos.x = 0;
 8004dd0:	4b48      	ldr	r3, [pc, #288]	@ (8004ef4 <resetProgram+0x1d8>)
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	609a      	str	r2, [r3, #8]
    CNC_pos.y = 0;
 8004dd8:	4b46      	ldr	r3, [pc, #280]	@ (8004ef4 <resetProgram+0x1d8>)
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	60da      	str	r2, [r3, #12]
    CNC_pos.z = 0;
 8004de0:	4b44      	ldr	r3, [pc, #272]	@ (8004ef4 <resetProgram+0x1d8>)
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	611a      	str	r2, [r3, #16]
    CNC_pos.MoveX = 0;
 8004de8:	4942      	ldr	r1, [pc, #264]	@ (8004ef4 <resetProgram+0x1d8>)
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    CNC_pos.MoveY = 0;
 8004df6:	493f      	ldr	r1, [pc, #252]	@ (8004ef4 <resetProgram+0x1d8>)
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	e9c1 2308 	strd	r2, r3, [r1, #32]
    CNC_pos.MoveZ = 0;
 8004e04:	493b      	ldr	r1, [pc, #236]	@ (8004ef4 <resetProgram+0x1d8>)
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    CNC.pos_x = 0;
 8004e12:	4939      	ldr	r1, [pc, #228]	@ (8004ef8 <resetProgram+0x1dc>)
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    CNC.pos_y = 0;
 8004e20:	4935      	ldr	r1, [pc, #212]	@ (8004ef8 <resetProgram+0x1dc>)
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    CNC.pos_z = 0;
 8004e2e:	4932      	ldr	r1, [pc, #200]	@ (8004ef8 <resetProgram+0x1dc>)
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    CNC.set_posX = 0;
 8004e3c:	492e      	ldr	r1, [pc, #184]	@ (8004ef8 <resetProgram+0x1dc>)
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	e9c1 2300 	strd	r2, r3, [r1]
    CNC.set_posY = 0;
 8004e4a:	492b      	ldr	r1, [pc, #172]	@ (8004ef8 <resetProgram+0x1dc>)
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	e9c1 2302 	strd	r2, r3, [r1, #8]
    CNC.set_posZ = 0;
 8004e58:	4927      	ldr	r1, [pc, #156]	@ (8004ef8 <resetProgram+0x1dc>)
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	e9c1 2304 	strd	r2, r3, [r1, #16]

    __HAL_TIM_SET_AUTORELOAD(Stepper1.htim, 1000);
 8004e66:	4b20      	ldr	r3, [pc, #128]	@ (8004ee8 <resetProgram+0x1cc>)
 8004e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004e72:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee8 <resetProgram+0x1cc>)
 8004e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e7a:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_AUTORELOAD(Stepper2.htim, 1000);
 8004e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004eec <resetProgram+0x1d0>)
 8004e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e86:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004e88:	4b18      	ldr	r3, [pc, #96]	@ (8004eec <resetProgram+0x1d0>)
 8004e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e90:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_AUTORELOAD(Stepper3.htim, 1000);
 8004e92:	4b17      	ldr	r3, [pc, #92]	@ (8004ef0 <resetProgram+0x1d4>)
 8004e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004e9e:	4b14      	ldr	r3, [pc, #80]	@ (8004ef0 <resetProgram+0x1d4>)
 8004ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ea6:	60da      	str	r2, [r3, #12]
    // Reset hardware
    initialize_LCD(&LCD_adc);
 8004ea8:	480e      	ldr	r0, [pc, #56]	@ (8004ee4 <resetProgram+0x1c8>)
 8004eaa:	f7fe fa97 	bl	80033dc <initialize_LCD>
    initialize_Kalman(&kalman_fil_curr);
 8004eae:	4813      	ldr	r0, [pc, #76]	@ (8004efc <resetProgram+0x1e0>)
 8004eb0:	f7fe fac0 	bl	8003434 <initialize_Kalman>
    initialize_Kalman(&kalman_fil_volt);
 8004eb4:	4812      	ldr	r0, [pc, #72]	@ (8004f00 <resetProgram+0x1e4>)
 8004eb6:	f7fe fabd 	bl	8003434 <initialize_Kalman>
    initializeCNC_pos(&CNC_pos);
 8004eba:	480e      	ldr	r0, [pc, #56]	@ (8004ef4 <resetProgram+0x1d8>)
 8004ebc:	f7fc fd48 	bl	8001950 <initializeCNC_pos>
    // add code here
    /*
     * code here
     *
     * */
    HOME();
 8004ec0:	f7fd fae6 	bl	8002490 <HOME>
    // Start display lcd
    lcd_clear();
 8004ec4:	f7fe f93e 	bl	8003144 <lcd_clear>
    lcd_put_cur(1, 2);
 8004ec8:	2102      	movs	r1, #2
 8004eca:	2001      	movs	r0, #1
 8004ecc:	f7fe f952 	bl	8003174 <lcd_put_cur>
    lcd_send_string("PROGRAM  RESETED");
 8004ed0:	480c      	ldr	r0, [pc, #48]	@ (8004f04 <resetProgram+0x1e8>)
 8004ed2:	f7fe f9a1 	bl	8003218 <lcd_send_string>
}
 8004ed6:	bf00      	nop
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000a28 	.word	0x20000a28
 8004ee0:	08015a00 	.word	0x08015a00
 8004ee4:	200008bc 	.word	0x200008bc
 8004ee8:	200002b0 	.word	0x200002b0
 8004eec:	20000310 	.word	0x20000310
 8004ef0:	20000370 	.word	0x20000370
 8004ef4:	20000778 	.word	0x20000778
 8004ef8:	20000838 	.word	0x20000838
 8004efc:	20000988 	.word	0x20000988
 8004f00:	200009d8 	.word	0x200009d8
 8004f04:	08015a14 	.word	0x08015a14

08004f08 <StopProgram>:

void StopProgram(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
	state.start_press = 0;
 8004f0c:	4b08      	ldr	r3, [pc, #32]	@ (8004f30 <StopProgram+0x28>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]
    lcd_clear();
 8004f12:	f7fe f917 	bl	8003144 <lcd_clear>
    lcd_put_cur(1, 2);
 8004f16:	2102      	movs	r1, #2
 8004f18:	2001      	movs	r0, #1
 8004f1a:	f7fe f92b 	bl	8003174 <lcd_put_cur>
    lcd_send_string("PROGRAM  STOPPED");
 8004f1e:	4805      	ldr	r0, [pc, #20]	@ (8004f34 <StopProgram+0x2c>)
 8004f20:	f7fe f97a 	bl	8003218 <lcd_send_string>
    lcd_put_cur(3, 0);
 8004f24:	2100      	movs	r1, #0
 8004f26:	2003      	movs	r0, #3
 8004f28:	f7fe f924 	bl	8003174 <lcd_put_cur>
}
 8004f2c:	bf00      	nop
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20000a28 	.word	0x20000a28
 8004f34:	08015a28 	.word	0x08015a28

08004f38 <StartProgram>:

void StartProgram(void){
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
    lcd_clear();
 8004f3c:	f7fe f902 	bl	8003144 <lcd_clear>
    lcd_put_cur(1, 3);
 8004f40:	2103      	movs	r1, #3
 8004f42:	2001      	movs	r0, #1
 8004f44:	f7fe f916 	bl	8003174 <lcd_put_cur>
    lcd_send_string("PROGRAM  START");
 8004f48:	4809      	ldr	r0, [pc, #36]	@ (8004f70 <StartProgram+0x38>)
 8004f4a:	f7fe f965 	bl	8003218 <lcd_send_string>
    lcd_put_cur(2, 0);
 8004f4e:	2100      	movs	r1, #0
 8004f50:	2002      	movs	r0, #2
 8004f52:	f7fe f90f 	bl	8003174 <lcd_put_cur>
    lcd_send_string("IP ADD:");
 8004f56:	4807      	ldr	r0, [pc, #28]	@ (8004f74 <StartProgram+0x3c>)
 8004f58:	f7fe f95e 	bl	8003218 <lcd_send_string>
    lcd_put_cur(2, 7);
 8004f5c:	2107      	movs	r1, #7
 8004f5e:	2002      	movs	r0, #2
 8004f60:	f7fe f908 	bl	8003174 <lcd_put_cur>
    lcd_send_string(ip_config);
 8004f64:	4804      	ldr	r0, [pc, #16]	@ (8004f78 <StartProgram+0x40>)
 8004f66:	f7fe f957 	bl	8003218 <lcd_send_string>
}
 8004f6a:	bf00      	nop
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	08015a3c 	.word	0x08015a3c
 8004f74:	08015a4c 	.word	0x08015a4c
 8004f78:	20000730 	.word	0x20000730

08004f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f82:	2300      	movs	r3, #0
 8004f84:	607b      	str	r3, [r7, #4]
 8004f86:	4b16      	ldr	r3, [pc, #88]	@ (8004fe0 <HAL_MspInit+0x64>)
 8004f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8a:	4a15      	ldr	r2, [pc, #84]	@ (8004fe0 <HAL_MspInit+0x64>)
 8004f8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f92:	4b13      	ldr	r3, [pc, #76]	@ (8004fe0 <HAL_MspInit+0x64>)
 8004f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f9a:	607b      	str	r3, [r7, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	603b      	str	r3, [r7, #0]
 8004fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe0 <HAL_MspInit+0x64>)
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe0 <HAL_MspInit+0x64>)
 8004fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fae:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe0 <HAL_MspInit+0x64>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fba:	2200      	movs	r2, #0
 8004fbc:	210f      	movs	r1, #15
 8004fbe:	f06f 0001 	mvn.w	r0, #1
 8004fc2:	f001 fbc2 	bl	800674a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2105      	movs	r1, #5
 8004fca:	2001      	movs	r0, #1
 8004fcc:	f001 fbbd 	bl	800674a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8004fd0:	2001      	movs	r0, #1
 8004fd2:	f001 fbd6 	bl	8006782 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fd6:	bf00      	nop
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40023800 	.word	0x40023800

08004fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004fe8:	bf00      	nop
 8004fea:	e7fd      	b.n	8004fe8 <NMI_Handler+0x4>

08004fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ff0:	bf00      	nop
 8004ff2:	e7fd      	b.n	8004ff0 <HardFault_Handler+0x4>

08004ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ff8:	bf00      	nop
 8004ffa:	e7fd      	b.n	8004ff8 <MemManage_Handler+0x4>

08004ffc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005000:	bf00      	nop
 8005002:	e7fd      	b.n	8005000 <BusFault_Handler+0x4>

08005004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005008:	bf00      	nop
 800500a:	e7fd      	b.n	8005008 <UsageFault_Handler+0x4>

0800500c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005010:	bf00      	nop
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800501e:	f000 fd3d 	bl	8005a9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005022:	f009 f9dd 	bl	800e3e0 <xTaskGetSchedulerState>
 8005026:	4603      	mov	r3, r0
 8005028:	2b01      	cmp	r3, #1
 800502a:	d001      	beq.n	8005030 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800502c:	f00a f8d4 	bl	800f1d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005030:	bf00      	nop
 8005032:	bd80      	pop	{r7, pc}

08005034 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8005038:	f004 fb54 	bl	80096e4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800503c:	bf00      	nop
 800503e:	bd80      	pop	{r7, pc}

08005040 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005044:	2010      	movs	r0, #16
 8005046:	f002 f9af 	bl	80073a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800504a:	bf00      	nop
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005054:	4802      	ldr	r0, [pc, #8]	@ (8005060 <DMA1_Stream5_IRQHandler+0x10>)
 8005056:	f001 fd47 	bl	8006ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800505a:	bf00      	nop
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000c30 	.word	0x20000c30

08005064 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005068:	4802      	ldr	r0, [pc, #8]	@ (8005074 <ADC_IRQHandler+0x10>)
 800506a:	f000 ff2f 	bl	8005ecc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800506e:	bf00      	nop
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	200003d0 	.word	0x200003d0

08005078 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800507c:	2040      	movs	r0, #64	@ 0x40
 800507e:	f002 f993 	bl	80073a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005082:	2080      	movs	r0, #128	@ 0x80
 8005084:	f002 f990 	bl	80073a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005088:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800508c:	f002 f98c 	bl	80073a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005090:	bf00      	nop
 8005092:	bd80      	pop	{r7, pc}

08005094 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005098:	4802      	ldr	r0, [pc, #8]	@ (80050a4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800509a:	f005 f8c4 	bl	800a226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800509e:	bf00      	nop
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20000a38 	.word	0x20000a38

080050a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80050ac:	4802      	ldr	r0, [pc, #8]	@ (80050b8 <TIM2_IRQHandler+0x10>)
 80050ae:	f005 f8ba 	bl	800a226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80050b2:	bf00      	nop
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20000a80 	.word	0x20000a80

080050bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80050c0:	4802      	ldr	r0, [pc, #8]	@ (80050cc <TIM3_IRQHandler+0x10>)
 80050c2:	f005 f8b0 	bl	800a226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80050c6:	bf00      	nop
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000ac8 	.word	0x20000ac8

080050d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80050d4:	4802      	ldr	r0, [pc, #8]	@ (80050e0 <TIM4_IRQHandler+0x10>)
 80050d6:	f005 f8a6 	bl	800a226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80050da:	bf00      	nop
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000b10 	.word	0x20000b10

080050e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80050e8:	4802      	ldr	r0, [pc, #8]	@ (80050f4 <I2C1_EV_IRQHandler+0x10>)
 80050ea:	f002 fbcd 	bl	8007888 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80050ee:	bf00      	nop
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000868 	.word	0x20000868

080050f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80050fc:	4802      	ldr	r0, [pc, #8]	@ (8005108 <I2C1_ER_IRQHandler+0x10>)
 80050fe:	f002 fd16 	bl	8007b2e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005102:	bf00      	nop
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20000868 	.word	0x20000868

0800510c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005110:	4802      	ldr	r0, [pc, #8]	@ (800511c <USART2_IRQHandler+0x10>)
 8005112:	f005 fde3 	bl	800acdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005116:	bf00      	nop
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000be8 	.word	0x20000be8

08005120 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005124:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005128:	f002 f93e 	bl	80073a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800512c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005130:	f002 f93a 	bl	80073a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005134:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005138:	f002 f936 	bl	80073a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800513c:	bf00      	nop
 800513e:	bd80      	pop	{r7, pc}

08005140 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005144:	4802      	ldr	r0, [pc, #8]	@ (8005150 <TIM5_IRQHandler+0x10>)
 8005146:	f005 f86e 	bl	800a226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000b58 	.word	0x20000b58

08005154 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005158:	4802      	ldr	r0, [pc, #8]	@ (8005164 <TIM6_DAC_IRQHandler+0x10>)
 800515a:	f005 f864 	bl	800a226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000ba0 	.word	0x20000ba0

08005168 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800516c:	4802      	ldr	r0, [pc, #8]	@ (8005178 <DMA2_Stream0_IRQHandler+0x10>)
 800516e:	f001 fcbb 	bl	8006ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005172:	bf00      	nop
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000418 	.word	0x20000418

0800517c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  return 1;
 8005180:	2301      	movs	r3, #1
}
 8005182:	4618      	mov	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <_kill>:

int _kill(int pid, int sig)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005196:	f00b fc9d 	bl	8010ad4 <__errno>
 800519a:	4603      	mov	r3, r0
 800519c:	2216      	movs	r2, #22
 800519e:	601a      	str	r2, [r3, #0]
  return -1;
 80051a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <_exit>:

void _exit (int status)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80051b4:	f04f 31ff 	mov.w	r1, #4294967295
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff ffe7 	bl	800518c <_kill>
  while (1) {}    /* Make sure we hang here */
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <_exit+0x12>

080051c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b086      	sub	sp, #24
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	e00a      	b.n	80051ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80051d4:	f3af 8000 	nop.w
 80051d8:	4601      	mov	r1, r0
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	60ba      	str	r2, [r7, #8]
 80051e0:	b2ca      	uxtb	r2, r1
 80051e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	3301      	adds	r3, #1
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	dbf0      	blt.n	80051d4 <_read+0x12>
  }

  return len;
 80051f2:	687b      	ldr	r3, [r7, #4]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005224:	605a      	str	r2, [r3, #4]
  return 0;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <_isatty>:

int _isatty(int file)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800523c:	2301      	movs	r3, #1
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800526c:	4a14      	ldr	r2, [pc, #80]	@ (80052c0 <_sbrk+0x5c>)
 800526e:	4b15      	ldr	r3, [pc, #84]	@ (80052c4 <_sbrk+0x60>)
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005278:	4b13      	ldr	r3, [pc, #76]	@ (80052c8 <_sbrk+0x64>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d102      	bne.n	8005286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005280:	4b11      	ldr	r3, [pc, #68]	@ (80052c8 <_sbrk+0x64>)
 8005282:	4a12      	ldr	r2, [pc, #72]	@ (80052cc <_sbrk+0x68>)
 8005284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005286:	4b10      	ldr	r3, [pc, #64]	@ (80052c8 <_sbrk+0x64>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4413      	add	r3, r2
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	429a      	cmp	r2, r3
 8005292:	d207      	bcs.n	80052a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005294:	f00b fc1e 	bl	8010ad4 <__errno>
 8005298:	4603      	mov	r3, r0
 800529a:	220c      	movs	r2, #12
 800529c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800529e:	f04f 33ff 	mov.w	r3, #4294967295
 80052a2:	e009      	b.n	80052b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052a4:	4b08      	ldr	r3, [pc, #32]	@ (80052c8 <_sbrk+0x64>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052aa:	4b07      	ldr	r3, [pc, #28]	@ (80052c8 <_sbrk+0x64>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	4a05      	ldr	r2, [pc, #20]	@ (80052c8 <_sbrk+0x64>)
 80052b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052b6:	68fb      	ldr	r3, [r7, #12]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20020000 	.word	0x20020000
 80052c4:	00000400 	.word	0x00000400
 80052c8:	20000a34 	.word	0x20000a34
 80052cc:	20005730 	.word	0x20005730

080052d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052d4:	4b06      	ldr	r3, [pc, #24]	@ (80052f0 <SystemInit+0x20>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052da:	4a05      	ldr	r2, [pc, #20]	@ (80052f0 <SystemInit+0x20>)
 80052dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	e000ed00 	.word	0xe000ed00

080052f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052fa:	f107 0308 	add.w	r3, r7, #8
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	605a      	str	r2, [r3, #4]
 8005304:	609a      	str	r2, [r3, #8]
 8005306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005308:	463b      	mov	r3, r7
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005310:	4b1e      	ldr	r3, [pc, #120]	@ (800538c <MX_TIM1_Init+0x98>)
 8005312:	4a1f      	ldr	r2, [pc, #124]	@ (8005390 <MX_TIM1_Init+0x9c>)
 8005314:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8005316:	4b1d      	ldr	r3, [pc, #116]	@ (800538c <MX_TIM1_Init+0x98>)
 8005318:	2253      	movs	r2, #83	@ 0x53
 800531a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800531c:	4b1b      	ldr	r3, [pc, #108]	@ (800538c <MX_TIM1_Init+0x98>)
 800531e:	2200      	movs	r2, #0
 8005320:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8005322:	4b1a      	ldr	r3, [pc, #104]	@ (800538c <MX_TIM1_Init+0x98>)
 8005324:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005328:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800532a:	4b18      	ldr	r3, [pc, #96]	@ (800538c <MX_TIM1_Init+0x98>)
 800532c:	2200      	movs	r2, #0
 800532e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005330:	4b16      	ldr	r3, [pc, #88]	@ (800538c <MX_TIM1_Init+0x98>)
 8005332:	2200      	movs	r2, #0
 8005334:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005336:	4b15      	ldr	r3, [pc, #84]	@ (800538c <MX_TIM1_Init+0x98>)
 8005338:	2280      	movs	r2, #128	@ 0x80
 800533a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800533c:	4813      	ldr	r0, [pc, #76]	@ (800538c <MX_TIM1_Init+0x98>)
 800533e:	f004 fe83 	bl	800a048 <HAL_TIM_Base_Init>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8005348:	f7fe f842 	bl	80033d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800534c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005350:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005352:	f107 0308 	add.w	r3, r7, #8
 8005356:	4619      	mov	r1, r3
 8005358:	480c      	ldr	r0, [pc, #48]	@ (800538c <MX_TIM1_Init+0x98>)
 800535a:	f005 f854 	bl	800a406 <HAL_TIM_ConfigClockSource>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8005364:	f7fe f834 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005368:	2300      	movs	r3, #0
 800536a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800536c:	2300      	movs	r3, #0
 800536e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005370:	463b      	mov	r3, r7
 8005372:	4619      	mov	r1, r3
 8005374:	4805      	ldr	r0, [pc, #20]	@ (800538c <MX_TIM1_Init+0x98>)
 8005376:	f005 fa7b 	bl	800a870 <HAL_TIMEx_MasterConfigSynchronization>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005380:	f7fe f826 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005384:	bf00      	nop
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000a38 	.word	0x20000a38
 8005390:	40010000 	.word	0x40010000

08005394 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800539a:	f107 0308 	add.w	r3, r7, #8
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	605a      	str	r2, [r3, #4]
 80053a4:	609a      	str	r2, [r3, #8]
 80053a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053a8:	463b      	mov	r3, r7
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80053b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80053b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80053b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053ba:	22a7      	movs	r2, #167	@ 0xa7
 80053bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053be:	4b1a      	ldr	r3, [pc, #104]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80053c4:	4b18      	ldr	r3, [pc, #96]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80053ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053cc:	4b16      	ldr	r3, [pc, #88]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80053d2:	4b15      	ldr	r3, [pc, #84]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053d4:	2280      	movs	r2, #128	@ 0x80
 80053d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80053d8:	4813      	ldr	r0, [pc, #76]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053da:	f004 fe35 	bl	800a048 <HAL_TIM_Base_Init>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80053e4:	f7fd fff4 	bl	80033d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80053ee:	f107 0308 	add.w	r3, r7, #8
 80053f2:	4619      	mov	r1, r3
 80053f4:	480c      	ldr	r0, [pc, #48]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053f6:	f005 f806 	bl	800a406 <HAL_TIM_ConfigClockSource>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005400:	f7fd ffe6 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005404:	2300      	movs	r3, #0
 8005406:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005408:	2300      	movs	r3, #0
 800540a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800540c:	463b      	mov	r3, r7
 800540e:	4619      	mov	r1, r3
 8005410:	4805      	ldr	r0, [pc, #20]	@ (8005428 <MX_TIM2_Init+0x94>)
 8005412:	f005 fa2d 	bl	800a870 <HAL_TIMEx_MasterConfigSynchronization>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800541c:	f7fd ffd8 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005420:	bf00      	nop
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000a80 	.word	0x20000a80

0800542c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005432:	f107 0308 	add.w	r3, r7, #8
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	605a      	str	r2, [r3, #4]
 800543c:	609a      	str	r2, [r3, #8]
 800543e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005440:	463b      	mov	r3, r7
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005448:	4b1d      	ldr	r3, [pc, #116]	@ (80054c0 <MX_TIM3_Init+0x94>)
 800544a:	4a1e      	ldr	r2, [pc, #120]	@ (80054c4 <MX_TIM3_Init+0x98>)
 800544c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 800544e:	4b1c      	ldr	r3, [pc, #112]	@ (80054c0 <MX_TIM3_Init+0x94>)
 8005450:	22a7      	movs	r2, #167	@ 0xa7
 8005452:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005454:	4b1a      	ldr	r3, [pc, #104]	@ (80054c0 <MX_TIM3_Init+0x94>)
 8005456:	2200      	movs	r2, #0
 8005458:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800545a:	4b19      	ldr	r3, [pc, #100]	@ (80054c0 <MX_TIM3_Init+0x94>)
 800545c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005460:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005462:	4b17      	ldr	r3, [pc, #92]	@ (80054c0 <MX_TIM3_Init+0x94>)
 8005464:	2200      	movs	r2, #0
 8005466:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005468:	4b15      	ldr	r3, [pc, #84]	@ (80054c0 <MX_TIM3_Init+0x94>)
 800546a:	2280      	movs	r2, #128	@ 0x80
 800546c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800546e:	4814      	ldr	r0, [pc, #80]	@ (80054c0 <MX_TIM3_Init+0x94>)
 8005470:	f004 fdea 	bl	800a048 <HAL_TIM_Base_Init>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800547a:	f7fd ffa9 	bl	80033d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800547e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005482:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005484:	f107 0308 	add.w	r3, r7, #8
 8005488:	4619      	mov	r1, r3
 800548a:	480d      	ldr	r0, [pc, #52]	@ (80054c0 <MX_TIM3_Init+0x94>)
 800548c:	f004 ffbb 	bl	800a406 <HAL_TIM_ConfigClockSource>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8005496:	f7fd ff9b 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800549a:	2300      	movs	r3, #0
 800549c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800549e:	2300      	movs	r3, #0
 80054a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80054a2:	463b      	mov	r3, r7
 80054a4:	4619      	mov	r1, r3
 80054a6:	4806      	ldr	r0, [pc, #24]	@ (80054c0 <MX_TIM3_Init+0x94>)
 80054a8:	f005 f9e2 	bl	800a870 <HAL_TIMEx_MasterConfigSynchronization>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80054b2:	f7fd ff8d 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80054b6:	bf00      	nop
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000ac8 	.word	0x20000ac8
 80054c4:	40000400 	.word	0x40000400

080054c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054ce:	f107 0308 	add.w	r3, r7, #8
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	605a      	str	r2, [r3, #4]
 80054d8:	609a      	str	r2, [r3, #8]
 80054da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054dc:	463b      	mov	r3, r7
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80054e4:	4b1d      	ldr	r3, [pc, #116]	@ (800555c <MX_TIM4_Init+0x94>)
 80054e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005560 <MX_TIM4_Init+0x98>)
 80054e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80054ea:	4b1c      	ldr	r3, [pc, #112]	@ (800555c <MX_TIM4_Init+0x94>)
 80054ec:	2253      	movs	r2, #83	@ 0x53
 80054ee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054f0:	4b1a      	ldr	r3, [pc, #104]	@ (800555c <MX_TIM4_Init+0x94>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80054f6:	4b19      	ldr	r3, [pc, #100]	@ (800555c <MX_TIM4_Init+0x94>)
 80054f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054fc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054fe:	4b17      	ldr	r3, [pc, #92]	@ (800555c <MX_TIM4_Init+0x94>)
 8005500:	2200      	movs	r2, #0
 8005502:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005504:	4b15      	ldr	r3, [pc, #84]	@ (800555c <MX_TIM4_Init+0x94>)
 8005506:	2280      	movs	r2, #128	@ 0x80
 8005508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800550a:	4814      	ldr	r0, [pc, #80]	@ (800555c <MX_TIM4_Init+0x94>)
 800550c:	f004 fd9c 	bl	800a048 <HAL_TIM_Base_Init>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8005516:	f7fd ff5b 	bl	80033d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800551a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800551e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005520:	f107 0308 	add.w	r3, r7, #8
 8005524:	4619      	mov	r1, r3
 8005526:	480d      	ldr	r0, [pc, #52]	@ (800555c <MX_TIM4_Init+0x94>)
 8005528:	f004 ff6d 	bl	800a406 <HAL_TIM_ConfigClockSource>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8005532:	f7fd ff4d 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005536:	2300      	movs	r3, #0
 8005538:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800553a:	2300      	movs	r3, #0
 800553c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800553e:	463b      	mov	r3, r7
 8005540:	4619      	mov	r1, r3
 8005542:	4806      	ldr	r0, [pc, #24]	@ (800555c <MX_TIM4_Init+0x94>)
 8005544:	f005 f994 	bl	800a870 <HAL_TIMEx_MasterConfigSynchronization>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800554e:	f7fd ff3f 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005552:	bf00      	nop
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000b10 	.word	0x20000b10
 8005560:	40000800 	.word	0x40000800

08005564 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800556a:	f107 0308 	add.w	r3, r7, #8
 800556e:	2200      	movs	r2, #0
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	605a      	str	r2, [r3, #4]
 8005574:	609a      	str	r2, [r3, #8]
 8005576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005578:	463b      	mov	r3, r7
 800557a:	2200      	movs	r2, #0
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005580:	4b1d      	ldr	r3, [pc, #116]	@ (80055f8 <MX_TIM5_Init+0x94>)
 8005582:	4a1e      	ldr	r2, [pc, #120]	@ (80055fc <MX_TIM5_Init+0x98>)
 8005584:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8005586:	4b1c      	ldr	r3, [pc, #112]	@ (80055f8 <MX_TIM5_Init+0x94>)
 8005588:	2253      	movs	r2, #83	@ 0x53
 800558a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800558c:	4b1a      	ldr	r3, [pc, #104]	@ (80055f8 <MX_TIM5_Init+0x94>)
 800558e:	2200      	movs	r2, #0
 8005590:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8005592:	4b19      	ldr	r3, [pc, #100]	@ (80055f8 <MX_TIM5_Init+0x94>)
 8005594:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005598:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800559a:	4b17      	ldr	r3, [pc, #92]	@ (80055f8 <MX_TIM5_Init+0x94>)
 800559c:	2200      	movs	r2, #0
 800559e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055a0:	4b15      	ldr	r3, [pc, #84]	@ (80055f8 <MX_TIM5_Init+0x94>)
 80055a2:	2280      	movs	r2, #128	@ 0x80
 80055a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80055a6:	4814      	ldr	r0, [pc, #80]	@ (80055f8 <MX_TIM5_Init+0x94>)
 80055a8:	f004 fd4e 	bl	800a048 <HAL_TIM_Base_Init>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80055b2:	f7fd ff0d 	bl	80033d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80055ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80055bc:	f107 0308 	add.w	r3, r7, #8
 80055c0:	4619      	mov	r1, r3
 80055c2:	480d      	ldr	r0, [pc, #52]	@ (80055f8 <MX_TIM5_Init+0x94>)
 80055c4:	f004 ff1f 	bl	800a406 <HAL_TIM_ConfigClockSource>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80055ce:	f7fd feff 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055d2:	2300      	movs	r3, #0
 80055d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80055da:	463b      	mov	r3, r7
 80055dc:	4619      	mov	r1, r3
 80055de:	4806      	ldr	r0, [pc, #24]	@ (80055f8 <MX_TIM5_Init+0x94>)
 80055e0:	f005 f946 	bl	800a870 <HAL_TIMEx_MasterConfigSynchronization>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80055ea:	f7fd fef1 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80055ee:	bf00      	nop
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	20000b58 	.word	0x20000b58
 80055fc:	40000c00 	.word	0x40000c00

08005600 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM6_Init(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005606:	463b      	mov	r3, r7
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800560e:	4b15      	ldr	r3, [pc, #84]	@ (8005664 <MX_TIM6_Init+0x64>)
 8005610:	4a15      	ldr	r2, [pc, #84]	@ (8005668 <MX_TIM6_Init+0x68>)
 8005612:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8005614:	4b13      	ldr	r3, [pc, #76]	@ (8005664 <MX_TIM6_Init+0x64>)
 8005616:	2253      	movs	r2, #83	@ 0x53
 8005618:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800561a:	4b12      	ldr	r3, [pc, #72]	@ (8005664 <MX_TIM6_Init+0x64>)
 800561c:	2200      	movs	r2, #0
 800561e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8005620:	4b10      	ldr	r3, [pc, #64]	@ (8005664 <MX_TIM6_Init+0x64>)
 8005622:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005626:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005628:	4b0e      	ldr	r3, [pc, #56]	@ (8005664 <MX_TIM6_Init+0x64>)
 800562a:	2280      	movs	r2, #128	@ 0x80
 800562c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800562e:	480d      	ldr	r0, [pc, #52]	@ (8005664 <MX_TIM6_Init+0x64>)
 8005630:	f004 fd0a 	bl	800a048 <HAL_TIM_Base_Init>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800563a:	f7fd fec9 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800563e:	2300      	movs	r3, #0
 8005640:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005642:	2300      	movs	r3, #0
 8005644:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005646:	463b      	mov	r3, r7
 8005648:	4619      	mov	r1, r3
 800564a:	4806      	ldr	r0, [pc, #24]	@ (8005664 <MX_TIM6_Init+0x64>)
 800564c:	f005 f910 	bl	800a870 <HAL_TIMEx_MasterConfigSynchronization>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005656:	f7fd febb 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000ba0 	.word	0x20000ba0
 8005668:	40001000 	.word	0x40001000

0800566c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a54      	ldr	r2, [pc, #336]	@ (80057cc <HAL_TIM_Base_MspInit+0x160>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d116      	bne.n	80056ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	4b53      	ldr	r3, [pc, #332]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 8005684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005686:	4a52      	ldr	r2, [pc, #328]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	6453      	str	r3, [r2, #68]	@ 0x44
 800568e:	4b50      	ldr	r3, [pc, #320]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 8005690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	61fb      	str	r3, [r7, #28]
 8005698:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800569a:	2200      	movs	r2, #0
 800569c:	2105      	movs	r1, #5
 800569e:	2018      	movs	r0, #24
 80056a0:	f001 f853 	bl	800674a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80056a4:	2018      	movs	r0, #24
 80056a6:	f001 f86c 	bl	8006782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80056aa:	e08a      	b.n	80057c2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b4:	d116      	bne.n	80056e4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80056b6:	2300      	movs	r3, #0
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	4b45      	ldr	r3, [pc, #276]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056be:	4a44      	ldr	r2, [pc, #272]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 80056c0:	f043 0301 	orr.w	r3, r3, #1
 80056c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80056c6:	4b42      	ldr	r3, [pc, #264]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 80056c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	61bb      	str	r3, [r7, #24]
 80056d0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80056d2:	2200      	movs	r2, #0
 80056d4:	2105      	movs	r1, #5
 80056d6:	201c      	movs	r0, #28
 80056d8:	f001 f837 	bl	800674a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80056dc:	201c      	movs	r0, #28
 80056de:	f001 f850 	bl	8006782 <HAL_NVIC_EnableIRQ>
}
 80056e2:	e06e      	b.n	80057c2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a3a      	ldr	r2, [pc, #232]	@ (80057d4 <HAL_TIM_Base_MspInit+0x168>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d116      	bne.n	800571c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	4b37      	ldr	r3, [pc, #220]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 80056f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f6:	4a36      	ldr	r2, [pc, #216]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 80056f8:	f043 0302 	orr.w	r3, r3, #2
 80056fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80056fe:	4b34      	ldr	r3, [pc, #208]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800570a:	2200      	movs	r2, #0
 800570c:	2105      	movs	r1, #5
 800570e:	201d      	movs	r0, #29
 8005710:	f001 f81b 	bl	800674a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005714:	201d      	movs	r0, #29
 8005716:	f001 f834 	bl	8006782 <HAL_NVIC_EnableIRQ>
}
 800571a:	e052      	b.n	80057c2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a2d      	ldr	r2, [pc, #180]	@ (80057d8 <HAL_TIM_Base_MspInit+0x16c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d116      	bne.n	8005754 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005726:	2300      	movs	r3, #0
 8005728:	613b      	str	r3, [r7, #16]
 800572a:	4b29      	ldr	r3, [pc, #164]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572e:	4a28      	ldr	r2, [pc, #160]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 8005730:	f043 0304 	orr.w	r3, r3, #4
 8005734:	6413      	str	r3, [r2, #64]	@ 0x40
 8005736:	4b26      	ldr	r3, [pc, #152]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8005742:	2200      	movs	r2, #0
 8005744:	2105      	movs	r1, #5
 8005746:	201e      	movs	r0, #30
 8005748:	f000 ffff 	bl	800674a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800574c:	201e      	movs	r0, #30
 800574e:	f001 f818 	bl	8006782 <HAL_NVIC_EnableIRQ>
}
 8005752:	e036      	b.n	80057c2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM5)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a20      	ldr	r2, [pc, #128]	@ (80057dc <HAL_TIM_Base_MspInit+0x170>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d116      	bne.n	800578c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	4b1b      	ldr	r3, [pc, #108]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005766:	4a1a      	ldr	r2, [pc, #104]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 8005768:	f043 0308 	orr.w	r3, r3, #8
 800576c:	6413      	str	r3, [r2, #64]	@ 0x40
 800576e:	4b18      	ldr	r3, [pc, #96]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	f003 0308 	and.w	r3, r3, #8
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800577a:	2200      	movs	r2, #0
 800577c:	2105      	movs	r1, #5
 800577e:	2032      	movs	r0, #50	@ 0x32
 8005780:	f000 ffe3 	bl	800674a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005784:	2032      	movs	r0, #50	@ 0x32
 8005786:	f000 fffc 	bl	8006782 <HAL_NVIC_EnableIRQ>
}
 800578a:	e01a      	b.n	80057c2 <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM6)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a13      	ldr	r2, [pc, #76]	@ (80057e0 <HAL_TIM_Base_MspInit+0x174>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d115      	bne.n	80057c2 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005796:	2300      	movs	r3, #0
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	4b0d      	ldr	r3, [pc, #52]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 800579c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579e:	4a0c      	ldr	r2, [pc, #48]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 80057a0:	f043 0310 	orr.w	r3, r3, #16
 80057a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80057a6:	4b0a      	ldr	r3, [pc, #40]	@ (80057d0 <HAL_TIM_Base_MspInit+0x164>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057aa:	f003 0310 	and.w	r3, r3, #16
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80057b2:	2200      	movs	r2, #0
 80057b4:	2105      	movs	r1, #5
 80057b6:	2036      	movs	r0, #54	@ 0x36
 80057b8:	f000 ffc7 	bl	800674a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80057bc:	2036      	movs	r0, #54	@ 0x36
 80057be:	f000 ffe0 	bl	8006782 <HAL_NVIC_EnableIRQ>
}
 80057c2:	bf00      	nop
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	40010000 	.word	0x40010000
 80057d0:	40023800 	.word	0x40023800
 80057d4:	40000400 	.word	0x40000400
 80057d8:	40000800 	.word	0x40000800
 80057dc:	40000c00 	.word	0x40000c00
 80057e0:	40001000 	.word	0x40001000

080057e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80057e8:	4b11      	ldr	r3, [pc, #68]	@ (8005830 <MX_USART2_UART_Init+0x4c>)
 80057ea:	4a12      	ldr	r2, [pc, #72]	@ (8005834 <MX_USART2_UART_Init+0x50>)
 80057ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80057ee:	4b10      	ldr	r3, [pc, #64]	@ (8005830 <MX_USART2_UART_Init+0x4c>)
 80057f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80057f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80057f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005830 <MX_USART2_UART_Init+0x4c>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80057fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <MX_USART2_UART_Init+0x4c>)
 80057fe:	2200      	movs	r2, #0
 8005800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005802:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <MX_USART2_UART_Init+0x4c>)
 8005804:	2200      	movs	r2, #0
 8005806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005808:	4b09      	ldr	r3, [pc, #36]	@ (8005830 <MX_USART2_UART_Init+0x4c>)
 800580a:	220c      	movs	r2, #12
 800580c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800580e:	4b08      	ldr	r3, [pc, #32]	@ (8005830 <MX_USART2_UART_Init+0x4c>)
 8005810:	2200      	movs	r2, #0
 8005812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005814:	4b06      	ldr	r3, [pc, #24]	@ (8005830 <MX_USART2_UART_Init+0x4c>)
 8005816:	2200      	movs	r2, #0
 8005818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800581a:	4805      	ldr	r0, [pc, #20]	@ (8005830 <MX_USART2_UART_Init+0x4c>)
 800581c:	f005 f8b8 	bl	800a990 <HAL_UART_Init>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005826:	f7fd fdd3 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800582a:	bf00      	nop
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000be8 	.word	0x20000be8
 8005834:	40004400 	.word	0x40004400

08005838 <MX_DMA_UART_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_UART_Init(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800583e:	2300      	movs	r3, #0
 8005840:	607b      	str	r3, [r7, #4]
 8005842:	4b0c      	ldr	r3, [pc, #48]	@ (8005874 <MX_DMA_UART_Init+0x3c>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005846:	4a0b      	ldr	r2, [pc, #44]	@ (8005874 <MX_DMA_UART_Init+0x3c>)
 8005848:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800584c:	6313      	str	r3, [r2, #48]	@ 0x30
 800584e:	4b09      	ldr	r3, [pc, #36]	@ (8005874 <MX_DMA_UART_Init+0x3c>)
 8005850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005856:	607b      	str	r3, [r7, #4]
 8005858:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800585a:	2200      	movs	r2, #0
 800585c:	2105      	movs	r1, #5
 800585e:	2010      	movs	r0, #16
 8005860:	f000 ff73 	bl	800674a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005864:	2010      	movs	r0, #16
 8005866:	f000 ff8c 	bl	8006782 <HAL_NVIC_EnableIRQ>

}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40023800 	.word	0x40023800

08005878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08a      	sub	sp, #40	@ 0x28
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005880:	f107 0314 	add.w	r3, r7, #20
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	605a      	str	r2, [r3, #4]
 800588a:	609a      	str	r2, [r3, #8]
 800588c:	60da      	str	r2, [r3, #12]
 800588e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a34      	ldr	r2, [pc, #208]	@ (8005968 <HAL_UART_MspInit+0xf0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d162      	bne.n	8005960 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800589a:	2300      	movs	r3, #0
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	4b33      	ldr	r3, [pc, #204]	@ (800596c <HAL_UART_MspInit+0xf4>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	4a32      	ldr	r2, [pc, #200]	@ (800596c <HAL_UART_MspInit+0xf4>)
 80058a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80058aa:	4b30      	ldr	r3, [pc, #192]	@ (800596c <HAL_UART_MspInit+0xf4>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	4b2c      	ldr	r3, [pc, #176]	@ (800596c <HAL_UART_MspInit+0xf4>)
 80058bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058be:	4a2b      	ldr	r2, [pc, #172]	@ (800596c <HAL_UART_MspInit+0xf4>)
 80058c0:	f043 0308 	orr.w	r3, r3, #8
 80058c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80058c6:	4b29      	ldr	r3, [pc, #164]	@ (800596c <HAL_UART_MspInit+0xf4>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80058d2:	2360      	movs	r3, #96	@ 0x60
 80058d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d6:	2302      	movs	r3, #2
 80058d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058de:	2303      	movs	r3, #3
 80058e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80058e2:	2307      	movs	r3, #7
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058e6:	f107 0314 	add.w	r3, r7, #20
 80058ea:	4619      	mov	r1, r3
 80058ec:	4820      	ldr	r0, [pc, #128]	@ (8005970 <HAL_UART_MspInit+0xf8>)
 80058ee:	f001 fb73 	bl	8006fd8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80058f2:	4b20      	ldr	r3, [pc, #128]	@ (8005974 <HAL_UART_MspInit+0xfc>)
 80058f4:	4a20      	ldr	r2, [pc, #128]	@ (8005978 <HAL_UART_MspInit+0x100>)
 80058f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80058f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005974 <HAL_UART_MspInit+0xfc>)
 80058fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80058fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005900:	4b1c      	ldr	r3, [pc, #112]	@ (8005974 <HAL_UART_MspInit+0xfc>)
 8005902:	2200      	movs	r2, #0
 8005904:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005906:	4b1b      	ldr	r3, [pc, #108]	@ (8005974 <HAL_UART_MspInit+0xfc>)
 8005908:	2200      	movs	r2, #0
 800590a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800590c:	4b19      	ldr	r3, [pc, #100]	@ (8005974 <HAL_UART_MspInit+0xfc>)
 800590e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005912:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005914:	4b17      	ldr	r3, [pc, #92]	@ (8005974 <HAL_UART_MspInit+0xfc>)
 8005916:	2200      	movs	r2, #0
 8005918:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800591a:	4b16      	ldr	r3, [pc, #88]	@ (8005974 <HAL_UART_MspInit+0xfc>)
 800591c:	2200      	movs	r2, #0
 800591e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005920:	4b14      	ldr	r3, [pc, #80]	@ (8005974 <HAL_UART_MspInit+0xfc>)
 8005922:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005926:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005928:	4b12      	ldr	r3, [pc, #72]	@ (8005974 <HAL_UART_MspInit+0xfc>)
 800592a:	2200      	movs	r2, #0
 800592c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800592e:	4b11      	ldr	r3, [pc, #68]	@ (8005974 <HAL_UART_MspInit+0xfc>)
 8005930:	2200      	movs	r2, #0
 8005932:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005934:	480f      	ldr	r0, [pc, #60]	@ (8005974 <HAL_UART_MspInit+0xfc>)
 8005936:	f000 ff3f 	bl	80067b8 <HAL_DMA_Init>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8005940:	f7fd fd46 	bl	80033d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a0b      	ldr	r2, [pc, #44]	@ (8005974 <HAL_UART_MspInit+0xfc>)
 8005948:	63da      	str	r2, [r3, #60]	@ 0x3c
 800594a:	4a0a      	ldr	r2, [pc, #40]	@ (8005974 <HAL_UART_MspInit+0xfc>)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005950:	2200      	movs	r2, #0
 8005952:	2105      	movs	r1, #5
 8005954:	2026      	movs	r0, #38	@ 0x26
 8005956:	f000 fef8 	bl	800674a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800595a:	2026      	movs	r0, #38	@ 0x26
 800595c:	f000 ff11 	bl	8006782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

	}
 8005960:	bf00      	nop
 8005962:	3728      	adds	r7, #40	@ 0x28
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40004400 	.word	0x40004400
 800596c:	40023800 	.word	0x40023800
 8005970:	40020c00 	.word	0x40020c00
 8005974:	20000c30 	.word	0x20000c30
 8005978:	40026088 	.word	0x40026088

0800597c <_write>:
  /* USER CODE END USART2_MspDeInit 1 */
  }

}

int _write(int file, char *ptr, int len){
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]


	//while(!UART_SendFlag);

	//UART_SendFlag=0;
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ptr, len);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	b29b      	uxth	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	68b9      	ldr	r1, [r7, #8]
 8005990:	4803      	ldr	r0, [pc, #12]	@ (80059a0 <_write+0x24>)
 8005992:	f005 f933 	bl	800abfc <HAL_UART_Transmit_DMA>

	return len;
 8005996:	687b      	ldr	r3, [r7, #4]

}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000be8 	.word	0x20000be8

080059a4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 80059a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80059dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80059a8:	f7ff fc92 	bl	80052d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80059ac:	480c      	ldr	r0, [pc, #48]	@ (80059e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80059ae:	490d      	ldr	r1, [pc, #52]	@ (80059e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80059b0:	4a0d      	ldr	r2, [pc, #52]	@ (80059e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80059b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059b4:	e002      	b.n	80059bc <LoopCopyDataInit>

080059b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059ba:	3304      	adds	r3, #4

080059bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059c0:	d3f9      	bcc.n	80059b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059c2:	4a0a      	ldr	r2, [pc, #40]	@ (80059ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80059c4:	4c0a      	ldr	r4, [pc, #40]	@ (80059f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80059c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059c8:	e001      	b.n	80059ce <LoopFillZerobss>

080059ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059cc:	3204      	adds	r2, #4

080059ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059d0:	d3fb      	bcc.n	80059ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80059d2:	f00b f885 	bl	8010ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059d6:	f7fd fc41 	bl	800325c <main>
  bx  lr    
 80059da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80059dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80059e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059e4:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 80059e8:	08016070 	.word	0x08016070
  ldr r2, =_sbss
 80059ec:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 80059f0:	20005730 	.word	0x20005730

080059f4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80059f4:	e7fe      	b.n	80059f4 <CAN1_RX0_IRQHandler>
	...

080059f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80059fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005a38 <HAL_Init+0x40>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a0d      	ldr	r2, [pc, #52]	@ (8005a38 <HAL_Init+0x40>)
 8005a02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a08:	4b0b      	ldr	r3, [pc, #44]	@ (8005a38 <HAL_Init+0x40>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005a38 <HAL_Init+0x40>)
 8005a0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a14:	4b08      	ldr	r3, [pc, #32]	@ (8005a38 <HAL_Init+0x40>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a07      	ldr	r2, [pc, #28]	@ (8005a38 <HAL_Init+0x40>)
 8005a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a20:	2003      	movs	r0, #3
 8005a22:	f000 fe87 	bl	8006734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a26:	200f      	movs	r0, #15
 8005a28:	f000 f808 	bl	8005a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a2c:	f7ff faa6 	bl	8004f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40023c00 	.word	0x40023c00

08005a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a44:	4b12      	ldr	r3, [pc, #72]	@ (8005a90 <HAL_InitTick+0x54>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	4b12      	ldr	r3, [pc, #72]	@ (8005a94 <HAL_InitTick+0x58>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fe9f 	bl	800679e <HAL_SYSTICK_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e00e      	b.n	8005a88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b0f      	cmp	r3, #15
 8005a6e:	d80a      	bhi.n	8005a86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a70:	2200      	movs	r2, #0
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	f04f 30ff 	mov.w	r0, #4294967295
 8005a78:	f000 fe67 	bl	800674a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a7c:	4a06      	ldr	r2, [pc, #24]	@ (8005a98 <HAL_InitTick+0x5c>)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e000      	b.n	8005a88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	200000a8 	.word	0x200000a8
 8005a94:	200000b0 	.word	0x200000b0
 8005a98:	200000ac 	.word	0x200000ac

08005a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005aa0:	4b06      	ldr	r3, [pc, #24]	@ (8005abc <HAL_IncTick+0x20>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4b06      	ldr	r3, [pc, #24]	@ (8005ac0 <HAL_IncTick+0x24>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4413      	add	r3, r2
 8005aac:	4a04      	ldr	r2, [pc, #16]	@ (8005ac0 <HAL_IncTick+0x24>)
 8005aae:	6013      	str	r3, [r2, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	200000b0 	.word	0x200000b0
 8005ac0:	20000c90 	.word	0x20000c90

08005ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8005ac8:	4b03      	ldr	r3, [pc, #12]	@ (8005ad8 <HAL_GetTick+0x14>)
 8005aca:	681b      	ldr	r3, [r3, #0]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	20000c90 	.word	0x20000c90

08005adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ae4:	f7ff ffee 	bl	8005ac4 <HAL_GetTick>
 8005ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d005      	beq.n	8005b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005af6:	4b0a      	ldr	r3, [pc, #40]	@ (8005b20 <HAL_Delay+0x44>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b02:	bf00      	nop
 8005b04:	f7ff ffde 	bl	8005ac4 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d8f7      	bhi.n	8005b04 <HAL_Delay+0x28>
  {
  }
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	200000b0 	.word	0x200000b0

08005b24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e033      	b.n	8005ba2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d109      	bne.n	8005b56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fc f88e 	bl	8001c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5a:	f003 0310 	and.w	r3, r3, #16
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d118      	bne.n	8005b94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005b6a:	f023 0302 	bic.w	r3, r3, #2
 8005b6e:	f043 0202 	orr.w	r2, r3, #2
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fc06 	bl	8006388 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	f043 0201 	orr.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b92:	e001      	b.n	8005b98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d101      	bne.n	8005bc6 <HAL_ADC_Start+0x1a>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e0b2      	b.n	8005d2c <HAL_ADC_Start+0x180>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d018      	beq.n	8005c0e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005bec:	4b52      	ldr	r3, [pc, #328]	@ (8005d38 <HAL_ADC_Start+0x18c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a52      	ldr	r2, [pc, #328]	@ (8005d3c <HAL_ADC_Start+0x190>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	0c9a      	lsrs	r2, r3, #18
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	4413      	add	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005c00:	e002      	b.n	8005c08 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f9      	bne.n	8005c02 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d17a      	bne.n	8005d12 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c20:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005c24:	f023 0301 	bic.w	r3, r3, #1
 8005c28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d007      	beq.n	8005c4e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005c46:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c5a:	d106      	bne.n	8005c6a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c60:	f023 0206 	bic.w	r2, r3, #6
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	645a      	str	r2, [r3, #68]	@ 0x44
 8005c68:	e002      	b.n	8005c70 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c78:	4b31      	ldr	r3, [pc, #196]	@ (8005d40 <HAL_ADC_Start+0x194>)
 8005c7a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005c84:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f003 031f 	and.w	r3, r3, #31
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d12a      	bne.n	8005ce8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2b      	ldr	r2, [pc, #172]	@ (8005d44 <HAL_ADC_Start+0x198>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d015      	beq.n	8005cc8 <HAL_ADC_Start+0x11c>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a29      	ldr	r2, [pc, #164]	@ (8005d48 <HAL_ADC_Start+0x19c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d105      	bne.n	8005cb2 <HAL_ADC_Start+0x106>
 8005ca6:	4b26      	ldr	r3, [pc, #152]	@ (8005d40 <HAL_ADC_Start+0x194>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f003 031f 	and.w	r3, r3, #31
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a25      	ldr	r2, [pc, #148]	@ (8005d4c <HAL_ADC_Start+0x1a0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d136      	bne.n	8005d2a <HAL_ADC_Start+0x17e>
 8005cbc:	4b20      	ldr	r3, [pc, #128]	@ (8005d40 <HAL_ADC_Start+0x194>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d130      	bne.n	8005d2a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d129      	bne.n	8005d2a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005ce4:	609a      	str	r2, [r3, #8]
 8005ce6:	e020      	b.n	8005d2a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a15      	ldr	r2, [pc, #84]	@ (8005d44 <HAL_ADC_Start+0x198>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d11b      	bne.n	8005d2a <HAL_ADC_Start+0x17e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d114      	bne.n	8005d2a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005d0e:	609a      	str	r2, [r3, #8]
 8005d10:	e00b      	b.n	8005d2a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d16:	f043 0210 	orr.w	r2, r3, #16
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d22:	f043 0201 	orr.w	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	200000a8 	.word	0x200000a8
 8005d3c:	431bde83 	.word	0x431bde83
 8005d40:	40012300 	.word	0x40012300
 8005d44:	40012000 	.word	0x40012000
 8005d48:	40012100 	.word	0x40012100
 8005d4c:	40012200 	.word	0x40012200

08005d50 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_ADC_Stop+0x16>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e021      	b.n	8005daa <HAL_ADC_Stop+0x5a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0201 	bic.w	r2, r2, #1
 8005d7c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d90:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005d94:	f023 0301 	bic.w	r3, r3, #1
 8005d98:	f043 0201 	orr.w	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dd2:	d113      	bne.n	8005dfc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005de2:	d10b      	bne.n	8005dfc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de8:	f043 0220 	orr.w	r2, r3, #32
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e063      	b.n	8005ec4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005dfc:	f7ff fe62 	bl	8005ac4 <HAL_GetTick>
 8005e00:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005e02:	e021      	b.n	8005e48 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0a:	d01d      	beq.n	8005e48 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <HAL_ADC_PollForConversion+0x6c>
 8005e12:	f7ff fe57 	bl	8005ac4 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d212      	bcs.n	8005e48 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d00b      	beq.n	8005e48 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e34:	f043 0204 	orr.w	r2, r3, #4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e03d      	b.n	8005ec4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d1d6      	bne.n	8005e04 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f06f 0212 	mvn.w	r2, #18
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d123      	bne.n	8005ec2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d11f      	bne.n	8005ec2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e88:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d006      	beq.n	8005e9e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d111      	bne.n	8005ec2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d105      	bne.n	8005ec2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	f043 0201 	orr.w	r2, r3, #1
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d049      	beq.n	8005f96 <HAL_ADC_IRQHandler+0xca>
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d046      	beq.n	8005f96 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d12b      	bne.n	8005f86 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d127      	bne.n	8005f86 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d006      	beq.n	8005f52 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d119      	bne.n	8005f86 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0220 	bic.w	r2, r2, #32
 8005f60:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d105      	bne.n	8005f86 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	f043 0201 	orr.w	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f8bd 	bl	8006106 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0212 	mvn.w	r2, #18
 8005f94:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d057      	beq.n	800605c <HAL_ADC_IRQHandler+0x190>
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d054      	beq.n	800605c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb6:	f003 0310 	and.w	r3, r3, #16
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d105      	bne.n	8005fca <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d139      	bne.n	800604c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fde:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d006      	beq.n	8005ff4 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d12b      	bne.n	800604c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d124      	bne.n	800604c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800600c:	2b00      	cmp	r3, #0
 800600e:	d11d      	bne.n	800604c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8006014:	2b00      	cmp	r3, #0
 8006016:	d119      	bne.n	800604c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006026:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d105      	bne.n	800604c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006044:	f043 0201 	orr.w	r2, r3, #1
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fa97 	bl	8006580 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f06f 020c 	mvn.w	r2, #12
 800605a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d017      	beq.n	80060a2 <HAL_ADC_IRQHandler+0x1d6>
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d014      	beq.n	80060a2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b01      	cmp	r3, #1
 8006084:	d10d      	bne.n	80060a2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f841 	bl	800611a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0201 	mvn.w	r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060b0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d015      	beq.n	80060e4 <HAL_ADC_IRQHandler+0x218>
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d012      	beq.n	80060e4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c2:	f043 0202 	orr.w	r2, r3, #2
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f06f 0220 	mvn.w	r2, #32
 80060d2:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f82a 	bl	800612e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f06f 0220 	mvn.w	r2, #32
 80060e2:	601a      	str	r2, [r3, #0]
  }
}
 80060e4:	bf00      	nop
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_ADC_ConfigChannel+0x1c>
 800615c:	2302      	movs	r3, #2
 800615e:	e105      	b.n	800636c <HAL_ADC_ConfigChannel+0x228>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b09      	cmp	r3, #9
 800616e:	d925      	bls.n	80061bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68d9      	ldr	r1, [r3, #12]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	4613      	mov	r3, r2
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	4413      	add	r3, r2
 8006184:	3b1e      	subs	r3, #30
 8006186:	2207      	movs	r2, #7
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	43da      	mvns	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	400a      	ands	r2, r1
 8006194:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68d9      	ldr	r1, [r3, #12]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	4618      	mov	r0, r3
 80061a8:	4603      	mov	r3, r0
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	4403      	add	r3, r0
 80061ae:	3b1e      	subs	r3, #30
 80061b0:	409a      	lsls	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	e022      	b.n	8006202 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6919      	ldr	r1, [r3, #16]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	461a      	mov	r2, r3
 80061ca:	4613      	mov	r3, r2
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	4413      	add	r3, r2
 80061d0:	2207      	movs	r2, #7
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	43da      	mvns	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	400a      	ands	r2, r1
 80061de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6919      	ldr	r1, [r3, #16]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	4618      	mov	r0, r3
 80061f2:	4603      	mov	r3, r0
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	4403      	add	r3, r0
 80061f8:	409a      	lsls	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b06      	cmp	r3, #6
 8006208:	d824      	bhi.n	8006254 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	3b05      	subs	r3, #5
 800621c:	221f      	movs	r2, #31
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	43da      	mvns	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	400a      	ands	r2, r1
 800622a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	4618      	mov	r0, r3
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	3b05      	subs	r3, #5
 8006246:	fa00 f203 	lsl.w	r2, r0, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	635a      	str	r2, [r3, #52]	@ 0x34
 8006252:	e04c      	b.n	80062ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2b0c      	cmp	r3, #12
 800625a:	d824      	bhi.n	80062a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	3b23      	subs	r3, #35	@ 0x23
 800626e:	221f      	movs	r2, #31
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	43da      	mvns	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	400a      	ands	r2, r1
 800627c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	b29b      	uxth	r3, r3
 800628a:	4618      	mov	r0, r3
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	3b23      	subs	r3, #35	@ 0x23
 8006298:	fa00 f203 	lsl.w	r2, r0, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80062a4:	e023      	b.n	80062ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	3b41      	subs	r3, #65	@ 0x41
 80062b8:	221f      	movs	r2, #31
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	43da      	mvns	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	400a      	ands	r2, r1
 80062c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	4618      	mov	r0, r3
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	3b41      	subs	r3, #65	@ 0x41
 80062e2:	fa00 f203 	lsl.w	r2, r0, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062ee:	4b22      	ldr	r3, [pc, #136]	@ (8006378 <HAL_ADC_ConfigChannel+0x234>)
 80062f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a21      	ldr	r2, [pc, #132]	@ (800637c <HAL_ADC_ConfigChannel+0x238>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d109      	bne.n	8006310 <HAL_ADC_ConfigChannel+0x1cc>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b12      	cmp	r3, #18
 8006302:	d105      	bne.n	8006310 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a19      	ldr	r2, [pc, #100]	@ (800637c <HAL_ADC_ConfigChannel+0x238>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d123      	bne.n	8006362 <HAL_ADC_ConfigChannel+0x21e>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b10      	cmp	r3, #16
 8006320:	d003      	beq.n	800632a <HAL_ADC_ConfigChannel+0x1e6>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b11      	cmp	r3, #17
 8006328:	d11b      	bne.n	8006362 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b10      	cmp	r3, #16
 800633c:	d111      	bne.n	8006362 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800633e:	4b10      	ldr	r3, [pc, #64]	@ (8006380 <HAL_ADC_ConfigChannel+0x23c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a10      	ldr	r2, [pc, #64]	@ (8006384 <HAL_ADC_ConfigChannel+0x240>)
 8006344:	fba2 2303 	umull	r2, r3, r2, r3
 8006348:	0c9a      	lsrs	r2, r3, #18
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006354:	e002      	b.n	800635c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	3b01      	subs	r3, #1
 800635a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f9      	bne.n	8006356 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	40012300 	.word	0x40012300
 800637c:	40012000 	.word	0x40012000
 8006380:	200000a8 	.word	0x200000a8
 8006384:	431bde83 	.word	0x431bde83

08006388 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006390:	4b79      	ldr	r3, [pc, #484]	@ (8006578 <ADC_Init+0x1f0>)
 8006392:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	431a      	orrs	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6859      	ldr	r1, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	021a      	lsls	r2, r3, #8
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80063e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6859      	ldr	r1, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6899      	ldr	r1, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641a:	4a58      	ldr	r2, [pc, #352]	@ (800657c <ADC_Init+0x1f4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d022      	beq.n	8006466 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800642e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6899      	ldr	r1, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006450:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6899      	ldr	r1, [r3, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	609a      	str	r2, [r3, #8]
 8006464:	e00f      	b.n	8006486 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006474:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006484:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0202 	bic.w	r2, r2, #2
 8006494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6899      	ldr	r1, [r3, #8]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	7e1b      	ldrb	r3, [r3, #24]
 80064a0:	005a      	lsls	r2, r3, #1
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01b      	beq.n	80064ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80064d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	3b01      	subs	r3, #1
 80064e0:	035a      	lsls	r2, r3, #13
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
 80064ea:	e007      	b.n	80064fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800650a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	3b01      	subs	r3, #1
 8006518:	051a      	lsls	r2, r3, #20
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6899      	ldr	r1, [r3, #8]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800653e:	025a      	lsls	r2, r3, #9
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006556:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6899      	ldr	r1, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	029a      	lsls	r2, r3, #10
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	609a      	str	r2, [r3, #8]
}
 800656c:	bf00      	nop
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	40012300 	.word	0x40012300
 800657c:	0f000001 	.word	0x0f000001

08006580 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065a4:	4b0c      	ldr	r3, [pc, #48]	@ (80065d8 <__NVIC_SetPriorityGrouping+0x44>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80065b0:	4013      	ands	r3, r2
 80065b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80065c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065c6:	4a04      	ldr	r2, [pc, #16]	@ (80065d8 <__NVIC_SetPriorityGrouping+0x44>)
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	60d3      	str	r3, [r2, #12]
}
 80065cc:	bf00      	nop
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	e000ed00 	.word	0xe000ed00

080065dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065e0:	4b04      	ldr	r3, [pc, #16]	@ (80065f4 <__NVIC_GetPriorityGrouping+0x18>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	0a1b      	lsrs	r3, r3, #8
 80065e6:	f003 0307 	and.w	r3, r3, #7
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	e000ed00 	.word	0xe000ed00

080065f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006606:	2b00      	cmp	r3, #0
 8006608:	db0b      	blt.n	8006622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	f003 021f 	and.w	r2, r3, #31
 8006610:	4907      	ldr	r1, [pc, #28]	@ (8006630 <__NVIC_EnableIRQ+0x38>)
 8006612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006616:	095b      	lsrs	r3, r3, #5
 8006618:	2001      	movs	r0, #1
 800661a:	fa00 f202 	lsl.w	r2, r0, r2
 800661e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	e000e100 	.word	0xe000e100

08006634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	4603      	mov	r3, r0
 800663c:	6039      	str	r1, [r7, #0]
 800663e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006644:	2b00      	cmp	r3, #0
 8006646:	db0a      	blt.n	800665e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	b2da      	uxtb	r2, r3
 800664c:	490c      	ldr	r1, [pc, #48]	@ (8006680 <__NVIC_SetPriority+0x4c>)
 800664e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006652:	0112      	lsls	r2, r2, #4
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	440b      	add	r3, r1
 8006658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800665c:	e00a      	b.n	8006674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	b2da      	uxtb	r2, r3
 8006662:	4908      	ldr	r1, [pc, #32]	@ (8006684 <__NVIC_SetPriority+0x50>)
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	f003 030f 	and.w	r3, r3, #15
 800666a:	3b04      	subs	r3, #4
 800666c:	0112      	lsls	r2, r2, #4
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	440b      	add	r3, r1
 8006672:	761a      	strb	r2, [r3, #24]
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	e000e100 	.word	0xe000e100
 8006684:	e000ed00 	.word	0xe000ed00

08006688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006688:	b480      	push	{r7}
 800668a:	b089      	sub	sp, #36	@ 0x24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f1c3 0307 	rsb	r3, r3, #7
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	bf28      	it	cs
 80066a6:	2304      	movcs	r3, #4
 80066a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	3304      	adds	r3, #4
 80066ae:	2b06      	cmp	r3, #6
 80066b0:	d902      	bls.n	80066b8 <NVIC_EncodePriority+0x30>
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	3b03      	subs	r3, #3
 80066b6:	e000      	b.n	80066ba <NVIC_EncodePriority+0x32>
 80066b8:	2300      	movs	r3, #0
 80066ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066bc:	f04f 32ff 	mov.w	r2, #4294967295
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	43da      	mvns	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	401a      	ands	r2, r3
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066d0:	f04f 31ff 	mov.w	r1, #4294967295
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	fa01 f303 	lsl.w	r3, r1, r3
 80066da:	43d9      	mvns	r1, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066e0:	4313      	orrs	r3, r2
         );
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3724      	adds	r7, #36	@ 0x24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006700:	d301      	bcc.n	8006706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006702:	2301      	movs	r3, #1
 8006704:	e00f      	b.n	8006726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006706:	4a0a      	ldr	r2, [pc, #40]	@ (8006730 <SysTick_Config+0x40>)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3b01      	subs	r3, #1
 800670c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800670e:	210f      	movs	r1, #15
 8006710:	f04f 30ff 	mov.w	r0, #4294967295
 8006714:	f7ff ff8e 	bl	8006634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006718:	4b05      	ldr	r3, [pc, #20]	@ (8006730 <SysTick_Config+0x40>)
 800671a:	2200      	movs	r2, #0
 800671c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800671e:	4b04      	ldr	r3, [pc, #16]	@ (8006730 <SysTick_Config+0x40>)
 8006720:	2207      	movs	r2, #7
 8006722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	e000e010 	.word	0xe000e010

08006734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff ff29 	bl	8006594 <__NVIC_SetPriorityGrouping>
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800674a:	b580      	push	{r7, lr}
 800674c:	b086      	sub	sp, #24
 800674e:	af00      	add	r7, sp, #0
 8006750:	4603      	mov	r3, r0
 8006752:	60b9      	str	r1, [r7, #8]
 8006754:	607a      	str	r2, [r7, #4]
 8006756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800675c:	f7ff ff3e 	bl	80065dc <__NVIC_GetPriorityGrouping>
 8006760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	6978      	ldr	r0, [r7, #20]
 8006768:	f7ff ff8e 	bl	8006688 <NVIC_EncodePriority>
 800676c:	4602      	mov	r2, r0
 800676e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006772:	4611      	mov	r1, r2
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff ff5d 	bl	8006634 <__NVIC_SetPriority>
}
 800677a:	bf00      	nop
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	4603      	mov	r3, r0
 800678a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800678c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff ff31 	bl	80065f8 <__NVIC_EnableIRQ>
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b082      	sub	sp, #8
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff ffa2 	bl	80066f0 <SysTick_Config>
 80067ac:	4603      	mov	r3, r0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80067c4:	f7ff f97e 	bl	8005ac4 <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e099      	b.n	8006908 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0201 	bic.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067f4:	e00f      	b.n	8006816 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067f6:	f7ff f965 	bl	8005ac4 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b05      	cmp	r3, #5
 8006802:	d908      	bls.n	8006816 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2203      	movs	r2, #3
 800680e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e078      	b.n	8006908 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e8      	bne.n	80067f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	4b38      	ldr	r3, [pc, #224]	@ (8006910 <HAL_DMA_Init+0x158>)
 8006830:	4013      	ands	r3, r2
 8006832:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006842:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800684e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800685a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686c:	2b04      	cmp	r3, #4
 800686e:	d107      	bne.n	8006880 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006878:	4313      	orrs	r3, r2
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f023 0307 	bic.w	r3, r3, #7
 8006896:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d117      	bne.n	80068da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00e      	beq.n	80068da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fb0f 	bl	8006ee0 <DMA_CheckFifoParam>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d008      	beq.n	80068da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2240      	movs	r2, #64	@ 0x40
 80068cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80068d6:	2301      	movs	r3, #1
 80068d8:	e016      	b.n	8006908 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fac6 	bl	8006e74 <DMA_CalcBaseAndBitshift>
 80068e8:	4603      	mov	r3, r0
 80068ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f0:	223f      	movs	r2, #63	@ 0x3f
 80068f2:	409a      	lsls	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	f010803f 	.word	0xf010803f

08006914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800692a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006932:	2b01      	cmp	r3, #1
 8006934:	d101      	bne.n	800693a <HAL_DMA_Start_IT+0x26>
 8006936:	2302      	movs	r3, #2
 8006938:	e040      	b.n	80069bc <HAL_DMA_Start_IT+0xa8>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b01      	cmp	r3, #1
 800694c:	d12f      	bne.n	80069ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2202      	movs	r2, #2
 8006952:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 fa58 	bl	8006e18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800696c:	223f      	movs	r2, #63	@ 0x3f
 800696e:	409a      	lsls	r2, r3
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0216 	orr.w	r2, r2, #22
 8006982:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0208 	orr.w	r2, r2, #8
 800699a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	e005      	b.n	80069ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80069b6:	2302      	movs	r3, #2
 80069b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80069ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3718      	adds	r7, #24
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80069d2:	f7ff f877 	bl	8005ac4 <HAL_GetTick>
 80069d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d008      	beq.n	80069f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2280      	movs	r2, #128	@ 0x80
 80069e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e052      	b.n	8006a9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0216 	bic.w	r2, r2, #22
 8006a04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695a      	ldr	r2, [r3, #20]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d103      	bne.n	8006a26 <HAL_DMA_Abort+0x62>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0208 	bic.w	r2, r2, #8
 8006a34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0201 	bic.w	r2, r2, #1
 8006a44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a46:	e013      	b.n	8006a70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a48:	f7ff f83c 	bl	8005ac4 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b05      	cmp	r3, #5
 8006a54:	d90c      	bls.n	8006a70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2203      	movs	r2, #3
 8006a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e015      	b.n	8006a9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1e4      	bne.n	8006a48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a82:	223f      	movs	r2, #63	@ 0x3f
 8006a84:	409a      	lsls	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d004      	beq.n	8006ac2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2280      	movs	r2, #128	@ 0x80
 8006abc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e00c      	b.n	8006adc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2205      	movs	r2, #5
 8006ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0201 	bic.w	r2, r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006af4:	4b8e      	ldr	r3, [pc, #568]	@ (8006d30 <HAL_DMA_IRQHandler+0x248>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a8e      	ldr	r2, [pc, #568]	@ (8006d34 <HAL_DMA_IRQHandler+0x24c>)
 8006afa:	fba2 2303 	umull	r2, r3, r2, r3
 8006afe:	0a9b      	lsrs	r3, r3, #10
 8006b00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b12:	2208      	movs	r2, #8
 8006b14:	409a      	lsls	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d01a      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d013      	beq.n	8006b54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0204 	bic.w	r2, r2, #4
 8006b3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b40:	2208      	movs	r2, #8
 8006b42:	409a      	lsls	r2, r3
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b4c:	f043 0201 	orr.w	r2, r3, #1
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b58:	2201      	movs	r2, #1
 8006b5a:	409a      	lsls	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d012      	beq.n	8006b8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00b      	beq.n	8006b8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b76:	2201      	movs	r2, #1
 8006b78:	409a      	lsls	r2, r3
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b82:	f043 0202 	orr.w	r2, r3, #2
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b8e:	2204      	movs	r2, #4
 8006b90:	409a      	lsls	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4013      	ands	r3, r2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d012      	beq.n	8006bc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00b      	beq.n	8006bc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bac:	2204      	movs	r2, #4
 8006bae:	409a      	lsls	r2, r3
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb8:	f043 0204 	orr.w	r2, r3, #4
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bc4:	2210      	movs	r2, #16
 8006bc6:	409a      	lsls	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d043      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0308 	and.w	r3, r3, #8
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d03c      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006be2:	2210      	movs	r2, #16
 8006be4:	409a      	lsls	r2, r3
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d018      	beq.n	8006c2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d108      	bne.n	8006c18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d024      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	4798      	blx	r3
 8006c16:	e01f      	b.n	8006c58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d01b      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4798      	blx	r3
 8006c28:	e016      	b.n	8006c58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d107      	bne.n	8006c48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0208 	bic.w	r2, r2, #8
 8006c46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	409a      	lsls	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4013      	ands	r3, r2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 808f 	beq.w	8006d88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0310 	and.w	r3, r3, #16
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 8087 	beq.w	8006d88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c7e:	2220      	movs	r2, #32
 8006c80:	409a      	lsls	r2, r3
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b05      	cmp	r3, #5
 8006c90:	d136      	bne.n	8006d00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0216 	bic.w	r2, r2, #22
 8006ca0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695a      	ldr	r2, [r3, #20]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d103      	bne.n	8006cc2 <HAL_DMA_IRQHandler+0x1da>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d007      	beq.n	8006cd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 0208 	bic.w	r2, r2, #8
 8006cd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd6:	223f      	movs	r2, #63	@ 0x3f
 8006cd8:	409a      	lsls	r2, r3
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d07e      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
        }
        return;
 8006cfe:	e079      	b.n	8006df4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01d      	beq.n	8006d4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d031      	beq.n	8006d88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	4798      	blx	r3
 8006d2c:	e02c      	b.n	8006d88 <HAL_DMA_IRQHandler+0x2a0>
 8006d2e:	bf00      	nop
 8006d30:	200000a8 	.word	0x200000a8
 8006d34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d023      	beq.n	8006d88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	4798      	blx	r3
 8006d48:	e01e      	b.n	8006d88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10f      	bne.n	8006d78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 0210 	bic.w	r2, r2, #16
 8006d66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d032      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d022      	beq.n	8006de2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2205      	movs	r2, #5
 8006da0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0201 	bic.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60bb      	str	r3, [r7, #8]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d307      	bcc.n	8006dd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1f2      	bne.n	8006db4 <HAL_DMA_IRQHandler+0x2cc>
 8006dce:	e000      	b.n	8006dd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006dd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d005      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	4798      	blx	r3
 8006df2:	e000      	b.n	8006df6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006df4:	bf00      	nop
    }
  }
}
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e0a:	b2db      	uxtb	r3, r3
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006e34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	2b40      	cmp	r3, #64	@ 0x40
 8006e44:	d108      	bne.n	8006e58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006e56:	e007      	b.n	8006e68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	60da      	str	r2, [r3, #12]
}
 8006e68:	bf00      	nop
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	3b10      	subs	r3, #16
 8006e84:	4a14      	ldr	r2, [pc, #80]	@ (8006ed8 <DMA_CalcBaseAndBitshift+0x64>)
 8006e86:	fba2 2303 	umull	r2, r3, r2, r3
 8006e8a:	091b      	lsrs	r3, r3, #4
 8006e8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006e8e:	4a13      	ldr	r2, [pc, #76]	@ (8006edc <DMA_CalcBaseAndBitshift+0x68>)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4413      	add	r3, r2
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d909      	bls.n	8006eb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006eaa:	f023 0303 	bic.w	r3, r3, #3
 8006eae:	1d1a      	adds	r2, r3, #4
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	659a      	str	r2, [r3, #88]	@ 0x58
 8006eb4:	e007      	b.n	8006ec6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006ebe:	f023 0303 	bic.w	r3, r3, #3
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	aaaaaaab 	.word	0xaaaaaaab
 8006edc:	08015b64 	.word	0x08015b64

08006ee0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d11f      	bne.n	8006f3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d856      	bhi.n	8006fae <DMA_CheckFifoParam+0xce>
 8006f00:	a201      	add	r2, pc, #4	@ (adr r2, 8006f08 <DMA_CheckFifoParam+0x28>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f19 	.word	0x08006f19
 8006f0c:	08006f2b 	.word	0x08006f2b
 8006f10:	08006f19 	.word	0x08006f19
 8006f14:	08006faf 	.word	0x08006faf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d046      	beq.n	8006fb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f28:	e043      	b.n	8006fb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006f32:	d140      	bne.n	8006fb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f38:	e03d      	b.n	8006fb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f42:	d121      	bne.n	8006f88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d837      	bhi.n	8006fba <DMA_CheckFifoParam+0xda>
 8006f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f50 <DMA_CheckFifoParam+0x70>)
 8006f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f50:	08006f61 	.word	0x08006f61
 8006f54:	08006f67 	.word	0x08006f67
 8006f58:	08006f61 	.word	0x08006f61
 8006f5c:	08006f79 	.word	0x08006f79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	73fb      	strb	r3, [r7, #15]
      break;
 8006f64:	e030      	b.n	8006fc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d025      	beq.n	8006fbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f76:	e022      	b.n	8006fbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006f80:	d11f      	bne.n	8006fc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006f86:	e01c      	b.n	8006fc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d903      	bls.n	8006f96 <DMA_CheckFifoParam+0xb6>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d003      	beq.n	8006f9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006f94:	e018      	b.n	8006fc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	73fb      	strb	r3, [r7, #15]
      break;
 8006f9a:	e015      	b.n	8006fc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00e      	beq.n	8006fc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	73fb      	strb	r3, [r7, #15]
      break;
 8006fac:	e00b      	b.n	8006fc6 <DMA_CheckFifoParam+0xe6>
      break;
 8006fae:	bf00      	nop
 8006fb0:	e00a      	b.n	8006fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e008      	b.n	8006fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e006      	b.n	8006fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8006fba:	bf00      	nop
 8006fbc:	e004      	b.n	8006fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8006fbe:	bf00      	nop
 8006fc0:	e002      	b.n	8006fc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8006fc2:	bf00      	nop
 8006fc4:	e000      	b.n	8006fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8006fc6:	bf00      	nop
    }
  } 
  
  return status; 
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop

08006fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b089      	sub	sp, #36	@ 0x24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61fb      	str	r3, [r7, #28]
 8006ff2:	e16b      	b.n	80072cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	4013      	ands	r3, r2
 8007006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	429a      	cmp	r2, r3
 800700e:	f040 815a 	bne.w	80072c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	2b01      	cmp	r3, #1
 800701c:	d005      	beq.n	800702a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007026:	2b02      	cmp	r3, #2
 8007028:	d130      	bne.n	800708c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	2203      	movs	r2, #3
 8007036:	fa02 f303 	lsl.w	r3, r2, r3
 800703a:	43db      	mvns	r3, r3
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	4013      	ands	r3, r2
 8007040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	fa02 f303 	lsl.w	r3, r2, r3
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	4313      	orrs	r3, r2
 8007052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007060:	2201      	movs	r2, #1
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	43db      	mvns	r3, r3
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	4013      	ands	r3, r2
 800706e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	091b      	lsrs	r3, r3, #4
 8007076:	f003 0201 	and.w	r2, r3, #1
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	fa02 f303 	lsl.w	r3, r2, r3
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	4313      	orrs	r3, r2
 8007084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f003 0303 	and.w	r3, r3, #3
 8007094:	2b03      	cmp	r3, #3
 8007096:	d017      	beq.n	80070c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	2203      	movs	r2, #3
 80070a4:	fa02 f303 	lsl.w	r3, r2, r3
 80070a8:	43db      	mvns	r3, r3
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	4013      	ands	r3, r2
 80070ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	fa02 f303 	lsl.w	r3, r2, r3
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	4313      	orrs	r3, r2
 80070c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f003 0303 	and.w	r3, r3, #3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d123      	bne.n	800711c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	08da      	lsrs	r2, r3, #3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3208      	adds	r2, #8
 80070dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	220f      	movs	r2, #15
 80070ec:	fa02 f303 	lsl.w	r3, r2, r3
 80070f0:	43db      	mvns	r3, r3
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	4013      	ands	r3, r2
 80070f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	691a      	ldr	r2, [r3, #16]
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	fa02 f303 	lsl.w	r3, r2, r3
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	4313      	orrs	r3, r2
 800710c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	08da      	lsrs	r2, r3, #3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3208      	adds	r2, #8
 8007116:	69b9      	ldr	r1, [r7, #24]
 8007118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	2203      	movs	r2, #3
 8007128:	fa02 f303 	lsl.w	r3, r2, r3
 800712c:	43db      	mvns	r3, r3
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	4013      	ands	r3, r2
 8007132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f003 0203 	and.w	r2, r3, #3
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	fa02 f303 	lsl.w	r3, r2, r3
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	4313      	orrs	r3, r2
 8007148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80b4 	beq.w	80072c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	4b60      	ldr	r3, [pc, #384]	@ (80072e4 <HAL_GPIO_Init+0x30c>)
 8007164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007166:	4a5f      	ldr	r2, [pc, #380]	@ (80072e4 <HAL_GPIO_Init+0x30c>)
 8007168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800716c:	6453      	str	r3, [r2, #68]	@ 0x44
 800716e:	4b5d      	ldr	r3, [pc, #372]	@ (80072e4 <HAL_GPIO_Init+0x30c>)
 8007170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800717a:	4a5b      	ldr	r2, [pc, #364]	@ (80072e8 <HAL_GPIO_Init+0x310>)
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	089b      	lsrs	r3, r3, #2
 8007180:	3302      	adds	r3, #2
 8007182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	220f      	movs	r2, #15
 8007192:	fa02 f303 	lsl.w	r3, r2, r3
 8007196:	43db      	mvns	r3, r3
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	4013      	ands	r3, r2
 800719c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a52      	ldr	r2, [pc, #328]	@ (80072ec <HAL_GPIO_Init+0x314>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d02b      	beq.n	80071fe <HAL_GPIO_Init+0x226>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a51      	ldr	r2, [pc, #324]	@ (80072f0 <HAL_GPIO_Init+0x318>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d025      	beq.n	80071fa <HAL_GPIO_Init+0x222>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a50      	ldr	r2, [pc, #320]	@ (80072f4 <HAL_GPIO_Init+0x31c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d01f      	beq.n	80071f6 <HAL_GPIO_Init+0x21e>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a4f      	ldr	r2, [pc, #316]	@ (80072f8 <HAL_GPIO_Init+0x320>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d019      	beq.n	80071f2 <HAL_GPIO_Init+0x21a>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a4e      	ldr	r2, [pc, #312]	@ (80072fc <HAL_GPIO_Init+0x324>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d013      	beq.n	80071ee <HAL_GPIO_Init+0x216>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a4d      	ldr	r2, [pc, #308]	@ (8007300 <HAL_GPIO_Init+0x328>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d00d      	beq.n	80071ea <HAL_GPIO_Init+0x212>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a4c      	ldr	r2, [pc, #304]	@ (8007304 <HAL_GPIO_Init+0x32c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d007      	beq.n	80071e6 <HAL_GPIO_Init+0x20e>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a4b      	ldr	r2, [pc, #300]	@ (8007308 <HAL_GPIO_Init+0x330>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d101      	bne.n	80071e2 <HAL_GPIO_Init+0x20a>
 80071de:	2307      	movs	r3, #7
 80071e0:	e00e      	b.n	8007200 <HAL_GPIO_Init+0x228>
 80071e2:	2308      	movs	r3, #8
 80071e4:	e00c      	b.n	8007200 <HAL_GPIO_Init+0x228>
 80071e6:	2306      	movs	r3, #6
 80071e8:	e00a      	b.n	8007200 <HAL_GPIO_Init+0x228>
 80071ea:	2305      	movs	r3, #5
 80071ec:	e008      	b.n	8007200 <HAL_GPIO_Init+0x228>
 80071ee:	2304      	movs	r3, #4
 80071f0:	e006      	b.n	8007200 <HAL_GPIO_Init+0x228>
 80071f2:	2303      	movs	r3, #3
 80071f4:	e004      	b.n	8007200 <HAL_GPIO_Init+0x228>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e002      	b.n	8007200 <HAL_GPIO_Init+0x228>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e000      	b.n	8007200 <HAL_GPIO_Init+0x228>
 80071fe:	2300      	movs	r3, #0
 8007200:	69fa      	ldr	r2, [r7, #28]
 8007202:	f002 0203 	and.w	r2, r2, #3
 8007206:	0092      	lsls	r2, r2, #2
 8007208:	4093      	lsls	r3, r2
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	4313      	orrs	r3, r2
 800720e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007210:	4935      	ldr	r1, [pc, #212]	@ (80072e8 <HAL_GPIO_Init+0x310>)
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	089b      	lsrs	r3, r3, #2
 8007216:	3302      	adds	r3, #2
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800721e:	4b3b      	ldr	r3, [pc, #236]	@ (800730c <HAL_GPIO_Init+0x334>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	43db      	mvns	r3, r3
 8007228:	69ba      	ldr	r2, [r7, #24]
 800722a:	4013      	ands	r3, r2
 800722c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007242:	4a32      	ldr	r2, [pc, #200]	@ (800730c <HAL_GPIO_Init+0x334>)
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007248:	4b30      	ldr	r3, [pc, #192]	@ (800730c <HAL_GPIO_Init+0x334>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	43db      	mvns	r3, r3
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	4013      	ands	r3, r2
 8007256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800726c:	4a27      	ldr	r2, [pc, #156]	@ (800730c <HAL_GPIO_Init+0x334>)
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007272:	4b26      	ldr	r3, [pc, #152]	@ (800730c <HAL_GPIO_Init+0x334>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	43db      	mvns	r3, r3
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	4013      	ands	r3, r2
 8007280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007296:	4a1d      	ldr	r2, [pc, #116]	@ (800730c <HAL_GPIO_Init+0x334>)
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800729c:	4b1b      	ldr	r3, [pc, #108]	@ (800730c <HAL_GPIO_Init+0x334>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	43db      	mvns	r3, r3
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	4013      	ands	r3, r2
 80072aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80072c0:	4a12      	ldr	r2, [pc, #72]	@ (800730c <HAL_GPIO_Init+0x334>)
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	3301      	adds	r3, #1
 80072ca:	61fb      	str	r3, [r7, #28]
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	2b0f      	cmp	r3, #15
 80072d0:	f67f ae90 	bls.w	8006ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop
 80072d8:	3724      	adds	r7, #36	@ 0x24
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	40023800 	.word	0x40023800
 80072e8:	40013800 	.word	0x40013800
 80072ec:	40020000 	.word	0x40020000
 80072f0:	40020400 	.word	0x40020400
 80072f4:	40020800 	.word	0x40020800
 80072f8:	40020c00 	.word	0x40020c00
 80072fc:	40021000 	.word	0x40021000
 8007300:	40021400 	.word	0x40021400
 8007304:	40021800 	.word	0x40021800
 8007308:	40021c00 	.word	0x40021c00
 800730c:	40013c00 	.word	0x40013c00

08007310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691a      	ldr	r2, [r3, #16]
 8007320:	887b      	ldrh	r3, [r7, #2]
 8007322:	4013      	ands	r3, r2
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007328:	2301      	movs	r3, #1
 800732a:	73fb      	strb	r3, [r7, #15]
 800732c:	e001      	b.n	8007332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007332:	7bfb      	ldrb	r3, [r7, #15]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	807b      	strh	r3, [r7, #2]
 800734c:	4613      	mov	r3, r2
 800734e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007350:	787b      	ldrb	r3, [r7, #1]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007356:	887a      	ldrh	r2, [r7, #2]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800735c:	e003      	b.n	8007366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800735e:	887b      	ldrh	r3, [r7, #2]
 8007360:	041a      	lsls	r2, r3, #16
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	619a      	str	r2, [r3, #24]
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007372:	b480      	push	{r7}
 8007374:	b085      	sub	sp, #20
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	460b      	mov	r3, r1
 800737c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007384:	887a      	ldrh	r2, [r7, #2]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4013      	ands	r3, r2
 800738a:	041a      	lsls	r2, r3, #16
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	43d9      	mvns	r1, r3
 8007390:	887b      	ldrh	r3, [r7, #2]
 8007392:	400b      	ands	r3, r1
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	619a      	str	r2, [r3, #24]
}
 800739a:	bf00      	nop
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
	...

080073a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	4603      	mov	r3, r0
 80073b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80073b2:	4b08      	ldr	r3, [pc, #32]	@ (80073d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073b4:	695a      	ldr	r2, [r3, #20]
 80073b6:	88fb      	ldrh	r3, [r7, #6]
 80073b8:	4013      	ands	r3, r2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d006      	beq.n	80073cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80073be:	4a05      	ldr	r2, [pc, #20]	@ (80073d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80073c4:	88fb      	ldrh	r3, [r7, #6]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fd f978 	bl	80046bc <HAL_GPIO_EXTI_Callback>
  }
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	40013c00 	.word	0x40013c00

080073d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e12b      	b.n	8007642 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d106      	bne.n	8007404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7fb fde8 	bl	8002fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2224      	movs	r2, #36	@ 0x24
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0201 	bic.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800742a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800743a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800743c:	f002 fddc 	bl	8009ff8 <HAL_RCC_GetPCLK1Freq>
 8007440:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	4a81      	ldr	r2, [pc, #516]	@ (800764c <HAL_I2C_Init+0x274>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d807      	bhi.n	800745c <HAL_I2C_Init+0x84>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4a80      	ldr	r2, [pc, #512]	@ (8007650 <HAL_I2C_Init+0x278>)
 8007450:	4293      	cmp	r3, r2
 8007452:	bf94      	ite	ls
 8007454:	2301      	movls	r3, #1
 8007456:	2300      	movhi	r3, #0
 8007458:	b2db      	uxtb	r3, r3
 800745a:	e006      	b.n	800746a <HAL_I2C_Init+0x92>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4a7d      	ldr	r2, [pc, #500]	@ (8007654 <HAL_I2C_Init+0x27c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	bf94      	ite	ls
 8007464:	2301      	movls	r3, #1
 8007466:	2300      	movhi	r3, #0
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e0e7      	b.n	8007642 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4a78      	ldr	r2, [pc, #480]	@ (8007658 <HAL_I2C_Init+0x280>)
 8007476:	fba2 2303 	umull	r2, r3, r2, r3
 800747a:	0c9b      	lsrs	r3, r3, #18
 800747c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	430a      	orrs	r2, r1
 8007490:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6a1b      	ldr	r3, [r3, #32]
 8007498:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	4a6a      	ldr	r2, [pc, #424]	@ (800764c <HAL_I2C_Init+0x274>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d802      	bhi.n	80074ac <HAL_I2C_Init+0xd4>
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	3301      	adds	r3, #1
 80074aa:	e009      	b.n	80074c0 <HAL_I2C_Init+0xe8>
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80074b2:	fb02 f303 	mul.w	r3, r2, r3
 80074b6:	4a69      	ldr	r2, [pc, #420]	@ (800765c <HAL_I2C_Init+0x284>)
 80074b8:	fba2 2303 	umull	r2, r3, r2, r3
 80074bc:	099b      	lsrs	r3, r3, #6
 80074be:	3301      	adds	r3, #1
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	6812      	ldr	r2, [r2, #0]
 80074c4:	430b      	orrs	r3, r1
 80074c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80074d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	495c      	ldr	r1, [pc, #368]	@ (800764c <HAL_I2C_Init+0x274>)
 80074dc:	428b      	cmp	r3, r1
 80074de:	d819      	bhi.n	8007514 <HAL_I2C_Init+0x13c>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	1e59      	subs	r1, r3, #1
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80074ee:	1c59      	adds	r1, r3, #1
 80074f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80074f4:	400b      	ands	r3, r1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <HAL_I2C_Init+0x138>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	1e59      	subs	r1, r3, #1
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	fbb1 f3f3 	udiv	r3, r1, r3
 8007508:	3301      	adds	r3, #1
 800750a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800750e:	e051      	b.n	80075b4 <HAL_I2C_Init+0x1dc>
 8007510:	2304      	movs	r3, #4
 8007512:	e04f      	b.n	80075b4 <HAL_I2C_Init+0x1dc>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d111      	bne.n	8007540 <HAL_I2C_Init+0x168>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	1e58      	subs	r0, r3, #1
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6859      	ldr	r1, [r3, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	440b      	add	r3, r1
 800752a:	fbb0 f3f3 	udiv	r3, r0, r3
 800752e:	3301      	adds	r3, #1
 8007530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007534:	2b00      	cmp	r3, #0
 8007536:	bf0c      	ite	eq
 8007538:	2301      	moveq	r3, #1
 800753a:	2300      	movne	r3, #0
 800753c:	b2db      	uxtb	r3, r3
 800753e:	e012      	b.n	8007566 <HAL_I2C_Init+0x18e>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	1e58      	subs	r0, r3, #1
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6859      	ldr	r1, [r3, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	440b      	add	r3, r1
 800754e:	0099      	lsls	r1, r3, #2
 8007550:	440b      	add	r3, r1
 8007552:	fbb0 f3f3 	udiv	r3, r0, r3
 8007556:	3301      	adds	r3, #1
 8007558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800755c:	2b00      	cmp	r3, #0
 800755e:	bf0c      	ite	eq
 8007560:	2301      	moveq	r3, #1
 8007562:	2300      	movne	r3, #0
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <HAL_I2C_Init+0x196>
 800756a:	2301      	movs	r3, #1
 800756c:	e022      	b.n	80075b4 <HAL_I2C_Init+0x1dc>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10e      	bne.n	8007594 <HAL_I2C_Init+0x1bc>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	1e58      	subs	r0, r3, #1
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6859      	ldr	r1, [r3, #4]
 800757e:	460b      	mov	r3, r1
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	440b      	add	r3, r1
 8007584:	fbb0 f3f3 	udiv	r3, r0, r3
 8007588:	3301      	adds	r3, #1
 800758a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800758e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007592:	e00f      	b.n	80075b4 <HAL_I2C_Init+0x1dc>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	1e58      	subs	r0, r3, #1
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6859      	ldr	r1, [r3, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	0099      	lsls	r1, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80075aa:	3301      	adds	r3, #1
 80075ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	6809      	ldr	r1, [r1, #0]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	69da      	ldr	r2, [r3, #28]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80075e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6911      	ldr	r1, [r2, #16]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	68d2      	ldr	r2, [r2, #12]
 80075ee:	4311      	orrs	r1, r2
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	6812      	ldr	r2, [r2, #0]
 80075f4:	430b      	orrs	r3, r1
 80075f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	695a      	ldr	r2, [r3, #20]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	431a      	orrs	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 0201 	orr.w	r2, r2, #1
 8007622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2220      	movs	r2, #32
 800762e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	000186a0 	.word	0x000186a0
 8007650:	001e847f 	.word	0x001e847f
 8007654:	003d08ff 	.word	0x003d08ff
 8007658:	431bde83 	.word	0x431bde83
 800765c:	10624dd3 	.word	0x10624dd3

08007660 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007672:	2b80      	cmp	r3, #128	@ 0x80
 8007674:	d103      	bne.n	800767e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2200      	movs	r2, #0
 800767c:	611a      	str	r2, [r3, #16]
  }
}
 800767e:	bf00      	nop
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
	...

0800768c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af02      	add	r7, sp, #8
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	607a      	str	r2, [r7, #4]
 8007696:	461a      	mov	r2, r3
 8007698:	460b      	mov	r3, r1
 800769a:	817b      	strh	r3, [r7, #10]
 800769c:	4613      	mov	r3, r2
 800769e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076a0:	f7fe fa10 	bl	8005ac4 <HAL_GetTick>
 80076a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	f040 80e0 	bne.w	8007874 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	2319      	movs	r3, #25
 80076ba:	2201      	movs	r2, #1
 80076bc:	4970      	ldr	r1, [pc, #448]	@ (8007880 <HAL_I2C_Master_Transmit+0x1f4>)
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f001 fdea 	bl	8009298 <I2C_WaitOnFlagUntilTimeout>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80076ca:	2302      	movs	r3, #2
 80076cc:	e0d3      	b.n	8007876 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_I2C_Master_Transmit+0x50>
 80076d8:	2302      	movs	r3, #2
 80076da:	e0cc      	b.n	8007876 <HAL_I2C_Master_Transmit+0x1ea>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d007      	beq.n	8007702 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f042 0201 	orr.w	r2, r2, #1
 8007700:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007710:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2221      	movs	r2, #33	@ 0x21
 8007716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2210      	movs	r2, #16
 800771e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	893a      	ldrh	r2, [r7, #8]
 8007732:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4a50      	ldr	r2, [pc, #320]	@ (8007884 <HAL_I2C_Master_Transmit+0x1f8>)
 8007742:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007744:	8979      	ldrh	r1, [r7, #10]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	6a3a      	ldr	r2, [r7, #32]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f001 fc7a 	bl	8009044 <I2C_MasterRequestWrite>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e08d      	b.n	8007876 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800775a:	2300      	movs	r3, #0
 800775c:	613b      	str	r3, [r7, #16]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	613b      	str	r3, [r7, #16]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	613b      	str	r3, [r7, #16]
 800776e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007770:	e066      	b.n	8007840 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	6a39      	ldr	r1, [r7, #32]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f001 fea8 	bl	80094cc <I2C_WaitOnTXEFlagUntilTimeout>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00d      	beq.n	800779e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007786:	2b04      	cmp	r3, #4
 8007788:	d107      	bne.n	800779a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007798:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e06b      	b.n	8007876 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a2:	781a      	ldrb	r2, [r3, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	f003 0304 	and.w	r3, r3, #4
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d11b      	bne.n	8007814 <HAL_I2C_Master_Transmit+0x188>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d017      	beq.n	8007814 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e8:	781a      	ldrb	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800780c:	3b01      	subs	r3, #1
 800780e:	b29a      	uxth	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	6a39      	ldr	r1, [r7, #32]
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f001 fe9f 	bl	800955c <I2C_WaitOnBTFFlagUntilTimeout>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00d      	beq.n	8007840 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007828:	2b04      	cmp	r3, #4
 800782a:	d107      	bne.n	800783c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800783a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e01a      	b.n	8007876 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007844:	2b00      	cmp	r3, #0
 8007846:	d194      	bne.n	8007772 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2220      	movs	r2, #32
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	e000      	b.n	8007876 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007874:	2302      	movs	r3, #2
  }
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	00100002 	.word	0x00100002
 8007884:	ffff0000 	.word	0xffff0000

08007888 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007890:	2300      	movs	r3, #0
 8007892:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	2b10      	cmp	r3, #16
 80078b6:	d003      	beq.n	80078c0 <HAL_I2C_EV_IRQHandler+0x38>
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	2b40      	cmp	r3, #64	@ 0x40
 80078bc:	f040 80b1 	bne.w	8007a22 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10d      	bne.n	80078f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80078e0:	d003      	beq.n	80078ea <HAL_I2C_EV_IRQHandler+0x62>
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80078e8:	d101      	bne.n	80078ee <HAL_I2C_EV_IRQHandler+0x66>
 80078ea:	2301      	movs	r3, #1
 80078ec:	e000      	b.n	80078f0 <HAL_I2C_EV_IRQHandler+0x68>
 80078ee:	2300      	movs	r3, #0
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	f000 8114 	beq.w	8007b1e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00b      	beq.n	8007918 <HAL_I2C_EV_IRQHandler+0x90>
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007906:	2b00      	cmp	r3, #0
 8007908:	d006      	beq.n	8007918 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f001 fecf 	bl	80096ae <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fd7a 	bl	800840a <I2C_Master_SB>
 8007916:	e083      	b.n	8007a20 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	f003 0308 	and.w	r3, r3, #8
 800791e:	2b00      	cmp	r3, #0
 8007920:	d008      	beq.n	8007934 <HAL_I2C_EV_IRQHandler+0xac>
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fdf2 	bl	8008516 <I2C_Master_ADD10>
 8007932:	e075      	b.n	8007a20 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d008      	beq.n	8007950 <HAL_I2C_EV_IRQHandler+0xc8>
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007944:	2b00      	cmp	r3, #0
 8007946:	d003      	beq.n	8007950 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fe0e 	bl	800856a <I2C_Master_ADDR>
 800794e:	e067      	b.n	8007a20 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	f003 0304 	and.w	r3, r3, #4
 8007956:	2b00      	cmp	r3, #0
 8007958:	d036      	beq.n	80079c8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007968:	f000 80db 	beq.w	8007b22 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00d      	beq.n	8007992 <HAL_I2C_EV_IRQHandler+0x10a>
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800797c:	2b00      	cmp	r3, #0
 800797e:	d008      	beq.n	8007992 <HAL_I2C_EV_IRQHandler+0x10a>
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	f003 0304 	and.w	r3, r3, #4
 8007986:	2b00      	cmp	r3, #0
 8007988:	d103      	bne.n	8007992 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f9d6 	bl	8007d3c <I2C_MasterTransmit_TXE>
 8007990:	e046      	b.n	8007a20 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	f003 0304 	and.w	r3, r3, #4
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 80c2 	beq.w	8007b22 <HAL_I2C_EV_IRQHandler+0x29a>
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 80bc 	beq.w	8007b22 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b21      	cmp	r3, #33	@ 0x21
 80079ae:	d103      	bne.n	80079b8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fa5f 	bl	8007e74 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079b6:	e0b4      	b.n	8007b22 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	2b40      	cmp	r3, #64	@ 0x40
 80079bc:	f040 80b1 	bne.w	8007b22 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 facd 	bl	8007f60 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80079c6:	e0ac      	b.n	8007b22 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079d6:	f000 80a4 	beq.w	8007b22 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00d      	beq.n	8007a00 <HAL_I2C_EV_IRQHandler+0x178>
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d008      	beq.n	8007a00 <HAL_I2C_EV_IRQHandler+0x178>
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d103      	bne.n	8007a00 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fb49 	bl	8008090 <I2C_MasterReceive_RXNE>
 80079fe:	e00f      	b.n	8007a20 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 808b 	beq.w	8007b22 <HAL_I2C_EV_IRQHandler+0x29a>
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 8085 	beq.w	8007b22 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fc01 	bl	8008220 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a1e:	e080      	b.n	8007b22 <HAL_I2C_EV_IRQHandler+0x29a>
 8007a20:	e07f      	b.n	8007b22 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d004      	beq.n	8007a34 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	695b      	ldr	r3, [r3, #20]
 8007a30:	61fb      	str	r3, [r7, #28]
 8007a32:	e007      	b.n	8007a44 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d011      	beq.n	8007a72 <HAL_I2C_EV_IRQHandler+0x1ea>
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00c      	beq.n	8007a72 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007a68:	69b9      	ldr	r1, [r7, #24]
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 ffcc 	bl	8008a08 <I2C_Slave_ADDR>
 8007a70:	e05a      	b.n	8007b28 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	f003 0310 	and.w	r3, r3, #16
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d008      	beq.n	8007a8e <HAL_I2C_EV_IRQHandler+0x206>
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 f806 	bl	8008a98 <I2C_Slave_STOPF>
 8007a8c:	e04c      	b.n	8007b28 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	2b21      	cmp	r3, #33	@ 0x21
 8007a92:	d002      	beq.n	8007a9a <HAL_I2C_EV_IRQHandler+0x212>
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b29      	cmp	r3, #41	@ 0x29
 8007a98:	d120      	bne.n	8007adc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00d      	beq.n	8007ac0 <HAL_I2C_EV_IRQHandler+0x238>
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d008      	beq.n	8007ac0 <HAL_I2C_EV_IRQHandler+0x238>
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d103      	bne.n	8007ac0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fee7 	bl	800888c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007abe:	e032      	b.n	8007b26 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d02d      	beq.n	8007b26 <HAL_I2C_EV_IRQHandler+0x29e>
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d028      	beq.n	8007b26 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 ff16 	bl	8008906 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007ada:	e024      	b.n	8007b26 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00d      	beq.n	8007b02 <HAL_I2C_EV_IRQHandler+0x27a>
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d008      	beq.n	8007b02 <HAL_I2C_EV_IRQHandler+0x27a>
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	f003 0304 	and.w	r3, r3, #4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d103      	bne.n	8007b02 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 ff24 	bl	8008948 <I2C_SlaveReceive_RXNE>
 8007b00:	e012      	b.n	8007b28 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	f003 0304 	and.w	r3, r3, #4
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00d      	beq.n	8007b28 <HAL_I2C_EV_IRQHandler+0x2a0>
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d008      	beq.n	8007b28 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 ff54 	bl	80089c4 <I2C_SlaveReceive_BTF>
 8007b1c:	e004      	b.n	8007b28 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8007b1e:	bf00      	nop
 8007b20:	e002      	b.n	8007b28 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b22:	bf00      	nop
 8007b24:	e000      	b.n	8007b28 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007b26:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007b28:	3720      	adds	r7, #32
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b08a      	sub	sp, #40	@ 0x28
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007b46:	2300      	movs	r3, #0
 8007b48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b50:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00d      	beq.n	8007b78 <HAL_I2C_ER_IRQHandler+0x4a>
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d008      	beq.n	8007b78 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	f043 0301 	orr.w	r3, r3, #1
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b76:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00d      	beq.n	8007b9e <HAL_I2C_ER_IRQHandler+0x70>
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d008      	beq.n	8007b9e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8e:	f043 0302 	orr.w	r3, r3, #2
 8007b92:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8007b9c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d03e      	beq.n	8007c26 <HAL_I2C_ER_IRQHandler+0xf8>
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d039      	beq.n	8007c26 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8007bb2:	7efb      	ldrb	r3, [r7, #27]
 8007bb4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bc4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bca:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007bcc:	7ebb      	ldrb	r3, [r7, #26]
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	d112      	bne.n	8007bf8 <HAL_I2C_ER_IRQHandler+0xca>
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10f      	bne.n	8007bf8 <HAL_I2C_ER_IRQHandler+0xca>
 8007bd8:	7cfb      	ldrb	r3, [r7, #19]
 8007bda:	2b21      	cmp	r3, #33	@ 0x21
 8007bdc:	d008      	beq.n	8007bf0 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007bde:	7cfb      	ldrb	r3, [r7, #19]
 8007be0:	2b29      	cmp	r3, #41	@ 0x29
 8007be2:	d005      	beq.n	8007bf0 <HAL_I2C_ER_IRQHandler+0xc2>
 8007be4:	7cfb      	ldrb	r3, [r7, #19]
 8007be6:	2b28      	cmp	r3, #40	@ 0x28
 8007be8:	d106      	bne.n	8007bf8 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b21      	cmp	r3, #33	@ 0x21
 8007bee:	d103      	bne.n	8007bf8 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f001 f881 	bl	8008cf8 <I2C_Slave_AF>
 8007bf6:	e016      	b.n	8007c26 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c00:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	f043 0304 	orr.w	r3, r3, #4
 8007c08:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007c0a:	7efb      	ldrb	r3, [r7, #27]
 8007c0c:	2b10      	cmp	r3, #16
 8007c0e:	d002      	beq.n	8007c16 <HAL_I2C_ER_IRQHandler+0xe8>
 8007c10:	7efb      	ldrb	r3, [r7, #27]
 8007c12:	2b40      	cmp	r3, #64	@ 0x40
 8007c14:	d107      	bne.n	8007c26 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c24:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00d      	beq.n	8007c4c <HAL_I2C_ER_IRQHandler+0x11e>
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d008      	beq.n	8007c4c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3c:	f043 0308 	orr.w	r3, r3, #8
 8007c40:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8007c4a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d008      	beq.n	8007c64 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 f8be 	bl	8008de0 <I2C_ITError>
  }
}
 8007c64:	bf00      	nop
 8007c66:	3728      	adds	r7, #40	@ 0x28
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d58:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d150      	bne.n	8007e04 <I2C_MasterTransmit_TXE+0xc8>
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	2b21      	cmp	r3, #33	@ 0x21
 8007d66:	d14d      	bne.n	8007e04 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	2b08      	cmp	r3, #8
 8007d6c:	d01d      	beq.n	8007daa <I2C_MasterTransmit_TXE+0x6e>
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	d01a      	beq.n	8007daa <I2C_MasterTransmit_TXE+0x6e>
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007d7a:	d016      	beq.n	8007daa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007d8a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2211      	movs	r2, #17
 8007d90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7ff ff62 	bl	8007c6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007da8:	e060      	b.n	8007e6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007db8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dc8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b40      	cmp	r3, #64	@ 0x40
 8007de2:	d107      	bne.n	8007df4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff ff7d 	bl	8007cec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007df2:	e03b      	b.n	8007e6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff ff35 	bl	8007c6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007e02:	e033      	b.n	8007e6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	2b21      	cmp	r3, #33	@ 0x21
 8007e08:	d005      	beq.n	8007e16 <I2C_MasterTransmit_TXE+0xda>
 8007e0a:	7bbb      	ldrb	r3, [r7, #14]
 8007e0c:	2b40      	cmp	r3, #64	@ 0x40
 8007e0e:	d12d      	bne.n	8007e6c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	2b22      	cmp	r3, #34	@ 0x22
 8007e14:	d12a      	bne.n	8007e6c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d108      	bne.n	8007e32 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e2e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007e30:	e01c      	b.n	8007e6c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b40      	cmp	r3, #64	@ 0x40
 8007e3c:	d103      	bne.n	8007e46 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f88e 	bl	8007f60 <I2C_MemoryTransmit_TXE_BTF>
}
 8007e44:	e012      	b.n	8007e6c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e4a:	781a      	ldrb	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e56:	1c5a      	adds	r2, r3, #1
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007e6a:	e7ff      	b.n	8007e6c <I2C_MasterTransmit_TXE+0x130>
 8007e6c:	bf00      	nop
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e80:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b21      	cmp	r3, #33	@ 0x21
 8007e8c:	d164      	bne.n	8007f58 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d012      	beq.n	8007ebe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9c:	781a      	ldrb	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007ebc:	e04c      	b.n	8007f58 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d01d      	beq.n	8007f00 <I2C_MasterTransmit_BTF+0x8c>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	d01a      	beq.n	8007f00 <I2C_MasterTransmit_BTF+0x8c>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ed0:	d016      	beq.n	8007f00 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007ee0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2211      	movs	r2, #17
 8007ee6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff feb7 	bl	8007c6c <HAL_I2C_MasterTxCpltCallback>
}
 8007efe:	e02b      	b.n	8007f58 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007f0e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f1e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b40      	cmp	r3, #64	@ 0x40
 8007f38:	d107      	bne.n	8007f4a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff fed2 	bl	8007cec <HAL_I2C_MemTxCpltCallback>
}
 8007f48:	e006      	b.n	8007f58 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7ff fe8a 	bl	8007c6c <HAL_I2C_MasterTxCpltCallback>
}
 8007f58:	bf00      	nop
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d11d      	bne.n	8007fb4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d10b      	bne.n	8007f98 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f90:	1c9a      	adds	r2, r3, #2
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8007f96:	e077      	b.n	8008088 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	121b      	asrs	r3, r3, #8
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007fb2:	e069      	b.n	8008088 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d10b      	bne.n	8007fd4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fcc:	1c5a      	adds	r2, r3, #1
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007fd2:	e059      	b.n	8008088 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d152      	bne.n	8008082 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	2b22      	cmp	r3, #34	@ 0x22
 8007fe0:	d10d      	bne.n	8007ffe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ff0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007ffc:	e044      	b.n	8008088 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008002:	b29b      	uxth	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d015      	beq.n	8008034 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	2b21      	cmp	r3, #33	@ 0x21
 800800c:	d112      	bne.n	8008034 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008012:	781a      	ldrb	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801e:	1c5a      	adds	r2, r3, #1
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008028:	b29b      	uxth	r3, r3
 800802a:	3b01      	subs	r3, #1
 800802c:	b29a      	uxth	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008032:	e029      	b.n	8008088 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008038:	b29b      	uxth	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d124      	bne.n	8008088 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	2b21      	cmp	r3, #33	@ 0x21
 8008042:	d121      	bne.n	8008088 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008052:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008062:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2220      	movs	r2, #32
 800806e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7ff fe36 	bl	8007cec <HAL_I2C_MemTxCpltCallback>
}
 8008080:	e002      	b.n	8008088 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7ff faec 	bl	8007660 <I2C_Flush_DR>
}
 8008088:	bf00      	nop
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b22      	cmp	r3, #34	@ 0x22
 80080a2:	f040 80b9 	bne.w	8008218 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080aa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d921      	bls.n	80080fe <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	691a      	ldr	r2, [r3, #16]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c4:	b2d2      	uxtb	r2, r2
 80080c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	3b01      	subs	r3, #1
 80080da:	b29a      	uxth	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	f040 8096 	bne.w	8008218 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080fa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80080fc:	e08c      	b.n	8008218 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008102:	2b02      	cmp	r3, #2
 8008104:	d07f      	beq.n	8008206 <I2C_MasterReceive_RXNE+0x176>
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d002      	beq.n	8008112 <I2C_MasterReceive_RXNE+0x82>
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d179      	bne.n	8008206 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 fa6a 	bl	80095ec <I2C_WaitOnSTOPRequestThroughIT>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d14c      	bne.n	80081b8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800812c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800813c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	691a      	ldr	r2, [r3, #16]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008148:	b2d2      	uxtb	r2, r2
 800814a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29a      	uxth	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2220      	movs	r2, #32
 8008168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b40      	cmp	r3, #64	@ 0x40
 8008176:	d10a      	bne.n	800818e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7ff fdba 	bl	8007d00 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800818c:	e044      	b.n	8008218 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b08      	cmp	r3, #8
 800819a:	d002      	beq.n	80081a2 <I2C_MasterReceive_RXNE+0x112>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b20      	cmp	r3, #32
 80081a0:	d103      	bne.n	80081aa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80081a8:	e002      	b.n	80081b0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2212      	movs	r2, #18
 80081ae:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff fd65 	bl	8007c80 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80081b6:	e02f      	b.n	8008218 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80081c6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691a      	ldr	r2, [r3, #16]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff fd88 	bl	8007d14 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008204:	e008      	b.n	8008218 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008214:	605a      	str	r2, [r3, #4]
}
 8008216:	e7ff      	b.n	8008218 <I2C_MasterReceive_RXNE+0x188>
 8008218:	bf00      	nop
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008232:	b29b      	uxth	r3, r3
 8008234:	2b04      	cmp	r3, #4
 8008236:	d11b      	bne.n	8008270 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008246:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	691a      	ldr	r2, [r3, #16]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008252:	b2d2      	uxtb	r2, r2
 8008254:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008264:	b29b      	uxth	r3, r3
 8008266:	3b01      	subs	r3, #1
 8008268:	b29a      	uxth	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800826e:	e0c8      	b.n	8008402 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008274:	b29b      	uxth	r3, r3
 8008276:	2b03      	cmp	r3, #3
 8008278:	d129      	bne.n	80082ce <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	685a      	ldr	r2, [r3, #4]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008288:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2b04      	cmp	r3, #4
 800828e:	d00a      	beq.n	80082a6 <I2C_MasterReceive_BTF+0x86>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b02      	cmp	r3, #2
 8008294:	d007      	beq.n	80082a6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	691a      	ldr	r2, [r3, #16]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b0:	b2d2      	uxtb	r2, r2
 80082b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80082cc:	e099      	b.n	8008402 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	f040 8081 	bne.w	80083dc <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d002      	beq.n	80082e6 <I2C_MasterReceive_BTF+0xc6>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b10      	cmp	r3, #16
 80082e4:	d108      	bne.n	80082f8 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082f4:	601a      	str	r2, [r3, #0]
 80082f6:	e019      	b.n	800832c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2b04      	cmp	r3, #4
 80082fc:	d002      	beq.n	8008304 <I2C_MasterReceive_BTF+0xe4>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b02      	cmp	r3, #2
 8008302:	d108      	bne.n	8008316 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	e00a      	b.n	800832c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b10      	cmp	r3, #16
 800831a:	d007      	beq.n	800832c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800832a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008336:	b2d2      	uxtb	r2, r2
 8008338:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008348:	b29b      	uxth	r3, r3
 800834a:	3b01      	subs	r3, #1
 800834c:	b29a      	uxth	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	691a      	ldr	r2, [r3, #16]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835c:	b2d2      	uxtb	r2, r2
 800835e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800836e:	b29b      	uxth	r3, r3
 8008370:	3b01      	subs	r3, #1
 8008372:	b29a      	uxth	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008386:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2220      	movs	r2, #32
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b40      	cmp	r3, #64	@ 0x40
 800839a:	d10a      	bne.n	80083b2 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff fca8 	bl	8007d00 <HAL_I2C_MemRxCpltCallback>
}
 80083b0:	e027      	b.n	8008402 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d002      	beq.n	80083c6 <I2C_MasterReceive_BTF+0x1a6>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b20      	cmp	r3, #32
 80083c4:	d103      	bne.n	80083ce <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80083cc:	e002      	b.n	80083d4 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2212      	movs	r2, #18
 80083d2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7ff fc53 	bl	8007c80 <HAL_I2C_MasterRxCpltCallback>
}
 80083da:	e012      	b.n	8008402 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	691a      	ldr	r2, [r3, #16]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	3b01      	subs	r3, #1
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8008402:	bf00      	nop
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b40      	cmp	r3, #64	@ 0x40
 800841c:	d117      	bne.n	800844e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008422:	2b00      	cmp	r3, #0
 8008424:	d109      	bne.n	800843a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800842a:	b2db      	uxtb	r3, r3
 800842c:	461a      	mov	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008436:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008438:	e067      	b.n	800850a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800843e:	b2db      	uxtb	r3, r3
 8008440:	f043 0301 	orr.w	r3, r3, #1
 8008444:	b2da      	uxtb	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	611a      	str	r2, [r3, #16]
}
 800844c:	e05d      	b.n	800850a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008456:	d133      	bne.n	80084c0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800845e:	b2db      	uxtb	r3, r3
 8008460:	2b21      	cmp	r3, #33	@ 0x21
 8008462:	d109      	bne.n	8008478 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008468:	b2db      	uxtb	r3, r3
 800846a:	461a      	mov	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008474:	611a      	str	r2, [r3, #16]
 8008476:	e008      	b.n	800848a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800847c:	b2db      	uxtb	r3, r3
 800847e:	f043 0301 	orr.w	r3, r3, #1
 8008482:	b2da      	uxtb	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800848e:	2b00      	cmp	r3, #0
 8008490:	d004      	beq.n	800849c <I2C_Master_SB+0x92>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008498:	2b00      	cmp	r3, #0
 800849a:	d108      	bne.n	80084ae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d032      	beq.n	800850a <I2C_Master_SB+0x100>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d02d      	beq.n	800850a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	685a      	ldr	r2, [r3, #4]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084bc:	605a      	str	r2, [r3, #4]
}
 80084be:	e024      	b.n	800850a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10e      	bne.n	80084e6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	11db      	asrs	r3, r3, #7
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	f003 0306 	and.w	r3, r3, #6
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	f063 030f 	orn	r3, r3, #15
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	611a      	str	r2, [r3, #16]
}
 80084e4:	e011      	b.n	800850a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d10d      	bne.n	800850a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	11db      	asrs	r3, r3, #7
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	f003 0306 	and.w	r3, r3, #6
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	f063 030e 	orn	r3, r3, #14
 8008502:	b2da      	uxtb	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	611a      	str	r2, [r3, #16]
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008522:	b2da      	uxtb	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800852e:	2b00      	cmp	r3, #0
 8008530:	d004      	beq.n	800853c <I2C_Master_ADD10+0x26>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008538:	2b00      	cmp	r3, #0
 800853a:	d108      	bne.n	800854e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00c      	beq.n	800855e <I2C_Master_ADD10+0x48>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800854a:	2b00      	cmp	r3, #0
 800854c:	d007      	beq.n	800855e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800855c:	605a      	str	r2, [r3, #4]
  }
}
 800855e:	bf00      	nop
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800856a:	b480      	push	{r7}
 800856c:	b091      	sub	sp, #68	@ 0x44
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008578:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008580:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008586:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800858e:	b2db      	uxtb	r3, r3
 8008590:	2b22      	cmp	r3, #34	@ 0x22
 8008592:	f040 8169 	bne.w	8008868 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10f      	bne.n	80085be <I2C_Master_ADDR+0x54>
 800859e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80085a2:	2b40      	cmp	r3, #64	@ 0x40
 80085a4:	d10b      	bne.n	80085be <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085a6:	2300      	movs	r3, #0
 80085a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80085ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085bc:	e160      	b.n	8008880 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d11d      	bne.n	8008602 <I2C_Master_ADDR+0x98>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80085ce:	d118      	bne.n	8008602 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085d0:	2300      	movs	r3, #0
 80085d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085f4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8008600:	e13e      	b.n	8008880 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008606:	b29b      	uxth	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d113      	bne.n	8008634 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800860c:	2300      	movs	r3, #0
 800860e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008620:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	e115      	b.n	8008860 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008638:	b29b      	uxth	r3, r3
 800863a:	2b01      	cmp	r3, #1
 800863c:	f040 808a 	bne.w	8008754 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008642:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008646:	d137      	bne.n	80086b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008656:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008662:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008666:	d113      	bne.n	8008690 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008676:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008678:	2300      	movs	r3, #0
 800867a:	627b      	str	r3, [r7, #36]	@ 0x24
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	627b      	str	r3, [r7, #36]	@ 0x24
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	627b      	str	r3, [r7, #36]	@ 0x24
 800868c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868e:	e0e7      	b.n	8008860 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008690:	2300      	movs	r3, #0
 8008692:	623b      	str	r3, [r7, #32]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	623b      	str	r3, [r7, #32]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	623b      	str	r3, [r7, #32]
 80086a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	e0d3      	b.n	8008860 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80086b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ba:	2b08      	cmp	r3, #8
 80086bc:	d02e      	beq.n	800871c <I2C_Master_ADDR+0x1b2>
 80086be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c0:	2b20      	cmp	r3, #32
 80086c2:	d02b      	beq.n	800871c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80086c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c6:	2b12      	cmp	r3, #18
 80086c8:	d102      	bne.n	80086d0 <I2C_Master_ADDR+0x166>
 80086ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d125      	bne.n	800871c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80086d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	d00e      	beq.n	80086f4 <I2C_Master_ADDR+0x18a>
 80086d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d00b      	beq.n	80086f4 <I2C_Master_ADDR+0x18a>
 80086dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086de:	2b10      	cmp	r3, #16
 80086e0:	d008      	beq.n	80086f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086f0:	601a      	str	r2, [r3, #0]
 80086f2:	e007      	b.n	8008704 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008702:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008704:	2300      	movs	r3, #0
 8008706:	61fb      	str	r3, [r7, #28]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	61fb      	str	r3, [r7, #28]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	61fb      	str	r3, [r7, #28]
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	e0a1      	b.n	8008860 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800872a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800872c:	2300      	movs	r3, #0
 800872e:	61bb      	str	r3, [r7, #24]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	61bb      	str	r3, [r7, #24]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	61bb      	str	r3, [r7, #24]
 8008740:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	e085      	b.n	8008860 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b02      	cmp	r3, #2
 800875c:	d14d      	bne.n	80087fa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800875e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008760:	2b04      	cmp	r3, #4
 8008762:	d016      	beq.n	8008792 <I2C_Master_ADDR+0x228>
 8008764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008766:	2b02      	cmp	r3, #2
 8008768:	d013      	beq.n	8008792 <I2C_Master_ADDR+0x228>
 800876a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876c:	2b10      	cmp	r3, #16
 800876e:	d010      	beq.n	8008792 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800877e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	e007      	b.n	80087a2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80087a0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087b0:	d117      	bne.n	80087e2 <I2C_Master_ADDR+0x278>
 80087b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80087b8:	d00b      	beq.n	80087d2 <I2C_Master_ADDR+0x268>
 80087ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d008      	beq.n	80087d2 <I2C_Master_ADDR+0x268>
 80087c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d005      	beq.n	80087d2 <I2C_Master_ADDR+0x268>
 80087c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c8:	2b10      	cmp	r3, #16
 80087ca:	d002      	beq.n	80087d2 <I2C_Master_ADDR+0x268>
 80087cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d107      	bne.n	80087e2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80087e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087e2:	2300      	movs	r3, #0
 80087e4:	617b      	str	r3, [r7, #20]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	617b      	str	r3, [r7, #20]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	e032      	b.n	8008860 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008808:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008818:	d117      	bne.n	800884a <I2C_Master_ADDR+0x2e0>
 800881a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008820:	d00b      	beq.n	800883a <I2C_Master_ADDR+0x2d0>
 8008822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008824:	2b01      	cmp	r3, #1
 8008826:	d008      	beq.n	800883a <I2C_Master_ADDR+0x2d0>
 8008828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882a:	2b08      	cmp	r3, #8
 800882c:	d005      	beq.n	800883a <I2C_Master_ADDR+0x2d0>
 800882e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008830:	2b10      	cmp	r3, #16
 8008832:	d002      	beq.n	800883a <I2C_Master_ADDR+0x2d0>
 8008834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008836:	2b20      	cmp	r3, #32
 8008838:	d107      	bne.n	800884a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008848:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800884a:	2300      	movs	r3, #0
 800884c:	613b      	str	r3, [r7, #16]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	613b      	str	r3, [r7, #16]
 800885e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008866:	e00b      	b.n	8008880 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	68fb      	ldr	r3, [r7, #12]
}
 800887e:	e7ff      	b.n	8008880 <I2C_Master_ADDR+0x316>
 8008880:	bf00      	nop
 8008882:	3744      	adds	r7, #68	@ 0x44
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800889a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d02b      	beq.n	80088fe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088aa:	781a      	ldrb	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b6:	1c5a      	adds	r2, r3, #1
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	3b01      	subs	r3, #1
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d114      	bne.n	80088fe <I2C_SlaveTransmit_TXE+0x72>
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
 80088d6:	2b29      	cmp	r3, #41	@ 0x29
 80088d8:	d111      	bne.n	80088fe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2221      	movs	r2, #33	@ 0x21
 80088ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2228      	movs	r2, #40	@ 0x28
 80088f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff f9cb 	bl	8007c94 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80088fe:	bf00      	nop
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008906:	b480      	push	{r7}
 8008908:	b083      	sub	sp, #12
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008912:	b29b      	uxth	r3, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	d011      	beq.n	800893c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800891c:	781a      	ldrb	r2, [r3, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008932:	b29b      	uxth	r3, r3
 8008934:	3b01      	subs	r3, #1
 8008936:	b29a      	uxth	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008956:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800895c:	b29b      	uxth	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d02c      	beq.n	80089bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	691a      	ldr	r2, [r3, #16]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800896c:	b2d2      	uxtb	r2, r2
 800896e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008974:	1c5a      	adds	r2, r3, #1
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800897e:	b29b      	uxth	r3, r3
 8008980:	3b01      	subs	r3, #1
 8008982:	b29a      	uxth	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800898c:	b29b      	uxth	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d114      	bne.n	80089bc <I2C_SlaveReceive_RXNE+0x74>
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	2b2a      	cmp	r3, #42	@ 0x2a
 8008996:	d111      	bne.n	80089bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2222      	movs	r2, #34	@ 0x22
 80089ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2228      	movs	r2, #40	@ 0x28
 80089b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7ff f976 	bl	8007ca8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80089bc:	bf00      	nop
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d012      	beq.n	80089fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	691a      	ldr	r2, [r3, #16]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e0:	b2d2      	uxtb	r2, r2
 80089e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	3b01      	subs	r3, #1
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008a22:	2b28      	cmp	r3, #40	@ 0x28
 8008a24:	d125      	bne.n	8008a72 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a34:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008a40:	2301      	movs	r3, #1
 8008a42:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d103      	bne.n	8008a56 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	81bb      	strh	r3, [r7, #12]
 8008a54:	e002      	b.n	8008a5c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	699b      	ldr	r3, [r3, #24]
 8008a5a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008a64:	89ba      	ldrh	r2, [r7, #12]
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7ff f926 	bl	8007cbc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008a70:	e00e      	b.n	8008a90 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a72:	2300      	movs	r3, #0
 8008a74:	60bb      	str	r3, [r7, #8]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	60bb      	str	r3, [r7, #8]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	60bb      	str	r3, [r7, #8]
 8008a86:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008a90:	bf00      	nop
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008aa6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008ab6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60bb      	str	r3, [r7, #8]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	60bb      	str	r3, [r7, #8]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f042 0201 	orr.w	r2, r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ae4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008af4:	d172      	bne.n	8008bdc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	2b22      	cmp	r3, #34	@ 0x22
 8008afa:	d002      	beq.n	8008b02 <I2C_Slave_STOPF+0x6a>
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b00:	d135      	bne.n	8008b6e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d005      	beq.n	8008b26 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b1e:	f043 0204 	orr.w	r2, r3, #4
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe f95e 	bl	8006dfc <HAL_DMA_GetState>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d049      	beq.n	8008bda <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4a:	4a69      	ldr	r2, [pc, #420]	@ (8008cf0 <I2C_Slave_STOPF+0x258>)
 8008b4c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fd ffa6 	bl	8006aa4 <HAL_DMA_Abort_IT>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d03d      	beq.n	8008bda <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008b68:	4610      	mov	r0, r2
 8008b6a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b6c:	e035      	b.n	8008bda <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d005      	beq.n	8008b92 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8a:	f043 0204 	orr.w	r2, r3, #4
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ba0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe f928 	bl	8006dfc <HAL_DMA_GetState>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d014      	beq.n	8008bdc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bb6:	4a4e      	ldr	r2, [pc, #312]	@ (8008cf0 <I2C_Slave_STOPF+0x258>)
 8008bb8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fd ff70 	bl	8006aa4 <HAL_DMA_Abort_IT>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d008      	beq.n	8008bdc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4798      	blx	r3
 8008bd8:	e000      	b.n	8008bdc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008bda:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d03e      	beq.n	8008c64 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	f003 0304 	and.w	r3, r3, #4
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	d112      	bne.n	8008c1a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	691a      	ldr	r2, [r3, #16]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfe:	b2d2      	uxtb	r2, r2
 8008c00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	3b01      	subs	r3, #1
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c24:	2b40      	cmp	r3, #64	@ 0x40
 8008c26:	d112      	bne.n	8008c4e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	691a      	ldr	r2, [r3, #16]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	3b01      	subs	r3, #1
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d005      	beq.n	8008c64 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c5c:	f043 0204 	orr.w	r2, r3, #4
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f8b7 	bl	8008de0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008c72:	e039      	b.n	8008ce8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
 8008c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c78:	d109      	bne.n	8008c8e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2228      	movs	r2, #40	@ 0x28
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff f80d 	bl	8007ca8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b28      	cmp	r3, #40	@ 0x28
 8008c98:	d111      	bne.n	8008cbe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a15      	ldr	r2, [pc, #84]	@ (8008cf4 <I2C_Slave_STOPF+0x25c>)
 8008c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2220      	movs	r2, #32
 8008caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7ff f80e 	bl	8007cd8 <HAL_I2C_ListenCpltCallback>
}
 8008cbc:	e014      	b.n	8008ce8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cc2:	2b22      	cmp	r3, #34	@ 0x22
 8008cc4:	d002      	beq.n	8008ccc <I2C_Slave_STOPF+0x234>
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
 8008cc8:	2b22      	cmp	r3, #34	@ 0x22
 8008cca:	d10d      	bne.n	8008ce8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7fe ffe0 	bl	8007ca8 <HAL_I2C_SlaveRxCpltCallback>
}
 8008ce8:	bf00      	nop
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	08009149 	.word	0x08009149
 8008cf4:	ffff0000 	.word	0xffff0000

08008cf8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d06:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d0c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	2b08      	cmp	r3, #8
 8008d12:	d002      	beq.n	8008d1a <I2C_Slave_AF+0x22>
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	2b20      	cmp	r3, #32
 8008d18:	d129      	bne.n	8008d6e <I2C_Slave_AF+0x76>
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	2b28      	cmp	r3, #40	@ 0x28
 8008d1e:	d126      	bne.n	8008d6e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a2e      	ldr	r2, [pc, #184]	@ (8008ddc <I2C_Slave_AF+0xe4>)
 8008d24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008d34:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008d3e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d4e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2220      	movs	r2, #32
 8008d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7fe ffb6 	bl	8007cd8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008d6c:	e031      	b.n	8008dd2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	2b21      	cmp	r3, #33	@ 0x21
 8008d72:	d129      	bne.n	8008dc8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a19      	ldr	r2, [pc, #100]	@ (8008ddc <I2C_Slave_AF+0xe4>)
 8008d78:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2221      	movs	r2, #33	@ 0x21
 8008d7e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008d9e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008da8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008db8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7fe fc50 	bl	8007660 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7fe ff67 	bl	8007c94 <HAL_I2C_SlaveTxCpltCallback>
}
 8008dc6:	e004      	b.n	8008dd2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008dd0:	615a      	str	r2, [r3, #20]
}
 8008dd2:	bf00      	nop
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	ffff0000 	.word	0xffff0000

08008de0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008df6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	2b10      	cmp	r3, #16
 8008dfc:	d002      	beq.n	8008e04 <I2C_ITError+0x24>
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	2b40      	cmp	r3, #64	@ 0x40
 8008e02:	d10a      	bne.n	8008e1a <I2C_ITError+0x3a>
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	2b22      	cmp	r3, #34	@ 0x22
 8008e08:	d107      	bne.n	8008e1a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e18:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e20:	2b28      	cmp	r3, #40	@ 0x28
 8008e22:	d107      	bne.n	8008e34 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2228      	movs	r2, #40	@ 0x28
 8008e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008e32:	e015      	b.n	8008e60 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e42:	d00a      	beq.n	8008e5a <I2C_ITError+0x7a>
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	2b60      	cmp	r3, #96	@ 0x60
 8008e48:	d007      	beq.n	8008e5a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2220      	movs	r2, #32
 8008e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e6e:	d162      	bne.n	8008f36 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e7e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d020      	beq.n	8008ed0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e92:	4a6a      	ldr	r2, [pc, #424]	@ (800903c <I2C_ITError+0x25c>)
 8008e94:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fd fe02 	bl	8006aa4 <HAL_DMA_Abort_IT>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 8089 	beq.w	8008fba <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0201 	bic.w	r2, r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008eca:	4610      	mov	r0, r2
 8008ecc:	4798      	blx	r3
 8008ece:	e074      	b.n	8008fba <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed4:	4a59      	ldr	r2, [pc, #356]	@ (800903c <I2C_ITError+0x25c>)
 8008ed6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fd fde1 	bl	8006aa4 <HAL_DMA_Abort_IT>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d068      	beq.n	8008fba <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ef2:	2b40      	cmp	r3, #64	@ 0x40
 8008ef4:	d10b      	bne.n	8008f0e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	691a      	ldr	r2, [r3, #16]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f00:	b2d2      	uxtb	r2, r2
 8008f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0201 	bic.w	r2, r2, #1
 8008f1c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2220      	movs	r2, #32
 8008f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008f30:	4610      	mov	r0, r2
 8008f32:	4798      	blx	r3
 8008f34:	e041      	b.n	8008fba <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b60      	cmp	r3, #96	@ 0x60
 8008f40:	d125      	bne.n	8008f8e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2220      	movs	r2, #32
 8008f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f5a:	2b40      	cmp	r3, #64	@ 0x40
 8008f5c:	d10b      	bne.n	8008f76 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	691a      	ldr	r2, [r3, #16]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f68:	b2d2      	uxtb	r2, r2
 8008f6a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f022 0201 	bic.w	r2, r2, #1
 8008f84:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7fe fece 	bl	8007d28 <HAL_I2C_AbortCpltCallback>
 8008f8c:	e015      	b.n	8008fba <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	695b      	ldr	r3, [r3, #20]
 8008f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f98:	2b40      	cmp	r3, #64	@ 0x40
 8008f9a:	d10b      	bne.n	8008fb4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	691a      	ldr	r2, [r3, #16]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa6:	b2d2      	uxtb	r2, r2
 8008fa8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7fe fead 	bl	8007d14 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fbe:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10e      	bne.n	8008fe8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d109      	bne.n	8008fe8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d104      	bne.n	8008fe8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d007      	beq.n	8008ff8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008ff6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ffe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009004:	f003 0304 	and.w	r3, r3, #4
 8009008:	2b04      	cmp	r3, #4
 800900a:	d113      	bne.n	8009034 <I2C_ITError+0x254>
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	2b28      	cmp	r3, #40	@ 0x28
 8009010:	d110      	bne.n	8009034 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a0a      	ldr	r2, [pc, #40]	@ (8009040 <I2C_ITError+0x260>)
 8009016:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2220      	movs	r2, #32
 8009022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7fe fe52 	bl	8007cd8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009034:	bf00      	nop
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	08009149 	.word	0x08009149
 8009040:	ffff0000 	.word	0xffff0000

08009044 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af02      	add	r7, sp, #8
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	607a      	str	r2, [r7, #4]
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	460b      	mov	r3, r1
 8009052:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009058:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2b08      	cmp	r3, #8
 800905e:	d006      	beq.n	800906e <I2C_MasterRequestWrite+0x2a>
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d003      	beq.n	800906e <I2C_MasterRequestWrite+0x2a>
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800906c:	d108      	bne.n	8009080 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	e00b      	b.n	8009098 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009084:	2b12      	cmp	r3, #18
 8009086:	d107      	bne.n	8009098 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009096:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f000 f8f7 	bl	8009298 <I2C_WaitOnFlagUntilTimeout>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00d      	beq.n	80090cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090be:	d103      	bne.n	80090c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	e035      	b.n	8009138 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090d4:	d108      	bne.n	80090e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80090d6:	897b      	ldrh	r3, [r7, #10]
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	461a      	mov	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80090e4:	611a      	str	r2, [r3, #16]
 80090e6:	e01b      	b.n	8009120 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80090e8:	897b      	ldrh	r3, [r7, #10]
 80090ea:	11db      	asrs	r3, r3, #7
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	f003 0306 	and.w	r3, r3, #6
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	f063 030f 	orn	r3, r3, #15
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	490e      	ldr	r1, [pc, #56]	@ (8009140 <I2C_MasterRequestWrite+0xfc>)
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 f940 	bl	800938c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e010      	b.n	8009138 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009116:	897b      	ldrh	r3, [r7, #10]
 8009118:	b2da      	uxtb	r2, r3
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	4907      	ldr	r1, [pc, #28]	@ (8009144 <I2C_MasterRequestWrite+0x100>)
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 f930 	bl	800938c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e000      	b.n	8009138 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3718      	adds	r7, #24
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	00010008 	.word	0x00010008
 8009144:	00010002 	.word	0x00010002

08009148 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009150:	2300      	movs	r3, #0
 8009152:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009158:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009160:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009162:	4b4b      	ldr	r3, [pc, #300]	@ (8009290 <I2C_DMAAbort+0x148>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	08db      	lsrs	r3, r3, #3
 8009168:	4a4a      	ldr	r2, [pc, #296]	@ (8009294 <I2C_DMAAbort+0x14c>)
 800916a:	fba2 2303 	umull	r2, r3, r2, r3
 800916e:	0a1a      	lsrs	r2, r3, #8
 8009170:	4613      	mov	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	00da      	lsls	r2, r3, #3
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d106      	bne.n	8009190 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009186:	f043 0220 	orr.w	r2, r3, #32
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800918e:	e00a      	b.n	80091a6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3b01      	subs	r3, #1
 8009194:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091a4:	d0ea      	beq.n	800917c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b2:	2200      	movs	r2, #0
 80091b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c2:	2200      	movs	r2, #0
 80091c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2200      	movs	r2, #0
 80091da:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e8:	2200      	movs	r2, #0
 80091ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f8:	2200      	movs	r2, #0
 80091fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 0201 	bic.w	r2, r2, #1
 800920a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b60      	cmp	r3, #96	@ 0x60
 8009216:	d10e      	bne.n	8009236 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2220      	movs	r2, #32
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2200      	movs	r2, #0
 800922c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800922e:	6978      	ldr	r0, [r7, #20]
 8009230:	f7fe fd7a 	bl	8007d28 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009234:	e027      	b.n	8009286 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009236:	7cfb      	ldrb	r3, [r7, #19]
 8009238:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800923c:	2b28      	cmp	r3, #40	@ 0x28
 800923e:	d117      	bne.n	8009270 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f042 0201 	orr.w	r2, r2, #1
 800924e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800925e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	2200      	movs	r2, #0
 8009264:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2228      	movs	r2, #40	@ 0x28
 800926a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800926e:	e007      	b.n	8009280 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	2220      	movs	r2, #32
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009280:	6978      	ldr	r0, [r7, #20]
 8009282:	f7fe fd47 	bl	8007d14 <HAL_I2C_ErrorCallback>
}
 8009286:	bf00      	nop
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	200000a8 	.word	0x200000a8
 8009294:	14f8b589 	.word	0x14f8b589

08009298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	603b      	str	r3, [r7, #0]
 80092a4:	4613      	mov	r3, r2
 80092a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092a8:	e048      	b.n	800933c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b0:	d044      	beq.n	800933c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092b2:	f7fc fc07 	bl	8005ac4 <HAL_GetTick>
 80092b6:	4602      	mov	r2, r0
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	1ad3      	subs	r3, r2, r3
 80092bc:	683a      	ldr	r2, [r7, #0]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d302      	bcc.n	80092c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d139      	bne.n	800933c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	0c1b      	lsrs	r3, r3, #16
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d10d      	bne.n	80092ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	43da      	mvns	r2, r3
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	4013      	ands	r3, r2
 80092de:	b29b      	uxth	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	bf0c      	ite	eq
 80092e4:	2301      	moveq	r3, #1
 80092e6:	2300      	movne	r3, #0
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	461a      	mov	r2, r3
 80092ec:	e00c      	b.n	8009308 <I2C_WaitOnFlagUntilTimeout+0x70>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	43da      	mvns	r2, r3
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	4013      	ands	r3, r2
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	bf0c      	ite	eq
 8009300:	2301      	moveq	r3, #1
 8009302:	2300      	movne	r3, #0
 8009304:	b2db      	uxtb	r3, r3
 8009306:	461a      	mov	r2, r3
 8009308:	79fb      	ldrb	r3, [r7, #7]
 800930a:	429a      	cmp	r2, r3
 800930c:	d116      	bne.n	800933c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2220      	movs	r2, #32
 8009318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009328:	f043 0220 	orr.w	r2, r3, #32
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	e023      	b.n	8009384 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	0c1b      	lsrs	r3, r3, #16
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b01      	cmp	r3, #1
 8009344:	d10d      	bne.n	8009362 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	43da      	mvns	r2, r3
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	4013      	ands	r3, r2
 8009352:	b29b      	uxth	r3, r3
 8009354:	2b00      	cmp	r3, #0
 8009356:	bf0c      	ite	eq
 8009358:	2301      	moveq	r3, #1
 800935a:	2300      	movne	r3, #0
 800935c:	b2db      	uxtb	r3, r3
 800935e:	461a      	mov	r2, r3
 8009360:	e00c      	b.n	800937c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	43da      	mvns	r2, r3
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	4013      	ands	r3, r2
 800936e:	b29b      	uxth	r3, r3
 8009370:	2b00      	cmp	r3, #0
 8009372:	bf0c      	ite	eq
 8009374:	2301      	moveq	r3, #1
 8009376:	2300      	movne	r3, #0
 8009378:	b2db      	uxtb	r3, r3
 800937a:	461a      	mov	r2, r3
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	429a      	cmp	r2, r3
 8009380:	d093      	beq.n	80092aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
 8009398:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800939a:	e071      	b.n	8009480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093aa:	d123      	bne.n	80093f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80093c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093e0:	f043 0204 	orr.w	r2, r3, #4
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e067      	b.n	80094c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fa:	d041      	beq.n	8009480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093fc:	f7fc fb62 	bl	8005ac4 <HAL_GetTick>
 8009400:	4602      	mov	r2, r0
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	429a      	cmp	r2, r3
 800940a:	d302      	bcc.n	8009412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d136      	bne.n	8009480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	0c1b      	lsrs	r3, r3, #16
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b01      	cmp	r3, #1
 800941a:	d10c      	bne.n	8009436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	43da      	mvns	r2, r3
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	4013      	ands	r3, r2
 8009428:	b29b      	uxth	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	bf14      	ite	ne
 800942e:	2301      	movne	r3, #1
 8009430:	2300      	moveq	r3, #0
 8009432:	b2db      	uxtb	r3, r3
 8009434:	e00b      	b.n	800944e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	43da      	mvns	r2, r3
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	4013      	ands	r3, r2
 8009442:	b29b      	uxth	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	bf14      	ite	ne
 8009448:	2301      	movne	r3, #1
 800944a:	2300      	moveq	r3, #0
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d016      	beq.n	8009480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2220      	movs	r2, #32
 800945c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946c:	f043 0220 	orr.w	r2, r3, #32
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e021      	b.n	80094c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	0c1b      	lsrs	r3, r3, #16
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b01      	cmp	r3, #1
 8009488:	d10c      	bne.n	80094a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	43da      	mvns	r2, r3
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	4013      	ands	r3, r2
 8009496:	b29b      	uxth	r3, r3
 8009498:	2b00      	cmp	r3, #0
 800949a:	bf14      	ite	ne
 800949c:	2301      	movne	r3, #1
 800949e:	2300      	moveq	r3, #0
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	e00b      	b.n	80094bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	699b      	ldr	r3, [r3, #24]
 80094aa:	43da      	mvns	r2, r3
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	4013      	ands	r3, r2
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	bf14      	ite	ne
 80094b6:	2301      	movne	r3, #1
 80094b8:	2300      	moveq	r3, #0
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f47f af6d 	bne.w	800939c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094d8:	e034      	b.n	8009544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 f8b8 	bl	8009650 <I2C_IsAcknowledgeFailed>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d001      	beq.n	80094ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e034      	b.n	8009554 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f0:	d028      	beq.n	8009544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f2:	f7fc fae7 	bl	8005ac4 <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d302      	bcc.n	8009508 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d11d      	bne.n	8009544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009512:	2b80      	cmp	r3, #128	@ 0x80
 8009514:	d016      	beq.n	8009544 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2220      	movs	r2, #32
 8009520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009530:	f043 0220 	orr.w	r2, r3, #32
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e007      	b.n	8009554 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800954e:	2b80      	cmp	r3, #128	@ 0x80
 8009550:	d1c3      	bne.n	80094da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009568:	e034      	b.n	80095d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f000 f870 	bl	8009650 <I2C_IsAcknowledgeFailed>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e034      	b.n	80095e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009580:	d028      	beq.n	80095d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009582:	f7fc fa9f 	bl	8005ac4 <HAL_GetTick>
 8009586:	4602      	mov	r2, r0
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	429a      	cmp	r2, r3
 8009590:	d302      	bcc.n	8009598 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d11d      	bne.n	80095d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	f003 0304 	and.w	r3, r3, #4
 80095a2:	2b04      	cmp	r3, #4
 80095a4:	d016      	beq.n	80095d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2220      	movs	r2, #32
 80095b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c0:	f043 0220 	orr.w	r2, r3, #32
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e007      	b.n	80095e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	695b      	ldr	r3, [r3, #20]
 80095da:	f003 0304 	and.w	r3, r3, #4
 80095de:	2b04      	cmp	r3, #4
 80095e0:	d1c3      	bne.n	800956a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095f4:	2300      	movs	r3, #0
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80095f8:	4b13      	ldr	r3, [pc, #76]	@ (8009648 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	08db      	lsrs	r3, r3, #3
 80095fe:	4a13      	ldr	r2, [pc, #76]	@ (800964c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009600:	fba2 2303 	umull	r2, r3, r2, r3
 8009604:	0a1a      	lsrs	r2, r3, #8
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	3b01      	subs	r3, #1
 8009612:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d107      	bne.n	800962a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800961e:	f043 0220 	orr.w	r2, r3, #32
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e008      	b.n	800963c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009638:	d0e9      	beq.n	800960e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	200000a8 	.word	0x200000a8
 800964c:	14f8b589 	.word	0x14f8b589

08009650 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	695b      	ldr	r3, [r3, #20]
 800965e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009666:	d11b      	bne.n	80096a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009670:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2220      	movs	r2, #32
 800967c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800968c:	f043 0204 	orr.w	r2, r3, #4
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e000      	b.n	80096a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b083      	sub	sp, #12
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ba:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80096be:	d103      	bne.n	80096c8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80096c6:	e007      	b.n	80096d8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80096d0:	d102      	bne.n	80096d8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2208      	movs	r2, #8
 80096d6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80096e8:	4b06      	ldr	r3, [pc, #24]	@ (8009704 <HAL_PWR_PVD_IRQHandler+0x20>)
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d005      	beq.n	8009700 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80096f4:	f000 f808 	bl	8009708 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80096f8:	4b02      	ldr	r3, [pc, #8]	@ (8009704 <HAL_PWR_PVD_IRQHandler+0x20>)
 80096fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80096fe:	615a      	str	r2, [r3, #20]
  }
}
 8009700:	bf00      	nop
 8009702:	bd80      	pop	{r7, pc}
 8009704:	40013c00 	.word	0x40013c00

08009708 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8009708:	b480      	push	{r7}
 800970a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800970c:	bf00      	nop
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
	...

08009718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d101      	bne.n	800972a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e267      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	d075      	beq.n	8009822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009736:	4b88      	ldr	r3, [pc, #544]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f003 030c 	and.w	r3, r3, #12
 800973e:	2b04      	cmp	r3, #4
 8009740:	d00c      	beq.n	800975c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009742:	4b85      	ldr	r3, [pc, #532]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800974a:	2b08      	cmp	r3, #8
 800974c:	d112      	bne.n	8009774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800974e:	4b82      	ldr	r3, [pc, #520]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009756:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800975a:	d10b      	bne.n	8009774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800975c:	4b7e      	ldr	r3, [pc, #504]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d05b      	beq.n	8009820 <HAL_RCC_OscConfig+0x108>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d157      	bne.n	8009820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e242      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800977c:	d106      	bne.n	800978c <HAL_RCC_OscConfig+0x74>
 800977e:	4b76      	ldr	r3, [pc, #472]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a75      	ldr	r2, [pc, #468]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 8009784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	e01d      	b.n	80097c8 <HAL_RCC_OscConfig+0xb0>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009794:	d10c      	bne.n	80097b0 <HAL_RCC_OscConfig+0x98>
 8009796:	4b70      	ldr	r3, [pc, #448]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a6f      	ldr	r2, [pc, #444]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 800979c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	4b6d      	ldr	r3, [pc, #436]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a6c      	ldr	r2, [pc, #432]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 80097a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	e00b      	b.n	80097c8 <HAL_RCC_OscConfig+0xb0>
 80097b0:	4b69      	ldr	r3, [pc, #420]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a68      	ldr	r2, [pc, #416]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 80097b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	4b66      	ldr	r3, [pc, #408]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a65      	ldr	r2, [pc, #404]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 80097c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80097c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d013      	beq.n	80097f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097d0:	f7fc f978 	bl	8005ac4 <HAL_GetTick>
 80097d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097d6:	e008      	b.n	80097ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097d8:	f7fc f974 	bl	8005ac4 <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	2b64      	cmp	r3, #100	@ 0x64
 80097e4:	d901      	bls.n	80097ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e207      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097ea:	4b5b      	ldr	r3, [pc, #364]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d0f0      	beq.n	80097d8 <HAL_RCC_OscConfig+0xc0>
 80097f6:	e014      	b.n	8009822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097f8:	f7fc f964 	bl	8005ac4 <HAL_GetTick>
 80097fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80097fe:	e008      	b.n	8009812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009800:	f7fc f960 	bl	8005ac4 <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	2b64      	cmp	r3, #100	@ 0x64
 800980c:	d901      	bls.n	8009812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e1f3      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009812:	4b51      	ldr	r3, [pc, #324]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1f0      	bne.n	8009800 <HAL_RCC_OscConfig+0xe8>
 800981e:	e000      	b.n	8009822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 0302 	and.w	r3, r3, #2
 800982a:	2b00      	cmp	r3, #0
 800982c:	d063      	beq.n	80098f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800982e:	4b4a      	ldr	r3, [pc, #296]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f003 030c 	and.w	r3, r3, #12
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00b      	beq.n	8009852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800983a:	4b47      	ldr	r3, [pc, #284]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009842:	2b08      	cmp	r3, #8
 8009844:	d11c      	bne.n	8009880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009846:	4b44      	ldr	r3, [pc, #272]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d116      	bne.n	8009880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009852:	4b41      	ldr	r3, [pc, #260]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 0302 	and.w	r3, r3, #2
 800985a:	2b00      	cmp	r3, #0
 800985c:	d005      	beq.n	800986a <HAL_RCC_OscConfig+0x152>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d001      	beq.n	800986a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e1c7      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800986a:	4b3b      	ldr	r3, [pc, #236]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	00db      	lsls	r3, r3, #3
 8009878:	4937      	ldr	r1, [pc, #220]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 800987a:	4313      	orrs	r3, r2
 800987c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800987e:	e03a      	b.n	80098f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d020      	beq.n	80098ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009888:	4b34      	ldr	r3, [pc, #208]	@ (800995c <HAL_RCC_OscConfig+0x244>)
 800988a:	2201      	movs	r2, #1
 800988c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800988e:	f7fc f919 	bl	8005ac4 <HAL_GetTick>
 8009892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009894:	e008      	b.n	80098a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009896:	f7fc f915 	bl	8005ac4 <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d901      	bls.n	80098a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e1a8      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098a8:	4b2b      	ldr	r3, [pc, #172]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0302 	and.w	r3, r3, #2
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d0f0      	beq.n	8009896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098b4:	4b28      	ldr	r3, [pc, #160]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	00db      	lsls	r3, r3, #3
 80098c2:	4925      	ldr	r1, [pc, #148]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 80098c4:	4313      	orrs	r3, r2
 80098c6:	600b      	str	r3, [r1, #0]
 80098c8:	e015      	b.n	80098f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098ca:	4b24      	ldr	r3, [pc, #144]	@ (800995c <HAL_RCC_OscConfig+0x244>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d0:	f7fc f8f8 	bl	8005ac4 <HAL_GetTick>
 80098d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098d6:	e008      	b.n	80098ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098d8:	f7fc f8f4 	bl	8005ac4 <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d901      	bls.n	80098ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e187      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098ea:	4b1b      	ldr	r3, [pc, #108]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1f0      	bne.n	80098d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0308 	and.w	r3, r3, #8
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d036      	beq.n	8009970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d016      	beq.n	8009938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800990a:	4b15      	ldr	r3, [pc, #84]	@ (8009960 <HAL_RCC_OscConfig+0x248>)
 800990c:	2201      	movs	r2, #1
 800990e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009910:	f7fc f8d8 	bl	8005ac4 <HAL_GetTick>
 8009914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009916:	e008      	b.n	800992a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009918:	f7fc f8d4 	bl	8005ac4 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e167      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800992a:	4b0b      	ldr	r3, [pc, #44]	@ (8009958 <HAL_RCC_OscConfig+0x240>)
 800992c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0f0      	beq.n	8009918 <HAL_RCC_OscConfig+0x200>
 8009936:	e01b      	b.n	8009970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009938:	4b09      	ldr	r3, [pc, #36]	@ (8009960 <HAL_RCC_OscConfig+0x248>)
 800993a:	2200      	movs	r2, #0
 800993c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800993e:	f7fc f8c1 	bl	8005ac4 <HAL_GetTick>
 8009942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009944:	e00e      	b.n	8009964 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009946:	f7fc f8bd 	bl	8005ac4 <HAL_GetTick>
 800994a:	4602      	mov	r2, r0
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	2b02      	cmp	r3, #2
 8009952:	d907      	bls.n	8009964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009954:	2303      	movs	r3, #3
 8009956:	e150      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
 8009958:	40023800 	.word	0x40023800
 800995c:	42470000 	.word	0x42470000
 8009960:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009964:	4b88      	ldr	r3, [pc, #544]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009968:	f003 0302 	and.w	r3, r3, #2
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1ea      	bne.n	8009946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 0304 	and.w	r3, r3, #4
 8009978:	2b00      	cmp	r3, #0
 800997a:	f000 8097 	beq.w	8009aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800997e:	2300      	movs	r3, #0
 8009980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009982:	4b81      	ldr	r3, [pc, #516]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10f      	bne.n	80099ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800998e:	2300      	movs	r3, #0
 8009990:	60bb      	str	r3, [r7, #8]
 8009992:	4b7d      	ldr	r3, [pc, #500]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009996:	4a7c      	ldr	r2, [pc, #496]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800999c:	6413      	str	r3, [r2, #64]	@ 0x40
 800999e:	4b7a      	ldr	r3, [pc, #488]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 80099a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099a6:	60bb      	str	r3, [r7, #8]
 80099a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099aa:	2301      	movs	r3, #1
 80099ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099ae:	4b77      	ldr	r3, [pc, #476]	@ (8009b8c <HAL_RCC_OscConfig+0x474>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d118      	bne.n	80099ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099ba:	4b74      	ldr	r3, [pc, #464]	@ (8009b8c <HAL_RCC_OscConfig+0x474>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a73      	ldr	r2, [pc, #460]	@ (8009b8c <HAL_RCC_OscConfig+0x474>)
 80099c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099c6:	f7fc f87d 	bl	8005ac4 <HAL_GetTick>
 80099ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099cc:	e008      	b.n	80099e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099ce:	f7fc f879 	bl	8005ac4 <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d901      	bls.n	80099e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e10c      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099e0:	4b6a      	ldr	r3, [pc, #424]	@ (8009b8c <HAL_RCC_OscConfig+0x474>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d0f0      	beq.n	80099ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d106      	bne.n	8009a02 <HAL_RCC_OscConfig+0x2ea>
 80099f4:	4b64      	ldr	r3, [pc, #400]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 80099f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099f8:	4a63      	ldr	r2, [pc, #396]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 80099fa:	f043 0301 	orr.w	r3, r3, #1
 80099fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a00:	e01c      	b.n	8009a3c <HAL_RCC_OscConfig+0x324>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	2b05      	cmp	r3, #5
 8009a08:	d10c      	bne.n	8009a24 <HAL_RCC_OscConfig+0x30c>
 8009a0a:	4b5f      	ldr	r3, [pc, #380]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a0e:	4a5e      	ldr	r2, [pc, #376]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009a10:	f043 0304 	orr.w	r3, r3, #4
 8009a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a16:	4b5c      	ldr	r3, [pc, #368]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a1a:	4a5b      	ldr	r2, [pc, #364]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009a1c:	f043 0301 	orr.w	r3, r3, #1
 8009a20:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a22:	e00b      	b.n	8009a3c <HAL_RCC_OscConfig+0x324>
 8009a24:	4b58      	ldr	r3, [pc, #352]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a28:	4a57      	ldr	r2, [pc, #348]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009a2a:	f023 0301 	bic.w	r3, r3, #1
 8009a2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009a30:	4b55      	ldr	r3, [pc, #340]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a34:	4a54      	ldr	r2, [pc, #336]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009a36:	f023 0304 	bic.w	r3, r3, #4
 8009a3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d015      	beq.n	8009a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a44:	f7fc f83e 	bl	8005ac4 <HAL_GetTick>
 8009a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a4a:	e00a      	b.n	8009a62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a4c:	f7fc f83a 	bl	8005ac4 <HAL_GetTick>
 8009a50:	4602      	mov	r2, r0
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d901      	bls.n	8009a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e0cb      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a62:	4b49      	ldr	r3, [pc, #292]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a66:	f003 0302 	and.w	r3, r3, #2
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0ee      	beq.n	8009a4c <HAL_RCC_OscConfig+0x334>
 8009a6e:	e014      	b.n	8009a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a70:	f7fc f828 	bl	8005ac4 <HAL_GetTick>
 8009a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a76:	e00a      	b.n	8009a8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a78:	f7fc f824 	bl	8005ac4 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d901      	bls.n	8009a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e0b5      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a92:	f003 0302 	and.w	r3, r3, #2
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1ee      	bne.n	8009a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d105      	bne.n	8009aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009aa0:	4b39      	ldr	r3, [pc, #228]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa4:	4a38      	ldr	r2, [pc, #224]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009aa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009aaa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 80a1 	beq.w	8009bf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ab6:	4b34      	ldr	r3, [pc, #208]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	f003 030c 	and.w	r3, r3, #12
 8009abe:	2b08      	cmp	r3, #8
 8009ac0:	d05c      	beq.n	8009b7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d141      	bne.n	8009b4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009aca:	4b31      	ldr	r3, [pc, #196]	@ (8009b90 <HAL_RCC_OscConfig+0x478>)
 8009acc:	2200      	movs	r2, #0
 8009ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ad0:	f7fb fff8 	bl	8005ac4 <HAL_GetTick>
 8009ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ad6:	e008      	b.n	8009aea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ad8:	f7fb fff4 	bl	8005ac4 <HAL_GetTick>
 8009adc:	4602      	mov	r2, r0
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d901      	bls.n	8009aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	e087      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aea:	4b27      	ldr	r3, [pc, #156]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1f0      	bne.n	8009ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	69da      	ldr	r2, [r3, #28]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	431a      	orrs	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b04:	019b      	lsls	r3, r3, #6
 8009b06:	431a      	orrs	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0c:	085b      	lsrs	r3, r3, #1
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	041b      	lsls	r3, r3, #16
 8009b12:	431a      	orrs	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b18:	061b      	lsls	r3, r3, #24
 8009b1a:	491b      	ldr	r1, [pc, #108]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b20:	4b1b      	ldr	r3, [pc, #108]	@ (8009b90 <HAL_RCC_OscConfig+0x478>)
 8009b22:	2201      	movs	r2, #1
 8009b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b26:	f7fb ffcd 	bl	8005ac4 <HAL_GetTick>
 8009b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b2c:	e008      	b.n	8009b40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b2e:	f7fb ffc9 	bl	8005ac4 <HAL_GetTick>
 8009b32:	4602      	mov	r2, r0
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d901      	bls.n	8009b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e05c      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b40:	4b11      	ldr	r3, [pc, #68]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d0f0      	beq.n	8009b2e <HAL_RCC_OscConfig+0x416>
 8009b4c:	e054      	b.n	8009bf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b4e:	4b10      	ldr	r3, [pc, #64]	@ (8009b90 <HAL_RCC_OscConfig+0x478>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b54:	f7fb ffb6 	bl	8005ac4 <HAL_GetTick>
 8009b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b5a:	e008      	b.n	8009b6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b5c:	f7fb ffb2 	bl	8005ac4 <HAL_GetTick>
 8009b60:	4602      	mov	r2, r0
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d901      	bls.n	8009b6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e045      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b6e:	4b06      	ldr	r3, [pc, #24]	@ (8009b88 <HAL_RCC_OscConfig+0x470>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1f0      	bne.n	8009b5c <HAL_RCC_OscConfig+0x444>
 8009b7a:	e03d      	b.n	8009bf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d107      	bne.n	8009b94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e038      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
 8009b88:	40023800 	.word	0x40023800
 8009b8c:	40007000 	.word	0x40007000
 8009b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009b94:	4b1b      	ldr	r3, [pc, #108]	@ (8009c04 <HAL_RCC_OscConfig+0x4ec>)
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	699b      	ldr	r3, [r3, #24]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d028      	beq.n	8009bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d121      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d11a      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009bca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d111      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bda:	085b      	lsrs	r3, r3, #1
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d107      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d001      	beq.n	8009bf8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e000      	b.n	8009bfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3718      	adds	r7, #24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	40023800 	.word	0x40023800

08009c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e0cc      	b.n	8009db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c1c:	4b68      	ldr	r3, [pc, #416]	@ (8009dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0307 	and.w	r3, r3, #7
 8009c24:	683a      	ldr	r2, [r7, #0]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d90c      	bls.n	8009c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c2a:	4b65      	ldr	r3, [pc, #404]	@ (8009dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	b2d2      	uxtb	r2, r2
 8009c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c32:	4b63      	ldr	r3, [pc, #396]	@ (8009dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 0307 	and.w	r3, r3, #7
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d001      	beq.n	8009c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e0b8      	b.n	8009db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 0302 	and.w	r3, r3, #2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d020      	beq.n	8009c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0304 	and.w	r3, r3, #4
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d005      	beq.n	8009c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c5c:	4b59      	ldr	r3, [pc, #356]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	4a58      	ldr	r2, [pc, #352]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0308 	and.w	r3, r3, #8
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d005      	beq.n	8009c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009c74:	4b53      	ldr	r3, [pc, #332]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	4a52      	ldr	r2, [pc, #328]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c80:	4b50      	ldr	r3, [pc, #320]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	494d      	ldr	r1, [pc, #308]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d044      	beq.n	8009d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d107      	bne.n	8009cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ca6:	4b47      	ldr	r3, [pc, #284]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d119      	bne.n	8009ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e07f      	b.n	8009db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d003      	beq.n	8009cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cc2:	2b03      	cmp	r3, #3
 8009cc4:	d107      	bne.n	8009cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d109      	bne.n	8009ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e06f      	b.n	8009db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d101      	bne.n	8009ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e067      	b.n	8009db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ce6:	4b37      	ldr	r3, [pc, #220]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	f023 0203 	bic.w	r2, r3, #3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	4934      	ldr	r1, [pc, #208]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009cf8:	f7fb fee4 	bl	8005ac4 <HAL_GetTick>
 8009cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cfe:	e00a      	b.n	8009d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d00:	f7fb fee0 	bl	8005ac4 <HAL_GetTick>
 8009d04:	4602      	mov	r2, r0
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d901      	bls.n	8009d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d12:	2303      	movs	r3, #3
 8009d14:	e04f      	b.n	8009db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d16:	4b2b      	ldr	r3, [pc, #172]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f003 020c 	and.w	r2, r3, #12
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d1eb      	bne.n	8009d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d28:	4b25      	ldr	r3, [pc, #148]	@ (8009dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 0307 	and.w	r3, r3, #7
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d20c      	bcs.n	8009d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d36:	4b22      	ldr	r3, [pc, #136]	@ (8009dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	b2d2      	uxtb	r2, r2
 8009d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d3e:	4b20      	ldr	r3, [pc, #128]	@ (8009dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 0307 	and.w	r3, r3, #7
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d001      	beq.n	8009d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e032      	b.n	8009db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0304 	and.w	r3, r3, #4
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d008      	beq.n	8009d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d5c:	4b19      	ldr	r3, [pc, #100]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	4916      	ldr	r1, [pc, #88]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 0308 	and.w	r3, r3, #8
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d009      	beq.n	8009d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d7a:	4b12      	ldr	r3, [pc, #72]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	00db      	lsls	r3, r3, #3
 8009d88:	490e      	ldr	r1, [pc, #56]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009d8e:	f000 f821 	bl	8009dd4 <HAL_RCC_GetSysClockFreq>
 8009d92:	4602      	mov	r2, r0
 8009d94:	4b0b      	ldr	r3, [pc, #44]	@ (8009dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	091b      	lsrs	r3, r3, #4
 8009d9a:	f003 030f 	and.w	r3, r3, #15
 8009d9e:	490a      	ldr	r1, [pc, #40]	@ (8009dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8009da0:	5ccb      	ldrb	r3, [r1, r3]
 8009da2:	fa22 f303 	lsr.w	r3, r2, r3
 8009da6:	4a09      	ldr	r2, [pc, #36]	@ (8009dcc <HAL_RCC_ClockConfig+0x1c4>)
 8009da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009daa:	4b09      	ldr	r3, [pc, #36]	@ (8009dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fb fe44 	bl	8005a3c <HAL_InitTick>

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	40023c00 	.word	0x40023c00
 8009dc4:	40023800 	.word	0x40023800
 8009dc8:	08015b4c 	.word	0x08015b4c
 8009dcc:	200000a8 	.word	0x200000a8
 8009dd0:	200000ac 	.word	0x200000ac

08009dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dd8:	b094      	sub	sp, #80	@ 0x50
 8009dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	647b      	str	r3, [r7, #68]	@ 0x44
 8009de0:	2300      	movs	r3, #0
 8009de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009de4:	2300      	movs	r3, #0
 8009de6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009de8:	2300      	movs	r3, #0
 8009dea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009dec:	4b79      	ldr	r3, [pc, #484]	@ (8009fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f003 030c 	and.w	r3, r3, #12
 8009df4:	2b08      	cmp	r3, #8
 8009df6:	d00d      	beq.n	8009e14 <HAL_RCC_GetSysClockFreq+0x40>
 8009df8:	2b08      	cmp	r3, #8
 8009dfa:	f200 80e1 	bhi.w	8009fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d002      	beq.n	8009e08 <HAL_RCC_GetSysClockFreq+0x34>
 8009e02:	2b04      	cmp	r3, #4
 8009e04:	d003      	beq.n	8009e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8009e06:	e0db      	b.n	8009fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e08:	4b73      	ldr	r3, [pc, #460]	@ (8009fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8009e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009e0c:	e0db      	b.n	8009fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e0e:	4b73      	ldr	r3, [pc, #460]	@ (8009fdc <HAL_RCC_GetSysClockFreq+0x208>)
 8009e10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009e12:	e0d8      	b.n	8009fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e14:	4b6f      	ldr	r3, [pc, #444]	@ (8009fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8009fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d063      	beq.n	8009ef2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8009fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	099b      	lsrs	r3, r3, #6
 8009e30:	2200      	movs	r2, #0
 8009e32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e3e:	2300      	movs	r3, #0
 8009e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009e46:	4622      	mov	r2, r4
 8009e48:	462b      	mov	r3, r5
 8009e4a:	f04f 0000 	mov.w	r0, #0
 8009e4e:	f04f 0100 	mov.w	r1, #0
 8009e52:	0159      	lsls	r1, r3, #5
 8009e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e58:	0150      	lsls	r0, r2, #5
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4621      	mov	r1, r4
 8009e60:	1a51      	subs	r1, r2, r1
 8009e62:	6139      	str	r1, [r7, #16]
 8009e64:	4629      	mov	r1, r5
 8009e66:	eb63 0301 	sbc.w	r3, r3, r1
 8009e6a:	617b      	str	r3, [r7, #20]
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	f04f 0300 	mov.w	r3, #0
 8009e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e78:	4659      	mov	r1, fp
 8009e7a:	018b      	lsls	r3, r1, #6
 8009e7c:	4651      	mov	r1, sl
 8009e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009e82:	4651      	mov	r1, sl
 8009e84:	018a      	lsls	r2, r1, #6
 8009e86:	4651      	mov	r1, sl
 8009e88:	ebb2 0801 	subs.w	r8, r2, r1
 8009e8c:	4659      	mov	r1, fp
 8009e8e:	eb63 0901 	sbc.w	r9, r3, r1
 8009e92:	f04f 0200 	mov.w	r2, #0
 8009e96:	f04f 0300 	mov.w	r3, #0
 8009e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ea6:	4690      	mov	r8, r2
 8009ea8:	4699      	mov	r9, r3
 8009eaa:	4623      	mov	r3, r4
 8009eac:	eb18 0303 	adds.w	r3, r8, r3
 8009eb0:	60bb      	str	r3, [r7, #8]
 8009eb2:	462b      	mov	r3, r5
 8009eb4:	eb49 0303 	adc.w	r3, r9, r3
 8009eb8:	60fb      	str	r3, [r7, #12]
 8009eba:	f04f 0200 	mov.w	r2, #0
 8009ebe:	f04f 0300 	mov.w	r3, #0
 8009ec2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	024b      	lsls	r3, r1, #9
 8009eca:	4621      	mov	r1, r4
 8009ecc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	024a      	lsls	r2, r1, #9
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009eda:	2200      	movs	r2, #0
 8009edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ede:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009ee4:	f7f6 fee0 	bl	8000ca8 <__aeabi_uldivmod>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	4613      	mov	r3, r2
 8009eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ef0:	e058      	b.n	8009fa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009ef2:	4b38      	ldr	r3, [pc, #224]	@ (8009fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	099b      	lsrs	r3, r3, #6
 8009ef8:	2200      	movs	r2, #0
 8009efa:	4618      	mov	r0, r3
 8009efc:	4611      	mov	r1, r2
 8009efe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009f02:	623b      	str	r3, [r7, #32]
 8009f04:	2300      	movs	r3, #0
 8009f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009f0c:	4642      	mov	r2, r8
 8009f0e:	464b      	mov	r3, r9
 8009f10:	f04f 0000 	mov.w	r0, #0
 8009f14:	f04f 0100 	mov.w	r1, #0
 8009f18:	0159      	lsls	r1, r3, #5
 8009f1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f1e:	0150      	lsls	r0, r2, #5
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4641      	mov	r1, r8
 8009f26:	ebb2 0a01 	subs.w	sl, r2, r1
 8009f2a:	4649      	mov	r1, r9
 8009f2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009f30:	f04f 0200 	mov.w	r2, #0
 8009f34:	f04f 0300 	mov.w	r3, #0
 8009f38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009f3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009f40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009f44:	ebb2 040a 	subs.w	r4, r2, sl
 8009f48:	eb63 050b 	sbc.w	r5, r3, fp
 8009f4c:	f04f 0200 	mov.w	r2, #0
 8009f50:	f04f 0300 	mov.w	r3, #0
 8009f54:	00eb      	lsls	r3, r5, #3
 8009f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f5a:	00e2      	lsls	r2, r4, #3
 8009f5c:	4614      	mov	r4, r2
 8009f5e:	461d      	mov	r5, r3
 8009f60:	4643      	mov	r3, r8
 8009f62:	18e3      	adds	r3, r4, r3
 8009f64:	603b      	str	r3, [r7, #0]
 8009f66:	464b      	mov	r3, r9
 8009f68:	eb45 0303 	adc.w	r3, r5, r3
 8009f6c:	607b      	str	r3, [r7, #4]
 8009f6e:	f04f 0200 	mov.w	r2, #0
 8009f72:	f04f 0300 	mov.w	r3, #0
 8009f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009f7a:	4629      	mov	r1, r5
 8009f7c:	028b      	lsls	r3, r1, #10
 8009f7e:	4621      	mov	r1, r4
 8009f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009f84:	4621      	mov	r1, r4
 8009f86:	028a      	lsls	r2, r1, #10
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f8e:	2200      	movs	r2, #0
 8009f90:	61bb      	str	r3, [r7, #24]
 8009f92:	61fa      	str	r2, [r7, #28]
 8009f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f98:	f7f6 fe86 	bl	8000ca8 <__aeabi_uldivmod>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8009fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	0c1b      	lsrs	r3, r3, #16
 8009faa:	f003 0303 	and.w	r3, r3, #3
 8009fae:	3301      	adds	r3, #1
 8009fb0:	005b      	lsls	r3, r3, #1
 8009fb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8009fb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009fbe:	e002      	b.n	8009fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fc0:	4b05      	ldr	r3, [pc, #20]	@ (8009fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8009fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3750      	adds	r7, #80	@ 0x50
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fd2:	bf00      	nop
 8009fd4:	40023800 	.word	0x40023800
 8009fd8:	00f42400 	.word	0x00f42400
 8009fdc:	007a1200 	.word	0x007a1200

08009fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fe4:	4b03      	ldr	r3, [pc, #12]	@ (8009ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	200000a8 	.word	0x200000a8

08009ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009ffc:	f7ff fff0 	bl	8009fe0 <HAL_RCC_GetHCLKFreq>
 800a000:	4602      	mov	r2, r0
 800a002:	4b05      	ldr	r3, [pc, #20]	@ (800a018 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	0a9b      	lsrs	r3, r3, #10
 800a008:	f003 0307 	and.w	r3, r3, #7
 800a00c:	4903      	ldr	r1, [pc, #12]	@ (800a01c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a00e:	5ccb      	ldrb	r3, [r1, r3]
 800a010:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a014:	4618      	mov	r0, r3
 800a016:	bd80      	pop	{r7, pc}
 800a018:	40023800 	.word	0x40023800
 800a01c:	08015b5c 	.word	0x08015b5c

0800a020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a024:	f7ff ffdc 	bl	8009fe0 <HAL_RCC_GetHCLKFreq>
 800a028:	4602      	mov	r2, r0
 800a02a:	4b05      	ldr	r3, [pc, #20]	@ (800a040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	0b5b      	lsrs	r3, r3, #13
 800a030:	f003 0307 	and.w	r3, r3, #7
 800a034:	4903      	ldr	r1, [pc, #12]	@ (800a044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a036:	5ccb      	ldrb	r3, [r1, r3]
 800a038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	40023800 	.word	0x40023800
 800a044:	08015b5c 	.word	0x08015b5c

0800a048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e041      	b.n	800a0de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a060:	b2db      	uxtb	r3, r3
 800a062:	2b00      	cmp	r3, #0
 800a064:	d106      	bne.n	800a074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f7fb fafc 	bl	800566c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2202      	movs	r2, #2
 800a078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3304      	adds	r3, #4
 800a084:	4619      	mov	r1, r3
 800a086:	4610      	mov	r0, r2
 800a088:	f000 faac 	bl	800a5e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
	...

0800a0e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d001      	beq.n	800a100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e04e      	b.n	800a19e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2202      	movs	r2, #2
 800a104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68da      	ldr	r2, [r3, #12]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f042 0201 	orr.w	r2, r2, #1
 800a116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a23      	ldr	r2, [pc, #140]	@ (800a1ac <HAL_TIM_Base_Start_IT+0xc4>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d022      	beq.n	800a168 <HAL_TIM_Base_Start_IT+0x80>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a12a:	d01d      	beq.n	800a168 <HAL_TIM_Base_Start_IT+0x80>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a1f      	ldr	r2, [pc, #124]	@ (800a1b0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d018      	beq.n	800a168 <HAL_TIM_Base_Start_IT+0x80>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a1e      	ldr	r2, [pc, #120]	@ (800a1b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d013      	beq.n	800a168 <HAL_TIM_Base_Start_IT+0x80>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a1c      	ldr	r2, [pc, #112]	@ (800a1b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d00e      	beq.n	800a168 <HAL_TIM_Base_Start_IT+0x80>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a1b      	ldr	r2, [pc, #108]	@ (800a1bc <HAL_TIM_Base_Start_IT+0xd4>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d009      	beq.n	800a168 <HAL_TIM_Base_Start_IT+0x80>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a19      	ldr	r2, [pc, #100]	@ (800a1c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d004      	beq.n	800a168 <HAL_TIM_Base_Start_IT+0x80>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a18      	ldr	r2, [pc, #96]	@ (800a1c4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d111      	bne.n	800a18c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f003 0307 	and.w	r3, r3, #7
 800a172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2b06      	cmp	r3, #6
 800a178:	d010      	beq.n	800a19c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f042 0201 	orr.w	r2, r2, #1
 800a188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a18a:	e007      	b.n	800a19c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f042 0201 	orr.w	r2, r2, #1
 800a19a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	40010000 	.word	0x40010000
 800a1b0:	40000400 	.word	0x40000400
 800a1b4:	40000800 	.word	0x40000800
 800a1b8:	40000c00 	.word	0x40000c00
 800a1bc:	40010400 	.word	0x40010400
 800a1c0:	40014000 	.word	0x40014000
 800a1c4:	40001800 	.word	0x40001800

0800a1c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68da      	ldr	r2, [r3, #12]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f022 0201 	bic.w	r2, r2, #1
 800a1de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6a1a      	ldr	r2, [r3, #32]
 800a1e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10f      	bne.n	800a210 <HAL_TIM_Base_Stop_IT+0x48>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6a1a      	ldr	r2, [r3, #32]
 800a1f6:	f240 4344 	movw	r3, #1092	@ 0x444
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d107      	bne.n	800a210 <HAL_TIM_Base_Stop_IT+0x48>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f022 0201 	bic.w	r2, r2, #1
 800a20e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b084      	sub	sp, #16
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	f003 0302 	and.w	r3, r3, #2
 800a244:	2b00      	cmp	r3, #0
 800a246:	d020      	beq.n	800a28a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f003 0302 	and.w	r3, r3, #2
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d01b      	beq.n	800a28a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f06f 0202 	mvn.w	r2, #2
 800a25a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	f003 0303 	and.w	r3, r3, #3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d003      	beq.n	800a278 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f999 	bl	800a5a8 <HAL_TIM_IC_CaptureCallback>
 800a276:	e005      	b.n	800a284 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f98b 	bl	800a594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f99c 	bl	800a5bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	f003 0304 	and.w	r3, r3, #4
 800a290:	2b00      	cmp	r3, #0
 800a292:	d020      	beq.n	800a2d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f003 0304 	and.w	r3, r3, #4
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d01b      	beq.n	800a2d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f06f 0204 	mvn.w	r2, #4
 800a2a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2202      	movs	r2, #2
 800a2ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d003      	beq.n	800a2c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f973 	bl	800a5a8 <HAL_TIM_IC_CaptureCallback>
 800a2c2:	e005      	b.n	800a2d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f965 	bl	800a594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f976 	bl	800a5bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	f003 0308 	and.w	r3, r3, #8
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d020      	beq.n	800a322 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f003 0308 	and.w	r3, r3, #8
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d01b      	beq.n	800a322 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f06f 0208 	mvn.w	r2, #8
 800a2f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2204      	movs	r2, #4
 800a2f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	69db      	ldr	r3, [r3, #28]
 800a300:	f003 0303 	and.w	r3, r3, #3
 800a304:	2b00      	cmp	r3, #0
 800a306:	d003      	beq.n	800a310 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f94d 	bl	800a5a8 <HAL_TIM_IC_CaptureCallback>
 800a30e:	e005      	b.n	800a31c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f93f 	bl	800a594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 f950 	bl	800a5bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	f003 0310 	and.w	r3, r3, #16
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d020      	beq.n	800a36e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f003 0310 	and.w	r3, r3, #16
 800a332:	2b00      	cmp	r3, #0
 800a334:	d01b      	beq.n	800a36e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f06f 0210 	mvn.w	r2, #16
 800a33e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2208      	movs	r2, #8
 800a344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a350:	2b00      	cmp	r3, #0
 800a352:	d003      	beq.n	800a35c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f927 	bl	800a5a8 <HAL_TIM_IC_CaptureCallback>
 800a35a:	e005      	b.n	800a368 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f919 	bl	800a594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f92a 	bl	800a5bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	f003 0301 	and.w	r3, r3, #1
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00c      	beq.n	800a392 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d007      	beq.n	800a392 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f06f 0201 	mvn.w	r2, #1
 800a38a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7f8 fff5 	bl	800337c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00c      	beq.n	800a3b6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d007      	beq.n	800a3b6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a3ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fae3 	bl	800a97c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00c      	beq.n	800a3da <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d007      	beq.n	800a3da <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f8fb 	bl	800a5d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	f003 0320 	and.w	r3, r3, #32
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00c      	beq.n	800a3fe <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f003 0320 	and.w	r3, r3, #32
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d007      	beq.n	800a3fe <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f06f 0220 	mvn.w	r2, #32
 800a3f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fab5 	bl	800a968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3fe:	bf00      	nop
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}

0800a406 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d101      	bne.n	800a422 <HAL_TIM_ConfigClockSource+0x1c>
 800a41e:	2302      	movs	r3, #2
 800a420:	e0b4      	b.n	800a58c <HAL_TIM_ConfigClockSource+0x186>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2202      	movs	r2, #2
 800a42e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a440:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a448:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a45a:	d03e      	beq.n	800a4da <HAL_TIM_ConfigClockSource+0xd4>
 800a45c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a460:	f200 8087 	bhi.w	800a572 <HAL_TIM_ConfigClockSource+0x16c>
 800a464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a468:	f000 8086 	beq.w	800a578 <HAL_TIM_ConfigClockSource+0x172>
 800a46c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a470:	d87f      	bhi.n	800a572 <HAL_TIM_ConfigClockSource+0x16c>
 800a472:	2b70      	cmp	r3, #112	@ 0x70
 800a474:	d01a      	beq.n	800a4ac <HAL_TIM_ConfigClockSource+0xa6>
 800a476:	2b70      	cmp	r3, #112	@ 0x70
 800a478:	d87b      	bhi.n	800a572 <HAL_TIM_ConfigClockSource+0x16c>
 800a47a:	2b60      	cmp	r3, #96	@ 0x60
 800a47c:	d050      	beq.n	800a520 <HAL_TIM_ConfigClockSource+0x11a>
 800a47e:	2b60      	cmp	r3, #96	@ 0x60
 800a480:	d877      	bhi.n	800a572 <HAL_TIM_ConfigClockSource+0x16c>
 800a482:	2b50      	cmp	r3, #80	@ 0x50
 800a484:	d03c      	beq.n	800a500 <HAL_TIM_ConfigClockSource+0xfa>
 800a486:	2b50      	cmp	r3, #80	@ 0x50
 800a488:	d873      	bhi.n	800a572 <HAL_TIM_ConfigClockSource+0x16c>
 800a48a:	2b40      	cmp	r3, #64	@ 0x40
 800a48c:	d058      	beq.n	800a540 <HAL_TIM_ConfigClockSource+0x13a>
 800a48e:	2b40      	cmp	r3, #64	@ 0x40
 800a490:	d86f      	bhi.n	800a572 <HAL_TIM_ConfigClockSource+0x16c>
 800a492:	2b30      	cmp	r3, #48	@ 0x30
 800a494:	d064      	beq.n	800a560 <HAL_TIM_ConfigClockSource+0x15a>
 800a496:	2b30      	cmp	r3, #48	@ 0x30
 800a498:	d86b      	bhi.n	800a572 <HAL_TIM_ConfigClockSource+0x16c>
 800a49a:	2b20      	cmp	r3, #32
 800a49c:	d060      	beq.n	800a560 <HAL_TIM_ConfigClockSource+0x15a>
 800a49e:	2b20      	cmp	r3, #32
 800a4a0:	d867      	bhi.n	800a572 <HAL_TIM_ConfigClockSource+0x16c>
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d05c      	beq.n	800a560 <HAL_TIM_ConfigClockSource+0x15a>
 800a4a6:	2b10      	cmp	r3, #16
 800a4a8:	d05a      	beq.n	800a560 <HAL_TIM_ConfigClockSource+0x15a>
 800a4aa:	e062      	b.n	800a572 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a4bc:	f000 f9b8 	bl	800a830 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a4ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68ba      	ldr	r2, [r7, #8]
 800a4d6:	609a      	str	r2, [r3, #8]
      break;
 800a4d8:	e04f      	b.n	800a57a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a4ea:	f000 f9a1 	bl	800a830 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	689a      	ldr	r2, [r3, #8]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a4fc:	609a      	str	r2, [r3, #8]
      break;
 800a4fe:	e03c      	b.n	800a57a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a50c:	461a      	mov	r2, r3
 800a50e:	f000 f915 	bl	800a73c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2150      	movs	r1, #80	@ 0x50
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 f96e 	bl	800a7fa <TIM_ITRx_SetConfig>
      break;
 800a51e:	e02c      	b.n	800a57a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a52c:	461a      	mov	r2, r3
 800a52e:	f000 f934 	bl	800a79a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2160      	movs	r1, #96	@ 0x60
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 f95e 	bl	800a7fa <TIM_ITRx_SetConfig>
      break;
 800a53e:	e01c      	b.n	800a57a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a54c:	461a      	mov	r2, r3
 800a54e:	f000 f8f5 	bl	800a73c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2140      	movs	r1, #64	@ 0x40
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 f94e 	bl	800a7fa <TIM_ITRx_SetConfig>
      break;
 800a55e:	e00c      	b.n	800a57a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4619      	mov	r1, r3
 800a56a:	4610      	mov	r0, r2
 800a56c:	f000 f945 	bl	800a7fa <TIM_ITRx_SetConfig>
      break;
 800a570:	e003      	b.n	800a57a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	73fb      	strb	r3, [r7, #15]
      break;
 800a576:	e000      	b.n	800a57a <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a578:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5c4:	bf00      	nop
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a46      	ldr	r2, [pc, #280]	@ (800a710 <TIM_Base_SetConfig+0x12c>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d013      	beq.n	800a624 <TIM_Base_SetConfig+0x40>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a602:	d00f      	beq.n	800a624 <TIM_Base_SetConfig+0x40>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a43      	ldr	r2, [pc, #268]	@ (800a714 <TIM_Base_SetConfig+0x130>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d00b      	beq.n	800a624 <TIM_Base_SetConfig+0x40>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a42      	ldr	r2, [pc, #264]	@ (800a718 <TIM_Base_SetConfig+0x134>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d007      	beq.n	800a624 <TIM_Base_SetConfig+0x40>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a41      	ldr	r2, [pc, #260]	@ (800a71c <TIM_Base_SetConfig+0x138>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d003      	beq.n	800a624 <TIM_Base_SetConfig+0x40>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a40      	ldr	r2, [pc, #256]	@ (800a720 <TIM_Base_SetConfig+0x13c>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d108      	bne.n	800a636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a62a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	4313      	orrs	r3, r2
 800a634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a35      	ldr	r2, [pc, #212]	@ (800a710 <TIM_Base_SetConfig+0x12c>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d02b      	beq.n	800a696 <TIM_Base_SetConfig+0xb2>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a644:	d027      	beq.n	800a696 <TIM_Base_SetConfig+0xb2>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a32      	ldr	r2, [pc, #200]	@ (800a714 <TIM_Base_SetConfig+0x130>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d023      	beq.n	800a696 <TIM_Base_SetConfig+0xb2>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a31      	ldr	r2, [pc, #196]	@ (800a718 <TIM_Base_SetConfig+0x134>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d01f      	beq.n	800a696 <TIM_Base_SetConfig+0xb2>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a30      	ldr	r2, [pc, #192]	@ (800a71c <TIM_Base_SetConfig+0x138>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d01b      	beq.n	800a696 <TIM_Base_SetConfig+0xb2>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a2f      	ldr	r2, [pc, #188]	@ (800a720 <TIM_Base_SetConfig+0x13c>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d017      	beq.n	800a696 <TIM_Base_SetConfig+0xb2>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a2e      	ldr	r2, [pc, #184]	@ (800a724 <TIM_Base_SetConfig+0x140>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d013      	beq.n	800a696 <TIM_Base_SetConfig+0xb2>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a2d      	ldr	r2, [pc, #180]	@ (800a728 <TIM_Base_SetConfig+0x144>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d00f      	beq.n	800a696 <TIM_Base_SetConfig+0xb2>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a2c      	ldr	r2, [pc, #176]	@ (800a72c <TIM_Base_SetConfig+0x148>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d00b      	beq.n	800a696 <TIM_Base_SetConfig+0xb2>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a2b      	ldr	r2, [pc, #172]	@ (800a730 <TIM_Base_SetConfig+0x14c>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d007      	beq.n	800a696 <TIM_Base_SetConfig+0xb2>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a2a      	ldr	r2, [pc, #168]	@ (800a734 <TIM_Base_SetConfig+0x150>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d003      	beq.n	800a696 <TIM_Base_SetConfig+0xb2>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a29      	ldr	r2, [pc, #164]	@ (800a738 <TIM_Base_SetConfig+0x154>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d108      	bne.n	800a6a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a69c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4a10      	ldr	r2, [pc, #64]	@ (800a710 <TIM_Base_SetConfig+0x12c>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d003      	beq.n	800a6dc <TIM_Base_SetConfig+0xf8>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a12      	ldr	r2, [pc, #72]	@ (800a720 <TIM_Base_SetConfig+0x13c>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d103      	bne.n	800a6e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	691a      	ldr	r2, [r3, #16]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d105      	bne.n	800a702 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	f023 0201 	bic.w	r2, r3, #1
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	611a      	str	r2, [r3, #16]
  }
}
 800a702:	bf00      	nop
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	40010000 	.word	0x40010000
 800a714:	40000400 	.word	0x40000400
 800a718:	40000800 	.word	0x40000800
 800a71c:	40000c00 	.word	0x40000c00
 800a720:	40010400 	.word	0x40010400
 800a724:	40014000 	.word	0x40014000
 800a728:	40014400 	.word	0x40014400
 800a72c:	40014800 	.word	0x40014800
 800a730:	40001800 	.word	0x40001800
 800a734:	40001c00 	.word	0x40001c00
 800a738:	40002000 	.word	0x40002000

0800a73c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b087      	sub	sp, #28
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6a1b      	ldr	r3, [r3, #32]
 800a74c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6a1b      	ldr	r3, [r3, #32]
 800a752:	f023 0201 	bic.w	r2, r3, #1
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	011b      	lsls	r3, r3, #4
 800a76c:	693a      	ldr	r2, [r7, #16]
 800a76e:	4313      	orrs	r3, r2
 800a770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f023 030a 	bic.w	r3, r3, #10
 800a778:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a77a:	697a      	ldr	r2, [r7, #20]
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	4313      	orrs	r3, r2
 800a780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	621a      	str	r2, [r3, #32]
}
 800a78e:	bf00      	nop
 800a790:	371c      	adds	r7, #28
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a79a:	b480      	push	{r7}
 800a79c:	b087      	sub	sp, #28
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	60f8      	str	r0, [r7, #12]
 800a7a2:	60b9      	str	r1, [r7, #8]
 800a7a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6a1b      	ldr	r3, [r3, #32]
 800a7b0:	f023 0210 	bic.w	r2, r3, #16
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a7c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	031b      	lsls	r3, r3, #12
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a7d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	011b      	lsls	r3, r3, #4
 800a7dc:	697a      	ldr	r2, [r7, #20]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	693a      	ldr	r2, [r7, #16]
 800a7e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	621a      	str	r2, [r3, #32]
}
 800a7ee:	bf00      	nop
 800a7f0:	371c      	adds	r7, #28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b085      	sub	sp, #20
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	4313      	orrs	r3, r2
 800a818:	f043 0307 	orr.w	r3, r3, #7
 800a81c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	609a      	str	r2, [r3, #8]
}
 800a824:	bf00      	nop
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a830:	b480      	push	{r7}
 800a832:	b087      	sub	sp, #28
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
 800a83c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a84a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	021a      	lsls	r2, r3, #8
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	431a      	orrs	r2, r3
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	4313      	orrs	r3, r2
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	609a      	str	r2, [r3, #8]
}
 800a864:	bf00      	nop
 800a866:	371c      	adds	r7, #28
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a880:	2b01      	cmp	r3, #1
 800a882:	d101      	bne.n	800a888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a884:	2302      	movs	r3, #2
 800a886:	e05a      	b.n	800a93e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2202      	movs	r2, #2
 800a894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a21      	ldr	r2, [pc, #132]	@ (800a94c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d022      	beq.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8d4:	d01d      	beq.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a1d      	ldr	r2, [pc, #116]	@ (800a950 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d018      	beq.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a1b      	ldr	r2, [pc, #108]	@ (800a954 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d013      	beq.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a1a      	ldr	r2, [pc, #104]	@ (800a958 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d00e      	beq.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a18      	ldr	r2, [pc, #96]	@ (800a95c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d009      	beq.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a17      	ldr	r2, [pc, #92]	@ (800a960 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d004      	beq.n	800a912 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a15      	ldr	r2, [pc, #84]	@ (800a964 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d10c      	bne.n	800a92c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a918:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	4313      	orrs	r3, r2
 800a922:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68ba      	ldr	r2, [r7, #8]
 800a92a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	40010000 	.word	0x40010000
 800a950:	40000400 	.word	0x40000400
 800a954:	40000800 	.word	0x40000800
 800a958:	40000c00 	.word	0x40000c00
 800a95c:	40010400 	.word	0x40010400
 800a960:	40014000 	.word	0x40014000
 800a964:	40001800 	.word	0x40001800

0800a968 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d101      	bne.n	800a9a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e042      	b.n	800aa28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d106      	bne.n	800a9bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7fa ff5e 	bl	8005878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2224      	movs	r2, #36	@ 0x24
 800a9c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68da      	ldr	r2, [r3, #12]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a9d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 ff31 	bl	800b83c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	691a      	ldr	r2, [r3, #16]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a9e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	695a      	ldr	r2, [r3, #20]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a9f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68da      	ldr	r2, [r3, #12]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aa08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2220      	movs	r2, #32
 800aa14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2220      	movs	r2, #32
 800aa1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08a      	sub	sp, #40	@ 0x28
 800aa34:	af02      	add	r7, sp, #8
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	603b      	str	r3, [r7, #0]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aa40:	2300      	movs	r3, #0
 800aa42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b20      	cmp	r3, #32
 800aa4e:	d175      	bne.n	800ab3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d002      	beq.n	800aa5c <HAL_UART_Transmit+0x2c>
 800aa56:	88fb      	ldrh	r3, [r7, #6]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e06e      	b.n	800ab3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2221      	movs	r2, #33	@ 0x21
 800aa6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aa6e:	f7fb f829 	bl	8005ac4 <HAL_GetTick>
 800aa72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	88fa      	ldrh	r2, [r7, #6]
 800aa78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	88fa      	ldrh	r2, [r7, #6]
 800aa7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa88:	d108      	bne.n	800aa9c <HAL_UART_Transmit+0x6c>
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d104      	bne.n	800aa9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	61bb      	str	r3, [r7, #24]
 800aa9a:	e003      	b.n	800aaa4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aaa4:	e02e      	b.n	800ab04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	2200      	movs	r2, #0
 800aaae:	2180      	movs	r1, #128	@ 0x80
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f000 fc6a 	bl	800b38a <UART_WaitOnFlagUntilTimeout>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d005      	beq.n	800aac8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2220      	movs	r2, #32
 800aac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800aac4:	2303      	movs	r3, #3
 800aac6:	e03a      	b.n	800ab3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10b      	bne.n	800aae6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	461a      	mov	r2, r3
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aadc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	3302      	adds	r3, #2
 800aae2:	61bb      	str	r3, [r7, #24]
 800aae4:	e007      	b.n	800aaf6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	781a      	ldrb	r2, [r3, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	3b01      	subs	r3, #1
 800aafe:	b29a      	uxth	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1cb      	bne.n	800aaa6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2200      	movs	r2, #0
 800ab16:	2140      	movs	r1, #64	@ 0x40
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f000 fc36 	bl	800b38a <UART_WaitOnFlagUntilTimeout>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d005      	beq.n	800ab30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2220      	movs	r2, #32
 800ab28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e006      	b.n	800ab3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2220      	movs	r2, #32
 800ab34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	e000      	b.n	800ab3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800ab3c:	2302      	movs	r3, #2
  }
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3720      	adds	r7, #32
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b085      	sub	sp, #20
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	60f8      	str	r0, [r7, #12]
 800ab4e:	60b9      	str	r1, [r7, #8]
 800ab50:	4613      	mov	r3, r2
 800ab52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b20      	cmp	r3, #32
 800ab5e:	d121      	bne.n	800aba4 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d002      	beq.n	800ab6c <HAL_UART_Transmit_IT+0x26>
 800ab66:	88fb      	ldrh	r3, [r7, #6]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d101      	bne.n	800ab70 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e01a      	b.n	800aba6 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	88fa      	ldrh	r2, [r7, #6]
 800ab7a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	88fa      	ldrh	r2, [r7, #6]
 800ab80:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2221      	movs	r2, #33	@ 0x21
 800ab8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68da      	ldr	r2, [r3, #12]
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ab9e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800aba0:	2300      	movs	r3, #0
 800aba2:	e000      	b.n	800aba6 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800aba4:	2302      	movs	r3, #2
  }
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	60f8      	str	r0, [r7, #12]
 800abba:	60b9      	str	r1, [r7, #8]
 800abbc:	4613      	mov	r3, r2
 800abbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b20      	cmp	r3, #32
 800abca:	d112      	bne.n	800abf2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d002      	beq.n	800abd8 <HAL_UART_Receive_IT+0x26>
 800abd2:	88fb      	ldrh	r3, [r7, #6]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	e00b      	b.n	800abf4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800abe2:	88fb      	ldrh	r3, [r7, #6]
 800abe4:	461a      	mov	r2, r3
 800abe6:	68b9      	ldr	r1, [r7, #8]
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f000 fc27 	bl	800b43c <UART_Start_Receive_IT>
 800abee:	4603      	mov	r3, r0
 800abf0:	e000      	b.n	800abf4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800abf2:	2302      	movs	r3, #2
  }
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b08c      	sub	sp, #48	@ 0x30
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	4613      	mov	r3, r2
 800ac08:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b20      	cmp	r3, #32
 800ac14:	d156      	bne.n	800acc4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <HAL_UART_Transmit_DMA+0x26>
 800ac1c:	88fb      	ldrh	r3, [r7, #6]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	e04f      	b.n	800acc6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800ac26:	68ba      	ldr	r2, [r7, #8]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	88fa      	ldrh	r2, [r7, #6]
 800ac30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	88fa      	ldrh	r2, [r7, #6]
 800ac36:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2221      	movs	r2, #33	@ 0x21
 800ac42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac4a:	4a21      	ldr	r2, [pc, #132]	@ (800acd0 <HAL_UART_Transmit_DMA+0xd4>)
 800ac4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac52:	4a20      	ldr	r2, [pc, #128]	@ (800acd4 <HAL_UART_Transmit_DMA+0xd8>)
 800ac54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac5a:	4a1f      	ldr	r2, [pc, #124]	@ (800acd8 <HAL_UART_Transmit_DMA+0xdc>)
 800ac5c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac62:	2200      	movs	r2, #0
 800ac64:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ac66:	f107 0308 	add.w	r3, r7, #8
 800ac6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ac70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac72:	6819      	ldr	r1, [r3, #0]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	3304      	adds	r3, #4
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	88fb      	ldrh	r3, [r7, #6]
 800ac7e:	f7fb fe49 	bl	8006914 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ac8a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	3314      	adds	r3, #20
 800ac92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	e853 3f00 	ldrex	r3, [r3]
 800ac9a:	617b      	str	r3, [r7, #20]
   return(result);
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aca2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	3314      	adds	r3, #20
 800acaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acac:	627a      	str	r2, [r7, #36]	@ 0x24
 800acae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb0:	6a39      	ldr	r1, [r7, #32]
 800acb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acb4:	e841 2300 	strex	r3, r2, [r1]
 800acb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d1e5      	bne.n	800ac8c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	e000      	b.n	800acc6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800acc4:	2302      	movs	r3, #2
  }
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3730      	adds	r7, #48	@ 0x30
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	0800b241 	.word	0x0800b241
 800acd4:	0800b2db 	.word	0x0800b2db
 800acd8:	0800b2f7 	.word	0x0800b2f7

0800acdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b0ba      	sub	sp, #232	@ 0xe8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	695b      	ldr	r3, [r3, #20]
 800acfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ad02:	2300      	movs	r3, #0
 800ad04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ad0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad12:	f003 030f 	and.w	r3, r3, #15
 800ad16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ad1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d10f      	bne.n	800ad42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad26:	f003 0320 	and.w	r3, r3, #32
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d009      	beq.n	800ad42 <HAL_UART_IRQHandler+0x66>
 800ad2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad32:	f003 0320 	and.w	r3, r3, #32
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d003      	beq.n	800ad42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fcbf 	bl	800b6be <UART_Receive_IT>
      return;
 800ad40:	e25b      	b.n	800b1fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ad42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f000 80de 	beq.w	800af08 <HAL_UART_IRQHandler+0x22c>
 800ad4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d106      	bne.n	800ad66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ad58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f000 80d1 	beq.w	800af08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad6a:	f003 0301 	and.w	r3, r3, #1
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00b      	beq.n	800ad8a <HAL_UART_IRQHandler+0xae>
 800ad72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d005      	beq.n	800ad8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad82:	f043 0201 	orr.w	r2, r3, #1
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad8e:	f003 0304 	and.w	r3, r3, #4
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00b      	beq.n	800adae <HAL_UART_IRQHandler+0xd2>
 800ad96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad9a:	f003 0301 	and.w	r3, r3, #1
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d005      	beq.n	800adae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ada6:	f043 0202 	orr.w	r2, r3, #2
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800adae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adb2:	f003 0302 	and.w	r3, r3, #2
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00b      	beq.n	800add2 <HAL_UART_IRQHandler+0xf6>
 800adba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800adbe:	f003 0301 	and.w	r3, r3, #1
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d005      	beq.n	800add2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adca:	f043 0204 	orr.w	r2, r3, #4
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800add2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800add6:	f003 0308 	and.w	r3, r3, #8
 800adda:	2b00      	cmp	r3, #0
 800addc:	d011      	beq.n	800ae02 <HAL_UART_IRQHandler+0x126>
 800adde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ade2:	f003 0320 	and.w	r3, r3, #32
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d105      	bne.n	800adf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800adea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d005      	beq.n	800ae02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adfa:	f043 0208 	orr.w	r2, r3, #8
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 81f2 	beq.w	800b1f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae10:	f003 0320 	and.w	r3, r3, #32
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d008      	beq.n	800ae2a <HAL_UART_IRQHandler+0x14e>
 800ae18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae1c:	f003 0320 	and.w	r3, r3, #32
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fc4a 	bl	800b6be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae34:	2b40      	cmp	r3, #64	@ 0x40
 800ae36:	bf0c      	ite	eq
 800ae38:	2301      	moveq	r3, #1
 800ae3a:	2300      	movne	r3, #0
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae46:	f003 0308 	and.w	r3, r3, #8
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d103      	bne.n	800ae56 <HAL_UART_IRQHandler+0x17a>
 800ae4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d04f      	beq.n	800aef6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fb52 	bl	800b500 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae66:	2b40      	cmp	r3, #64	@ 0x40
 800ae68:	d141      	bne.n	800aeee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	3314      	adds	r3, #20
 800ae70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ae78:	e853 3f00 	ldrex	r3, [r3]
 800ae7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ae80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ae84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3314      	adds	r3, #20
 800ae92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ae96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ae9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800aea2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800aea6:	e841 2300 	strex	r3, r2, [r1]
 800aeaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800aeae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d1d9      	bne.n	800ae6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d013      	beq.n	800aee6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aec2:	4a7e      	ldr	r2, [pc, #504]	@ (800b0bc <HAL_UART_IRQHandler+0x3e0>)
 800aec4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7fb fdea 	bl	8006aa4 <HAL_DMA_Abort_IT>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d016      	beq.n	800af04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aeda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800aee0:	4610      	mov	r0, r2
 800aee2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aee4:	e00e      	b.n	800af04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f994 	bl	800b214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeec:	e00a      	b.n	800af04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f990 	bl	800b214 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aef4:	e006      	b.n	800af04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f98c 	bl	800b214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800af02:	e175      	b.n	800b1f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af04:	bf00      	nop
    return;
 800af06:	e173      	b.n	800b1f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	f040 814f 	bne.w	800b1b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800af12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af16:	f003 0310 	and.w	r3, r3, #16
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f000 8148 	beq.w	800b1b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800af20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af24:	f003 0310 	and.w	r3, r3, #16
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 8141 	beq.w	800b1b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af2e:	2300      	movs	r3, #0
 800af30:	60bb      	str	r3, [r7, #8]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	60bb      	str	r3, [r7, #8]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	60bb      	str	r3, [r7, #8]
 800af42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af4e:	2b40      	cmp	r3, #64	@ 0x40
 800af50:	f040 80b6 	bne.w	800b0c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800af60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800af64:	2b00      	cmp	r3, #0
 800af66:	f000 8145 	beq.w	800b1f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800af6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800af72:	429a      	cmp	r2, r3
 800af74:	f080 813e 	bcs.w	800b1f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800af7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af84:	69db      	ldr	r3, [r3, #28]
 800af86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af8a:	f000 8088 	beq.w	800b09e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	330c      	adds	r3, #12
 800af94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800af9c:	e853 3f00 	ldrex	r3, [r3]
 800afa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800afa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	330c      	adds	r3, #12
 800afb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800afba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800afbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800afc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800afca:	e841 2300 	strex	r3, r2, [r1]
 800afce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800afd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1d9      	bne.n	800af8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	3314      	adds	r3, #20
 800afe0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800afe4:	e853 3f00 	ldrex	r3, [r3]
 800afe8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800afea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afec:	f023 0301 	bic.w	r3, r3, #1
 800aff0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	3314      	adds	r3, #20
 800affa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800affe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b002:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b004:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b006:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b00a:	e841 2300 	strex	r3, r2, [r1]
 800b00e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b010:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1e1      	bne.n	800afda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	3314      	adds	r3, #20
 800b01c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b020:	e853 3f00 	ldrex	r3, [r3]
 800b024:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b02c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	3314      	adds	r3, #20
 800b036:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b03a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b03c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b040:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b042:	e841 2300 	strex	r3, r2, [r1]
 800b046:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1e3      	bne.n	800b016 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2220      	movs	r2, #32
 800b052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	330c      	adds	r3, #12
 800b062:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b066:	e853 3f00 	ldrex	r3, [r3]
 800b06a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b06c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b06e:	f023 0310 	bic.w	r3, r3, #16
 800b072:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	330c      	adds	r3, #12
 800b07c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b080:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b082:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b084:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b086:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b088:	e841 2300 	strex	r3, r2, [r1]
 800b08c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b08e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1e3      	bne.n	800b05c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fb fc93 	bl	80069c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2202      	movs	r2, #2
 800b0a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f8b7 	bl	800b228 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b0ba:	e09b      	b.n	800b1f4 <HAL_UART_IRQHandler+0x518>
 800b0bc:	0800b5c7 	.word	0x0800b5c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	f000 808e 	beq.w	800b1f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b0dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 8089 	beq.w	800b1f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	330c      	adds	r3, #12
 800b0ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f0:	e853 3f00 	ldrex	r3, [r3]
 800b0f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	330c      	adds	r3, #12
 800b106:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b10a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b10c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b110:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b112:	e841 2300 	strex	r3, r2, [r1]
 800b116:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d1e3      	bne.n	800b0e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	3314      	adds	r3, #20
 800b124:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b128:	e853 3f00 	ldrex	r3, [r3]
 800b12c:	623b      	str	r3, [r7, #32]
   return(result);
 800b12e:	6a3b      	ldr	r3, [r7, #32]
 800b130:	f023 0301 	bic.w	r3, r3, #1
 800b134:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	3314      	adds	r3, #20
 800b13e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b142:	633a      	str	r2, [r7, #48]	@ 0x30
 800b144:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b146:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b14a:	e841 2300 	strex	r3, r2, [r1]
 800b14e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1e3      	bne.n	800b11e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2220      	movs	r2, #32
 800b15a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	330c      	adds	r3, #12
 800b16a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	e853 3f00 	ldrex	r3, [r3]
 800b172:	60fb      	str	r3, [r7, #12]
   return(result);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f023 0310 	bic.w	r3, r3, #16
 800b17a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	330c      	adds	r3, #12
 800b184:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b188:	61fa      	str	r2, [r7, #28]
 800b18a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18c:	69b9      	ldr	r1, [r7, #24]
 800b18e:	69fa      	ldr	r2, [r7, #28]
 800b190:	e841 2300 	strex	r3, r2, [r1]
 800b194:	617b      	str	r3, [r7, #20]
   return(result);
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1e3      	bne.n	800b164 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2202      	movs	r2, #2
 800b1a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b1a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f83d 	bl	800b228 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b1ae:	e023      	b.n	800b1f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b1b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d009      	beq.n	800b1d0 <HAL_UART_IRQHandler+0x4f4>
 800b1bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d003      	beq.n	800b1d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fa10 	bl	800b5ee <UART_Transmit_IT>
    return;
 800b1ce:	e014      	b.n	800b1fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b1d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d00e      	beq.n	800b1fa <HAL_UART_IRQHandler+0x51e>
 800b1dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d008      	beq.n	800b1fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fa50 	bl	800b68e <UART_EndTransmit_IT>
    return;
 800b1ee:	e004      	b.n	800b1fa <HAL_UART_IRQHandler+0x51e>
    return;
 800b1f0:	bf00      	nop
 800b1f2:	e002      	b.n	800b1fa <HAL_UART_IRQHandler+0x51e>
      return;
 800b1f4:	bf00      	nop
 800b1f6:	e000      	b.n	800b1fa <HAL_UART_IRQHandler+0x51e>
      return;
 800b1f8:	bf00      	nop
  }
}
 800b1fa:	37e8      	adds	r7, #232	@ 0xe8
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	460b      	mov	r3, r1
 800b232:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b090      	sub	sp, #64	@ 0x40
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d137      	bne.n	800b2cc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b25c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b25e:	2200      	movs	r2, #0
 800b260:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	3314      	adds	r3, #20
 800b268:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b26c:	e853 3f00 	ldrex	r3, [r3]
 800b270:	623b      	str	r3, [r7, #32]
   return(result);
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b278:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b27a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	3314      	adds	r3, #20
 800b280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b282:	633a      	str	r2, [r7, #48]	@ 0x30
 800b284:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e5      	bne.n	800b262 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	330c      	adds	r3, #12
 800b29c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	e853 3f00 	ldrex	r3, [r3]
 800b2a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	330c      	adds	r3, #12
 800b2b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2b6:	61fa      	str	r2, [r7, #28]
 800b2b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ba:	69b9      	ldr	r1, [r7, #24]
 800b2bc:	69fa      	ldr	r2, [r7, #28]
 800b2be:	e841 2300 	strex	r3, r2, [r1]
 800b2c2:	617b      	str	r3, [r7, #20]
   return(result);
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1e5      	bne.n	800b296 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2ca:	e002      	b.n	800b2d2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b2cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b2ce:	f7f6 fdc5 	bl	8001e5c <HAL_UART_TxCpltCallback>
}
 800b2d2:	bf00      	nop
 800b2d4:	3740      	adds	r7, #64	@ 0x40
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f7ff ff89 	bl	800b200 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2ee:	bf00      	nop
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b2fe:	2300      	movs	r3, #0
 800b300:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b306:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	695b      	ldr	r3, [r3, #20]
 800b30e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b312:	2b80      	cmp	r3, #128	@ 0x80
 800b314:	bf0c      	ite	eq
 800b316:	2301      	moveq	r3, #1
 800b318:	2300      	movne	r3, #0
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b21      	cmp	r3, #33	@ 0x21
 800b328:	d108      	bne.n	800b33c <UART_DMAError+0x46>
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d005      	beq.n	800b33c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	2200      	movs	r2, #0
 800b334:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800b336:	68b8      	ldr	r0, [r7, #8]
 800b338:	f000 f8ba 	bl	800b4b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b346:	2b40      	cmp	r3, #64	@ 0x40
 800b348:	bf0c      	ite	eq
 800b34a:	2301      	moveq	r3, #1
 800b34c:	2300      	movne	r3, #0
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	2b22      	cmp	r3, #34	@ 0x22
 800b35c:	d108      	bne.n	800b370 <UART_DMAError+0x7a>
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d005      	beq.n	800b370 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	2200      	movs	r2, #0
 800b368:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800b36a:	68b8      	ldr	r0, [r7, #8]
 800b36c:	f000 f8c8 	bl	800b500 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b374:	f043 0210 	orr.w	r2, r3, #16
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b37c:	68b8      	ldr	r0, [r7, #8]
 800b37e:	f7ff ff49 	bl	800b214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b382:	bf00      	nop
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b086      	sub	sp, #24
 800b38e:	af00      	add	r7, sp, #0
 800b390:	60f8      	str	r0, [r7, #12]
 800b392:	60b9      	str	r1, [r7, #8]
 800b394:	603b      	str	r3, [r7, #0]
 800b396:	4613      	mov	r3, r2
 800b398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b39a:	e03b      	b.n	800b414 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b39c:	6a3b      	ldr	r3, [r7, #32]
 800b39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a2:	d037      	beq.n	800b414 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3a4:	f7fa fb8e 	bl	8005ac4 <HAL_GetTick>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	6a3a      	ldr	r2, [r7, #32]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d302      	bcc.n	800b3ba <UART_WaitOnFlagUntilTimeout+0x30>
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d101      	bne.n	800b3be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	e03a      	b.n	800b434 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	f003 0304 	and.w	r3, r3, #4
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d023      	beq.n	800b414 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	2b80      	cmp	r3, #128	@ 0x80
 800b3d0:	d020      	beq.n	800b414 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	2b40      	cmp	r3, #64	@ 0x40
 800b3d6:	d01d      	beq.n	800b414 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f003 0308 	and.w	r3, r3, #8
 800b3e2:	2b08      	cmp	r3, #8
 800b3e4:	d116      	bne.n	800b414 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	617b      	str	r3, [r7, #20]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	617b      	str	r3, [r7, #20]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	617b      	str	r3, [r7, #20]
 800b3fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f000 f87f 	bl	800b500 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2208      	movs	r2, #8
 800b406:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b410:	2301      	movs	r3, #1
 800b412:	e00f      	b.n	800b434 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	4013      	ands	r3, r2
 800b41e:	68ba      	ldr	r2, [r7, #8]
 800b420:	429a      	cmp	r2, r3
 800b422:	bf0c      	ite	eq
 800b424:	2301      	moveq	r3, #1
 800b426:	2300      	movne	r3, #0
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	461a      	mov	r2, r3
 800b42c:	79fb      	ldrb	r3, [r7, #7]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d0b4      	beq.n	800b39c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3718      	adds	r7, #24
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	4613      	mov	r3, r2
 800b448:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	88fa      	ldrh	r2, [r7, #6]
 800b454:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	88fa      	ldrh	r2, [r7, #6]
 800b45a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2222      	movs	r2, #34	@ 0x22
 800b466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d007      	beq.n	800b482 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68da      	ldr	r2, [r3, #12]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b480:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	695a      	ldr	r2, [r3, #20]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f042 0201 	orr.w	r2, r2, #1
 800b490:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	68da      	ldr	r2, [r3, #12]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f042 0220 	orr.w	r2, r2, #32
 800b4a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3714      	adds	r7, #20
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b089      	sub	sp, #36	@ 0x24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	330c      	adds	r3, #12
 800b4be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	e853 3f00 	ldrex	r3, [r3]
 800b4c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b4ce:	61fb      	str	r3, [r7, #28]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	330c      	adds	r3, #12
 800b4d6:	69fa      	ldr	r2, [r7, #28]
 800b4d8:	61ba      	str	r2, [r7, #24]
 800b4da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4dc:	6979      	ldr	r1, [r7, #20]
 800b4de:	69ba      	ldr	r2, [r7, #24]
 800b4e0:	e841 2300 	strex	r3, r2, [r1]
 800b4e4:	613b      	str	r3, [r7, #16]
   return(result);
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1e5      	bne.n	800b4b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800b4f4:	bf00      	nop
 800b4f6:	3724      	adds	r7, #36	@ 0x24
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b500:	b480      	push	{r7}
 800b502:	b095      	sub	sp, #84	@ 0x54
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	330c      	adds	r3, #12
 800b50e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b512:	e853 3f00 	ldrex	r3, [r3]
 800b516:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b51a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b51e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	330c      	adds	r3, #12
 800b526:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b528:	643a      	str	r2, [r7, #64]	@ 0x40
 800b52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b52e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b530:	e841 2300 	strex	r3, r2, [r1]
 800b534:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1e5      	bne.n	800b508 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	3314      	adds	r3, #20
 800b542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b544:	6a3b      	ldr	r3, [r7, #32]
 800b546:	e853 3f00 	ldrex	r3, [r3]
 800b54a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	f023 0301 	bic.w	r3, r3, #1
 800b552:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3314      	adds	r3, #20
 800b55a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b55c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b55e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b560:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b564:	e841 2300 	strex	r3, r2, [r1]
 800b568:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d1e5      	bne.n	800b53c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b574:	2b01      	cmp	r3, #1
 800b576:	d119      	bne.n	800b5ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	330c      	adds	r3, #12
 800b57e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	e853 3f00 	ldrex	r3, [r3]
 800b586:	60bb      	str	r3, [r7, #8]
   return(result);
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	f023 0310 	bic.w	r3, r3, #16
 800b58e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	330c      	adds	r3, #12
 800b596:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b598:	61ba      	str	r2, [r7, #24]
 800b59a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59c:	6979      	ldr	r1, [r7, #20]
 800b59e:	69ba      	ldr	r2, [r7, #24]
 800b5a0:	e841 2300 	strex	r3, r2, [r1]
 800b5a4:	613b      	str	r3, [r7, #16]
   return(result);
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1e5      	bne.n	800b578 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2220      	movs	r2, #32
 800b5b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b5ba:	bf00      	nop
 800b5bc:	3754      	adds	r7, #84	@ 0x54
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f7ff fe17 	bl	800b214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5e6:	bf00      	nop
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	b085      	sub	sp, #20
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b21      	cmp	r3, #33	@ 0x21
 800b600:	d13e      	bne.n	800b680 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b60a:	d114      	bne.n	800b636 <UART_Transmit_IT+0x48>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	691b      	ldr	r3, [r3, #16]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d110      	bne.n	800b636 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6a1b      	ldr	r3, [r3, #32]
 800b618:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	881b      	ldrh	r3, [r3, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b628:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a1b      	ldr	r3, [r3, #32]
 800b62e:	1c9a      	adds	r2, r3, #2
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	621a      	str	r2, [r3, #32]
 800b634:	e008      	b.n	800b648 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6a1b      	ldr	r3, [r3, #32]
 800b63a:	1c59      	adds	r1, r3, #1
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	6211      	str	r1, [r2, #32]
 800b640:	781a      	ldrb	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	3b01      	subs	r3, #1
 800b650:	b29b      	uxth	r3, r3
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	4619      	mov	r1, r3
 800b656:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10f      	bne.n	800b67c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68da      	ldr	r2, [r3, #12]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b66a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	68da      	ldr	r2, [r3, #12]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b67a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b67c:	2300      	movs	r3, #0
 800b67e:	e000      	b.n	800b682 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b680:	2302      	movs	r3, #2
  }
}
 800b682:	4618      	mov	r0, r3
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b082      	sub	sp, #8
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	68da      	ldr	r2, [r3, #12]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b6a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7f6 fbd4 	bl	8001e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b08c      	sub	sp, #48	@ 0x30
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b22      	cmp	r3, #34	@ 0x22
 800b6d0:	f040 80ae 	bne.w	800b830 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6dc:	d117      	bne.n	800b70e <UART_Receive_IT+0x50>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d113      	bne.n	800b70e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b700:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b706:	1c9a      	adds	r2, r3, #2
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	629a      	str	r2, [r3, #40]	@ 0x28
 800b70c:	e026      	b.n	800b75c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b712:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800b714:	2300      	movs	r3, #0
 800b716:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b720:	d007      	beq.n	800b732 <UART_Receive_IT+0x74>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <UART_Receive_IT+0x82>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d106      	bne.n	800b740 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b73c:	701a      	strb	r2, [r3, #0]
 800b73e:	e008      	b.n	800b752 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	b2db      	uxtb	r3, r3
 800b748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b74c:	b2da      	uxtb	r2, r3
 800b74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b750:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b760:	b29b      	uxth	r3, r3
 800b762:	3b01      	subs	r3, #1
 800b764:	b29b      	uxth	r3, r3
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	4619      	mov	r1, r3
 800b76a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d15d      	bne.n	800b82c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68da      	ldr	r2, [r3, #12]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f022 0220 	bic.w	r2, r2, #32
 800b77e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	68da      	ldr	r2, [r3, #12]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b78e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	695a      	ldr	r2, [r3, #20]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f022 0201 	bic.w	r2, r2, #1
 800b79e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d135      	bne.n	800b822 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	330c      	adds	r3, #12
 800b7c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	e853 3f00 	ldrex	r3, [r3]
 800b7ca:	613b      	str	r3, [r7, #16]
   return(result);
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	f023 0310 	bic.w	r3, r3, #16
 800b7d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	330c      	adds	r3, #12
 800b7da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7dc:	623a      	str	r2, [r7, #32]
 800b7de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e0:	69f9      	ldr	r1, [r7, #28]
 800b7e2:	6a3a      	ldr	r2, [r7, #32]
 800b7e4:	e841 2300 	strex	r3, r2, [r1]
 800b7e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1e5      	bne.n	800b7bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f003 0310 	and.w	r3, r3, #16
 800b7fa:	2b10      	cmp	r3, #16
 800b7fc:	d10a      	bne.n	800b814 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b7fe:	2300      	movs	r3, #0
 800b800:	60fb      	str	r3, [r7, #12]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	60fb      	str	r3, [r7, #12]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	60fb      	str	r3, [r7, #12]
 800b812:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b818:	4619      	mov	r1, r3
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7ff fd04 	bl	800b228 <HAL_UARTEx_RxEventCallback>
 800b820:	e002      	b.n	800b828 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7f6 fd96 	bl	8002354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b828:	2300      	movs	r3, #0
 800b82a:	e002      	b.n	800b832 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b82c:	2300      	movs	r3, #0
 800b82e:	e000      	b.n	800b832 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b830:	2302      	movs	r3, #2
  }
}
 800b832:	4618      	mov	r0, r3
 800b834:	3730      	adds	r7, #48	@ 0x30
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
	...

0800b83c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b83c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b840:	b0c0      	sub	sp, #256	@ 0x100
 800b842:	af00      	add	r7, sp, #0
 800b844:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b858:	68d9      	ldr	r1, [r3, #12]
 800b85a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	ea40 0301 	orr.w	r3, r0, r1
 800b864:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b86a:	689a      	ldr	r2, [r3, #8]
 800b86c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	431a      	orrs	r2, r3
 800b874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b878:	695b      	ldr	r3, [r3, #20]
 800b87a:	431a      	orrs	r2, r3
 800b87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b880:	69db      	ldr	r3, [r3, #28]
 800b882:	4313      	orrs	r3, r2
 800b884:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	68db      	ldr	r3, [r3, #12]
 800b890:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b894:	f021 010c 	bic.w	r1, r1, #12
 800b898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b8a2:	430b      	orrs	r3, r1
 800b8a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b8a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	695b      	ldr	r3, [r3, #20]
 800b8ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b8b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8b6:	6999      	ldr	r1, [r3, #24]
 800b8b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	ea40 0301 	orr.w	r3, r0, r1
 800b8c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b8c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	4b8f      	ldr	r3, [pc, #572]	@ (800bb08 <UART_SetConfig+0x2cc>)
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d005      	beq.n	800b8dc <UART_SetConfig+0xa0>
 800b8d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8d4:	681a      	ldr	r2, [r3, #0]
 800b8d6:	4b8d      	ldr	r3, [pc, #564]	@ (800bb0c <UART_SetConfig+0x2d0>)
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d104      	bne.n	800b8e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b8dc:	f7fe fba0 	bl	800a020 <HAL_RCC_GetPCLK2Freq>
 800b8e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b8e4:	e003      	b.n	800b8ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b8e6:	f7fe fb87 	bl	8009ff8 <HAL_RCC_GetPCLK1Freq>
 800b8ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b8ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8f2:	69db      	ldr	r3, [r3, #28]
 800b8f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8f8:	f040 810c 	bne.w	800bb14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b900:	2200      	movs	r2, #0
 800b902:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b906:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b90a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b90e:	4622      	mov	r2, r4
 800b910:	462b      	mov	r3, r5
 800b912:	1891      	adds	r1, r2, r2
 800b914:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b916:	415b      	adcs	r3, r3
 800b918:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b91a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b91e:	4621      	mov	r1, r4
 800b920:	eb12 0801 	adds.w	r8, r2, r1
 800b924:	4629      	mov	r1, r5
 800b926:	eb43 0901 	adc.w	r9, r3, r1
 800b92a:	f04f 0200 	mov.w	r2, #0
 800b92e:	f04f 0300 	mov.w	r3, #0
 800b932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b93a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b93e:	4690      	mov	r8, r2
 800b940:	4699      	mov	r9, r3
 800b942:	4623      	mov	r3, r4
 800b944:	eb18 0303 	adds.w	r3, r8, r3
 800b948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b94c:	462b      	mov	r3, r5
 800b94e:	eb49 0303 	adc.w	r3, r9, r3
 800b952:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b962:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b966:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b96a:	460b      	mov	r3, r1
 800b96c:	18db      	adds	r3, r3, r3
 800b96e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b970:	4613      	mov	r3, r2
 800b972:	eb42 0303 	adc.w	r3, r2, r3
 800b976:	657b      	str	r3, [r7, #84]	@ 0x54
 800b978:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b97c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b980:	f7f5 f992 	bl	8000ca8 <__aeabi_uldivmod>
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	4b61      	ldr	r3, [pc, #388]	@ (800bb10 <UART_SetConfig+0x2d4>)
 800b98a:	fba3 2302 	umull	r2, r3, r3, r2
 800b98e:	095b      	lsrs	r3, r3, #5
 800b990:	011c      	lsls	r4, r3, #4
 800b992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b996:	2200      	movs	r2, #0
 800b998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b99c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b9a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b9a4:	4642      	mov	r2, r8
 800b9a6:	464b      	mov	r3, r9
 800b9a8:	1891      	adds	r1, r2, r2
 800b9aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b9ac:	415b      	adcs	r3, r3
 800b9ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b9b4:	4641      	mov	r1, r8
 800b9b6:	eb12 0a01 	adds.w	sl, r2, r1
 800b9ba:	4649      	mov	r1, r9
 800b9bc:	eb43 0b01 	adc.w	fp, r3, r1
 800b9c0:	f04f 0200 	mov.w	r2, #0
 800b9c4:	f04f 0300 	mov.w	r3, #0
 800b9c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b9cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b9d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b9d4:	4692      	mov	sl, r2
 800b9d6:	469b      	mov	fp, r3
 800b9d8:	4643      	mov	r3, r8
 800b9da:	eb1a 0303 	adds.w	r3, sl, r3
 800b9de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b9e2:	464b      	mov	r3, r9
 800b9e4:	eb4b 0303 	adc.w	r3, fp, r3
 800b9e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b9ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b9f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b9fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ba00:	460b      	mov	r3, r1
 800ba02:	18db      	adds	r3, r3, r3
 800ba04:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba06:	4613      	mov	r3, r2
 800ba08:	eb42 0303 	adc.w	r3, r2, r3
 800ba0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ba12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ba16:	f7f5 f947 	bl	8000ca8 <__aeabi_uldivmod>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	4611      	mov	r1, r2
 800ba20:	4b3b      	ldr	r3, [pc, #236]	@ (800bb10 <UART_SetConfig+0x2d4>)
 800ba22:	fba3 2301 	umull	r2, r3, r3, r1
 800ba26:	095b      	lsrs	r3, r3, #5
 800ba28:	2264      	movs	r2, #100	@ 0x64
 800ba2a:	fb02 f303 	mul.w	r3, r2, r3
 800ba2e:	1acb      	subs	r3, r1, r3
 800ba30:	00db      	lsls	r3, r3, #3
 800ba32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ba36:	4b36      	ldr	r3, [pc, #216]	@ (800bb10 <UART_SetConfig+0x2d4>)
 800ba38:	fba3 2302 	umull	r2, r3, r3, r2
 800ba3c:	095b      	lsrs	r3, r3, #5
 800ba3e:	005b      	lsls	r3, r3, #1
 800ba40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ba44:	441c      	add	r4, r3
 800ba46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ba50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ba54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ba58:	4642      	mov	r2, r8
 800ba5a:	464b      	mov	r3, r9
 800ba5c:	1891      	adds	r1, r2, r2
 800ba5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ba60:	415b      	adcs	r3, r3
 800ba62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ba68:	4641      	mov	r1, r8
 800ba6a:	1851      	adds	r1, r2, r1
 800ba6c:	6339      	str	r1, [r7, #48]	@ 0x30
 800ba6e:	4649      	mov	r1, r9
 800ba70:	414b      	adcs	r3, r1
 800ba72:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba74:	f04f 0200 	mov.w	r2, #0
 800ba78:	f04f 0300 	mov.w	r3, #0
 800ba7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ba80:	4659      	mov	r1, fp
 800ba82:	00cb      	lsls	r3, r1, #3
 800ba84:	4651      	mov	r1, sl
 800ba86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba8a:	4651      	mov	r1, sl
 800ba8c:	00ca      	lsls	r2, r1, #3
 800ba8e:	4610      	mov	r0, r2
 800ba90:	4619      	mov	r1, r3
 800ba92:	4603      	mov	r3, r0
 800ba94:	4642      	mov	r2, r8
 800ba96:	189b      	adds	r3, r3, r2
 800ba98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ba9c:	464b      	mov	r3, r9
 800ba9e:	460a      	mov	r2, r1
 800baa0:	eb42 0303 	adc.w	r3, r2, r3
 800baa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800baa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bab4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bab8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800babc:	460b      	mov	r3, r1
 800babe:	18db      	adds	r3, r3, r3
 800bac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bac2:	4613      	mov	r3, r2
 800bac4:	eb42 0303 	adc.w	r3, r2, r3
 800bac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800baca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bace:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800bad2:	f7f5 f8e9 	bl	8000ca8 <__aeabi_uldivmod>
 800bad6:	4602      	mov	r2, r0
 800bad8:	460b      	mov	r3, r1
 800bada:	4b0d      	ldr	r3, [pc, #52]	@ (800bb10 <UART_SetConfig+0x2d4>)
 800badc:	fba3 1302 	umull	r1, r3, r3, r2
 800bae0:	095b      	lsrs	r3, r3, #5
 800bae2:	2164      	movs	r1, #100	@ 0x64
 800bae4:	fb01 f303 	mul.w	r3, r1, r3
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	00db      	lsls	r3, r3, #3
 800baec:	3332      	adds	r3, #50	@ 0x32
 800baee:	4a08      	ldr	r2, [pc, #32]	@ (800bb10 <UART_SetConfig+0x2d4>)
 800baf0:	fba2 2303 	umull	r2, r3, r2, r3
 800baf4:	095b      	lsrs	r3, r3, #5
 800baf6:	f003 0207 	and.w	r2, r3, #7
 800bafa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4422      	add	r2, r4
 800bb02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bb04:	e106      	b.n	800bd14 <UART_SetConfig+0x4d8>
 800bb06:	bf00      	nop
 800bb08:	40011000 	.word	0x40011000
 800bb0c:	40011400 	.word	0x40011400
 800bb10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bb14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bb1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bb22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bb26:	4642      	mov	r2, r8
 800bb28:	464b      	mov	r3, r9
 800bb2a:	1891      	adds	r1, r2, r2
 800bb2c:	6239      	str	r1, [r7, #32]
 800bb2e:	415b      	adcs	r3, r3
 800bb30:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb36:	4641      	mov	r1, r8
 800bb38:	1854      	adds	r4, r2, r1
 800bb3a:	4649      	mov	r1, r9
 800bb3c:	eb43 0501 	adc.w	r5, r3, r1
 800bb40:	f04f 0200 	mov.w	r2, #0
 800bb44:	f04f 0300 	mov.w	r3, #0
 800bb48:	00eb      	lsls	r3, r5, #3
 800bb4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb4e:	00e2      	lsls	r2, r4, #3
 800bb50:	4614      	mov	r4, r2
 800bb52:	461d      	mov	r5, r3
 800bb54:	4643      	mov	r3, r8
 800bb56:	18e3      	adds	r3, r4, r3
 800bb58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bb5c:	464b      	mov	r3, r9
 800bb5e:	eb45 0303 	adc.w	r3, r5, r3
 800bb62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bb66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bb72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bb76:	f04f 0200 	mov.w	r2, #0
 800bb7a:	f04f 0300 	mov.w	r3, #0
 800bb7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bb82:	4629      	mov	r1, r5
 800bb84:	008b      	lsls	r3, r1, #2
 800bb86:	4621      	mov	r1, r4
 800bb88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb8c:	4621      	mov	r1, r4
 800bb8e:	008a      	lsls	r2, r1, #2
 800bb90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bb94:	f7f5 f888 	bl	8000ca8 <__aeabi_uldivmod>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	4b60      	ldr	r3, [pc, #384]	@ (800bd20 <UART_SetConfig+0x4e4>)
 800bb9e:	fba3 2302 	umull	r2, r3, r3, r2
 800bba2:	095b      	lsrs	r3, r3, #5
 800bba4:	011c      	lsls	r4, r3, #4
 800bba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bbb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bbb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bbb8:	4642      	mov	r2, r8
 800bbba:	464b      	mov	r3, r9
 800bbbc:	1891      	adds	r1, r2, r2
 800bbbe:	61b9      	str	r1, [r7, #24]
 800bbc0:	415b      	adcs	r3, r3
 800bbc2:	61fb      	str	r3, [r7, #28]
 800bbc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbc8:	4641      	mov	r1, r8
 800bbca:	1851      	adds	r1, r2, r1
 800bbcc:	6139      	str	r1, [r7, #16]
 800bbce:	4649      	mov	r1, r9
 800bbd0:	414b      	adcs	r3, r1
 800bbd2:	617b      	str	r3, [r7, #20]
 800bbd4:	f04f 0200 	mov.w	r2, #0
 800bbd8:	f04f 0300 	mov.w	r3, #0
 800bbdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bbe0:	4659      	mov	r1, fp
 800bbe2:	00cb      	lsls	r3, r1, #3
 800bbe4:	4651      	mov	r1, sl
 800bbe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbea:	4651      	mov	r1, sl
 800bbec:	00ca      	lsls	r2, r1, #3
 800bbee:	4610      	mov	r0, r2
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	4642      	mov	r2, r8
 800bbf6:	189b      	adds	r3, r3, r2
 800bbf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bbfc:	464b      	mov	r3, r9
 800bbfe:	460a      	mov	r2, r1
 800bc00:	eb42 0303 	adc.w	r3, r2, r3
 800bc04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bc08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bc12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bc14:	f04f 0200 	mov.w	r2, #0
 800bc18:	f04f 0300 	mov.w	r3, #0
 800bc1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bc20:	4649      	mov	r1, r9
 800bc22:	008b      	lsls	r3, r1, #2
 800bc24:	4641      	mov	r1, r8
 800bc26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc2a:	4641      	mov	r1, r8
 800bc2c:	008a      	lsls	r2, r1, #2
 800bc2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bc32:	f7f5 f839 	bl	8000ca8 <__aeabi_uldivmod>
 800bc36:	4602      	mov	r2, r0
 800bc38:	460b      	mov	r3, r1
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	4b38      	ldr	r3, [pc, #224]	@ (800bd20 <UART_SetConfig+0x4e4>)
 800bc3e:	fba3 2301 	umull	r2, r3, r3, r1
 800bc42:	095b      	lsrs	r3, r3, #5
 800bc44:	2264      	movs	r2, #100	@ 0x64
 800bc46:	fb02 f303 	mul.w	r3, r2, r3
 800bc4a:	1acb      	subs	r3, r1, r3
 800bc4c:	011b      	lsls	r3, r3, #4
 800bc4e:	3332      	adds	r3, #50	@ 0x32
 800bc50:	4a33      	ldr	r2, [pc, #204]	@ (800bd20 <UART_SetConfig+0x4e4>)
 800bc52:	fba2 2303 	umull	r2, r3, r2, r3
 800bc56:	095b      	lsrs	r3, r3, #5
 800bc58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc5c:	441c      	add	r4, r3
 800bc5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc62:	2200      	movs	r2, #0
 800bc64:	673b      	str	r3, [r7, #112]	@ 0x70
 800bc66:	677a      	str	r2, [r7, #116]	@ 0x74
 800bc68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bc6c:	4642      	mov	r2, r8
 800bc6e:	464b      	mov	r3, r9
 800bc70:	1891      	adds	r1, r2, r2
 800bc72:	60b9      	str	r1, [r7, #8]
 800bc74:	415b      	adcs	r3, r3
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc7c:	4641      	mov	r1, r8
 800bc7e:	1851      	adds	r1, r2, r1
 800bc80:	6039      	str	r1, [r7, #0]
 800bc82:	4649      	mov	r1, r9
 800bc84:	414b      	adcs	r3, r1
 800bc86:	607b      	str	r3, [r7, #4]
 800bc88:	f04f 0200 	mov.w	r2, #0
 800bc8c:	f04f 0300 	mov.w	r3, #0
 800bc90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc94:	4659      	mov	r1, fp
 800bc96:	00cb      	lsls	r3, r1, #3
 800bc98:	4651      	mov	r1, sl
 800bc9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc9e:	4651      	mov	r1, sl
 800bca0:	00ca      	lsls	r2, r1, #3
 800bca2:	4610      	mov	r0, r2
 800bca4:	4619      	mov	r1, r3
 800bca6:	4603      	mov	r3, r0
 800bca8:	4642      	mov	r2, r8
 800bcaa:	189b      	adds	r3, r3, r2
 800bcac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bcae:	464b      	mov	r3, r9
 800bcb0:	460a      	mov	r2, r1
 800bcb2:	eb42 0303 	adc.w	r3, r2, r3
 800bcb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bcb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	663b      	str	r3, [r7, #96]	@ 0x60
 800bcc2:	667a      	str	r2, [r7, #100]	@ 0x64
 800bcc4:	f04f 0200 	mov.w	r2, #0
 800bcc8:	f04f 0300 	mov.w	r3, #0
 800bccc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bcd0:	4649      	mov	r1, r9
 800bcd2:	008b      	lsls	r3, r1, #2
 800bcd4:	4641      	mov	r1, r8
 800bcd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bcda:	4641      	mov	r1, r8
 800bcdc:	008a      	lsls	r2, r1, #2
 800bcde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bce2:	f7f4 ffe1 	bl	8000ca8 <__aeabi_uldivmod>
 800bce6:	4602      	mov	r2, r0
 800bce8:	460b      	mov	r3, r1
 800bcea:	4b0d      	ldr	r3, [pc, #52]	@ (800bd20 <UART_SetConfig+0x4e4>)
 800bcec:	fba3 1302 	umull	r1, r3, r3, r2
 800bcf0:	095b      	lsrs	r3, r3, #5
 800bcf2:	2164      	movs	r1, #100	@ 0x64
 800bcf4:	fb01 f303 	mul.w	r3, r1, r3
 800bcf8:	1ad3      	subs	r3, r2, r3
 800bcfa:	011b      	lsls	r3, r3, #4
 800bcfc:	3332      	adds	r3, #50	@ 0x32
 800bcfe:	4a08      	ldr	r2, [pc, #32]	@ (800bd20 <UART_SetConfig+0x4e4>)
 800bd00:	fba2 2303 	umull	r2, r3, r2, r3
 800bd04:	095b      	lsrs	r3, r3, #5
 800bd06:	f003 020f 	and.w	r2, r3, #15
 800bd0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4422      	add	r2, r4
 800bd12:	609a      	str	r2, [r3, #8]
}
 800bd14:	bf00      	nop
 800bd16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd20:	51eb851f 	.word	0x51eb851f

0800bd24 <__NVIC_SetPriority>:
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	6039      	str	r1, [r7, #0]
 800bd2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	db0a      	blt.n	800bd4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	b2da      	uxtb	r2, r3
 800bd3c:	490c      	ldr	r1, [pc, #48]	@ (800bd70 <__NVIC_SetPriority+0x4c>)
 800bd3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd42:	0112      	lsls	r2, r2, #4
 800bd44:	b2d2      	uxtb	r2, r2
 800bd46:	440b      	add	r3, r1
 800bd48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bd4c:	e00a      	b.n	800bd64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	4908      	ldr	r1, [pc, #32]	@ (800bd74 <__NVIC_SetPriority+0x50>)
 800bd54:	79fb      	ldrb	r3, [r7, #7]
 800bd56:	f003 030f 	and.w	r3, r3, #15
 800bd5a:	3b04      	subs	r3, #4
 800bd5c:	0112      	lsls	r2, r2, #4
 800bd5e:	b2d2      	uxtb	r2, r2
 800bd60:	440b      	add	r3, r1
 800bd62:	761a      	strb	r2, [r3, #24]
}
 800bd64:	bf00      	nop
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr
 800bd70:	e000e100 	.word	0xe000e100
 800bd74:	e000ed00 	.word	0xe000ed00

0800bd78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	f06f 0004 	mvn.w	r0, #4
 800bd82:	f7ff ffcf 	bl	800bd24 <__NVIC_SetPriority>
#endif
}
 800bd86:	bf00      	nop
 800bd88:	bd80      	pop	{r7, pc}
	...

0800bd8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd92:	f3ef 8305 	mrs	r3, IPSR
 800bd96:	603b      	str	r3, [r7, #0]
  return(result);
 800bd98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d003      	beq.n	800bda6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bd9e:	f06f 0305 	mvn.w	r3, #5
 800bda2:	607b      	str	r3, [r7, #4]
 800bda4:	e00c      	b.n	800bdc0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bda6:	4b0a      	ldr	r3, [pc, #40]	@ (800bdd0 <osKernelInitialize+0x44>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d105      	bne.n	800bdba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bdae:	4b08      	ldr	r3, [pc, #32]	@ (800bdd0 <osKernelInitialize+0x44>)
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	607b      	str	r3, [r7, #4]
 800bdb8:	e002      	b.n	800bdc0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bdba:	f04f 33ff 	mov.w	r3, #4294967295
 800bdbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bdc0:	687b      	ldr	r3, [r7, #4]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	370c      	adds	r7, #12
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	20000c94 	.word	0x20000c94

0800bdd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdda:	f3ef 8305 	mrs	r3, IPSR
 800bdde:	603b      	str	r3, [r7, #0]
  return(result);
 800bde0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d003      	beq.n	800bdee <osKernelStart+0x1a>
    stat = osErrorISR;
 800bde6:	f06f 0305 	mvn.w	r3, #5
 800bdea:	607b      	str	r3, [r7, #4]
 800bdec:	e010      	b.n	800be10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bdee:	4b0b      	ldr	r3, [pc, #44]	@ (800be1c <osKernelStart+0x48>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d109      	bne.n	800be0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bdf6:	f7ff ffbf 	bl	800bd78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bdfa:	4b08      	ldr	r3, [pc, #32]	@ (800be1c <osKernelStart+0x48>)
 800bdfc:	2202      	movs	r2, #2
 800bdfe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800be00:	f001 fe90 	bl	800db24 <vTaskStartScheduler>
      stat = osOK;
 800be04:	2300      	movs	r3, #0
 800be06:	607b      	str	r3, [r7, #4]
 800be08:	e002      	b.n	800be10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800be0a:	f04f 33ff 	mov.w	r3, #4294967295
 800be0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800be10:	687b      	ldr	r3, [r7, #4]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20000c94 	.word	0x20000c94

0800be20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800be20:	b580      	push	{r7, lr}
 800be22:	b08e      	sub	sp, #56	@ 0x38
 800be24:	af04      	add	r7, sp, #16
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800be2c:	2300      	movs	r3, #0
 800be2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be30:	f3ef 8305 	mrs	r3, IPSR
 800be34:	617b      	str	r3, [r7, #20]
  return(result);
 800be36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d17e      	bne.n	800bf3a <osThreadNew+0x11a>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d07b      	beq.n	800bf3a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800be42:	2380      	movs	r3, #128	@ 0x80
 800be44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800be46:	2318      	movs	r3, #24
 800be48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800be4a:	2300      	movs	r3, #0
 800be4c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800be4e:	f04f 33ff 	mov.w	r3, #4294967295
 800be52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d045      	beq.n	800bee6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d002      	beq.n	800be68 <osThreadNew+0x48>
        name = attr->name;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	699b      	ldr	r3, [r3, #24]
 800be74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d008      	beq.n	800be8e <osThreadNew+0x6e>
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	2b38      	cmp	r3, #56	@ 0x38
 800be80:	d805      	bhi.n	800be8e <osThreadNew+0x6e>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <osThreadNew+0x72>
        return (NULL);
 800be8e:	2300      	movs	r3, #0
 800be90:	e054      	b.n	800bf3c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	695b      	ldr	r3, [r3, #20]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d003      	beq.n	800bea2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	089b      	lsrs	r3, r3, #2
 800bea0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00e      	beq.n	800bec8 <osThreadNew+0xa8>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	2b5b      	cmp	r3, #91	@ 0x5b
 800beb0:	d90a      	bls.n	800bec8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d006      	beq.n	800bec8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	695b      	ldr	r3, [r3, #20]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d002      	beq.n	800bec8 <osThreadNew+0xa8>
        mem = 1;
 800bec2:	2301      	movs	r3, #1
 800bec4:	61bb      	str	r3, [r7, #24]
 800bec6:	e010      	b.n	800beea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d10c      	bne.n	800beea <osThreadNew+0xca>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d108      	bne.n	800beea <osThreadNew+0xca>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	691b      	ldr	r3, [r3, #16]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d104      	bne.n	800beea <osThreadNew+0xca>
          mem = 0;
 800bee0:	2300      	movs	r3, #0
 800bee2:	61bb      	str	r3, [r7, #24]
 800bee4:	e001      	b.n	800beea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d110      	bne.n	800bf12 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bef8:	9202      	str	r2, [sp, #8]
 800befa:	9301      	str	r3, [sp, #4]
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	6a3a      	ldr	r2, [r7, #32]
 800bf04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f001 fc30 	bl	800d76c <xTaskCreateStatic>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	613b      	str	r3, [r7, #16]
 800bf10:	e013      	b.n	800bf3a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d110      	bne.n	800bf3a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bf18:	6a3b      	ldr	r3, [r7, #32]
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	f107 0310 	add.w	r3, r7, #16
 800bf20:	9301      	str	r3, [sp, #4]
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f001 fc7e 	bl	800d82c <xTaskCreate>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d001      	beq.n	800bf3a <osThreadNew+0x11a>
            hTask = NULL;
 800bf36:	2300      	movs	r3, #0
 800bf38:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bf3a:	693b      	ldr	r3, [r7, #16]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3728      	adds	r7, #40	@ 0x28
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf4c:	f3ef 8305 	mrs	r3, IPSR
 800bf50:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf52:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d003      	beq.n	800bf60 <osDelay+0x1c>
    stat = osErrorISR;
 800bf58:	f06f 0305 	mvn.w	r3, #5
 800bf5c:	60fb      	str	r3, [r7, #12]
 800bf5e:	e007      	b.n	800bf70 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bf60:	2300      	movs	r3, #0
 800bf62:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d002      	beq.n	800bf70 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f001 fda4 	bl	800dab8 <vTaskDelay>
    }
  }

  return (stat);
 800bf70:	68fb      	ldr	r3, [r7, #12]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b088      	sub	sp, #32
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bf82:	2300      	movs	r3, #0
 800bf84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf86:	f3ef 8305 	mrs	r3, IPSR
 800bf8a:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf8c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d174      	bne.n	800c07c <osMutexNew+0x102>
    if (attr != NULL) {
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d003      	beq.n	800bfa0 <osMutexNew+0x26>
      type = attr->attr_bits;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	61bb      	str	r3, [r7, #24]
 800bf9e:	e001      	b.n	800bfa4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	f003 0301 	and.w	r3, r3, #1
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d002      	beq.n	800bfb4 <osMutexNew+0x3a>
      rmtx = 1U;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	617b      	str	r3, [r7, #20]
 800bfb2:	e001      	b.n	800bfb8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	f003 0308 	and.w	r3, r3, #8
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d15c      	bne.n	800c07c <osMutexNew+0x102>
      mem = -1;
 800bfc2:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d015      	beq.n	800bffa <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d006      	beq.n	800bfe4 <osMutexNew+0x6a>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	2b4f      	cmp	r3, #79	@ 0x4f
 800bfdc:	d902      	bls.n	800bfe4 <osMutexNew+0x6a>
          mem = 1;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	613b      	str	r3, [r7, #16]
 800bfe2:	e00c      	b.n	800bffe <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d108      	bne.n	800bffe <osMutexNew+0x84>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d104      	bne.n	800bffe <osMutexNew+0x84>
            mem = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	613b      	str	r3, [r7, #16]
 800bff8:	e001      	b.n	800bffe <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800bffa:	2300      	movs	r3, #0
 800bffc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d112      	bne.n	800c02a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d007      	beq.n	800c01a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	4619      	mov	r1, r3
 800c010:	2004      	movs	r0, #4
 800c012:	f000 fc3e 	bl	800c892 <xQueueCreateMutexStatic>
 800c016:	61f8      	str	r0, [r7, #28]
 800c018:	e016      	b.n	800c048 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	4619      	mov	r1, r3
 800c020:	2001      	movs	r0, #1
 800c022:	f000 fc36 	bl	800c892 <xQueueCreateMutexStatic>
 800c026:	61f8      	str	r0, [r7, #28]
 800c028:	e00e      	b.n	800c048 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10b      	bne.n	800c048 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d004      	beq.n	800c040 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c036:	2004      	movs	r0, #4
 800c038:	f000 fc13 	bl	800c862 <xQueueCreateMutex>
 800c03c:	61f8      	str	r0, [r7, #28]
 800c03e:	e003      	b.n	800c048 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c040:	2001      	movs	r0, #1
 800c042:	f000 fc0e 	bl	800c862 <xQueueCreateMutex>
 800c046:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00c      	beq.n	800c068 <osMutexNew+0xee>
        if (attr != NULL) {
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d003      	beq.n	800c05c <osMutexNew+0xe2>
          name = attr->name;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	60fb      	str	r3, [r7, #12]
 800c05a:	e001      	b.n	800c060 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c05c:	2300      	movs	r3, #0
 800c05e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c060:	68f9      	ldr	r1, [r7, #12]
 800c062:	69f8      	ldr	r0, [r7, #28]
 800c064:	f001 fafa 	bl	800d65c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d006      	beq.n	800c07c <osMutexNew+0x102>
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d003      	beq.n	800c07c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	f043 0301 	orr.w	r3, r3, #1
 800c07a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c07c:	69fb      	ldr	r3, [r7, #28]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3720      	adds	r7, #32
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c086:	b580      	push	{r7, lr}
 800c088:	b086      	sub	sp, #24
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f023 0301 	bic.w	r3, r3, #1
 800c096:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f003 0301 	and.w	r3, r3, #1
 800c09e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0a4:	f3ef 8305 	mrs	r3, IPSR
 800c0a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0aa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d003      	beq.n	800c0b8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c0b0:	f06f 0305 	mvn.w	r3, #5
 800c0b4:	617b      	str	r3, [r7, #20]
 800c0b6:	e02c      	b.n	800c112 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d103      	bne.n	800c0c6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c0be:	f06f 0303 	mvn.w	r3, #3
 800c0c2:	617b      	str	r3, [r7, #20]
 800c0c4:	e025      	b.n	800c112 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d011      	beq.n	800c0f0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c0cc:	6839      	ldr	r1, [r7, #0]
 800c0ce:	6938      	ldr	r0, [r7, #16]
 800c0d0:	f000 fc2f 	bl	800c932 <xQueueTakeMutexRecursive>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d01b      	beq.n	800c112 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d003      	beq.n	800c0e8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c0e0:	f06f 0301 	mvn.w	r3, #1
 800c0e4:	617b      	str	r3, [r7, #20]
 800c0e6:	e014      	b.n	800c112 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c0e8:	f06f 0302 	mvn.w	r3, #2
 800c0ec:	617b      	str	r3, [r7, #20]
 800c0ee:	e010      	b.n	800c112 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6938      	ldr	r0, [r7, #16]
 800c0f4:	f000 ffd4 	bl	800d0a0 <xQueueSemaphoreTake>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d009      	beq.n	800c112 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d003      	beq.n	800c10c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c104:	f06f 0301 	mvn.w	r3, #1
 800c108:	617b      	str	r3, [r7, #20]
 800c10a:	e002      	b.n	800c112 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c10c:	f06f 0302 	mvn.w	r3, #2
 800c110:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c112:	697b      	ldr	r3, [r7, #20]
}
 800c114:	4618      	mov	r0, r3
 800c116:	3718      	adds	r7, #24
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f023 0301 	bic.w	r3, r3, #1
 800c12a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f003 0301 	and.w	r3, r3, #1
 800c132:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c134:	2300      	movs	r3, #0
 800c136:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c138:	f3ef 8305 	mrs	r3, IPSR
 800c13c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c13e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c140:	2b00      	cmp	r3, #0
 800c142:	d003      	beq.n	800c14c <osMutexRelease+0x30>
    stat = osErrorISR;
 800c144:	f06f 0305 	mvn.w	r3, #5
 800c148:	617b      	str	r3, [r7, #20]
 800c14a:	e01f      	b.n	800c18c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d103      	bne.n	800c15a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c152:	f06f 0303 	mvn.w	r3, #3
 800c156:	617b      	str	r3, [r7, #20]
 800c158:	e018      	b.n	800c18c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d009      	beq.n	800c174 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c160:	6938      	ldr	r0, [r7, #16]
 800c162:	f000 fbb1 	bl	800c8c8 <xQueueGiveMutexRecursive>
 800c166:	4603      	mov	r3, r0
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d00f      	beq.n	800c18c <osMutexRelease+0x70>
        stat = osErrorResource;
 800c16c:	f06f 0302 	mvn.w	r3, #2
 800c170:	617b      	str	r3, [r7, #20]
 800c172:	e00b      	b.n	800c18c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c174:	2300      	movs	r3, #0
 800c176:	2200      	movs	r2, #0
 800c178:	2100      	movs	r1, #0
 800c17a:	6938      	ldr	r0, [r7, #16]
 800c17c:	f000 fc7e 	bl	800ca7c <xQueueGenericSend>
 800c180:	4603      	mov	r3, r0
 800c182:	2b01      	cmp	r3, #1
 800c184:	d002      	beq.n	800c18c <osMutexRelease+0x70>
        stat = osErrorResource;
 800c186:	f06f 0302 	mvn.w	r3, #2
 800c18a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c18c:	697b      	ldr	r3, [r7, #20]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3718      	adds	r7, #24
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c196:	b580      	push	{r7, lr}
 800c198:	b08a      	sub	sp, #40	@ 0x28
 800c19a:	af02      	add	r7, sp, #8
 800c19c:	60f8      	str	r0, [r7, #12]
 800c19e:	60b9      	str	r1, [r7, #8]
 800c1a0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1a6:	f3ef 8305 	mrs	r3, IPSR
 800c1aa:	613b      	str	r3, [r7, #16]
  return(result);
 800c1ac:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d175      	bne.n	800c29e <osSemaphoreNew+0x108>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d072      	beq.n	800c29e <osSemaphoreNew+0x108>
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d86e      	bhi.n	800c29e <osSemaphoreNew+0x108>
    mem = -1;
 800c1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d015      	beq.n	800c1f8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d006      	beq.n	800c1e2 <osSemaphoreNew+0x4c>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	2b4f      	cmp	r3, #79	@ 0x4f
 800c1da:	d902      	bls.n	800c1e2 <osSemaphoreNew+0x4c>
        mem = 1;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	61bb      	str	r3, [r7, #24]
 800c1e0:	e00c      	b.n	800c1fc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d108      	bne.n	800c1fc <osSemaphoreNew+0x66>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d104      	bne.n	800c1fc <osSemaphoreNew+0x66>
          mem = 0;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	61bb      	str	r3, [r7, #24]
 800c1f6:	e001      	b.n	800c1fc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c202:	d04c      	beq.n	800c29e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2b01      	cmp	r3, #1
 800c208:	d128      	bne.n	800c25c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d10a      	bne.n	800c226 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	2203      	movs	r2, #3
 800c216:	9200      	str	r2, [sp, #0]
 800c218:	2200      	movs	r2, #0
 800c21a:	2100      	movs	r1, #0
 800c21c:	2001      	movs	r0, #1
 800c21e:	f000 fa2b 	bl	800c678 <xQueueGenericCreateStatic>
 800c222:	61f8      	str	r0, [r7, #28]
 800c224:	e005      	b.n	800c232 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c226:	2203      	movs	r2, #3
 800c228:	2100      	movs	r1, #0
 800c22a:	2001      	movs	r0, #1
 800c22c:	f000 faa1 	bl	800c772 <xQueueGenericCreate>
 800c230:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d022      	beq.n	800c27e <osSemaphoreNew+0xe8>
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d01f      	beq.n	800c27e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c23e:	2300      	movs	r3, #0
 800c240:	2200      	movs	r2, #0
 800c242:	2100      	movs	r1, #0
 800c244:	69f8      	ldr	r0, [r7, #28]
 800c246:	f000 fc19 	bl	800ca7c <xQueueGenericSend>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d016      	beq.n	800c27e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c250:	69f8      	ldr	r0, [r7, #28]
 800c252:	f001 f8b7 	bl	800d3c4 <vQueueDelete>
            hSemaphore = NULL;
 800c256:	2300      	movs	r3, #0
 800c258:	61fb      	str	r3, [r7, #28]
 800c25a:	e010      	b.n	800c27e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d108      	bne.n	800c274 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	461a      	mov	r2, r3
 800c268:	68b9      	ldr	r1, [r7, #8]
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f000 fb98 	bl	800c9a0 <xQueueCreateCountingSemaphoreStatic>
 800c270:	61f8      	str	r0, [r7, #28]
 800c272:	e004      	b.n	800c27e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c274:	68b9      	ldr	r1, [r7, #8]
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	f000 fbcb 	bl	800ca12 <xQueueCreateCountingSemaphore>
 800c27c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d00c      	beq.n	800c29e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	617b      	str	r3, [r7, #20]
 800c290:	e001      	b.n	800c296 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c292:	2300      	movs	r3, #0
 800c294:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c296:	6979      	ldr	r1, [r7, #20]
 800c298:	69f8      	ldr	r0, [r7, #28]
 800c29a:	f001 f9df 	bl	800d65c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c29e:	69fb      	ldr	r3, [r7, #28]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3720      	adds	r7, #32
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b086      	sub	sp, #24
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d103      	bne.n	800c2c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c2c0:	f06f 0303 	mvn.w	r3, #3
 800c2c4:	617b      	str	r3, [r7, #20]
 800c2c6:	e039      	b.n	800c33c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2c8:	f3ef 8305 	mrs	r3, IPSR
 800c2cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d022      	beq.n	800c31a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d003      	beq.n	800c2e2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c2da:	f06f 0303 	mvn.w	r3, #3
 800c2de:	617b      	str	r3, [r7, #20]
 800c2e0:	e02c      	b.n	800c33c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c2e6:	f107 0308 	add.w	r3, r7, #8
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	6938      	ldr	r0, [r7, #16]
 800c2f0:	f000 ffe6 	bl	800d2c0 <xQueueReceiveFromISR>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d003      	beq.n	800c302 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c2fa:	f06f 0302 	mvn.w	r3, #2
 800c2fe:	617b      	str	r3, [r7, #20]
 800c300:	e01c      	b.n	800c33c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d019      	beq.n	800c33c <osSemaphoreAcquire+0x94>
 800c308:	4b0f      	ldr	r3, [pc, #60]	@ (800c348 <osSemaphoreAcquire+0xa0>)
 800c30a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c30e:	601a      	str	r2, [r3, #0]
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	e010      	b.n	800c33c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c31a:	6839      	ldr	r1, [r7, #0]
 800c31c:	6938      	ldr	r0, [r7, #16]
 800c31e:	f000 febf 	bl	800d0a0 <xQueueSemaphoreTake>
 800c322:	4603      	mov	r3, r0
 800c324:	2b01      	cmp	r3, #1
 800c326:	d009      	beq.n	800c33c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d003      	beq.n	800c336 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c32e:	f06f 0301 	mvn.w	r3, #1
 800c332:	617b      	str	r3, [r7, #20]
 800c334:	e002      	b.n	800c33c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c336:	f06f 0302 	mvn.w	r3, #2
 800c33a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c33c:	697b      	ldr	r3, [r7, #20]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3718      	adds	r7, #24
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	e000ed04 	.word	0xe000ed04

0800c34c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b086      	sub	sp, #24
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c358:	2300      	movs	r3, #0
 800c35a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d103      	bne.n	800c36a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c362:	f06f 0303 	mvn.w	r3, #3
 800c366:	617b      	str	r3, [r7, #20]
 800c368:	e02c      	b.n	800c3c4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c36a:	f3ef 8305 	mrs	r3, IPSR
 800c36e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c370:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c372:	2b00      	cmp	r3, #0
 800c374:	d01a      	beq.n	800c3ac <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c376:	2300      	movs	r3, #0
 800c378:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c37a:	f107 0308 	add.w	r3, r7, #8
 800c37e:	4619      	mov	r1, r3
 800c380:	6938      	ldr	r0, [r7, #16]
 800c382:	f000 fd1b 	bl	800cdbc <xQueueGiveFromISR>
 800c386:	4603      	mov	r3, r0
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d003      	beq.n	800c394 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c38c:	f06f 0302 	mvn.w	r3, #2
 800c390:	617b      	str	r3, [r7, #20]
 800c392:	e017      	b.n	800c3c4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d014      	beq.n	800c3c4 <osSemaphoreRelease+0x78>
 800c39a:	4b0d      	ldr	r3, [pc, #52]	@ (800c3d0 <osSemaphoreRelease+0x84>)
 800c39c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3a0:	601a      	str	r2, [r3, #0]
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	e00b      	b.n	800c3c4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	6938      	ldr	r0, [r7, #16]
 800c3b4:	f000 fb62 	bl	800ca7c <xQueueGenericSend>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d002      	beq.n	800c3c4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c3be:	f06f 0302 	mvn.w	r3, #2
 800c3c2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c3c4:	697b      	ldr	r3, [r7, #20]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3718      	adds	r7, #24
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	e000ed04 	.word	0xe000ed04

0800c3d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	4a07      	ldr	r2, [pc, #28]	@ (800c400 <vApplicationGetIdleTaskMemory+0x2c>)
 800c3e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	4a06      	ldr	r2, [pc, #24]	@ (800c404 <vApplicationGetIdleTaskMemory+0x30>)
 800c3ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2280      	movs	r2, #128	@ 0x80
 800c3f0:	601a      	str	r2, [r3, #0]
}
 800c3f2:	bf00      	nop
 800c3f4:	3714      	adds	r7, #20
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr
 800c3fe:	bf00      	nop
 800c400:	20000c98 	.word	0x20000c98
 800c404:	20000cf4 	.word	0x20000cf4

0800c408 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	4a07      	ldr	r2, [pc, #28]	@ (800c434 <vApplicationGetTimerTaskMemory+0x2c>)
 800c418:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	4a06      	ldr	r2, [pc, #24]	@ (800c438 <vApplicationGetTimerTaskMemory+0x30>)
 800c41e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c426:	601a      	str	r2, [r3, #0]
}
 800c428:	bf00      	nop
 800c42a:	3714      	adds	r7, #20
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr
 800c434:	20000ef4 	.word	0x20000ef4
 800c438:	20000f50 	.word	0x20000f50

0800c43c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f103 0208 	add.w	r2, r3, #8
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f04f 32ff 	mov.w	r2, #4294967295
 800c454:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f103 0208 	add.w	r2, r3, #8
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f103 0208 	add.w	r2, r3, #8
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c470:	bf00      	nop
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c48a:	bf00      	nop
 800c48c:	370c      	adds	r7, #12
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr

0800c496 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c496:	b480      	push	{r7}
 800c498:	b085      	sub	sp, #20
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
 800c49e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	689a      	ldr	r2, [r3, #8]
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	683a      	ldr	r2, [r7, #0]
 800c4ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	683a      	ldr	r2, [r7, #0]
 800c4c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	1c5a      	adds	r2, r3, #1
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	601a      	str	r2, [r3, #0]
}
 800c4d2:	bf00      	nop
 800c4d4:	3714      	adds	r7, #20
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr

0800c4de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c4de:	b480      	push	{r7}
 800c4e0:	b085      	sub	sp, #20
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
 800c4e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f4:	d103      	bne.n	800c4fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	691b      	ldr	r3, [r3, #16]
 800c4fa:	60fb      	str	r3, [r7, #12]
 800c4fc:	e00c      	b.n	800c518 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	3308      	adds	r3, #8
 800c502:	60fb      	str	r3, [r7, #12]
 800c504:	e002      	b.n	800c50c <vListInsert+0x2e>
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	60fb      	str	r3, [r7, #12]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	429a      	cmp	r2, r3
 800c516:	d2f6      	bcs.n	800c506 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	683a      	ldr	r2, [r7, #0]
 800c526:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	683a      	ldr	r2, [r7, #0]
 800c532:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	1c5a      	adds	r2, r3, #1
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	601a      	str	r2, [r3, #0]
}
 800c544:	bf00      	nop
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	691b      	ldr	r3, [r3, #16]
 800c55c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	6892      	ldr	r2, [r2, #8]
 800c566:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	6852      	ldr	r2, [r2, #4]
 800c570:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d103      	bne.n	800c584 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	689a      	ldr	r2, [r3, #8]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	1e5a      	subs	r2, r3, #1
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3714      	adds	r7, #20
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d10b      	bne.n	800c5d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5bc:	f383 8811 	msr	BASEPRI, r3
 800c5c0:	f3bf 8f6f 	isb	sy
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c5ca:	bf00      	nop
 800c5cc:	bf00      	nop
 800c5ce:	e7fd      	b.n	800c5cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c5d0:	f002 fd72 	bl	800f0b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5dc:	68f9      	ldr	r1, [r7, #12]
 800c5de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c5e0:	fb01 f303 	mul.w	r3, r1, r3
 800c5e4:	441a      	add	r2, r3
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c600:	3b01      	subs	r3, #1
 800c602:	68f9      	ldr	r1, [r7, #12]
 800c604:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c606:	fb01 f303 	mul.w	r3, r1, r3
 800c60a:	441a      	add	r2, r3
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	22ff      	movs	r2, #255	@ 0xff
 800c614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	22ff      	movs	r2, #255	@ 0xff
 800c61c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d114      	bne.n	800c650 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	691b      	ldr	r3, [r3, #16]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d01a      	beq.n	800c664 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	3310      	adds	r3, #16
 800c632:	4618      	mov	r0, r3
 800c634:	f001 fd04 	bl	800e040 <xTaskRemoveFromEventList>
 800c638:	4603      	mov	r3, r0
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d012      	beq.n	800c664 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c63e:	4b0d      	ldr	r3, [pc, #52]	@ (800c674 <xQueueGenericReset+0xd0>)
 800c640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c644:	601a      	str	r2, [r3, #0]
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	f3bf 8f6f 	isb	sy
 800c64e:	e009      	b.n	800c664 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	3310      	adds	r3, #16
 800c654:	4618      	mov	r0, r3
 800c656:	f7ff fef1 	bl	800c43c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	3324      	adds	r3, #36	@ 0x24
 800c65e:	4618      	mov	r0, r3
 800c660:	f7ff feec 	bl	800c43c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c664:	f002 fd5a 	bl	800f11c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c668:	2301      	movs	r3, #1
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3710      	adds	r7, #16
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	e000ed04 	.word	0xe000ed04

0800c678 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b08e      	sub	sp, #56	@ 0x38
 800c67c:	af02      	add	r7, sp, #8
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	607a      	str	r2, [r7, #4]
 800c684:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d10b      	bne.n	800c6a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c690:	f383 8811 	msr	BASEPRI, r3
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c69e:	bf00      	nop
 800c6a0:	bf00      	nop
 800c6a2:	e7fd      	b.n	800c6a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d10b      	bne.n	800c6c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ae:	f383 8811 	msr	BASEPRI, r3
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	f3bf 8f4f 	dsb	sy
 800c6ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c6bc:	bf00      	nop
 800c6be:	bf00      	nop
 800c6c0:	e7fd      	b.n	800c6be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d002      	beq.n	800c6ce <xQueueGenericCreateStatic+0x56>
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <xQueueGenericCreateStatic+0x5a>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e000      	b.n	800c6d4 <xQueueGenericCreateStatic+0x5c>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10b      	bne.n	800c6f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6dc:	f383 8811 	msr	BASEPRI, r3
 800c6e0:	f3bf 8f6f 	isb	sy
 800c6e4:	f3bf 8f4f 	dsb	sy
 800c6e8:	623b      	str	r3, [r7, #32]
}
 800c6ea:	bf00      	nop
 800c6ec:	bf00      	nop
 800c6ee:	e7fd      	b.n	800c6ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d102      	bne.n	800c6fc <xQueueGenericCreateStatic+0x84>
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <xQueueGenericCreateStatic+0x88>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e000      	b.n	800c702 <xQueueGenericCreateStatic+0x8a>
 800c700:	2300      	movs	r3, #0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10b      	bne.n	800c71e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	61fb      	str	r3, [r7, #28]
}
 800c718:	bf00      	nop
 800c71a:	bf00      	nop
 800c71c:	e7fd      	b.n	800c71a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c71e:	2350      	movs	r3, #80	@ 0x50
 800c720:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	2b50      	cmp	r3, #80	@ 0x50
 800c726:	d00b      	beq.n	800c740 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c72c:	f383 8811 	msr	BASEPRI, r3
 800c730:	f3bf 8f6f 	isb	sy
 800c734:	f3bf 8f4f 	dsb	sy
 800c738:	61bb      	str	r3, [r7, #24]
}
 800c73a:	bf00      	nop
 800c73c:	bf00      	nop
 800c73e:	e7fd      	b.n	800c73c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c740:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00d      	beq.n	800c768 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c74e:	2201      	movs	r2, #1
 800c750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c754:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	4613      	mov	r3, r2
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	68b9      	ldr	r1, [r7, #8]
 800c762:	68f8      	ldr	r0, [r7, #12]
 800c764:	f000 f840 	bl	800c7e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3730      	adds	r7, #48	@ 0x30
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}

0800c772 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c772:	b580      	push	{r7, lr}
 800c774:	b08a      	sub	sp, #40	@ 0x28
 800c776:	af02      	add	r7, sp, #8
 800c778:	60f8      	str	r0, [r7, #12]
 800c77a:	60b9      	str	r1, [r7, #8]
 800c77c:	4613      	mov	r3, r2
 800c77e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d10b      	bne.n	800c79e <xQueueGenericCreate+0x2c>
	__asm volatile
 800c786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c78a:	f383 8811 	msr	BASEPRI, r3
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	613b      	str	r3, [r7, #16]
}
 800c798:	bf00      	nop
 800c79a:	bf00      	nop
 800c79c:	e7fd      	b.n	800c79a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	fb02 f303 	mul.w	r3, r2, r3
 800c7a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	3350      	adds	r3, #80	@ 0x50
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f002 fda5 	bl	800f2fc <pvPortMalloc>
 800c7b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d011      	beq.n	800c7de <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	3350      	adds	r3, #80	@ 0x50
 800c7c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c7cc:	79fa      	ldrb	r2, [r7, #7]
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	9300      	str	r3, [sp, #0]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	697a      	ldr	r2, [r7, #20]
 800c7d6:	68b9      	ldr	r1, [r7, #8]
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f000 f805 	bl	800c7e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c7de:	69bb      	ldr	r3, [r7, #24]
	}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3720      	adds	r7, #32
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	607a      	str	r2, [r7, #4]
 800c7f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d103      	bne.n	800c804 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	69ba      	ldr	r2, [r7, #24]
 800c800:	601a      	str	r2, [r3, #0]
 800c802:	e002      	b.n	800c80a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c804:	69bb      	ldr	r3, [r7, #24]
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c810:	69bb      	ldr	r3, [r7, #24]
 800c812:	68ba      	ldr	r2, [r7, #8]
 800c814:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c816:	2101      	movs	r1, #1
 800c818:	69b8      	ldr	r0, [r7, #24]
 800c81a:	f7ff fec3 	bl	800c5a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	78fa      	ldrb	r2, [r7, #3]
 800c822:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c826:	bf00      	nop
 800c828:	3710      	adds	r7, #16
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b082      	sub	sp, #8
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00e      	beq.n	800c85a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c84e:	2300      	movs	r3, #0
 800c850:	2200      	movs	r2, #0
 800c852:	2100      	movs	r1, #0
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f911 	bl	800ca7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c85a:	bf00      	nop
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c862:	b580      	push	{r7, lr}
 800c864:	b086      	sub	sp, #24
 800c866:	af00      	add	r7, sp, #0
 800c868:	4603      	mov	r3, r0
 800c86a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c86c:	2301      	movs	r3, #1
 800c86e:	617b      	str	r3, [r7, #20]
 800c870:	2300      	movs	r3, #0
 800c872:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c874:	79fb      	ldrb	r3, [r7, #7]
 800c876:	461a      	mov	r2, r3
 800c878:	6939      	ldr	r1, [r7, #16]
 800c87a:	6978      	ldr	r0, [r7, #20]
 800c87c:	f7ff ff79 	bl	800c772 <xQueueGenericCreate>
 800c880:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f7ff ffd3 	bl	800c82e <prvInitialiseMutex>

		return xNewQueue;
 800c888:	68fb      	ldr	r3, [r7, #12]
	}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3718      	adds	r7, #24
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c892:	b580      	push	{r7, lr}
 800c894:	b088      	sub	sp, #32
 800c896:	af02      	add	r7, sp, #8
 800c898:	4603      	mov	r3, r0
 800c89a:	6039      	str	r1, [r7, #0]
 800c89c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	617b      	str	r3, [r7, #20]
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c8a6:	79fb      	ldrb	r3, [r7, #7]
 800c8a8:	9300      	str	r3, [sp, #0]
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	6939      	ldr	r1, [r7, #16]
 800c8b0:	6978      	ldr	r0, [r7, #20]
 800c8b2:	f7ff fee1 	bl	800c678 <xQueueGenericCreateStatic>
 800c8b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	f7ff ffb8 	bl	800c82e <prvInitialiseMutex>

		return xNewQueue;
 800c8be:	68fb      	ldr	r3, [r7, #12]
	}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3718      	adds	r7, #24
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c8c8:	b590      	push	{r4, r7, lr}
 800c8ca:	b087      	sub	sp, #28
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d10b      	bne.n	800c8f2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800c8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8de:	f383 8811 	msr	BASEPRI, r3
 800c8e2:	f3bf 8f6f 	isb	sy
 800c8e6:	f3bf 8f4f 	dsb	sy
 800c8ea:	60fb      	str	r3, [r7, #12]
}
 800c8ec:	bf00      	nop
 800c8ee:	bf00      	nop
 800c8f0:	e7fd      	b.n	800c8ee <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	689c      	ldr	r4, [r3, #8]
 800c8f6:	f001 fd63 	bl	800e3c0 <xTaskGetCurrentTaskHandle>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	429c      	cmp	r4, r3
 800c8fe:	d111      	bne.n	800c924 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	1e5a      	subs	r2, r3, #1
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d105      	bne.n	800c91e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c912:	2300      	movs	r3, #0
 800c914:	2200      	movs	r2, #0
 800c916:	2100      	movs	r1, #0
 800c918:	6938      	ldr	r0, [r7, #16]
 800c91a:	f000 f8af 	bl	800ca7c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c91e:	2301      	movs	r3, #1
 800c920:	617b      	str	r3, [r7, #20]
 800c922:	e001      	b.n	800c928 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c924:	2300      	movs	r3, #0
 800c926:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c928:	697b      	ldr	r3, [r7, #20]
	}
 800c92a:	4618      	mov	r0, r3
 800c92c:	371c      	adds	r7, #28
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd90      	pop	{r4, r7, pc}

0800c932 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c932:	b590      	push	{r4, r7, lr}
 800c934:	b087      	sub	sp, #28
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d10b      	bne.n	800c95e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800c946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c94a:	f383 8811 	msr	BASEPRI, r3
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f3bf 8f4f 	dsb	sy
 800c956:	60fb      	str	r3, [r7, #12]
}
 800c958:	bf00      	nop
 800c95a:	bf00      	nop
 800c95c:	e7fd      	b.n	800c95a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	689c      	ldr	r4, [r3, #8]
 800c962:	f001 fd2d 	bl	800e3c0 <xTaskGetCurrentTaskHandle>
 800c966:	4603      	mov	r3, r0
 800c968:	429c      	cmp	r4, r3
 800c96a:	d107      	bne.n	800c97c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	1c5a      	adds	r2, r3, #1
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c976:	2301      	movs	r3, #1
 800c978:	617b      	str	r3, [r7, #20]
 800c97a:	e00c      	b.n	800c996 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c97c:	6839      	ldr	r1, [r7, #0]
 800c97e:	6938      	ldr	r0, [r7, #16]
 800c980:	f000 fb8e 	bl	800d0a0 <xQueueSemaphoreTake>
 800c984:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d004      	beq.n	800c996 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	1c5a      	adds	r2, r3, #1
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c996:	697b      	ldr	r3, [r7, #20]
	}
 800c998:	4618      	mov	r0, r3
 800c99a:	371c      	adds	r7, #28
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd90      	pop	{r4, r7, pc}

0800c9a0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b08a      	sub	sp, #40	@ 0x28
 800c9a4:	af02      	add	r7, sp, #8
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d10b      	bne.n	800c9ca <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800c9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b6:	f383 8811 	msr	BASEPRI, r3
 800c9ba:	f3bf 8f6f 	isb	sy
 800c9be:	f3bf 8f4f 	dsb	sy
 800c9c2:	61bb      	str	r3, [r7, #24]
}
 800c9c4:	bf00      	nop
 800c9c6:	bf00      	nop
 800c9c8:	e7fd      	b.n	800c9c6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c9ca:	68ba      	ldr	r2, [r7, #8]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d90b      	bls.n	800c9ea <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800c9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	617b      	str	r3, [r7, #20]
}
 800c9e4:	bf00      	nop
 800c9e6:	bf00      	nop
 800c9e8:	e7fd      	b.n	800c9e6 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c9ea:	2302      	movs	r3, #2
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f7ff fe3f 	bl	800c678 <xQueueGenericCreateStatic>
 800c9fa:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d002      	beq.n	800ca08 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	68ba      	ldr	r2, [r7, #8]
 800ca06:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ca08:	69fb      	ldr	r3, [r7, #28]
	}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3720      	adds	r7, #32
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}

0800ca12 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b086      	sub	sp, #24
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
 800ca1a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d10b      	bne.n	800ca3a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800ca22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca26:	f383 8811 	msr	BASEPRI, r3
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	613b      	str	r3, [r7, #16]
}
 800ca34:	bf00      	nop
 800ca36:	bf00      	nop
 800ca38:	e7fd      	b.n	800ca36 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ca3a:	683a      	ldr	r2, [r7, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d90b      	bls.n	800ca5a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800ca42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca46:	f383 8811 	msr	BASEPRI, r3
 800ca4a:	f3bf 8f6f 	isb	sy
 800ca4e:	f3bf 8f4f 	dsb	sy
 800ca52:	60fb      	str	r3, [r7, #12]
}
 800ca54:	bf00      	nop
 800ca56:	bf00      	nop
 800ca58:	e7fd      	b.n	800ca56 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7ff fe87 	bl	800c772 <xQueueGenericCreate>
 800ca64:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d002      	beq.n	800ca72 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	683a      	ldr	r2, [r7, #0]
 800ca70:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ca72:	697b      	ldr	r3, [r7, #20]
	}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3718      	adds	r7, #24
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b08e      	sub	sp, #56	@ 0x38
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
 800ca88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ca92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d10b      	bne.n	800cab0 <xQueueGenericSend+0x34>
	__asm volatile
 800ca98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca9c:	f383 8811 	msr	BASEPRI, r3
 800caa0:	f3bf 8f6f 	isb	sy
 800caa4:	f3bf 8f4f 	dsb	sy
 800caa8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800caaa:	bf00      	nop
 800caac:	bf00      	nop
 800caae:	e7fd      	b.n	800caac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d103      	bne.n	800cabe <xQueueGenericSend+0x42>
 800cab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d101      	bne.n	800cac2 <xQueueGenericSend+0x46>
 800cabe:	2301      	movs	r3, #1
 800cac0:	e000      	b.n	800cac4 <xQueueGenericSend+0x48>
 800cac2:	2300      	movs	r3, #0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10b      	bne.n	800cae0 <xQueueGenericSend+0x64>
	__asm volatile
 800cac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cacc:	f383 8811 	msr	BASEPRI, r3
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cada:	bf00      	nop
 800cadc:	bf00      	nop
 800cade:	e7fd      	b.n	800cadc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	d103      	bne.n	800caee <xQueueGenericSend+0x72>
 800cae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caea:	2b01      	cmp	r3, #1
 800caec:	d101      	bne.n	800caf2 <xQueueGenericSend+0x76>
 800caee:	2301      	movs	r3, #1
 800caf0:	e000      	b.n	800caf4 <xQueueGenericSend+0x78>
 800caf2:	2300      	movs	r3, #0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d10b      	bne.n	800cb10 <xQueueGenericSend+0x94>
	__asm volatile
 800caf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cafc:	f383 8811 	msr	BASEPRI, r3
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	623b      	str	r3, [r7, #32]
}
 800cb0a:	bf00      	nop
 800cb0c:	bf00      	nop
 800cb0e:	e7fd      	b.n	800cb0c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb10:	f001 fc66 	bl	800e3e0 <xTaskGetSchedulerState>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d102      	bne.n	800cb20 <xQueueGenericSend+0xa4>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <xQueueGenericSend+0xa8>
 800cb20:	2301      	movs	r3, #1
 800cb22:	e000      	b.n	800cb26 <xQueueGenericSend+0xaa>
 800cb24:	2300      	movs	r3, #0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d10b      	bne.n	800cb42 <xQueueGenericSend+0xc6>
	__asm volatile
 800cb2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb2e:	f383 8811 	msr	BASEPRI, r3
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	f3bf 8f4f 	dsb	sy
 800cb3a:	61fb      	str	r3, [r7, #28]
}
 800cb3c:	bf00      	nop
 800cb3e:	bf00      	nop
 800cb40:	e7fd      	b.n	800cb3e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb42:	f002 fab9 	bl	800f0b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d302      	bcc.n	800cb58 <xQueueGenericSend+0xdc>
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d129      	bne.n	800cbac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb58:	683a      	ldr	r2, [r7, #0]
 800cb5a:	68b9      	ldr	r1, [r7, #8]
 800cb5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cb5e:	f000 fc6d 	bl	800d43c <prvCopyDataToQueue>
 800cb62:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d010      	beq.n	800cb8e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6e:	3324      	adds	r3, #36	@ 0x24
 800cb70:	4618      	mov	r0, r3
 800cb72:	f001 fa65 	bl	800e040 <xTaskRemoveFromEventList>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d013      	beq.n	800cba4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cb7c:	4b3f      	ldr	r3, [pc, #252]	@ (800cc7c <xQueueGenericSend+0x200>)
 800cb7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	f3bf 8f4f 	dsb	sy
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	e00a      	b.n	800cba4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d007      	beq.n	800cba4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cb94:	4b39      	ldr	r3, [pc, #228]	@ (800cc7c <xQueueGenericSend+0x200>)
 800cb96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb9a:	601a      	str	r2, [r3, #0]
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cba4:	f002 faba 	bl	800f11c <vPortExitCritical>
				return pdPASS;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e063      	b.n	800cc74 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d103      	bne.n	800cbba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cbb2:	f002 fab3 	bl	800f11c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	e05c      	b.n	800cc74 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cbba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d106      	bne.n	800cbce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cbc0:	f107 0314 	add.w	r3, r7, #20
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f001 fa9f 	bl	800e108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cbce:	f002 faa5 	bl	800f11c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cbd2:	f001 f80f 	bl	800dbf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cbd6:	f002 fa6f 	bl	800f0b8 <vPortEnterCritical>
 800cbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cbe0:	b25b      	sxtb	r3, r3
 800cbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe6:	d103      	bne.n	800cbf0 <xQueueGenericSend+0x174>
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbea:	2200      	movs	r2, #0
 800cbec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cbf6:	b25b      	sxtb	r3, r3
 800cbf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbfc:	d103      	bne.n	800cc06 <xQueueGenericSend+0x18a>
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc00:	2200      	movs	r2, #0
 800cc02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc06:	f002 fa89 	bl	800f11c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc0a:	1d3a      	adds	r2, r7, #4
 800cc0c:	f107 0314 	add.w	r3, r7, #20
 800cc10:	4611      	mov	r1, r2
 800cc12:	4618      	mov	r0, r3
 800cc14:	f001 fa8e 	bl	800e134 <xTaskCheckForTimeOut>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d124      	bne.n	800cc68 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cc1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc20:	f000 fd04 	bl	800d62c <prvIsQueueFull>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d018      	beq.n	800cc5c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2c:	3310      	adds	r3, #16
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	4611      	mov	r1, r2
 800cc32:	4618      	mov	r0, r3
 800cc34:	f001 f9b2 	bl	800df9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cc38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc3a:	f000 fc8f 	bl	800d55c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cc3e:	f000 ffe7 	bl	800dc10 <xTaskResumeAll>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	f47f af7c 	bne.w	800cb42 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cc4a:	4b0c      	ldr	r3, [pc, #48]	@ (800cc7c <xQueueGenericSend+0x200>)
 800cc4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc50:	601a      	str	r2, [r3, #0]
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	e772      	b.n	800cb42 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cc5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc5e:	f000 fc7d 	bl	800d55c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc62:	f000 ffd5 	bl	800dc10 <xTaskResumeAll>
 800cc66:	e76c      	b.n	800cb42 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cc68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc6a:	f000 fc77 	bl	800d55c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc6e:	f000 ffcf 	bl	800dc10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cc72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3738      	adds	r7, #56	@ 0x38
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	e000ed04 	.word	0xe000ed04

0800cc80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b090      	sub	sp, #64	@ 0x40
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
 800cc8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cc92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d10b      	bne.n	800ccb0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cc98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ccaa:	bf00      	nop
 800ccac:	bf00      	nop
 800ccae:	e7fd      	b.n	800ccac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d103      	bne.n	800ccbe <xQueueGenericSendFromISR+0x3e>
 800ccb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d101      	bne.n	800ccc2 <xQueueGenericSendFromISR+0x42>
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e000      	b.n	800ccc4 <xQueueGenericSendFromISR+0x44>
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d10b      	bne.n	800cce0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ccc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cccc:	f383 8811 	msr	BASEPRI, r3
 800ccd0:	f3bf 8f6f 	isb	sy
 800ccd4:	f3bf 8f4f 	dsb	sy
 800ccd8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ccda:	bf00      	nop
 800ccdc:	bf00      	nop
 800ccde:	e7fd      	b.n	800ccdc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d103      	bne.n	800ccee <xQueueGenericSendFromISR+0x6e>
 800cce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d101      	bne.n	800ccf2 <xQueueGenericSendFromISR+0x72>
 800ccee:	2301      	movs	r3, #1
 800ccf0:	e000      	b.n	800ccf4 <xQueueGenericSendFromISR+0x74>
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d10b      	bne.n	800cd10 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ccf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccfc:	f383 8811 	msr	BASEPRI, r3
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	f3bf 8f4f 	dsb	sy
 800cd08:	623b      	str	r3, [r7, #32]
}
 800cd0a:	bf00      	nop
 800cd0c:	bf00      	nop
 800cd0e:	e7fd      	b.n	800cd0c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd10:	f002 fab2 	bl	800f278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cd14:	f3ef 8211 	mrs	r2, BASEPRI
 800cd18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd1c:	f383 8811 	msr	BASEPRI, r3
 800cd20:	f3bf 8f6f 	isb	sy
 800cd24:	f3bf 8f4f 	dsb	sy
 800cd28:	61fa      	str	r2, [r7, #28]
 800cd2a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cd2c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd2e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d302      	bcc.n	800cd42 <xQueueGenericSendFromISR+0xc2>
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d12f      	bne.n	800cda2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd50:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	68b9      	ldr	r1, [r7, #8]
 800cd56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cd58:	f000 fb70 	bl	800d43c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cd5c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cd60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd64:	d112      	bne.n	800cd8c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d016      	beq.n	800cd9c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd70:	3324      	adds	r3, #36	@ 0x24
 800cd72:	4618      	mov	r0, r3
 800cd74:	f001 f964 	bl	800e040 <xTaskRemoveFromEventList>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00e      	beq.n	800cd9c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00b      	beq.n	800cd9c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2201      	movs	r2, #1
 800cd88:	601a      	str	r2, [r3, #0]
 800cd8a:	e007      	b.n	800cd9c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cd8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cd90:	3301      	adds	r3, #1
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	b25a      	sxtb	r2, r3
 800cd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cda0:	e001      	b.n	800cda6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cda2:	2300      	movs	r3, #0
 800cda4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cda6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cda8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cdb0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cdb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3740      	adds	r7, #64	@ 0x40
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b08e      	sub	sp, #56	@ 0x38
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cdca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d10b      	bne.n	800cde8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800cdd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd4:	f383 8811 	msr	BASEPRI, r3
 800cdd8:	f3bf 8f6f 	isb	sy
 800cddc:	f3bf 8f4f 	dsb	sy
 800cde0:	623b      	str	r3, [r7, #32]
}
 800cde2:	bf00      	nop
 800cde4:	bf00      	nop
 800cde6:	e7fd      	b.n	800cde4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cde8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00b      	beq.n	800ce08 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800cdf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf4:	f383 8811 	msr	BASEPRI, r3
 800cdf8:	f3bf 8f6f 	isb	sy
 800cdfc:	f3bf 8f4f 	dsb	sy
 800ce00:	61fb      	str	r3, [r7, #28]
}
 800ce02:	bf00      	nop
 800ce04:	bf00      	nop
 800ce06:	e7fd      	b.n	800ce04 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ce08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d103      	bne.n	800ce18 <xQueueGiveFromISR+0x5c>
 800ce10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d101      	bne.n	800ce1c <xQueueGiveFromISR+0x60>
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e000      	b.n	800ce1e <xQueueGiveFromISR+0x62>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d10b      	bne.n	800ce3a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800ce22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce26:	f383 8811 	msr	BASEPRI, r3
 800ce2a:	f3bf 8f6f 	isb	sy
 800ce2e:	f3bf 8f4f 	dsb	sy
 800ce32:	61bb      	str	r3, [r7, #24]
}
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop
 800ce38:	e7fd      	b.n	800ce36 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce3a:	f002 fa1d 	bl	800f278 <vPortValidateInterruptPriority>
	__asm volatile
 800ce3e:	f3ef 8211 	mrs	r2, BASEPRI
 800ce42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce46:	f383 8811 	msr	BASEPRI, r3
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	617a      	str	r2, [r7, #20]
 800ce54:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ce56:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce5e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ce60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d22b      	bcs.n	800cec2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ce74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce76:	1c5a      	adds	r2, r3, #1
 800ce78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ce80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce84:	d112      	bne.n	800ceac <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d016      	beq.n	800cebc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce90:	3324      	adds	r3, #36	@ 0x24
 800ce92:	4618      	mov	r0, r3
 800ce94:	f001 f8d4 	bl	800e040 <xTaskRemoveFromEventList>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00e      	beq.n	800cebc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00b      	beq.n	800cebc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	2201      	movs	r2, #1
 800cea8:	601a      	str	r2, [r3, #0]
 800ceaa:	e007      	b.n	800cebc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ceac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	b25a      	sxtb	r2, r3
 800ceb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cebc:	2301      	movs	r3, #1
 800cebe:	637b      	str	r3, [r7, #52]	@ 0x34
 800cec0:	e001      	b.n	800cec6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cec2:	2300      	movs	r3, #0
 800cec4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cec8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f383 8811 	msr	BASEPRI, r3
}
 800ced0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ced2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3738      	adds	r7, #56	@ 0x38
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b08c      	sub	sp, #48	@ 0x30
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cee8:	2300      	movs	r3, #0
 800ceea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d10b      	bne.n	800cf0e <xQueueReceive+0x32>
	__asm volatile
 800cef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	623b      	str	r3, [r7, #32]
}
 800cf08:	bf00      	nop
 800cf0a:	bf00      	nop
 800cf0c:	e7fd      	b.n	800cf0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d103      	bne.n	800cf1c <xQueueReceive+0x40>
 800cf14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d101      	bne.n	800cf20 <xQueueReceive+0x44>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e000      	b.n	800cf22 <xQueueReceive+0x46>
 800cf20:	2300      	movs	r3, #0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d10b      	bne.n	800cf3e <xQueueReceive+0x62>
	__asm volatile
 800cf26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	61fb      	str	r3, [r7, #28]
}
 800cf38:	bf00      	nop
 800cf3a:	bf00      	nop
 800cf3c:	e7fd      	b.n	800cf3a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cf3e:	f001 fa4f 	bl	800e3e0 <xTaskGetSchedulerState>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d102      	bne.n	800cf4e <xQueueReceive+0x72>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d101      	bne.n	800cf52 <xQueueReceive+0x76>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e000      	b.n	800cf54 <xQueueReceive+0x78>
 800cf52:	2300      	movs	r3, #0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d10b      	bne.n	800cf70 <xQueueReceive+0x94>
	__asm volatile
 800cf58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf5c:	f383 8811 	msr	BASEPRI, r3
 800cf60:	f3bf 8f6f 	isb	sy
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	61bb      	str	r3, [r7, #24]
}
 800cf6a:	bf00      	nop
 800cf6c:	bf00      	nop
 800cf6e:	e7fd      	b.n	800cf6c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cf70:	f002 f8a2 	bl	800f0b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf78:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d01f      	beq.n	800cfc0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf80:	68b9      	ldr	r1, [r7, #8]
 800cf82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf84:	f000 fac4 	bl	800d510 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf8a:	1e5a      	subs	r2, r3, #1
 800cf8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf8e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00f      	beq.n	800cfb8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf9a:	3310      	adds	r3, #16
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f001 f84f 	bl	800e040 <xTaskRemoveFromEventList>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d007      	beq.n	800cfb8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cfa8:	4b3c      	ldr	r3, [pc, #240]	@ (800d09c <xQueueReceive+0x1c0>)
 800cfaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfae:	601a      	str	r2, [r3, #0]
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cfb8:	f002 f8b0 	bl	800f11c <vPortExitCritical>
				return pdPASS;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e069      	b.n	800d094 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d103      	bne.n	800cfce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cfc6:	f002 f8a9 	bl	800f11c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	e062      	b.n	800d094 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cfce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d106      	bne.n	800cfe2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cfd4:	f107 0310 	add.w	r3, r7, #16
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f001 f895 	bl	800e108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cfe2:	f002 f89b 	bl	800f11c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cfe6:	f000 fe05 	bl	800dbf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cfea:	f002 f865 	bl	800f0b8 <vPortEnterCritical>
 800cfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cff0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cff4:	b25b      	sxtb	r3, r3
 800cff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cffa:	d103      	bne.n	800d004 <xQueueReceive+0x128>
 800cffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cffe:	2200      	movs	r2, #0
 800d000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d006:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d00a:	b25b      	sxtb	r3, r3
 800d00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d010:	d103      	bne.n	800d01a <xQueueReceive+0x13e>
 800d012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d014:	2200      	movs	r2, #0
 800d016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d01a:	f002 f87f 	bl	800f11c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d01e:	1d3a      	adds	r2, r7, #4
 800d020:	f107 0310 	add.w	r3, r7, #16
 800d024:	4611      	mov	r1, r2
 800d026:	4618      	mov	r0, r3
 800d028:	f001 f884 	bl	800e134 <xTaskCheckForTimeOut>
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d123      	bne.n	800d07a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d034:	f000 fae4 	bl	800d600 <prvIsQueueEmpty>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d017      	beq.n	800d06e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d040:	3324      	adds	r3, #36	@ 0x24
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	4611      	mov	r1, r2
 800d046:	4618      	mov	r0, r3
 800d048:	f000 ffa8 	bl	800df9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d04c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d04e:	f000 fa85 	bl	800d55c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d052:	f000 fddd 	bl	800dc10 <xTaskResumeAll>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d189      	bne.n	800cf70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d05c:	4b0f      	ldr	r3, [pc, #60]	@ (800d09c <xQueueReceive+0x1c0>)
 800d05e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	f3bf 8f4f 	dsb	sy
 800d068:	f3bf 8f6f 	isb	sy
 800d06c:	e780      	b.n	800cf70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d06e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d070:	f000 fa74 	bl	800d55c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d074:	f000 fdcc 	bl	800dc10 <xTaskResumeAll>
 800d078:	e77a      	b.n	800cf70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d07a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d07c:	f000 fa6e 	bl	800d55c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d080:	f000 fdc6 	bl	800dc10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d084:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d086:	f000 fabb 	bl	800d600 <prvIsQueueEmpty>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f43f af6f 	beq.w	800cf70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d092:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d094:	4618      	mov	r0, r3
 800d096:	3730      	adds	r7, #48	@ 0x30
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	e000ed04 	.word	0xe000ed04

0800d0a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b08e      	sub	sp, #56	@ 0x38
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10b      	bne.n	800d0d4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	623b      	str	r3, [r7, #32]
}
 800d0ce:	bf00      	nop
 800d0d0:	bf00      	nop
 800d0d2:	e7fd      	b.n	800d0d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00b      	beq.n	800d0f4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e0:	f383 8811 	msr	BASEPRI, r3
 800d0e4:	f3bf 8f6f 	isb	sy
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	61fb      	str	r3, [r7, #28]
}
 800d0ee:	bf00      	nop
 800d0f0:	bf00      	nop
 800d0f2:	e7fd      	b.n	800d0f0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0f4:	f001 f974 	bl	800e3e0 <xTaskGetSchedulerState>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d102      	bne.n	800d104 <xQueueSemaphoreTake+0x64>
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d101      	bne.n	800d108 <xQueueSemaphoreTake+0x68>
 800d104:	2301      	movs	r3, #1
 800d106:	e000      	b.n	800d10a <xQueueSemaphoreTake+0x6a>
 800d108:	2300      	movs	r3, #0
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d10b      	bne.n	800d126 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d112:	f383 8811 	msr	BASEPRI, r3
 800d116:	f3bf 8f6f 	isb	sy
 800d11a:	f3bf 8f4f 	dsb	sy
 800d11e:	61bb      	str	r3, [r7, #24]
}
 800d120:	bf00      	nop
 800d122:	bf00      	nop
 800d124:	e7fd      	b.n	800d122 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d126:	f001 ffc7 	bl	800f0b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d12e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d132:	2b00      	cmp	r3, #0
 800d134:	d024      	beq.n	800d180 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d138:	1e5a      	subs	r2, r3, #1
 800d13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d13c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d104      	bne.n	800d150 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d146:	f001 fac5 	bl	800e6d4 <pvTaskIncrementMutexHeldCount>
 800d14a:	4602      	mov	r2, r0
 800d14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d152:	691b      	ldr	r3, [r3, #16]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d00f      	beq.n	800d178 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15a:	3310      	adds	r3, #16
 800d15c:	4618      	mov	r0, r3
 800d15e:	f000 ff6f 	bl	800e040 <xTaskRemoveFromEventList>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d007      	beq.n	800d178 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d168:	4b54      	ldr	r3, [pc, #336]	@ (800d2bc <xQueueSemaphoreTake+0x21c>)
 800d16a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d16e:	601a      	str	r2, [r3, #0]
 800d170:	f3bf 8f4f 	dsb	sy
 800d174:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d178:	f001 ffd0 	bl	800f11c <vPortExitCritical>
				return pdPASS;
 800d17c:	2301      	movs	r3, #1
 800d17e:	e098      	b.n	800d2b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d112      	bne.n	800d1ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00b      	beq.n	800d1a4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d190:	f383 8811 	msr	BASEPRI, r3
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	617b      	str	r3, [r7, #20]
}
 800d19e:	bf00      	nop
 800d1a0:	bf00      	nop
 800d1a2:	e7fd      	b.n	800d1a0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d1a4:	f001 ffba 	bl	800f11c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	e082      	b.n	800d2b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d106      	bne.n	800d1c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1b2:	f107 030c 	add.w	r3, r7, #12
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f000 ffa6 	bl	800e108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1c0:	f001 ffac 	bl	800f11c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1c4:	f000 fd16 	bl	800dbf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1c8:	f001 ff76 	bl	800f0b8 <vPortEnterCritical>
 800d1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d1d2:	b25b      	sxtb	r3, r3
 800d1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1d8:	d103      	bne.n	800d1e2 <xQueueSemaphoreTake+0x142>
 800d1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d1e8:	b25b      	sxtb	r3, r3
 800d1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ee:	d103      	bne.n	800d1f8 <xQueueSemaphoreTake+0x158>
 800d1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1f8:	f001 ff90 	bl	800f11c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1fc:	463a      	mov	r2, r7
 800d1fe:	f107 030c 	add.w	r3, r7, #12
 800d202:	4611      	mov	r1, r2
 800d204:	4618      	mov	r0, r3
 800d206:	f000 ff95 	bl	800e134 <xTaskCheckForTimeOut>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d132      	bne.n	800d276 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d210:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d212:	f000 f9f5 	bl	800d600 <prvIsQueueEmpty>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d026      	beq.n	800d26a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d109      	bne.n	800d238 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d224:	f001 ff48 	bl	800f0b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d22a:	689b      	ldr	r3, [r3, #8]
 800d22c:	4618      	mov	r0, r3
 800d22e:	f001 f8f5 	bl	800e41c <xTaskPriorityInherit>
 800d232:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d234:	f001 ff72 	bl	800f11c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23a:	3324      	adds	r3, #36	@ 0x24
 800d23c:	683a      	ldr	r2, [r7, #0]
 800d23e:	4611      	mov	r1, r2
 800d240:	4618      	mov	r0, r3
 800d242:	f000 feab 	bl	800df9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d246:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d248:	f000 f988 	bl	800d55c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d24c:	f000 fce0 	bl	800dc10 <xTaskResumeAll>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	f47f af67 	bne.w	800d126 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d258:	4b18      	ldr	r3, [pc, #96]	@ (800d2bc <xQueueSemaphoreTake+0x21c>)
 800d25a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d25e:	601a      	str	r2, [r3, #0]
 800d260:	f3bf 8f4f 	dsb	sy
 800d264:	f3bf 8f6f 	isb	sy
 800d268:	e75d      	b.n	800d126 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d26a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d26c:	f000 f976 	bl	800d55c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d270:	f000 fcce 	bl	800dc10 <xTaskResumeAll>
 800d274:	e757      	b.n	800d126 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d276:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d278:	f000 f970 	bl	800d55c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d27c:	f000 fcc8 	bl	800dc10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d280:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d282:	f000 f9bd 	bl	800d600 <prvIsQueueEmpty>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	f43f af4c 	beq.w	800d126 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00d      	beq.n	800d2b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d294:	f001 ff10 	bl	800f0b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d298:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d29a:	f000 f8b7 	bl	800d40c <prvGetDisinheritPriorityAfterTimeout>
 800d29e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f001 f990 	bl	800e5cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d2ac:	f001 ff36 	bl	800f11c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d2b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3738      	adds	r7, #56	@ 0x38
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	e000ed04 	.word	0xe000ed04

0800d2c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b08e      	sub	sp, #56	@ 0x38
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d10b      	bne.n	800d2ee <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	623b      	str	r3, [r7, #32]
}
 800d2e8:	bf00      	nop
 800d2ea:	bf00      	nop
 800d2ec:	e7fd      	b.n	800d2ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d103      	bne.n	800d2fc <xQueueReceiveFromISR+0x3c>
 800d2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d101      	bne.n	800d300 <xQueueReceiveFromISR+0x40>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e000      	b.n	800d302 <xQueueReceiveFromISR+0x42>
 800d300:	2300      	movs	r3, #0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d10b      	bne.n	800d31e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d30a:	f383 8811 	msr	BASEPRI, r3
 800d30e:	f3bf 8f6f 	isb	sy
 800d312:	f3bf 8f4f 	dsb	sy
 800d316:	61fb      	str	r3, [r7, #28]
}
 800d318:	bf00      	nop
 800d31a:	bf00      	nop
 800d31c:	e7fd      	b.n	800d31a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d31e:	f001 ffab 	bl	800f278 <vPortValidateInterruptPriority>
	__asm volatile
 800d322:	f3ef 8211 	mrs	r2, BASEPRI
 800d326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d32a:	f383 8811 	msr	BASEPRI, r3
 800d32e:	f3bf 8f6f 	isb	sy
 800d332:	f3bf 8f4f 	dsb	sy
 800d336:	61ba      	str	r2, [r7, #24]
 800d338:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d33a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d33c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d342:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d346:	2b00      	cmp	r3, #0
 800d348:	d02f      	beq.n	800d3aa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d354:	68b9      	ldr	r1, [r7, #8]
 800d356:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d358:	f000 f8da 	bl	800d510 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d35e:	1e5a      	subs	r2, r3, #1
 800d360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d362:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d364:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d36c:	d112      	bne.n	800d394 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d016      	beq.n	800d3a4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d378:	3310      	adds	r3, #16
 800d37a:	4618      	mov	r0, r3
 800d37c:	f000 fe60 	bl	800e040 <xTaskRemoveFromEventList>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00e      	beq.n	800d3a4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d00b      	beq.n	800d3a4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2201      	movs	r2, #1
 800d390:	601a      	str	r2, [r3, #0]
 800d392:	e007      	b.n	800d3a4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d398:	3301      	adds	r3, #1
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	b25a      	sxtb	r2, r3
 800d39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3a8:	e001      	b.n	800d3ae <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	f383 8811 	msr	BASEPRI, r3
}
 800d3b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3738      	adds	r7, #56	@ 0x38
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d10b      	bne.n	800d3ee <vQueueDelete+0x2a>
	__asm volatile
 800d3d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3da:	f383 8811 	msr	BASEPRI, r3
 800d3de:	f3bf 8f6f 	isb	sy
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	60bb      	str	r3, [r7, #8]
}
 800d3e8:	bf00      	nop
 800d3ea:	bf00      	nop
 800d3ec:	e7fd      	b.n	800d3ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d3ee:	68f8      	ldr	r0, [r7, #12]
 800d3f0:	f000 f95e 	bl	800d6b0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d102      	bne.n	800d404 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800d3fe:	68f8      	ldr	r0, [r7, #12]
 800d400:	f002 f84a 	bl	800f498 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d404:	bf00      	nop
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d006      	beq.n	800d42a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d426:	60fb      	str	r3, [r7, #12]
 800d428:	e001      	b.n	800d42e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d42a:	2300      	movs	r3, #0
 800d42c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d42e:	68fb      	ldr	r3, [r7, #12]
	}
 800d430:	4618      	mov	r0, r3
 800d432:	3714      	adds	r7, #20
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b086      	sub	sp, #24
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d448:	2300      	movs	r3, #0
 800d44a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d450:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10d      	bne.n	800d476 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d14d      	bne.n	800d4fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	689b      	ldr	r3, [r3, #8]
 800d466:	4618      	mov	r0, r3
 800d468:	f001 f840 	bl	800e4ec <xTaskPriorityDisinherit>
 800d46c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2200      	movs	r2, #0
 800d472:	609a      	str	r2, [r3, #8]
 800d474:	e043      	b.n	800d4fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d119      	bne.n	800d4b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	6858      	ldr	r0, [r3, #4]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d484:	461a      	mov	r2, r3
 800d486:	68b9      	ldr	r1, [r7, #8]
 800d488:	f003 fb51 	bl	8010b2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	685a      	ldr	r2, [r3, #4]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d494:	441a      	add	r2, r3
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	685a      	ldr	r2, [r3, #4]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d32b      	bcc.n	800d4fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	605a      	str	r2, [r3, #4]
 800d4ae:	e026      	b.n	800d4fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	68d8      	ldr	r0, [r3, #12]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	68b9      	ldr	r1, [r7, #8]
 800d4bc:	f003 fb37 	bl	8010b2e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	68da      	ldr	r2, [r3, #12]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4c8:	425b      	negs	r3, r3
 800d4ca:	441a      	add	r2, r3
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	68da      	ldr	r2, [r3, #12]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d207      	bcs.n	800d4ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	689a      	ldr	r2, [r3, #8]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4e4:	425b      	negs	r3, r3
 800d4e6:	441a      	add	r2, r3
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b02      	cmp	r3, #2
 800d4f0:	d105      	bne.n	800d4fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d002      	beq.n	800d4fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	3b01      	subs	r3, #1
 800d4fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	1c5a      	adds	r2, r3, #1
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d506:	697b      	ldr	r3, [r7, #20]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3718      	adds	r7, #24
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d018      	beq.n	800d554 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	68da      	ldr	r2, [r3, #12]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d52a:	441a      	add	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	68da      	ldr	r2, [r3, #12]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	689b      	ldr	r3, [r3, #8]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d303      	bcc.n	800d544 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	68d9      	ldr	r1, [r3, #12]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d54c:	461a      	mov	r2, r3
 800d54e:	6838      	ldr	r0, [r7, #0]
 800d550:	f003 faed 	bl	8010b2e <memcpy>
	}
}
 800d554:	bf00      	nop
 800d556:	3708      	adds	r7, #8
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d564:	f001 fda8 	bl	800f0b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d56e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d570:	e011      	b.n	800d596 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d576:	2b00      	cmp	r3, #0
 800d578:	d012      	beq.n	800d5a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	3324      	adds	r3, #36	@ 0x24
 800d57e:	4618      	mov	r0, r3
 800d580:	f000 fd5e 	bl	800e040 <xTaskRemoveFromEventList>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d001      	beq.n	800d58e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d58a:	f000 fe37 	bl	800e1fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d58e:	7bfb      	ldrb	r3, [r7, #15]
 800d590:	3b01      	subs	r3, #1
 800d592:	b2db      	uxtb	r3, r3
 800d594:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	dce9      	bgt.n	800d572 <prvUnlockQueue+0x16>
 800d59e:	e000      	b.n	800d5a2 <prvUnlockQueue+0x46>
					break;
 800d5a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	22ff      	movs	r2, #255	@ 0xff
 800d5a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d5aa:	f001 fdb7 	bl	800f11c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d5ae:	f001 fd83 	bl	800f0b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d5b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5ba:	e011      	b.n	800d5e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	691b      	ldr	r3, [r3, #16]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d012      	beq.n	800d5ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	3310      	adds	r3, #16
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f000 fd39 	bl	800e040 <xTaskRemoveFromEventList>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d001      	beq.n	800d5d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d5d4:	f000 fe12 	bl	800e1fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d5d8:	7bbb      	ldrb	r3, [r7, #14]
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	dce9      	bgt.n	800d5bc <prvUnlockQueue+0x60>
 800d5e8:	e000      	b.n	800d5ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d5ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	22ff      	movs	r2, #255	@ 0xff
 800d5f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d5f4:	f001 fd92 	bl	800f11c <vPortExitCritical>
}
 800d5f8:	bf00      	nop
 800d5fa:	3710      	adds	r7, #16
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d608:	f001 fd56 	bl	800f0b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d610:	2b00      	cmp	r3, #0
 800d612:	d102      	bne.n	800d61a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d614:	2301      	movs	r3, #1
 800d616:	60fb      	str	r3, [r7, #12]
 800d618:	e001      	b.n	800d61e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d61a:	2300      	movs	r3, #0
 800d61c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d61e:	f001 fd7d 	bl	800f11c <vPortExitCritical>

	return xReturn;
 800d622:	68fb      	ldr	r3, [r7, #12]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b084      	sub	sp, #16
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d634:	f001 fd40 	bl	800f0b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d640:	429a      	cmp	r2, r3
 800d642:	d102      	bne.n	800d64a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d644:	2301      	movs	r3, #1
 800d646:	60fb      	str	r3, [r7, #12]
 800d648:	e001      	b.n	800d64e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d64a:	2300      	movs	r3, #0
 800d64c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d64e:	f001 fd65 	bl	800f11c <vPortExitCritical>

	return xReturn;
 800d652:	68fb      	ldr	r3, [r7, #12]
}
 800d654:	4618      	mov	r0, r3
 800d656:	3710      	adds	r7, #16
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d65c:	b480      	push	{r7}
 800d65e:	b085      	sub	sp, #20
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d666:	2300      	movs	r3, #0
 800d668:	60fb      	str	r3, [r7, #12]
 800d66a:	e014      	b.n	800d696 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d66c:	4a0f      	ldr	r2, [pc, #60]	@ (800d6ac <vQueueAddToRegistry+0x50>)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10b      	bne.n	800d690 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d678:	490c      	ldr	r1, [pc, #48]	@ (800d6ac <vQueueAddToRegistry+0x50>)
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	683a      	ldr	r2, [r7, #0]
 800d67e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d682:	4a0a      	ldr	r2, [pc, #40]	@ (800d6ac <vQueueAddToRegistry+0x50>)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	00db      	lsls	r3, r3, #3
 800d688:	4413      	add	r3, r2
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d68e:	e006      	b.n	800d69e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	3301      	adds	r3, #1
 800d694:	60fb      	str	r3, [r7, #12]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2b07      	cmp	r3, #7
 800d69a:	d9e7      	bls.n	800d66c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d69c:	bf00      	nop
 800d69e:	bf00      	nop
 800d6a0:	3714      	adds	r7, #20
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr
 800d6aa:	bf00      	nop
 800d6ac:	20001350 	.word	0x20001350

0800d6b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	e016      	b.n	800d6ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d6be:	4a10      	ldr	r2, [pc, #64]	@ (800d700 <vQueueUnregisterQueue+0x50>)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	00db      	lsls	r3, r3, #3
 800d6c4:	4413      	add	r3, r2
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d10b      	bne.n	800d6e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d6ce:	4a0c      	ldr	r2, [pc, #48]	@ (800d700 <vQueueUnregisterQueue+0x50>)
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d6d8:	4a09      	ldr	r2, [pc, #36]	@ (800d700 <vQueueUnregisterQueue+0x50>)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	00db      	lsls	r3, r3, #3
 800d6de:	4413      	add	r3, r2
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	605a      	str	r2, [r3, #4]
				break;
 800d6e4:	e006      	b.n	800d6f4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	60fb      	str	r3, [r7, #12]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2b07      	cmp	r3, #7
 800d6f0:	d9e5      	bls.n	800d6be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d6f2:	bf00      	nop
 800d6f4:	bf00      	nop
 800d6f6:	3714      	adds	r7, #20
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr
 800d700:	20001350 	.word	0x20001350

0800d704 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d704:	b580      	push	{r7, lr}
 800d706:	b086      	sub	sp, #24
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d714:	f001 fcd0 	bl	800f0b8 <vPortEnterCritical>
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d71e:	b25b      	sxtb	r3, r3
 800d720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d724:	d103      	bne.n	800d72e <vQueueWaitForMessageRestricted+0x2a>
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	2200      	movs	r2, #0
 800d72a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d734:	b25b      	sxtb	r3, r3
 800d736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73a:	d103      	bne.n	800d744 <vQueueWaitForMessageRestricted+0x40>
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	2200      	movs	r2, #0
 800d740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d744:	f001 fcea 	bl	800f11c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d106      	bne.n	800d75e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	3324      	adds	r3, #36	@ 0x24
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	68b9      	ldr	r1, [r7, #8]
 800d758:	4618      	mov	r0, r3
 800d75a:	f000 fc45 	bl	800dfe8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d75e:	6978      	ldr	r0, [r7, #20]
 800d760:	f7ff fefc 	bl	800d55c <prvUnlockQueue>
	}
 800d764:	bf00      	nop
 800d766:	3718      	adds	r7, #24
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b08e      	sub	sp, #56	@ 0x38
 800d770:	af04      	add	r7, sp, #16
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	607a      	str	r2, [r7, #4]
 800d778:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d77a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d10b      	bne.n	800d798 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	623b      	str	r3, [r7, #32]
}
 800d792:	bf00      	nop
 800d794:	bf00      	nop
 800d796:	e7fd      	b.n	800d794 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d10b      	bne.n	800d7b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	61fb      	str	r3, [r7, #28]
}
 800d7b0:	bf00      	nop
 800d7b2:	bf00      	nop
 800d7b4:	e7fd      	b.n	800d7b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d7b6:	235c      	movs	r3, #92	@ 0x5c
 800d7b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	2b5c      	cmp	r3, #92	@ 0x5c
 800d7be:	d00b      	beq.n	800d7d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	61bb      	str	r3, [r7, #24]
}
 800d7d2:	bf00      	nop
 800d7d4:	bf00      	nop
 800d7d6:	e7fd      	b.n	800d7d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d7d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d01e      	beq.n	800d81e <xTaskCreateStatic+0xb2>
 800d7e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d01b      	beq.n	800d81e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f2:	2202      	movs	r2, #2
 800d7f4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	9303      	str	r3, [sp, #12]
 800d7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7fe:	9302      	str	r3, [sp, #8]
 800d800:	f107 0314 	add.w	r3, r7, #20
 800d804:	9301      	str	r3, [sp, #4]
 800d806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d808:	9300      	str	r3, [sp, #0]
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	687a      	ldr	r2, [r7, #4]
 800d80e:	68b9      	ldr	r1, [r7, #8]
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f000 f850 	bl	800d8b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d816:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d818:	f000 f8de 	bl	800d9d8 <prvAddNewTaskToReadyList>
 800d81c:	e001      	b.n	800d822 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d81e:	2300      	movs	r3, #0
 800d820:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d822:	697b      	ldr	r3, [r7, #20]
	}
 800d824:	4618      	mov	r0, r3
 800d826:	3728      	adds	r7, #40	@ 0x28
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b08c      	sub	sp, #48	@ 0x30
 800d830:	af04      	add	r7, sp, #16
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	603b      	str	r3, [r7, #0]
 800d838:	4613      	mov	r3, r2
 800d83a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d83c:	88fb      	ldrh	r3, [r7, #6]
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	4618      	mov	r0, r3
 800d842:	f001 fd5b 	bl	800f2fc <pvPortMalloc>
 800d846:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d00e      	beq.n	800d86c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d84e:	205c      	movs	r0, #92	@ 0x5c
 800d850:	f001 fd54 	bl	800f2fc <pvPortMalloc>
 800d854:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d003      	beq.n	800d864 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	697a      	ldr	r2, [r7, #20]
 800d860:	631a      	str	r2, [r3, #48]	@ 0x30
 800d862:	e005      	b.n	800d870 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d864:	6978      	ldr	r0, [r7, #20]
 800d866:	f001 fe17 	bl	800f498 <vPortFree>
 800d86a:	e001      	b.n	800d870 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d86c:	2300      	movs	r3, #0
 800d86e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d017      	beq.n	800d8a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	2200      	movs	r2, #0
 800d87a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d87e:	88fa      	ldrh	r2, [r7, #6]
 800d880:	2300      	movs	r3, #0
 800d882:	9303      	str	r3, [sp, #12]
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	9302      	str	r3, [sp, #8]
 800d888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88a:	9301      	str	r3, [sp, #4]
 800d88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d88e:	9300      	str	r3, [sp, #0]
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	68b9      	ldr	r1, [r7, #8]
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f000 f80e 	bl	800d8b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d89a:	69f8      	ldr	r0, [r7, #28]
 800d89c:	f000 f89c 	bl	800d9d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	61bb      	str	r3, [r7, #24]
 800d8a4:	e002      	b.n	800d8ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d8ac:	69bb      	ldr	r3, [r7, #24]
	}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3720      	adds	r7, #32
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}

0800d8b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d8b6:	b580      	push	{r7, lr}
 800d8b8:	b088      	sub	sp, #32
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	60f8      	str	r0, [r7, #12]
 800d8be:	60b9      	str	r1, [r7, #8]
 800d8c0:	607a      	str	r2, [r7, #4]
 800d8c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	21a5      	movs	r1, #165	@ 0xa5
 800d8d0:	f003 f80d 	bl	80108ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	009b      	lsls	r3, r3, #2
 800d8e2:	4413      	add	r3, r2
 800d8e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	f023 0307 	bic.w	r3, r3, #7
 800d8ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	f003 0307 	and.w	r3, r3, #7
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d00b      	beq.n	800d910 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8fc:	f383 8811 	msr	BASEPRI, r3
 800d900:	f3bf 8f6f 	isb	sy
 800d904:	f3bf 8f4f 	dsb	sy
 800d908:	617b      	str	r3, [r7, #20]
}
 800d90a:	bf00      	nop
 800d90c:	bf00      	nop
 800d90e:	e7fd      	b.n	800d90c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d01f      	beq.n	800d956 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d916:	2300      	movs	r3, #0
 800d918:	61fb      	str	r3, [r7, #28]
 800d91a:	e012      	b.n	800d942 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	4413      	add	r3, r2
 800d922:	7819      	ldrb	r1, [r3, #0]
 800d924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d926:	69fb      	ldr	r3, [r7, #28]
 800d928:	4413      	add	r3, r2
 800d92a:	3334      	adds	r3, #52	@ 0x34
 800d92c:	460a      	mov	r2, r1
 800d92e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d930:	68ba      	ldr	r2, [r7, #8]
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	4413      	add	r3, r2
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d006      	beq.n	800d94a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	3301      	adds	r3, #1
 800d940:	61fb      	str	r3, [r7, #28]
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	2b0f      	cmp	r3, #15
 800d946:	d9e9      	bls.n	800d91c <prvInitialiseNewTask+0x66>
 800d948:	e000      	b.n	800d94c <prvInitialiseNewTask+0x96>
			{
				break;
 800d94a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d94e:	2200      	movs	r2, #0
 800d950:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d954:	e003      	b.n	800d95e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d958:	2200      	movs	r2, #0
 800d95a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d960:	2b37      	cmp	r3, #55	@ 0x37
 800d962:	d901      	bls.n	800d968 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d964:	2337      	movs	r3, #55	@ 0x37
 800d966:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d96a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d96c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d972:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d976:	2200      	movs	r2, #0
 800d978:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d97c:	3304      	adds	r3, #4
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fe fd7c 	bl	800c47c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d986:	3318      	adds	r3, #24
 800d988:	4618      	mov	r0, r3
 800d98a:	f7fe fd77 	bl	800c47c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d98e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d992:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d996:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d99c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9a2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d9b2:	683a      	ldr	r2, [r7, #0]
 800d9b4:	68f9      	ldr	r1, [r7, #12]
 800d9b6:	69b8      	ldr	r0, [r7, #24]
 800d9b8:	f001 fa4e 	bl	800ee58 <pxPortInitialiseStack>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d002      	beq.n	800d9ce <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9ce:	bf00      	nop
 800d9d0:	3720      	adds	r7, #32
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
	...

0800d9d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d9e0:	f001 fb6a 	bl	800f0b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d9e4:	4b2d      	ldr	r3, [pc, #180]	@ (800da9c <prvAddNewTaskToReadyList+0xc4>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	4a2c      	ldr	r2, [pc, #176]	@ (800da9c <prvAddNewTaskToReadyList+0xc4>)
 800d9ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d9ee:	4b2c      	ldr	r3, [pc, #176]	@ (800daa0 <prvAddNewTaskToReadyList+0xc8>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d109      	bne.n	800da0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d9f6:	4a2a      	ldr	r2, [pc, #168]	@ (800daa0 <prvAddNewTaskToReadyList+0xc8>)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d9fc:	4b27      	ldr	r3, [pc, #156]	@ (800da9c <prvAddNewTaskToReadyList+0xc4>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2b01      	cmp	r3, #1
 800da02:	d110      	bne.n	800da26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800da04:	f000 fc1e 	bl	800e244 <prvInitialiseTaskLists>
 800da08:	e00d      	b.n	800da26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800da0a:	4b26      	ldr	r3, [pc, #152]	@ (800daa4 <prvAddNewTaskToReadyList+0xcc>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d109      	bne.n	800da26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800da12:	4b23      	ldr	r3, [pc, #140]	@ (800daa0 <prvAddNewTaskToReadyList+0xc8>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d802      	bhi.n	800da26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800da20:	4a1f      	ldr	r2, [pc, #124]	@ (800daa0 <prvAddNewTaskToReadyList+0xc8>)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800da26:	4b20      	ldr	r3, [pc, #128]	@ (800daa8 <prvAddNewTaskToReadyList+0xd0>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	3301      	adds	r3, #1
 800da2c:	4a1e      	ldr	r2, [pc, #120]	@ (800daa8 <prvAddNewTaskToReadyList+0xd0>)
 800da2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800da30:	4b1d      	ldr	r3, [pc, #116]	@ (800daa8 <prvAddNewTaskToReadyList+0xd0>)
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da3c:	4b1b      	ldr	r3, [pc, #108]	@ (800daac <prvAddNewTaskToReadyList+0xd4>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	429a      	cmp	r2, r3
 800da42:	d903      	bls.n	800da4c <prvAddNewTaskToReadyList+0x74>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da48:	4a18      	ldr	r2, [pc, #96]	@ (800daac <prvAddNewTaskToReadyList+0xd4>)
 800da4a:	6013      	str	r3, [r2, #0]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da50:	4613      	mov	r3, r2
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	4413      	add	r3, r2
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	4a15      	ldr	r2, [pc, #84]	@ (800dab0 <prvAddNewTaskToReadyList+0xd8>)
 800da5a:	441a      	add	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	3304      	adds	r3, #4
 800da60:	4619      	mov	r1, r3
 800da62:	4610      	mov	r0, r2
 800da64:	f7fe fd17 	bl	800c496 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800da68:	f001 fb58 	bl	800f11c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800da6c:	4b0d      	ldr	r3, [pc, #52]	@ (800daa4 <prvAddNewTaskToReadyList+0xcc>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00e      	beq.n	800da92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800da74:	4b0a      	ldr	r3, [pc, #40]	@ (800daa0 <prvAddNewTaskToReadyList+0xc8>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da7e:	429a      	cmp	r2, r3
 800da80:	d207      	bcs.n	800da92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800da82:	4b0c      	ldr	r3, [pc, #48]	@ (800dab4 <prvAddNewTaskToReadyList+0xdc>)
 800da84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da88:	601a      	str	r2, [r3, #0]
 800da8a:	f3bf 8f4f 	dsb	sy
 800da8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da92:	bf00      	nop
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	20001864 	.word	0x20001864
 800daa0:	20001390 	.word	0x20001390
 800daa4:	20001870 	.word	0x20001870
 800daa8:	20001880 	.word	0x20001880
 800daac:	2000186c 	.word	0x2000186c
 800dab0:	20001394 	.word	0x20001394
 800dab4:	e000ed04 	.word	0xe000ed04

0800dab8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dac0:	2300      	movs	r3, #0
 800dac2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d018      	beq.n	800dafc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800daca:	4b14      	ldr	r3, [pc, #80]	@ (800db1c <vTaskDelay+0x64>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00b      	beq.n	800daea <vTaskDelay+0x32>
	__asm volatile
 800dad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dad6:	f383 8811 	msr	BASEPRI, r3
 800dada:	f3bf 8f6f 	isb	sy
 800dade:	f3bf 8f4f 	dsb	sy
 800dae2:	60bb      	str	r3, [r7, #8]
}
 800dae4:	bf00      	nop
 800dae6:	bf00      	nop
 800dae8:	e7fd      	b.n	800dae6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800daea:	f000 f883 	bl	800dbf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800daee:	2100      	movs	r1, #0
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fe03 	bl	800e6fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800daf6:	f000 f88b 	bl	800dc10 <xTaskResumeAll>
 800dafa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d107      	bne.n	800db12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800db02:	4b07      	ldr	r3, [pc, #28]	@ (800db20 <vTaskDelay+0x68>)
 800db04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db08:	601a      	str	r2, [r3, #0]
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db12:	bf00      	nop
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}
 800db1a:	bf00      	nop
 800db1c:	2000188c 	.word	0x2000188c
 800db20:	e000ed04 	.word	0xe000ed04

0800db24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b08a      	sub	sp, #40	@ 0x28
 800db28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800db2a:	2300      	movs	r3, #0
 800db2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800db2e:	2300      	movs	r3, #0
 800db30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800db32:	463a      	mov	r2, r7
 800db34:	1d39      	adds	r1, r7, #4
 800db36:	f107 0308 	add.w	r3, r7, #8
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7fe fc4a 	bl	800c3d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800db40:	6839      	ldr	r1, [r7, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	68ba      	ldr	r2, [r7, #8]
 800db46:	9202      	str	r2, [sp, #8]
 800db48:	9301      	str	r3, [sp, #4]
 800db4a:	2300      	movs	r3, #0
 800db4c:	9300      	str	r3, [sp, #0]
 800db4e:	2300      	movs	r3, #0
 800db50:	460a      	mov	r2, r1
 800db52:	4922      	ldr	r1, [pc, #136]	@ (800dbdc <vTaskStartScheduler+0xb8>)
 800db54:	4822      	ldr	r0, [pc, #136]	@ (800dbe0 <vTaskStartScheduler+0xbc>)
 800db56:	f7ff fe09 	bl	800d76c <xTaskCreateStatic>
 800db5a:	4603      	mov	r3, r0
 800db5c:	4a21      	ldr	r2, [pc, #132]	@ (800dbe4 <vTaskStartScheduler+0xc0>)
 800db5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800db60:	4b20      	ldr	r3, [pc, #128]	@ (800dbe4 <vTaskStartScheduler+0xc0>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d002      	beq.n	800db6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800db68:	2301      	movs	r3, #1
 800db6a:	617b      	str	r3, [r7, #20]
 800db6c:	e001      	b.n	800db72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800db6e:	2300      	movs	r3, #0
 800db70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	2b01      	cmp	r3, #1
 800db76:	d102      	bne.n	800db7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800db78:	f000 fe14 	bl	800e7a4 <xTimerCreateTimerTask>
 800db7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	2b01      	cmp	r3, #1
 800db82:	d116      	bne.n	800dbb2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800db84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db88:	f383 8811 	msr	BASEPRI, r3
 800db8c:	f3bf 8f6f 	isb	sy
 800db90:	f3bf 8f4f 	dsb	sy
 800db94:	613b      	str	r3, [r7, #16]
}
 800db96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800db98:	4b13      	ldr	r3, [pc, #76]	@ (800dbe8 <vTaskStartScheduler+0xc4>)
 800db9a:	f04f 32ff 	mov.w	r2, #4294967295
 800db9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dba0:	4b12      	ldr	r3, [pc, #72]	@ (800dbec <vTaskStartScheduler+0xc8>)
 800dba2:	2201      	movs	r2, #1
 800dba4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dba6:	4b12      	ldr	r3, [pc, #72]	@ (800dbf0 <vTaskStartScheduler+0xcc>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dbac:	f001 f9e0 	bl	800ef70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dbb0:	e00f      	b.n	800dbd2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb8:	d10b      	bne.n	800dbd2 <vTaskStartScheduler+0xae>
	__asm volatile
 800dbba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbbe:	f383 8811 	msr	BASEPRI, r3
 800dbc2:	f3bf 8f6f 	isb	sy
 800dbc6:	f3bf 8f4f 	dsb	sy
 800dbca:	60fb      	str	r3, [r7, #12]
}
 800dbcc:	bf00      	nop
 800dbce:	bf00      	nop
 800dbd0:	e7fd      	b.n	800dbce <vTaskStartScheduler+0xaa>
}
 800dbd2:	bf00      	nop
 800dbd4:	3718      	adds	r7, #24
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	08015a54 	.word	0x08015a54
 800dbe0:	0800e215 	.word	0x0800e215
 800dbe4:	20001888 	.word	0x20001888
 800dbe8:	20001884 	.word	0x20001884
 800dbec:	20001870 	.word	0x20001870
 800dbf0:	20001868 	.word	0x20001868

0800dbf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dbf8:	4b04      	ldr	r3, [pc, #16]	@ (800dc0c <vTaskSuspendAll+0x18>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	4a03      	ldr	r2, [pc, #12]	@ (800dc0c <vTaskSuspendAll+0x18>)
 800dc00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dc02:	bf00      	nop
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr
 800dc0c:	2000188c 	.word	0x2000188c

0800dc10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dc16:	2300      	movs	r3, #0
 800dc18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dc1e:	4b42      	ldr	r3, [pc, #264]	@ (800dd28 <xTaskResumeAll+0x118>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d10b      	bne.n	800dc3e <xTaskResumeAll+0x2e>
	__asm volatile
 800dc26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc2a:	f383 8811 	msr	BASEPRI, r3
 800dc2e:	f3bf 8f6f 	isb	sy
 800dc32:	f3bf 8f4f 	dsb	sy
 800dc36:	603b      	str	r3, [r7, #0]
}
 800dc38:	bf00      	nop
 800dc3a:	bf00      	nop
 800dc3c:	e7fd      	b.n	800dc3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dc3e:	f001 fa3b 	bl	800f0b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dc42:	4b39      	ldr	r3, [pc, #228]	@ (800dd28 <xTaskResumeAll+0x118>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3b01      	subs	r3, #1
 800dc48:	4a37      	ldr	r2, [pc, #220]	@ (800dd28 <xTaskResumeAll+0x118>)
 800dc4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc4c:	4b36      	ldr	r3, [pc, #216]	@ (800dd28 <xTaskResumeAll+0x118>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d162      	bne.n	800dd1a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dc54:	4b35      	ldr	r3, [pc, #212]	@ (800dd2c <xTaskResumeAll+0x11c>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d05e      	beq.n	800dd1a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dc5c:	e02f      	b.n	800dcbe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc5e:	4b34      	ldr	r3, [pc, #208]	@ (800dd30 <xTaskResumeAll+0x120>)
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	3318      	adds	r3, #24
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fe fc70 	bl	800c550 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	3304      	adds	r3, #4
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fe fc6b 	bl	800c550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc7e:	4b2d      	ldr	r3, [pc, #180]	@ (800dd34 <xTaskResumeAll+0x124>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d903      	bls.n	800dc8e <xTaskResumeAll+0x7e>
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc8a:	4a2a      	ldr	r2, [pc, #168]	@ (800dd34 <xTaskResumeAll+0x124>)
 800dc8c:	6013      	str	r3, [r2, #0]
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc92:	4613      	mov	r3, r2
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4413      	add	r3, r2
 800dc98:	009b      	lsls	r3, r3, #2
 800dc9a:	4a27      	ldr	r2, [pc, #156]	@ (800dd38 <xTaskResumeAll+0x128>)
 800dc9c:	441a      	add	r2, r3
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	3304      	adds	r3, #4
 800dca2:	4619      	mov	r1, r3
 800dca4:	4610      	mov	r0, r2
 800dca6:	f7fe fbf6 	bl	800c496 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcae:	4b23      	ldr	r3, [pc, #140]	@ (800dd3c <xTaskResumeAll+0x12c>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d302      	bcc.n	800dcbe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dcb8:	4b21      	ldr	r3, [pc, #132]	@ (800dd40 <xTaskResumeAll+0x130>)
 800dcba:	2201      	movs	r2, #1
 800dcbc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dcbe:	4b1c      	ldr	r3, [pc, #112]	@ (800dd30 <xTaskResumeAll+0x120>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d1cb      	bne.n	800dc5e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dccc:	f000 fb58 	bl	800e380 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dcd0:	4b1c      	ldr	r3, [pc, #112]	@ (800dd44 <xTaskResumeAll+0x134>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d010      	beq.n	800dcfe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dcdc:	f000 f846 	bl	800dd6c <xTaskIncrementTick>
 800dce0:	4603      	mov	r3, r0
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d002      	beq.n	800dcec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dce6:	4b16      	ldr	r3, [pc, #88]	@ (800dd40 <xTaskResumeAll+0x130>)
 800dce8:	2201      	movs	r2, #1
 800dcea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d1f1      	bne.n	800dcdc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800dcf8:	4b12      	ldr	r3, [pc, #72]	@ (800dd44 <xTaskResumeAll+0x134>)
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dcfe:	4b10      	ldr	r3, [pc, #64]	@ (800dd40 <xTaskResumeAll+0x130>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d009      	beq.n	800dd1a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dd06:	2301      	movs	r3, #1
 800dd08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dd0a:	4b0f      	ldr	r3, [pc, #60]	@ (800dd48 <xTaskResumeAll+0x138>)
 800dd0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd10:	601a      	str	r2, [r3, #0]
 800dd12:	f3bf 8f4f 	dsb	sy
 800dd16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dd1a:	f001 f9ff 	bl	800f11c <vPortExitCritical>

	return xAlreadyYielded;
 800dd1e:	68bb      	ldr	r3, [r7, #8]
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3710      	adds	r7, #16
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	2000188c 	.word	0x2000188c
 800dd2c:	20001864 	.word	0x20001864
 800dd30:	20001824 	.word	0x20001824
 800dd34:	2000186c 	.word	0x2000186c
 800dd38:	20001394 	.word	0x20001394
 800dd3c:	20001390 	.word	0x20001390
 800dd40:	20001878 	.word	0x20001878
 800dd44:	20001874 	.word	0x20001874
 800dd48:	e000ed04 	.word	0xe000ed04

0800dd4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dd52:	4b05      	ldr	r3, [pc, #20]	@ (800dd68 <xTaskGetTickCount+0x1c>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dd58:	687b      	ldr	r3, [r7, #4]
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	370c      	adds	r7, #12
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	20001868 	.word	0x20001868

0800dd6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b086      	sub	sp, #24
 800dd70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dd72:	2300      	movs	r3, #0
 800dd74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd76:	4b4f      	ldr	r3, [pc, #316]	@ (800deb4 <xTaskIncrementTick+0x148>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	f040 8090 	bne.w	800dea0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dd80:	4b4d      	ldr	r3, [pc, #308]	@ (800deb8 <xTaskIncrementTick+0x14c>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	3301      	adds	r3, #1
 800dd86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dd88:	4a4b      	ldr	r2, [pc, #300]	@ (800deb8 <xTaskIncrementTick+0x14c>)
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d121      	bne.n	800ddd8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dd94:	4b49      	ldr	r3, [pc, #292]	@ (800debc <xTaskIncrementTick+0x150>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00b      	beq.n	800ddb6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800dd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda2:	f383 8811 	msr	BASEPRI, r3
 800dda6:	f3bf 8f6f 	isb	sy
 800ddaa:	f3bf 8f4f 	dsb	sy
 800ddae:	603b      	str	r3, [r7, #0]
}
 800ddb0:	bf00      	nop
 800ddb2:	bf00      	nop
 800ddb4:	e7fd      	b.n	800ddb2 <xTaskIncrementTick+0x46>
 800ddb6:	4b41      	ldr	r3, [pc, #260]	@ (800debc <xTaskIncrementTick+0x150>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	60fb      	str	r3, [r7, #12]
 800ddbc:	4b40      	ldr	r3, [pc, #256]	@ (800dec0 <xTaskIncrementTick+0x154>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a3e      	ldr	r2, [pc, #248]	@ (800debc <xTaskIncrementTick+0x150>)
 800ddc2:	6013      	str	r3, [r2, #0]
 800ddc4:	4a3e      	ldr	r2, [pc, #248]	@ (800dec0 <xTaskIncrementTick+0x154>)
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	6013      	str	r3, [r2, #0]
 800ddca:	4b3e      	ldr	r3, [pc, #248]	@ (800dec4 <xTaskIncrementTick+0x158>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	4a3c      	ldr	r2, [pc, #240]	@ (800dec4 <xTaskIncrementTick+0x158>)
 800ddd2:	6013      	str	r3, [r2, #0]
 800ddd4:	f000 fad4 	bl	800e380 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ddd8:	4b3b      	ldr	r3, [pc, #236]	@ (800dec8 <xTaskIncrementTick+0x15c>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	693a      	ldr	r2, [r7, #16]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d349      	bcc.n	800de76 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dde2:	4b36      	ldr	r3, [pc, #216]	@ (800debc <xTaskIncrementTick+0x150>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d104      	bne.n	800ddf6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddec:	4b36      	ldr	r3, [pc, #216]	@ (800dec8 <xTaskIncrementTick+0x15c>)
 800ddee:	f04f 32ff 	mov.w	r2, #4294967295
 800ddf2:	601a      	str	r2, [r3, #0]
					break;
 800ddf4:	e03f      	b.n	800de76 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddf6:	4b31      	ldr	r3, [pc, #196]	@ (800debc <xTaskIncrementTick+0x150>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	68db      	ldr	r3, [r3, #12]
 800ddfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800de06:	693a      	ldr	r2, [r7, #16]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d203      	bcs.n	800de16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800de0e:	4a2e      	ldr	r2, [pc, #184]	@ (800dec8 <xTaskIncrementTick+0x15c>)
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800de14:	e02f      	b.n	800de76 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	3304      	adds	r3, #4
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fe fb98 	bl	800c550 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de24:	2b00      	cmp	r3, #0
 800de26:	d004      	beq.n	800de32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	3318      	adds	r3, #24
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7fe fb8f 	bl	800c550 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de36:	4b25      	ldr	r3, [pc, #148]	@ (800decc <xTaskIncrementTick+0x160>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d903      	bls.n	800de46 <xTaskIncrementTick+0xda>
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de42:	4a22      	ldr	r2, [pc, #136]	@ (800decc <xTaskIncrementTick+0x160>)
 800de44:	6013      	str	r3, [r2, #0]
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de4a:	4613      	mov	r3, r2
 800de4c:	009b      	lsls	r3, r3, #2
 800de4e:	4413      	add	r3, r2
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	4a1f      	ldr	r2, [pc, #124]	@ (800ded0 <xTaskIncrementTick+0x164>)
 800de54:	441a      	add	r2, r3
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	3304      	adds	r3, #4
 800de5a:	4619      	mov	r1, r3
 800de5c:	4610      	mov	r0, r2
 800de5e:	f7fe fb1a 	bl	800c496 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de66:	4b1b      	ldr	r3, [pc, #108]	@ (800ded4 <xTaskIncrementTick+0x168>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d3b8      	bcc.n	800dde2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800de70:	2301      	movs	r3, #1
 800de72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de74:	e7b5      	b.n	800dde2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800de76:	4b17      	ldr	r3, [pc, #92]	@ (800ded4 <xTaskIncrementTick+0x168>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de7c:	4914      	ldr	r1, [pc, #80]	@ (800ded0 <xTaskIncrementTick+0x164>)
 800de7e:	4613      	mov	r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4413      	add	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	440b      	add	r3, r1
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d901      	bls.n	800de92 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800de8e:	2301      	movs	r3, #1
 800de90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800de92:	4b11      	ldr	r3, [pc, #68]	@ (800ded8 <xTaskIncrementTick+0x16c>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d007      	beq.n	800deaa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800de9a:	2301      	movs	r3, #1
 800de9c:	617b      	str	r3, [r7, #20]
 800de9e:	e004      	b.n	800deaa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dea0:	4b0e      	ldr	r3, [pc, #56]	@ (800dedc <xTaskIncrementTick+0x170>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	3301      	adds	r3, #1
 800dea6:	4a0d      	ldr	r2, [pc, #52]	@ (800dedc <xTaskIncrementTick+0x170>)
 800dea8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800deaa:	697b      	ldr	r3, [r7, #20]
}
 800deac:	4618      	mov	r0, r3
 800deae:	3718      	adds	r7, #24
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	2000188c 	.word	0x2000188c
 800deb8:	20001868 	.word	0x20001868
 800debc:	2000181c 	.word	0x2000181c
 800dec0:	20001820 	.word	0x20001820
 800dec4:	2000187c 	.word	0x2000187c
 800dec8:	20001884 	.word	0x20001884
 800decc:	2000186c 	.word	0x2000186c
 800ded0:	20001394 	.word	0x20001394
 800ded4:	20001390 	.word	0x20001390
 800ded8:	20001878 	.word	0x20001878
 800dedc:	20001874 	.word	0x20001874

0800dee0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dee0:	b480      	push	{r7}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dee6:	4b28      	ldr	r3, [pc, #160]	@ (800df88 <vTaskSwitchContext+0xa8>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d003      	beq.n	800def6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800deee:	4b27      	ldr	r3, [pc, #156]	@ (800df8c <vTaskSwitchContext+0xac>)
 800def0:	2201      	movs	r2, #1
 800def2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800def4:	e042      	b.n	800df7c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800def6:	4b25      	ldr	r3, [pc, #148]	@ (800df8c <vTaskSwitchContext+0xac>)
 800def8:	2200      	movs	r2, #0
 800defa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800defc:	4b24      	ldr	r3, [pc, #144]	@ (800df90 <vTaskSwitchContext+0xb0>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	60fb      	str	r3, [r7, #12]
 800df02:	e011      	b.n	800df28 <vTaskSwitchContext+0x48>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d10b      	bne.n	800df22 <vTaskSwitchContext+0x42>
	__asm volatile
 800df0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df0e:	f383 8811 	msr	BASEPRI, r3
 800df12:	f3bf 8f6f 	isb	sy
 800df16:	f3bf 8f4f 	dsb	sy
 800df1a:	607b      	str	r3, [r7, #4]
}
 800df1c:	bf00      	nop
 800df1e:	bf00      	nop
 800df20:	e7fd      	b.n	800df1e <vTaskSwitchContext+0x3e>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	3b01      	subs	r3, #1
 800df26:	60fb      	str	r3, [r7, #12]
 800df28:	491a      	ldr	r1, [pc, #104]	@ (800df94 <vTaskSwitchContext+0xb4>)
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	4613      	mov	r3, r2
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	4413      	add	r3, r2
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	440b      	add	r3, r1
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d0e3      	beq.n	800df04 <vTaskSwitchContext+0x24>
 800df3c:	68fa      	ldr	r2, [r7, #12]
 800df3e:	4613      	mov	r3, r2
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	4413      	add	r3, r2
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	4a13      	ldr	r2, [pc, #76]	@ (800df94 <vTaskSwitchContext+0xb4>)
 800df48:	4413      	add	r3, r2
 800df4a:	60bb      	str	r3, [r7, #8]
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	685a      	ldr	r2, [r3, #4]
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	605a      	str	r2, [r3, #4]
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	685a      	ldr	r2, [r3, #4]
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	3308      	adds	r3, #8
 800df5e:	429a      	cmp	r2, r3
 800df60:	d104      	bne.n	800df6c <vTaskSwitchContext+0x8c>
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	685a      	ldr	r2, [r3, #4]
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	605a      	str	r2, [r3, #4]
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	4a09      	ldr	r2, [pc, #36]	@ (800df98 <vTaskSwitchContext+0xb8>)
 800df74:	6013      	str	r3, [r2, #0]
 800df76:	4a06      	ldr	r2, [pc, #24]	@ (800df90 <vTaskSwitchContext+0xb0>)
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6013      	str	r3, [r2, #0]
}
 800df7c:	bf00      	nop
 800df7e:	3714      	adds	r7, #20
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr
 800df88:	2000188c 	.word	0x2000188c
 800df8c:	20001878 	.word	0x20001878
 800df90:	2000186c 	.word	0x2000186c
 800df94:	20001394 	.word	0x20001394
 800df98:	20001390 	.word	0x20001390

0800df9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d10b      	bne.n	800dfc4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800dfac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb0:	f383 8811 	msr	BASEPRI, r3
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	60fb      	str	r3, [r7, #12]
}
 800dfbe:	bf00      	nop
 800dfc0:	bf00      	nop
 800dfc2:	e7fd      	b.n	800dfc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfc4:	4b07      	ldr	r3, [pc, #28]	@ (800dfe4 <vTaskPlaceOnEventList+0x48>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	3318      	adds	r3, #24
 800dfca:	4619      	mov	r1, r3
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f7fe fa86 	bl	800c4de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dfd2:	2101      	movs	r1, #1
 800dfd4:	6838      	ldr	r0, [r7, #0]
 800dfd6:	f000 fb91 	bl	800e6fc <prvAddCurrentTaskToDelayedList>
}
 800dfda:	bf00      	nop
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
 800dfe2:	bf00      	nop
 800dfe4:	20001390 	.word	0x20001390

0800dfe8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b086      	sub	sp, #24
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	60b9      	str	r1, [r7, #8]
 800dff2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d10b      	bne.n	800e012 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800dffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffe:	f383 8811 	msr	BASEPRI, r3
 800e002:	f3bf 8f6f 	isb	sy
 800e006:	f3bf 8f4f 	dsb	sy
 800e00a:	617b      	str	r3, [r7, #20]
}
 800e00c:	bf00      	nop
 800e00e:	bf00      	nop
 800e010:	e7fd      	b.n	800e00e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e012:	4b0a      	ldr	r3, [pc, #40]	@ (800e03c <vTaskPlaceOnEventListRestricted+0x54>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	3318      	adds	r3, #24
 800e018:	4619      	mov	r1, r3
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f7fe fa3b 	bl	800c496 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d002      	beq.n	800e02c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e026:	f04f 33ff 	mov.w	r3, #4294967295
 800e02a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e02c:	6879      	ldr	r1, [r7, #4]
 800e02e:	68b8      	ldr	r0, [r7, #8]
 800e030:	f000 fb64 	bl	800e6fc <prvAddCurrentTaskToDelayedList>
	}
 800e034:	bf00      	nop
 800e036:	3718      	adds	r7, #24
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	20001390 	.word	0x20001390

0800e040 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b086      	sub	sp, #24
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d10b      	bne.n	800e06e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05a:	f383 8811 	msr	BASEPRI, r3
 800e05e:	f3bf 8f6f 	isb	sy
 800e062:	f3bf 8f4f 	dsb	sy
 800e066:	60fb      	str	r3, [r7, #12]
}
 800e068:	bf00      	nop
 800e06a:	bf00      	nop
 800e06c:	e7fd      	b.n	800e06a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	3318      	adds	r3, #24
 800e072:	4618      	mov	r0, r3
 800e074:	f7fe fa6c 	bl	800c550 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e078:	4b1d      	ldr	r3, [pc, #116]	@ (800e0f0 <xTaskRemoveFromEventList+0xb0>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d11d      	bne.n	800e0bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	3304      	adds	r3, #4
 800e084:	4618      	mov	r0, r3
 800e086:	f7fe fa63 	bl	800c550 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e08e:	4b19      	ldr	r3, [pc, #100]	@ (800e0f4 <xTaskRemoveFromEventList+0xb4>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	429a      	cmp	r2, r3
 800e094:	d903      	bls.n	800e09e <xTaskRemoveFromEventList+0x5e>
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e09a:	4a16      	ldr	r2, [pc, #88]	@ (800e0f4 <xTaskRemoveFromEventList+0xb4>)
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	4413      	add	r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	4a13      	ldr	r2, [pc, #76]	@ (800e0f8 <xTaskRemoveFromEventList+0xb8>)
 800e0ac:	441a      	add	r2, r3
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	3304      	adds	r3, #4
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	f7fe f9ee 	bl	800c496 <vListInsertEnd>
 800e0ba:	e005      	b.n	800e0c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	3318      	adds	r3, #24
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	480e      	ldr	r0, [pc, #56]	@ (800e0fc <xTaskRemoveFromEventList+0xbc>)
 800e0c4:	f7fe f9e7 	bl	800c496 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0cc:	4b0c      	ldr	r3, [pc, #48]	@ (800e100 <xTaskRemoveFromEventList+0xc0>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d905      	bls.n	800e0e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e0da:	4b0a      	ldr	r3, [pc, #40]	@ (800e104 <xTaskRemoveFromEventList+0xc4>)
 800e0dc:	2201      	movs	r2, #1
 800e0de:	601a      	str	r2, [r3, #0]
 800e0e0:	e001      	b.n	800e0e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e0e6:	697b      	ldr	r3, [r7, #20]
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3718      	adds	r7, #24
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	2000188c 	.word	0x2000188c
 800e0f4:	2000186c 	.word	0x2000186c
 800e0f8:	20001394 	.word	0x20001394
 800e0fc:	20001824 	.word	0x20001824
 800e100:	20001390 	.word	0x20001390
 800e104:	20001878 	.word	0x20001878

0800e108 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e108:	b480      	push	{r7}
 800e10a:	b083      	sub	sp, #12
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e110:	4b06      	ldr	r3, [pc, #24]	@ (800e12c <vTaskInternalSetTimeOutState+0x24>)
 800e112:	681a      	ldr	r2, [r3, #0]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e118:	4b05      	ldr	r3, [pc, #20]	@ (800e130 <vTaskInternalSetTimeOutState+0x28>)
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	605a      	str	r2, [r3, #4]
}
 800e120:	bf00      	nop
 800e122:	370c      	adds	r7, #12
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr
 800e12c:	2000187c 	.word	0x2000187c
 800e130:	20001868 	.word	0x20001868

0800e134 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b088      	sub	sp, #32
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d10b      	bne.n	800e15c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e148:	f383 8811 	msr	BASEPRI, r3
 800e14c:	f3bf 8f6f 	isb	sy
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	613b      	str	r3, [r7, #16]
}
 800e156:	bf00      	nop
 800e158:	bf00      	nop
 800e15a:	e7fd      	b.n	800e158 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d10b      	bne.n	800e17a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	60fb      	str	r3, [r7, #12]
}
 800e174:	bf00      	nop
 800e176:	bf00      	nop
 800e178:	e7fd      	b.n	800e176 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e17a:	f000 ff9d 	bl	800f0b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e17e:	4b1d      	ldr	r3, [pc, #116]	@ (800e1f4 <xTaskCheckForTimeOut+0xc0>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	69ba      	ldr	r2, [r7, #24]
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e196:	d102      	bne.n	800e19e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e198:	2300      	movs	r3, #0
 800e19a:	61fb      	str	r3, [r7, #28]
 800e19c:	e023      	b.n	800e1e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	4b15      	ldr	r3, [pc, #84]	@ (800e1f8 <xTaskCheckForTimeOut+0xc4>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d007      	beq.n	800e1ba <xTaskCheckForTimeOut+0x86>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	69ba      	ldr	r2, [r7, #24]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d302      	bcc.n	800e1ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	61fb      	str	r3, [r7, #28]
 800e1b8:	e015      	b.n	800e1e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	697a      	ldr	r2, [r7, #20]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d20b      	bcs.n	800e1dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	1ad2      	subs	r2, r2, r3
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f7ff ff99 	bl	800e108 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	61fb      	str	r3, [r7, #28]
 800e1da:	e004      	b.n	800e1e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e1e6:	f000 ff99 	bl	800f11c <vPortExitCritical>

	return xReturn;
 800e1ea:	69fb      	ldr	r3, [r7, #28]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3720      	adds	r7, #32
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	20001868 	.word	0x20001868
 800e1f8:	2000187c 	.word	0x2000187c

0800e1fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e200:	4b03      	ldr	r3, [pc, #12]	@ (800e210 <vTaskMissedYield+0x14>)
 800e202:	2201      	movs	r2, #1
 800e204:	601a      	str	r2, [r3, #0]
}
 800e206:	bf00      	nop
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr
 800e210:	20001878 	.word	0x20001878

0800e214 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e21c:	f000 f852 	bl	800e2c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e220:	4b06      	ldr	r3, [pc, #24]	@ (800e23c <prvIdleTask+0x28>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d9f9      	bls.n	800e21c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e228:	4b05      	ldr	r3, [pc, #20]	@ (800e240 <prvIdleTask+0x2c>)
 800e22a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e22e:	601a      	str	r2, [r3, #0]
 800e230:	f3bf 8f4f 	dsb	sy
 800e234:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e238:	e7f0      	b.n	800e21c <prvIdleTask+0x8>
 800e23a:	bf00      	nop
 800e23c:	20001394 	.word	0x20001394
 800e240:	e000ed04 	.word	0xe000ed04

0800e244 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e24a:	2300      	movs	r3, #0
 800e24c:	607b      	str	r3, [r7, #4]
 800e24e:	e00c      	b.n	800e26a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	4613      	mov	r3, r2
 800e254:	009b      	lsls	r3, r3, #2
 800e256:	4413      	add	r3, r2
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	4a12      	ldr	r2, [pc, #72]	@ (800e2a4 <prvInitialiseTaskLists+0x60>)
 800e25c:	4413      	add	r3, r2
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fe f8ec 	bl	800c43c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	3301      	adds	r3, #1
 800e268:	607b      	str	r3, [r7, #4]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2b37      	cmp	r3, #55	@ 0x37
 800e26e:	d9ef      	bls.n	800e250 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e270:	480d      	ldr	r0, [pc, #52]	@ (800e2a8 <prvInitialiseTaskLists+0x64>)
 800e272:	f7fe f8e3 	bl	800c43c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e276:	480d      	ldr	r0, [pc, #52]	@ (800e2ac <prvInitialiseTaskLists+0x68>)
 800e278:	f7fe f8e0 	bl	800c43c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e27c:	480c      	ldr	r0, [pc, #48]	@ (800e2b0 <prvInitialiseTaskLists+0x6c>)
 800e27e:	f7fe f8dd 	bl	800c43c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e282:	480c      	ldr	r0, [pc, #48]	@ (800e2b4 <prvInitialiseTaskLists+0x70>)
 800e284:	f7fe f8da 	bl	800c43c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e288:	480b      	ldr	r0, [pc, #44]	@ (800e2b8 <prvInitialiseTaskLists+0x74>)
 800e28a:	f7fe f8d7 	bl	800c43c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e28e:	4b0b      	ldr	r3, [pc, #44]	@ (800e2bc <prvInitialiseTaskLists+0x78>)
 800e290:	4a05      	ldr	r2, [pc, #20]	@ (800e2a8 <prvInitialiseTaskLists+0x64>)
 800e292:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e294:	4b0a      	ldr	r3, [pc, #40]	@ (800e2c0 <prvInitialiseTaskLists+0x7c>)
 800e296:	4a05      	ldr	r2, [pc, #20]	@ (800e2ac <prvInitialiseTaskLists+0x68>)
 800e298:	601a      	str	r2, [r3, #0]
}
 800e29a:	bf00      	nop
 800e29c:	3708      	adds	r7, #8
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	20001394 	.word	0x20001394
 800e2a8:	200017f4 	.word	0x200017f4
 800e2ac:	20001808 	.word	0x20001808
 800e2b0:	20001824 	.word	0x20001824
 800e2b4:	20001838 	.word	0x20001838
 800e2b8:	20001850 	.word	0x20001850
 800e2bc:	2000181c 	.word	0x2000181c
 800e2c0:	20001820 	.word	0x20001820

0800e2c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e2ca:	e019      	b.n	800e300 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e2cc:	f000 fef4 	bl	800f0b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2d0:	4b10      	ldr	r3, [pc, #64]	@ (800e314 <prvCheckTasksWaitingTermination+0x50>)
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	3304      	adds	r3, #4
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7fe f937 	bl	800c550 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e318 <prvCheckTasksWaitingTermination+0x54>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	3b01      	subs	r3, #1
 800e2e8:	4a0b      	ldr	r2, [pc, #44]	@ (800e318 <prvCheckTasksWaitingTermination+0x54>)
 800e2ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e2ec:	4b0b      	ldr	r3, [pc, #44]	@ (800e31c <prvCheckTasksWaitingTermination+0x58>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	4a0a      	ldr	r2, [pc, #40]	@ (800e31c <prvCheckTasksWaitingTermination+0x58>)
 800e2f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e2f6:	f000 ff11 	bl	800f11c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 f810 	bl	800e320 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e300:	4b06      	ldr	r3, [pc, #24]	@ (800e31c <prvCheckTasksWaitingTermination+0x58>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d1e1      	bne.n	800e2cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e308:	bf00      	nop
 800e30a:	bf00      	nop
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	20001838 	.word	0x20001838
 800e318:	20001864 	.word	0x20001864
 800e31c:	2000184c 	.word	0x2000184c

0800e320 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d108      	bne.n	800e344 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e336:	4618      	mov	r0, r3
 800e338:	f001 f8ae 	bl	800f498 <vPortFree>
				vPortFree( pxTCB );
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f001 f8ab 	bl	800f498 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e342:	e019      	b.n	800e378 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d103      	bne.n	800e356 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f001 f8a2 	bl	800f498 <vPortFree>
	}
 800e354:	e010      	b.n	800e378 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e35c:	2b02      	cmp	r3, #2
 800e35e:	d00b      	beq.n	800e378 <prvDeleteTCB+0x58>
	__asm volatile
 800e360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	60fb      	str	r3, [r7, #12]
}
 800e372:	bf00      	nop
 800e374:	bf00      	nop
 800e376:	e7fd      	b.n	800e374 <prvDeleteTCB+0x54>
	}
 800e378:	bf00      	nop
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e386:	4b0c      	ldr	r3, [pc, #48]	@ (800e3b8 <prvResetNextTaskUnblockTime+0x38>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d104      	bne.n	800e39a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e390:	4b0a      	ldr	r3, [pc, #40]	@ (800e3bc <prvResetNextTaskUnblockTime+0x3c>)
 800e392:	f04f 32ff 	mov.w	r2, #4294967295
 800e396:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e398:	e008      	b.n	800e3ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e39a:	4b07      	ldr	r3, [pc, #28]	@ (800e3b8 <prvResetNextTaskUnblockTime+0x38>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	4a04      	ldr	r2, [pc, #16]	@ (800e3bc <prvResetNextTaskUnblockTime+0x3c>)
 800e3aa:	6013      	str	r3, [r2, #0]
}
 800e3ac:	bf00      	nop
 800e3ae:	370c      	adds	r7, #12
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr
 800e3b8:	2000181c 	.word	0x2000181c
 800e3bc:	20001884 	.word	0x20001884

0800e3c0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e3c6:	4b05      	ldr	r3, [pc, #20]	@ (800e3dc <xTaskGetCurrentTaskHandle+0x1c>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e3cc:	687b      	ldr	r3, [r7, #4]
	}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	370c      	adds	r7, #12
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	20001390 	.word	0x20001390

0800e3e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b083      	sub	sp, #12
 800e3e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e3e6:	4b0b      	ldr	r3, [pc, #44]	@ (800e414 <xTaskGetSchedulerState+0x34>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d102      	bne.n	800e3f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	607b      	str	r3, [r7, #4]
 800e3f2:	e008      	b.n	800e406 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3f4:	4b08      	ldr	r3, [pc, #32]	@ (800e418 <xTaskGetSchedulerState+0x38>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d102      	bne.n	800e402 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e3fc:	2302      	movs	r3, #2
 800e3fe:	607b      	str	r3, [r7, #4]
 800e400:	e001      	b.n	800e406 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e402:	2300      	movs	r3, #0
 800e404:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e406:	687b      	ldr	r3, [r7, #4]
	}
 800e408:	4618      	mov	r0, r3
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr
 800e414:	20001870 	.word	0x20001870
 800e418:	2000188c 	.word	0x2000188c

0800e41c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e428:	2300      	movs	r3, #0
 800e42a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d051      	beq.n	800e4d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e436:	4b2a      	ldr	r3, [pc, #168]	@ (800e4e0 <xTaskPriorityInherit+0xc4>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d241      	bcs.n	800e4c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	699b      	ldr	r3, [r3, #24]
 800e444:	2b00      	cmp	r3, #0
 800e446:	db06      	blt.n	800e456 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e448:	4b25      	ldr	r3, [pc, #148]	@ (800e4e0 <xTaskPriorityInherit+0xc4>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e44e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	6959      	ldr	r1, [r3, #20]
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e45e:	4613      	mov	r3, r2
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	4413      	add	r3, r2
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	4a1f      	ldr	r2, [pc, #124]	@ (800e4e4 <xTaskPriorityInherit+0xc8>)
 800e468:	4413      	add	r3, r2
 800e46a:	4299      	cmp	r1, r3
 800e46c:	d122      	bne.n	800e4b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	3304      	adds	r3, #4
 800e472:	4618      	mov	r0, r3
 800e474:	f7fe f86c 	bl	800c550 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e478:	4b19      	ldr	r3, [pc, #100]	@ (800e4e0 <xTaskPriorityInherit+0xc4>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e486:	4b18      	ldr	r3, [pc, #96]	@ (800e4e8 <xTaskPriorityInherit+0xcc>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d903      	bls.n	800e496 <xTaskPriorityInherit+0x7a>
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e492:	4a15      	ldr	r2, [pc, #84]	@ (800e4e8 <xTaskPriorityInherit+0xcc>)
 800e494:	6013      	str	r3, [r2, #0]
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e49a:	4613      	mov	r3, r2
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	4413      	add	r3, r2
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	4a10      	ldr	r2, [pc, #64]	@ (800e4e4 <xTaskPriorityInherit+0xc8>)
 800e4a4:	441a      	add	r2, r3
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	3304      	adds	r3, #4
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	4610      	mov	r0, r2
 800e4ae:	f7fd fff2 	bl	800c496 <vListInsertEnd>
 800e4b2:	e004      	b.n	800e4be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e4b4:	4b0a      	ldr	r3, [pc, #40]	@ (800e4e0 <xTaskPriorityInherit+0xc4>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	60fb      	str	r3, [r7, #12]
 800e4c2:	e008      	b.n	800e4d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e4c8:	4b05      	ldr	r3, [pc, #20]	@ (800e4e0 <xTaskPriorityInherit+0xc4>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d201      	bcs.n	800e4d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
	}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3710      	adds	r7, #16
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	20001390 	.word	0x20001390
 800e4e4:	20001394 	.word	0x20001394
 800e4e8:	2000186c 	.word	0x2000186c

0800e4ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b086      	sub	sp, #24
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d058      	beq.n	800e5b4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e502:	4b2f      	ldr	r3, [pc, #188]	@ (800e5c0 <xTaskPriorityDisinherit+0xd4>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	693a      	ldr	r2, [r7, #16]
 800e508:	429a      	cmp	r2, r3
 800e50a:	d00b      	beq.n	800e524 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e50c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e510:	f383 8811 	msr	BASEPRI, r3
 800e514:	f3bf 8f6f 	isb	sy
 800e518:	f3bf 8f4f 	dsb	sy
 800e51c:	60fb      	str	r3, [r7, #12]
}
 800e51e:	bf00      	nop
 800e520:	bf00      	nop
 800e522:	e7fd      	b.n	800e520 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d10b      	bne.n	800e544 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e530:	f383 8811 	msr	BASEPRI, r3
 800e534:	f3bf 8f6f 	isb	sy
 800e538:	f3bf 8f4f 	dsb	sy
 800e53c:	60bb      	str	r3, [r7, #8]
}
 800e53e:	bf00      	nop
 800e540:	bf00      	nop
 800e542:	e7fd      	b.n	800e540 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e548:	1e5a      	subs	r2, r3, #1
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e556:	429a      	cmp	r2, r3
 800e558:	d02c      	beq.n	800e5b4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d128      	bne.n	800e5b4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	3304      	adds	r3, #4
 800e566:	4618      	mov	r0, r3
 800e568:	f7fd fff2 	bl	800c550 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e578:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e584:	4b0f      	ldr	r3, [pc, #60]	@ (800e5c4 <xTaskPriorityDisinherit+0xd8>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d903      	bls.n	800e594 <xTaskPriorityDisinherit+0xa8>
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e590:	4a0c      	ldr	r2, [pc, #48]	@ (800e5c4 <xTaskPriorityDisinherit+0xd8>)
 800e592:	6013      	str	r3, [r2, #0]
 800e594:	693b      	ldr	r3, [r7, #16]
 800e596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e598:	4613      	mov	r3, r2
 800e59a:	009b      	lsls	r3, r3, #2
 800e59c:	4413      	add	r3, r2
 800e59e:	009b      	lsls	r3, r3, #2
 800e5a0:	4a09      	ldr	r2, [pc, #36]	@ (800e5c8 <xTaskPriorityDisinherit+0xdc>)
 800e5a2:	441a      	add	r2, r3
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	3304      	adds	r3, #4
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	4610      	mov	r0, r2
 800e5ac:	f7fd ff73 	bl	800c496 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e5b4:	697b      	ldr	r3, [r7, #20]
	}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3718      	adds	r7, #24
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	20001390 	.word	0x20001390
 800e5c4:	2000186c 	.word	0x2000186c
 800e5c8:	20001394 	.word	0x20001394

0800e5cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b088      	sub	sp, #32
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d06c      	beq.n	800e6be <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d10b      	bne.n	800e604 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5f0:	f383 8811 	msr	BASEPRI, r3
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	60fb      	str	r3, [r7, #12]
}
 800e5fe:	bf00      	nop
 800e600:	bf00      	nop
 800e602:	e7fd      	b.n	800e600 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e608:	683a      	ldr	r2, [r7, #0]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d902      	bls.n	800e614 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	61fb      	str	r3, [r7, #28]
 800e612:	e002      	b.n	800e61a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e614:	69bb      	ldr	r3, [r7, #24]
 800e616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e618:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e61e:	69fa      	ldr	r2, [r7, #28]
 800e620:	429a      	cmp	r2, r3
 800e622:	d04c      	beq.n	800e6be <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e628:	697a      	ldr	r2, [r7, #20]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d147      	bne.n	800e6be <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e62e:	4b26      	ldr	r3, [pc, #152]	@ (800e6c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	69ba      	ldr	r2, [r7, #24]
 800e634:	429a      	cmp	r2, r3
 800e636:	d10b      	bne.n	800e650 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e63c:	f383 8811 	msr	BASEPRI, r3
 800e640:	f3bf 8f6f 	isb	sy
 800e644:	f3bf 8f4f 	dsb	sy
 800e648:	60bb      	str	r3, [r7, #8]
}
 800e64a:	bf00      	nop
 800e64c:	bf00      	nop
 800e64e:	e7fd      	b.n	800e64c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e654:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	69fa      	ldr	r2, [r7, #28]
 800e65a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	699b      	ldr	r3, [r3, #24]
 800e660:	2b00      	cmp	r3, #0
 800e662:	db04      	blt.n	800e66e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e66a:	69bb      	ldr	r3, [r7, #24]
 800e66c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	6959      	ldr	r1, [r3, #20]
 800e672:	693a      	ldr	r2, [r7, #16]
 800e674:	4613      	mov	r3, r2
 800e676:	009b      	lsls	r3, r3, #2
 800e678:	4413      	add	r3, r2
 800e67a:	009b      	lsls	r3, r3, #2
 800e67c:	4a13      	ldr	r2, [pc, #76]	@ (800e6cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e67e:	4413      	add	r3, r2
 800e680:	4299      	cmp	r1, r3
 800e682:	d11c      	bne.n	800e6be <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e684:	69bb      	ldr	r3, [r7, #24]
 800e686:	3304      	adds	r3, #4
 800e688:	4618      	mov	r0, r3
 800e68a:	f7fd ff61 	bl	800c550 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e692:	4b0f      	ldr	r3, [pc, #60]	@ (800e6d0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	429a      	cmp	r2, r3
 800e698:	d903      	bls.n	800e6a2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e69a:	69bb      	ldr	r3, [r7, #24]
 800e69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e69e:	4a0c      	ldr	r2, [pc, #48]	@ (800e6d0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e6a0:	6013      	str	r3, [r2, #0]
 800e6a2:	69bb      	ldr	r3, [r7, #24]
 800e6a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	4413      	add	r3, r2
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	4a07      	ldr	r2, [pc, #28]	@ (800e6cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e6b0:	441a      	add	r2, r3
 800e6b2:	69bb      	ldr	r3, [r7, #24]
 800e6b4:	3304      	adds	r3, #4
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	4610      	mov	r0, r2
 800e6ba:	f7fd feec 	bl	800c496 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6be:	bf00      	nop
 800e6c0:	3720      	adds	r7, #32
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	20001390 	.word	0x20001390
 800e6cc:	20001394 	.word	0x20001394
 800e6d0:	2000186c 	.word	0x2000186c

0800e6d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e6d4:	b480      	push	{r7}
 800e6d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e6d8:	4b07      	ldr	r3, [pc, #28]	@ (800e6f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d004      	beq.n	800e6ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e6e0:	4b05      	ldr	r3, [pc, #20]	@ (800e6f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e6e6:	3201      	adds	r2, #1
 800e6e8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e6ea:	4b03      	ldr	r3, [pc, #12]	@ (800e6f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
	}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f6:	4770      	bx	lr
 800e6f8:	20001390 	.word	0x20001390

0800e6fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e706:	4b21      	ldr	r3, [pc, #132]	@ (800e78c <prvAddCurrentTaskToDelayedList+0x90>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e70c:	4b20      	ldr	r3, [pc, #128]	@ (800e790 <prvAddCurrentTaskToDelayedList+0x94>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	3304      	adds	r3, #4
 800e712:	4618      	mov	r0, r3
 800e714:	f7fd ff1c 	bl	800c550 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e71e:	d10a      	bne.n	800e736 <prvAddCurrentTaskToDelayedList+0x3a>
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d007      	beq.n	800e736 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e726:	4b1a      	ldr	r3, [pc, #104]	@ (800e790 <prvAddCurrentTaskToDelayedList+0x94>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	3304      	adds	r3, #4
 800e72c:	4619      	mov	r1, r3
 800e72e:	4819      	ldr	r0, [pc, #100]	@ (800e794 <prvAddCurrentTaskToDelayedList+0x98>)
 800e730:	f7fd feb1 	bl	800c496 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e734:	e026      	b.n	800e784 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e736:	68fa      	ldr	r2, [r7, #12]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4413      	add	r3, r2
 800e73c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e73e:	4b14      	ldr	r3, [pc, #80]	@ (800e790 <prvAddCurrentTaskToDelayedList+0x94>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	68ba      	ldr	r2, [r7, #8]
 800e744:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e746:	68ba      	ldr	r2, [r7, #8]
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d209      	bcs.n	800e762 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e74e:	4b12      	ldr	r3, [pc, #72]	@ (800e798 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	4b0f      	ldr	r3, [pc, #60]	@ (800e790 <prvAddCurrentTaskToDelayedList+0x94>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	3304      	adds	r3, #4
 800e758:	4619      	mov	r1, r3
 800e75a:	4610      	mov	r0, r2
 800e75c:	f7fd febf 	bl	800c4de <vListInsert>
}
 800e760:	e010      	b.n	800e784 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e762:	4b0e      	ldr	r3, [pc, #56]	@ (800e79c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	4b0a      	ldr	r3, [pc, #40]	@ (800e790 <prvAddCurrentTaskToDelayedList+0x94>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	3304      	adds	r3, #4
 800e76c:	4619      	mov	r1, r3
 800e76e:	4610      	mov	r0, r2
 800e770:	f7fd feb5 	bl	800c4de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e774:	4b0a      	ldr	r3, [pc, #40]	@ (800e7a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	68ba      	ldr	r2, [r7, #8]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d202      	bcs.n	800e784 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e77e:	4a08      	ldr	r2, [pc, #32]	@ (800e7a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	6013      	str	r3, [r2, #0]
}
 800e784:	bf00      	nop
 800e786:	3710      	adds	r7, #16
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	20001868 	.word	0x20001868
 800e790:	20001390 	.word	0x20001390
 800e794:	20001850 	.word	0x20001850
 800e798:	20001820 	.word	0x20001820
 800e79c:	2000181c 	.word	0x2000181c
 800e7a0:	20001884 	.word	0x20001884

0800e7a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b08a      	sub	sp, #40	@ 0x28
 800e7a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e7ae:	f000 fb13 	bl	800edd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e7b2:	4b1d      	ldr	r3, [pc, #116]	@ (800e828 <xTimerCreateTimerTask+0x84>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d021      	beq.n	800e7fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e7c2:	1d3a      	adds	r2, r7, #4
 800e7c4:	f107 0108 	add.w	r1, r7, #8
 800e7c8:	f107 030c 	add.w	r3, r7, #12
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7fd fe1b 	bl	800c408 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e7d2:	6879      	ldr	r1, [r7, #4]
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	68fa      	ldr	r2, [r7, #12]
 800e7d8:	9202      	str	r2, [sp, #8]
 800e7da:	9301      	str	r3, [sp, #4]
 800e7dc:	2302      	movs	r3, #2
 800e7de:	9300      	str	r3, [sp, #0]
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	460a      	mov	r2, r1
 800e7e4:	4911      	ldr	r1, [pc, #68]	@ (800e82c <xTimerCreateTimerTask+0x88>)
 800e7e6:	4812      	ldr	r0, [pc, #72]	@ (800e830 <xTimerCreateTimerTask+0x8c>)
 800e7e8:	f7fe ffc0 	bl	800d76c <xTaskCreateStatic>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	4a11      	ldr	r2, [pc, #68]	@ (800e834 <xTimerCreateTimerTask+0x90>)
 800e7f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e7f2:	4b10      	ldr	r3, [pc, #64]	@ (800e834 <xTimerCreateTimerTask+0x90>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d001      	beq.n	800e7fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10b      	bne.n	800e81c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	613b      	str	r3, [r7, #16]
}
 800e816:	bf00      	nop
 800e818:	bf00      	nop
 800e81a:	e7fd      	b.n	800e818 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e81c:	697b      	ldr	r3, [r7, #20]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3718      	adds	r7, #24
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	200018c0 	.word	0x200018c0
 800e82c:	08015a5c 	.word	0x08015a5c
 800e830:	0800e971 	.word	0x0800e971
 800e834:	200018c4 	.word	0x200018c4

0800e838 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b08a      	sub	sp, #40	@ 0x28
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	60f8      	str	r0, [r7, #12]
 800e840:	60b9      	str	r1, [r7, #8]
 800e842:	607a      	str	r2, [r7, #4]
 800e844:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e846:	2300      	movs	r3, #0
 800e848:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10b      	bne.n	800e868 <xTimerGenericCommand+0x30>
	__asm volatile
 800e850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e854:	f383 8811 	msr	BASEPRI, r3
 800e858:	f3bf 8f6f 	isb	sy
 800e85c:	f3bf 8f4f 	dsb	sy
 800e860:	623b      	str	r3, [r7, #32]
}
 800e862:	bf00      	nop
 800e864:	bf00      	nop
 800e866:	e7fd      	b.n	800e864 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e868:	4b19      	ldr	r3, [pc, #100]	@ (800e8d0 <xTimerGenericCommand+0x98>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d02a      	beq.n	800e8c6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	2b05      	cmp	r3, #5
 800e880:	dc18      	bgt.n	800e8b4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e882:	f7ff fdad 	bl	800e3e0 <xTaskGetSchedulerState>
 800e886:	4603      	mov	r3, r0
 800e888:	2b02      	cmp	r3, #2
 800e88a:	d109      	bne.n	800e8a0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e88c:	4b10      	ldr	r3, [pc, #64]	@ (800e8d0 <xTimerGenericCommand+0x98>)
 800e88e:	6818      	ldr	r0, [r3, #0]
 800e890:	f107 0110 	add.w	r1, r7, #16
 800e894:	2300      	movs	r3, #0
 800e896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e898:	f7fe f8f0 	bl	800ca7c <xQueueGenericSend>
 800e89c:	6278      	str	r0, [r7, #36]	@ 0x24
 800e89e:	e012      	b.n	800e8c6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e8a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e8d0 <xTimerGenericCommand+0x98>)
 800e8a2:	6818      	ldr	r0, [r3, #0]
 800e8a4:	f107 0110 	add.w	r1, r7, #16
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	f7fe f8e6 	bl	800ca7c <xQueueGenericSend>
 800e8b0:	6278      	str	r0, [r7, #36]	@ 0x24
 800e8b2:	e008      	b.n	800e8c6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e8b4:	4b06      	ldr	r3, [pc, #24]	@ (800e8d0 <xTimerGenericCommand+0x98>)
 800e8b6:	6818      	ldr	r0, [r3, #0]
 800e8b8:	f107 0110 	add.w	r1, r7, #16
 800e8bc:	2300      	movs	r3, #0
 800e8be:	683a      	ldr	r2, [r7, #0]
 800e8c0:	f7fe f9de 	bl	800cc80 <xQueueGenericSendFromISR>
 800e8c4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3728      	adds	r7, #40	@ 0x28
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	200018c0 	.word	0x200018c0

0800e8d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b088      	sub	sp, #32
 800e8d8:	af02      	add	r7, sp, #8
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8de:	4b23      	ldr	r3, [pc, #140]	@ (800e96c <prvProcessExpiredTimer+0x98>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	68db      	ldr	r3, [r3, #12]
 800e8e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	3304      	adds	r3, #4
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7fd fe2f 	bl	800c550 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e8f8:	f003 0304 	and.w	r3, r3, #4
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d023      	beq.n	800e948 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	699a      	ldr	r2, [r3, #24]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	18d1      	adds	r1, r2, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	683a      	ldr	r2, [r7, #0]
 800e90c:	6978      	ldr	r0, [r7, #20]
 800e90e:	f000 f8d5 	bl	800eabc <prvInsertTimerInActiveList>
 800e912:	4603      	mov	r3, r0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d020      	beq.n	800e95a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e918:	2300      	movs	r3, #0
 800e91a:	9300      	str	r3, [sp, #0]
 800e91c:	2300      	movs	r3, #0
 800e91e:	687a      	ldr	r2, [r7, #4]
 800e920:	2100      	movs	r1, #0
 800e922:	6978      	ldr	r0, [r7, #20]
 800e924:	f7ff ff88 	bl	800e838 <xTimerGenericCommand>
 800e928:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d114      	bne.n	800e95a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e934:	f383 8811 	msr	BASEPRI, r3
 800e938:	f3bf 8f6f 	isb	sy
 800e93c:	f3bf 8f4f 	dsb	sy
 800e940:	60fb      	str	r3, [r7, #12]
}
 800e942:	bf00      	nop
 800e944:	bf00      	nop
 800e946:	e7fd      	b.n	800e944 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e94e:	f023 0301 	bic.w	r3, r3, #1
 800e952:	b2da      	uxtb	r2, r3
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	6a1b      	ldr	r3, [r3, #32]
 800e95e:	6978      	ldr	r0, [r7, #20]
 800e960:	4798      	blx	r3
}
 800e962:	bf00      	nop
 800e964:	3718      	adds	r7, #24
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	200018b8 	.word	0x200018b8

0800e970 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e978:	f107 0308 	add.w	r3, r7, #8
 800e97c:	4618      	mov	r0, r3
 800e97e:	f000 f859 	bl	800ea34 <prvGetNextExpireTime>
 800e982:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	4619      	mov	r1, r3
 800e988:	68f8      	ldr	r0, [r7, #12]
 800e98a:	f000 f805 	bl	800e998 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e98e:	f000 f8d7 	bl	800eb40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e992:	bf00      	nop
 800e994:	e7f0      	b.n	800e978 <prvTimerTask+0x8>
	...

0800e998 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e9a2:	f7ff f927 	bl	800dbf4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e9a6:	f107 0308 	add.w	r3, r7, #8
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f000 f866 	bl	800ea7c <prvSampleTimeNow>
 800e9b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d130      	bne.n	800ea1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d10a      	bne.n	800e9d4 <prvProcessTimerOrBlockTask+0x3c>
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d806      	bhi.n	800e9d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e9c6:	f7ff f923 	bl	800dc10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e9ca:	68f9      	ldr	r1, [r7, #12]
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f7ff ff81 	bl	800e8d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e9d2:	e024      	b.n	800ea1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d008      	beq.n	800e9ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e9da:	4b13      	ldr	r3, [pc, #76]	@ (800ea28 <prvProcessTimerOrBlockTask+0x90>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d101      	bne.n	800e9e8 <prvProcessTimerOrBlockTask+0x50>
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	e000      	b.n	800e9ea <prvProcessTimerOrBlockTask+0x52>
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e9ec:	4b0f      	ldr	r3, [pc, #60]	@ (800ea2c <prvProcessTimerOrBlockTask+0x94>)
 800e9ee:	6818      	ldr	r0, [r3, #0]
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	1ad3      	subs	r3, r2, r3
 800e9f6:	683a      	ldr	r2, [r7, #0]
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	f7fe fe83 	bl	800d704 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e9fe:	f7ff f907 	bl	800dc10 <xTaskResumeAll>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d10a      	bne.n	800ea1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ea08:	4b09      	ldr	r3, [pc, #36]	@ (800ea30 <prvProcessTimerOrBlockTask+0x98>)
 800ea0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea0e:	601a      	str	r2, [r3, #0]
 800ea10:	f3bf 8f4f 	dsb	sy
 800ea14:	f3bf 8f6f 	isb	sy
}
 800ea18:	e001      	b.n	800ea1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ea1a:	f7ff f8f9 	bl	800dc10 <xTaskResumeAll>
}
 800ea1e:	bf00      	nop
 800ea20:	3710      	adds	r7, #16
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	200018bc 	.word	0x200018bc
 800ea2c:	200018c0 	.word	0x200018c0
 800ea30:	e000ed04 	.word	0xe000ed04

0800ea34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ea34:	b480      	push	{r7}
 800ea36:	b085      	sub	sp, #20
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ea3c:	4b0e      	ldr	r3, [pc, #56]	@ (800ea78 <prvGetNextExpireTime+0x44>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d101      	bne.n	800ea4a <prvGetNextExpireTime+0x16>
 800ea46:	2201      	movs	r2, #1
 800ea48:	e000      	b.n	800ea4c <prvGetNextExpireTime+0x18>
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d105      	bne.n	800ea64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ea58:	4b07      	ldr	r3, [pc, #28]	@ (800ea78 <prvGetNextExpireTime+0x44>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	60fb      	str	r3, [r7, #12]
 800ea62:	e001      	b.n	800ea68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ea64:	2300      	movs	r3, #0
 800ea66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ea68:	68fb      	ldr	r3, [r7, #12]
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3714      	adds	r7, #20
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop
 800ea78:	200018b8 	.word	0x200018b8

0800ea7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ea84:	f7ff f962 	bl	800dd4c <xTaskGetTickCount>
 800ea88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ea8a:	4b0b      	ldr	r3, [pc, #44]	@ (800eab8 <prvSampleTimeNow+0x3c>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	68fa      	ldr	r2, [r7, #12]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d205      	bcs.n	800eaa0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ea94:	f000 f93a 	bl	800ed0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	601a      	str	r2, [r3, #0]
 800ea9e:	e002      	b.n	800eaa6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eaa6:	4a04      	ldr	r2, [pc, #16]	@ (800eab8 <prvSampleTimeNow+0x3c>)
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eaac:	68fb      	ldr	r3, [r7, #12]
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3710      	adds	r7, #16
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	200018c8 	.word	0x200018c8

0800eabc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b086      	sub	sp, #24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	60f8      	str	r0, [r7, #12]
 800eac4:	60b9      	str	r1, [r7, #8]
 800eac6:	607a      	str	r2, [r7, #4]
 800eac8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800eaca:	2300      	movs	r3, #0
 800eacc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	68ba      	ldr	r2, [r7, #8]
 800ead2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	68fa      	ldr	r2, [r7, #12]
 800ead8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800eada:	68ba      	ldr	r2, [r7, #8]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	429a      	cmp	r2, r3
 800eae0:	d812      	bhi.n	800eb08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	1ad2      	subs	r2, r2, r3
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	699b      	ldr	r3, [r3, #24]
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d302      	bcc.n	800eaf6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	617b      	str	r3, [r7, #20]
 800eaf4:	e01b      	b.n	800eb2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eaf6:	4b10      	ldr	r3, [pc, #64]	@ (800eb38 <prvInsertTimerInActiveList+0x7c>)
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	3304      	adds	r3, #4
 800eafe:	4619      	mov	r1, r3
 800eb00:	4610      	mov	r0, r2
 800eb02:	f7fd fcec 	bl	800c4de <vListInsert>
 800eb06:	e012      	b.n	800eb2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d206      	bcs.n	800eb1e <prvInsertTimerInActiveList+0x62>
 800eb10:	68ba      	ldr	r2, [r7, #8]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d302      	bcc.n	800eb1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800eb18:	2301      	movs	r3, #1
 800eb1a:	617b      	str	r3, [r7, #20]
 800eb1c:	e007      	b.n	800eb2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eb1e:	4b07      	ldr	r3, [pc, #28]	@ (800eb3c <prvInsertTimerInActiveList+0x80>)
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	3304      	adds	r3, #4
 800eb26:	4619      	mov	r1, r3
 800eb28:	4610      	mov	r0, r2
 800eb2a:	f7fd fcd8 	bl	800c4de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eb2e:	697b      	ldr	r3, [r7, #20]
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3718      	adds	r7, #24
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	200018bc 	.word	0x200018bc
 800eb3c:	200018b8 	.word	0x200018b8

0800eb40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b08e      	sub	sp, #56	@ 0x38
 800eb44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eb46:	e0ce      	b.n	800ece6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	da19      	bge.n	800eb82 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eb4e:	1d3b      	adds	r3, r7, #4
 800eb50:	3304      	adds	r3, #4
 800eb52:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eb54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d10b      	bne.n	800eb72 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800eb5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb5e:	f383 8811 	msr	BASEPRI, r3
 800eb62:	f3bf 8f6f 	isb	sy
 800eb66:	f3bf 8f4f 	dsb	sy
 800eb6a:	61fb      	str	r3, [r7, #28]
}
 800eb6c:	bf00      	nop
 800eb6e:	bf00      	nop
 800eb70:	e7fd      	b.n	800eb6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eb72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb78:	6850      	ldr	r0, [r2, #4]
 800eb7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb7c:	6892      	ldr	r2, [r2, #8]
 800eb7e:	4611      	mov	r1, r2
 800eb80:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f2c0 80ae 	blt.w	800ece6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eb8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb90:	695b      	ldr	r3, [r3, #20]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d004      	beq.n	800eba0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb98:	3304      	adds	r3, #4
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7fd fcd8 	bl	800c550 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eba0:	463b      	mov	r3, r7
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7ff ff6a 	bl	800ea7c <prvSampleTimeNow>
 800eba8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2b09      	cmp	r3, #9
 800ebae:	f200 8097 	bhi.w	800ece0 <prvProcessReceivedCommands+0x1a0>
 800ebb2:	a201      	add	r2, pc, #4	@ (adr r2, 800ebb8 <prvProcessReceivedCommands+0x78>)
 800ebb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb8:	0800ebe1 	.word	0x0800ebe1
 800ebbc:	0800ebe1 	.word	0x0800ebe1
 800ebc0:	0800ebe1 	.word	0x0800ebe1
 800ebc4:	0800ec57 	.word	0x0800ec57
 800ebc8:	0800ec6b 	.word	0x0800ec6b
 800ebcc:	0800ecb7 	.word	0x0800ecb7
 800ebd0:	0800ebe1 	.word	0x0800ebe1
 800ebd4:	0800ebe1 	.word	0x0800ebe1
 800ebd8:	0800ec57 	.word	0x0800ec57
 800ebdc:	0800ec6b 	.word	0x0800ec6b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ebe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ebe6:	f043 0301 	orr.w	r3, r3, #1
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ebf2:	68ba      	ldr	r2, [r7, #8]
 800ebf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf6:	699b      	ldr	r3, [r3, #24]
 800ebf8:	18d1      	adds	r1, r2, r3
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec00:	f7ff ff5c 	bl	800eabc <prvInsertTimerInActiveList>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d06c      	beq.n	800ece4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec0c:	6a1b      	ldr	r3, [r3, #32]
 800ec0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec18:	f003 0304 	and.w	r3, r3, #4
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d061      	beq.n	800ece4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ec20:	68ba      	ldr	r2, [r7, #8]
 800ec22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec24:	699b      	ldr	r3, [r3, #24]
 800ec26:	441a      	add	r2, r3
 800ec28:	2300      	movs	r3, #0
 800ec2a:	9300      	str	r3, [sp, #0]
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	2100      	movs	r1, #0
 800ec30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec32:	f7ff fe01 	bl	800e838 <xTimerGenericCommand>
 800ec36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ec38:	6a3b      	ldr	r3, [r7, #32]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d152      	bne.n	800ece4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ec3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec42:	f383 8811 	msr	BASEPRI, r3
 800ec46:	f3bf 8f6f 	isb	sy
 800ec4a:	f3bf 8f4f 	dsb	sy
 800ec4e:	61bb      	str	r3, [r7, #24]
}
 800ec50:	bf00      	nop
 800ec52:	bf00      	nop
 800ec54:	e7fd      	b.n	800ec52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec5c:	f023 0301 	bic.w	r3, r3, #1
 800ec60:	b2da      	uxtb	r2, r3
 800ec62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ec68:	e03d      	b.n	800ece6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ec70:	f043 0301 	orr.w	r3, r3, #1
 800ec74:	b2da      	uxtb	r2, r3
 800ec76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ec7c:	68ba      	ldr	r2, [r7, #8]
 800ec7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec80:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ec82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec84:	699b      	ldr	r3, [r3, #24]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d10b      	bne.n	800eca2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ec8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec8e:	f383 8811 	msr	BASEPRI, r3
 800ec92:	f3bf 8f6f 	isb	sy
 800ec96:	f3bf 8f4f 	dsb	sy
 800ec9a:	617b      	str	r3, [r7, #20]
}
 800ec9c:	bf00      	nop
 800ec9e:	bf00      	nop
 800eca0:	e7fd      	b.n	800ec9e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca4:	699a      	ldr	r2, [r3, #24]
 800eca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca8:	18d1      	adds	r1, r2, r3
 800ecaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ecb0:	f7ff ff04 	bl	800eabc <prvInsertTimerInActiveList>
					break;
 800ecb4:	e017      	b.n	800ece6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ecb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ecbc:	f003 0302 	and.w	r3, r3, #2
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d103      	bne.n	800eccc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ecc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ecc6:	f000 fbe7 	bl	800f498 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ecca:	e00c      	b.n	800ece6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ecd2:	f023 0301 	bic.w	r3, r3, #1
 800ecd6:	b2da      	uxtb	r2, r3
 800ecd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ecde:	e002      	b.n	800ece6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ece0:	bf00      	nop
 800ece2:	e000      	b.n	800ece6 <prvProcessReceivedCommands+0x1a6>
					break;
 800ece4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ece6:	4b08      	ldr	r3, [pc, #32]	@ (800ed08 <prvProcessReceivedCommands+0x1c8>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	1d39      	adds	r1, r7, #4
 800ecec:	2200      	movs	r2, #0
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7fe f8f4 	bl	800cedc <xQueueReceive>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	f47f af26 	bne.w	800eb48 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ecfc:	bf00      	nop
 800ecfe:	bf00      	nop
 800ed00:	3730      	adds	r7, #48	@ 0x30
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	200018c0 	.word	0x200018c0

0800ed0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b088      	sub	sp, #32
 800ed10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ed12:	e049      	b.n	800eda8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ed14:	4b2e      	ldr	r3, [pc, #184]	@ (800edd0 <prvSwitchTimerLists+0xc4>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	68db      	ldr	r3, [r3, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed1e:	4b2c      	ldr	r3, [pc, #176]	@ (800edd0 <prvSwitchTimerLists+0xc4>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	3304      	adds	r3, #4
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7fd fc0f 	bl	800c550 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	6a1b      	ldr	r3, [r3, #32]
 800ed36:	68f8      	ldr	r0, [r7, #12]
 800ed38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ed40:	f003 0304 	and.w	r3, r3, #4
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d02f      	beq.n	800eda8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	699b      	ldr	r3, [r3, #24]
 800ed4c:	693a      	ldr	r2, [r7, #16]
 800ed4e:	4413      	add	r3, r2
 800ed50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ed52:	68ba      	ldr	r2, [r7, #8]
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d90e      	bls.n	800ed78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	68ba      	ldr	r2, [r7, #8]
 800ed5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	68fa      	ldr	r2, [r7, #12]
 800ed64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed66:	4b1a      	ldr	r3, [pc, #104]	@ (800edd0 <prvSwitchTimerLists+0xc4>)
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	3304      	adds	r3, #4
 800ed6e:	4619      	mov	r1, r3
 800ed70:	4610      	mov	r0, r2
 800ed72:	f7fd fbb4 	bl	800c4de <vListInsert>
 800ed76:	e017      	b.n	800eda8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ed78:	2300      	movs	r3, #0
 800ed7a:	9300      	str	r3, [sp, #0]
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	693a      	ldr	r2, [r7, #16]
 800ed80:	2100      	movs	r1, #0
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	f7ff fd58 	bl	800e838 <xTimerGenericCommand>
 800ed88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d10b      	bne.n	800eda8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ed90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed94:	f383 8811 	msr	BASEPRI, r3
 800ed98:	f3bf 8f6f 	isb	sy
 800ed9c:	f3bf 8f4f 	dsb	sy
 800eda0:	603b      	str	r3, [r7, #0]
}
 800eda2:	bf00      	nop
 800eda4:	bf00      	nop
 800eda6:	e7fd      	b.n	800eda4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eda8:	4b09      	ldr	r3, [pc, #36]	@ (800edd0 <prvSwitchTimerLists+0xc4>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d1b0      	bne.n	800ed14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800edb2:	4b07      	ldr	r3, [pc, #28]	@ (800edd0 <prvSwitchTimerLists+0xc4>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800edb8:	4b06      	ldr	r3, [pc, #24]	@ (800edd4 <prvSwitchTimerLists+0xc8>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	4a04      	ldr	r2, [pc, #16]	@ (800edd0 <prvSwitchTimerLists+0xc4>)
 800edbe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800edc0:	4a04      	ldr	r2, [pc, #16]	@ (800edd4 <prvSwitchTimerLists+0xc8>)
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	6013      	str	r3, [r2, #0]
}
 800edc6:	bf00      	nop
 800edc8:	3718      	adds	r7, #24
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	200018b8 	.word	0x200018b8
 800edd4:	200018bc 	.word	0x200018bc

0800edd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800edde:	f000 f96b 	bl	800f0b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ede2:	4b15      	ldr	r3, [pc, #84]	@ (800ee38 <prvCheckForValidListAndQueue+0x60>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d120      	bne.n	800ee2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800edea:	4814      	ldr	r0, [pc, #80]	@ (800ee3c <prvCheckForValidListAndQueue+0x64>)
 800edec:	f7fd fb26 	bl	800c43c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800edf0:	4813      	ldr	r0, [pc, #76]	@ (800ee40 <prvCheckForValidListAndQueue+0x68>)
 800edf2:	f7fd fb23 	bl	800c43c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800edf6:	4b13      	ldr	r3, [pc, #76]	@ (800ee44 <prvCheckForValidListAndQueue+0x6c>)
 800edf8:	4a10      	ldr	r2, [pc, #64]	@ (800ee3c <prvCheckForValidListAndQueue+0x64>)
 800edfa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800edfc:	4b12      	ldr	r3, [pc, #72]	@ (800ee48 <prvCheckForValidListAndQueue+0x70>)
 800edfe:	4a10      	ldr	r2, [pc, #64]	@ (800ee40 <prvCheckForValidListAndQueue+0x68>)
 800ee00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ee02:	2300      	movs	r3, #0
 800ee04:	9300      	str	r3, [sp, #0]
 800ee06:	4b11      	ldr	r3, [pc, #68]	@ (800ee4c <prvCheckForValidListAndQueue+0x74>)
 800ee08:	4a11      	ldr	r2, [pc, #68]	@ (800ee50 <prvCheckForValidListAndQueue+0x78>)
 800ee0a:	2110      	movs	r1, #16
 800ee0c:	200a      	movs	r0, #10
 800ee0e:	f7fd fc33 	bl	800c678 <xQueueGenericCreateStatic>
 800ee12:	4603      	mov	r3, r0
 800ee14:	4a08      	ldr	r2, [pc, #32]	@ (800ee38 <prvCheckForValidListAndQueue+0x60>)
 800ee16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ee18:	4b07      	ldr	r3, [pc, #28]	@ (800ee38 <prvCheckForValidListAndQueue+0x60>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d005      	beq.n	800ee2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ee20:	4b05      	ldr	r3, [pc, #20]	@ (800ee38 <prvCheckForValidListAndQueue+0x60>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	490b      	ldr	r1, [pc, #44]	@ (800ee54 <prvCheckForValidListAndQueue+0x7c>)
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7fe fc18 	bl	800d65c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ee2c:	f000 f976 	bl	800f11c <vPortExitCritical>
}
 800ee30:	bf00      	nop
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	200018c0 	.word	0x200018c0
 800ee3c:	20001890 	.word	0x20001890
 800ee40:	200018a4 	.word	0x200018a4
 800ee44:	200018b8 	.word	0x200018b8
 800ee48:	200018bc 	.word	0x200018bc
 800ee4c:	2000196c 	.word	0x2000196c
 800ee50:	200018cc 	.word	0x200018cc
 800ee54:	08015a64 	.word	0x08015a64

0800ee58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	3b04      	subs	r3, #4
 800ee68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ee70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	3b04      	subs	r3, #4
 800ee76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	f023 0201 	bic.w	r2, r3, #1
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	3b04      	subs	r3, #4
 800ee86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ee88:	4a0c      	ldr	r2, [pc, #48]	@ (800eebc <pxPortInitialiseStack+0x64>)
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	3b14      	subs	r3, #20
 800ee92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	3b04      	subs	r3, #4
 800ee9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f06f 0202 	mvn.w	r2, #2
 800eea6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	3b20      	subs	r3, #32
 800eeac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eeae:	68fb      	ldr	r3, [r7, #12]
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3714      	adds	r7, #20
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr
 800eebc:	0800eec1 	.word	0x0800eec1

0800eec0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eec0:	b480      	push	{r7}
 800eec2:	b085      	sub	sp, #20
 800eec4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eec6:	2300      	movs	r3, #0
 800eec8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eeca:	4b13      	ldr	r3, [pc, #76]	@ (800ef18 <prvTaskExitError+0x58>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eed2:	d00b      	beq.n	800eeec <prvTaskExitError+0x2c>
	__asm volatile
 800eed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eed8:	f383 8811 	msr	BASEPRI, r3
 800eedc:	f3bf 8f6f 	isb	sy
 800eee0:	f3bf 8f4f 	dsb	sy
 800eee4:	60fb      	str	r3, [r7, #12]
}
 800eee6:	bf00      	nop
 800eee8:	bf00      	nop
 800eeea:	e7fd      	b.n	800eee8 <prvTaskExitError+0x28>
	__asm volatile
 800eeec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eef0:	f383 8811 	msr	BASEPRI, r3
 800eef4:	f3bf 8f6f 	isb	sy
 800eef8:	f3bf 8f4f 	dsb	sy
 800eefc:	60bb      	str	r3, [r7, #8]
}
 800eefe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ef00:	bf00      	nop
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d0fc      	beq.n	800ef02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ef08:	bf00      	nop
 800ef0a:	bf00      	nop
 800ef0c:	3714      	adds	r7, #20
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop
 800ef18:	200000b4 	.word	0x200000b4
 800ef1c:	00000000 	.word	0x00000000

0800ef20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ef20:	4b07      	ldr	r3, [pc, #28]	@ (800ef40 <pxCurrentTCBConst2>)
 800ef22:	6819      	ldr	r1, [r3, #0]
 800ef24:	6808      	ldr	r0, [r1, #0]
 800ef26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef2a:	f380 8809 	msr	PSP, r0
 800ef2e:	f3bf 8f6f 	isb	sy
 800ef32:	f04f 0000 	mov.w	r0, #0
 800ef36:	f380 8811 	msr	BASEPRI, r0
 800ef3a:	4770      	bx	lr
 800ef3c:	f3af 8000 	nop.w

0800ef40 <pxCurrentTCBConst2>:
 800ef40:	20001390 	.word	0x20001390
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ef44:	bf00      	nop
 800ef46:	bf00      	nop

0800ef48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ef48:	4808      	ldr	r0, [pc, #32]	@ (800ef6c <prvPortStartFirstTask+0x24>)
 800ef4a:	6800      	ldr	r0, [r0, #0]
 800ef4c:	6800      	ldr	r0, [r0, #0]
 800ef4e:	f380 8808 	msr	MSP, r0
 800ef52:	f04f 0000 	mov.w	r0, #0
 800ef56:	f380 8814 	msr	CONTROL, r0
 800ef5a:	b662      	cpsie	i
 800ef5c:	b661      	cpsie	f
 800ef5e:	f3bf 8f4f 	dsb	sy
 800ef62:	f3bf 8f6f 	isb	sy
 800ef66:	df00      	svc	0
 800ef68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ef6a:	bf00      	nop
 800ef6c:	e000ed08 	.word	0xe000ed08

0800ef70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b086      	sub	sp, #24
 800ef74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ef76:	4b47      	ldr	r3, [pc, #284]	@ (800f094 <xPortStartScheduler+0x124>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a47      	ldr	r2, [pc, #284]	@ (800f098 <xPortStartScheduler+0x128>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d10b      	bne.n	800ef98 <xPortStartScheduler+0x28>
	__asm volatile
 800ef80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef84:	f383 8811 	msr	BASEPRI, r3
 800ef88:	f3bf 8f6f 	isb	sy
 800ef8c:	f3bf 8f4f 	dsb	sy
 800ef90:	613b      	str	r3, [r7, #16]
}
 800ef92:	bf00      	nop
 800ef94:	bf00      	nop
 800ef96:	e7fd      	b.n	800ef94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ef98:	4b3e      	ldr	r3, [pc, #248]	@ (800f094 <xPortStartScheduler+0x124>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4a3f      	ldr	r2, [pc, #252]	@ (800f09c <xPortStartScheduler+0x12c>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d10b      	bne.n	800efba <xPortStartScheduler+0x4a>
	__asm volatile
 800efa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa6:	f383 8811 	msr	BASEPRI, r3
 800efaa:	f3bf 8f6f 	isb	sy
 800efae:	f3bf 8f4f 	dsb	sy
 800efb2:	60fb      	str	r3, [r7, #12]
}
 800efb4:	bf00      	nop
 800efb6:	bf00      	nop
 800efb8:	e7fd      	b.n	800efb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800efba:	4b39      	ldr	r3, [pc, #228]	@ (800f0a0 <xPortStartScheduler+0x130>)
 800efbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	781b      	ldrb	r3, [r3, #0]
 800efc2:	b2db      	uxtb	r3, r3
 800efc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	22ff      	movs	r2, #255	@ 0xff
 800efca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800efd4:	78fb      	ldrb	r3, [r7, #3]
 800efd6:	b2db      	uxtb	r3, r3
 800efd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800efdc:	b2da      	uxtb	r2, r3
 800efde:	4b31      	ldr	r3, [pc, #196]	@ (800f0a4 <xPortStartScheduler+0x134>)
 800efe0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800efe2:	4b31      	ldr	r3, [pc, #196]	@ (800f0a8 <xPortStartScheduler+0x138>)
 800efe4:	2207      	movs	r2, #7
 800efe6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800efe8:	e009      	b.n	800effe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800efea:	4b2f      	ldr	r3, [pc, #188]	@ (800f0a8 <xPortStartScheduler+0x138>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	3b01      	subs	r3, #1
 800eff0:	4a2d      	ldr	r2, [pc, #180]	@ (800f0a8 <xPortStartScheduler+0x138>)
 800eff2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eff4:	78fb      	ldrb	r3, [r7, #3]
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	005b      	lsls	r3, r3, #1
 800effa:	b2db      	uxtb	r3, r3
 800effc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800effe:	78fb      	ldrb	r3, [r7, #3]
 800f000:	b2db      	uxtb	r3, r3
 800f002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f006:	2b80      	cmp	r3, #128	@ 0x80
 800f008:	d0ef      	beq.n	800efea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f00a:	4b27      	ldr	r3, [pc, #156]	@ (800f0a8 <xPortStartScheduler+0x138>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f1c3 0307 	rsb	r3, r3, #7
 800f012:	2b04      	cmp	r3, #4
 800f014:	d00b      	beq.n	800f02e <xPortStartScheduler+0xbe>
	__asm volatile
 800f016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f01a:	f383 8811 	msr	BASEPRI, r3
 800f01e:	f3bf 8f6f 	isb	sy
 800f022:	f3bf 8f4f 	dsb	sy
 800f026:	60bb      	str	r3, [r7, #8]
}
 800f028:	bf00      	nop
 800f02a:	bf00      	nop
 800f02c:	e7fd      	b.n	800f02a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f02e:	4b1e      	ldr	r3, [pc, #120]	@ (800f0a8 <xPortStartScheduler+0x138>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	021b      	lsls	r3, r3, #8
 800f034:	4a1c      	ldr	r2, [pc, #112]	@ (800f0a8 <xPortStartScheduler+0x138>)
 800f036:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f038:	4b1b      	ldr	r3, [pc, #108]	@ (800f0a8 <xPortStartScheduler+0x138>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f040:	4a19      	ldr	r2, [pc, #100]	@ (800f0a8 <xPortStartScheduler+0x138>)
 800f042:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	b2da      	uxtb	r2, r3
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f04c:	4b17      	ldr	r3, [pc, #92]	@ (800f0ac <xPortStartScheduler+0x13c>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	4a16      	ldr	r2, [pc, #88]	@ (800f0ac <xPortStartScheduler+0x13c>)
 800f052:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f056:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f058:	4b14      	ldr	r3, [pc, #80]	@ (800f0ac <xPortStartScheduler+0x13c>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a13      	ldr	r2, [pc, #76]	@ (800f0ac <xPortStartScheduler+0x13c>)
 800f05e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f062:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f064:	f000 f8da 	bl	800f21c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f068:	4b11      	ldr	r3, [pc, #68]	@ (800f0b0 <xPortStartScheduler+0x140>)
 800f06a:	2200      	movs	r2, #0
 800f06c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f06e:	f000 f8f9 	bl	800f264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f072:	4b10      	ldr	r3, [pc, #64]	@ (800f0b4 <xPortStartScheduler+0x144>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	4a0f      	ldr	r2, [pc, #60]	@ (800f0b4 <xPortStartScheduler+0x144>)
 800f078:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f07c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f07e:	f7ff ff63 	bl	800ef48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f082:	f7fe ff2d 	bl	800dee0 <vTaskSwitchContext>
	prvTaskExitError();
 800f086:	f7ff ff1b 	bl	800eec0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f08a:	2300      	movs	r3, #0
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3718      	adds	r7, #24
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}
 800f094:	e000ed00 	.word	0xe000ed00
 800f098:	410fc271 	.word	0x410fc271
 800f09c:	410fc270 	.word	0x410fc270
 800f0a0:	e000e400 	.word	0xe000e400
 800f0a4:	200019bc 	.word	0x200019bc
 800f0a8:	200019c0 	.word	0x200019c0
 800f0ac:	e000ed20 	.word	0xe000ed20
 800f0b0:	200000b4 	.word	0x200000b4
 800f0b4:	e000ef34 	.word	0xe000ef34

0800f0b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b083      	sub	sp, #12
 800f0bc:	af00      	add	r7, sp, #0
	__asm volatile
 800f0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0c2:	f383 8811 	msr	BASEPRI, r3
 800f0c6:	f3bf 8f6f 	isb	sy
 800f0ca:	f3bf 8f4f 	dsb	sy
 800f0ce:	607b      	str	r3, [r7, #4]
}
 800f0d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f0d2:	4b10      	ldr	r3, [pc, #64]	@ (800f114 <vPortEnterCritical+0x5c>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	4a0e      	ldr	r2, [pc, #56]	@ (800f114 <vPortEnterCritical+0x5c>)
 800f0da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f0dc:	4b0d      	ldr	r3, [pc, #52]	@ (800f114 <vPortEnterCritical+0x5c>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d110      	bne.n	800f106 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f0e4:	4b0c      	ldr	r3, [pc, #48]	@ (800f118 <vPortEnterCritical+0x60>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00b      	beq.n	800f106 <vPortEnterCritical+0x4e>
	__asm volatile
 800f0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0f2:	f383 8811 	msr	BASEPRI, r3
 800f0f6:	f3bf 8f6f 	isb	sy
 800f0fa:	f3bf 8f4f 	dsb	sy
 800f0fe:	603b      	str	r3, [r7, #0]
}
 800f100:	bf00      	nop
 800f102:	bf00      	nop
 800f104:	e7fd      	b.n	800f102 <vPortEnterCritical+0x4a>
	}
}
 800f106:	bf00      	nop
 800f108:	370c      	adds	r7, #12
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr
 800f112:	bf00      	nop
 800f114:	200000b4 	.word	0x200000b4
 800f118:	e000ed04 	.word	0xe000ed04

0800f11c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f11c:	b480      	push	{r7}
 800f11e:	b083      	sub	sp, #12
 800f120:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f122:	4b12      	ldr	r3, [pc, #72]	@ (800f16c <vPortExitCritical+0x50>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d10b      	bne.n	800f142 <vPortExitCritical+0x26>
	__asm volatile
 800f12a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f12e:	f383 8811 	msr	BASEPRI, r3
 800f132:	f3bf 8f6f 	isb	sy
 800f136:	f3bf 8f4f 	dsb	sy
 800f13a:	607b      	str	r3, [r7, #4]
}
 800f13c:	bf00      	nop
 800f13e:	bf00      	nop
 800f140:	e7fd      	b.n	800f13e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f142:	4b0a      	ldr	r3, [pc, #40]	@ (800f16c <vPortExitCritical+0x50>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	3b01      	subs	r3, #1
 800f148:	4a08      	ldr	r2, [pc, #32]	@ (800f16c <vPortExitCritical+0x50>)
 800f14a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f14c:	4b07      	ldr	r3, [pc, #28]	@ (800f16c <vPortExitCritical+0x50>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d105      	bne.n	800f160 <vPortExitCritical+0x44>
 800f154:	2300      	movs	r3, #0
 800f156:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	f383 8811 	msr	BASEPRI, r3
}
 800f15e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f160:	bf00      	nop
 800f162:	370c      	adds	r7, #12
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr
 800f16c:	200000b4 	.word	0x200000b4

0800f170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f170:	f3ef 8009 	mrs	r0, PSP
 800f174:	f3bf 8f6f 	isb	sy
 800f178:	4b15      	ldr	r3, [pc, #84]	@ (800f1d0 <pxCurrentTCBConst>)
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	f01e 0f10 	tst.w	lr, #16
 800f180:	bf08      	it	eq
 800f182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f18a:	6010      	str	r0, [r2, #0]
 800f18c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f190:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f194:	f380 8811 	msr	BASEPRI, r0
 800f198:	f3bf 8f4f 	dsb	sy
 800f19c:	f3bf 8f6f 	isb	sy
 800f1a0:	f7fe fe9e 	bl	800dee0 <vTaskSwitchContext>
 800f1a4:	f04f 0000 	mov.w	r0, #0
 800f1a8:	f380 8811 	msr	BASEPRI, r0
 800f1ac:	bc09      	pop	{r0, r3}
 800f1ae:	6819      	ldr	r1, [r3, #0]
 800f1b0:	6808      	ldr	r0, [r1, #0]
 800f1b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b6:	f01e 0f10 	tst.w	lr, #16
 800f1ba:	bf08      	it	eq
 800f1bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f1c0:	f380 8809 	msr	PSP, r0
 800f1c4:	f3bf 8f6f 	isb	sy
 800f1c8:	4770      	bx	lr
 800f1ca:	bf00      	nop
 800f1cc:	f3af 8000 	nop.w

0800f1d0 <pxCurrentTCBConst>:
 800f1d0:	20001390 	.word	0x20001390
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f1d4:	bf00      	nop
 800f1d6:	bf00      	nop

0800f1d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1e2:	f383 8811 	msr	BASEPRI, r3
 800f1e6:	f3bf 8f6f 	isb	sy
 800f1ea:	f3bf 8f4f 	dsb	sy
 800f1ee:	607b      	str	r3, [r7, #4]
}
 800f1f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f1f2:	f7fe fdbb 	bl	800dd6c <xTaskIncrementTick>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d003      	beq.n	800f204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f1fc:	4b06      	ldr	r3, [pc, #24]	@ (800f218 <xPortSysTickHandler+0x40>)
 800f1fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f202:	601a      	str	r2, [r3, #0]
 800f204:	2300      	movs	r3, #0
 800f206:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	f383 8811 	msr	BASEPRI, r3
}
 800f20e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f210:	bf00      	nop
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	e000ed04 	.word	0xe000ed04

0800f21c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f21c:	b480      	push	{r7}
 800f21e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f220:	4b0b      	ldr	r3, [pc, #44]	@ (800f250 <vPortSetupTimerInterrupt+0x34>)
 800f222:	2200      	movs	r2, #0
 800f224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f226:	4b0b      	ldr	r3, [pc, #44]	@ (800f254 <vPortSetupTimerInterrupt+0x38>)
 800f228:	2200      	movs	r2, #0
 800f22a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f22c:	4b0a      	ldr	r3, [pc, #40]	@ (800f258 <vPortSetupTimerInterrupt+0x3c>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4a0a      	ldr	r2, [pc, #40]	@ (800f25c <vPortSetupTimerInterrupt+0x40>)
 800f232:	fba2 2303 	umull	r2, r3, r2, r3
 800f236:	099b      	lsrs	r3, r3, #6
 800f238:	4a09      	ldr	r2, [pc, #36]	@ (800f260 <vPortSetupTimerInterrupt+0x44>)
 800f23a:	3b01      	subs	r3, #1
 800f23c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f23e:	4b04      	ldr	r3, [pc, #16]	@ (800f250 <vPortSetupTimerInterrupt+0x34>)
 800f240:	2207      	movs	r2, #7
 800f242:	601a      	str	r2, [r3, #0]
}
 800f244:	bf00      	nop
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr
 800f24e:	bf00      	nop
 800f250:	e000e010 	.word	0xe000e010
 800f254:	e000e018 	.word	0xe000e018
 800f258:	200000a8 	.word	0x200000a8
 800f25c:	10624dd3 	.word	0x10624dd3
 800f260:	e000e014 	.word	0xe000e014

0800f264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f264:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f274 <vPortEnableVFP+0x10>
 800f268:	6801      	ldr	r1, [r0, #0]
 800f26a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f26e:	6001      	str	r1, [r0, #0]
 800f270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f272:	bf00      	nop
 800f274:	e000ed88 	.word	0xe000ed88

0800f278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f278:	b480      	push	{r7}
 800f27a:	b085      	sub	sp, #20
 800f27c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f27e:	f3ef 8305 	mrs	r3, IPSR
 800f282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	2b0f      	cmp	r3, #15
 800f288:	d915      	bls.n	800f2b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f28a:	4a18      	ldr	r2, [pc, #96]	@ (800f2ec <vPortValidateInterruptPriority+0x74>)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	4413      	add	r3, r2
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f294:	4b16      	ldr	r3, [pc, #88]	@ (800f2f0 <vPortValidateInterruptPriority+0x78>)
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	7afa      	ldrb	r2, [r7, #11]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d20b      	bcs.n	800f2b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2a2:	f383 8811 	msr	BASEPRI, r3
 800f2a6:	f3bf 8f6f 	isb	sy
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	607b      	str	r3, [r7, #4]
}
 800f2b0:	bf00      	nop
 800f2b2:	bf00      	nop
 800f2b4:	e7fd      	b.n	800f2b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f2b6:	4b0f      	ldr	r3, [pc, #60]	@ (800f2f4 <vPortValidateInterruptPriority+0x7c>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f2be:	4b0e      	ldr	r3, [pc, #56]	@ (800f2f8 <vPortValidateInterruptPriority+0x80>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d90b      	bls.n	800f2de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ca:	f383 8811 	msr	BASEPRI, r3
 800f2ce:	f3bf 8f6f 	isb	sy
 800f2d2:	f3bf 8f4f 	dsb	sy
 800f2d6:	603b      	str	r3, [r7, #0]
}
 800f2d8:	bf00      	nop
 800f2da:	bf00      	nop
 800f2dc:	e7fd      	b.n	800f2da <vPortValidateInterruptPriority+0x62>
	}
 800f2de:	bf00      	nop
 800f2e0:	3714      	adds	r7, #20
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop
 800f2ec:	e000e3f0 	.word	0xe000e3f0
 800f2f0:	200019bc 	.word	0x200019bc
 800f2f4:	e000ed0c 	.word	0xe000ed0c
 800f2f8:	200019c0 	.word	0x200019c0

0800f2fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b08a      	sub	sp, #40	@ 0x28
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f304:	2300      	movs	r3, #0
 800f306:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f308:	f7fe fc74 	bl	800dbf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f30c:	4b5c      	ldr	r3, [pc, #368]	@ (800f480 <pvPortMalloc+0x184>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d101      	bne.n	800f318 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f314:	f000 f924 	bl	800f560 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f318:	4b5a      	ldr	r3, [pc, #360]	@ (800f484 <pvPortMalloc+0x188>)
 800f31a:	681a      	ldr	r2, [r3, #0]
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	4013      	ands	r3, r2
 800f320:	2b00      	cmp	r3, #0
 800f322:	f040 8095 	bne.w	800f450 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d01e      	beq.n	800f36a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f32c:	2208      	movs	r2, #8
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4413      	add	r3, r2
 800f332:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f003 0307 	and.w	r3, r3, #7
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d015      	beq.n	800f36a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f023 0307 	bic.w	r3, r3, #7
 800f344:	3308      	adds	r3, #8
 800f346:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f003 0307 	and.w	r3, r3, #7
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d00b      	beq.n	800f36a <pvPortMalloc+0x6e>
	__asm volatile
 800f352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f356:	f383 8811 	msr	BASEPRI, r3
 800f35a:	f3bf 8f6f 	isb	sy
 800f35e:	f3bf 8f4f 	dsb	sy
 800f362:	617b      	str	r3, [r7, #20]
}
 800f364:	bf00      	nop
 800f366:	bf00      	nop
 800f368:	e7fd      	b.n	800f366 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d06f      	beq.n	800f450 <pvPortMalloc+0x154>
 800f370:	4b45      	ldr	r3, [pc, #276]	@ (800f488 <pvPortMalloc+0x18c>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	687a      	ldr	r2, [r7, #4]
 800f376:	429a      	cmp	r2, r3
 800f378:	d86a      	bhi.n	800f450 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f37a:	4b44      	ldr	r3, [pc, #272]	@ (800f48c <pvPortMalloc+0x190>)
 800f37c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f37e:	4b43      	ldr	r3, [pc, #268]	@ (800f48c <pvPortMalloc+0x190>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f384:	e004      	b.n	800f390 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f388:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	429a      	cmp	r2, r3
 800f398:	d903      	bls.n	800f3a2 <pvPortMalloc+0xa6>
 800f39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d1f1      	bne.n	800f386 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f3a2:	4b37      	ldr	r3, [pc, #220]	@ (800f480 <pvPortMalloc+0x184>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d051      	beq.n	800f450 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f3ac:	6a3b      	ldr	r3, [r7, #32]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	2208      	movs	r2, #8
 800f3b2:	4413      	add	r3, r2
 800f3b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	6a3b      	ldr	r3, [r7, #32]
 800f3bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3c0:	685a      	ldr	r2, [r3, #4]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	1ad2      	subs	r2, r2, r3
 800f3c6:	2308      	movs	r3, #8
 800f3c8:	005b      	lsls	r3, r3, #1
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d920      	bls.n	800f410 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f3ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4413      	add	r3, r2
 800f3d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	f003 0307 	and.w	r3, r3, #7
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d00b      	beq.n	800f3f8 <pvPortMalloc+0xfc>
	__asm volatile
 800f3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3e4:	f383 8811 	msr	BASEPRI, r3
 800f3e8:	f3bf 8f6f 	isb	sy
 800f3ec:	f3bf 8f4f 	dsb	sy
 800f3f0:	613b      	str	r3, [r7, #16]
}
 800f3f2:	bf00      	nop
 800f3f4:	bf00      	nop
 800f3f6:	e7fd      	b.n	800f3f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3fa:	685a      	ldr	r2, [r3, #4]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	1ad2      	subs	r2, r2, r3
 800f400:	69bb      	ldr	r3, [r7, #24]
 800f402:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f406:	687a      	ldr	r2, [r7, #4]
 800f408:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f40a:	69b8      	ldr	r0, [r7, #24]
 800f40c:	f000 f90a 	bl	800f624 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f410:	4b1d      	ldr	r3, [pc, #116]	@ (800f488 <pvPortMalloc+0x18c>)
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	1ad3      	subs	r3, r2, r3
 800f41a:	4a1b      	ldr	r2, [pc, #108]	@ (800f488 <pvPortMalloc+0x18c>)
 800f41c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f41e:	4b1a      	ldr	r3, [pc, #104]	@ (800f488 <pvPortMalloc+0x18c>)
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	4b1b      	ldr	r3, [pc, #108]	@ (800f490 <pvPortMalloc+0x194>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	429a      	cmp	r2, r3
 800f428:	d203      	bcs.n	800f432 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f42a:	4b17      	ldr	r3, [pc, #92]	@ (800f488 <pvPortMalloc+0x18c>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	4a18      	ldr	r2, [pc, #96]	@ (800f490 <pvPortMalloc+0x194>)
 800f430:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f434:	685a      	ldr	r2, [r3, #4]
 800f436:	4b13      	ldr	r3, [pc, #76]	@ (800f484 <pvPortMalloc+0x188>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	431a      	orrs	r2, r3
 800f43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f43e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f442:	2200      	movs	r2, #0
 800f444:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f446:	4b13      	ldr	r3, [pc, #76]	@ (800f494 <pvPortMalloc+0x198>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	3301      	adds	r3, #1
 800f44c:	4a11      	ldr	r2, [pc, #68]	@ (800f494 <pvPortMalloc+0x198>)
 800f44e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f450:	f7fe fbde 	bl	800dc10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	f003 0307 	and.w	r3, r3, #7
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d00b      	beq.n	800f476 <pvPortMalloc+0x17a>
	__asm volatile
 800f45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f462:	f383 8811 	msr	BASEPRI, r3
 800f466:	f3bf 8f6f 	isb	sy
 800f46a:	f3bf 8f4f 	dsb	sy
 800f46e:	60fb      	str	r3, [r7, #12]
}
 800f470:	bf00      	nop
 800f472:	bf00      	nop
 800f474:	e7fd      	b.n	800f472 <pvPortMalloc+0x176>
	return pvReturn;
 800f476:	69fb      	ldr	r3, [r7, #28]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3728      	adds	r7, #40	@ 0x28
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	200055cc 	.word	0x200055cc
 800f484:	200055e0 	.word	0x200055e0
 800f488:	200055d0 	.word	0x200055d0
 800f48c:	200055c4 	.word	0x200055c4
 800f490:	200055d4 	.word	0x200055d4
 800f494:	200055d8 	.word	0x200055d8

0800f498 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b086      	sub	sp, #24
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d04f      	beq.n	800f54a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f4aa:	2308      	movs	r3, #8
 800f4ac:	425b      	negs	r3, r3
 800f4ae:	697a      	ldr	r2, [r7, #20]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	685a      	ldr	r2, [r3, #4]
 800f4bc:	4b25      	ldr	r3, [pc, #148]	@ (800f554 <vPortFree+0xbc>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4013      	ands	r3, r2
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d10b      	bne.n	800f4de <vPortFree+0x46>
	__asm volatile
 800f4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ca:	f383 8811 	msr	BASEPRI, r3
 800f4ce:	f3bf 8f6f 	isb	sy
 800f4d2:	f3bf 8f4f 	dsb	sy
 800f4d6:	60fb      	str	r3, [r7, #12]
}
 800f4d8:	bf00      	nop
 800f4da:	bf00      	nop
 800f4dc:	e7fd      	b.n	800f4da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d00b      	beq.n	800f4fe <vPortFree+0x66>
	__asm volatile
 800f4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ea:	f383 8811 	msr	BASEPRI, r3
 800f4ee:	f3bf 8f6f 	isb	sy
 800f4f2:	f3bf 8f4f 	dsb	sy
 800f4f6:	60bb      	str	r3, [r7, #8]
}
 800f4f8:	bf00      	nop
 800f4fa:	bf00      	nop
 800f4fc:	e7fd      	b.n	800f4fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	685a      	ldr	r2, [r3, #4]
 800f502:	4b14      	ldr	r3, [pc, #80]	@ (800f554 <vPortFree+0xbc>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	4013      	ands	r3, r2
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d01e      	beq.n	800f54a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d11a      	bne.n	800f54a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	685a      	ldr	r2, [r3, #4]
 800f518:	4b0e      	ldr	r3, [pc, #56]	@ (800f554 <vPortFree+0xbc>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	43db      	mvns	r3, r3
 800f51e:	401a      	ands	r2, r3
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f524:	f7fe fb66 	bl	800dbf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	685a      	ldr	r2, [r3, #4]
 800f52c:	4b0a      	ldr	r3, [pc, #40]	@ (800f558 <vPortFree+0xc0>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	4413      	add	r3, r2
 800f532:	4a09      	ldr	r2, [pc, #36]	@ (800f558 <vPortFree+0xc0>)
 800f534:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f536:	6938      	ldr	r0, [r7, #16]
 800f538:	f000 f874 	bl	800f624 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f53c:	4b07      	ldr	r3, [pc, #28]	@ (800f55c <vPortFree+0xc4>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	3301      	adds	r3, #1
 800f542:	4a06      	ldr	r2, [pc, #24]	@ (800f55c <vPortFree+0xc4>)
 800f544:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f546:	f7fe fb63 	bl	800dc10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f54a:	bf00      	nop
 800f54c:	3718      	adds	r7, #24
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
 800f552:	bf00      	nop
 800f554:	200055e0 	.word	0x200055e0
 800f558:	200055d0 	.word	0x200055d0
 800f55c:	200055dc 	.word	0x200055dc

0800f560 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f560:	b480      	push	{r7}
 800f562:	b085      	sub	sp, #20
 800f564:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f566:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800f56a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f56c:	4b27      	ldr	r3, [pc, #156]	@ (800f60c <prvHeapInit+0xac>)
 800f56e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f003 0307 	and.w	r3, r3, #7
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00c      	beq.n	800f594 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	3307      	adds	r3, #7
 800f57e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	f023 0307 	bic.w	r3, r3, #7
 800f586:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f588:	68ba      	ldr	r2, [r7, #8]
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	1ad3      	subs	r3, r2, r3
 800f58e:	4a1f      	ldr	r2, [pc, #124]	@ (800f60c <prvHeapInit+0xac>)
 800f590:	4413      	add	r3, r2
 800f592:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f598:	4a1d      	ldr	r2, [pc, #116]	@ (800f610 <prvHeapInit+0xb0>)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f59e:	4b1c      	ldr	r3, [pc, #112]	@ (800f610 <prvHeapInit+0xb0>)
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	68ba      	ldr	r2, [r7, #8]
 800f5a8:	4413      	add	r3, r2
 800f5aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f5ac:	2208      	movs	r2, #8
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	1a9b      	subs	r3, r3, r2
 800f5b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f023 0307 	bic.w	r3, r3, #7
 800f5ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	4a15      	ldr	r2, [pc, #84]	@ (800f614 <prvHeapInit+0xb4>)
 800f5c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f5c2:	4b14      	ldr	r3, [pc, #80]	@ (800f614 <prvHeapInit+0xb4>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f5ca:	4b12      	ldr	r3, [pc, #72]	@ (800f614 <prvHeapInit+0xb4>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	68fa      	ldr	r2, [r7, #12]
 800f5da:	1ad2      	subs	r2, r2, r3
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f5e0:	4b0c      	ldr	r3, [pc, #48]	@ (800f614 <prvHeapInit+0xb4>)
 800f5e2:	681a      	ldr	r2, [r3, #0]
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	685b      	ldr	r3, [r3, #4]
 800f5ec:	4a0a      	ldr	r2, [pc, #40]	@ (800f618 <prvHeapInit+0xb8>)
 800f5ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	4a09      	ldr	r2, [pc, #36]	@ (800f61c <prvHeapInit+0xbc>)
 800f5f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f5f8:	4b09      	ldr	r3, [pc, #36]	@ (800f620 <prvHeapInit+0xc0>)
 800f5fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800f5fe:	601a      	str	r2, [r3, #0]
}
 800f600:	bf00      	nop
 800f602:	3714      	adds	r7, #20
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr
 800f60c:	200019c4 	.word	0x200019c4
 800f610:	200055c4 	.word	0x200055c4
 800f614:	200055cc 	.word	0x200055cc
 800f618:	200055d4 	.word	0x200055d4
 800f61c:	200055d0 	.word	0x200055d0
 800f620:	200055e0 	.word	0x200055e0

0800f624 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f624:	b480      	push	{r7}
 800f626:	b085      	sub	sp, #20
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f62c:	4b28      	ldr	r3, [pc, #160]	@ (800f6d0 <prvInsertBlockIntoFreeList+0xac>)
 800f62e:	60fb      	str	r3, [r7, #12]
 800f630:	e002      	b.n	800f638 <prvInsertBlockIntoFreeList+0x14>
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	60fb      	str	r3, [r7, #12]
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d8f7      	bhi.n	800f632 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	68ba      	ldr	r2, [r7, #8]
 800f64c:	4413      	add	r3, r2
 800f64e:	687a      	ldr	r2, [r7, #4]
 800f650:	429a      	cmp	r2, r3
 800f652:	d108      	bne.n	800f666 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	685a      	ldr	r2, [r3, #4]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	441a      	add	r2, r3
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	685b      	ldr	r3, [r3, #4]
 800f66e:	68ba      	ldr	r2, [r7, #8]
 800f670:	441a      	add	r2, r3
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	429a      	cmp	r2, r3
 800f678:	d118      	bne.n	800f6ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681a      	ldr	r2, [r3, #0]
 800f67e:	4b15      	ldr	r3, [pc, #84]	@ (800f6d4 <prvInsertBlockIntoFreeList+0xb0>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	429a      	cmp	r2, r3
 800f684:	d00d      	beq.n	800f6a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	685a      	ldr	r2, [r3, #4]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	441a      	add	r2, r3
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	601a      	str	r2, [r3, #0]
 800f6a0:	e008      	b.n	800f6b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f6a2:	4b0c      	ldr	r3, [pc, #48]	@ (800f6d4 <prvInsertBlockIntoFreeList+0xb0>)
 800f6a4:	681a      	ldr	r2, [r3, #0]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	601a      	str	r2, [r3, #0]
 800f6aa:	e003      	b.n	800f6b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681a      	ldr	r2, [r3, #0]
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f6b4:	68fa      	ldr	r2, [r7, #12]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d002      	beq.n	800f6c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6c2:	bf00      	nop
 800f6c4:	3714      	adds	r7, #20
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr
 800f6ce:	bf00      	nop
 800f6d0:	200055c4 	.word	0x200055c4
 800f6d4:	200055cc 	.word	0x200055cc

0800f6d8 <__itoa>:
 800f6d8:	1e93      	subs	r3, r2, #2
 800f6da:	2b22      	cmp	r3, #34	@ 0x22
 800f6dc:	b510      	push	{r4, lr}
 800f6de:	460c      	mov	r4, r1
 800f6e0:	d904      	bls.n	800f6ec <__itoa+0x14>
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	700b      	strb	r3, [r1, #0]
 800f6e6:	461c      	mov	r4, r3
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	bd10      	pop	{r4, pc}
 800f6ec:	2a0a      	cmp	r2, #10
 800f6ee:	d109      	bne.n	800f704 <__itoa+0x2c>
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	da07      	bge.n	800f704 <__itoa+0x2c>
 800f6f4:	232d      	movs	r3, #45	@ 0x2d
 800f6f6:	700b      	strb	r3, [r1, #0]
 800f6f8:	4240      	negs	r0, r0
 800f6fa:	2101      	movs	r1, #1
 800f6fc:	4421      	add	r1, r4
 800f6fe:	f000 f8c3 	bl	800f888 <__utoa>
 800f702:	e7f1      	b.n	800f6e8 <__itoa+0x10>
 800f704:	2100      	movs	r1, #0
 800f706:	e7f9      	b.n	800f6fc <__itoa+0x24>

0800f708 <itoa>:
 800f708:	f7ff bfe6 	b.w	800f6d8 <__itoa>

0800f70c <malloc>:
 800f70c:	4b02      	ldr	r3, [pc, #8]	@ (800f718 <malloc+0xc>)
 800f70e:	4601      	mov	r1, r0
 800f710:	6818      	ldr	r0, [r3, #0]
 800f712:	f000 b82d 	b.w	800f770 <_malloc_r>
 800f716:	bf00      	nop
 800f718:	200000c4 	.word	0x200000c4

0800f71c <free>:
 800f71c:	4b02      	ldr	r3, [pc, #8]	@ (800f728 <free+0xc>)
 800f71e:	4601      	mov	r1, r0
 800f720:	6818      	ldr	r0, [r3, #0]
 800f722:	f002 b885 	b.w	8011830 <_free_r>
 800f726:	bf00      	nop
 800f728:	200000c4 	.word	0x200000c4

0800f72c <sbrk_aligned>:
 800f72c:	b570      	push	{r4, r5, r6, lr}
 800f72e:	4e0f      	ldr	r6, [pc, #60]	@ (800f76c <sbrk_aligned+0x40>)
 800f730:	460c      	mov	r4, r1
 800f732:	6831      	ldr	r1, [r6, #0]
 800f734:	4605      	mov	r5, r0
 800f736:	b911      	cbnz	r1, 800f73e <sbrk_aligned+0x12>
 800f738:	f001 f9aa 	bl	8010a90 <_sbrk_r>
 800f73c:	6030      	str	r0, [r6, #0]
 800f73e:	4621      	mov	r1, r4
 800f740:	4628      	mov	r0, r5
 800f742:	f001 f9a5 	bl	8010a90 <_sbrk_r>
 800f746:	1c43      	adds	r3, r0, #1
 800f748:	d103      	bne.n	800f752 <sbrk_aligned+0x26>
 800f74a:	f04f 34ff 	mov.w	r4, #4294967295
 800f74e:	4620      	mov	r0, r4
 800f750:	bd70      	pop	{r4, r5, r6, pc}
 800f752:	1cc4      	adds	r4, r0, #3
 800f754:	f024 0403 	bic.w	r4, r4, #3
 800f758:	42a0      	cmp	r0, r4
 800f75a:	d0f8      	beq.n	800f74e <sbrk_aligned+0x22>
 800f75c:	1a21      	subs	r1, r4, r0
 800f75e:	4628      	mov	r0, r5
 800f760:	f001 f996 	bl	8010a90 <_sbrk_r>
 800f764:	3001      	adds	r0, #1
 800f766:	d1f2      	bne.n	800f74e <sbrk_aligned+0x22>
 800f768:	e7ef      	b.n	800f74a <sbrk_aligned+0x1e>
 800f76a:	bf00      	nop
 800f76c:	200055e4 	.word	0x200055e4

0800f770 <_malloc_r>:
 800f770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f774:	1ccd      	adds	r5, r1, #3
 800f776:	f025 0503 	bic.w	r5, r5, #3
 800f77a:	3508      	adds	r5, #8
 800f77c:	2d0c      	cmp	r5, #12
 800f77e:	bf38      	it	cc
 800f780:	250c      	movcc	r5, #12
 800f782:	2d00      	cmp	r5, #0
 800f784:	4606      	mov	r6, r0
 800f786:	db01      	blt.n	800f78c <_malloc_r+0x1c>
 800f788:	42a9      	cmp	r1, r5
 800f78a:	d904      	bls.n	800f796 <_malloc_r+0x26>
 800f78c:	230c      	movs	r3, #12
 800f78e:	6033      	str	r3, [r6, #0]
 800f790:	2000      	movs	r0, #0
 800f792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f796:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f86c <_malloc_r+0xfc>
 800f79a:	f000 f869 	bl	800f870 <__malloc_lock>
 800f79e:	f8d8 3000 	ldr.w	r3, [r8]
 800f7a2:	461c      	mov	r4, r3
 800f7a4:	bb44      	cbnz	r4, 800f7f8 <_malloc_r+0x88>
 800f7a6:	4629      	mov	r1, r5
 800f7a8:	4630      	mov	r0, r6
 800f7aa:	f7ff ffbf 	bl	800f72c <sbrk_aligned>
 800f7ae:	1c43      	adds	r3, r0, #1
 800f7b0:	4604      	mov	r4, r0
 800f7b2:	d158      	bne.n	800f866 <_malloc_r+0xf6>
 800f7b4:	f8d8 4000 	ldr.w	r4, [r8]
 800f7b8:	4627      	mov	r7, r4
 800f7ba:	2f00      	cmp	r7, #0
 800f7bc:	d143      	bne.n	800f846 <_malloc_r+0xd6>
 800f7be:	2c00      	cmp	r4, #0
 800f7c0:	d04b      	beq.n	800f85a <_malloc_r+0xea>
 800f7c2:	6823      	ldr	r3, [r4, #0]
 800f7c4:	4639      	mov	r1, r7
 800f7c6:	4630      	mov	r0, r6
 800f7c8:	eb04 0903 	add.w	r9, r4, r3
 800f7cc:	f001 f960 	bl	8010a90 <_sbrk_r>
 800f7d0:	4581      	cmp	r9, r0
 800f7d2:	d142      	bne.n	800f85a <_malloc_r+0xea>
 800f7d4:	6821      	ldr	r1, [r4, #0]
 800f7d6:	1a6d      	subs	r5, r5, r1
 800f7d8:	4629      	mov	r1, r5
 800f7da:	4630      	mov	r0, r6
 800f7dc:	f7ff ffa6 	bl	800f72c <sbrk_aligned>
 800f7e0:	3001      	adds	r0, #1
 800f7e2:	d03a      	beq.n	800f85a <_malloc_r+0xea>
 800f7e4:	6823      	ldr	r3, [r4, #0]
 800f7e6:	442b      	add	r3, r5
 800f7e8:	6023      	str	r3, [r4, #0]
 800f7ea:	f8d8 3000 	ldr.w	r3, [r8]
 800f7ee:	685a      	ldr	r2, [r3, #4]
 800f7f0:	bb62      	cbnz	r2, 800f84c <_malloc_r+0xdc>
 800f7f2:	f8c8 7000 	str.w	r7, [r8]
 800f7f6:	e00f      	b.n	800f818 <_malloc_r+0xa8>
 800f7f8:	6822      	ldr	r2, [r4, #0]
 800f7fa:	1b52      	subs	r2, r2, r5
 800f7fc:	d420      	bmi.n	800f840 <_malloc_r+0xd0>
 800f7fe:	2a0b      	cmp	r2, #11
 800f800:	d917      	bls.n	800f832 <_malloc_r+0xc2>
 800f802:	1961      	adds	r1, r4, r5
 800f804:	42a3      	cmp	r3, r4
 800f806:	6025      	str	r5, [r4, #0]
 800f808:	bf18      	it	ne
 800f80a:	6059      	strne	r1, [r3, #4]
 800f80c:	6863      	ldr	r3, [r4, #4]
 800f80e:	bf08      	it	eq
 800f810:	f8c8 1000 	streq.w	r1, [r8]
 800f814:	5162      	str	r2, [r4, r5]
 800f816:	604b      	str	r3, [r1, #4]
 800f818:	4630      	mov	r0, r6
 800f81a:	f000 f82f 	bl	800f87c <__malloc_unlock>
 800f81e:	f104 000b 	add.w	r0, r4, #11
 800f822:	1d23      	adds	r3, r4, #4
 800f824:	f020 0007 	bic.w	r0, r0, #7
 800f828:	1ac2      	subs	r2, r0, r3
 800f82a:	bf1c      	itt	ne
 800f82c:	1a1b      	subne	r3, r3, r0
 800f82e:	50a3      	strne	r3, [r4, r2]
 800f830:	e7af      	b.n	800f792 <_malloc_r+0x22>
 800f832:	6862      	ldr	r2, [r4, #4]
 800f834:	42a3      	cmp	r3, r4
 800f836:	bf0c      	ite	eq
 800f838:	f8c8 2000 	streq.w	r2, [r8]
 800f83c:	605a      	strne	r2, [r3, #4]
 800f83e:	e7eb      	b.n	800f818 <_malloc_r+0xa8>
 800f840:	4623      	mov	r3, r4
 800f842:	6864      	ldr	r4, [r4, #4]
 800f844:	e7ae      	b.n	800f7a4 <_malloc_r+0x34>
 800f846:	463c      	mov	r4, r7
 800f848:	687f      	ldr	r7, [r7, #4]
 800f84a:	e7b6      	b.n	800f7ba <_malloc_r+0x4a>
 800f84c:	461a      	mov	r2, r3
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	42a3      	cmp	r3, r4
 800f852:	d1fb      	bne.n	800f84c <_malloc_r+0xdc>
 800f854:	2300      	movs	r3, #0
 800f856:	6053      	str	r3, [r2, #4]
 800f858:	e7de      	b.n	800f818 <_malloc_r+0xa8>
 800f85a:	230c      	movs	r3, #12
 800f85c:	6033      	str	r3, [r6, #0]
 800f85e:	4630      	mov	r0, r6
 800f860:	f000 f80c 	bl	800f87c <__malloc_unlock>
 800f864:	e794      	b.n	800f790 <_malloc_r+0x20>
 800f866:	6005      	str	r5, [r0, #0]
 800f868:	e7d6      	b.n	800f818 <_malloc_r+0xa8>
 800f86a:	bf00      	nop
 800f86c:	200055e8 	.word	0x200055e8

0800f870 <__malloc_lock>:
 800f870:	4801      	ldr	r0, [pc, #4]	@ (800f878 <__malloc_lock+0x8>)
 800f872:	f001 b95a 	b.w	8010b2a <__retarget_lock_acquire_recursive>
 800f876:	bf00      	nop
 800f878:	2000572c 	.word	0x2000572c

0800f87c <__malloc_unlock>:
 800f87c:	4801      	ldr	r0, [pc, #4]	@ (800f884 <__malloc_unlock+0x8>)
 800f87e:	f001 b955 	b.w	8010b2c <__retarget_lock_release_recursive>
 800f882:	bf00      	nop
 800f884:	2000572c 	.word	0x2000572c

0800f888 <__utoa>:
 800f888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f88a:	4c1f      	ldr	r4, [pc, #124]	@ (800f908 <__utoa+0x80>)
 800f88c:	b08b      	sub	sp, #44	@ 0x2c
 800f88e:	4605      	mov	r5, r0
 800f890:	460b      	mov	r3, r1
 800f892:	466e      	mov	r6, sp
 800f894:	f104 0c20 	add.w	ip, r4, #32
 800f898:	6820      	ldr	r0, [r4, #0]
 800f89a:	6861      	ldr	r1, [r4, #4]
 800f89c:	4637      	mov	r7, r6
 800f89e:	c703      	stmia	r7!, {r0, r1}
 800f8a0:	3408      	adds	r4, #8
 800f8a2:	4564      	cmp	r4, ip
 800f8a4:	463e      	mov	r6, r7
 800f8a6:	d1f7      	bne.n	800f898 <__utoa+0x10>
 800f8a8:	7921      	ldrb	r1, [r4, #4]
 800f8aa:	7139      	strb	r1, [r7, #4]
 800f8ac:	1e91      	subs	r1, r2, #2
 800f8ae:	6820      	ldr	r0, [r4, #0]
 800f8b0:	6038      	str	r0, [r7, #0]
 800f8b2:	2922      	cmp	r1, #34	@ 0x22
 800f8b4:	f04f 0100 	mov.w	r1, #0
 800f8b8:	d904      	bls.n	800f8c4 <__utoa+0x3c>
 800f8ba:	7019      	strb	r1, [r3, #0]
 800f8bc:	460b      	mov	r3, r1
 800f8be:	4618      	mov	r0, r3
 800f8c0:	b00b      	add	sp, #44	@ 0x2c
 800f8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8c4:	1e58      	subs	r0, r3, #1
 800f8c6:	4684      	mov	ip, r0
 800f8c8:	fbb5 f7f2 	udiv	r7, r5, r2
 800f8cc:	fb02 5617 	mls	r6, r2, r7, r5
 800f8d0:	3628      	adds	r6, #40	@ 0x28
 800f8d2:	446e      	add	r6, sp
 800f8d4:	460c      	mov	r4, r1
 800f8d6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f8da:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f8de:	462e      	mov	r6, r5
 800f8e0:	42b2      	cmp	r2, r6
 800f8e2:	f101 0101 	add.w	r1, r1, #1
 800f8e6:	463d      	mov	r5, r7
 800f8e8:	d9ee      	bls.n	800f8c8 <__utoa+0x40>
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	545a      	strb	r2, [r3, r1]
 800f8ee:	1919      	adds	r1, r3, r4
 800f8f0:	1aa5      	subs	r5, r4, r2
 800f8f2:	42aa      	cmp	r2, r5
 800f8f4:	dae3      	bge.n	800f8be <__utoa+0x36>
 800f8f6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f8fa:	780e      	ldrb	r6, [r1, #0]
 800f8fc:	7006      	strb	r6, [r0, #0]
 800f8fe:	3201      	adds	r2, #1
 800f900:	f801 5901 	strb.w	r5, [r1], #-1
 800f904:	e7f4      	b.n	800f8f0 <__utoa+0x68>
 800f906:	bf00      	nop
 800f908:	08015b6c 	.word	0x08015b6c

0800f90c <__cvt>:
 800f90c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f910:	ec57 6b10 	vmov	r6, r7, d0
 800f914:	2f00      	cmp	r7, #0
 800f916:	460c      	mov	r4, r1
 800f918:	4619      	mov	r1, r3
 800f91a:	463b      	mov	r3, r7
 800f91c:	bfbb      	ittet	lt
 800f91e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f922:	461f      	movlt	r7, r3
 800f924:	2300      	movge	r3, #0
 800f926:	232d      	movlt	r3, #45	@ 0x2d
 800f928:	700b      	strb	r3, [r1, #0]
 800f92a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f92c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f930:	4691      	mov	r9, r2
 800f932:	f023 0820 	bic.w	r8, r3, #32
 800f936:	bfbc      	itt	lt
 800f938:	4632      	movlt	r2, r6
 800f93a:	4616      	movlt	r6, r2
 800f93c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f940:	d005      	beq.n	800f94e <__cvt+0x42>
 800f942:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f946:	d100      	bne.n	800f94a <__cvt+0x3e>
 800f948:	3401      	adds	r4, #1
 800f94a:	2102      	movs	r1, #2
 800f94c:	e000      	b.n	800f950 <__cvt+0x44>
 800f94e:	2103      	movs	r1, #3
 800f950:	ab03      	add	r3, sp, #12
 800f952:	9301      	str	r3, [sp, #4]
 800f954:	ab02      	add	r3, sp, #8
 800f956:	9300      	str	r3, [sp, #0]
 800f958:	ec47 6b10 	vmov	d0, r6, r7
 800f95c:	4653      	mov	r3, sl
 800f95e:	4622      	mov	r2, r4
 800f960:	f001 f9a2 	bl	8010ca8 <_dtoa_r>
 800f964:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f968:	4605      	mov	r5, r0
 800f96a:	d119      	bne.n	800f9a0 <__cvt+0x94>
 800f96c:	f019 0f01 	tst.w	r9, #1
 800f970:	d00e      	beq.n	800f990 <__cvt+0x84>
 800f972:	eb00 0904 	add.w	r9, r0, r4
 800f976:	2200      	movs	r2, #0
 800f978:	2300      	movs	r3, #0
 800f97a:	4630      	mov	r0, r6
 800f97c:	4639      	mov	r1, r7
 800f97e:	f7f1 f8b3 	bl	8000ae8 <__aeabi_dcmpeq>
 800f982:	b108      	cbz	r0, 800f988 <__cvt+0x7c>
 800f984:	f8cd 900c 	str.w	r9, [sp, #12]
 800f988:	2230      	movs	r2, #48	@ 0x30
 800f98a:	9b03      	ldr	r3, [sp, #12]
 800f98c:	454b      	cmp	r3, r9
 800f98e:	d31e      	bcc.n	800f9ce <__cvt+0xc2>
 800f990:	9b03      	ldr	r3, [sp, #12]
 800f992:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f994:	1b5b      	subs	r3, r3, r5
 800f996:	4628      	mov	r0, r5
 800f998:	6013      	str	r3, [r2, #0]
 800f99a:	b004      	add	sp, #16
 800f99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f9a4:	eb00 0904 	add.w	r9, r0, r4
 800f9a8:	d1e5      	bne.n	800f976 <__cvt+0x6a>
 800f9aa:	7803      	ldrb	r3, [r0, #0]
 800f9ac:	2b30      	cmp	r3, #48	@ 0x30
 800f9ae:	d10a      	bne.n	800f9c6 <__cvt+0xba>
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	4639      	mov	r1, r7
 800f9b8:	f7f1 f896 	bl	8000ae8 <__aeabi_dcmpeq>
 800f9bc:	b918      	cbnz	r0, 800f9c6 <__cvt+0xba>
 800f9be:	f1c4 0401 	rsb	r4, r4, #1
 800f9c2:	f8ca 4000 	str.w	r4, [sl]
 800f9c6:	f8da 3000 	ldr.w	r3, [sl]
 800f9ca:	4499      	add	r9, r3
 800f9cc:	e7d3      	b.n	800f976 <__cvt+0x6a>
 800f9ce:	1c59      	adds	r1, r3, #1
 800f9d0:	9103      	str	r1, [sp, #12]
 800f9d2:	701a      	strb	r2, [r3, #0]
 800f9d4:	e7d9      	b.n	800f98a <__cvt+0x7e>

0800f9d6 <__exponent>:
 800f9d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9d8:	2900      	cmp	r1, #0
 800f9da:	bfba      	itte	lt
 800f9dc:	4249      	neglt	r1, r1
 800f9de:	232d      	movlt	r3, #45	@ 0x2d
 800f9e0:	232b      	movge	r3, #43	@ 0x2b
 800f9e2:	2909      	cmp	r1, #9
 800f9e4:	7002      	strb	r2, [r0, #0]
 800f9e6:	7043      	strb	r3, [r0, #1]
 800f9e8:	dd29      	ble.n	800fa3e <__exponent+0x68>
 800f9ea:	f10d 0307 	add.w	r3, sp, #7
 800f9ee:	461d      	mov	r5, r3
 800f9f0:	270a      	movs	r7, #10
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	fbb1 f6f7 	udiv	r6, r1, r7
 800f9f8:	fb07 1416 	mls	r4, r7, r6, r1
 800f9fc:	3430      	adds	r4, #48	@ 0x30
 800f9fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fa02:	460c      	mov	r4, r1
 800fa04:	2c63      	cmp	r4, #99	@ 0x63
 800fa06:	f103 33ff 	add.w	r3, r3, #4294967295
 800fa0a:	4631      	mov	r1, r6
 800fa0c:	dcf1      	bgt.n	800f9f2 <__exponent+0x1c>
 800fa0e:	3130      	adds	r1, #48	@ 0x30
 800fa10:	1e94      	subs	r4, r2, #2
 800fa12:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fa16:	1c41      	adds	r1, r0, #1
 800fa18:	4623      	mov	r3, r4
 800fa1a:	42ab      	cmp	r3, r5
 800fa1c:	d30a      	bcc.n	800fa34 <__exponent+0x5e>
 800fa1e:	f10d 0309 	add.w	r3, sp, #9
 800fa22:	1a9b      	subs	r3, r3, r2
 800fa24:	42ac      	cmp	r4, r5
 800fa26:	bf88      	it	hi
 800fa28:	2300      	movhi	r3, #0
 800fa2a:	3302      	adds	r3, #2
 800fa2c:	4403      	add	r3, r0
 800fa2e:	1a18      	subs	r0, r3, r0
 800fa30:	b003      	add	sp, #12
 800fa32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa34:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fa38:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fa3c:	e7ed      	b.n	800fa1a <__exponent+0x44>
 800fa3e:	2330      	movs	r3, #48	@ 0x30
 800fa40:	3130      	adds	r1, #48	@ 0x30
 800fa42:	7083      	strb	r3, [r0, #2]
 800fa44:	70c1      	strb	r1, [r0, #3]
 800fa46:	1d03      	adds	r3, r0, #4
 800fa48:	e7f1      	b.n	800fa2e <__exponent+0x58>
	...

0800fa4c <_printf_float>:
 800fa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa50:	b08d      	sub	sp, #52	@ 0x34
 800fa52:	460c      	mov	r4, r1
 800fa54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fa58:	4616      	mov	r6, r2
 800fa5a:	461f      	mov	r7, r3
 800fa5c:	4605      	mov	r5, r0
 800fa5e:	f000 ffdf 	bl	8010a20 <_localeconv_r>
 800fa62:	6803      	ldr	r3, [r0, #0]
 800fa64:	9304      	str	r3, [sp, #16]
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7f0 fc12 	bl	8000290 <strlen>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa70:	f8d8 3000 	ldr.w	r3, [r8]
 800fa74:	9005      	str	r0, [sp, #20]
 800fa76:	3307      	adds	r3, #7
 800fa78:	f023 0307 	bic.w	r3, r3, #7
 800fa7c:	f103 0208 	add.w	r2, r3, #8
 800fa80:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fa84:	f8d4 b000 	ldr.w	fp, [r4]
 800fa88:	f8c8 2000 	str.w	r2, [r8]
 800fa8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fa94:	9307      	str	r3, [sp, #28]
 800fa96:	f8cd 8018 	str.w	r8, [sp, #24]
 800fa9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fa9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800faa2:	4b9c      	ldr	r3, [pc, #624]	@ (800fd14 <_printf_float+0x2c8>)
 800faa4:	f04f 32ff 	mov.w	r2, #4294967295
 800faa8:	f7f1 f850 	bl	8000b4c <__aeabi_dcmpun>
 800faac:	bb70      	cbnz	r0, 800fb0c <_printf_float+0xc0>
 800faae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fab2:	4b98      	ldr	r3, [pc, #608]	@ (800fd14 <_printf_float+0x2c8>)
 800fab4:	f04f 32ff 	mov.w	r2, #4294967295
 800fab8:	f7f1 f82a 	bl	8000b10 <__aeabi_dcmple>
 800fabc:	bb30      	cbnz	r0, 800fb0c <_printf_float+0xc0>
 800fabe:	2200      	movs	r2, #0
 800fac0:	2300      	movs	r3, #0
 800fac2:	4640      	mov	r0, r8
 800fac4:	4649      	mov	r1, r9
 800fac6:	f7f1 f819 	bl	8000afc <__aeabi_dcmplt>
 800faca:	b110      	cbz	r0, 800fad2 <_printf_float+0x86>
 800facc:	232d      	movs	r3, #45	@ 0x2d
 800face:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fad2:	4a91      	ldr	r2, [pc, #580]	@ (800fd18 <_printf_float+0x2cc>)
 800fad4:	4b91      	ldr	r3, [pc, #580]	@ (800fd1c <_printf_float+0x2d0>)
 800fad6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fada:	bf94      	ite	ls
 800fadc:	4690      	movls	r8, r2
 800fade:	4698      	movhi	r8, r3
 800fae0:	2303      	movs	r3, #3
 800fae2:	6123      	str	r3, [r4, #16]
 800fae4:	f02b 0304 	bic.w	r3, fp, #4
 800fae8:	6023      	str	r3, [r4, #0]
 800faea:	f04f 0900 	mov.w	r9, #0
 800faee:	9700      	str	r7, [sp, #0]
 800faf0:	4633      	mov	r3, r6
 800faf2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800faf4:	4621      	mov	r1, r4
 800faf6:	4628      	mov	r0, r5
 800faf8:	f000 f9d2 	bl	800fea0 <_printf_common>
 800fafc:	3001      	adds	r0, #1
 800fafe:	f040 808d 	bne.w	800fc1c <_printf_float+0x1d0>
 800fb02:	f04f 30ff 	mov.w	r0, #4294967295
 800fb06:	b00d      	add	sp, #52	@ 0x34
 800fb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb0c:	4642      	mov	r2, r8
 800fb0e:	464b      	mov	r3, r9
 800fb10:	4640      	mov	r0, r8
 800fb12:	4649      	mov	r1, r9
 800fb14:	f7f1 f81a 	bl	8000b4c <__aeabi_dcmpun>
 800fb18:	b140      	cbz	r0, 800fb2c <_printf_float+0xe0>
 800fb1a:	464b      	mov	r3, r9
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	bfbc      	itt	lt
 800fb20:	232d      	movlt	r3, #45	@ 0x2d
 800fb22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fb26:	4a7e      	ldr	r2, [pc, #504]	@ (800fd20 <_printf_float+0x2d4>)
 800fb28:	4b7e      	ldr	r3, [pc, #504]	@ (800fd24 <_printf_float+0x2d8>)
 800fb2a:	e7d4      	b.n	800fad6 <_printf_float+0x8a>
 800fb2c:	6863      	ldr	r3, [r4, #4]
 800fb2e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fb32:	9206      	str	r2, [sp, #24]
 800fb34:	1c5a      	adds	r2, r3, #1
 800fb36:	d13b      	bne.n	800fbb0 <_printf_float+0x164>
 800fb38:	2306      	movs	r3, #6
 800fb3a:	6063      	str	r3, [r4, #4]
 800fb3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fb40:	2300      	movs	r3, #0
 800fb42:	6022      	str	r2, [r4, #0]
 800fb44:	9303      	str	r3, [sp, #12]
 800fb46:	ab0a      	add	r3, sp, #40	@ 0x28
 800fb48:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fb4c:	ab09      	add	r3, sp, #36	@ 0x24
 800fb4e:	9300      	str	r3, [sp, #0]
 800fb50:	6861      	ldr	r1, [r4, #4]
 800fb52:	ec49 8b10 	vmov	d0, r8, r9
 800fb56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fb5a:	4628      	mov	r0, r5
 800fb5c:	f7ff fed6 	bl	800f90c <__cvt>
 800fb60:	9b06      	ldr	r3, [sp, #24]
 800fb62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fb64:	2b47      	cmp	r3, #71	@ 0x47
 800fb66:	4680      	mov	r8, r0
 800fb68:	d129      	bne.n	800fbbe <_printf_float+0x172>
 800fb6a:	1cc8      	adds	r0, r1, #3
 800fb6c:	db02      	blt.n	800fb74 <_printf_float+0x128>
 800fb6e:	6863      	ldr	r3, [r4, #4]
 800fb70:	4299      	cmp	r1, r3
 800fb72:	dd41      	ble.n	800fbf8 <_printf_float+0x1ac>
 800fb74:	f1aa 0a02 	sub.w	sl, sl, #2
 800fb78:	fa5f fa8a 	uxtb.w	sl, sl
 800fb7c:	3901      	subs	r1, #1
 800fb7e:	4652      	mov	r2, sl
 800fb80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fb84:	9109      	str	r1, [sp, #36]	@ 0x24
 800fb86:	f7ff ff26 	bl	800f9d6 <__exponent>
 800fb8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb8c:	1813      	adds	r3, r2, r0
 800fb8e:	2a01      	cmp	r2, #1
 800fb90:	4681      	mov	r9, r0
 800fb92:	6123      	str	r3, [r4, #16]
 800fb94:	dc02      	bgt.n	800fb9c <_printf_float+0x150>
 800fb96:	6822      	ldr	r2, [r4, #0]
 800fb98:	07d2      	lsls	r2, r2, #31
 800fb9a:	d501      	bpl.n	800fba0 <_printf_float+0x154>
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	6123      	str	r3, [r4, #16]
 800fba0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d0a2      	beq.n	800faee <_printf_float+0xa2>
 800fba8:	232d      	movs	r3, #45	@ 0x2d
 800fbaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fbae:	e79e      	b.n	800faee <_printf_float+0xa2>
 800fbb0:	9a06      	ldr	r2, [sp, #24]
 800fbb2:	2a47      	cmp	r2, #71	@ 0x47
 800fbb4:	d1c2      	bne.n	800fb3c <_printf_float+0xf0>
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d1c0      	bne.n	800fb3c <_printf_float+0xf0>
 800fbba:	2301      	movs	r3, #1
 800fbbc:	e7bd      	b.n	800fb3a <_printf_float+0xee>
 800fbbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fbc2:	d9db      	bls.n	800fb7c <_printf_float+0x130>
 800fbc4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fbc8:	d118      	bne.n	800fbfc <_printf_float+0x1b0>
 800fbca:	2900      	cmp	r1, #0
 800fbcc:	6863      	ldr	r3, [r4, #4]
 800fbce:	dd0b      	ble.n	800fbe8 <_printf_float+0x19c>
 800fbd0:	6121      	str	r1, [r4, #16]
 800fbd2:	b913      	cbnz	r3, 800fbda <_printf_float+0x18e>
 800fbd4:	6822      	ldr	r2, [r4, #0]
 800fbd6:	07d0      	lsls	r0, r2, #31
 800fbd8:	d502      	bpl.n	800fbe0 <_printf_float+0x194>
 800fbda:	3301      	adds	r3, #1
 800fbdc:	440b      	add	r3, r1
 800fbde:	6123      	str	r3, [r4, #16]
 800fbe0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fbe2:	f04f 0900 	mov.w	r9, #0
 800fbe6:	e7db      	b.n	800fba0 <_printf_float+0x154>
 800fbe8:	b913      	cbnz	r3, 800fbf0 <_printf_float+0x1a4>
 800fbea:	6822      	ldr	r2, [r4, #0]
 800fbec:	07d2      	lsls	r2, r2, #31
 800fbee:	d501      	bpl.n	800fbf4 <_printf_float+0x1a8>
 800fbf0:	3302      	adds	r3, #2
 800fbf2:	e7f4      	b.n	800fbde <_printf_float+0x192>
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	e7f2      	b.n	800fbde <_printf_float+0x192>
 800fbf8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fbfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbfe:	4299      	cmp	r1, r3
 800fc00:	db05      	blt.n	800fc0e <_printf_float+0x1c2>
 800fc02:	6823      	ldr	r3, [r4, #0]
 800fc04:	6121      	str	r1, [r4, #16]
 800fc06:	07d8      	lsls	r0, r3, #31
 800fc08:	d5ea      	bpl.n	800fbe0 <_printf_float+0x194>
 800fc0a:	1c4b      	adds	r3, r1, #1
 800fc0c:	e7e7      	b.n	800fbde <_printf_float+0x192>
 800fc0e:	2900      	cmp	r1, #0
 800fc10:	bfd4      	ite	le
 800fc12:	f1c1 0202 	rsble	r2, r1, #2
 800fc16:	2201      	movgt	r2, #1
 800fc18:	4413      	add	r3, r2
 800fc1a:	e7e0      	b.n	800fbde <_printf_float+0x192>
 800fc1c:	6823      	ldr	r3, [r4, #0]
 800fc1e:	055a      	lsls	r2, r3, #21
 800fc20:	d407      	bmi.n	800fc32 <_printf_float+0x1e6>
 800fc22:	6923      	ldr	r3, [r4, #16]
 800fc24:	4642      	mov	r2, r8
 800fc26:	4631      	mov	r1, r6
 800fc28:	4628      	mov	r0, r5
 800fc2a:	47b8      	blx	r7
 800fc2c:	3001      	adds	r0, #1
 800fc2e:	d12b      	bne.n	800fc88 <_printf_float+0x23c>
 800fc30:	e767      	b.n	800fb02 <_printf_float+0xb6>
 800fc32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fc36:	f240 80dd 	bls.w	800fdf4 <_printf_float+0x3a8>
 800fc3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fc3e:	2200      	movs	r2, #0
 800fc40:	2300      	movs	r3, #0
 800fc42:	f7f0 ff51 	bl	8000ae8 <__aeabi_dcmpeq>
 800fc46:	2800      	cmp	r0, #0
 800fc48:	d033      	beq.n	800fcb2 <_printf_float+0x266>
 800fc4a:	4a37      	ldr	r2, [pc, #220]	@ (800fd28 <_printf_float+0x2dc>)
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	4631      	mov	r1, r6
 800fc50:	4628      	mov	r0, r5
 800fc52:	47b8      	blx	r7
 800fc54:	3001      	adds	r0, #1
 800fc56:	f43f af54 	beq.w	800fb02 <_printf_float+0xb6>
 800fc5a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fc5e:	4543      	cmp	r3, r8
 800fc60:	db02      	blt.n	800fc68 <_printf_float+0x21c>
 800fc62:	6823      	ldr	r3, [r4, #0]
 800fc64:	07d8      	lsls	r0, r3, #31
 800fc66:	d50f      	bpl.n	800fc88 <_printf_float+0x23c>
 800fc68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc6c:	4631      	mov	r1, r6
 800fc6e:	4628      	mov	r0, r5
 800fc70:	47b8      	blx	r7
 800fc72:	3001      	adds	r0, #1
 800fc74:	f43f af45 	beq.w	800fb02 <_printf_float+0xb6>
 800fc78:	f04f 0900 	mov.w	r9, #0
 800fc7c:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc80:	f104 0a1a 	add.w	sl, r4, #26
 800fc84:	45c8      	cmp	r8, r9
 800fc86:	dc09      	bgt.n	800fc9c <_printf_float+0x250>
 800fc88:	6823      	ldr	r3, [r4, #0]
 800fc8a:	079b      	lsls	r3, r3, #30
 800fc8c:	f100 8103 	bmi.w	800fe96 <_printf_float+0x44a>
 800fc90:	68e0      	ldr	r0, [r4, #12]
 800fc92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc94:	4298      	cmp	r0, r3
 800fc96:	bfb8      	it	lt
 800fc98:	4618      	movlt	r0, r3
 800fc9a:	e734      	b.n	800fb06 <_printf_float+0xba>
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	4652      	mov	r2, sl
 800fca0:	4631      	mov	r1, r6
 800fca2:	4628      	mov	r0, r5
 800fca4:	47b8      	blx	r7
 800fca6:	3001      	adds	r0, #1
 800fca8:	f43f af2b 	beq.w	800fb02 <_printf_float+0xb6>
 800fcac:	f109 0901 	add.w	r9, r9, #1
 800fcb0:	e7e8      	b.n	800fc84 <_printf_float+0x238>
 800fcb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	dc39      	bgt.n	800fd2c <_printf_float+0x2e0>
 800fcb8:	4a1b      	ldr	r2, [pc, #108]	@ (800fd28 <_printf_float+0x2dc>)
 800fcba:	2301      	movs	r3, #1
 800fcbc:	4631      	mov	r1, r6
 800fcbe:	4628      	mov	r0, r5
 800fcc0:	47b8      	blx	r7
 800fcc2:	3001      	adds	r0, #1
 800fcc4:	f43f af1d 	beq.w	800fb02 <_printf_float+0xb6>
 800fcc8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fccc:	ea59 0303 	orrs.w	r3, r9, r3
 800fcd0:	d102      	bne.n	800fcd8 <_printf_float+0x28c>
 800fcd2:	6823      	ldr	r3, [r4, #0]
 800fcd4:	07d9      	lsls	r1, r3, #31
 800fcd6:	d5d7      	bpl.n	800fc88 <_printf_float+0x23c>
 800fcd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fcdc:	4631      	mov	r1, r6
 800fcde:	4628      	mov	r0, r5
 800fce0:	47b8      	blx	r7
 800fce2:	3001      	adds	r0, #1
 800fce4:	f43f af0d 	beq.w	800fb02 <_printf_float+0xb6>
 800fce8:	f04f 0a00 	mov.w	sl, #0
 800fcec:	f104 0b1a 	add.w	fp, r4, #26
 800fcf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcf2:	425b      	negs	r3, r3
 800fcf4:	4553      	cmp	r3, sl
 800fcf6:	dc01      	bgt.n	800fcfc <_printf_float+0x2b0>
 800fcf8:	464b      	mov	r3, r9
 800fcfa:	e793      	b.n	800fc24 <_printf_float+0x1d8>
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	465a      	mov	r2, fp
 800fd00:	4631      	mov	r1, r6
 800fd02:	4628      	mov	r0, r5
 800fd04:	47b8      	blx	r7
 800fd06:	3001      	adds	r0, #1
 800fd08:	f43f aefb 	beq.w	800fb02 <_printf_float+0xb6>
 800fd0c:	f10a 0a01 	add.w	sl, sl, #1
 800fd10:	e7ee      	b.n	800fcf0 <_printf_float+0x2a4>
 800fd12:	bf00      	nop
 800fd14:	7fefffff 	.word	0x7fefffff
 800fd18:	08015b91 	.word	0x08015b91
 800fd1c:	08015b95 	.word	0x08015b95
 800fd20:	08015b99 	.word	0x08015b99
 800fd24:	08015b9d 	.word	0x08015b9d
 800fd28:	08015fc0 	.word	0x08015fc0
 800fd2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fd2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fd32:	4553      	cmp	r3, sl
 800fd34:	bfa8      	it	ge
 800fd36:	4653      	movge	r3, sl
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	4699      	mov	r9, r3
 800fd3c:	dc36      	bgt.n	800fdac <_printf_float+0x360>
 800fd3e:	f04f 0b00 	mov.w	fp, #0
 800fd42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd46:	f104 021a 	add.w	r2, r4, #26
 800fd4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fd4c:	9306      	str	r3, [sp, #24]
 800fd4e:	eba3 0309 	sub.w	r3, r3, r9
 800fd52:	455b      	cmp	r3, fp
 800fd54:	dc31      	bgt.n	800fdba <_printf_float+0x36e>
 800fd56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd58:	459a      	cmp	sl, r3
 800fd5a:	dc3a      	bgt.n	800fdd2 <_printf_float+0x386>
 800fd5c:	6823      	ldr	r3, [r4, #0]
 800fd5e:	07da      	lsls	r2, r3, #31
 800fd60:	d437      	bmi.n	800fdd2 <_printf_float+0x386>
 800fd62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd64:	ebaa 0903 	sub.w	r9, sl, r3
 800fd68:	9b06      	ldr	r3, [sp, #24]
 800fd6a:	ebaa 0303 	sub.w	r3, sl, r3
 800fd6e:	4599      	cmp	r9, r3
 800fd70:	bfa8      	it	ge
 800fd72:	4699      	movge	r9, r3
 800fd74:	f1b9 0f00 	cmp.w	r9, #0
 800fd78:	dc33      	bgt.n	800fde2 <_printf_float+0x396>
 800fd7a:	f04f 0800 	mov.w	r8, #0
 800fd7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fd82:	f104 0b1a 	add.w	fp, r4, #26
 800fd86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd88:	ebaa 0303 	sub.w	r3, sl, r3
 800fd8c:	eba3 0309 	sub.w	r3, r3, r9
 800fd90:	4543      	cmp	r3, r8
 800fd92:	f77f af79 	ble.w	800fc88 <_printf_float+0x23c>
 800fd96:	2301      	movs	r3, #1
 800fd98:	465a      	mov	r2, fp
 800fd9a:	4631      	mov	r1, r6
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	47b8      	blx	r7
 800fda0:	3001      	adds	r0, #1
 800fda2:	f43f aeae 	beq.w	800fb02 <_printf_float+0xb6>
 800fda6:	f108 0801 	add.w	r8, r8, #1
 800fdaa:	e7ec      	b.n	800fd86 <_printf_float+0x33a>
 800fdac:	4642      	mov	r2, r8
 800fdae:	4631      	mov	r1, r6
 800fdb0:	4628      	mov	r0, r5
 800fdb2:	47b8      	blx	r7
 800fdb4:	3001      	adds	r0, #1
 800fdb6:	d1c2      	bne.n	800fd3e <_printf_float+0x2f2>
 800fdb8:	e6a3      	b.n	800fb02 <_printf_float+0xb6>
 800fdba:	2301      	movs	r3, #1
 800fdbc:	4631      	mov	r1, r6
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	9206      	str	r2, [sp, #24]
 800fdc2:	47b8      	blx	r7
 800fdc4:	3001      	adds	r0, #1
 800fdc6:	f43f ae9c 	beq.w	800fb02 <_printf_float+0xb6>
 800fdca:	9a06      	ldr	r2, [sp, #24]
 800fdcc:	f10b 0b01 	add.w	fp, fp, #1
 800fdd0:	e7bb      	b.n	800fd4a <_printf_float+0x2fe>
 800fdd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fdd6:	4631      	mov	r1, r6
 800fdd8:	4628      	mov	r0, r5
 800fdda:	47b8      	blx	r7
 800fddc:	3001      	adds	r0, #1
 800fdde:	d1c0      	bne.n	800fd62 <_printf_float+0x316>
 800fde0:	e68f      	b.n	800fb02 <_printf_float+0xb6>
 800fde2:	9a06      	ldr	r2, [sp, #24]
 800fde4:	464b      	mov	r3, r9
 800fde6:	4442      	add	r2, r8
 800fde8:	4631      	mov	r1, r6
 800fdea:	4628      	mov	r0, r5
 800fdec:	47b8      	blx	r7
 800fdee:	3001      	adds	r0, #1
 800fdf0:	d1c3      	bne.n	800fd7a <_printf_float+0x32e>
 800fdf2:	e686      	b.n	800fb02 <_printf_float+0xb6>
 800fdf4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fdf8:	f1ba 0f01 	cmp.w	sl, #1
 800fdfc:	dc01      	bgt.n	800fe02 <_printf_float+0x3b6>
 800fdfe:	07db      	lsls	r3, r3, #31
 800fe00:	d536      	bpl.n	800fe70 <_printf_float+0x424>
 800fe02:	2301      	movs	r3, #1
 800fe04:	4642      	mov	r2, r8
 800fe06:	4631      	mov	r1, r6
 800fe08:	4628      	mov	r0, r5
 800fe0a:	47b8      	blx	r7
 800fe0c:	3001      	adds	r0, #1
 800fe0e:	f43f ae78 	beq.w	800fb02 <_printf_float+0xb6>
 800fe12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe16:	4631      	mov	r1, r6
 800fe18:	4628      	mov	r0, r5
 800fe1a:	47b8      	blx	r7
 800fe1c:	3001      	adds	r0, #1
 800fe1e:	f43f ae70 	beq.w	800fb02 <_printf_float+0xb6>
 800fe22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fe26:	2200      	movs	r2, #0
 800fe28:	2300      	movs	r3, #0
 800fe2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe2e:	f7f0 fe5b 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe32:	b9c0      	cbnz	r0, 800fe66 <_printf_float+0x41a>
 800fe34:	4653      	mov	r3, sl
 800fe36:	f108 0201 	add.w	r2, r8, #1
 800fe3a:	4631      	mov	r1, r6
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	47b8      	blx	r7
 800fe40:	3001      	adds	r0, #1
 800fe42:	d10c      	bne.n	800fe5e <_printf_float+0x412>
 800fe44:	e65d      	b.n	800fb02 <_printf_float+0xb6>
 800fe46:	2301      	movs	r3, #1
 800fe48:	465a      	mov	r2, fp
 800fe4a:	4631      	mov	r1, r6
 800fe4c:	4628      	mov	r0, r5
 800fe4e:	47b8      	blx	r7
 800fe50:	3001      	adds	r0, #1
 800fe52:	f43f ae56 	beq.w	800fb02 <_printf_float+0xb6>
 800fe56:	f108 0801 	add.w	r8, r8, #1
 800fe5a:	45d0      	cmp	r8, sl
 800fe5c:	dbf3      	blt.n	800fe46 <_printf_float+0x3fa>
 800fe5e:	464b      	mov	r3, r9
 800fe60:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fe64:	e6df      	b.n	800fc26 <_printf_float+0x1da>
 800fe66:	f04f 0800 	mov.w	r8, #0
 800fe6a:	f104 0b1a 	add.w	fp, r4, #26
 800fe6e:	e7f4      	b.n	800fe5a <_printf_float+0x40e>
 800fe70:	2301      	movs	r3, #1
 800fe72:	4642      	mov	r2, r8
 800fe74:	e7e1      	b.n	800fe3a <_printf_float+0x3ee>
 800fe76:	2301      	movs	r3, #1
 800fe78:	464a      	mov	r2, r9
 800fe7a:	4631      	mov	r1, r6
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	47b8      	blx	r7
 800fe80:	3001      	adds	r0, #1
 800fe82:	f43f ae3e 	beq.w	800fb02 <_printf_float+0xb6>
 800fe86:	f108 0801 	add.w	r8, r8, #1
 800fe8a:	68e3      	ldr	r3, [r4, #12]
 800fe8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fe8e:	1a5b      	subs	r3, r3, r1
 800fe90:	4543      	cmp	r3, r8
 800fe92:	dcf0      	bgt.n	800fe76 <_printf_float+0x42a>
 800fe94:	e6fc      	b.n	800fc90 <_printf_float+0x244>
 800fe96:	f04f 0800 	mov.w	r8, #0
 800fe9a:	f104 0919 	add.w	r9, r4, #25
 800fe9e:	e7f4      	b.n	800fe8a <_printf_float+0x43e>

0800fea0 <_printf_common>:
 800fea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fea4:	4616      	mov	r6, r2
 800fea6:	4698      	mov	r8, r3
 800fea8:	688a      	ldr	r2, [r1, #8]
 800feaa:	690b      	ldr	r3, [r1, #16]
 800feac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800feb0:	4293      	cmp	r3, r2
 800feb2:	bfb8      	it	lt
 800feb4:	4613      	movlt	r3, r2
 800feb6:	6033      	str	r3, [r6, #0]
 800feb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800febc:	4607      	mov	r7, r0
 800febe:	460c      	mov	r4, r1
 800fec0:	b10a      	cbz	r2, 800fec6 <_printf_common+0x26>
 800fec2:	3301      	adds	r3, #1
 800fec4:	6033      	str	r3, [r6, #0]
 800fec6:	6823      	ldr	r3, [r4, #0]
 800fec8:	0699      	lsls	r1, r3, #26
 800feca:	bf42      	ittt	mi
 800fecc:	6833      	ldrmi	r3, [r6, #0]
 800fece:	3302      	addmi	r3, #2
 800fed0:	6033      	strmi	r3, [r6, #0]
 800fed2:	6825      	ldr	r5, [r4, #0]
 800fed4:	f015 0506 	ands.w	r5, r5, #6
 800fed8:	d106      	bne.n	800fee8 <_printf_common+0x48>
 800feda:	f104 0a19 	add.w	sl, r4, #25
 800fede:	68e3      	ldr	r3, [r4, #12]
 800fee0:	6832      	ldr	r2, [r6, #0]
 800fee2:	1a9b      	subs	r3, r3, r2
 800fee4:	42ab      	cmp	r3, r5
 800fee6:	dc26      	bgt.n	800ff36 <_printf_common+0x96>
 800fee8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800feec:	6822      	ldr	r2, [r4, #0]
 800feee:	3b00      	subs	r3, #0
 800fef0:	bf18      	it	ne
 800fef2:	2301      	movne	r3, #1
 800fef4:	0692      	lsls	r2, r2, #26
 800fef6:	d42b      	bmi.n	800ff50 <_printf_common+0xb0>
 800fef8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fefc:	4641      	mov	r1, r8
 800fefe:	4638      	mov	r0, r7
 800ff00:	47c8      	blx	r9
 800ff02:	3001      	adds	r0, #1
 800ff04:	d01e      	beq.n	800ff44 <_printf_common+0xa4>
 800ff06:	6823      	ldr	r3, [r4, #0]
 800ff08:	6922      	ldr	r2, [r4, #16]
 800ff0a:	f003 0306 	and.w	r3, r3, #6
 800ff0e:	2b04      	cmp	r3, #4
 800ff10:	bf02      	ittt	eq
 800ff12:	68e5      	ldreq	r5, [r4, #12]
 800ff14:	6833      	ldreq	r3, [r6, #0]
 800ff16:	1aed      	subeq	r5, r5, r3
 800ff18:	68a3      	ldr	r3, [r4, #8]
 800ff1a:	bf0c      	ite	eq
 800ff1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff20:	2500      	movne	r5, #0
 800ff22:	4293      	cmp	r3, r2
 800ff24:	bfc4      	itt	gt
 800ff26:	1a9b      	subgt	r3, r3, r2
 800ff28:	18ed      	addgt	r5, r5, r3
 800ff2a:	2600      	movs	r6, #0
 800ff2c:	341a      	adds	r4, #26
 800ff2e:	42b5      	cmp	r5, r6
 800ff30:	d11a      	bne.n	800ff68 <_printf_common+0xc8>
 800ff32:	2000      	movs	r0, #0
 800ff34:	e008      	b.n	800ff48 <_printf_common+0xa8>
 800ff36:	2301      	movs	r3, #1
 800ff38:	4652      	mov	r2, sl
 800ff3a:	4641      	mov	r1, r8
 800ff3c:	4638      	mov	r0, r7
 800ff3e:	47c8      	blx	r9
 800ff40:	3001      	adds	r0, #1
 800ff42:	d103      	bne.n	800ff4c <_printf_common+0xac>
 800ff44:	f04f 30ff 	mov.w	r0, #4294967295
 800ff48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff4c:	3501      	adds	r5, #1
 800ff4e:	e7c6      	b.n	800fede <_printf_common+0x3e>
 800ff50:	18e1      	adds	r1, r4, r3
 800ff52:	1c5a      	adds	r2, r3, #1
 800ff54:	2030      	movs	r0, #48	@ 0x30
 800ff56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ff5a:	4422      	add	r2, r4
 800ff5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ff60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ff64:	3302      	adds	r3, #2
 800ff66:	e7c7      	b.n	800fef8 <_printf_common+0x58>
 800ff68:	2301      	movs	r3, #1
 800ff6a:	4622      	mov	r2, r4
 800ff6c:	4641      	mov	r1, r8
 800ff6e:	4638      	mov	r0, r7
 800ff70:	47c8      	blx	r9
 800ff72:	3001      	adds	r0, #1
 800ff74:	d0e6      	beq.n	800ff44 <_printf_common+0xa4>
 800ff76:	3601      	adds	r6, #1
 800ff78:	e7d9      	b.n	800ff2e <_printf_common+0x8e>
	...

0800ff7c <_printf_i>:
 800ff7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff80:	7e0f      	ldrb	r7, [r1, #24]
 800ff82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ff84:	2f78      	cmp	r7, #120	@ 0x78
 800ff86:	4691      	mov	r9, r2
 800ff88:	4680      	mov	r8, r0
 800ff8a:	460c      	mov	r4, r1
 800ff8c:	469a      	mov	sl, r3
 800ff8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ff92:	d807      	bhi.n	800ffa4 <_printf_i+0x28>
 800ff94:	2f62      	cmp	r7, #98	@ 0x62
 800ff96:	d80a      	bhi.n	800ffae <_printf_i+0x32>
 800ff98:	2f00      	cmp	r7, #0
 800ff9a:	f000 80d2 	beq.w	8010142 <_printf_i+0x1c6>
 800ff9e:	2f58      	cmp	r7, #88	@ 0x58
 800ffa0:	f000 80b9 	beq.w	8010116 <_printf_i+0x19a>
 800ffa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ffa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ffac:	e03a      	b.n	8010024 <_printf_i+0xa8>
 800ffae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ffb2:	2b15      	cmp	r3, #21
 800ffb4:	d8f6      	bhi.n	800ffa4 <_printf_i+0x28>
 800ffb6:	a101      	add	r1, pc, #4	@ (adr r1, 800ffbc <_printf_i+0x40>)
 800ffb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffbc:	08010015 	.word	0x08010015
 800ffc0:	08010029 	.word	0x08010029
 800ffc4:	0800ffa5 	.word	0x0800ffa5
 800ffc8:	0800ffa5 	.word	0x0800ffa5
 800ffcc:	0800ffa5 	.word	0x0800ffa5
 800ffd0:	0800ffa5 	.word	0x0800ffa5
 800ffd4:	08010029 	.word	0x08010029
 800ffd8:	0800ffa5 	.word	0x0800ffa5
 800ffdc:	0800ffa5 	.word	0x0800ffa5
 800ffe0:	0800ffa5 	.word	0x0800ffa5
 800ffe4:	0800ffa5 	.word	0x0800ffa5
 800ffe8:	08010129 	.word	0x08010129
 800ffec:	08010053 	.word	0x08010053
 800fff0:	080100e3 	.word	0x080100e3
 800fff4:	0800ffa5 	.word	0x0800ffa5
 800fff8:	0800ffa5 	.word	0x0800ffa5
 800fffc:	0801014b 	.word	0x0801014b
 8010000:	0800ffa5 	.word	0x0800ffa5
 8010004:	08010053 	.word	0x08010053
 8010008:	0800ffa5 	.word	0x0800ffa5
 801000c:	0800ffa5 	.word	0x0800ffa5
 8010010:	080100eb 	.word	0x080100eb
 8010014:	6833      	ldr	r3, [r6, #0]
 8010016:	1d1a      	adds	r2, r3, #4
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	6032      	str	r2, [r6, #0]
 801001c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010020:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010024:	2301      	movs	r3, #1
 8010026:	e09d      	b.n	8010164 <_printf_i+0x1e8>
 8010028:	6833      	ldr	r3, [r6, #0]
 801002a:	6820      	ldr	r0, [r4, #0]
 801002c:	1d19      	adds	r1, r3, #4
 801002e:	6031      	str	r1, [r6, #0]
 8010030:	0606      	lsls	r6, r0, #24
 8010032:	d501      	bpl.n	8010038 <_printf_i+0xbc>
 8010034:	681d      	ldr	r5, [r3, #0]
 8010036:	e003      	b.n	8010040 <_printf_i+0xc4>
 8010038:	0645      	lsls	r5, r0, #25
 801003a:	d5fb      	bpl.n	8010034 <_printf_i+0xb8>
 801003c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010040:	2d00      	cmp	r5, #0
 8010042:	da03      	bge.n	801004c <_printf_i+0xd0>
 8010044:	232d      	movs	r3, #45	@ 0x2d
 8010046:	426d      	negs	r5, r5
 8010048:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801004c:	4859      	ldr	r0, [pc, #356]	@ (80101b4 <_printf_i+0x238>)
 801004e:	230a      	movs	r3, #10
 8010050:	e011      	b.n	8010076 <_printf_i+0xfa>
 8010052:	6821      	ldr	r1, [r4, #0]
 8010054:	6833      	ldr	r3, [r6, #0]
 8010056:	0608      	lsls	r0, r1, #24
 8010058:	f853 5b04 	ldr.w	r5, [r3], #4
 801005c:	d402      	bmi.n	8010064 <_printf_i+0xe8>
 801005e:	0649      	lsls	r1, r1, #25
 8010060:	bf48      	it	mi
 8010062:	b2ad      	uxthmi	r5, r5
 8010064:	2f6f      	cmp	r7, #111	@ 0x6f
 8010066:	4853      	ldr	r0, [pc, #332]	@ (80101b4 <_printf_i+0x238>)
 8010068:	6033      	str	r3, [r6, #0]
 801006a:	bf14      	ite	ne
 801006c:	230a      	movne	r3, #10
 801006e:	2308      	moveq	r3, #8
 8010070:	2100      	movs	r1, #0
 8010072:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010076:	6866      	ldr	r6, [r4, #4]
 8010078:	60a6      	str	r6, [r4, #8]
 801007a:	2e00      	cmp	r6, #0
 801007c:	bfa2      	ittt	ge
 801007e:	6821      	ldrge	r1, [r4, #0]
 8010080:	f021 0104 	bicge.w	r1, r1, #4
 8010084:	6021      	strge	r1, [r4, #0]
 8010086:	b90d      	cbnz	r5, 801008c <_printf_i+0x110>
 8010088:	2e00      	cmp	r6, #0
 801008a:	d04b      	beq.n	8010124 <_printf_i+0x1a8>
 801008c:	4616      	mov	r6, r2
 801008e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010092:	fb03 5711 	mls	r7, r3, r1, r5
 8010096:	5dc7      	ldrb	r7, [r0, r7]
 8010098:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801009c:	462f      	mov	r7, r5
 801009e:	42bb      	cmp	r3, r7
 80100a0:	460d      	mov	r5, r1
 80100a2:	d9f4      	bls.n	801008e <_printf_i+0x112>
 80100a4:	2b08      	cmp	r3, #8
 80100a6:	d10b      	bne.n	80100c0 <_printf_i+0x144>
 80100a8:	6823      	ldr	r3, [r4, #0]
 80100aa:	07df      	lsls	r7, r3, #31
 80100ac:	d508      	bpl.n	80100c0 <_printf_i+0x144>
 80100ae:	6923      	ldr	r3, [r4, #16]
 80100b0:	6861      	ldr	r1, [r4, #4]
 80100b2:	4299      	cmp	r1, r3
 80100b4:	bfde      	ittt	le
 80100b6:	2330      	movle	r3, #48	@ 0x30
 80100b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80100bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80100c0:	1b92      	subs	r2, r2, r6
 80100c2:	6122      	str	r2, [r4, #16]
 80100c4:	f8cd a000 	str.w	sl, [sp]
 80100c8:	464b      	mov	r3, r9
 80100ca:	aa03      	add	r2, sp, #12
 80100cc:	4621      	mov	r1, r4
 80100ce:	4640      	mov	r0, r8
 80100d0:	f7ff fee6 	bl	800fea0 <_printf_common>
 80100d4:	3001      	adds	r0, #1
 80100d6:	d14a      	bne.n	801016e <_printf_i+0x1f2>
 80100d8:	f04f 30ff 	mov.w	r0, #4294967295
 80100dc:	b004      	add	sp, #16
 80100de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100e2:	6823      	ldr	r3, [r4, #0]
 80100e4:	f043 0320 	orr.w	r3, r3, #32
 80100e8:	6023      	str	r3, [r4, #0]
 80100ea:	4833      	ldr	r0, [pc, #204]	@ (80101b8 <_printf_i+0x23c>)
 80100ec:	2778      	movs	r7, #120	@ 0x78
 80100ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	6831      	ldr	r1, [r6, #0]
 80100f6:	061f      	lsls	r7, r3, #24
 80100f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80100fc:	d402      	bmi.n	8010104 <_printf_i+0x188>
 80100fe:	065f      	lsls	r7, r3, #25
 8010100:	bf48      	it	mi
 8010102:	b2ad      	uxthmi	r5, r5
 8010104:	6031      	str	r1, [r6, #0]
 8010106:	07d9      	lsls	r1, r3, #31
 8010108:	bf44      	itt	mi
 801010a:	f043 0320 	orrmi.w	r3, r3, #32
 801010e:	6023      	strmi	r3, [r4, #0]
 8010110:	b11d      	cbz	r5, 801011a <_printf_i+0x19e>
 8010112:	2310      	movs	r3, #16
 8010114:	e7ac      	b.n	8010070 <_printf_i+0xf4>
 8010116:	4827      	ldr	r0, [pc, #156]	@ (80101b4 <_printf_i+0x238>)
 8010118:	e7e9      	b.n	80100ee <_printf_i+0x172>
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	f023 0320 	bic.w	r3, r3, #32
 8010120:	6023      	str	r3, [r4, #0]
 8010122:	e7f6      	b.n	8010112 <_printf_i+0x196>
 8010124:	4616      	mov	r6, r2
 8010126:	e7bd      	b.n	80100a4 <_printf_i+0x128>
 8010128:	6833      	ldr	r3, [r6, #0]
 801012a:	6825      	ldr	r5, [r4, #0]
 801012c:	6961      	ldr	r1, [r4, #20]
 801012e:	1d18      	adds	r0, r3, #4
 8010130:	6030      	str	r0, [r6, #0]
 8010132:	062e      	lsls	r6, r5, #24
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	d501      	bpl.n	801013c <_printf_i+0x1c0>
 8010138:	6019      	str	r1, [r3, #0]
 801013a:	e002      	b.n	8010142 <_printf_i+0x1c6>
 801013c:	0668      	lsls	r0, r5, #25
 801013e:	d5fb      	bpl.n	8010138 <_printf_i+0x1bc>
 8010140:	8019      	strh	r1, [r3, #0]
 8010142:	2300      	movs	r3, #0
 8010144:	6123      	str	r3, [r4, #16]
 8010146:	4616      	mov	r6, r2
 8010148:	e7bc      	b.n	80100c4 <_printf_i+0x148>
 801014a:	6833      	ldr	r3, [r6, #0]
 801014c:	1d1a      	adds	r2, r3, #4
 801014e:	6032      	str	r2, [r6, #0]
 8010150:	681e      	ldr	r6, [r3, #0]
 8010152:	6862      	ldr	r2, [r4, #4]
 8010154:	2100      	movs	r1, #0
 8010156:	4630      	mov	r0, r6
 8010158:	f7f0 f84a 	bl	80001f0 <memchr>
 801015c:	b108      	cbz	r0, 8010162 <_printf_i+0x1e6>
 801015e:	1b80      	subs	r0, r0, r6
 8010160:	6060      	str	r0, [r4, #4]
 8010162:	6863      	ldr	r3, [r4, #4]
 8010164:	6123      	str	r3, [r4, #16]
 8010166:	2300      	movs	r3, #0
 8010168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801016c:	e7aa      	b.n	80100c4 <_printf_i+0x148>
 801016e:	6923      	ldr	r3, [r4, #16]
 8010170:	4632      	mov	r2, r6
 8010172:	4649      	mov	r1, r9
 8010174:	4640      	mov	r0, r8
 8010176:	47d0      	blx	sl
 8010178:	3001      	adds	r0, #1
 801017a:	d0ad      	beq.n	80100d8 <_printf_i+0x15c>
 801017c:	6823      	ldr	r3, [r4, #0]
 801017e:	079b      	lsls	r3, r3, #30
 8010180:	d413      	bmi.n	80101aa <_printf_i+0x22e>
 8010182:	68e0      	ldr	r0, [r4, #12]
 8010184:	9b03      	ldr	r3, [sp, #12]
 8010186:	4298      	cmp	r0, r3
 8010188:	bfb8      	it	lt
 801018a:	4618      	movlt	r0, r3
 801018c:	e7a6      	b.n	80100dc <_printf_i+0x160>
 801018e:	2301      	movs	r3, #1
 8010190:	4632      	mov	r2, r6
 8010192:	4649      	mov	r1, r9
 8010194:	4640      	mov	r0, r8
 8010196:	47d0      	blx	sl
 8010198:	3001      	adds	r0, #1
 801019a:	d09d      	beq.n	80100d8 <_printf_i+0x15c>
 801019c:	3501      	adds	r5, #1
 801019e:	68e3      	ldr	r3, [r4, #12]
 80101a0:	9903      	ldr	r1, [sp, #12]
 80101a2:	1a5b      	subs	r3, r3, r1
 80101a4:	42ab      	cmp	r3, r5
 80101a6:	dcf2      	bgt.n	801018e <_printf_i+0x212>
 80101a8:	e7eb      	b.n	8010182 <_printf_i+0x206>
 80101aa:	2500      	movs	r5, #0
 80101ac:	f104 0619 	add.w	r6, r4, #25
 80101b0:	e7f5      	b.n	801019e <_printf_i+0x222>
 80101b2:	bf00      	nop
 80101b4:	08015ba1 	.word	0x08015ba1
 80101b8:	08015bb2 	.word	0x08015bb2

080101bc <_scanf_float>:
 80101bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c0:	b087      	sub	sp, #28
 80101c2:	4617      	mov	r7, r2
 80101c4:	9303      	str	r3, [sp, #12]
 80101c6:	688b      	ldr	r3, [r1, #8]
 80101c8:	1e5a      	subs	r2, r3, #1
 80101ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80101ce:	bf81      	itttt	hi
 80101d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80101d4:	eb03 0b05 	addhi.w	fp, r3, r5
 80101d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80101dc:	608b      	strhi	r3, [r1, #8]
 80101de:	680b      	ldr	r3, [r1, #0]
 80101e0:	460a      	mov	r2, r1
 80101e2:	f04f 0500 	mov.w	r5, #0
 80101e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80101ea:	f842 3b1c 	str.w	r3, [r2], #28
 80101ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80101f2:	4680      	mov	r8, r0
 80101f4:	460c      	mov	r4, r1
 80101f6:	bf98      	it	ls
 80101f8:	f04f 0b00 	movls.w	fp, #0
 80101fc:	9201      	str	r2, [sp, #4]
 80101fe:	4616      	mov	r6, r2
 8010200:	46aa      	mov	sl, r5
 8010202:	46a9      	mov	r9, r5
 8010204:	9502      	str	r5, [sp, #8]
 8010206:	68a2      	ldr	r2, [r4, #8]
 8010208:	b152      	cbz	r2, 8010220 <_scanf_float+0x64>
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	2b4e      	cmp	r3, #78	@ 0x4e
 8010210:	d864      	bhi.n	80102dc <_scanf_float+0x120>
 8010212:	2b40      	cmp	r3, #64	@ 0x40
 8010214:	d83c      	bhi.n	8010290 <_scanf_float+0xd4>
 8010216:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801021a:	b2c8      	uxtb	r0, r1
 801021c:	280e      	cmp	r0, #14
 801021e:	d93a      	bls.n	8010296 <_scanf_float+0xda>
 8010220:	f1b9 0f00 	cmp.w	r9, #0
 8010224:	d003      	beq.n	801022e <_scanf_float+0x72>
 8010226:	6823      	ldr	r3, [r4, #0]
 8010228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801022c:	6023      	str	r3, [r4, #0]
 801022e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010232:	f1ba 0f01 	cmp.w	sl, #1
 8010236:	f200 8117 	bhi.w	8010468 <_scanf_float+0x2ac>
 801023a:	9b01      	ldr	r3, [sp, #4]
 801023c:	429e      	cmp	r6, r3
 801023e:	f200 8108 	bhi.w	8010452 <_scanf_float+0x296>
 8010242:	2001      	movs	r0, #1
 8010244:	b007      	add	sp, #28
 8010246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801024a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801024e:	2a0d      	cmp	r2, #13
 8010250:	d8e6      	bhi.n	8010220 <_scanf_float+0x64>
 8010252:	a101      	add	r1, pc, #4	@ (adr r1, 8010258 <_scanf_float+0x9c>)
 8010254:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010258:	0801039f 	.word	0x0801039f
 801025c:	08010221 	.word	0x08010221
 8010260:	08010221 	.word	0x08010221
 8010264:	08010221 	.word	0x08010221
 8010268:	080103ff 	.word	0x080103ff
 801026c:	080103d7 	.word	0x080103d7
 8010270:	08010221 	.word	0x08010221
 8010274:	08010221 	.word	0x08010221
 8010278:	080103ad 	.word	0x080103ad
 801027c:	08010221 	.word	0x08010221
 8010280:	08010221 	.word	0x08010221
 8010284:	08010221 	.word	0x08010221
 8010288:	08010221 	.word	0x08010221
 801028c:	08010365 	.word	0x08010365
 8010290:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010294:	e7db      	b.n	801024e <_scanf_float+0x92>
 8010296:	290e      	cmp	r1, #14
 8010298:	d8c2      	bhi.n	8010220 <_scanf_float+0x64>
 801029a:	a001      	add	r0, pc, #4	@ (adr r0, 80102a0 <_scanf_float+0xe4>)
 801029c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80102a0:	08010355 	.word	0x08010355
 80102a4:	08010221 	.word	0x08010221
 80102a8:	08010355 	.word	0x08010355
 80102ac:	080103eb 	.word	0x080103eb
 80102b0:	08010221 	.word	0x08010221
 80102b4:	080102fd 	.word	0x080102fd
 80102b8:	0801033b 	.word	0x0801033b
 80102bc:	0801033b 	.word	0x0801033b
 80102c0:	0801033b 	.word	0x0801033b
 80102c4:	0801033b 	.word	0x0801033b
 80102c8:	0801033b 	.word	0x0801033b
 80102cc:	0801033b 	.word	0x0801033b
 80102d0:	0801033b 	.word	0x0801033b
 80102d4:	0801033b 	.word	0x0801033b
 80102d8:	0801033b 	.word	0x0801033b
 80102dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80102de:	d809      	bhi.n	80102f4 <_scanf_float+0x138>
 80102e0:	2b60      	cmp	r3, #96	@ 0x60
 80102e2:	d8b2      	bhi.n	801024a <_scanf_float+0x8e>
 80102e4:	2b54      	cmp	r3, #84	@ 0x54
 80102e6:	d07b      	beq.n	80103e0 <_scanf_float+0x224>
 80102e8:	2b59      	cmp	r3, #89	@ 0x59
 80102ea:	d199      	bne.n	8010220 <_scanf_float+0x64>
 80102ec:	2d07      	cmp	r5, #7
 80102ee:	d197      	bne.n	8010220 <_scanf_float+0x64>
 80102f0:	2508      	movs	r5, #8
 80102f2:	e02c      	b.n	801034e <_scanf_float+0x192>
 80102f4:	2b74      	cmp	r3, #116	@ 0x74
 80102f6:	d073      	beq.n	80103e0 <_scanf_float+0x224>
 80102f8:	2b79      	cmp	r3, #121	@ 0x79
 80102fa:	e7f6      	b.n	80102ea <_scanf_float+0x12e>
 80102fc:	6821      	ldr	r1, [r4, #0]
 80102fe:	05c8      	lsls	r0, r1, #23
 8010300:	d51b      	bpl.n	801033a <_scanf_float+0x17e>
 8010302:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8010306:	6021      	str	r1, [r4, #0]
 8010308:	f109 0901 	add.w	r9, r9, #1
 801030c:	f1bb 0f00 	cmp.w	fp, #0
 8010310:	d003      	beq.n	801031a <_scanf_float+0x15e>
 8010312:	3201      	adds	r2, #1
 8010314:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010318:	60a2      	str	r2, [r4, #8]
 801031a:	68a3      	ldr	r3, [r4, #8]
 801031c:	3b01      	subs	r3, #1
 801031e:	60a3      	str	r3, [r4, #8]
 8010320:	6923      	ldr	r3, [r4, #16]
 8010322:	3301      	adds	r3, #1
 8010324:	6123      	str	r3, [r4, #16]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	3b01      	subs	r3, #1
 801032a:	2b00      	cmp	r3, #0
 801032c:	607b      	str	r3, [r7, #4]
 801032e:	f340 8087 	ble.w	8010440 <_scanf_float+0x284>
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	3301      	adds	r3, #1
 8010336:	603b      	str	r3, [r7, #0]
 8010338:	e765      	b.n	8010206 <_scanf_float+0x4a>
 801033a:	eb1a 0105 	adds.w	r1, sl, r5
 801033e:	f47f af6f 	bne.w	8010220 <_scanf_float+0x64>
 8010342:	6822      	ldr	r2, [r4, #0]
 8010344:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8010348:	6022      	str	r2, [r4, #0]
 801034a:	460d      	mov	r5, r1
 801034c:	468a      	mov	sl, r1
 801034e:	f806 3b01 	strb.w	r3, [r6], #1
 8010352:	e7e2      	b.n	801031a <_scanf_float+0x15e>
 8010354:	6822      	ldr	r2, [r4, #0]
 8010356:	0610      	lsls	r0, r2, #24
 8010358:	f57f af62 	bpl.w	8010220 <_scanf_float+0x64>
 801035c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010360:	6022      	str	r2, [r4, #0]
 8010362:	e7f4      	b.n	801034e <_scanf_float+0x192>
 8010364:	f1ba 0f00 	cmp.w	sl, #0
 8010368:	d10e      	bne.n	8010388 <_scanf_float+0x1cc>
 801036a:	f1b9 0f00 	cmp.w	r9, #0
 801036e:	d10e      	bne.n	801038e <_scanf_float+0x1d2>
 8010370:	6822      	ldr	r2, [r4, #0]
 8010372:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8010376:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801037a:	d108      	bne.n	801038e <_scanf_float+0x1d2>
 801037c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010380:	6022      	str	r2, [r4, #0]
 8010382:	f04f 0a01 	mov.w	sl, #1
 8010386:	e7e2      	b.n	801034e <_scanf_float+0x192>
 8010388:	f1ba 0f02 	cmp.w	sl, #2
 801038c:	d055      	beq.n	801043a <_scanf_float+0x27e>
 801038e:	2d01      	cmp	r5, #1
 8010390:	d002      	beq.n	8010398 <_scanf_float+0x1dc>
 8010392:	2d04      	cmp	r5, #4
 8010394:	f47f af44 	bne.w	8010220 <_scanf_float+0x64>
 8010398:	3501      	adds	r5, #1
 801039a:	b2ed      	uxtb	r5, r5
 801039c:	e7d7      	b.n	801034e <_scanf_float+0x192>
 801039e:	f1ba 0f01 	cmp.w	sl, #1
 80103a2:	f47f af3d 	bne.w	8010220 <_scanf_float+0x64>
 80103a6:	f04f 0a02 	mov.w	sl, #2
 80103aa:	e7d0      	b.n	801034e <_scanf_float+0x192>
 80103ac:	b97d      	cbnz	r5, 80103ce <_scanf_float+0x212>
 80103ae:	f1b9 0f00 	cmp.w	r9, #0
 80103b2:	f47f af38 	bne.w	8010226 <_scanf_float+0x6a>
 80103b6:	6822      	ldr	r2, [r4, #0]
 80103b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80103bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80103c0:	f040 8108 	bne.w	80105d4 <_scanf_float+0x418>
 80103c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80103c8:	6022      	str	r2, [r4, #0]
 80103ca:	2501      	movs	r5, #1
 80103cc:	e7bf      	b.n	801034e <_scanf_float+0x192>
 80103ce:	2d03      	cmp	r5, #3
 80103d0:	d0e2      	beq.n	8010398 <_scanf_float+0x1dc>
 80103d2:	2d05      	cmp	r5, #5
 80103d4:	e7de      	b.n	8010394 <_scanf_float+0x1d8>
 80103d6:	2d02      	cmp	r5, #2
 80103d8:	f47f af22 	bne.w	8010220 <_scanf_float+0x64>
 80103dc:	2503      	movs	r5, #3
 80103de:	e7b6      	b.n	801034e <_scanf_float+0x192>
 80103e0:	2d06      	cmp	r5, #6
 80103e2:	f47f af1d 	bne.w	8010220 <_scanf_float+0x64>
 80103e6:	2507      	movs	r5, #7
 80103e8:	e7b1      	b.n	801034e <_scanf_float+0x192>
 80103ea:	6822      	ldr	r2, [r4, #0]
 80103ec:	0591      	lsls	r1, r2, #22
 80103ee:	f57f af17 	bpl.w	8010220 <_scanf_float+0x64>
 80103f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80103f6:	6022      	str	r2, [r4, #0]
 80103f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80103fc:	e7a7      	b.n	801034e <_scanf_float+0x192>
 80103fe:	6822      	ldr	r2, [r4, #0]
 8010400:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8010404:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8010408:	d006      	beq.n	8010418 <_scanf_float+0x25c>
 801040a:	0550      	lsls	r0, r2, #21
 801040c:	f57f af08 	bpl.w	8010220 <_scanf_float+0x64>
 8010410:	f1b9 0f00 	cmp.w	r9, #0
 8010414:	f000 80de 	beq.w	80105d4 <_scanf_float+0x418>
 8010418:	0591      	lsls	r1, r2, #22
 801041a:	bf58      	it	pl
 801041c:	9902      	ldrpl	r1, [sp, #8]
 801041e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8010422:	bf58      	it	pl
 8010424:	eba9 0101 	subpl.w	r1, r9, r1
 8010428:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801042c:	bf58      	it	pl
 801042e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010432:	6022      	str	r2, [r4, #0]
 8010434:	f04f 0900 	mov.w	r9, #0
 8010438:	e789      	b.n	801034e <_scanf_float+0x192>
 801043a:	f04f 0a03 	mov.w	sl, #3
 801043e:	e786      	b.n	801034e <_scanf_float+0x192>
 8010440:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010444:	4639      	mov	r1, r7
 8010446:	4640      	mov	r0, r8
 8010448:	4798      	blx	r3
 801044a:	2800      	cmp	r0, #0
 801044c:	f43f aedb 	beq.w	8010206 <_scanf_float+0x4a>
 8010450:	e6e6      	b.n	8010220 <_scanf_float+0x64>
 8010452:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010456:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801045a:	463a      	mov	r2, r7
 801045c:	4640      	mov	r0, r8
 801045e:	4798      	blx	r3
 8010460:	6923      	ldr	r3, [r4, #16]
 8010462:	3b01      	subs	r3, #1
 8010464:	6123      	str	r3, [r4, #16]
 8010466:	e6e8      	b.n	801023a <_scanf_float+0x7e>
 8010468:	1e6b      	subs	r3, r5, #1
 801046a:	2b06      	cmp	r3, #6
 801046c:	d824      	bhi.n	80104b8 <_scanf_float+0x2fc>
 801046e:	2d02      	cmp	r5, #2
 8010470:	d836      	bhi.n	80104e0 <_scanf_float+0x324>
 8010472:	9b01      	ldr	r3, [sp, #4]
 8010474:	429e      	cmp	r6, r3
 8010476:	f67f aee4 	bls.w	8010242 <_scanf_float+0x86>
 801047a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801047e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010482:	463a      	mov	r2, r7
 8010484:	4640      	mov	r0, r8
 8010486:	4798      	blx	r3
 8010488:	6923      	ldr	r3, [r4, #16]
 801048a:	3b01      	subs	r3, #1
 801048c:	6123      	str	r3, [r4, #16]
 801048e:	e7f0      	b.n	8010472 <_scanf_float+0x2b6>
 8010490:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010494:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8010498:	463a      	mov	r2, r7
 801049a:	4640      	mov	r0, r8
 801049c:	4798      	blx	r3
 801049e:	6923      	ldr	r3, [r4, #16]
 80104a0:	3b01      	subs	r3, #1
 80104a2:	6123      	str	r3, [r4, #16]
 80104a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80104a8:	fa5f fa8a 	uxtb.w	sl, sl
 80104ac:	f1ba 0f02 	cmp.w	sl, #2
 80104b0:	d1ee      	bne.n	8010490 <_scanf_float+0x2d4>
 80104b2:	3d03      	subs	r5, #3
 80104b4:	b2ed      	uxtb	r5, r5
 80104b6:	1b76      	subs	r6, r6, r5
 80104b8:	6823      	ldr	r3, [r4, #0]
 80104ba:	05da      	lsls	r2, r3, #23
 80104bc:	d530      	bpl.n	8010520 <_scanf_float+0x364>
 80104be:	055b      	lsls	r3, r3, #21
 80104c0:	d511      	bpl.n	80104e6 <_scanf_float+0x32a>
 80104c2:	9b01      	ldr	r3, [sp, #4]
 80104c4:	429e      	cmp	r6, r3
 80104c6:	f67f aebc 	bls.w	8010242 <_scanf_float+0x86>
 80104ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80104ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80104d2:	463a      	mov	r2, r7
 80104d4:	4640      	mov	r0, r8
 80104d6:	4798      	blx	r3
 80104d8:	6923      	ldr	r3, [r4, #16]
 80104da:	3b01      	subs	r3, #1
 80104dc:	6123      	str	r3, [r4, #16]
 80104de:	e7f0      	b.n	80104c2 <_scanf_float+0x306>
 80104e0:	46aa      	mov	sl, r5
 80104e2:	46b3      	mov	fp, r6
 80104e4:	e7de      	b.n	80104a4 <_scanf_float+0x2e8>
 80104e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80104ea:	6923      	ldr	r3, [r4, #16]
 80104ec:	2965      	cmp	r1, #101	@ 0x65
 80104ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80104f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80104f6:	6123      	str	r3, [r4, #16]
 80104f8:	d00c      	beq.n	8010514 <_scanf_float+0x358>
 80104fa:	2945      	cmp	r1, #69	@ 0x45
 80104fc:	d00a      	beq.n	8010514 <_scanf_float+0x358>
 80104fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010502:	463a      	mov	r2, r7
 8010504:	4640      	mov	r0, r8
 8010506:	4798      	blx	r3
 8010508:	6923      	ldr	r3, [r4, #16]
 801050a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801050e:	3b01      	subs	r3, #1
 8010510:	1eb5      	subs	r5, r6, #2
 8010512:	6123      	str	r3, [r4, #16]
 8010514:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010518:	463a      	mov	r2, r7
 801051a:	4640      	mov	r0, r8
 801051c:	4798      	blx	r3
 801051e:	462e      	mov	r6, r5
 8010520:	6822      	ldr	r2, [r4, #0]
 8010522:	f012 0210 	ands.w	r2, r2, #16
 8010526:	d001      	beq.n	801052c <_scanf_float+0x370>
 8010528:	2000      	movs	r0, #0
 801052a:	e68b      	b.n	8010244 <_scanf_float+0x88>
 801052c:	7032      	strb	r2, [r6, #0]
 801052e:	6823      	ldr	r3, [r4, #0]
 8010530:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8010534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010538:	d11c      	bne.n	8010574 <_scanf_float+0x3b8>
 801053a:	9b02      	ldr	r3, [sp, #8]
 801053c:	454b      	cmp	r3, r9
 801053e:	eba3 0209 	sub.w	r2, r3, r9
 8010542:	d123      	bne.n	801058c <_scanf_float+0x3d0>
 8010544:	9901      	ldr	r1, [sp, #4]
 8010546:	2200      	movs	r2, #0
 8010548:	4640      	mov	r0, r8
 801054a:	f002 fc71 	bl	8012e30 <_strtod_r>
 801054e:	9b03      	ldr	r3, [sp, #12]
 8010550:	6821      	ldr	r1, [r4, #0]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	f011 0f02 	tst.w	r1, #2
 8010558:	ec57 6b10 	vmov	r6, r7, d0
 801055c:	f103 0204 	add.w	r2, r3, #4
 8010560:	d01f      	beq.n	80105a2 <_scanf_float+0x3e6>
 8010562:	9903      	ldr	r1, [sp, #12]
 8010564:	600a      	str	r2, [r1, #0]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	e9c3 6700 	strd	r6, r7, [r3]
 801056c:	68e3      	ldr	r3, [r4, #12]
 801056e:	3301      	adds	r3, #1
 8010570:	60e3      	str	r3, [r4, #12]
 8010572:	e7d9      	b.n	8010528 <_scanf_float+0x36c>
 8010574:	9b04      	ldr	r3, [sp, #16]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d0e4      	beq.n	8010544 <_scanf_float+0x388>
 801057a:	9905      	ldr	r1, [sp, #20]
 801057c:	230a      	movs	r3, #10
 801057e:	3101      	adds	r1, #1
 8010580:	4640      	mov	r0, r8
 8010582:	f002 fcd5 	bl	8012f30 <_strtol_r>
 8010586:	9b04      	ldr	r3, [sp, #16]
 8010588:	9e05      	ldr	r6, [sp, #20]
 801058a:	1ac2      	subs	r2, r0, r3
 801058c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8010590:	429e      	cmp	r6, r3
 8010592:	bf28      	it	cs
 8010594:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8010598:	4910      	ldr	r1, [pc, #64]	@ (80105dc <_scanf_float+0x420>)
 801059a:	4630      	mov	r0, r6
 801059c:	f000 f918 	bl	80107d0 <siprintf>
 80105a0:	e7d0      	b.n	8010544 <_scanf_float+0x388>
 80105a2:	f011 0f04 	tst.w	r1, #4
 80105a6:	9903      	ldr	r1, [sp, #12]
 80105a8:	600a      	str	r2, [r1, #0]
 80105aa:	d1dc      	bne.n	8010566 <_scanf_float+0x3aa>
 80105ac:	681d      	ldr	r5, [r3, #0]
 80105ae:	4632      	mov	r2, r6
 80105b0:	463b      	mov	r3, r7
 80105b2:	4630      	mov	r0, r6
 80105b4:	4639      	mov	r1, r7
 80105b6:	f7f0 fac9 	bl	8000b4c <__aeabi_dcmpun>
 80105ba:	b128      	cbz	r0, 80105c8 <_scanf_float+0x40c>
 80105bc:	4808      	ldr	r0, [pc, #32]	@ (80105e0 <_scanf_float+0x424>)
 80105be:	f000 fac5 	bl	8010b4c <nanf>
 80105c2:	ed85 0a00 	vstr	s0, [r5]
 80105c6:	e7d1      	b.n	801056c <_scanf_float+0x3b0>
 80105c8:	4630      	mov	r0, r6
 80105ca:	4639      	mov	r1, r7
 80105cc:	f7f0 fb1c 	bl	8000c08 <__aeabi_d2f>
 80105d0:	6028      	str	r0, [r5, #0]
 80105d2:	e7cb      	b.n	801056c <_scanf_float+0x3b0>
 80105d4:	f04f 0900 	mov.w	r9, #0
 80105d8:	e629      	b.n	801022e <_scanf_float+0x72>
 80105da:	bf00      	nop
 80105dc:	08015bc3 	.word	0x08015bc3
 80105e0:	08015c74 	.word	0x08015c74

080105e4 <std>:
 80105e4:	2300      	movs	r3, #0
 80105e6:	b510      	push	{r4, lr}
 80105e8:	4604      	mov	r4, r0
 80105ea:	e9c0 3300 	strd	r3, r3, [r0]
 80105ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105f2:	6083      	str	r3, [r0, #8]
 80105f4:	8181      	strh	r1, [r0, #12]
 80105f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80105f8:	81c2      	strh	r2, [r0, #14]
 80105fa:	6183      	str	r3, [r0, #24]
 80105fc:	4619      	mov	r1, r3
 80105fe:	2208      	movs	r2, #8
 8010600:	305c      	adds	r0, #92	@ 0x5c
 8010602:	f000 f974 	bl	80108ee <memset>
 8010606:	4b0d      	ldr	r3, [pc, #52]	@ (801063c <std+0x58>)
 8010608:	6263      	str	r3, [r4, #36]	@ 0x24
 801060a:	4b0d      	ldr	r3, [pc, #52]	@ (8010640 <std+0x5c>)
 801060c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801060e:	4b0d      	ldr	r3, [pc, #52]	@ (8010644 <std+0x60>)
 8010610:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010612:	4b0d      	ldr	r3, [pc, #52]	@ (8010648 <std+0x64>)
 8010614:	6323      	str	r3, [r4, #48]	@ 0x30
 8010616:	4b0d      	ldr	r3, [pc, #52]	@ (801064c <std+0x68>)
 8010618:	6224      	str	r4, [r4, #32]
 801061a:	429c      	cmp	r4, r3
 801061c:	d006      	beq.n	801062c <std+0x48>
 801061e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010622:	4294      	cmp	r4, r2
 8010624:	d002      	beq.n	801062c <std+0x48>
 8010626:	33d0      	adds	r3, #208	@ 0xd0
 8010628:	429c      	cmp	r4, r3
 801062a:	d105      	bne.n	8010638 <std+0x54>
 801062c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010634:	f000 ba78 	b.w	8010b28 <__retarget_lock_init_recursive>
 8010638:	bd10      	pop	{r4, pc}
 801063a:	bf00      	nop
 801063c:	08010865 	.word	0x08010865
 8010640:	0801088b 	.word	0x0801088b
 8010644:	080108c3 	.word	0x080108c3
 8010648:	080108e7 	.word	0x080108e7
 801064c:	200055ec 	.word	0x200055ec

08010650 <stdio_exit_handler>:
 8010650:	4a02      	ldr	r2, [pc, #8]	@ (801065c <stdio_exit_handler+0xc>)
 8010652:	4903      	ldr	r1, [pc, #12]	@ (8010660 <stdio_exit_handler+0x10>)
 8010654:	4803      	ldr	r0, [pc, #12]	@ (8010664 <stdio_exit_handler+0x14>)
 8010656:	f000 b869 	b.w	801072c <_fwalk_sglue>
 801065a:	bf00      	nop
 801065c:	200000b8 	.word	0x200000b8
 8010660:	08013921 	.word	0x08013921
 8010664:	200000c8 	.word	0x200000c8

08010668 <cleanup_stdio>:
 8010668:	6841      	ldr	r1, [r0, #4]
 801066a:	4b0c      	ldr	r3, [pc, #48]	@ (801069c <cleanup_stdio+0x34>)
 801066c:	4299      	cmp	r1, r3
 801066e:	b510      	push	{r4, lr}
 8010670:	4604      	mov	r4, r0
 8010672:	d001      	beq.n	8010678 <cleanup_stdio+0x10>
 8010674:	f003 f954 	bl	8013920 <_fflush_r>
 8010678:	68a1      	ldr	r1, [r4, #8]
 801067a:	4b09      	ldr	r3, [pc, #36]	@ (80106a0 <cleanup_stdio+0x38>)
 801067c:	4299      	cmp	r1, r3
 801067e:	d002      	beq.n	8010686 <cleanup_stdio+0x1e>
 8010680:	4620      	mov	r0, r4
 8010682:	f003 f94d 	bl	8013920 <_fflush_r>
 8010686:	68e1      	ldr	r1, [r4, #12]
 8010688:	4b06      	ldr	r3, [pc, #24]	@ (80106a4 <cleanup_stdio+0x3c>)
 801068a:	4299      	cmp	r1, r3
 801068c:	d004      	beq.n	8010698 <cleanup_stdio+0x30>
 801068e:	4620      	mov	r0, r4
 8010690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010694:	f003 b944 	b.w	8013920 <_fflush_r>
 8010698:	bd10      	pop	{r4, pc}
 801069a:	bf00      	nop
 801069c:	200055ec 	.word	0x200055ec
 80106a0:	20005654 	.word	0x20005654
 80106a4:	200056bc 	.word	0x200056bc

080106a8 <global_stdio_init.part.0>:
 80106a8:	b510      	push	{r4, lr}
 80106aa:	4b0b      	ldr	r3, [pc, #44]	@ (80106d8 <global_stdio_init.part.0+0x30>)
 80106ac:	4c0b      	ldr	r4, [pc, #44]	@ (80106dc <global_stdio_init.part.0+0x34>)
 80106ae:	4a0c      	ldr	r2, [pc, #48]	@ (80106e0 <global_stdio_init.part.0+0x38>)
 80106b0:	601a      	str	r2, [r3, #0]
 80106b2:	4620      	mov	r0, r4
 80106b4:	2200      	movs	r2, #0
 80106b6:	2104      	movs	r1, #4
 80106b8:	f7ff ff94 	bl	80105e4 <std>
 80106bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80106c0:	2201      	movs	r2, #1
 80106c2:	2109      	movs	r1, #9
 80106c4:	f7ff ff8e 	bl	80105e4 <std>
 80106c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80106cc:	2202      	movs	r2, #2
 80106ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106d2:	2112      	movs	r1, #18
 80106d4:	f7ff bf86 	b.w	80105e4 <std>
 80106d8:	20005724 	.word	0x20005724
 80106dc:	200055ec 	.word	0x200055ec
 80106e0:	08010651 	.word	0x08010651

080106e4 <__sfp_lock_acquire>:
 80106e4:	4801      	ldr	r0, [pc, #4]	@ (80106ec <__sfp_lock_acquire+0x8>)
 80106e6:	f000 ba20 	b.w	8010b2a <__retarget_lock_acquire_recursive>
 80106ea:	bf00      	nop
 80106ec:	2000572d 	.word	0x2000572d

080106f0 <__sfp_lock_release>:
 80106f0:	4801      	ldr	r0, [pc, #4]	@ (80106f8 <__sfp_lock_release+0x8>)
 80106f2:	f000 ba1b 	b.w	8010b2c <__retarget_lock_release_recursive>
 80106f6:	bf00      	nop
 80106f8:	2000572d 	.word	0x2000572d

080106fc <__sinit>:
 80106fc:	b510      	push	{r4, lr}
 80106fe:	4604      	mov	r4, r0
 8010700:	f7ff fff0 	bl	80106e4 <__sfp_lock_acquire>
 8010704:	6a23      	ldr	r3, [r4, #32]
 8010706:	b11b      	cbz	r3, 8010710 <__sinit+0x14>
 8010708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801070c:	f7ff bff0 	b.w	80106f0 <__sfp_lock_release>
 8010710:	4b04      	ldr	r3, [pc, #16]	@ (8010724 <__sinit+0x28>)
 8010712:	6223      	str	r3, [r4, #32]
 8010714:	4b04      	ldr	r3, [pc, #16]	@ (8010728 <__sinit+0x2c>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d1f5      	bne.n	8010708 <__sinit+0xc>
 801071c:	f7ff ffc4 	bl	80106a8 <global_stdio_init.part.0>
 8010720:	e7f2      	b.n	8010708 <__sinit+0xc>
 8010722:	bf00      	nop
 8010724:	08010669 	.word	0x08010669
 8010728:	20005724 	.word	0x20005724

0801072c <_fwalk_sglue>:
 801072c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010730:	4607      	mov	r7, r0
 8010732:	4688      	mov	r8, r1
 8010734:	4614      	mov	r4, r2
 8010736:	2600      	movs	r6, #0
 8010738:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801073c:	f1b9 0901 	subs.w	r9, r9, #1
 8010740:	d505      	bpl.n	801074e <_fwalk_sglue+0x22>
 8010742:	6824      	ldr	r4, [r4, #0]
 8010744:	2c00      	cmp	r4, #0
 8010746:	d1f7      	bne.n	8010738 <_fwalk_sglue+0xc>
 8010748:	4630      	mov	r0, r6
 801074a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801074e:	89ab      	ldrh	r3, [r5, #12]
 8010750:	2b01      	cmp	r3, #1
 8010752:	d907      	bls.n	8010764 <_fwalk_sglue+0x38>
 8010754:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010758:	3301      	adds	r3, #1
 801075a:	d003      	beq.n	8010764 <_fwalk_sglue+0x38>
 801075c:	4629      	mov	r1, r5
 801075e:	4638      	mov	r0, r7
 8010760:	47c0      	blx	r8
 8010762:	4306      	orrs	r6, r0
 8010764:	3568      	adds	r5, #104	@ 0x68
 8010766:	e7e9      	b.n	801073c <_fwalk_sglue+0x10>

08010768 <sniprintf>:
 8010768:	b40c      	push	{r2, r3}
 801076a:	b530      	push	{r4, r5, lr}
 801076c:	4b17      	ldr	r3, [pc, #92]	@ (80107cc <sniprintf+0x64>)
 801076e:	1e0c      	subs	r4, r1, #0
 8010770:	681d      	ldr	r5, [r3, #0]
 8010772:	b09d      	sub	sp, #116	@ 0x74
 8010774:	da08      	bge.n	8010788 <sniprintf+0x20>
 8010776:	238b      	movs	r3, #139	@ 0x8b
 8010778:	602b      	str	r3, [r5, #0]
 801077a:	f04f 30ff 	mov.w	r0, #4294967295
 801077e:	b01d      	add	sp, #116	@ 0x74
 8010780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010784:	b002      	add	sp, #8
 8010786:	4770      	bx	lr
 8010788:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801078c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010790:	bf14      	ite	ne
 8010792:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010796:	4623      	moveq	r3, r4
 8010798:	9304      	str	r3, [sp, #16]
 801079a:	9307      	str	r3, [sp, #28]
 801079c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80107a0:	9002      	str	r0, [sp, #8]
 80107a2:	9006      	str	r0, [sp, #24]
 80107a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80107a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80107aa:	ab21      	add	r3, sp, #132	@ 0x84
 80107ac:	a902      	add	r1, sp, #8
 80107ae:	4628      	mov	r0, r5
 80107b0:	9301      	str	r3, [sp, #4]
 80107b2:	f002 fc1b 	bl	8012fec <_svfiprintf_r>
 80107b6:	1c43      	adds	r3, r0, #1
 80107b8:	bfbc      	itt	lt
 80107ba:	238b      	movlt	r3, #139	@ 0x8b
 80107bc:	602b      	strlt	r3, [r5, #0]
 80107be:	2c00      	cmp	r4, #0
 80107c0:	d0dd      	beq.n	801077e <sniprintf+0x16>
 80107c2:	9b02      	ldr	r3, [sp, #8]
 80107c4:	2200      	movs	r2, #0
 80107c6:	701a      	strb	r2, [r3, #0]
 80107c8:	e7d9      	b.n	801077e <sniprintf+0x16>
 80107ca:	bf00      	nop
 80107cc:	200000c4 	.word	0x200000c4

080107d0 <siprintf>:
 80107d0:	b40e      	push	{r1, r2, r3}
 80107d2:	b500      	push	{lr}
 80107d4:	b09c      	sub	sp, #112	@ 0x70
 80107d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80107d8:	9002      	str	r0, [sp, #8]
 80107da:	9006      	str	r0, [sp, #24]
 80107dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80107e0:	4809      	ldr	r0, [pc, #36]	@ (8010808 <siprintf+0x38>)
 80107e2:	9107      	str	r1, [sp, #28]
 80107e4:	9104      	str	r1, [sp, #16]
 80107e6:	4909      	ldr	r1, [pc, #36]	@ (801080c <siprintf+0x3c>)
 80107e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80107ec:	9105      	str	r1, [sp, #20]
 80107ee:	6800      	ldr	r0, [r0, #0]
 80107f0:	9301      	str	r3, [sp, #4]
 80107f2:	a902      	add	r1, sp, #8
 80107f4:	f002 fbfa 	bl	8012fec <_svfiprintf_r>
 80107f8:	9b02      	ldr	r3, [sp, #8]
 80107fa:	2200      	movs	r2, #0
 80107fc:	701a      	strb	r2, [r3, #0]
 80107fe:	b01c      	add	sp, #112	@ 0x70
 8010800:	f85d eb04 	ldr.w	lr, [sp], #4
 8010804:	b003      	add	sp, #12
 8010806:	4770      	bx	lr
 8010808:	200000c4 	.word	0x200000c4
 801080c:	ffff0208 	.word	0xffff0208

08010810 <siscanf>:
 8010810:	b40e      	push	{r1, r2, r3}
 8010812:	b530      	push	{r4, r5, lr}
 8010814:	b09c      	sub	sp, #112	@ 0x70
 8010816:	ac1f      	add	r4, sp, #124	@ 0x7c
 8010818:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801081c:	f854 5b04 	ldr.w	r5, [r4], #4
 8010820:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010824:	9002      	str	r0, [sp, #8]
 8010826:	9006      	str	r0, [sp, #24]
 8010828:	f7ef fd32 	bl	8000290 <strlen>
 801082c:	4b0b      	ldr	r3, [pc, #44]	@ (801085c <siscanf+0x4c>)
 801082e:	9003      	str	r0, [sp, #12]
 8010830:	9007      	str	r0, [sp, #28]
 8010832:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010834:	480a      	ldr	r0, [pc, #40]	@ (8010860 <siscanf+0x50>)
 8010836:	9401      	str	r4, [sp, #4]
 8010838:	2300      	movs	r3, #0
 801083a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801083c:	9314      	str	r3, [sp, #80]	@ 0x50
 801083e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010842:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010846:	462a      	mov	r2, r5
 8010848:	4623      	mov	r3, r4
 801084a:	a902      	add	r1, sp, #8
 801084c:	6800      	ldr	r0, [r0, #0]
 801084e:	f002 fd21 	bl	8013294 <__ssvfiscanf_r>
 8010852:	b01c      	add	sp, #112	@ 0x70
 8010854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010858:	b003      	add	sp, #12
 801085a:	4770      	bx	lr
 801085c:	08010887 	.word	0x08010887
 8010860:	200000c4 	.word	0x200000c4

08010864 <__sread>:
 8010864:	b510      	push	{r4, lr}
 8010866:	460c      	mov	r4, r1
 8010868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801086c:	f000 f8fe 	bl	8010a6c <_read_r>
 8010870:	2800      	cmp	r0, #0
 8010872:	bfab      	itete	ge
 8010874:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010876:	89a3      	ldrhlt	r3, [r4, #12]
 8010878:	181b      	addge	r3, r3, r0
 801087a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801087e:	bfac      	ite	ge
 8010880:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010882:	81a3      	strhlt	r3, [r4, #12]
 8010884:	bd10      	pop	{r4, pc}

08010886 <__seofread>:
 8010886:	2000      	movs	r0, #0
 8010888:	4770      	bx	lr

0801088a <__swrite>:
 801088a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801088e:	461f      	mov	r7, r3
 8010890:	898b      	ldrh	r3, [r1, #12]
 8010892:	05db      	lsls	r3, r3, #23
 8010894:	4605      	mov	r5, r0
 8010896:	460c      	mov	r4, r1
 8010898:	4616      	mov	r6, r2
 801089a:	d505      	bpl.n	80108a8 <__swrite+0x1e>
 801089c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108a0:	2302      	movs	r3, #2
 80108a2:	2200      	movs	r2, #0
 80108a4:	f000 f8d0 	bl	8010a48 <_lseek_r>
 80108a8:	89a3      	ldrh	r3, [r4, #12]
 80108aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80108b2:	81a3      	strh	r3, [r4, #12]
 80108b4:	4632      	mov	r2, r6
 80108b6:	463b      	mov	r3, r7
 80108b8:	4628      	mov	r0, r5
 80108ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108be:	f000 b8f7 	b.w	8010ab0 <_write_r>

080108c2 <__sseek>:
 80108c2:	b510      	push	{r4, lr}
 80108c4:	460c      	mov	r4, r1
 80108c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108ca:	f000 f8bd 	bl	8010a48 <_lseek_r>
 80108ce:	1c43      	adds	r3, r0, #1
 80108d0:	89a3      	ldrh	r3, [r4, #12]
 80108d2:	bf15      	itete	ne
 80108d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80108d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80108da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80108de:	81a3      	strheq	r3, [r4, #12]
 80108e0:	bf18      	it	ne
 80108e2:	81a3      	strhne	r3, [r4, #12]
 80108e4:	bd10      	pop	{r4, pc}

080108e6 <__sclose>:
 80108e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108ea:	f000 b89d 	b.w	8010a28 <_close_r>

080108ee <memset>:
 80108ee:	4402      	add	r2, r0
 80108f0:	4603      	mov	r3, r0
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d100      	bne.n	80108f8 <memset+0xa>
 80108f6:	4770      	bx	lr
 80108f8:	f803 1b01 	strb.w	r1, [r3], #1
 80108fc:	e7f9      	b.n	80108f2 <memset+0x4>

080108fe <strcat>:
 80108fe:	b510      	push	{r4, lr}
 8010900:	4602      	mov	r2, r0
 8010902:	7814      	ldrb	r4, [r2, #0]
 8010904:	4613      	mov	r3, r2
 8010906:	3201      	adds	r2, #1
 8010908:	2c00      	cmp	r4, #0
 801090a:	d1fa      	bne.n	8010902 <strcat+0x4>
 801090c:	3b01      	subs	r3, #1
 801090e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010912:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010916:	2a00      	cmp	r2, #0
 8010918:	d1f9      	bne.n	801090e <strcat+0x10>
 801091a:	bd10      	pop	{r4, pc}

0801091c <strncmp>:
 801091c:	b510      	push	{r4, lr}
 801091e:	b16a      	cbz	r2, 801093c <strncmp+0x20>
 8010920:	3901      	subs	r1, #1
 8010922:	1884      	adds	r4, r0, r2
 8010924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010928:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801092c:	429a      	cmp	r2, r3
 801092e:	d103      	bne.n	8010938 <strncmp+0x1c>
 8010930:	42a0      	cmp	r0, r4
 8010932:	d001      	beq.n	8010938 <strncmp+0x1c>
 8010934:	2a00      	cmp	r2, #0
 8010936:	d1f5      	bne.n	8010924 <strncmp+0x8>
 8010938:	1ad0      	subs	r0, r2, r3
 801093a:	bd10      	pop	{r4, pc}
 801093c:	4610      	mov	r0, r2
 801093e:	e7fc      	b.n	801093a <strncmp+0x1e>

08010940 <strncpy>:
 8010940:	b510      	push	{r4, lr}
 8010942:	3901      	subs	r1, #1
 8010944:	4603      	mov	r3, r0
 8010946:	b132      	cbz	r2, 8010956 <strncpy+0x16>
 8010948:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801094c:	f803 4b01 	strb.w	r4, [r3], #1
 8010950:	3a01      	subs	r2, #1
 8010952:	2c00      	cmp	r4, #0
 8010954:	d1f7      	bne.n	8010946 <strncpy+0x6>
 8010956:	441a      	add	r2, r3
 8010958:	2100      	movs	r1, #0
 801095a:	4293      	cmp	r3, r2
 801095c:	d100      	bne.n	8010960 <strncpy+0x20>
 801095e:	bd10      	pop	{r4, pc}
 8010960:	f803 1b01 	strb.w	r1, [r3], #1
 8010964:	e7f9      	b.n	801095a <strncpy+0x1a>
	...

08010968 <strtok>:
 8010968:	4b16      	ldr	r3, [pc, #88]	@ (80109c4 <strtok+0x5c>)
 801096a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801096e:	681f      	ldr	r7, [r3, #0]
 8010970:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8010972:	4605      	mov	r5, r0
 8010974:	460e      	mov	r6, r1
 8010976:	b9ec      	cbnz	r4, 80109b4 <strtok+0x4c>
 8010978:	2050      	movs	r0, #80	@ 0x50
 801097a:	f7fe fec7 	bl	800f70c <malloc>
 801097e:	4602      	mov	r2, r0
 8010980:	6478      	str	r0, [r7, #68]	@ 0x44
 8010982:	b920      	cbnz	r0, 801098e <strtok+0x26>
 8010984:	4b10      	ldr	r3, [pc, #64]	@ (80109c8 <strtok+0x60>)
 8010986:	4811      	ldr	r0, [pc, #68]	@ (80109cc <strtok+0x64>)
 8010988:	215b      	movs	r1, #91	@ 0x5b
 801098a:	f000 f8e5 	bl	8010b58 <__assert_func>
 801098e:	e9c0 4400 	strd	r4, r4, [r0]
 8010992:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010996:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801099a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801099e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80109a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80109a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80109aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80109ae:	6184      	str	r4, [r0, #24]
 80109b0:	7704      	strb	r4, [r0, #28]
 80109b2:	6244      	str	r4, [r0, #36]	@ 0x24
 80109b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80109b6:	4631      	mov	r1, r6
 80109b8:	4628      	mov	r0, r5
 80109ba:	2301      	movs	r3, #1
 80109bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109c0:	f000 b806 	b.w	80109d0 <__strtok_r>
 80109c4:	200000c4 	.word	0x200000c4
 80109c8:	08015bc8 	.word	0x08015bc8
 80109cc:	08015bdf 	.word	0x08015bdf

080109d0 <__strtok_r>:
 80109d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109d2:	4604      	mov	r4, r0
 80109d4:	b908      	cbnz	r0, 80109da <__strtok_r+0xa>
 80109d6:	6814      	ldr	r4, [r2, #0]
 80109d8:	b144      	cbz	r4, 80109ec <__strtok_r+0x1c>
 80109da:	4620      	mov	r0, r4
 80109dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80109e0:	460f      	mov	r7, r1
 80109e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80109e6:	b91e      	cbnz	r6, 80109f0 <__strtok_r+0x20>
 80109e8:	b965      	cbnz	r5, 8010a04 <__strtok_r+0x34>
 80109ea:	6015      	str	r5, [r2, #0]
 80109ec:	2000      	movs	r0, #0
 80109ee:	e005      	b.n	80109fc <__strtok_r+0x2c>
 80109f0:	42b5      	cmp	r5, r6
 80109f2:	d1f6      	bne.n	80109e2 <__strtok_r+0x12>
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d1f0      	bne.n	80109da <__strtok_r+0xa>
 80109f8:	6014      	str	r4, [r2, #0]
 80109fa:	7003      	strb	r3, [r0, #0]
 80109fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109fe:	461c      	mov	r4, r3
 8010a00:	e00c      	b.n	8010a1c <__strtok_r+0x4c>
 8010a02:	b915      	cbnz	r5, 8010a0a <__strtok_r+0x3a>
 8010a04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010a08:	460e      	mov	r6, r1
 8010a0a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010a0e:	42ab      	cmp	r3, r5
 8010a10:	d1f7      	bne.n	8010a02 <__strtok_r+0x32>
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d0f3      	beq.n	80109fe <__strtok_r+0x2e>
 8010a16:	2300      	movs	r3, #0
 8010a18:	f804 3c01 	strb.w	r3, [r4, #-1]
 8010a1c:	6014      	str	r4, [r2, #0]
 8010a1e:	e7ed      	b.n	80109fc <__strtok_r+0x2c>

08010a20 <_localeconv_r>:
 8010a20:	4800      	ldr	r0, [pc, #0]	@ (8010a24 <_localeconv_r+0x4>)
 8010a22:	4770      	bx	lr
 8010a24:	20000204 	.word	0x20000204

08010a28 <_close_r>:
 8010a28:	b538      	push	{r3, r4, r5, lr}
 8010a2a:	4d06      	ldr	r5, [pc, #24]	@ (8010a44 <_close_r+0x1c>)
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	4604      	mov	r4, r0
 8010a30:	4608      	mov	r0, r1
 8010a32:	602b      	str	r3, [r5, #0]
 8010a34:	f7f4 fbe2 	bl	80051fc <_close>
 8010a38:	1c43      	adds	r3, r0, #1
 8010a3a:	d102      	bne.n	8010a42 <_close_r+0x1a>
 8010a3c:	682b      	ldr	r3, [r5, #0]
 8010a3e:	b103      	cbz	r3, 8010a42 <_close_r+0x1a>
 8010a40:	6023      	str	r3, [r4, #0]
 8010a42:	bd38      	pop	{r3, r4, r5, pc}
 8010a44:	20005728 	.word	0x20005728

08010a48 <_lseek_r>:
 8010a48:	b538      	push	{r3, r4, r5, lr}
 8010a4a:	4d07      	ldr	r5, [pc, #28]	@ (8010a68 <_lseek_r+0x20>)
 8010a4c:	4604      	mov	r4, r0
 8010a4e:	4608      	mov	r0, r1
 8010a50:	4611      	mov	r1, r2
 8010a52:	2200      	movs	r2, #0
 8010a54:	602a      	str	r2, [r5, #0]
 8010a56:	461a      	mov	r2, r3
 8010a58:	f7f4 fbf7 	bl	800524a <_lseek>
 8010a5c:	1c43      	adds	r3, r0, #1
 8010a5e:	d102      	bne.n	8010a66 <_lseek_r+0x1e>
 8010a60:	682b      	ldr	r3, [r5, #0]
 8010a62:	b103      	cbz	r3, 8010a66 <_lseek_r+0x1e>
 8010a64:	6023      	str	r3, [r4, #0]
 8010a66:	bd38      	pop	{r3, r4, r5, pc}
 8010a68:	20005728 	.word	0x20005728

08010a6c <_read_r>:
 8010a6c:	b538      	push	{r3, r4, r5, lr}
 8010a6e:	4d07      	ldr	r5, [pc, #28]	@ (8010a8c <_read_r+0x20>)
 8010a70:	4604      	mov	r4, r0
 8010a72:	4608      	mov	r0, r1
 8010a74:	4611      	mov	r1, r2
 8010a76:	2200      	movs	r2, #0
 8010a78:	602a      	str	r2, [r5, #0]
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	f7f4 fba1 	bl	80051c2 <_read>
 8010a80:	1c43      	adds	r3, r0, #1
 8010a82:	d102      	bne.n	8010a8a <_read_r+0x1e>
 8010a84:	682b      	ldr	r3, [r5, #0]
 8010a86:	b103      	cbz	r3, 8010a8a <_read_r+0x1e>
 8010a88:	6023      	str	r3, [r4, #0]
 8010a8a:	bd38      	pop	{r3, r4, r5, pc}
 8010a8c:	20005728 	.word	0x20005728

08010a90 <_sbrk_r>:
 8010a90:	b538      	push	{r3, r4, r5, lr}
 8010a92:	4d06      	ldr	r5, [pc, #24]	@ (8010aac <_sbrk_r+0x1c>)
 8010a94:	2300      	movs	r3, #0
 8010a96:	4604      	mov	r4, r0
 8010a98:	4608      	mov	r0, r1
 8010a9a:	602b      	str	r3, [r5, #0]
 8010a9c:	f7f4 fbe2 	bl	8005264 <_sbrk>
 8010aa0:	1c43      	adds	r3, r0, #1
 8010aa2:	d102      	bne.n	8010aaa <_sbrk_r+0x1a>
 8010aa4:	682b      	ldr	r3, [r5, #0]
 8010aa6:	b103      	cbz	r3, 8010aaa <_sbrk_r+0x1a>
 8010aa8:	6023      	str	r3, [r4, #0]
 8010aaa:	bd38      	pop	{r3, r4, r5, pc}
 8010aac:	20005728 	.word	0x20005728

08010ab0 <_write_r>:
 8010ab0:	b538      	push	{r3, r4, r5, lr}
 8010ab2:	4d07      	ldr	r5, [pc, #28]	@ (8010ad0 <_write_r+0x20>)
 8010ab4:	4604      	mov	r4, r0
 8010ab6:	4608      	mov	r0, r1
 8010ab8:	4611      	mov	r1, r2
 8010aba:	2200      	movs	r2, #0
 8010abc:	602a      	str	r2, [r5, #0]
 8010abe:	461a      	mov	r2, r3
 8010ac0:	f7f4 ff5c 	bl	800597c <_write>
 8010ac4:	1c43      	adds	r3, r0, #1
 8010ac6:	d102      	bne.n	8010ace <_write_r+0x1e>
 8010ac8:	682b      	ldr	r3, [r5, #0]
 8010aca:	b103      	cbz	r3, 8010ace <_write_r+0x1e>
 8010acc:	6023      	str	r3, [r4, #0]
 8010ace:	bd38      	pop	{r3, r4, r5, pc}
 8010ad0:	20005728 	.word	0x20005728

08010ad4 <__errno>:
 8010ad4:	4b01      	ldr	r3, [pc, #4]	@ (8010adc <__errno+0x8>)
 8010ad6:	6818      	ldr	r0, [r3, #0]
 8010ad8:	4770      	bx	lr
 8010ada:	bf00      	nop
 8010adc:	200000c4 	.word	0x200000c4

08010ae0 <__libc_init_array>:
 8010ae0:	b570      	push	{r4, r5, r6, lr}
 8010ae2:	4d0d      	ldr	r5, [pc, #52]	@ (8010b18 <__libc_init_array+0x38>)
 8010ae4:	4c0d      	ldr	r4, [pc, #52]	@ (8010b1c <__libc_init_array+0x3c>)
 8010ae6:	1b64      	subs	r4, r4, r5
 8010ae8:	10a4      	asrs	r4, r4, #2
 8010aea:	2600      	movs	r6, #0
 8010aec:	42a6      	cmp	r6, r4
 8010aee:	d109      	bne.n	8010b04 <__libc_init_array+0x24>
 8010af0:	4d0b      	ldr	r5, [pc, #44]	@ (8010b20 <__libc_init_array+0x40>)
 8010af2:	4c0c      	ldr	r4, [pc, #48]	@ (8010b24 <__libc_init_array+0x44>)
 8010af4:	f004 fe24 	bl	8015740 <_init>
 8010af8:	1b64      	subs	r4, r4, r5
 8010afa:	10a4      	asrs	r4, r4, #2
 8010afc:	2600      	movs	r6, #0
 8010afe:	42a6      	cmp	r6, r4
 8010b00:	d105      	bne.n	8010b0e <__libc_init_array+0x2e>
 8010b02:	bd70      	pop	{r4, r5, r6, pc}
 8010b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b08:	4798      	blx	r3
 8010b0a:	3601      	adds	r6, #1
 8010b0c:	e7ee      	b.n	8010aec <__libc_init_array+0xc>
 8010b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b12:	4798      	blx	r3
 8010b14:	3601      	adds	r6, #1
 8010b16:	e7f2      	b.n	8010afe <__libc_init_array+0x1e>
 8010b18:	08016068 	.word	0x08016068
 8010b1c:	08016068 	.word	0x08016068
 8010b20:	08016068 	.word	0x08016068
 8010b24:	0801606c 	.word	0x0801606c

08010b28 <__retarget_lock_init_recursive>:
 8010b28:	4770      	bx	lr

08010b2a <__retarget_lock_acquire_recursive>:
 8010b2a:	4770      	bx	lr

08010b2c <__retarget_lock_release_recursive>:
 8010b2c:	4770      	bx	lr

08010b2e <memcpy>:
 8010b2e:	440a      	add	r2, r1
 8010b30:	4291      	cmp	r1, r2
 8010b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b36:	d100      	bne.n	8010b3a <memcpy+0xc>
 8010b38:	4770      	bx	lr
 8010b3a:	b510      	push	{r4, lr}
 8010b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b44:	4291      	cmp	r1, r2
 8010b46:	d1f9      	bne.n	8010b3c <memcpy+0xe>
 8010b48:	bd10      	pop	{r4, pc}
	...

08010b4c <nanf>:
 8010b4c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010b54 <nanf+0x8>
 8010b50:	4770      	bx	lr
 8010b52:	bf00      	nop
 8010b54:	7fc00000 	.word	0x7fc00000

08010b58 <__assert_func>:
 8010b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b5a:	4614      	mov	r4, r2
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	4b09      	ldr	r3, [pc, #36]	@ (8010b84 <__assert_func+0x2c>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	4605      	mov	r5, r0
 8010b64:	68d8      	ldr	r0, [r3, #12]
 8010b66:	b954      	cbnz	r4, 8010b7e <__assert_func+0x26>
 8010b68:	4b07      	ldr	r3, [pc, #28]	@ (8010b88 <__assert_func+0x30>)
 8010b6a:	461c      	mov	r4, r3
 8010b6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b70:	9100      	str	r1, [sp, #0]
 8010b72:	462b      	mov	r3, r5
 8010b74:	4905      	ldr	r1, [pc, #20]	@ (8010b8c <__assert_func+0x34>)
 8010b76:	f002 fefb 	bl	8013970 <fiprintf>
 8010b7a:	f002 ffa1 	bl	8013ac0 <abort>
 8010b7e:	4b04      	ldr	r3, [pc, #16]	@ (8010b90 <__assert_func+0x38>)
 8010b80:	e7f4      	b.n	8010b6c <__assert_func+0x14>
 8010b82:	bf00      	nop
 8010b84:	200000c4 	.word	0x200000c4
 8010b88:	08015c74 	.word	0x08015c74
 8010b8c:	08015c46 	.word	0x08015c46
 8010b90:	08015c39 	.word	0x08015c39

08010b94 <quorem>:
 8010b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b98:	6903      	ldr	r3, [r0, #16]
 8010b9a:	690c      	ldr	r4, [r1, #16]
 8010b9c:	42a3      	cmp	r3, r4
 8010b9e:	4607      	mov	r7, r0
 8010ba0:	db7e      	blt.n	8010ca0 <quorem+0x10c>
 8010ba2:	3c01      	subs	r4, #1
 8010ba4:	f101 0814 	add.w	r8, r1, #20
 8010ba8:	00a3      	lsls	r3, r4, #2
 8010baa:	f100 0514 	add.w	r5, r0, #20
 8010bae:	9300      	str	r3, [sp, #0]
 8010bb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010bb4:	9301      	str	r3, [sp, #4]
 8010bb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010bba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010bc6:	fbb2 f6f3 	udiv	r6, r2, r3
 8010bca:	d32e      	bcc.n	8010c2a <quorem+0x96>
 8010bcc:	f04f 0a00 	mov.w	sl, #0
 8010bd0:	46c4      	mov	ip, r8
 8010bd2:	46ae      	mov	lr, r5
 8010bd4:	46d3      	mov	fp, sl
 8010bd6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010bda:	b298      	uxth	r0, r3
 8010bdc:	fb06 a000 	mla	r0, r6, r0, sl
 8010be0:	0c02      	lsrs	r2, r0, #16
 8010be2:	0c1b      	lsrs	r3, r3, #16
 8010be4:	fb06 2303 	mla	r3, r6, r3, r2
 8010be8:	f8de 2000 	ldr.w	r2, [lr]
 8010bec:	b280      	uxth	r0, r0
 8010bee:	b292      	uxth	r2, r2
 8010bf0:	1a12      	subs	r2, r2, r0
 8010bf2:	445a      	add	r2, fp
 8010bf4:	f8de 0000 	ldr.w	r0, [lr]
 8010bf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010c02:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010c06:	b292      	uxth	r2, r2
 8010c08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010c0c:	45e1      	cmp	r9, ip
 8010c0e:	f84e 2b04 	str.w	r2, [lr], #4
 8010c12:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010c16:	d2de      	bcs.n	8010bd6 <quorem+0x42>
 8010c18:	9b00      	ldr	r3, [sp, #0]
 8010c1a:	58eb      	ldr	r3, [r5, r3]
 8010c1c:	b92b      	cbnz	r3, 8010c2a <quorem+0x96>
 8010c1e:	9b01      	ldr	r3, [sp, #4]
 8010c20:	3b04      	subs	r3, #4
 8010c22:	429d      	cmp	r5, r3
 8010c24:	461a      	mov	r2, r3
 8010c26:	d32f      	bcc.n	8010c88 <quorem+0xf4>
 8010c28:	613c      	str	r4, [r7, #16]
 8010c2a:	4638      	mov	r0, r7
 8010c2c:	f001 f90e 	bl	8011e4c <__mcmp>
 8010c30:	2800      	cmp	r0, #0
 8010c32:	db25      	blt.n	8010c80 <quorem+0xec>
 8010c34:	4629      	mov	r1, r5
 8010c36:	2000      	movs	r0, #0
 8010c38:	f858 2b04 	ldr.w	r2, [r8], #4
 8010c3c:	f8d1 c000 	ldr.w	ip, [r1]
 8010c40:	fa1f fe82 	uxth.w	lr, r2
 8010c44:	fa1f f38c 	uxth.w	r3, ip
 8010c48:	eba3 030e 	sub.w	r3, r3, lr
 8010c4c:	4403      	add	r3, r0
 8010c4e:	0c12      	lsrs	r2, r2, #16
 8010c50:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010c54:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010c58:	b29b      	uxth	r3, r3
 8010c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c5e:	45c1      	cmp	r9, r8
 8010c60:	f841 3b04 	str.w	r3, [r1], #4
 8010c64:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010c68:	d2e6      	bcs.n	8010c38 <quorem+0xa4>
 8010c6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c72:	b922      	cbnz	r2, 8010c7e <quorem+0xea>
 8010c74:	3b04      	subs	r3, #4
 8010c76:	429d      	cmp	r5, r3
 8010c78:	461a      	mov	r2, r3
 8010c7a:	d30b      	bcc.n	8010c94 <quorem+0x100>
 8010c7c:	613c      	str	r4, [r7, #16]
 8010c7e:	3601      	adds	r6, #1
 8010c80:	4630      	mov	r0, r6
 8010c82:	b003      	add	sp, #12
 8010c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c88:	6812      	ldr	r2, [r2, #0]
 8010c8a:	3b04      	subs	r3, #4
 8010c8c:	2a00      	cmp	r2, #0
 8010c8e:	d1cb      	bne.n	8010c28 <quorem+0x94>
 8010c90:	3c01      	subs	r4, #1
 8010c92:	e7c6      	b.n	8010c22 <quorem+0x8e>
 8010c94:	6812      	ldr	r2, [r2, #0]
 8010c96:	3b04      	subs	r3, #4
 8010c98:	2a00      	cmp	r2, #0
 8010c9a:	d1ef      	bne.n	8010c7c <quorem+0xe8>
 8010c9c:	3c01      	subs	r4, #1
 8010c9e:	e7ea      	b.n	8010c76 <quorem+0xe2>
 8010ca0:	2000      	movs	r0, #0
 8010ca2:	e7ee      	b.n	8010c82 <quorem+0xee>
 8010ca4:	0000      	movs	r0, r0
	...

08010ca8 <_dtoa_r>:
 8010ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cac:	69c7      	ldr	r7, [r0, #28]
 8010cae:	b099      	sub	sp, #100	@ 0x64
 8010cb0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010cb4:	ec55 4b10 	vmov	r4, r5, d0
 8010cb8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010cba:	9109      	str	r1, [sp, #36]	@ 0x24
 8010cbc:	4683      	mov	fp, r0
 8010cbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8010cc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010cc2:	b97f      	cbnz	r7, 8010ce4 <_dtoa_r+0x3c>
 8010cc4:	2010      	movs	r0, #16
 8010cc6:	f7fe fd21 	bl	800f70c <malloc>
 8010cca:	4602      	mov	r2, r0
 8010ccc:	f8cb 001c 	str.w	r0, [fp, #28]
 8010cd0:	b920      	cbnz	r0, 8010cdc <_dtoa_r+0x34>
 8010cd2:	4ba7      	ldr	r3, [pc, #668]	@ (8010f70 <_dtoa_r+0x2c8>)
 8010cd4:	21ef      	movs	r1, #239	@ 0xef
 8010cd6:	48a7      	ldr	r0, [pc, #668]	@ (8010f74 <_dtoa_r+0x2cc>)
 8010cd8:	f7ff ff3e 	bl	8010b58 <__assert_func>
 8010cdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010ce0:	6007      	str	r7, [r0, #0]
 8010ce2:	60c7      	str	r7, [r0, #12]
 8010ce4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010ce8:	6819      	ldr	r1, [r3, #0]
 8010cea:	b159      	cbz	r1, 8010d04 <_dtoa_r+0x5c>
 8010cec:	685a      	ldr	r2, [r3, #4]
 8010cee:	604a      	str	r2, [r1, #4]
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	4093      	lsls	r3, r2
 8010cf4:	608b      	str	r3, [r1, #8]
 8010cf6:	4658      	mov	r0, fp
 8010cf8:	f000 fe24 	bl	8011944 <_Bfree>
 8010cfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010d00:	2200      	movs	r2, #0
 8010d02:	601a      	str	r2, [r3, #0]
 8010d04:	1e2b      	subs	r3, r5, #0
 8010d06:	bfb9      	ittee	lt
 8010d08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010d0c:	9303      	strlt	r3, [sp, #12]
 8010d0e:	2300      	movge	r3, #0
 8010d10:	6033      	strge	r3, [r6, #0]
 8010d12:	9f03      	ldr	r7, [sp, #12]
 8010d14:	4b98      	ldr	r3, [pc, #608]	@ (8010f78 <_dtoa_r+0x2d0>)
 8010d16:	bfbc      	itt	lt
 8010d18:	2201      	movlt	r2, #1
 8010d1a:	6032      	strlt	r2, [r6, #0]
 8010d1c:	43bb      	bics	r3, r7
 8010d1e:	d112      	bne.n	8010d46 <_dtoa_r+0x9e>
 8010d20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010d22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010d26:	6013      	str	r3, [r2, #0]
 8010d28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010d2c:	4323      	orrs	r3, r4
 8010d2e:	f000 854d 	beq.w	80117cc <_dtoa_r+0xb24>
 8010d32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8010f8c <_dtoa_r+0x2e4>
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	f000 854f 	beq.w	80117dc <_dtoa_r+0xb34>
 8010d3e:	f10a 0303 	add.w	r3, sl, #3
 8010d42:	f000 bd49 	b.w	80117d8 <_dtoa_r+0xb30>
 8010d46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	ec51 0b17 	vmov	r0, r1, d7
 8010d50:	2300      	movs	r3, #0
 8010d52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010d56:	f7ef fec7 	bl	8000ae8 <__aeabi_dcmpeq>
 8010d5a:	4680      	mov	r8, r0
 8010d5c:	b158      	cbz	r0, 8010d76 <_dtoa_r+0xce>
 8010d5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010d60:	2301      	movs	r3, #1
 8010d62:	6013      	str	r3, [r2, #0]
 8010d64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010d66:	b113      	cbz	r3, 8010d6e <_dtoa_r+0xc6>
 8010d68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010d6a:	4b84      	ldr	r3, [pc, #528]	@ (8010f7c <_dtoa_r+0x2d4>)
 8010d6c:	6013      	str	r3, [r2, #0]
 8010d6e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010f90 <_dtoa_r+0x2e8>
 8010d72:	f000 bd33 	b.w	80117dc <_dtoa_r+0xb34>
 8010d76:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010d7a:	aa16      	add	r2, sp, #88	@ 0x58
 8010d7c:	a917      	add	r1, sp, #92	@ 0x5c
 8010d7e:	4658      	mov	r0, fp
 8010d80:	f001 f984 	bl	801208c <__d2b>
 8010d84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010d88:	4681      	mov	r9, r0
 8010d8a:	2e00      	cmp	r6, #0
 8010d8c:	d077      	beq.n	8010e7e <_dtoa_r+0x1d6>
 8010d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d90:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010d9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010da0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010da4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010da8:	4619      	mov	r1, r3
 8010daa:	2200      	movs	r2, #0
 8010dac:	4b74      	ldr	r3, [pc, #464]	@ (8010f80 <_dtoa_r+0x2d8>)
 8010dae:	f7ef fa7b 	bl	80002a8 <__aeabi_dsub>
 8010db2:	a369      	add	r3, pc, #420	@ (adr r3, 8010f58 <_dtoa_r+0x2b0>)
 8010db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db8:	f7ef fc2e 	bl	8000618 <__aeabi_dmul>
 8010dbc:	a368      	add	r3, pc, #416	@ (adr r3, 8010f60 <_dtoa_r+0x2b8>)
 8010dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc2:	f7ef fa73 	bl	80002ac <__adddf3>
 8010dc6:	4604      	mov	r4, r0
 8010dc8:	4630      	mov	r0, r6
 8010dca:	460d      	mov	r5, r1
 8010dcc:	f7ef fbba 	bl	8000544 <__aeabi_i2d>
 8010dd0:	a365      	add	r3, pc, #404	@ (adr r3, 8010f68 <_dtoa_r+0x2c0>)
 8010dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd6:	f7ef fc1f 	bl	8000618 <__aeabi_dmul>
 8010dda:	4602      	mov	r2, r0
 8010ddc:	460b      	mov	r3, r1
 8010dde:	4620      	mov	r0, r4
 8010de0:	4629      	mov	r1, r5
 8010de2:	f7ef fa63 	bl	80002ac <__adddf3>
 8010de6:	4604      	mov	r4, r0
 8010de8:	460d      	mov	r5, r1
 8010dea:	f7ef fec5 	bl	8000b78 <__aeabi_d2iz>
 8010dee:	2200      	movs	r2, #0
 8010df0:	4607      	mov	r7, r0
 8010df2:	2300      	movs	r3, #0
 8010df4:	4620      	mov	r0, r4
 8010df6:	4629      	mov	r1, r5
 8010df8:	f7ef fe80 	bl	8000afc <__aeabi_dcmplt>
 8010dfc:	b140      	cbz	r0, 8010e10 <_dtoa_r+0x168>
 8010dfe:	4638      	mov	r0, r7
 8010e00:	f7ef fba0 	bl	8000544 <__aeabi_i2d>
 8010e04:	4622      	mov	r2, r4
 8010e06:	462b      	mov	r3, r5
 8010e08:	f7ef fe6e 	bl	8000ae8 <__aeabi_dcmpeq>
 8010e0c:	b900      	cbnz	r0, 8010e10 <_dtoa_r+0x168>
 8010e0e:	3f01      	subs	r7, #1
 8010e10:	2f16      	cmp	r7, #22
 8010e12:	d851      	bhi.n	8010eb8 <_dtoa_r+0x210>
 8010e14:	4b5b      	ldr	r3, [pc, #364]	@ (8010f84 <_dtoa_r+0x2dc>)
 8010e16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010e22:	f7ef fe6b 	bl	8000afc <__aeabi_dcmplt>
 8010e26:	2800      	cmp	r0, #0
 8010e28:	d048      	beq.n	8010ebc <_dtoa_r+0x214>
 8010e2a:	3f01      	subs	r7, #1
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010e30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010e32:	1b9b      	subs	r3, r3, r6
 8010e34:	1e5a      	subs	r2, r3, #1
 8010e36:	bf44      	itt	mi
 8010e38:	f1c3 0801 	rsbmi	r8, r3, #1
 8010e3c:	2300      	movmi	r3, #0
 8010e3e:	9208      	str	r2, [sp, #32]
 8010e40:	bf54      	ite	pl
 8010e42:	f04f 0800 	movpl.w	r8, #0
 8010e46:	9308      	strmi	r3, [sp, #32]
 8010e48:	2f00      	cmp	r7, #0
 8010e4a:	db39      	blt.n	8010ec0 <_dtoa_r+0x218>
 8010e4c:	9b08      	ldr	r3, [sp, #32]
 8010e4e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010e50:	443b      	add	r3, r7
 8010e52:	9308      	str	r3, [sp, #32]
 8010e54:	2300      	movs	r3, #0
 8010e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e5a:	2b09      	cmp	r3, #9
 8010e5c:	d864      	bhi.n	8010f28 <_dtoa_r+0x280>
 8010e5e:	2b05      	cmp	r3, #5
 8010e60:	bfc4      	itt	gt
 8010e62:	3b04      	subgt	r3, #4
 8010e64:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e68:	f1a3 0302 	sub.w	r3, r3, #2
 8010e6c:	bfcc      	ite	gt
 8010e6e:	2400      	movgt	r4, #0
 8010e70:	2401      	movle	r4, #1
 8010e72:	2b03      	cmp	r3, #3
 8010e74:	d863      	bhi.n	8010f3e <_dtoa_r+0x296>
 8010e76:	e8df f003 	tbb	[pc, r3]
 8010e7a:	372a      	.short	0x372a
 8010e7c:	5535      	.short	0x5535
 8010e7e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010e82:	441e      	add	r6, r3
 8010e84:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010e88:	2b20      	cmp	r3, #32
 8010e8a:	bfc1      	itttt	gt
 8010e8c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010e90:	409f      	lslgt	r7, r3
 8010e92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010e96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010e9a:	bfd6      	itet	le
 8010e9c:	f1c3 0320 	rsble	r3, r3, #32
 8010ea0:	ea47 0003 	orrgt.w	r0, r7, r3
 8010ea4:	fa04 f003 	lslle.w	r0, r4, r3
 8010ea8:	f7ef fb3c 	bl	8000524 <__aeabi_ui2d>
 8010eac:	2201      	movs	r2, #1
 8010eae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010eb2:	3e01      	subs	r6, #1
 8010eb4:	9214      	str	r2, [sp, #80]	@ 0x50
 8010eb6:	e777      	b.n	8010da8 <_dtoa_r+0x100>
 8010eb8:	2301      	movs	r3, #1
 8010eba:	e7b8      	b.n	8010e2e <_dtoa_r+0x186>
 8010ebc:	9012      	str	r0, [sp, #72]	@ 0x48
 8010ebe:	e7b7      	b.n	8010e30 <_dtoa_r+0x188>
 8010ec0:	427b      	negs	r3, r7
 8010ec2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	eba8 0807 	sub.w	r8, r8, r7
 8010eca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010ecc:	e7c4      	b.n	8010e58 <_dtoa_r+0x1b0>
 8010ece:	2300      	movs	r3, #0
 8010ed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	dc35      	bgt.n	8010f44 <_dtoa_r+0x29c>
 8010ed8:	2301      	movs	r3, #1
 8010eda:	9300      	str	r3, [sp, #0]
 8010edc:	9307      	str	r3, [sp, #28]
 8010ede:	461a      	mov	r2, r3
 8010ee0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010ee2:	e00b      	b.n	8010efc <_dtoa_r+0x254>
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e7f3      	b.n	8010ed0 <_dtoa_r+0x228>
 8010ee8:	2300      	movs	r3, #0
 8010eea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010eec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010eee:	18fb      	adds	r3, r7, r3
 8010ef0:	9300      	str	r3, [sp, #0]
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	2b01      	cmp	r3, #1
 8010ef6:	9307      	str	r3, [sp, #28]
 8010ef8:	bfb8      	it	lt
 8010efa:	2301      	movlt	r3, #1
 8010efc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010f00:	2100      	movs	r1, #0
 8010f02:	2204      	movs	r2, #4
 8010f04:	f102 0514 	add.w	r5, r2, #20
 8010f08:	429d      	cmp	r5, r3
 8010f0a:	d91f      	bls.n	8010f4c <_dtoa_r+0x2a4>
 8010f0c:	6041      	str	r1, [r0, #4]
 8010f0e:	4658      	mov	r0, fp
 8010f10:	f000 fcd8 	bl	80118c4 <_Balloc>
 8010f14:	4682      	mov	sl, r0
 8010f16:	2800      	cmp	r0, #0
 8010f18:	d13c      	bne.n	8010f94 <_dtoa_r+0x2ec>
 8010f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8010f88 <_dtoa_r+0x2e0>)
 8010f1c:	4602      	mov	r2, r0
 8010f1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010f22:	e6d8      	b.n	8010cd6 <_dtoa_r+0x2e>
 8010f24:	2301      	movs	r3, #1
 8010f26:	e7e0      	b.n	8010eea <_dtoa_r+0x242>
 8010f28:	2401      	movs	r4, #1
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010f30:	f04f 33ff 	mov.w	r3, #4294967295
 8010f34:	9300      	str	r3, [sp, #0]
 8010f36:	9307      	str	r3, [sp, #28]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	2312      	movs	r3, #18
 8010f3c:	e7d0      	b.n	8010ee0 <_dtoa_r+0x238>
 8010f3e:	2301      	movs	r3, #1
 8010f40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f42:	e7f5      	b.n	8010f30 <_dtoa_r+0x288>
 8010f44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010f46:	9300      	str	r3, [sp, #0]
 8010f48:	9307      	str	r3, [sp, #28]
 8010f4a:	e7d7      	b.n	8010efc <_dtoa_r+0x254>
 8010f4c:	3101      	adds	r1, #1
 8010f4e:	0052      	lsls	r2, r2, #1
 8010f50:	e7d8      	b.n	8010f04 <_dtoa_r+0x25c>
 8010f52:	bf00      	nop
 8010f54:	f3af 8000 	nop.w
 8010f58:	636f4361 	.word	0x636f4361
 8010f5c:	3fd287a7 	.word	0x3fd287a7
 8010f60:	8b60c8b3 	.word	0x8b60c8b3
 8010f64:	3fc68a28 	.word	0x3fc68a28
 8010f68:	509f79fb 	.word	0x509f79fb
 8010f6c:	3fd34413 	.word	0x3fd34413
 8010f70:	08015bc8 	.word	0x08015bc8
 8010f74:	08015c82 	.word	0x08015c82
 8010f78:	7ff00000 	.word	0x7ff00000
 8010f7c:	08015fc1 	.word	0x08015fc1
 8010f80:	3ff80000 	.word	0x3ff80000
 8010f84:	08015d78 	.word	0x08015d78
 8010f88:	08015cda 	.word	0x08015cda
 8010f8c:	08015c7e 	.word	0x08015c7e
 8010f90:	08015fc0 	.word	0x08015fc0
 8010f94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010f98:	6018      	str	r0, [r3, #0]
 8010f9a:	9b07      	ldr	r3, [sp, #28]
 8010f9c:	2b0e      	cmp	r3, #14
 8010f9e:	f200 80a4 	bhi.w	80110ea <_dtoa_r+0x442>
 8010fa2:	2c00      	cmp	r4, #0
 8010fa4:	f000 80a1 	beq.w	80110ea <_dtoa_r+0x442>
 8010fa8:	2f00      	cmp	r7, #0
 8010faa:	dd33      	ble.n	8011014 <_dtoa_r+0x36c>
 8010fac:	4bad      	ldr	r3, [pc, #692]	@ (8011264 <_dtoa_r+0x5bc>)
 8010fae:	f007 020f 	and.w	r2, r7, #15
 8010fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fb6:	ed93 7b00 	vldr	d7, [r3]
 8010fba:	05f8      	lsls	r0, r7, #23
 8010fbc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010fc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010fc4:	d516      	bpl.n	8010ff4 <_dtoa_r+0x34c>
 8010fc6:	4ba8      	ldr	r3, [pc, #672]	@ (8011268 <_dtoa_r+0x5c0>)
 8010fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010fd0:	f7ef fc4c 	bl	800086c <__aeabi_ddiv>
 8010fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fd8:	f004 040f 	and.w	r4, r4, #15
 8010fdc:	2603      	movs	r6, #3
 8010fde:	4da2      	ldr	r5, [pc, #648]	@ (8011268 <_dtoa_r+0x5c0>)
 8010fe0:	b954      	cbnz	r4, 8010ff8 <_dtoa_r+0x350>
 8010fe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010fea:	f7ef fc3f 	bl	800086c <__aeabi_ddiv>
 8010fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ff2:	e028      	b.n	8011046 <_dtoa_r+0x39e>
 8010ff4:	2602      	movs	r6, #2
 8010ff6:	e7f2      	b.n	8010fde <_dtoa_r+0x336>
 8010ff8:	07e1      	lsls	r1, r4, #31
 8010ffa:	d508      	bpl.n	801100e <_dtoa_r+0x366>
 8010ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011000:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011004:	f7ef fb08 	bl	8000618 <__aeabi_dmul>
 8011008:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801100c:	3601      	adds	r6, #1
 801100e:	1064      	asrs	r4, r4, #1
 8011010:	3508      	adds	r5, #8
 8011012:	e7e5      	b.n	8010fe0 <_dtoa_r+0x338>
 8011014:	f000 80d2 	beq.w	80111bc <_dtoa_r+0x514>
 8011018:	427c      	negs	r4, r7
 801101a:	4b92      	ldr	r3, [pc, #584]	@ (8011264 <_dtoa_r+0x5bc>)
 801101c:	4d92      	ldr	r5, [pc, #584]	@ (8011268 <_dtoa_r+0x5c0>)
 801101e:	f004 020f 	and.w	r2, r4, #15
 8011022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801102a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801102e:	f7ef faf3 	bl	8000618 <__aeabi_dmul>
 8011032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011036:	1124      	asrs	r4, r4, #4
 8011038:	2300      	movs	r3, #0
 801103a:	2602      	movs	r6, #2
 801103c:	2c00      	cmp	r4, #0
 801103e:	f040 80b2 	bne.w	80111a6 <_dtoa_r+0x4fe>
 8011042:	2b00      	cmp	r3, #0
 8011044:	d1d3      	bne.n	8010fee <_dtoa_r+0x346>
 8011046:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011048:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801104c:	2b00      	cmp	r3, #0
 801104e:	f000 80b7 	beq.w	80111c0 <_dtoa_r+0x518>
 8011052:	4b86      	ldr	r3, [pc, #536]	@ (801126c <_dtoa_r+0x5c4>)
 8011054:	2200      	movs	r2, #0
 8011056:	4620      	mov	r0, r4
 8011058:	4629      	mov	r1, r5
 801105a:	f7ef fd4f 	bl	8000afc <__aeabi_dcmplt>
 801105e:	2800      	cmp	r0, #0
 8011060:	f000 80ae 	beq.w	80111c0 <_dtoa_r+0x518>
 8011064:	9b07      	ldr	r3, [sp, #28]
 8011066:	2b00      	cmp	r3, #0
 8011068:	f000 80aa 	beq.w	80111c0 <_dtoa_r+0x518>
 801106c:	9b00      	ldr	r3, [sp, #0]
 801106e:	2b00      	cmp	r3, #0
 8011070:	dd37      	ble.n	80110e2 <_dtoa_r+0x43a>
 8011072:	1e7b      	subs	r3, r7, #1
 8011074:	9304      	str	r3, [sp, #16]
 8011076:	4620      	mov	r0, r4
 8011078:	4b7d      	ldr	r3, [pc, #500]	@ (8011270 <_dtoa_r+0x5c8>)
 801107a:	2200      	movs	r2, #0
 801107c:	4629      	mov	r1, r5
 801107e:	f7ef facb 	bl	8000618 <__aeabi_dmul>
 8011082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011086:	9c00      	ldr	r4, [sp, #0]
 8011088:	3601      	adds	r6, #1
 801108a:	4630      	mov	r0, r6
 801108c:	f7ef fa5a 	bl	8000544 <__aeabi_i2d>
 8011090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011094:	f7ef fac0 	bl	8000618 <__aeabi_dmul>
 8011098:	4b76      	ldr	r3, [pc, #472]	@ (8011274 <_dtoa_r+0x5cc>)
 801109a:	2200      	movs	r2, #0
 801109c:	f7ef f906 	bl	80002ac <__adddf3>
 80110a0:	4605      	mov	r5, r0
 80110a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80110a6:	2c00      	cmp	r4, #0
 80110a8:	f040 808d 	bne.w	80111c6 <_dtoa_r+0x51e>
 80110ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110b0:	4b71      	ldr	r3, [pc, #452]	@ (8011278 <_dtoa_r+0x5d0>)
 80110b2:	2200      	movs	r2, #0
 80110b4:	f7ef f8f8 	bl	80002a8 <__aeabi_dsub>
 80110b8:	4602      	mov	r2, r0
 80110ba:	460b      	mov	r3, r1
 80110bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80110c0:	462a      	mov	r2, r5
 80110c2:	4633      	mov	r3, r6
 80110c4:	f7ef fd38 	bl	8000b38 <__aeabi_dcmpgt>
 80110c8:	2800      	cmp	r0, #0
 80110ca:	f040 828b 	bne.w	80115e4 <_dtoa_r+0x93c>
 80110ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110d2:	462a      	mov	r2, r5
 80110d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80110d8:	f7ef fd10 	bl	8000afc <__aeabi_dcmplt>
 80110dc:	2800      	cmp	r0, #0
 80110de:	f040 8128 	bne.w	8011332 <_dtoa_r+0x68a>
 80110e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80110e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80110ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	f2c0 815a 	blt.w	80113a6 <_dtoa_r+0x6fe>
 80110f2:	2f0e      	cmp	r7, #14
 80110f4:	f300 8157 	bgt.w	80113a6 <_dtoa_r+0x6fe>
 80110f8:	4b5a      	ldr	r3, [pc, #360]	@ (8011264 <_dtoa_r+0x5bc>)
 80110fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80110fe:	ed93 7b00 	vldr	d7, [r3]
 8011102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011104:	2b00      	cmp	r3, #0
 8011106:	ed8d 7b00 	vstr	d7, [sp]
 801110a:	da03      	bge.n	8011114 <_dtoa_r+0x46c>
 801110c:	9b07      	ldr	r3, [sp, #28]
 801110e:	2b00      	cmp	r3, #0
 8011110:	f340 8101 	ble.w	8011316 <_dtoa_r+0x66e>
 8011114:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011118:	4656      	mov	r6, sl
 801111a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801111e:	4620      	mov	r0, r4
 8011120:	4629      	mov	r1, r5
 8011122:	f7ef fba3 	bl	800086c <__aeabi_ddiv>
 8011126:	f7ef fd27 	bl	8000b78 <__aeabi_d2iz>
 801112a:	4680      	mov	r8, r0
 801112c:	f7ef fa0a 	bl	8000544 <__aeabi_i2d>
 8011130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011134:	f7ef fa70 	bl	8000618 <__aeabi_dmul>
 8011138:	4602      	mov	r2, r0
 801113a:	460b      	mov	r3, r1
 801113c:	4620      	mov	r0, r4
 801113e:	4629      	mov	r1, r5
 8011140:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011144:	f7ef f8b0 	bl	80002a8 <__aeabi_dsub>
 8011148:	f806 4b01 	strb.w	r4, [r6], #1
 801114c:	9d07      	ldr	r5, [sp, #28]
 801114e:	eba6 040a 	sub.w	r4, r6, sl
 8011152:	42a5      	cmp	r5, r4
 8011154:	4602      	mov	r2, r0
 8011156:	460b      	mov	r3, r1
 8011158:	f040 8117 	bne.w	801138a <_dtoa_r+0x6e2>
 801115c:	f7ef f8a6 	bl	80002ac <__adddf3>
 8011160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011164:	4604      	mov	r4, r0
 8011166:	460d      	mov	r5, r1
 8011168:	f7ef fce6 	bl	8000b38 <__aeabi_dcmpgt>
 801116c:	2800      	cmp	r0, #0
 801116e:	f040 80f9 	bne.w	8011364 <_dtoa_r+0x6bc>
 8011172:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011176:	4620      	mov	r0, r4
 8011178:	4629      	mov	r1, r5
 801117a:	f7ef fcb5 	bl	8000ae8 <__aeabi_dcmpeq>
 801117e:	b118      	cbz	r0, 8011188 <_dtoa_r+0x4e0>
 8011180:	f018 0f01 	tst.w	r8, #1
 8011184:	f040 80ee 	bne.w	8011364 <_dtoa_r+0x6bc>
 8011188:	4649      	mov	r1, r9
 801118a:	4658      	mov	r0, fp
 801118c:	f000 fbda 	bl	8011944 <_Bfree>
 8011190:	2300      	movs	r3, #0
 8011192:	7033      	strb	r3, [r6, #0]
 8011194:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011196:	3701      	adds	r7, #1
 8011198:	601f      	str	r7, [r3, #0]
 801119a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801119c:	2b00      	cmp	r3, #0
 801119e:	f000 831d 	beq.w	80117dc <_dtoa_r+0xb34>
 80111a2:	601e      	str	r6, [r3, #0]
 80111a4:	e31a      	b.n	80117dc <_dtoa_r+0xb34>
 80111a6:	07e2      	lsls	r2, r4, #31
 80111a8:	d505      	bpl.n	80111b6 <_dtoa_r+0x50e>
 80111aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80111ae:	f7ef fa33 	bl	8000618 <__aeabi_dmul>
 80111b2:	3601      	adds	r6, #1
 80111b4:	2301      	movs	r3, #1
 80111b6:	1064      	asrs	r4, r4, #1
 80111b8:	3508      	adds	r5, #8
 80111ba:	e73f      	b.n	801103c <_dtoa_r+0x394>
 80111bc:	2602      	movs	r6, #2
 80111be:	e742      	b.n	8011046 <_dtoa_r+0x39e>
 80111c0:	9c07      	ldr	r4, [sp, #28]
 80111c2:	9704      	str	r7, [sp, #16]
 80111c4:	e761      	b.n	801108a <_dtoa_r+0x3e2>
 80111c6:	4b27      	ldr	r3, [pc, #156]	@ (8011264 <_dtoa_r+0x5bc>)
 80111c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80111ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80111ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80111d2:	4454      	add	r4, sl
 80111d4:	2900      	cmp	r1, #0
 80111d6:	d053      	beq.n	8011280 <_dtoa_r+0x5d8>
 80111d8:	4928      	ldr	r1, [pc, #160]	@ (801127c <_dtoa_r+0x5d4>)
 80111da:	2000      	movs	r0, #0
 80111dc:	f7ef fb46 	bl	800086c <__aeabi_ddiv>
 80111e0:	4633      	mov	r3, r6
 80111e2:	462a      	mov	r2, r5
 80111e4:	f7ef f860 	bl	80002a8 <__aeabi_dsub>
 80111e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80111ec:	4656      	mov	r6, sl
 80111ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111f2:	f7ef fcc1 	bl	8000b78 <__aeabi_d2iz>
 80111f6:	4605      	mov	r5, r0
 80111f8:	f7ef f9a4 	bl	8000544 <__aeabi_i2d>
 80111fc:	4602      	mov	r2, r0
 80111fe:	460b      	mov	r3, r1
 8011200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011204:	f7ef f850 	bl	80002a8 <__aeabi_dsub>
 8011208:	3530      	adds	r5, #48	@ 0x30
 801120a:	4602      	mov	r2, r0
 801120c:	460b      	mov	r3, r1
 801120e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011212:	f806 5b01 	strb.w	r5, [r6], #1
 8011216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801121a:	f7ef fc6f 	bl	8000afc <__aeabi_dcmplt>
 801121e:	2800      	cmp	r0, #0
 8011220:	d171      	bne.n	8011306 <_dtoa_r+0x65e>
 8011222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011226:	4911      	ldr	r1, [pc, #68]	@ (801126c <_dtoa_r+0x5c4>)
 8011228:	2000      	movs	r0, #0
 801122a:	f7ef f83d 	bl	80002a8 <__aeabi_dsub>
 801122e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011232:	f7ef fc63 	bl	8000afc <__aeabi_dcmplt>
 8011236:	2800      	cmp	r0, #0
 8011238:	f040 8095 	bne.w	8011366 <_dtoa_r+0x6be>
 801123c:	42a6      	cmp	r6, r4
 801123e:	f43f af50 	beq.w	80110e2 <_dtoa_r+0x43a>
 8011242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011246:	4b0a      	ldr	r3, [pc, #40]	@ (8011270 <_dtoa_r+0x5c8>)
 8011248:	2200      	movs	r2, #0
 801124a:	f7ef f9e5 	bl	8000618 <__aeabi_dmul>
 801124e:	4b08      	ldr	r3, [pc, #32]	@ (8011270 <_dtoa_r+0x5c8>)
 8011250:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011254:	2200      	movs	r2, #0
 8011256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801125a:	f7ef f9dd 	bl	8000618 <__aeabi_dmul>
 801125e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011262:	e7c4      	b.n	80111ee <_dtoa_r+0x546>
 8011264:	08015d78 	.word	0x08015d78
 8011268:	08015d50 	.word	0x08015d50
 801126c:	3ff00000 	.word	0x3ff00000
 8011270:	40240000 	.word	0x40240000
 8011274:	401c0000 	.word	0x401c0000
 8011278:	40140000 	.word	0x40140000
 801127c:	3fe00000 	.word	0x3fe00000
 8011280:	4631      	mov	r1, r6
 8011282:	4628      	mov	r0, r5
 8011284:	f7ef f9c8 	bl	8000618 <__aeabi_dmul>
 8011288:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801128c:	9415      	str	r4, [sp, #84]	@ 0x54
 801128e:	4656      	mov	r6, sl
 8011290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011294:	f7ef fc70 	bl	8000b78 <__aeabi_d2iz>
 8011298:	4605      	mov	r5, r0
 801129a:	f7ef f953 	bl	8000544 <__aeabi_i2d>
 801129e:	4602      	mov	r2, r0
 80112a0:	460b      	mov	r3, r1
 80112a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112a6:	f7ee ffff 	bl	80002a8 <__aeabi_dsub>
 80112aa:	3530      	adds	r5, #48	@ 0x30
 80112ac:	f806 5b01 	strb.w	r5, [r6], #1
 80112b0:	4602      	mov	r2, r0
 80112b2:	460b      	mov	r3, r1
 80112b4:	42a6      	cmp	r6, r4
 80112b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80112ba:	f04f 0200 	mov.w	r2, #0
 80112be:	d124      	bne.n	801130a <_dtoa_r+0x662>
 80112c0:	4bac      	ldr	r3, [pc, #688]	@ (8011574 <_dtoa_r+0x8cc>)
 80112c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80112c6:	f7ee fff1 	bl	80002ac <__adddf3>
 80112ca:	4602      	mov	r2, r0
 80112cc:	460b      	mov	r3, r1
 80112ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112d2:	f7ef fc31 	bl	8000b38 <__aeabi_dcmpgt>
 80112d6:	2800      	cmp	r0, #0
 80112d8:	d145      	bne.n	8011366 <_dtoa_r+0x6be>
 80112da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80112de:	49a5      	ldr	r1, [pc, #660]	@ (8011574 <_dtoa_r+0x8cc>)
 80112e0:	2000      	movs	r0, #0
 80112e2:	f7ee ffe1 	bl	80002a8 <__aeabi_dsub>
 80112e6:	4602      	mov	r2, r0
 80112e8:	460b      	mov	r3, r1
 80112ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112ee:	f7ef fc05 	bl	8000afc <__aeabi_dcmplt>
 80112f2:	2800      	cmp	r0, #0
 80112f4:	f43f aef5 	beq.w	80110e2 <_dtoa_r+0x43a>
 80112f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80112fa:	1e73      	subs	r3, r6, #1
 80112fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80112fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011302:	2b30      	cmp	r3, #48	@ 0x30
 8011304:	d0f8      	beq.n	80112f8 <_dtoa_r+0x650>
 8011306:	9f04      	ldr	r7, [sp, #16]
 8011308:	e73e      	b.n	8011188 <_dtoa_r+0x4e0>
 801130a:	4b9b      	ldr	r3, [pc, #620]	@ (8011578 <_dtoa_r+0x8d0>)
 801130c:	f7ef f984 	bl	8000618 <__aeabi_dmul>
 8011310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011314:	e7bc      	b.n	8011290 <_dtoa_r+0x5e8>
 8011316:	d10c      	bne.n	8011332 <_dtoa_r+0x68a>
 8011318:	4b98      	ldr	r3, [pc, #608]	@ (801157c <_dtoa_r+0x8d4>)
 801131a:	2200      	movs	r2, #0
 801131c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011320:	f7ef f97a 	bl	8000618 <__aeabi_dmul>
 8011324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011328:	f7ef fbfc 	bl	8000b24 <__aeabi_dcmpge>
 801132c:	2800      	cmp	r0, #0
 801132e:	f000 8157 	beq.w	80115e0 <_dtoa_r+0x938>
 8011332:	2400      	movs	r4, #0
 8011334:	4625      	mov	r5, r4
 8011336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011338:	43db      	mvns	r3, r3
 801133a:	9304      	str	r3, [sp, #16]
 801133c:	4656      	mov	r6, sl
 801133e:	2700      	movs	r7, #0
 8011340:	4621      	mov	r1, r4
 8011342:	4658      	mov	r0, fp
 8011344:	f000 fafe 	bl	8011944 <_Bfree>
 8011348:	2d00      	cmp	r5, #0
 801134a:	d0dc      	beq.n	8011306 <_dtoa_r+0x65e>
 801134c:	b12f      	cbz	r7, 801135a <_dtoa_r+0x6b2>
 801134e:	42af      	cmp	r7, r5
 8011350:	d003      	beq.n	801135a <_dtoa_r+0x6b2>
 8011352:	4639      	mov	r1, r7
 8011354:	4658      	mov	r0, fp
 8011356:	f000 faf5 	bl	8011944 <_Bfree>
 801135a:	4629      	mov	r1, r5
 801135c:	4658      	mov	r0, fp
 801135e:	f000 faf1 	bl	8011944 <_Bfree>
 8011362:	e7d0      	b.n	8011306 <_dtoa_r+0x65e>
 8011364:	9704      	str	r7, [sp, #16]
 8011366:	4633      	mov	r3, r6
 8011368:	461e      	mov	r6, r3
 801136a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801136e:	2a39      	cmp	r2, #57	@ 0x39
 8011370:	d107      	bne.n	8011382 <_dtoa_r+0x6da>
 8011372:	459a      	cmp	sl, r3
 8011374:	d1f8      	bne.n	8011368 <_dtoa_r+0x6c0>
 8011376:	9a04      	ldr	r2, [sp, #16]
 8011378:	3201      	adds	r2, #1
 801137a:	9204      	str	r2, [sp, #16]
 801137c:	2230      	movs	r2, #48	@ 0x30
 801137e:	f88a 2000 	strb.w	r2, [sl]
 8011382:	781a      	ldrb	r2, [r3, #0]
 8011384:	3201      	adds	r2, #1
 8011386:	701a      	strb	r2, [r3, #0]
 8011388:	e7bd      	b.n	8011306 <_dtoa_r+0x65e>
 801138a:	4b7b      	ldr	r3, [pc, #492]	@ (8011578 <_dtoa_r+0x8d0>)
 801138c:	2200      	movs	r2, #0
 801138e:	f7ef f943 	bl	8000618 <__aeabi_dmul>
 8011392:	2200      	movs	r2, #0
 8011394:	2300      	movs	r3, #0
 8011396:	4604      	mov	r4, r0
 8011398:	460d      	mov	r5, r1
 801139a:	f7ef fba5 	bl	8000ae8 <__aeabi_dcmpeq>
 801139e:	2800      	cmp	r0, #0
 80113a0:	f43f aebb 	beq.w	801111a <_dtoa_r+0x472>
 80113a4:	e6f0      	b.n	8011188 <_dtoa_r+0x4e0>
 80113a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80113a8:	2a00      	cmp	r2, #0
 80113aa:	f000 80db 	beq.w	8011564 <_dtoa_r+0x8bc>
 80113ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113b0:	2a01      	cmp	r2, #1
 80113b2:	f300 80bf 	bgt.w	8011534 <_dtoa_r+0x88c>
 80113b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80113b8:	2a00      	cmp	r2, #0
 80113ba:	f000 80b7 	beq.w	801152c <_dtoa_r+0x884>
 80113be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80113c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80113c4:	4646      	mov	r6, r8
 80113c6:	9a08      	ldr	r2, [sp, #32]
 80113c8:	2101      	movs	r1, #1
 80113ca:	441a      	add	r2, r3
 80113cc:	4658      	mov	r0, fp
 80113ce:	4498      	add	r8, r3
 80113d0:	9208      	str	r2, [sp, #32]
 80113d2:	f000 fbb5 	bl	8011b40 <__i2b>
 80113d6:	4605      	mov	r5, r0
 80113d8:	b15e      	cbz	r6, 80113f2 <_dtoa_r+0x74a>
 80113da:	9b08      	ldr	r3, [sp, #32]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	dd08      	ble.n	80113f2 <_dtoa_r+0x74a>
 80113e0:	42b3      	cmp	r3, r6
 80113e2:	9a08      	ldr	r2, [sp, #32]
 80113e4:	bfa8      	it	ge
 80113e6:	4633      	movge	r3, r6
 80113e8:	eba8 0803 	sub.w	r8, r8, r3
 80113ec:	1af6      	subs	r6, r6, r3
 80113ee:	1ad3      	subs	r3, r2, r3
 80113f0:	9308      	str	r3, [sp, #32]
 80113f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80113f4:	b1f3      	cbz	r3, 8011434 <_dtoa_r+0x78c>
 80113f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	f000 80b7 	beq.w	801156c <_dtoa_r+0x8c4>
 80113fe:	b18c      	cbz	r4, 8011424 <_dtoa_r+0x77c>
 8011400:	4629      	mov	r1, r5
 8011402:	4622      	mov	r2, r4
 8011404:	4658      	mov	r0, fp
 8011406:	f000 fc5b 	bl	8011cc0 <__pow5mult>
 801140a:	464a      	mov	r2, r9
 801140c:	4601      	mov	r1, r0
 801140e:	4605      	mov	r5, r0
 8011410:	4658      	mov	r0, fp
 8011412:	f000 fbab 	bl	8011b6c <__multiply>
 8011416:	4649      	mov	r1, r9
 8011418:	9004      	str	r0, [sp, #16]
 801141a:	4658      	mov	r0, fp
 801141c:	f000 fa92 	bl	8011944 <_Bfree>
 8011420:	9b04      	ldr	r3, [sp, #16]
 8011422:	4699      	mov	r9, r3
 8011424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011426:	1b1a      	subs	r2, r3, r4
 8011428:	d004      	beq.n	8011434 <_dtoa_r+0x78c>
 801142a:	4649      	mov	r1, r9
 801142c:	4658      	mov	r0, fp
 801142e:	f000 fc47 	bl	8011cc0 <__pow5mult>
 8011432:	4681      	mov	r9, r0
 8011434:	2101      	movs	r1, #1
 8011436:	4658      	mov	r0, fp
 8011438:	f000 fb82 	bl	8011b40 <__i2b>
 801143c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801143e:	4604      	mov	r4, r0
 8011440:	2b00      	cmp	r3, #0
 8011442:	f000 81cf 	beq.w	80117e4 <_dtoa_r+0xb3c>
 8011446:	461a      	mov	r2, r3
 8011448:	4601      	mov	r1, r0
 801144a:	4658      	mov	r0, fp
 801144c:	f000 fc38 	bl	8011cc0 <__pow5mult>
 8011450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011452:	2b01      	cmp	r3, #1
 8011454:	4604      	mov	r4, r0
 8011456:	f300 8095 	bgt.w	8011584 <_dtoa_r+0x8dc>
 801145a:	9b02      	ldr	r3, [sp, #8]
 801145c:	2b00      	cmp	r3, #0
 801145e:	f040 8087 	bne.w	8011570 <_dtoa_r+0x8c8>
 8011462:	9b03      	ldr	r3, [sp, #12]
 8011464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011468:	2b00      	cmp	r3, #0
 801146a:	f040 8089 	bne.w	8011580 <_dtoa_r+0x8d8>
 801146e:	9b03      	ldr	r3, [sp, #12]
 8011470:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011474:	0d1b      	lsrs	r3, r3, #20
 8011476:	051b      	lsls	r3, r3, #20
 8011478:	b12b      	cbz	r3, 8011486 <_dtoa_r+0x7de>
 801147a:	9b08      	ldr	r3, [sp, #32]
 801147c:	3301      	adds	r3, #1
 801147e:	9308      	str	r3, [sp, #32]
 8011480:	f108 0801 	add.w	r8, r8, #1
 8011484:	2301      	movs	r3, #1
 8011486:	930a      	str	r3, [sp, #40]	@ 0x28
 8011488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801148a:	2b00      	cmp	r3, #0
 801148c:	f000 81b0 	beq.w	80117f0 <_dtoa_r+0xb48>
 8011490:	6923      	ldr	r3, [r4, #16]
 8011492:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011496:	6918      	ldr	r0, [r3, #16]
 8011498:	f000 fb06 	bl	8011aa8 <__hi0bits>
 801149c:	f1c0 0020 	rsb	r0, r0, #32
 80114a0:	9b08      	ldr	r3, [sp, #32]
 80114a2:	4418      	add	r0, r3
 80114a4:	f010 001f 	ands.w	r0, r0, #31
 80114a8:	d077      	beq.n	801159a <_dtoa_r+0x8f2>
 80114aa:	f1c0 0320 	rsb	r3, r0, #32
 80114ae:	2b04      	cmp	r3, #4
 80114b0:	dd6b      	ble.n	801158a <_dtoa_r+0x8e2>
 80114b2:	9b08      	ldr	r3, [sp, #32]
 80114b4:	f1c0 001c 	rsb	r0, r0, #28
 80114b8:	4403      	add	r3, r0
 80114ba:	4480      	add	r8, r0
 80114bc:	4406      	add	r6, r0
 80114be:	9308      	str	r3, [sp, #32]
 80114c0:	f1b8 0f00 	cmp.w	r8, #0
 80114c4:	dd05      	ble.n	80114d2 <_dtoa_r+0x82a>
 80114c6:	4649      	mov	r1, r9
 80114c8:	4642      	mov	r2, r8
 80114ca:	4658      	mov	r0, fp
 80114cc:	f000 fc52 	bl	8011d74 <__lshift>
 80114d0:	4681      	mov	r9, r0
 80114d2:	9b08      	ldr	r3, [sp, #32]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	dd05      	ble.n	80114e4 <_dtoa_r+0x83c>
 80114d8:	4621      	mov	r1, r4
 80114da:	461a      	mov	r2, r3
 80114dc:	4658      	mov	r0, fp
 80114de:	f000 fc49 	bl	8011d74 <__lshift>
 80114e2:	4604      	mov	r4, r0
 80114e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d059      	beq.n	801159e <_dtoa_r+0x8f6>
 80114ea:	4621      	mov	r1, r4
 80114ec:	4648      	mov	r0, r9
 80114ee:	f000 fcad 	bl	8011e4c <__mcmp>
 80114f2:	2800      	cmp	r0, #0
 80114f4:	da53      	bge.n	801159e <_dtoa_r+0x8f6>
 80114f6:	1e7b      	subs	r3, r7, #1
 80114f8:	9304      	str	r3, [sp, #16]
 80114fa:	4649      	mov	r1, r9
 80114fc:	2300      	movs	r3, #0
 80114fe:	220a      	movs	r2, #10
 8011500:	4658      	mov	r0, fp
 8011502:	f000 fa41 	bl	8011988 <__multadd>
 8011506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011508:	4681      	mov	r9, r0
 801150a:	2b00      	cmp	r3, #0
 801150c:	f000 8172 	beq.w	80117f4 <_dtoa_r+0xb4c>
 8011510:	2300      	movs	r3, #0
 8011512:	4629      	mov	r1, r5
 8011514:	220a      	movs	r2, #10
 8011516:	4658      	mov	r0, fp
 8011518:	f000 fa36 	bl	8011988 <__multadd>
 801151c:	9b00      	ldr	r3, [sp, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	4605      	mov	r5, r0
 8011522:	dc67      	bgt.n	80115f4 <_dtoa_r+0x94c>
 8011524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011526:	2b02      	cmp	r3, #2
 8011528:	dc41      	bgt.n	80115ae <_dtoa_r+0x906>
 801152a:	e063      	b.n	80115f4 <_dtoa_r+0x94c>
 801152c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801152e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011532:	e746      	b.n	80113c2 <_dtoa_r+0x71a>
 8011534:	9b07      	ldr	r3, [sp, #28]
 8011536:	1e5c      	subs	r4, r3, #1
 8011538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801153a:	42a3      	cmp	r3, r4
 801153c:	bfbf      	itttt	lt
 801153e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011540:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011542:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011544:	1ae3      	sublt	r3, r4, r3
 8011546:	bfb4      	ite	lt
 8011548:	18d2      	addlt	r2, r2, r3
 801154a:	1b1c      	subge	r4, r3, r4
 801154c:	9b07      	ldr	r3, [sp, #28]
 801154e:	bfbc      	itt	lt
 8011550:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011552:	2400      	movlt	r4, #0
 8011554:	2b00      	cmp	r3, #0
 8011556:	bfb5      	itete	lt
 8011558:	eba8 0603 	sublt.w	r6, r8, r3
 801155c:	9b07      	ldrge	r3, [sp, #28]
 801155e:	2300      	movlt	r3, #0
 8011560:	4646      	movge	r6, r8
 8011562:	e730      	b.n	80113c6 <_dtoa_r+0x71e>
 8011564:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011566:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011568:	4646      	mov	r6, r8
 801156a:	e735      	b.n	80113d8 <_dtoa_r+0x730>
 801156c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801156e:	e75c      	b.n	801142a <_dtoa_r+0x782>
 8011570:	2300      	movs	r3, #0
 8011572:	e788      	b.n	8011486 <_dtoa_r+0x7de>
 8011574:	3fe00000 	.word	0x3fe00000
 8011578:	40240000 	.word	0x40240000
 801157c:	40140000 	.word	0x40140000
 8011580:	9b02      	ldr	r3, [sp, #8]
 8011582:	e780      	b.n	8011486 <_dtoa_r+0x7de>
 8011584:	2300      	movs	r3, #0
 8011586:	930a      	str	r3, [sp, #40]	@ 0x28
 8011588:	e782      	b.n	8011490 <_dtoa_r+0x7e8>
 801158a:	d099      	beq.n	80114c0 <_dtoa_r+0x818>
 801158c:	9a08      	ldr	r2, [sp, #32]
 801158e:	331c      	adds	r3, #28
 8011590:	441a      	add	r2, r3
 8011592:	4498      	add	r8, r3
 8011594:	441e      	add	r6, r3
 8011596:	9208      	str	r2, [sp, #32]
 8011598:	e792      	b.n	80114c0 <_dtoa_r+0x818>
 801159a:	4603      	mov	r3, r0
 801159c:	e7f6      	b.n	801158c <_dtoa_r+0x8e4>
 801159e:	9b07      	ldr	r3, [sp, #28]
 80115a0:	9704      	str	r7, [sp, #16]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	dc20      	bgt.n	80115e8 <_dtoa_r+0x940>
 80115a6:	9300      	str	r3, [sp, #0]
 80115a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115aa:	2b02      	cmp	r3, #2
 80115ac:	dd1e      	ble.n	80115ec <_dtoa_r+0x944>
 80115ae:	9b00      	ldr	r3, [sp, #0]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	f47f aec0 	bne.w	8011336 <_dtoa_r+0x68e>
 80115b6:	4621      	mov	r1, r4
 80115b8:	2205      	movs	r2, #5
 80115ba:	4658      	mov	r0, fp
 80115bc:	f000 f9e4 	bl	8011988 <__multadd>
 80115c0:	4601      	mov	r1, r0
 80115c2:	4604      	mov	r4, r0
 80115c4:	4648      	mov	r0, r9
 80115c6:	f000 fc41 	bl	8011e4c <__mcmp>
 80115ca:	2800      	cmp	r0, #0
 80115cc:	f77f aeb3 	ble.w	8011336 <_dtoa_r+0x68e>
 80115d0:	4656      	mov	r6, sl
 80115d2:	2331      	movs	r3, #49	@ 0x31
 80115d4:	f806 3b01 	strb.w	r3, [r6], #1
 80115d8:	9b04      	ldr	r3, [sp, #16]
 80115da:	3301      	adds	r3, #1
 80115dc:	9304      	str	r3, [sp, #16]
 80115de:	e6ae      	b.n	801133e <_dtoa_r+0x696>
 80115e0:	9c07      	ldr	r4, [sp, #28]
 80115e2:	9704      	str	r7, [sp, #16]
 80115e4:	4625      	mov	r5, r4
 80115e6:	e7f3      	b.n	80115d0 <_dtoa_r+0x928>
 80115e8:	9b07      	ldr	r3, [sp, #28]
 80115ea:	9300      	str	r3, [sp, #0]
 80115ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	f000 8104 	beq.w	80117fc <_dtoa_r+0xb54>
 80115f4:	2e00      	cmp	r6, #0
 80115f6:	dd05      	ble.n	8011604 <_dtoa_r+0x95c>
 80115f8:	4629      	mov	r1, r5
 80115fa:	4632      	mov	r2, r6
 80115fc:	4658      	mov	r0, fp
 80115fe:	f000 fbb9 	bl	8011d74 <__lshift>
 8011602:	4605      	mov	r5, r0
 8011604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011606:	2b00      	cmp	r3, #0
 8011608:	d05a      	beq.n	80116c0 <_dtoa_r+0xa18>
 801160a:	6869      	ldr	r1, [r5, #4]
 801160c:	4658      	mov	r0, fp
 801160e:	f000 f959 	bl	80118c4 <_Balloc>
 8011612:	4606      	mov	r6, r0
 8011614:	b928      	cbnz	r0, 8011622 <_dtoa_r+0x97a>
 8011616:	4b84      	ldr	r3, [pc, #528]	@ (8011828 <_dtoa_r+0xb80>)
 8011618:	4602      	mov	r2, r0
 801161a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801161e:	f7ff bb5a 	b.w	8010cd6 <_dtoa_r+0x2e>
 8011622:	692a      	ldr	r2, [r5, #16]
 8011624:	3202      	adds	r2, #2
 8011626:	0092      	lsls	r2, r2, #2
 8011628:	f105 010c 	add.w	r1, r5, #12
 801162c:	300c      	adds	r0, #12
 801162e:	f7ff fa7e 	bl	8010b2e <memcpy>
 8011632:	2201      	movs	r2, #1
 8011634:	4631      	mov	r1, r6
 8011636:	4658      	mov	r0, fp
 8011638:	f000 fb9c 	bl	8011d74 <__lshift>
 801163c:	f10a 0301 	add.w	r3, sl, #1
 8011640:	9307      	str	r3, [sp, #28]
 8011642:	9b00      	ldr	r3, [sp, #0]
 8011644:	4453      	add	r3, sl
 8011646:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011648:	9b02      	ldr	r3, [sp, #8]
 801164a:	f003 0301 	and.w	r3, r3, #1
 801164e:	462f      	mov	r7, r5
 8011650:	930a      	str	r3, [sp, #40]	@ 0x28
 8011652:	4605      	mov	r5, r0
 8011654:	9b07      	ldr	r3, [sp, #28]
 8011656:	4621      	mov	r1, r4
 8011658:	3b01      	subs	r3, #1
 801165a:	4648      	mov	r0, r9
 801165c:	9300      	str	r3, [sp, #0]
 801165e:	f7ff fa99 	bl	8010b94 <quorem>
 8011662:	4639      	mov	r1, r7
 8011664:	9002      	str	r0, [sp, #8]
 8011666:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801166a:	4648      	mov	r0, r9
 801166c:	f000 fbee 	bl	8011e4c <__mcmp>
 8011670:	462a      	mov	r2, r5
 8011672:	9008      	str	r0, [sp, #32]
 8011674:	4621      	mov	r1, r4
 8011676:	4658      	mov	r0, fp
 8011678:	f000 fc04 	bl	8011e84 <__mdiff>
 801167c:	68c2      	ldr	r2, [r0, #12]
 801167e:	4606      	mov	r6, r0
 8011680:	bb02      	cbnz	r2, 80116c4 <_dtoa_r+0xa1c>
 8011682:	4601      	mov	r1, r0
 8011684:	4648      	mov	r0, r9
 8011686:	f000 fbe1 	bl	8011e4c <__mcmp>
 801168a:	4602      	mov	r2, r0
 801168c:	4631      	mov	r1, r6
 801168e:	4658      	mov	r0, fp
 8011690:	920e      	str	r2, [sp, #56]	@ 0x38
 8011692:	f000 f957 	bl	8011944 <_Bfree>
 8011696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011698:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801169a:	9e07      	ldr	r6, [sp, #28]
 801169c:	ea43 0102 	orr.w	r1, r3, r2
 80116a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80116a2:	4319      	orrs	r1, r3
 80116a4:	d110      	bne.n	80116c8 <_dtoa_r+0xa20>
 80116a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80116aa:	d029      	beq.n	8011700 <_dtoa_r+0xa58>
 80116ac:	9b08      	ldr	r3, [sp, #32]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	dd02      	ble.n	80116b8 <_dtoa_r+0xa10>
 80116b2:	9b02      	ldr	r3, [sp, #8]
 80116b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80116b8:	9b00      	ldr	r3, [sp, #0]
 80116ba:	f883 8000 	strb.w	r8, [r3]
 80116be:	e63f      	b.n	8011340 <_dtoa_r+0x698>
 80116c0:	4628      	mov	r0, r5
 80116c2:	e7bb      	b.n	801163c <_dtoa_r+0x994>
 80116c4:	2201      	movs	r2, #1
 80116c6:	e7e1      	b.n	801168c <_dtoa_r+0x9e4>
 80116c8:	9b08      	ldr	r3, [sp, #32]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	db04      	blt.n	80116d8 <_dtoa_r+0xa30>
 80116ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80116d0:	430b      	orrs	r3, r1
 80116d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80116d4:	430b      	orrs	r3, r1
 80116d6:	d120      	bne.n	801171a <_dtoa_r+0xa72>
 80116d8:	2a00      	cmp	r2, #0
 80116da:	dded      	ble.n	80116b8 <_dtoa_r+0xa10>
 80116dc:	4649      	mov	r1, r9
 80116de:	2201      	movs	r2, #1
 80116e0:	4658      	mov	r0, fp
 80116e2:	f000 fb47 	bl	8011d74 <__lshift>
 80116e6:	4621      	mov	r1, r4
 80116e8:	4681      	mov	r9, r0
 80116ea:	f000 fbaf 	bl	8011e4c <__mcmp>
 80116ee:	2800      	cmp	r0, #0
 80116f0:	dc03      	bgt.n	80116fa <_dtoa_r+0xa52>
 80116f2:	d1e1      	bne.n	80116b8 <_dtoa_r+0xa10>
 80116f4:	f018 0f01 	tst.w	r8, #1
 80116f8:	d0de      	beq.n	80116b8 <_dtoa_r+0xa10>
 80116fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80116fe:	d1d8      	bne.n	80116b2 <_dtoa_r+0xa0a>
 8011700:	9a00      	ldr	r2, [sp, #0]
 8011702:	2339      	movs	r3, #57	@ 0x39
 8011704:	7013      	strb	r3, [r2, #0]
 8011706:	4633      	mov	r3, r6
 8011708:	461e      	mov	r6, r3
 801170a:	3b01      	subs	r3, #1
 801170c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011710:	2a39      	cmp	r2, #57	@ 0x39
 8011712:	d052      	beq.n	80117ba <_dtoa_r+0xb12>
 8011714:	3201      	adds	r2, #1
 8011716:	701a      	strb	r2, [r3, #0]
 8011718:	e612      	b.n	8011340 <_dtoa_r+0x698>
 801171a:	2a00      	cmp	r2, #0
 801171c:	dd07      	ble.n	801172e <_dtoa_r+0xa86>
 801171e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011722:	d0ed      	beq.n	8011700 <_dtoa_r+0xa58>
 8011724:	9a00      	ldr	r2, [sp, #0]
 8011726:	f108 0301 	add.w	r3, r8, #1
 801172a:	7013      	strb	r3, [r2, #0]
 801172c:	e608      	b.n	8011340 <_dtoa_r+0x698>
 801172e:	9b07      	ldr	r3, [sp, #28]
 8011730:	9a07      	ldr	r2, [sp, #28]
 8011732:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011738:	4293      	cmp	r3, r2
 801173a:	d028      	beq.n	801178e <_dtoa_r+0xae6>
 801173c:	4649      	mov	r1, r9
 801173e:	2300      	movs	r3, #0
 8011740:	220a      	movs	r2, #10
 8011742:	4658      	mov	r0, fp
 8011744:	f000 f920 	bl	8011988 <__multadd>
 8011748:	42af      	cmp	r7, r5
 801174a:	4681      	mov	r9, r0
 801174c:	f04f 0300 	mov.w	r3, #0
 8011750:	f04f 020a 	mov.w	r2, #10
 8011754:	4639      	mov	r1, r7
 8011756:	4658      	mov	r0, fp
 8011758:	d107      	bne.n	801176a <_dtoa_r+0xac2>
 801175a:	f000 f915 	bl	8011988 <__multadd>
 801175e:	4607      	mov	r7, r0
 8011760:	4605      	mov	r5, r0
 8011762:	9b07      	ldr	r3, [sp, #28]
 8011764:	3301      	adds	r3, #1
 8011766:	9307      	str	r3, [sp, #28]
 8011768:	e774      	b.n	8011654 <_dtoa_r+0x9ac>
 801176a:	f000 f90d 	bl	8011988 <__multadd>
 801176e:	4629      	mov	r1, r5
 8011770:	4607      	mov	r7, r0
 8011772:	2300      	movs	r3, #0
 8011774:	220a      	movs	r2, #10
 8011776:	4658      	mov	r0, fp
 8011778:	f000 f906 	bl	8011988 <__multadd>
 801177c:	4605      	mov	r5, r0
 801177e:	e7f0      	b.n	8011762 <_dtoa_r+0xaba>
 8011780:	9b00      	ldr	r3, [sp, #0]
 8011782:	2b00      	cmp	r3, #0
 8011784:	bfcc      	ite	gt
 8011786:	461e      	movgt	r6, r3
 8011788:	2601      	movle	r6, #1
 801178a:	4456      	add	r6, sl
 801178c:	2700      	movs	r7, #0
 801178e:	4649      	mov	r1, r9
 8011790:	2201      	movs	r2, #1
 8011792:	4658      	mov	r0, fp
 8011794:	f000 faee 	bl	8011d74 <__lshift>
 8011798:	4621      	mov	r1, r4
 801179a:	4681      	mov	r9, r0
 801179c:	f000 fb56 	bl	8011e4c <__mcmp>
 80117a0:	2800      	cmp	r0, #0
 80117a2:	dcb0      	bgt.n	8011706 <_dtoa_r+0xa5e>
 80117a4:	d102      	bne.n	80117ac <_dtoa_r+0xb04>
 80117a6:	f018 0f01 	tst.w	r8, #1
 80117aa:	d1ac      	bne.n	8011706 <_dtoa_r+0xa5e>
 80117ac:	4633      	mov	r3, r6
 80117ae:	461e      	mov	r6, r3
 80117b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80117b4:	2a30      	cmp	r2, #48	@ 0x30
 80117b6:	d0fa      	beq.n	80117ae <_dtoa_r+0xb06>
 80117b8:	e5c2      	b.n	8011340 <_dtoa_r+0x698>
 80117ba:	459a      	cmp	sl, r3
 80117bc:	d1a4      	bne.n	8011708 <_dtoa_r+0xa60>
 80117be:	9b04      	ldr	r3, [sp, #16]
 80117c0:	3301      	adds	r3, #1
 80117c2:	9304      	str	r3, [sp, #16]
 80117c4:	2331      	movs	r3, #49	@ 0x31
 80117c6:	f88a 3000 	strb.w	r3, [sl]
 80117ca:	e5b9      	b.n	8011340 <_dtoa_r+0x698>
 80117cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80117ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801182c <_dtoa_r+0xb84>
 80117d2:	b11b      	cbz	r3, 80117dc <_dtoa_r+0xb34>
 80117d4:	f10a 0308 	add.w	r3, sl, #8
 80117d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80117da:	6013      	str	r3, [r2, #0]
 80117dc:	4650      	mov	r0, sl
 80117de:	b019      	add	sp, #100	@ 0x64
 80117e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117e6:	2b01      	cmp	r3, #1
 80117e8:	f77f ae37 	ble.w	801145a <_dtoa_r+0x7b2>
 80117ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80117f0:	2001      	movs	r0, #1
 80117f2:	e655      	b.n	80114a0 <_dtoa_r+0x7f8>
 80117f4:	9b00      	ldr	r3, [sp, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	f77f aed6 	ble.w	80115a8 <_dtoa_r+0x900>
 80117fc:	4656      	mov	r6, sl
 80117fe:	4621      	mov	r1, r4
 8011800:	4648      	mov	r0, r9
 8011802:	f7ff f9c7 	bl	8010b94 <quorem>
 8011806:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801180a:	f806 8b01 	strb.w	r8, [r6], #1
 801180e:	9b00      	ldr	r3, [sp, #0]
 8011810:	eba6 020a 	sub.w	r2, r6, sl
 8011814:	4293      	cmp	r3, r2
 8011816:	ddb3      	ble.n	8011780 <_dtoa_r+0xad8>
 8011818:	4649      	mov	r1, r9
 801181a:	2300      	movs	r3, #0
 801181c:	220a      	movs	r2, #10
 801181e:	4658      	mov	r0, fp
 8011820:	f000 f8b2 	bl	8011988 <__multadd>
 8011824:	4681      	mov	r9, r0
 8011826:	e7ea      	b.n	80117fe <_dtoa_r+0xb56>
 8011828:	08015cda 	.word	0x08015cda
 801182c:	08015c75 	.word	0x08015c75

08011830 <_free_r>:
 8011830:	b538      	push	{r3, r4, r5, lr}
 8011832:	4605      	mov	r5, r0
 8011834:	2900      	cmp	r1, #0
 8011836:	d041      	beq.n	80118bc <_free_r+0x8c>
 8011838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801183c:	1f0c      	subs	r4, r1, #4
 801183e:	2b00      	cmp	r3, #0
 8011840:	bfb8      	it	lt
 8011842:	18e4      	addlt	r4, r4, r3
 8011844:	f7fe f814 	bl	800f870 <__malloc_lock>
 8011848:	4a1d      	ldr	r2, [pc, #116]	@ (80118c0 <_free_r+0x90>)
 801184a:	6813      	ldr	r3, [r2, #0]
 801184c:	b933      	cbnz	r3, 801185c <_free_r+0x2c>
 801184e:	6063      	str	r3, [r4, #4]
 8011850:	6014      	str	r4, [r2, #0]
 8011852:	4628      	mov	r0, r5
 8011854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011858:	f7fe b810 	b.w	800f87c <__malloc_unlock>
 801185c:	42a3      	cmp	r3, r4
 801185e:	d908      	bls.n	8011872 <_free_r+0x42>
 8011860:	6820      	ldr	r0, [r4, #0]
 8011862:	1821      	adds	r1, r4, r0
 8011864:	428b      	cmp	r3, r1
 8011866:	bf01      	itttt	eq
 8011868:	6819      	ldreq	r1, [r3, #0]
 801186a:	685b      	ldreq	r3, [r3, #4]
 801186c:	1809      	addeq	r1, r1, r0
 801186e:	6021      	streq	r1, [r4, #0]
 8011870:	e7ed      	b.n	801184e <_free_r+0x1e>
 8011872:	461a      	mov	r2, r3
 8011874:	685b      	ldr	r3, [r3, #4]
 8011876:	b10b      	cbz	r3, 801187c <_free_r+0x4c>
 8011878:	42a3      	cmp	r3, r4
 801187a:	d9fa      	bls.n	8011872 <_free_r+0x42>
 801187c:	6811      	ldr	r1, [r2, #0]
 801187e:	1850      	adds	r0, r2, r1
 8011880:	42a0      	cmp	r0, r4
 8011882:	d10b      	bne.n	801189c <_free_r+0x6c>
 8011884:	6820      	ldr	r0, [r4, #0]
 8011886:	4401      	add	r1, r0
 8011888:	1850      	adds	r0, r2, r1
 801188a:	4283      	cmp	r3, r0
 801188c:	6011      	str	r1, [r2, #0]
 801188e:	d1e0      	bne.n	8011852 <_free_r+0x22>
 8011890:	6818      	ldr	r0, [r3, #0]
 8011892:	685b      	ldr	r3, [r3, #4]
 8011894:	6053      	str	r3, [r2, #4]
 8011896:	4408      	add	r0, r1
 8011898:	6010      	str	r0, [r2, #0]
 801189a:	e7da      	b.n	8011852 <_free_r+0x22>
 801189c:	d902      	bls.n	80118a4 <_free_r+0x74>
 801189e:	230c      	movs	r3, #12
 80118a0:	602b      	str	r3, [r5, #0]
 80118a2:	e7d6      	b.n	8011852 <_free_r+0x22>
 80118a4:	6820      	ldr	r0, [r4, #0]
 80118a6:	1821      	adds	r1, r4, r0
 80118a8:	428b      	cmp	r3, r1
 80118aa:	bf04      	itt	eq
 80118ac:	6819      	ldreq	r1, [r3, #0]
 80118ae:	685b      	ldreq	r3, [r3, #4]
 80118b0:	6063      	str	r3, [r4, #4]
 80118b2:	bf04      	itt	eq
 80118b4:	1809      	addeq	r1, r1, r0
 80118b6:	6021      	streq	r1, [r4, #0]
 80118b8:	6054      	str	r4, [r2, #4]
 80118ba:	e7ca      	b.n	8011852 <_free_r+0x22>
 80118bc:	bd38      	pop	{r3, r4, r5, pc}
 80118be:	bf00      	nop
 80118c0:	200055e8 	.word	0x200055e8

080118c4 <_Balloc>:
 80118c4:	b570      	push	{r4, r5, r6, lr}
 80118c6:	69c6      	ldr	r6, [r0, #28]
 80118c8:	4604      	mov	r4, r0
 80118ca:	460d      	mov	r5, r1
 80118cc:	b976      	cbnz	r6, 80118ec <_Balloc+0x28>
 80118ce:	2010      	movs	r0, #16
 80118d0:	f7fd ff1c 	bl	800f70c <malloc>
 80118d4:	4602      	mov	r2, r0
 80118d6:	61e0      	str	r0, [r4, #28]
 80118d8:	b920      	cbnz	r0, 80118e4 <_Balloc+0x20>
 80118da:	4b18      	ldr	r3, [pc, #96]	@ (801193c <_Balloc+0x78>)
 80118dc:	4818      	ldr	r0, [pc, #96]	@ (8011940 <_Balloc+0x7c>)
 80118de:	216b      	movs	r1, #107	@ 0x6b
 80118e0:	f7ff f93a 	bl	8010b58 <__assert_func>
 80118e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80118e8:	6006      	str	r6, [r0, #0]
 80118ea:	60c6      	str	r6, [r0, #12]
 80118ec:	69e6      	ldr	r6, [r4, #28]
 80118ee:	68f3      	ldr	r3, [r6, #12]
 80118f0:	b183      	cbz	r3, 8011914 <_Balloc+0x50>
 80118f2:	69e3      	ldr	r3, [r4, #28]
 80118f4:	68db      	ldr	r3, [r3, #12]
 80118f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80118fa:	b9b8      	cbnz	r0, 801192c <_Balloc+0x68>
 80118fc:	2101      	movs	r1, #1
 80118fe:	fa01 f605 	lsl.w	r6, r1, r5
 8011902:	1d72      	adds	r2, r6, #5
 8011904:	0092      	lsls	r2, r2, #2
 8011906:	4620      	mov	r0, r4
 8011908:	f002 f8e1 	bl	8013ace <_calloc_r>
 801190c:	b160      	cbz	r0, 8011928 <_Balloc+0x64>
 801190e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011912:	e00e      	b.n	8011932 <_Balloc+0x6e>
 8011914:	2221      	movs	r2, #33	@ 0x21
 8011916:	2104      	movs	r1, #4
 8011918:	4620      	mov	r0, r4
 801191a:	f002 f8d8 	bl	8013ace <_calloc_r>
 801191e:	69e3      	ldr	r3, [r4, #28]
 8011920:	60f0      	str	r0, [r6, #12]
 8011922:	68db      	ldr	r3, [r3, #12]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d1e4      	bne.n	80118f2 <_Balloc+0x2e>
 8011928:	2000      	movs	r0, #0
 801192a:	bd70      	pop	{r4, r5, r6, pc}
 801192c:	6802      	ldr	r2, [r0, #0]
 801192e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011932:	2300      	movs	r3, #0
 8011934:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011938:	e7f7      	b.n	801192a <_Balloc+0x66>
 801193a:	bf00      	nop
 801193c:	08015bc8 	.word	0x08015bc8
 8011940:	08015ceb 	.word	0x08015ceb

08011944 <_Bfree>:
 8011944:	b570      	push	{r4, r5, r6, lr}
 8011946:	69c6      	ldr	r6, [r0, #28]
 8011948:	4605      	mov	r5, r0
 801194a:	460c      	mov	r4, r1
 801194c:	b976      	cbnz	r6, 801196c <_Bfree+0x28>
 801194e:	2010      	movs	r0, #16
 8011950:	f7fd fedc 	bl	800f70c <malloc>
 8011954:	4602      	mov	r2, r0
 8011956:	61e8      	str	r0, [r5, #28]
 8011958:	b920      	cbnz	r0, 8011964 <_Bfree+0x20>
 801195a:	4b09      	ldr	r3, [pc, #36]	@ (8011980 <_Bfree+0x3c>)
 801195c:	4809      	ldr	r0, [pc, #36]	@ (8011984 <_Bfree+0x40>)
 801195e:	218f      	movs	r1, #143	@ 0x8f
 8011960:	f7ff f8fa 	bl	8010b58 <__assert_func>
 8011964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011968:	6006      	str	r6, [r0, #0]
 801196a:	60c6      	str	r6, [r0, #12]
 801196c:	b13c      	cbz	r4, 801197e <_Bfree+0x3a>
 801196e:	69eb      	ldr	r3, [r5, #28]
 8011970:	6862      	ldr	r2, [r4, #4]
 8011972:	68db      	ldr	r3, [r3, #12]
 8011974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011978:	6021      	str	r1, [r4, #0]
 801197a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801197e:	bd70      	pop	{r4, r5, r6, pc}
 8011980:	08015bc8 	.word	0x08015bc8
 8011984:	08015ceb 	.word	0x08015ceb

08011988 <__multadd>:
 8011988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801198c:	690d      	ldr	r5, [r1, #16]
 801198e:	4607      	mov	r7, r0
 8011990:	460c      	mov	r4, r1
 8011992:	461e      	mov	r6, r3
 8011994:	f101 0c14 	add.w	ip, r1, #20
 8011998:	2000      	movs	r0, #0
 801199a:	f8dc 3000 	ldr.w	r3, [ip]
 801199e:	b299      	uxth	r1, r3
 80119a0:	fb02 6101 	mla	r1, r2, r1, r6
 80119a4:	0c1e      	lsrs	r6, r3, #16
 80119a6:	0c0b      	lsrs	r3, r1, #16
 80119a8:	fb02 3306 	mla	r3, r2, r6, r3
 80119ac:	b289      	uxth	r1, r1
 80119ae:	3001      	adds	r0, #1
 80119b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80119b4:	4285      	cmp	r5, r0
 80119b6:	f84c 1b04 	str.w	r1, [ip], #4
 80119ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80119be:	dcec      	bgt.n	801199a <__multadd+0x12>
 80119c0:	b30e      	cbz	r6, 8011a06 <__multadd+0x7e>
 80119c2:	68a3      	ldr	r3, [r4, #8]
 80119c4:	42ab      	cmp	r3, r5
 80119c6:	dc19      	bgt.n	80119fc <__multadd+0x74>
 80119c8:	6861      	ldr	r1, [r4, #4]
 80119ca:	4638      	mov	r0, r7
 80119cc:	3101      	adds	r1, #1
 80119ce:	f7ff ff79 	bl	80118c4 <_Balloc>
 80119d2:	4680      	mov	r8, r0
 80119d4:	b928      	cbnz	r0, 80119e2 <__multadd+0x5a>
 80119d6:	4602      	mov	r2, r0
 80119d8:	4b0c      	ldr	r3, [pc, #48]	@ (8011a0c <__multadd+0x84>)
 80119da:	480d      	ldr	r0, [pc, #52]	@ (8011a10 <__multadd+0x88>)
 80119dc:	21ba      	movs	r1, #186	@ 0xba
 80119de:	f7ff f8bb 	bl	8010b58 <__assert_func>
 80119e2:	6922      	ldr	r2, [r4, #16]
 80119e4:	3202      	adds	r2, #2
 80119e6:	f104 010c 	add.w	r1, r4, #12
 80119ea:	0092      	lsls	r2, r2, #2
 80119ec:	300c      	adds	r0, #12
 80119ee:	f7ff f89e 	bl	8010b2e <memcpy>
 80119f2:	4621      	mov	r1, r4
 80119f4:	4638      	mov	r0, r7
 80119f6:	f7ff ffa5 	bl	8011944 <_Bfree>
 80119fa:	4644      	mov	r4, r8
 80119fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011a00:	3501      	adds	r5, #1
 8011a02:	615e      	str	r6, [r3, #20]
 8011a04:	6125      	str	r5, [r4, #16]
 8011a06:	4620      	mov	r0, r4
 8011a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a0c:	08015cda 	.word	0x08015cda
 8011a10:	08015ceb 	.word	0x08015ceb

08011a14 <__s2b>:
 8011a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a18:	460c      	mov	r4, r1
 8011a1a:	4615      	mov	r5, r2
 8011a1c:	461f      	mov	r7, r3
 8011a1e:	2209      	movs	r2, #9
 8011a20:	3308      	adds	r3, #8
 8011a22:	4606      	mov	r6, r0
 8011a24:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a28:	2100      	movs	r1, #0
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	db09      	blt.n	8011a44 <__s2b+0x30>
 8011a30:	4630      	mov	r0, r6
 8011a32:	f7ff ff47 	bl	80118c4 <_Balloc>
 8011a36:	b940      	cbnz	r0, 8011a4a <__s2b+0x36>
 8011a38:	4602      	mov	r2, r0
 8011a3a:	4b19      	ldr	r3, [pc, #100]	@ (8011aa0 <__s2b+0x8c>)
 8011a3c:	4819      	ldr	r0, [pc, #100]	@ (8011aa4 <__s2b+0x90>)
 8011a3e:	21d3      	movs	r1, #211	@ 0xd3
 8011a40:	f7ff f88a 	bl	8010b58 <__assert_func>
 8011a44:	0052      	lsls	r2, r2, #1
 8011a46:	3101      	adds	r1, #1
 8011a48:	e7f0      	b.n	8011a2c <__s2b+0x18>
 8011a4a:	9b08      	ldr	r3, [sp, #32]
 8011a4c:	6143      	str	r3, [r0, #20]
 8011a4e:	2d09      	cmp	r5, #9
 8011a50:	f04f 0301 	mov.w	r3, #1
 8011a54:	6103      	str	r3, [r0, #16]
 8011a56:	dd16      	ble.n	8011a86 <__s2b+0x72>
 8011a58:	f104 0909 	add.w	r9, r4, #9
 8011a5c:	46c8      	mov	r8, r9
 8011a5e:	442c      	add	r4, r5
 8011a60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011a64:	4601      	mov	r1, r0
 8011a66:	3b30      	subs	r3, #48	@ 0x30
 8011a68:	220a      	movs	r2, #10
 8011a6a:	4630      	mov	r0, r6
 8011a6c:	f7ff ff8c 	bl	8011988 <__multadd>
 8011a70:	45a0      	cmp	r8, r4
 8011a72:	d1f5      	bne.n	8011a60 <__s2b+0x4c>
 8011a74:	f1a5 0408 	sub.w	r4, r5, #8
 8011a78:	444c      	add	r4, r9
 8011a7a:	1b2d      	subs	r5, r5, r4
 8011a7c:	1963      	adds	r3, r4, r5
 8011a7e:	42bb      	cmp	r3, r7
 8011a80:	db04      	blt.n	8011a8c <__s2b+0x78>
 8011a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a86:	340a      	adds	r4, #10
 8011a88:	2509      	movs	r5, #9
 8011a8a:	e7f6      	b.n	8011a7a <__s2b+0x66>
 8011a8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011a90:	4601      	mov	r1, r0
 8011a92:	3b30      	subs	r3, #48	@ 0x30
 8011a94:	220a      	movs	r2, #10
 8011a96:	4630      	mov	r0, r6
 8011a98:	f7ff ff76 	bl	8011988 <__multadd>
 8011a9c:	e7ee      	b.n	8011a7c <__s2b+0x68>
 8011a9e:	bf00      	nop
 8011aa0:	08015cda 	.word	0x08015cda
 8011aa4:	08015ceb 	.word	0x08015ceb

08011aa8 <__hi0bits>:
 8011aa8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011aac:	4603      	mov	r3, r0
 8011aae:	bf36      	itet	cc
 8011ab0:	0403      	lslcc	r3, r0, #16
 8011ab2:	2000      	movcs	r0, #0
 8011ab4:	2010      	movcc	r0, #16
 8011ab6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011aba:	bf3c      	itt	cc
 8011abc:	021b      	lslcc	r3, r3, #8
 8011abe:	3008      	addcc	r0, #8
 8011ac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011ac4:	bf3c      	itt	cc
 8011ac6:	011b      	lslcc	r3, r3, #4
 8011ac8:	3004      	addcc	r0, #4
 8011aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011ace:	bf3c      	itt	cc
 8011ad0:	009b      	lslcc	r3, r3, #2
 8011ad2:	3002      	addcc	r0, #2
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	db05      	blt.n	8011ae4 <__hi0bits+0x3c>
 8011ad8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011adc:	f100 0001 	add.w	r0, r0, #1
 8011ae0:	bf08      	it	eq
 8011ae2:	2020      	moveq	r0, #32
 8011ae4:	4770      	bx	lr

08011ae6 <__lo0bits>:
 8011ae6:	6803      	ldr	r3, [r0, #0]
 8011ae8:	4602      	mov	r2, r0
 8011aea:	f013 0007 	ands.w	r0, r3, #7
 8011aee:	d00b      	beq.n	8011b08 <__lo0bits+0x22>
 8011af0:	07d9      	lsls	r1, r3, #31
 8011af2:	d421      	bmi.n	8011b38 <__lo0bits+0x52>
 8011af4:	0798      	lsls	r0, r3, #30
 8011af6:	bf49      	itett	mi
 8011af8:	085b      	lsrmi	r3, r3, #1
 8011afa:	089b      	lsrpl	r3, r3, #2
 8011afc:	2001      	movmi	r0, #1
 8011afe:	6013      	strmi	r3, [r2, #0]
 8011b00:	bf5c      	itt	pl
 8011b02:	6013      	strpl	r3, [r2, #0]
 8011b04:	2002      	movpl	r0, #2
 8011b06:	4770      	bx	lr
 8011b08:	b299      	uxth	r1, r3
 8011b0a:	b909      	cbnz	r1, 8011b10 <__lo0bits+0x2a>
 8011b0c:	0c1b      	lsrs	r3, r3, #16
 8011b0e:	2010      	movs	r0, #16
 8011b10:	b2d9      	uxtb	r1, r3
 8011b12:	b909      	cbnz	r1, 8011b18 <__lo0bits+0x32>
 8011b14:	3008      	adds	r0, #8
 8011b16:	0a1b      	lsrs	r3, r3, #8
 8011b18:	0719      	lsls	r1, r3, #28
 8011b1a:	bf04      	itt	eq
 8011b1c:	091b      	lsreq	r3, r3, #4
 8011b1e:	3004      	addeq	r0, #4
 8011b20:	0799      	lsls	r1, r3, #30
 8011b22:	bf04      	itt	eq
 8011b24:	089b      	lsreq	r3, r3, #2
 8011b26:	3002      	addeq	r0, #2
 8011b28:	07d9      	lsls	r1, r3, #31
 8011b2a:	d403      	bmi.n	8011b34 <__lo0bits+0x4e>
 8011b2c:	085b      	lsrs	r3, r3, #1
 8011b2e:	f100 0001 	add.w	r0, r0, #1
 8011b32:	d003      	beq.n	8011b3c <__lo0bits+0x56>
 8011b34:	6013      	str	r3, [r2, #0]
 8011b36:	4770      	bx	lr
 8011b38:	2000      	movs	r0, #0
 8011b3a:	4770      	bx	lr
 8011b3c:	2020      	movs	r0, #32
 8011b3e:	4770      	bx	lr

08011b40 <__i2b>:
 8011b40:	b510      	push	{r4, lr}
 8011b42:	460c      	mov	r4, r1
 8011b44:	2101      	movs	r1, #1
 8011b46:	f7ff febd 	bl	80118c4 <_Balloc>
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	b928      	cbnz	r0, 8011b5a <__i2b+0x1a>
 8011b4e:	4b05      	ldr	r3, [pc, #20]	@ (8011b64 <__i2b+0x24>)
 8011b50:	4805      	ldr	r0, [pc, #20]	@ (8011b68 <__i2b+0x28>)
 8011b52:	f240 1145 	movw	r1, #325	@ 0x145
 8011b56:	f7fe ffff 	bl	8010b58 <__assert_func>
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	6144      	str	r4, [r0, #20]
 8011b5e:	6103      	str	r3, [r0, #16]
 8011b60:	bd10      	pop	{r4, pc}
 8011b62:	bf00      	nop
 8011b64:	08015cda 	.word	0x08015cda
 8011b68:	08015ceb 	.word	0x08015ceb

08011b6c <__multiply>:
 8011b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b70:	4614      	mov	r4, r2
 8011b72:	690a      	ldr	r2, [r1, #16]
 8011b74:	6923      	ldr	r3, [r4, #16]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	bfa8      	it	ge
 8011b7a:	4623      	movge	r3, r4
 8011b7c:	460f      	mov	r7, r1
 8011b7e:	bfa4      	itt	ge
 8011b80:	460c      	movge	r4, r1
 8011b82:	461f      	movge	r7, r3
 8011b84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011b88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011b8c:	68a3      	ldr	r3, [r4, #8]
 8011b8e:	6861      	ldr	r1, [r4, #4]
 8011b90:	eb0a 0609 	add.w	r6, sl, r9
 8011b94:	42b3      	cmp	r3, r6
 8011b96:	b085      	sub	sp, #20
 8011b98:	bfb8      	it	lt
 8011b9a:	3101      	addlt	r1, #1
 8011b9c:	f7ff fe92 	bl	80118c4 <_Balloc>
 8011ba0:	b930      	cbnz	r0, 8011bb0 <__multiply+0x44>
 8011ba2:	4602      	mov	r2, r0
 8011ba4:	4b44      	ldr	r3, [pc, #272]	@ (8011cb8 <__multiply+0x14c>)
 8011ba6:	4845      	ldr	r0, [pc, #276]	@ (8011cbc <__multiply+0x150>)
 8011ba8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011bac:	f7fe ffd4 	bl	8010b58 <__assert_func>
 8011bb0:	f100 0514 	add.w	r5, r0, #20
 8011bb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011bb8:	462b      	mov	r3, r5
 8011bba:	2200      	movs	r2, #0
 8011bbc:	4543      	cmp	r3, r8
 8011bbe:	d321      	bcc.n	8011c04 <__multiply+0x98>
 8011bc0:	f107 0114 	add.w	r1, r7, #20
 8011bc4:	f104 0214 	add.w	r2, r4, #20
 8011bc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011bcc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011bd0:	9302      	str	r3, [sp, #8]
 8011bd2:	1b13      	subs	r3, r2, r4
 8011bd4:	3b15      	subs	r3, #21
 8011bd6:	f023 0303 	bic.w	r3, r3, #3
 8011bda:	3304      	adds	r3, #4
 8011bdc:	f104 0715 	add.w	r7, r4, #21
 8011be0:	42ba      	cmp	r2, r7
 8011be2:	bf38      	it	cc
 8011be4:	2304      	movcc	r3, #4
 8011be6:	9301      	str	r3, [sp, #4]
 8011be8:	9b02      	ldr	r3, [sp, #8]
 8011bea:	9103      	str	r1, [sp, #12]
 8011bec:	428b      	cmp	r3, r1
 8011bee:	d80c      	bhi.n	8011c0a <__multiply+0x9e>
 8011bf0:	2e00      	cmp	r6, #0
 8011bf2:	dd03      	ble.n	8011bfc <__multiply+0x90>
 8011bf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d05b      	beq.n	8011cb4 <__multiply+0x148>
 8011bfc:	6106      	str	r6, [r0, #16]
 8011bfe:	b005      	add	sp, #20
 8011c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c04:	f843 2b04 	str.w	r2, [r3], #4
 8011c08:	e7d8      	b.n	8011bbc <__multiply+0x50>
 8011c0a:	f8b1 a000 	ldrh.w	sl, [r1]
 8011c0e:	f1ba 0f00 	cmp.w	sl, #0
 8011c12:	d024      	beq.n	8011c5e <__multiply+0xf2>
 8011c14:	f104 0e14 	add.w	lr, r4, #20
 8011c18:	46a9      	mov	r9, r5
 8011c1a:	f04f 0c00 	mov.w	ip, #0
 8011c1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011c22:	f8d9 3000 	ldr.w	r3, [r9]
 8011c26:	fa1f fb87 	uxth.w	fp, r7
 8011c2a:	b29b      	uxth	r3, r3
 8011c2c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011c30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011c34:	f8d9 7000 	ldr.w	r7, [r9]
 8011c38:	4463      	add	r3, ip
 8011c3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011c3e:	fb0a c70b 	mla	r7, sl, fp, ip
 8011c42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011c46:	b29b      	uxth	r3, r3
 8011c48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011c4c:	4572      	cmp	r2, lr
 8011c4e:	f849 3b04 	str.w	r3, [r9], #4
 8011c52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011c56:	d8e2      	bhi.n	8011c1e <__multiply+0xb2>
 8011c58:	9b01      	ldr	r3, [sp, #4]
 8011c5a:	f845 c003 	str.w	ip, [r5, r3]
 8011c5e:	9b03      	ldr	r3, [sp, #12]
 8011c60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011c64:	3104      	adds	r1, #4
 8011c66:	f1b9 0f00 	cmp.w	r9, #0
 8011c6a:	d021      	beq.n	8011cb0 <__multiply+0x144>
 8011c6c:	682b      	ldr	r3, [r5, #0]
 8011c6e:	f104 0c14 	add.w	ip, r4, #20
 8011c72:	46ae      	mov	lr, r5
 8011c74:	f04f 0a00 	mov.w	sl, #0
 8011c78:	f8bc b000 	ldrh.w	fp, [ip]
 8011c7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011c80:	fb09 770b 	mla	r7, r9, fp, r7
 8011c84:	4457      	add	r7, sl
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011c8c:	f84e 3b04 	str.w	r3, [lr], #4
 8011c90:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011c94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011c98:	f8be 3000 	ldrh.w	r3, [lr]
 8011c9c:	fb09 330a 	mla	r3, r9, sl, r3
 8011ca0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011ca4:	4562      	cmp	r2, ip
 8011ca6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011caa:	d8e5      	bhi.n	8011c78 <__multiply+0x10c>
 8011cac:	9f01      	ldr	r7, [sp, #4]
 8011cae:	51eb      	str	r3, [r5, r7]
 8011cb0:	3504      	adds	r5, #4
 8011cb2:	e799      	b.n	8011be8 <__multiply+0x7c>
 8011cb4:	3e01      	subs	r6, #1
 8011cb6:	e79b      	b.n	8011bf0 <__multiply+0x84>
 8011cb8:	08015cda 	.word	0x08015cda
 8011cbc:	08015ceb 	.word	0x08015ceb

08011cc0 <__pow5mult>:
 8011cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cc4:	4615      	mov	r5, r2
 8011cc6:	f012 0203 	ands.w	r2, r2, #3
 8011cca:	4607      	mov	r7, r0
 8011ccc:	460e      	mov	r6, r1
 8011cce:	d007      	beq.n	8011ce0 <__pow5mult+0x20>
 8011cd0:	4c25      	ldr	r4, [pc, #148]	@ (8011d68 <__pow5mult+0xa8>)
 8011cd2:	3a01      	subs	r2, #1
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011cda:	f7ff fe55 	bl	8011988 <__multadd>
 8011cde:	4606      	mov	r6, r0
 8011ce0:	10ad      	asrs	r5, r5, #2
 8011ce2:	d03d      	beq.n	8011d60 <__pow5mult+0xa0>
 8011ce4:	69fc      	ldr	r4, [r7, #28]
 8011ce6:	b97c      	cbnz	r4, 8011d08 <__pow5mult+0x48>
 8011ce8:	2010      	movs	r0, #16
 8011cea:	f7fd fd0f 	bl	800f70c <malloc>
 8011cee:	4602      	mov	r2, r0
 8011cf0:	61f8      	str	r0, [r7, #28]
 8011cf2:	b928      	cbnz	r0, 8011d00 <__pow5mult+0x40>
 8011cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8011d6c <__pow5mult+0xac>)
 8011cf6:	481e      	ldr	r0, [pc, #120]	@ (8011d70 <__pow5mult+0xb0>)
 8011cf8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011cfc:	f7fe ff2c 	bl	8010b58 <__assert_func>
 8011d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011d04:	6004      	str	r4, [r0, #0]
 8011d06:	60c4      	str	r4, [r0, #12]
 8011d08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011d10:	b94c      	cbnz	r4, 8011d26 <__pow5mult+0x66>
 8011d12:	f240 2171 	movw	r1, #625	@ 0x271
 8011d16:	4638      	mov	r0, r7
 8011d18:	f7ff ff12 	bl	8011b40 <__i2b>
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011d22:	4604      	mov	r4, r0
 8011d24:	6003      	str	r3, [r0, #0]
 8011d26:	f04f 0900 	mov.w	r9, #0
 8011d2a:	07eb      	lsls	r3, r5, #31
 8011d2c:	d50a      	bpl.n	8011d44 <__pow5mult+0x84>
 8011d2e:	4631      	mov	r1, r6
 8011d30:	4622      	mov	r2, r4
 8011d32:	4638      	mov	r0, r7
 8011d34:	f7ff ff1a 	bl	8011b6c <__multiply>
 8011d38:	4631      	mov	r1, r6
 8011d3a:	4680      	mov	r8, r0
 8011d3c:	4638      	mov	r0, r7
 8011d3e:	f7ff fe01 	bl	8011944 <_Bfree>
 8011d42:	4646      	mov	r6, r8
 8011d44:	106d      	asrs	r5, r5, #1
 8011d46:	d00b      	beq.n	8011d60 <__pow5mult+0xa0>
 8011d48:	6820      	ldr	r0, [r4, #0]
 8011d4a:	b938      	cbnz	r0, 8011d5c <__pow5mult+0x9c>
 8011d4c:	4622      	mov	r2, r4
 8011d4e:	4621      	mov	r1, r4
 8011d50:	4638      	mov	r0, r7
 8011d52:	f7ff ff0b 	bl	8011b6c <__multiply>
 8011d56:	6020      	str	r0, [r4, #0]
 8011d58:	f8c0 9000 	str.w	r9, [r0]
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	e7e4      	b.n	8011d2a <__pow5mult+0x6a>
 8011d60:	4630      	mov	r0, r6
 8011d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d66:	bf00      	nop
 8011d68:	08015d44 	.word	0x08015d44
 8011d6c:	08015bc8 	.word	0x08015bc8
 8011d70:	08015ceb 	.word	0x08015ceb

08011d74 <__lshift>:
 8011d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d78:	460c      	mov	r4, r1
 8011d7a:	6849      	ldr	r1, [r1, #4]
 8011d7c:	6923      	ldr	r3, [r4, #16]
 8011d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011d82:	68a3      	ldr	r3, [r4, #8]
 8011d84:	4607      	mov	r7, r0
 8011d86:	4691      	mov	r9, r2
 8011d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011d8c:	f108 0601 	add.w	r6, r8, #1
 8011d90:	42b3      	cmp	r3, r6
 8011d92:	db0b      	blt.n	8011dac <__lshift+0x38>
 8011d94:	4638      	mov	r0, r7
 8011d96:	f7ff fd95 	bl	80118c4 <_Balloc>
 8011d9a:	4605      	mov	r5, r0
 8011d9c:	b948      	cbnz	r0, 8011db2 <__lshift+0x3e>
 8011d9e:	4602      	mov	r2, r0
 8011da0:	4b28      	ldr	r3, [pc, #160]	@ (8011e44 <__lshift+0xd0>)
 8011da2:	4829      	ldr	r0, [pc, #164]	@ (8011e48 <__lshift+0xd4>)
 8011da4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011da8:	f7fe fed6 	bl	8010b58 <__assert_func>
 8011dac:	3101      	adds	r1, #1
 8011dae:	005b      	lsls	r3, r3, #1
 8011db0:	e7ee      	b.n	8011d90 <__lshift+0x1c>
 8011db2:	2300      	movs	r3, #0
 8011db4:	f100 0114 	add.w	r1, r0, #20
 8011db8:	f100 0210 	add.w	r2, r0, #16
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	4553      	cmp	r3, sl
 8011dc0:	db33      	blt.n	8011e2a <__lshift+0xb6>
 8011dc2:	6920      	ldr	r0, [r4, #16]
 8011dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011dc8:	f104 0314 	add.w	r3, r4, #20
 8011dcc:	f019 091f 	ands.w	r9, r9, #31
 8011dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011dd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011dd8:	d02b      	beq.n	8011e32 <__lshift+0xbe>
 8011dda:	f1c9 0e20 	rsb	lr, r9, #32
 8011dde:	468a      	mov	sl, r1
 8011de0:	2200      	movs	r2, #0
 8011de2:	6818      	ldr	r0, [r3, #0]
 8011de4:	fa00 f009 	lsl.w	r0, r0, r9
 8011de8:	4310      	orrs	r0, r2
 8011dea:	f84a 0b04 	str.w	r0, [sl], #4
 8011dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8011df2:	459c      	cmp	ip, r3
 8011df4:	fa22 f20e 	lsr.w	r2, r2, lr
 8011df8:	d8f3      	bhi.n	8011de2 <__lshift+0x6e>
 8011dfa:	ebac 0304 	sub.w	r3, ip, r4
 8011dfe:	3b15      	subs	r3, #21
 8011e00:	f023 0303 	bic.w	r3, r3, #3
 8011e04:	3304      	adds	r3, #4
 8011e06:	f104 0015 	add.w	r0, r4, #21
 8011e0a:	4584      	cmp	ip, r0
 8011e0c:	bf38      	it	cc
 8011e0e:	2304      	movcc	r3, #4
 8011e10:	50ca      	str	r2, [r1, r3]
 8011e12:	b10a      	cbz	r2, 8011e18 <__lshift+0xa4>
 8011e14:	f108 0602 	add.w	r6, r8, #2
 8011e18:	3e01      	subs	r6, #1
 8011e1a:	4638      	mov	r0, r7
 8011e1c:	612e      	str	r6, [r5, #16]
 8011e1e:	4621      	mov	r1, r4
 8011e20:	f7ff fd90 	bl	8011944 <_Bfree>
 8011e24:	4628      	mov	r0, r5
 8011e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011e2e:	3301      	adds	r3, #1
 8011e30:	e7c5      	b.n	8011dbe <__lshift+0x4a>
 8011e32:	3904      	subs	r1, #4
 8011e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e38:	f841 2f04 	str.w	r2, [r1, #4]!
 8011e3c:	459c      	cmp	ip, r3
 8011e3e:	d8f9      	bhi.n	8011e34 <__lshift+0xc0>
 8011e40:	e7ea      	b.n	8011e18 <__lshift+0xa4>
 8011e42:	bf00      	nop
 8011e44:	08015cda 	.word	0x08015cda
 8011e48:	08015ceb 	.word	0x08015ceb

08011e4c <__mcmp>:
 8011e4c:	690a      	ldr	r2, [r1, #16]
 8011e4e:	4603      	mov	r3, r0
 8011e50:	6900      	ldr	r0, [r0, #16]
 8011e52:	1a80      	subs	r0, r0, r2
 8011e54:	b530      	push	{r4, r5, lr}
 8011e56:	d10e      	bne.n	8011e76 <__mcmp+0x2a>
 8011e58:	3314      	adds	r3, #20
 8011e5a:	3114      	adds	r1, #20
 8011e5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011e60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011e64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011e68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011e6c:	4295      	cmp	r5, r2
 8011e6e:	d003      	beq.n	8011e78 <__mcmp+0x2c>
 8011e70:	d205      	bcs.n	8011e7e <__mcmp+0x32>
 8011e72:	f04f 30ff 	mov.w	r0, #4294967295
 8011e76:	bd30      	pop	{r4, r5, pc}
 8011e78:	42a3      	cmp	r3, r4
 8011e7a:	d3f3      	bcc.n	8011e64 <__mcmp+0x18>
 8011e7c:	e7fb      	b.n	8011e76 <__mcmp+0x2a>
 8011e7e:	2001      	movs	r0, #1
 8011e80:	e7f9      	b.n	8011e76 <__mcmp+0x2a>
	...

08011e84 <__mdiff>:
 8011e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e88:	4689      	mov	r9, r1
 8011e8a:	4606      	mov	r6, r0
 8011e8c:	4611      	mov	r1, r2
 8011e8e:	4648      	mov	r0, r9
 8011e90:	4614      	mov	r4, r2
 8011e92:	f7ff ffdb 	bl	8011e4c <__mcmp>
 8011e96:	1e05      	subs	r5, r0, #0
 8011e98:	d112      	bne.n	8011ec0 <__mdiff+0x3c>
 8011e9a:	4629      	mov	r1, r5
 8011e9c:	4630      	mov	r0, r6
 8011e9e:	f7ff fd11 	bl	80118c4 <_Balloc>
 8011ea2:	4602      	mov	r2, r0
 8011ea4:	b928      	cbnz	r0, 8011eb2 <__mdiff+0x2e>
 8011ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8011fa4 <__mdiff+0x120>)
 8011ea8:	f240 2137 	movw	r1, #567	@ 0x237
 8011eac:	483e      	ldr	r0, [pc, #248]	@ (8011fa8 <__mdiff+0x124>)
 8011eae:	f7fe fe53 	bl	8010b58 <__assert_func>
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011eb8:	4610      	mov	r0, r2
 8011eba:	b003      	add	sp, #12
 8011ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec0:	bfbc      	itt	lt
 8011ec2:	464b      	movlt	r3, r9
 8011ec4:	46a1      	movlt	r9, r4
 8011ec6:	4630      	mov	r0, r6
 8011ec8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011ecc:	bfba      	itte	lt
 8011ece:	461c      	movlt	r4, r3
 8011ed0:	2501      	movlt	r5, #1
 8011ed2:	2500      	movge	r5, #0
 8011ed4:	f7ff fcf6 	bl	80118c4 <_Balloc>
 8011ed8:	4602      	mov	r2, r0
 8011eda:	b918      	cbnz	r0, 8011ee4 <__mdiff+0x60>
 8011edc:	4b31      	ldr	r3, [pc, #196]	@ (8011fa4 <__mdiff+0x120>)
 8011ede:	f240 2145 	movw	r1, #581	@ 0x245
 8011ee2:	e7e3      	b.n	8011eac <__mdiff+0x28>
 8011ee4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011ee8:	6926      	ldr	r6, [r4, #16]
 8011eea:	60c5      	str	r5, [r0, #12]
 8011eec:	f109 0310 	add.w	r3, r9, #16
 8011ef0:	f109 0514 	add.w	r5, r9, #20
 8011ef4:	f104 0e14 	add.w	lr, r4, #20
 8011ef8:	f100 0b14 	add.w	fp, r0, #20
 8011efc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011f00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011f04:	9301      	str	r3, [sp, #4]
 8011f06:	46d9      	mov	r9, fp
 8011f08:	f04f 0c00 	mov.w	ip, #0
 8011f0c:	9b01      	ldr	r3, [sp, #4]
 8011f0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011f12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011f16:	9301      	str	r3, [sp, #4]
 8011f18:	fa1f f38a 	uxth.w	r3, sl
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	b283      	uxth	r3, r0
 8011f20:	1acb      	subs	r3, r1, r3
 8011f22:	0c00      	lsrs	r0, r0, #16
 8011f24:	4463      	add	r3, ip
 8011f26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011f2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011f34:	4576      	cmp	r6, lr
 8011f36:	f849 3b04 	str.w	r3, [r9], #4
 8011f3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011f3e:	d8e5      	bhi.n	8011f0c <__mdiff+0x88>
 8011f40:	1b33      	subs	r3, r6, r4
 8011f42:	3b15      	subs	r3, #21
 8011f44:	f023 0303 	bic.w	r3, r3, #3
 8011f48:	3415      	adds	r4, #21
 8011f4a:	3304      	adds	r3, #4
 8011f4c:	42a6      	cmp	r6, r4
 8011f4e:	bf38      	it	cc
 8011f50:	2304      	movcc	r3, #4
 8011f52:	441d      	add	r5, r3
 8011f54:	445b      	add	r3, fp
 8011f56:	461e      	mov	r6, r3
 8011f58:	462c      	mov	r4, r5
 8011f5a:	4544      	cmp	r4, r8
 8011f5c:	d30e      	bcc.n	8011f7c <__mdiff+0xf8>
 8011f5e:	f108 0103 	add.w	r1, r8, #3
 8011f62:	1b49      	subs	r1, r1, r5
 8011f64:	f021 0103 	bic.w	r1, r1, #3
 8011f68:	3d03      	subs	r5, #3
 8011f6a:	45a8      	cmp	r8, r5
 8011f6c:	bf38      	it	cc
 8011f6e:	2100      	movcc	r1, #0
 8011f70:	440b      	add	r3, r1
 8011f72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011f76:	b191      	cbz	r1, 8011f9e <__mdiff+0x11a>
 8011f78:	6117      	str	r7, [r2, #16]
 8011f7a:	e79d      	b.n	8011eb8 <__mdiff+0x34>
 8011f7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8011f80:	46e6      	mov	lr, ip
 8011f82:	0c08      	lsrs	r0, r1, #16
 8011f84:	fa1c fc81 	uxtah	ip, ip, r1
 8011f88:	4471      	add	r1, lr
 8011f8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011f8e:	b289      	uxth	r1, r1
 8011f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011f94:	f846 1b04 	str.w	r1, [r6], #4
 8011f98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011f9c:	e7dd      	b.n	8011f5a <__mdiff+0xd6>
 8011f9e:	3f01      	subs	r7, #1
 8011fa0:	e7e7      	b.n	8011f72 <__mdiff+0xee>
 8011fa2:	bf00      	nop
 8011fa4:	08015cda 	.word	0x08015cda
 8011fa8:	08015ceb 	.word	0x08015ceb

08011fac <__ulp>:
 8011fac:	b082      	sub	sp, #8
 8011fae:	ed8d 0b00 	vstr	d0, [sp]
 8011fb2:	9a01      	ldr	r2, [sp, #4]
 8011fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8011ff4 <__ulp+0x48>)
 8011fb6:	4013      	ands	r3, r2
 8011fb8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	dc08      	bgt.n	8011fd2 <__ulp+0x26>
 8011fc0:	425b      	negs	r3, r3
 8011fc2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011fc6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011fca:	da04      	bge.n	8011fd6 <__ulp+0x2a>
 8011fcc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011fd0:	4113      	asrs	r3, r2
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	e008      	b.n	8011fe8 <__ulp+0x3c>
 8011fd6:	f1a2 0314 	sub.w	r3, r2, #20
 8011fda:	2b1e      	cmp	r3, #30
 8011fdc:	bfda      	itte	le
 8011fde:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011fe2:	40da      	lsrle	r2, r3
 8011fe4:	2201      	movgt	r2, #1
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	4619      	mov	r1, r3
 8011fea:	4610      	mov	r0, r2
 8011fec:	ec41 0b10 	vmov	d0, r0, r1
 8011ff0:	b002      	add	sp, #8
 8011ff2:	4770      	bx	lr
 8011ff4:	7ff00000 	.word	0x7ff00000

08011ff8 <__b2d>:
 8011ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ffc:	6906      	ldr	r6, [r0, #16]
 8011ffe:	f100 0814 	add.w	r8, r0, #20
 8012002:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012006:	1f37      	subs	r7, r6, #4
 8012008:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801200c:	4610      	mov	r0, r2
 801200e:	f7ff fd4b 	bl	8011aa8 <__hi0bits>
 8012012:	f1c0 0320 	rsb	r3, r0, #32
 8012016:	280a      	cmp	r0, #10
 8012018:	600b      	str	r3, [r1, #0]
 801201a:	491b      	ldr	r1, [pc, #108]	@ (8012088 <__b2d+0x90>)
 801201c:	dc15      	bgt.n	801204a <__b2d+0x52>
 801201e:	f1c0 0c0b 	rsb	ip, r0, #11
 8012022:	fa22 f30c 	lsr.w	r3, r2, ip
 8012026:	45b8      	cmp	r8, r7
 8012028:	ea43 0501 	orr.w	r5, r3, r1
 801202c:	bf34      	ite	cc
 801202e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012032:	2300      	movcs	r3, #0
 8012034:	3015      	adds	r0, #21
 8012036:	fa02 f000 	lsl.w	r0, r2, r0
 801203a:	fa23 f30c 	lsr.w	r3, r3, ip
 801203e:	4303      	orrs	r3, r0
 8012040:	461c      	mov	r4, r3
 8012042:	ec45 4b10 	vmov	d0, r4, r5
 8012046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801204a:	45b8      	cmp	r8, r7
 801204c:	bf3a      	itte	cc
 801204e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012052:	f1a6 0708 	subcc.w	r7, r6, #8
 8012056:	2300      	movcs	r3, #0
 8012058:	380b      	subs	r0, #11
 801205a:	d012      	beq.n	8012082 <__b2d+0x8a>
 801205c:	f1c0 0120 	rsb	r1, r0, #32
 8012060:	fa23 f401 	lsr.w	r4, r3, r1
 8012064:	4082      	lsls	r2, r0
 8012066:	4322      	orrs	r2, r4
 8012068:	4547      	cmp	r7, r8
 801206a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801206e:	bf8c      	ite	hi
 8012070:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012074:	2200      	movls	r2, #0
 8012076:	4083      	lsls	r3, r0
 8012078:	40ca      	lsrs	r2, r1
 801207a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801207e:	4313      	orrs	r3, r2
 8012080:	e7de      	b.n	8012040 <__b2d+0x48>
 8012082:	ea42 0501 	orr.w	r5, r2, r1
 8012086:	e7db      	b.n	8012040 <__b2d+0x48>
 8012088:	3ff00000 	.word	0x3ff00000

0801208c <__d2b>:
 801208c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012090:	460f      	mov	r7, r1
 8012092:	2101      	movs	r1, #1
 8012094:	ec59 8b10 	vmov	r8, r9, d0
 8012098:	4616      	mov	r6, r2
 801209a:	f7ff fc13 	bl	80118c4 <_Balloc>
 801209e:	4604      	mov	r4, r0
 80120a0:	b930      	cbnz	r0, 80120b0 <__d2b+0x24>
 80120a2:	4602      	mov	r2, r0
 80120a4:	4b23      	ldr	r3, [pc, #140]	@ (8012134 <__d2b+0xa8>)
 80120a6:	4824      	ldr	r0, [pc, #144]	@ (8012138 <__d2b+0xac>)
 80120a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80120ac:	f7fe fd54 	bl	8010b58 <__assert_func>
 80120b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80120b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80120b8:	b10d      	cbz	r5, 80120be <__d2b+0x32>
 80120ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80120be:	9301      	str	r3, [sp, #4]
 80120c0:	f1b8 0300 	subs.w	r3, r8, #0
 80120c4:	d023      	beq.n	801210e <__d2b+0x82>
 80120c6:	4668      	mov	r0, sp
 80120c8:	9300      	str	r3, [sp, #0]
 80120ca:	f7ff fd0c 	bl	8011ae6 <__lo0bits>
 80120ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80120d2:	b1d0      	cbz	r0, 801210a <__d2b+0x7e>
 80120d4:	f1c0 0320 	rsb	r3, r0, #32
 80120d8:	fa02 f303 	lsl.w	r3, r2, r3
 80120dc:	430b      	orrs	r3, r1
 80120de:	40c2      	lsrs	r2, r0
 80120e0:	6163      	str	r3, [r4, #20]
 80120e2:	9201      	str	r2, [sp, #4]
 80120e4:	9b01      	ldr	r3, [sp, #4]
 80120e6:	61a3      	str	r3, [r4, #24]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	bf0c      	ite	eq
 80120ec:	2201      	moveq	r2, #1
 80120ee:	2202      	movne	r2, #2
 80120f0:	6122      	str	r2, [r4, #16]
 80120f2:	b1a5      	cbz	r5, 801211e <__d2b+0x92>
 80120f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80120f8:	4405      	add	r5, r0
 80120fa:	603d      	str	r5, [r7, #0]
 80120fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012100:	6030      	str	r0, [r6, #0]
 8012102:	4620      	mov	r0, r4
 8012104:	b003      	add	sp, #12
 8012106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801210a:	6161      	str	r1, [r4, #20]
 801210c:	e7ea      	b.n	80120e4 <__d2b+0x58>
 801210e:	a801      	add	r0, sp, #4
 8012110:	f7ff fce9 	bl	8011ae6 <__lo0bits>
 8012114:	9b01      	ldr	r3, [sp, #4]
 8012116:	6163      	str	r3, [r4, #20]
 8012118:	3020      	adds	r0, #32
 801211a:	2201      	movs	r2, #1
 801211c:	e7e8      	b.n	80120f0 <__d2b+0x64>
 801211e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012122:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012126:	6038      	str	r0, [r7, #0]
 8012128:	6918      	ldr	r0, [r3, #16]
 801212a:	f7ff fcbd 	bl	8011aa8 <__hi0bits>
 801212e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012132:	e7e5      	b.n	8012100 <__d2b+0x74>
 8012134:	08015cda 	.word	0x08015cda
 8012138:	08015ceb 	.word	0x08015ceb

0801213c <__ratio>:
 801213c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012140:	b085      	sub	sp, #20
 8012142:	e9cd 1000 	strd	r1, r0, [sp]
 8012146:	a902      	add	r1, sp, #8
 8012148:	f7ff ff56 	bl	8011ff8 <__b2d>
 801214c:	9800      	ldr	r0, [sp, #0]
 801214e:	a903      	add	r1, sp, #12
 8012150:	ec55 4b10 	vmov	r4, r5, d0
 8012154:	f7ff ff50 	bl	8011ff8 <__b2d>
 8012158:	9b01      	ldr	r3, [sp, #4]
 801215a:	6919      	ldr	r1, [r3, #16]
 801215c:	9b00      	ldr	r3, [sp, #0]
 801215e:	691b      	ldr	r3, [r3, #16]
 8012160:	1ac9      	subs	r1, r1, r3
 8012162:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012166:	1a9b      	subs	r3, r3, r2
 8012168:	ec5b ab10 	vmov	sl, fp, d0
 801216c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012170:	2b00      	cmp	r3, #0
 8012172:	bfce      	itee	gt
 8012174:	462a      	movgt	r2, r5
 8012176:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801217a:	465a      	movle	r2, fp
 801217c:	462f      	mov	r7, r5
 801217e:	46d9      	mov	r9, fp
 8012180:	bfcc      	ite	gt
 8012182:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012186:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801218a:	464b      	mov	r3, r9
 801218c:	4652      	mov	r2, sl
 801218e:	4620      	mov	r0, r4
 8012190:	4639      	mov	r1, r7
 8012192:	f7ee fb6b 	bl	800086c <__aeabi_ddiv>
 8012196:	ec41 0b10 	vmov	d0, r0, r1
 801219a:	b005      	add	sp, #20
 801219c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080121a0 <__copybits>:
 80121a0:	3901      	subs	r1, #1
 80121a2:	b570      	push	{r4, r5, r6, lr}
 80121a4:	1149      	asrs	r1, r1, #5
 80121a6:	6914      	ldr	r4, [r2, #16]
 80121a8:	3101      	adds	r1, #1
 80121aa:	f102 0314 	add.w	r3, r2, #20
 80121ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80121b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80121b6:	1f05      	subs	r5, r0, #4
 80121b8:	42a3      	cmp	r3, r4
 80121ba:	d30c      	bcc.n	80121d6 <__copybits+0x36>
 80121bc:	1aa3      	subs	r3, r4, r2
 80121be:	3b11      	subs	r3, #17
 80121c0:	f023 0303 	bic.w	r3, r3, #3
 80121c4:	3211      	adds	r2, #17
 80121c6:	42a2      	cmp	r2, r4
 80121c8:	bf88      	it	hi
 80121ca:	2300      	movhi	r3, #0
 80121cc:	4418      	add	r0, r3
 80121ce:	2300      	movs	r3, #0
 80121d0:	4288      	cmp	r0, r1
 80121d2:	d305      	bcc.n	80121e0 <__copybits+0x40>
 80121d4:	bd70      	pop	{r4, r5, r6, pc}
 80121d6:	f853 6b04 	ldr.w	r6, [r3], #4
 80121da:	f845 6f04 	str.w	r6, [r5, #4]!
 80121de:	e7eb      	b.n	80121b8 <__copybits+0x18>
 80121e0:	f840 3b04 	str.w	r3, [r0], #4
 80121e4:	e7f4      	b.n	80121d0 <__copybits+0x30>

080121e6 <__any_on>:
 80121e6:	f100 0214 	add.w	r2, r0, #20
 80121ea:	6900      	ldr	r0, [r0, #16]
 80121ec:	114b      	asrs	r3, r1, #5
 80121ee:	4298      	cmp	r0, r3
 80121f0:	b510      	push	{r4, lr}
 80121f2:	db11      	blt.n	8012218 <__any_on+0x32>
 80121f4:	dd0a      	ble.n	801220c <__any_on+0x26>
 80121f6:	f011 011f 	ands.w	r1, r1, #31
 80121fa:	d007      	beq.n	801220c <__any_on+0x26>
 80121fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012200:	fa24 f001 	lsr.w	r0, r4, r1
 8012204:	fa00 f101 	lsl.w	r1, r0, r1
 8012208:	428c      	cmp	r4, r1
 801220a:	d10b      	bne.n	8012224 <__any_on+0x3e>
 801220c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012210:	4293      	cmp	r3, r2
 8012212:	d803      	bhi.n	801221c <__any_on+0x36>
 8012214:	2000      	movs	r0, #0
 8012216:	bd10      	pop	{r4, pc}
 8012218:	4603      	mov	r3, r0
 801221a:	e7f7      	b.n	801220c <__any_on+0x26>
 801221c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012220:	2900      	cmp	r1, #0
 8012222:	d0f5      	beq.n	8012210 <__any_on+0x2a>
 8012224:	2001      	movs	r0, #1
 8012226:	e7f6      	b.n	8012216 <__any_on+0x30>

08012228 <sulp>:
 8012228:	b570      	push	{r4, r5, r6, lr}
 801222a:	4604      	mov	r4, r0
 801222c:	460d      	mov	r5, r1
 801222e:	ec45 4b10 	vmov	d0, r4, r5
 8012232:	4616      	mov	r6, r2
 8012234:	f7ff feba 	bl	8011fac <__ulp>
 8012238:	ec51 0b10 	vmov	r0, r1, d0
 801223c:	b17e      	cbz	r6, 801225e <sulp+0x36>
 801223e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012242:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012246:	2b00      	cmp	r3, #0
 8012248:	dd09      	ble.n	801225e <sulp+0x36>
 801224a:	051b      	lsls	r3, r3, #20
 801224c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012250:	2400      	movs	r4, #0
 8012252:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8012256:	4622      	mov	r2, r4
 8012258:	462b      	mov	r3, r5
 801225a:	f7ee f9dd 	bl	8000618 <__aeabi_dmul>
 801225e:	ec41 0b10 	vmov	d0, r0, r1
 8012262:	bd70      	pop	{r4, r5, r6, pc}
 8012264:	0000      	movs	r0, r0
	...

08012268 <_strtod_l>:
 8012268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801226c:	b09f      	sub	sp, #124	@ 0x7c
 801226e:	460c      	mov	r4, r1
 8012270:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012272:	2200      	movs	r2, #0
 8012274:	921a      	str	r2, [sp, #104]	@ 0x68
 8012276:	9005      	str	r0, [sp, #20]
 8012278:	f04f 0a00 	mov.w	sl, #0
 801227c:	f04f 0b00 	mov.w	fp, #0
 8012280:	460a      	mov	r2, r1
 8012282:	9219      	str	r2, [sp, #100]	@ 0x64
 8012284:	7811      	ldrb	r1, [r2, #0]
 8012286:	292b      	cmp	r1, #43	@ 0x2b
 8012288:	d04a      	beq.n	8012320 <_strtod_l+0xb8>
 801228a:	d838      	bhi.n	80122fe <_strtod_l+0x96>
 801228c:	290d      	cmp	r1, #13
 801228e:	d832      	bhi.n	80122f6 <_strtod_l+0x8e>
 8012290:	2908      	cmp	r1, #8
 8012292:	d832      	bhi.n	80122fa <_strtod_l+0x92>
 8012294:	2900      	cmp	r1, #0
 8012296:	d03b      	beq.n	8012310 <_strtod_l+0xa8>
 8012298:	2200      	movs	r2, #0
 801229a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801229c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801229e:	782a      	ldrb	r2, [r5, #0]
 80122a0:	2a30      	cmp	r2, #48	@ 0x30
 80122a2:	f040 80b3 	bne.w	801240c <_strtod_l+0x1a4>
 80122a6:	786a      	ldrb	r2, [r5, #1]
 80122a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80122ac:	2a58      	cmp	r2, #88	@ 0x58
 80122ae:	d16e      	bne.n	801238e <_strtod_l+0x126>
 80122b0:	9302      	str	r3, [sp, #8]
 80122b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122b4:	9301      	str	r3, [sp, #4]
 80122b6:	ab1a      	add	r3, sp, #104	@ 0x68
 80122b8:	9300      	str	r3, [sp, #0]
 80122ba:	4a8e      	ldr	r2, [pc, #568]	@ (80124f4 <_strtod_l+0x28c>)
 80122bc:	9805      	ldr	r0, [sp, #20]
 80122be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80122c0:	a919      	add	r1, sp, #100	@ 0x64
 80122c2:	f001 fc7f 	bl	8013bc4 <__gethex>
 80122c6:	f010 060f 	ands.w	r6, r0, #15
 80122ca:	4604      	mov	r4, r0
 80122cc:	d005      	beq.n	80122da <_strtod_l+0x72>
 80122ce:	2e06      	cmp	r6, #6
 80122d0:	d128      	bne.n	8012324 <_strtod_l+0xbc>
 80122d2:	3501      	adds	r5, #1
 80122d4:	2300      	movs	r3, #0
 80122d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80122d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80122da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80122dc:	2b00      	cmp	r3, #0
 80122de:	f040 858e 	bne.w	8012dfe <_strtod_l+0xb96>
 80122e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122e4:	b1cb      	cbz	r3, 801231a <_strtod_l+0xb2>
 80122e6:	4652      	mov	r2, sl
 80122e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80122ec:	ec43 2b10 	vmov	d0, r2, r3
 80122f0:	b01f      	add	sp, #124	@ 0x7c
 80122f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f6:	2920      	cmp	r1, #32
 80122f8:	d1ce      	bne.n	8012298 <_strtod_l+0x30>
 80122fa:	3201      	adds	r2, #1
 80122fc:	e7c1      	b.n	8012282 <_strtod_l+0x1a>
 80122fe:	292d      	cmp	r1, #45	@ 0x2d
 8012300:	d1ca      	bne.n	8012298 <_strtod_l+0x30>
 8012302:	2101      	movs	r1, #1
 8012304:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012306:	1c51      	adds	r1, r2, #1
 8012308:	9119      	str	r1, [sp, #100]	@ 0x64
 801230a:	7852      	ldrb	r2, [r2, #1]
 801230c:	2a00      	cmp	r2, #0
 801230e:	d1c5      	bne.n	801229c <_strtod_l+0x34>
 8012310:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012312:	9419      	str	r4, [sp, #100]	@ 0x64
 8012314:	2b00      	cmp	r3, #0
 8012316:	f040 8570 	bne.w	8012dfa <_strtod_l+0xb92>
 801231a:	4652      	mov	r2, sl
 801231c:	465b      	mov	r3, fp
 801231e:	e7e5      	b.n	80122ec <_strtod_l+0x84>
 8012320:	2100      	movs	r1, #0
 8012322:	e7ef      	b.n	8012304 <_strtod_l+0x9c>
 8012324:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012326:	b13a      	cbz	r2, 8012338 <_strtod_l+0xd0>
 8012328:	2135      	movs	r1, #53	@ 0x35
 801232a:	a81c      	add	r0, sp, #112	@ 0x70
 801232c:	f7ff ff38 	bl	80121a0 <__copybits>
 8012330:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012332:	9805      	ldr	r0, [sp, #20]
 8012334:	f7ff fb06 	bl	8011944 <_Bfree>
 8012338:	3e01      	subs	r6, #1
 801233a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801233c:	2e04      	cmp	r6, #4
 801233e:	d806      	bhi.n	801234e <_strtod_l+0xe6>
 8012340:	e8df f006 	tbb	[pc, r6]
 8012344:	201d0314 	.word	0x201d0314
 8012348:	14          	.byte	0x14
 8012349:	00          	.byte	0x00
 801234a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801234e:	05e1      	lsls	r1, r4, #23
 8012350:	bf48      	it	mi
 8012352:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012356:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801235a:	0d1b      	lsrs	r3, r3, #20
 801235c:	051b      	lsls	r3, r3, #20
 801235e:	2b00      	cmp	r3, #0
 8012360:	d1bb      	bne.n	80122da <_strtod_l+0x72>
 8012362:	f7fe fbb7 	bl	8010ad4 <__errno>
 8012366:	2322      	movs	r3, #34	@ 0x22
 8012368:	6003      	str	r3, [r0, #0]
 801236a:	e7b6      	b.n	80122da <_strtod_l+0x72>
 801236c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8012370:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012374:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012378:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801237c:	e7e7      	b.n	801234e <_strtod_l+0xe6>
 801237e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80124fc <_strtod_l+0x294>
 8012382:	e7e4      	b.n	801234e <_strtod_l+0xe6>
 8012384:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012388:	f04f 3aff 	mov.w	sl, #4294967295
 801238c:	e7df      	b.n	801234e <_strtod_l+0xe6>
 801238e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012390:	1c5a      	adds	r2, r3, #1
 8012392:	9219      	str	r2, [sp, #100]	@ 0x64
 8012394:	785b      	ldrb	r3, [r3, #1]
 8012396:	2b30      	cmp	r3, #48	@ 0x30
 8012398:	d0f9      	beq.n	801238e <_strtod_l+0x126>
 801239a:	2b00      	cmp	r3, #0
 801239c:	d09d      	beq.n	80122da <_strtod_l+0x72>
 801239e:	2301      	movs	r3, #1
 80123a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80123a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80123a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80123a6:	2300      	movs	r3, #0
 80123a8:	9308      	str	r3, [sp, #32]
 80123aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80123ac:	461f      	mov	r7, r3
 80123ae:	220a      	movs	r2, #10
 80123b0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80123b2:	7805      	ldrb	r5, [r0, #0]
 80123b4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80123b8:	b2d9      	uxtb	r1, r3
 80123ba:	2909      	cmp	r1, #9
 80123bc:	d928      	bls.n	8012410 <_strtod_l+0x1a8>
 80123be:	494e      	ldr	r1, [pc, #312]	@ (80124f8 <_strtod_l+0x290>)
 80123c0:	2201      	movs	r2, #1
 80123c2:	f7fe faab 	bl	801091c <strncmp>
 80123c6:	2800      	cmp	r0, #0
 80123c8:	d032      	beq.n	8012430 <_strtod_l+0x1c8>
 80123ca:	2000      	movs	r0, #0
 80123cc:	462a      	mov	r2, r5
 80123ce:	4681      	mov	r9, r0
 80123d0:	463d      	mov	r5, r7
 80123d2:	4603      	mov	r3, r0
 80123d4:	2a65      	cmp	r2, #101	@ 0x65
 80123d6:	d001      	beq.n	80123dc <_strtod_l+0x174>
 80123d8:	2a45      	cmp	r2, #69	@ 0x45
 80123da:	d114      	bne.n	8012406 <_strtod_l+0x19e>
 80123dc:	b91d      	cbnz	r5, 80123e6 <_strtod_l+0x17e>
 80123de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80123e0:	4302      	orrs	r2, r0
 80123e2:	d095      	beq.n	8012310 <_strtod_l+0xa8>
 80123e4:	2500      	movs	r5, #0
 80123e6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80123e8:	1c62      	adds	r2, r4, #1
 80123ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80123ec:	7862      	ldrb	r2, [r4, #1]
 80123ee:	2a2b      	cmp	r2, #43	@ 0x2b
 80123f0:	d077      	beq.n	80124e2 <_strtod_l+0x27a>
 80123f2:	2a2d      	cmp	r2, #45	@ 0x2d
 80123f4:	d07b      	beq.n	80124ee <_strtod_l+0x286>
 80123f6:	f04f 0c00 	mov.w	ip, #0
 80123fa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80123fe:	2909      	cmp	r1, #9
 8012400:	f240 8082 	bls.w	8012508 <_strtod_l+0x2a0>
 8012404:	9419      	str	r4, [sp, #100]	@ 0x64
 8012406:	f04f 0800 	mov.w	r8, #0
 801240a:	e0a2      	b.n	8012552 <_strtod_l+0x2ea>
 801240c:	2300      	movs	r3, #0
 801240e:	e7c7      	b.n	80123a0 <_strtod_l+0x138>
 8012410:	2f08      	cmp	r7, #8
 8012412:	bfd5      	itete	le
 8012414:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8012416:	9908      	ldrgt	r1, [sp, #32]
 8012418:	fb02 3301 	mlale	r3, r2, r1, r3
 801241c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8012420:	f100 0001 	add.w	r0, r0, #1
 8012424:	bfd4      	ite	le
 8012426:	930a      	strle	r3, [sp, #40]	@ 0x28
 8012428:	9308      	strgt	r3, [sp, #32]
 801242a:	3701      	adds	r7, #1
 801242c:	9019      	str	r0, [sp, #100]	@ 0x64
 801242e:	e7bf      	b.n	80123b0 <_strtod_l+0x148>
 8012430:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012432:	1c5a      	adds	r2, r3, #1
 8012434:	9219      	str	r2, [sp, #100]	@ 0x64
 8012436:	785a      	ldrb	r2, [r3, #1]
 8012438:	b37f      	cbz	r7, 801249a <_strtod_l+0x232>
 801243a:	4681      	mov	r9, r0
 801243c:	463d      	mov	r5, r7
 801243e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8012442:	2b09      	cmp	r3, #9
 8012444:	d912      	bls.n	801246c <_strtod_l+0x204>
 8012446:	2301      	movs	r3, #1
 8012448:	e7c4      	b.n	80123d4 <_strtod_l+0x16c>
 801244a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801244c:	1c5a      	adds	r2, r3, #1
 801244e:	9219      	str	r2, [sp, #100]	@ 0x64
 8012450:	785a      	ldrb	r2, [r3, #1]
 8012452:	3001      	adds	r0, #1
 8012454:	2a30      	cmp	r2, #48	@ 0x30
 8012456:	d0f8      	beq.n	801244a <_strtod_l+0x1e2>
 8012458:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801245c:	2b08      	cmp	r3, #8
 801245e:	f200 84d3 	bhi.w	8012e08 <_strtod_l+0xba0>
 8012462:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012464:	930c      	str	r3, [sp, #48]	@ 0x30
 8012466:	4681      	mov	r9, r0
 8012468:	2000      	movs	r0, #0
 801246a:	4605      	mov	r5, r0
 801246c:	3a30      	subs	r2, #48	@ 0x30
 801246e:	f100 0301 	add.w	r3, r0, #1
 8012472:	d02a      	beq.n	80124ca <_strtod_l+0x262>
 8012474:	4499      	add	r9, r3
 8012476:	eb00 0c05 	add.w	ip, r0, r5
 801247a:	462b      	mov	r3, r5
 801247c:	210a      	movs	r1, #10
 801247e:	4563      	cmp	r3, ip
 8012480:	d10d      	bne.n	801249e <_strtod_l+0x236>
 8012482:	1c69      	adds	r1, r5, #1
 8012484:	4401      	add	r1, r0
 8012486:	4428      	add	r0, r5
 8012488:	2808      	cmp	r0, #8
 801248a:	dc16      	bgt.n	80124ba <_strtod_l+0x252>
 801248c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801248e:	230a      	movs	r3, #10
 8012490:	fb03 2300 	mla	r3, r3, r0, r2
 8012494:	930a      	str	r3, [sp, #40]	@ 0x28
 8012496:	2300      	movs	r3, #0
 8012498:	e018      	b.n	80124cc <_strtod_l+0x264>
 801249a:	4638      	mov	r0, r7
 801249c:	e7da      	b.n	8012454 <_strtod_l+0x1ec>
 801249e:	2b08      	cmp	r3, #8
 80124a0:	f103 0301 	add.w	r3, r3, #1
 80124a4:	dc03      	bgt.n	80124ae <_strtod_l+0x246>
 80124a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80124a8:	434e      	muls	r6, r1
 80124aa:	960a      	str	r6, [sp, #40]	@ 0x28
 80124ac:	e7e7      	b.n	801247e <_strtod_l+0x216>
 80124ae:	2b10      	cmp	r3, #16
 80124b0:	bfde      	ittt	le
 80124b2:	9e08      	ldrle	r6, [sp, #32]
 80124b4:	434e      	mulle	r6, r1
 80124b6:	9608      	strle	r6, [sp, #32]
 80124b8:	e7e1      	b.n	801247e <_strtod_l+0x216>
 80124ba:	280f      	cmp	r0, #15
 80124bc:	dceb      	bgt.n	8012496 <_strtod_l+0x22e>
 80124be:	9808      	ldr	r0, [sp, #32]
 80124c0:	230a      	movs	r3, #10
 80124c2:	fb03 2300 	mla	r3, r3, r0, r2
 80124c6:	9308      	str	r3, [sp, #32]
 80124c8:	e7e5      	b.n	8012496 <_strtod_l+0x22e>
 80124ca:	4629      	mov	r1, r5
 80124cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80124ce:	1c50      	adds	r0, r2, #1
 80124d0:	9019      	str	r0, [sp, #100]	@ 0x64
 80124d2:	7852      	ldrb	r2, [r2, #1]
 80124d4:	4618      	mov	r0, r3
 80124d6:	460d      	mov	r5, r1
 80124d8:	e7b1      	b.n	801243e <_strtod_l+0x1d6>
 80124da:	f04f 0900 	mov.w	r9, #0
 80124de:	2301      	movs	r3, #1
 80124e0:	e77d      	b.n	80123de <_strtod_l+0x176>
 80124e2:	f04f 0c00 	mov.w	ip, #0
 80124e6:	1ca2      	adds	r2, r4, #2
 80124e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80124ea:	78a2      	ldrb	r2, [r4, #2]
 80124ec:	e785      	b.n	80123fa <_strtod_l+0x192>
 80124ee:	f04f 0c01 	mov.w	ip, #1
 80124f2:	e7f8      	b.n	80124e6 <_strtod_l+0x27e>
 80124f4:	08015e58 	.word	0x08015e58
 80124f8:	08015e40 	.word	0x08015e40
 80124fc:	7ff00000 	.word	0x7ff00000
 8012500:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012502:	1c51      	adds	r1, r2, #1
 8012504:	9119      	str	r1, [sp, #100]	@ 0x64
 8012506:	7852      	ldrb	r2, [r2, #1]
 8012508:	2a30      	cmp	r2, #48	@ 0x30
 801250a:	d0f9      	beq.n	8012500 <_strtod_l+0x298>
 801250c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8012510:	2908      	cmp	r1, #8
 8012512:	f63f af78 	bhi.w	8012406 <_strtod_l+0x19e>
 8012516:	3a30      	subs	r2, #48	@ 0x30
 8012518:	920e      	str	r2, [sp, #56]	@ 0x38
 801251a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801251c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801251e:	f04f 080a 	mov.w	r8, #10
 8012522:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012524:	1c56      	adds	r6, r2, #1
 8012526:	9619      	str	r6, [sp, #100]	@ 0x64
 8012528:	7852      	ldrb	r2, [r2, #1]
 801252a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801252e:	f1be 0f09 	cmp.w	lr, #9
 8012532:	d939      	bls.n	80125a8 <_strtod_l+0x340>
 8012534:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012536:	1a76      	subs	r6, r6, r1
 8012538:	2e08      	cmp	r6, #8
 801253a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801253e:	dc03      	bgt.n	8012548 <_strtod_l+0x2e0>
 8012540:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012542:	4588      	cmp	r8, r1
 8012544:	bfa8      	it	ge
 8012546:	4688      	movge	r8, r1
 8012548:	f1bc 0f00 	cmp.w	ip, #0
 801254c:	d001      	beq.n	8012552 <_strtod_l+0x2ea>
 801254e:	f1c8 0800 	rsb	r8, r8, #0
 8012552:	2d00      	cmp	r5, #0
 8012554:	d14e      	bne.n	80125f4 <_strtod_l+0x38c>
 8012556:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012558:	4308      	orrs	r0, r1
 801255a:	f47f aebe 	bne.w	80122da <_strtod_l+0x72>
 801255e:	2b00      	cmp	r3, #0
 8012560:	f47f aed6 	bne.w	8012310 <_strtod_l+0xa8>
 8012564:	2a69      	cmp	r2, #105	@ 0x69
 8012566:	d028      	beq.n	80125ba <_strtod_l+0x352>
 8012568:	dc25      	bgt.n	80125b6 <_strtod_l+0x34e>
 801256a:	2a49      	cmp	r2, #73	@ 0x49
 801256c:	d025      	beq.n	80125ba <_strtod_l+0x352>
 801256e:	2a4e      	cmp	r2, #78	@ 0x4e
 8012570:	f47f aece 	bne.w	8012310 <_strtod_l+0xa8>
 8012574:	499b      	ldr	r1, [pc, #620]	@ (80127e4 <_strtod_l+0x57c>)
 8012576:	a819      	add	r0, sp, #100	@ 0x64
 8012578:	f001 fd46 	bl	8014008 <__match>
 801257c:	2800      	cmp	r0, #0
 801257e:	f43f aec7 	beq.w	8012310 <_strtod_l+0xa8>
 8012582:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	2b28      	cmp	r3, #40	@ 0x28
 8012588:	d12e      	bne.n	80125e8 <_strtod_l+0x380>
 801258a:	4997      	ldr	r1, [pc, #604]	@ (80127e8 <_strtod_l+0x580>)
 801258c:	aa1c      	add	r2, sp, #112	@ 0x70
 801258e:	a819      	add	r0, sp, #100	@ 0x64
 8012590:	f001 fd4e 	bl	8014030 <__hexnan>
 8012594:	2805      	cmp	r0, #5
 8012596:	d127      	bne.n	80125e8 <_strtod_l+0x380>
 8012598:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801259a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801259e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80125a2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80125a6:	e698      	b.n	80122da <_strtod_l+0x72>
 80125a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80125aa:	fb08 2101 	mla	r1, r8, r1, r2
 80125ae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80125b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80125b4:	e7b5      	b.n	8012522 <_strtod_l+0x2ba>
 80125b6:	2a6e      	cmp	r2, #110	@ 0x6e
 80125b8:	e7da      	b.n	8012570 <_strtod_l+0x308>
 80125ba:	498c      	ldr	r1, [pc, #560]	@ (80127ec <_strtod_l+0x584>)
 80125bc:	a819      	add	r0, sp, #100	@ 0x64
 80125be:	f001 fd23 	bl	8014008 <__match>
 80125c2:	2800      	cmp	r0, #0
 80125c4:	f43f aea4 	beq.w	8012310 <_strtod_l+0xa8>
 80125c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80125ca:	4989      	ldr	r1, [pc, #548]	@ (80127f0 <_strtod_l+0x588>)
 80125cc:	3b01      	subs	r3, #1
 80125ce:	a819      	add	r0, sp, #100	@ 0x64
 80125d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80125d2:	f001 fd19 	bl	8014008 <__match>
 80125d6:	b910      	cbnz	r0, 80125de <_strtod_l+0x376>
 80125d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80125da:	3301      	adds	r3, #1
 80125dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80125de:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8012800 <_strtod_l+0x598>
 80125e2:	f04f 0a00 	mov.w	sl, #0
 80125e6:	e678      	b.n	80122da <_strtod_l+0x72>
 80125e8:	4882      	ldr	r0, [pc, #520]	@ (80127f4 <_strtod_l+0x58c>)
 80125ea:	f001 fa61 	bl	8013ab0 <nan>
 80125ee:	ec5b ab10 	vmov	sl, fp, d0
 80125f2:	e672      	b.n	80122da <_strtod_l+0x72>
 80125f4:	eba8 0309 	sub.w	r3, r8, r9
 80125f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80125fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80125fc:	2f00      	cmp	r7, #0
 80125fe:	bf08      	it	eq
 8012600:	462f      	moveq	r7, r5
 8012602:	2d10      	cmp	r5, #16
 8012604:	462c      	mov	r4, r5
 8012606:	bfa8      	it	ge
 8012608:	2410      	movge	r4, #16
 801260a:	f7ed ff8b 	bl	8000524 <__aeabi_ui2d>
 801260e:	2d09      	cmp	r5, #9
 8012610:	4682      	mov	sl, r0
 8012612:	468b      	mov	fp, r1
 8012614:	dc13      	bgt.n	801263e <_strtod_l+0x3d6>
 8012616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012618:	2b00      	cmp	r3, #0
 801261a:	f43f ae5e 	beq.w	80122da <_strtod_l+0x72>
 801261e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012620:	dd78      	ble.n	8012714 <_strtod_l+0x4ac>
 8012622:	2b16      	cmp	r3, #22
 8012624:	dc5f      	bgt.n	80126e6 <_strtod_l+0x47e>
 8012626:	4974      	ldr	r1, [pc, #464]	@ (80127f8 <_strtod_l+0x590>)
 8012628:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801262c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012630:	4652      	mov	r2, sl
 8012632:	465b      	mov	r3, fp
 8012634:	f7ed fff0 	bl	8000618 <__aeabi_dmul>
 8012638:	4682      	mov	sl, r0
 801263a:	468b      	mov	fp, r1
 801263c:	e64d      	b.n	80122da <_strtod_l+0x72>
 801263e:	4b6e      	ldr	r3, [pc, #440]	@ (80127f8 <_strtod_l+0x590>)
 8012640:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012644:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8012648:	f7ed ffe6 	bl	8000618 <__aeabi_dmul>
 801264c:	4682      	mov	sl, r0
 801264e:	9808      	ldr	r0, [sp, #32]
 8012650:	468b      	mov	fp, r1
 8012652:	f7ed ff67 	bl	8000524 <__aeabi_ui2d>
 8012656:	4602      	mov	r2, r0
 8012658:	460b      	mov	r3, r1
 801265a:	4650      	mov	r0, sl
 801265c:	4659      	mov	r1, fp
 801265e:	f7ed fe25 	bl	80002ac <__adddf3>
 8012662:	2d0f      	cmp	r5, #15
 8012664:	4682      	mov	sl, r0
 8012666:	468b      	mov	fp, r1
 8012668:	ddd5      	ble.n	8012616 <_strtod_l+0x3ae>
 801266a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801266c:	1b2c      	subs	r4, r5, r4
 801266e:	441c      	add	r4, r3
 8012670:	2c00      	cmp	r4, #0
 8012672:	f340 8096 	ble.w	80127a2 <_strtod_l+0x53a>
 8012676:	f014 030f 	ands.w	r3, r4, #15
 801267a:	d00a      	beq.n	8012692 <_strtod_l+0x42a>
 801267c:	495e      	ldr	r1, [pc, #376]	@ (80127f8 <_strtod_l+0x590>)
 801267e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012682:	4652      	mov	r2, sl
 8012684:	465b      	mov	r3, fp
 8012686:	e9d1 0100 	ldrd	r0, r1, [r1]
 801268a:	f7ed ffc5 	bl	8000618 <__aeabi_dmul>
 801268e:	4682      	mov	sl, r0
 8012690:	468b      	mov	fp, r1
 8012692:	f034 040f 	bics.w	r4, r4, #15
 8012696:	d073      	beq.n	8012780 <_strtod_l+0x518>
 8012698:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801269c:	dd48      	ble.n	8012730 <_strtod_l+0x4c8>
 801269e:	2400      	movs	r4, #0
 80126a0:	46a0      	mov	r8, r4
 80126a2:	940a      	str	r4, [sp, #40]	@ 0x28
 80126a4:	46a1      	mov	r9, r4
 80126a6:	9a05      	ldr	r2, [sp, #20]
 80126a8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8012800 <_strtod_l+0x598>
 80126ac:	2322      	movs	r3, #34	@ 0x22
 80126ae:	6013      	str	r3, [r2, #0]
 80126b0:	f04f 0a00 	mov.w	sl, #0
 80126b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	f43f ae0f 	beq.w	80122da <_strtod_l+0x72>
 80126bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80126be:	9805      	ldr	r0, [sp, #20]
 80126c0:	f7ff f940 	bl	8011944 <_Bfree>
 80126c4:	9805      	ldr	r0, [sp, #20]
 80126c6:	4649      	mov	r1, r9
 80126c8:	f7ff f93c 	bl	8011944 <_Bfree>
 80126cc:	9805      	ldr	r0, [sp, #20]
 80126ce:	4641      	mov	r1, r8
 80126d0:	f7ff f938 	bl	8011944 <_Bfree>
 80126d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80126d6:	9805      	ldr	r0, [sp, #20]
 80126d8:	f7ff f934 	bl	8011944 <_Bfree>
 80126dc:	9805      	ldr	r0, [sp, #20]
 80126de:	4621      	mov	r1, r4
 80126e0:	f7ff f930 	bl	8011944 <_Bfree>
 80126e4:	e5f9      	b.n	80122da <_strtod_l+0x72>
 80126e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80126e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80126ec:	4293      	cmp	r3, r2
 80126ee:	dbbc      	blt.n	801266a <_strtod_l+0x402>
 80126f0:	4c41      	ldr	r4, [pc, #260]	@ (80127f8 <_strtod_l+0x590>)
 80126f2:	f1c5 050f 	rsb	r5, r5, #15
 80126f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80126fa:	4652      	mov	r2, sl
 80126fc:	465b      	mov	r3, fp
 80126fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012702:	f7ed ff89 	bl	8000618 <__aeabi_dmul>
 8012706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012708:	1b5d      	subs	r5, r3, r5
 801270a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801270e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012712:	e78f      	b.n	8012634 <_strtod_l+0x3cc>
 8012714:	3316      	adds	r3, #22
 8012716:	dba8      	blt.n	801266a <_strtod_l+0x402>
 8012718:	4b37      	ldr	r3, [pc, #220]	@ (80127f8 <_strtod_l+0x590>)
 801271a:	eba9 0808 	sub.w	r8, r9, r8
 801271e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8012722:	e9d8 2300 	ldrd	r2, r3, [r8]
 8012726:	4650      	mov	r0, sl
 8012728:	4659      	mov	r1, fp
 801272a:	f7ee f89f 	bl	800086c <__aeabi_ddiv>
 801272e:	e783      	b.n	8012638 <_strtod_l+0x3d0>
 8012730:	4b32      	ldr	r3, [pc, #200]	@ (80127fc <_strtod_l+0x594>)
 8012732:	9308      	str	r3, [sp, #32]
 8012734:	2300      	movs	r3, #0
 8012736:	1124      	asrs	r4, r4, #4
 8012738:	4650      	mov	r0, sl
 801273a:	4659      	mov	r1, fp
 801273c:	461e      	mov	r6, r3
 801273e:	2c01      	cmp	r4, #1
 8012740:	dc21      	bgt.n	8012786 <_strtod_l+0x51e>
 8012742:	b10b      	cbz	r3, 8012748 <_strtod_l+0x4e0>
 8012744:	4682      	mov	sl, r0
 8012746:	468b      	mov	fp, r1
 8012748:	492c      	ldr	r1, [pc, #176]	@ (80127fc <_strtod_l+0x594>)
 801274a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801274e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8012752:	4652      	mov	r2, sl
 8012754:	465b      	mov	r3, fp
 8012756:	e9d1 0100 	ldrd	r0, r1, [r1]
 801275a:	f7ed ff5d 	bl	8000618 <__aeabi_dmul>
 801275e:	4b28      	ldr	r3, [pc, #160]	@ (8012800 <_strtod_l+0x598>)
 8012760:	460a      	mov	r2, r1
 8012762:	400b      	ands	r3, r1
 8012764:	4927      	ldr	r1, [pc, #156]	@ (8012804 <_strtod_l+0x59c>)
 8012766:	428b      	cmp	r3, r1
 8012768:	4682      	mov	sl, r0
 801276a:	d898      	bhi.n	801269e <_strtod_l+0x436>
 801276c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8012770:	428b      	cmp	r3, r1
 8012772:	bf86      	itte	hi
 8012774:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8012808 <_strtod_l+0x5a0>
 8012778:	f04f 3aff 	movhi.w	sl, #4294967295
 801277c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012780:	2300      	movs	r3, #0
 8012782:	9308      	str	r3, [sp, #32]
 8012784:	e07a      	b.n	801287c <_strtod_l+0x614>
 8012786:	07e2      	lsls	r2, r4, #31
 8012788:	d505      	bpl.n	8012796 <_strtod_l+0x52e>
 801278a:	9b08      	ldr	r3, [sp, #32]
 801278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012790:	f7ed ff42 	bl	8000618 <__aeabi_dmul>
 8012794:	2301      	movs	r3, #1
 8012796:	9a08      	ldr	r2, [sp, #32]
 8012798:	3208      	adds	r2, #8
 801279a:	3601      	adds	r6, #1
 801279c:	1064      	asrs	r4, r4, #1
 801279e:	9208      	str	r2, [sp, #32]
 80127a0:	e7cd      	b.n	801273e <_strtod_l+0x4d6>
 80127a2:	d0ed      	beq.n	8012780 <_strtod_l+0x518>
 80127a4:	4264      	negs	r4, r4
 80127a6:	f014 020f 	ands.w	r2, r4, #15
 80127aa:	d00a      	beq.n	80127c2 <_strtod_l+0x55a>
 80127ac:	4b12      	ldr	r3, [pc, #72]	@ (80127f8 <_strtod_l+0x590>)
 80127ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80127b2:	4650      	mov	r0, sl
 80127b4:	4659      	mov	r1, fp
 80127b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ba:	f7ee f857 	bl	800086c <__aeabi_ddiv>
 80127be:	4682      	mov	sl, r0
 80127c0:	468b      	mov	fp, r1
 80127c2:	1124      	asrs	r4, r4, #4
 80127c4:	d0dc      	beq.n	8012780 <_strtod_l+0x518>
 80127c6:	2c1f      	cmp	r4, #31
 80127c8:	dd20      	ble.n	801280c <_strtod_l+0x5a4>
 80127ca:	2400      	movs	r4, #0
 80127cc:	46a0      	mov	r8, r4
 80127ce:	940a      	str	r4, [sp, #40]	@ 0x28
 80127d0:	46a1      	mov	r9, r4
 80127d2:	9a05      	ldr	r2, [sp, #20]
 80127d4:	2322      	movs	r3, #34	@ 0x22
 80127d6:	f04f 0a00 	mov.w	sl, #0
 80127da:	f04f 0b00 	mov.w	fp, #0
 80127de:	6013      	str	r3, [r2, #0]
 80127e0:	e768      	b.n	80126b4 <_strtod_l+0x44c>
 80127e2:	bf00      	nop
 80127e4:	08015b9e 	.word	0x08015b9e
 80127e8:	08015e44 	.word	0x08015e44
 80127ec:	08015b96 	.word	0x08015b96
 80127f0:	08015c78 	.word	0x08015c78
 80127f4:	08015c74 	.word	0x08015c74
 80127f8:	08015d78 	.word	0x08015d78
 80127fc:	08015d50 	.word	0x08015d50
 8012800:	7ff00000 	.word	0x7ff00000
 8012804:	7ca00000 	.word	0x7ca00000
 8012808:	7fefffff 	.word	0x7fefffff
 801280c:	f014 0310 	ands.w	r3, r4, #16
 8012810:	bf18      	it	ne
 8012812:	236a      	movne	r3, #106	@ 0x6a
 8012814:	4ea9      	ldr	r6, [pc, #676]	@ (8012abc <_strtod_l+0x854>)
 8012816:	9308      	str	r3, [sp, #32]
 8012818:	4650      	mov	r0, sl
 801281a:	4659      	mov	r1, fp
 801281c:	2300      	movs	r3, #0
 801281e:	07e2      	lsls	r2, r4, #31
 8012820:	d504      	bpl.n	801282c <_strtod_l+0x5c4>
 8012822:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012826:	f7ed fef7 	bl	8000618 <__aeabi_dmul>
 801282a:	2301      	movs	r3, #1
 801282c:	1064      	asrs	r4, r4, #1
 801282e:	f106 0608 	add.w	r6, r6, #8
 8012832:	d1f4      	bne.n	801281e <_strtod_l+0x5b6>
 8012834:	b10b      	cbz	r3, 801283a <_strtod_l+0x5d2>
 8012836:	4682      	mov	sl, r0
 8012838:	468b      	mov	fp, r1
 801283a:	9b08      	ldr	r3, [sp, #32]
 801283c:	b1b3      	cbz	r3, 801286c <_strtod_l+0x604>
 801283e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012842:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8012846:	2b00      	cmp	r3, #0
 8012848:	4659      	mov	r1, fp
 801284a:	dd0f      	ble.n	801286c <_strtod_l+0x604>
 801284c:	2b1f      	cmp	r3, #31
 801284e:	dd55      	ble.n	80128fc <_strtod_l+0x694>
 8012850:	2b34      	cmp	r3, #52	@ 0x34
 8012852:	bfde      	ittt	le
 8012854:	f04f 33ff 	movle.w	r3, #4294967295
 8012858:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801285c:	4093      	lslle	r3, r2
 801285e:	f04f 0a00 	mov.w	sl, #0
 8012862:	bfcc      	ite	gt
 8012864:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012868:	ea03 0b01 	andle.w	fp, r3, r1
 801286c:	2200      	movs	r2, #0
 801286e:	2300      	movs	r3, #0
 8012870:	4650      	mov	r0, sl
 8012872:	4659      	mov	r1, fp
 8012874:	f7ee f938 	bl	8000ae8 <__aeabi_dcmpeq>
 8012878:	2800      	cmp	r0, #0
 801287a:	d1a6      	bne.n	80127ca <_strtod_l+0x562>
 801287c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801287e:	9300      	str	r3, [sp, #0]
 8012880:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012882:	9805      	ldr	r0, [sp, #20]
 8012884:	462b      	mov	r3, r5
 8012886:	463a      	mov	r2, r7
 8012888:	f7ff f8c4 	bl	8011a14 <__s2b>
 801288c:	900a      	str	r0, [sp, #40]	@ 0x28
 801288e:	2800      	cmp	r0, #0
 8012890:	f43f af05 	beq.w	801269e <_strtod_l+0x436>
 8012894:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012896:	2a00      	cmp	r2, #0
 8012898:	eba9 0308 	sub.w	r3, r9, r8
 801289c:	bfa8      	it	ge
 801289e:	2300      	movge	r3, #0
 80128a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80128a2:	2400      	movs	r4, #0
 80128a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80128a8:	9316      	str	r3, [sp, #88]	@ 0x58
 80128aa:	46a0      	mov	r8, r4
 80128ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128ae:	9805      	ldr	r0, [sp, #20]
 80128b0:	6859      	ldr	r1, [r3, #4]
 80128b2:	f7ff f807 	bl	80118c4 <_Balloc>
 80128b6:	4681      	mov	r9, r0
 80128b8:	2800      	cmp	r0, #0
 80128ba:	f43f aef4 	beq.w	80126a6 <_strtod_l+0x43e>
 80128be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128c0:	691a      	ldr	r2, [r3, #16]
 80128c2:	3202      	adds	r2, #2
 80128c4:	f103 010c 	add.w	r1, r3, #12
 80128c8:	0092      	lsls	r2, r2, #2
 80128ca:	300c      	adds	r0, #12
 80128cc:	f7fe f92f 	bl	8010b2e <memcpy>
 80128d0:	ec4b ab10 	vmov	d0, sl, fp
 80128d4:	9805      	ldr	r0, [sp, #20]
 80128d6:	aa1c      	add	r2, sp, #112	@ 0x70
 80128d8:	a91b      	add	r1, sp, #108	@ 0x6c
 80128da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80128de:	f7ff fbd5 	bl	801208c <__d2b>
 80128e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80128e4:	2800      	cmp	r0, #0
 80128e6:	f43f aede 	beq.w	80126a6 <_strtod_l+0x43e>
 80128ea:	9805      	ldr	r0, [sp, #20]
 80128ec:	2101      	movs	r1, #1
 80128ee:	f7ff f927 	bl	8011b40 <__i2b>
 80128f2:	4680      	mov	r8, r0
 80128f4:	b948      	cbnz	r0, 801290a <_strtod_l+0x6a2>
 80128f6:	f04f 0800 	mov.w	r8, #0
 80128fa:	e6d4      	b.n	80126a6 <_strtod_l+0x43e>
 80128fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012900:	fa02 f303 	lsl.w	r3, r2, r3
 8012904:	ea03 0a0a 	and.w	sl, r3, sl
 8012908:	e7b0      	b.n	801286c <_strtod_l+0x604>
 801290a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801290c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801290e:	2d00      	cmp	r5, #0
 8012910:	bfab      	itete	ge
 8012912:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012914:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012916:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012918:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801291a:	bfac      	ite	ge
 801291c:	18ef      	addge	r7, r5, r3
 801291e:	1b5e      	sublt	r6, r3, r5
 8012920:	9b08      	ldr	r3, [sp, #32]
 8012922:	1aed      	subs	r5, r5, r3
 8012924:	4415      	add	r5, r2
 8012926:	4b66      	ldr	r3, [pc, #408]	@ (8012ac0 <_strtod_l+0x858>)
 8012928:	3d01      	subs	r5, #1
 801292a:	429d      	cmp	r5, r3
 801292c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012930:	da50      	bge.n	80129d4 <_strtod_l+0x76c>
 8012932:	1b5b      	subs	r3, r3, r5
 8012934:	2b1f      	cmp	r3, #31
 8012936:	eba2 0203 	sub.w	r2, r2, r3
 801293a:	f04f 0101 	mov.w	r1, #1
 801293e:	dc3d      	bgt.n	80129bc <_strtod_l+0x754>
 8012940:	fa01 f303 	lsl.w	r3, r1, r3
 8012944:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012946:	2300      	movs	r3, #0
 8012948:	9310      	str	r3, [sp, #64]	@ 0x40
 801294a:	18bd      	adds	r5, r7, r2
 801294c:	9b08      	ldr	r3, [sp, #32]
 801294e:	42af      	cmp	r7, r5
 8012950:	4416      	add	r6, r2
 8012952:	441e      	add	r6, r3
 8012954:	463b      	mov	r3, r7
 8012956:	bfa8      	it	ge
 8012958:	462b      	movge	r3, r5
 801295a:	42b3      	cmp	r3, r6
 801295c:	bfa8      	it	ge
 801295e:	4633      	movge	r3, r6
 8012960:	2b00      	cmp	r3, #0
 8012962:	bfc2      	ittt	gt
 8012964:	1aed      	subgt	r5, r5, r3
 8012966:	1af6      	subgt	r6, r6, r3
 8012968:	1aff      	subgt	r7, r7, r3
 801296a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801296c:	2b00      	cmp	r3, #0
 801296e:	dd16      	ble.n	801299e <_strtod_l+0x736>
 8012970:	4641      	mov	r1, r8
 8012972:	9805      	ldr	r0, [sp, #20]
 8012974:	461a      	mov	r2, r3
 8012976:	f7ff f9a3 	bl	8011cc0 <__pow5mult>
 801297a:	4680      	mov	r8, r0
 801297c:	2800      	cmp	r0, #0
 801297e:	d0ba      	beq.n	80128f6 <_strtod_l+0x68e>
 8012980:	4601      	mov	r1, r0
 8012982:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012984:	9805      	ldr	r0, [sp, #20]
 8012986:	f7ff f8f1 	bl	8011b6c <__multiply>
 801298a:	900e      	str	r0, [sp, #56]	@ 0x38
 801298c:	2800      	cmp	r0, #0
 801298e:	f43f ae8a 	beq.w	80126a6 <_strtod_l+0x43e>
 8012992:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012994:	9805      	ldr	r0, [sp, #20]
 8012996:	f7fe ffd5 	bl	8011944 <_Bfree>
 801299a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801299c:	931a      	str	r3, [sp, #104]	@ 0x68
 801299e:	2d00      	cmp	r5, #0
 80129a0:	dc1d      	bgt.n	80129de <_strtod_l+0x776>
 80129a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	dd23      	ble.n	80129f0 <_strtod_l+0x788>
 80129a8:	4649      	mov	r1, r9
 80129aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80129ac:	9805      	ldr	r0, [sp, #20]
 80129ae:	f7ff f987 	bl	8011cc0 <__pow5mult>
 80129b2:	4681      	mov	r9, r0
 80129b4:	b9e0      	cbnz	r0, 80129f0 <_strtod_l+0x788>
 80129b6:	f04f 0900 	mov.w	r9, #0
 80129ba:	e674      	b.n	80126a6 <_strtod_l+0x43e>
 80129bc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80129c0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80129c4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80129c8:	35e2      	adds	r5, #226	@ 0xe2
 80129ca:	fa01 f305 	lsl.w	r3, r1, r5
 80129ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80129d0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80129d2:	e7ba      	b.n	801294a <_strtod_l+0x6e2>
 80129d4:	2300      	movs	r3, #0
 80129d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80129d8:	2301      	movs	r3, #1
 80129da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80129dc:	e7b5      	b.n	801294a <_strtod_l+0x6e2>
 80129de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80129e0:	9805      	ldr	r0, [sp, #20]
 80129e2:	462a      	mov	r2, r5
 80129e4:	f7ff f9c6 	bl	8011d74 <__lshift>
 80129e8:	901a      	str	r0, [sp, #104]	@ 0x68
 80129ea:	2800      	cmp	r0, #0
 80129ec:	d1d9      	bne.n	80129a2 <_strtod_l+0x73a>
 80129ee:	e65a      	b.n	80126a6 <_strtod_l+0x43e>
 80129f0:	2e00      	cmp	r6, #0
 80129f2:	dd07      	ble.n	8012a04 <_strtod_l+0x79c>
 80129f4:	4649      	mov	r1, r9
 80129f6:	9805      	ldr	r0, [sp, #20]
 80129f8:	4632      	mov	r2, r6
 80129fa:	f7ff f9bb 	bl	8011d74 <__lshift>
 80129fe:	4681      	mov	r9, r0
 8012a00:	2800      	cmp	r0, #0
 8012a02:	d0d8      	beq.n	80129b6 <_strtod_l+0x74e>
 8012a04:	2f00      	cmp	r7, #0
 8012a06:	dd08      	ble.n	8012a1a <_strtod_l+0x7b2>
 8012a08:	4641      	mov	r1, r8
 8012a0a:	9805      	ldr	r0, [sp, #20]
 8012a0c:	463a      	mov	r2, r7
 8012a0e:	f7ff f9b1 	bl	8011d74 <__lshift>
 8012a12:	4680      	mov	r8, r0
 8012a14:	2800      	cmp	r0, #0
 8012a16:	f43f ae46 	beq.w	80126a6 <_strtod_l+0x43e>
 8012a1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012a1c:	9805      	ldr	r0, [sp, #20]
 8012a1e:	464a      	mov	r2, r9
 8012a20:	f7ff fa30 	bl	8011e84 <__mdiff>
 8012a24:	4604      	mov	r4, r0
 8012a26:	2800      	cmp	r0, #0
 8012a28:	f43f ae3d 	beq.w	80126a6 <_strtod_l+0x43e>
 8012a2c:	68c3      	ldr	r3, [r0, #12]
 8012a2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012a30:	2300      	movs	r3, #0
 8012a32:	60c3      	str	r3, [r0, #12]
 8012a34:	4641      	mov	r1, r8
 8012a36:	f7ff fa09 	bl	8011e4c <__mcmp>
 8012a3a:	2800      	cmp	r0, #0
 8012a3c:	da46      	bge.n	8012acc <_strtod_l+0x864>
 8012a3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a40:	ea53 030a 	orrs.w	r3, r3, sl
 8012a44:	d16c      	bne.n	8012b20 <_strtod_l+0x8b8>
 8012a46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d168      	bne.n	8012b20 <_strtod_l+0x8b8>
 8012a4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012a52:	0d1b      	lsrs	r3, r3, #20
 8012a54:	051b      	lsls	r3, r3, #20
 8012a56:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012a5a:	d961      	bls.n	8012b20 <_strtod_l+0x8b8>
 8012a5c:	6963      	ldr	r3, [r4, #20]
 8012a5e:	b913      	cbnz	r3, 8012a66 <_strtod_l+0x7fe>
 8012a60:	6923      	ldr	r3, [r4, #16]
 8012a62:	2b01      	cmp	r3, #1
 8012a64:	dd5c      	ble.n	8012b20 <_strtod_l+0x8b8>
 8012a66:	4621      	mov	r1, r4
 8012a68:	2201      	movs	r2, #1
 8012a6a:	9805      	ldr	r0, [sp, #20]
 8012a6c:	f7ff f982 	bl	8011d74 <__lshift>
 8012a70:	4641      	mov	r1, r8
 8012a72:	4604      	mov	r4, r0
 8012a74:	f7ff f9ea 	bl	8011e4c <__mcmp>
 8012a78:	2800      	cmp	r0, #0
 8012a7a:	dd51      	ble.n	8012b20 <_strtod_l+0x8b8>
 8012a7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012a80:	9a08      	ldr	r2, [sp, #32]
 8012a82:	0d1b      	lsrs	r3, r3, #20
 8012a84:	051b      	lsls	r3, r3, #20
 8012a86:	2a00      	cmp	r2, #0
 8012a88:	d06b      	beq.n	8012b62 <_strtod_l+0x8fa>
 8012a8a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8012a8e:	d868      	bhi.n	8012b62 <_strtod_l+0x8fa>
 8012a90:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012a94:	f67f ae9d 	bls.w	80127d2 <_strtod_l+0x56a>
 8012a98:	4b0a      	ldr	r3, [pc, #40]	@ (8012ac4 <_strtod_l+0x85c>)
 8012a9a:	4650      	mov	r0, sl
 8012a9c:	4659      	mov	r1, fp
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	f7ed fdba 	bl	8000618 <__aeabi_dmul>
 8012aa4:	4b08      	ldr	r3, [pc, #32]	@ (8012ac8 <_strtod_l+0x860>)
 8012aa6:	400b      	ands	r3, r1
 8012aa8:	4682      	mov	sl, r0
 8012aaa:	468b      	mov	fp, r1
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	f47f ae05 	bne.w	80126bc <_strtod_l+0x454>
 8012ab2:	9a05      	ldr	r2, [sp, #20]
 8012ab4:	2322      	movs	r3, #34	@ 0x22
 8012ab6:	6013      	str	r3, [r2, #0]
 8012ab8:	e600      	b.n	80126bc <_strtod_l+0x454>
 8012aba:	bf00      	nop
 8012abc:	08015e70 	.word	0x08015e70
 8012ac0:	fffffc02 	.word	0xfffffc02
 8012ac4:	39500000 	.word	0x39500000
 8012ac8:	7ff00000 	.word	0x7ff00000
 8012acc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012ad0:	d165      	bne.n	8012b9e <_strtod_l+0x936>
 8012ad2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012ad4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012ad8:	b35a      	cbz	r2, 8012b32 <_strtod_l+0x8ca>
 8012ada:	4a9f      	ldr	r2, [pc, #636]	@ (8012d58 <_strtod_l+0xaf0>)
 8012adc:	4293      	cmp	r3, r2
 8012ade:	d12b      	bne.n	8012b38 <_strtod_l+0x8d0>
 8012ae0:	9b08      	ldr	r3, [sp, #32]
 8012ae2:	4651      	mov	r1, sl
 8012ae4:	b303      	cbz	r3, 8012b28 <_strtod_l+0x8c0>
 8012ae6:	4b9d      	ldr	r3, [pc, #628]	@ (8012d5c <_strtod_l+0xaf4>)
 8012ae8:	465a      	mov	r2, fp
 8012aea:	4013      	ands	r3, r2
 8012aec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012af0:	f04f 32ff 	mov.w	r2, #4294967295
 8012af4:	d81b      	bhi.n	8012b2e <_strtod_l+0x8c6>
 8012af6:	0d1b      	lsrs	r3, r3, #20
 8012af8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012afc:	fa02 f303 	lsl.w	r3, r2, r3
 8012b00:	4299      	cmp	r1, r3
 8012b02:	d119      	bne.n	8012b38 <_strtod_l+0x8d0>
 8012b04:	4b96      	ldr	r3, [pc, #600]	@ (8012d60 <_strtod_l+0xaf8>)
 8012b06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	d102      	bne.n	8012b12 <_strtod_l+0x8aa>
 8012b0c:	3101      	adds	r1, #1
 8012b0e:	f43f adca 	beq.w	80126a6 <_strtod_l+0x43e>
 8012b12:	4b92      	ldr	r3, [pc, #584]	@ (8012d5c <_strtod_l+0xaf4>)
 8012b14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b16:	401a      	ands	r2, r3
 8012b18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8012b1c:	f04f 0a00 	mov.w	sl, #0
 8012b20:	9b08      	ldr	r3, [sp, #32]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d1b8      	bne.n	8012a98 <_strtod_l+0x830>
 8012b26:	e5c9      	b.n	80126bc <_strtod_l+0x454>
 8012b28:	f04f 33ff 	mov.w	r3, #4294967295
 8012b2c:	e7e8      	b.n	8012b00 <_strtod_l+0x898>
 8012b2e:	4613      	mov	r3, r2
 8012b30:	e7e6      	b.n	8012b00 <_strtod_l+0x898>
 8012b32:	ea53 030a 	orrs.w	r3, r3, sl
 8012b36:	d0a1      	beq.n	8012a7c <_strtod_l+0x814>
 8012b38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012b3a:	b1db      	cbz	r3, 8012b74 <_strtod_l+0x90c>
 8012b3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b3e:	4213      	tst	r3, r2
 8012b40:	d0ee      	beq.n	8012b20 <_strtod_l+0x8b8>
 8012b42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012b44:	9a08      	ldr	r2, [sp, #32]
 8012b46:	4650      	mov	r0, sl
 8012b48:	4659      	mov	r1, fp
 8012b4a:	b1bb      	cbz	r3, 8012b7c <_strtod_l+0x914>
 8012b4c:	f7ff fb6c 	bl	8012228 <sulp>
 8012b50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012b54:	ec53 2b10 	vmov	r2, r3, d0
 8012b58:	f7ed fba8 	bl	80002ac <__adddf3>
 8012b5c:	4682      	mov	sl, r0
 8012b5e:	468b      	mov	fp, r1
 8012b60:	e7de      	b.n	8012b20 <_strtod_l+0x8b8>
 8012b62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012b66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012b6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012b6e:	f04f 3aff 	mov.w	sl, #4294967295
 8012b72:	e7d5      	b.n	8012b20 <_strtod_l+0x8b8>
 8012b74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012b76:	ea13 0f0a 	tst.w	r3, sl
 8012b7a:	e7e1      	b.n	8012b40 <_strtod_l+0x8d8>
 8012b7c:	f7ff fb54 	bl	8012228 <sulp>
 8012b80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012b84:	ec53 2b10 	vmov	r2, r3, d0
 8012b88:	f7ed fb8e 	bl	80002a8 <__aeabi_dsub>
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	2300      	movs	r3, #0
 8012b90:	4682      	mov	sl, r0
 8012b92:	468b      	mov	fp, r1
 8012b94:	f7ed ffa8 	bl	8000ae8 <__aeabi_dcmpeq>
 8012b98:	2800      	cmp	r0, #0
 8012b9a:	d0c1      	beq.n	8012b20 <_strtod_l+0x8b8>
 8012b9c:	e619      	b.n	80127d2 <_strtod_l+0x56a>
 8012b9e:	4641      	mov	r1, r8
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f7ff facb 	bl	801213c <__ratio>
 8012ba6:	ec57 6b10 	vmov	r6, r7, d0
 8012baa:	2200      	movs	r2, #0
 8012bac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012bb0:	4630      	mov	r0, r6
 8012bb2:	4639      	mov	r1, r7
 8012bb4:	f7ed ffac 	bl	8000b10 <__aeabi_dcmple>
 8012bb8:	2800      	cmp	r0, #0
 8012bba:	d06f      	beq.n	8012c9c <_strtod_l+0xa34>
 8012bbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d17a      	bne.n	8012cb8 <_strtod_l+0xa50>
 8012bc2:	f1ba 0f00 	cmp.w	sl, #0
 8012bc6:	d158      	bne.n	8012c7a <_strtod_l+0xa12>
 8012bc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012bca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d15a      	bne.n	8012c88 <_strtod_l+0xa20>
 8012bd2:	4b64      	ldr	r3, [pc, #400]	@ (8012d64 <_strtod_l+0xafc>)
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	4630      	mov	r0, r6
 8012bd8:	4639      	mov	r1, r7
 8012bda:	f7ed ff8f 	bl	8000afc <__aeabi_dcmplt>
 8012bde:	2800      	cmp	r0, #0
 8012be0:	d159      	bne.n	8012c96 <_strtod_l+0xa2e>
 8012be2:	4630      	mov	r0, r6
 8012be4:	4639      	mov	r1, r7
 8012be6:	4b60      	ldr	r3, [pc, #384]	@ (8012d68 <_strtod_l+0xb00>)
 8012be8:	2200      	movs	r2, #0
 8012bea:	f7ed fd15 	bl	8000618 <__aeabi_dmul>
 8012bee:	4606      	mov	r6, r0
 8012bf0:	460f      	mov	r7, r1
 8012bf2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012bf6:	9606      	str	r6, [sp, #24]
 8012bf8:	9307      	str	r3, [sp, #28]
 8012bfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012bfe:	4d57      	ldr	r5, [pc, #348]	@ (8012d5c <_strtod_l+0xaf4>)
 8012c00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012c04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c06:	401d      	ands	r5, r3
 8012c08:	4b58      	ldr	r3, [pc, #352]	@ (8012d6c <_strtod_l+0xb04>)
 8012c0a:	429d      	cmp	r5, r3
 8012c0c:	f040 80b2 	bne.w	8012d74 <_strtod_l+0xb0c>
 8012c10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012c16:	ec4b ab10 	vmov	d0, sl, fp
 8012c1a:	f7ff f9c7 	bl	8011fac <__ulp>
 8012c1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012c22:	ec51 0b10 	vmov	r0, r1, d0
 8012c26:	f7ed fcf7 	bl	8000618 <__aeabi_dmul>
 8012c2a:	4652      	mov	r2, sl
 8012c2c:	465b      	mov	r3, fp
 8012c2e:	f7ed fb3d 	bl	80002ac <__adddf3>
 8012c32:	460b      	mov	r3, r1
 8012c34:	4949      	ldr	r1, [pc, #292]	@ (8012d5c <_strtod_l+0xaf4>)
 8012c36:	4a4e      	ldr	r2, [pc, #312]	@ (8012d70 <_strtod_l+0xb08>)
 8012c38:	4019      	ands	r1, r3
 8012c3a:	4291      	cmp	r1, r2
 8012c3c:	4682      	mov	sl, r0
 8012c3e:	d942      	bls.n	8012cc6 <_strtod_l+0xa5e>
 8012c40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012c42:	4b47      	ldr	r3, [pc, #284]	@ (8012d60 <_strtod_l+0xaf8>)
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d103      	bne.n	8012c50 <_strtod_l+0x9e8>
 8012c48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	f43f ad2b 	beq.w	80126a6 <_strtod_l+0x43e>
 8012c50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012d60 <_strtod_l+0xaf8>
 8012c54:	f04f 3aff 	mov.w	sl, #4294967295
 8012c58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012c5a:	9805      	ldr	r0, [sp, #20]
 8012c5c:	f7fe fe72 	bl	8011944 <_Bfree>
 8012c60:	9805      	ldr	r0, [sp, #20]
 8012c62:	4649      	mov	r1, r9
 8012c64:	f7fe fe6e 	bl	8011944 <_Bfree>
 8012c68:	9805      	ldr	r0, [sp, #20]
 8012c6a:	4641      	mov	r1, r8
 8012c6c:	f7fe fe6a 	bl	8011944 <_Bfree>
 8012c70:	9805      	ldr	r0, [sp, #20]
 8012c72:	4621      	mov	r1, r4
 8012c74:	f7fe fe66 	bl	8011944 <_Bfree>
 8012c78:	e618      	b.n	80128ac <_strtod_l+0x644>
 8012c7a:	f1ba 0f01 	cmp.w	sl, #1
 8012c7e:	d103      	bne.n	8012c88 <_strtod_l+0xa20>
 8012c80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	f43f ada5 	beq.w	80127d2 <_strtod_l+0x56a>
 8012c88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012d38 <_strtod_l+0xad0>
 8012c8c:	4f35      	ldr	r7, [pc, #212]	@ (8012d64 <_strtod_l+0xafc>)
 8012c8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012c92:	2600      	movs	r6, #0
 8012c94:	e7b1      	b.n	8012bfa <_strtod_l+0x992>
 8012c96:	4f34      	ldr	r7, [pc, #208]	@ (8012d68 <_strtod_l+0xb00>)
 8012c98:	2600      	movs	r6, #0
 8012c9a:	e7aa      	b.n	8012bf2 <_strtod_l+0x98a>
 8012c9c:	4b32      	ldr	r3, [pc, #200]	@ (8012d68 <_strtod_l+0xb00>)
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	4639      	mov	r1, r7
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	f7ed fcb8 	bl	8000618 <__aeabi_dmul>
 8012ca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012caa:	4606      	mov	r6, r0
 8012cac:	460f      	mov	r7, r1
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d09f      	beq.n	8012bf2 <_strtod_l+0x98a>
 8012cb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012cb6:	e7a0      	b.n	8012bfa <_strtod_l+0x992>
 8012cb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012d40 <_strtod_l+0xad8>
 8012cbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012cc0:	ec57 6b17 	vmov	r6, r7, d7
 8012cc4:	e799      	b.n	8012bfa <_strtod_l+0x992>
 8012cc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8012cca:	9b08      	ldr	r3, [sp, #32]
 8012ccc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d1c1      	bne.n	8012c58 <_strtod_l+0x9f0>
 8012cd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012cd8:	0d1b      	lsrs	r3, r3, #20
 8012cda:	051b      	lsls	r3, r3, #20
 8012cdc:	429d      	cmp	r5, r3
 8012cde:	d1bb      	bne.n	8012c58 <_strtod_l+0x9f0>
 8012ce0:	4630      	mov	r0, r6
 8012ce2:	4639      	mov	r1, r7
 8012ce4:	f7ed fff8 	bl	8000cd8 <__aeabi_d2lz>
 8012ce8:	f7ed fc68 	bl	80005bc <__aeabi_l2d>
 8012cec:	4602      	mov	r2, r0
 8012cee:	460b      	mov	r3, r1
 8012cf0:	4630      	mov	r0, r6
 8012cf2:	4639      	mov	r1, r7
 8012cf4:	f7ed fad8 	bl	80002a8 <__aeabi_dsub>
 8012cf8:	460b      	mov	r3, r1
 8012cfa:	4602      	mov	r2, r0
 8012cfc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012d00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012d06:	ea46 060a 	orr.w	r6, r6, sl
 8012d0a:	431e      	orrs	r6, r3
 8012d0c:	d06f      	beq.n	8012dee <_strtod_l+0xb86>
 8012d0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012d48 <_strtod_l+0xae0>)
 8012d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d14:	f7ed fef2 	bl	8000afc <__aeabi_dcmplt>
 8012d18:	2800      	cmp	r0, #0
 8012d1a:	f47f accf 	bne.w	80126bc <_strtod_l+0x454>
 8012d1e:	a30c      	add	r3, pc, #48	@ (adr r3, 8012d50 <_strtod_l+0xae8>)
 8012d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012d28:	f7ed ff06 	bl	8000b38 <__aeabi_dcmpgt>
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	d093      	beq.n	8012c58 <_strtod_l+0x9f0>
 8012d30:	e4c4      	b.n	80126bc <_strtod_l+0x454>
 8012d32:	bf00      	nop
 8012d34:	f3af 8000 	nop.w
 8012d38:	00000000 	.word	0x00000000
 8012d3c:	bff00000 	.word	0xbff00000
 8012d40:	00000000 	.word	0x00000000
 8012d44:	3ff00000 	.word	0x3ff00000
 8012d48:	94a03595 	.word	0x94a03595
 8012d4c:	3fdfffff 	.word	0x3fdfffff
 8012d50:	35afe535 	.word	0x35afe535
 8012d54:	3fe00000 	.word	0x3fe00000
 8012d58:	000fffff 	.word	0x000fffff
 8012d5c:	7ff00000 	.word	0x7ff00000
 8012d60:	7fefffff 	.word	0x7fefffff
 8012d64:	3ff00000 	.word	0x3ff00000
 8012d68:	3fe00000 	.word	0x3fe00000
 8012d6c:	7fe00000 	.word	0x7fe00000
 8012d70:	7c9fffff 	.word	0x7c9fffff
 8012d74:	9b08      	ldr	r3, [sp, #32]
 8012d76:	b323      	cbz	r3, 8012dc2 <_strtod_l+0xb5a>
 8012d78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8012d7c:	d821      	bhi.n	8012dc2 <_strtod_l+0xb5a>
 8012d7e:	a328      	add	r3, pc, #160	@ (adr r3, 8012e20 <_strtod_l+0xbb8>)
 8012d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d84:	4630      	mov	r0, r6
 8012d86:	4639      	mov	r1, r7
 8012d88:	f7ed fec2 	bl	8000b10 <__aeabi_dcmple>
 8012d8c:	b1a0      	cbz	r0, 8012db8 <_strtod_l+0xb50>
 8012d8e:	4639      	mov	r1, r7
 8012d90:	4630      	mov	r0, r6
 8012d92:	f7ed ff19 	bl	8000bc8 <__aeabi_d2uiz>
 8012d96:	2801      	cmp	r0, #1
 8012d98:	bf38      	it	cc
 8012d9a:	2001      	movcc	r0, #1
 8012d9c:	f7ed fbc2 	bl	8000524 <__aeabi_ui2d>
 8012da0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012da2:	4606      	mov	r6, r0
 8012da4:	460f      	mov	r7, r1
 8012da6:	b9fb      	cbnz	r3, 8012de8 <_strtod_l+0xb80>
 8012da8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012dac:	9014      	str	r0, [sp, #80]	@ 0x50
 8012dae:	9315      	str	r3, [sp, #84]	@ 0x54
 8012db0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012db4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012db8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012dba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8012dbe:	1b5b      	subs	r3, r3, r5
 8012dc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8012dc2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012dc6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8012dca:	f7ff f8ef 	bl	8011fac <__ulp>
 8012dce:	4650      	mov	r0, sl
 8012dd0:	ec53 2b10 	vmov	r2, r3, d0
 8012dd4:	4659      	mov	r1, fp
 8012dd6:	f7ed fc1f 	bl	8000618 <__aeabi_dmul>
 8012dda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012dde:	f7ed fa65 	bl	80002ac <__adddf3>
 8012de2:	4682      	mov	sl, r0
 8012de4:	468b      	mov	fp, r1
 8012de6:	e770      	b.n	8012cca <_strtod_l+0xa62>
 8012de8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8012dec:	e7e0      	b.n	8012db0 <_strtod_l+0xb48>
 8012dee:	a30e      	add	r3, pc, #56	@ (adr r3, 8012e28 <_strtod_l+0xbc0>)
 8012df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df4:	f7ed fe82 	bl	8000afc <__aeabi_dcmplt>
 8012df8:	e798      	b.n	8012d2c <_strtod_l+0xac4>
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012dfe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012e00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012e02:	6013      	str	r3, [r2, #0]
 8012e04:	f7ff ba6d 	b.w	80122e2 <_strtod_l+0x7a>
 8012e08:	2a65      	cmp	r2, #101	@ 0x65
 8012e0a:	f43f ab66 	beq.w	80124da <_strtod_l+0x272>
 8012e0e:	2a45      	cmp	r2, #69	@ 0x45
 8012e10:	f43f ab63 	beq.w	80124da <_strtod_l+0x272>
 8012e14:	2301      	movs	r3, #1
 8012e16:	f7ff bb9e 	b.w	8012556 <_strtod_l+0x2ee>
 8012e1a:	bf00      	nop
 8012e1c:	f3af 8000 	nop.w
 8012e20:	ffc00000 	.word	0xffc00000
 8012e24:	41dfffff 	.word	0x41dfffff
 8012e28:	94a03595 	.word	0x94a03595
 8012e2c:	3fcfffff 	.word	0x3fcfffff

08012e30 <_strtod_r>:
 8012e30:	4b01      	ldr	r3, [pc, #4]	@ (8012e38 <_strtod_r+0x8>)
 8012e32:	f7ff ba19 	b.w	8012268 <_strtod_l>
 8012e36:	bf00      	nop
 8012e38:	20000114 	.word	0x20000114

08012e3c <_strtol_l.constprop.0>:
 8012e3c:	2b24      	cmp	r3, #36	@ 0x24
 8012e3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e42:	4686      	mov	lr, r0
 8012e44:	4690      	mov	r8, r2
 8012e46:	d801      	bhi.n	8012e4c <_strtol_l.constprop.0+0x10>
 8012e48:	2b01      	cmp	r3, #1
 8012e4a:	d106      	bne.n	8012e5a <_strtol_l.constprop.0+0x1e>
 8012e4c:	f7fd fe42 	bl	8010ad4 <__errno>
 8012e50:	2316      	movs	r3, #22
 8012e52:	6003      	str	r3, [r0, #0]
 8012e54:	2000      	movs	r0, #0
 8012e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e5a:	4834      	ldr	r0, [pc, #208]	@ (8012f2c <_strtol_l.constprop.0+0xf0>)
 8012e5c:	460d      	mov	r5, r1
 8012e5e:	462a      	mov	r2, r5
 8012e60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e64:	5d06      	ldrb	r6, [r0, r4]
 8012e66:	f016 0608 	ands.w	r6, r6, #8
 8012e6a:	d1f8      	bne.n	8012e5e <_strtol_l.constprop.0+0x22>
 8012e6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8012e6e:	d12d      	bne.n	8012ecc <_strtol_l.constprop.0+0x90>
 8012e70:	782c      	ldrb	r4, [r5, #0]
 8012e72:	2601      	movs	r6, #1
 8012e74:	1c95      	adds	r5, r2, #2
 8012e76:	f033 0210 	bics.w	r2, r3, #16
 8012e7a:	d109      	bne.n	8012e90 <_strtol_l.constprop.0+0x54>
 8012e7c:	2c30      	cmp	r4, #48	@ 0x30
 8012e7e:	d12a      	bne.n	8012ed6 <_strtol_l.constprop.0+0x9a>
 8012e80:	782a      	ldrb	r2, [r5, #0]
 8012e82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012e86:	2a58      	cmp	r2, #88	@ 0x58
 8012e88:	d125      	bne.n	8012ed6 <_strtol_l.constprop.0+0x9a>
 8012e8a:	786c      	ldrb	r4, [r5, #1]
 8012e8c:	2310      	movs	r3, #16
 8012e8e:	3502      	adds	r5, #2
 8012e90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012e94:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012e98:	2200      	movs	r2, #0
 8012e9a:	fbbc f9f3 	udiv	r9, ip, r3
 8012e9e:	4610      	mov	r0, r2
 8012ea0:	fb03 ca19 	mls	sl, r3, r9, ip
 8012ea4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012ea8:	2f09      	cmp	r7, #9
 8012eaa:	d81b      	bhi.n	8012ee4 <_strtol_l.constprop.0+0xa8>
 8012eac:	463c      	mov	r4, r7
 8012eae:	42a3      	cmp	r3, r4
 8012eb0:	dd27      	ble.n	8012f02 <_strtol_l.constprop.0+0xc6>
 8012eb2:	1c57      	adds	r7, r2, #1
 8012eb4:	d007      	beq.n	8012ec6 <_strtol_l.constprop.0+0x8a>
 8012eb6:	4581      	cmp	r9, r0
 8012eb8:	d320      	bcc.n	8012efc <_strtol_l.constprop.0+0xc0>
 8012eba:	d101      	bne.n	8012ec0 <_strtol_l.constprop.0+0x84>
 8012ebc:	45a2      	cmp	sl, r4
 8012ebe:	db1d      	blt.n	8012efc <_strtol_l.constprop.0+0xc0>
 8012ec0:	fb00 4003 	mla	r0, r0, r3, r4
 8012ec4:	2201      	movs	r2, #1
 8012ec6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012eca:	e7eb      	b.n	8012ea4 <_strtol_l.constprop.0+0x68>
 8012ecc:	2c2b      	cmp	r4, #43	@ 0x2b
 8012ece:	bf04      	itt	eq
 8012ed0:	782c      	ldrbeq	r4, [r5, #0]
 8012ed2:	1c95      	addeq	r5, r2, #2
 8012ed4:	e7cf      	b.n	8012e76 <_strtol_l.constprop.0+0x3a>
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d1da      	bne.n	8012e90 <_strtol_l.constprop.0+0x54>
 8012eda:	2c30      	cmp	r4, #48	@ 0x30
 8012edc:	bf0c      	ite	eq
 8012ede:	2308      	moveq	r3, #8
 8012ee0:	230a      	movne	r3, #10
 8012ee2:	e7d5      	b.n	8012e90 <_strtol_l.constprop.0+0x54>
 8012ee4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012ee8:	2f19      	cmp	r7, #25
 8012eea:	d801      	bhi.n	8012ef0 <_strtol_l.constprop.0+0xb4>
 8012eec:	3c37      	subs	r4, #55	@ 0x37
 8012eee:	e7de      	b.n	8012eae <_strtol_l.constprop.0+0x72>
 8012ef0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012ef4:	2f19      	cmp	r7, #25
 8012ef6:	d804      	bhi.n	8012f02 <_strtol_l.constprop.0+0xc6>
 8012ef8:	3c57      	subs	r4, #87	@ 0x57
 8012efa:	e7d8      	b.n	8012eae <_strtol_l.constprop.0+0x72>
 8012efc:	f04f 32ff 	mov.w	r2, #4294967295
 8012f00:	e7e1      	b.n	8012ec6 <_strtol_l.constprop.0+0x8a>
 8012f02:	1c53      	adds	r3, r2, #1
 8012f04:	d108      	bne.n	8012f18 <_strtol_l.constprop.0+0xdc>
 8012f06:	2322      	movs	r3, #34	@ 0x22
 8012f08:	f8ce 3000 	str.w	r3, [lr]
 8012f0c:	4660      	mov	r0, ip
 8012f0e:	f1b8 0f00 	cmp.w	r8, #0
 8012f12:	d0a0      	beq.n	8012e56 <_strtol_l.constprop.0+0x1a>
 8012f14:	1e69      	subs	r1, r5, #1
 8012f16:	e006      	b.n	8012f26 <_strtol_l.constprop.0+0xea>
 8012f18:	b106      	cbz	r6, 8012f1c <_strtol_l.constprop.0+0xe0>
 8012f1a:	4240      	negs	r0, r0
 8012f1c:	f1b8 0f00 	cmp.w	r8, #0
 8012f20:	d099      	beq.n	8012e56 <_strtol_l.constprop.0+0x1a>
 8012f22:	2a00      	cmp	r2, #0
 8012f24:	d1f6      	bne.n	8012f14 <_strtol_l.constprop.0+0xd8>
 8012f26:	f8c8 1000 	str.w	r1, [r8]
 8012f2a:	e794      	b.n	8012e56 <_strtol_l.constprop.0+0x1a>
 8012f2c:	08015e99 	.word	0x08015e99

08012f30 <_strtol_r>:
 8012f30:	f7ff bf84 	b.w	8012e3c <_strtol_l.constprop.0>

08012f34 <__ssputs_r>:
 8012f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f38:	688e      	ldr	r6, [r1, #8]
 8012f3a:	461f      	mov	r7, r3
 8012f3c:	42be      	cmp	r6, r7
 8012f3e:	680b      	ldr	r3, [r1, #0]
 8012f40:	4682      	mov	sl, r0
 8012f42:	460c      	mov	r4, r1
 8012f44:	4690      	mov	r8, r2
 8012f46:	d82d      	bhi.n	8012fa4 <__ssputs_r+0x70>
 8012f48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012f4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012f50:	d026      	beq.n	8012fa0 <__ssputs_r+0x6c>
 8012f52:	6965      	ldr	r5, [r4, #20]
 8012f54:	6909      	ldr	r1, [r1, #16]
 8012f56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012f5a:	eba3 0901 	sub.w	r9, r3, r1
 8012f5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012f62:	1c7b      	adds	r3, r7, #1
 8012f64:	444b      	add	r3, r9
 8012f66:	106d      	asrs	r5, r5, #1
 8012f68:	429d      	cmp	r5, r3
 8012f6a:	bf38      	it	cc
 8012f6c:	461d      	movcc	r5, r3
 8012f6e:	0553      	lsls	r3, r2, #21
 8012f70:	d527      	bpl.n	8012fc2 <__ssputs_r+0x8e>
 8012f72:	4629      	mov	r1, r5
 8012f74:	f7fc fbfc 	bl	800f770 <_malloc_r>
 8012f78:	4606      	mov	r6, r0
 8012f7a:	b360      	cbz	r0, 8012fd6 <__ssputs_r+0xa2>
 8012f7c:	6921      	ldr	r1, [r4, #16]
 8012f7e:	464a      	mov	r2, r9
 8012f80:	f7fd fdd5 	bl	8010b2e <memcpy>
 8012f84:	89a3      	ldrh	r3, [r4, #12]
 8012f86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012f8e:	81a3      	strh	r3, [r4, #12]
 8012f90:	6126      	str	r6, [r4, #16]
 8012f92:	6165      	str	r5, [r4, #20]
 8012f94:	444e      	add	r6, r9
 8012f96:	eba5 0509 	sub.w	r5, r5, r9
 8012f9a:	6026      	str	r6, [r4, #0]
 8012f9c:	60a5      	str	r5, [r4, #8]
 8012f9e:	463e      	mov	r6, r7
 8012fa0:	42be      	cmp	r6, r7
 8012fa2:	d900      	bls.n	8012fa6 <__ssputs_r+0x72>
 8012fa4:	463e      	mov	r6, r7
 8012fa6:	6820      	ldr	r0, [r4, #0]
 8012fa8:	4632      	mov	r2, r6
 8012faa:	4641      	mov	r1, r8
 8012fac:	f000 fd65 	bl	8013a7a <memmove>
 8012fb0:	68a3      	ldr	r3, [r4, #8]
 8012fb2:	1b9b      	subs	r3, r3, r6
 8012fb4:	60a3      	str	r3, [r4, #8]
 8012fb6:	6823      	ldr	r3, [r4, #0]
 8012fb8:	4433      	add	r3, r6
 8012fba:	6023      	str	r3, [r4, #0]
 8012fbc:	2000      	movs	r0, #0
 8012fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fc2:	462a      	mov	r2, r5
 8012fc4:	f001 f8e1 	bl	801418a <_realloc_r>
 8012fc8:	4606      	mov	r6, r0
 8012fca:	2800      	cmp	r0, #0
 8012fcc:	d1e0      	bne.n	8012f90 <__ssputs_r+0x5c>
 8012fce:	6921      	ldr	r1, [r4, #16]
 8012fd0:	4650      	mov	r0, sl
 8012fd2:	f7fe fc2d 	bl	8011830 <_free_r>
 8012fd6:	230c      	movs	r3, #12
 8012fd8:	f8ca 3000 	str.w	r3, [sl]
 8012fdc:	89a3      	ldrh	r3, [r4, #12]
 8012fde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012fe2:	81a3      	strh	r3, [r4, #12]
 8012fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8012fe8:	e7e9      	b.n	8012fbe <__ssputs_r+0x8a>
	...

08012fec <_svfiprintf_r>:
 8012fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ff0:	4698      	mov	r8, r3
 8012ff2:	898b      	ldrh	r3, [r1, #12]
 8012ff4:	061b      	lsls	r3, r3, #24
 8012ff6:	b09d      	sub	sp, #116	@ 0x74
 8012ff8:	4607      	mov	r7, r0
 8012ffa:	460d      	mov	r5, r1
 8012ffc:	4614      	mov	r4, r2
 8012ffe:	d510      	bpl.n	8013022 <_svfiprintf_r+0x36>
 8013000:	690b      	ldr	r3, [r1, #16]
 8013002:	b973      	cbnz	r3, 8013022 <_svfiprintf_r+0x36>
 8013004:	2140      	movs	r1, #64	@ 0x40
 8013006:	f7fc fbb3 	bl	800f770 <_malloc_r>
 801300a:	6028      	str	r0, [r5, #0]
 801300c:	6128      	str	r0, [r5, #16]
 801300e:	b930      	cbnz	r0, 801301e <_svfiprintf_r+0x32>
 8013010:	230c      	movs	r3, #12
 8013012:	603b      	str	r3, [r7, #0]
 8013014:	f04f 30ff 	mov.w	r0, #4294967295
 8013018:	b01d      	add	sp, #116	@ 0x74
 801301a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801301e:	2340      	movs	r3, #64	@ 0x40
 8013020:	616b      	str	r3, [r5, #20]
 8013022:	2300      	movs	r3, #0
 8013024:	9309      	str	r3, [sp, #36]	@ 0x24
 8013026:	2320      	movs	r3, #32
 8013028:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801302c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013030:	2330      	movs	r3, #48	@ 0x30
 8013032:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80131d0 <_svfiprintf_r+0x1e4>
 8013036:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801303a:	f04f 0901 	mov.w	r9, #1
 801303e:	4623      	mov	r3, r4
 8013040:	469a      	mov	sl, r3
 8013042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013046:	b10a      	cbz	r2, 801304c <_svfiprintf_r+0x60>
 8013048:	2a25      	cmp	r2, #37	@ 0x25
 801304a:	d1f9      	bne.n	8013040 <_svfiprintf_r+0x54>
 801304c:	ebba 0b04 	subs.w	fp, sl, r4
 8013050:	d00b      	beq.n	801306a <_svfiprintf_r+0x7e>
 8013052:	465b      	mov	r3, fp
 8013054:	4622      	mov	r2, r4
 8013056:	4629      	mov	r1, r5
 8013058:	4638      	mov	r0, r7
 801305a:	f7ff ff6b 	bl	8012f34 <__ssputs_r>
 801305e:	3001      	adds	r0, #1
 8013060:	f000 80a7 	beq.w	80131b2 <_svfiprintf_r+0x1c6>
 8013064:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013066:	445a      	add	r2, fp
 8013068:	9209      	str	r2, [sp, #36]	@ 0x24
 801306a:	f89a 3000 	ldrb.w	r3, [sl]
 801306e:	2b00      	cmp	r3, #0
 8013070:	f000 809f 	beq.w	80131b2 <_svfiprintf_r+0x1c6>
 8013074:	2300      	movs	r3, #0
 8013076:	f04f 32ff 	mov.w	r2, #4294967295
 801307a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801307e:	f10a 0a01 	add.w	sl, sl, #1
 8013082:	9304      	str	r3, [sp, #16]
 8013084:	9307      	str	r3, [sp, #28]
 8013086:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801308a:	931a      	str	r3, [sp, #104]	@ 0x68
 801308c:	4654      	mov	r4, sl
 801308e:	2205      	movs	r2, #5
 8013090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013094:	484e      	ldr	r0, [pc, #312]	@ (80131d0 <_svfiprintf_r+0x1e4>)
 8013096:	f7ed f8ab 	bl	80001f0 <memchr>
 801309a:	9a04      	ldr	r2, [sp, #16]
 801309c:	b9d8      	cbnz	r0, 80130d6 <_svfiprintf_r+0xea>
 801309e:	06d0      	lsls	r0, r2, #27
 80130a0:	bf44      	itt	mi
 80130a2:	2320      	movmi	r3, #32
 80130a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80130a8:	0711      	lsls	r1, r2, #28
 80130aa:	bf44      	itt	mi
 80130ac:	232b      	movmi	r3, #43	@ 0x2b
 80130ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80130b2:	f89a 3000 	ldrb.w	r3, [sl]
 80130b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80130b8:	d015      	beq.n	80130e6 <_svfiprintf_r+0xfa>
 80130ba:	9a07      	ldr	r2, [sp, #28]
 80130bc:	4654      	mov	r4, sl
 80130be:	2000      	movs	r0, #0
 80130c0:	f04f 0c0a 	mov.w	ip, #10
 80130c4:	4621      	mov	r1, r4
 80130c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80130ca:	3b30      	subs	r3, #48	@ 0x30
 80130cc:	2b09      	cmp	r3, #9
 80130ce:	d94b      	bls.n	8013168 <_svfiprintf_r+0x17c>
 80130d0:	b1b0      	cbz	r0, 8013100 <_svfiprintf_r+0x114>
 80130d2:	9207      	str	r2, [sp, #28]
 80130d4:	e014      	b.n	8013100 <_svfiprintf_r+0x114>
 80130d6:	eba0 0308 	sub.w	r3, r0, r8
 80130da:	fa09 f303 	lsl.w	r3, r9, r3
 80130de:	4313      	orrs	r3, r2
 80130e0:	9304      	str	r3, [sp, #16]
 80130e2:	46a2      	mov	sl, r4
 80130e4:	e7d2      	b.n	801308c <_svfiprintf_r+0xa0>
 80130e6:	9b03      	ldr	r3, [sp, #12]
 80130e8:	1d19      	adds	r1, r3, #4
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	9103      	str	r1, [sp, #12]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	bfbb      	ittet	lt
 80130f2:	425b      	neglt	r3, r3
 80130f4:	f042 0202 	orrlt.w	r2, r2, #2
 80130f8:	9307      	strge	r3, [sp, #28]
 80130fa:	9307      	strlt	r3, [sp, #28]
 80130fc:	bfb8      	it	lt
 80130fe:	9204      	strlt	r2, [sp, #16]
 8013100:	7823      	ldrb	r3, [r4, #0]
 8013102:	2b2e      	cmp	r3, #46	@ 0x2e
 8013104:	d10a      	bne.n	801311c <_svfiprintf_r+0x130>
 8013106:	7863      	ldrb	r3, [r4, #1]
 8013108:	2b2a      	cmp	r3, #42	@ 0x2a
 801310a:	d132      	bne.n	8013172 <_svfiprintf_r+0x186>
 801310c:	9b03      	ldr	r3, [sp, #12]
 801310e:	1d1a      	adds	r2, r3, #4
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	9203      	str	r2, [sp, #12]
 8013114:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013118:	3402      	adds	r4, #2
 801311a:	9305      	str	r3, [sp, #20]
 801311c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80131e0 <_svfiprintf_r+0x1f4>
 8013120:	7821      	ldrb	r1, [r4, #0]
 8013122:	2203      	movs	r2, #3
 8013124:	4650      	mov	r0, sl
 8013126:	f7ed f863 	bl	80001f0 <memchr>
 801312a:	b138      	cbz	r0, 801313c <_svfiprintf_r+0x150>
 801312c:	9b04      	ldr	r3, [sp, #16]
 801312e:	eba0 000a 	sub.w	r0, r0, sl
 8013132:	2240      	movs	r2, #64	@ 0x40
 8013134:	4082      	lsls	r2, r0
 8013136:	4313      	orrs	r3, r2
 8013138:	3401      	adds	r4, #1
 801313a:	9304      	str	r3, [sp, #16]
 801313c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013140:	4824      	ldr	r0, [pc, #144]	@ (80131d4 <_svfiprintf_r+0x1e8>)
 8013142:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013146:	2206      	movs	r2, #6
 8013148:	f7ed f852 	bl	80001f0 <memchr>
 801314c:	2800      	cmp	r0, #0
 801314e:	d036      	beq.n	80131be <_svfiprintf_r+0x1d2>
 8013150:	4b21      	ldr	r3, [pc, #132]	@ (80131d8 <_svfiprintf_r+0x1ec>)
 8013152:	bb1b      	cbnz	r3, 801319c <_svfiprintf_r+0x1b0>
 8013154:	9b03      	ldr	r3, [sp, #12]
 8013156:	3307      	adds	r3, #7
 8013158:	f023 0307 	bic.w	r3, r3, #7
 801315c:	3308      	adds	r3, #8
 801315e:	9303      	str	r3, [sp, #12]
 8013160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013162:	4433      	add	r3, r6
 8013164:	9309      	str	r3, [sp, #36]	@ 0x24
 8013166:	e76a      	b.n	801303e <_svfiprintf_r+0x52>
 8013168:	fb0c 3202 	mla	r2, ip, r2, r3
 801316c:	460c      	mov	r4, r1
 801316e:	2001      	movs	r0, #1
 8013170:	e7a8      	b.n	80130c4 <_svfiprintf_r+0xd8>
 8013172:	2300      	movs	r3, #0
 8013174:	3401      	adds	r4, #1
 8013176:	9305      	str	r3, [sp, #20]
 8013178:	4619      	mov	r1, r3
 801317a:	f04f 0c0a 	mov.w	ip, #10
 801317e:	4620      	mov	r0, r4
 8013180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013184:	3a30      	subs	r2, #48	@ 0x30
 8013186:	2a09      	cmp	r2, #9
 8013188:	d903      	bls.n	8013192 <_svfiprintf_r+0x1a6>
 801318a:	2b00      	cmp	r3, #0
 801318c:	d0c6      	beq.n	801311c <_svfiprintf_r+0x130>
 801318e:	9105      	str	r1, [sp, #20]
 8013190:	e7c4      	b.n	801311c <_svfiprintf_r+0x130>
 8013192:	fb0c 2101 	mla	r1, ip, r1, r2
 8013196:	4604      	mov	r4, r0
 8013198:	2301      	movs	r3, #1
 801319a:	e7f0      	b.n	801317e <_svfiprintf_r+0x192>
 801319c:	ab03      	add	r3, sp, #12
 801319e:	9300      	str	r3, [sp, #0]
 80131a0:	462a      	mov	r2, r5
 80131a2:	4b0e      	ldr	r3, [pc, #56]	@ (80131dc <_svfiprintf_r+0x1f0>)
 80131a4:	a904      	add	r1, sp, #16
 80131a6:	4638      	mov	r0, r7
 80131a8:	f7fc fc50 	bl	800fa4c <_printf_float>
 80131ac:	1c42      	adds	r2, r0, #1
 80131ae:	4606      	mov	r6, r0
 80131b0:	d1d6      	bne.n	8013160 <_svfiprintf_r+0x174>
 80131b2:	89ab      	ldrh	r3, [r5, #12]
 80131b4:	065b      	lsls	r3, r3, #25
 80131b6:	f53f af2d 	bmi.w	8013014 <_svfiprintf_r+0x28>
 80131ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80131bc:	e72c      	b.n	8013018 <_svfiprintf_r+0x2c>
 80131be:	ab03      	add	r3, sp, #12
 80131c0:	9300      	str	r3, [sp, #0]
 80131c2:	462a      	mov	r2, r5
 80131c4:	4b05      	ldr	r3, [pc, #20]	@ (80131dc <_svfiprintf_r+0x1f0>)
 80131c6:	a904      	add	r1, sp, #16
 80131c8:	4638      	mov	r0, r7
 80131ca:	f7fc fed7 	bl	800ff7c <_printf_i>
 80131ce:	e7ed      	b.n	80131ac <_svfiprintf_r+0x1c0>
 80131d0:	08015f99 	.word	0x08015f99
 80131d4:	08015fa3 	.word	0x08015fa3
 80131d8:	0800fa4d 	.word	0x0800fa4d
 80131dc:	08012f35 	.word	0x08012f35
 80131e0:	08015f9f 	.word	0x08015f9f

080131e4 <_sungetc_r>:
 80131e4:	b538      	push	{r3, r4, r5, lr}
 80131e6:	1c4b      	adds	r3, r1, #1
 80131e8:	4614      	mov	r4, r2
 80131ea:	d103      	bne.n	80131f4 <_sungetc_r+0x10>
 80131ec:	f04f 35ff 	mov.w	r5, #4294967295
 80131f0:	4628      	mov	r0, r5
 80131f2:	bd38      	pop	{r3, r4, r5, pc}
 80131f4:	8993      	ldrh	r3, [r2, #12]
 80131f6:	f023 0320 	bic.w	r3, r3, #32
 80131fa:	8193      	strh	r3, [r2, #12]
 80131fc:	6853      	ldr	r3, [r2, #4]
 80131fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8013200:	b2cd      	uxtb	r5, r1
 8013202:	b18a      	cbz	r2, 8013228 <_sungetc_r+0x44>
 8013204:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8013206:	429a      	cmp	r2, r3
 8013208:	dd08      	ble.n	801321c <_sungetc_r+0x38>
 801320a:	6823      	ldr	r3, [r4, #0]
 801320c:	1e5a      	subs	r2, r3, #1
 801320e:	6022      	str	r2, [r4, #0]
 8013210:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013214:	6863      	ldr	r3, [r4, #4]
 8013216:	3301      	adds	r3, #1
 8013218:	6063      	str	r3, [r4, #4]
 801321a:	e7e9      	b.n	80131f0 <_sungetc_r+0xc>
 801321c:	4621      	mov	r1, r4
 801321e:	f000 fbf2 	bl	8013a06 <__submore>
 8013222:	2800      	cmp	r0, #0
 8013224:	d0f1      	beq.n	801320a <_sungetc_r+0x26>
 8013226:	e7e1      	b.n	80131ec <_sungetc_r+0x8>
 8013228:	6921      	ldr	r1, [r4, #16]
 801322a:	6822      	ldr	r2, [r4, #0]
 801322c:	b141      	cbz	r1, 8013240 <_sungetc_r+0x5c>
 801322e:	4291      	cmp	r1, r2
 8013230:	d206      	bcs.n	8013240 <_sungetc_r+0x5c>
 8013232:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8013236:	42a9      	cmp	r1, r5
 8013238:	d102      	bne.n	8013240 <_sungetc_r+0x5c>
 801323a:	3a01      	subs	r2, #1
 801323c:	6022      	str	r2, [r4, #0]
 801323e:	e7ea      	b.n	8013216 <_sungetc_r+0x32>
 8013240:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8013244:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013248:	6363      	str	r3, [r4, #52]	@ 0x34
 801324a:	2303      	movs	r3, #3
 801324c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801324e:	4623      	mov	r3, r4
 8013250:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013254:	6023      	str	r3, [r4, #0]
 8013256:	2301      	movs	r3, #1
 8013258:	e7de      	b.n	8013218 <_sungetc_r+0x34>

0801325a <__ssrefill_r>:
 801325a:	b510      	push	{r4, lr}
 801325c:	460c      	mov	r4, r1
 801325e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013260:	b169      	cbz	r1, 801327e <__ssrefill_r+0x24>
 8013262:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013266:	4299      	cmp	r1, r3
 8013268:	d001      	beq.n	801326e <__ssrefill_r+0x14>
 801326a:	f7fe fae1 	bl	8011830 <_free_r>
 801326e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013270:	6063      	str	r3, [r4, #4]
 8013272:	2000      	movs	r0, #0
 8013274:	6360      	str	r0, [r4, #52]	@ 0x34
 8013276:	b113      	cbz	r3, 801327e <__ssrefill_r+0x24>
 8013278:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801327a:	6023      	str	r3, [r4, #0]
 801327c:	bd10      	pop	{r4, pc}
 801327e:	6923      	ldr	r3, [r4, #16]
 8013280:	6023      	str	r3, [r4, #0]
 8013282:	2300      	movs	r3, #0
 8013284:	6063      	str	r3, [r4, #4]
 8013286:	89a3      	ldrh	r3, [r4, #12]
 8013288:	f043 0320 	orr.w	r3, r3, #32
 801328c:	81a3      	strh	r3, [r4, #12]
 801328e:	f04f 30ff 	mov.w	r0, #4294967295
 8013292:	e7f3      	b.n	801327c <__ssrefill_r+0x22>

08013294 <__ssvfiscanf_r>:
 8013294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013298:	460c      	mov	r4, r1
 801329a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801329e:	2100      	movs	r1, #0
 80132a0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80132a4:	49a5      	ldr	r1, [pc, #660]	@ (801353c <__ssvfiscanf_r+0x2a8>)
 80132a6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80132a8:	f10d 0804 	add.w	r8, sp, #4
 80132ac:	49a4      	ldr	r1, [pc, #656]	@ (8013540 <__ssvfiscanf_r+0x2ac>)
 80132ae:	4fa5      	ldr	r7, [pc, #660]	@ (8013544 <__ssvfiscanf_r+0x2b0>)
 80132b0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80132b4:	4606      	mov	r6, r0
 80132b6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80132b8:	9300      	str	r3, [sp, #0]
 80132ba:	7813      	ldrb	r3, [r2, #0]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f000 8158 	beq.w	8013572 <__ssvfiscanf_r+0x2de>
 80132c2:	5cf9      	ldrb	r1, [r7, r3]
 80132c4:	f011 0108 	ands.w	r1, r1, #8
 80132c8:	f102 0501 	add.w	r5, r2, #1
 80132cc:	d019      	beq.n	8013302 <__ssvfiscanf_r+0x6e>
 80132ce:	6863      	ldr	r3, [r4, #4]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	dd0f      	ble.n	80132f4 <__ssvfiscanf_r+0x60>
 80132d4:	6823      	ldr	r3, [r4, #0]
 80132d6:	781a      	ldrb	r2, [r3, #0]
 80132d8:	5cba      	ldrb	r2, [r7, r2]
 80132da:	0712      	lsls	r2, r2, #28
 80132dc:	d401      	bmi.n	80132e2 <__ssvfiscanf_r+0x4e>
 80132de:	462a      	mov	r2, r5
 80132e0:	e7eb      	b.n	80132ba <__ssvfiscanf_r+0x26>
 80132e2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80132e4:	3201      	adds	r2, #1
 80132e6:	9245      	str	r2, [sp, #276]	@ 0x114
 80132e8:	6862      	ldr	r2, [r4, #4]
 80132ea:	3301      	adds	r3, #1
 80132ec:	3a01      	subs	r2, #1
 80132ee:	6062      	str	r2, [r4, #4]
 80132f0:	6023      	str	r3, [r4, #0]
 80132f2:	e7ec      	b.n	80132ce <__ssvfiscanf_r+0x3a>
 80132f4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80132f6:	4621      	mov	r1, r4
 80132f8:	4630      	mov	r0, r6
 80132fa:	4798      	blx	r3
 80132fc:	2800      	cmp	r0, #0
 80132fe:	d0e9      	beq.n	80132d4 <__ssvfiscanf_r+0x40>
 8013300:	e7ed      	b.n	80132de <__ssvfiscanf_r+0x4a>
 8013302:	2b25      	cmp	r3, #37	@ 0x25
 8013304:	d012      	beq.n	801332c <__ssvfiscanf_r+0x98>
 8013306:	4699      	mov	r9, r3
 8013308:	6863      	ldr	r3, [r4, #4]
 801330a:	2b00      	cmp	r3, #0
 801330c:	f340 8093 	ble.w	8013436 <__ssvfiscanf_r+0x1a2>
 8013310:	6822      	ldr	r2, [r4, #0]
 8013312:	7813      	ldrb	r3, [r2, #0]
 8013314:	454b      	cmp	r3, r9
 8013316:	f040 812c 	bne.w	8013572 <__ssvfiscanf_r+0x2de>
 801331a:	6863      	ldr	r3, [r4, #4]
 801331c:	3b01      	subs	r3, #1
 801331e:	6063      	str	r3, [r4, #4]
 8013320:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8013322:	3201      	adds	r2, #1
 8013324:	3301      	adds	r3, #1
 8013326:	6022      	str	r2, [r4, #0]
 8013328:	9345      	str	r3, [sp, #276]	@ 0x114
 801332a:	e7d8      	b.n	80132de <__ssvfiscanf_r+0x4a>
 801332c:	9141      	str	r1, [sp, #260]	@ 0x104
 801332e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8013330:	7853      	ldrb	r3, [r2, #1]
 8013332:	2b2a      	cmp	r3, #42	@ 0x2a
 8013334:	bf02      	ittt	eq
 8013336:	2310      	moveq	r3, #16
 8013338:	1c95      	addeq	r5, r2, #2
 801333a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801333c:	220a      	movs	r2, #10
 801333e:	46a9      	mov	r9, r5
 8013340:	f819 1b01 	ldrb.w	r1, [r9], #1
 8013344:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8013348:	2b09      	cmp	r3, #9
 801334a:	d91e      	bls.n	801338a <__ssvfiscanf_r+0xf6>
 801334c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8013548 <__ssvfiscanf_r+0x2b4>
 8013350:	2203      	movs	r2, #3
 8013352:	4650      	mov	r0, sl
 8013354:	f7ec ff4c 	bl	80001f0 <memchr>
 8013358:	b138      	cbz	r0, 801336a <__ssvfiscanf_r+0xd6>
 801335a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801335c:	eba0 000a 	sub.w	r0, r0, sl
 8013360:	2301      	movs	r3, #1
 8013362:	4083      	lsls	r3, r0
 8013364:	4313      	orrs	r3, r2
 8013366:	9341      	str	r3, [sp, #260]	@ 0x104
 8013368:	464d      	mov	r5, r9
 801336a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801336e:	2b78      	cmp	r3, #120	@ 0x78
 8013370:	d806      	bhi.n	8013380 <__ssvfiscanf_r+0xec>
 8013372:	2b57      	cmp	r3, #87	@ 0x57
 8013374:	d810      	bhi.n	8013398 <__ssvfiscanf_r+0x104>
 8013376:	2b25      	cmp	r3, #37	@ 0x25
 8013378:	d0c5      	beq.n	8013306 <__ssvfiscanf_r+0x72>
 801337a:	d857      	bhi.n	801342c <__ssvfiscanf_r+0x198>
 801337c:	2b00      	cmp	r3, #0
 801337e:	d065      	beq.n	801344c <__ssvfiscanf_r+0x1b8>
 8013380:	2303      	movs	r3, #3
 8013382:	9347      	str	r3, [sp, #284]	@ 0x11c
 8013384:	230a      	movs	r3, #10
 8013386:	9342      	str	r3, [sp, #264]	@ 0x108
 8013388:	e078      	b.n	801347c <__ssvfiscanf_r+0x1e8>
 801338a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801338c:	fb02 1103 	mla	r1, r2, r3, r1
 8013390:	3930      	subs	r1, #48	@ 0x30
 8013392:	9143      	str	r1, [sp, #268]	@ 0x10c
 8013394:	464d      	mov	r5, r9
 8013396:	e7d2      	b.n	801333e <__ssvfiscanf_r+0xaa>
 8013398:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801339c:	2a20      	cmp	r2, #32
 801339e:	d8ef      	bhi.n	8013380 <__ssvfiscanf_r+0xec>
 80133a0:	a101      	add	r1, pc, #4	@ (adr r1, 80133a8 <__ssvfiscanf_r+0x114>)
 80133a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80133a6:	bf00      	nop
 80133a8:	0801345b 	.word	0x0801345b
 80133ac:	08013381 	.word	0x08013381
 80133b0:	08013381 	.word	0x08013381
 80133b4:	080134b5 	.word	0x080134b5
 80133b8:	08013381 	.word	0x08013381
 80133bc:	08013381 	.word	0x08013381
 80133c0:	08013381 	.word	0x08013381
 80133c4:	08013381 	.word	0x08013381
 80133c8:	08013381 	.word	0x08013381
 80133cc:	08013381 	.word	0x08013381
 80133d0:	08013381 	.word	0x08013381
 80133d4:	080134cb 	.word	0x080134cb
 80133d8:	080134b1 	.word	0x080134b1
 80133dc:	08013433 	.word	0x08013433
 80133e0:	08013433 	.word	0x08013433
 80133e4:	08013433 	.word	0x08013433
 80133e8:	08013381 	.word	0x08013381
 80133ec:	0801346d 	.word	0x0801346d
 80133f0:	08013381 	.word	0x08013381
 80133f4:	08013381 	.word	0x08013381
 80133f8:	08013381 	.word	0x08013381
 80133fc:	08013381 	.word	0x08013381
 8013400:	080134db 	.word	0x080134db
 8013404:	08013475 	.word	0x08013475
 8013408:	08013453 	.word	0x08013453
 801340c:	08013381 	.word	0x08013381
 8013410:	08013381 	.word	0x08013381
 8013414:	080134d7 	.word	0x080134d7
 8013418:	08013381 	.word	0x08013381
 801341c:	080134b1 	.word	0x080134b1
 8013420:	08013381 	.word	0x08013381
 8013424:	08013381 	.word	0x08013381
 8013428:	0801345b 	.word	0x0801345b
 801342c:	3b45      	subs	r3, #69	@ 0x45
 801342e:	2b02      	cmp	r3, #2
 8013430:	d8a6      	bhi.n	8013380 <__ssvfiscanf_r+0xec>
 8013432:	2305      	movs	r3, #5
 8013434:	e021      	b.n	801347a <__ssvfiscanf_r+0x1e6>
 8013436:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013438:	4621      	mov	r1, r4
 801343a:	4630      	mov	r0, r6
 801343c:	4798      	blx	r3
 801343e:	2800      	cmp	r0, #0
 8013440:	f43f af66 	beq.w	8013310 <__ssvfiscanf_r+0x7c>
 8013444:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8013446:	2800      	cmp	r0, #0
 8013448:	f040 808b 	bne.w	8013562 <__ssvfiscanf_r+0x2ce>
 801344c:	f04f 30ff 	mov.w	r0, #4294967295
 8013450:	e08b      	b.n	801356a <__ssvfiscanf_r+0x2d6>
 8013452:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013454:	f042 0220 	orr.w	r2, r2, #32
 8013458:	9241      	str	r2, [sp, #260]	@ 0x104
 801345a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801345c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013460:	9241      	str	r2, [sp, #260]	@ 0x104
 8013462:	2210      	movs	r2, #16
 8013464:	2b6e      	cmp	r3, #110	@ 0x6e
 8013466:	9242      	str	r2, [sp, #264]	@ 0x108
 8013468:	d902      	bls.n	8013470 <__ssvfiscanf_r+0x1dc>
 801346a:	e005      	b.n	8013478 <__ssvfiscanf_r+0x1e4>
 801346c:	2300      	movs	r3, #0
 801346e:	9342      	str	r3, [sp, #264]	@ 0x108
 8013470:	2303      	movs	r3, #3
 8013472:	e002      	b.n	801347a <__ssvfiscanf_r+0x1e6>
 8013474:	2308      	movs	r3, #8
 8013476:	9342      	str	r3, [sp, #264]	@ 0x108
 8013478:	2304      	movs	r3, #4
 801347a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801347c:	6863      	ldr	r3, [r4, #4]
 801347e:	2b00      	cmp	r3, #0
 8013480:	dd39      	ble.n	80134f6 <__ssvfiscanf_r+0x262>
 8013482:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8013484:	0659      	lsls	r1, r3, #25
 8013486:	d404      	bmi.n	8013492 <__ssvfiscanf_r+0x1fe>
 8013488:	6823      	ldr	r3, [r4, #0]
 801348a:	781a      	ldrb	r2, [r3, #0]
 801348c:	5cba      	ldrb	r2, [r7, r2]
 801348e:	0712      	lsls	r2, r2, #28
 8013490:	d438      	bmi.n	8013504 <__ssvfiscanf_r+0x270>
 8013492:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8013494:	2b02      	cmp	r3, #2
 8013496:	dc47      	bgt.n	8013528 <__ssvfiscanf_r+0x294>
 8013498:	466b      	mov	r3, sp
 801349a:	4622      	mov	r2, r4
 801349c:	a941      	add	r1, sp, #260	@ 0x104
 801349e:	4630      	mov	r0, r6
 80134a0:	f000 f86c 	bl	801357c <_scanf_chars>
 80134a4:	2801      	cmp	r0, #1
 80134a6:	d064      	beq.n	8013572 <__ssvfiscanf_r+0x2de>
 80134a8:	2802      	cmp	r0, #2
 80134aa:	f47f af18 	bne.w	80132de <__ssvfiscanf_r+0x4a>
 80134ae:	e7c9      	b.n	8013444 <__ssvfiscanf_r+0x1b0>
 80134b0:	220a      	movs	r2, #10
 80134b2:	e7d7      	b.n	8013464 <__ssvfiscanf_r+0x1d0>
 80134b4:	4629      	mov	r1, r5
 80134b6:	4640      	mov	r0, r8
 80134b8:	f000 fa6c 	bl	8013994 <__sccl>
 80134bc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80134be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134c2:	9341      	str	r3, [sp, #260]	@ 0x104
 80134c4:	4605      	mov	r5, r0
 80134c6:	2301      	movs	r3, #1
 80134c8:	e7d7      	b.n	801347a <__ssvfiscanf_r+0x1e6>
 80134ca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80134cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134d0:	9341      	str	r3, [sp, #260]	@ 0x104
 80134d2:	2300      	movs	r3, #0
 80134d4:	e7d1      	b.n	801347a <__ssvfiscanf_r+0x1e6>
 80134d6:	2302      	movs	r3, #2
 80134d8:	e7cf      	b.n	801347a <__ssvfiscanf_r+0x1e6>
 80134da:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80134dc:	06c3      	lsls	r3, r0, #27
 80134de:	f53f aefe 	bmi.w	80132de <__ssvfiscanf_r+0x4a>
 80134e2:	9b00      	ldr	r3, [sp, #0]
 80134e4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80134e6:	1d19      	adds	r1, r3, #4
 80134e8:	9100      	str	r1, [sp, #0]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	07c0      	lsls	r0, r0, #31
 80134ee:	bf4c      	ite	mi
 80134f0:	801a      	strhmi	r2, [r3, #0]
 80134f2:	601a      	strpl	r2, [r3, #0]
 80134f4:	e6f3      	b.n	80132de <__ssvfiscanf_r+0x4a>
 80134f6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80134f8:	4621      	mov	r1, r4
 80134fa:	4630      	mov	r0, r6
 80134fc:	4798      	blx	r3
 80134fe:	2800      	cmp	r0, #0
 8013500:	d0bf      	beq.n	8013482 <__ssvfiscanf_r+0x1ee>
 8013502:	e79f      	b.n	8013444 <__ssvfiscanf_r+0x1b0>
 8013504:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013506:	3201      	adds	r2, #1
 8013508:	9245      	str	r2, [sp, #276]	@ 0x114
 801350a:	6862      	ldr	r2, [r4, #4]
 801350c:	3a01      	subs	r2, #1
 801350e:	2a00      	cmp	r2, #0
 8013510:	6062      	str	r2, [r4, #4]
 8013512:	dd02      	ble.n	801351a <__ssvfiscanf_r+0x286>
 8013514:	3301      	adds	r3, #1
 8013516:	6023      	str	r3, [r4, #0]
 8013518:	e7b6      	b.n	8013488 <__ssvfiscanf_r+0x1f4>
 801351a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801351c:	4621      	mov	r1, r4
 801351e:	4630      	mov	r0, r6
 8013520:	4798      	blx	r3
 8013522:	2800      	cmp	r0, #0
 8013524:	d0b0      	beq.n	8013488 <__ssvfiscanf_r+0x1f4>
 8013526:	e78d      	b.n	8013444 <__ssvfiscanf_r+0x1b0>
 8013528:	2b04      	cmp	r3, #4
 801352a:	dc0f      	bgt.n	801354c <__ssvfiscanf_r+0x2b8>
 801352c:	466b      	mov	r3, sp
 801352e:	4622      	mov	r2, r4
 8013530:	a941      	add	r1, sp, #260	@ 0x104
 8013532:	4630      	mov	r0, r6
 8013534:	f000 f87c 	bl	8013630 <_scanf_i>
 8013538:	e7b4      	b.n	80134a4 <__ssvfiscanf_r+0x210>
 801353a:	bf00      	nop
 801353c:	080131e5 	.word	0x080131e5
 8013540:	0801325b 	.word	0x0801325b
 8013544:	08015e99 	.word	0x08015e99
 8013548:	08015f9f 	.word	0x08015f9f
 801354c:	4b0a      	ldr	r3, [pc, #40]	@ (8013578 <__ssvfiscanf_r+0x2e4>)
 801354e:	2b00      	cmp	r3, #0
 8013550:	f43f aec5 	beq.w	80132de <__ssvfiscanf_r+0x4a>
 8013554:	466b      	mov	r3, sp
 8013556:	4622      	mov	r2, r4
 8013558:	a941      	add	r1, sp, #260	@ 0x104
 801355a:	4630      	mov	r0, r6
 801355c:	f7fc fe2e 	bl	80101bc <_scanf_float>
 8013560:	e7a0      	b.n	80134a4 <__ssvfiscanf_r+0x210>
 8013562:	89a3      	ldrh	r3, [r4, #12]
 8013564:	065b      	lsls	r3, r3, #25
 8013566:	f53f af71 	bmi.w	801344c <__ssvfiscanf_r+0x1b8>
 801356a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801356e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013572:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8013574:	e7f9      	b.n	801356a <__ssvfiscanf_r+0x2d6>
 8013576:	bf00      	nop
 8013578:	080101bd 	.word	0x080101bd

0801357c <_scanf_chars>:
 801357c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013580:	4615      	mov	r5, r2
 8013582:	688a      	ldr	r2, [r1, #8]
 8013584:	4680      	mov	r8, r0
 8013586:	460c      	mov	r4, r1
 8013588:	b932      	cbnz	r2, 8013598 <_scanf_chars+0x1c>
 801358a:	698a      	ldr	r2, [r1, #24]
 801358c:	2a00      	cmp	r2, #0
 801358e:	bf14      	ite	ne
 8013590:	f04f 32ff 	movne.w	r2, #4294967295
 8013594:	2201      	moveq	r2, #1
 8013596:	608a      	str	r2, [r1, #8]
 8013598:	6822      	ldr	r2, [r4, #0]
 801359a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801362c <_scanf_chars+0xb0>
 801359e:	06d1      	lsls	r1, r2, #27
 80135a0:	bf5f      	itttt	pl
 80135a2:	681a      	ldrpl	r2, [r3, #0]
 80135a4:	1d11      	addpl	r1, r2, #4
 80135a6:	6019      	strpl	r1, [r3, #0]
 80135a8:	6816      	ldrpl	r6, [r2, #0]
 80135aa:	2700      	movs	r7, #0
 80135ac:	69a0      	ldr	r0, [r4, #24]
 80135ae:	b188      	cbz	r0, 80135d4 <_scanf_chars+0x58>
 80135b0:	2801      	cmp	r0, #1
 80135b2:	d107      	bne.n	80135c4 <_scanf_chars+0x48>
 80135b4:	682b      	ldr	r3, [r5, #0]
 80135b6:	781a      	ldrb	r2, [r3, #0]
 80135b8:	6963      	ldr	r3, [r4, #20]
 80135ba:	5c9b      	ldrb	r3, [r3, r2]
 80135bc:	b953      	cbnz	r3, 80135d4 <_scanf_chars+0x58>
 80135be:	2f00      	cmp	r7, #0
 80135c0:	d031      	beq.n	8013626 <_scanf_chars+0xaa>
 80135c2:	e022      	b.n	801360a <_scanf_chars+0x8e>
 80135c4:	2802      	cmp	r0, #2
 80135c6:	d120      	bne.n	801360a <_scanf_chars+0x8e>
 80135c8:	682b      	ldr	r3, [r5, #0]
 80135ca:	781b      	ldrb	r3, [r3, #0]
 80135cc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80135d0:	071b      	lsls	r3, r3, #28
 80135d2:	d41a      	bmi.n	801360a <_scanf_chars+0x8e>
 80135d4:	6823      	ldr	r3, [r4, #0]
 80135d6:	06da      	lsls	r2, r3, #27
 80135d8:	bf5e      	ittt	pl
 80135da:	682b      	ldrpl	r3, [r5, #0]
 80135dc:	781b      	ldrbpl	r3, [r3, #0]
 80135de:	f806 3b01 	strbpl.w	r3, [r6], #1
 80135e2:	682a      	ldr	r2, [r5, #0]
 80135e4:	686b      	ldr	r3, [r5, #4]
 80135e6:	3201      	adds	r2, #1
 80135e8:	602a      	str	r2, [r5, #0]
 80135ea:	68a2      	ldr	r2, [r4, #8]
 80135ec:	3b01      	subs	r3, #1
 80135ee:	3a01      	subs	r2, #1
 80135f0:	606b      	str	r3, [r5, #4]
 80135f2:	3701      	adds	r7, #1
 80135f4:	60a2      	str	r2, [r4, #8]
 80135f6:	b142      	cbz	r2, 801360a <_scanf_chars+0x8e>
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	dcd7      	bgt.n	80135ac <_scanf_chars+0x30>
 80135fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013600:	4629      	mov	r1, r5
 8013602:	4640      	mov	r0, r8
 8013604:	4798      	blx	r3
 8013606:	2800      	cmp	r0, #0
 8013608:	d0d0      	beq.n	80135ac <_scanf_chars+0x30>
 801360a:	6823      	ldr	r3, [r4, #0]
 801360c:	f013 0310 	ands.w	r3, r3, #16
 8013610:	d105      	bne.n	801361e <_scanf_chars+0xa2>
 8013612:	68e2      	ldr	r2, [r4, #12]
 8013614:	3201      	adds	r2, #1
 8013616:	60e2      	str	r2, [r4, #12]
 8013618:	69a2      	ldr	r2, [r4, #24]
 801361a:	b102      	cbz	r2, 801361e <_scanf_chars+0xa2>
 801361c:	7033      	strb	r3, [r6, #0]
 801361e:	6923      	ldr	r3, [r4, #16]
 8013620:	443b      	add	r3, r7
 8013622:	6123      	str	r3, [r4, #16]
 8013624:	2000      	movs	r0, #0
 8013626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801362a:	bf00      	nop
 801362c:	08015e99 	.word	0x08015e99

08013630 <_scanf_i>:
 8013630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013634:	4698      	mov	r8, r3
 8013636:	4b74      	ldr	r3, [pc, #464]	@ (8013808 <_scanf_i+0x1d8>)
 8013638:	460c      	mov	r4, r1
 801363a:	4682      	mov	sl, r0
 801363c:	4616      	mov	r6, r2
 801363e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013642:	b087      	sub	sp, #28
 8013644:	ab03      	add	r3, sp, #12
 8013646:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801364a:	4b70      	ldr	r3, [pc, #448]	@ (801380c <_scanf_i+0x1dc>)
 801364c:	69a1      	ldr	r1, [r4, #24]
 801364e:	4a70      	ldr	r2, [pc, #448]	@ (8013810 <_scanf_i+0x1e0>)
 8013650:	2903      	cmp	r1, #3
 8013652:	bf08      	it	eq
 8013654:	461a      	moveq	r2, r3
 8013656:	68a3      	ldr	r3, [r4, #8]
 8013658:	9201      	str	r2, [sp, #4]
 801365a:	1e5a      	subs	r2, r3, #1
 801365c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013660:	bf88      	it	hi
 8013662:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013666:	4627      	mov	r7, r4
 8013668:	bf82      	ittt	hi
 801366a:	eb03 0905 	addhi.w	r9, r3, r5
 801366e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013672:	60a3      	strhi	r3, [r4, #8]
 8013674:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013678:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801367c:	bf98      	it	ls
 801367e:	f04f 0900 	movls.w	r9, #0
 8013682:	6023      	str	r3, [r4, #0]
 8013684:	463d      	mov	r5, r7
 8013686:	f04f 0b00 	mov.w	fp, #0
 801368a:	6831      	ldr	r1, [r6, #0]
 801368c:	ab03      	add	r3, sp, #12
 801368e:	7809      	ldrb	r1, [r1, #0]
 8013690:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013694:	2202      	movs	r2, #2
 8013696:	f7ec fdab 	bl	80001f0 <memchr>
 801369a:	b328      	cbz	r0, 80136e8 <_scanf_i+0xb8>
 801369c:	f1bb 0f01 	cmp.w	fp, #1
 80136a0:	d159      	bne.n	8013756 <_scanf_i+0x126>
 80136a2:	6862      	ldr	r2, [r4, #4]
 80136a4:	b92a      	cbnz	r2, 80136b2 <_scanf_i+0x82>
 80136a6:	6822      	ldr	r2, [r4, #0]
 80136a8:	2108      	movs	r1, #8
 80136aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80136ae:	6061      	str	r1, [r4, #4]
 80136b0:	6022      	str	r2, [r4, #0]
 80136b2:	6822      	ldr	r2, [r4, #0]
 80136b4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80136b8:	6022      	str	r2, [r4, #0]
 80136ba:	68a2      	ldr	r2, [r4, #8]
 80136bc:	1e51      	subs	r1, r2, #1
 80136be:	60a1      	str	r1, [r4, #8]
 80136c0:	b192      	cbz	r2, 80136e8 <_scanf_i+0xb8>
 80136c2:	6832      	ldr	r2, [r6, #0]
 80136c4:	1c51      	adds	r1, r2, #1
 80136c6:	6031      	str	r1, [r6, #0]
 80136c8:	7812      	ldrb	r2, [r2, #0]
 80136ca:	f805 2b01 	strb.w	r2, [r5], #1
 80136ce:	6872      	ldr	r2, [r6, #4]
 80136d0:	3a01      	subs	r2, #1
 80136d2:	2a00      	cmp	r2, #0
 80136d4:	6072      	str	r2, [r6, #4]
 80136d6:	dc07      	bgt.n	80136e8 <_scanf_i+0xb8>
 80136d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80136dc:	4631      	mov	r1, r6
 80136de:	4650      	mov	r0, sl
 80136e0:	4790      	blx	r2
 80136e2:	2800      	cmp	r0, #0
 80136e4:	f040 8085 	bne.w	80137f2 <_scanf_i+0x1c2>
 80136e8:	f10b 0b01 	add.w	fp, fp, #1
 80136ec:	f1bb 0f03 	cmp.w	fp, #3
 80136f0:	d1cb      	bne.n	801368a <_scanf_i+0x5a>
 80136f2:	6863      	ldr	r3, [r4, #4]
 80136f4:	b90b      	cbnz	r3, 80136fa <_scanf_i+0xca>
 80136f6:	230a      	movs	r3, #10
 80136f8:	6063      	str	r3, [r4, #4]
 80136fa:	6863      	ldr	r3, [r4, #4]
 80136fc:	4945      	ldr	r1, [pc, #276]	@ (8013814 <_scanf_i+0x1e4>)
 80136fe:	6960      	ldr	r0, [r4, #20]
 8013700:	1ac9      	subs	r1, r1, r3
 8013702:	f000 f947 	bl	8013994 <__sccl>
 8013706:	f04f 0b00 	mov.w	fp, #0
 801370a:	68a3      	ldr	r3, [r4, #8]
 801370c:	6822      	ldr	r2, [r4, #0]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d03d      	beq.n	801378e <_scanf_i+0x15e>
 8013712:	6831      	ldr	r1, [r6, #0]
 8013714:	6960      	ldr	r0, [r4, #20]
 8013716:	f891 c000 	ldrb.w	ip, [r1]
 801371a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801371e:	2800      	cmp	r0, #0
 8013720:	d035      	beq.n	801378e <_scanf_i+0x15e>
 8013722:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8013726:	d124      	bne.n	8013772 <_scanf_i+0x142>
 8013728:	0510      	lsls	r0, r2, #20
 801372a:	d522      	bpl.n	8013772 <_scanf_i+0x142>
 801372c:	f10b 0b01 	add.w	fp, fp, #1
 8013730:	f1b9 0f00 	cmp.w	r9, #0
 8013734:	d003      	beq.n	801373e <_scanf_i+0x10e>
 8013736:	3301      	adds	r3, #1
 8013738:	f109 39ff 	add.w	r9, r9, #4294967295
 801373c:	60a3      	str	r3, [r4, #8]
 801373e:	6873      	ldr	r3, [r6, #4]
 8013740:	3b01      	subs	r3, #1
 8013742:	2b00      	cmp	r3, #0
 8013744:	6073      	str	r3, [r6, #4]
 8013746:	dd1b      	ble.n	8013780 <_scanf_i+0x150>
 8013748:	6833      	ldr	r3, [r6, #0]
 801374a:	3301      	adds	r3, #1
 801374c:	6033      	str	r3, [r6, #0]
 801374e:	68a3      	ldr	r3, [r4, #8]
 8013750:	3b01      	subs	r3, #1
 8013752:	60a3      	str	r3, [r4, #8]
 8013754:	e7d9      	b.n	801370a <_scanf_i+0xda>
 8013756:	f1bb 0f02 	cmp.w	fp, #2
 801375a:	d1ae      	bne.n	80136ba <_scanf_i+0x8a>
 801375c:	6822      	ldr	r2, [r4, #0]
 801375e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8013762:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8013766:	d1bf      	bne.n	80136e8 <_scanf_i+0xb8>
 8013768:	2110      	movs	r1, #16
 801376a:	6061      	str	r1, [r4, #4]
 801376c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013770:	e7a2      	b.n	80136b8 <_scanf_i+0x88>
 8013772:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8013776:	6022      	str	r2, [r4, #0]
 8013778:	780b      	ldrb	r3, [r1, #0]
 801377a:	f805 3b01 	strb.w	r3, [r5], #1
 801377e:	e7de      	b.n	801373e <_scanf_i+0x10e>
 8013780:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013784:	4631      	mov	r1, r6
 8013786:	4650      	mov	r0, sl
 8013788:	4798      	blx	r3
 801378a:	2800      	cmp	r0, #0
 801378c:	d0df      	beq.n	801374e <_scanf_i+0x11e>
 801378e:	6823      	ldr	r3, [r4, #0]
 8013790:	05d9      	lsls	r1, r3, #23
 8013792:	d50d      	bpl.n	80137b0 <_scanf_i+0x180>
 8013794:	42bd      	cmp	r5, r7
 8013796:	d909      	bls.n	80137ac <_scanf_i+0x17c>
 8013798:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801379c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80137a0:	4632      	mov	r2, r6
 80137a2:	4650      	mov	r0, sl
 80137a4:	4798      	blx	r3
 80137a6:	f105 39ff 	add.w	r9, r5, #4294967295
 80137aa:	464d      	mov	r5, r9
 80137ac:	42bd      	cmp	r5, r7
 80137ae:	d028      	beq.n	8013802 <_scanf_i+0x1d2>
 80137b0:	6822      	ldr	r2, [r4, #0]
 80137b2:	f012 0210 	ands.w	r2, r2, #16
 80137b6:	d113      	bne.n	80137e0 <_scanf_i+0x1b0>
 80137b8:	702a      	strb	r2, [r5, #0]
 80137ba:	6863      	ldr	r3, [r4, #4]
 80137bc:	9e01      	ldr	r6, [sp, #4]
 80137be:	4639      	mov	r1, r7
 80137c0:	4650      	mov	r0, sl
 80137c2:	47b0      	blx	r6
 80137c4:	f8d8 3000 	ldr.w	r3, [r8]
 80137c8:	6821      	ldr	r1, [r4, #0]
 80137ca:	1d1a      	adds	r2, r3, #4
 80137cc:	f8c8 2000 	str.w	r2, [r8]
 80137d0:	f011 0f20 	tst.w	r1, #32
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	d00f      	beq.n	80137f8 <_scanf_i+0x1c8>
 80137d8:	6018      	str	r0, [r3, #0]
 80137da:	68e3      	ldr	r3, [r4, #12]
 80137dc:	3301      	adds	r3, #1
 80137de:	60e3      	str	r3, [r4, #12]
 80137e0:	6923      	ldr	r3, [r4, #16]
 80137e2:	1bed      	subs	r5, r5, r7
 80137e4:	445d      	add	r5, fp
 80137e6:	442b      	add	r3, r5
 80137e8:	6123      	str	r3, [r4, #16]
 80137ea:	2000      	movs	r0, #0
 80137ec:	b007      	add	sp, #28
 80137ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137f2:	f04f 0b00 	mov.w	fp, #0
 80137f6:	e7ca      	b.n	801378e <_scanf_i+0x15e>
 80137f8:	07ca      	lsls	r2, r1, #31
 80137fa:	bf4c      	ite	mi
 80137fc:	8018      	strhmi	r0, [r3, #0]
 80137fe:	6018      	strpl	r0, [r3, #0]
 8013800:	e7eb      	b.n	80137da <_scanf_i+0x1aa>
 8013802:	2001      	movs	r0, #1
 8013804:	e7f2      	b.n	80137ec <_scanf_i+0x1bc>
 8013806:	bf00      	nop
 8013808:	08015a6c 	.word	0x08015a6c
 801380c:	08012f31 	.word	0x08012f31
 8013810:	080142c5 	.word	0x080142c5
 8013814:	08015fba 	.word	0x08015fba

08013818 <__sflush_r>:
 8013818:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801381c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013820:	0716      	lsls	r6, r2, #28
 8013822:	4605      	mov	r5, r0
 8013824:	460c      	mov	r4, r1
 8013826:	d454      	bmi.n	80138d2 <__sflush_r+0xba>
 8013828:	684b      	ldr	r3, [r1, #4]
 801382a:	2b00      	cmp	r3, #0
 801382c:	dc02      	bgt.n	8013834 <__sflush_r+0x1c>
 801382e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013830:	2b00      	cmp	r3, #0
 8013832:	dd48      	ble.n	80138c6 <__sflush_r+0xae>
 8013834:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013836:	2e00      	cmp	r6, #0
 8013838:	d045      	beq.n	80138c6 <__sflush_r+0xae>
 801383a:	2300      	movs	r3, #0
 801383c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013840:	682f      	ldr	r7, [r5, #0]
 8013842:	6a21      	ldr	r1, [r4, #32]
 8013844:	602b      	str	r3, [r5, #0]
 8013846:	d030      	beq.n	80138aa <__sflush_r+0x92>
 8013848:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801384a:	89a3      	ldrh	r3, [r4, #12]
 801384c:	0759      	lsls	r1, r3, #29
 801384e:	d505      	bpl.n	801385c <__sflush_r+0x44>
 8013850:	6863      	ldr	r3, [r4, #4]
 8013852:	1ad2      	subs	r2, r2, r3
 8013854:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013856:	b10b      	cbz	r3, 801385c <__sflush_r+0x44>
 8013858:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801385a:	1ad2      	subs	r2, r2, r3
 801385c:	2300      	movs	r3, #0
 801385e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013860:	6a21      	ldr	r1, [r4, #32]
 8013862:	4628      	mov	r0, r5
 8013864:	47b0      	blx	r6
 8013866:	1c43      	adds	r3, r0, #1
 8013868:	89a3      	ldrh	r3, [r4, #12]
 801386a:	d106      	bne.n	801387a <__sflush_r+0x62>
 801386c:	6829      	ldr	r1, [r5, #0]
 801386e:	291d      	cmp	r1, #29
 8013870:	d82b      	bhi.n	80138ca <__sflush_r+0xb2>
 8013872:	4a2a      	ldr	r2, [pc, #168]	@ (801391c <__sflush_r+0x104>)
 8013874:	410a      	asrs	r2, r1
 8013876:	07d6      	lsls	r6, r2, #31
 8013878:	d427      	bmi.n	80138ca <__sflush_r+0xb2>
 801387a:	2200      	movs	r2, #0
 801387c:	6062      	str	r2, [r4, #4]
 801387e:	04d9      	lsls	r1, r3, #19
 8013880:	6922      	ldr	r2, [r4, #16]
 8013882:	6022      	str	r2, [r4, #0]
 8013884:	d504      	bpl.n	8013890 <__sflush_r+0x78>
 8013886:	1c42      	adds	r2, r0, #1
 8013888:	d101      	bne.n	801388e <__sflush_r+0x76>
 801388a:	682b      	ldr	r3, [r5, #0]
 801388c:	b903      	cbnz	r3, 8013890 <__sflush_r+0x78>
 801388e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013890:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013892:	602f      	str	r7, [r5, #0]
 8013894:	b1b9      	cbz	r1, 80138c6 <__sflush_r+0xae>
 8013896:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801389a:	4299      	cmp	r1, r3
 801389c:	d002      	beq.n	80138a4 <__sflush_r+0x8c>
 801389e:	4628      	mov	r0, r5
 80138a0:	f7fd ffc6 	bl	8011830 <_free_r>
 80138a4:	2300      	movs	r3, #0
 80138a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80138a8:	e00d      	b.n	80138c6 <__sflush_r+0xae>
 80138aa:	2301      	movs	r3, #1
 80138ac:	4628      	mov	r0, r5
 80138ae:	47b0      	blx	r6
 80138b0:	4602      	mov	r2, r0
 80138b2:	1c50      	adds	r0, r2, #1
 80138b4:	d1c9      	bne.n	801384a <__sflush_r+0x32>
 80138b6:	682b      	ldr	r3, [r5, #0]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d0c6      	beq.n	801384a <__sflush_r+0x32>
 80138bc:	2b1d      	cmp	r3, #29
 80138be:	d001      	beq.n	80138c4 <__sflush_r+0xac>
 80138c0:	2b16      	cmp	r3, #22
 80138c2:	d11e      	bne.n	8013902 <__sflush_r+0xea>
 80138c4:	602f      	str	r7, [r5, #0]
 80138c6:	2000      	movs	r0, #0
 80138c8:	e022      	b.n	8013910 <__sflush_r+0xf8>
 80138ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138ce:	b21b      	sxth	r3, r3
 80138d0:	e01b      	b.n	801390a <__sflush_r+0xf2>
 80138d2:	690f      	ldr	r7, [r1, #16]
 80138d4:	2f00      	cmp	r7, #0
 80138d6:	d0f6      	beq.n	80138c6 <__sflush_r+0xae>
 80138d8:	0793      	lsls	r3, r2, #30
 80138da:	680e      	ldr	r6, [r1, #0]
 80138dc:	bf08      	it	eq
 80138de:	694b      	ldreq	r3, [r1, #20]
 80138e0:	600f      	str	r7, [r1, #0]
 80138e2:	bf18      	it	ne
 80138e4:	2300      	movne	r3, #0
 80138e6:	eba6 0807 	sub.w	r8, r6, r7
 80138ea:	608b      	str	r3, [r1, #8]
 80138ec:	f1b8 0f00 	cmp.w	r8, #0
 80138f0:	dde9      	ble.n	80138c6 <__sflush_r+0xae>
 80138f2:	6a21      	ldr	r1, [r4, #32]
 80138f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80138f6:	4643      	mov	r3, r8
 80138f8:	463a      	mov	r2, r7
 80138fa:	4628      	mov	r0, r5
 80138fc:	47b0      	blx	r6
 80138fe:	2800      	cmp	r0, #0
 8013900:	dc08      	bgt.n	8013914 <__sflush_r+0xfc>
 8013902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801390a:	81a3      	strh	r3, [r4, #12]
 801390c:	f04f 30ff 	mov.w	r0, #4294967295
 8013910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013914:	4407      	add	r7, r0
 8013916:	eba8 0800 	sub.w	r8, r8, r0
 801391a:	e7e7      	b.n	80138ec <__sflush_r+0xd4>
 801391c:	dfbffffe 	.word	0xdfbffffe

08013920 <_fflush_r>:
 8013920:	b538      	push	{r3, r4, r5, lr}
 8013922:	690b      	ldr	r3, [r1, #16]
 8013924:	4605      	mov	r5, r0
 8013926:	460c      	mov	r4, r1
 8013928:	b913      	cbnz	r3, 8013930 <_fflush_r+0x10>
 801392a:	2500      	movs	r5, #0
 801392c:	4628      	mov	r0, r5
 801392e:	bd38      	pop	{r3, r4, r5, pc}
 8013930:	b118      	cbz	r0, 801393a <_fflush_r+0x1a>
 8013932:	6a03      	ldr	r3, [r0, #32]
 8013934:	b90b      	cbnz	r3, 801393a <_fflush_r+0x1a>
 8013936:	f7fc fee1 	bl	80106fc <__sinit>
 801393a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d0f3      	beq.n	801392a <_fflush_r+0xa>
 8013942:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013944:	07d0      	lsls	r0, r2, #31
 8013946:	d404      	bmi.n	8013952 <_fflush_r+0x32>
 8013948:	0599      	lsls	r1, r3, #22
 801394a:	d402      	bmi.n	8013952 <_fflush_r+0x32>
 801394c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801394e:	f7fd f8ec 	bl	8010b2a <__retarget_lock_acquire_recursive>
 8013952:	4628      	mov	r0, r5
 8013954:	4621      	mov	r1, r4
 8013956:	f7ff ff5f 	bl	8013818 <__sflush_r>
 801395a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801395c:	07da      	lsls	r2, r3, #31
 801395e:	4605      	mov	r5, r0
 8013960:	d4e4      	bmi.n	801392c <_fflush_r+0xc>
 8013962:	89a3      	ldrh	r3, [r4, #12]
 8013964:	059b      	lsls	r3, r3, #22
 8013966:	d4e1      	bmi.n	801392c <_fflush_r+0xc>
 8013968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801396a:	f7fd f8df 	bl	8010b2c <__retarget_lock_release_recursive>
 801396e:	e7dd      	b.n	801392c <_fflush_r+0xc>

08013970 <fiprintf>:
 8013970:	b40e      	push	{r1, r2, r3}
 8013972:	b503      	push	{r0, r1, lr}
 8013974:	4601      	mov	r1, r0
 8013976:	ab03      	add	r3, sp, #12
 8013978:	4805      	ldr	r0, [pc, #20]	@ (8013990 <fiprintf+0x20>)
 801397a:	f853 2b04 	ldr.w	r2, [r3], #4
 801397e:	6800      	ldr	r0, [r0, #0]
 8013980:	9301      	str	r3, [sp, #4]
 8013982:	f000 fcd7 	bl	8014334 <_vfiprintf_r>
 8013986:	b002      	add	sp, #8
 8013988:	f85d eb04 	ldr.w	lr, [sp], #4
 801398c:	b003      	add	sp, #12
 801398e:	4770      	bx	lr
 8013990:	200000c4 	.word	0x200000c4

08013994 <__sccl>:
 8013994:	b570      	push	{r4, r5, r6, lr}
 8013996:	780b      	ldrb	r3, [r1, #0]
 8013998:	4604      	mov	r4, r0
 801399a:	2b5e      	cmp	r3, #94	@ 0x5e
 801399c:	bf0b      	itete	eq
 801399e:	784b      	ldrbeq	r3, [r1, #1]
 80139a0:	1c4a      	addne	r2, r1, #1
 80139a2:	1c8a      	addeq	r2, r1, #2
 80139a4:	2100      	movne	r1, #0
 80139a6:	bf08      	it	eq
 80139a8:	2101      	moveq	r1, #1
 80139aa:	3801      	subs	r0, #1
 80139ac:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80139b0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80139b4:	42a8      	cmp	r0, r5
 80139b6:	d1fb      	bne.n	80139b0 <__sccl+0x1c>
 80139b8:	b90b      	cbnz	r3, 80139be <__sccl+0x2a>
 80139ba:	1e50      	subs	r0, r2, #1
 80139bc:	bd70      	pop	{r4, r5, r6, pc}
 80139be:	f081 0101 	eor.w	r1, r1, #1
 80139c2:	54e1      	strb	r1, [r4, r3]
 80139c4:	4610      	mov	r0, r2
 80139c6:	4602      	mov	r2, r0
 80139c8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80139cc:	2d2d      	cmp	r5, #45	@ 0x2d
 80139ce:	d005      	beq.n	80139dc <__sccl+0x48>
 80139d0:	2d5d      	cmp	r5, #93	@ 0x5d
 80139d2:	d016      	beq.n	8013a02 <__sccl+0x6e>
 80139d4:	2d00      	cmp	r5, #0
 80139d6:	d0f1      	beq.n	80139bc <__sccl+0x28>
 80139d8:	462b      	mov	r3, r5
 80139da:	e7f2      	b.n	80139c2 <__sccl+0x2e>
 80139dc:	7846      	ldrb	r6, [r0, #1]
 80139de:	2e5d      	cmp	r6, #93	@ 0x5d
 80139e0:	d0fa      	beq.n	80139d8 <__sccl+0x44>
 80139e2:	42b3      	cmp	r3, r6
 80139e4:	dcf8      	bgt.n	80139d8 <__sccl+0x44>
 80139e6:	3002      	adds	r0, #2
 80139e8:	461a      	mov	r2, r3
 80139ea:	3201      	adds	r2, #1
 80139ec:	4296      	cmp	r6, r2
 80139ee:	54a1      	strb	r1, [r4, r2]
 80139f0:	dcfb      	bgt.n	80139ea <__sccl+0x56>
 80139f2:	1af2      	subs	r2, r6, r3
 80139f4:	3a01      	subs	r2, #1
 80139f6:	1c5d      	adds	r5, r3, #1
 80139f8:	42b3      	cmp	r3, r6
 80139fa:	bfa8      	it	ge
 80139fc:	2200      	movge	r2, #0
 80139fe:	18ab      	adds	r3, r5, r2
 8013a00:	e7e1      	b.n	80139c6 <__sccl+0x32>
 8013a02:	4610      	mov	r0, r2
 8013a04:	e7da      	b.n	80139bc <__sccl+0x28>

08013a06 <__submore>:
 8013a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a0a:	460c      	mov	r4, r1
 8013a0c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013a0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013a12:	4299      	cmp	r1, r3
 8013a14:	d11d      	bne.n	8013a52 <__submore+0x4c>
 8013a16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8013a1a:	f7fb fea9 	bl	800f770 <_malloc_r>
 8013a1e:	b918      	cbnz	r0, 8013a28 <__submore+0x22>
 8013a20:	f04f 30ff 	mov.w	r0, #4294967295
 8013a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013a2c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013a2e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8013a32:	6360      	str	r0, [r4, #52]	@ 0x34
 8013a34:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8013a38:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8013a3c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8013a40:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013a44:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8013a48:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8013a4c:	6020      	str	r0, [r4, #0]
 8013a4e:	2000      	movs	r0, #0
 8013a50:	e7e8      	b.n	8013a24 <__submore+0x1e>
 8013a52:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8013a54:	0077      	lsls	r7, r6, #1
 8013a56:	463a      	mov	r2, r7
 8013a58:	f000 fb97 	bl	801418a <_realloc_r>
 8013a5c:	4605      	mov	r5, r0
 8013a5e:	2800      	cmp	r0, #0
 8013a60:	d0de      	beq.n	8013a20 <__submore+0x1a>
 8013a62:	eb00 0806 	add.w	r8, r0, r6
 8013a66:	4601      	mov	r1, r0
 8013a68:	4632      	mov	r2, r6
 8013a6a:	4640      	mov	r0, r8
 8013a6c:	f7fd f85f 	bl	8010b2e <memcpy>
 8013a70:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8013a74:	f8c4 8000 	str.w	r8, [r4]
 8013a78:	e7e9      	b.n	8013a4e <__submore+0x48>

08013a7a <memmove>:
 8013a7a:	4288      	cmp	r0, r1
 8013a7c:	b510      	push	{r4, lr}
 8013a7e:	eb01 0402 	add.w	r4, r1, r2
 8013a82:	d902      	bls.n	8013a8a <memmove+0x10>
 8013a84:	4284      	cmp	r4, r0
 8013a86:	4623      	mov	r3, r4
 8013a88:	d807      	bhi.n	8013a9a <memmove+0x20>
 8013a8a:	1e43      	subs	r3, r0, #1
 8013a8c:	42a1      	cmp	r1, r4
 8013a8e:	d008      	beq.n	8013aa2 <memmove+0x28>
 8013a90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a94:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013a98:	e7f8      	b.n	8013a8c <memmove+0x12>
 8013a9a:	4402      	add	r2, r0
 8013a9c:	4601      	mov	r1, r0
 8013a9e:	428a      	cmp	r2, r1
 8013aa0:	d100      	bne.n	8013aa4 <memmove+0x2a>
 8013aa2:	bd10      	pop	{r4, pc}
 8013aa4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013aa8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013aac:	e7f7      	b.n	8013a9e <memmove+0x24>
	...

08013ab0 <nan>:
 8013ab0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013ab8 <nan+0x8>
 8013ab4:	4770      	bx	lr
 8013ab6:	bf00      	nop
 8013ab8:	00000000 	.word	0x00000000
 8013abc:	7ff80000 	.word	0x7ff80000

08013ac0 <abort>:
 8013ac0:	b508      	push	{r3, lr}
 8013ac2:	2006      	movs	r0, #6
 8013ac4:	f000 fe0a 	bl	80146dc <raise>
 8013ac8:	2001      	movs	r0, #1
 8013aca:	f7f1 fb6f 	bl	80051ac <_exit>

08013ace <_calloc_r>:
 8013ace:	b570      	push	{r4, r5, r6, lr}
 8013ad0:	fba1 5402 	umull	r5, r4, r1, r2
 8013ad4:	b93c      	cbnz	r4, 8013ae6 <_calloc_r+0x18>
 8013ad6:	4629      	mov	r1, r5
 8013ad8:	f7fb fe4a 	bl	800f770 <_malloc_r>
 8013adc:	4606      	mov	r6, r0
 8013ade:	b928      	cbnz	r0, 8013aec <_calloc_r+0x1e>
 8013ae0:	2600      	movs	r6, #0
 8013ae2:	4630      	mov	r0, r6
 8013ae4:	bd70      	pop	{r4, r5, r6, pc}
 8013ae6:	220c      	movs	r2, #12
 8013ae8:	6002      	str	r2, [r0, #0]
 8013aea:	e7f9      	b.n	8013ae0 <_calloc_r+0x12>
 8013aec:	462a      	mov	r2, r5
 8013aee:	4621      	mov	r1, r4
 8013af0:	f7fc fefd 	bl	80108ee <memset>
 8013af4:	e7f5      	b.n	8013ae2 <_calloc_r+0x14>

08013af6 <rshift>:
 8013af6:	6903      	ldr	r3, [r0, #16]
 8013af8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b00:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013b04:	f100 0414 	add.w	r4, r0, #20
 8013b08:	dd45      	ble.n	8013b96 <rshift+0xa0>
 8013b0a:	f011 011f 	ands.w	r1, r1, #31
 8013b0e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013b12:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013b16:	d10c      	bne.n	8013b32 <rshift+0x3c>
 8013b18:	f100 0710 	add.w	r7, r0, #16
 8013b1c:	4629      	mov	r1, r5
 8013b1e:	42b1      	cmp	r1, r6
 8013b20:	d334      	bcc.n	8013b8c <rshift+0x96>
 8013b22:	1a9b      	subs	r3, r3, r2
 8013b24:	009b      	lsls	r3, r3, #2
 8013b26:	1eea      	subs	r2, r5, #3
 8013b28:	4296      	cmp	r6, r2
 8013b2a:	bf38      	it	cc
 8013b2c:	2300      	movcc	r3, #0
 8013b2e:	4423      	add	r3, r4
 8013b30:	e015      	b.n	8013b5e <rshift+0x68>
 8013b32:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013b36:	f1c1 0820 	rsb	r8, r1, #32
 8013b3a:	40cf      	lsrs	r7, r1
 8013b3c:	f105 0e04 	add.w	lr, r5, #4
 8013b40:	46a1      	mov	r9, r4
 8013b42:	4576      	cmp	r6, lr
 8013b44:	46f4      	mov	ip, lr
 8013b46:	d815      	bhi.n	8013b74 <rshift+0x7e>
 8013b48:	1a9a      	subs	r2, r3, r2
 8013b4a:	0092      	lsls	r2, r2, #2
 8013b4c:	3a04      	subs	r2, #4
 8013b4e:	3501      	adds	r5, #1
 8013b50:	42ae      	cmp	r6, r5
 8013b52:	bf38      	it	cc
 8013b54:	2200      	movcc	r2, #0
 8013b56:	18a3      	adds	r3, r4, r2
 8013b58:	50a7      	str	r7, [r4, r2]
 8013b5a:	b107      	cbz	r7, 8013b5e <rshift+0x68>
 8013b5c:	3304      	adds	r3, #4
 8013b5e:	1b1a      	subs	r2, r3, r4
 8013b60:	42a3      	cmp	r3, r4
 8013b62:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013b66:	bf08      	it	eq
 8013b68:	2300      	moveq	r3, #0
 8013b6a:	6102      	str	r2, [r0, #16]
 8013b6c:	bf08      	it	eq
 8013b6e:	6143      	streq	r3, [r0, #20]
 8013b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b74:	f8dc c000 	ldr.w	ip, [ip]
 8013b78:	fa0c fc08 	lsl.w	ip, ip, r8
 8013b7c:	ea4c 0707 	orr.w	r7, ip, r7
 8013b80:	f849 7b04 	str.w	r7, [r9], #4
 8013b84:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013b88:	40cf      	lsrs	r7, r1
 8013b8a:	e7da      	b.n	8013b42 <rshift+0x4c>
 8013b8c:	f851 cb04 	ldr.w	ip, [r1], #4
 8013b90:	f847 cf04 	str.w	ip, [r7, #4]!
 8013b94:	e7c3      	b.n	8013b1e <rshift+0x28>
 8013b96:	4623      	mov	r3, r4
 8013b98:	e7e1      	b.n	8013b5e <rshift+0x68>

08013b9a <__hexdig_fun>:
 8013b9a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8013b9e:	2b09      	cmp	r3, #9
 8013ba0:	d802      	bhi.n	8013ba8 <__hexdig_fun+0xe>
 8013ba2:	3820      	subs	r0, #32
 8013ba4:	b2c0      	uxtb	r0, r0
 8013ba6:	4770      	bx	lr
 8013ba8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8013bac:	2b05      	cmp	r3, #5
 8013bae:	d801      	bhi.n	8013bb4 <__hexdig_fun+0x1a>
 8013bb0:	3847      	subs	r0, #71	@ 0x47
 8013bb2:	e7f7      	b.n	8013ba4 <__hexdig_fun+0xa>
 8013bb4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8013bb8:	2b05      	cmp	r3, #5
 8013bba:	d801      	bhi.n	8013bc0 <__hexdig_fun+0x26>
 8013bbc:	3827      	subs	r0, #39	@ 0x27
 8013bbe:	e7f1      	b.n	8013ba4 <__hexdig_fun+0xa>
 8013bc0:	2000      	movs	r0, #0
 8013bc2:	4770      	bx	lr

08013bc4 <__gethex>:
 8013bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bc8:	b085      	sub	sp, #20
 8013bca:	468a      	mov	sl, r1
 8013bcc:	9302      	str	r3, [sp, #8]
 8013bce:	680b      	ldr	r3, [r1, #0]
 8013bd0:	9001      	str	r0, [sp, #4]
 8013bd2:	4690      	mov	r8, r2
 8013bd4:	1c9c      	adds	r4, r3, #2
 8013bd6:	46a1      	mov	r9, r4
 8013bd8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013bdc:	2830      	cmp	r0, #48	@ 0x30
 8013bde:	d0fa      	beq.n	8013bd6 <__gethex+0x12>
 8013be0:	eba9 0303 	sub.w	r3, r9, r3
 8013be4:	f1a3 0b02 	sub.w	fp, r3, #2
 8013be8:	f7ff ffd7 	bl	8013b9a <__hexdig_fun>
 8013bec:	4605      	mov	r5, r0
 8013bee:	2800      	cmp	r0, #0
 8013bf0:	d168      	bne.n	8013cc4 <__gethex+0x100>
 8013bf2:	49a0      	ldr	r1, [pc, #640]	@ (8013e74 <__gethex+0x2b0>)
 8013bf4:	2201      	movs	r2, #1
 8013bf6:	4648      	mov	r0, r9
 8013bf8:	f7fc fe90 	bl	801091c <strncmp>
 8013bfc:	4607      	mov	r7, r0
 8013bfe:	2800      	cmp	r0, #0
 8013c00:	d167      	bne.n	8013cd2 <__gethex+0x10e>
 8013c02:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013c06:	4626      	mov	r6, r4
 8013c08:	f7ff ffc7 	bl	8013b9a <__hexdig_fun>
 8013c0c:	2800      	cmp	r0, #0
 8013c0e:	d062      	beq.n	8013cd6 <__gethex+0x112>
 8013c10:	4623      	mov	r3, r4
 8013c12:	7818      	ldrb	r0, [r3, #0]
 8013c14:	2830      	cmp	r0, #48	@ 0x30
 8013c16:	4699      	mov	r9, r3
 8013c18:	f103 0301 	add.w	r3, r3, #1
 8013c1c:	d0f9      	beq.n	8013c12 <__gethex+0x4e>
 8013c1e:	f7ff ffbc 	bl	8013b9a <__hexdig_fun>
 8013c22:	fab0 f580 	clz	r5, r0
 8013c26:	096d      	lsrs	r5, r5, #5
 8013c28:	f04f 0b01 	mov.w	fp, #1
 8013c2c:	464a      	mov	r2, r9
 8013c2e:	4616      	mov	r6, r2
 8013c30:	3201      	adds	r2, #1
 8013c32:	7830      	ldrb	r0, [r6, #0]
 8013c34:	f7ff ffb1 	bl	8013b9a <__hexdig_fun>
 8013c38:	2800      	cmp	r0, #0
 8013c3a:	d1f8      	bne.n	8013c2e <__gethex+0x6a>
 8013c3c:	498d      	ldr	r1, [pc, #564]	@ (8013e74 <__gethex+0x2b0>)
 8013c3e:	2201      	movs	r2, #1
 8013c40:	4630      	mov	r0, r6
 8013c42:	f7fc fe6b 	bl	801091c <strncmp>
 8013c46:	2800      	cmp	r0, #0
 8013c48:	d13f      	bne.n	8013cca <__gethex+0x106>
 8013c4a:	b944      	cbnz	r4, 8013c5e <__gethex+0x9a>
 8013c4c:	1c74      	adds	r4, r6, #1
 8013c4e:	4622      	mov	r2, r4
 8013c50:	4616      	mov	r6, r2
 8013c52:	3201      	adds	r2, #1
 8013c54:	7830      	ldrb	r0, [r6, #0]
 8013c56:	f7ff ffa0 	bl	8013b9a <__hexdig_fun>
 8013c5a:	2800      	cmp	r0, #0
 8013c5c:	d1f8      	bne.n	8013c50 <__gethex+0x8c>
 8013c5e:	1ba4      	subs	r4, r4, r6
 8013c60:	00a7      	lsls	r7, r4, #2
 8013c62:	7833      	ldrb	r3, [r6, #0]
 8013c64:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013c68:	2b50      	cmp	r3, #80	@ 0x50
 8013c6a:	d13e      	bne.n	8013cea <__gethex+0x126>
 8013c6c:	7873      	ldrb	r3, [r6, #1]
 8013c6e:	2b2b      	cmp	r3, #43	@ 0x2b
 8013c70:	d033      	beq.n	8013cda <__gethex+0x116>
 8013c72:	2b2d      	cmp	r3, #45	@ 0x2d
 8013c74:	d034      	beq.n	8013ce0 <__gethex+0x11c>
 8013c76:	1c71      	adds	r1, r6, #1
 8013c78:	2400      	movs	r4, #0
 8013c7a:	7808      	ldrb	r0, [r1, #0]
 8013c7c:	f7ff ff8d 	bl	8013b9a <__hexdig_fun>
 8013c80:	1e43      	subs	r3, r0, #1
 8013c82:	b2db      	uxtb	r3, r3
 8013c84:	2b18      	cmp	r3, #24
 8013c86:	d830      	bhi.n	8013cea <__gethex+0x126>
 8013c88:	f1a0 0210 	sub.w	r2, r0, #16
 8013c8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013c90:	f7ff ff83 	bl	8013b9a <__hexdig_fun>
 8013c94:	f100 3cff 	add.w	ip, r0, #4294967295
 8013c98:	fa5f fc8c 	uxtb.w	ip, ip
 8013c9c:	f1bc 0f18 	cmp.w	ip, #24
 8013ca0:	f04f 030a 	mov.w	r3, #10
 8013ca4:	d91e      	bls.n	8013ce4 <__gethex+0x120>
 8013ca6:	b104      	cbz	r4, 8013caa <__gethex+0xe6>
 8013ca8:	4252      	negs	r2, r2
 8013caa:	4417      	add	r7, r2
 8013cac:	f8ca 1000 	str.w	r1, [sl]
 8013cb0:	b1ed      	cbz	r5, 8013cee <__gethex+0x12a>
 8013cb2:	f1bb 0f00 	cmp.w	fp, #0
 8013cb6:	bf0c      	ite	eq
 8013cb8:	2506      	moveq	r5, #6
 8013cba:	2500      	movne	r5, #0
 8013cbc:	4628      	mov	r0, r5
 8013cbe:	b005      	add	sp, #20
 8013cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cc4:	2500      	movs	r5, #0
 8013cc6:	462c      	mov	r4, r5
 8013cc8:	e7b0      	b.n	8013c2c <__gethex+0x68>
 8013cca:	2c00      	cmp	r4, #0
 8013ccc:	d1c7      	bne.n	8013c5e <__gethex+0x9a>
 8013cce:	4627      	mov	r7, r4
 8013cd0:	e7c7      	b.n	8013c62 <__gethex+0x9e>
 8013cd2:	464e      	mov	r6, r9
 8013cd4:	462f      	mov	r7, r5
 8013cd6:	2501      	movs	r5, #1
 8013cd8:	e7c3      	b.n	8013c62 <__gethex+0x9e>
 8013cda:	2400      	movs	r4, #0
 8013cdc:	1cb1      	adds	r1, r6, #2
 8013cde:	e7cc      	b.n	8013c7a <__gethex+0xb6>
 8013ce0:	2401      	movs	r4, #1
 8013ce2:	e7fb      	b.n	8013cdc <__gethex+0x118>
 8013ce4:	fb03 0002 	mla	r0, r3, r2, r0
 8013ce8:	e7ce      	b.n	8013c88 <__gethex+0xc4>
 8013cea:	4631      	mov	r1, r6
 8013cec:	e7de      	b.n	8013cac <__gethex+0xe8>
 8013cee:	eba6 0309 	sub.w	r3, r6, r9
 8013cf2:	3b01      	subs	r3, #1
 8013cf4:	4629      	mov	r1, r5
 8013cf6:	2b07      	cmp	r3, #7
 8013cf8:	dc0a      	bgt.n	8013d10 <__gethex+0x14c>
 8013cfa:	9801      	ldr	r0, [sp, #4]
 8013cfc:	f7fd fde2 	bl	80118c4 <_Balloc>
 8013d00:	4604      	mov	r4, r0
 8013d02:	b940      	cbnz	r0, 8013d16 <__gethex+0x152>
 8013d04:	4b5c      	ldr	r3, [pc, #368]	@ (8013e78 <__gethex+0x2b4>)
 8013d06:	4602      	mov	r2, r0
 8013d08:	21e4      	movs	r1, #228	@ 0xe4
 8013d0a:	485c      	ldr	r0, [pc, #368]	@ (8013e7c <__gethex+0x2b8>)
 8013d0c:	f7fc ff24 	bl	8010b58 <__assert_func>
 8013d10:	3101      	adds	r1, #1
 8013d12:	105b      	asrs	r3, r3, #1
 8013d14:	e7ef      	b.n	8013cf6 <__gethex+0x132>
 8013d16:	f100 0a14 	add.w	sl, r0, #20
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	4655      	mov	r5, sl
 8013d1e:	469b      	mov	fp, r3
 8013d20:	45b1      	cmp	r9, r6
 8013d22:	d337      	bcc.n	8013d94 <__gethex+0x1d0>
 8013d24:	f845 bb04 	str.w	fp, [r5], #4
 8013d28:	eba5 050a 	sub.w	r5, r5, sl
 8013d2c:	10ad      	asrs	r5, r5, #2
 8013d2e:	6125      	str	r5, [r4, #16]
 8013d30:	4658      	mov	r0, fp
 8013d32:	f7fd feb9 	bl	8011aa8 <__hi0bits>
 8013d36:	016d      	lsls	r5, r5, #5
 8013d38:	f8d8 6000 	ldr.w	r6, [r8]
 8013d3c:	1a2d      	subs	r5, r5, r0
 8013d3e:	42b5      	cmp	r5, r6
 8013d40:	dd54      	ble.n	8013dec <__gethex+0x228>
 8013d42:	1bad      	subs	r5, r5, r6
 8013d44:	4629      	mov	r1, r5
 8013d46:	4620      	mov	r0, r4
 8013d48:	f7fe fa4d 	bl	80121e6 <__any_on>
 8013d4c:	4681      	mov	r9, r0
 8013d4e:	b178      	cbz	r0, 8013d70 <__gethex+0x1ac>
 8013d50:	1e6b      	subs	r3, r5, #1
 8013d52:	1159      	asrs	r1, r3, #5
 8013d54:	f003 021f 	and.w	r2, r3, #31
 8013d58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013d5c:	f04f 0901 	mov.w	r9, #1
 8013d60:	fa09 f202 	lsl.w	r2, r9, r2
 8013d64:	420a      	tst	r2, r1
 8013d66:	d003      	beq.n	8013d70 <__gethex+0x1ac>
 8013d68:	454b      	cmp	r3, r9
 8013d6a:	dc36      	bgt.n	8013dda <__gethex+0x216>
 8013d6c:	f04f 0902 	mov.w	r9, #2
 8013d70:	4629      	mov	r1, r5
 8013d72:	4620      	mov	r0, r4
 8013d74:	f7ff febf 	bl	8013af6 <rshift>
 8013d78:	442f      	add	r7, r5
 8013d7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013d7e:	42bb      	cmp	r3, r7
 8013d80:	da42      	bge.n	8013e08 <__gethex+0x244>
 8013d82:	9801      	ldr	r0, [sp, #4]
 8013d84:	4621      	mov	r1, r4
 8013d86:	f7fd fddd 	bl	8011944 <_Bfree>
 8013d8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	6013      	str	r3, [r2, #0]
 8013d90:	25a3      	movs	r5, #163	@ 0xa3
 8013d92:	e793      	b.n	8013cbc <__gethex+0xf8>
 8013d94:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013d98:	2a2e      	cmp	r2, #46	@ 0x2e
 8013d9a:	d012      	beq.n	8013dc2 <__gethex+0x1fe>
 8013d9c:	2b20      	cmp	r3, #32
 8013d9e:	d104      	bne.n	8013daa <__gethex+0x1e6>
 8013da0:	f845 bb04 	str.w	fp, [r5], #4
 8013da4:	f04f 0b00 	mov.w	fp, #0
 8013da8:	465b      	mov	r3, fp
 8013daa:	7830      	ldrb	r0, [r6, #0]
 8013dac:	9303      	str	r3, [sp, #12]
 8013dae:	f7ff fef4 	bl	8013b9a <__hexdig_fun>
 8013db2:	9b03      	ldr	r3, [sp, #12]
 8013db4:	f000 000f 	and.w	r0, r0, #15
 8013db8:	4098      	lsls	r0, r3
 8013dba:	ea4b 0b00 	orr.w	fp, fp, r0
 8013dbe:	3304      	adds	r3, #4
 8013dc0:	e7ae      	b.n	8013d20 <__gethex+0x15c>
 8013dc2:	45b1      	cmp	r9, r6
 8013dc4:	d8ea      	bhi.n	8013d9c <__gethex+0x1d8>
 8013dc6:	492b      	ldr	r1, [pc, #172]	@ (8013e74 <__gethex+0x2b0>)
 8013dc8:	9303      	str	r3, [sp, #12]
 8013dca:	2201      	movs	r2, #1
 8013dcc:	4630      	mov	r0, r6
 8013dce:	f7fc fda5 	bl	801091c <strncmp>
 8013dd2:	9b03      	ldr	r3, [sp, #12]
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	d1e1      	bne.n	8013d9c <__gethex+0x1d8>
 8013dd8:	e7a2      	b.n	8013d20 <__gethex+0x15c>
 8013dda:	1ea9      	subs	r1, r5, #2
 8013ddc:	4620      	mov	r0, r4
 8013dde:	f7fe fa02 	bl	80121e6 <__any_on>
 8013de2:	2800      	cmp	r0, #0
 8013de4:	d0c2      	beq.n	8013d6c <__gethex+0x1a8>
 8013de6:	f04f 0903 	mov.w	r9, #3
 8013dea:	e7c1      	b.n	8013d70 <__gethex+0x1ac>
 8013dec:	da09      	bge.n	8013e02 <__gethex+0x23e>
 8013dee:	1b75      	subs	r5, r6, r5
 8013df0:	4621      	mov	r1, r4
 8013df2:	9801      	ldr	r0, [sp, #4]
 8013df4:	462a      	mov	r2, r5
 8013df6:	f7fd ffbd 	bl	8011d74 <__lshift>
 8013dfa:	1b7f      	subs	r7, r7, r5
 8013dfc:	4604      	mov	r4, r0
 8013dfe:	f100 0a14 	add.w	sl, r0, #20
 8013e02:	f04f 0900 	mov.w	r9, #0
 8013e06:	e7b8      	b.n	8013d7a <__gethex+0x1b6>
 8013e08:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013e0c:	42bd      	cmp	r5, r7
 8013e0e:	dd6f      	ble.n	8013ef0 <__gethex+0x32c>
 8013e10:	1bed      	subs	r5, r5, r7
 8013e12:	42ae      	cmp	r6, r5
 8013e14:	dc34      	bgt.n	8013e80 <__gethex+0x2bc>
 8013e16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013e1a:	2b02      	cmp	r3, #2
 8013e1c:	d022      	beq.n	8013e64 <__gethex+0x2a0>
 8013e1e:	2b03      	cmp	r3, #3
 8013e20:	d024      	beq.n	8013e6c <__gethex+0x2a8>
 8013e22:	2b01      	cmp	r3, #1
 8013e24:	d115      	bne.n	8013e52 <__gethex+0x28e>
 8013e26:	42ae      	cmp	r6, r5
 8013e28:	d113      	bne.n	8013e52 <__gethex+0x28e>
 8013e2a:	2e01      	cmp	r6, #1
 8013e2c:	d10b      	bne.n	8013e46 <__gethex+0x282>
 8013e2e:	9a02      	ldr	r2, [sp, #8]
 8013e30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013e34:	6013      	str	r3, [r2, #0]
 8013e36:	2301      	movs	r3, #1
 8013e38:	6123      	str	r3, [r4, #16]
 8013e3a:	f8ca 3000 	str.w	r3, [sl]
 8013e3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013e40:	2562      	movs	r5, #98	@ 0x62
 8013e42:	601c      	str	r4, [r3, #0]
 8013e44:	e73a      	b.n	8013cbc <__gethex+0xf8>
 8013e46:	1e71      	subs	r1, r6, #1
 8013e48:	4620      	mov	r0, r4
 8013e4a:	f7fe f9cc 	bl	80121e6 <__any_on>
 8013e4e:	2800      	cmp	r0, #0
 8013e50:	d1ed      	bne.n	8013e2e <__gethex+0x26a>
 8013e52:	9801      	ldr	r0, [sp, #4]
 8013e54:	4621      	mov	r1, r4
 8013e56:	f7fd fd75 	bl	8011944 <_Bfree>
 8013e5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	6013      	str	r3, [r2, #0]
 8013e60:	2550      	movs	r5, #80	@ 0x50
 8013e62:	e72b      	b.n	8013cbc <__gethex+0xf8>
 8013e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d1f3      	bne.n	8013e52 <__gethex+0x28e>
 8013e6a:	e7e0      	b.n	8013e2e <__gethex+0x26a>
 8013e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d1dd      	bne.n	8013e2e <__gethex+0x26a>
 8013e72:	e7ee      	b.n	8013e52 <__gethex+0x28e>
 8013e74:	08015e40 	.word	0x08015e40
 8013e78:	08015cda 	.word	0x08015cda
 8013e7c:	08015fcd 	.word	0x08015fcd
 8013e80:	1e6f      	subs	r7, r5, #1
 8013e82:	f1b9 0f00 	cmp.w	r9, #0
 8013e86:	d130      	bne.n	8013eea <__gethex+0x326>
 8013e88:	b127      	cbz	r7, 8013e94 <__gethex+0x2d0>
 8013e8a:	4639      	mov	r1, r7
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	f7fe f9aa 	bl	80121e6 <__any_on>
 8013e92:	4681      	mov	r9, r0
 8013e94:	117a      	asrs	r2, r7, #5
 8013e96:	2301      	movs	r3, #1
 8013e98:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013e9c:	f007 071f 	and.w	r7, r7, #31
 8013ea0:	40bb      	lsls	r3, r7
 8013ea2:	4213      	tst	r3, r2
 8013ea4:	4629      	mov	r1, r5
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	bf18      	it	ne
 8013eaa:	f049 0902 	orrne.w	r9, r9, #2
 8013eae:	f7ff fe22 	bl	8013af6 <rshift>
 8013eb2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8013eb6:	1b76      	subs	r6, r6, r5
 8013eb8:	2502      	movs	r5, #2
 8013eba:	f1b9 0f00 	cmp.w	r9, #0
 8013ebe:	d047      	beq.n	8013f50 <__gethex+0x38c>
 8013ec0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013ec4:	2b02      	cmp	r3, #2
 8013ec6:	d015      	beq.n	8013ef4 <__gethex+0x330>
 8013ec8:	2b03      	cmp	r3, #3
 8013eca:	d017      	beq.n	8013efc <__gethex+0x338>
 8013ecc:	2b01      	cmp	r3, #1
 8013ece:	d109      	bne.n	8013ee4 <__gethex+0x320>
 8013ed0:	f019 0f02 	tst.w	r9, #2
 8013ed4:	d006      	beq.n	8013ee4 <__gethex+0x320>
 8013ed6:	f8da 3000 	ldr.w	r3, [sl]
 8013eda:	ea49 0903 	orr.w	r9, r9, r3
 8013ede:	f019 0f01 	tst.w	r9, #1
 8013ee2:	d10e      	bne.n	8013f02 <__gethex+0x33e>
 8013ee4:	f045 0510 	orr.w	r5, r5, #16
 8013ee8:	e032      	b.n	8013f50 <__gethex+0x38c>
 8013eea:	f04f 0901 	mov.w	r9, #1
 8013eee:	e7d1      	b.n	8013e94 <__gethex+0x2d0>
 8013ef0:	2501      	movs	r5, #1
 8013ef2:	e7e2      	b.n	8013eba <__gethex+0x2f6>
 8013ef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013ef6:	f1c3 0301 	rsb	r3, r3, #1
 8013efa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d0f0      	beq.n	8013ee4 <__gethex+0x320>
 8013f02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013f06:	f104 0314 	add.w	r3, r4, #20
 8013f0a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013f0e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8013f12:	f04f 0c00 	mov.w	ip, #0
 8013f16:	4618      	mov	r0, r3
 8013f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013f20:	d01b      	beq.n	8013f5a <__gethex+0x396>
 8013f22:	3201      	adds	r2, #1
 8013f24:	6002      	str	r2, [r0, #0]
 8013f26:	2d02      	cmp	r5, #2
 8013f28:	f104 0314 	add.w	r3, r4, #20
 8013f2c:	d13c      	bne.n	8013fa8 <__gethex+0x3e4>
 8013f2e:	f8d8 2000 	ldr.w	r2, [r8]
 8013f32:	3a01      	subs	r2, #1
 8013f34:	42b2      	cmp	r2, r6
 8013f36:	d109      	bne.n	8013f4c <__gethex+0x388>
 8013f38:	1171      	asrs	r1, r6, #5
 8013f3a:	2201      	movs	r2, #1
 8013f3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013f40:	f006 061f 	and.w	r6, r6, #31
 8013f44:	fa02 f606 	lsl.w	r6, r2, r6
 8013f48:	421e      	tst	r6, r3
 8013f4a:	d13a      	bne.n	8013fc2 <__gethex+0x3fe>
 8013f4c:	f045 0520 	orr.w	r5, r5, #32
 8013f50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f52:	601c      	str	r4, [r3, #0]
 8013f54:	9b02      	ldr	r3, [sp, #8]
 8013f56:	601f      	str	r7, [r3, #0]
 8013f58:	e6b0      	b.n	8013cbc <__gethex+0xf8>
 8013f5a:	4299      	cmp	r1, r3
 8013f5c:	f843 cc04 	str.w	ip, [r3, #-4]
 8013f60:	d8d9      	bhi.n	8013f16 <__gethex+0x352>
 8013f62:	68a3      	ldr	r3, [r4, #8]
 8013f64:	459b      	cmp	fp, r3
 8013f66:	db17      	blt.n	8013f98 <__gethex+0x3d4>
 8013f68:	6861      	ldr	r1, [r4, #4]
 8013f6a:	9801      	ldr	r0, [sp, #4]
 8013f6c:	3101      	adds	r1, #1
 8013f6e:	f7fd fca9 	bl	80118c4 <_Balloc>
 8013f72:	4681      	mov	r9, r0
 8013f74:	b918      	cbnz	r0, 8013f7e <__gethex+0x3ba>
 8013f76:	4b1a      	ldr	r3, [pc, #104]	@ (8013fe0 <__gethex+0x41c>)
 8013f78:	4602      	mov	r2, r0
 8013f7a:	2184      	movs	r1, #132	@ 0x84
 8013f7c:	e6c5      	b.n	8013d0a <__gethex+0x146>
 8013f7e:	6922      	ldr	r2, [r4, #16]
 8013f80:	3202      	adds	r2, #2
 8013f82:	f104 010c 	add.w	r1, r4, #12
 8013f86:	0092      	lsls	r2, r2, #2
 8013f88:	300c      	adds	r0, #12
 8013f8a:	f7fc fdd0 	bl	8010b2e <memcpy>
 8013f8e:	4621      	mov	r1, r4
 8013f90:	9801      	ldr	r0, [sp, #4]
 8013f92:	f7fd fcd7 	bl	8011944 <_Bfree>
 8013f96:	464c      	mov	r4, r9
 8013f98:	6923      	ldr	r3, [r4, #16]
 8013f9a:	1c5a      	adds	r2, r3, #1
 8013f9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013fa0:	6122      	str	r2, [r4, #16]
 8013fa2:	2201      	movs	r2, #1
 8013fa4:	615a      	str	r2, [r3, #20]
 8013fa6:	e7be      	b.n	8013f26 <__gethex+0x362>
 8013fa8:	6922      	ldr	r2, [r4, #16]
 8013faa:	455a      	cmp	r2, fp
 8013fac:	dd0b      	ble.n	8013fc6 <__gethex+0x402>
 8013fae:	2101      	movs	r1, #1
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	f7ff fda0 	bl	8013af6 <rshift>
 8013fb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013fba:	3701      	adds	r7, #1
 8013fbc:	42bb      	cmp	r3, r7
 8013fbe:	f6ff aee0 	blt.w	8013d82 <__gethex+0x1be>
 8013fc2:	2501      	movs	r5, #1
 8013fc4:	e7c2      	b.n	8013f4c <__gethex+0x388>
 8013fc6:	f016 061f 	ands.w	r6, r6, #31
 8013fca:	d0fa      	beq.n	8013fc2 <__gethex+0x3fe>
 8013fcc:	4453      	add	r3, sl
 8013fce:	f1c6 0620 	rsb	r6, r6, #32
 8013fd2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013fd6:	f7fd fd67 	bl	8011aa8 <__hi0bits>
 8013fda:	42b0      	cmp	r0, r6
 8013fdc:	dbe7      	blt.n	8013fae <__gethex+0x3ea>
 8013fde:	e7f0      	b.n	8013fc2 <__gethex+0x3fe>
 8013fe0:	08015cda 	.word	0x08015cda

08013fe4 <L_shift>:
 8013fe4:	f1c2 0208 	rsb	r2, r2, #8
 8013fe8:	0092      	lsls	r2, r2, #2
 8013fea:	b570      	push	{r4, r5, r6, lr}
 8013fec:	f1c2 0620 	rsb	r6, r2, #32
 8013ff0:	6843      	ldr	r3, [r0, #4]
 8013ff2:	6804      	ldr	r4, [r0, #0]
 8013ff4:	fa03 f506 	lsl.w	r5, r3, r6
 8013ff8:	432c      	orrs	r4, r5
 8013ffa:	40d3      	lsrs	r3, r2
 8013ffc:	6004      	str	r4, [r0, #0]
 8013ffe:	f840 3f04 	str.w	r3, [r0, #4]!
 8014002:	4288      	cmp	r0, r1
 8014004:	d3f4      	bcc.n	8013ff0 <L_shift+0xc>
 8014006:	bd70      	pop	{r4, r5, r6, pc}

08014008 <__match>:
 8014008:	b530      	push	{r4, r5, lr}
 801400a:	6803      	ldr	r3, [r0, #0]
 801400c:	3301      	adds	r3, #1
 801400e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014012:	b914      	cbnz	r4, 801401a <__match+0x12>
 8014014:	6003      	str	r3, [r0, #0]
 8014016:	2001      	movs	r0, #1
 8014018:	bd30      	pop	{r4, r5, pc}
 801401a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801401e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014022:	2d19      	cmp	r5, #25
 8014024:	bf98      	it	ls
 8014026:	3220      	addls	r2, #32
 8014028:	42a2      	cmp	r2, r4
 801402a:	d0f0      	beq.n	801400e <__match+0x6>
 801402c:	2000      	movs	r0, #0
 801402e:	e7f3      	b.n	8014018 <__match+0x10>

08014030 <__hexnan>:
 8014030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014034:	680b      	ldr	r3, [r1, #0]
 8014036:	6801      	ldr	r1, [r0, #0]
 8014038:	115e      	asrs	r6, r3, #5
 801403a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801403e:	f013 031f 	ands.w	r3, r3, #31
 8014042:	b087      	sub	sp, #28
 8014044:	bf18      	it	ne
 8014046:	3604      	addne	r6, #4
 8014048:	2500      	movs	r5, #0
 801404a:	1f37      	subs	r7, r6, #4
 801404c:	4682      	mov	sl, r0
 801404e:	4690      	mov	r8, r2
 8014050:	9301      	str	r3, [sp, #4]
 8014052:	f846 5c04 	str.w	r5, [r6, #-4]
 8014056:	46b9      	mov	r9, r7
 8014058:	463c      	mov	r4, r7
 801405a:	9502      	str	r5, [sp, #8]
 801405c:	46ab      	mov	fp, r5
 801405e:	784a      	ldrb	r2, [r1, #1]
 8014060:	1c4b      	adds	r3, r1, #1
 8014062:	9303      	str	r3, [sp, #12]
 8014064:	b342      	cbz	r2, 80140b8 <__hexnan+0x88>
 8014066:	4610      	mov	r0, r2
 8014068:	9105      	str	r1, [sp, #20]
 801406a:	9204      	str	r2, [sp, #16]
 801406c:	f7ff fd95 	bl	8013b9a <__hexdig_fun>
 8014070:	2800      	cmp	r0, #0
 8014072:	d151      	bne.n	8014118 <__hexnan+0xe8>
 8014074:	9a04      	ldr	r2, [sp, #16]
 8014076:	9905      	ldr	r1, [sp, #20]
 8014078:	2a20      	cmp	r2, #32
 801407a:	d818      	bhi.n	80140ae <__hexnan+0x7e>
 801407c:	9b02      	ldr	r3, [sp, #8]
 801407e:	459b      	cmp	fp, r3
 8014080:	dd13      	ble.n	80140aa <__hexnan+0x7a>
 8014082:	454c      	cmp	r4, r9
 8014084:	d206      	bcs.n	8014094 <__hexnan+0x64>
 8014086:	2d07      	cmp	r5, #7
 8014088:	dc04      	bgt.n	8014094 <__hexnan+0x64>
 801408a:	462a      	mov	r2, r5
 801408c:	4649      	mov	r1, r9
 801408e:	4620      	mov	r0, r4
 8014090:	f7ff ffa8 	bl	8013fe4 <L_shift>
 8014094:	4544      	cmp	r4, r8
 8014096:	d952      	bls.n	801413e <__hexnan+0x10e>
 8014098:	2300      	movs	r3, #0
 801409a:	f1a4 0904 	sub.w	r9, r4, #4
 801409e:	f844 3c04 	str.w	r3, [r4, #-4]
 80140a2:	f8cd b008 	str.w	fp, [sp, #8]
 80140a6:	464c      	mov	r4, r9
 80140a8:	461d      	mov	r5, r3
 80140aa:	9903      	ldr	r1, [sp, #12]
 80140ac:	e7d7      	b.n	801405e <__hexnan+0x2e>
 80140ae:	2a29      	cmp	r2, #41	@ 0x29
 80140b0:	d157      	bne.n	8014162 <__hexnan+0x132>
 80140b2:	3102      	adds	r1, #2
 80140b4:	f8ca 1000 	str.w	r1, [sl]
 80140b8:	f1bb 0f00 	cmp.w	fp, #0
 80140bc:	d051      	beq.n	8014162 <__hexnan+0x132>
 80140be:	454c      	cmp	r4, r9
 80140c0:	d206      	bcs.n	80140d0 <__hexnan+0xa0>
 80140c2:	2d07      	cmp	r5, #7
 80140c4:	dc04      	bgt.n	80140d0 <__hexnan+0xa0>
 80140c6:	462a      	mov	r2, r5
 80140c8:	4649      	mov	r1, r9
 80140ca:	4620      	mov	r0, r4
 80140cc:	f7ff ff8a 	bl	8013fe4 <L_shift>
 80140d0:	4544      	cmp	r4, r8
 80140d2:	d936      	bls.n	8014142 <__hexnan+0x112>
 80140d4:	f1a8 0204 	sub.w	r2, r8, #4
 80140d8:	4623      	mov	r3, r4
 80140da:	f853 1b04 	ldr.w	r1, [r3], #4
 80140de:	f842 1f04 	str.w	r1, [r2, #4]!
 80140e2:	429f      	cmp	r7, r3
 80140e4:	d2f9      	bcs.n	80140da <__hexnan+0xaa>
 80140e6:	1b3b      	subs	r3, r7, r4
 80140e8:	f023 0303 	bic.w	r3, r3, #3
 80140ec:	3304      	adds	r3, #4
 80140ee:	3401      	adds	r4, #1
 80140f0:	3e03      	subs	r6, #3
 80140f2:	42b4      	cmp	r4, r6
 80140f4:	bf88      	it	hi
 80140f6:	2304      	movhi	r3, #4
 80140f8:	4443      	add	r3, r8
 80140fa:	2200      	movs	r2, #0
 80140fc:	f843 2b04 	str.w	r2, [r3], #4
 8014100:	429f      	cmp	r7, r3
 8014102:	d2fb      	bcs.n	80140fc <__hexnan+0xcc>
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	b91b      	cbnz	r3, 8014110 <__hexnan+0xe0>
 8014108:	4547      	cmp	r7, r8
 801410a:	d128      	bne.n	801415e <__hexnan+0x12e>
 801410c:	2301      	movs	r3, #1
 801410e:	603b      	str	r3, [r7, #0]
 8014110:	2005      	movs	r0, #5
 8014112:	b007      	add	sp, #28
 8014114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014118:	3501      	adds	r5, #1
 801411a:	2d08      	cmp	r5, #8
 801411c:	f10b 0b01 	add.w	fp, fp, #1
 8014120:	dd06      	ble.n	8014130 <__hexnan+0x100>
 8014122:	4544      	cmp	r4, r8
 8014124:	d9c1      	bls.n	80140aa <__hexnan+0x7a>
 8014126:	2300      	movs	r3, #0
 8014128:	f844 3c04 	str.w	r3, [r4, #-4]
 801412c:	2501      	movs	r5, #1
 801412e:	3c04      	subs	r4, #4
 8014130:	6822      	ldr	r2, [r4, #0]
 8014132:	f000 000f 	and.w	r0, r0, #15
 8014136:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801413a:	6020      	str	r0, [r4, #0]
 801413c:	e7b5      	b.n	80140aa <__hexnan+0x7a>
 801413e:	2508      	movs	r5, #8
 8014140:	e7b3      	b.n	80140aa <__hexnan+0x7a>
 8014142:	9b01      	ldr	r3, [sp, #4]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d0dd      	beq.n	8014104 <__hexnan+0xd4>
 8014148:	f1c3 0320 	rsb	r3, r3, #32
 801414c:	f04f 32ff 	mov.w	r2, #4294967295
 8014150:	40da      	lsrs	r2, r3
 8014152:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014156:	4013      	ands	r3, r2
 8014158:	f846 3c04 	str.w	r3, [r6, #-4]
 801415c:	e7d2      	b.n	8014104 <__hexnan+0xd4>
 801415e:	3f04      	subs	r7, #4
 8014160:	e7d0      	b.n	8014104 <__hexnan+0xd4>
 8014162:	2004      	movs	r0, #4
 8014164:	e7d5      	b.n	8014112 <__hexnan+0xe2>

08014166 <__ascii_mbtowc>:
 8014166:	b082      	sub	sp, #8
 8014168:	b901      	cbnz	r1, 801416c <__ascii_mbtowc+0x6>
 801416a:	a901      	add	r1, sp, #4
 801416c:	b142      	cbz	r2, 8014180 <__ascii_mbtowc+0x1a>
 801416e:	b14b      	cbz	r3, 8014184 <__ascii_mbtowc+0x1e>
 8014170:	7813      	ldrb	r3, [r2, #0]
 8014172:	600b      	str	r3, [r1, #0]
 8014174:	7812      	ldrb	r2, [r2, #0]
 8014176:	1e10      	subs	r0, r2, #0
 8014178:	bf18      	it	ne
 801417a:	2001      	movne	r0, #1
 801417c:	b002      	add	sp, #8
 801417e:	4770      	bx	lr
 8014180:	4610      	mov	r0, r2
 8014182:	e7fb      	b.n	801417c <__ascii_mbtowc+0x16>
 8014184:	f06f 0001 	mvn.w	r0, #1
 8014188:	e7f8      	b.n	801417c <__ascii_mbtowc+0x16>

0801418a <_realloc_r>:
 801418a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801418e:	4680      	mov	r8, r0
 8014190:	4615      	mov	r5, r2
 8014192:	460c      	mov	r4, r1
 8014194:	b921      	cbnz	r1, 80141a0 <_realloc_r+0x16>
 8014196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801419a:	4611      	mov	r1, r2
 801419c:	f7fb bae8 	b.w	800f770 <_malloc_r>
 80141a0:	b92a      	cbnz	r2, 80141ae <_realloc_r+0x24>
 80141a2:	f7fd fb45 	bl	8011830 <_free_r>
 80141a6:	2400      	movs	r4, #0
 80141a8:	4620      	mov	r0, r4
 80141aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141ae:	f000 fab1 	bl	8014714 <_malloc_usable_size_r>
 80141b2:	4285      	cmp	r5, r0
 80141b4:	4606      	mov	r6, r0
 80141b6:	d802      	bhi.n	80141be <_realloc_r+0x34>
 80141b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80141bc:	d8f4      	bhi.n	80141a8 <_realloc_r+0x1e>
 80141be:	4629      	mov	r1, r5
 80141c0:	4640      	mov	r0, r8
 80141c2:	f7fb fad5 	bl	800f770 <_malloc_r>
 80141c6:	4607      	mov	r7, r0
 80141c8:	2800      	cmp	r0, #0
 80141ca:	d0ec      	beq.n	80141a6 <_realloc_r+0x1c>
 80141cc:	42b5      	cmp	r5, r6
 80141ce:	462a      	mov	r2, r5
 80141d0:	4621      	mov	r1, r4
 80141d2:	bf28      	it	cs
 80141d4:	4632      	movcs	r2, r6
 80141d6:	f7fc fcaa 	bl	8010b2e <memcpy>
 80141da:	4621      	mov	r1, r4
 80141dc:	4640      	mov	r0, r8
 80141de:	f7fd fb27 	bl	8011830 <_free_r>
 80141e2:	463c      	mov	r4, r7
 80141e4:	e7e0      	b.n	80141a8 <_realloc_r+0x1e>
	...

080141e8 <_strtoul_l.constprop.0>:
 80141e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141ec:	4e34      	ldr	r6, [pc, #208]	@ (80142c0 <_strtoul_l.constprop.0+0xd8>)
 80141ee:	4686      	mov	lr, r0
 80141f0:	460d      	mov	r5, r1
 80141f2:	4628      	mov	r0, r5
 80141f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141f8:	5d37      	ldrb	r7, [r6, r4]
 80141fa:	f017 0708 	ands.w	r7, r7, #8
 80141fe:	d1f8      	bne.n	80141f2 <_strtoul_l.constprop.0+0xa>
 8014200:	2c2d      	cmp	r4, #45	@ 0x2d
 8014202:	d12f      	bne.n	8014264 <_strtoul_l.constprop.0+0x7c>
 8014204:	782c      	ldrb	r4, [r5, #0]
 8014206:	2701      	movs	r7, #1
 8014208:	1c85      	adds	r5, r0, #2
 801420a:	f033 0010 	bics.w	r0, r3, #16
 801420e:	d109      	bne.n	8014224 <_strtoul_l.constprop.0+0x3c>
 8014210:	2c30      	cmp	r4, #48	@ 0x30
 8014212:	d12c      	bne.n	801426e <_strtoul_l.constprop.0+0x86>
 8014214:	7828      	ldrb	r0, [r5, #0]
 8014216:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801421a:	2858      	cmp	r0, #88	@ 0x58
 801421c:	d127      	bne.n	801426e <_strtoul_l.constprop.0+0x86>
 801421e:	786c      	ldrb	r4, [r5, #1]
 8014220:	2310      	movs	r3, #16
 8014222:	3502      	adds	r5, #2
 8014224:	f04f 38ff 	mov.w	r8, #4294967295
 8014228:	2600      	movs	r6, #0
 801422a:	fbb8 f8f3 	udiv	r8, r8, r3
 801422e:	fb03 f908 	mul.w	r9, r3, r8
 8014232:	ea6f 0909 	mvn.w	r9, r9
 8014236:	4630      	mov	r0, r6
 8014238:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801423c:	f1bc 0f09 	cmp.w	ip, #9
 8014240:	d81c      	bhi.n	801427c <_strtoul_l.constprop.0+0x94>
 8014242:	4664      	mov	r4, ip
 8014244:	42a3      	cmp	r3, r4
 8014246:	dd2a      	ble.n	801429e <_strtoul_l.constprop.0+0xb6>
 8014248:	f1b6 3fff 	cmp.w	r6, #4294967295
 801424c:	d007      	beq.n	801425e <_strtoul_l.constprop.0+0x76>
 801424e:	4580      	cmp	r8, r0
 8014250:	d322      	bcc.n	8014298 <_strtoul_l.constprop.0+0xb0>
 8014252:	d101      	bne.n	8014258 <_strtoul_l.constprop.0+0x70>
 8014254:	45a1      	cmp	r9, r4
 8014256:	db1f      	blt.n	8014298 <_strtoul_l.constprop.0+0xb0>
 8014258:	fb00 4003 	mla	r0, r0, r3, r4
 801425c:	2601      	movs	r6, #1
 801425e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014262:	e7e9      	b.n	8014238 <_strtoul_l.constprop.0+0x50>
 8014264:	2c2b      	cmp	r4, #43	@ 0x2b
 8014266:	bf04      	itt	eq
 8014268:	782c      	ldrbeq	r4, [r5, #0]
 801426a:	1c85      	addeq	r5, r0, #2
 801426c:	e7cd      	b.n	801420a <_strtoul_l.constprop.0+0x22>
 801426e:	2b00      	cmp	r3, #0
 8014270:	d1d8      	bne.n	8014224 <_strtoul_l.constprop.0+0x3c>
 8014272:	2c30      	cmp	r4, #48	@ 0x30
 8014274:	bf0c      	ite	eq
 8014276:	2308      	moveq	r3, #8
 8014278:	230a      	movne	r3, #10
 801427a:	e7d3      	b.n	8014224 <_strtoul_l.constprop.0+0x3c>
 801427c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8014280:	f1bc 0f19 	cmp.w	ip, #25
 8014284:	d801      	bhi.n	801428a <_strtoul_l.constprop.0+0xa2>
 8014286:	3c37      	subs	r4, #55	@ 0x37
 8014288:	e7dc      	b.n	8014244 <_strtoul_l.constprop.0+0x5c>
 801428a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801428e:	f1bc 0f19 	cmp.w	ip, #25
 8014292:	d804      	bhi.n	801429e <_strtoul_l.constprop.0+0xb6>
 8014294:	3c57      	subs	r4, #87	@ 0x57
 8014296:	e7d5      	b.n	8014244 <_strtoul_l.constprop.0+0x5c>
 8014298:	f04f 36ff 	mov.w	r6, #4294967295
 801429c:	e7df      	b.n	801425e <_strtoul_l.constprop.0+0x76>
 801429e:	1c73      	adds	r3, r6, #1
 80142a0:	d106      	bne.n	80142b0 <_strtoul_l.constprop.0+0xc8>
 80142a2:	2322      	movs	r3, #34	@ 0x22
 80142a4:	f8ce 3000 	str.w	r3, [lr]
 80142a8:	4630      	mov	r0, r6
 80142aa:	b932      	cbnz	r2, 80142ba <_strtoul_l.constprop.0+0xd2>
 80142ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142b0:	b107      	cbz	r7, 80142b4 <_strtoul_l.constprop.0+0xcc>
 80142b2:	4240      	negs	r0, r0
 80142b4:	2a00      	cmp	r2, #0
 80142b6:	d0f9      	beq.n	80142ac <_strtoul_l.constprop.0+0xc4>
 80142b8:	b106      	cbz	r6, 80142bc <_strtoul_l.constprop.0+0xd4>
 80142ba:	1e69      	subs	r1, r5, #1
 80142bc:	6011      	str	r1, [r2, #0]
 80142be:	e7f5      	b.n	80142ac <_strtoul_l.constprop.0+0xc4>
 80142c0:	08015e99 	.word	0x08015e99

080142c4 <_strtoul_r>:
 80142c4:	f7ff bf90 	b.w	80141e8 <_strtoul_l.constprop.0>

080142c8 <__ascii_wctomb>:
 80142c8:	4603      	mov	r3, r0
 80142ca:	4608      	mov	r0, r1
 80142cc:	b141      	cbz	r1, 80142e0 <__ascii_wctomb+0x18>
 80142ce:	2aff      	cmp	r2, #255	@ 0xff
 80142d0:	d904      	bls.n	80142dc <__ascii_wctomb+0x14>
 80142d2:	228a      	movs	r2, #138	@ 0x8a
 80142d4:	601a      	str	r2, [r3, #0]
 80142d6:	f04f 30ff 	mov.w	r0, #4294967295
 80142da:	4770      	bx	lr
 80142dc:	700a      	strb	r2, [r1, #0]
 80142de:	2001      	movs	r0, #1
 80142e0:	4770      	bx	lr

080142e2 <__sfputc_r>:
 80142e2:	6893      	ldr	r3, [r2, #8]
 80142e4:	3b01      	subs	r3, #1
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	b410      	push	{r4}
 80142ea:	6093      	str	r3, [r2, #8]
 80142ec:	da08      	bge.n	8014300 <__sfputc_r+0x1e>
 80142ee:	6994      	ldr	r4, [r2, #24]
 80142f0:	42a3      	cmp	r3, r4
 80142f2:	db01      	blt.n	80142f8 <__sfputc_r+0x16>
 80142f4:	290a      	cmp	r1, #10
 80142f6:	d103      	bne.n	8014300 <__sfputc_r+0x1e>
 80142f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142fc:	f000 b932 	b.w	8014564 <__swbuf_r>
 8014300:	6813      	ldr	r3, [r2, #0]
 8014302:	1c58      	adds	r0, r3, #1
 8014304:	6010      	str	r0, [r2, #0]
 8014306:	7019      	strb	r1, [r3, #0]
 8014308:	4608      	mov	r0, r1
 801430a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801430e:	4770      	bx	lr

08014310 <__sfputs_r>:
 8014310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014312:	4606      	mov	r6, r0
 8014314:	460f      	mov	r7, r1
 8014316:	4614      	mov	r4, r2
 8014318:	18d5      	adds	r5, r2, r3
 801431a:	42ac      	cmp	r4, r5
 801431c:	d101      	bne.n	8014322 <__sfputs_r+0x12>
 801431e:	2000      	movs	r0, #0
 8014320:	e007      	b.n	8014332 <__sfputs_r+0x22>
 8014322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014326:	463a      	mov	r2, r7
 8014328:	4630      	mov	r0, r6
 801432a:	f7ff ffda 	bl	80142e2 <__sfputc_r>
 801432e:	1c43      	adds	r3, r0, #1
 8014330:	d1f3      	bne.n	801431a <__sfputs_r+0xa>
 8014332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014334 <_vfiprintf_r>:
 8014334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014338:	460d      	mov	r5, r1
 801433a:	b09d      	sub	sp, #116	@ 0x74
 801433c:	4614      	mov	r4, r2
 801433e:	4698      	mov	r8, r3
 8014340:	4606      	mov	r6, r0
 8014342:	b118      	cbz	r0, 801434c <_vfiprintf_r+0x18>
 8014344:	6a03      	ldr	r3, [r0, #32]
 8014346:	b90b      	cbnz	r3, 801434c <_vfiprintf_r+0x18>
 8014348:	f7fc f9d8 	bl	80106fc <__sinit>
 801434c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801434e:	07d9      	lsls	r1, r3, #31
 8014350:	d405      	bmi.n	801435e <_vfiprintf_r+0x2a>
 8014352:	89ab      	ldrh	r3, [r5, #12]
 8014354:	059a      	lsls	r2, r3, #22
 8014356:	d402      	bmi.n	801435e <_vfiprintf_r+0x2a>
 8014358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801435a:	f7fc fbe6 	bl	8010b2a <__retarget_lock_acquire_recursive>
 801435e:	89ab      	ldrh	r3, [r5, #12]
 8014360:	071b      	lsls	r3, r3, #28
 8014362:	d501      	bpl.n	8014368 <_vfiprintf_r+0x34>
 8014364:	692b      	ldr	r3, [r5, #16]
 8014366:	b99b      	cbnz	r3, 8014390 <_vfiprintf_r+0x5c>
 8014368:	4629      	mov	r1, r5
 801436a:	4630      	mov	r0, r6
 801436c:	f000 f938 	bl	80145e0 <__swsetup_r>
 8014370:	b170      	cbz	r0, 8014390 <_vfiprintf_r+0x5c>
 8014372:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014374:	07dc      	lsls	r4, r3, #31
 8014376:	d504      	bpl.n	8014382 <_vfiprintf_r+0x4e>
 8014378:	f04f 30ff 	mov.w	r0, #4294967295
 801437c:	b01d      	add	sp, #116	@ 0x74
 801437e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014382:	89ab      	ldrh	r3, [r5, #12]
 8014384:	0598      	lsls	r0, r3, #22
 8014386:	d4f7      	bmi.n	8014378 <_vfiprintf_r+0x44>
 8014388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801438a:	f7fc fbcf 	bl	8010b2c <__retarget_lock_release_recursive>
 801438e:	e7f3      	b.n	8014378 <_vfiprintf_r+0x44>
 8014390:	2300      	movs	r3, #0
 8014392:	9309      	str	r3, [sp, #36]	@ 0x24
 8014394:	2320      	movs	r3, #32
 8014396:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801439a:	f8cd 800c 	str.w	r8, [sp, #12]
 801439e:	2330      	movs	r3, #48	@ 0x30
 80143a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014550 <_vfiprintf_r+0x21c>
 80143a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80143a8:	f04f 0901 	mov.w	r9, #1
 80143ac:	4623      	mov	r3, r4
 80143ae:	469a      	mov	sl, r3
 80143b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143b4:	b10a      	cbz	r2, 80143ba <_vfiprintf_r+0x86>
 80143b6:	2a25      	cmp	r2, #37	@ 0x25
 80143b8:	d1f9      	bne.n	80143ae <_vfiprintf_r+0x7a>
 80143ba:	ebba 0b04 	subs.w	fp, sl, r4
 80143be:	d00b      	beq.n	80143d8 <_vfiprintf_r+0xa4>
 80143c0:	465b      	mov	r3, fp
 80143c2:	4622      	mov	r2, r4
 80143c4:	4629      	mov	r1, r5
 80143c6:	4630      	mov	r0, r6
 80143c8:	f7ff ffa2 	bl	8014310 <__sfputs_r>
 80143cc:	3001      	adds	r0, #1
 80143ce:	f000 80a7 	beq.w	8014520 <_vfiprintf_r+0x1ec>
 80143d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80143d4:	445a      	add	r2, fp
 80143d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80143d8:	f89a 3000 	ldrb.w	r3, [sl]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	f000 809f 	beq.w	8014520 <_vfiprintf_r+0x1ec>
 80143e2:	2300      	movs	r3, #0
 80143e4:	f04f 32ff 	mov.w	r2, #4294967295
 80143e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143ec:	f10a 0a01 	add.w	sl, sl, #1
 80143f0:	9304      	str	r3, [sp, #16]
 80143f2:	9307      	str	r3, [sp, #28]
 80143f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80143f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80143fa:	4654      	mov	r4, sl
 80143fc:	2205      	movs	r2, #5
 80143fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014402:	4853      	ldr	r0, [pc, #332]	@ (8014550 <_vfiprintf_r+0x21c>)
 8014404:	f7eb fef4 	bl	80001f0 <memchr>
 8014408:	9a04      	ldr	r2, [sp, #16]
 801440a:	b9d8      	cbnz	r0, 8014444 <_vfiprintf_r+0x110>
 801440c:	06d1      	lsls	r1, r2, #27
 801440e:	bf44      	itt	mi
 8014410:	2320      	movmi	r3, #32
 8014412:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014416:	0713      	lsls	r3, r2, #28
 8014418:	bf44      	itt	mi
 801441a:	232b      	movmi	r3, #43	@ 0x2b
 801441c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014420:	f89a 3000 	ldrb.w	r3, [sl]
 8014424:	2b2a      	cmp	r3, #42	@ 0x2a
 8014426:	d015      	beq.n	8014454 <_vfiprintf_r+0x120>
 8014428:	9a07      	ldr	r2, [sp, #28]
 801442a:	4654      	mov	r4, sl
 801442c:	2000      	movs	r0, #0
 801442e:	f04f 0c0a 	mov.w	ip, #10
 8014432:	4621      	mov	r1, r4
 8014434:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014438:	3b30      	subs	r3, #48	@ 0x30
 801443a:	2b09      	cmp	r3, #9
 801443c:	d94b      	bls.n	80144d6 <_vfiprintf_r+0x1a2>
 801443e:	b1b0      	cbz	r0, 801446e <_vfiprintf_r+0x13a>
 8014440:	9207      	str	r2, [sp, #28]
 8014442:	e014      	b.n	801446e <_vfiprintf_r+0x13a>
 8014444:	eba0 0308 	sub.w	r3, r0, r8
 8014448:	fa09 f303 	lsl.w	r3, r9, r3
 801444c:	4313      	orrs	r3, r2
 801444e:	9304      	str	r3, [sp, #16]
 8014450:	46a2      	mov	sl, r4
 8014452:	e7d2      	b.n	80143fa <_vfiprintf_r+0xc6>
 8014454:	9b03      	ldr	r3, [sp, #12]
 8014456:	1d19      	adds	r1, r3, #4
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	9103      	str	r1, [sp, #12]
 801445c:	2b00      	cmp	r3, #0
 801445e:	bfbb      	ittet	lt
 8014460:	425b      	neglt	r3, r3
 8014462:	f042 0202 	orrlt.w	r2, r2, #2
 8014466:	9307      	strge	r3, [sp, #28]
 8014468:	9307      	strlt	r3, [sp, #28]
 801446a:	bfb8      	it	lt
 801446c:	9204      	strlt	r2, [sp, #16]
 801446e:	7823      	ldrb	r3, [r4, #0]
 8014470:	2b2e      	cmp	r3, #46	@ 0x2e
 8014472:	d10a      	bne.n	801448a <_vfiprintf_r+0x156>
 8014474:	7863      	ldrb	r3, [r4, #1]
 8014476:	2b2a      	cmp	r3, #42	@ 0x2a
 8014478:	d132      	bne.n	80144e0 <_vfiprintf_r+0x1ac>
 801447a:	9b03      	ldr	r3, [sp, #12]
 801447c:	1d1a      	adds	r2, r3, #4
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	9203      	str	r2, [sp, #12]
 8014482:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014486:	3402      	adds	r4, #2
 8014488:	9305      	str	r3, [sp, #20]
 801448a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014560 <_vfiprintf_r+0x22c>
 801448e:	7821      	ldrb	r1, [r4, #0]
 8014490:	2203      	movs	r2, #3
 8014492:	4650      	mov	r0, sl
 8014494:	f7eb feac 	bl	80001f0 <memchr>
 8014498:	b138      	cbz	r0, 80144aa <_vfiprintf_r+0x176>
 801449a:	9b04      	ldr	r3, [sp, #16]
 801449c:	eba0 000a 	sub.w	r0, r0, sl
 80144a0:	2240      	movs	r2, #64	@ 0x40
 80144a2:	4082      	lsls	r2, r0
 80144a4:	4313      	orrs	r3, r2
 80144a6:	3401      	adds	r4, #1
 80144a8:	9304      	str	r3, [sp, #16]
 80144aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144ae:	4829      	ldr	r0, [pc, #164]	@ (8014554 <_vfiprintf_r+0x220>)
 80144b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80144b4:	2206      	movs	r2, #6
 80144b6:	f7eb fe9b 	bl	80001f0 <memchr>
 80144ba:	2800      	cmp	r0, #0
 80144bc:	d03f      	beq.n	801453e <_vfiprintf_r+0x20a>
 80144be:	4b26      	ldr	r3, [pc, #152]	@ (8014558 <_vfiprintf_r+0x224>)
 80144c0:	bb1b      	cbnz	r3, 801450a <_vfiprintf_r+0x1d6>
 80144c2:	9b03      	ldr	r3, [sp, #12]
 80144c4:	3307      	adds	r3, #7
 80144c6:	f023 0307 	bic.w	r3, r3, #7
 80144ca:	3308      	adds	r3, #8
 80144cc:	9303      	str	r3, [sp, #12]
 80144ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144d0:	443b      	add	r3, r7
 80144d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80144d4:	e76a      	b.n	80143ac <_vfiprintf_r+0x78>
 80144d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80144da:	460c      	mov	r4, r1
 80144dc:	2001      	movs	r0, #1
 80144de:	e7a8      	b.n	8014432 <_vfiprintf_r+0xfe>
 80144e0:	2300      	movs	r3, #0
 80144e2:	3401      	adds	r4, #1
 80144e4:	9305      	str	r3, [sp, #20]
 80144e6:	4619      	mov	r1, r3
 80144e8:	f04f 0c0a 	mov.w	ip, #10
 80144ec:	4620      	mov	r0, r4
 80144ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144f2:	3a30      	subs	r2, #48	@ 0x30
 80144f4:	2a09      	cmp	r2, #9
 80144f6:	d903      	bls.n	8014500 <_vfiprintf_r+0x1cc>
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d0c6      	beq.n	801448a <_vfiprintf_r+0x156>
 80144fc:	9105      	str	r1, [sp, #20]
 80144fe:	e7c4      	b.n	801448a <_vfiprintf_r+0x156>
 8014500:	fb0c 2101 	mla	r1, ip, r1, r2
 8014504:	4604      	mov	r4, r0
 8014506:	2301      	movs	r3, #1
 8014508:	e7f0      	b.n	80144ec <_vfiprintf_r+0x1b8>
 801450a:	ab03      	add	r3, sp, #12
 801450c:	9300      	str	r3, [sp, #0]
 801450e:	462a      	mov	r2, r5
 8014510:	4b12      	ldr	r3, [pc, #72]	@ (801455c <_vfiprintf_r+0x228>)
 8014512:	a904      	add	r1, sp, #16
 8014514:	4630      	mov	r0, r6
 8014516:	f7fb fa99 	bl	800fa4c <_printf_float>
 801451a:	4607      	mov	r7, r0
 801451c:	1c78      	adds	r0, r7, #1
 801451e:	d1d6      	bne.n	80144ce <_vfiprintf_r+0x19a>
 8014520:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014522:	07d9      	lsls	r1, r3, #31
 8014524:	d405      	bmi.n	8014532 <_vfiprintf_r+0x1fe>
 8014526:	89ab      	ldrh	r3, [r5, #12]
 8014528:	059a      	lsls	r2, r3, #22
 801452a:	d402      	bmi.n	8014532 <_vfiprintf_r+0x1fe>
 801452c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801452e:	f7fc fafd 	bl	8010b2c <__retarget_lock_release_recursive>
 8014532:	89ab      	ldrh	r3, [r5, #12]
 8014534:	065b      	lsls	r3, r3, #25
 8014536:	f53f af1f 	bmi.w	8014378 <_vfiprintf_r+0x44>
 801453a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801453c:	e71e      	b.n	801437c <_vfiprintf_r+0x48>
 801453e:	ab03      	add	r3, sp, #12
 8014540:	9300      	str	r3, [sp, #0]
 8014542:	462a      	mov	r2, r5
 8014544:	4b05      	ldr	r3, [pc, #20]	@ (801455c <_vfiprintf_r+0x228>)
 8014546:	a904      	add	r1, sp, #16
 8014548:	4630      	mov	r0, r6
 801454a:	f7fb fd17 	bl	800ff7c <_printf_i>
 801454e:	e7e4      	b.n	801451a <_vfiprintf_r+0x1e6>
 8014550:	08015f99 	.word	0x08015f99
 8014554:	08015fa3 	.word	0x08015fa3
 8014558:	0800fa4d 	.word	0x0800fa4d
 801455c:	08014311 	.word	0x08014311
 8014560:	08015f9f 	.word	0x08015f9f

08014564 <__swbuf_r>:
 8014564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014566:	460e      	mov	r6, r1
 8014568:	4614      	mov	r4, r2
 801456a:	4605      	mov	r5, r0
 801456c:	b118      	cbz	r0, 8014576 <__swbuf_r+0x12>
 801456e:	6a03      	ldr	r3, [r0, #32]
 8014570:	b90b      	cbnz	r3, 8014576 <__swbuf_r+0x12>
 8014572:	f7fc f8c3 	bl	80106fc <__sinit>
 8014576:	69a3      	ldr	r3, [r4, #24]
 8014578:	60a3      	str	r3, [r4, #8]
 801457a:	89a3      	ldrh	r3, [r4, #12]
 801457c:	071a      	lsls	r2, r3, #28
 801457e:	d501      	bpl.n	8014584 <__swbuf_r+0x20>
 8014580:	6923      	ldr	r3, [r4, #16]
 8014582:	b943      	cbnz	r3, 8014596 <__swbuf_r+0x32>
 8014584:	4621      	mov	r1, r4
 8014586:	4628      	mov	r0, r5
 8014588:	f000 f82a 	bl	80145e0 <__swsetup_r>
 801458c:	b118      	cbz	r0, 8014596 <__swbuf_r+0x32>
 801458e:	f04f 37ff 	mov.w	r7, #4294967295
 8014592:	4638      	mov	r0, r7
 8014594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014596:	6823      	ldr	r3, [r4, #0]
 8014598:	6922      	ldr	r2, [r4, #16]
 801459a:	1a98      	subs	r0, r3, r2
 801459c:	6963      	ldr	r3, [r4, #20]
 801459e:	b2f6      	uxtb	r6, r6
 80145a0:	4283      	cmp	r3, r0
 80145a2:	4637      	mov	r7, r6
 80145a4:	dc05      	bgt.n	80145b2 <__swbuf_r+0x4e>
 80145a6:	4621      	mov	r1, r4
 80145a8:	4628      	mov	r0, r5
 80145aa:	f7ff f9b9 	bl	8013920 <_fflush_r>
 80145ae:	2800      	cmp	r0, #0
 80145b0:	d1ed      	bne.n	801458e <__swbuf_r+0x2a>
 80145b2:	68a3      	ldr	r3, [r4, #8]
 80145b4:	3b01      	subs	r3, #1
 80145b6:	60a3      	str	r3, [r4, #8]
 80145b8:	6823      	ldr	r3, [r4, #0]
 80145ba:	1c5a      	adds	r2, r3, #1
 80145bc:	6022      	str	r2, [r4, #0]
 80145be:	701e      	strb	r6, [r3, #0]
 80145c0:	6962      	ldr	r2, [r4, #20]
 80145c2:	1c43      	adds	r3, r0, #1
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d004      	beq.n	80145d2 <__swbuf_r+0x6e>
 80145c8:	89a3      	ldrh	r3, [r4, #12]
 80145ca:	07db      	lsls	r3, r3, #31
 80145cc:	d5e1      	bpl.n	8014592 <__swbuf_r+0x2e>
 80145ce:	2e0a      	cmp	r6, #10
 80145d0:	d1df      	bne.n	8014592 <__swbuf_r+0x2e>
 80145d2:	4621      	mov	r1, r4
 80145d4:	4628      	mov	r0, r5
 80145d6:	f7ff f9a3 	bl	8013920 <_fflush_r>
 80145da:	2800      	cmp	r0, #0
 80145dc:	d0d9      	beq.n	8014592 <__swbuf_r+0x2e>
 80145de:	e7d6      	b.n	801458e <__swbuf_r+0x2a>

080145e0 <__swsetup_r>:
 80145e0:	b538      	push	{r3, r4, r5, lr}
 80145e2:	4b29      	ldr	r3, [pc, #164]	@ (8014688 <__swsetup_r+0xa8>)
 80145e4:	4605      	mov	r5, r0
 80145e6:	6818      	ldr	r0, [r3, #0]
 80145e8:	460c      	mov	r4, r1
 80145ea:	b118      	cbz	r0, 80145f4 <__swsetup_r+0x14>
 80145ec:	6a03      	ldr	r3, [r0, #32]
 80145ee:	b90b      	cbnz	r3, 80145f4 <__swsetup_r+0x14>
 80145f0:	f7fc f884 	bl	80106fc <__sinit>
 80145f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145f8:	0719      	lsls	r1, r3, #28
 80145fa:	d422      	bmi.n	8014642 <__swsetup_r+0x62>
 80145fc:	06da      	lsls	r2, r3, #27
 80145fe:	d407      	bmi.n	8014610 <__swsetup_r+0x30>
 8014600:	2209      	movs	r2, #9
 8014602:	602a      	str	r2, [r5, #0]
 8014604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014608:	81a3      	strh	r3, [r4, #12]
 801460a:	f04f 30ff 	mov.w	r0, #4294967295
 801460e:	e033      	b.n	8014678 <__swsetup_r+0x98>
 8014610:	0758      	lsls	r0, r3, #29
 8014612:	d512      	bpl.n	801463a <__swsetup_r+0x5a>
 8014614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014616:	b141      	cbz	r1, 801462a <__swsetup_r+0x4a>
 8014618:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801461c:	4299      	cmp	r1, r3
 801461e:	d002      	beq.n	8014626 <__swsetup_r+0x46>
 8014620:	4628      	mov	r0, r5
 8014622:	f7fd f905 	bl	8011830 <_free_r>
 8014626:	2300      	movs	r3, #0
 8014628:	6363      	str	r3, [r4, #52]	@ 0x34
 801462a:	89a3      	ldrh	r3, [r4, #12]
 801462c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014630:	81a3      	strh	r3, [r4, #12]
 8014632:	2300      	movs	r3, #0
 8014634:	6063      	str	r3, [r4, #4]
 8014636:	6923      	ldr	r3, [r4, #16]
 8014638:	6023      	str	r3, [r4, #0]
 801463a:	89a3      	ldrh	r3, [r4, #12]
 801463c:	f043 0308 	orr.w	r3, r3, #8
 8014640:	81a3      	strh	r3, [r4, #12]
 8014642:	6923      	ldr	r3, [r4, #16]
 8014644:	b94b      	cbnz	r3, 801465a <__swsetup_r+0x7a>
 8014646:	89a3      	ldrh	r3, [r4, #12]
 8014648:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801464c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014650:	d003      	beq.n	801465a <__swsetup_r+0x7a>
 8014652:	4621      	mov	r1, r4
 8014654:	4628      	mov	r0, r5
 8014656:	f000 f88b 	bl	8014770 <__smakebuf_r>
 801465a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801465e:	f013 0201 	ands.w	r2, r3, #1
 8014662:	d00a      	beq.n	801467a <__swsetup_r+0x9a>
 8014664:	2200      	movs	r2, #0
 8014666:	60a2      	str	r2, [r4, #8]
 8014668:	6962      	ldr	r2, [r4, #20]
 801466a:	4252      	negs	r2, r2
 801466c:	61a2      	str	r2, [r4, #24]
 801466e:	6922      	ldr	r2, [r4, #16]
 8014670:	b942      	cbnz	r2, 8014684 <__swsetup_r+0xa4>
 8014672:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014676:	d1c5      	bne.n	8014604 <__swsetup_r+0x24>
 8014678:	bd38      	pop	{r3, r4, r5, pc}
 801467a:	0799      	lsls	r1, r3, #30
 801467c:	bf58      	it	pl
 801467e:	6962      	ldrpl	r2, [r4, #20]
 8014680:	60a2      	str	r2, [r4, #8]
 8014682:	e7f4      	b.n	801466e <__swsetup_r+0x8e>
 8014684:	2000      	movs	r0, #0
 8014686:	e7f7      	b.n	8014678 <__swsetup_r+0x98>
 8014688:	200000c4 	.word	0x200000c4

0801468c <_raise_r>:
 801468c:	291f      	cmp	r1, #31
 801468e:	b538      	push	{r3, r4, r5, lr}
 8014690:	4605      	mov	r5, r0
 8014692:	460c      	mov	r4, r1
 8014694:	d904      	bls.n	80146a0 <_raise_r+0x14>
 8014696:	2316      	movs	r3, #22
 8014698:	6003      	str	r3, [r0, #0]
 801469a:	f04f 30ff 	mov.w	r0, #4294967295
 801469e:	bd38      	pop	{r3, r4, r5, pc}
 80146a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80146a2:	b112      	cbz	r2, 80146aa <_raise_r+0x1e>
 80146a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80146a8:	b94b      	cbnz	r3, 80146be <_raise_r+0x32>
 80146aa:	4628      	mov	r0, r5
 80146ac:	f000 f830 	bl	8014710 <_getpid_r>
 80146b0:	4622      	mov	r2, r4
 80146b2:	4601      	mov	r1, r0
 80146b4:	4628      	mov	r0, r5
 80146b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80146ba:	f000 b817 	b.w	80146ec <_kill_r>
 80146be:	2b01      	cmp	r3, #1
 80146c0:	d00a      	beq.n	80146d8 <_raise_r+0x4c>
 80146c2:	1c59      	adds	r1, r3, #1
 80146c4:	d103      	bne.n	80146ce <_raise_r+0x42>
 80146c6:	2316      	movs	r3, #22
 80146c8:	6003      	str	r3, [r0, #0]
 80146ca:	2001      	movs	r0, #1
 80146cc:	e7e7      	b.n	801469e <_raise_r+0x12>
 80146ce:	2100      	movs	r1, #0
 80146d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80146d4:	4620      	mov	r0, r4
 80146d6:	4798      	blx	r3
 80146d8:	2000      	movs	r0, #0
 80146da:	e7e0      	b.n	801469e <_raise_r+0x12>

080146dc <raise>:
 80146dc:	4b02      	ldr	r3, [pc, #8]	@ (80146e8 <raise+0xc>)
 80146de:	4601      	mov	r1, r0
 80146e0:	6818      	ldr	r0, [r3, #0]
 80146e2:	f7ff bfd3 	b.w	801468c <_raise_r>
 80146e6:	bf00      	nop
 80146e8:	200000c4 	.word	0x200000c4

080146ec <_kill_r>:
 80146ec:	b538      	push	{r3, r4, r5, lr}
 80146ee:	4d07      	ldr	r5, [pc, #28]	@ (801470c <_kill_r+0x20>)
 80146f0:	2300      	movs	r3, #0
 80146f2:	4604      	mov	r4, r0
 80146f4:	4608      	mov	r0, r1
 80146f6:	4611      	mov	r1, r2
 80146f8:	602b      	str	r3, [r5, #0]
 80146fa:	f7f0 fd47 	bl	800518c <_kill>
 80146fe:	1c43      	adds	r3, r0, #1
 8014700:	d102      	bne.n	8014708 <_kill_r+0x1c>
 8014702:	682b      	ldr	r3, [r5, #0]
 8014704:	b103      	cbz	r3, 8014708 <_kill_r+0x1c>
 8014706:	6023      	str	r3, [r4, #0]
 8014708:	bd38      	pop	{r3, r4, r5, pc}
 801470a:	bf00      	nop
 801470c:	20005728 	.word	0x20005728

08014710 <_getpid_r>:
 8014710:	f7f0 bd34 	b.w	800517c <_getpid>

08014714 <_malloc_usable_size_r>:
 8014714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014718:	1f18      	subs	r0, r3, #4
 801471a:	2b00      	cmp	r3, #0
 801471c:	bfbc      	itt	lt
 801471e:	580b      	ldrlt	r3, [r1, r0]
 8014720:	18c0      	addlt	r0, r0, r3
 8014722:	4770      	bx	lr

08014724 <__swhatbuf_r>:
 8014724:	b570      	push	{r4, r5, r6, lr}
 8014726:	460c      	mov	r4, r1
 8014728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801472c:	2900      	cmp	r1, #0
 801472e:	b096      	sub	sp, #88	@ 0x58
 8014730:	4615      	mov	r5, r2
 8014732:	461e      	mov	r6, r3
 8014734:	da0d      	bge.n	8014752 <__swhatbuf_r+0x2e>
 8014736:	89a3      	ldrh	r3, [r4, #12]
 8014738:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801473c:	f04f 0100 	mov.w	r1, #0
 8014740:	bf14      	ite	ne
 8014742:	2340      	movne	r3, #64	@ 0x40
 8014744:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014748:	2000      	movs	r0, #0
 801474a:	6031      	str	r1, [r6, #0]
 801474c:	602b      	str	r3, [r5, #0]
 801474e:	b016      	add	sp, #88	@ 0x58
 8014750:	bd70      	pop	{r4, r5, r6, pc}
 8014752:	466a      	mov	r2, sp
 8014754:	f000 f848 	bl	80147e8 <_fstat_r>
 8014758:	2800      	cmp	r0, #0
 801475a:	dbec      	blt.n	8014736 <__swhatbuf_r+0x12>
 801475c:	9901      	ldr	r1, [sp, #4]
 801475e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014762:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014766:	4259      	negs	r1, r3
 8014768:	4159      	adcs	r1, r3
 801476a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801476e:	e7eb      	b.n	8014748 <__swhatbuf_r+0x24>

08014770 <__smakebuf_r>:
 8014770:	898b      	ldrh	r3, [r1, #12]
 8014772:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014774:	079d      	lsls	r5, r3, #30
 8014776:	4606      	mov	r6, r0
 8014778:	460c      	mov	r4, r1
 801477a:	d507      	bpl.n	801478c <__smakebuf_r+0x1c>
 801477c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014780:	6023      	str	r3, [r4, #0]
 8014782:	6123      	str	r3, [r4, #16]
 8014784:	2301      	movs	r3, #1
 8014786:	6163      	str	r3, [r4, #20]
 8014788:	b003      	add	sp, #12
 801478a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801478c:	ab01      	add	r3, sp, #4
 801478e:	466a      	mov	r2, sp
 8014790:	f7ff ffc8 	bl	8014724 <__swhatbuf_r>
 8014794:	9f00      	ldr	r7, [sp, #0]
 8014796:	4605      	mov	r5, r0
 8014798:	4639      	mov	r1, r7
 801479a:	4630      	mov	r0, r6
 801479c:	f7fa ffe8 	bl	800f770 <_malloc_r>
 80147a0:	b948      	cbnz	r0, 80147b6 <__smakebuf_r+0x46>
 80147a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147a6:	059a      	lsls	r2, r3, #22
 80147a8:	d4ee      	bmi.n	8014788 <__smakebuf_r+0x18>
 80147aa:	f023 0303 	bic.w	r3, r3, #3
 80147ae:	f043 0302 	orr.w	r3, r3, #2
 80147b2:	81a3      	strh	r3, [r4, #12]
 80147b4:	e7e2      	b.n	801477c <__smakebuf_r+0xc>
 80147b6:	89a3      	ldrh	r3, [r4, #12]
 80147b8:	6020      	str	r0, [r4, #0]
 80147ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80147be:	81a3      	strh	r3, [r4, #12]
 80147c0:	9b01      	ldr	r3, [sp, #4]
 80147c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80147c6:	b15b      	cbz	r3, 80147e0 <__smakebuf_r+0x70>
 80147c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147cc:	4630      	mov	r0, r6
 80147ce:	f000 f81d 	bl	801480c <_isatty_r>
 80147d2:	b128      	cbz	r0, 80147e0 <__smakebuf_r+0x70>
 80147d4:	89a3      	ldrh	r3, [r4, #12]
 80147d6:	f023 0303 	bic.w	r3, r3, #3
 80147da:	f043 0301 	orr.w	r3, r3, #1
 80147de:	81a3      	strh	r3, [r4, #12]
 80147e0:	89a3      	ldrh	r3, [r4, #12]
 80147e2:	431d      	orrs	r5, r3
 80147e4:	81a5      	strh	r5, [r4, #12]
 80147e6:	e7cf      	b.n	8014788 <__smakebuf_r+0x18>

080147e8 <_fstat_r>:
 80147e8:	b538      	push	{r3, r4, r5, lr}
 80147ea:	4d07      	ldr	r5, [pc, #28]	@ (8014808 <_fstat_r+0x20>)
 80147ec:	2300      	movs	r3, #0
 80147ee:	4604      	mov	r4, r0
 80147f0:	4608      	mov	r0, r1
 80147f2:	4611      	mov	r1, r2
 80147f4:	602b      	str	r3, [r5, #0]
 80147f6:	f7f0 fd0d 	bl	8005214 <_fstat>
 80147fa:	1c43      	adds	r3, r0, #1
 80147fc:	d102      	bne.n	8014804 <_fstat_r+0x1c>
 80147fe:	682b      	ldr	r3, [r5, #0]
 8014800:	b103      	cbz	r3, 8014804 <_fstat_r+0x1c>
 8014802:	6023      	str	r3, [r4, #0]
 8014804:	bd38      	pop	{r3, r4, r5, pc}
 8014806:	bf00      	nop
 8014808:	20005728 	.word	0x20005728

0801480c <_isatty_r>:
 801480c:	b538      	push	{r3, r4, r5, lr}
 801480e:	4d06      	ldr	r5, [pc, #24]	@ (8014828 <_isatty_r+0x1c>)
 8014810:	2300      	movs	r3, #0
 8014812:	4604      	mov	r4, r0
 8014814:	4608      	mov	r0, r1
 8014816:	602b      	str	r3, [r5, #0]
 8014818:	f7f0 fd0c 	bl	8005234 <_isatty>
 801481c:	1c43      	adds	r3, r0, #1
 801481e:	d102      	bne.n	8014826 <_isatty_r+0x1a>
 8014820:	682b      	ldr	r3, [r5, #0]
 8014822:	b103      	cbz	r3, 8014826 <_isatty_r+0x1a>
 8014824:	6023      	str	r3, [r4, #0]
 8014826:	bd38      	pop	{r3, r4, r5, pc}
 8014828:	20005728 	.word	0x20005728

0801482c <pow>:
 801482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801482e:	ed2d 8b02 	vpush	{d8}
 8014832:	eeb0 8a40 	vmov.f32	s16, s0
 8014836:	eef0 8a60 	vmov.f32	s17, s1
 801483a:	ec55 4b11 	vmov	r4, r5, d1
 801483e:	f000 f977 	bl	8014b30 <__ieee754_pow>
 8014842:	4622      	mov	r2, r4
 8014844:	462b      	mov	r3, r5
 8014846:	4620      	mov	r0, r4
 8014848:	4629      	mov	r1, r5
 801484a:	ec57 6b10 	vmov	r6, r7, d0
 801484e:	f7ec f97d 	bl	8000b4c <__aeabi_dcmpun>
 8014852:	2800      	cmp	r0, #0
 8014854:	d13b      	bne.n	80148ce <pow+0xa2>
 8014856:	ec51 0b18 	vmov	r0, r1, d8
 801485a:	2200      	movs	r2, #0
 801485c:	2300      	movs	r3, #0
 801485e:	f7ec f943 	bl	8000ae8 <__aeabi_dcmpeq>
 8014862:	b1b8      	cbz	r0, 8014894 <pow+0x68>
 8014864:	2200      	movs	r2, #0
 8014866:	2300      	movs	r3, #0
 8014868:	4620      	mov	r0, r4
 801486a:	4629      	mov	r1, r5
 801486c:	f7ec f93c 	bl	8000ae8 <__aeabi_dcmpeq>
 8014870:	2800      	cmp	r0, #0
 8014872:	d146      	bne.n	8014902 <pow+0xd6>
 8014874:	ec45 4b10 	vmov	d0, r4, r5
 8014878:	f000 f874 	bl	8014964 <finite>
 801487c:	b338      	cbz	r0, 80148ce <pow+0xa2>
 801487e:	2200      	movs	r2, #0
 8014880:	2300      	movs	r3, #0
 8014882:	4620      	mov	r0, r4
 8014884:	4629      	mov	r1, r5
 8014886:	f7ec f939 	bl	8000afc <__aeabi_dcmplt>
 801488a:	b300      	cbz	r0, 80148ce <pow+0xa2>
 801488c:	f7fc f922 	bl	8010ad4 <__errno>
 8014890:	2322      	movs	r3, #34	@ 0x22
 8014892:	e01b      	b.n	80148cc <pow+0xa0>
 8014894:	ec47 6b10 	vmov	d0, r6, r7
 8014898:	f000 f864 	bl	8014964 <finite>
 801489c:	b9e0      	cbnz	r0, 80148d8 <pow+0xac>
 801489e:	eeb0 0a48 	vmov.f32	s0, s16
 80148a2:	eef0 0a68 	vmov.f32	s1, s17
 80148a6:	f000 f85d 	bl	8014964 <finite>
 80148aa:	b1a8      	cbz	r0, 80148d8 <pow+0xac>
 80148ac:	ec45 4b10 	vmov	d0, r4, r5
 80148b0:	f000 f858 	bl	8014964 <finite>
 80148b4:	b180      	cbz	r0, 80148d8 <pow+0xac>
 80148b6:	4632      	mov	r2, r6
 80148b8:	463b      	mov	r3, r7
 80148ba:	4630      	mov	r0, r6
 80148bc:	4639      	mov	r1, r7
 80148be:	f7ec f945 	bl	8000b4c <__aeabi_dcmpun>
 80148c2:	2800      	cmp	r0, #0
 80148c4:	d0e2      	beq.n	801488c <pow+0x60>
 80148c6:	f7fc f905 	bl	8010ad4 <__errno>
 80148ca:	2321      	movs	r3, #33	@ 0x21
 80148cc:	6003      	str	r3, [r0, #0]
 80148ce:	ecbd 8b02 	vpop	{d8}
 80148d2:	ec47 6b10 	vmov	d0, r6, r7
 80148d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148d8:	2200      	movs	r2, #0
 80148da:	2300      	movs	r3, #0
 80148dc:	4630      	mov	r0, r6
 80148de:	4639      	mov	r1, r7
 80148e0:	f7ec f902 	bl	8000ae8 <__aeabi_dcmpeq>
 80148e4:	2800      	cmp	r0, #0
 80148e6:	d0f2      	beq.n	80148ce <pow+0xa2>
 80148e8:	eeb0 0a48 	vmov.f32	s0, s16
 80148ec:	eef0 0a68 	vmov.f32	s1, s17
 80148f0:	f000 f838 	bl	8014964 <finite>
 80148f4:	2800      	cmp	r0, #0
 80148f6:	d0ea      	beq.n	80148ce <pow+0xa2>
 80148f8:	ec45 4b10 	vmov	d0, r4, r5
 80148fc:	f000 f832 	bl	8014964 <finite>
 8014900:	e7c3      	b.n	801488a <pow+0x5e>
 8014902:	4f01      	ldr	r7, [pc, #4]	@ (8014908 <pow+0xdc>)
 8014904:	2600      	movs	r6, #0
 8014906:	e7e2      	b.n	80148ce <pow+0xa2>
 8014908:	3ff00000 	.word	0x3ff00000

0801490c <sqrt>:
 801490c:	b538      	push	{r3, r4, r5, lr}
 801490e:	ed2d 8b02 	vpush	{d8}
 8014912:	ec55 4b10 	vmov	r4, r5, d0
 8014916:	f000 f831 	bl	801497c <__ieee754_sqrt>
 801491a:	4622      	mov	r2, r4
 801491c:	462b      	mov	r3, r5
 801491e:	4620      	mov	r0, r4
 8014920:	4629      	mov	r1, r5
 8014922:	eeb0 8a40 	vmov.f32	s16, s0
 8014926:	eef0 8a60 	vmov.f32	s17, s1
 801492a:	f7ec f90f 	bl	8000b4c <__aeabi_dcmpun>
 801492e:	b990      	cbnz	r0, 8014956 <sqrt+0x4a>
 8014930:	2200      	movs	r2, #0
 8014932:	2300      	movs	r3, #0
 8014934:	4620      	mov	r0, r4
 8014936:	4629      	mov	r1, r5
 8014938:	f7ec f8e0 	bl	8000afc <__aeabi_dcmplt>
 801493c:	b158      	cbz	r0, 8014956 <sqrt+0x4a>
 801493e:	f7fc f8c9 	bl	8010ad4 <__errno>
 8014942:	2321      	movs	r3, #33	@ 0x21
 8014944:	6003      	str	r3, [r0, #0]
 8014946:	2200      	movs	r2, #0
 8014948:	2300      	movs	r3, #0
 801494a:	4610      	mov	r0, r2
 801494c:	4619      	mov	r1, r3
 801494e:	f7eb ff8d 	bl	800086c <__aeabi_ddiv>
 8014952:	ec41 0b18 	vmov	d8, r0, r1
 8014956:	eeb0 0a48 	vmov.f32	s0, s16
 801495a:	eef0 0a68 	vmov.f32	s1, s17
 801495e:	ecbd 8b02 	vpop	{d8}
 8014962:	bd38      	pop	{r3, r4, r5, pc}

08014964 <finite>:
 8014964:	b082      	sub	sp, #8
 8014966:	ed8d 0b00 	vstr	d0, [sp]
 801496a:	9801      	ldr	r0, [sp, #4]
 801496c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8014970:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8014974:	0fc0      	lsrs	r0, r0, #31
 8014976:	b002      	add	sp, #8
 8014978:	4770      	bx	lr
	...

0801497c <__ieee754_sqrt>:
 801497c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014980:	4a68      	ldr	r2, [pc, #416]	@ (8014b24 <__ieee754_sqrt+0x1a8>)
 8014982:	ec55 4b10 	vmov	r4, r5, d0
 8014986:	43aa      	bics	r2, r5
 8014988:	462b      	mov	r3, r5
 801498a:	4621      	mov	r1, r4
 801498c:	d110      	bne.n	80149b0 <__ieee754_sqrt+0x34>
 801498e:	4622      	mov	r2, r4
 8014990:	4620      	mov	r0, r4
 8014992:	4629      	mov	r1, r5
 8014994:	f7eb fe40 	bl	8000618 <__aeabi_dmul>
 8014998:	4602      	mov	r2, r0
 801499a:	460b      	mov	r3, r1
 801499c:	4620      	mov	r0, r4
 801499e:	4629      	mov	r1, r5
 80149a0:	f7eb fc84 	bl	80002ac <__adddf3>
 80149a4:	4604      	mov	r4, r0
 80149a6:	460d      	mov	r5, r1
 80149a8:	ec45 4b10 	vmov	d0, r4, r5
 80149ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149b0:	2d00      	cmp	r5, #0
 80149b2:	dc0e      	bgt.n	80149d2 <__ieee754_sqrt+0x56>
 80149b4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80149b8:	4322      	orrs	r2, r4
 80149ba:	d0f5      	beq.n	80149a8 <__ieee754_sqrt+0x2c>
 80149bc:	b19d      	cbz	r5, 80149e6 <__ieee754_sqrt+0x6a>
 80149be:	4622      	mov	r2, r4
 80149c0:	4620      	mov	r0, r4
 80149c2:	4629      	mov	r1, r5
 80149c4:	f7eb fc70 	bl	80002a8 <__aeabi_dsub>
 80149c8:	4602      	mov	r2, r0
 80149ca:	460b      	mov	r3, r1
 80149cc:	f7eb ff4e 	bl	800086c <__aeabi_ddiv>
 80149d0:	e7e8      	b.n	80149a4 <__ieee754_sqrt+0x28>
 80149d2:	152a      	asrs	r2, r5, #20
 80149d4:	d115      	bne.n	8014a02 <__ieee754_sqrt+0x86>
 80149d6:	2000      	movs	r0, #0
 80149d8:	e009      	b.n	80149ee <__ieee754_sqrt+0x72>
 80149da:	0acb      	lsrs	r3, r1, #11
 80149dc:	3a15      	subs	r2, #21
 80149de:	0549      	lsls	r1, r1, #21
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d0fa      	beq.n	80149da <__ieee754_sqrt+0x5e>
 80149e4:	e7f7      	b.n	80149d6 <__ieee754_sqrt+0x5a>
 80149e6:	462a      	mov	r2, r5
 80149e8:	e7fa      	b.n	80149e0 <__ieee754_sqrt+0x64>
 80149ea:	005b      	lsls	r3, r3, #1
 80149ec:	3001      	adds	r0, #1
 80149ee:	02dc      	lsls	r4, r3, #11
 80149f0:	d5fb      	bpl.n	80149ea <__ieee754_sqrt+0x6e>
 80149f2:	1e44      	subs	r4, r0, #1
 80149f4:	1b12      	subs	r2, r2, r4
 80149f6:	f1c0 0420 	rsb	r4, r0, #32
 80149fa:	fa21 f404 	lsr.w	r4, r1, r4
 80149fe:	4323      	orrs	r3, r4
 8014a00:	4081      	lsls	r1, r0
 8014a02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014a06:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8014a0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014a0e:	07d2      	lsls	r2, r2, #31
 8014a10:	bf5c      	itt	pl
 8014a12:	005b      	lslpl	r3, r3, #1
 8014a14:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8014a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014a1c:	bf58      	it	pl
 8014a1e:	0049      	lslpl	r1, r1, #1
 8014a20:	2600      	movs	r6, #0
 8014a22:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8014a26:	106d      	asrs	r5, r5, #1
 8014a28:	0049      	lsls	r1, r1, #1
 8014a2a:	2016      	movs	r0, #22
 8014a2c:	4632      	mov	r2, r6
 8014a2e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8014a32:	1917      	adds	r7, r2, r4
 8014a34:	429f      	cmp	r7, r3
 8014a36:	bfde      	ittt	le
 8014a38:	193a      	addle	r2, r7, r4
 8014a3a:	1bdb      	suble	r3, r3, r7
 8014a3c:	1936      	addle	r6, r6, r4
 8014a3e:	0fcf      	lsrs	r7, r1, #31
 8014a40:	3801      	subs	r0, #1
 8014a42:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8014a46:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014a4a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8014a4e:	d1f0      	bne.n	8014a32 <__ieee754_sqrt+0xb6>
 8014a50:	4604      	mov	r4, r0
 8014a52:	2720      	movs	r7, #32
 8014a54:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8014a58:	429a      	cmp	r2, r3
 8014a5a:	eb00 0e0c 	add.w	lr, r0, ip
 8014a5e:	db02      	blt.n	8014a66 <__ieee754_sqrt+0xea>
 8014a60:	d113      	bne.n	8014a8a <__ieee754_sqrt+0x10e>
 8014a62:	458e      	cmp	lr, r1
 8014a64:	d811      	bhi.n	8014a8a <__ieee754_sqrt+0x10e>
 8014a66:	f1be 0f00 	cmp.w	lr, #0
 8014a6a:	eb0e 000c 	add.w	r0, lr, ip
 8014a6e:	da42      	bge.n	8014af6 <__ieee754_sqrt+0x17a>
 8014a70:	2800      	cmp	r0, #0
 8014a72:	db40      	blt.n	8014af6 <__ieee754_sqrt+0x17a>
 8014a74:	f102 0801 	add.w	r8, r2, #1
 8014a78:	1a9b      	subs	r3, r3, r2
 8014a7a:	458e      	cmp	lr, r1
 8014a7c:	bf88      	it	hi
 8014a7e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014a82:	eba1 010e 	sub.w	r1, r1, lr
 8014a86:	4464      	add	r4, ip
 8014a88:	4642      	mov	r2, r8
 8014a8a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8014a8e:	3f01      	subs	r7, #1
 8014a90:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8014a94:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014a98:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8014a9c:	d1dc      	bne.n	8014a58 <__ieee754_sqrt+0xdc>
 8014a9e:	4319      	orrs	r1, r3
 8014aa0:	d01b      	beq.n	8014ada <__ieee754_sqrt+0x15e>
 8014aa2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8014b28 <__ieee754_sqrt+0x1ac>
 8014aa6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8014b2c <__ieee754_sqrt+0x1b0>
 8014aaa:	e9da 0100 	ldrd	r0, r1, [sl]
 8014aae:	e9db 2300 	ldrd	r2, r3, [fp]
 8014ab2:	f7eb fbf9 	bl	80002a8 <__aeabi_dsub>
 8014ab6:	e9da 8900 	ldrd	r8, r9, [sl]
 8014aba:	4602      	mov	r2, r0
 8014abc:	460b      	mov	r3, r1
 8014abe:	4640      	mov	r0, r8
 8014ac0:	4649      	mov	r1, r9
 8014ac2:	f7ec f825 	bl	8000b10 <__aeabi_dcmple>
 8014ac6:	b140      	cbz	r0, 8014ada <__ieee754_sqrt+0x15e>
 8014ac8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8014acc:	e9da 0100 	ldrd	r0, r1, [sl]
 8014ad0:	e9db 2300 	ldrd	r2, r3, [fp]
 8014ad4:	d111      	bne.n	8014afa <__ieee754_sqrt+0x17e>
 8014ad6:	3601      	adds	r6, #1
 8014ad8:	463c      	mov	r4, r7
 8014ada:	1072      	asrs	r2, r6, #1
 8014adc:	0863      	lsrs	r3, r4, #1
 8014ade:	07f1      	lsls	r1, r6, #31
 8014ae0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8014ae4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8014ae8:	bf48      	it	mi
 8014aea:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8014aee:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8014af2:	4618      	mov	r0, r3
 8014af4:	e756      	b.n	80149a4 <__ieee754_sqrt+0x28>
 8014af6:	4690      	mov	r8, r2
 8014af8:	e7be      	b.n	8014a78 <__ieee754_sqrt+0xfc>
 8014afa:	f7eb fbd7 	bl	80002ac <__adddf3>
 8014afe:	e9da 8900 	ldrd	r8, r9, [sl]
 8014b02:	4602      	mov	r2, r0
 8014b04:	460b      	mov	r3, r1
 8014b06:	4640      	mov	r0, r8
 8014b08:	4649      	mov	r1, r9
 8014b0a:	f7eb fff7 	bl	8000afc <__aeabi_dcmplt>
 8014b0e:	b120      	cbz	r0, 8014b1a <__ieee754_sqrt+0x19e>
 8014b10:	1ca0      	adds	r0, r4, #2
 8014b12:	bf08      	it	eq
 8014b14:	3601      	addeq	r6, #1
 8014b16:	3402      	adds	r4, #2
 8014b18:	e7df      	b.n	8014ada <__ieee754_sqrt+0x15e>
 8014b1a:	1c63      	adds	r3, r4, #1
 8014b1c:	f023 0401 	bic.w	r4, r3, #1
 8014b20:	e7db      	b.n	8014ada <__ieee754_sqrt+0x15e>
 8014b22:	bf00      	nop
 8014b24:	7ff00000 	.word	0x7ff00000
 8014b28:	20000288 	.word	0x20000288
 8014b2c:	20000280 	.word	0x20000280

08014b30 <__ieee754_pow>:
 8014b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b34:	b091      	sub	sp, #68	@ 0x44
 8014b36:	ed8d 1b00 	vstr	d1, [sp]
 8014b3a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8014b3e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8014b42:	ea5a 0001 	orrs.w	r0, sl, r1
 8014b46:	ec57 6b10 	vmov	r6, r7, d0
 8014b4a:	d113      	bne.n	8014b74 <__ieee754_pow+0x44>
 8014b4c:	19b3      	adds	r3, r6, r6
 8014b4e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8014b52:	4152      	adcs	r2, r2
 8014b54:	4298      	cmp	r0, r3
 8014b56:	4b98      	ldr	r3, [pc, #608]	@ (8014db8 <__ieee754_pow+0x288>)
 8014b58:	4193      	sbcs	r3, r2
 8014b5a:	f080 84ea 	bcs.w	8015532 <__ieee754_pow+0xa02>
 8014b5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014b62:	4630      	mov	r0, r6
 8014b64:	4639      	mov	r1, r7
 8014b66:	f7eb fba1 	bl	80002ac <__adddf3>
 8014b6a:	ec41 0b10 	vmov	d0, r0, r1
 8014b6e:	b011      	add	sp, #68	@ 0x44
 8014b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b74:	4a91      	ldr	r2, [pc, #580]	@ (8014dbc <__ieee754_pow+0x28c>)
 8014b76:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014b7a:	4590      	cmp	r8, r2
 8014b7c:	463d      	mov	r5, r7
 8014b7e:	4633      	mov	r3, r6
 8014b80:	d806      	bhi.n	8014b90 <__ieee754_pow+0x60>
 8014b82:	d101      	bne.n	8014b88 <__ieee754_pow+0x58>
 8014b84:	2e00      	cmp	r6, #0
 8014b86:	d1ea      	bne.n	8014b5e <__ieee754_pow+0x2e>
 8014b88:	4592      	cmp	sl, r2
 8014b8a:	d801      	bhi.n	8014b90 <__ieee754_pow+0x60>
 8014b8c:	d10e      	bne.n	8014bac <__ieee754_pow+0x7c>
 8014b8e:	b169      	cbz	r1, 8014bac <__ieee754_pow+0x7c>
 8014b90:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8014b94:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8014b98:	431d      	orrs	r5, r3
 8014b9a:	d1e0      	bne.n	8014b5e <__ieee754_pow+0x2e>
 8014b9c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014ba0:	18db      	adds	r3, r3, r3
 8014ba2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8014ba6:	4152      	adcs	r2, r2
 8014ba8:	429d      	cmp	r5, r3
 8014baa:	e7d4      	b.n	8014b56 <__ieee754_pow+0x26>
 8014bac:	2d00      	cmp	r5, #0
 8014bae:	46c3      	mov	fp, r8
 8014bb0:	da3a      	bge.n	8014c28 <__ieee754_pow+0xf8>
 8014bb2:	4a83      	ldr	r2, [pc, #524]	@ (8014dc0 <__ieee754_pow+0x290>)
 8014bb4:	4592      	cmp	sl, r2
 8014bb6:	d84d      	bhi.n	8014c54 <__ieee754_pow+0x124>
 8014bb8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8014bbc:	4592      	cmp	sl, r2
 8014bbe:	f240 84c7 	bls.w	8015550 <__ieee754_pow+0xa20>
 8014bc2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8014bc6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8014bca:	2a14      	cmp	r2, #20
 8014bcc:	dd0f      	ble.n	8014bee <__ieee754_pow+0xbe>
 8014bce:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8014bd2:	fa21 f402 	lsr.w	r4, r1, r2
 8014bd6:	fa04 f202 	lsl.w	r2, r4, r2
 8014bda:	428a      	cmp	r2, r1
 8014bdc:	f040 84b8 	bne.w	8015550 <__ieee754_pow+0xa20>
 8014be0:	f004 0401 	and.w	r4, r4, #1
 8014be4:	f1c4 0402 	rsb	r4, r4, #2
 8014be8:	2900      	cmp	r1, #0
 8014bea:	d158      	bne.n	8014c9e <__ieee754_pow+0x16e>
 8014bec:	e00e      	b.n	8014c0c <__ieee754_pow+0xdc>
 8014bee:	2900      	cmp	r1, #0
 8014bf0:	d154      	bne.n	8014c9c <__ieee754_pow+0x16c>
 8014bf2:	f1c2 0214 	rsb	r2, r2, #20
 8014bf6:	fa4a f402 	asr.w	r4, sl, r2
 8014bfa:	fa04 f202 	lsl.w	r2, r4, r2
 8014bfe:	4552      	cmp	r2, sl
 8014c00:	f040 84a3 	bne.w	801554a <__ieee754_pow+0xa1a>
 8014c04:	f004 0401 	and.w	r4, r4, #1
 8014c08:	f1c4 0402 	rsb	r4, r4, #2
 8014c0c:	4a6d      	ldr	r2, [pc, #436]	@ (8014dc4 <__ieee754_pow+0x294>)
 8014c0e:	4592      	cmp	sl, r2
 8014c10:	d12e      	bne.n	8014c70 <__ieee754_pow+0x140>
 8014c12:	f1b9 0f00 	cmp.w	r9, #0
 8014c16:	f280 8494 	bge.w	8015542 <__ieee754_pow+0xa12>
 8014c1a:	496a      	ldr	r1, [pc, #424]	@ (8014dc4 <__ieee754_pow+0x294>)
 8014c1c:	4632      	mov	r2, r6
 8014c1e:	463b      	mov	r3, r7
 8014c20:	2000      	movs	r0, #0
 8014c22:	f7eb fe23 	bl	800086c <__aeabi_ddiv>
 8014c26:	e7a0      	b.n	8014b6a <__ieee754_pow+0x3a>
 8014c28:	2400      	movs	r4, #0
 8014c2a:	bbc1      	cbnz	r1, 8014c9e <__ieee754_pow+0x16e>
 8014c2c:	4a63      	ldr	r2, [pc, #396]	@ (8014dbc <__ieee754_pow+0x28c>)
 8014c2e:	4592      	cmp	sl, r2
 8014c30:	d1ec      	bne.n	8014c0c <__ieee754_pow+0xdc>
 8014c32:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8014c36:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8014c3a:	431a      	orrs	r2, r3
 8014c3c:	f000 8479 	beq.w	8015532 <__ieee754_pow+0xa02>
 8014c40:	4b61      	ldr	r3, [pc, #388]	@ (8014dc8 <__ieee754_pow+0x298>)
 8014c42:	4598      	cmp	r8, r3
 8014c44:	d908      	bls.n	8014c58 <__ieee754_pow+0x128>
 8014c46:	f1b9 0f00 	cmp.w	r9, #0
 8014c4a:	f2c0 8476 	blt.w	801553a <__ieee754_pow+0xa0a>
 8014c4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c52:	e78a      	b.n	8014b6a <__ieee754_pow+0x3a>
 8014c54:	2402      	movs	r4, #2
 8014c56:	e7e8      	b.n	8014c2a <__ieee754_pow+0xfa>
 8014c58:	f1b9 0f00 	cmp.w	r9, #0
 8014c5c:	f04f 0000 	mov.w	r0, #0
 8014c60:	f04f 0100 	mov.w	r1, #0
 8014c64:	da81      	bge.n	8014b6a <__ieee754_pow+0x3a>
 8014c66:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014c6a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8014c6e:	e77c      	b.n	8014b6a <__ieee754_pow+0x3a>
 8014c70:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8014c74:	d106      	bne.n	8014c84 <__ieee754_pow+0x154>
 8014c76:	4632      	mov	r2, r6
 8014c78:	463b      	mov	r3, r7
 8014c7a:	4630      	mov	r0, r6
 8014c7c:	4639      	mov	r1, r7
 8014c7e:	f7eb fccb 	bl	8000618 <__aeabi_dmul>
 8014c82:	e772      	b.n	8014b6a <__ieee754_pow+0x3a>
 8014c84:	4a51      	ldr	r2, [pc, #324]	@ (8014dcc <__ieee754_pow+0x29c>)
 8014c86:	4591      	cmp	r9, r2
 8014c88:	d109      	bne.n	8014c9e <__ieee754_pow+0x16e>
 8014c8a:	2d00      	cmp	r5, #0
 8014c8c:	db07      	blt.n	8014c9e <__ieee754_pow+0x16e>
 8014c8e:	ec47 6b10 	vmov	d0, r6, r7
 8014c92:	b011      	add	sp, #68	@ 0x44
 8014c94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c98:	f7ff be70 	b.w	801497c <__ieee754_sqrt>
 8014c9c:	2400      	movs	r4, #0
 8014c9e:	ec47 6b10 	vmov	d0, r6, r7
 8014ca2:	9302      	str	r3, [sp, #8]
 8014ca4:	f000 fc88 	bl	80155b8 <fabs>
 8014ca8:	9b02      	ldr	r3, [sp, #8]
 8014caa:	ec51 0b10 	vmov	r0, r1, d0
 8014cae:	bb53      	cbnz	r3, 8014d06 <__ieee754_pow+0x1d6>
 8014cb0:	4b44      	ldr	r3, [pc, #272]	@ (8014dc4 <__ieee754_pow+0x294>)
 8014cb2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8014cb6:	429a      	cmp	r2, r3
 8014cb8:	d002      	beq.n	8014cc0 <__ieee754_pow+0x190>
 8014cba:	f1b8 0f00 	cmp.w	r8, #0
 8014cbe:	d122      	bne.n	8014d06 <__ieee754_pow+0x1d6>
 8014cc0:	f1b9 0f00 	cmp.w	r9, #0
 8014cc4:	da05      	bge.n	8014cd2 <__ieee754_pow+0x1a2>
 8014cc6:	4602      	mov	r2, r0
 8014cc8:	460b      	mov	r3, r1
 8014cca:	2000      	movs	r0, #0
 8014ccc:	493d      	ldr	r1, [pc, #244]	@ (8014dc4 <__ieee754_pow+0x294>)
 8014cce:	f7eb fdcd 	bl	800086c <__aeabi_ddiv>
 8014cd2:	2d00      	cmp	r5, #0
 8014cd4:	f6bf af49 	bge.w	8014b6a <__ieee754_pow+0x3a>
 8014cd8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8014cdc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8014ce0:	ea58 0804 	orrs.w	r8, r8, r4
 8014ce4:	d108      	bne.n	8014cf8 <__ieee754_pow+0x1c8>
 8014ce6:	4602      	mov	r2, r0
 8014ce8:	460b      	mov	r3, r1
 8014cea:	4610      	mov	r0, r2
 8014cec:	4619      	mov	r1, r3
 8014cee:	f7eb fadb 	bl	80002a8 <__aeabi_dsub>
 8014cf2:	4602      	mov	r2, r0
 8014cf4:	460b      	mov	r3, r1
 8014cf6:	e794      	b.n	8014c22 <__ieee754_pow+0xf2>
 8014cf8:	2c01      	cmp	r4, #1
 8014cfa:	f47f af36 	bne.w	8014b6a <__ieee754_pow+0x3a>
 8014cfe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014d02:	4619      	mov	r1, r3
 8014d04:	e731      	b.n	8014b6a <__ieee754_pow+0x3a>
 8014d06:	0feb      	lsrs	r3, r5, #31
 8014d08:	3b01      	subs	r3, #1
 8014d0a:	ea53 0204 	orrs.w	r2, r3, r4
 8014d0e:	d102      	bne.n	8014d16 <__ieee754_pow+0x1e6>
 8014d10:	4632      	mov	r2, r6
 8014d12:	463b      	mov	r3, r7
 8014d14:	e7e9      	b.n	8014cea <__ieee754_pow+0x1ba>
 8014d16:	3c01      	subs	r4, #1
 8014d18:	431c      	orrs	r4, r3
 8014d1a:	d016      	beq.n	8014d4a <__ieee754_pow+0x21a>
 8014d1c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8014da8 <__ieee754_pow+0x278>
 8014d20:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8014d24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014d28:	f240 8112 	bls.w	8014f50 <__ieee754_pow+0x420>
 8014d2c:	4b28      	ldr	r3, [pc, #160]	@ (8014dd0 <__ieee754_pow+0x2a0>)
 8014d2e:	459a      	cmp	sl, r3
 8014d30:	4b25      	ldr	r3, [pc, #148]	@ (8014dc8 <__ieee754_pow+0x298>)
 8014d32:	d916      	bls.n	8014d62 <__ieee754_pow+0x232>
 8014d34:	4598      	cmp	r8, r3
 8014d36:	d80b      	bhi.n	8014d50 <__ieee754_pow+0x220>
 8014d38:	f1b9 0f00 	cmp.w	r9, #0
 8014d3c:	da0b      	bge.n	8014d56 <__ieee754_pow+0x226>
 8014d3e:	2000      	movs	r0, #0
 8014d40:	b011      	add	sp, #68	@ 0x44
 8014d42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d46:	f000 bcf3 	b.w	8015730 <__math_oflow>
 8014d4a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8014db0 <__ieee754_pow+0x280>
 8014d4e:	e7e7      	b.n	8014d20 <__ieee754_pow+0x1f0>
 8014d50:	f1b9 0f00 	cmp.w	r9, #0
 8014d54:	dcf3      	bgt.n	8014d3e <__ieee754_pow+0x20e>
 8014d56:	2000      	movs	r0, #0
 8014d58:	b011      	add	sp, #68	@ 0x44
 8014d5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d5e:	f000 bcdf 	b.w	8015720 <__math_uflow>
 8014d62:	4598      	cmp	r8, r3
 8014d64:	d20c      	bcs.n	8014d80 <__ieee754_pow+0x250>
 8014d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	f7eb fec5 	bl	8000afc <__aeabi_dcmplt>
 8014d72:	3800      	subs	r0, #0
 8014d74:	bf18      	it	ne
 8014d76:	2001      	movne	r0, #1
 8014d78:	f1b9 0f00 	cmp.w	r9, #0
 8014d7c:	daec      	bge.n	8014d58 <__ieee754_pow+0x228>
 8014d7e:	e7df      	b.n	8014d40 <__ieee754_pow+0x210>
 8014d80:	4b10      	ldr	r3, [pc, #64]	@ (8014dc4 <__ieee754_pow+0x294>)
 8014d82:	4598      	cmp	r8, r3
 8014d84:	f04f 0200 	mov.w	r2, #0
 8014d88:	d924      	bls.n	8014dd4 <__ieee754_pow+0x2a4>
 8014d8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014d8e:	2300      	movs	r3, #0
 8014d90:	f7eb feb4 	bl	8000afc <__aeabi_dcmplt>
 8014d94:	3800      	subs	r0, #0
 8014d96:	bf18      	it	ne
 8014d98:	2001      	movne	r0, #1
 8014d9a:	f1b9 0f00 	cmp.w	r9, #0
 8014d9e:	dccf      	bgt.n	8014d40 <__ieee754_pow+0x210>
 8014da0:	e7da      	b.n	8014d58 <__ieee754_pow+0x228>
 8014da2:	bf00      	nop
 8014da4:	f3af 8000 	nop.w
 8014da8:	00000000 	.word	0x00000000
 8014dac:	3ff00000 	.word	0x3ff00000
 8014db0:	00000000 	.word	0x00000000
 8014db4:	bff00000 	.word	0xbff00000
 8014db8:	fff00000 	.word	0xfff00000
 8014dbc:	7ff00000 	.word	0x7ff00000
 8014dc0:	433fffff 	.word	0x433fffff
 8014dc4:	3ff00000 	.word	0x3ff00000
 8014dc8:	3fefffff 	.word	0x3fefffff
 8014dcc:	3fe00000 	.word	0x3fe00000
 8014dd0:	43f00000 	.word	0x43f00000
 8014dd4:	4b5a      	ldr	r3, [pc, #360]	@ (8014f40 <__ieee754_pow+0x410>)
 8014dd6:	f7eb fa67 	bl	80002a8 <__aeabi_dsub>
 8014dda:	a351      	add	r3, pc, #324	@ (adr r3, 8014f20 <__ieee754_pow+0x3f0>)
 8014ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014de0:	4604      	mov	r4, r0
 8014de2:	460d      	mov	r5, r1
 8014de4:	f7eb fc18 	bl	8000618 <__aeabi_dmul>
 8014de8:	a34f      	add	r3, pc, #316	@ (adr r3, 8014f28 <__ieee754_pow+0x3f8>)
 8014dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dee:	4606      	mov	r6, r0
 8014df0:	460f      	mov	r7, r1
 8014df2:	4620      	mov	r0, r4
 8014df4:	4629      	mov	r1, r5
 8014df6:	f7eb fc0f 	bl	8000618 <__aeabi_dmul>
 8014dfa:	4b52      	ldr	r3, [pc, #328]	@ (8014f44 <__ieee754_pow+0x414>)
 8014dfc:	4682      	mov	sl, r0
 8014dfe:	468b      	mov	fp, r1
 8014e00:	2200      	movs	r2, #0
 8014e02:	4620      	mov	r0, r4
 8014e04:	4629      	mov	r1, r5
 8014e06:	f7eb fc07 	bl	8000618 <__aeabi_dmul>
 8014e0a:	4602      	mov	r2, r0
 8014e0c:	460b      	mov	r3, r1
 8014e0e:	a148      	add	r1, pc, #288	@ (adr r1, 8014f30 <__ieee754_pow+0x400>)
 8014e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e14:	f7eb fa48 	bl	80002a8 <__aeabi_dsub>
 8014e18:	4622      	mov	r2, r4
 8014e1a:	462b      	mov	r3, r5
 8014e1c:	f7eb fbfc 	bl	8000618 <__aeabi_dmul>
 8014e20:	4602      	mov	r2, r0
 8014e22:	460b      	mov	r3, r1
 8014e24:	2000      	movs	r0, #0
 8014e26:	4948      	ldr	r1, [pc, #288]	@ (8014f48 <__ieee754_pow+0x418>)
 8014e28:	f7eb fa3e 	bl	80002a8 <__aeabi_dsub>
 8014e2c:	4622      	mov	r2, r4
 8014e2e:	4680      	mov	r8, r0
 8014e30:	4689      	mov	r9, r1
 8014e32:	462b      	mov	r3, r5
 8014e34:	4620      	mov	r0, r4
 8014e36:	4629      	mov	r1, r5
 8014e38:	f7eb fbee 	bl	8000618 <__aeabi_dmul>
 8014e3c:	4602      	mov	r2, r0
 8014e3e:	460b      	mov	r3, r1
 8014e40:	4640      	mov	r0, r8
 8014e42:	4649      	mov	r1, r9
 8014e44:	f7eb fbe8 	bl	8000618 <__aeabi_dmul>
 8014e48:	a33b      	add	r3, pc, #236	@ (adr r3, 8014f38 <__ieee754_pow+0x408>)
 8014e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e4e:	f7eb fbe3 	bl	8000618 <__aeabi_dmul>
 8014e52:	4602      	mov	r2, r0
 8014e54:	460b      	mov	r3, r1
 8014e56:	4650      	mov	r0, sl
 8014e58:	4659      	mov	r1, fp
 8014e5a:	f7eb fa25 	bl	80002a8 <__aeabi_dsub>
 8014e5e:	4602      	mov	r2, r0
 8014e60:	460b      	mov	r3, r1
 8014e62:	4680      	mov	r8, r0
 8014e64:	4689      	mov	r9, r1
 8014e66:	4630      	mov	r0, r6
 8014e68:	4639      	mov	r1, r7
 8014e6a:	f7eb fa1f 	bl	80002ac <__adddf3>
 8014e6e:	2400      	movs	r4, #0
 8014e70:	4632      	mov	r2, r6
 8014e72:	463b      	mov	r3, r7
 8014e74:	4620      	mov	r0, r4
 8014e76:	460d      	mov	r5, r1
 8014e78:	f7eb fa16 	bl	80002a8 <__aeabi_dsub>
 8014e7c:	4602      	mov	r2, r0
 8014e7e:	460b      	mov	r3, r1
 8014e80:	4640      	mov	r0, r8
 8014e82:	4649      	mov	r1, r9
 8014e84:	f7eb fa10 	bl	80002a8 <__aeabi_dsub>
 8014e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014e90:	2300      	movs	r3, #0
 8014e92:	9304      	str	r3, [sp, #16]
 8014e94:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014e98:	4606      	mov	r6, r0
 8014e9a:	460f      	mov	r7, r1
 8014e9c:	4652      	mov	r2, sl
 8014e9e:	465b      	mov	r3, fp
 8014ea0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ea4:	f7eb fa00 	bl	80002a8 <__aeabi_dsub>
 8014ea8:	4622      	mov	r2, r4
 8014eaa:	462b      	mov	r3, r5
 8014eac:	f7eb fbb4 	bl	8000618 <__aeabi_dmul>
 8014eb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014eb4:	4680      	mov	r8, r0
 8014eb6:	4689      	mov	r9, r1
 8014eb8:	4630      	mov	r0, r6
 8014eba:	4639      	mov	r1, r7
 8014ebc:	f7eb fbac 	bl	8000618 <__aeabi_dmul>
 8014ec0:	4602      	mov	r2, r0
 8014ec2:	460b      	mov	r3, r1
 8014ec4:	4640      	mov	r0, r8
 8014ec6:	4649      	mov	r1, r9
 8014ec8:	f7eb f9f0 	bl	80002ac <__adddf3>
 8014ecc:	4652      	mov	r2, sl
 8014ece:	465b      	mov	r3, fp
 8014ed0:	4606      	mov	r6, r0
 8014ed2:	460f      	mov	r7, r1
 8014ed4:	4620      	mov	r0, r4
 8014ed6:	4629      	mov	r1, r5
 8014ed8:	f7eb fb9e 	bl	8000618 <__aeabi_dmul>
 8014edc:	460b      	mov	r3, r1
 8014ede:	4602      	mov	r2, r0
 8014ee0:	4680      	mov	r8, r0
 8014ee2:	4689      	mov	r9, r1
 8014ee4:	4630      	mov	r0, r6
 8014ee6:	4639      	mov	r1, r7
 8014ee8:	f7eb f9e0 	bl	80002ac <__adddf3>
 8014eec:	4b17      	ldr	r3, [pc, #92]	@ (8014f4c <__ieee754_pow+0x41c>)
 8014eee:	4299      	cmp	r1, r3
 8014ef0:	4604      	mov	r4, r0
 8014ef2:	460d      	mov	r5, r1
 8014ef4:	468a      	mov	sl, r1
 8014ef6:	468b      	mov	fp, r1
 8014ef8:	f340 82ef 	ble.w	80154da <__ieee754_pow+0x9aa>
 8014efc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8014f00:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8014f04:	4303      	orrs	r3, r0
 8014f06:	f000 81e8 	beq.w	80152da <__ieee754_pow+0x7aa>
 8014f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014f0e:	2200      	movs	r2, #0
 8014f10:	2300      	movs	r3, #0
 8014f12:	f7eb fdf3 	bl	8000afc <__aeabi_dcmplt>
 8014f16:	3800      	subs	r0, #0
 8014f18:	bf18      	it	ne
 8014f1a:	2001      	movne	r0, #1
 8014f1c:	e710      	b.n	8014d40 <__ieee754_pow+0x210>
 8014f1e:	bf00      	nop
 8014f20:	60000000 	.word	0x60000000
 8014f24:	3ff71547 	.word	0x3ff71547
 8014f28:	f85ddf44 	.word	0xf85ddf44
 8014f2c:	3e54ae0b 	.word	0x3e54ae0b
 8014f30:	55555555 	.word	0x55555555
 8014f34:	3fd55555 	.word	0x3fd55555
 8014f38:	652b82fe 	.word	0x652b82fe
 8014f3c:	3ff71547 	.word	0x3ff71547
 8014f40:	3ff00000 	.word	0x3ff00000
 8014f44:	3fd00000 	.word	0x3fd00000
 8014f48:	3fe00000 	.word	0x3fe00000
 8014f4c:	408fffff 	.word	0x408fffff
 8014f50:	4bd5      	ldr	r3, [pc, #852]	@ (80152a8 <__ieee754_pow+0x778>)
 8014f52:	402b      	ands	r3, r5
 8014f54:	2200      	movs	r2, #0
 8014f56:	b92b      	cbnz	r3, 8014f64 <__ieee754_pow+0x434>
 8014f58:	4bd4      	ldr	r3, [pc, #848]	@ (80152ac <__ieee754_pow+0x77c>)
 8014f5a:	f7eb fb5d 	bl	8000618 <__aeabi_dmul>
 8014f5e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8014f62:	468b      	mov	fp, r1
 8014f64:	ea4f 532b 	mov.w	r3, fp, asr #20
 8014f68:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8014f6c:	4413      	add	r3, r2
 8014f6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f70:	4bcf      	ldr	r3, [pc, #828]	@ (80152b0 <__ieee754_pow+0x780>)
 8014f72:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8014f76:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8014f7a:	459b      	cmp	fp, r3
 8014f7c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014f80:	dd08      	ble.n	8014f94 <__ieee754_pow+0x464>
 8014f82:	4bcc      	ldr	r3, [pc, #816]	@ (80152b4 <__ieee754_pow+0x784>)
 8014f84:	459b      	cmp	fp, r3
 8014f86:	f340 81a5 	ble.w	80152d4 <__ieee754_pow+0x7a4>
 8014f8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014f8c:	3301      	adds	r3, #1
 8014f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f90:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8014f94:	f04f 0a00 	mov.w	sl, #0
 8014f98:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014f9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f9e:	4bc6      	ldr	r3, [pc, #792]	@ (80152b8 <__ieee754_pow+0x788>)
 8014fa0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014fa4:	ed93 7b00 	vldr	d7, [r3]
 8014fa8:	4629      	mov	r1, r5
 8014faa:	ec53 2b17 	vmov	r2, r3, d7
 8014fae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014fb2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014fb6:	f7eb f977 	bl	80002a8 <__aeabi_dsub>
 8014fba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014fbe:	4606      	mov	r6, r0
 8014fc0:	460f      	mov	r7, r1
 8014fc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014fc6:	f7eb f971 	bl	80002ac <__adddf3>
 8014fca:	4602      	mov	r2, r0
 8014fcc:	460b      	mov	r3, r1
 8014fce:	2000      	movs	r0, #0
 8014fd0:	49ba      	ldr	r1, [pc, #744]	@ (80152bc <__ieee754_pow+0x78c>)
 8014fd2:	f7eb fc4b 	bl	800086c <__aeabi_ddiv>
 8014fd6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8014fda:	4602      	mov	r2, r0
 8014fdc:	460b      	mov	r3, r1
 8014fde:	4630      	mov	r0, r6
 8014fe0:	4639      	mov	r1, r7
 8014fe2:	f7eb fb19 	bl	8000618 <__aeabi_dmul>
 8014fe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014fea:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8014fee:	106d      	asrs	r5, r5, #1
 8014ff0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8014ff4:	f04f 0b00 	mov.w	fp, #0
 8014ff8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8014ffc:	4661      	mov	r1, ip
 8014ffe:	2200      	movs	r2, #0
 8015000:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8015004:	4658      	mov	r0, fp
 8015006:	46e1      	mov	r9, ip
 8015008:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801500c:	4614      	mov	r4, r2
 801500e:	461d      	mov	r5, r3
 8015010:	f7eb fb02 	bl	8000618 <__aeabi_dmul>
 8015014:	4602      	mov	r2, r0
 8015016:	460b      	mov	r3, r1
 8015018:	4630      	mov	r0, r6
 801501a:	4639      	mov	r1, r7
 801501c:	f7eb f944 	bl	80002a8 <__aeabi_dsub>
 8015020:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015024:	4606      	mov	r6, r0
 8015026:	460f      	mov	r7, r1
 8015028:	4620      	mov	r0, r4
 801502a:	4629      	mov	r1, r5
 801502c:	f7eb f93c 	bl	80002a8 <__aeabi_dsub>
 8015030:	4602      	mov	r2, r0
 8015032:	460b      	mov	r3, r1
 8015034:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015038:	f7eb f936 	bl	80002a8 <__aeabi_dsub>
 801503c:	465a      	mov	r2, fp
 801503e:	464b      	mov	r3, r9
 8015040:	f7eb faea 	bl	8000618 <__aeabi_dmul>
 8015044:	4602      	mov	r2, r0
 8015046:	460b      	mov	r3, r1
 8015048:	4630      	mov	r0, r6
 801504a:	4639      	mov	r1, r7
 801504c:	f7eb f92c 	bl	80002a8 <__aeabi_dsub>
 8015050:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015054:	f7eb fae0 	bl	8000618 <__aeabi_dmul>
 8015058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801505c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015060:	4610      	mov	r0, r2
 8015062:	4619      	mov	r1, r3
 8015064:	f7eb fad8 	bl	8000618 <__aeabi_dmul>
 8015068:	a37d      	add	r3, pc, #500	@ (adr r3, 8015260 <__ieee754_pow+0x730>)
 801506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801506e:	4604      	mov	r4, r0
 8015070:	460d      	mov	r5, r1
 8015072:	f7eb fad1 	bl	8000618 <__aeabi_dmul>
 8015076:	a37c      	add	r3, pc, #496	@ (adr r3, 8015268 <__ieee754_pow+0x738>)
 8015078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801507c:	f7eb f916 	bl	80002ac <__adddf3>
 8015080:	4622      	mov	r2, r4
 8015082:	462b      	mov	r3, r5
 8015084:	f7eb fac8 	bl	8000618 <__aeabi_dmul>
 8015088:	a379      	add	r3, pc, #484	@ (adr r3, 8015270 <__ieee754_pow+0x740>)
 801508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801508e:	f7eb f90d 	bl	80002ac <__adddf3>
 8015092:	4622      	mov	r2, r4
 8015094:	462b      	mov	r3, r5
 8015096:	f7eb fabf 	bl	8000618 <__aeabi_dmul>
 801509a:	a377      	add	r3, pc, #476	@ (adr r3, 8015278 <__ieee754_pow+0x748>)
 801509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150a0:	f7eb f904 	bl	80002ac <__adddf3>
 80150a4:	4622      	mov	r2, r4
 80150a6:	462b      	mov	r3, r5
 80150a8:	f7eb fab6 	bl	8000618 <__aeabi_dmul>
 80150ac:	a374      	add	r3, pc, #464	@ (adr r3, 8015280 <__ieee754_pow+0x750>)
 80150ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150b2:	f7eb f8fb 	bl	80002ac <__adddf3>
 80150b6:	4622      	mov	r2, r4
 80150b8:	462b      	mov	r3, r5
 80150ba:	f7eb faad 	bl	8000618 <__aeabi_dmul>
 80150be:	a372      	add	r3, pc, #456	@ (adr r3, 8015288 <__ieee754_pow+0x758>)
 80150c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150c4:	f7eb f8f2 	bl	80002ac <__adddf3>
 80150c8:	4622      	mov	r2, r4
 80150ca:	4606      	mov	r6, r0
 80150cc:	460f      	mov	r7, r1
 80150ce:	462b      	mov	r3, r5
 80150d0:	4620      	mov	r0, r4
 80150d2:	4629      	mov	r1, r5
 80150d4:	f7eb faa0 	bl	8000618 <__aeabi_dmul>
 80150d8:	4602      	mov	r2, r0
 80150da:	460b      	mov	r3, r1
 80150dc:	4630      	mov	r0, r6
 80150de:	4639      	mov	r1, r7
 80150e0:	f7eb fa9a 	bl	8000618 <__aeabi_dmul>
 80150e4:	465a      	mov	r2, fp
 80150e6:	4604      	mov	r4, r0
 80150e8:	460d      	mov	r5, r1
 80150ea:	464b      	mov	r3, r9
 80150ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80150f0:	f7eb f8dc 	bl	80002ac <__adddf3>
 80150f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80150f8:	f7eb fa8e 	bl	8000618 <__aeabi_dmul>
 80150fc:	4622      	mov	r2, r4
 80150fe:	462b      	mov	r3, r5
 8015100:	f7eb f8d4 	bl	80002ac <__adddf3>
 8015104:	465a      	mov	r2, fp
 8015106:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801510a:	464b      	mov	r3, r9
 801510c:	4658      	mov	r0, fp
 801510e:	4649      	mov	r1, r9
 8015110:	f7eb fa82 	bl	8000618 <__aeabi_dmul>
 8015114:	4b6a      	ldr	r3, [pc, #424]	@ (80152c0 <__ieee754_pow+0x790>)
 8015116:	2200      	movs	r2, #0
 8015118:	4606      	mov	r6, r0
 801511a:	460f      	mov	r7, r1
 801511c:	f7eb f8c6 	bl	80002ac <__adddf3>
 8015120:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015124:	f7eb f8c2 	bl	80002ac <__adddf3>
 8015128:	46d8      	mov	r8, fp
 801512a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801512e:	460d      	mov	r5, r1
 8015130:	465a      	mov	r2, fp
 8015132:	460b      	mov	r3, r1
 8015134:	4640      	mov	r0, r8
 8015136:	4649      	mov	r1, r9
 8015138:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801513c:	f7eb fa6c 	bl	8000618 <__aeabi_dmul>
 8015140:	465c      	mov	r4, fp
 8015142:	4680      	mov	r8, r0
 8015144:	4689      	mov	r9, r1
 8015146:	4b5e      	ldr	r3, [pc, #376]	@ (80152c0 <__ieee754_pow+0x790>)
 8015148:	2200      	movs	r2, #0
 801514a:	4620      	mov	r0, r4
 801514c:	4629      	mov	r1, r5
 801514e:	f7eb f8ab 	bl	80002a8 <__aeabi_dsub>
 8015152:	4632      	mov	r2, r6
 8015154:	463b      	mov	r3, r7
 8015156:	f7eb f8a7 	bl	80002a8 <__aeabi_dsub>
 801515a:	4602      	mov	r2, r0
 801515c:	460b      	mov	r3, r1
 801515e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015162:	f7eb f8a1 	bl	80002a8 <__aeabi_dsub>
 8015166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801516a:	f7eb fa55 	bl	8000618 <__aeabi_dmul>
 801516e:	4622      	mov	r2, r4
 8015170:	4606      	mov	r6, r0
 8015172:	460f      	mov	r7, r1
 8015174:	462b      	mov	r3, r5
 8015176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801517a:	f7eb fa4d 	bl	8000618 <__aeabi_dmul>
 801517e:	4602      	mov	r2, r0
 8015180:	460b      	mov	r3, r1
 8015182:	4630      	mov	r0, r6
 8015184:	4639      	mov	r1, r7
 8015186:	f7eb f891 	bl	80002ac <__adddf3>
 801518a:	4606      	mov	r6, r0
 801518c:	460f      	mov	r7, r1
 801518e:	4602      	mov	r2, r0
 8015190:	460b      	mov	r3, r1
 8015192:	4640      	mov	r0, r8
 8015194:	4649      	mov	r1, r9
 8015196:	f7eb f889 	bl	80002ac <__adddf3>
 801519a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801519e:	a33c      	add	r3, pc, #240	@ (adr r3, 8015290 <__ieee754_pow+0x760>)
 80151a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151a4:	4658      	mov	r0, fp
 80151a6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80151aa:	460d      	mov	r5, r1
 80151ac:	f7eb fa34 	bl	8000618 <__aeabi_dmul>
 80151b0:	465c      	mov	r4, fp
 80151b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80151b6:	4642      	mov	r2, r8
 80151b8:	464b      	mov	r3, r9
 80151ba:	4620      	mov	r0, r4
 80151bc:	4629      	mov	r1, r5
 80151be:	f7eb f873 	bl	80002a8 <__aeabi_dsub>
 80151c2:	4602      	mov	r2, r0
 80151c4:	460b      	mov	r3, r1
 80151c6:	4630      	mov	r0, r6
 80151c8:	4639      	mov	r1, r7
 80151ca:	f7eb f86d 	bl	80002a8 <__aeabi_dsub>
 80151ce:	a332      	add	r3, pc, #200	@ (adr r3, 8015298 <__ieee754_pow+0x768>)
 80151d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151d4:	f7eb fa20 	bl	8000618 <__aeabi_dmul>
 80151d8:	a331      	add	r3, pc, #196	@ (adr r3, 80152a0 <__ieee754_pow+0x770>)
 80151da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151de:	4606      	mov	r6, r0
 80151e0:	460f      	mov	r7, r1
 80151e2:	4620      	mov	r0, r4
 80151e4:	4629      	mov	r1, r5
 80151e6:	f7eb fa17 	bl	8000618 <__aeabi_dmul>
 80151ea:	4602      	mov	r2, r0
 80151ec:	460b      	mov	r3, r1
 80151ee:	4630      	mov	r0, r6
 80151f0:	4639      	mov	r1, r7
 80151f2:	f7eb f85b 	bl	80002ac <__adddf3>
 80151f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80151f8:	4b32      	ldr	r3, [pc, #200]	@ (80152c4 <__ieee754_pow+0x794>)
 80151fa:	4413      	add	r3, r2
 80151fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015200:	f7eb f854 	bl	80002ac <__adddf3>
 8015204:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015208:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801520a:	f7eb f99b 	bl	8000544 <__aeabi_i2d>
 801520e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015210:	4b2d      	ldr	r3, [pc, #180]	@ (80152c8 <__ieee754_pow+0x798>)
 8015212:	4413      	add	r3, r2
 8015214:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015218:	4606      	mov	r6, r0
 801521a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801521e:	460f      	mov	r7, r1
 8015220:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015224:	f7eb f842 	bl	80002ac <__adddf3>
 8015228:	4642      	mov	r2, r8
 801522a:	464b      	mov	r3, r9
 801522c:	f7eb f83e 	bl	80002ac <__adddf3>
 8015230:	4632      	mov	r2, r6
 8015232:	463b      	mov	r3, r7
 8015234:	f7eb f83a 	bl	80002ac <__adddf3>
 8015238:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801523c:	4632      	mov	r2, r6
 801523e:	463b      	mov	r3, r7
 8015240:	4658      	mov	r0, fp
 8015242:	460d      	mov	r5, r1
 8015244:	f7eb f830 	bl	80002a8 <__aeabi_dsub>
 8015248:	4642      	mov	r2, r8
 801524a:	464b      	mov	r3, r9
 801524c:	f7eb f82c 	bl	80002a8 <__aeabi_dsub>
 8015250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015254:	f7eb f828 	bl	80002a8 <__aeabi_dsub>
 8015258:	465c      	mov	r4, fp
 801525a:	4602      	mov	r2, r0
 801525c:	e036      	b.n	80152cc <__ieee754_pow+0x79c>
 801525e:	bf00      	nop
 8015260:	4a454eef 	.word	0x4a454eef
 8015264:	3fca7e28 	.word	0x3fca7e28
 8015268:	93c9db65 	.word	0x93c9db65
 801526c:	3fcd864a 	.word	0x3fcd864a
 8015270:	a91d4101 	.word	0xa91d4101
 8015274:	3fd17460 	.word	0x3fd17460
 8015278:	518f264d 	.word	0x518f264d
 801527c:	3fd55555 	.word	0x3fd55555
 8015280:	db6fabff 	.word	0xdb6fabff
 8015284:	3fdb6db6 	.word	0x3fdb6db6
 8015288:	33333303 	.word	0x33333303
 801528c:	3fe33333 	.word	0x3fe33333
 8015290:	e0000000 	.word	0xe0000000
 8015294:	3feec709 	.word	0x3feec709
 8015298:	dc3a03fd 	.word	0xdc3a03fd
 801529c:	3feec709 	.word	0x3feec709
 80152a0:	145b01f5 	.word	0x145b01f5
 80152a4:	be3e2fe0 	.word	0xbe3e2fe0
 80152a8:	7ff00000 	.word	0x7ff00000
 80152ac:	43400000 	.word	0x43400000
 80152b0:	0003988e 	.word	0x0003988e
 80152b4:	000bb679 	.word	0x000bb679
 80152b8:	08016050 	.word	0x08016050
 80152bc:	3ff00000 	.word	0x3ff00000
 80152c0:	40080000 	.word	0x40080000
 80152c4:	08016030 	.word	0x08016030
 80152c8:	08016040 	.word	0x08016040
 80152cc:	460b      	mov	r3, r1
 80152ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80152d2:	e5d7      	b.n	8014e84 <__ieee754_pow+0x354>
 80152d4:	f04f 0a01 	mov.w	sl, #1
 80152d8:	e65e      	b.n	8014f98 <__ieee754_pow+0x468>
 80152da:	a3b4      	add	r3, pc, #720	@ (adr r3, 80155ac <__ieee754_pow+0xa7c>)
 80152dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152e0:	4630      	mov	r0, r6
 80152e2:	4639      	mov	r1, r7
 80152e4:	f7ea ffe2 	bl	80002ac <__adddf3>
 80152e8:	4642      	mov	r2, r8
 80152ea:	e9cd 0100 	strd	r0, r1, [sp]
 80152ee:	464b      	mov	r3, r9
 80152f0:	4620      	mov	r0, r4
 80152f2:	4629      	mov	r1, r5
 80152f4:	f7ea ffd8 	bl	80002a8 <__aeabi_dsub>
 80152f8:	4602      	mov	r2, r0
 80152fa:	460b      	mov	r3, r1
 80152fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015300:	f7eb fc1a 	bl	8000b38 <__aeabi_dcmpgt>
 8015304:	2800      	cmp	r0, #0
 8015306:	f47f ae00 	bne.w	8014f0a <__ieee754_pow+0x3da>
 801530a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801530e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8015312:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8015316:	fa43 fa0a 	asr.w	sl, r3, sl
 801531a:	44da      	add	sl, fp
 801531c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8015320:	489d      	ldr	r0, [pc, #628]	@ (8015598 <__ieee754_pow+0xa68>)
 8015322:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8015326:	4108      	asrs	r0, r1
 8015328:	ea00 030a 	and.w	r3, r0, sl
 801532c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8015330:	f1c1 0114 	rsb	r1, r1, #20
 8015334:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8015338:	fa4a fa01 	asr.w	sl, sl, r1
 801533c:	f1bb 0f00 	cmp.w	fp, #0
 8015340:	4640      	mov	r0, r8
 8015342:	4649      	mov	r1, r9
 8015344:	f04f 0200 	mov.w	r2, #0
 8015348:	bfb8      	it	lt
 801534a:	f1ca 0a00 	rsblt	sl, sl, #0
 801534e:	f7ea ffab 	bl	80002a8 <__aeabi_dsub>
 8015352:	4680      	mov	r8, r0
 8015354:	4689      	mov	r9, r1
 8015356:	4632      	mov	r2, r6
 8015358:	463b      	mov	r3, r7
 801535a:	4640      	mov	r0, r8
 801535c:	4649      	mov	r1, r9
 801535e:	f7ea ffa5 	bl	80002ac <__adddf3>
 8015362:	2400      	movs	r4, #0
 8015364:	a37c      	add	r3, pc, #496	@ (adr r3, 8015558 <__ieee754_pow+0xa28>)
 8015366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801536a:	4620      	mov	r0, r4
 801536c:	460d      	mov	r5, r1
 801536e:	f7eb f953 	bl	8000618 <__aeabi_dmul>
 8015372:	4642      	mov	r2, r8
 8015374:	e9cd 0100 	strd	r0, r1, [sp]
 8015378:	464b      	mov	r3, r9
 801537a:	4620      	mov	r0, r4
 801537c:	4629      	mov	r1, r5
 801537e:	f7ea ff93 	bl	80002a8 <__aeabi_dsub>
 8015382:	4602      	mov	r2, r0
 8015384:	460b      	mov	r3, r1
 8015386:	4630      	mov	r0, r6
 8015388:	4639      	mov	r1, r7
 801538a:	f7ea ff8d 	bl	80002a8 <__aeabi_dsub>
 801538e:	a374      	add	r3, pc, #464	@ (adr r3, 8015560 <__ieee754_pow+0xa30>)
 8015390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015394:	f7eb f940 	bl	8000618 <__aeabi_dmul>
 8015398:	a373      	add	r3, pc, #460	@ (adr r3, 8015568 <__ieee754_pow+0xa38>)
 801539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801539e:	4680      	mov	r8, r0
 80153a0:	4689      	mov	r9, r1
 80153a2:	4620      	mov	r0, r4
 80153a4:	4629      	mov	r1, r5
 80153a6:	f7eb f937 	bl	8000618 <__aeabi_dmul>
 80153aa:	4602      	mov	r2, r0
 80153ac:	460b      	mov	r3, r1
 80153ae:	4640      	mov	r0, r8
 80153b0:	4649      	mov	r1, r9
 80153b2:	f7ea ff7b 	bl	80002ac <__adddf3>
 80153b6:	4604      	mov	r4, r0
 80153b8:	460d      	mov	r5, r1
 80153ba:	4602      	mov	r2, r0
 80153bc:	460b      	mov	r3, r1
 80153be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153c2:	f7ea ff73 	bl	80002ac <__adddf3>
 80153c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153ca:	4680      	mov	r8, r0
 80153cc:	4689      	mov	r9, r1
 80153ce:	f7ea ff6b 	bl	80002a8 <__aeabi_dsub>
 80153d2:	4602      	mov	r2, r0
 80153d4:	460b      	mov	r3, r1
 80153d6:	4620      	mov	r0, r4
 80153d8:	4629      	mov	r1, r5
 80153da:	f7ea ff65 	bl	80002a8 <__aeabi_dsub>
 80153de:	4642      	mov	r2, r8
 80153e0:	4606      	mov	r6, r0
 80153e2:	460f      	mov	r7, r1
 80153e4:	464b      	mov	r3, r9
 80153e6:	4640      	mov	r0, r8
 80153e8:	4649      	mov	r1, r9
 80153ea:	f7eb f915 	bl	8000618 <__aeabi_dmul>
 80153ee:	a360      	add	r3, pc, #384	@ (adr r3, 8015570 <__ieee754_pow+0xa40>)
 80153f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f4:	4604      	mov	r4, r0
 80153f6:	460d      	mov	r5, r1
 80153f8:	f7eb f90e 	bl	8000618 <__aeabi_dmul>
 80153fc:	a35e      	add	r3, pc, #376	@ (adr r3, 8015578 <__ieee754_pow+0xa48>)
 80153fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015402:	f7ea ff51 	bl	80002a8 <__aeabi_dsub>
 8015406:	4622      	mov	r2, r4
 8015408:	462b      	mov	r3, r5
 801540a:	f7eb f905 	bl	8000618 <__aeabi_dmul>
 801540e:	a35c      	add	r3, pc, #368	@ (adr r3, 8015580 <__ieee754_pow+0xa50>)
 8015410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015414:	f7ea ff4a 	bl	80002ac <__adddf3>
 8015418:	4622      	mov	r2, r4
 801541a:	462b      	mov	r3, r5
 801541c:	f7eb f8fc 	bl	8000618 <__aeabi_dmul>
 8015420:	a359      	add	r3, pc, #356	@ (adr r3, 8015588 <__ieee754_pow+0xa58>)
 8015422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015426:	f7ea ff3f 	bl	80002a8 <__aeabi_dsub>
 801542a:	4622      	mov	r2, r4
 801542c:	462b      	mov	r3, r5
 801542e:	f7eb f8f3 	bl	8000618 <__aeabi_dmul>
 8015432:	a357      	add	r3, pc, #348	@ (adr r3, 8015590 <__ieee754_pow+0xa60>)
 8015434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015438:	f7ea ff38 	bl	80002ac <__adddf3>
 801543c:	4622      	mov	r2, r4
 801543e:	462b      	mov	r3, r5
 8015440:	f7eb f8ea 	bl	8000618 <__aeabi_dmul>
 8015444:	4602      	mov	r2, r0
 8015446:	460b      	mov	r3, r1
 8015448:	4640      	mov	r0, r8
 801544a:	4649      	mov	r1, r9
 801544c:	f7ea ff2c 	bl	80002a8 <__aeabi_dsub>
 8015450:	4604      	mov	r4, r0
 8015452:	460d      	mov	r5, r1
 8015454:	4602      	mov	r2, r0
 8015456:	460b      	mov	r3, r1
 8015458:	4640      	mov	r0, r8
 801545a:	4649      	mov	r1, r9
 801545c:	f7eb f8dc 	bl	8000618 <__aeabi_dmul>
 8015460:	2200      	movs	r2, #0
 8015462:	e9cd 0100 	strd	r0, r1, [sp]
 8015466:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801546a:	4620      	mov	r0, r4
 801546c:	4629      	mov	r1, r5
 801546e:	f7ea ff1b 	bl	80002a8 <__aeabi_dsub>
 8015472:	4602      	mov	r2, r0
 8015474:	460b      	mov	r3, r1
 8015476:	e9dd 0100 	ldrd	r0, r1, [sp]
 801547a:	f7eb f9f7 	bl	800086c <__aeabi_ddiv>
 801547e:	4632      	mov	r2, r6
 8015480:	4604      	mov	r4, r0
 8015482:	460d      	mov	r5, r1
 8015484:	463b      	mov	r3, r7
 8015486:	4640      	mov	r0, r8
 8015488:	4649      	mov	r1, r9
 801548a:	f7eb f8c5 	bl	8000618 <__aeabi_dmul>
 801548e:	4632      	mov	r2, r6
 8015490:	463b      	mov	r3, r7
 8015492:	f7ea ff0b 	bl	80002ac <__adddf3>
 8015496:	4602      	mov	r2, r0
 8015498:	460b      	mov	r3, r1
 801549a:	4620      	mov	r0, r4
 801549c:	4629      	mov	r1, r5
 801549e:	f7ea ff03 	bl	80002a8 <__aeabi_dsub>
 80154a2:	4642      	mov	r2, r8
 80154a4:	464b      	mov	r3, r9
 80154a6:	f7ea feff 	bl	80002a8 <__aeabi_dsub>
 80154aa:	460b      	mov	r3, r1
 80154ac:	4602      	mov	r2, r0
 80154ae:	493b      	ldr	r1, [pc, #236]	@ (801559c <__ieee754_pow+0xa6c>)
 80154b0:	2000      	movs	r0, #0
 80154b2:	f7ea fef9 	bl	80002a8 <__aeabi_dsub>
 80154b6:	ec41 0b10 	vmov	d0, r0, r1
 80154ba:	ee10 3a90 	vmov	r3, s1
 80154be:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80154c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80154c6:	da30      	bge.n	801552a <__ieee754_pow+0x9fa>
 80154c8:	4650      	mov	r0, sl
 80154ca:	f000 f87d 	bl	80155c8 <scalbn>
 80154ce:	ec51 0b10 	vmov	r0, r1, d0
 80154d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80154d6:	f7ff bbd2 	b.w	8014c7e <__ieee754_pow+0x14e>
 80154da:	4c31      	ldr	r4, [pc, #196]	@ (80155a0 <__ieee754_pow+0xa70>)
 80154dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80154e0:	42a3      	cmp	r3, r4
 80154e2:	d91a      	bls.n	801551a <__ieee754_pow+0x9ea>
 80154e4:	4b2f      	ldr	r3, [pc, #188]	@ (80155a4 <__ieee754_pow+0xa74>)
 80154e6:	440b      	add	r3, r1
 80154e8:	4303      	orrs	r3, r0
 80154ea:	d009      	beq.n	8015500 <__ieee754_pow+0x9d0>
 80154ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80154f0:	2200      	movs	r2, #0
 80154f2:	2300      	movs	r3, #0
 80154f4:	f7eb fb02 	bl	8000afc <__aeabi_dcmplt>
 80154f8:	3800      	subs	r0, #0
 80154fa:	bf18      	it	ne
 80154fc:	2001      	movne	r0, #1
 80154fe:	e42b      	b.n	8014d58 <__ieee754_pow+0x228>
 8015500:	4642      	mov	r2, r8
 8015502:	464b      	mov	r3, r9
 8015504:	f7ea fed0 	bl	80002a8 <__aeabi_dsub>
 8015508:	4632      	mov	r2, r6
 801550a:	463b      	mov	r3, r7
 801550c:	f7eb fb0a 	bl	8000b24 <__aeabi_dcmpge>
 8015510:	2800      	cmp	r0, #0
 8015512:	d1eb      	bne.n	80154ec <__ieee754_pow+0x9bc>
 8015514:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80155b4 <__ieee754_pow+0xa84>
 8015518:	e6f7      	b.n	801530a <__ieee754_pow+0x7da>
 801551a:	469a      	mov	sl, r3
 801551c:	4b22      	ldr	r3, [pc, #136]	@ (80155a8 <__ieee754_pow+0xa78>)
 801551e:	459a      	cmp	sl, r3
 8015520:	f63f aef3 	bhi.w	801530a <__ieee754_pow+0x7da>
 8015524:	f8dd a010 	ldr.w	sl, [sp, #16]
 8015528:	e715      	b.n	8015356 <__ieee754_pow+0x826>
 801552a:	ec51 0b10 	vmov	r0, r1, d0
 801552e:	4619      	mov	r1, r3
 8015530:	e7cf      	b.n	80154d2 <__ieee754_pow+0x9a2>
 8015532:	491a      	ldr	r1, [pc, #104]	@ (801559c <__ieee754_pow+0xa6c>)
 8015534:	2000      	movs	r0, #0
 8015536:	f7ff bb18 	b.w	8014b6a <__ieee754_pow+0x3a>
 801553a:	2000      	movs	r0, #0
 801553c:	2100      	movs	r1, #0
 801553e:	f7ff bb14 	b.w	8014b6a <__ieee754_pow+0x3a>
 8015542:	4630      	mov	r0, r6
 8015544:	4639      	mov	r1, r7
 8015546:	f7ff bb10 	b.w	8014b6a <__ieee754_pow+0x3a>
 801554a:	460c      	mov	r4, r1
 801554c:	f7ff bb5e 	b.w	8014c0c <__ieee754_pow+0xdc>
 8015550:	2400      	movs	r4, #0
 8015552:	f7ff bb49 	b.w	8014be8 <__ieee754_pow+0xb8>
 8015556:	bf00      	nop
 8015558:	00000000 	.word	0x00000000
 801555c:	3fe62e43 	.word	0x3fe62e43
 8015560:	fefa39ef 	.word	0xfefa39ef
 8015564:	3fe62e42 	.word	0x3fe62e42
 8015568:	0ca86c39 	.word	0x0ca86c39
 801556c:	be205c61 	.word	0xbe205c61
 8015570:	72bea4d0 	.word	0x72bea4d0
 8015574:	3e663769 	.word	0x3e663769
 8015578:	c5d26bf1 	.word	0xc5d26bf1
 801557c:	3ebbbd41 	.word	0x3ebbbd41
 8015580:	af25de2c 	.word	0xaf25de2c
 8015584:	3f11566a 	.word	0x3f11566a
 8015588:	16bebd93 	.word	0x16bebd93
 801558c:	3f66c16c 	.word	0x3f66c16c
 8015590:	5555553e 	.word	0x5555553e
 8015594:	3fc55555 	.word	0x3fc55555
 8015598:	fff00000 	.word	0xfff00000
 801559c:	3ff00000 	.word	0x3ff00000
 80155a0:	4090cbff 	.word	0x4090cbff
 80155a4:	3f6f3400 	.word	0x3f6f3400
 80155a8:	3fe00000 	.word	0x3fe00000
 80155ac:	652b82fe 	.word	0x652b82fe
 80155b0:	3c971547 	.word	0x3c971547
 80155b4:	4090cc00 	.word	0x4090cc00

080155b8 <fabs>:
 80155b8:	ec51 0b10 	vmov	r0, r1, d0
 80155bc:	4602      	mov	r2, r0
 80155be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80155c2:	ec43 2b10 	vmov	d0, r2, r3
 80155c6:	4770      	bx	lr

080155c8 <scalbn>:
 80155c8:	b570      	push	{r4, r5, r6, lr}
 80155ca:	ec55 4b10 	vmov	r4, r5, d0
 80155ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80155d2:	4606      	mov	r6, r0
 80155d4:	462b      	mov	r3, r5
 80155d6:	b991      	cbnz	r1, 80155fe <scalbn+0x36>
 80155d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80155dc:	4323      	orrs	r3, r4
 80155de:	d03d      	beq.n	801565c <scalbn+0x94>
 80155e0:	4b35      	ldr	r3, [pc, #212]	@ (80156b8 <scalbn+0xf0>)
 80155e2:	4620      	mov	r0, r4
 80155e4:	4629      	mov	r1, r5
 80155e6:	2200      	movs	r2, #0
 80155e8:	f7eb f816 	bl	8000618 <__aeabi_dmul>
 80155ec:	4b33      	ldr	r3, [pc, #204]	@ (80156bc <scalbn+0xf4>)
 80155ee:	429e      	cmp	r6, r3
 80155f0:	4604      	mov	r4, r0
 80155f2:	460d      	mov	r5, r1
 80155f4:	da0f      	bge.n	8015616 <scalbn+0x4e>
 80155f6:	a328      	add	r3, pc, #160	@ (adr r3, 8015698 <scalbn+0xd0>)
 80155f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155fc:	e01e      	b.n	801563c <scalbn+0x74>
 80155fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8015602:	4291      	cmp	r1, r2
 8015604:	d10b      	bne.n	801561e <scalbn+0x56>
 8015606:	4622      	mov	r2, r4
 8015608:	4620      	mov	r0, r4
 801560a:	4629      	mov	r1, r5
 801560c:	f7ea fe4e 	bl	80002ac <__adddf3>
 8015610:	4604      	mov	r4, r0
 8015612:	460d      	mov	r5, r1
 8015614:	e022      	b.n	801565c <scalbn+0x94>
 8015616:	460b      	mov	r3, r1
 8015618:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801561c:	3936      	subs	r1, #54	@ 0x36
 801561e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8015622:	4296      	cmp	r6, r2
 8015624:	dd0d      	ble.n	8015642 <scalbn+0x7a>
 8015626:	2d00      	cmp	r5, #0
 8015628:	a11d      	add	r1, pc, #116	@ (adr r1, 80156a0 <scalbn+0xd8>)
 801562a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801562e:	da02      	bge.n	8015636 <scalbn+0x6e>
 8015630:	a11d      	add	r1, pc, #116	@ (adr r1, 80156a8 <scalbn+0xe0>)
 8015632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015636:	a31a      	add	r3, pc, #104	@ (adr r3, 80156a0 <scalbn+0xd8>)
 8015638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801563c:	f7ea ffec 	bl	8000618 <__aeabi_dmul>
 8015640:	e7e6      	b.n	8015610 <scalbn+0x48>
 8015642:	1872      	adds	r2, r6, r1
 8015644:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8015648:	428a      	cmp	r2, r1
 801564a:	dcec      	bgt.n	8015626 <scalbn+0x5e>
 801564c:	2a00      	cmp	r2, #0
 801564e:	dd08      	ble.n	8015662 <scalbn+0x9a>
 8015650:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015654:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015658:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801565c:	ec45 4b10 	vmov	d0, r4, r5
 8015660:	bd70      	pop	{r4, r5, r6, pc}
 8015662:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8015666:	da08      	bge.n	801567a <scalbn+0xb2>
 8015668:	2d00      	cmp	r5, #0
 801566a:	a10b      	add	r1, pc, #44	@ (adr r1, 8015698 <scalbn+0xd0>)
 801566c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015670:	dac1      	bge.n	80155f6 <scalbn+0x2e>
 8015672:	a10f      	add	r1, pc, #60	@ (adr r1, 80156b0 <scalbn+0xe8>)
 8015674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015678:	e7bd      	b.n	80155f6 <scalbn+0x2e>
 801567a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801567e:	3236      	adds	r2, #54	@ 0x36
 8015680:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015684:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015688:	4620      	mov	r0, r4
 801568a:	4b0d      	ldr	r3, [pc, #52]	@ (80156c0 <scalbn+0xf8>)
 801568c:	4629      	mov	r1, r5
 801568e:	2200      	movs	r2, #0
 8015690:	e7d4      	b.n	801563c <scalbn+0x74>
 8015692:	bf00      	nop
 8015694:	f3af 8000 	nop.w
 8015698:	c2f8f359 	.word	0xc2f8f359
 801569c:	01a56e1f 	.word	0x01a56e1f
 80156a0:	8800759c 	.word	0x8800759c
 80156a4:	7e37e43c 	.word	0x7e37e43c
 80156a8:	8800759c 	.word	0x8800759c
 80156ac:	fe37e43c 	.word	0xfe37e43c
 80156b0:	c2f8f359 	.word	0xc2f8f359
 80156b4:	81a56e1f 	.word	0x81a56e1f
 80156b8:	43500000 	.word	0x43500000
 80156bc:	ffff3cb0 	.word	0xffff3cb0
 80156c0:	3c900000 	.word	0x3c900000

080156c4 <with_errno>:
 80156c4:	b510      	push	{r4, lr}
 80156c6:	ed2d 8b02 	vpush	{d8}
 80156ca:	eeb0 8a40 	vmov.f32	s16, s0
 80156ce:	eef0 8a60 	vmov.f32	s17, s1
 80156d2:	4604      	mov	r4, r0
 80156d4:	f7fb f9fe 	bl	8010ad4 <__errno>
 80156d8:	eeb0 0a48 	vmov.f32	s0, s16
 80156dc:	eef0 0a68 	vmov.f32	s1, s17
 80156e0:	ecbd 8b02 	vpop	{d8}
 80156e4:	6004      	str	r4, [r0, #0]
 80156e6:	bd10      	pop	{r4, pc}

080156e8 <xflow>:
 80156e8:	4603      	mov	r3, r0
 80156ea:	b507      	push	{r0, r1, r2, lr}
 80156ec:	ec51 0b10 	vmov	r0, r1, d0
 80156f0:	b183      	cbz	r3, 8015714 <xflow+0x2c>
 80156f2:	4602      	mov	r2, r0
 80156f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80156f8:	e9cd 2300 	strd	r2, r3, [sp]
 80156fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015700:	f7ea ff8a 	bl	8000618 <__aeabi_dmul>
 8015704:	ec41 0b10 	vmov	d0, r0, r1
 8015708:	2022      	movs	r0, #34	@ 0x22
 801570a:	b003      	add	sp, #12
 801570c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015710:	f7ff bfd8 	b.w	80156c4 <with_errno>
 8015714:	4602      	mov	r2, r0
 8015716:	460b      	mov	r3, r1
 8015718:	e7ee      	b.n	80156f8 <xflow+0x10>
 801571a:	0000      	movs	r0, r0
 801571c:	0000      	movs	r0, r0
	...

08015720 <__math_uflow>:
 8015720:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015728 <__math_uflow+0x8>
 8015724:	f7ff bfe0 	b.w	80156e8 <xflow>
 8015728:	00000000 	.word	0x00000000
 801572c:	10000000 	.word	0x10000000

08015730 <__math_oflow>:
 8015730:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015738 <__math_oflow+0x8>
 8015734:	f7ff bfd8 	b.w	80156e8 <xflow>
 8015738:	00000000 	.word	0x00000000
 801573c:	70000000 	.word	0x70000000

08015740 <_init>:
 8015740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015742:	bf00      	nop
 8015744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015746:	bc08      	pop	{r3}
 8015748:	469e      	mov	lr, r3
 801574a:	4770      	bx	lr

0801574c <_fini>:
 801574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801574e:	bf00      	nop
 8015750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015752:	bc08      	pop	{r3}
 8015754:	469e      	mov	lr, r3
 8015756:	4770      	bx	lr
